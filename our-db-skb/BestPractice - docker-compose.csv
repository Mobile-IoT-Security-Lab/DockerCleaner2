ID,Best Practice,Category,Description,Bad example,Good example,Source
0,Limit capabilities,Security,"You can enhance the security of Docker containers by modifying capabilities. Using the --cap-drop option, you can remove specific capabilities, and with the --cap-add option, you can add only the ones you need. It's important to avoid running containers with the --privileged flag, as this grants all Linux kernel capabilities to the container. The most secure setup is to drop all capabilities with --cap-drop all and then add only the required ones.The --privileged flag provides all capabilities to the container to which it is applied, and also lifts all the limitations enforced by the device cgroup controller. As a  consequence this the container has most of the rights of the underlying host. This flag only exists to allow for specific use cases (for example running Docker within Docker) and should not generally be used",ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html

CIS Docker Benchmark

https://medium.com/@imsrv01/why-you-should-avoid-using-the-latest-tag-on-container-images-5212f3af10cb "
1,Prevent in-container privilege escalation,Security,Always run your docker images with --security-opt=no-new-privileges in order to prevent privilege escalation. This will prevent the container from gaining new privileges via setuid or setgid binaries.,ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
2,Be mindful of Inter-Container Connectivity,Networking,"ICC is enabled by default, allowing all containers to communicate with each other through the docker0 bridged network. Instead of using the --icc=false flag with the Docker daemon, which completely disables inter-container communication, consider defining specific network configurations. This can be achieved by creating custom Docker networks and specifying which containers should be attached to them. This method provides more granular control over container communication.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
3,Limit resources (maximum number of processes),Security,"Limiting the maximum number of processes (nproc) that a container can run is a security measure to prevent excessive use of system resources. If a container can create an unlimited number of processes, it could cause a Denial of Service (DoS) by exhausting system resources, such as memory and CPU time, that may be needed by other containers or the host operating system itself. By setting a limit on the number of processes, you control the amount of system resources that a container can consume, providing greater system stability and security.",ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
CIS Docker Benchmark
https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory"
4,Set filesystem to read-only,Security,The rule of using a read-only filesystem for containers is a best practice that improves security by reducing the possibility that a container can write to disk unauthorizedly. This can prevent attacks and unwanted changes to container data.,ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
CIS Docker Benchmark
"
5,Set volumes to read-only,Security,"Setting volumes as read-only is a critical practice for ensuring container security, integrity, and performance. By protecting data from accidental or malicious changes, you reduce the risk of compromise and ensure more predictable and stable operation of containerized applications.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
6,Utilize Docker Secrets for Sensitive Data Management,Security,"Docker Secrets provide a secure way to store and manage sensitive data such as passwords, tokens, and SSH keys. Using Docker Secrets helps in avoiding the exposure of sensitive data in container images or in runtime commands.",ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html

CIS Docker Benchmark"
7,Ensure that the 'on-failure' container restart policy is set to '5' ,Security,"Continuously attempting to restart a container can potentially lead to a denial of service on the host system. This behavior can facilitate a distributed denial of service attack, especially if multiple containers are running on the same host. Moreover, ignoring the container's exit status and always attempting to restart it without investigation can prevent understanding the underlying issue causing the container to terminate. Instead of indefinitely restarting the container, it is advisable to use the ""on-failure"" restart policy, limiting the number of restart attempts to a maximum of five. This approach encourages investigating the root cause of the container termination, rather than merely trying to restart it repeatedly.",ðŸ”—,ðŸ”—,Best_Practices_Sicurezza_E_Ottimizzazioni
8,Do Not Share the Hostâ€™s Network Namespace,Security,"Using the --net=host option causes a container to share the network namespace with the host. This means that the container uses the host's network interface directly, bypassing the network isolation typically provided by Docker. There are several reasons for not sharing the host's network namespace: 
- Network isolation: By default, Docker creates an isolated network for each container. This isolation protects the container and host from potential network vulnerabilities. If a container shares the host's network (--net=host), it loses this isolation.
- Security: If a container is compromised, the attacker can directly access the host's network and potentially attack other services and containers.
- Port conflicts: By using --net=host, the services inside the container share the same ports as the host. This can cause port conflicts if multiple services use the same port.
- Visibility and management: The network isolation provided by Docker makes it easier to manage and monitor containers. With --net=host, it can be more difficult to trace network traffic and diagnose problems.",ðŸ”—,ðŸ”—,"Best_Practices_Sicurezza_E_Ottimizzazioni
CIS Docker Benchmark"
9,A Container Must Not Mount the host's priviledged ports,Security,A Container Must Not Mount the host's priviledged ports,ðŸ”—,ðŸ”—,Container_Image_Creation_and_Deployment_Guide
10,"Ensure data exchanged between containers are encrypted on
different nodes on the overlay network",Security,"By default, data exchanged between containers on different nodes on the overlay network
is not encrypted. This could potentially expose traffic between the container nodes",ðŸ”—,ðŸ”—,CIS Docker Benchmark
11,"Ensure that Docker's default bridge ""docker0"" is not used",Security,"Docker connects virtual interfaces created in bridge mode to a common bridge called docker0. This default networking model is vulnerable to ARP spoofing and MAC flooding attacks because no filtering is applied. Using user-defined networks, you can configure networks more securely and manage them according to organizational security policies.",ðŸ”—,ðŸ”—,CIS Docker Benchmark
12,Label Selectors,Performance,"Using label selectors, containers can be prioritized based on service characteristics or user community, such as service type (management vs. customer) or data type (HR vs. Sales). Labels help ensure proper execution locations, reducing data spillage and resource sharing.",ðŸ”—,ðŸ”—,Container_Image_Creation_and_Deployment_Guide
13,Container image executed as non-root user,Security,"Docker allows to share a directory between the Docker host and a guest container  without limiting the access rights of the container. This means that a user can start a  container and map the / directory on the host to the container. The container would  then be able to modify the host file system without any restrictions. This means that  a user could gain elevated privileges simply by being a member of the docker group and  subsequently start a container which maps the root / directory on the host. 
NOTE: If you specify the non-root user in the docker-compose.yaml file, you can override the user defined in the Dockerfile for specific contexts or environments. This approach provides more flexibility, allowing you to change the user at runtime without modifying the container image.",ðŸ”—,ðŸ”—,Container_Image_Creation_and_Deployment_Guide
14,Use Linux Security Module,Security,"First of all, do not disable default security profile! Consider using security profile like seccomp or AppArmor",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
15,Ensure a USER directive is specified,Security,"1. Least Privilege Principle: Running applications as a non-root user ensures they have only the necessary permissions, minimizing potential damage if compromised.
2. Containment of Vulnerabilities: Non-root users have restricted permissions, reducing the risk of attackers exploiting system-level vulnerabilities.
3. Accidental Damage Prevention: Non-root users are less likely to cause serious harm to the host system or other containers due to restricted permissions.
4. Compliance and Best Practices: Aligns with security guidelines and regulatory standards, which often recommend or require running services as non-root users.
5. Separation of Duties: Clearly defines which parts of the Dockerfile require elevated privileges, promoting better security practices within the container.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
16,Ensure that container health is checked at runtime,Security,"The HEALTHCHECK statement in a Dockerfile or the --health-cmd option at container execution time allows you to monitor the health of the container. Based on the reported health status, you can take corrective actions if necessary. This ensures that containers are running properly and can be automatically repaired or restarted if problems occur.",ðŸ”—,ðŸ”—,CIS Docker Benchmark
17,Ensure the base image version is pinned,Security,Pinning the base image version allows you to control when updates are applied. This helps in managing security updates in a controlled manner rather than inadvertently incorporating changes that might introduce vulnerabilities or other issues.,ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
18,Ensure the OS packages versions are pinned,Security,"By pinning versions, you control when to update packages. This allows you to test updates in a controlled environment before deploying them, reducing the risk of inadvertently introducing vulnerabilities or other issues.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
19,Ensure mount propagation mode is not set to shared,Security,"Mount propagation mode allows mounting volumes in shared, slave or private mode on a container. Do not use shared mount propagation mode unless explicitly needed. 
A shared mount is replicated at all mounts and changes made at any mount point are propagated to all other mount points. Mounting a volume in shared mode does not restrict any other container from mounting and making changes to that volume. As this is likely not a desirable option from a security standpoint, this feature should not be used unless explicitly required. ",ðŸ”—,ðŸ”—,CIS Docker Benchmark
20,Trusted registry,Security,"Store the documented, signed images with their SBOMs in a secure registry that enforces strict access controls and supports metadata management.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
21,Keep the Docker daemon logging level at info,Security,"By default, the Docker daemon is configured to have a base logging level of info. This can be verified by checking the daemon configuration file /etc/docker/daemon.json for thelog-level key. If the key is not present, the default logging level is info. Additionally, if the docker daemon is started with the --log-level option, the value of the log-level key in the configuration file will be overridden. Setting an appropriate log level, configures the Docker daemon to log events that you would want to review later. A base log level of 'info' and above would capture all logs except the debug logs. Until and unless required, you should not run docker daemon at the 'debug' log level.",ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
22,Image provenance,Security,Document the origin and history of container images to ensure traceability and integrity,ðŸ”—,ðŸ”—,https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
23,"Ensure that host devices are not directly exposed to 
containers ",Security,"Avoiding direct exposure of host devices to containers is important to prevent unauthorized access and manipulation of host system devices. Using the --device option indiscriminately can allow containers to access and manipulate sensitive host devices without having to run the container in privileged mode, increasing the risk of compromise.",ðŸ”—,ðŸ”—,CIS Docker Benchmark
24,"Ensure that incoming container traffic is bound to a specific 
host interface ",Security,"Se un host ha piÃ¹ interfacce di rete, un container potrebbe potenzialmente accettare connessioni su qualsiasi interfaccia se i porti esposti sono legati all'indirizzo IP 0.0.0.0. Questo puÃ² rappresentare un rischio per la sicurezza, in quanto non si ha controllo su quale interfaccia venga utilizzata per accedere ai servizi. Assicurandosi che i porti siano legati a una specifica interfaccia, si puÃ² gestire meglio il flusso di traffico e applicare misure di sicurezza come firewall e IDS/IPS.",ðŸ”—,ðŸ”—,CIS Docker Benchmark
25,"Ensure sensitive host system directories are not mounted on 
containers ",Security,"If sensitive directories are mounted in read-write mode, it could be possible to make  changes to files within them. This has obvious security implications and should be avoided. In particular, sensitive directories are the following: 
/ 
/boot 
/dev 
/etc 
/lib 
/proc 
/sys 
/usr ",ðŸ”—,ðŸ”—,CIS Docker Benchmark
26," Enable only ports used for the service being
implemented",Security,"To minimize the attack surface, each container image should be a microservice, implementing only one service where possible. Many services require enabled ports for communication. Exposing ports unnecessary for service implementation allows the container to expand the attack surface by giving external malicious users information regarding applications and their versions that are enabled within the container, and possible vulnerabilities that might be used to attack the container.",ðŸ”—,ðŸ”—,"CIS Docker Benchmark
DevSecOps_Enterprise_Container_Image_Creation_and_Deployment_Guide"
27,Ensure that the memory usage for containers is limited ,Security,By default a container can use all of the memory on the host. You can use memory limit  mechanisms to prevent a denial of service occurring where one container consumes all of the hostâ€™s resources and other containers on the same host are therefore not able to function. Having no limit on memory usage can lead to issues where one container can easily make the whole system unstable and as a result unusable. ,ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
CIS Docker Benchmark
https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory"
28,Ensure that CPU priority is set appropriately on containers,Security,"Without proper CPU priority management, a container may monopolize CPU resources, making low-priority containers less responsive or even unresponsive. Configuring --cpu-shares helps to fairly distribute CPU resources based on business needs and priorities.",ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
CIS Docker Benchmark
https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory"
29,Limit resources ( Maximum number of file descriptors),Security,"File descriptors are system resources that represent open files or other kernel-managed input/output, such as network connections. Without a limit, a container can open an unlimited number of files or connections, potentially causing a Denial of Service (DoS) if all available resources are used. Setting a limit prevents a single container from consuming all of the system's file descriptor resources, protecting both the container and the host from failure or attack.",ðŸ”—,ðŸ”—,"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
CIS Docker Benchmark
https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory"