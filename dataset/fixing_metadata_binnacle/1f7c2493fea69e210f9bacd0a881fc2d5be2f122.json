{"seed":3349277756,"processedDockerfileHash":"839a841b9aa5451002d81e2694d711ce","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   ==================================================================\n#   module list\n#   ------------------------------------------------------------------\n#   darknet       latest (git)\n#   python        3.6    (apt)\n#   torch         latest (git)\n#   chainer       latest (pip)\n#   jupyter       latest (pip)\n#   mxnet         latest (pip)\n#   onnx          latest (pip)\n#   pytorch       latest (pip)\n#   tensorflow    latest (pip)\n#   theano        latest (git)\n#   keras         latest (pip)\n#   lasagne       latest (git)\n#   opencv        4.0.1  (git)\n#   sonnet        latest (pip)\n#   caffe         latest (git)\n#   cntk          latest (pip)\n#   ==================================================================\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nENV LANG=\"C.UTF-8\"\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" \\\n && PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" \\\n && GIT_CLONE=\"git clone --depth 10\" \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/nvidia-ml.list \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL build-essential apt-utils ca-certificates wget git vim \\\n && $GIT_CLONE https://github.com/Kitware/CMake ~/cmake \\\n && cd ~/cmake \\\n && ./bootstrap \\\n && make -j\"$( nproc ;)\" install \\\n && $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet \\\n && cd ~/darknet \\\n && sed -i 's/GPU=0/GPU=1/g' ~/darknet/Makefile \\\n && sed -i 's/CUDNN=0/CUDNN=1/g' ~/darknet/Makefile \\\n && make -j\"$( nproc ;)\" \\\n && cp ~/darknet/include/* /usr/local/include \\\n && cp ~/darknet/*.a /usr/local/lib \\\n && cp ~/darknet/*.so /usr/local/lib \\\n && cp ~/darknet/darknet /usr/local/bin \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL software-properties-common \\\n && add-apt-repository ppa:deadsnakes/ppa \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL python3.6 python3.6-dev python3-distutils-extra \\\n && wget -O ~/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python3.6 ~/get-pip.py \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python3 \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python \\\n && $PIP_INSTALL setuptools \\\n && $PIP_INSTALL numpy scipy pandas cloudpickle scikit-learn matplotlib Cython \\\n && export TORCH_NVCC_FLAGS=\"-D__CUDA_NO_HALF_OPERATORS__\" \\\n && $GIT_CLONE https://github.com/nagadomi/distro.git ~/torch --recursive \\\n && cd ~/torch/exe/luajit-rocks \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_LUAJIT21=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libjpeg-dev libpng-dev libreadline-dev \\\n && $GIT_CLONE https://github.com/Yonaba/Moses ~/moses \\\n && cd ~/moses \\\n && luarocks install rockspec/moses-1.6.1-1.rockspec \\\n && cd ~/torch \\\n && sed -i 's/extra\\/cudnn/extra\\/cudnn \\&\\& git checkout R7/' install.sh \\\n && sed -i 's/$PREFIX\\/bin\\/luarocks/luarocks/' install.sh \\\n && sed -i '/qt/d' install.sh \\\n && sed -i '/Installing Lua/,/^cd \\.\\.$/d' install.sh \\\n && sed -i '/path_to_nvidiasmi/,/^fi$/d' install.sh \\\n && sed -i '/Restore anaconda/,/^Not updating$/d' install.sh \\\n && sed -i '/You might want to/,/^fi$/d' install.sh \\\n && yes no | ./install.sh \\\n && luarocks install image \\\n && luarocks install nn \\\n && wget -O ~/boost.tar.gz https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz \\\n && tar -zxf ~/boost.tar.gz -C ~ \\\n && cd ~/boost_* \\\n && ./bootstrap.sh --with-python=python3.6 \\\n && ./b2 install -j\"$( nproc ;)\" --prefix=/usr/local \\\n && $PIP_INSTALL cupy chainer \\\n && $PIP_INSTALL jupyter \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev graphviz \\\n && $PIP_INSTALL mxnet-cu100 graphviz \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL protobuf-compiler libprotoc-dev \\\n && $PIP_INSTALL onnx \\\n && $PIP_INSTALL future numpy protobuf enum34 pyyaml typing torch \\\n && $PIP_INSTALL \"git+https://github.com/pytorch/vision.git\" \\\n && $PIP_INSTALL torch_nightly -f https://download.pytorch.org/whl/nightly/cu100/torch_nightly.html \\\n && $PIP_INSTALL tf-nightly-gpu-2.0-preview \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libblas-dev \\\n && wget -qO- https://github.com/Theano/libgpuarray/archive/v0.7.6.tar.gz | tar xz -C ~ \\\n && cd ~/libgpuarray* \\\n && mkdir -p build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/libgpuarray* \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && $PIP_INSTALL https://github.com/Theano/Theano/archive/master.zip \\\n && $PIP_INSTALL h5py keras \\\n && $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne \\\n && cd ~/lasagne \\\n && $PIP_INSTALL . \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libprotobuf-dev libsnappy-dev protobuf-compiler \\\n && $GIT_CLONE --branch 4.0.1 https://github.com/opencv/opencv ~/opencv \\\n && mkdir -p ~/opencv/build \\\n && cd ~/opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_IPP=OFF -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF .. \\\n && make -j\"$( nproc ;)\" install \\\n && ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 \\\n && $PIP_INSTALL tensorflow_probability dm-sonnet \\\n && $GIT_CLONE https://github.com/BVLC/caffe ~/caffe \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/layers/window_data_layer.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/util/io.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_GRAYSCALE/cv::IMREAD_GRAYSCALE/g' ~/caffe/src/caffe/util/io.cpp \\\n && cp ~/caffe/Makefile.config.example ~/caffe/Makefile.config \\\n && sed -i 's/# USE_CUDNN/USE_CUDNN/g' ~/caffe/Makefile.config \\\n && sed -i 's/# PYTHON_LIBRARIES/PYTHON_LIBRARIES/g' ~/caffe/Makefile.config \\\n && sed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' ~/caffe/Makefile.config \\\n && sed -i 's/# OPENCV_VERSION/OPENCV_VERSION/g' ~/caffe/Makefile.config \\\n && sed -i 's/# USE_NCCL/USE_NCCL/g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_20//g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_21//g' ~/caffe/Makefile.config \\\n && sed -i 's/2\\.7/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/3\\.5/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/boost_python3/boost_python36/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/lib\\/python/\\/usr\\/local\\/lib\\/python/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/local\\/include/\\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial/g' ~/caffe/Makefile.config \\\n && sed -i 's/hdf5/hdf5_serial/g' ~/caffe/Makefile \\\n && sed -i 's/# Debugging/COMMON_FLAGS += -std=c++11\\n# Debugging/g' ~/caffe/Makefile \\\n && cd ~/caffe \\\n && make -j\"$( nproc ;)\" -Wno-deprecated-gpu-targets distribute \\\n && sed -i 's/,<2//g' ~/caffe/python/requirements.txt \\\n && $PIP_INSTALL -r ~/caffe/python/requirements.txt \\\n && cd ~/caffe/distribute/bin \\\n && for file in *.bin; do mv \"$file\" \"${file%%.bin}\" ; done \\\n && cd ~/caffe/distribute \\\n && cp -r bin include lib proto /usr/local/ \\\n && cp -r python/caffe /usr/local/lib/python3.6/dist-packages/ \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL openmpi-bin libpng-dev libjpeg-dev libtiff-dev \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20.10.1 /usr/lib/x86_64-linux-gnu/libmpi.so.12 \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - \\\n && cp mklml*/* /usr/local -r \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf - \\\n && cd mkl-dnn-0.14 \\\n && mkdir build \\\n && cd build \\\n && ln -s /usr/local external \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && $PIP_INSTALL cntk-gpu \\\n && ldconfig \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* /tmp/* ~/*\nEXPOSE 8888/tcp 6006/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  ==================================================================\n#  module list\n#  ------------------------------------------------------------------\n#  darknet       latest (git)\n#  python        3.6    (apt)\n#  torch         latest (git)\n#  chainer       latest (pip)\n#  jupyter       latest (pip)\n#  mxnet         latest (pip)\n#  onnx          latest (pip)\n#  pytorch       latest (pip)\n#  tensorflow    latest (pip)\n#  theano        latest (git)\n#  keras         latest (pip)\n#  lasagne       latest (git)\n#  opencv        4.0.1  (git)\n#  sonnet        latest (pip)\n#  caffe         latest (git)\n#  cntk          latest (pip)\n#  ==================================================================\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nENV LANG=\"C.UTF-8\"\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" \\\n && PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" \\\n && GIT_CLONE=\"git clone --depth 10\" \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/nvidia-ml.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL build-essential apt-utils ca-certificates wget git vim \\\n && $GIT_CLONE https://github.com/Kitware/CMake ~/cmake \\\n && cd ~/cmake \\\n && ./bootstrap \\\n && make -j\"$( nproc ;)\" install \\\n && $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet \\\n && cd ~/darknet \\\n && sed -i 's/GPU=0/GPU=1/g' ~/darknet/Makefile \\\n && sed -i 's/CUDNN=0/CUDNN=1/g' ~/darknet/Makefile \\\n && make -j\"$( nproc ;)\" \\\n && cp ~/darknet/include/* /usr/local/include \\\n && cp ~/darknet/*.a /usr/local/lib \\\n && cp ~/darknet/*.so /usr/local/lib \\\n && cp ~/darknet/darknet /usr/local/bin \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL software-properties-common \\\n && add-apt-repository ppa:deadsnakes/ppa \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL python3.6 python3.6-dev python3-distutils-extra \\\n && wget -O ~/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python3.6 ~/get-pip.py \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python3 \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python \\\n && $PIP_INSTALL setuptools \\\n && $PIP_INSTALL numpy scipy pandas cloudpickle scikit-learn matplotlib Cython \\\n && export TORCH_NVCC_FLAGS=\"-D__CUDA_NO_HALF_OPERATORS__\" \\\n && $GIT_CLONE https://github.com/nagadomi/distro.git ~/torch --recursive \\\n && cd ~/torch/exe/luajit-rocks \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_LUAJIT21=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libjpeg-dev libpng-dev libreadline-dev \\\n && $GIT_CLONE https://github.com/Yonaba/Moses ~/moses \\\n && cd ~/moses \\\n && luarocks install rockspec/moses-1.6.1-1.rockspec \\\n && cd ~/torch \\\n && sed -i 's/extra\\/cudnn/extra\\/cudnn \\&\\& git checkout R7/' install.sh \\\n && sed -i 's/$PREFIX\\/bin\\/luarocks/luarocks/' install.sh \\\n && sed -i '/qt/d' install.sh \\\n && sed -i '/Installing Lua/,/^cd \\.\\.$/d' install.sh \\\n && sed -i '/path_to_nvidiasmi/,/^fi$/d' install.sh \\\n && sed -i '/Restore anaconda/,/^Not updating$/d' install.sh \\\n && sed -i '/You might want to/,/^fi$/d' install.sh \\\n && yes no | ./install.sh \\\n && luarocks install image \\\n && luarocks install nn \\\n && wget -O ~/boost.tar.gz https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz \\\n && tar -zxf ~/boost.tar.gz -C ~ \\\n && cd ~/boost_* \\\n && ./bootstrap.sh --with-python=python3.6 \\\n && ./b2 install -j\"$( nproc ;)\" --prefix=/usr/local \\\n && $PIP_INSTALL cupy chainer \\\n && $PIP_INSTALL jupyter \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev graphviz \\\n && $PIP_INSTALL mxnet-cu100 graphviz \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL protobuf-compiler libprotoc-dev \\\n && $PIP_INSTALL onnx \\\n && $PIP_INSTALL future numpy protobuf enum34 pyyaml typing torch \\\n && $PIP_INSTALL \"git+https://github.com/pytorch/vision.git\" \\\n && $PIP_INSTALL torch_nightly -f https://download.pytorch.org/whl/nightly/cu100/torch_nightly.html \\\n && $PIP_INSTALL tf-nightly-gpu-2.0-preview \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libblas-dev \\\n && wget -qO- https://github.com/Theano/libgpuarray/archive/v0.7.6.tar.gz | tar xz -C ~ \\\n && cd ~/libgpuarray* \\\n && mkdir -p build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/libgpuarray* \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && $PIP_INSTALL https://github.com/Theano/Theano/archive/master.zip \\\n && $PIP_INSTALL h5py keras \\\n && $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne \\\n && cd ~/lasagne \\\n && $PIP_INSTALL . \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libprotobuf-dev libsnappy-dev protobuf-compiler \\\n && $GIT_CLONE --branch 4.0.1 https://github.com/opencv/opencv ~/opencv \\\n && mkdir -p ~/opencv/build \\\n && cd ~/opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_IPP=OFF -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF .. \\\n && make -j\"$( nproc ;)\" install \\\n && ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 \\\n && $PIP_INSTALL tensorflow_probability dm-sonnet \\\n && $GIT_CLONE https://github.com/BVLC/caffe ~/caffe \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/layers/window_data_layer.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/util/io.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_GRAYSCALE/cv::IMREAD_GRAYSCALE/g' ~/caffe/src/caffe/util/io.cpp \\\n && cp ~/caffe/Makefile.config.example ~/caffe/Makefile.config \\\n && sed -i 's/# USE_CUDNN/USE_CUDNN/g' ~/caffe/Makefile.config \\\n && sed -i 's/# PYTHON_LIBRARIES/PYTHON_LIBRARIES/g' ~/caffe/Makefile.config \\\n && sed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' ~/caffe/Makefile.config \\\n && sed -i 's/# OPENCV_VERSION/OPENCV_VERSION/g' ~/caffe/Makefile.config \\\n && sed -i 's/# USE_NCCL/USE_NCCL/g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_20//g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_21//g' ~/caffe/Makefile.config \\\n && sed -i 's/2\\.7/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/3\\.5/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/boost_python3/boost_python36/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/lib\\/python/\\/usr\\/local\\/lib\\/python/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/local\\/include/\\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial/g' ~/caffe/Makefile.config \\\n && sed -i 's/hdf5/hdf5_serial/g' ~/caffe/Makefile \\\n && sed -i 's/# Debugging/COMMON_FLAGS += -std=c++11\\n# Debugging/g' ~/caffe/Makefile \\\n && cd ~/caffe \\\n && make -j\"$( nproc ;)\" -Wno-deprecated-gpu-targets distribute \\\n && sed -i 's/,<2//g' ~/caffe/python/requirements.txt \\\n && $PIP_INSTALL -r ~/caffe/python/requirements.txt \\\n && cd ~/caffe/distribute/bin \\\n && for file in *.bin; do mv \"$file\" \"${file%%.bin}\" ; done \\\n && cd ~/caffe/distribute \\\n && cp -r bin include lib proto /usr/local/ \\\n && cp -r python/caffe /usr/local/lib/python3.6/dist-packages/ \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL openmpi-bin libpng-dev libjpeg-dev libtiff-dev \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20.10.1 /usr/lib/x86_64-linux-gnu/libmpi.so.12 \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - \\\n && cp mklml*/* /usr/local -r \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf - \\\n && cd mkl-dnn-0.14 \\\n && mkdir build \\\n && cd build \\\n && ln -s /usr/local external \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && $PIP_INSTALL cntk-gpu \\\n && ldconfig \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* /tmp/* ~/*\nEXPOSE 8888/tcp 6006/tcp\n","injectedSmells":[],"originalDockerfileHash":"4fff87c36dd37780b54cc1e8c7a1ec3c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   ==================================================================\n#   module list\n#   ------------------------------------------------------------------\n#   darknet       latest (git)\n#   python        3.6    (apt)\n#   torch         latest (git)\n#   chainer       latest (pip)\n#   jupyter       latest (pip)\n#   mxnet         latest (pip)\n#   onnx          latest (pip)\n#   pytorch       latest (pip)\n#   tensorflow    latest (pip)\n#   theano        latest (git)\n#   keras         latest (pip)\n#   lasagne       latest (git)\n#   opencv        4.0.1  (git)\n#   sonnet        latest (pip)\n#   caffe         latest (git)\n#   cntk          latest (pip)\n#   ==================================================================\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nENV LANG=\"C.UTF-8\"\nRUN APT_INSTALL=\"apt-get install -y --no-install-recommends\" \\\n && PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" \\\n && GIT_CLONE=\"git clone --depth 10\" \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/nvidia-ml.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL build-essential apt-utils ca-certificates wget git vim \\\n && $GIT_CLONE https://github.com/Kitware/CMake ~/cmake \\\n && cd ~/cmake \\\n && ./bootstrap \\\n && make -j\"$( nproc ;)\" install \\\n && $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet \\\n && cd ~/darknet \\\n && sed -i 's/GPU=0/GPU=1/g' ~/darknet/Makefile \\\n && sed -i 's/CUDNN=0/CUDNN=1/g' ~/darknet/Makefile \\\n && make -j\"$( nproc ;)\" \\\n && cp ~/darknet/include/* /usr/local/include \\\n && cp ~/darknet/*.a /usr/local/lib \\\n && cp ~/darknet/*.so /usr/local/lib \\\n && cp ~/darknet/darknet /usr/local/bin \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL software-properties-common \\\n && add-apt-repository ppa:deadsnakes/ppa \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL python3.6 python3.6-dev python3-distutils-extra \\\n && wget -O ~/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python3.6 ~/get-pip.py \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python3 \\\n && ln -s /usr/bin/python3.6 /usr/local/bin/python \\\n && $PIP_INSTALL setuptools \\\n && $PIP_INSTALL numpy scipy pandas cloudpickle scikit-learn matplotlib Cython \\\n && export TORCH_NVCC_FLAGS=\"-D__CUDA_NO_HALF_OPERATORS__\" \\\n && $GIT_CLONE https://github.com/nagadomi/distro.git ~/torch --recursive \\\n && cd ~/torch/exe/luajit-rocks \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_LUAJIT21=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libjpeg-dev libpng-dev libreadline-dev \\\n && $GIT_CLONE https://github.com/Yonaba/Moses ~/moses \\\n && cd ~/moses \\\n && luarocks install rockspec/moses-1.6.1-1.rockspec \\\n && cd ~/torch \\\n && sed -i 's/extra\\/cudnn/extra\\/cudnn \\&\\& git checkout R7/' install.sh \\\n && sed -i 's/$PREFIX\\/bin\\/luarocks/luarocks/' install.sh \\\n && sed -i '/qt/d' install.sh \\\n && sed -i '/Installing Lua/,/^cd \\.\\.$/d' install.sh \\\n && sed -i '/path_to_nvidiasmi/,/^fi$/d' install.sh \\\n && sed -i '/Restore anaconda/,/^Not updating$/d' install.sh \\\n && sed -i '/You might want to/,/^fi$/d' install.sh \\\n && yes no | ./install.sh \\\n && luarocks install image \\\n && luarocks install nn \\\n && wget -O ~/boost.tar.gz https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz \\\n && tar -zxf ~/boost.tar.gz -C ~ \\\n && cd ~/boost_* \\\n && ./bootstrap.sh --with-python=python3.6 \\\n && ./b2 install -j\"$( nproc ;)\" --prefix=/usr/local \\\n && $PIP_INSTALL cupy chainer \\\n && $PIP_INSTALL jupyter \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev graphviz \\\n && $PIP_INSTALL mxnet-cu100 graphviz \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL protobuf-compiler libprotoc-dev \\\n && $PIP_INSTALL onnx \\\n && $PIP_INSTALL future numpy protobuf enum34 pyyaml typing torch \\\n && $PIP_INSTALL \"git+https://github.com/pytorch/vision.git\" \\\n && $PIP_INSTALL torch_nightly -f https://download.pytorch.org/whl/nightly/cu100/torch_nightly.html \\\n && $PIP_INSTALL tf-nightly-gpu-2.0-preview \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libblas-dev \\\n && wget -qO- https://github.com/Theano/libgpuarray/archive/v0.7.6.tar.gz | tar xz -C ~ \\\n && cd ~/libgpuarray* \\\n && mkdir -p build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/libgpuarray* \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && $PIP_INSTALL https://github.com/Theano/Theano/archive/master.zip \\\n && $PIP_INSTALL h5py keras \\\n && $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne \\\n && cd ~/lasagne \\\n && $PIP_INSTALL . \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL libatlas-base-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libprotobuf-dev libsnappy-dev protobuf-compiler \\\n && $GIT_CLONE --branch 4.0.1 https://github.com/opencv/opencv ~/opencv \\\n && mkdir -p ~/opencv/build \\\n && cd ~/opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_IPP=OFF -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF .. \\\n && make -j\"$( nproc ;)\" install \\\n && ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 \\\n && $PIP_INSTALL tensorflow_probability dm-sonnet \\\n && $GIT_CLONE https://github.com/BVLC/caffe ~/caffe \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/layers/window_data_layer.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/util/io.cpp \\\n && sed -i 's/CV_LOAD_IMAGE_GRAYSCALE/cv::IMREAD_GRAYSCALE/g' ~/caffe/src/caffe/util/io.cpp \\\n && cp ~/caffe/Makefile.config.example ~/caffe/Makefile.config \\\n && sed -i 's/# USE_CUDNN/USE_CUDNN/g' ~/caffe/Makefile.config \\\n && sed -i 's/# PYTHON_LIBRARIES/PYTHON_LIBRARIES/g' ~/caffe/Makefile.config \\\n && sed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' ~/caffe/Makefile.config \\\n && sed -i 's/# OPENCV_VERSION/OPENCV_VERSION/g' ~/caffe/Makefile.config \\\n && sed -i 's/# USE_NCCL/USE_NCCL/g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_20//g' ~/caffe/Makefile.config \\\n && sed -i 's/-gencode arch=compute_20,code=sm_21//g' ~/caffe/Makefile.config \\\n && sed -i 's/2\\.7/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/3\\.5/3\\.6/g' ~/caffe/Makefile.config \\\n && sed -i 's/boost_python3/boost_python36/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/lib\\/python/\\/usr\\/local\\/lib\\/python/g' ~/caffe/Makefile.config \\\n && sed -i 's/\\/usr\\/local\\/include/\\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial/g' ~/caffe/Makefile.config \\\n && sed -i 's/hdf5/hdf5_serial/g' ~/caffe/Makefile \\\n && sed -i 's/# Debugging/COMMON_FLAGS += -std=c++11\\n# Debugging/g' ~/caffe/Makefile \\\n && cd ~/caffe \\\n && make -j\"$( nproc ;)\" -Wno-deprecated-gpu-targets distribute \\\n && sed -i 's/,<2//g' ~/caffe/python/requirements.txt \\\n && $PIP_INSTALL -r ~/caffe/python/requirements.txt \\\n && cd ~/caffe/distribute/bin \\\n && for file in *.bin; do mv \"$file\" \"${file%%.bin}\" ; done \\\n && cd ~/caffe/distribute \\\n && cp -r bin include lib proto /usr/local/ \\\n && cp -r python/caffe /usr/local/lib/python3.6/dist-packages/ \\\n && DEBIAN_FRONTEND=noninteractive $APT_INSTALL openmpi-bin libpng-dev libjpeg-dev libtiff-dev \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 \\\n && ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20.10.1 /usr/lib/x86_64-linux-gnu/libmpi.so.12 \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - \\\n && cp mklml*/* /usr/local -r \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf - \\\n && cd mkl-dnn-0.14 \\\n && mkdir build \\\n && cd build \\\n && ln -s /usr/local external \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && $PIP_INSTALL cntk-gpu \\\n && ldconfig \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* /tmp/* ~/*\nEXPOSE 8888/tcp 6006/tcp\n","originalDockerfileUglifiedHash":"85bcbbef921c4c012fa4e9e8c293ef7a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1f7c2493fea69e210f9bacd0a881fc2d5be2f122.dockerfile"}