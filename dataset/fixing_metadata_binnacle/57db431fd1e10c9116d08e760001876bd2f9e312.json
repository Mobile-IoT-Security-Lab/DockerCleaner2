{"seed":218699902,"processedDockerfileHash":"640363076bbcfb604d5dd33f9d4d583a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:12.04\nRUN locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends autoconf binutils-doc bison build-essential flex -q -y )\n#  apt-utils\nRUN (apt-get update ;apt-get install --no-install-recommends apt-utils -q -y )\n#  ruby-rvm\nRUN (apt-get update ;apt-get install --no-install-recommends ruby-rvm -q -y )\n#  varnish\nRUN (apt-get update ;apt-get install --no-install-recommends varnish -q -y )\n#  git\nRUN (apt-get update ;apt-get install --no-install-recommends git -q -y )\n#  apt tools\nRUN (apt-get update ;apt-get install --no-install-recommends python-software-properties -q -y )\nRUN add-apt-repository ppa:cartodb/gcc \\\n && :\nRUN (apt-get update ;apt-get install --no-install-recommends gcc-4.9 g++-4.9 -q -y )\nENV CC=\"/usr/bin/gcc-4.9\"\nENV CXX=\"/usr/bin/g++-4.9\"\n#  postgresql\nRUN add-apt-repository ppa:cartodb/postgresql-9.5 \\\n && :\n#  client packages\nRUN (apt-get update ;apt-get install --no-install-recommends libpq5 libpq-dev postgresql-client-9.5 postgresql-client-common -q -y )\n#  server packages\nRUN (apt-get update ;apt-get install --no-install-recommends postgresql-9.5 postgresql-contrib-9.5 postgresql-server-dev-9.5 postgresql-plpython-9.5 -q -y )\n#  PostgreSQL Config\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/9.5/main/pg_hba.conf\n#  create users\nRUN service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n#  carto postgres extension\nRUN git clone https://github.com/CartoDB/cartodb-postgresql.git \\\n && cd cartodb-postgresql \\\n && PGUSER=postgres make install\n#  GIS dependencies\nRUN apt-get upgrade -q -y \\\n && add-apt-repository ppa:cartodb/gis \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends proj proj-bin proj-data libproj-dev -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends libjson0 libjson0-dev python-simplejson -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends libgeos-c1v5 libgeos-dev -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends gdal-bin libgdal1-dev libgdal-dev -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends gdal2.1-static-bin -q -y )\n#  postgis\nRUN (apt-get update ;apt-get install --no-install-recommends libxml2-dev -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends liblwgeom-2.2.2 postgis postgresql-9.5-postgis-2.2 postgresql-9.5-postgis-scripts -q -y )\n#  postgis setup\nRUN service postgresql start \\\n && createdb -T template0 -O postgres -U postgres -E UTF8 template_postgis \\\n && psql -U postgres template_postgis -c 'CREATE EXTENSION postgis;CREATE EXTENSION postgis_topology;' \\\n && ldconfig \\\n && service postgresql stop\n#  redis\nRUN add-apt-repository ppa:cartodb/redis \\\n && :\nRUN (apt-get update ;apt-get install --no-install-recommends redis-server -q -y )\n#  nodejs\nRUN add-apt-repository ppa:cartodb/nodejs \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs -q -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libpixman-1-0 libpixman-1-dev -q -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libcairo2-dev libjpeg-dev libgif-dev libpango1.0-dev -q -y )\n#  SQL API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout master \\\n && npm install\n#  MAPS API:\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout master \\\n && npm install yarn@0.27.5 -g \\\n && yarn install\n#  Ruby\nRUN (apt-get update ;apt-get install --no-install-recommends wget -q -y ) \\\n && wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz \\\n && tar -xzvf ruby-install-0.5.0.tar.gz \\\n && cd ruby-install-0.5.0/ \\\n && make install\nRUN (apt-get update ;apt-get install --no-install-recommends libreadline6-dev openssl -q -y ) \\\n && ruby-install ruby 2.2.3\nENV PATH=\"$PATH:/opt/rubies/ruby-2.2.3/bin\"\nRUN gem install bundler --version 2.4.12 --version=1.17.3 \\\n && gem install compass --version 1.0.3\nENV RAILS_ENV=\"production\"\n#  Carto Editor\nRUN git clone --recursive https://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py\nRUN (apt-get update ;apt-get install --no-install-recommends python-all-dev -q -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends imagemagick unp zip -q -y )\nRUN cd cartodb \\\n && bundle install \\\n && npm install\nENV CPLUS_INCLUDE_PATH=\"/usr/include/gdal\"\nENV C_INCLUDE_PATH=\"/usr/include/gdal\"\nENV PATH=\"$PATH:/usr/include/gdal\"\nRUN cd cartodb \\\n && pip install --no-use-wheel -r python_requirements.txt\n#  Config Files\nCOPY ./config/SQLAPI-prod.js /CartoDB-SQL-API/config/environments/production.js\nCOPY ./config/WS-prod.js /Windshaft-cartodb/config/environments/production.js\nCOPY ./config/app_config.yml /cartodb/config/app_config.yml\nCOPY ./config/database.yml /cartodb/config/database.yml\nCOPY ./config/grunt_production.json /cartodb/config/grunt_production.json\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN cd cartodb \\\n && export PATH=$PATH:$PWD/node_modules/grunt-cli/bin \\\n && bundle install \\\n && bundle exec grunt --environment production\nRUN service postgresql start \\\n && service redis-server start \\\n && cd cartodb \\\n && bundle exec rake db:create \\\n && bundle exec rake db:migrate \\\n && service postgresql stop \\\n && service redis-server stop\nCOPY ./create_user /cartodb/script/create_user\nRUN service postgresql start \\\n && service redis-server start \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_user\" \\\n && service postgresql stop \\\n && service redis-server stop\nEXPOSE 3000/tcp 8080/tcp 8181/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.1\"\nCOPY ./startup.sh /opt/startup.sh\nCOPY ./config/varnish /etc/default/varnish\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:12.04\nRUN locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8\nRUN apt-get update \\\n && apt-get install autoconf binutils-doc bison build-essential flex -q -y\n# apt-utils\nRUN apt-get install apt-utils -q -y\n# ruby-rvm\nRUN apt-get install ruby-rvm -q -y\n# varnish\nRUN apt-get install varnish -q -y\n# git\nRUN apt-get install git -q -y\n# apt tools\nRUN apt-get install python-software-properties -q -y\nRUN add-apt-repository ppa:cartodb/gcc \\\n && apt-get update\nRUN apt-get install gcc-4.9 g++-4.9 -q -y\nENV CC=\"/usr/bin/gcc-4.9\"\nENV CXX=\"/usr/bin/g++-4.9\"\n# postgresql\nRUN add-apt-repository ppa:cartodb/postgresql-9.5 \\\n && apt-get update\n# client packages\nRUN apt-get install libpq5 libpq-dev postgresql-client-9.5 postgresql-client-common -q -y\n# server packages\nRUN apt-get install postgresql-9.5 postgresql-contrib-9.5 postgresql-server-dev-9.5 postgresql-plpython-9.5 -q -y\n# PostgreSQL Config\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/9.5/main/pg_hba.conf\n# create users\nRUN service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n# carto postgres extension\nRUN git clone https://github.com/CartoDB/cartodb-postgresql.git \\\n && cd cartodb-postgresql \\\n && PGUSER=postgres make install\n# GIS dependencies\nRUN apt-get upgrade -q -y \\\n && add-apt-repository ppa:cartodb/gis \\\n && apt-get update \\\n && apt-get install proj proj-bin proj-data libproj-dev -q -y \\\n && apt-get install libjson0 libjson0-dev python-simplejson -q -y \\\n && apt-get install libgeos-c1v5 libgeos-dev -q -y \\\n && apt-get install gdal-bin libgdal1-dev libgdal-dev -q -y \\\n && apt-get install gdal2.1-static-bin -q -y\n# postgis\nRUN apt-get install libxml2-dev -q -y \\\n && apt-get install liblwgeom-2.2.2 postgis postgresql-9.5-postgis-2.2 postgresql-9.5-postgis-scripts -q -y\n# postgis setup\nRUN service postgresql start \\\n && createdb -T template0 -O postgres -U postgres -E UTF8 template_postgis \\\n && psql -U postgres template_postgis -c 'CREATE EXTENSION postgis;CREATE EXTENSION postgis_topology;' \\\n && ldconfig \\\n && service postgresql stop\n# redis\nRUN add-apt-repository ppa:cartodb/redis \\\n && apt-get update\nRUN apt-get install redis-server -q -y\n# nodejs\nRUN add-apt-repository ppa:cartodb/nodejs \\\n && apt-get update \\\n && apt-get install nodejs -q -y\nRUN apt-get install libpixman-1-0 libpixman-1-dev -q -y\nRUN apt-get install libcairo2-dev libjpeg-dev libgif-dev libpango1.0-dev -q -y\n# SQL API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout master \\\n && npm install\n# MAPS API:\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout master \\\n && npm install yarn@0.27.5 -g \\\n && yarn install\n# Ruby\nRUN apt-get install wget -q -y \\\n && wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz \\\n && tar -xzvf ruby-install-0.5.0.tar.gz \\\n && cd ruby-install-0.5.0/ \\\n && make install\nRUN apt-get install libreadline6-dev openssl -q -y \\\n && ruby-install ruby 2.2.3\nENV PATH=\"$PATH:/opt/rubies/ruby-2.2.3/bin\"\nRUN gem install bundler --version=1.17.3 \\\n && gem install compass\nENV RAILS_ENV=\"production\"\n# Carto Editor\nRUN git clone --recursive https://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py\nRUN apt-get install python-all-dev -q -y \\\n && apt-get install imagemagick unp zip -q -y\nRUN cd cartodb \\\n && bundle install \\\n && npm install\nENV CPLUS_INCLUDE_PATH=\"/usr/include/gdal\"\nENV C_INCLUDE_PATH=\"/usr/include/gdal\"\nENV PATH=\"$PATH:/usr/include/gdal\"\nRUN cd cartodb \\\n && pip install --no-use-wheel -r python_requirements.txt\n# Config Files\nADD ./config/SQLAPI-prod.js /CartoDB-SQL-API/config/environments/production.js\nADD ./config/WS-prod.js /Windshaft-cartodb/config/environments/production.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./config/grunt_production.json /cartodb/config/grunt_production.json\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN cd cartodb \\\n && export PATH=$PATH:$PWD/node_modules/grunt-cli/bin \\\n && bundle install \\\n && bundle exec grunt --environment production\nRUN service postgresql start \\\n && service redis-server start \\\n && cd cartodb \\\n && bundle exec rake db:create \\\n && bundle exec rake db:migrate \\\n && service postgresql stop \\\n && service redis-server stop\nADD ./create_user /cartodb/script/create_user\nRUN service postgresql start \\\n && service redis-server start \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_user\" \\\n && service postgresql stop \\\n && service redis-server stop\nEXPOSE 3000/tcp 8080/tcp 8181/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.1\"\nADD ./startup.sh /opt/startup.sh\nADD ./config/varnish /etc/default/varnish\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"a5a18951404407067533cfe90d09187e","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:12.04\nRUN locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8\nRUN apt-get update \\\n && apt-get install autoconf binutils-doc bison build-essential flex -q -y\n#  apt-utils\nRUN apt-get install apt-utils -q -y\n#  ruby-rvm\nRUN apt-get install ruby-rvm -q -y\n#  varnish\nRUN apt-get install varnish -q -y\n#  git\nRUN apt-get install git -q -y\n#  apt tools\nRUN apt-get install python-software-properties -q -y\nRUN add-apt-repository ppa:cartodb/gcc \\\n && apt-get update\nRUN apt-get install gcc-4.9 g++-4.9 -q -y\nENV CC=\"/usr/bin/gcc-4.9\"\nENV CXX=\"/usr/bin/g++-4.9\"\n#  postgresql\nRUN add-apt-repository ppa:cartodb/postgresql-9.5 \\\n && apt-get update\n#  client packages\nRUN apt-get install libpq5 libpq-dev postgresql-client-9.5 postgresql-client-common -q -y\n#  server packages\nRUN apt-get install postgresql-9.5 postgresql-contrib-9.5 postgresql-server-dev-9.5 postgresql-plpython-9.5 -q -y\n#  PostgreSQL Config\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/9.5/main/pg_hba.conf\n#  create users\nRUN service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n#  carto postgres extension\nRUN git clone https://github.com/CartoDB/cartodb-postgresql.git \\\n && cd cartodb-postgresql \\\n && PGUSER=postgres make install\n#  GIS dependencies\nRUN apt-get upgrade -q -y \\\n && add-apt-repository ppa:cartodb/gis \\\n && apt-get update \\\n && apt-get install proj proj-bin proj-data libproj-dev -q -y \\\n && apt-get install libjson0 libjson0-dev python-simplejson -q -y \\\n && apt-get install libgeos-c1v5 libgeos-dev -q -y \\\n && apt-get install gdal-bin libgdal1-dev libgdal-dev -q -y \\\n && apt-get install gdal2.1-static-bin -q -y\n#  postgis\nRUN apt-get install libxml2-dev -q -y \\\n && apt-get install liblwgeom-2.2.2 postgis postgresql-9.5-postgis-2.2 postgresql-9.5-postgis-scripts -q -y\n#  postgis setup\nRUN service postgresql start \\\n && createdb -T template0 -O postgres -U postgres -E UTF8 template_postgis \\\n && psql -U postgres template_postgis -c 'CREATE EXTENSION postgis;CREATE EXTENSION postgis_topology;' \\\n && ldconfig \\\n && service postgresql stop\n#  redis\nRUN add-apt-repository ppa:cartodb/redis \\\n && apt-get update\nRUN apt-get install redis-server -q -y\n#  nodejs\nRUN add-apt-repository ppa:cartodb/nodejs \\\n && apt-get update \\\n && apt-get install nodejs -q -y\nRUN apt-get install libpixman-1-0 libpixman-1-dev -q -y\nRUN apt-get install libcairo2-dev libjpeg-dev libgif-dev libpango1.0-dev -q -y\n#  SQL API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout master \\\n && npm install\n#  MAPS API:\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout master \\\n && npm install yarn@0.27.5 -g \\\n && yarn install\n#  Ruby\nRUN apt-get install wget -q -y \\\n && wget -O ruby-install-0.5.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz \\\n && tar -xzvf ruby-install-0.5.0.tar.gz \\\n && cd ruby-install-0.5.0/ \\\n && make install\nRUN apt-get install libreadline6-dev openssl -q -y \\\n && ruby-install ruby 2.2.3\nENV PATH=\"$PATH:/opt/rubies/ruby-2.2.3/bin\"\nRUN gem install bundler --version=1.17.3 \\\n && gem install compass\nENV RAILS_ENV=\"production\"\n#  Carto Editor\nRUN git clone --recursive https://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py\nRUN apt-get install python-all-dev -q -y \\\n && apt-get install imagemagick unp zip -q -y\nRUN cd cartodb \\\n && bundle install \\\n && npm install\nENV CPLUS_INCLUDE_PATH=\"/usr/include/gdal\"\nENV C_INCLUDE_PATH=\"/usr/include/gdal\"\nENV PATH=\"$PATH:/usr/include/gdal\"\nRUN cd cartodb \\\n && pip install --no-use-wheel -r python_requirements.txt\n#  Config Files\nADD ./config/SQLAPI-prod.js /CartoDB-SQL-API/config/environments/production.js\nADD ./config/WS-prod.js /Windshaft-cartodb/config/environments/production.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./config/grunt_production.json /cartodb/config/grunt_production.json\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN cd cartodb \\\n && export PATH=$PATH:$PWD/node_modules/grunt-cli/bin \\\n && bundle install \\\n && bundle exec grunt --environment production\nRUN service postgresql start \\\n && service redis-server start \\\n && cd cartodb \\\n && bundle exec rake db:create \\\n && bundle exec rake db:migrate \\\n && service postgresql stop \\\n && service redis-server stop\nADD ./create_user /cartodb/script/create_user\nRUN service postgresql start \\\n && service redis-server start \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_user\" \\\n && service postgresql stop \\\n && service redis-server stop\nEXPOSE 3000/tcp 8080/tcp 8181/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.1\"\nADD ./startup.sh /opt/startup.sh\nADD ./config/varnish /etc/default/varnish\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\n","originalDockerfileUglifiedHash":"00918ec513d5db209cc028240ff714c8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/57db431fd1e10c9116d08e760001876bd2f9e312.dockerfile"}