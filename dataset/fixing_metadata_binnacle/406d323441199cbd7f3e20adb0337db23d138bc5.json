{"seed":3937933967,"processedDockerfileHash":"34f66e6d6cfde3f126d6d6d965b7e38c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER NVIDIA CORPORATION <digits@nvidia.com>\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV NVIDIA_GPGKEY_SUM=\"bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c\"\nENV NVIDIA_GPGKEY_FPR=\"889bee522da690103c4b085ed88c3d385c37d3be\"\nRUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/cuda.list\nENV CUDA_VERSION=\"7.5\"\nLABEL com.nvidia.cuda.version=\"7.5\"\nENV CUDA_PKG_VERSION=\"7-5=7.5-18\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-nvrtc-$CUDA_PKG_VERSION cuda-cusolver-$CUDA_PKG_VERSION cuda-cublas-$CUDA_PKG_VERSION cuda-cufft-$CUDA_PKG_VERSION cuda-curand-$CUDA_PKG_VERSION cuda-cusparse-$CUDA_PKG_VERSION cuda-npp-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION -y --force-yes \\\n && ln -s cuda-$CUDA_VERSION /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"/usr/local/cuda/lib\" >> /etc/ld.so.conf.d/cuda.conf \\\n && echo \"/usr/local/cuda/lib64\" >> /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION cuda-license-$CUDA_PKG_VERSION cuda-nvrtc-dev-$CUDA_PKG_VERSION cuda-cusolver-dev-$CUDA_PKG_VERSION cuda-cublas-dev-$CUDA_PKG_VERSION cuda-cufft-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-cusparse-dev-$CUDA_PKG_VERSION cuda-npp-dev-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-driver-dev-$CUDA_PKG_VERSION -y --force-yes \\\n && cd /tmp \\\n && apt-get download gpu-deployment-kit \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /tmp/gpu-deployment-kit \\\n && cd /tmp/gpu-deployment-kit \\\n && dpkg -x /tmp/gpu-deployment-kit_*.deb . \\\n && mv usr/include/nvidia/gdk/* /usr/local/cuda/include \\\n && mv usr/src/gdk/nvml/lib/* /usr/local/cuda/lib64/stubs \\\n && rm -rf /tmp/gpu-deployment-kit*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"5\"\nLABEL com.nvidia.cudnn.version=\"5\"\n#   workaround: libcudnn5-dev should have an exact version dependency on the runtime library libcudnn5\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn5=5.0.5-1+cuda7.5 libcudnn5-dev=5.0.5-1+cuda7.5 -y --force-yes \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=11.6ubuntu6 cmake=2.8.12.2-0ubuntu3 curl=7.35.0-1ubuntu2.20 gfortran=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 graphicsmagick=1.3.18-1ubuntu3.1 libgraphicsmagick1-dev=1.3.18-1ubuntu3.1 libatlas-dev=3.10.1-4 libavcodec-dev=6:9.20-0ubuntu0.14.04.1 libavformat-dev=6:9.20-0ubuntu0.14.04.1 libboost-all-dev=1.54.0.1ubuntu1 libgtk2.0-dev=2.24.23-0ubuntu1.4 libjpeg-dev=8c-2ubuntu8 liblapack-dev=3.5.0-2ubuntu1 libswscale-dev=6:9.20-0ubuntu0.14.04.1 pkg-config=0.26-1ubuntu4 python-dev=2.7.5-5ubuntu3 python-numpy=1:1.8.2-0ubuntu0.1 python-protobuf=2.5.0-9ubuntu1 software-properties-common=0.92.37.8 zip=3.0-8 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash -e\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive\nRUN cd ~/torch \\\n && ./install.sh \\\n && cd install/bin \\\n && ./luarocks install nn \\\n && ./luarocks install dpnn \\\n && ./luarocks install image \\\n && ./luarocks install optim \\\n && ./luarocks install csvigo \\\n && ./luarocks install torchx \\\n && ./luarocks install tds\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_PYTHON_SUPPORT=ON -D CUDA_GENERATION=Kepler .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\nRUN cd ~/torch/install/bin \\\n && ./luarocks install torch \\\n && ./luarocks install cutorch\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 graphicsmagick=1.3.18-1ubuntu3.1 python-dev=2.7.5-5ubuntu3 python-pip=1.5.4-1ubuntu4 python-numpy=1:1.8.2-0ubuntu0.1 python-nose=1.3.1-2 python-scipy=0.13.3-1build1 python-pandas=0.13.1-2ubuntu2 python-protobuf=2.5.0-9ubuntu1 wget=1.15-1ubuntu1.14.04.5 zip=3.0-8 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ADD . /root/openface\nRUN git clone https://github.com/cmusatyalab/openface.git ~/openface --recursive\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\nEXPOSE 8000/tcp 9000/tcp\n#  CMD /bin/bash -l -c '/root/openface/demos/web/start-servers.sh'\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER NVIDIA CORPORATION <digits@nvidia.com>\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV NVIDIA_GPGKEY_SUM=\"bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c\"\nENV NVIDIA_GPGKEY_FPR=\"889bee522da690103c4b085ed88c3d385c37d3be\"\nRUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/cuda.list\nENV CUDA_VERSION=\"7.5\"\nLABEL com.nvidia.cuda.version=\"7.5\"\nENV CUDA_PKG_VERSION=\"7-5=7.5-18\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-nvrtc-$CUDA_PKG_VERSION cuda-cusolver-$CUDA_PKG_VERSION cuda-cublas-$CUDA_PKG_VERSION cuda-cufft-$CUDA_PKG_VERSION cuda-curand-$CUDA_PKG_VERSION cuda-cusparse-$CUDA_PKG_VERSION cuda-npp-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION -y --force-yes \\\n && ln -s cuda-$CUDA_VERSION /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"/usr/local/cuda/lib\" >> /etc/ld.so.conf.d/cuda.conf \\\n && echo \"/usr/local/cuda/lib64\" >> /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION cuda-license-$CUDA_PKG_VERSION cuda-nvrtc-dev-$CUDA_PKG_VERSION cuda-cusolver-dev-$CUDA_PKG_VERSION cuda-cublas-dev-$CUDA_PKG_VERSION cuda-cufft-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-cusparse-dev-$CUDA_PKG_VERSION cuda-npp-dev-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-driver-dev-$CUDA_PKG_VERSION -y --force-yes \\\n && cd /tmp \\\n && apt-get download gpu-deployment-kit \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /tmp/gpu-deployment-kit \\\n && cd /tmp/gpu-deployment-kit \\\n && dpkg -x /tmp/gpu-deployment-kit_*.deb . \\\n && mv usr/include/nvidia/gdk/* /usr/local/cuda/include \\\n && mv usr/src/gdk/nvml/lib/* /usr/local/cuda/lib64/stubs \\\n && rm -rf /tmp/gpu-deployment-kit*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"5\"\nLABEL com.nvidia.cudnn.version=\"5\"\n#  workaround: libcudnn5-dev should have an exact version dependency on the runtime library libcudnn5\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn5=5.0.5-1+cuda7.5 libcudnn5-dev=5.0.5-1+cuda7.5 -y --force-yes \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobuf software-properties-common zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash -e\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive\nRUN cd ~/torch \\\n && ./install.sh \\\n && cd install/bin \\\n && ./luarocks install nn \\\n && ./luarocks install dpnn \\\n && ./luarocks install image \\\n && ./luarocks install optim \\\n && ./luarocks install csvigo \\\n && ./luarocks install torchx \\\n && ./luarocks install tds\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_PYTHON_SUPPORT=ON -D CUDA_GENERATION=Kepler .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\nRUN cd ~/torch/install/bin \\\n && ./luarocks install torch \\\n && ./luarocks install cutorch\nRUN apt-get update \\\n && apt-get install curl git graphicsmagick python-dev python-pip python-numpy python-nose python-scipy python-pandas python-protobuf wget zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# ADD . /root/openface\nRUN git clone https://github.com/cmusatyalab/openface.git ~/openface --recursive\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\nEXPOSE 8000/tcp 9000/tcp\n# CMD /bin/bash -l -c '/root/openface/demos/web/start-servers.sh'\n","injectedSmells":[],"originalDockerfileHash":"22a6236ffb3154304cd445f5eab81a8f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER NVIDIA CORPORATION <digits@nvidia.com>\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV NVIDIA_GPGKEY_SUM=\"bd841d59a27a406e513db7d405550894188a4c1cd96bf8aa4f82f1b39e0b5c1c\"\nENV NVIDIA_GPGKEY_FPR=\"889bee522da690103c4b085ed88c3d385c37d3be\"\nRUN apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/GPGKEY \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +2 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/cuda.list\nENV CUDA_VERSION=\"7.5\"\nLABEL com.nvidia.cuda.version=\"7.5\"\nENV CUDA_PKG_VERSION=\"7-5=7.5-18\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-nvrtc-$CUDA_PKG_VERSION cuda-cusolver-$CUDA_PKG_VERSION cuda-cublas-$CUDA_PKG_VERSION cuda-cufft-$CUDA_PKG_VERSION cuda-curand-$CUDA_PKG_VERSION cuda-cusparse-$CUDA_PKG_VERSION cuda-npp-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION -y --force-yes \\\n && ln -s cuda-$CUDA_VERSION /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"/usr/local/cuda/lib\" >> /etc/ld.so.conf.d/cuda.conf \\\n && echo \"/usr/local/cuda/lib64\" >> /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION cuda-license-$CUDA_PKG_VERSION cuda-nvrtc-dev-$CUDA_PKG_VERSION cuda-cusolver-dev-$CUDA_PKG_VERSION cuda-cublas-dev-$CUDA_PKG_VERSION cuda-cufft-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-cusparse-dev-$CUDA_PKG_VERSION cuda-npp-dev-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-driver-dev-$CUDA_PKG_VERSION -y --force-yes \\\n && cd /tmp \\\n && apt-get download gpu-deployment-kit \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /tmp/gpu-deployment-kit \\\n && cd /tmp/gpu-deployment-kit \\\n && dpkg -x /tmp/gpu-deployment-kit_*.deb . \\\n && mv usr/include/nvidia/gdk/* /usr/local/cuda/include \\\n && mv usr/src/gdk/nvml/lib/* /usr/local/cuda/lib64/stubs \\\n && rm -rf /tmp/gpu-deployment-kit*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1404/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"5\"\nLABEL com.nvidia.cudnn.version=\"5\"\n#   workaround: libcudnn5-dev should have an exact version dependency on the runtime library libcudnn5\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn5=5.0.5-1+cuda7.5 libcudnn5-dev=5.0.5-1+cuda7.5 -y --force-yes \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobuf software-properties-common zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash -e\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive\nRUN cd ~/torch \\\n && ./install.sh \\\n && cd install/bin \\\n && ./luarocks install nn \\\n && ./luarocks install dpnn \\\n && ./luarocks install image \\\n && ./luarocks install optim \\\n && ./luarocks install csvigo \\\n && ./luarocks install torchx \\\n && ./luarocks install tds\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_PYTHON_SUPPORT=ON -D CUDA_GENERATION=Kepler .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\nRUN cd ~/torch/install/bin \\\n && ./luarocks install torch \\\n && ./luarocks install cutorch\nRUN apt-get update \\\n && apt-get install curl git graphicsmagick python-dev python-pip python-numpy python-nose python-scipy python-pandas python-protobuf wget zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ADD . /root/openface\nRUN git clone https://github.com/cmusatyalab/openface.git ~/openface --recursive\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\nEXPOSE 8000/tcp 9000/tcp\n#  CMD /bin/bash -l -c '/root/openface/demos/web/start-servers.sh'\n","originalDockerfileUglifiedHash":"339f916d11067dd52edb5f8b2528ea6d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/406d323441199cbd7f3e20adb0337db23d138bc5.dockerfile"}