{"seed":1283777,"processedDockerfileHash":"33198bc1441b20d330a4a52582582228","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM python:2.7-stretch\n#   Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#   CircleCI required tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git ssh tar gzip ca-certificates -y \\\n && rm -rf /var/lib/apt/lists/*\n#   --------------- Start Go Part ---------------\n#   gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.12.5\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='aea86e3c73495f205929cfebba0d63f1382c8ac59be081b6351681415f4063cf' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='311f5e76c7cec1ec752474a61d837e474b8e750b8e3eed267911ab57c0e5da9a' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='ff09f34935cd189a4912f3f308ec83e4683c309304144eae9cf60ebc552e7cd8' ;;(i386) goRelArch='linux-386' ; goRelSha256='146605e13bf337ff3aacd941a816c5d97a8fef8b5817e07fcec4540632085980' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e88b2a2098bc79ad33912d1d27bc3282a7f3231b6f4672f306465bf46ff784ca' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='168d297ec910cb446d1aea878baeb85f1387209f9eb55dde68bddcd4c006dcbb' ;;(*) goRelArch='src' ; goRelSha256='2aa5f088cbb332e73fc3def546800616b38d3bfe6b8713b8a6404060f22503e8' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   --------------- End Go Part ---------------\n#   --------------- Start Java Part ---------------\nRUN mkdir ~/.gnupg\nRUN echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends bzip2 unzip xz-utils fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-8\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#   https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"8u212-b04\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-\"\nENV JAVA_URL_VERSION=\"8u212b04\"\n#   https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm openjdk.tgz* ; javac -version ; java -version\n#   --------------- End Java Part ---------------\n#   --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\n#   --------------- End Maven Part ---------------\n#   --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#   install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#   --------------- End C++ Part ---------------\n#   --------------- Start Ruby Part --------------\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#   --------------- End Ruby Part ---------------\n#   install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv==20.21.0 grpcio==1.53.0\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:2.7-stretch\n#  Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#  CircleCI required tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git ssh tar gzip ca-certificates -y \\\n && rm -rf /var/lib/apt/lists/*\n#  --------------- Start Go Part ---------------\n#  gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.12.5\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='aea86e3c73495f205929cfebba0d63f1382c8ac59be081b6351681415f4063cf' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='311f5e76c7cec1ec752474a61d837e474b8e750b8e3eed267911ab57c0e5da9a' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='ff09f34935cd189a4912f3f308ec83e4683c309304144eae9cf60ebc552e7cd8' ;;(i386) goRelArch='linux-386' ; goRelSha256='146605e13bf337ff3aacd941a816c5d97a8fef8b5817e07fcec4540632085980' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e88b2a2098bc79ad33912d1d27bc3282a7f3231b6f4672f306465bf46ff784ca' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='168d297ec910cb446d1aea878baeb85f1387209f9eb55dde68bddcd4c006dcbb' ;;(*) goRelArch='src' ; goRelSha256='2aa5f088cbb332e73fc3def546800616b38d3bfe6b8713b8a6404060f22503e8' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  --------------- End Go Part ---------------\n#  --------------- Start Java Part ---------------\nRUN mkdir ~/.gnupg\nRUN echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends bzip2 unzip xz-utils fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#  Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-8\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#  https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"8u212-b04\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-\"\nENV JAVA_URL_VERSION=\"8u212b04\"\n#  https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm openjdk.tgz* ; javac -version ; java -version\n#  --------------- End Java Part ---------------\n#  --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\n#  --------------- End Maven Part ---------------\n#  --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#  install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#  --------------- End C++ Part ---------------\n#  --------------- Start Ruby Part --------------\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#  path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#  adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#  (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#  --------------- End Ruby Part ---------------\n#  install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv grpcio\n","injectedSmells":[],"originalDockerfileHash":"49f2d111cd2f23cad15d0c7b001396c1","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:2.7-stretch\n#   Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#   CircleCI required tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git ssh tar gzip ca-certificates -y \\\n && rm -rf /var/lib/apt/lists/*\n#   --------------- Start Go Part ---------------\n#   gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.12.5\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='aea86e3c73495f205929cfebba0d63f1382c8ac59be081b6351681415f4063cf' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='311f5e76c7cec1ec752474a61d837e474b8e750b8e3eed267911ab57c0e5da9a' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='ff09f34935cd189a4912f3f308ec83e4683c309304144eae9cf60ebc552e7cd8' ;;(i386) goRelArch='linux-386' ; goRelSha256='146605e13bf337ff3aacd941a816c5d97a8fef8b5817e07fcec4540632085980' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e88b2a2098bc79ad33912d1d27bc3282a7f3231b6f4672f306465bf46ff784ca' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='168d297ec910cb446d1aea878baeb85f1387209f9eb55dde68bddcd4c006dcbb' ;;(*) goRelArch='src' ; goRelSha256='2aa5f088cbb332e73fc3def546800616b38d3bfe6b8713b8a6404060f22503e8' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   --------------- End Go Part ---------------\n#   --------------- Start Java Part ---------------\nRUN mkdir ~/.gnupg\nRUN echo \"disable-ipv6\" >> ~/.gnupg/dirmngr.conf\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends bzip2 unzip xz-utils fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-8\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#   https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"8u212-b04\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u212-b04/OpenJDK8U-\"\nENV JAVA_URL_VERSION=\"8u212b04\"\n#   https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm openjdk.tgz* ; javac -version ; java -version\n#   --------------- End Java Part ---------------\n#   --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\n#   --------------- End Maven Part ---------------\n#   --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#   install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#   --------------- End C++ Part ---------------\n#   --------------- Start Ruby Part --------------\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#   --------------- End Ruby Part ---------------\n#   install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv grpcio\n","originalDockerfileUglifiedHash":"ddf99627de4c910e680040c53f4b12c5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9476574c8ae41d9557d9ba30dd601ffaaadb5f19.dockerfile"}