{"seed":3254426095,"processedDockerfileHash":"60a32b4407ef18db8692848c6d1e142a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:jessie\n#   Base image for CommonSearch backend development\n#   Uses bits from:\n#   https://github.com/gettyimages/docker-spark/blob/master/Dockerfile\n#   https://github.com/docker-library/openjdk/blob/master/8-jre/Dockerfile\n#\n#   httpredir.debian.org is often unreliable\n#   https://github.com/docker-library/buildpack-deps/issues/40\n#\nRUN echo 'deb ftp://ftp.us.debian.org/debian/ jessie main\\n deb ftp://ftp.us.debian.org/debian/ jessie-updates main\\n deb http://security.debian.org jessie/updates main\\n' > /etc/apt/sources.list\nRUN echo 'deb http://ftp.us.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list\n#\n#   General packages & dependencies\n#\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\nENV LANG=\"C.UTF-8\"\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends ca-certificates curl wget git gcc build-essential make cmake python python-pip python-dev vim zlib1g-dev libbz2-dev libsnappy-dev libgflags-dev libxml2-dev libxslt-dev libffi-dev libtool automake strace pkg-config net-tools unzip dstat openjdk-8-jre-headless ca-certificates-java -y\n#   We could do this to save on image size but we're optimizing for developer experience instead\n#   && rm -rf /var/lib/apt/lists/*\n#\n#   RocksDB\n#\nENV ROCKSDB_VERSION=\"4.1\"\nRUN wget https://github.com/facebook/rocksdb/archive/v${ROCKSDB_VERSION}.tar.gz \\\n && tar -zxvf v${ROCKSDB_VERSION}.tar.gz \\\n && cd rocksdb-${ROCKSDB_VERSION} \\\n && PORTABLE=1 make shared_lib \\\n && make install \\\n && cd .. \\\n && rm -rf rocksdb-${ROCKSDB_VERSION} v${ROCKSDB_VERSION}.tar.gz\n#\n#   Install Gumbo\n#\nENV GUMBO_VERSION=\"0.10.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN wget https://github.com/google/gumbo-parser/archive/v${GUMBO_VERSION}.tar.gz \\\n && tar zxf v${GUMBO_VERSION}.tar.gz \\\n && cd gumbo-parser-${GUMBO_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf gumbo-parser-${GUMBO_VERSION} v${GUMBO_VERSION}.tar.gz\n#\n#   Install RE2\n#\nRUN mkdir -p /tmp/re2 \\\n && curl -L 'https://github.com/google/re2/archive/636bc71728b7488c43f9441ecfc80bdb1905b3f0.tar.gz' -o /tmp/re2/re2.tar.gz \\\n && cd /tmp/re2 \\\n && tar zxvf re2.tar.gz --strip-components=1 \\\n && make \\\n && make install \\\n && rm -rf /tmp/re2 \\\n && ldconfig\n#\n#   Install Protocol Buffers\n#\n#   v3.0.0 doesn't build anymore - see https://github.com/google/protobuf/commit/1760feb621a913189b90fe8595fffb74bce84598\nENV PROTOBUF_VERSION=\"a098e809336c5fbad7a8ff8f1210e5e0ac8d29b2\"\nRUN curl -sL https://github.com/google/protobuf/archive/${PROTOBUF_VERSION}.tar.gz | tar zx \\\n && cd protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf protobuf-${PROTOBUF_VERSION}\n#   Oracle JDK is recommended in some places versus Open JDK so it may be interesting to\n#   benchmark them or try Oracle JDK to single-out bugs in Open JDK. However it is closed-source\n#   so we can't use it.\n#   ENV JAVA_HOME /usr/jdk1.8.0_31\n#   ENV PATH $PATH:$JAVA_HOME/bin\n#   RUN curl -sL --retry 3 --insecure \\\n#     --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n#     \"http://download.oracle.com/otn-pub/java/jdk/8u31-b13/server-jre-8u31-linux-x64.tar.gz\" \\\n#     | gunzip \\\n#     | tar x -C /usr/ \\\n#     && ln -s $JAVA_HOME /usr/java \\\n#     && rm -rf $JAVA_HOME/man\n#\n#   Install Spark\n#\n#   https://people.apache.org/~pwendell/spark-nightly/spark-branch-2.0-bin/spark-2.0.1-SNAPSHOT-2016_07_29_00_24-5cd79c3-bin/\nENV SPARK_VERSION=\"2.0.1-SNAPSHOT\"\nENV SPARK_HOME=\"/usr/spark\"\nENV PATH=\"$PATH:$SPARK_HOME/bin\"\nENV SPARK_CONF_DIR=\"/cosr/back/spark/conf\"\n#   http://d3kbcqa49mib13.cloudfront.net/spark-$SPARK_VERSION-bin-without-hadoop.tgz\nRUN curl -sL --retry 3 \"https://s3.amazonaws.com/packages.commonsearch.org/spark/spark-2.0.1-SNAPSHOT-bin-hadoop2.7.tgz\" | tar xz -C /usr/ \\\n && ls -la /usr/ \\\n && ln -s /usr/spark-$SPARK_VERSION-bin-hadoop2.7 $SPARK_HOME\n#\n#   Install Hadoop\n#\nENV HADOOP_VERSION=\"2.7.2\"\nENV HADOOP_HOME=\"/usr/hadoop\"\nENV PATH=\"$PATH:$HADOOP_HOME/bin\"\nRUN curl -sL http://www.eu.apache.org/dist/hadoop/common/hadoop-$HADOOP_VERSION/hadoop-$HADOOP_VERSION.tar.gz | tar -xz -C /usr/\nRUN cd /usr/ \\\n && ln -s ./hadoop-$HADOOP_VERSION hadoop\n#\n#   Spark packages\n#\nRUN wget 'https://repo1.maven.org/maven2/org/apache/parquet/parquet-tools/1.8.1/parquet-tools-1.8.1.jar' -P /usr/lib/\n#   Download the current dependencies so we don't have to do it at first run\nCOPY spark/conf/spark-defaults.conf /tmp/spark.conf\nRUN SPARK_DIST_CLASSPATH=$( hadoop classpath ;) spark-submit --properties-file /tmp/spark.conf /usr/spark/examples/src/main/python/pi.py \\\n && rm /tmp/spark.conf\n#\n#   Install PyPy for performance testing\n#\nRUN curl -sL 'https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.3.1-linux_x86_64-portable.tar.bz2' -o /pypy.tar.bz2 \\\n && mkdir -p /opt/pypy/ \\\n && tar jxvf /pypy.tar.bz2 -C /opt/pypy/ --strip-components=1 \\\n && rm /pypy.tar.bz2\n#\n#   Python modules not on PyPI\n#\n#   FAUP\nRUN cd /tmp \\\n && git clone https://github.com/stricaud/faup.git \\\n && cd faup \\\n && git checkout 07f9550fb288a94efccdaeeae66c34aafa91aded \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd ../src/lib/bindings/python \\\n && python setup.py install \\\n && cd / \\\n && rm -rf /tmp/faup\n#\n#   Python setup\n#\nCOPY requirements.txt /requirements.txt\n#   Upgrade pip because debian has a really old version\nRUN pip install pip==23.1 --upgrade --ignore-installed\nRUN pip install -r /requirements.txt\n#\n#   Common Search setup\n#\n#   Base directory\nRUN mkdir -p /cosr/back\n#   Save the hash at the time the image was built\nCOPY .dockerhash /cosr/.back-dockerhash\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:jessie\n#  Base image for CommonSearch backend development\n#  Uses bits from:\n#  https://github.com/gettyimages/docker-spark/blob/master/Dockerfile\n#  https://github.com/docker-library/openjdk/blob/master/8-jre/Dockerfile\n#\n#  httpredir.debian.org is often unreliable\n#  https://github.com/docker-library/buildpack-deps/issues/40\n#\nRUN echo 'deb ftp://ftp.us.debian.org/debian/ jessie main\\n deb ftp://ftp.us.debian.org/debian/ jessie-updates main\\n deb http://security.debian.org jessie/updates main\\n' > /etc/apt/sources.list\nRUN echo 'deb http://ftp.us.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list\n#\n#  General packages & dependencies\n#\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\nENV LANG=\"C.UTF-8\"\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends ca-certificates curl wget git gcc build-essential make cmake python python-pip python-dev vim zlib1g-dev libbz2-dev libsnappy-dev libgflags-dev libxml2-dev libxslt-dev libffi-dev libtool automake strace pkg-config net-tools unzip dstat openjdk-8-jre-headless ca-certificates-java -y\n#  We could do this to save on image size but we're optimizing for developer experience instead\n#  && rm -rf /var/lib/apt/lists/*\n#\n#  RocksDB\n#\nENV ROCKSDB_VERSION=\"4.1\"\nRUN wget https://github.com/facebook/rocksdb/archive/v${ROCKSDB_VERSION}.tar.gz \\\n && tar -zxvf v${ROCKSDB_VERSION}.tar.gz \\\n && cd rocksdb-${ROCKSDB_VERSION} \\\n && PORTABLE=1 make shared_lib \\\n && make install \\\n && cd .. \\\n && rm -rf rocksdb-${ROCKSDB_VERSION} v${ROCKSDB_VERSION}.tar.gz\n#\n#  Install Gumbo\n#\nENV GUMBO_VERSION=\"0.10.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN wget https://github.com/google/gumbo-parser/archive/v${GUMBO_VERSION}.tar.gz \\\n && tar zxf v${GUMBO_VERSION}.tar.gz \\\n && cd gumbo-parser-${GUMBO_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf gumbo-parser-${GUMBO_VERSION} v${GUMBO_VERSION}.tar.gz\n#\n#  Install RE2\n#\nRUN mkdir -p /tmp/re2 \\\n && curl -L 'https://github.com/google/re2/archive/636bc71728b7488c43f9441ecfc80bdb1905b3f0.tar.gz' -o /tmp/re2/re2.tar.gz \\\n && cd /tmp/re2 \\\n && tar zxvf re2.tar.gz --strip-components=1 \\\n && make \\\n && make install \\\n && rm -rf /tmp/re2 \\\n && ldconfig\n#\n#  Install Protocol Buffers\n#\n#  v3.0.0 doesn't build anymore - see https://github.com/google/protobuf/commit/1760feb621a913189b90fe8595fffb74bce84598\nENV PROTOBUF_VERSION=\"a098e809336c5fbad7a8ff8f1210e5e0ac8d29b2\"\nRUN curl -sL https://github.com/google/protobuf/archive/${PROTOBUF_VERSION}.tar.gz | tar zx \\\n && cd protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf protobuf-${PROTOBUF_VERSION}\n#  Oracle JDK is recommended in some places versus Open JDK so it may be interesting to\n#  benchmark them or try Oracle JDK to single-out bugs in Open JDK. However it is closed-source\n#  so we can't use it.\n#  ENV JAVA_HOME /usr/jdk1.8.0_31\n#  ENV PATH $PATH:$JAVA_HOME/bin\n#  RUN curl -sL --retry 3 --insecure \\\n#    --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n#    \"http://download.oracle.com/otn-pub/java/jdk/8u31-b13/server-jre-8u31-linux-x64.tar.gz\" \\\n#    | gunzip \\\n#    | tar x -C /usr/ \\\n#    && ln -s $JAVA_HOME /usr/java \\\n#    && rm -rf $JAVA_HOME/man\n#\n#  Install Spark\n#\n#  https://people.apache.org/~pwendell/spark-nightly/spark-branch-2.0-bin/spark-2.0.1-SNAPSHOT-2016_07_29_00_24-5cd79c3-bin/\nENV SPARK_VERSION=\"2.0.1-SNAPSHOT\"\nENV SPARK_HOME=\"/usr/spark\"\nENV PATH=\"$PATH:$SPARK_HOME/bin\"\nENV SPARK_CONF_DIR=\"/cosr/back/spark/conf\"\n#  http://d3kbcqa49mib13.cloudfront.net/spark-$SPARK_VERSION-bin-without-hadoop.tgz\nRUN curl -sL --retry 3 \"https://s3.amazonaws.com/packages.commonsearch.org/spark/spark-2.0.1-SNAPSHOT-bin-hadoop2.7.tgz\" | tar xz -C /usr/ \\\n && ls -la /usr/ \\\n && ln -s /usr/spark-$SPARK_VERSION-bin-hadoop2.7 $SPARK_HOME\n#\n#  Install Hadoop\n#\nENV HADOOP_VERSION=\"2.7.2\"\nENV HADOOP_HOME=\"/usr/hadoop\"\nENV PATH=\"$PATH:$HADOOP_HOME/bin\"\nRUN curl -sL http://www.eu.apache.org/dist/hadoop/common/hadoop-$HADOOP_VERSION/hadoop-$HADOOP_VERSION.tar.gz | tar -xz -C /usr/\nRUN cd /usr/ \\\n && ln -s ./hadoop-$HADOOP_VERSION hadoop\n#\n#  Spark packages\n#\nRUN wget 'https://repo1.maven.org/maven2/org/apache/parquet/parquet-tools/1.8.1/parquet-tools-1.8.1.jar' -P /usr/lib/\n#  Download the current dependencies so we don't have to do it at first run\nADD spark/conf/spark-defaults.conf /tmp/spark.conf\nRUN SPARK_DIST_CLASSPATH=$( hadoop classpath ;) spark-submit --properties-file /tmp/spark.conf /usr/spark/examples/src/main/python/pi.py \\\n && rm /tmp/spark.conf\n#\n#  Install PyPy for performance testing\n#\nRUN curl -sL 'https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.3.1-linux_x86_64-portable.tar.bz2' -o /pypy.tar.bz2 \\\n && mkdir -p /opt/pypy/ \\\n && tar jxvf /pypy.tar.bz2 -C /opt/pypy/ --strip-components=1 \\\n && rm /pypy.tar.bz2\n#\n#  Python modules not on PyPI\n#\n#  FAUP\nRUN cd /tmp \\\n && git clone https://github.com/stricaud/faup.git \\\n && cd faup \\\n && git checkout 07f9550fb288a94efccdaeeae66c34aafa91aded \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd ../src/lib/bindings/python \\\n && python setup.py install \\\n && cd / \\\n && rm -rf /tmp/faup\n#\n#  Python setup\n#\nADD requirements.txt /requirements.txt\n#  Upgrade pip because debian has a really old version\nRUN pip install pip --upgrade --ignore-installed\nRUN pip install -r /requirements.txt\n#\n#  Common Search setup\n#\n#  Base directory\nRUN mkdir -p /cosr/back\n#  Save the hash at the time the image was built\nADD .dockerhash /cosr/.back-dockerhash\n","injectedSmells":[],"originalDockerfileHash":"ca7afbf09f9963cbd2be9e18c1fa99ef","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:jessie\n#   Base image for CommonSearch backend development\n#   Uses bits from:\n#   https://github.com/gettyimages/docker-spark/blob/master/Dockerfile\n#   https://github.com/docker-library/openjdk/blob/master/8-jre/Dockerfile\n#\n#   httpredir.debian.org is often unreliable\n#   https://github.com/docker-library/buildpack-deps/issues/40\n#\nRUN echo 'deb ftp://ftp.us.debian.org/debian/ jessie main\\n deb ftp://ftp.us.debian.org/debian/ jessie-updates main\\n deb http://security.debian.org jessie/updates main\\n' > /etc/apt/sources.list\nRUN echo 'deb http://ftp.us.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list\n#\n#   General packages & dependencies\n#\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\nENV LANG=\"C.UTF-8\"\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends ca-certificates curl wget git gcc build-essential make cmake python python-pip python-dev vim zlib1g-dev libbz2-dev libsnappy-dev libgflags-dev libxml2-dev libxslt-dev libffi-dev libtool automake strace pkg-config net-tools unzip dstat openjdk-8-jre-headless ca-certificates-java -y\n#   We could do this to save on image size but we're optimizing for developer experience instead\n#   && rm -rf /var/lib/apt/lists/*\n#\n#   RocksDB\n#\nENV ROCKSDB_VERSION=\"4.1\"\nRUN wget https://github.com/facebook/rocksdb/archive/v${ROCKSDB_VERSION}.tar.gz \\\n && tar -zxvf v${ROCKSDB_VERSION}.tar.gz \\\n && cd rocksdb-${ROCKSDB_VERSION} \\\n && PORTABLE=1 make shared_lib \\\n && make install \\\n && cd .. \\\n && rm -rf rocksdb-${ROCKSDB_VERSION} v${ROCKSDB_VERSION}.tar.gz\n#\n#   Install Gumbo\n#\nENV GUMBO_VERSION=\"0.10.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN wget https://github.com/google/gumbo-parser/archive/v${GUMBO_VERSION}.tar.gz \\\n && tar zxf v${GUMBO_VERSION}.tar.gz \\\n && cd gumbo-parser-${GUMBO_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf gumbo-parser-${GUMBO_VERSION} v${GUMBO_VERSION}.tar.gz\n#\n#   Install RE2\n#\nRUN mkdir -p /tmp/re2 \\\n && curl -L 'https://github.com/google/re2/archive/636bc71728b7488c43f9441ecfc80bdb1905b3f0.tar.gz' -o /tmp/re2/re2.tar.gz \\\n && cd /tmp/re2 \\\n && tar zxvf re2.tar.gz --strip-components=1 \\\n && make \\\n && make install \\\n && rm -rf /tmp/re2 \\\n && ldconfig\n#\n#   Install Protocol Buffers\n#\n#   v3.0.0 doesn't build anymore - see https://github.com/google/protobuf/commit/1760feb621a913189b90fe8595fffb74bce84598\nENV PROTOBUF_VERSION=\"a098e809336c5fbad7a8ff8f1210e5e0ac8d29b2\"\nRUN curl -sL https://github.com/google/protobuf/archive/${PROTOBUF_VERSION}.tar.gz | tar zx \\\n && cd protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd .. \\\n && rm -rf protobuf-${PROTOBUF_VERSION}\n#   Oracle JDK is recommended in some places versus Open JDK so it may be interesting to\n#   benchmark them or try Oracle JDK to single-out bugs in Open JDK. However it is closed-source\n#   so we can't use it.\n#   ENV JAVA_HOME /usr/jdk1.8.0_31\n#   ENV PATH $PATH:$JAVA_HOME/bin\n#   RUN curl -sL --retry 3 --insecure \\\n#     --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \\\n#     \"http://download.oracle.com/otn-pub/java/jdk/8u31-b13/server-jre-8u31-linux-x64.tar.gz\" \\\n#     | gunzip \\\n#     | tar x -C /usr/ \\\n#     && ln -s $JAVA_HOME /usr/java \\\n#     && rm -rf $JAVA_HOME/man\n#\n#   Install Spark\n#\n#   https://people.apache.org/~pwendell/spark-nightly/spark-branch-2.0-bin/spark-2.0.1-SNAPSHOT-2016_07_29_00_24-5cd79c3-bin/\nENV SPARK_VERSION=\"2.0.1-SNAPSHOT\"\nENV SPARK_HOME=\"/usr/spark\"\nENV PATH=\"$PATH:$SPARK_HOME/bin\"\nENV SPARK_CONF_DIR=\"/cosr/back/spark/conf\"\n#   http://d3kbcqa49mib13.cloudfront.net/spark-$SPARK_VERSION-bin-without-hadoop.tgz\nRUN curl -sL --retry 3 \"https://s3.amazonaws.com/packages.commonsearch.org/spark/spark-2.0.1-SNAPSHOT-bin-hadoop2.7.tgz\" | tar xz -C /usr/ \\\n && ls -la /usr/ \\\n && ln -s /usr/spark-$SPARK_VERSION-bin-hadoop2.7 $SPARK_HOME\n#\n#   Install Hadoop\n#\nENV HADOOP_VERSION=\"2.7.2\"\nENV HADOOP_HOME=\"/usr/hadoop\"\nENV PATH=\"$PATH:$HADOOP_HOME/bin\"\nRUN curl -sL http://www.eu.apache.org/dist/hadoop/common/hadoop-$HADOOP_VERSION/hadoop-$HADOOP_VERSION.tar.gz | tar -xz -C /usr/\nRUN cd /usr/ \\\n && ln -s ./hadoop-$HADOOP_VERSION hadoop\n#\n#   Spark packages\n#\nRUN wget 'https://repo1.maven.org/maven2/org/apache/parquet/parquet-tools/1.8.1/parquet-tools-1.8.1.jar' -P /usr/lib/\n#   Download the current dependencies so we don't have to do it at first run\nADD spark/conf/spark-defaults.conf /tmp/spark.conf\nRUN SPARK_DIST_CLASSPATH=$( hadoop classpath ;) spark-submit --properties-file /tmp/spark.conf /usr/spark/examples/src/main/python/pi.py \\\n && rm /tmp/spark.conf\n#\n#   Install PyPy for performance testing\n#\nRUN curl -sL 'https://bitbucket.org/squeaky/portable-pypy/downloads/pypy-5.3.1-linux_x86_64-portable.tar.bz2' -o /pypy.tar.bz2 \\\n && mkdir -p /opt/pypy/ \\\n && tar jxvf /pypy.tar.bz2 -C /opt/pypy/ --strip-components=1 \\\n && rm /pypy.tar.bz2\n#\n#   Python modules not on PyPI\n#\n#   FAUP\nRUN cd /tmp \\\n && git clone https://github.com/stricaud/faup.git \\\n && cd faup \\\n && git checkout 07f9550fb288a94efccdaeeae66c34aafa91aded \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd ../src/lib/bindings/python \\\n && python setup.py install \\\n && cd / \\\n && rm -rf /tmp/faup\n#\n#   Python setup\n#\nADD requirements.txt /requirements.txt\n#   Upgrade pip because debian has a really old version\nRUN pip install pip --upgrade --ignore-installed\nRUN pip install -r /requirements.txt\n#\n#   Common Search setup\n#\n#   Base directory\nRUN mkdir -p /cosr/back\n#   Save the hash at the time the image was built\nADD .dockerhash /cosr/.back-dockerhash\n","originalDockerfileUglifiedHash":"d222893e0e80e7b8c1ce2caf93e8bb74","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1fd0efb3bf339c961eb7de043064b939b2bdccf2.dockerfile"}