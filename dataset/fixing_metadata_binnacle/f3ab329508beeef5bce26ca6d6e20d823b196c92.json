{"seed":140696268,"processedDockerfileHash":"27c1be2536d05087ff49d6610648ce14","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n#   use this file except in compliance with the License. You may obtain a copy of\n#   the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#   License for the specific language governing permissions and limitations under\n#   the License.\n#   Base layer containing dependencies needed at runtime. This layer will be\n#   cached after the initial build.\nFROM debian:stretch AS runtime\nMAINTAINER CouchDB Developers dev@couchdb.apache.org\n#   Add CouchDB user account\nRUN groupadd -g 5984 -r couchdb \\\n && useradd -u 5984 -d /opt/couchdb -g couchdb couchdb\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends apt-transport-https=1.4.11 ca-certificates=20200601~deb9u2 curl=7.52.1-5+deb9u16 dirmngr=2.1.18-8~deb9u4 gnupg=2.1.18-8~deb9u4 libicu57=57.1-6+deb9u5 libssl1.1=1.1.0l-1~deb9u6 openssl=1.1.0l-1~deb9u6 -y \\\n && echo \"deb https://apache.bintray.com/couchdb-deb stretch main\" | tee /etc/apt/sources.list.d/couchdb.list \\\n && cat /etc/apt/sources.list.d/couchdb.list \\\n && for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 8756C4F765C9AC3CB6B85D62379CE192D401AB61 \\\n && break || : ; done \\\n && gpg -a --export 8756C4F765C9AC3CB6B85D62379CE192D401AB61 > /etc/apt/trusted.gpg.d/couchdb.gpg.asc \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends couch-libmozjs185-1.0 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root and tini for signal handling\n#   see https://github.com/apache/couchdb-docker/pull/28#discussion_r141112407\nENV GOSU_VERSION=\"1.10\"\nENV TINI_VERSION=\"0.16.1\"\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends wget=1.18-5+deb9u3 -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch\" ; wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini ; rm -rf \"$GNUPGHOME\" /usr/local/bin/tini.asc ; chmod +x /usr/local/bin/tini ; tini --version ; apt-get purge -y --auto-remove wget\n#   Dependencies only needed during build time. This layer will also be cached\nFROM runtime AS build_dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential=12.3 couch-libmozjs185-dev erlang-nox=1:19.2.1+dfsg-2+deb9u3 erlang-reltool=1:19.2.1+dfsg-2+deb9u3 erlang-dev=1:19.2.1+dfsg-2+deb9u3 git=1:2.11.0-3+deb9u7 libcurl4-openssl-dev=7.52.1-5+deb9u16 libicu-dev=57.1-6+deb9u5 python3=3.5.3-1 libpython3-dev=3.5.3-1 python3-pip=9.0.1-2+deb9u2 python3-sphinx=1.4.9-2 -y\nRUN pip3 install --upgrade sphinx_rtd_theme nose requests hypothesis\n#   Node is special\nRUN set -ex ; curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - ; echo 'deb https://deb.nodesource.com/node_8.x stretch main' > /etc/apt/sources.list.d/nodesource.list; echo 'deb-src https://deb.nodesource.com/node_8.x stretch main' >> /etc/apt/sources.list.d/nodesource.list; apt-get update -y \\\n && apt-get install --no-install-recommends nodejs=4.8.2~dfsg-1 -y ; npm install grunt-cli@1.4.3 -g\n#   Clone CouchDB source code including all dependencies\nARG clone_url=https://github.com/apache/couchdb.git\nRUN git clone $clone_url /usr/src/couchdb\nWORKDIR /usr/src/couchdb\nRUN ./configure\n#   This layer performs the actual build of a relocatable, self-contained\n#   release of CouchDB. It pulls down the latest changes from the remote\n#   origin (because the layer above will be cached) and switches to the\n#   branch specified in the build_arg (defaults to master)\nFROM build_dependencies AS build\nARG checkout_branch=master\nARG configure_options\nWORKDIR /usr/src/couchdb/\nRUN git fetch origin \\\n && git checkout $checkout_branch \\\n && ./configure $configure_options \\\n && make release\n#   This results in a single layer image (or at least skips the build stuff?)\nFROM runtime\nCOPY --from=build /usr/src/couchdb/rel/couchdb /opt/couchdb\n#   Add configuration\nCOPY local.ini /opt/couchdb/etc/default.d/\nCOPY vm.args /opt/couchdb/etc/\nCOPY docker-entrypoint.sh /\n#   Setup directories and permissions\nRUN find /opt/couchdb !\nWORKDIR /opt/couchdb\nEXPOSE 5984/tcp 4369/tcp 9100/tcp\nVOLUME [\"/opt/couchdb/data\"]\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\nCMD [\"/opt/couchdb/bin/couchdb\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n#  use this file except in compliance with the License. You may obtain a copy of\n#  the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#  License for the specific language governing permissions and limitations under\n#  the License.\n#  Base layer containing dependencies needed at runtime. This layer will be\n#  cached after the initial build.\nFROM debian:stretch AS runtime\nMAINTAINER CouchDB Developers dev@couchdb.apache.org\n#  Add CouchDB user account\nRUN groupadd -g 5984 -r couchdb \\\n && useradd -u 5984 -d /opt/couchdb -g couchdb couchdb\nRUN apt-get update -y \\\n && apt-get install apt-transport-https ca-certificates curl dirmngr gnupg libicu57 libssl1.1 openssl -y \\\n && echo \"deb https://apache.bintray.com/couchdb-deb stretch main\" | tee /etc/apt/sources.list.d/couchdb.list \\\n && cat /etc/apt/sources.list.d/couchdb.list \\\n && for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 8756C4F765C9AC3CB6B85D62379CE192D401AB61 \\\n && break || : ; done \\\n && gpg -a --export 8756C4F765C9AC3CB6B85D62379CE192D401AB61 > /etc/apt/trusted.gpg.d/couchdb.gpg.asc \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends couch-libmozjs185-1.0 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  grab gosu for easy step-down from root and tini for signal handling\n#  see https://github.com/apache/couchdb-docker/pull/28#discussion_r141112407\nENV GOSU_VERSION=\"1.10\"\nENV TINI_VERSION=\"0.16.1\"\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends wget -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch\" ; wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini ; rm -rf \"$GNUPGHOME\" /usr/local/bin/tini.asc ; chmod +x /usr/local/bin/tini ; tini --version ; apt-get purge -y --auto-remove wget\n#  Dependencies only needed during build time. This layer will also be cached\nFROM runtime AS build_dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential couch-libmozjs185-dev erlang-nox erlang-reltool erlang-dev git libcurl4-openssl-dev libicu-dev python3 libpython3-dev python3-pip python3-sphinx -y\nRUN pip3 install --upgrade sphinx_rtd_theme nose requests hypothesis\n#  Node is special\nRUN set -ex ; curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - ; echo 'deb https://deb.nodesource.com/node_8.x stretch main' > /etc/apt/sources.list.d/nodesource.list; echo 'deb-src https://deb.nodesource.com/node_8.x stretch main' >> /etc/apt/sources.list.d/nodesource.list; apt-get update -y \\\n && apt-get install nodejs -y ; npm install grunt-cli -g\n#  Clone CouchDB source code including all dependencies\nARG clone_url=https://github.com/apache/couchdb.git\nRUN git clone $clone_url /usr/src/couchdb\nWORKDIR /usr/src/couchdb\nRUN ./configure\n#  This layer performs the actual build of a relocatable, self-contained\n#  release of CouchDB. It pulls down the latest changes from the remote\n#  origin (because the layer above will be cached) and switches to the\n#  branch specified in the build_arg (defaults to master)\nFROM build_dependencies AS build\nARG checkout_branch=master\nARG configure_options\nWORKDIR /usr/src/couchdb/\nRUN git fetch origin \\\n && git checkout $checkout_branch \\\n && ./configure $configure_options \\\n && make release\n#  This results in a single layer image (or at least skips the build stuff?)\nFROM runtime\nCOPY --from=build /usr/src/couchdb/rel/couchdb /opt/couchdb\n#  Add configuration\nCOPY local.ini /opt/couchdb/etc/default.d/\nCOPY vm.args /opt/couchdb/etc/\nCOPY docker-entrypoint.sh /\n#  Setup directories and permissions\nRUN find /opt/couchdb ! ( -user couchdb -group couchdb ) -exec chown -f couchdb:couchdb '{}' +\nWORKDIR /opt/couchdb\nEXPOSE 5984/tcp 4369/tcp 9100/tcp\nVOLUME [\"/opt/couchdb/data\"]\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\nCMD [\"/opt/couchdb/bin/couchdb\"]\n","injectedSmells":[],"originalDockerfileHash":"540a21ad7ce69b99a85bd5110862dacc","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n#   use this file except in compliance with the License. You may obtain a copy of\n#   the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#   License for the specific language governing permissions and limitations under\n#   the License.\n#   Base layer containing dependencies needed at runtime. This layer will be\n#   cached after the initial build.\nFROM debian:stretch AS runtime\nMAINTAINER CouchDB Developers dev@couchdb.apache.org\n#   Add CouchDB user account\nRUN groupadd -g 5984 -r couchdb \\\n && useradd -u 5984 -d /opt/couchdb -g couchdb couchdb\nRUN apt-get update -y \\\n && apt-get install apt-transport-https ca-certificates curl dirmngr gnupg libicu57 libssl1.1 openssl -y \\\n && echo \"deb https://apache.bintray.com/couchdb-deb stretch main\" | tee /etc/apt/sources.list.d/couchdb.list \\\n && cat /etc/apt/sources.list.d/couchdb.list \\\n && for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 8756C4F765C9AC3CB6B85D62379CE192D401AB61 \\\n && break || : ; done \\\n && gpg -a --export 8756C4F765C9AC3CB6B85D62379CE192D401AB61 > /etc/apt/trusted.gpg.d/couchdb.gpg.asc \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends couch-libmozjs185-1.0 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root and tini for signal handling\n#   see https://github.com/apache/couchdb-docker/pull/28#discussion_r141112407\nENV GOSU_VERSION=\"1.10\"\nENV TINI_VERSION=\"0.16.1\"\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends wget -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch\" ; wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; echo \"disable-ipv6\" >> ${GNUPGHOME}/dirmngr.conf; for server in $( shuf -e pgpkeys.mit.edu ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu ;); do gpg --batch --keyserver $server --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n && break || : ; done ; gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini ; rm -rf \"$GNUPGHOME\" /usr/local/bin/tini.asc ; chmod +x /usr/local/bin/tini ; tini --version ; apt-get purge -y --auto-remove wget\n#   Dependencies only needed during build time. This layer will also be cached\nFROM runtime AS build_dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential couch-libmozjs185-dev erlang-nox erlang-reltool erlang-dev git libcurl4-openssl-dev libicu-dev python3 libpython3-dev python3-pip python3-sphinx -y\nRUN pip3 install --upgrade sphinx_rtd_theme nose requests hypothesis\n#   Node is special\nRUN set -ex ; curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - ; echo 'deb https://deb.nodesource.com/node_8.x stretch main' > /etc/apt/sources.list.d/nodesource.list; echo 'deb-src https://deb.nodesource.com/node_8.x stretch main' >> /etc/apt/sources.list.d/nodesource.list; apt-get update -y \\\n && apt-get install nodejs -y ; npm install grunt-cli -g\n#   Clone CouchDB source code including all dependencies\nARG clone_url=https://github.com/apache/couchdb.git\nRUN git clone $clone_url /usr/src/couchdb\nWORKDIR /usr/src/couchdb\nRUN ./configure\n#   This layer performs the actual build of a relocatable, self-contained\n#   release of CouchDB. It pulls down the latest changes from the remote\n#   origin (because the layer above will be cached) and switches to the\n#   branch specified in the build_arg (defaults to master)\nFROM build_dependencies AS build\nARG checkout_branch=master\nARG configure_options\nWORKDIR /usr/src/couchdb/\nRUN git fetch origin \\\n && git checkout $checkout_branch \\\n && ./configure $configure_options \\\n && make release\n#   This results in a single layer image (or at least skips the build stuff?)\nFROM runtime\nCOPY --from=build /usr/src/couchdb/rel/couchdb /opt/couchdb\n#   Add configuration\nCOPY local.ini /opt/couchdb/etc/default.d/\nCOPY vm.args /opt/couchdb/etc/\nCOPY docker-entrypoint.sh /\n#   Setup directories and permissions\nRUN find /opt/couchdb !\nWORKDIR /opt/couchdb\nEXPOSE 5984/tcp 4369/tcp 9100/tcp\nVOLUME [\"/opt/couchdb/data\"]\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\nCMD [\"/opt/couchdb/bin/couchdb\"]\n","originalDockerfileUglifiedHash":"94a8655c661ef6ce7c2559dafea805ef","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f3ab329508beeef5bce26ca6d6e20d823b196c92.dockerfile"}