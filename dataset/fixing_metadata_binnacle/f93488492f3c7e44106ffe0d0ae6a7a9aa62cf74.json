{"seed":2562060302,"processedDockerfileHash":"7cf8027b3463b25db815f923e9e5501d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:18.04 AS builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20211016ubuntu0.18.04.1 cmake=3.10.2-1ubuntu2.18.04.2 g++=4:7.4.0-1ubuntu2.3 make=4.1-9.1ubuntu1 pkg-config=0.29.1-0ubuntu2 graphviz=2.40.1-2 doxygen=1.8.13-10 git=1:2.17.1-1ubuntu0.17 curl=7.58.0-2ubuntu3.24 libtool-bin=2.4.6-2 autoconf=2.69-11 libgtest-dev=1.8.0-6 automake=1:1.15.1-3ubuntu2 --yes\nWORKDIR /usr/local\n#  # Boost\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nARG NPROC\nRUN rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) debug-all ; else make -j$NPROC debug-all ; fi\n#   runtime stage\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20211016ubuntu0.18.04.1 --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin/* /usr/local/bin/\n#   Contains the blockchain\nVOLUME /root/.safex\n#   Generate your wallet via accessing the container and run:\n#   cd /wallet\n#   safex-wallet-cli\nVOLUME /wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\nENTRYPOINT [\"safexd\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Multistage docker build, requires docker 17.05\n#  builder stage\nFROM ubuntu:18.04 AS builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf libgtest-dev automake --yes\nWORKDIR /usr/local\n# # Boost\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#  OpenSSL\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#  ZMQ\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#  zmq.hpp\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#  Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#  Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nARG NPROC\nRUN rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) debug-all ; else make -j$NPROC debug-all ; fi\n#  runtime stage\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin/* /usr/local/bin/\n#  Contains the blockchain\nVOLUME /root/.safex\n#  Generate your wallet via accessing the container and run:\n#  cd /wallet\n#  safex-wallet-cli\nVOLUME /wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\nENTRYPOINT [\"safexd\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\n","injectedSmells":[],"originalDockerfileHash":"04fa688a6f6d4227a0ea510f98b5f00e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:18.04 AS builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf libgtest-dev automake --yes\nWORKDIR /usr/local\n#  # Boost\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nARG NPROC\nRUN rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) debug-all ; else make -j$NPROC debug-all ; fi\n#   runtime stage\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin/* /usr/local/bin/\n#   Contains the blockchain\nVOLUME /root/.safex\n#   Generate your wallet via accessing the container and run:\n#   cd /wallet\n#   safex-wallet-cli\nVOLUME /wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\nENTRYPOINT [\"safexd\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\n","originalDockerfileUglifiedHash":"22b85849724a759f36bbf8153657962c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f93488492f3c7e44106ffe0d0ae6a7a9aa62cf74.dockerfile"}