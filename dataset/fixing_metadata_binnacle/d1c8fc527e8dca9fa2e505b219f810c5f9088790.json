{"seed":199068726,"processedDockerfileHash":"25396ff63f964035d705cb4d1cee458a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:xenial-20170214\nMAINTAINER Tamir Duberstein <tamird@gmail.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl -y\nRUN curl -fsSL -O https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb \\\n && dpkg -i dumb-init_1.2.0_amd64.deb \\\n && rm dumb-init_1.2.0_amd64.deb\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list\n#   autoconf - crosstool-ng/bootstrap\n#   bison - crosstool-ng/configure\n#   bzip2 - crosstool-ng/configure\n#   clang - msan: -fsanitize\n#   cmake - msan: libcxx\n#   file - crosstool-ng/build\n#   flex - crosstool-ng/configure\n#   g++ - crosstool-ng/build\n#   gawk - crosstool-ng/configure\n#   git - crosstool-ng/configure\n#   golang - go: bootstrap\n#   gperf - crosstool-ng/configure\n#   help2man - crosstool-ng/configure\n#   iptables - acceptance tests' partition nemesis\n#   libncurses-dev - crosstool-ng/configure\n#   make - crosstool-ng boostrap / CRDB build system\n#   nodejs - ui: all\n#   openssh-client - terraform / jepsen\n#   patch - crosstool-ng/configure\n#   python - msan: libcxx\n#   texinfo - crosstool-ng/configure\n#   unzip - terraform\n#   xz-utils - msan: libcxx / CRDB build system\n#   yarn - ui: all\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf bison bzip2 clang cmake file flex g++ gawk git golang gperf help2man iptables libncurses-dev make nodejs openssh-client patch python texinfo unzip xz-utils yarn -y\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig ./\nRUN mkdir build src \\\n && cd build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && cd .. \\\n && rm -rf build src\nRUN apt-get autoremove -y gcc g++\n#   Build an msan-enabled build of libc++, following instructions from\n#   https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) )\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\n#   BEGIN https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nCOPY parallelbuilds-go1.8.patch /\nRUN curl -fsSL https://storage.googleapis.com/golang/go1.8.3.src.tar.gz -o golang.tar.gz \\\n && echo '5f5dea2447e7dcfdc50fa6b94c512e58bfba5673c039259fd843f68829d99fa6 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && patch -p2 -i /parallelbuilds-go1.8.patch \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash \\\n && rm -rf /*.patch \\\n && apt-get autoremove -y golang\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n#   END https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#   Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://releases.hashicorp.com/terraform/0.8.7/terraform_0.8.7_linux_amd64.zip -o terraform.zip \\\n && unzip -d /usr/local/bin terraform.zip \\\n && rm terraform.zip\nENV PATH=\"/opt/backtrace/bin:$PATH\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:xenial-20170214\nMAINTAINER Tamir Duberstein <tamird@gmail.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl -y\nRUN curl -fsSL -O https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb \\\n && dpkg -i dumb-init_1.2.0_amd64.deb \\\n && rm dumb-init_1.2.0_amd64.deb\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list\n#  autoconf - crosstool-ng/bootstrap\n#  bison - crosstool-ng/configure\n#  bzip2 - crosstool-ng/configure\n#  clang - msan: -fsanitize\n#  cmake - msan: libcxx\n#  file - crosstool-ng/build\n#  flex - crosstool-ng/configure\n#  g++ - crosstool-ng/build\n#  gawk - crosstool-ng/configure\n#  git - crosstool-ng/configure\n#  golang - go: bootstrap\n#  gperf - crosstool-ng/configure\n#  help2man - crosstool-ng/configure\n#  iptables - acceptance tests' partition nemesis\n#  libncurses-dev - crosstool-ng/configure\n#  make - crosstool-ng boostrap / CRDB build system\n#  nodejs - ui: all\n#  openssh-client - terraform / jepsen\n#  patch - crosstool-ng/configure\n#  python - msan: libcxx\n#  texinfo - crosstool-ng/configure\n#  unzip - terraform\n#  xz-utils - msan: libcxx / CRDB build system\n#  yarn - ui: all\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf bison bzip2 clang cmake file flex g++ gawk git golang gperf help2man iptables libncurses-dev make nodejs openssh-client patch python texinfo unzip xz-utils yarn -y\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig ./\nRUN mkdir build src \\\n && cd build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && cd .. \\\n && rm -rf build src\nRUN apt-get autoremove -y gcc g++\n#  Build an msan-enabled build of libc++, following instructions from\n#  https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) )\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\n#  BEGIN https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nCOPY parallelbuilds-go1.8.patch /\nRUN curl -fsSL https://storage.googleapis.com/golang/go1.8.3.src.tar.gz -o golang.tar.gz \\\n && echo '5f5dea2447e7dcfdc50fa6b94c512e58bfba5673c039259fd843f68829d99fa6 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && patch -p2 -i /parallelbuilds-go1.8.patch \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash \\\n && rm -rf /*.patch \\\n && apt-get autoremove -y golang\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n#  END https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#  Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://releases.hashicorp.com/terraform/0.8.7/terraform_0.8.7_linux_amd64.zip -o terraform.zip \\\n && unzip -d /usr/local/bin terraform.zip \\\n && rm terraform.zip\nENV PATH=\"/opt/backtrace/bin:$PATH\"\n","injectedSmells":[],"originalDockerfileHash":"e5a1d2d039826aa8eb8523e40bdd8c36","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:xenial-20170214\nMAINTAINER Tamir Duberstein <tamird@gmail.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl -y\nRUN curl -fsSL -O https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb \\\n && dpkg -i dumb-init_1.2.0_amd64.deb \\\n && rm dumb-init_1.2.0_amd64.deb\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list\n#   autoconf - crosstool-ng/bootstrap\n#   bison - crosstool-ng/configure\n#   bzip2 - crosstool-ng/configure\n#   clang - msan: -fsanitize\n#   cmake - msan: libcxx\n#   file - crosstool-ng/build\n#   flex - crosstool-ng/configure\n#   g++ - crosstool-ng/build\n#   gawk - crosstool-ng/configure\n#   git - crosstool-ng/configure\n#   golang - go: bootstrap\n#   gperf - crosstool-ng/configure\n#   help2man - crosstool-ng/configure\n#   iptables - acceptance tests' partition nemesis\n#   libncurses-dev - crosstool-ng/configure\n#   make - crosstool-ng boostrap / CRDB build system\n#   nodejs - ui: all\n#   openssh-client - terraform / jepsen\n#   patch - crosstool-ng/configure\n#   python - msan: libcxx\n#   texinfo - crosstool-ng/configure\n#   unzip - terraform\n#   xz-utils - msan: libcxx / CRDB build system\n#   yarn - ui: all\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf bison bzip2 clang cmake file flex g++ gawk git golang gperf help2man iptables libncurses-dev make nodejs openssh-client patch python texinfo unzip xz-utils yarn -y\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig ./\nRUN mkdir build src \\\n && cd build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && rm -rf * \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build \\\n && cd .. \\\n && rm -rf build src\nRUN apt-get autoremove -y gcc g++\n#   Build an msan-enabled build of libc++, following instructions from\n#   https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) )\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\n#   BEGIN https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nCOPY parallelbuilds-go1.8.patch /\nRUN curl -fsSL https://storage.googleapis.com/golang/go1.8.3.src.tar.gz -o golang.tar.gz \\\n && echo '5f5dea2447e7dcfdc50fa6b94c512e58bfba5673c039259fd843f68829d99fa6 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && patch -p2 -i /parallelbuilds-go1.8.patch \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash \\\n && rm -rf /*.patch \\\n && apt-get autoremove -y golang\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\n#   END https://github.com/docker-library/golang/blob/master/1.8/alpine/Dockerfile\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#   Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://releases.hashicorp.com/terraform/0.8.7/terraform_0.8.7_linux_amd64.zip -o terraform.zip \\\n && unzip -d /usr/local/bin terraform.zip \\\n && rm terraform.zip\nENV PATH=\"/opt/backtrace/bin:$PATH\"\n","originalDockerfileUglifiedHash":"2daa6be77d23a527d4917d5c3971b8e8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d1c8fc527e8dca9fa2e505b219f810c5f9088790.dockerfile"}