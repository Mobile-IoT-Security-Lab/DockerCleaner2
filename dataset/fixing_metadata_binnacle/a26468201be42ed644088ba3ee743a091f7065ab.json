{"seed":994150812,"processedDockerfileHash":"7f431478f082161cb23537d62ea995eb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 sources to build statically linked devmapper library\nENV LVM2_VERSION=\"2.02.173\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   Compile and install (only the needed library)\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link --enable-pkgconfig \\\n && make -C include \\\n && make -C libdm install_device-mapper\n#   Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\n#   IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.12.1\"\n#   Install dependancy packages specific to criu\nRUN apt-get install --no-install-recommends libnet-dev -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"a962578e515185cf06506050b2200c0b81aa84ef\"\n#   To run integration tests docker-pycreds is required.\n#   Before running the integration tests conftest.py is\n#   loaded which results in loads auth.py that\n#   imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#   Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#  allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#  Get lvm2 sources to build statically linked devmapper library\nENV LVM2_VERSION=\"2.02.173\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  Compile and install (only the needed library)\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link --enable-pkgconfig \\\n && make -C include \\\n && make -C libdm install_device-mapper\n#  Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#  Install Go\n#  IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#             will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#             with a heads-up.\n#  IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#  Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.12.1\"\n#  Install dependancy packages specific to criu\nRUN apt-get install libnet-dev -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#  Install two versions of the registry. The first is an older version that\n#  only supports schema1 manifests. The second is a newer version that supports\n#  both. This allows integration-cli tests to cover push/pull with both schema1\n#  and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"a962578e515185cf06506050b2200c0b81aa84ef\"\n#  To run integration tests docker-pycreds is required.\n#  Before running the integration tests conftest.py is\n#  loaded which results in loads auth.py that\n#  imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#  Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#  Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\n#  See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#  Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli\n#  Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#  Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"46a4b121730da4b47290689b3b41899c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run -e DOCKER_GITCOMMIT=foo --privileged docker hack/make.sh test-unit test-integration test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 sources to build statically linked devmapper library\nENV LVM2_VERSION=\"2.02.173\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   Compile and install (only the needed library)\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link --enable-pkgconfig \\\n && make -C include \\\n && make -C libdm install_device-mapper\n#   Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\n#   IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.12.1\"\n#   Install dependancy packages specific to criu\nRUN apt-get install libnet-dev -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"a962578e515185cf06506050b2200c0b81aa84ef\"\n#   To run integration tests docker-pycreds is required.\n#   Before running the integration tests conftest.py is\n#   loaded which results in loads auth.py that\n#   imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:85b379ec16065e4fe4127eb1c5fb1bcc03c559bd36dbb2e22ff496de55925fa6 busybox:latest@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f debian:jessie@sha256:72f784399fd2719b4cb4e16ef8e369a39dc67f53d978cd3e2e7bf4e502c7b793 hello-world:latest@sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy dockercli\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#   Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"5d7958db9d3678f5026960b41b29654f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a26468201be42ed644088ba3ee743a091f7065ab.dockerfile"}