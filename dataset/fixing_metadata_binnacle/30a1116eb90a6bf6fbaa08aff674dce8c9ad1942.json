{"seed":1081925389,"processedDockerfileHash":"ce7f04ad728bcdcdbf74d7c15d3d9b6b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Creates an image suitable for running the Rails stack for OD 1\n#\n#   Build:\n#       docker build --rm -t oregondigital/od1 -f docker/Dockerfile .\n#   TODO: Upgrade ubuntu!  Right now this just needs to work with what we have in\n#   circleci, but longer-term this could get problematic when ubuntu 12 hits EOL.\n#\n#   Known issues:\n#   - VIPS install will need to be figured out for a newer Ubuntu\n#   - Will need to test derivative generation for all types since CLI changes sometimes happen\n#   - ffmpeg will need to be replaced, and libavcode-extra-53 definitely has to be replaced\nFROM ubuntu:16.04\nMAINTAINER Jeremy Echols <jechols@uoregon.edu>\n#  apt won't find some libs if this isn't run\nRUN :\n#   Dependencies for vips installer\nRUN (apt-get update ;apt-get install --no-install-recommends pkg-config=0.29.1-0ubuntu1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-software-properties=0.96.20.10 software-properties-common=0.96.20.10 -y )\n#   Vips!\nRUN (apt-get update ;apt-get install --no-install-recommends automake=1:1.15-4ubuntu1 build-essential=12.1ubuntu2 gtk-doc-tools=1.25-1ubuntu1.1 libglib2.0-dev=2.48.2-0ubuntu4.8 libjpeg-turbo8-dev=1.4.2-0ubuntu3.4 libpng12-dev=1.2.54-1ubuntu1.1 libwebp-dev=0.4.4-1 libtiff5-dev=4.0.6-1ubuntu0.8 libexif-dev=0.6.21-2ubuntu0.6 libgsf-1-dev=1.14.36-1 liblcms2-dev=2.6-3ubuntu2.1 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 swig=3.0.8-0ubuntu3 libmagickcore-dev=8:6.8.9.9-7ubuntu5.16 curl=7.47.0-1ubuntu2.19 -y )\nRUN mkdir -p /opt/libvips\nWORKDIR /opt/libvips\nRUN curl -L https://github.com/libvips/libvips/releases/download/v8.6.3/vips-8.6.3.tar.gz | tar zx\nWORKDIR /opt/libvips/vips-8.6.3\nRUN ./configure --enable-debug=no --enable-docs=no --enable-cxx=yes --without-python --without-orc --without-fftw\nRUN make\nRUN make install\nRUN ldconfig\n#   Various derivative libs\nRUN apt-get purge libreoffice*\nRUN add-apt-repository -y ppa:libreoffice/ppa\nRUN (apt-get update ;apt-get install --no-install-recommends poppler-utils=0.41.0-0ubuntu1.16 poppler-data=0.4.7-7 ghostscript=9.26~dfsg+0-0ubuntu0.16.04.14 libreoffice=1:5.1.6~rc2-0ubuntu1~xenial10 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libmagic-dev=1:5.25-2ubuntu1.4 libmagickwand-dev=8:6.8.9.9-7ubuntu5.16 ffmpeg=7:2.8.17-0ubuntu0.1 libavcodec-ffmpeg-extra56=7:2.8.17-0ubuntu0.1 libvorbis-dev=1.3.5-3ubuntu0.2 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends graphicsmagick=1.3.23-1ubuntu0.6 graphicsmagick-libmagick-dev-compat=1.3.23-1ubuntu0.6 -y )\n#   Database connection libraries\nRUN (apt-get update ;apt-get install --no-install-recommends libmysqlclient-dev=5.7.33-0ubuntu0.16.04.1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libsqlite3-dev=3.11.0-1ubuntu1.5 -y )\n#   Nodejs for compiling assets\nRUN (apt-get update ;apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y )\n#   We need git for all our github-hosted gems\nRUN (apt-get update ;apt-get install --no-install-recommends git=1:2.7.4-0ubuntu1.10 -y )\n#   Rails requires this\nRUN (apt-get update ;apt-get install --no-install-recommends tzdata=2021a-0ubuntu0.16.04 -y )\n#   Dependencies for Ruby\nRUN (apt-get update ;apt-get install --no-install-recommends libssl-dev=1.0.2g-1ubuntu4.20 libreadline-dev=6.3-8ubuntu2 -y )\n#   Grab Ruby manually - can't install the default for Ubuntu 12.04\n#\n#   Make sure this comes after the big downloads, as it's more likely we'll\n#   change our ruby version than, say, our vips version - at least until we deal\n#   with a major change (like OS) that would require a ruby rebuild anyway\nRUN mkdir -p /opt/ruby\nWORKDIR /opt/ruby\nRUN curl https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz | tar zx\nWORKDIR /opt/ruby/ruby-2.1.3\nRUN ./configure\nRUN make\nRUN make install\n#   Grab bundler for installing the gems\nRUN gem install bundler --version 2.4.12\n#   Set an environment variable to store where the app is installed to inside\n#   of the Docker image\nENV INSTALL_PATH=\"/oregondigital\"\nWORKDIR $INSTALL_PATH\n#   Pull down set content first so code updates, which are more common than set\n#   updates, don't re-run the set syncing process\nCOPY docker/sync-sets.sh /sync-sets.sh\nRUN chmod +x /sync-sets.sh\nRUN /sync-sets.sh\n#   Grab the current code from github so we can use this directly or overlay our\n#   own code on top of it - this makes it close to a production image *and*\n#   ensures that changes to things like Gemfile and Gemfile.lock don't re-pull\n#   the entire list of gems\nRUN cd / \\\n && git clone --depth 1 https://github.com/OregonDigital/oregondigital.git $INSTALL_PATH\n#   Install gems\nRUN bash -lc 'PATH=\"/usr/lib/x86_64-linux-gnu/ImageMagick-6.8.9/bin-Q16:$PATH\" gem install rmagick -v \"2.13.2\"'\nRUN bundle install --without development test\nRUN bundle update --source=mysql2 --major\n#   Link the set content repo inside OD\nRUN ln -s /opt/od_set_content /oregondigital/set_content\nCOPY docker/link-set-content.sh /link-set-content.sh\nRUN chmod +x /link-set-content.sh\nRUN /link-set-content.sh\nRUN bundle exec rake tmp:create\nRUN mkdir -p /oregondigital/media/thumbnails\nRUN ln -s /oregondigital/media /oregondigital/public/media\nRUN ln -s /oregondigital/media/thumbnails /oregondigital/public/thumbnails\n#   Expose a volume so that the web server can read assets\nVOLUME [\"$INSTALL_PATH/public\"]\n#   Allow devs to override the app code entirely\nVOLUME [\"$INSTALL_PATH/\"]\n#   /entrypoint.sh can be overwritten, but provides basic default behavior of\n#   running the web server\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Creates an image suitable for running the Rails stack for OD 1\n#\n#  Build:\n#      docker build --rm -t oregondigital/od1 -f docker/Dockerfile .\n#  TODO: Upgrade ubuntu!  Right now this just needs to work with what we have in\n#  circleci, but longer-term this could get problematic when ubuntu 12 hits EOL.\n#\n#  Known issues:\n#  - VIPS install will need to be figured out for a newer Ubuntu\n#  - Will need to test derivative generation for all types since CLI changes sometimes happen\n#  - ffmpeg will need to be replaced, and libavcode-extra-53 definitely has to be replaced\nFROM ubuntu:16.04\nMAINTAINER Jeremy Echols <jechols@uoregon.edu>\n# apt won't find some libs if this isn't run\nRUN apt-get update --fix-missing\n#  Dependencies for vips installer\nRUN apt-get install pkg-config -y\nRUN apt-get install python-software-properties software-properties-common -y\n#  Vips!\nRUN apt-get install automake build-essential gtk-doc-tools libglib2.0-dev libjpeg-turbo8-dev libpng12-dev libwebp-dev libtiff5-dev libexif-dev libgsf-1-dev liblcms2-dev libxml2-dev swig libmagickcore-dev curl -y\nRUN mkdir -p /opt/libvips\nWORKDIR /opt/libvips\nRUN curl -L https://github.com/libvips/libvips/releases/download/v8.6.3/vips-8.6.3.tar.gz | tar zx\nWORKDIR /opt/libvips/vips-8.6.3\nRUN ./configure --enable-debug=no --enable-docs=no --enable-cxx=yes --without-python --without-orc --without-fftw\nRUN make\nRUN make install\nRUN ldconfig\n#  Various derivative libs\nRUN apt-get purge libreoffice*\nRUN add-apt-repository -y ppa:libreoffice/ppa\nRUN apt-get install poppler-utils poppler-data ghostscript libreoffice -y\nRUN apt-get install libmagic-dev libmagickwand-dev ffmpeg libavcodec-ffmpeg-extra56 libvorbis-dev -y\nRUN apt-get install graphicsmagick graphicsmagick-libmagick-dev-compat -y\n#  Database connection libraries\nRUN apt-get install libmysqlclient-dev -y\nRUN apt-get install libsqlite3-dev -y\n#  Nodejs for compiling assets\nRUN apt-get install nodejs -y\n#  We need git for all our github-hosted gems\nRUN apt-get install git -y\n#  Rails requires this\nRUN apt-get install tzdata -y\n#  Dependencies for Ruby\nRUN apt-get install libssl-dev libreadline-dev -y\n#  Grab Ruby manually - can't install the default for Ubuntu 12.04\n#\n#  Make sure this comes after the big downloads, as it's more likely we'll\n#  change our ruby version than, say, our vips version - at least until we deal\n#  with a major change (like OS) that would require a ruby rebuild anyway\nRUN mkdir -p /opt/ruby\nWORKDIR /opt/ruby\nRUN curl https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz | tar zx\nWORKDIR /opt/ruby/ruby-2.1.3\nRUN ./configure\nRUN make\nRUN make install\n#  Grab bundler for installing the gems\nRUN gem install bundler\n#  Set an environment variable to store where the app is installed to inside\n#  of the Docker image\nENV INSTALL_PATH=\"/oregondigital\"\nWORKDIR $INSTALL_PATH\n#  Pull down set content first so code updates, which are more common than set\n#  updates, don't re-run the set syncing process\nCOPY docker/sync-sets.sh /sync-sets.sh\nRUN chmod +x /sync-sets.sh\nRUN /sync-sets.sh\n#  Grab the current code from github so we can use this directly or overlay our\n#  own code on top of it - this makes it close to a production image *and*\n#  ensures that changes to things like Gemfile and Gemfile.lock don't re-pull\n#  the entire list of gems\nRUN cd / \\\n && git clone --depth 1 https://github.com/OregonDigital/oregondigital.git $INSTALL_PATH\n#  Install gems\nRUN bash -lc 'PATH=\"/usr/lib/x86_64-linux-gnu/ImageMagick-6.8.9/bin-Q16:$PATH\" gem install rmagick -v \"2.13.2\"'\nRUN bundle install --without development test\nRUN bundle update --source=mysql2 --major\n#  Link the set content repo inside OD\nRUN ln -s /opt/od_set_content /oregondigital/set_content\nCOPY docker/link-set-content.sh /link-set-content.sh\nRUN chmod +x /link-set-content.sh\nRUN /link-set-content.sh\nRUN bundle exec rake tmp:create\nRUN mkdir -p /oregondigital/media/thumbnails\nRUN ln -s /oregondigital/media /oregondigital/public/media\nRUN ln -s /oregondigital/media/thumbnails /oregondigital/public/thumbnails\n#  Expose a volume so that the web server can read assets\nVOLUME [\"$INSTALL_PATH/public\"]\n#  Allow devs to override the app code entirely\nVOLUME [\"$INSTALL_PATH/\"]\n#  /entrypoint.sh can be overwritten, but provides basic default behavior of\n#  running the web server\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"dbef48c3c132ade6be44aff8407cdf0d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Creates an image suitable for running the Rails stack for OD 1\n#\n#   Build:\n#       docker build --rm -t oregondigital/od1 -f docker/Dockerfile .\n#   TODO: Upgrade ubuntu!  Right now this just needs to work with what we have in\n#   circleci, but longer-term this could get problematic when ubuntu 12 hits EOL.\n#\n#   Known issues:\n#   - VIPS install will need to be figured out for a newer Ubuntu\n#   - Will need to test derivative generation for all types since CLI changes sometimes happen\n#   - ffmpeg will need to be replaced, and libavcode-extra-53 definitely has to be replaced\nFROM ubuntu:16.04\nMAINTAINER Jeremy Echols <jechols@uoregon.edu>\n#  apt won't find some libs if this isn't run\nRUN apt-get update --fix-missing\n#   Dependencies for vips installer\nRUN apt-get install pkg-config -y\nRUN apt-get install python-software-properties software-properties-common -y\n#   Vips!\nRUN apt-get install automake build-essential gtk-doc-tools libglib2.0-dev libjpeg-turbo8-dev libpng12-dev libwebp-dev libtiff5-dev libexif-dev libgsf-1-dev liblcms2-dev libxml2-dev swig libmagickcore-dev curl -y\nRUN mkdir -p /opt/libvips\nWORKDIR /opt/libvips\nRUN curl -L https://github.com/libvips/libvips/releases/download/v8.6.3/vips-8.6.3.tar.gz | tar zx\nWORKDIR /opt/libvips/vips-8.6.3\nRUN ./configure --enable-debug=no --enable-docs=no --enable-cxx=yes --without-python --without-orc --without-fftw\nRUN make\nRUN make install\nRUN ldconfig\n#   Various derivative libs\nRUN apt-get purge libreoffice*\nRUN add-apt-repository -y ppa:libreoffice/ppa\nRUN apt-get install poppler-utils poppler-data ghostscript libreoffice -y\nRUN apt-get install libmagic-dev libmagickwand-dev ffmpeg libavcodec-ffmpeg-extra56 libvorbis-dev -y\nRUN apt-get install graphicsmagick graphicsmagick-libmagick-dev-compat -y\n#   Database connection libraries\nRUN apt-get install libmysqlclient-dev -y\nRUN apt-get install libsqlite3-dev -y\n#   Nodejs for compiling assets\nRUN apt-get install nodejs -y\n#   We need git for all our github-hosted gems\nRUN apt-get install git -y\n#   Rails requires this\nRUN apt-get install tzdata -y\n#   Dependencies for Ruby\nRUN apt-get install libssl-dev libreadline-dev -y\n#   Grab Ruby manually - can't install the default for Ubuntu 12.04\n#\n#   Make sure this comes after the big downloads, as it's more likely we'll\n#   change our ruby version than, say, our vips version - at least until we deal\n#   with a major change (like OS) that would require a ruby rebuild anyway\nRUN mkdir -p /opt/ruby\nWORKDIR /opt/ruby\nRUN curl https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz | tar zx\nWORKDIR /opt/ruby/ruby-2.1.3\nRUN ./configure\nRUN make\nRUN make install\n#   Grab bundler for installing the gems\nRUN gem install bundler\n#   Set an environment variable to store where the app is installed to inside\n#   of the Docker image\nENV INSTALL_PATH=\"/oregondigital\"\nWORKDIR $INSTALL_PATH\n#   Pull down set content first so code updates, which are more common than set\n#   updates, don't re-run the set syncing process\nCOPY docker/sync-sets.sh /sync-sets.sh\nRUN chmod +x /sync-sets.sh\nRUN /sync-sets.sh\n#   Grab the current code from github so we can use this directly or overlay our\n#   own code on top of it - this makes it close to a production image *and*\n#   ensures that changes to things like Gemfile and Gemfile.lock don't re-pull\n#   the entire list of gems\nRUN cd / \\\n && git clone --depth 1 https://github.com/OregonDigital/oregondigital.git $INSTALL_PATH\n#   Install gems\nRUN bash -lc 'PATH=\"/usr/lib/x86_64-linux-gnu/ImageMagick-6.8.9/bin-Q16:$PATH\" gem install rmagick -v \"2.13.2\"'\nRUN bundle install --without development test\nRUN bundle update --source=mysql2 --major\n#   Link the set content repo inside OD\nRUN ln -s /opt/od_set_content /oregondigital/set_content\nCOPY docker/link-set-content.sh /link-set-content.sh\nRUN chmod +x /link-set-content.sh\nRUN /link-set-content.sh\nRUN bundle exec rake tmp:create\nRUN mkdir -p /oregondigital/media/thumbnails\nRUN ln -s /oregondigital/media /oregondigital/public/media\nRUN ln -s /oregondigital/media/thumbnails /oregondigital/public/thumbnails\n#   Expose a volume so that the web server can read assets\nVOLUME [\"$INSTALL_PATH/public\"]\n#   Allow devs to override the app code entirely\nVOLUME [\"$INSTALL_PATH/\"]\n#   /entrypoint.sh can be overwritten, but provides basic default behavior of\n#   running the web server\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"c457bb1246ae09d95d90496ec5d12c43","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/30a1116eb90a6bf6fbaa08aff674dce8c9ad1942.dockerfile"}