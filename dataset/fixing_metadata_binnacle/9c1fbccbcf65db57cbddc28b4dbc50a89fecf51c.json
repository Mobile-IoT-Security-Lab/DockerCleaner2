{"seed":3229846845,"processedDockerfileHash":"3257143f241f5aa7ae2d32e07e59af0c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#   Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.\n#   Full license terms provided in LICENSE.md file.\n#   Build with:\n#   docker build -t nvidia-redtail-sim:kinetic-v2 --build-arg TENSORRT_TAR_FILE=<TensorRT_tar_name> -f Dockerfile.kinetic .\nENV HOME=\"/root\"\nARG TENSORRT_TAR_FILE\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#   cuDNN version must match the one used by TensorRT.\n#   TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools==67.6.1 wheel==0.40.0 \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls==0.4.2 \\\n && pip install jinja2==3.1.2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* \\\n && cd /opt \\\n && curl http://www.eprosima.com/index.php/component/ars/repository/eprosima-fast-rtps/eprosima-fast-rtps-1-5-0/eprosima_fastrtps-1-5-0-linux-tar-gz?format=raw | tar xz eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen /usr/local/bin/fastrtpsgen \\\n && mkdir -p /usr/local/share/fastrtps \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar /usr/local/share/fastrtps/fastrtpsgen.jar\n#   GStreamer\nRUN apt-get install --no-install-recommends gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-good gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libyaml-cpp-dev v4l-utils -y\n#   Gazebo\nWORKDIR ${HOME}\nRUN wget --quiet http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \\\n && sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends gazebo7 libgazebo7-dev -y \\\n && pip install px4tools==0.9.6 \\\n && git clone https://github.com/dronekit/dronekit-python.git \\\n && (cd dronekit-python \\\n && pip install -r requirements.txt ) \\\n && rm -rf dronekit-python \\\n && git clone https://github.com/ArduPilot/pymavlink.git \\\n && cd pymavlink \\\n && git clone git://github.com/mavlink/mavlink.git \\\n && ln -s ${PWD}/mavlink/message_definitions ../ \\\n && pip install . \\\n && cd .. \\\n && rm -rf pymavlink \\\n && rm -rf message_definitions\n#   PX4 firmware\nWORKDIR ${HOME}\nRUN mkdir ./px4/ \\\n && cd ./px4/ \\\n && git clone https://github.com/PX4/Firmware.git \\\n && cd Firmware/ \\\n && git checkout v1.4.4\n#   ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-shadow-fixed/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-shadow.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-joy ros-kinetic-rviz -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#   Install OpenCV with CUDA support.\n#   REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#   Install TensorRT\nWORKDIR ${HOME}\nCOPY ${TENSORRT_TAR_FILE} ${HOME}\nENV TENSORRT_BASE_DIR=\"/opt/tensorrt\"\n#   REVIEW alexeyk: lift to a build argument.\nENV TENSORRT_VER=\"4.0.1.6\"\nENV TENSORRT_DIR=\"${TENSORRT_BASE_DIR}/TensorRT-${TENSORRT_VER}\"\nRUN mkdir ${TENSORRT_BASE_DIR} \\\n && tar -xf ${TENSORRT_TAR_FILE} -C ${TENSORRT_BASE_DIR} \\\n && echo \"export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export LIBRARY_PATH=${LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export CPATH=${CPATH}:${TENSORRT_DIR}/include\" >> ${HOME}/.bashrc\n#   Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/ws\"\nCOPY ./scripts/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\n#   To be run by a user after creating a container.\nCOPY ./scripts/build_redtail.sh ${HOME}\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\n#  ENV PATH \"/usr/lib/ccache:$PATH\"\nENV TERM=\"xterm\"\n#   Some QT-Apps/Gazebo don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\n#   SITL UDP PORTS\nEXPOSE 14556/udp\nEXPOSE 14557/udp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#  Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.\n#  Full license terms provided in LICENSE.md file.\n#  Build with:\n#  docker build -t nvidia-redtail-sim:kinetic-v2 --build-arg TENSORRT_TAR_FILE=<TensorRT_tar_name> -f Dockerfile.kinetic .\nENV HOME=\"/root\"\nARG TENSORRT_TAR_FILE\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#  cuDNN version must match the one used by TensorRT.\n#  TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools wheel \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls \\\n && pip install jinja2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* \\\n && cd /opt \\\n && curl http://www.eprosima.com/index.php/component/ars/repository/eprosima-fast-rtps/eprosima-fast-rtps-1-5-0/eprosima_fastrtps-1-5-0-linux-tar-gz?format=raw | tar xz eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen /usr/local/bin/fastrtpsgen \\\n && mkdir -p /usr/local/share/fastrtps \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar /usr/local/share/fastrtps/fastrtpsgen.jar\n#  GStreamer\nRUN apt-get install --no-install-recommends gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-good gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libyaml-cpp-dev v4l-utils -y\n#  Gazebo\nWORKDIR ${HOME}\nRUN wget --quiet http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \\\n && sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends gazebo7 libgazebo7-dev -y \\\n && pip install px4tools \\\n && git clone https://github.com/dronekit/dronekit-python.git \\\n && (cd dronekit-python \\\n && pip install -r requirements.txt ) \\\n && rm -rf dronekit-python \\\n && git clone https://github.com/ArduPilot/pymavlink.git \\\n && cd pymavlink \\\n && git clone git://github.com/mavlink/mavlink.git \\\n && ln -s ${PWD}/mavlink/message_definitions ../ \\\n && pip install . \\\n && cd .. \\\n && rm -rf pymavlink \\\n && rm -rf message_definitions\n#  PX4 firmware\nWORKDIR ${HOME}\nRUN mkdir ./px4/ \\\n && cd ./px4/ \\\n && git clone https://github.com/PX4/Firmware.git \\\n && cd Firmware/ \\\n && git checkout v1.4.4\n#  ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-shadow-fixed/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-shadow.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-joy ros-kinetic-rviz -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#  Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#  Install OpenCV with CUDA support.\n#  REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#  Install TensorRT\nWORKDIR ${HOME}\nCOPY ${TENSORRT_TAR_FILE} ${HOME}\nENV TENSORRT_BASE_DIR=\"/opt/tensorrt\"\n#  REVIEW alexeyk: lift to a build argument.\nENV TENSORRT_VER=\"4.0.1.6\"\nENV TENSORRT_DIR=\"${TENSORRT_BASE_DIR}/TensorRT-${TENSORRT_VER}\"\nRUN mkdir ${TENSORRT_BASE_DIR} \\\n && tar -xf ${TENSORRT_TAR_FILE} -C ${TENSORRT_BASE_DIR} \\\n && echo \"export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export LIBRARY_PATH=${LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export CPATH=${CPATH}:${TENSORRT_DIR}/include\" >> ${HOME}/.bashrc\n#  Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/ws\"\nCOPY ./scripts/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\n#  To be run by a user after creating a container.\nCOPY ./scripts/build_redtail.sh ${HOME}\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\n# ENV PATH \"/usr/lib/ccache:$PATH\"\nENV TERM=\"xterm\"\n#  Some QT-Apps/Gazebo don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\n#  SITL UDP PORTS\nEXPOSE 14556/udp\nEXPOSE 14557/udp\n","injectedSmells":[],"originalDockerfileHash":"ed94780cc1d85bea193ee909c0838d3d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#   Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.\n#   Full license terms provided in LICENSE.md file.\n#   Build with:\n#   docker build -t nvidia-redtail-sim:kinetic-v2 --build-arg TENSORRT_TAR_FILE=<TensorRT_tar_name> -f Dockerfile.kinetic .\nENV HOME=\"/root\"\nARG TENSORRT_TAR_FILE\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#   cuDNN version must match the one used by TensorRT.\n#   TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools wheel \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls \\\n && pip install jinja2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* \\\n && cd /opt \\\n && curl http://www.eprosima.com/index.php/component/ars/repository/eprosima-fast-rtps/eprosima-fast-rtps-1-5-0/eprosima_fastrtps-1-5-0-linux-tar-gz?format=raw | tar xz eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen /usr/local/bin/fastrtpsgen \\\n && mkdir -p /usr/local/share/fastrtps \\\n && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar /usr/local/share/fastrtps/fastrtpsgen.jar\n#   GStreamer\nRUN apt-get install --no-install-recommends gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-good gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libyaml-cpp-dev v4l-utils -y\n#   Gazebo\nWORKDIR ${HOME}\nRUN wget --quiet http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \\\n && sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends gazebo7 libgazebo7-dev -y \\\n && pip install px4tools \\\n && git clone https://github.com/dronekit/dronekit-python.git \\\n && (cd dronekit-python \\\n && pip install -r requirements.txt ) \\\n && rm -rf dronekit-python \\\n && git clone https://github.com/ArduPilot/pymavlink.git \\\n && cd pymavlink \\\n && git clone git://github.com/mavlink/mavlink.git \\\n && ln -s ${PWD}/mavlink/message_definitions ../ \\\n && pip install . \\\n && cd .. \\\n && rm -rf pymavlink \\\n && rm -rf message_definitions\n#   PX4 firmware\nWORKDIR ${HOME}\nRUN mkdir ./px4/ \\\n && cd ./px4/ \\\n && git clone https://github.com/PX4/Firmware.git \\\n && cd Firmware/ \\\n && git checkout v1.4.4\n#   ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-shadow-fixed/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-shadow.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-joy ros-kinetic-rviz -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#   Install OpenCV with CUDA support.\n#   REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#   Install TensorRT\nWORKDIR ${HOME}\nCOPY ${TENSORRT_TAR_FILE} ${HOME}\nENV TENSORRT_BASE_DIR=\"/opt/tensorrt\"\n#   REVIEW alexeyk: lift to a build argument.\nENV TENSORRT_VER=\"4.0.1.6\"\nENV TENSORRT_DIR=\"${TENSORRT_BASE_DIR}/TensorRT-${TENSORRT_VER}\"\nRUN mkdir ${TENSORRT_BASE_DIR} \\\n && tar -xf ${TENSORRT_TAR_FILE} -C ${TENSORRT_BASE_DIR} \\\n && echo \"export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export LIBRARY_PATH=${LIBRARY_PATH}:${TENSORRT_DIR}/lib\" >> ${HOME}/.bashrc \\\n && echo \"export CPATH=${CPATH}:${TENSORRT_DIR}/include\" >> ${HOME}/.bashrc\n#   Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/ws\"\nCOPY ./scripts/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\n#   To be run by a user after creating a container.\nCOPY ./scripts/build_redtail.sh ${HOME}\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\n#  ENV PATH \"/usr/lib/ccache:$PATH\"\nENV TERM=\"xterm\"\n#   Some QT-Apps/Gazebo don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\n#   SITL UDP PORTS\nEXPOSE 14556/udp\nEXPOSE 14557/udp\n","originalDockerfileUglifiedHash":"209f8d8b1aff898ec97a1aba56976152","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9c1fbccbcf65db57cbddc28b4dbc50a89fecf51c.dockerfile"}