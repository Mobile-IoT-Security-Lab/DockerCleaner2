{"seed":534759370,"processedDockerfileHash":"63aff3a1dc1d24360b49d240f43a0c6e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   © Copyright IBM Corporation 2017, 2019.\n#   LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n#  ######### Dockerfile for Apache Mesos version 1.8.0 #########\n#\n#   This Dockerfile builds a basic installation of Apache Mesos.\n#\n#   Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks.\n#   It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   To simply run the resultant image, and provide a bash shell:\n#   docker run --name <container-name> -it <image_name> /bin/bash\n#\n#   Start Master of Apache Mesos using below command :\n#   docker run --name <container_name> -d -p <host-port>:5050 <image-name> mesos-master.sh --ip=<ip-address> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#   e.g. docker run --name mesos -d -p 5055:5050 mesos:1.8.0 mesos-master.sh --ip=0.0.0.0 --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#\n#   Start Agent of Apache Mesos using below command :\n#   docker run --name <container_name> -d <image-name> mesos-agent.sh --master=<ip address of master>:<port of master> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos --launcher=posix\n#\n#   Official website: http://mesos.apache.org/\n#\n#  ##################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nLABEL maintainer=\"LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\"\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV MESOS_HOME=\"/opt/mesos\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$MESOS_HOME/bin\"\nENV MESOS_work_dir=\"/var/lib/mesos\"\nENV MESOS_log_dir=\"/var/log/mesos\"\nENV MESOS_SYSTEMD_ENABLE_SUPPORT=\"false\"\nWORKDIR $SOURCE_DIR\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential bzip2 git g++ libapr1-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules libssl-dev libsvn-dev libtool maven openjdk-8-jdk python python-dev tar wget zlib1g-dev -y \\\n && cd $SOURCE_DIR \\\n && git clone https://github.com/apache/mesos \\\n && cd $SOURCE_DIR/mesos/ \\\n && git checkout 1.8.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd $SOURCE_DIR/mesos/ \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && mkdir -p /opt/mesos/src \\\n && mkdir -p /opt/mesos/src/.libs \\\n && mkdir -p /opt/mesos/3rdparty \\\n && cp -a $SOURCE_DIR/mesos/build/bin /opt/mesos \\\n && cp -a $SOURCE_DIR/mesos/build/src/master /opt/mesos/src \\\n && cp -a $SOURCE_DIR/mesos/build/src/slave /opt/mesos/src \\\n && cp $SOURCE_DIR/mesos/build/src/.libs/* /opt/mesos/src/.libs/ \\\n && cp -r $SOURCE_DIR/mesos/build/3rdparty/* /opt/mesos/3rdparty/ \\\n && cp -a $SOURCE_DIR/mesos/src/webui /opt/mesos/src \\\n && find $SOURCE_DIR/mesos/build/src/ -maxdepth 1 -type f -exec cp {} /opt/mesos/src\n#   Define mount point for important info like replicated logs of mesos\nVOLUME [\"/var/lib/mesos\", \"/var/log/mesos\"]\n#   Port for Apache Mesos\nEXPOSE 5050/tcp\n#   Set Entrypoint\nCMD mesos\n#   End of Dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  © Copyright IBM Corporation 2017, 2019.\n#  LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n# ######### Dockerfile for Apache Mesos version 1.8.0 #########\n#\n#  This Dockerfile builds a basic installation of Apache Mesos.\n#\n#  Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks.\n#  It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes\n#\n#  To build this image, from the directory containing this Dockerfile\n#  (assuming that the file is named Dockerfile):\n#  docker build -t <image_name> .\n#\n#  To simply run the resultant image, and provide a bash shell:\n#  docker run --name <container-name> -it <image_name> /bin/bash\n#\n#  Start Master of Apache Mesos using below command :\n#  docker run --name <container_name> -d -p <host-port>:5050 <image-name> mesos-master.sh --ip=<ip-address> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#  e.g. docker run --name mesos -d -p 5055:5050 mesos:1.8.0 mesos-master.sh --ip=0.0.0.0 --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#\n#  Start Agent of Apache Mesos using below command :\n#  docker run --name <container_name> -d <image-name> mesos-agent.sh --master=<ip address of master>:<port of master> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos --launcher=posix\n#\n#  Official website: http://mesos.apache.org/\n#\n# ##################################################################################\n#  Base Image\nFROM s390x/ubuntu:16.04\n#  The author\nLABEL maintainer=\"LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\"\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV MESOS_HOME=\"/opt/mesos\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$MESOS_HOME/bin\"\nENV MESOS_work_dir=\"/var/lib/mesos\"\nENV MESOS_log_dir=\"/var/log/mesos\"\nENV MESOS_SYSTEMD_ENABLE_SUPPORT=\"false\"\nWORKDIR $SOURCE_DIR\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential bzip2 git g++ libapr1-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules libssl-dev libsvn-dev libtool maven openjdk-8-jdk python python-dev tar wget zlib1g-dev -y \\\n && cd $SOURCE_DIR \\\n && git clone https://github.com/apache/mesos \\\n && cd $SOURCE_DIR/mesos/ \\\n && git checkout 1.8.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd $SOURCE_DIR/mesos/ \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && mkdir -p /opt/mesos/src \\\n && mkdir -p /opt/mesos/src/.libs \\\n && mkdir -p /opt/mesos/3rdparty \\\n && cp -a $SOURCE_DIR/mesos/build/bin /opt/mesos \\\n && cp -a $SOURCE_DIR/mesos/build/src/master /opt/mesos/src \\\n && cp -a $SOURCE_DIR/mesos/build/src/slave /opt/mesos/src \\\n && cp $SOURCE_DIR/mesos/build/src/.libs/* /opt/mesos/src/.libs/ \\\n && cp -r $SOURCE_DIR/mesos/build/3rdparty/* /opt/mesos/3rdparty/ \\\n && cp -a $SOURCE_DIR/mesos/src/webui /opt/mesos/src \\\n && find $SOURCE_DIR/mesos/build/src/ -maxdepth 1 -type f -exec cp {} /opt/mesos/src ; \\\n && sed -i \"22s/.*/. \\/opt\\/mesos\\/bin\\/mesos-master-flags.sh/\" /opt/mesos/bin/mesos-master.sh \\\n && sed -i \"24s/.*/exec \\/opt\\/mesos\\/src\\/mesos-master \\\"$\\{\\@\\}\\\"/\" /opt/mesos/bin/mesos-master.sh \\\n && sed -i \"s/\\/root\\/mesos\\/build\\/src/\\/opt\\/mesos\\/src/g\" /opt/mesos/src/mesos-master \\\n && sed -i \"22s/.*/. \\/opt\\/mesos\\/bin\\/mesos-agent-flags.sh/\" /opt/mesos/bin/mesos-agent.sh \\\n && sed -i \"24s/.*/exec \\/opt\\/mesos\\/src\\/mesos-agent \\\"$\\{\\@\\}\\\"/\" /opt/mesos/bin/mesos-agent.sh \\\n && sed -i \"s/\\/root\\/mesos\\/build\\/src/\\/opt\\/mesos\\/src/g\" /opt/mesos/src/mesos-agent \\\n && sed -i \"s|/root/mesos/build/../src/webui|/opt/mesos/src/webui|\" /opt/mesos/bin/mesos-master-flags.sh \\\n && sed -i \"s|/root/mesos/build/src|/opt/mesos/src|\" /opt/mesos/bin/mesos-agent-flags.sh \\\n && sed -i \"23s|/root/mesos/build/../src/cli|/opt/mesos/src/cli|\" /opt/mesos/bin/mesos.sh \\\n && sed -i \"26s|/root/mesos/build/src|/opt/mesos/src|\" /opt/mesos/bin/mesos.sh \\\n && sed -i \"30s|/root/mesos/build/src/mesos|/opt/mesos/src/mesos|\" /opt/mesos/bin/mesos.sh \\\n && apt-get remove -y autoconf automake build-essential bzip2 git libtool maven python python-dev wget \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf $SOURCE_DIR/mesos /var/lib/apt/lists/* /root/.m2\n#  Define mount point for important info like replicated logs of mesos\nVOLUME [\"/var/lib/mesos\", \"/var/log/mesos\"]\n#  Port for Apache Mesos\nEXPOSE 5050/tcp\n#  Set Entrypoint\nCMD mesos\n#  End of Dockerfile\n","injectedSmells":[],"originalDockerfileHash":"2fffc18b3c894ad0de1eac1a1fdfc7ca","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   © Copyright IBM Corporation 2017, 2019.\n#   LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n#  ######### Dockerfile for Apache Mesos version 1.8.0 #########\n#\n#   This Dockerfile builds a basic installation of Apache Mesos.\n#\n#   Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks.\n#   It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   To simply run the resultant image, and provide a bash shell:\n#   docker run --name <container-name> -it <image_name> /bin/bash\n#\n#   Start Master of Apache Mesos using below command :\n#   docker run --name <container_name> -d -p <host-port>:5050 <image-name> mesos-master.sh --ip=<ip-address> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#   e.g. docker run --name mesos -d -p 5055:5050 mesos:1.8.0 mesos-master.sh --ip=0.0.0.0 --work_dir=/var/lib/mesos --log_dir=/var/log/mesos\n#\n#   Start Agent of Apache Mesos using below command :\n#   docker run --name <container_name> -d <image-name> mesos-agent.sh --master=<ip address of master>:<port of master> --work_dir=/var/lib/mesos --log_dir=/var/log/mesos --launcher=posix\n#\n#   Official website: http://mesos.apache.org/\n#\n#  ##################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nLABEL maintainer=\"LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\"\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV MESOS_HOME=\"/opt/mesos\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$MESOS_HOME/bin\"\nENV MESOS_work_dir=\"/var/lib/mesos\"\nENV MESOS_log_dir=\"/var/log/mesos\"\nENV MESOS_SYSTEMD_ENABLE_SUPPORT=\"false\"\nWORKDIR $SOURCE_DIR\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential bzip2 git g++ libapr1-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules libssl-dev libsvn-dev libtool maven openjdk-8-jdk python python-dev tar wget zlib1g-dev -y \\\n && cd $SOURCE_DIR \\\n && git clone https://github.com/apache/mesos \\\n && cd $SOURCE_DIR/mesos/ \\\n && git checkout 1.8.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd $SOURCE_DIR/mesos/ \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && mkdir -p /opt/mesos/src \\\n && mkdir -p /opt/mesos/src/.libs \\\n && mkdir -p /opt/mesos/3rdparty \\\n && cp -a $SOURCE_DIR/mesos/build/bin /opt/mesos \\\n && cp -a $SOURCE_DIR/mesos/build/src/master /opt/mesos/src \\\n && cp -a $SOURCE_DIR/mesos/build/src/slave /opt/mesos/src \\\n && cp $SOURCE_DIR/mesos/build/src/.libs/* /opt/mesos/src/.libs/ \\\n && cp -r $SOURCE_DIR/mesos/build/3rdparty/* /opt/mesos/3rdparty/ \\\n && cp -a $SOURCE_DIR/mesos/src/webui /opt/mesos/src \\\n && find $SOURCE_DIR/mesos/build/src/ -maxdepth 1 -type f -exec cp {} /opt/mesos/src\n#   Define mount point for important info like replicated logs of mesos\nVOLUME [\"/var/lib/mesos\", \"/var/log/mesos\"]\n#   Port for Apache Mesos\nEXPOSE 5050/tcp\n#   Set Entrypoint\nCMD mesos\n#   End of Dockerfile\n","originalDockerfileUglifiedHash":"ab589639254ca277ce8e4342b6f61d43","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b240cb298fdc57961ae68b2a1c3642823a173227.dockerfile"}