{"seed":764772378,"processedDockerfileHash":"90b386ce1b3aa2447647f3f4b0446db3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nENV CC=\"x86_64-w64-mingw32-gcc-posix\"\nENV CXX=\"x86_64-w64-mingw32-g++-posix\"\nENV AR=\"x86_64-w64-mingw32-ar\"\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install --no-install-recommends make=4.1-9.1ubuntu1 git=1:2.17.1-1ubuntu0.17 cmake=3.10.2-1ubuntu2.18.04.2 g++-mingw-w64-x86-64=7.3.0-11ubuntu1+20.2build1 binutils-mingw-w64-x86-64=2.30-7ubuntu1+8ubuntu1 wget=1.19.4-1ubuntu2.2 bison=2:3.0.4.dfsg-1build1 flex=2.6.4-6 libtool=2.4.6-2 automake=1:1.15.1-3ubuntu2 -y\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure mingw64 --prefix=/usr/local/mingw no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN mkdir -p win32-deps/include \\\n && make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nCOPY noise-c-windows.patch .\nRUN git apply noise-c-windows.patch\nRUN ./autogen.sh \\\n && ./configure --host=x86_64-linux --prefix=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nCOPY 0001-Fixes-for-windows-cross-compile.patch .\nRUN patch < 0001-Fixes-for-windows-cross-compile.patch\nRUN TARGET_OS=OS_WINDOWS_CROSSCOMPILE make\nRUN cp -r out-static/*.a /usr/local/mingw/lib \\\n && cp -r include/* /usr/local/mingw/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nRUN cp /usr/local/mingw/lib/libsfml-network-s.a /usr/local/mingw/lib/libsfml-network.a \\\n && cp /usr/local/mingw/lib/libsfml-system-s.a /usr/local/mingw/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nRUN make mingw CC=$CC \\\n && cp src/lua53.dll /usr/local/mingw/lib/liblua.dll \\\n && cp src/*.h /usr/local/mingw/include/\nWORKDIR ../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/mingw/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.dll cryptokernel\nRUN cp /usr/local/mingw/lib/liblua.dll cryptokernel/lua53.dll\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/mingw/include/cschnorr/ \\\n && cp src/*.h /usr/local/mingw/include/cschnorr/ \\\n && cp bin/Static/Release/cschnorr.lib /usr/local/mingw/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include --lib-dir=/usr/local/mingw/lib\nRUN make config=release_static ckd\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nENV CC=\"x86_64-w64-mingw32-gcc-posix\"\nENV CXX=\"x86_64-w64-mingw32-g++-posix\"\nENV AR=\"x86_64-w64-mingw32-ar\"\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install -y make git cmake g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 wget bison flex libtool automake\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure mingw64 --prefix=/usr/local/mingw no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN mkdir -p win32-deps/include \\\n && make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-windows.patch .\nRUN git apply noise-c-windows.patch\nRUN ./autogen.sh \\\n && ./configure --host=x86_64-linux --prefix=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nADD 0001-Fixes-for-windows-cross-compile.patch .\nRUN patch < 0001-Fixes-for-windows-cross-compile.patch\nRUN TARGET_OS=OS_WINDOWS_CROSSCOMPILE make\nRUN cp -r out-static/*.a /usr/local/mingw/lib \\\n && cp -r include/* /usr/local/mingw/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nRUN cp /usr/local/mingw/lib/libsfml-network-s.a /usr/local/mingw/lib/libsfml-network.a \\\n && cp /usr/local/mingw/lib/libsfml-system-s.a /usr/local/mingw/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nRUN make mingw CC=$CC \\\n && cp src/lua53.dll /usr/local/mingw/lib/liblua.dll \\\n && cp src/*.h /usr/local/mingw/include/\nWORKDIR ../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/mingw/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.dll cryptokernel\nRUN cp /usr/local/mingw/lib/liblua.dll cryptokernel/lua53.dll\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/mingw/include/cschnorr/ \\\n && cp src/*.h /usr/local/mingw/include/cschnorr/ \\\n && cp bin/Static/Release/cschnorr.lib /usr/local/mingw/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include --lib-dir=/usr/local/mingw/lib\nRUN make config=release_static ckd\n","injectedSmells":[],"originalDockerfileHash":"24f7f90c1a1de093189b4cec2d95801a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nENV CC=\"x86_64-w64-mingw32-gcc-posix\"\nENV CXX=\"x86_64-w64-mingw32-g++-posix\"\nENV AR=\"x86_64-w64-mingw32-ar\"\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install make git cmake g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 wget bison flex libtool automake -y\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure mingw64 --prefix=/usr/local/mingw no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --host=x86_64-w64-mingw32 --prefix=/usr/local/mingw --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN mkdir -p win32-deps/include \\\n && make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-windows.patch .\nRUN git apply noise-c-windows.patch\nRUN ./autogen.sh \\\n && ./configure --host=x86_64-linux --prefix=/usr/local/mingw\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nADD 0001-Fixes-for-windows-cross-compile.patch .\nRUN patch < 0001-Fixes-for-windows-cross-compile.patch\nRUN TARGET_OS=OS_WINDOWS_CROSSCOMPILE make\nRUN cp -r out-static/*.a /usr/local/mingw/lib \\\n && cp -r include/* /usr/local/mingw/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/mingw\nRUN make \\\n && make install\nRUN cp /usr/local/mingw/lib/libsfml-network-s.a /usr/local/mingw/lib/libsfml-network.a \\\n && cp /usr/local/mingw/lib/libsfml-system-s.a /usr/local/mingw/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nRUN make mingw CC=$CC \\\n && cp src/lua53.dll /usr/local/mingw/lib/liblua.dll \\\n && cp src/*.h /usr/local/mingw/include/\nWORKDIR ../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/mingw/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN CC=x86_64-w64-mingw32-gcc make UNAME=x86_64-w64-mingw32\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.dll cryptokernel\nRUN cp /usr/local/mingw/lib/liblua.dll cryptokernel/lua53.dll\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/mingw/include/cschnorr/ \\\n && cp src/*.h /usr/local/mingw/include/cschnorr/ \\\n && cp bin/Static/Release/cschnorr.lib /usr/local/mingw/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --os=windows --include-dir=/usr/local/mingw/include --lib-dir=/usr/local/mingw/lib\nRUN make config=release_static ckd\n","originalDockerfileUglifiedHash":"b55487f53d985ef5c37d12b06e85f9d7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a4f91c2bfa8030437f55f3feb5ae200b17912914.dockerfile"}