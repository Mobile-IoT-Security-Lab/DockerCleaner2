{"seed":2479793085,"processedDockerfileHash":"4a677d3214c9428956075f19bb049cb3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM debian:jessie\n#   prevent Debian's PHP packages from being installed\n#   https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#   dependencies required for running \"phpize\"\n#   (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl xz-utils $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\n#   custom for app-service-build\nENV PHP_ROOT_PATH=\"/usr/local/php/7.0\"\nENV PHP_INI_DIR=\"$PHP_ROOT_PATH\"\nENV PHP_SRC_PATH=\"$PHP_ROOT_PATH/src\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--prefix=/usr/local/php/7.0\"\n#  #<autogenerated>##\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3\"\nENV PHP_VERSION=\"7.0.32\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ff6f62afeb32c71b3b89ecbd42950ef6c5e0c329cc6e1c58ffac47e6f1f883c4\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p $PHP_SRC_PATH ; cd $PHP_SRC_PATH ; wget -O $PHP_SRC_PATH/php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libcurl4-openssl-dev libedit-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd $PHP_SRC_PATH/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cp -v php.ini-* \"$PHP_INI_DIR/\" ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; /usr/local/php/7.0/bin/php --version ; /usr/local/php/7.0/bin/pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nENV PATH=\"$PATH:/usr/local/php/7.0/bin\"\nCOPY docker-php-ext-* /usr/local/php/7.0/bin/\nRUN apt-get update ; apt-get install --no-install-recommends libpng-dev libpq-dev libc-client-dev libsqlite3-dev libgmp-dev libmcrypt-dev libldap2-dev libtidy-dev libkrb5-dev libicu-dev libedit-dev libxml2-dev libxslt-dev unixodbc-dev libmagickwand-dev -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libldap.so /usr/lib/libldap.so \\\n && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \\\n && pecl install imagick-beta\nRUN docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install mysqli opcache pdo pdo_mysql pdo_pgsql pgsql zip pdo_odbc json gd gmp imap intl ldap mcrypt readline simplexml soap pdo_sqlite tidy wddx xmlrpc xmlwriter xsl\nRUN docker-php-source delete\n#   PHP Composer\nRUN php -r \"copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');\" \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/php/7.0/bin --filename=composer --quiet \\\n && rm -f /tmp/composer-setup.php\nCOPY test/ /usr/local/php/7.0/test\nCMD [\"/usr/local/php/7.0/bin/php\", \"/usr/local/php/7.0/test/runtest.php\"]\n#  Azure-app-service\n#  ENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\n#  #CMD [\"php\", \"-a\"]\n#  #</autogenerated>##\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM debian:jessie\n#  prevent Debian's PHP packages from being installed\n#  https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#  dependencies required for running \"phpize\"\n#  (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#  persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl xz-utils $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\n#  custom for app-service-build\nENV PHP_ROOT_PATH=\"/usr/local/php/7.0\"\nENV PHP_INI_DIR=\"$PHP_ROOT_PATH\"\nENV PHP_SRC_PATH=\"$PHP_ROOT_PATH/src\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--prefix=/usr/local/php/7.0\"\n# #<autogenerated>##\n# #</autogenerated>##\n#  Apply stack smash protection to functions using local buffers and alloca()\n#  Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#  Enable optimization (-O2)\n#  Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#  Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#  https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3\"\nENV PHP_VERSION=\"7.0.32\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ff6f62afeb32c71b3b89ecbd42950ef6c5e0c329cc6e1c58ffac47e6f1f883c4\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p $PHP_SRC_PATH ; cd $PHP_SRC_PATH ; wget -O $PHP_SRC_PATH/php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libcurl4-openssl-dev libedit-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd $PHP_SRC_PATH/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cp -v php.ini-* \"$PHP_INI_DIR/\" ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; /usr/local/php/7.0/bin/php --version ; /usr/local/php/7.0/bin/pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nENV PATH=\"$PATH:/usr/local/php/7.0/bin\"\nCOPY docker-php-ext-* /usr/local/php/7.0/bin/\nRUN apt-get update ; apt-get install --no-install-recommends libpng-dev libpq-dev libc-client-dev libsqlite3-dev libgmp-dev libmcrypt-dev libldap2-dev libtidy-dev libkrb5-dev libicu-dev libedit-dev libxml2-dev libxslt-dev unixodbc-dev libmagickwand-dev -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libldap.so /usr/lib/libldap.so \\\n && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \\\n && pecl install imagick-beta\nRUN docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install mysqli opcache pdo pdo_mysql pdo_pgsql pgsql zip pdo_odbc json gd gmp imap intl ldap mcrypt readline simplexml soap pdo_sqlite tidy wddx xmlrpc xmlwriter xsl\nRUN docker-php-source delete\n#  PHP Composer\nRUN php -r \"copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');\" \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/php/7.0/bin --filename=composer --quiet \\\n && rm -f /tmp/composer-setup.php\nCOPY test/ /usr/local/php/7.0/test\nCMD [\"/usr/local/php/7.0/bin/php\", \"/usr/local/php/7.0/test/runtest.php\"]\n# Azure-app-service\n# ENTRYPOINT [\"docker-php-entrypoint\"]\n# #<autogenerated>##\n# #CMD [\"php\", \"-a\"]\n# #</autogenerated>##\n","injectedSmells":[],"originalDockerfileHash":"409db992a4361907e7ddfd5893cea3bd","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM debian:jessie\n#   prevent Debian's PHP packages from being installed\n#   https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#   dependencies required for running \"phpize\"\n#   (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl xz-utils $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\n#   custom for app-service-build\nENV PHP_ROOT_PATH=\"/usr/local/php/7.0\"\nENV PHP_INI_DIR=\"$PHP_ROOT_PATH\"\nENV PHP_SRC_PATH=\"$PHP_ROOT_PATH/src\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--prefix=/usr/local/php/7.0\"\n#  #<autogenerated>##\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3\"\nENV PHP_VERSION=\"7.0.32\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.0.32.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ff6f62afeb32c71b3b89ecbd42950ef6c5e0c329cc6e1c58ffac47e6f1f883c4\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p $PHP_SRC_PATH ; cd $PHP_SRC_PATH ; wget -O $PHP_SRC_PATH/php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libcurl4-openssl-dev libedit-dev libsqlite3-dev libssl-dev libxml2-dev zlib1g-dev ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd $PHP_SRC_PATH/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cp -v php.ini-* \"$PHP_INI_DIR/\" ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; /usr/local/php/7.0/bin/php --version ; /usr/local/php/7.0/bin/pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nENV PATH=\"$PATH:/usr/local/php/7.0/bin\"\nCOPY docker-php-ext-* /usr/local/php/7.0/bin/\nRUN apt-get update ; apt-get install --no-install-recommends libpng-dev libpq-dev libc-client-dev libsqlite3-dev libgmp-dev libmcrypt-dev libldap2-dev libtidy-dev libkrb5-dev libicu-dev libedit-dev libxml2-dev libxslt-dev unixodbc-dev libmagickwand-dev -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libldap.so /usr/lib/libldap.so \\\n && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \\\n && pecl install imagick-beta\nRUN docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install mysqli opcache pdo pdo_mysql pdo_pgsql pgsql zip pdo_odbc json gd gmp imap intl ldap mcrypt readline simplexml soap pdo_sqlite tidy wddx xmlrpc xmlwriter xsl\nRUN docker-php-source delete\n#   PHP Composer\nRUN php -r \"copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');\" \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/php/7.0/bin --filename=composer --quiet \\\n && rm -f /tmp/composer-setup.php\nCOPY test/ /usr/local/php/7.0/test\nCMD [\"/usr/local/php/7.0/bin/php\", \"/usr/local/php/7.0/test/runtest.php\"]\n#  Azure-app-service\n#  ENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\n#  #CMD [\"php\", \"-a\"]\n#  #</autogenerated>##\n","originalDockerfileUglifiedHash":"a687b4cfce63b6727862743551fb11cc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1813b555ffe527ab4aa9a251ead44519fe5c8515.dockerfile"}