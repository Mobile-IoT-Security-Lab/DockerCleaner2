{"seed":408689045,"processedDockerfileHash":"1dac21a049e321f72b9285a734769df0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Universal image for running Notebook, Dask pipelines, libs, and lint checkers\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\nARG PYTHON=python3\nARG PIP=pip3\nLABEL author=\"Piers Harding <piers.harding@catalyst.net.nz>\" \\\n      description=\"ARL reference image\" \\\n      license=\"Apache2.0\" \\\n      registry=\"library/piersharding/arl\" \\\n      vendor=\"Catalyst\" \\\n      org.skatelescope.team=\"Systems Team\" \\\n      org.skatelescope.version=\"0.1.0\" \\\n      org.skatelescope.website=\"http://github.com/SKA-ScienceDataProcessor/algorithm-reference-library/\"\n#   Set environment variables for pipenv execution:\n#\n#   * LC_ALL and LANG: Pipenv (specifically, its Click dependency) exits with an\n#     error unless the language encoding is set.\n#   * PIPENV_TIMEOUT: increased Pipenv timeout as locking dependencies takes\n#     *forever* inside a Docker container.\n#   * PATH: puts virtualenv python/pip/pipenv first on path\n#   * VIRTUAL_ENV: for completeness. This environment variable would have been\n#     set by 'source /venv/bin/activate'\n#   * PIPENV_VERBOSITY: hides warning about pipenv running inside a virtualenv.\n#   * PIPENV_NOSPIN: disables animated spinner for cleaner CI logs\n#\nENV LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    PIPENV_TIMEOUT=\"900\" \\\n    PATH=\"/arl/venv/bin:$PATH\" \\\n    VIRTUAL_ENV=\"/arl/venv\" \\\n    PIPENV_VERBOSITY=\"-1\" \\\n    PIPENV_NOSPIN=\"1\" \\\n    HOME=\"/root\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#   the package basics for Python 3\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends software-properties-common=0.99.35 pkg-config=1.8.1-1ubuntu2 dirmngr=2.2.40-1ubuntu2 python3-software-properties=0.99.35 build-essential=12.9ubuntu3 curl=7.88.1-7ubuntu1 wget=1.21.3-1ubuntu1 fonts-liberation=1:1.07.4-11 ca-certificates=20230311 libcfitsio-dev=4.2.0-3 libffi-dev=3.4.4-1 -y \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 \\\n && apt-get install --no-install-recommends git-lfs=3.3.0-1 -y \\\n && git lfs install \\\n && apt-get install --no-install-recommends flake8=5.0.4-4 virtualenv=20.19.0+ds-1 virtualenvwrapper=4.8.4-4 $PYTHON-dev $PYTHON-tk $PYTHON-nose -y \\\n && apt-get install --no-install-recommends graphviz=2.42.2-7build3 -y \\\n && apt-get install --no-install-recommends nodejs=18.13.0+dfsg1-1ubuntu2 npm=9.2.0~ds1-1 -y \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n#   node node is linked to nodejs\nRUN if [ ! -f /usr/bin/node ] ; then ln -s /usr/bin/nodejs /usr/bin/node ; fi \\\n && node --version\n#   sort out pip and python for 3.x\nRUN cd /src ; wget https://bootstrap.pypa.io/get-pip.py \\\n && $PYTHON get-pip.py ; rm -rf /root/.cache\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\nRUN mkdir -p /arl\nWORKDIR /arl\nRUN virtualenv -p $PYTHON ${VIRTUAL_ENV}\n#   Install pipenv into the new virtual environment\nRUN pip install pipenv==2023.3.20 ; rm -rf /root/.cache\n#   Copy the Pipfile and frozen hashes (Pipfile.lock) across to the image so\n#   that pipenv knows what to install\nCOPY Pipfile /src/Pipfile\nCOPY Pipfile.lock /src/Pipfile.lock\n#   Install ARL dependencies into the virtual environment.\nRUN cd /src ; pipenv install --dev ; rm -rf /root/.cache\n#   Add and install Jupyter dependencies\nRUN $PIP install bokeh \\\n && $PIP install pytest ; $PIP install jupyter_nbextensions_configurator ; $PIP install jupyter_contrib_nbextensions ; rm -rf /root/.cache\nRUN $PIP install -U pylint ; rm -rf /root/.cache\nRUN jupyter contrib nbextension install --system --symlink\nRUN jupyter nbextensions_configurator enable --system\n#   runtime specific environment\nENV JENKINS_URL=\"1\"\nENV PYTHONPATH=\"/arl\"\nENV ARL=\"/arl\"\nENV JUPYTER_PATH=\"/arl/examples/arl\"\nRUN touch \"${HOME}/.bash_profile\"\n#   Bundle app source\n#   COPY limited by /.dockerignore\nCOPY ./docker/boot.sh ./Makefile ./setup.py /arl/\nCOPY . /arl/\n#   run setup\nRUN cd /arl \\\n && $PYTHON setup.py build \\\n && $PYTHON setup.py install \\\n && cp ./build/lib.*/*.so . \\\n && cd /arl/workflows/ffiwrapped/serial \\\n && make \\\n && $PIP install mpi4py\n#   create space for libs\nRUN mkdir -p /arl/test_data /arl/test_results \\\n && chmod 777 /arl /arl/test_data /arl/test_results\nCOPY --chown=\"1000:100\" ./docker/jupyter_notebook_config.py \"${HOME}/.jupyter/\"\nCOPY ./docker/notebook.sh /usr/local/bin/\nCOPY ./docker/start-dask-scheduler.sh /usr/local/bin/\nCOPY ./docker/start-dask-worker.sh /usr/local/bin\n#   We share in the arl data here\nVOLUME [\"/arl/data\", \"/arl/tmp\"]\n#   Expose Jupyter and Bokeh ports\nEXPOSE 8888/tcp 8786/tcp 8787/tcp 8788/tcp 8789/tcp\n#   Setup the entrypoint or environment\nENTRYPOINT [\"tini\", \"--\"]\n#   Run - default is notebook\nCMD [\"/arl/boot.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Universal image for running Notebook, Dask pipelines, libs, and lint checkers\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\nARG PYTHON=python3\nARG PIP=pip3\nLABEL author=\"Piers Harding <piers.harding@catalyst.net.nz>\" \\\n      description=\"ARL reference image\" \\\n      license=\"Apache2.0\" \\\n      registry=\"library/piersharding/arl\" \\\n      vendor=\"Catalyst\" \\\n      org.skatelescope.team=\"Systems Team\" \\\n      org.skatelescope.version=\"0.1.0\" \\\n      org.skatelescope.website=\"http://github.com/SKA-ScienceDataProcessor/algorithm-reference-library/\"\n#  Set environment variables for pipenv execution:\n#\n#  * LC_ALL and LANG: Pipenv (specifically, its Click dependency) exits with an\n#    error unless the language encoding is set.\n#  * PIPENV_TIMEOUT: increased Pipenv timeout as locking dependencies takes\n#    *forever* inside a Docker container.\n#  * PATH: puts virtualenv python/pip/pipenv first on path\n#  * VIRTUAL_ENV: for completeness. This environment variable would have been\n#    set by 'source /venv/bin/activate'\n#  * PIPENV_VERBOSITY: hides warning about pipenv running inside a virtualenv.\n#  * PIPENV_NOSPIN: disables animated spinner for cleaner CI logs\n#\nENV LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    PIPENV_TIMEOUT=\"900\" \\\n    PATH=\"/arl/venv/bin:$PATH\" \\\n    VIRTUAL_ENV=\"/arl/venv\" \\\n    PIPENV_VERBOSITY=\"-1\" \\\n    PIPENV_NOSPIN=\"1\" \\\n    HOME=\"/root\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#  the package basics for Python 3\nRUN apt-get update -y \\\n && apt-get install software-properties-common pkg-config dirmngr python3-software-properties build-essential curl wget fonts-liberation ca-certificates libcfitsio-dev libffi-dev -y \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 \\\n && apt-get install git-lfs -y \\\n && git lfs install \\\n && apt-get install flake8 virtualenv virtualenvwrapper $PYTHON-dev $PYTHON-tk $PYTHON-nose -y \\\n && apt-get install graphviz -y \\\n && apt-get install nodejs npm -y \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n#  node node is linked to nodejs\nRUN if [ ! -f /usr/bin/node ] ; then ln -s /usr/bin/nodejs /usr/bin/node ; fi \\\n && node --version\n#  sort out pip and python for 3.x\nRUN cd /src ; wget https://bootstrap.pypa.io/get-pip.py \\\n && $PYTHON get-pip.py ; rm -rf /root/.cache\n#  Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\nRUN mkdir -p /arl\nWORKDIR /arl\nRUN virtualenv -p $PYTHON ${VIRTUAL_ENV}\n#  Install pipenv into the new virtual environment\nRUN pip install pipenv ; rm -rf /root/.cache\n#  Copy the Pipfile and frozen hashes (Pipfile.lock) across to the image so\n#  that pipenv knows what to install\nCOPY Pipfile /src/Pipfile\nCOPY Pipfile.lock /src/Pipfile.lock\n#  Install ARL dependencies into the virtual environment.\nRUN cd /src ; pipenv install --dev ; rm -rf /root/.cache\n#  Add and install Jupyter dependencies\nRUN $PIP install bokeh \\\n && $PIP install pytest ; $PIP install jupyter_nbextensions_configurator ; $PIP install jupyter_contrib_nbextensions ; rm -rf /root/.cache\nRUN $PIP install -U pylint ; rm -rf /root/.cache\nRUN jupyter contrib nbextension install --system --symlink\nRUN jupyter nbextensions_configurator enable --system\n#  runtime specific environment\nENV JENKINS_URL=\"1\"\nENV PYTHONPATH=\"/arl\"\nENV ARL=\"/arl\"\nENV JUPYTER_PATH=\"/arl/examples/arl\"\nRUN touch \"${HOME}/.bash_profile\"\n#  Bundle app source\n#  COPY limited by /.dockerignore\nCOPY ./docker/boot.sh ./Makefile ./setup.py /arl/\nCOPY . /arl/\n#  run setup\nRUN cd /arl \\\n && $PYTHON setup.py build \\\n && $PYTHON setup.py install \\\n && cp ./build/lib.*/*.so . \\\n && cd /arl/workflows/ffiwrapped/serial \\\n && make \\\n && $PIP install mpi4py\n#  create space for libs\nRUN mkdir -p /arl/test_data /arl/test_results \\\n && chmod 777 /arl /arl/test_data /arl/test_results\nCOPY --chown=\"1000:100\" ./docker/jupyter_notebook_config.py \"${HOME}/.jupyter/\"\nCOPY ./docker/notebook.sh /usr/local/bin/\nCOPY ./docker/start-dask-scheduler.sh /usr/local/bin/\nCOPY ./docker/start-dask-worker.sh /usr/local/bin\n#  We share in the arl data here\nVOLUME [\"/arl/data\", \"/arl/tmp\"]\n#  Expose Jupyter and Bokeh ports\nEXPOSE 8888/tcp 8786/tcp 8787/tcp 8788/tcp 8789/tcp\n#  Setup the entrypoint or environment\nENTRYPOINT [\"tini\", \"--\"]\n#  Run - default is notebook\nCMD [\"/arl/boot.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"3ff6e1b30063ebfb81823323185c1995","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Universal image for running Notebook, Dask pipelines, libs, and lint checkers\nARG BASE_IMAGE=ubuntu:18.04\nFROM $BASE_IMAGE\nARG PYTHON=python3\nARG PIP=pip3\nLABEL author=\"Piers Harding <piers.harding@catalyst.net.nz>\" \\\n      description=\"ARL reference image\" \\\n      license=\"Apache2.0\" \\\n      registry=\"library/piersharding/arl\" \\\n      vendor=\"Catalyst\" \\\n      org.skatelescope.team=\"Systems Team\" \\\n      org.skatelescope.version=\"0.1.0\" \\\n      org.skatelescope.website=\"http://github.com/SKA-ScienceDataProcessor/algorithm-reference-library/\"\n#   Set environment variables for pipenv execution:\n#\n#   * LC_ALL and LANG: Pipenv (specifically, its Click dependency) exits with an\n#     error unless the language encoding is set.\n#   * PIPENV_TIMEOUT: increased Pipenv timeout as locking dependencies takes\n#     *forever* inside a Docker container.\n#   * PATH: puts virtualenv python/pip/pipenv first on path\n#   * VIRTUAL_ENV: for completeness. This environment variable would have been\n#     set by 'source /venv/bin/activate'\n#   * PIPENV_VERBOSITY: hides warning about pipenv running inside a virtualenv.\n#   * PIPENV_NOSPIN: disables animated spinner for cleaner CI logs\n#\nENV LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    PIPENV_TIMEOUT=\"900\" \\\n    PATH=\"/arl/venv/bin:$PATH\" \\\n    VIRTUAL_ENV=\"/arl/venv\" \\\n    PIPENV_VERBOSITY=\"-1\" \\\n    PIPENV_NOSPIN=\"1\" \\\n    HOME=\"/root\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#   the package basics for Python 3\nRUN apt-get update -y \\\n && apt-get install software-properties-common pkg-config dirmngr python3-software-properties build-essential curl wget fonts-liberation ca-certificates libcfitsio-dev libffi-dev -y \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 \\\n && apt-get install git-lfs -y \\\n && git lfs install \\\n && apt-get install flake8 virtualenv virtualenvwrapper $PYTHON-dev $PYTHON-tk $PYTHON-nose -y \\\n && apt-get install graphviz -y \\\n && apt-get install nodejs npm -y \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*\n#   node node is linked to nodejs\nRUN if [ ! -f /usr/bin/node ] ; then ln -s /usr/bin/nodejs /usr/bin/node ; fi \\\n && node --version\n#   sort out pip and python for 3.x\nRUN cd /src ; wget https://bootstrap.pypa.io/get-pip.py \\\n && $PYTHON get-pip.py ; rm -rf /root/.cache\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\nRUN mkdir -p /arl\nWORKDIR /arl\nRUN virtualenv -p $PYTHON ${VIRTUAL_ENV}\n#   Install pipenv into the new virtual environment\nRUN pip install pipenv ; rm -rf /root/.cache\n#   Copy the Pipfile and frozen hashes (Pipfile.lock) across to the image so\n#   that pipenv knows what to install\nCOPY Pipfile /src/Pipfile\nCOPY Pipfile.lock /src/Pipfile.lock\n#   Install ARL dependencies into the virtual environment.\nRUN cd /src ; pipenv install --dev ; rm -rf /root/.cache\n#   Add and install Jupyter dependencies\nRUN $PIP install bokeh \\\n && $PIP install pytest ; $PIP install jupyter_nbextensions_configurator ; $PIP install jupyter_contrib_nbextensions ; rm -rf /root/.cache\nRUN $PIP install -U pylint ; rm -rf /root/.cache\nRUN jupyter contrib nbextension install --system --symlink\nRUN jupyter nbextensions_configurator enable --system\n#   runtime specific environment\nENV JENKINS_URL=\"1\"\nENV PYTHONPATH=\"/arl\"\nENV ARL=\"/arl\"\nENV JUPYTER_PATH=\"/arl/examples/arl\"\nRUN touch \"${HOME}/.bash_profile\"\n#   Bundle app source\n#   COPY limited by /.dockerignore\nCOPY ./docker/boot.sh ./Makefile ./setup.py /arl/\nCOPY . /arl/\n#   run setup\nRUN cd /arl \\\n && $PYTHON setup.py build \\\n && $PYTHON setup.py install \\\n && cp ./build/lib.*/*.so . \\\n && cd /arl/workflows/ffiwrapped/serial \\\n && make \\\n && $PIP install mpi4py\n#   create space for libs\nRUN mkdir -p /arl/test_data /arl/test_results \\\n && chmod 777 /arl /arl/test_data /arl/test_results\nCOPY --chown=\"1000:100\" ./docker/jupyter_notebook_config.py \"${HOME}/.jupyter/\"\nCOPY ./docker/notebook.sh /usr/local/bin/\nCOPY ./docker/start-dask-scheduler.sh /usr/local/bin/\nCOPY ./docker/start-dask-worker.sh /usr/local/bin\n#   We share in the arl data here\nVOLUME [\"/arl/data\", \"/arl/tmp\"]\n#   Expose Jupyter and Bokeh ports\nEXPOSE 8888/tcp 8786/tcp 8787/tcp 8788/tcp 8789/tcp\n#   Setup the entrypoint or environment\nENTRYPOINT [\"tini\", \"--\"]\n#   Run - default is notebook\nCMD [\"/arl/boot.sh\"]\n","originalDockerfileUglifiedHash":"1f6818deaecf907b48f8cf2a43426b7c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9a1799bcc5f845fd23a9af3e994bd2aa8eebd921.dockerfile"}