{"seed":2690181972,"processedDockerfileHash":"91c924009ce9fc4bf4cf74d4d33e92a3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG GOLANG_VERSION=1.12.3\nARG RUST_VERSION=1.35.0\nARG TERRAFORM_VERSION=0.12.1\nARG DEBIAN_BUSTER_HASH=sha256:9646b0ee6d68448e09cdee7ac8deb336e519113e5717ec0856d38ca813912930\nARG DEBIAN_SID_HASH=sha256:fc6ae865d58728644a7242375b777a03c8933600c0aff9df491e745b15ba9d3e\nARG SSH_HOST_KEYS_HASH=sha256:9a6630c2fbed11a3f806c5a5c1fe1550b628311d8701680fd740cae94b377e6c\n#  # golang tools\nFROM golang:$GOLANG_VERSION AS golang_builder\nRUN go get github.com/genuinetools/reg\nRUN go get github.com/golang/dep/cmd/dep\nRUN GO111MODULE=on go get github.com/wagoodman/dive@v0.7.2\nRUN GO111MODULE=on go get github.com/sachaos/todoist@v0.13.1\nRUN GO111MODULE=on go get github.com/screwdriver-cd/gitversion@v1.1.2\n#   vim-go dependencies\nFROM golang:$GOLANG_VERSION AS vimgo_deps\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends vim-nox -y -qq\nRUN git clone https://github.com/fatih/vim-go.git /root/.vim/pack/lang/start/vim-go\nRUN vim +\":set nomore\" +GoInstallBinaries +qall\n#   rust tools\nFROM debian:sid@$DEBIAN_SID_HASH AS rust_builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates cargo cmake default-libmysqlclient-dev libclang-dev liblzma-dev liblzma-dev libpq-dev libsqlite3-dev libssl-dev libssl-dev pkg-config rustc rust-src zlib1g-dev zlib1g-dev -y\nRUN cargo install --root /opt/rust-tools bat\nRUN cargo install --root /opt/rust-tools cargo-bloat\nRUN cargo install --root /opt/rust-tools cargo-bump\nRUN cargo install --root /opt/rust-tools cargo-bundle\nRUN cargo install --root /opt/rust-tools cargo-deb\nRUN cargo install --root /opt/rust-tools cargo-debstatus\nRUN cargo install --root /opt/rust-tools cargo-edit\nRUN cargo install --root /opt/rust-tools cargo-expand\nRUN cargo install --root /opt/rust-tools cargo-generate\nRUN cargo install --root /opt/rust-tools cargo-license\nRUN cargo install --root /opt/rust-tools cargo-release\nRUN cargo install --root /opt/rust-tools cargo-tree\nRUN cargo install --root /opt/rust-tools cargo-watch\nRUN cargo install --root /opt/rust-tools cargo-web\nRUN cargo install --root /opt/rust-tools diesel_cli\nRUN cargo install --root /opt/rust-tools perf-focus\nRUN cargo install --root /opt/rust-tools sccache\nRUN cargo install --root /opt/rust-tools systemfd\nRUN cargo install --root /opt/rust-tools wasm-pack\n#   install terraform\nFROM qmxme/curl AS terraform_builder\nRUN curl -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.1/terraform_0.12.1_linux_amd64.zip\nRUN cd /usr/local/bin \\\n && unzip /tmp/terraform.zip \\\n && chmod 755 /usr/local/bin/terraform\n#   install kubectl\nFROM qmxme/curl AS kubectl_builder\nRUN curl -L -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl\nRUN chmod 755 /usr/local/bin/kubectl\n#   install helm\nFROM qmxme/curl AS helm_builder\nRUN curl -L -o /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz\nWORKDIR /tmp\nRUN tar -zxvf helm.tar.gz\nRUN cp linux-amd64/helm /usr/local/bin\nRUN cp linux-amd64/tiller /usr/local/bin\n#   install docker-compose\nFROM qmxme/curl AS compose_builder\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose\nRUN chmod 755 /usr/local/bin/docker-compose\n#   SSH host keys\nFROM qmxme/openssh@$SSH_HOST_KEYS_HASH AS ssh_host_keys\n#   base distro\nFROM debian:sid@$DEBIAN_SID_HASH\n#   setup env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_MESSAGES=\"en_US.UTF-8\"\n#   default package set\nRUN apt-get update -qq \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apache2-utils apt-transport-https build-essential ca-certificates cargo clang cmake curl debcargo default-libmysqlclient-dev default-mysql-client direnv dnsutils docker.io entr exuberant-ctags fakeroot-ng flake8 fzf gdb git git-crypt gnupg golang-1.12 htop hub hugo ipcalc jq kafkacat less libclang-dev liblzma-dev libpq-dev libprotoc-dev librdkafka-dev libsqlite3-dev libssl-dev lldb locales man mosh mtr-tiny musl-tools ncdu netcat-openbsd nodejs npm openjdk-11-jdk-headless openssh-server pkg-config protobuf-compiler pwgen python python3 python3-flake8 python3-pip python3-setuptools python3-venv python3-wheel qrencode quilt redis-server restic ripgrep rsync rustc rust-src shellcheck socat sqlite3 stow strace sudo tmate tmux unzip vim-nox wabt zgen zip zlib1g-dev zsh -qq -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen --purge $LANG \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=$LANG LC_ALL=$LC_ALL LANGUAGE=$LANGUAGE\n#   enable yarn repo\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends yarn -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   sshd setup\nRUN mkdir /var/run/sshd\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN sed 's/#Port 22/Port 3222/' -i /etc/ssh/sshd_config\nRUN echo 'StreamLocalBindUnlink yes' >> /etc/ssh/sshd_config\nCOPY --from=ssh_host_keys /etc/ssh/ssh_host* /etc/ssh/\n#   rust tools\nRUN curl -L -o /tmp/cpubars_0.2.1_amd64.deb https://github.com/qmx/cpubars/releases/download/0.2.1/cpubars_0.2.1_amd64.deb \\\n && dpkg -i /tmp/cpubars_0.2.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/marinara_0.2.0_amd64.deb https://github.com/qmx/marinara/releases/download/0.2.0/marinara_0.2.0_amd64.deb \\\n && dpkg -i /tmp/marinara_0.2.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/jump_0.22.0_amd64.deb https://github.com/gsamokovarov/jump/releases/download/v0.22.0/jump_0.22.0_amd64.deb \\\n && dpkg -i /tmp/jump_0.22.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/wk_0.1.1_amd64.deb https://github.com/qmx/wk/releases/download/0.1.1/wk_0.1.1_amd64.deb \\\n && dpkg -i /tmp/wk_0.1.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/cargo-docserver_0.1.2_amd64.deb https://github.com/qmx/cargo-docserver/releases/download/0.1.2/cargo-docserver_0.1.2_amd64.deb \\\n && dpkg -i /tmp/cargo-docserver_0.1.2_amd64.deb \\\n && rm /tmp/*.deb\n#   rust essential crates\nCOPY --from=rust_builder /opt/rust-tools/bin/* /usr/local/bin/\n#   golang tools\nCOPY --from=golang_builder /go/bin/* /usr/local/bin/\n#   vim-go tools\nCOPY --from=vimgo_deps /go/bin/* /usr/local/bin/\n#   terraform\nCOPY --from=terraform_builder /usr/local/bin/terraform /usr/local/bin/\n#   kubectl\nCOPY --from=kubectl_builder /usr/local/bin/kubectl /usr/local/bin/\n#   helm\nCOPY --from=helm_builder /usr/local/bin/helm /usr/local/bin/tiller /usr/local/bin/\n#   docker-compose\nCOPY --from=compose_builder /usr/local/bin/docker-compose /usr/local/bin/\n#   user setup\nARG user=qmx\nARG uid=1000\nARG github_user=qmx\nRUN useradd -m $user -u $uid -G users,sudo,docker -s /bin/zsh\nUSER $user\nRUN mkdir ~/.ssh \\\n && curl -fsL https://github.com/$github_user.keys > ~/.ssh/authorized_keys \\\n && chmod 700 ~/.ssh \\\n && chmod 600 ~/.ssh/authorized_keys\n#   some empty folders, with proper permissions\nRUN mkdir -p ~/bin ~/.cargo/bin ~/.config ~/tmp ~/.gnupg ~/.local ~/.vim \\\n && chmod 700 ~/.gnupg\n#   dotfile setup\nRUN git clone --recursive https://github.com/qmx/dotfiles.git ~/.dotfiles\nRUN cd ~/.dotfiles \\\n && stow -v .\n#   install rust\nRUN curl -sSf https://sh.rustup.rs | zsh -s -- -y --default-toolchain none\nRUN /home/$user/.cargo/bin/rustup toolchain link system /usr\nRUN /home/$user/.cargo/bin/rustup default system\n#   make sure we start sshd at the end - always keep this at the bottom\nUSER root\nEXPOSE 3222/tcp\nCOPY entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-D\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG GOLANG_VERSION=1.12.3\nARG RUST_VERSION=1.35.0\nARG TERRAFORM_VERSION=0.12.1\nARG DEBIAN_BUSTER_HASH=sha256:9646b0ee6d68448e09cdee7ac8deb336e519113e5717ec0856d38ca813912930\nARG DEBIAN_SID_HASH=sha256:fc6ae865d58728644a7242375b777a03c8933600c0aff9df491e745b15ba9d3e\nARG SSH_HOST_KEYS_HASH=sha256:9a6630c2fbed11a3f806c5a5c1fe1550b628311d8701680fd740cae94b377e6c\n# # golang tools\nFROM golang:$GOLANG_VERSION AS golang_builder\nRUN go get github.com/genuinetools/reg\nRUN go get github.com/golang/dep/cmd/dep\nRUN GO111MODULE=on go get github.com/wagoodman/dive@v0.7.2\nRUN GO111MODULE=on go get github.com/sachaos/todoist@v0.13.1\nRUN GO111MODULE=on go get github.com/screwdriver-cd/gitversion@v1.1.2\n#  vim-go dependencies\nFROM golang:$GOLANG_VERSION AS vimgo_deps\nRUN apt-get update -q \\\n && apt-get install vim-nox -y -qq\nRUN git clone https://github.com/fatih/vim-go.git /root/.vim/pack/lang/start/vim-go\nRUN vim +\":set nomore\" +GoInstallBinaries +qall\n#  rust tools\nFROM debian:sid@$DEBIAN_SID_HASH AS rust_builder\nRUN apt-get update \\\n && apt-get install build-essential ca-certificates cargo cmake default-libmysqlclient-dev libclang-dev liblzma-dev liblzma-dev libpq-dev libsqlite3-dev libssl-dev libssl-dev pkg-config rustc rust-src zlib1g-dev zlib1g-dev -y\nRUN cargo install --root /opt/rust-tools bat\nRUN cargo install --root /opt/rust-tools cargo-bloat\nRUN cargo install --root /opt/rust-tools cargo-bump\nRUN cargo install --root /opt/rust-tools cargo-bundle\nRUN cargo install --root /opt/rust-tools cargo-deb\nRUN cargo install --root /opt/rust-tools cargo-debstatus\nRUN cargo install --root /opt/rust-tools cargo-edit\nRUN cargo install --root /opt/rust-tools cargo-expand\nRUN cargo install --root /opt/rust-tools cargo-generate\nRUN cargo install --root /opt/rust-tools cargo-license\nRUN cargo install --root /opt/rust-tools cargo-release\nRUN cargo install --root /opt/rust-tools cargo-tree\nRUN cargo install --root /opt/rust-tools cargo-watch\nRUN cargo install --root /opt/rust-tools cargo-web\nRUN cargo install --root /opt/rust-tools diesel_cli\nRUN cargo install --root /opt/rust-tools perf-focus\nRUN cargo install --root /opt/rust-tools sccache\nRUN cargo install --root /opt/rust-tools systemfd\nRUN cargo install --root /opt/rust-tools wasm-pack\n#  install terraform\nFROM qmxme/curl AS terraform_builder\nRUN curl -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.1/terraform_0.12.1_linux_amd64.zip\nRUN cd /usr/local/bin \\\n && unzip /tmp/terraform.zip \\\n && chmod 755 /usr/local/bin/terraform\n#  install kubectl\nFROM qmxme/curl AS kubectl_builder\nRUN curl -L -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl\nRUN chmod 755 /usr/local/bin/kubectl\n#  install helm\nFROM qmxme/curl AS helm_builder\nRUN curl -L -o /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz\nWORKDIR /tmp\nRUN tar -zxvf helm.tar.gz\nRUN cp linux-amd64/helm /usr/local/bin\nRUN cp linux-amd64/tiller /usr/local/bin\n#  install docker-compose\nFROM qmxme/curl AS compose_builder\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose\nRUN chmod 755 /usr/local/bin/docker-compose\n#  SSH host keys\nFROM qmxme/openssh@$SSH_HOST_KEYS_HASH AS ssh_host_keys\n#  base distro\nFROM debian:sid@$DEBIAN_SID_HASH\n#  setup env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_MESSAGES=\"en_US.UTF-8\"\n#  default package set\nRUN apt-get update -qq \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apache2-utils apt-transport-https build-essential ca-certificates cargo clang cmake curl debcargo default-libmysqlclient-dev default-mysql-client direnv dnsutils docker.io entr exuberant-ctags fakeroot-ng flake8 fzf gdb git git-crypt gnupg golang-1.12 htop hub hugo ipcalc jq kafkacat less libclang-dev liblzma-dev libpq-dev libprotoc-dev librdkafka-dev libsqlite3-dev libssl-dev lldb locales man mosh mtr-tiny musl-tools ncdu netcat-openbsd nodejs npm openjdk-11-jdk-headless openssh-server pkg-config protobuf-compiler pwgen python python3 python3-flake8 python3-pip python3-setuptools python3-venv python3-wheel qrencode quilt redis-server restic ripgrep rsync rustc rust-src shellcheck socat sqlite3 stow strace sudo tmate tmux unzip vim-nox wabt zgen zip zlib1g-dev zsh -qq -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen --purge $LANG \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=$LANG LC_ALL=$LC_ALL LANGUAGE=$LANGUAGE\n#  enable yarn repo\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends yarn -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#  sshd setup\nRUN mkdir /var/run/sshd\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN sed 's/#Port 22/Port 3222/' -i /etc/ssh/sshd_config\nRUN echo 'StreamLocalBindUnlink yes' >> /etc/ssh/sshd_config\nCOPY --from=ssh_host_keys /etc/ssh/ssh_host* /etc/ssh/\n#  rust tools\nRUN curl -L -o /tmp/cpubars_0.2.1_amd64.deb https://github.com/qmx/cpubars/releases/download/0.2.1/cpubars_0.2.1_amd64.deb \\\n && dpkg -i /tmp/cpubars_0.2.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/marinara_0.2.0_amd64.deb https://github.com/qmx/marinara/releases/download/0.2.0/marinara_0.2.0_amd64.deb \\\n && dpkg -i /tmp/marinara_0.2.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/jump_0.22.0_amd64.deb https://github.com/gsamokovarov/jump/releases/download/v0.22.0/jump_0.22.0_amd64.deb \\\n && dpkg -i /tmp/jump_0.22.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/wk_0.1.1_amd64.deb https://github.com/qmx/wk/releases/download/0.1.1/wk_0.1.1_amd64.deb \\\n && dpkg -i /tmp/wk_0.1.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/cargo-docserver_0.1.2_amd64.deb https://github.com/qmx/cargo-docserver/releases/download/0.1.2/cargo-docserver_0.1.2_amd64.deb \\\n && dpkg -i /tmp/cargo-docserver_0.1.2_amd64.deb \\\n && rm /tmp/*.deb\n#  rust essential crates\nCOPY --from=rust_builder /opt/rust-tools/bin/* /usr/local/bin/\n#  golang tools\nCOPY --from=golang_builder /go/bin/* /usr/local/bin/\n#  vim-go tools\nCOPY --from=vimgo_deps /go/bin/* /usr/local/bin/\n#  terraform\nCOPY --from=terraform_builder /usr/local/bin/terraform /usr/local/bin/\n#  kubectl\nCOPY --from=kubectl_builder /usr/local/bin/kubectl /usr/local/bin/\n#  helm\nCOPY --from=helm_builder /usr/local/bin/helm /usr/local/bin/tiller /usr/local/bin/\n#  docker-compose\nCOPY --from=compose_builder /usr/local/bin/docker-compose /usr/local/bin/\n#  user setup\nARG user=qmx\nARG uid=1000\nARG github_user=qmx\nRUN useradd -m $user -u $uid -G users,sudo,docker -s /bin/zsh\nUSER $user\nRUN mkdir ~/.ssh \\\n && curl -fsL https://github.com/$github_user.keys > ~/.ssh/authorized_keys \\\n && chmod 700 ~/.ssh \\\n && chmod 600 ~/.ssh/authorized_keys\n#  some empty folders, with proper permissions\nRUN mkdir -p ~/bin ~/.cargo/bin ~/.config ~/tmp ~/.gnupg ~/.local ~/.vim \\\n && chmod 700 ~/.gnupg\n#  dotfile setup\nRUN git clone --recursive https://github.com/qmx/dotfiles.git ~/.dotfiles\nRUN cd ~/.dotfiles \\\n && stow -v .\n#  install rust\nRUN curl -sSf https://sh.rustup.rs | zsh -s -- -y --default-toolchain none\nRUN /home/$user/.cargo/bin/rustup toolchain link system /usr\nRUN /home/$user/.cargo/bin/rustup default system\n#  make sure we start sshd at the end - always keep this at the bottom\nUSER root\nEXPOSE 3222/tcp\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n","injectedSmells":[],"originalDockerfileHash":"61c9d997d4635f8a6acdcd72a058eb54","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG GOLANG_VERSION=1.12.3\nARG RUST_VERSION=1.35.0\nARG TERRAFORM_VERSION=0.12.1\nARG DEBIAN_BUSTER_HASH=sha256:9646b0ee6d68448e09cdee7ac8deb336e519113e5717ec0856d38ca813912930\nARG DEBIAN_SID_HASH=sha256:fc6ae865d58728644a7242375b777a03c8933600c0aff9df491e745b15ba9d3e\nARG SSH_HOST_KEYS_HASH=sha256:9a6630c2fbed11a3f806c5a5c1fe1550b628311d8701680fd740cae94b377e6c\n#  # golang tools\nFROM golang:$GOLANG_VERSION AS golang_builder\nRUN go get github.com/genuinetools/reg\nRUN go get github.com/golang/dep/cmd/dep\nRUN GO111MODULE=on go get github.com/wagoodman/dive@v0.7.2\nRUN GO111MODULE=on go get github.com/sachaos/todoist@v0.13.1\nRUN GO111MODULE=on go get github.com/screwdriver-cd/gitversion@v1.1.2\n#   vim-go dependencies\nFROM golang:$GOLANG_VERSION AS vimgo_deps\nRUN apt-get update -q \\\n && apt-get install vim-nox -y -qq\nRUN git clone https://github.com/fatih/vim-go.git /root/.vim/pack/lang/start/vim-go\nRUN vim +\":set nomore\" +GoInstallBinaries +qall\n#   rust tools\nFROM debian:sid@$DEBIAN_SID_HASH AS rust_builder\nRUN apt-get update \\\n && apt-get install build-essential ca-certificates cargo cmake default-libmysqlclient-dev libclang-dev liblzma-dev liblzma-dev libpq-dev libsqlite3-dev libssl-dev libssl-dev pkg-config rustc rust-src zlib1g-dev zlib1g-dev -y\nRUN cargo install --root /opt/rust-tools bat\nRUN cargo install --root /opt/rust-tools cargo-bloat\nRUN cargo install --root /opt/rust-tools cargo-bump\nRUN cargo install --root /opt/rust-tools cargo-bundle\nRUN cargo install --root /opt/rust-tools cargo-deb\nRUN cargo install --root /opt/rust-tools cargo-debstatus\nRUN cargo install --root /opt/rust-tools cargo-edit\nRUN cargo install --root /opt/rust-tools cargo-expand\nRUN cargo install --root /opt/rust-tools cargo-generate\nRUN cargo install --root /opt/rust-tools cargo-license\nRUN cargo install --root /opt/rust-tools cargo-release\nRUN cargo install --root /opt/rust-tools cargo-tree\nRUN cargo install --root /opt/rust-tools cargo-watch\nRUN cargo install --root /opt/rust-tools cargo-web\nRUN cargo install --root /opt/rust-tools diesel_cli\nRUN cargo install --root /opt/rust-tools perf-focus\nRUN cargo install --root /opt/rust-tools sccache\nRUN cargo install --root /opt/rust-tools systemfd\nRUN cargo install --root /opt/rust-tools wasm-pack\n#   install terraform\nFROM qmxme/curl AS terraform_builder\nRUN curl -L -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.1/terraform_0.12.1_linux_amd64.zip\nRUN cd /usr/local/bin \\\n && unzip /tmp/terraform.zip \\\n && chmod 755 /usr/local/bin/terraform\n#   install kubectl\nFROM qmxme/curl AS kubectl_builder\nRUN curl -L -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl\nRUN chmod 755 /usr/local/bin/kubectl\n#   install helm\nFROM qmxme/curl AS helm_builder\nRUN curl -L -o /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.0-linux-amd64.tar.gz\nWORKDIR /tmp\nRUN tar -zxvf helm.tar.gz\nRUN cp linux-amd64/helm /usr/local/bin\nRUN cp linux-amd64/tiller /usr/local/bin\n#   install docker-compose\nFROM qmxme/curl AS compose_builder\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose\nRUN chmod 755 /usr/local/bin/docker-compose\n#   SSH host keys\nFROM qmxme/openssh@$SSH_HOST_KEYS_HASH AS ssh_host_keys\n#   base distro\nFROM debian:sid@$DEBIAN_SID_HASH\n#   setup env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_MESSAGES=\"en_US.UTF-8\"\n#   default package set\nRUN apt-get update -qq \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apache2-utils apt-transport-https build-essential ca-certificates cargo clang cmake curl debcargo default-libmysqlclient-dev default-mysql-client direnv dnsutils docker.io entr exuberant-ctags fakeroot-ng flake8 fzf gdb git git-crypt gnupg golang-1.12 htop hub hugo ipcalc jq kafkacat less libclang-dev liblzma-dev libpq-dev libprotoc-dev librdkafka-dev libsqlite3-dev libssl-dev lldb locales man mosh mtr-tiny musl-tools ncdu netcat-openbsd nodejs npm openjdk-11-jdk-headless openssh-server pkg-config protobuf-compiler pwgen python python3 python3-flake8 python3-pip python3-setuptools python3-venv python3-wheel qrencode quilt redis-server restic ripgrep rsync rustc rust-src shellcheck socat sqlite3 stow strace sudo tmate tmux unzip vim-nox wabt zgen zip zlib1g-dev zsh -qq -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen --purge $LANG \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=$LANG LC_ALL=$LC_ALL LANGUAGE=$LANGUAGE\n#   enable yarn repo\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" > /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends yarn -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   sshd setup\nRUN mkdir /var/run/sshd\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN sed 's/#Port 22/Port 3222/' -i /etc/ssh/sshd_config\nRUN echo 'StreamLocalBindUnlink yes' >> /etc/ssh/sshd_config\nCOPY --from=ssh_host_keys /etc/ssh/ssh_host* /etc/ssh/\n#   rust tools\nRUN curl -L -o /tmp/cpubars_0.2.1_amd64.deb https://github.com/qmx/cpubars/releases/download/0.2.1/cpubars_0.2.1_amd64.deb \\\n && dpkg -i /tmp/cpubars_0.2.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/marinara_0.2.0_amd64.deb https://github.com/qmx/marinara/releases/download/0.2.0/marinara_0.2.0_amd64.deb \\\n && dpkg -i /tmp/marinara_0.2.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/jump_0.22.0_amd64.deb https://github.com/gsamokovarov/jump/releases/download/v0.22.0/jump_0.22.0_amd64.deb \\\n && dpkg -i /tmp/jump_0.22.0_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/wk_0.1.1_amd64.deb https://github.com/qmx/wk/releases/download/0.1.1/wk_0.1.1_amd64.deb \\\n && dpkg -i /tmp/wk_0.1.1_amd64.deb \\\n && rm /tmp/*.deb\nRUN curl -L -o /tmp/cargo-docserver_0.1.2_amd64.deb https://github.com/qmx/cargo-docserver/releases/download/0.1.2/cargo-docserver_0.1.2_amd64.deb \\\n && dpkg -i /tmp/cargo-docserver_0.1.2_amd64.deb \\\n && rm /tmp/*.deb\n#   rust essential crates\nCOPY --from=rust_builder /opt/rust-tools/bin/* /usr/local/bin/\n#   golang tools\nCOPY --from=golang_builder /go/bin/* /usr/local/bin/\n#   vim-go tools\nCOPY --from=vimgo_deps /go/bin/* /usr/local/bin/\n#   terraform\nCOPY --from=terraform_builder /usr/local/bin/terraform /usr/local/bin/\n#   kubectl\nCOPY --from=kubectl_builder /usr/local/bin/kubectl /usr/local/bin/\n#   helm\nCOPY --from=helm_builder /usr/local/bin/helm /usr/local/bin/tiller /usr/local/bin/\n#   docker-compose\nCOPY --from=compose_builder /usr/local/bin/docker-compose /usr/local/bin/\n#   user setup\nARG user=qmx\nARG uid=1000\nARG github_user=qmx\nRUN useradd -m $user -u $uid -G users,sudo,docker -s /bin/zsh\nUSER $user\nRUN mkdir ~/.ssh \\\n && curl -fsL https://github.com/$github_user.keys > ~/.ssh/authorized_keys \\\n && chmod 700 ~/.ssh \\\n && chmod 600 ~/.ssh/authorized_keys\n#   some empty folders, with proper permissions\nRUN mkdir -p ~/bin ~/.cargo/bin ~/.config ~/tmp ~/.gnupg ~/.local ~/.vim \\\n && chmod 700 ~/.gnupg\n#   dotfile setup\nRUN git clone --recursive https://github.com/qmx/dotfiles.git ~/.dotfiles\nRUN cd ~/.dotfiles \\\n && stow -v .\n#   install rust\nRUN curl -sSf https://sh.rustup.rs | zsh -s -- -y --default-toolchain none\nRUN /home/$user/.cargo/bin/rustup toolchain link system /usr\nRUN /home/$user/.cargo/bin/rustup default system\n#   make sure we start sshd at the end - always keep this at the bottom\nUSER root\nEXPOSE 3222/tcp\nADD entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n","originalDockerfileUglifiedHash":"7adbf38b1c42b0f14eaee49644cca9ef","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4f3d357bbccc9659a7a66e4d11dd4d7eb310642a.dockerfile"}