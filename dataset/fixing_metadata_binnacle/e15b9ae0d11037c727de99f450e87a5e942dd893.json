{"seed":1948634024,"processedDockerfileHash":"9b87d629a19649bb478afd444b6e4f74","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ###############################################################################\n#  #                               BUILD ARGS                                   ##\n#  ###############################################################################\n#   The golang image is used to create the project's module and build caches\n#   and is also the image on which this image is based.\nARG GOLANG_IMAGE=golang:1.12\n#   The image from which the Terraform project used to turn up a K8s cluster is\n#   copied, as well as several programs.\nARG SK8E2E_IMAGE=gcr.io/kubernetes-conformance-testing/sk8e2e:v0.2.1-29-g1d251af\n#  ###############################################################################\n#  #                            GO MOD CACHE STAGE                              ##\n#  ###############################################################################\n#   Create a Go module cache.\nFROM ${GOLANG_IMAGE} AS mod-cache\nWORKDIR /build\nCOPY go.mod go.sum ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN go mod download \\\n && go mod verify\n#  ###############################################################################\n#  #                           GO BUILD CACHE STAGE                             ##\n#  ###############################################################################\n#   Create a Go build cache. Please note the reason the Makefile is not used and\n#   \"go build\" is invoked directly is to avoid having to rebuild this stage as a\n#   result of the Makefile changing.\nFROM ${GOLANG_IMAGE} AS build-cache\nWORKDIR /build\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY go.mod go.sum hack/make/ldflags.txt ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV CGO_ENABLED=\"0\" \\\n    GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN LDFLAGS=$( cat ldflags.txt ;) \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vsphere-cloud-controller-manager \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vcpctl\n#  ###############################################################################\n#  #                              SK8E2E STAGE                                  ##\n#  ###############################################################################\nFROM ${SK8E2E_IMAGE} AS sk8e2e\nRUN /google-cloud-sdk/bin/gcloud components update\n#  ###############################################################################\n#  #                               KIND STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE} AS kind\nRUN cd / \\\n && GO111MODULE=\"on\" go get -u sigs.k8s.io/kind@v0.3.0\n#  ###############################################################################\n#  #                               LINT STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE} AS lint\nRUN go get -u golang.org/x/lint/golint\n#  ###############################################################################\n#  #                               MAIN STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE}\nLABEL maintainer=\"\\\"Andrew Kutz <akutz@vmware.com>\\\"\"\n#  ###############################################################################\n#  #                            CONFIGURE LOCALE                                ##\n#  ###############################################################################\n#   Set the locale so that the gist command is happy.\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\n#  ###############################################################################\n#  #                             PACKAGE UPDATES                                ##\n#  ###############################################################################\n#   Install the dependencies. The list is a uniion of the dependencies required\n#   by the following images:\n#     * https://github.com/vmware/simple-k8s-test-env/blob/master/e2e/Dockerfile\n#     * https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20230311 curl=7.88.1-7ubuntu1 git=1:2.39.2-1ubuntu1 jq=1.6-2.1ubuntu3 locales=2.37-0ubuntu2 mercurial=6.3.2-1 python3=3.11.2-1 ruby=1:3.1 tar=1.34+dfsg-1.1 unzip=6.0-27ubuntu1 zip=3.0-13 -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && curl -sSL https://bootstrap.pypa.io/get-pip.py | python3 - \\\n && pip3 install setuptools wheel awscli --upgrade \\\n && gem install gist --version 6.0.0\n#  ###############################################################################\n#  #                             DOCKER-IN-DOCKER                               ##\n#  ###############################################################################\n#   Again, copied from test-infra's bootstrap image:\n#   https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\n#   Install Docker deps, some of these are already installed in the image but\n#   that's fine since they won't re-install and we can reuse the code below\n#   for another image someday.\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=2.6.0 ca-certificates=20230311 curl=7.88.1-7ubuntu1 gnupg2=2.2.40-1ubuntu2 software-properties-common=0.99.35 lsb-release=12.0-1ubuntu1 -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n#   Add the Docker apt-repository\nRUN curl -fsSL https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;)/gpg | apt-key add - \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;) $( lsb_release -cs ;) stable\"\n#   Install Docker\n#   TODO(bentheelder): the `sed` is a bit of a hack, look into alternatives.\n#   Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n#   We're already inside docker though so we can be sure these are already mounted.\n#   Trying to remount these makes for a very noisy error block in the beginning of\n#   the pod logs, so we just comment out the call to it... :shrug:\n#   TODO(benthelder): update docker version. This is pinned because of\n#   https://github.com/kubernetes/test-infra/issues/6187\nRUN apt-get update \\\n && apt-get install --no-install-recommends docker-ce=18.06.* -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker\n#   Move Docker's storage location\nRUN echo 'DOCKER_OPTS=\"${DOCKER_OPTS} --data-root=/docker-graph\"' | tee --append /etc/default/docker\n#   NOTE this should be mounted and persisted as a volume ideally (!)\n#   We will make a fallback one now just in case\nRUN mkdir /docker-graph\n#   Setting this environment variable is an easy way for processes running\n#   in the container to know DinD is enabled.\nENV DOCKER_IN_DOCKER_ENABLED=\"true\"\n#  ###############################################################################\n#  #                          COPY FROM SK8E2E                                  ##\n#  ###############################################################################\nCOPY --from=sk8e2e /tf /tf/\nCOPY --from=sk8e2e /google-cloud-sdk /google-cloud-sdk/\nCOPY --from=sk8e2e /usr/local/bin/govc /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/keepalive /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/kubectl /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/sonobuoy /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/terraform /usr/local/bin/\n#  ###############################################################################\n#  #                       CONFIGURE GOOGLE CLOUD SDK                           ##\n#  ###############################################################################\n#   Update the PATH to include the Google Cloud SDK and disable its prompts and\n#   update the gcloud components.\nENV PATH=\"/google-cloud-sdk/bin:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\n#  ###############################################################################\n#  #                             INSTALL KIND                                   ##\n#  ###############################################################################\nCOPY --from=kind /go/bin/kind /usr/local/bin/\n#  ###############################################################################\n#  #                             INSTALL LINT                                   ##\n#  ###############################################################################\nCOPY --from=lint /go/bin/golint /usr/local/bin/\n#  ###############################################################################\n#  #                         PRIME GO MOD & BUILD CACHES                        ##\n#  ###############################################################################\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY --from=build-cache /root/.cache/go-build /root/.cache/go-build/\nRUN mkdir -p /home/prow/go/pkg \\\n && ln -s /go/pkg/mod /home/prow/go/pkg/mod\n#  ###############################################################################\n#  #                           ADD LOCAL SOURCES                                ##\n#  ###############################################################################\n#   Copy the sources into the project's traditional Gopath location in the\n#   image. It's possible to bind mount up-to-date sources over the ones in\n#   the image when the latter is run as a container.\nWORKDIR /go/src/k8s.io/cloud-provider-vsphere/\nCOPY . ./\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ###############################################################################\n# #                               BUILD ARGS                                   ##\n# ###############################################################################\n#  The golang image is used to create the project's module and build caches\n#  and is also the image on which this image is based.\nARG GOLANG_IMAGE=golang:1.12\n#  The image from which the Terraform project used to turn up a K8s cluster is\n#  copied, as well as several programs.\nARG SK8E2E_IMAGE=gcr.io/kubernetes-conformance-testing/sk8e2e:v0.2.1-29-g1d251af\n# ###############################################################################\n# #                            GO MOD CACHE STAGE                              ##\n# ###############################################################################\n#  Create a Go module cache.\nFROM ${GOLANG_IMAGE} AS mod-cache\nWORKDIR /build\nCOPY go.mod go.sum ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN go mod download \\\n && go mod verify\n# ###############################################################################\n# #                           GO BUILD CACHE STAGE                             ##\n# ###############################################################################\n#  Create a Go build cache. Please note the reason the Makefile is not used and\n#  \"go build\" is invoked directly is to avoid having to rebuild this stage as a\n#  result of the Makefile changing.\nFROM ${GOLANG_IMAGE} AS build-cache\nWORKDIR /build\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY go.mod go.sum hack/make/ldflags.txt ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV CGO_ENABLED=\"0\" \\\n    GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN LDFLAGS=$( cat ldflags.txt ;) \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vsphere-cloud-controller-manager \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vcpctl\n# ###############################################################################\n# #                              SK8E2E STAGE                                  ##\n# ###############################################################################\nFROM ${SK8E2E_IMAGE} AS sk8e2e\nRUN /google-cloud-sdk/bin/gcloud components update\n# ###############################################################################\n# #                               KIND STAGE                                   ##\n# ###############################################################################\nFROM ${GOLANG_IMAGE} AS kind\nRUN cd / \\\n && GO111MODULE=\"on\" go get -u sigs.k8s.io/kind@v0.3.0\n# ###############################################################################\n# #                               LINT STAGE                                   ##\n# ###############################################################################\nFROM ${GOLANG_IMAGE} AS lint\nRUN go get -u golang.org/x/lint/golint\n# ###############################################################################\n# #                               MAIN STAGE                                   ##\n# ###############################################################################\nFROM ${GOLANG_IMAGE}\nLABEL maintainer=\"\\\"Andrew Kutz <akutz@vmware.com>\\\"\"\n# ###############################################################################\n# #                            CONFIGURE LOCALE                                ##\n# ###############################################################################\n#  Set the locale so that the gist command is happy.\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\n# ###############################################################################\n# #                             PACKAGE UPDATES                                ##\n# ###############################################################################\n#  Install the dependencies. The list is a uniion of the dependencies required\n#  by the following images:\n#    * https://github.com/vmware/simple-k8s-test-env/blob/master/e2e/Dockerfile\n#    * https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl git jq locales mercurial python3 ruby tar unzip zip -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && curl -sSL https://bootstrap.pypa.io/get-pip.py | python3 - \\\n && pip3 install setuptools wheel awscli --upgrade \\\n && gem install gist\n# ###############################################################################\n# #                             DOCKER-IN-DOCKER                               ##\n# ###############################################################################\n#  Again, copied from test-infra's bootstrap image:\n#  https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\n#  Install Docker deps, some of these are already installed in the image but\n#  that's fine since they won't re-install and we can reuse the code below\n#  for another image someday.\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl gnupg2 software-properties-common lsb-release -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n#  Add the Docker apt-repository\nRUN curl -fsSL https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;)/gpg | apt-key add - \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;) $( lsb_release -cs ;) stable\"\n#  Install Docker\n#  TODO(bentheelder): the `sed` is a bit of a hack, look into alternatives.\n#  Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n#  We're already inside docker though so we can be sure these are already mounted.\n#  Trying to remount these makes for a very noisy error block in the beginning of\n#  the pod logs, so we just comment out the call to it... :shrug:\n#  TODO(benthelder): update docker version. This is pinned because of\n#  https://github.com/kubernetes/test-infra/issues/6187\nRUN apt-get update \\\n && apt-get install --no-install-recommends docker-ce=18.06.* -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker\n#  Move Docker's storage location\nRUN echo 'DOCKER_OPTS=\"${DOCKER_OPTS} --data-root=/docker-graph\"' | tee --append /etc/default/docker\n#  NOTE this should be mounted and persisted as a volume ideally (!)\n#  We will make a fallback one now just in case\nRUN mkdir /docker-graph\n#  Setting this environment variable is an easy way for processes running\n#  in the container to know DinD is enabled.\nENV DOCKER_IN_DOCKER_ENABLED=\"true\"\n# ###############################################################################\n# #                          COPY FROM SK8E2E                                  ##\n# ###############################################################################\nCOPY --from=sk8e2e /tf /tf/\nCOPY --from=sk8e2e /google-cloud-sdk /google-cloud-sdk/\nCOPY --from=sk8e2e /usr/local/bin/govc /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/keepalive /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/kubectl /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/sonobuoy /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/terraform /usr/local/bin/\n# ###############################################################################\n# #                       CONFIGURE GOOGLE CLOUD SDK                           ##\n# ###############################################################################\n#  Update the PATH to include the Google Cloud SDK and disable its prompts and\n#  update the gcloud components.\nENV PATH=\"/google-cloud-sdk/bin:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\n# ###############################################################################\n# #                             INSTALL KIND                                   ##\n# ###############################################################################\nCOPY --from=kind /go/bin/kind /usr/local/bin/\n# ###############################################################################\n# #                             INSTALL LINT                                   ##\n# ###############################################################################\nCOPY --from=lint /go/bin/golint /usr/local/bin/\n# ###############################################################################\n# #                         PRIME GO MOD & BUILD CACHES                        ##\n# ###############################################################################\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY --from=build-cache /root/.cache/go-build /root/.cache/go-build/\nRUN mkdir -p /home/prow/go/pkg \\\n && ln -s /go/pkg/mod /home/prow/go/pkg/mod\n# ###############################################################################\n# #                           ADD LOCAL SOURCES                                ##\n# ###############################################################################\n#  Copy the sources into the project's traditional Gopath location in the\n#  image. It's possible to bind mount up-to-date sources over the ones in\n#  the image when the latter is run as a container.\nWORKDIR /go/src/k8s.io/cloud-provider-vsphere/\nCOPY . ./\n","injectedSmells":[],"originalDockerfileHash":"6e9762ccebfaf5ca9c5d03407425cba8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ###############################################################################\n#  #                               BUILD ARGS                                   ##\n#  ###############################################################################\n#   The golang image is used to create the project's module and build caches\n#   and is also the image on which this image is based.\nARG GOLANG_IMAGE=golang:1.12\n#   The image from which the Terraform project used to turn up a K8s cluster is\n#   copied, as well as several programs.\nARG SK8E2E_IMAGE=gcr.io/kubernetes-conformance-testing/sk8e2e:v0.2.1-29-g1d251af\n#  ###############################################################################\n#  #                            GO MOD CACHE STAGE                              ##\n#  ###############################################################################\n#   Create a Go module cache.\nFROM ${GOLANG_IMAGE} AS mod-cache\nWORKDIR /build\nCOPY go.mod go.sum ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN go mod download \\\n && go mod verify\n#  ###############################################################################\n#  #                           GO BUILD CACHE STAGE                             ##\n#  ###############################################################################\n#   Create a Go build cache. Please note the reason the Makefile is not used and\n#   \"go build\" is invoked directly is to avoid having to rebuild this stage as a\n#   result of the Makefile changing.\nFROM ${GOLANG_IMAGE} AS build-cache\nWORKDIR /build\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY go.mod go.sum hack/make/ldflags.txt ./\nCOPY pkg ./pkg/\nCOPY cmd ./cmd/\nARG GOOS\nARG GOARCH\nENV CGO_ENABLED=\"0\" \\\n    GOOS=\"${GOOS:-linux}\" \\\n    GOARCH=\"${GOARCH:-amd64}\"\nRUN LDFLAGS=$( cat ldflags.txt ;) \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vsphere-cloud-controller-manager \\\n && go build -ldflags \"${LDFLAGS}\" ./cmd/vcpctl\n#  ###############################################################################\n#  #                              SK8E2E STAGE                                  ##\n#  ###############################################################################\nFROM ${SK8E2E_IMAGE} AS sk8e2e\nRUN /google-cloud-sdk/bin/gcloud components update\n#  ###############################################################################\n#  #                               KIND STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE} AS kind\nRUN cd / \\\n && GO111MODULE=\"on\" go get -u sigs.k8s.io/kind@v0.3.0\n#  ###############################################################################\n#  #                               LINT STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE} AS lint\nRUN go get -u golang.org/x/lint/golint\n#  ###############################################################################\n#  #                               MAIN STAGE                                   ##\n#  ###############################################################################\nFROM ${GOLANG_IMAGE}\nLABEL maintainer=\"\\\"Andrew Kutz <akutz@vmware.com>\\\"\"\n#  ###############################################################################\n#  #                            CONFIGURE LOCALE                                ##\n#  ###############################################################################\n#   Set the locale so that the gist command is happy.\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\n#  ###############################################################################\n#  #                             PACKAGE UPDATES                                ##\n#  ###############################################################################\n#   Install the dependencies. The list is a uniion of the dependencies required\n#   by the following images:\n#     * https://github.com/vmware/simple-k8s-test-env/blob/master/e2e/Dockerfile\n#     * https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl git jq locales mercurial python3 ruby tar unzip zip -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && curl -sSL https://bootstrap.pypa.io/get-pip.py | python3 - \\\n && pip3 install setuptools wheel awscli --upgrade \\\n && gem install gist\n#  ###############################################################################\n#  #                             DOCKER-IN-DOCKER                               ##\n#  ###############################################################################\n#   Again, copied from test-infra's bootstrap image:\n#   https://github.com/kubernetes/test-infra/blob/master/images/bootstrap/Dockerfile\n#   Install Docker deps, some of these are already installed in the image but\n#   that's fine since they won't re-install and we can reuse the code below\n#   for another image someday.\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl gnupg2 software-properties-common lsb-release -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/*\n#   Add the Docker apt-repository\nRUN curl -fsSL https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;)/gpg | apt-key add - \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$( . /etc/os-release ;echo \"${ID}\" ;) $( lsb_release -cs ;) stable\"\n#   Install Docker\n#   TODO(bentheelder): the `sed` is a bit of a hack, look into alternatives.\n#   Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n#   We're already inside docker though so we can be sure these are already mounted.\n#   Trying to remount these makes for a very noisy error block in the beginning of\n#   the pod logs, so we just comment out the call to it... :shrug:\n#   TODO(benthelder): update docker version. This is pinned because of\n#   https://github.com/kubernetes/test-infra/issues/6187\nRUN apt-get update \\\n && apt-get install --no-install-recommends docker-ce=18.06.* -y \\\n && rm -rf /var/cache/apt/* /var/lib/apt/lists/* \\\n && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker\n#   Move Docker's storage location\nRUN echo 'DOCKER_OPTS=\"${DOCKER_OPTS} --data-root=/docker-graph\"' | tee --append /etc/default/docker\n#   NOTE this should be mounted and persisted as a volume ideally (!)\n#   We will make a fallback one now just in case\nRUN mkdir /docker-graph\n#   Setting this environment variable is an easy way for processes running\n#   in the container to know DinD is enabled.\nENV DOCKER_IN_DOCKER_ENABLED=\"true\"\n#  ###############################################################################\n#  #                          COPY FROM SK8E2E                                  ##\n#  ###############################################################################\nCOPY --from=sk8e2e /tf /tf/\nCOPY --from=sk8e2e /google-cloud-sdk /google-cloud-sdk/\nCOPY --from=sk8e2e /usr/local/bin/govc /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/keepalive /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/kubectl /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/sonobuoy /usr/local/bin/\nCOPY --from=sk8e2e /usr/local/bin/terraform /usr/local/bin/\n#  ###############################################################################\n#  #                       CONFIGURE GOOGLE CLOUD SDK                           ##\n#  ###############################################################################\n#   Update the PATH to include the Google Cloud SDK and disable its prompts and\n#   update the gcloud components.\nENV PATH=\"/google-cloud-sdk/bin:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\n#  ###############################################################################\n#  #                             INSTALL KIND                                   ##\n#  ###############################################################################\nCOPY --from=kind /go/bin/kind /usr/local/bin/\n#  ###############################################################################\n#  #                             INSTALL LINT                                   ##\n#  ###############################################################################\nCOPY --from=lint /go/bin/golint /usr/local/bin/\n#  ###############################################################################\n#  #                         PRIME GO MOD & BUILD CACHES                        ##\n#  ###############################################################################\nCOPY --from=mod-cache /go/pkg/mod /go/pkg/mod/\nCOPY --from=build-cache /root/.cache/go-build /root/.cache/go-build/\nRUN mkdir -p /home/prow/go/pkg \\\n && ln -s /go/pkg/mod /home/prow/go/pkg/mod\n#  ###############################################################################\n#  #                           ADD LOCAL SOURCES                                ##\n#  ###############################################################################\n#   Copy the sources into the project's traditional Gopath location in the\n#   image. It's possible to bind mount up-to-date sources over the ones in\n#   the image when the latter is run as a container.\nWORKDIR /go/src/k8s.io/cloud-provider-vsphere/\nCOPY . ./\n","originalDockerfileUglifiedHash":"9e81a933beaf5f60e766e83d54aa92b3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e15b9ae0d11037c727de99f450e87a5e942dd893.dockerfile"}