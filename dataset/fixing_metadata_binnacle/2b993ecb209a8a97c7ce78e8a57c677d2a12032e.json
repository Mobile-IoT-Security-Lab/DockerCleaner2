{"seed":1061439755,"processedDockerfileHash":"6c8ea6c294d52fa8a1e8a04d42e3ea83","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-base\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\n#   docker and image environment\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    FORCE_UNSAFE_CONFIGURE=\"1\" \\\n    SPACK_ROOT=\"/usr/local\" \\\n    SPACK_EXTRA_REPO=\"/usr/local/share/spack-repo\" \\\n    PIC_PACKAGE=\"picongpu@0.4.3+isaac backend=cuda\"\n#   install minimal spack dependencies\n#     - adds gfortran for spack's openmpi package\n#     - adds the standard editors for users: vim, nano\n#       (excluded: emacs-nox pulls up to 90MB in)\n#     - adds build tools which are NOT linked in the final app\n#     - selected cuda toolkit components\n#   note: do you need more cuda toolkit components?\n#   check:   apt-get update && apt-cache search cuda && apt-cache search nvcc\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential ca-certificates coreutils curl environment-modules gfortran git nano openssh-server pkg-config python rsync time unzip vim cuda-command-line-tools-$CUDA_PKG_VERSION cuda-core-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\n#   spack settings\nCOPY packages.yaml modules.yaml $SPACK_ROOT/etc/spack/\n#   install spack && PIConGPU dependencies\n#   TODO: fix to a specific spack SHA or tag\nRUN curl -s -L https://github.com/spack/spack/archive/develop.tar.gz | tar xzC $SPACK_ROOT --strip 1 \\\n && mkdir -p $SPACK_EXTRA_REPO \\\n && curl -s -L https://api.github.com/repos/ComputationalRadiationPhysics/spack-repo/tarball | tar xzC $SPACK_EXTRA_REPO --strip 1 \\\n && spack repo add $SPACK_EXTRA_REPO\nRUN spack install $PIC_PACKAGE \\\n && spack clean -a\n#   load spack & picongpu environment on login\nRUN /bin/echo -e \"source $SPACK_ROOT/share/spack/setup-env.sh\\n\" \"spack load $PIC_PACKAGE\\n\" 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpirun { $(which mpirun) --allow-run-as-root $@; }\\n' ' export -f mpirun\\n' 'fi\\n' 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpiexec { $(which mpiexec) --allow-run-as-root $@; }\\n' ' export -f mpiexec\\n' 'fi\\n' > /etc/profile.d/picongpu.sh\n#   force the use of a login shell\nRUN /bin/echo -e '#!/bin/bash -l\\n' 'exec \"$@\"\\n' > /etc/entrypoint.sh\nRUN chmod a+x /etc/entrypoint.sh\n#   build example for out-of-the-box usage: LWFA\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/LaserWakefield /opt/picInputs/lwfa \\\n && cd /opt/picInputs/lwfa \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   KHI (Benchmark)\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/KelvinHelmholtz /opt/picInputs/khi \\\n && cd /opt/picInputs/khi \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   Laser-Ion Acceleration\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/FoilLCT /opt/picInputs/foil \\\n && cd /opt/picInputs/foil \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   make input directories readable and files executable for all users\nRUN chmod a+x /opt/picInputs/*/bin/* \\\n && chmod a+r -R /opt/picInputs/* \\\n && find /opt/picInputs -type d -exec chmod a+rx {}\nCOPY start_lwfa.sh /usr/bin/lwfa\nCOPY start_lwfa_4.sh /usr/bin/lwfa4\nCOPY start_lwfa_8.sh /usr/bin/lwfa8\nCOPY start_lwfa_live.sh /usr/bin/lwfa_live\nCOPY start_lwfa_live_4.sh /usr/bin/lwfa_live4\nCOPY start_lwfa_live_8.sh /usr/bin/lwfa_live8\nCOPY start_khi_1.sh /usr/bin/bench1\nCOPY start_khi_4.sh /usr/bin/bench4\nCOPY start_khi_8.sh /usr/bin/bench8\nCOPY start_foil_4.sh /usr/bin/foil4\nCOPY start_foil_8.sh /usr/bin/foil8\nENTRYPOINT [\"/etc/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-base\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\n#  docker and image environment\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    FORCE_UNSAFE_CONFIGURE=\"1\" \\\n    SPACK_ROOT=\"/usr/local\" \\\n    SPACK_EXTRA_REPO=\"/usr/local/share/spack-repo\" \\\n    PIC_PACKAGE=\"picongpu@0.4.3+isaac backend=cuda\"\n#  install minimal spack dependencies\n#    - adds gfortran for spack's openmpi package\n#    - adds the standard editors for users: vim, nano\n#      (excluded: emacs-nox pulls up to 90MB in)\n#    - adds build tools which are NOT linked in the final app\n#    - selected cuda toolkit components\n#  note: do you need more cuda toolkit components?\n#  check:   apt-get update && apt-cache search cuda && apt-cache search nvcc\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential ca-certificates coreutils curl environment-modules gfortran git nano openssh-server pkg-config python rsync time unzip vim cuda-command-line-tools-$CUDA_PKG_VERSION cuda-core-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\n#  spack settings\nCOPY packages.yaml modules.yaml $SPACK_ROOT/etc/spack/\n#  install spack && PIConGPU dependencies\n#  TODO: fix to a specific spack SHA or tag\nRUN curl -s -L https://github.com/spack/spack/archive/develop.tar.gz | tar xzC $SPACK_ROOT --strip 1 \\\n && mkdir -p $SPACK_EXTRA_REPO \\\n && curl -s -L https://api.github.com/repos/ComputationalRadiationPhysics/spack-repo/tarball | tar xzC $SPACK_EXTRA_REPO --strip 1 \\\n && spack repo add $SPACK_EXTRA_REPO\nRUN spack install $PIC_PACKAGE \\\n && spack clean -a\n#  load spack & picongpu environment on login\nRUN /bin/echo -e \"source $SPACK_ROOT/share/spack/setup-env.sh\\n\" \"spack load $PIC_PACKAGE\\n\" 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpirun { $(which mpirun) --allow-run-as-root $@; }\\n' ' export -f mpirun\\n' 'fi\\n' 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpiexec { $(which mpiexec) --allow-run-as-root $@; }\\n' ' export -f mpiexec\\n' 'fi\\n' > /etc/profile.d/picongpu.sh\n#  force the use of a login shell\nRUN /bin/echo -e '#!/bin/bash -l\\n' 'exec \"$@\"\\n' > /etc/entrypoint.sh\nRUN chmod a+x /etc/entrypoint.sh\n#  build example for out-of-the-box usage: LWFA\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/LaserWakefield /opt/picInputs/lwfa \\\n && cd /opt/picInputs/lwfa \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#  KHI (Benchmark)\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/KelvinHelmholtz /opt/picInputs/khi \\\n && cd /opt/picInputs/khi \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#  Laser-Ion Acceleration\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/FoilLCT /opt/picInputs/foil \\\n && cd /opt/picInputs/foil \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#  make input directories readable and files executable for all users\nRUN chmod a+x /opt/picInputs/*/bin/* \\\n && chmod a+r -R /opt/picInputs/* \\\n && find /opt/picInputs -type d -exec chmod a+rx {} ;\nCOPY start_lwfa.sh /usr/bin/lwfa\nCOPY start_lwfa_4.sh /usr/bin/lwfa4\nCOPY start_lwfa_8.sh /usr/bin/lwfa8\nCOPY start_lwfa_live.sh /usr/bin/lwfa_live\nCOPY start_lwfa_live_4.sh /usr/bin/lwfa_live4\nCOPY start_lwfa_live_8.sh /usr/bin/lwfa_live8\nCOPY start_khi_1.sh /usr/bin/bench1\nCOPY start_khi_4.sh /usr/bin/bench4\nCOPY start_khi_8.sh /usr/bin/bench8\nCOPY start_foil_4.sh /usr/bin/foil4\nCOPY start_foil_8.sh /usr/bin/foil8\nENTRYPOINT [\"/etc/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"60d4f28d0b31a0310de9dba63f44490b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-base\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\n#   docker and image environment\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    FORCE_UNSAFE_CONFIGURE=\"1\" \\\n    SPACK_ROOT=\"/usr/local\" \\\n    SPACK_EXTRA_REPO=\"/usr/local/share/spack-repo\" \\\n    PIC_PACKAGE=\"picongpu@0.4.3+isaac backend=cuda\"\n#   install minimal spack dependencies\n#     - adds gfortran for spack's openmpi package\n#     - adds the standard editors for users: vim, nano\n#       (excluded: emacs-nox pulls up to 90MB in)\n#     - adds build tools which are NOT linked in the final app\n#     - selected cuda toolkit components\n#   note: do you need more cuda toolkit components?\n#   check:   apt-get update && apt-cache search cuda && apt-cache search nvcc\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential ca-certificates coreutils curl environment-modules gfortran git nano openssh-server pkg-config python rsync time unzip vim cuda-command-line-tools-$CUDA_PKG_VERSION cuda-core-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-misc-headers-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\n#   spack settings\nCOPY packages.yaml modules.yaml $SPACK_ROOT/etc/spack/\n#   install spack && PIConGPU dependencies\n#   TODO: fix to a specific spack SHA or tag\nRUN curl -s -L https://github.com/spack/spack/archive/develop.tar.gz | tar xzC $SPACK_ROOT --strip 1 \\\n && mkdir -p $SPACK_EXTRA_REPO \\\n && curl -s -L https://api.github.com/repos/ComputationalRadiationPhysics/spack-repo/tarball | tar xzC $SPACK_EXTRA_REPO --strip 1 \\\n && spack repo add $SPACK_EXTRA_REPO\nRUN spack install $PIC_PACKAGE \\\n && spack clean -a\n#   load spack & picongpu environment on login\nRUN /bin/echo -e \"source $SPACK_ROOT/share/spack/setup-env.sh\\n\" \"spack load $PIC_PACKAGE\\n\" 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpirun { $(which mpirun) --allow-run-as-root $@; }\\n' ' export -f mpirun\\n' 'fi\\n' 'if [ $(id -u) -eq 0 ]; then\\n' ' function mpiexec { $(which mpiexec) --allow-run-as-root $@; }\\n' ' export -f mpiexec\\n' 'fi\\n' > /etc/profile.d/picongpu.sh\n#   force the use of a login shell\nRUN /bin/echo -e '#!/bin/bash -l\\n' 'exec \"$@\"\\n' > /etc/entrypoint.sh\nRUN chmod a+x /etc/entrypoint.sh\n#   build example for out-of-the-box usage: LWFA\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/LaserWakefield /opt/picInputs/lwfa \\\n && cd /opt/picInputs/lwfa \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   KHI (Benchmark)\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/KelvinHelmholtz /opt/picInputs/khi \\\n && cd /opt/picInputs/khi \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   Laser-Ion Acceleration\nRUN /bin/bash -l -c ' pic-create $PICSRC/share/picongpu/examples/FoilLCT /opt/picInputs/foil \\\n && cd /opt/picInputs/foil \\\n && pic-build -b \"cuda:30;35;37;50;60;70\" -c'-DCUDAMEMTEST_ENABLE=OFF' \\\n && rm -rf .build'\n#   make input directories readable and files executable for all users\nRUN chmod a+x /opt/picInputs/*/bin/* \\\n && chmod a+r -R /opt/picInputs/* \\\n && find /opt/picInputs -type d -exec chmod a+rx {}\nCOPY start_lwfa.sh /usr/bin/lwfa\nCOPY start_lwfa_4.sh /usr/bin/lwfa4\nCOPY start_lwfa_8.sh /usr/bin/lwfa8\nCOPY start_lwfa_live.sh /usr/bin/lwfa_live\nCOPY start_lwfa_live_4.sh /usr/bin/lwfa_live4\nCOPY start_lwfa_live_8.sh /usr/bin/lwfa_live8\nCOPY start_khi_1.sh /usr/bin/bench1\nCOPY start_khi_4.sh /usr/bin/bench4\nCOPY start_khi_8.sh /usr/bin/bench8\nCOPY start_foil_4.sh /usr/bin/foil4\nCOPY start_foil_8.sh /usr/bin/foil8\nENTRYPOINT [\"/etc/entrypoint.sh\"]\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"ec4e953c87a74d0b4fd423949f1a0498","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2b993ecb209a8a97c7ce78e8a57c677d2a12032e.dockerfile"}