{"seed":2736160900,"processedDockerfileHash":"d717fd9ef1527e9d0d52a714b58f143d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM phusion/baseimage:0.9.19\n#  ARG STEEMD_BLOCKCHAIN=https://example.com/steemd-blockchain.tbz2\nARG STEEM_STATIC_BUILD=ON\nENV STEEM_STATIC_BUILD=\"${STEEM_STATIC_BUILD}\"\nARG BUILD_STEP\nENV BUILD_STEP=\"${BUILD_STEP}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen gdb git libboost-all-dev libyajl-dev libreadline-dev libssl-dev libtool liblz4-tool ncurses-dev pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget virtualenv gdb libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nCOPY . /usr/local/src/steem\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-testnet -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DENABLE_SMT_SUPPORT=ON -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && make install \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && make -j$( nproc ;) chain_test plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --gcov-exclude=\".*vendor*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/steem \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-default -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=OFF -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/steemd-default/bin/steemd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/steemdversion \\\n && cat /etc/steemdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/steem ; fi\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/steemd steemd\nRUN mkdir /var/cache/steemd \\\n && chown steemd:steemd -R /var/cache/steemd\n#   add blockchain cache to image\n#  ADD $STEEMD_BLOCKCHAIN /var/cache/steemd/blocks.tbz2\nENV HOME=\"/var/lib/steemd\"\nRUN chown steemd:steemd -R /var/lib/steemd\nVOLUME [\"/var/lib/steemd\"]\n#   rpc service:\nEXPOSE 8090/tcp\n#   p2p service:\nEXPOSE 2001/tcp\n#   add seednodes from documentation to image\nCOPY doc/seednodes.txt /etc/steemd/seednodes.txt\n#   the following adds lots of logging info to stdout\nCOPY contrib/config-for-docker.ini /etc/steemd/config.ini\nCOPY contrib/fullnode.config.ini /etc/steemd/fullnode.config.ini\nCOPY contrib/fullnode.opswhitelist.config.ini /etc/steemd/fullnode.opswhitelist.config.ini\nCOPY contrib/config-for-broadcaster.ini /etc/steemd/config-for-broadcaster.ini\nCOPY contrib/config-for-ahnode.ini /etc/steemd/config-for-ahnode.ini\n#   add normal startup script that starts via sv\nCOPY contrib/steemd.run /usr/local/bin/steem-sv-run.sh\nRUN chmod +x /usr/local/bin/steem-sv-run.sh\n#   add nginx templates\nCOPY contrib/steemd.nginx.conf /etc/nginx/steemd.nginx.conf\nCOPY contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#   add PaaS startup script and service script\nCOPY contrib/startpaassteemd.sh /usr/local/bin/startpaassteemd.sh\nCOPY contrib/pulltestnetscripts.sh /usr/local/bin/pulltestnetscripts.sh\nCOPY contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nCOPY contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nCOPY contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaassteemd.sh\nRUN chmod +x /usr/local/bin/pulltestnetscripts.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#   new entrypoint for all instances\n#   this enables exitting of the container when the writer node dies\n#   for PaaS mode (elasticbeanstalk, etc)\n#   AWS EB Docker requires a non-daemonized entrypoint\nCOPY contrib/steemdentrypoint.sh /usr/local/bin/steemdentrypoint.sh\nRUN chmod +x /usr/local/bin/steemdentrypoint.sh\nCMD /usr/local/bin/steemdentrypoint.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM phusion/baseimage:0.9.19\n# ARG STEEMD_BLOCKCHAIN=https://example.com/steemd-blockchain.tbz2\nARG STEEM_STATIC_BUILD=ON\nENV STEEM_STATIC_BUILD=\"${STEEM_STATIC_BUILD}\"\nARG BUILD_STEP\nENV BUILD_STEP=\"${BUILD_STEP}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen gdb git libboost-all-dev libyajl-dev libreadline-dev libssl-dev libtool liblz4-tool ncurses-dev pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget virtualenv gdb libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nADD . /usr/local/src/steem\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-testnet -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DENABLE_SMT_SUPPORT=ON -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && make install \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && make -j$( nproc ;) chain_test plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --gcov-exclude=\".*vendor*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/steem \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-default -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=OFF -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/steemd-default/bin/steemd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/steemdversion \\\n && cat /etc/steemdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/steem ; fi\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/steemd steemd\nRUN mkdir /var/cache/steemd \\\n && chown steemd:steemd -R /var/cache/steemd\n#  add blockchain cache to image\n# ADD $STEEMD_BLOCKCHAIN /var/cache/steemd/blocks.tbz2\nENV HOME=\"/var/lib/steemd\"\nRUN chown steemd:steemd -R /var/lib/steemd\nVOLUME [\"/var/lib/steemd\"]\n#  rpc service:\nEXPOSE 8090/tcp\n#  p2p service:\nEXPOSE 2001/tcp\n#  add seednodes from documentation to image\nADD doc/seednodes.txt /etc/steemd/seednodes.txt\n#  the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/steemd/config.ini\nADD contrib/fullnode.config.ini /etc/steemd/fullnode.config.ini\nADD contrib/fullnode.opswhitelist.config.ini /etc/steemd/fullnode.opswhitelist.config.ini\nADD contrib/config-for-broadcaster.ini /etc/steemd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/steemd/config-for-ahnode.ini\n#  add normal startup script that starts via sv\nADD contrib/steemd.run /usr/local/bin/steem-sv-run.sh\nRUN chmod +x /usr/local/bin/steem-sv-run.sh\n#  add nginx templates\nADD contrib/steemd.nginx.conf /etc/nginx/steemd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#  add PaaS startup script and service script\nADD contrib/startpaassteemd.sh /usr/local/bin/startpaassteemd.sh\nADD contrib/pulltestnetscripts.sh /usr/local/bin/pulltestnetscripts.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaassteemd.sh\nRUN chmod +x /usr/local/bin/pulltestnetscripts.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#  new entrypoint for all instances\n#  this enables exitting of the container when the writer node dies\n#  for PaaS mode (elasticbeanstalk, etc)\n#  AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/steemdentrypoint.sh /usr/local/bin/steemdentrypoint.sh\nRUN chmod +x /usr/local/bin/steemdentrypoint.sh\nCMD /usr/local/bin/steemdentrypoint.sh\n","injectedSmells":[],"originalDockerfileHash":"7161c6d0981ce2c04c78826aa3168084","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM phusion/baseimage:0.9.19\n#  ARG STEEMD_BLOCKCHAIN=https://example.com/steemd-blockchain.tbz2\nARG STEEM_STATIC_BUILD=ON\nENV STEEM_STATIC_BUILD=\"${STEEM_STATIC_BUILD}\"\nARG BUILD_STEP\nENV BUILD_STEP=\"${BUILD_STEP}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen gdb git libboost-all-dev libyajl-dev libreadline-dev libssl-dev libtool liblz4-tool ncurses-dev pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget virtualenv gdb libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nADD . /usr/local/src/steem\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-testnet -DCMAKE_BUILD_TYPE=Release -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DENABLE_SMT_SUPPORT=ON -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) chain_test test_fixed_string plugin_test \\\n && make install \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/steem \\\n && doxygen \\\n && PYTHONPATH=programs/build_helpers python3 -m steem_build_helpers.check_reflect \\\n && programs/build_helpers/get_config_check.sh \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"1\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_STEEM_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && make -j$( nproc ;) chain_test plugin_test \\\n && ./tests/chain_test \\\n && ./tests/plugin_test \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --gcov-exclude=\".*vendor*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/steem \\\n && rm -rf /usr/local/src/steem/build ; fi\nRUN if [ \"$BUILD_STEP\" = \"2\" ] || [ ! \"$BUILD_STEP\" ] ; then cd /usr/local/src/steem \\\n && git submodule update --init --recursive \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-default -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=OFF -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/steemd-default/bin/steemd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/steemdversion \\\n && cat /etc/steemdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/steemd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_STEEM_TESTNET=OFF -DSTEEM_STATIC_BUILD=${STEEM_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/steem ; fi\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/steemd steemd\nRUN mkdir /var/cache/steemd \\\n && chown steemd:steemd -R /var/cache/steemd\n#   add blockchain cache to image\n#  ADD $STEEMD_BLOCKCHAIN /var/cache/steemd/blocks.tbz2\nENV HOME=\"/var/lib/steemd\"\nRUN chown steemd:steemd -R /var/lib/steemd\nVOLUME [\"/var/lib/steemd\"]\n#   rpc service:\nEXPOSE 8090/tcp\n#   p2p service:\nEXPOSE 2001/tcp\n#   add seednodes from documentation to image\nADD doc/seednodes.txt /etc/steemd/seednodes.txt\n#   the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/steemd/config.ini\nADD contrib/fullnode.config.ini /etc/steemd/fullnode.config.ini\nADD contrib/fullnode.opswhitelist.config.ini /etc/steemd/fullnode.opswhitelist.config.ini\nADD contrib/config-for-broadcaster.ini /etc/steemd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/steemd/config-for-ahnode.ini\n#   add normal startup script that starts via sv\nADD contrib/steemd.run /usr/local/bin/steem-sv-run.sh\nRUN chmod +x /usr/local/bin/steem-sv-run.sh\n#   add nginx templates\nADD contrib/steemd.nginx.conf /etc/nginx/steemd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#   add PaaS startup script and service script\nADD contrib/startpaassteemd.sh /usr/local/bin/startpaassteemd.sh\nADD contrib/pulltestnetscripts.sh /usr/local/bin/pulltestnetscripts.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaassteemd.sh\nRUN chmod +x /usr/local/bin/pulltestnetscripts.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#   new entrypoint for all instances\n#   this enables exitting of the container when the writer node dies\n#   for PaaS mode (elasticbeanstalk, etc)\n#   AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/steemdentrypoint.sh /usr/local/bin/steemdentrypoint.sh\nRUN chmod +x /usr/local/bin/steemdentrypoint.sh\nCMD /usr/local/bin/steemdentrypoint.sh\n","originalDockerfileUglifiedHash":"587c5ad6f9e721f1c8bb8a2ebd7f5e23","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7793be2bf056b04e1277c62fe37898ab07b4bdec.dockerfile"}