{"seed":1844007189,"processedDockerfileHash":"dbfc131bb09d6a0047f056f2652257fb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   An image with node v10.14.1 and git for use by other node based tool images as a base stage.\n#   Also sets the working directory to /project.\nFROM node:10.14.1-alpine@sha256:35fcf0a48f57bef4bafa0f844f62edb659d036364a1d086995efe5b43ca0c4af AS node\nRUN apk add git=2.38.4-r1 --update --no-cache\nWORKDIR /project\nENTRYPOINT [\"node\"]\n#   An image that runs commitlint in the /project working directory.\n#   https://github.com/marionebl/commitlint\n#\n#   DOCKER_BUILDKIT=1 docker build --target commitlint --tag ockam/tool/commitlint:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/commitlint:latest --from=HEAD~1\nFROM node AS commitlint\nRUN npm install @commitlint/config-conventional@7.1.2 @commitlint/cli@7.2.1 --global\nENTRYPOINT [\"commitlint\"]\nCMD [\"--from=HEAD~1\"]\n#   An image that validates the contents of the /project working directory against\n#   rules in .editorconfig files present in that directory tree.\n#   https://editorconfig.org\n#   https://github.com/jedmao/eclint\n#\n#   DOCKER_BUILDKIT=1 docker build --target eclint --tag ockam/tool/eclint:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/eclint:latest\nFROM node AS eclint\nRUN npm install eclint@2.8.1 --global\nENTRYPOINT [\"eclint\"]\nCMD [\"check\"]\n#   An image that invokes shellcheck on any file path that is passed as an argument.\n#   This path must be relative to the mounted /project directory.\n#   https://www.shellcheck.net\n#\n#   DOCKER_BUILDKIT=1 docker build --target shellcheck --tag ockam/tool/shellcheck:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/shellcheck:latest build\nFROM koalaman/shellcheck:v0.5.0@sha256:b8a2b097586f88578d45ac9c052d7c396fe651a128e44ab99b3742851033b9f5 AS shellcheck\nWORKDIR /project\nENTRYPOINT [\"/bin/shellcheck\"]\nCMD [\"-a\", \"build\"]\n#   An image with Golang v1.11.2 and git.\n#   It sets /project as the working directory and runs Go as its entrypoint\n#\n#   DOCKER_BUILDKIT=1 docker build --target go --tag ockam/tool/go:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/go:latest\nFROM golang:1.11.2-alpine3.8@sha256:692eff58ac23cafc7cb099793feb00406146d187cd3ba0226809317952a9cf37 AS go-alpine\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN apk add gcc=12.2.1_git20220924-r4 g++=12.2.1_git20220924-r4 libtool=2.4.7-r1 git=2.38.4-r1 --update --no-cache\nWORKDIR /project\nENTRYPOINT [\"go\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS go\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends gcc=4:12.2.0-3ubuntu1 g++=4:12.2.0-3ubuntu1 libtool=2.4.7-5 git=1:2.39.2-1ubuntu1 -y )\nWORKDIR /project\nENTRYPOINT [\"go\"]\n#   An image that invokes gometalinter in the /project directory\n#\n#   DOCKER_BUILDKIT=1 docker build --target gometalinter --tag ockam/tool/gometalinter:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/gometalinter:latest\n#\n#   gometalinter doesn't support go modules yet, the /entrypoint script below tries to make project\n#   as if it was following the pre-1.11 GOPATH setup.\nFROM go-alpine AS gometalinter\nRUN wget https://raw.githubusercontent.com/alecthomas/gometalinter/v2.0.11/scripts/install.sh \\\n && chmod u+x install.sh \\\n && ./install.sh -b /usr/local/bin v2.0.11 \\\n && mkdir -p /go/src/github.com/ockam-network/ockam \\\n && echo \"#!/bin/sh\" > /entrypoint \\\n && echo \"cp -r /project/* /go/src/github.com/ockam-network/ockam/\" >> /entrypoint \\\n && echo \"rm -rf /go/src/github.com/ockam-network/ockam/vendor\" >> /entrypoint \\\n && echo \"cp -r /project/vendor/* /go/src/\" >> /entrypoint \\\n && echo \"exec gometalinter \\\"$@\\\"\" >> /entrypoint \\\n && chmod +x /entrypoint\nWORKDIR /go/src/github.com/ockam-network/ockam\nENV GO111MODULE=\"off\"\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"--vendor\", \"--enable-all\", \"--line-length=120\", \"./...\"]\n#   An image with goreleaser v0.95.2\n#\n#   DOCKER_BUILDKIT=1 docker build --target goreleaser --tag ockam/tool/goreleaser:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/goreleaser:latest\nFROM go-alpine AS goreleaser-alpine\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS goreleaser\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\n#   An image with go-with-softhsm v2.5.0\n#\n#   DOCKER_BUILDKIT=1 docker build --target softhsm --tag ockam/tool/go-with-softhsm:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/go-with-softhsm:latest\nFROM go-alpine AS go-with-softhsm\nRUN apk add alpine-sdk=1.0-r1 autoconf=2.71-r1 automake=1.16.5-r1 openssl-dev=3.0.8-r3 --update --no-cache\nRUN wget https://github.com/opendnssec/SoftHSMv2/archive/2.5.0.tar.gz \\\n && echo \"075476d61405948dbaf6fd90cfdd9cd57c247a0dfa5e7e8f973c17f8be978485 2.5.0.tar.gz\" | sha256sum -c - \\\n && tar xvf 2.5.0.tar.gz \\\n && cd SoftHSMv2-2.5.0 \\\n && sh autogen.sh \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"#  An image with node v10.14.1 and git for use by other node based tool images as a base stage.\n#  Also sets the working directory to /project.\nFROM node:10.14.1-alpine@sha256:35fcf0a48f57bef4bafa0f844f62edb659d036364a1d086995efe5b43ca0c4af AS node\nRUN apk --update add --no-cache git\nWORKDIR /project\nENTRYPOINT [\"node\"]\n#  An image that runs commitlint in the /project working directory.\n#  https://github.com/marionebl/commitlint\n#\n#  DOCKER_BUILDKIT=1 docker build --target commitlint --tag ockam/tool/commitlint:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/commitlint:latest --from=HEAD~1\nFROM node AS commitlint\nRUN npm install @commitlint/config-conventional@7.1.2 @commitlint/cli@7.2.1 --global\nENTRYPOINT [\"commitlint\"]\nCMD [\"--from=HEAD~1\"]\n#  An image that validates the contents of the /project working directory against\n#  rules in .editorconfig files present in that directory tree.\n#  https://editorconfig.org\n#  https://github.com/jedmao/eclint\n#\n#  DOCKER_BUILDKIT=1 docker build --target eclint --tag ockam/tool/eclint:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/eclint:latest\nFROM node AS eclint\nRUN npm install eclint@2.8.1 --global\nENTRYPOINT [\"eclint\"]\nCMD [\"check\"]\n#  An image that invokes shellcheck on any file path that is passed as an argument.\n#  This path must be relative to the mounted /project directory.\n#  https://www.shellcheck.net\n#\n#  DOCKER_BUILDKIT=1 docker build --target shellcheck --tag ockam/tool/shellcheck:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/shellcheck:latest build\nFROM koalaman/shellcheck:v0.5.0@sha256:b8a2b097586f88578d45ac9c052d7c396fe651a128e44ab99b3742851033b9f5 AS shellcheck\nWORKDIR /project\nENTRYPOINT [\"/bin/shellcheck\"]\nCMD [\"-a\", \"build\"]\n#  An image with Golang v1.11.2 and git.\n#  It sets /project as the working directory and runs Go as its entrypoint\n#\n#  DOCKER_BUILDKIT=1 docker build --target go --tag ockam/tool/go:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/go:latest\nFROM golang:1.11.2-alpine3.8@sha256:692eff58ac23cafc7cb099793feb00406146d187cd3ba0226809317952a9cf37 AS go-alpine\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN apk --update add --no-cache gcc g++ libtool git\nWORKDIR /project\nENTRYPOINT [\"go\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS go\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN apt-get update\nRUN apt-get install gcc g++ libtool git -y\nWORKDIR /project\nENTRYPOINT [\"go\"]\n#  An image that invokes gometalinter in the /project directory\n#\n#  DOCKER_BUILDKIT=1 docker build --target gometalinter --tag ockam/tool/gometalinter:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/gometalinter:latest\n#\n#  gometalinter doesn't support go modules yet, the /entrypoint script below tries to make project\n#  as if it was following the pre-1.11 GOPATH setup.\nFROM go-alpine AS gometalinter\nRUN wget https://raw.githubusercontent.com/alecthomas/gometalinter/v2.0.11/scripts/install.sh \\\n && chmod u+x install.sh \\\n && ./install.sh -b /usr/local/bin v2.0.11 \\\n && mkdir -p /go/src/github.com/ockam-network/ockam \\\n && echo \"#!/bin/sh\" > /entrypoint \\\n && echo \"cp -r /project/* /go/src/github.com/ockam-network/ockam/\" >> /entrypoint \\\n && echo \"rm -rf /go/src/github.com/ockam-network/ockam/vendor\" >> /entrypoint \\\n && echo \"cp -r /project/vendor/* /go/src/\" >> /entrypoint \\\n && echo \"exec gometalinter \\\"$@\\\"\" >> /entrypoint \\\n && chmod +x /entrypoint\nWORKDIR /go/src/github.com/ockam-network/ockam\nENV GO111MODULE=\"off\"\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"--vendor\", \"--enable-all\", \"--line-length=120\", \"./...\"]\n#  An image with goreleaser v0.95.2\n#\n#  DOCKER_BUILDKIT=1 docker build --target goreleaser --tag ockam/tool/goreleaser:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/goreleaser:latest\nFROM go-alpine AS goreleaser-alpine\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS goreleaser\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\n#  An image with go-with-softhsm v2.5.0\n#\n#  DOCKER_BUILDKIT=1 docker build --target softhsm --tag ockam/tool/go-with-softhsm:latest .\n#  docker run --rm --volume \"$(pwd):/project\" ockam/tool/go-with-softhsm:latest\nFROM go-alpine AS go-with-softhsm\nRUN apk --update add --no-cache alpine-sdk autoconf automake openssl-dev\nRUN wget https://github.com/opendnssec/SoftHSMv2/archive/2.5.0.tar.gz \\\n && echo \"075476d61405948dbaf6fd90cfdd9cd57c247a0dfa5e7e8f973c17f8be978485 2.5.0.tar.gz\" | sha256sum -c - \\\n && tar xvf 2.5.0.tar.gz \\\n && cd SoftHSMv2-2.5.0 \\\n && sh autogen.sh \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install\n","injectedSmells":[],"originalDockerfileHash":"77c1e8b3564b08013cfe57986de95115","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   An image with node v10.14.1 and git for use by other node based tool images as a base stage.\n#   Also sets the working directory to /project.\nFROM node:10.14.1-alpine@sha256:35fcf0a48f57bef4bafa0f844f62edb659d036364a1d086995efe5b43ca0c4af AS node\nRUN apk --update add --no-cache git\nWORKDIR /project\nENTRYPOINT [\"node\"]\n#   An image that runs commitlint in the /project working directory.\n#   https://github.com/marionebl/commitlint\n#\n#   DOCKER_BUILDKIT=1 docker build --target commitlint --tag ockam/tool/commitlint:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/commitlint:latest --from=HEAD~1\nFROM node AS commitlint\nRUN npm install @commitlint/config-conventional@7.1.2 @commitlint/cli@7.2.1 --global\nENTRYPOINT [\"commitlint\"]\nCMD [\"--from=HEAD~1\"]\n#   An image that validates the contents of the /project working directory against\n#   rules in .editorconfig files present in that directory tree.\n#   https://editorconfig.org\n#   https://github.com/jedmao/eclint\n#\n#   DOCKER_BUILDKIT=1 docker build --target eclint --tag ockam/tool/eclint:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/eclint:latest\nFROM node AS eclint\nRUN npm install eclint@2.8.1 --global\nENTRYPOINT [\"eclint\"]\nCMD [\"check\"]\n#   An image that invokes shellcheck on any file path that is passed as an argument.\n#   This path must be relative to the mounted /project directory.\n#   https://www.shellcheck.net\n#\n#   DOCKER_BUILDKIT=1 docker build --target shellcheck --tag ockam/tool/shellcheck:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/shellcheck:latest build\nFROM koalaman/shellcheck:v0.5.0@sha256:b8a2b097586f88578d45ac9c052d7c396fe651a128e44ab99b3742851033b9f5 AS shellcheck\nWORKDIR /project\nENTRYPOINT [\"/bin/shellcheck\"]\nCMD [\"-a\", \"build\"]\n#   An image with Golang v1.11.2 and git.\n#   It sets /project as the working directory and runs Go as its entrypoint\n#\n#   DOCKER_BUILDKIT=1 docker build --target go --tag ockam/tool/go:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/go:latest\nFROM golang:1.11.2-alpine3.8@sha256:692eff58ac23cafc7cb099793feb00406146d187cd3ba0226809317952a9cf37 AS go-alpine\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN apk --update add --no-cache gcc g++ libtool git\nWORKDIR /project\nENTRYPOINT [\"go\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS go\nENV GOOS=\"linux\" \\\n    GOARCH=\"amd64\" \\\n    CGO_ENABLED=\"1\"\nRUN apt-get update\nRUN apt-get install gcc g++ libtool git -y\nWORKDIR /project\nENTRYPOINT [\"go\"]\n#   An image that invokes gometalinter in the /project directory\n#\n#   DOCKER_BUILDKIT=1 docker build --target gometalinter --tag ockam/tool/gometalinter:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/gometalinter:latest\n#\n#   gometalinter doesn't support go modules yet, the /entrypoint script below tries to make project\n#   as if it was following the pre-1.11 GOPATH setup.\nFROM go-alpine AS gometalinter\nRUN wget https://raw.githubusercontent.com/alecthomas/gometalinter/v2.0.11/scripts/install.sh \\\n && chmod u+x install.sh \\\n && ./install.sh -b /usr/local/bin v2.0.11 \\\n && mkdir -p /go/src/github.com/ockam-network/ockam \\\n && echo \"#!/bin/sh\" > /entrypoint \\\n && echo \"cp -r /project/* /go/src/github.com/ockam-network/ockam/\" >> /entrypoint \\\n && echo \"rm -rf /go/src/github.com/ockam-network/ockam/vendor\" >> /entrypoint \\\n && echo \"cp -r /project/vendor/* /go/src/\" >> /entrypoint \\\n && echo \"exec gometalinter \\\"$@\\\"\" >> /entrypoint \\\n && chmod +x /entrypoint\nWORKDIR /go/src/github.com/ockam-network/ockam\nENV GO111MODULE=\"off\"\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"--vendor\", \"--enable-all\", \"--line-length=120\", \"./...\"]\n#   An image with goreleaser v0.95.2\n#\n#   DOCKER_BUILDKIT=1 docker build --target goreleaser --tag ockam/tool/goreleaser:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/goreleaser:latest\nFROM go-alpine AS goreleaser-alpine\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\nFROM golang:1.11.2-stretch@sha256:498f71698c1bcbf50d6e5f08ce60c30ccab3ab5b6775c4b5395b1ae1a367bdab AS goreleaser\nRUN wget https://github.com/goreleaser/goreleaser/releases/download/v0.95.2/goreleaser_Linux_x86_64.tar.gz \\\n && echo \"a04f626fb853de48dde78d92ee08cdc188593a9ea9919fa56953703b8a8423bf goreleaser_Linux_x86_64.tar.gz\" | sha256sum -c - \\\n && tar xvf goreleaser_Linux_x86_64.tar.gz \\\n && chmod u+x goreleaser \\\n && cp goreleaser /usr/local/bin/\nENTRYPOINT [\"goreleaser\"]\n#   An image with go-with-softhsm v2.5.0\n#\n#   DOCKER_BUILDKIT=1 docker build --target softhsm --tag ockam/tool/go-with-softhsm:latest .\n#   docker run --rm --volume \"$(pwd):/project\" ockam/tool/go-with-softhsm:latest\nFROM go-alpine AS go-with-softhsm\nRUN apk --update add --no-cache alpine-sdk autoconf automake openssl-dev\nRUN wget https://github.com/opendnssec/SoftHSMv2/archive/2.5.0.tar.gz \\\n && echo \"075476d61405948dbaf6fd90cfdd9cd57c247a0dfa5e7e8f973c17f8be978485 2.5.0.tar.gz\" | sha256sum -c - \\\n && tar xvf 2.5.0.tar.gz \\\n && cd SoftHSMv2-2.5.0 \\\n && sh autogen.sh \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install\n","originalDockerfileUglifiedHash":"3439992fe0fc8d9e4e3fbda29abd68a4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c19575e1806939c7cfcb1ebdbeac9f8cd14ab32a.dockerfile"}