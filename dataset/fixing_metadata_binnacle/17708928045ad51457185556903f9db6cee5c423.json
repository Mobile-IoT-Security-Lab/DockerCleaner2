{"seed":883621583,"processedDockerfileHash":"5b907687cb0a660f20e8e993fb38caa7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ########################################################################################\n#  #  Stage 1: build DALI dependencies\n#  #     DALI is based on \"manylinux3\", which is our modification of manylinux1\n#  #     (CentOS 5 derivative). For building this docker image, manylinux3 has to\n#  #     be manually built. It is also possible to use other distros, but we don't\n#  #     officially support them.\n#  #     For instructions, how to build manylinux3 with our patch see:\n#  #     //DALI/docker/build.sh#L16\n#  ########################################################################################\nARG FROM_IMAGE_NAME=gitlab-master.nvidia.com:5005/dl/dali/manylinux:manylinux3_x86_64\nARG USE_CUDA_VERSION=9\nFROM ${FROM_IMAGE_NAME} AS base\n#   CUDA\nFROM base AS cuda-9\nRUN CUDA_VERSION=9.0 \\\n && CUDA_BUILD=9.0.176_384.81 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux-run \\\n && chmod +x cuda_${CUDA_BUILD}_linux-run \\\n && ./cuda_${CUDA_BUILD}_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux-run ; NVJPEG_VERSION=719-25900922 \\\n && NVJPEG_BUILD=9.0.${NVJPEG_VERSION} \\\n && curl -L https://developer.download.nvidia.com/compute/redist/libnvjpeg/cuda-linux64-nvjpeg-${NVJPEG_BUILD}.tar.gz | tar -xzf - \\\n && cd /cuda-linux64-nvjpeg/ \\\n && mv lib64/libnvjpeg*.a* /usr/local/cuda/lib64/ \\\n && mv include/nvjpeg.h /usr/local/cuda/include/ \\\n && rm -rf /cuda-linux64-nvjpeg\nFROM base AS cuda-10\nRUN CUDA_VERSION=10.0 \\\n && CUDA_BUILD=10.0.130_410.48 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux \\\n && chmod +x cuda_${CUDA_BUILD}_linux \\\n && ./cuda_${CUDA_BUILD}_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux ; CUDA_VERSION=10.0 \\\n && CUDA_PATCH=1 \\\n && CUDA_BUILD=10.0.130.1 \\\n && curl -LO https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/patches/${CUDA_PATCH}/cuda_${CUDA_BUILD}_linux.run \\\n && chmod +x cuda_${CUDA_BUILD}_linux.run \\\n && ./cuda_${CUDA_BUILD}_linux.run --silent --accept-eula --installdir=/usr/local/cuda-10.0 \\\n && rm -f cuda_${CUDA_BUILD}_linux-run\nFROM cuda-${USE_CUDA_VERSION} AS cuda\n#   Actual image\nFROM base\n#   Install yum Dependencies\nRUN yum install -y zip wget yasm doxygen graphviz\n#   Don't want the short-unicode version for Python 2.7\nRUN rm -f /opt/python/cp27-cp27m\n#   Boost\nRUN BOOST_VERSION=1.66.0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION//./_}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost\n#   CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#   protobuf v3.5.1\nRUN PROTOBUF_VERSION=3.5.1 \\\n && curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\n#   LMDB\nCOPY docker/Makefile-lmdb.patch /tmp\nRUN LMDB_VERSION=0.9.22 \\\n && git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb \\\n && cd /lmdb/libraries/liblmdb \\\n && patch -p3 < /tmp/Makefile-lmdb.patch \\\n && rm -f /tmp/Makefile-lmdb.patch \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /lmdb\n#   libjpeg-turbo\nRUN JPEG_TURBO_VERSION=2.0.2 \\\n && curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && cmake -G\"Unix Makefiles\" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#   OpenCV\nRUN OPENCV_VERSION=3.4.3 \\\n && curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\n#   Clang\nRUN CLANG_VERSION=6.0.1 \\\n && cd /usr/local \\\n && wget http://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz \\\n && tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 \\\n && rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#   FFmpeg\nRUN FFMPEG_VERSION=3.4.2 \\\n && cd /tmp \\\n && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --disable-all --disable-autodetect --disable-iconv --enable-shared --enable-avformat --enable-avcodec --enable-avfilter --enable-protocol=file --enable-demuxer=mov,matroska --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" \\\n && make install \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION\n#   CUDA\nCOPY --from=cuda /usr/local/cuda /usr/local/cuda\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ########################################################################################\n# #  Stage 1: build DALI dependencies\n# #     DALI is based on \"manylinux3\", which is our modification of manylinux1\n# #     (CentOS 5 derivative). For building this docker image, manylinux3 has to\n# #     be manually built. It is also possible to use other distros, but we don't\n# #     officially support them.\n# #     For instructions, how to build manylinux3 with our patch see:\n# #     //DALI/docker/build.sh#L16\n# ########################################################################################\nARG FROM_IMAGE_NAME=gitlab-master.nvidia.com:5005/dl/dali/manylinux:manylinux3_x86_64\nARG USE_CUDA_VERSION=9\nFROM ${FROM_IMAGE_NAME} AS base\n#  CUDA\nFROM base AS cuda-9\nRUN CUDA_VERSION=9.0 \\\n && CUDA_BUILD=9.0.176_384.81 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux-run \\\n && chmod +x cuda_${CUDA_BUILD}_linux-run \\\n && ./cuda_${CUDA_BUILD}_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux-run ; NVJPEG_VERSION=719-25900922 \\\n && NVJPEG_BUILD=9.0.${NVJPEG_VERSION} \\\n && curl -L https://developer.download.nvidia.com/compute/redist/libnvjpeg/cuda-linux64-nvjpeg-${NVJPEG_BUILD}.tar.gz | tar -xzf - \\\n && cd /cuda-linux64-nvjpeg/ \\\n && mv lib64/libnvjpeg*.a* /usr/local/cuda/lib64/ \\\n && mv include/nvjpeg.h /usr/local/cuda/include/ \\\n && rm -rf /cuda-linux64-nvjpeg\nFROM base AS cuda-10\nRUN CUDA_VERSION=10.0 \\\n && CUDA_BUILD=10.0.130_410.48 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux \\\n && chmod +x cuda_${CUDA_BUILD}_linux \\\n && ./cuda_${CUDA_BUILD}_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux ; CUDA_VERSION=10.0 \\\n && CUDA_PATCH=1 \\\n && CUDA_BUILD=10.0.130.1 \\\n && curl -LO https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/patches/${CUDA_PATCH}/cuda_${CUDA_BUILD}_linux.run \\\n && chmod +x cuda_${CUDA_BUILD}_linux.run \\\n && ./cuda_${CUDA_BUILD}_linux.run --silent --accept-eula --installdir=/usr/local/cuda-10.0 \\\n && rm -f cuda_${CUDA_BUILD}_linux-run\nFROM cuda-${USE_CUDA_VERSION} AS cuda\n#  Actual image\nFROM base\n#  Install yum Dependencies\nRUN yum install -y zip wget yasm doxygen graphviz\n#  Don't want the short-unicode version for Python 2.7\nRUN rm -f /opt/python/cp27-cp27m\n#  Boost\nRUN BOOST_VERSION=1.66.0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION//./_}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost\n#  CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#  protobuf v3.5.1\nRUN PROTOBUF_VERSION=3.5.1 \\\n && curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\n#  LMDB\nCOPY docker/Makefile-lmdb.patch /tmp\nRUN LMDB_VERSION=0.9.22 \\\n && git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb \\\n && cd /lmdb/libraries/liblmdb \\\n && patch -p3 < /tmp/Makefile-lmdb.patch \\\n && rm -f /tmp/Makefile-lmdb.patch \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /lmdb\n#  libjpeg-turbo\nRUN JPEG_TURBO_VERSION=2.0.2 \\\n && curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && cmake -G\"Unix Makefiles\" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#  OpenCV\nRUN OPENCV_VERSION=3.4.3 \\\n && curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\n#  Clang\nRUN CLANG_VERSION=6.0.1 \\\n && cd /usr/local \\\n && wget http://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz \\\n && tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 \\\n && rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#  FFmpeg\nRUN FFMPEG_VERSION=3.4.2 \\\n && cd /tmp \\\n && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --disable-all --disable-autodetect --disable-iconv --enable-shared --enable-avformat --enable-avcodec --enable-avfilter --enable-protocol=file --enable-demuxer=mov,matroska --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" \\\n && make install \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION\n#  CUDA\nCOPY --from=cuda /usr/local/cuda /usr/local/cuda\n","injectedSmells":[],"originalDockerfileHash":"29f0f901691226c8ec5d4d5134aafecf","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ########################################################################################\n#  #  Stage 1: build DALI dependencies\n#  #     DALI is based on \"manylinux3\", which is our modification of manylinux1\n#  #     (CentOS 5 derivative). For building this docker image, manylinux3 has to\n#  #     be manually built. It is also possible to use other distros, but we don't\n#  #     officially support them.\n#  #     For instructions, how to build manylinux3 with our patch see:\n#  #     //DALI/docker/build.sh#L16\n#  ########################################################################################\nARG FROM_IMAGE_NAME=gitlab-master.nvidia.com:5005/dl/dali/manylinux:manylinux3_x86_64\nARG USE_CUDA_VERSION=9\nFROM ${FROM_IMAGE_NAME} AS base\n#   CUDA\nFROM base AS cuda-9\nRUN CUDA_VERSION=9.0 \\\n && CUDA_BUILD=9.0.176_384.81 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux-run \\\n && chmod +x cuda_${CUDA_BUILD}_linux-run \\\n && ./cuda_${CUDA_BUILD}_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux-run ; NVJPEG_VERSION=719-25900922 \\\n && NVJPEG_BUILD=9.0.${NVJPEG_VERSION} \\\n && curl -L https://developer.download.nvidia.com/compute/redist/libnvjpeg/cuda-linux64-nvjpeg-${NVJPEG_BUILD}.tar.gz | tar -xzf - \\\n && cd /cuda-linux64-nvjpeg/ \\\n && mv lib64/libnvjpeg*.a* /usr/local/cuda/lib64/ \\\n && mv include/nvjpeg.h /usr/local/cuda/include/ \\\n && rm -rf /cuda-linux64-nvjpeg\nFROM base AS cuda-10\nRUN CUDA_VERSION=10.0 \\\n && CUDA_BUILD=10.0.130_410.48 \\\n && curl -LO https://developer.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/local_installers/cuda_${CUDA_BUILD}_linux \\\n && chmod +x cuda_${CUDA_BUILD}_linux \\\n && ./cuda_${CUDA_BUILD}_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_${CUDA_BUILD}_linux ; CUDA_VERSION=10.0 \\\n && CUDA_PATCH=1 \\\n && CUDA_BUILD=10.0.130.1 \\\n && curl -LO https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/Prod/patches/${CUDA_PATCH}/cuda_${CUDA_BUILD}_linux.run \\\n && chmod +x cuda_${CUDA_BUILD}_linux.run \\\n && ./cuda_${CUDA_BUILD}_linux.run --silent --accept-eula --installdir=/usr/local/cuda-10.0 \\\n && rm -f cuda_${CUDA_BUILD}_linux-run\nFROM cuda-${USE_CUDA_VERSION} AS cuda\n#   Actual image\nFROM base\n#   Install yum Dependencies\nRUN yum install -y zip wget yasm doxygen graphviz\n#   Don't want the short-unicode version for Python 2.7\nRUN rm -f /opt/python/cp27-cp27m\n#   Boost\nRUN BOOST_VERSION=1.66.0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION//./_}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION//./_}/boost include/boost\n#   CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#   protobuf v3.5.1\nRUN PROTOBUF_VERSION=3.5.1 \\\n && curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\n#   LMDB\nCOPY docker/Makefile-lmdb.patch /tmp\nRUN LMDB_VERSION=0.9.22 \\\n && git clone -b LMDB_${LMDB_VERSION} --single-branch https://github.com/LMDB/lmdb \\\n && cd /lmdb/libraries/liblmdb \\\n && patch -p3 < /tmp/Makefile-lmdb.patch \\\n && rm -f /tmp/Makefile-lmdb.patch \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /lmdb\n#   libjpeg-turbo\nRUN JPEG_TURBO_VERSION=2.0.2 \\\n && curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && cmake -G\"Unix Makefiles\" -DENABLE_SHARED=TRUE -DCMAKE_INSTALL_PREFIX=/usr/local . 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#   OpenCV\nRUN OPENCV_VERSION=3.4.3 \\\n && curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=OFF -DWITH_1394=OFF -DWITH_IPP=OFF -DWITH_OPENCL=OFF -DWITH_GTK=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_DOCS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_PNG=ON -DBUILD_opencv_cudalegacy=OFF -DBUILD_opencv_stitching=OFF -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_PTHREADS_PF=OFF -DWITH_CSTRIPES=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\n#   Clang\nRUN CLANG_VERSION=6.0.1 \\\n && cd /usr/local \\\n && wget http://releases.llvm.org/${CLANG_VERSION}/clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz \\\n && tar -xJf clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz --strip 1 \\\n && rm clang+llvm-${CLANG_VERSION}-x86_64-linux-sles11.3.tar.xz\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#   FFmpeg\nRUN FFMPEG_VERSION=3.4.2 \\\n && cd /tmp \\\n && wget https://developer.download.nvidia.com/compute/redist/nvidia-dali/ffmpeg-${FFMPEG_VERSION}.tar.bz2 \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --disable-all --disable-autodetect --disable-iconv --enable-shared --enable-avformat --enable-avcodec --enable-avfilter --enable-protocol=file --enable-demuxer=mov,matroska --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" \\\n && make install \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION\n#   CUDA\nCOPY --from=cuda /usr/local/cuda /usr/local/cuda\n","originalDockerfileUglifiedHash":"a8e0d089e9c190aacf9b012d46a95fa6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/17708928045ad51457185556903f9db6cee5c423.dockerfile"}