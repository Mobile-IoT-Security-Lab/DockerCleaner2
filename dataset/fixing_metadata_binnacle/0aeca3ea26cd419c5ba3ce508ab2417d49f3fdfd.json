{"seed":2186493362,"processedDockerfileHash":"1bcf9781055ebbbfa443ea3c49a52be8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nARG PREFIX=/opt/rocm\n#   Support multiarch\nRUN dpkg --add-architecture i386\n#   Add rocm repository\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl apt-utils wget\nRUN curl https://raw.githubusercontent.com/RadeonOpenCompute/ROCm-docker/master/add-rocm.sh | bash\n#   Install dependencies required to build hcc\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated apt-utils build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake curl doxygen g++-mingw-w64 g++-mingw-w64-x86-64 g++-multilib git hsa-rocr-dev hsakmt-roct-dev lcov libelf-dev libncurses5-dev libpthread-stubs0-dev libnuma-dev libunwind-dev mingw-w64 mingw-w64-tools nsis python python-dev python-pip rocm-opencl rocm-opencl-dev software-properties-common wget wine xvfb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup ubsan environment to printstacktrace\nRUN ln -s /usr/bin/llvm-symbolizer-3.8 /usr/local/bin/llvm-symbolizer\nENV UBSAN_OPTIONS=\"print_stacktrace=1\"\n#   Install an init system\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb \\\n && rm dumb-init_*.deb\n#   Install cget\nRUN pip install https://github.com/pfultz2/cget/archive/57b3289000fcdb3b7e424c60a35ea09bc44d8538.tar.gz\n#   Add the windows toolchain\nCOPY cmake/mingw-toolchain.cmake $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\nRUN cget -p $PREFIX/x86_64-w64-mingw32 init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#   Install rclone\nRUN pip install https://github.com/pfultz2/rclone/archive/master.tar.gz\n#   Install hcc\nRUN rclone -b roc-2.1.x -c fea3e2b4625f55b40b8c51c6e445117b3f16166f https://github.com/RadeonOpenCompute/hcc.git /hcc\nRUN cget -p $PREFIX install hcc,/hcc \\\n && rm -rf /hcc\n#   This is a workaround for broken installations\nRUN ln -s $PREFIX /opt/rocm/hip\nRUN ln -s $PREFIX /opt/rocm/hcc\n#   Build using hcc\nRUN cget -p $PREFIX init --cxx $PREFIX/bin/hcc --std=c++14\n#   Install dependencies\nCOPY dev-requirements.txt /dev-requirements.txt\nCOPY requirements.txt /requirements.txt\nCOPY min-requirements.txt /min-requirements.txt\nRUN CXXFLAGS='-isystem $PREFIX/include' cget -p $PREFIX install -f /dev-requirements.txt\n#   Install doc requirements\nCOPY doc/requirements.txt /doc-requirements.txt\nRUN pip install -r /doc-requirements.txt\n#   Install windows opencl\nRUN cget -p $PREFIX/x86_64-w64-mingw32/opencl init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#   RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl KhronosGroup/OpenCL-Headers@master -X header -DINCLUDE_DIR=opencl22\n#   RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl pfultz2/OpenCL-ICD-Loader@master\n#   Install windows dependencies\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install pfultz2/rocm-recipes\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install -X header meganz/mingw-std-threads@dad05201ad4e096c5d1b2043081f412aeb8f5efb\nRUN ln -s $PREFIX/x86_64-w64-mingw32/include/mingw.thread.h $PREFIX/x86_64-w64-mingw32/include/thread\n#   RUN CXXFLAGS='-I $PREFIX/x86_64-w64-mingw32/include' AMDAPPSDKROOT=$PREFIX/x86_64-w64-mingw32/opencl cget -p $PREFIX/x86_64-w64-mingw32 install -f /requirements.txt\n#   Setup wine\nRUN mkdir -p /jenkins\nRUN chmod 777 /jenkins\nRUN WINEDEBUG=-all DISPLAY=:55.0 wineboot ; wineserver -w\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nARG PREFIX=/opt/rocm\n#  Support multiarch\nRUN dpkg --add-architecture i386\n#  Add rocm repository\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl apt-utils wget\nRUN curl https://raw.githubusercontent.com/RadeonOpenCompute/ROCm-docker/master/add-rocm.sh | bash\n#  Install dependencies required to build hcc\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated apt-utils build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake curl doxygen g++-mingw-w64 g++-mingw-w64-x86-64 g++-multilib git hsa-rocr-dev hsakmt-roct-dev lcov libelf-dev libncurses5-dev libpthread-stubs0-dev libnuma-dev libunwind-dev mingw-w64 mingw-w64-tools nsis python python-dev python-pip rocm-opencl rocm-opencl-dev software-properties-common wget wine xvfb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Setup ubsan environment to printstacktrace\nRUN ln -s /usr/bin/llvm-symbolizer-3.8 /usr/local/bin/llvm-symbolizer\nENV UBSAN_OPTIONS=\"print_stacktrace=1\"\n#  Install an init system\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb \\\n && rm dumb-init_*.deb\n#  Install cget\nRUN pip install https://github.com/pfultz2/cget/archive/57b3289000fcdb3b7e424c60a35ea09bc44d8538.tar.gz\n#  Add the windows toolchain\nADD cmake/mingw-toolchain.cmake $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\nRUN cget -p $PREFIX/x86_64-w64-mingw32 init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#  Install rclone\nRUN pip install https://github.com/pfultz2/rclone/archive/master.tar.gz\n#  Install hcc\nRUN rclone -b roc-2.1.x -c fea3e2b4625f55b40b8c51c6e445117b3f16166f https://github.com/RadeonOpenCompute/hcc.git /hcc\nRUN cget -p $PREFIX install hcc,/hcc \\\n && rm -rf /hcc\n#  This is a workaround for broken installations\nRUN ln -s $PREFIX /opt/rocm/hip\nRUN ln -s $PREFIX /opt/rocm/hcc\n#  Build using hcc\nRUN cget -p $PREFIX init --cxx $PREFIX/bin/hcc --std=c++14\n#  Install dependencies\nADD dev-requirements.txt /dev-requirements.txt\nADD requirements.txt /requirements.txt\nADD min-requirements.txt /min-requirements.txt\nRUN CXXFLAGS='-isystem $PREFIX/include' cget -p $PREFIX install -f /dev-requirements.txt\n#  Install doc requirements\nADD doc/requirements.txt /doc-requirements.txt\nRUN pip install -r /doc-requirements.txt\n#  Install windows opencl\nRUN cget -p $PREFIX/x86_64-w64-mingw32/opencl init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#  RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl KhronosGroup/OpenCL-Headers@master -X header -DINCLUDE_DIR=opencl22\n#  RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl pfultz2/OpenCL-ICD-Loader@master\n#  Install windows dependencies\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install pfultz2/rocm-recipes\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install -X header meganz/mingw-std-threads@dad05201ad4e096c5d1b2043081f412aeb8f5efb\nRUN ln -s $PREFIX/x86_64-w64-mingw32/include/mingw.thread.h $PREFIX/x86_64-w64-mingw32/include/thread\n#  RUN CXXFLAGS='-I $PREFIX/x86_64-w64-mingw32/include' AMDAPPSDKROOT=$PREFIX/x86_64-w64-mingw32/opencl cget -p $PREFIX/x86_64-w64-mingw32 install -f /requirements.txt\n#  Setup wine\nRUN mkdir -p /jenkins\nRUN chmod 777 /jenkins\nRUN WINEDEBUG=-all DISPLAY=:55.0 wineboot ; wineserver -w\n","injectedSmells":[],"originalDockerfileHash":"a23237a1567e8473830af8fe82533db2","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nARG PREFIX=/opt/rocm\n#   Support multiarch\nRUN dpkg --add-architecture i386\n#   Add rocm repository\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl apt-utils wget\nRUN curl https://raw.githubusercontent.com/RadeonOpenCompute/ROCm-docker/master/add-rocm.sh | bash\n#   Install dependencies required to build hcc\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated apt-utils build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake curl doxygen g++-mingw-w64 g++-mingw-w64-x86-64 g++-multilib git hsa-rocr-dev hsakmt-roct-dev lcov libelf-dev libncurses5-dev libpthread-stubs0-dev libnuma-dev libunwind-dev mingw-w64 mingw-w64-tools nsis python python-dev python-pip rocm-opencl rocm-opencl-dev software-properties-common wget wine xvfb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup ubsan environment to printstacktrace\nRUN ln -s /usr/bin/llvm-symbolizer-3.8 /usr/local/bin/llvm-symbolizer\nENV UBSAN_OPTIONS=\"print_stacktrace=1\"\n#   Install an init system\nRUN wget https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\nRUN dpkg -i dumb-init_*.deb \\\n && rm dumb-init_*.deb\n#   Install cget\nRUN pip install https://github.com/pfultz2/cget/archive/57b3289000fcdb3b7e424c60a35ea09bc44d8538.tar.gz\n#   Add the windows toolchain\nADD cmake/mingw-toolchain.cmake $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\nRUN cget -p $PREFIX/x86_64-w64-mingw32 init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#   Install rclone\nRUN pip install https://github.com/pfultz2/rclone/archive/master.tar.gz\n#   Install hcc\nRUN rclone -b roc-2.1.x -c fea3e2b4625f55b40b8c51c6e445117b3f16166f https://github.com/RadeonOpenCompute/hcc.git /hcc\nRUN cget -p $PREFIX install hcc,/hcc \\\n && rm -rf /hcc\n#   This is a workaround for broken installations\nRUN ln -s $PREFIX /opt/rocm/hip\nRUN ln -s $PREFIX /opt/rocm/hcc\n#   Build using hcc\nRUN cget -p $PREFIX init --cxx $PREFIX/bin/hcc --std=c++14\n#   Install dependencies\nADD dev-requirements.txt /dev-requirements.txt\nADD requirements.txt /requirements.txt\nADD min-requirements.txt /min-requirements.txt\nRUN CXXFLAGS='-isystem $PREFIX/include' cget -p $PREFIX install -f /dev-requirements.txt\n#   Install doc requirements\nADD doc/requirements.txt /doc-requirements.txt\nRUN pip install -r /doc-requirements.txt\n#   Install windows opencl\nRUN cget -p $PREFIX/x86_64-w64-mingw32/opencl init -t $PREFIX/x86_64-w64-mingw32/cmake/toolchain.cmake\n#   RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl KhronosGroup/OpenCL-Headers@master -X header -DINCLUDE_DIR=opencl22\n#   RUN cget install -p $PREFIX/x86_64-w64-mingw32/opencl pfultz2/OpenCL-ICD-Loader@master\n#   Install windows dependencies\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install pfultz2/rocm-recipes\nRUN cget -p $PREFIX/x86_64-w64-mingw32 install -X header meganz/mingw-std-threads@dad05201ad4e096c5d1b2043081f412aeb8f5efb\nRUN ln -s $PREFIX/x86_64-w64-mingw32/include/mingw.thread.h $PREFIX/x86_64-w64-mingw32/include/thread\n#   RUN CXXFLAGS='-I $PREFIX/x86_64-w64-mingw32/include' AMDAPPSDKROOT=$PREFIX/x86_64-w64-mingw32/opencl cget -p $PREFIX/x86_64-w64-mingw32 install -f /requirements.txt\n#   Setup wine\nRUN mkdir -p /jenkins\nRUN chmod 777 /jenkins\nRUN WINEDEBUG=-all DISPLAY=:55.0 wineboot ; wineserver -w\n","originalDockerfileUglifiedHash":"5aa39fc25af45d0e4f9aa4bad89dbe53","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0aeca3ea26cd419c5ba3ce508ab2417d49f3fdfd.dockerfile"}