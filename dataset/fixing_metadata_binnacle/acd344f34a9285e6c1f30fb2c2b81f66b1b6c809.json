{"seed":959695294,"processedDockerfileHash":"29da2cd2c95ddcb46702551ddf19213a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https build-essential bzip2 ca-certificates curl emacs fonts-liberation g++ git inkscape jed libav-tools libcupti-dev libsm6 libxext-dev libxrender1 lmodern locales lsb-release openssh-client pandoc pkg-config python python-dev sudo unzip vim wget zip zlib1g-dev -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#   Install CUDA Profile Tools\nRUN pip install Pillow==9.5.0 h5py==3.8.0 ipykernel==6.22.0 matplotlib==3.7.1 numpy==1.24.2 pandas==2.0.0 scipy==1.10.1 sklearn==0.0.post4 kubernetes==26.1.0 grpcio==1.53.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Install Python 3 Tensorflow with GPU support\nRUN pip install tf-nightly-gpu==2.12.0 --quiet --no-cache-dir\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN chown -R $NB_USER /home/$NB_USER/\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nUSER $NB_USER\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\nRUN conda create -n ipykernel_py2 python=2 ipykernel \\\n && python -m ipykernel install --user\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard==0.2.0\nENV PATH=\"/home/jovyan/bin:$PATH\"\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) Jupyter Development Team.\n#  Distributed under the terms of the Modified BSD License.\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nUSER root\n#  Install all OS dependencies for notebook server that starts but lacks all\n#  features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https build-essential bzip2 ca-certificates curl emacs fonts-liberation g++ git inkscape jed libav-tools libcupti-dev libsm6 libxext-dev libxrender1 lmodern locales lsb-release openssh-client pandoc pkg-config python python-dev sudo unzip vim wget zip zlib1g-dev -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#  Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#  Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#  Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#  Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#  Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#  Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#  Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#  Install CUDA Profile Tools\nRUN pip install Pillow h5py ipykernel matplotlib numpy pandas scipy sklearn kubernetes grpcio --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Install Python 3 packages\n#  Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#  use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#  Install Python 3 Tensorflow with GPU support\nRUN pip install tf-nightly-gpu --quiet --no-cache-dir\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#  Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN chown -R $NB_USER /home/$NB_USER/\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nUSER $NB_USER\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\nRUN conda create -n ipykernel_py2 python=2 ipykernel \\\n && python -m ipykernel install --user\n#  Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard\nENV PATH=\"/home/jovyan/bin:$PATH\"\n","injectedSmells":[],"originalDockerfileHash":"e020f12ed1d262e3c036af513933c9be","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https build-essential bzip2 ca-certificates curl emacs fonts-liberation g++ git inkscape jed libav-tools libcupti-dev libsm6 libxext-dev libxrender1 lmodern locales lsb-release openssh-client pandoc pkg-config python python-dev sudo unzip vim wget zip zlib1g-dev -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#   Install CUDA Profile Tools\nRUN pip install Pillow h5py ipykernel matplotlib numpy pandas scipy sklearn kubernetes grpcio --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Install Python 3 Tensorflow with GPU support\nRUN pip install tf-nightly-gpu --quiet --no-cache-dir\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN chown -R $NB_USER /home/$NB_USER/\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nUSER $NB_USER\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\nRUN conda create -n ipykernel_py2 python=2 ipykernel \\\n && python -m ipykernel install --user\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard\nENV PATH=\"/home/jovyan/bin:$PATH\"\n","originalDockerfileUglifiedHash":"0e89f801d2395f02f6f029812eb19313","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/acd344f34a9285e6c1f30fb2c2b81f66b1b6c809.dockerfile"}