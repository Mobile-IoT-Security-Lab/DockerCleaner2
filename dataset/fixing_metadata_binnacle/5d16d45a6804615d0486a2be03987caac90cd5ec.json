{"seed":3418235160,"processedDockerfileHash":"18eea011d02464b7c06f8825b49b58c5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.6\nMAINTAINER Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)\n#   ────────────────────────────────────────────── Setup basic system packages ──┐\nRUN apk update \\\n && apk upgrade\n#   Install libraries.\nRUN apk add linux-headers=4.4.6-r2 build-base=0.5-r0 openssl-dev=1.0.2r-r0 libc-dev=0.7.1-r0 libxml2-dev=2.9.8-r1 libxslt-dev=1.1.29-r4 libffi-dev=3.2.1-r3 readline-dev=6.3.008-r5 jemalloc-dev=4.5.0-r0 g++=6.3.0-r4 musl-dev=1.1.16-r15 make=4.2.1-r0 --update --no-cache\n#   Install programs.\nRUN apk add git=2.13.7-r2 bash=4.3.48-r1 curl=7.61.1-r2 wget=1.20.3-r0 zsh=5.3.1-r1 --update --no-cache\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────── Setup common environment variables ──┐\nENV HOME=\"/root\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (1) ──┐\nARG RUBY_MAJOR=2\nARG RUBY_MINOR=4\nARG RUBY_PATCH=0\nARG RUBY_OTHER\nARG RUBY_SHA256=152fd0bd15a90b4a18213448f485d4b53e9f7662e1508190aa5b702446b29e3d\nARG RUBYGEMS_FULL_VERSION=2.6.12\nENV RUBY_VERSION=\"${RUBY_MAJOR}.${RUBY_MINOR}\"\nENV RUBY_FULL_VERSION=\"${RUBY_VERSION}.${RUBY_PATCH}${RUBY_OTHER}\"\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN apk add autoconf=2.69-r0 bison=3.0.4-r0 bzip2=1.0.6-r5 bzip2-dev=1.0.6-r5 ca-certificates=20161130-r3 coreutils=8.27-r0 dpkg-dev=1.18.23-r2 dpkg=1.18.23-r2 gcc=6.3.0-r4 gdbm-dev=1.12-r0 glib-dev=2.52.1-r0 libc-dev=0.7.1-r0 libffi-dev=3.2.1-r3 libxml2-dev=2.9.8-r1 libxslt-dev=1.1.29-r4 linux-headers=4.4.6-r2 make=4.2.1-r0 ncurses-dev=6.0_p20171125-r1 openssl=1.0.2r-r0 openssl-dev=1.0.2r-r0 procps=3.3.12-r1 readline-dev=6.3.008-r5 ruby=2.4.6-r0 tar=1.32-r0 yaml-dev=0.1.7-r0 zlib-dev=1.2.11-r0 xz=5.2.3-r0 --no-cache --virtual .ruby-builddeps\nRUN set -ex \\\n && wget -O ruby.tar.gz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_VERSION}/ruby-$RUBY_FULL_VERSION.tar.gz\" \\\n && echo \"$RUBY_SHA256 *ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.gz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add bzip2=1.0.6-r5 ca-certificates=20161130-r3 libffi-dev=3.2.1-r3 openssl-dev=1.0.2r-r0 yaml-dev=0.1.7-r0 procps=3.3.12-r1 zlib-dev=1.2.11-r0 $runDeps --virtual .ruby-rundeps \\\n && apk del .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_FULL_VERSION\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (2) ──┐\n#   Install bundler.\nRUN gem install bundler --version 2.4.12\n#   Install things globally and don't create `.bundle` in all our apps.\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"${GEM_HOME}\" \\\n    BUNDLE_BIN=\"${GEM_HOME}/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"${GEM_HOME}\" \"${BUNDLE_BIN}\" \\\n && chmod 777 \"${GEM_HOME}\" \"${BUNDLE_BIN}\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup ssh ──┐\n#   Install ssh daemon.\nRUN apk add openssh=7.5_p1-r4 --update --no-cache\n#   Generate fresh keys.\nRUN ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa\n#   Prepare ssh run directory.\nRUN mkdir -p /var/run/sshd\n#   Configure ssh.\nRUN echo \"StrictHostKeyChecking=no\" >> /etc/ssh/ssh_config\nRUN sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config\n#   Expose ssh port.\nEXPOSE 22/tcp\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup git ──┐\nENV GIT_PWD=\"git\"\nENV GIT_USER=\"git\"\nENV GIT_GROUP=\"git\"\nENV GIT_REPOS_DIR=\"/git\"\n#   Install git packages.\nRUN apk add git-daemon=2.13.7-r2 git=2.13.7-r2 --update --no-cache\n#   Setup a git user and ssh.\nRUN addgroup \"${GIT_GROUP}\" \\\n && echo -e \"${GIT_PWD}\\n${GIT_PWD}\\n\" | adduser -G \"${GIT_GROUP}\" -h \"${GIT_REPOS_DIR}\" -s /usr/bin/git-shell \"${GIT_USER}\"\n#   Remove the annoying `/etc/motd`.\nRUN rm -rf /etc/update-motd.d /etc/motd /etc/motd.dynamic\nRUN ln -fs /dev/null /run/motd.dynamic\n#   Configure local git client.\n#   TODO: Replace with fizzy config (when `--no-ask` is implemented).\nRUN git config --global push.default simple \\\n && git config --global user.name root \\\n && git config --global user.email root@localhost.localdomain\n#   SSH keys for user `root`\nCOPY docker/ssh_key.pub \"/root/.ssh/authorized_keys\"\nCOPY docker/ssh_key.pub \"/root/.ssh/id_rsa.pub\"\nCOPY docker/ssh_key \"/root/.ssh/id_rsa\"\nRUN chmod 700 \"/root/.ssh\"\nRUN chmod 600 /root/.ssh/*\n#   SSH keys for user `git`\nCOPY docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/authorized_keys\"\nCOPY docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/id_rsa.pub\"\nCOPY docker/ssh_key \"${GIT_REPOS_DIR}/.ssh/id_rsa\"\nRUN chmod 700 \"${GIT_REPOS_DIR}/.ssh\"\nRUN chmod 600 ${GIT_REPOS_DIR}/.ssh/*\nRUN chown -R \"${GIT_USER}:${GIT_GROUP}\" \"${GIT_REPOS_DIR}/.ssh\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ────────────────────────────────────────────────────────────── Setup fizzy ──┐\n#   Install fizzy dependencies.\nRUN gem install thor --version 1.2.1\nRUN apk add sudo=1.8.19_p2-r0 --update --no-cache\n#   Install fizzy.\n#   TODO: change back to branch `master`.\nRUN curl -sL https://raw.githubusercontent.com/alem0lars/fizzy/develop/build/fizzy | tee /usr/local/bin/fizzy > /dev/null \\\n && chmod +x /usr/local/bin/fizzy\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (3) ──┐\nRUN fizzy cfg s -C ruby -U https:alem0lars/configs-ruby\nRUN fizzy qi -V docker-test-box -C ruby -I ruby\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────── Setup rsyslog ──┐\nRUN apk add rsyslog=8.26.0-r0 --update --no-cache\nCOPY docker/rsyslog.conf /etc/rsyslog.d/90-fizzy.conf\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────── Setup supervisord ──┐\nRUN apk add supervisor=3.2.4-r0 --update --no-cache\nCOPY docker/supervisord.ini /etc/supervisor.d/supervisord.ini\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup app ──┐\nENV APP_DIR=\"${HOME}/fizzy\"\n#   ──────────────────────────── (trick to allow caching) Install dependencies ──┤\nWORKDIR /tmp\nCOPY ./Gemfile Gemfile\nCOPY ./Gemfile.lock Gemfile.lock\nRUN bundle install --without website\nRUN rm ./Gemfile \\\n && rm ./Gemfile.lock\n#   ────────────────────────────────────────────────────────────── Add the app ──┤\nCOPY . \"${APP_DIR}\"\nWORKDIR \"${APP_DIR}\"\nRUN bundle install --without website\nRUN bundle exec rake build\n#   ─────────────────────────────────────────────────────────────────────────────┘\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.6\nMAINTAINER Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)\n#  ────────────────────────────────────────────── Setup basic system packages ──┐\nRUN apk update \\\n && apk upgrade\n#  Install libraries.\nRUN apk add --update --no-cache linux-headers build-base openssl-dev libc-dev libxml2-dev libxslt-dev libffi-dev readline-dev jemalloc-dev g++ musl-dev make\n#  Install programs.\nRUN apk add --update --no-cache git bash curl wget zsh\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ─────────────────────────────────────── Setup common environment variables ──┐\nENV HOME=\"/root\"\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ─────────────────────────────────────────────────────────── Setup ruby (1) ──┐\nARG RUBY_MAJOR=2\nARG RUBY_MINOR=4\nARG RUBY_PATCH=0\nARG RUBY_OTHER\nARG RUBY_SHA256=152fd0bd15a90b4a18213448f485d4b53e9f7662e1508190aa5b702446b29e3d\nARG RUBYGEMS_FULL_VERSION=2.6.12\nENV RUBY_VERSION=\"${RUBY_MAJOR}.${RUBY_MINOR}\"\nENV RUBY_FULL_VERSION=\"${RUBY_VERSION}.${RUBY_PATCH}${RUBY_OTHER}\"\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\n#  readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev procps readline-dev ruby tar yaml-dev zlib-dev xz\nRUN set -ex \\\n && wget -O ruby.tar.gz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_VERSION}/ruby-$RUBY_FULL_VERSION.tar.gz\" \\\n && echo \"$RUBY_SHA256 *ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.gz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev openssl-dev yaml-dev procps zlib-dev \\\n && apk del .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_FULL_VERSION\"\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ─────────────────────────────────────────────────────────── Setup ruby (2) ──┐\n#  Install bundler.\nRUN gem install bundler\n#  Install things globally and don't create `.bundle` in all our apps.\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"${GEM_HOME}\" \\\n    BUNDLE_BIN=\"${GEM_HOME}/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"${GEM_HOME}\" \"${BUNDLE_BIN}\" \\\n && chmod 777 \"${GEM_HOME}\" \"${BUNDLE_BIN}\"\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ──────────────────────────────────────────────────────────────── Setup ssh ──┐\n#  Install ssh daemon.\nRUN apk add --update --no-cache openssh\n#  Generate fresh keys.\nRUN ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa\n#  Prepare ssh run directory.\nRUN mkdir -p /var/run/sshd\n#  Configure ssh.\nRUN echo \"StrictHostKeyChecking=no\" >> /etc/ssh/ssh_config\nRUN sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config\n#  Expose ssh port.\nEXPOSE 22/tcp\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ──────────────────────────────────────────────────────────────── Setup git ──┐\nENV GIT_PWD=\"git\"\nENV GIT_USER=\"git\"\nENV GIT_GROUP=\"git\"\nENV GIT_REPOS_DIR=\"/git\"\n#  Install git packages.\nRUN apk add --update --no-cache git-daemon git\n#  Setup a git user and ssh.\nRUN addgroup \"${GIT_GROUP}\" \\\n && echo -e \"${GIT_PWD}\\n${GIT_PWD}\\n\" | adduser -G \"${GIT_GROUP}\" -h \"${GIT_REPOS_DIR}\" -s /usr/bin/git-shell \"${GIT_USER}\"\n#  Remove the annoying `/etc/motd`.\nRUN rm -rf /etc/update-motd.d /etc/motd /etc/motd.dynamic\nRUN ln -fs /dev/null /run/motd.dynamic\n#  Configure local git client.\n#  TODO: Replace with fizzy config (when `--no-ask` is implemented).\nRUN git config --global push.default simple \\\n && git config --global user.name root \\\n && git config --global user.email root@localhost.localdomain\n#  SSH keys for user `root`\nADD docker/ssh_key.pub \"/root/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"/root/.ssh/id_rsa.pub\"\nADD docker/ssh_key \"/root/.ssh/id_rsa\"\nRUN chmod 700 \"/root/.ssh\"\nRUN chmod 600 /root/.ssh/*\n#  SSH keys for user `git`\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/id_rsa.pub\"\nADD docker/ssh_key \"${GIT_REPOS_DIR}/.ssh/id_rsa\"\nRUN chmod 700 \"${GIT_REPOS_DIR}/.ssh\"\nRUN chmod 600 ${GIT_REPOS_DIR}/.ssh/*\nRUN chown -R \"${GIT_USER}:${GIT_GROUP}\" \"${GIT_REPOS_DIR}/.ssh\"\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ────────────────────────────────────────────────────────────── Setup fizzy ──┐\n#  Install fizzy dependencies.\nRUN gem install thor\nRUN apk add --update --no-cache sudo\n#  Install fizzy.\n#  TODO: change back to branch `master`.\nRUN curl -sL https://raw.githubusercontent.com/alem0lars/fizzy/develop/build/fizzy | tee /usr/local/bin/fizzy > /dev/null \\\n && chmod +x /usr/local/bin/fizzy\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ─────────────────────────────────────────────────────────── Setup ruby (3) ──┐\nRUN fizzy cfg s -C ruby -U https:alem0lars/configs-ruby\nRUN fizzy qi -V docker-test-box -C ruby -I ruby\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ──────────────────────────────────────────────────────────── Setup rsyslog ──┐\nRUN apk add --update --no-cache rsyslog\nADD docker/rsyslog.conf /etc/rsyslog.d/90-fizzy.conf\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ──────────────────────────────────────────────────────── Setup supervisord ──┐\nRUN apk add --update --no-cache supervisor\nADD docker/supervisord.ini /etc/supervisor.d/supervisord.ini\n#  ─────────────────────────────────────────────────────────────────────────────┘\n#  ──────────────────────────────────────────────────────────────── Setup app ──┐\nENV APP_DIR=\"${HOME}/fizzy\"\n#  ──────────────────────────── (trick to allow caching) Install dependencies ──┤\nWORKDIR /tmp\nADD ./Gemfile Gemfile\nADD ./Gemfile.lock Gemfile.lock\nRUN bundle install --without website\nRUN rm ./Gemfile \\\n && rm ./Gemfile.lock\n#  ────────────────────────────────────────────────────────────── Add the app ──┤\nADD . \"${APP_DIR}\"\nWORKDIR \"${APP_DIR}\"\nRUN bundle install --without website\nRUN bundle exec rake build\n#  ─────────────────────────────────────────────────────────────────────────────┘\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"65fb6b5c3c8cf825a6b16e4bcbbe2118","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.6\nMAINTAINER Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)\n#   ────────────────────────────────────────────── Setup basic system packages ──┐\nRUN apk update \\\n && apk upgrade\n#   Install libraries.\nRUN apk add --update --no-cache linux-headers build-base openssl-dev libc-dev libxml2-dev libxslt-dev libffi-dev readline-dev jemalloc-dev g++ musl-dev make\n#   Install programs.\nRUN apk add --update --no-cache git bash curl wget zsh\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────── Setup common environment variables ──┐\nENV HOME=\"/root\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (1) ──┐\nARG RUBY_MAJOR=2\nARG RUBY_MINOR=4\nARG RUBY_PATCH=0\nARG RUBY_OTHER\nARG RUBY_SHA256=152fd0bd15a90b4a18213448f485d4b53e9f7662e1508190aa5b702446b29e3d\nARG RUBYGEMS_FULL_VERSION=2.6.12\nENV RUBY_VERSION=\"${RUBY_MAJOR}.${RUBY_MINOR}\"\nENV RUBY_FULL_VERSION=\"${RUBY_VERSION}.${RUBY_PATCH}${RUBY_OTHER}\"\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev procps readline-dev ruby tar yaml-dev zlib-dev xz\nRUN set -ex \\\n && wget -O ruby.tar.gz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_VERSION}/ruby-$RUBY_FULL_VERSION.tar.gz\" \\\n && echo \"$RUBY_SHA256 *ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xf ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.gz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev openssl-dev yaml-dev procps zlib-dev \\\n && apk del .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_FULL_VERSION\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (2) ──┐\n#   Install bundler.\nRUN gem install bundler\n#   Install things globally and don't create `.bundle` in all our apps.\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"${GEM_HOME}\" \\\n    BUNDLE_BIN=\"${GEM_HOME}/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"${GEM_HOME}\" \"${BUNDLE_BIN}\" \\\n && chmod 777 \"${GEM_HOME}\" \"${BUNDLE_BIN}\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup ssh ──┐\n#   Install ssh daemon.\nRUN apk add --update --no-cache openssh\n#   Generate fresh keys.\nRUN ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa \\\n && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa\n#   Prepare ssh run directory.\nRUN mkdir -p /var/run/sshd\n#   Configure ssh.\nRUN echo \"StrictHostKeyChecking=no\" >> /etc/ssh/ssh_config\nRUN sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config\n#   Expose ssh port.\nEXPOSE 22/tcp\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup git ──┐\nENV GIT_PWD=\"git\"\nENV GIT_USER=\"git\"\nENV GIT_GROUP=\"git\"\nENV GIT_REPOS_DIR=\"/git\"\n#   Install git packages.\nRUN apk add --update --no-cache git-daemon git\n#   Setup a git user and ssh.\nRUN addgroup \"${GIT_GROUP}\" \\\n && echo -e \"${GIT_PWD}\\n${GIT_PWD}\\n\" | adduser -G \"${GIT_GROUP}\" -h \"${GIT_REPOS_DIR}\" -s /usr/bin/git-shell \"${GIT_USER}\"\n#   Remove the annoying `/etc/motd`.\nRUN rm -rf /etc/update-motd.d /etc/motd /etc/motd.dynamic\nRUN ln -fs /dev/null /run/motd.dynamic\n#   Configure local git client.\n#   TODO: Replace with fizzy config (when `--no-ask` is implemented).\nRUN git config --global push.default simple \\\n && git config --global user.name root \\\n && git config --global user.email root@localhost.localdomain\n#   SSH keys for user `root`\nADD docker/ssh_key.pub \"/root/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"/root/.ssh/id_rsa.pub\"\nADD docker/ssh_key \"/root/.ssh/id_rsa\"\nRUN chmod 700 \"/root/.ssh\"\nRUN chmod 600 /root/.ssh/*\n#   SSH keys for user `git`\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/authorized_keys\"\nADD docker/ssh_key.pub \"${GIT_REPOS_DIR}/.ssh/id_rsa.pub\"\nADD docker/ssh_key \"${GIT_REPOS_DIR}/.ssh/id_rsa\"\nRUN chmod 700 \"${GIT_REPOS_DIR}/.ssh\"\nRUN chmod 600 ${GIT_REPOS_DIR}/.ssh/*\nRUN chown -R \"${GIT_USER}:${GIT_GROUP}\" \"${GIT_REPOS_DIR}/.ssh\"\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ────────────────────────────────────────────────────────────── Setup fizzy ──┐\n#   Install fizzy dependencies.\nRUN gem install thor\nRUN apk add --update --no-cache sudo\n#   Install fizzy.\n#   TODO: change back to branch `master`.\nRUN curl -sL https://raw.githubusercontent.com/alem0lars/fizzy/develop/build/fizzy | tee /usr/local/bin/fizzy > /dev/null \\\n && chmod +x /usr/local/bin/fizzy\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ─────────────────────────────────────────────────────────── Setup ruby (3) ──┐\nRUN fizzy cfg s -C ruby -U https:alem0lars/configs-ruby\nRUN fizzy qi -V docker-test-box -C ruby -I ruby\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────── Setup rsyslog ──┐\nRUN apk add --update --no-cache rsyslog\nADD docker/rsyslog.conf /etc/rsyslog.d/90-fizzy.conf\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────── Setup supervisord ──┐\nRUN apk add --update --no-cache supervisor\nADD docker/supervisord.ini /etc/supervisor.d/supervisord.ini\n#   ─────────────────────────────────────────────────────────────────────────────┘\n#   ──────────────────────────────────────────────────────────────── Setup app ──┐\nENV APP_DIR=\"${HOME}/fizzy\"\n#   ──────────────────────────── (trick to allow caching) Install dependencies ──┤\nWORKDIR /tmp\nADD ./Gemfile Gemfile\nADD ./Gemfile.lock Gemfile.lock\nRUN bundle install --without website\nRUN rm ./Gemfile \\\n && rm ./Gemfile.lock\n#   ────────────────────────────────────────────────────────────── Add the app ──┤\nADD . \"${APP_DIR}\"\nWORKDIR \"${APP_DIR}\"\nRUN bundle install --without website\nRUN bundle exec rake build\n#   ─────────────────────────────────────────────────────────────────────────────┘\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisord.conf\"]\n","originalDockerfileUglifiedHash":"c01c5020f84f5746564164e884c237a5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5d16d45a6804615d0486a2be03987caac90cd5ec.dockerfile"}