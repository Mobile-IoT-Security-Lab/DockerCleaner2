{"seed":3082076041,"processedDockerfileHash":"84db2be3349eb5ff4cd7d39c8afc3402","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER Anton Loss @avloss (originally Jeremiah Harmsen <jeremiah@google.com>)\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libpng12-dev=1.2.54-1ubuntu1.1 libzmq3-dev=4.1.4-7ubuntu0.1 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.12-1~16.04 python-numpy=1:1.11.0-1ubuntu1 python-pip=8.1.1-2ubuntu0.6 software-properties-common=0.96.20.10 swig=3.0.8-0ubuntu3 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libcurl3-dev vim=2:7.4.1689-3ubuntu1.5 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Set up grpc\nRUN pip install enum34==1.1.10 futures==3.4.0 mock==5.0.2 six==1.16.0 \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio==1.53.0 -i https://testpypi.python.org/simple --pre \\\n && pip install flask==2.2.3 \\\n && pip install jupyter==1.0.0 \\\n && pip install scipy==1.10.1 \\\n && pip install scikit-learn==1.2.2 \\\n && pip install requests==2.28.2\n#   Set up Bazel.\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\n#  https://github.com/tensorflow/tensorflow/issues/7048\nRUN update-ca-certificates -f\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  MAINTAINER Anton Loss @avloss\nRUN mkdir /serving\nCOPY tensorflow /serving/tensorflow\nCOPY tensorflow_serving /serving/tensorflow_serving\nCOPY tf_models /serving/tf_models\nCOPY tools /serving/tools\nCOPY WORKSPACE /serving/WORKSPACE\nRUN cd /serving/tensorflow \\\n && yes \"\" | ./configure\nRUN pip install waitress==2.1.2\n#  # limiting build resources - takes longer, but doesn't fail!\nRUN cd /serving/ \\\n && bazel build -c opt --local_resources 2048,.5,1.0 tensorflow_serving/...\nRUN pip install tensorflow==2.12.0 matplotlib==3.7.1\nRUN mkdir -p /tmp/models \\\n && mkdir -p /root/jupyter_notebooks\nCOPY example_jupyter/setup.sh /root/setup.sh\nCOPY example_jupyter/tf_serving_rest_example.ipynb /root/jupyter_notebooks/\nEXPOSE 9000/tcp 8915/tcp 8888/tcp\nCMD /root/setup.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER Anton Loss @avloss (originally Jeremiah Harmsen <jeremiah@google.com>)\nRUN apt-get update \\\n && apt-get install build-essential curl git libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-numpy python-pip software-properties-common swig zip zlib1g-dev libcurl3-dev vim -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre \\\n && pip install flask \\\n && pip install jupyter \\\n && pip install scipy \\\n && pip install scikit-learn \\\n && pip install requests\n#  Set up Bazel.\n#  We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#  have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#  Matthias Klose (https://launchpad.net/~doko).  It will do until\n#  we either update the base image beyond 14.04 or openjdk-8 is\n#  finally backported to trusty; see e.g.\n#    https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\n# https://github.com/tensorflow/tensorflow/issues/7048\nRUN update-ca-certificates -f\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n# MAINTAINER Anton Loss @avloss\nRUN mkdir /serving\nCOPY tensorflow /serving/tensorflow\nCOPY tensorflow_serving /serving/tensorflow_serving\nCOPY tf_models /serving/tf_models\nCOPY tools /serving/tools\nCOPY WORKSPACE /serving/WORKSPACE\nRUN cd /serving/tensorflow \\\n && yes \"\" | ./configure\nRUN pip install waitress\n# # limiting build resources - takes longer, but doesn't fail!\nRUN cd /serving/ \\\n && bazel build -c opt --local_resources 2048,.5,1.0 tensorflow_serving/...\nRUN pip install tensorflow matplotlib\nRUN mkdir -p /tmp/models \\\n && mkdir -p /root/jupyter_notebooks\nCOPY example_jupyter/setup.sh /root/setup.sh\nCOPY example_jupyter/tf_serving_rest_example.ipynb /root/jupyter_notebooks/\nEXPOSE 9000/tcp 8915/tcp 8888/tcp\nCMD /root/setup.sh\n","injectedSmells":[],"originalDockerfileHash":"a6c665a13ce6b4144cee042ab7b4bf89","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER Anton Loss @avloss (originally Jeremiah Harmsen <jeremiah@google.com>)\nRUN apt-get update \\\n && apt-get install build-essential curl git libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-numpy python-pip software-properties-common swig zip zlib1g-dev libcurl3-dev vim -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre \\\n && pip install flask \\\n && pip install jupyter \\\n && pip install scipy \\\n && pip install scikit-learn \\\n && pip install requests\n#   Set up Bazel.\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\n#  https://github.com/tensorflow/tensorflow/issues/7048\nRUN update-ca-certificates -f\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  MAINTAINER Anton Loss @avloss\nRUN mkdir /serving\nCOPY tensorflow /serving/tensorflow\nCOPY tensorflow_serving /serving/tensorflow_serving\nCOPY tf_models /serving/tf_models\nCOPY tools /serving/tools\nCOPY WORKSPACE /serving/WORKSPACE\nRUN cd /serving/tensorflow \\\n && yes \"\" | ./configure\nRUN pip install waitress\n#  # limiting build resources - takes longer, but doesn't fail!\nRUN cd /serving/ \\\n && bazel build -c opt --local_resources 2048,.5,1.0 tensorflow_serving/...\nRUN pip install tensorflow matplotlib\nRUN mkdir -p /tmp/models \\\n && mkdir -p /root/jupyter_notebooks\nCOPY example_jupyter/setup.sh /root/setup.sh\nCOPY example_jupyter/tf_serving_rest_example.ipynb /root/jupyter_notebooks/\nEXPOSE 9000/tcp 8915/tcp 8888/tcp\nCMD /root/setup.sh\n","originalDockerfileUglifiedHash":"d783d3d88c7d4438a3cbfc9c62eaa8a9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/433e11eaa06c55e1e38d2572271c3fdb523abf8e.dockerfile"}