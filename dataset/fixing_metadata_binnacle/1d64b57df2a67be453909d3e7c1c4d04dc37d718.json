{"seed":4157219455,"processedDockerfileHash":"b4f61418835894e6057fa77519936ab5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stretch-slim\nENV NGINX_VERSION=\"1.15.9\" \\\n    ECHO_NGINX_MODULE_VERSION=\"v0.61\" \\\n    MODSECURITY_VERSION=\"v3.0.0-rc1\" \\\n    MODSECURITY_NGINX_VERSION=\"master\" \\\n    MODSECURITY_NGINX_COMMIT=\"a2a5858d249222938c2f5e48087a922c63d7f9d8\" \\\n    NGINSCRIPT_VERSION=\"0.2.8\" \\\n    NGX_BROTLI_VERSION=\"master\" \\\n    NGX_DEVEL_KIT_VERSION=\"v0.3.0\" \\\n    NGX_HTTP_REDIS=\"0.3.8\" \\\n    NGINX_MODULE_VTS_VERSION=\"v0.1.18\" \\\n    REDIS2_NGINX_MODULE_VERSION=\"v0.14\" \\\n    SET_MISC_NGINX_MODULE_VERSION=\"v0.31\" \\\n    SRCACHE_NGINX_MODULE_VERSION=\"v0.31\" \\\n    NGINX_GPGKEY=\"573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62\"\nRUN adduser --system --disabled-password --home /var/cache/nginx --shell /sbin/nologin --group nginx \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends inotify-tools curl libyajl-dev libgeoip1 libgeoip-dev dh-autoreconf libcurl4-gnutls-dev git wget build-essential libpcre3 libpcre3-dev libssl-dev libtool autoconf libxml2-dev zlib1g-dev libperl-dev --no-install-suggests -y \\\n && cd /usr/src \\\n && mkdir -p /etc/nginx /var/log/nginx /var/cache/nginx \\\n && git clone https://github.com/SpiderLabs/ModSecurity.git --branch ${MODSECURITY_VERSION} --single-branch \\\n && cd ModSecurity \\\n && sh build.sh \\\n && git submodule update --init \\\n && ./configure --disable-doxygen-doc --disable-examples --disable-dependency-tracking \\\n && make \\\n && make install \\\n && cd .. \\\n && git clone https://github.com/SpiderLabs/ModSecurity-nginx.git --branch ${MODSECURITY_NGINX_VERSION} --single-branch \\\n && cd ModSecurity-nginx \\\n && git checkout ${MODSECURITY_NGINX_COMMIT} \\\n && cd .. \\\n && git clone https://github.com/nginx/njs.git --branch ${NGINSCRIPT_VERSION} --single-branch \\\n && git clone https://github.com/google/ngx_brotli.git --branch ${NGX_BROTLI_VERSION} --single-branch \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd .. \\\n && git clone https://github.com/openresty/srcache-nginx-module.git --branch ${SRCACHE_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/redis2-nginx-module.git --branch ${REDIS2_NGINX_MODULE_VERSION} --single-branch \\\n && curl https://people.freebsd.org/~osa/ngx_http_redis-${NGX_HTTP_REDIS}.tar.gz | tar xz \\\n && git clone https://github.com/vozlt/nginx-module-vts.git --branch ${NGINX_MODULE_VTS_VERSION} --single-branch \\\n && curl -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar xz \\\n && git clone https://github.com/simpl/ngx_devel_kit.git --branch ${NGX_DEVEL_KIT_VERSION} --single-branch \\\n && git clone https://github.com/openresty/set-misc-nginx-module.git --branch ${SET_MISC_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/echo-nginx-module.git --branch ${ECHO_NGINX_MODULE_VERSION} --single-branch \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --add-dynamic-module=../echo-nginx-module --add-module=../ModSecurity-nginx --add-dynamic-module=../ngx_brotli --add-dynamic-module=../njs/nginx --add-dynamic-module=../srcache-nginx-module --add-dynamic-module=../redis2-nginx-module --add-dynamic-module=../ngx_http_redis-${NGX_HTTP_REDIS} --add-dynamic-module=../nginx-module-vts --add-dynamic-module=../ngx_devel_kit --add-dynamic-module=../set-misc-nginx-module --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module=dynamic --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie -Wl,-rpath,/usr/local/lib' \\\n && make \\\n && make install \\\n && git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git \\\n && cp -R ./owasp-modsecurity-crs/rules/ /etc/nginx/ \\\n && mv /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \\\n && mv /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \\\n && apt-get purge -y build-essential wget git curl libgeoip-dev libpcre3-dev \\\n && apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /usr/src/* \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY entrypoint.sh /\nCOPY files/geoip/ /etc/nginx/\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"nginx\", \"-c\", \"/etc/nginx/nginx.conf\", \"-g\", \"daemon\", \"off\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch-slim\nENV NGINX_VERSION=\"1.15.9\" \\\n    ECHO_NGINX_MODULE_VERSION=\"v0.61\" \\\n    MODSECURITY_VERSION=\"v3.0.0-rc1\" \\\n    MODSECURITY_NGINX_VERSION=\"master\" \\\n    MODSECURITY_NGINX_COMMIT=\"a2a5858d249222938c2f5e48087a922c63d7f9d8\" \\\n    NGINSCRIPT_VERSION=\"0.2.8\" \\\n    NGX_BROTLI_VERSION=\"master\" \\\n    NGX_DEVEL_KIT_VERSION=\"v0.3.0\" \\\n    NGX_HTTP_REDIS=\"0.3.8\" \\\n    NGINX_MODULE_VTS_VERSION=\"v0.1.18\" \\\n    REDIS2_NGINX_MODULE_VERSION=\"v0.14\" \\\n    SET_MISC_NGINX_MODULE_VERSION=\"v0.31\" \\\n    SRCACHE_NGINX_MODULE_VERSION=\"v0.31\" \\\n    NGINX_GPGKEY=\"573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62\"\nRUN adduser --system --disabled-password --home /var/cache/nginx --shell /sbin/nologin --group nginx \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends inotify-tools curl libyajl-dev libgeoip1 libgeoip-dev dh-autoreconf libcurl4-gnutls-dev git wget build-essential libpcre3 libpcre3-dev libssl-dev libtool autoconf libxml2-dev zlib1g-dev libperl-dev --no-install-suggests -y \\\n && cd /usr/src \\\n && mkdir -p /etc/nginx /var/log/nginx /var/cache/nginx \\\n && git clone https://github.com/SpiderLabs/ModSecurity.git --branch ${MODSECURITY_VERSION} --single-branch \\\n && cd ModSecurity \\\n && sh build.sh \\\n && git submodule update --init \\\n && ./configure --disable-doxygen-doc --disable-examples --disable-dependency-tracking \\\n && make \\\n && make install \\\n && cd .. \\\n && git clone https://github.com/SpiderLabs/ModSecurity-nginx.git --branch ${MODSECURITY_NGINX_VERSION} --single-branch \\\n && cd ModSecurity-nginx \\\n && git checkout ${MODSECURITY_NGINX_COMMIT} \\\n && cd .. \\\n && git clone https://github.com/nginx/njs.git --branch ${NGINSCRIPT_VERSION} --single-branch \\\n && git clone https://github.com/google/ngx_brotli.git --branch ${NGX_BROTLI_VERSION} --single-branch \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd .. \\\n && git clone https://github.com/openresty/srcache-nginx-module.git --branch ${SRCACHE_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/redis2-nginx-module.git --branch ${REDIS2_NGINX_MODULE_VERSION} --single-branch \\\n && curl https://people.freebsd.org/~osa/ngx_http_redis-${NGX_HTTP_REDIS}.tar.gz | tar xz \\\n && git clone https://github.com/vozlt/nginx-module-vts.git --branch ${NGINX_MODULE_VTS_VERSION} --single-branch \\\n && curl -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar xz \\\n && git clone https://github.com/simpl/ngx_devel_kit.git --branch ${NGX_DEVEL_KIT_VERSION} --single-branch \\\n && git clone https://github.com/openresty/set-misc-nginx-module.git --branch ${SET_MISC_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/echo-nginx-module.git --branch ${ECHO_NGINX_MODULE_VERSION} --single-branch \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --add-dynamic-module=../echo-nginx-module --add-module=../ModSecurity-nginx --add-dynamic-module=../ngx_brotli --add-dynamic-module=../njs/nginx --add-dynamic-module=../srcache-nginx-module --add-dynamic-module=../redis2-nginx-module --add-dynamic-module=../ngx_http_redis-${NGX_HTTP_REDIS} --add-dynamic-module=../nginx-module-vts --add-dynamic-module=../ngx_devel_kit --add-dynamic-module=../set-misc-nginx-module --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module=dynamic --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie -Wl,-rpath,/usr/local/lib' \\\n && make \\\n && make install \\\n && git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git \\\n && cp -R ./owasp-modsecurity-crs/rules/ /etc/nginx/ \\\n && mv /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \\\n && mv /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \\\n && apt-get purge -y build-essential wget git curl libgeoip-dev libpcre3-dev \\\n && apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /usr/src/* \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY entrypoint.sh /\nCOPY files/geoip/ /etc/nginx/\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"nginx\", \"-c\", \"/etc/nginx/nginx.conf\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"995d152a9b34c3bb86ae0e9ef7ca227f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch-slim\nENV NGINX_VERSION=\"1.15.9\" \\\n    ECHO_NGINX_MODULE_VERSION=\"v0.61\" \\\n    MODSECURITY_VERSION=\"v3.0.0-rc1\" \\\n    MODSECURITY_NGINX_VERSION=\"master\" \\\n    MODSECURITY_NGINX_COMMIT=\"a2a5858d249222938c2f5e48087a922c63d7f9d8\" \\\n    NGINSCRIPT_VERSION=\"0.2.8\" \\\n    NGX_BROTLI_VERSION=\"master\" \\\n    NGX_DEVEL_KIT_VERSION=\"v0.3.0\" \\\n    NGX_HTTP_REDIS=\"0.3.8\" \\\n    NGINX_MODULE_VTS_VERSION=\"v0.1.18\" \\\n    REDIS2_NGINX_MODULE_VERSION=\"v0.14\" \\\n    SET_MISC_NGINX_MODULE_VERSION=\"v0.31\" \\\n    SRCACHE_NGINX_MODULE_VERSION=\"v0.31\" \\\n    NGINX_GPGKEY=\"573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62\"\nRUN adduser --system --disabled-password --home /var/cache/nginx --shell /sbin/nologin --group nginx \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends inotify-tools curl libyajl-dev libgeoip1 libgeoip-dev dh-autoreconf libcurl4-gnutls-dev git wget build-essential libpcre3 libpcre3-dev libssl-dev libtool autoconf libxml2-dev zlib1g-dev libperl-dev --no-install-suggests -y \\\n && cd /usr/src \\\n && mkdir -p /etc/nginx /var/log/nginx /var/cache/nginx \\\n && git clone https://github.com/SpiderLabs/ModSecurity.git --branch ${MODSECURITY_VERSION} --single-branch \\\n && cd ModSecurity \\\n && sh build.sh \\\n && git submodule update --init \\\n && ./configure --disable-doxygen-doc --disable-examples --disable-dependency-tracking \\\n && make \\\n && make install \\\n && cd .. \\\n && git clone https://github.com/SpiderLabs/ModSecurity-nginx.git --branch ${MODSECURITY_NGINX_VERSION} --single-branch \\\n && cd ModSecurity-nginx \\\n && git checkout ${MODSECURITY_NGINX_COMMIT} \\\n && cd .. \\\n && git clone https://github.com/nginx/njs.git --branch ${NGINSCRIPT_VERSION} --single-branch \\\n && git clone https://github.com/google/ngx_brotli.git --branch ${NGX_BROTLI_VERSION} --single-branch \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd .. \\\n && git clone https://github.com/openresty/srcache-nginx-module.git --branch ${SRCACHE_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/redis2-nginx-module.git --branch ${REDIS2_NGINX_MODULE_VERSION} --single-branch \\\n && curl https://people.freebsd.org/~osa/ngx_http_redis-${NGX_HTTP_REDIS}.tar.gz | tar xz \\\n && git clone https://github.com/vozlt/nginx-module-vts.git --branch ${NGINX_MODULE_VTS_VERSION} --single-branch \\\n && curl -L https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz | tar xz \\\n && git clone https://github.com/simpl/ngx_devel_kit.git --branch ${NGX_DEVEL_KIT_VERSION} --single-branch \\\n && git clone https://github.com/openresty/set-misc-nginx-module.git --branch ${SET_MISC_NGINX_MODULE_VERSION} --single-branch \\\n && git clone https://github.com/openresty/echo-nginx-module.git --branch ${ECHO_NGINX_MODULE_VERSION} --single-branch \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --add-dynamic-module=../echo-nginx-module --add-module=../ModSecurity-nginx --add-dynamic-module=../ngx_brotli --add-dynamic-module=../njs/nginx --add-dynamic-module=../srcache-nginx-module --add-dynamic-module=../redis2-nginx-module --add-dynamic-module=../ngx_http_redis-${NGX_HTTP_REDIS} --add-dynamic-module=../nginx-module-vts --add-dynamic-module=../ngx_devel_kit --add-dynamic-module=../set-misc-nginx-module --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module=dynamic --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie -Wl,-rpath,/usr/local/lib' \\\n && make \\\n && make install \\\n && git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git \\\n && cp -R ./owasp-modsecurity-crs/rules/ /etc/nginx/ \\\n && mv /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /etc/nginx/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf \\\n && mv /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example /etc/nginx/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf \\\n && apt-get purge -y build-essential wget git curl libgeoip-dev libpcre3-dev \\\n && apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /usr/src/* \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY entrypoint.sh /\nCOPY files/geoip/ /etc/nginx/\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"nginx\", \"-c\", \"/etc/nginx/nginx.conf\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"995d152a9b34c3bb86ae0e9ef7ca227f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1d64b57df2a67be453909d3e7c1c4d04dc37d718.dockerfile"}