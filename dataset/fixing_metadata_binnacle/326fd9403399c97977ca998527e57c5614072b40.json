{"seed":3244766781,"processedDockerfileHash":"96b07c450cc14c6cab12a59125e39ac3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Google Tensorflow 1.12 srv (CUDA9) & Python 3.6\n#   ref: https://tensorflow.org\n#   import python-binary\nFROM lablup/kernel-base:python3.6 AS python-binary\n#   Build target: lablup/common-tensorflow:1.12-py36-srv-cuda9\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#   The TensorFlow version\nENV TF_VERSION=\"1.12\"\nENV BAZEL_VERSION=\"0.15.0\"\nENV CUDA_VERSION=\"9.0.176\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nENV NCCL_VERSION=\"2.4.2\"\nENV TENSORT_VERSION=\"5.0.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_OPENCL_SYCL=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_NEED_MPI=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"9.0 \"\nENV TF_CUDNN_VERSION=\"7\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1,7.0 \"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV CI_BUILD_PYTHON=\"python\"\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1604-$TENSORT_VERSION-ga-cuda9.0 \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends curl gcc g++ make cmake git cuda-command-line-tools-9-0 cuda-cublas-dev-9-0 cuda-cudart-dev-9-0 cuda-cufft-dev-9-0 cuda-curand-dev-9-0 cuda-cusolver-dev-9-0 cuda-cusparse-dev-9-0 libssh-dev proj-bin libproj-dev libgeos-dev libgeos++-dev libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev libffi-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz rsync sed swig git-core zip libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 libnvinfer5=$TENSORT_VERSION-1+cuda9.0 libnvinfer-dev=$TENSORT_VERSION-1+cuda9.0 libnccl2=$NCCL_VERSION-1+cuda9.0 libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel==0.40.0 numpy==1.24.2 scipy==1.10.1 --no-cache-dir \\\n && pip install keras_applications==1.0.8 --no-cache-dir \\\n && pip install keras_preprocessing==1.1.2 --no-cache-dir \\\n && rm -f /tmp/*.whl\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && bazel version \\\n && python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && python -c \"import numpy; numpy.show_config()\" \\\n && python -c \"import scipy; scipy.show_config()\"\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} \\\n && ldconfig\nRUN cd /tmp/tensorflow-${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --copt=-mavx2 --config=cuda --config=tensorrt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm -fr /root/.cache\nRUN ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Google Tensorflow 1.12 srv (CUDA9) & Python 3.6\n#  ref: https://tensorflow.org\n#  import python-binary\nFROM lablup/kernel-base:python3.6 AS python-binary\n#  Build target: lablup/common-tensorflow:1.12-py36-srv-cuda9\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#  The TensorFlow version\nENV TF_VERSION=\"1.12\"\nENV BAZEL_VERSION=\"0.15.0\"\nENV CUDA_VERSION=\"9.0.176\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nENV NCCL_VERSION=\"2.4.2\"\nENV TENSORT_VERSION=\"5.0.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_OPENCL_SYCL=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_NEED_MPI=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"9.0 \"\nENV TF_CUDNN_VERSION=\"7\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1,7.0 \"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV CI_BUILD_PYTHON=\"python\"\n#  Install system package dependencies\n#  NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1604-$TENSORT_VERSION-ga-cuda9.0 \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends curl gcc g++ make cmake git cuda-command-line-tools-9-0 cuda-cublas-dev-9-0 cuda-cudart-dev-9-0 cuda-cufft-dev-9-0 cuda-curand-dev-9-0 cuda-cusolver-dev-9-0 cuda-cusparse-dev-9-0 libssh-dev proj-bin libproj-dev libgeos-dev libgeos++-dev libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev libffi-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz rsync sed swig git-core zip libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 libnvinfer5=$TENSORT_VERSION-1+cuda9.0 libnvinfer-dev=$TENSORT_VERSION-1+cuda9.0 libnccl2=$NCCL_VERSION-1+cuda9.0 libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n#  Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\n#  Check Bazel/Python is runnable.\n#  Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir \\\n && pip install keras_applications --no-cache-dir \\\n && pip install keras_preprocessing --no-cache-dir \\\n && rm -f /tmp/*.whl\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && bazel version \\\n && python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && python -c \"import numpy; numpy.show_config()\" \\\n && python -c \"import scipy; scipy.show_config()\"\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} \\\n && ldconfig\nRUN cd /tmp/tensorflow-${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --copt=-mavx2 --config=cuda --config=tensorrt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm -fr /root/.cache\nRUN ls -lh /tmp/tensorflow_pkg\n#  vim: ft=dockerfile sts=4 sw=4 et tw=0\n","injectedSmells":[],"originalDockerfileHash":"981cd16998e72f5509aeff6dc167363d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Google Tensorflow 1.12 srv (CUDA9) & Python 3.6\n#   ref: https://tensorflow.org\n#   import python-binary\nFROM lablup/kernel-base:python3.6 AS python-binary\n#   Build target: lablup/common-tensorflow:1.12-py36-srv-cuda9\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#   The TensorFlow version\nENV TF_VERSION=\"1.12\"\nENV BAZEL_VERSION=\"0.15.0\"\nENV CUDA_VERSION=\"9.0.176\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nENV NCCL_VERSION=\"2.4.2\"\nENV TENSORT_VERSION=\"5.0.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_OPENCL_SYCL=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_NEED_MPI=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"9.0 \"\nENV TF_CUDNN_VERSION=\"7\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1,7.0 \"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV CI_BUILD_PYTHON=\"python\"\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1604-$TENSORT_VERSION-ga-cuda9.0 \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends curl gcc g++ make cmake git cuda-command-line-tools-9-0 cuda-cublas-dev-9-0 cuda-cudart-dev-9-0 cuda-cufft-dev-9-0 cuda-curand-dev-9-0 cuda-cusolver-dev-9-0 cuda-cusparse-dev-9-0 libssh-dev proj-bin libproj-dev libgeos-dev libgeos++-dev libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev libffi-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz rsync sed swig git-core zip libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 libnvinfer5=$TENSORT_VERSION-1+cuda9.0 libnvinfer-dev=$TENSORT_VERSION-1+cuda9.0 libnccl2=$NCCL_VERSION-1+cuda9.0 libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir \\\n && pip install keras_applications --no-cache-dir \\\n && pip install keras_preprocessing --no-cache-dir \\\n && rm -f /tmp/*.whl\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && bazel version \\\n && python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && python -c \"import numpy; numpy.show_config()\" \\\n && python -c \"import scipy; scipy.show_config()\"\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} \\\n && ldconfig\nRUN cd /tmp/tensorflow-${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --copt=-mavx2 --config=cuda --config=tensorrt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm -fr /root/.cache\nRUN ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\n","originalDockerfileUglifiedHash":"cf6179f5d6620ae962e5fb3d0cbb2896","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/326fd9403399c97977ca998527e57c5614072b40.dockerfile"}