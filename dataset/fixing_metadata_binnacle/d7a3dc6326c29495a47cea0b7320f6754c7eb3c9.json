{"seed":138256534,"processedDockerfileHash":"f3303403491e88dffede5e6c8b53a0ad","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","have-a-healthcheck"],"processedDockerfile":"#  ####\n#   Copyright Unidata 2016 All Rights Reserved\n#\n#   This is a template docker configuration file (dockerfile) provided\n#   by Unidata in support of the Unidata CloudStream docker container.\n#   It is intended to illustrate how to easily build a project on top\n#   of Unidata's Application-Streaming technology stack.  To use this\n#   template, you will make a copy to your project and change those\n#   variables which need changing according to the following documentation.\n#   You would then use `Docker` to build your application streaming project\n#   as follows:\n#\n#     $ docker build -t [desired tag name] -f [Dockerfile.template name] .\n#\n#   Once built, you would run it as follows:\n#\n#     $ docker run -it -p 6080:6080 [tag name]\n#\n#   The application will then be available via a browser at the\n#   IP address of the machine from which it was invoked, on port 6080, e.g.:\n#\n#     http://[IP address]:6080\n#\n#   For detailed usage guidelines, please see the project documentation at:\n#\n#    * https://github.com/Unidata/cloudstream\n#\n#   Copyright Unidata 2015 - 2016\n#  ####\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   The following variables must be left as they are for the system to work\n#   properly, please do not change them. They are related to the underlying\n#   Ubuntu linux image upon which `unidata/cloudstream` is based.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   Specify that this image inherits from the `unidata/cloudstream` image.\nFROM unidata/cloudstream:1.1.0\n#   Tell Docker that we will be working as `root`.  Note that we can switch back to the\n#   default user specified by `${CUSER}` where need be. This value is inherited from\n#   `unidata/cloudstream`.\nUSER root\n#   Tell the Ubuntu package manager that we are running in a non-interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update the package manager information and update any installed packages.\nRUN : \\\n && apt-get -y upgrade\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   End non-user-configurable options.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  ##############################################################################\n#   Begin user-configurable options.\n#  ##############################################################################\nMAINTAINER FirstName LastName <email.address@domain.name>\n#  ###\n#   APPLICATION_NAME - Name of the application.\n#\n#   This name is used for the documentation and for convenience.  It does\n#   not have to be congruent with the Docker image name.\n#\n#   Syntax:\n#      ENV APPLICATION_NAME [application name]\n#  ###\n#   ENV APPLICATION_NAME [application name]\n#  ###\n#   APPLICATION_VERSION - Version of the application.\n#\n#   If you intend to build a versioned docker image, you can set\n#   this variable to the desired version.  When running your image,\n#   you may then pass it a non-empty VERSION variable and the version\n#   of both your application and the underlying unidata/cloudstream image will be printed.\n#\n#   Syntax:\n#     ENV APPLICATION_VERSION [desired version]\n#\n#  ###\n#   ENV APPLICATION_VERSION [desired version]\n#  ###\n#   Package management\n#\n#   unidata/cloudstream uses a Ubuntu-based environment.  Ubuntu linux uses the\n#   `apt-get` tool for managing packages from the official repositories.  If\n#   there are specific utilities or programs or libraries which must be installed\n#   for your package to work, install them here\n#\n#   Example:\n#      RUN apt-get install -y libcurl4-openssl-dev wget emacs git nano\n#  ###\n#   RUN apt-get install -y [space-delimited list of package names]\n#  ##\n#   NOTE: If you intend to build your own application from source, you will\n#   *at minimum* require the Ubuntu development tools as listed below.\n#   You will also need to install any other libraries or utilities your program\n#   will need to be compiled.\n#  ##\n#   RUN apt-get install -y ubuntu-dev-tools libtool autoconf automake\n#  ###\n#   Revert to non-root admin user.\n#\n#   The unidata/cloudstream image provides a default non-root user (who has full\n#   sudo privileges.  This useraccount is captured in the ${CUSER} environmental\n#   variable. In order to preserve environmental variables, we need to\n#   switch over to this user now.\n#  ###\nUSER ${CUSER}\n#  ###\n#   Display Options\n#\n#   CloudStream uses a VNC remote desktop server, coupled with the VNC/Websockets\n#   interface `noVNC`, to provide visualization via a web browser.  When a\n#   unidata/cloudstream-derived image runs, it uses the following default\n#   environmental variables to define the screen properties:\n#\n#   - SIZEW: Width of display, default 1024\n#   - SIZEH: Height of display, default 768\n#   - CDEPTH: Color depth of display, default 24\n#\n#   These defaults may be overridden here.  They may also be modified at runtime by\n#   passing these values as environmental variables at runtime.\n#  ###\n#   ENV SIZEW 1024\n#   ENV SIZEH 768\n#   ENV CDEPTH 24\n#  ###\n#   Custom Environmental Variables\n#\n#   If your program or project depends on specific environmental variables,\n#   you can set default values below, similar to how `SIZEW`, `SIZEH` and\n#   `CDEPTH` are specified above.  These default values can be overridden\n#   at runtime.\n#\n#   Syntax:\n#      ENV [Variable Name] [Variable Value]\n#  ###\n#   ENV [Variable Name] [Variable Value]\n#  ###\n#   Advanced Docker Image customization\n#\n#   The application streaming image can be highly customized using standard\n#   Docker functionality.  The following space is a good place to add any custom\n#   functionality which is not captured in this template.\n#\n#   Examples of advanced usage include:\n#\n#   * Compiling a program manually for use by the image.\n#   * Manipulating the filesystem and/or filesystem contents.\n#   * Checking the values of particular options and performing actions based on\n#     their value.\n#   * Change the default window manager.\n#   * Override other default properties of the `unidata/cloudstream` image.\n#\n#   See the files in the `examples/` directory for more examples of advanced\n#   usage.\n#  ###\n#  ###\n#   Application README file\n#\n#   When the \"HELP\" environment variable is non-empty at runtime, any\n#   unidata/cloudstream derived image will print out the help file associated\n#   with unidata/cloudstream.  If there exists one of the following files,\n#   it will *also* be printed out:\n#\n#   * README\n#   * README.txt\n#   * README.md\n#\n#   This will allow you to add a help file or other documentation to your\n#   Docker image.\n#\n#   You would view this helpfile at runtime as follows:\n#\n#      $ docker run -it -e HELP=YES [docker image name]\n#  ###\n#   COPY README ${HOME}/\n#   COPY README.txt ${HOME}/\n#   COPY README.md ${HOME}/\n#  ###\n#   Custom Bash Init Script\n#\n#   By default, unidata/cloudidv and derivatives run a script when the image is\n#   invoked, `bootstrap.sh`.  `bootstrap.sh` is responsible for setting various\n#   underlying environmental variables and running the VNC server.  It also\n#   performs some actions depending on the environmental variables specified\n#   at runtime.\n#\n#   If the file `start.sh` exists in the Docker image, `bootstrap.sh` will run\n#   this shell script once the environment has been configured.\n#\n#   Example uses for `start.sh` include automatically running a specific program,\n#   checking out a project from a subversion or git repository, or anything else\n#   which can normally be achieved via a bash shell script.\n#\n#   In order to work, `start.sh` must be copied to the default directory ${HOME},\n#   which maps to /home/${CUSER}/.\n#\n#   If no `start.sh` is present, your application will automatically run a\n#   standard X11 desktop session using the `fluxbox` windows manager.\n#  ###\n#   COPY start.sh ${HOME}/\n#  ###\n#   End Advanced Docker Image customization\n#  ###\n#  ##############################################################################\n#   End user-configurable options.\n#  ##############################################################################\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   Do not change anything below this line.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  ###\n#   Append application name and version to the version file.\n#\n#   This copies the application-specific name and version to the\n#   cloudstream version file.  When queried, this allows Docker\n#   to print out the version of your Docker image as well as the\n#   version of the underlying unidata/cloudstream image.\n#\n#   It is safe to leave it alone.\n#  ###\nRUN echo \"${APPLICATION_NAME} Version: \\\"${APPLICATION_VERSION}\\\"\\t$( date ;)\" >> $VERSION_FILE\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   End File\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ####\n#  Copyright Unidata 2016 All Rights Reserved\n#\n#  This is a template docker configuration file (dockerfile) provided\n#  by Unidata in support of the Unidata CloudStream docker container.\n#  It is intended to illustrate how to easily build a project on top\n#  of Unidata's Application-Streaming technology stack.  To use this\n#  template, you will make a copy to your project and change those\n#  variables which need changing according to the following documentation.\n#  You would then use `Docker` to build your application streaming project\n#  as follows:\n#\n#    $ docker build -t [desired tag name] -f [Dockerfile.template name] .\n#\n#  Once built, you would run it as follows:\n#\n#    $ docker run -it -p 6080:6080 [tag name]\n#\n#  The application will then be available via a browser at the\n#  IP address of the machine from which it was invoked, on port 6080, e.g.:\n#\n#    http://[IP address]:6080\n#\n#  For detailed usage guidelines, please see the project documentation at:\n#\n#   * https://github.com/Unidata/cloudstream\n#\n#  Copyright Unidata 2015 - 2016\n# ####\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  The following variables must be left as they are for the system to work\n#  properly, please do not change them. They are related to the underlying\n#  Ubuntu linux image upon which `unidata/cloudstream` is based.\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  Specify that this image inherits from the `unidata/cloudstream` image.\nFROM unidata/cloudstream:1.1.0\n#  Tell Docker that we will be working as `root`.  Note that we can switch back to the\n#  default user specified by `${CUSER}` where need be. This value is inherited from\n#  `unidata/cloudstream`.\nUSER root\n#  Tell the Ubuntu package manager that we are running in a non-interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Update the package manager information and update any installed packages.\nRUN apt-get update \\\n && apt-get -y upgrade\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  End non-user-configurable options.\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n# ##############################################################################\n#  Begin user-configurable options.\n# ##############################################################################\nMAINTAINER FirstName LastName <email.address@domain.name>\n# ###\n#  APPLICATION_NAME - Name of the application.\n#\n#  This name is used for the documentation and for convenience.  It does\n#  not have to be congruent with the Docker image name.\n#\n#  Syntax:\n#     ENV APPLICATION_NAME [application name]\n# ###\n#  ENV APPLICATION_NAME [application name]\n# ###\n#  APPLICATION_VERSION - Version of the application.\n#\n#  If you intend to build a versioned docker image, you can set\n#  this variable to the desired version.  When running your image,\n#  you may then pass it a non-empty VERSION variable and the version\n#  of both your application and the underlying unidata/cloudstream image will be printed.\n#\n#  Syntax:\n#    ENV APPLICATION_VERSION [desired version]\n#\n# ###\n#  ENV APPLICATION_VERSION [desired version]\n# ###\n#  Package management\n#\n#  unidata/cloudstream uses a Ubuntu-based environment.  Ubuntu linux uses the\n#  `apt-get` tool for managing packages from the official repositories.  If\n#  there are specific utilities or programs or libraries which must be installed\n#  for your package to work, install them here\n#\n#  Example:\n#     RUN apt-get install -y libcurl4-openssl-dev wget emacs git nano\n# ###\n#  RUN apt-get install -y [space-delimited list of package names]\n# ##\n#  NOTE: If you intend to build your own application from source, you will\n#  *at minimum* require the Ubuntu development tools as listed below.\n#  You will also need to install any other libraries or utilities your program\n#  will need to be compiled.\n# ##\n#  RUN apt-get install -y ubuntu-dev-tools libtool autoconf automake\n# ###\n#  Revert to non-root admin user.\n#\n#  The unidata/cloudstream image provides a default non-root user (who has full\n#  sudo privileges.  This useraccount is captured in the ${CUSER} environmental\n#  variable. In order to preserve environmental variables, we need to\n#  switch over to this user now.\n# ###\nUSER ${CUSER}\n# ###\n#  Display Options\n#\n#  CloudStream uses a VNC remote desktop server, coupled with the VNC/Websockets\n#  interface `noVNC`, to provide visualization via a web browser.  When a\n#  unidata/cloudstream-derived image runs, it uses the following default\n#  environmental variables to define the screen properties:\n#\n#  - SIZEW: Width of display, default 1024\n#  - SIZEH: Height of display, default 768\n#  - CDEPTH: Color depth of display, default 24\n#\n#  These defaults may be overridden here.  They may also be modified at runtime by\n#  passing these values as environmental variables at runtime.\n# ###\n#  ENV SIZEW 1024\n#  ENV SIZEH 768\n#  ENV CDEPTH 24\n# ###\n#  Custom Environmental Variables\n#\n#  If your program or project depends on specific environmental variables,\n#  you can set default values below, similar to how `SIZEW`, `SIZEH` and\n#  `CDEPTH` are specified above.  These default values can be overridden\n#  at runtime.\n#\n#  Syntax:\n#     ENV [Variable Name] [Variable Value]\n# ###\n#  ENV [Variable Name] [Variable Value]\n# ###\n#  Advanced Docker Image customization\n#\n#  The application streaming image can be highly customized using standard\n#  Docker functionality.  The following space is a good place to add any custom\n#  functionality which is not captured in this template.\n#\n#  Examples of advanced usage include:\n#\n#  * Compiling a program manually for use by the image.\n#  * Manipulating the filesystem and/or filesystem contents.\n#  * Checking the values of particular options and performing actions based on\n#    their value.\n#  * Change the default window manager.\n#  * Override other default properties of the `unidata/cloudstream` image.\n#\n#  See the files in the `examples/` directory for more examples of advanced\n#  usage.\n# ###\n# ###\n#  Application README file\n#\n#  When the \"HELP\" environment variable is non-empty at runtime, any\n#  unidata/cloudstream derived image will print out the help file associated\n#  with unidata/cloudstream.  If there exists one of the following files,\n#  it will *also* be printed out:\n#\n#  * README\n#  * README.txt\n#  * README.md\n#\n#  This will allow you to add a help file or other documentation to your\n#  Docker image.\n#\n#  You would view this helpfile at runtime as follows:\n#\n#     $ docker run -it -e HELP=YES [docker image name]\n# ###\n#  COPY README ${HOME}/\n#  COPY README.txt ${HOME}/\n#  COPY README.md ${HOME}/\n# ###\n#  Custom Bash Init Script\n#\n#  By default, unidata/cloudidv and derivatives run a script when the image is\n#  invoked, `bootstrap.sh`.  `bootstrap.sh` is responsible for setting various\n#  underlying environmental variables and running the VNC server.  It also\n#  performs some actions depending on the environmental variables specified\n#  at runtime.\n#\n#  If the file `start.sh` exists in the Docker image, `bootstrap.sh` will run\n#  this shell script once the environment has been configured.\n#\n#  Example uses for `start.sh` include automatically running a specific program,\n#  checking out a project from a subversion or git repository, or anything else\n#  which can normally be achieved via a bash shell script.\n#\n#  In order to work, `start.sh` must be copied to the default directory ${HOME},\n#  which maps to /home/${CUSER}/.\n#\n#  If no `start.sh` is present, your application will automatically run a\n#  standard X11 desktop session using the `fluxbox` windows manager.\n# ###\n#  COPY start.sh ${HOME}/\n# ###\n#  End Advanced Docker Image customization\n# ###\n# ##############################################################################\n#  End user-configurable options.\n# ##############################################################################\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  Do not change anything below this line.\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n# ###\n#  Append application name and version to the version file.\n#\n#  This copies the application-specific name and version to the\n#  cloudstream version file.  When queried, this allows Docker\n#  to print out the version of your Docker image as well as the\n#  version of the underlying unidata/cloudstream image.\n#\n#  It is safe to leave it alone.\n# ###\nRUN echo \"${APPLICATION_NAME} Version: \\\"${APPLICATION_VERSION}\\\"\\t$( date ;)\" >> $VERSION_FILE\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  End File\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","injectedSmells":[],"originalDockerfileHash":"bfb18ba046b6826db787198d083da096","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ####\n#   Copyright Unidata 2016 All Rights Reserved\n#\n#   This is a template docker configuration file (dockerfile) provided\n#   by Unidata in support of the Unidata CloudStream docker container.\n#   It is intended to illustrate how to easily build a project on top\n#   of Unidata's Application-Streaming technology stack.  To use this\n#   template, you will make a copy to your project and change those\n#   variables which need changing according to the following documentation.\n#   You would then use `Docker` to build your application streaming project\n#   as follows:\n#\n#     $ docker build -t [desired tag name] -f [Dockerfile.template name] .\n#\n#   Once built, you would run it as follows:\n#\n#     $ docker run -it -p 6080:6080 [tag name]\n#\n#   The application will then be available via a browser at the\n#   IP address of the machine from which it was invoked, on port 6080, e.g.:\n#\n#     http://[IP address]:6080\n#\n#   For detailed usage guidelines, please see the project documentation at:\n#\n#    * https://github.com/Unidata/cloudstream\n#\n#   Copyright Unidata 2015 - 2016\n#  ####\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   The following variables must be left as they are for the system to work\n#   properly, please do not change them. They are related to the underlying\n#   Ubuntu linux image upon which `unidata/cloudstream` is based.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   Specify that this image inherits from the `unidata/cloudstream` image.\nFROM unidata/cloudstream:1.1.0\n#   Tell Docker that we will be working as `root`.  Note that we can switch back to the\n#   default user specified by `${CUSER}` where need be. This value is inherited from\n#   `unidata/cloudstream`.\nUSER root\n#   Tell the Ubuntu package manager that we are running in a non-interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update the package manager information and update any installed packages.\nRUN apt-get update \\\n && apt-get -y upgrade\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   End non-user-configurable options.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  ##############################################################################\n#   Begin user-configurable options.\n#  ##############################################################################\nMAINTAINER FirstName LastName <email.address@domain.name>\n#  ###\n#   APPLICATION_NAME - Name of the application.\n#\n#   This name is used for the documentation and for convenience.  It does\n#   not have to be congruent with the Docker image name.\n#\n#   Syntax:\n#      ENV APPLICATION_NAME [application name]\n#  ###\n#   ENV APPLICATION_NAME [application name]\n#  ###\n#   APPLICATION_VERSION - Version of the application.\n#\n#   If you intend to build a versioned docker image, you can set\n#   this variable to the desired version.  When running your image,\n#   you may then pass it a non-empty VERSION variable and the version\n#   of both your application and the underlying unidata/cloudstream image will be printed.\n#\n#   Syntax:\n#     ENV APPLICATION_VERSION [desired version]\n#\n#  ###\n#   ENV APPLICATION_VERSION [desired version]\n#  ###\n#   Package management\n#\n#   unidata/cloudstream uses a Ubuntu-based environment.  Ubuntu linux uses the\n#   `apt-get` tool for managing packages from the official repositories.  If\n#   there are specific utilities or programs or libraries which must be installed\n#   for your package to work, install them here\n#\n#   Example:\n#      RUN apt-get install -y libcurl4-openssl-dev wget emacs git nano\n#  ###\n#   RUN apt-get install -y [space-delimited list of package names]\n#  ##\n#   NOTE: If you intend to build your own application from source, you will\n#   *at minimum* require the Ubuntu development tools as listed below.\n#   You will also need to install any other libraries or utilities your program\n#   will need to be compiled.\n#  ##\n#   RUN apt-get install -y ubuntu-dev-tools libtool autoconf automake\n#  ###\n#   Revert to non-root admin user.\n#\n#   The unidata/cloudstream image provides a default non-root user (who has full\n#   sudo privileges.  This useraccount is captured in the ${CUSER} environmental\n#   variable. In order to preserve environmental variables, we need to\n#   switch over to this user now.\n#  ###\nUSER ${CUSER}\n#  ###\n#   Display Options\n#\n#   CloudStream uses a VNC remote desktop server, coupled with the VNC/Websockets\n#   interface `noVNC`, to provide visualization via a web browser.  When a\n#   unidata/cloudstream-derived image runs, it uses the following default\n#   environmental variables to define the screen properties:\n#\n#   - SIZEW: Width of display, default 1024\n#   - SIZEH: Height of display, default 768\n#   - CDEPTH: Color depth of display, default 24\n#\n#   These defaults may be overridden here.  They may also be modified at runtime by\n#   passing these values as environmental variables at runtime.\n#  ###\n#   ENV SIZEW 1024\n#   ENV SIZEH 768\n#   ENV CDEPTH 24\n#  ###\n#   Custom Environmental Variables\n#\n#   If your program or project depends on specific environmental variables,\n#   you can set default values below, similar to how `SIZEW`, `SIZEH` and\n#   `CDEPTH` are specified above.  These default values can be overridden\n#   at runtime.\n#\n#   Syntax:\n#      ENV [Variable Name] [Variable Value]\n#  ###\n#   ENV [Variable Name] [Variable Value]\n#  ###\n#   Advanced Docker Image customization\n#\n#   The application streaming image can be highly customized using standard\n#   Docker functionality.  The following space is a good place to add any custom\n#   functionality which is not captured in this template.\n#\n#   Examples of advanced usage include:\n#\n#   * Compiling a program manually for use by the image.\n#   * Manipulating the filesystem and/or filesystem contents.\n#   * Checking the values of particular options and performing actions based on\n#     their value.\n#   * Change the default window manager.\n#   * Override other default properties of the `unidata/cloudstream` image.\n#\n#   See the files in the `examples/` directory for more examples of advanced\n#   usage.\n#  ###\n#  ###\n#   Application README file\n#\n#   When the \"HELP\" environment variable is non-empty at runtime, any\n#   unidata/cloudstream derived image will print out the help file associated\n#   with unidata/cloudstream.  If there exists one of the following files,\n#   it will *also* be printed out:\n#\n#   * README\n#   * README.txt\n#   * README.md\n#\n#   This will allow you to add a help file or other documentation to your\n#   Docker image.\n#\n#   You would view this helpfile at runtime as follows:\n#\n#      $ docker run -it -e HELP=YES [docker image name]\n#  ###\n#   COPY README ${HOME}/\n#   COPY README.txt ${HOME}/\n#   COPY README.md ${HOME}/\n#  ###\n#   Custom Bash Init Script\n#\n#   By default, unidata/cloudidv and derivatives run a script when the image is\n#   invoked, `bootstrap.sh`.  `bootstrap.sh` is responsible for setting various\n#   underlying environmental variables and running the VNC server.  It also\n#   performs some actions depending on the environmental variables specified\n#   at runtime.\n#\n#   If the file `start.sh` exists in the Docker image, `bootstrap.sh` will run\n#   this shell script once the environment has been configured.\n#\n#   Example uses for `start.sh` include automatically running a specific program,\n#   checking out a project from a subversion or git repository, or anything else\n#   which can normally be achieved via a bash shell script.\n#\n#   In order to work, `start.sh` must be copied to the default directory ${HOME},\n#   which maps to /home/${CUSER}/.\n#\n#   If no `start.sh` is present, your application will automatically run a\n#   standard X11 desktop session using the `fluxbox` windows manager.\n#  ###\n#   COPY start.sh ${HOME}/\n#  ###\n#   End Advanced Docker Image customization\n#  ###\n#  ##############################################################################\n#   End user-configurable options.\n#  ##############################################################################\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   Do not change anything below this line.\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#  ###\n#   Append application name and version to the version file.\n#\n#   This copies the application-specific name and version to the\n#   cloudstream version file.  When queried, this allows Docker\n#   to print out the version of your Docker image as well as the\n#   version of the underlying unidata/cloudstream image.\n#\n#   It is safe to leave it alone.\n#  ###\nRUN echo \"${APPLICATION_NAME} Version: \\\"${APPLICATION_VERSION}\\\"\\t$( date ;)\" >> $VERSION_FILE\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n#   End File\n#  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n","originalDockerfileUglifiedHash":"7bd1bcd1ffc44e5e33cd0817e4c89dbb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d7a3dc6326c29495a47cea0b7320f6754c7eb3c9.dockerfile"}