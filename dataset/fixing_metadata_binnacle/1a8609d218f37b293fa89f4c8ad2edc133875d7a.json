{"seed":1601754335,"processedDockerfileHash":"d923da82aef1af120b33e9c849d5743e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG PHP_VERSION\nFROM php:${PHP_VERSION}-fpm\n#  --------------------------------------------------------------------------\n#   必需安装项\n#  --------------------------------------------------------------------------\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends curl libmemcached-dev libz-dev libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libssl-dev libmcrypt-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql \\\n && docker-php-ext-install pdo_pgsql \\\n && docker-php-ext-configure gd --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install --no-install-recommends apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  --------------------------------------------------------------------------\n#   可选安装项\n#  --------------------------------------------------------------------------\n#  ####################################\n#   SOAP:\n#  ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install --no-install-recommends libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n#  ####################################\n#   ZipArchive:\n#  ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip \\\n && docker-php-ext-install zip ; fi\n#  ####################################\n#   PHP Memcached:\n#  ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./site.ini /usr/local/etc/php/conf.d\nCOPY ./site.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"ARG PHP_VERSION\nFROM php:${PHP_VERSION}-fpm\n# --------------------------------------------------------------------------\n#  必需安装项\n# --------------------------------------------------------------------------\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends curl libmemcached-dev libz-dev libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libssl-dev libmcrypt-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql \\\n && docker-php-ext-install pdo_pgsql \\\n && docker-php-ext-configure gd --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#  always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# --------------------------------------------------------------------------\n#  可选安装项\n# --------------------------------------------------------------------------\n# ####################################\n#  SOAP:\n# ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n# ####################################\n#  xDebug:\n# ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n# ##########################################################################\n#  PHP REDIS EXTENSION\n# ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n# ####################################\n#  ZipArchive:\n# ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip \\\n && docker-php-ext-install zip ; fi\n# ####################################\n#  PHP Memcached:\n# ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n# ####################################\n#  MongoDB:\n# ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n# ##########################################################################\n#  Opcache:\n# ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n# ##########################################################################\n#  Check PHP version:\n# ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nADD ./site.ini /usr/local/etc/php/conf.d\nADD ./site.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","injectedSmells":[],"originalDockerfileHash":"1f426e479069c7b9f25d4ad15f78d4df","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG PHP_VERSION\nFROM php:${PHP_VERSION}-fpm\n#  --------------------------------------------------------------------------\n#   必需安装项\n#  --------------------------------------------------------------------------\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends curl libmemcached-dev libz-dev libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libssl-dev libmcrypt-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql \\\n && docker-php-ext-install pdo_pgsql \\\n && docker-php-ext-configure gd --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  --------------------------------------------------------------------------\n#   可选安装项\n#  --------------------------------------------------------------------------\n#  ####################################\n#   SOAP:\n#  ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n#  ####################################\n#   ZipArchive:\n#  ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip \\\n && docker-php-ext-install zip ; fi\n#  ####################################\n#   PHP Memcached:\n#  ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nADD ./site.ini /usr/local/etc/php/conf.d\nADD ./site.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","originalDockerfileUglifiedHash":"5bdbf8a03688e256db12d17fdffbc1ae","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1a8609d218f37b293fa89f4c8ad2edc133875d7a.dockerfile"}