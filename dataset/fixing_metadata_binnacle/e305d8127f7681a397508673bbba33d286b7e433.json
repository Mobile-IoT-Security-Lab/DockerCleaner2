{"seed":1772748916,"processedDockerfileHash":"36726426fef6dc52fa00aff2a88d9157","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM neurodebian:stretch\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n && apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends apt-utils bzip2 ca-certificates python3-dev gcc curl locales unzip wget zlib1g-dev libnifti-dev libxml2-dev libssl-dev libcurl4-openssl-dev libssl-dev libcairo2-dev -y -q ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=\"en_US.UTF-8\" \\\n && chmod 777 /opt \\\n && chmod a+s /opt \\\n && mkdir -p /neurodocker \\\n && if [ ! -f \"$ND_ENTRYPOINT\" ] ; then echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\"; fi \\\n && chmod -R 777 /neurodocker \\\n && chmod a+s /neurodocker\n#  ENV CONDA_DIR=\"/opt/miniconda-latest\" \\\n#  PATH=\"/opt/miniconda-latest/bin:$PATH\"\n#  RUN export PATH=\"/opt/miniconda-latest/bin:$PATH\" \\\n#   && echo \"Downloading Miniconda installer ...\" \\\n#  && conda_installer=\"/tmp/miniconda.sh\" \\\n#  && curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n#  && bash \"$conda_installer\" -b -p /opt/miniconda-latest \\\n#  && rm -f \"$conda_installer\" \\\n#  && conda update -yq -nbase conda \\\n#  && conda config --system --prepend channels conda-forge \\\n#  && conda config --system --set auto_update_conda false \\\n#  && conda config --system --set show_channel_urls true \\\n#  && sync && conda clean -tipsy && sync \\\n#  && conda create -y -q --name neuro \\\n#   && conda install -y -q --name neuro \\\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python3-pip python3-dev -y ) \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN pip install numpy==1.24.2 pandas==2.0.0 traits==6.4.1 scikit-learn==1.2.2 --no-cache-dir\nRUN pip install nipype==1.8.6 nibabel==5.1.0 niworkflows==1.7.9 nilearn==0.10.0 matplotlib==3.7.1 --no-cache-dir\nRUN rm -rf ~/.cache/pip/* \\\n && sync\nRUN :\nENV FSLDIR=\"/opt/fsl-5.0.10\" \\\n    PATH=\"/opt/fsl-5.0.10/bin:$PATH\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends bc git wget dc file libfontconfig1 libfreetype6 libgl1-mesa-dev libglu1-mesa-dev libgomp1 libice6 libmng1 libxcursor1 libxft2 libxinerama1 libxrandr2 libxrender1 libxt6 wget -y -q ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && echo \"Downloading FSL ...\" \\\n && mkdir -p /opt/fsl-5.0.10 \\\n && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz | tar -xz -C /opt/fsl-5.0.10 --strip-components 1 \\\n && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \\\n && echo \"Installing FSL conda environment ...\" \\\n && bash /opt/fsl-5.0.10/etc/fslconf/fslpython_install.sh -f /opt/fsl-5.0.10\nENV C3DPATH=\"/opt/convert3d-1.0.0\" \\\n    PATH=\"/opt/convert3d-1.0.0/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-1.0.0 \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-1.0.0 --strip-components 1\nENV PATH=\"/opt/afni-latest:$PATH\" \\\n    AFNI_PLUGINPATH=\"/opt/afni-latest\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends ed gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libnlopt-dev libxm4 netpbm r-base r-base-dev tcsh xfonts-base xvfb -y -q ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL --retry 5 -o /tmp/libxp6_1.0.2-2_amd64.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6_1.0.2-2_amd64.deb \\\n && rm /tmp/libxp6_1.0.2-2_amd64.deb \\\n && apt-get clean \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends -f ) \\\n && dpkg --configure -a \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && dpkg -i /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && rm /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && (apt-get update ;apt-get install --no-install-recommends -f ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && gsl2_path=\"$( find / -name 'libgsl.so.19' || printf '' ;)\" \\\n && if [ -n \"$gsl2_path\" ] ; then ln -sfv \"$gsl2_path\" \"$( dirname $gsl2_path ;)/libgsl.so.0\" ; fi \\\n && ldconfig \\\n && echo \"Downloading AFNI ...\" \\\n && mkdir -p /opt/afni-latest \\\n && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz | tar -xz -C /opt/afni-latest --strip-components 1 \\\n && PATH=$PATH:/opt/afni-latest rPkgsInstall -pkgs ALL\nRUN bash -c 'export PATH=/opt/afni-latest:$PATH \\\n && rPkgsInstall -pkgs ALL \\\n && rPkgsInstall -pkgs optparse,pracma,RNifti,svglite,signal,reshape2,ggplot2,lme4'\n#   Installing ANTs latest from source\nARG ANTS_SHA=51855944553a73960662d3e4f7c1326e584b23b2\nRUN which wget &> /dev/null || (apt-get update ;apt-get install --no-install-recommends wget=1.20.3 ) ; wget --no-verbose --output-document /cmake-3.11.4-Linux-x86_64.sh https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh\nENV ANTSPATH=\"/opt/ants-latest/bin\" \\\n    PATH=\"/opt/ants-latest/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/ants-latest/lib:$LD_LIBRARY_PATH\"\nRUN mkdir /opt/cmake \\\n && sh /cmake-3.11.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license \\\n && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n && apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends g++ gcc make zlib1g-dev imagemagick -y -q ) \\\n && mkdir /tmp/ants \\\n && cd /tmp \\\n && curl -sSLO https://github.com/ANTsX/ANTs/archive/${ANTS_SHA}.zip \\\n && unzip ${ANTS_SHA}.zip \\\n && mv ANTs-${ANTS_SHA} /tmp/ants/source \\\n && rm ${ANTS_SHA}.zip \\\n && mkdir -p /tmp/ants/build \\\n && cd /tmp/ants/build \\\n && git config --global url.\"https://\".insteadOf git:// \\\n && cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source \\\n && make -j1 \\\n && mkdir -p /opt/ants-latest \\\n && mv bin lib /opt/ants-latest/ \\\n && mv /tmp/ants/source/Scripts/* /opt/ants-latest/bin \\\n && rm -rf /tmp/ants \\\n && rm -rf /opt/cmake /usr/local/bin/cmake\nENV C3DPATH=\"/opt/convert3d-nightly\" \\\n    PATH=\"/opt/convert3d-nightly/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-nightly \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-nightly --strip-components 1\nRUN (apt-get update ;apt-get install --no-install-recommends procps -y -q )\nRUN sed -i '$iexport XCPEDIR=/xcpEngine' $ND_ENTRYPOINT\nRUN sed -i '$iexport PATH=$PATH:$XCPEDIR' $ND_ENTRYPOINT\nRUN echo 'export USER=\"${USER:=`whoami`}\"' >> \"$ND_ENTRYPOINT\"\nCOPY . /xcpEngine\nRUN bash -c 'cd /xcpEngine \\\n && wget -nv https://upenn.box.com/shared/static/i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && tar xvfJm i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && rm i30llenk6s37kv8nkqxgulwylaxp928g.xz'\nRUN bash -c 'BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine FSLDIR=/opt/fsl-5.0.10 AFNI_PATH=/opt/afni-latest C3D_PATH=/opt/convert3d-nightly/bin ANTSPATH=/opt/ants-latest/bin /xcpEngine/xcpReset \\\n && BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine /xcpEngine/utils/repairMetadata'\nRUN bash -c 'echo R_ENVIRON_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && echo R_PROFILE_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && chmod a+rx /xcpEngine/xcpEngine'\nENV XCPEDIR=\"/xcpEngine\" \\\n    AFNI_PATH=\"/opt/afni-latest/\" \\\n    C3D_PATH=\"/opt/convert3d-nightly/bin/\" \\\n    PATH=\"$PATH:/xcpEngine\"\nRUN mkdir /data /out /work /design /cohort\nENTRYPOINT [\"/xcpEngine/xcpEngine\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM neurodebian:stretch\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends apt-utils bzip2 ca-certificates python3-dev gcc curl locales unzip wget zlib1g-dev libnifti-dev libxml2-dev libssl-dev libcurl4-openssl-dev libssl-dev libcairo2-dev -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=\"en_US.UTF-8\" \\\n && chmod 777 /opt \\\n && chmod a+s /opt \\\n && mkdir -p /neurodocker \\\n && if [ ! -f \"$ND_ENTRYPOINT\" ] ; then echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\"; fi \\\n && chmod -R 777 /neurodocker \\\n && chmod a+s /neurodocker\n# ENV CONDA_DIR=\"/opt/miniconda-latest\" \\\n# PATH=\"/opt/miniconda-latest/bin:$PATH\"\n# RUN export PATH=\"/opt/miniconda-latest/bin:$PATH\" \\\n#  && echo \"Downloading Miniconda installer ...\" \\\n# && conda_installer=\"/tmp/miniconda.sh\" \\\n# && curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n# && bash \"$conda_installer\" -b -p /opt/miniconda-latest \\\n# && rm -f \"$conda_installer\" \\\n# && conda update -yq -nbase conda \\\n# && conda config --system --prepend channels conda-forge \\\n# && conda config --system --set auto_update_conda false \\\n# && conda config --system --set show_channel_urls true \\\n# && sync && conda clean -tipsy && sync \\\n# && conda create -y -q --name neuro \\\n#  && conda install -y -q --name neuro \\\nRUN apt-get update \\\n && apt-get install python3-pip python3-dev -y \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN pip install numpy pandas traits scikit-learn --no-cache-dir\nRUN pip install nipype nibabel niworkflows nilearn matplotlib --no-cache-dir\nRUN rm -rf ~/.cache/pip/* \\\n && sync\nRUN apt-get update\nENV FSLDIR=\"/opt/fsl-5.0.10\" \\\n    PATH=\"/opt/fsl-5.0.10/bin:$PATH\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends bc git wget dc file libfontconfig1 libfreetype6 libgl1-mesa-dev libglu1-mesa-dev libgomp1 libice6 libmng1 libxcursor1 libxft2 libxinerama1 libxrandr2 libxrender1 libxt6 wget -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && echo \"Downloading FSL ...\" \\\n && mkdir -p /opt/fsl-5.0.10 \\\n && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz | tar -xz -C /opt/fsl-5.0.10 --strip-components 1 \\\n && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \\\n && echo \"Installing FSL conda environment ...\" \\\n && bash /opt/fsl-5.0.10/etc/fslconf/fslpython_install.sh -f /opt/fsl-5.0.10\nENV C3DPATH=\"/opt/convert3d-1.0.0\" \\\n    PATH=\"/opt/convert3d-1.0.0/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-1.0.0 \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-1.0.0 --strip-components 1\nENV PATH=\"/opt/afni-latest:$PATH\" \\\n    AFNI_PLUGINPATH=\"/opt/afni-latest\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ed gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libnlopt-dev libxm4 netpbm r-base r-base-dev tcsh xfonts-base xvfb -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL --retry 5 -o /tmp/libxp6_1.0.2-2_amd64.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6_1.0.2-2_amd64.deb \\\n && rm /tmp/libxp6_1.0.2-2_amd64.deb \\\n && apt-get clean \\\n && apt-get update \\\n && apt-get install -f \\\n && dpkg --configure -a \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && dpkg -i /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && rm /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && apt-get install -f \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && gsl2_path=\"$( find / -name 'libgsl.so.19' || printf '' ;)\" \\\n && if [ -n \"$gsl2_path\" ] ; then ln -sfv \"$gsl2_path\" \"$( dirname $gsl2_path ;)/libgsl.so.0\" ; fi \\\n && ldconfig \\\n && echo \"Downloading AFNI ...\" \\\n && mkdir -p /opt/afni-latest \\\n && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz | tar -xz -C /opt/afni-latest --strip-components 1 \\\n && PATH=$PATH:/opt/afni-latest rPkgsInstall -pkgs ALL\nRUN bash -c 'export PATH=/opt/afni-latest:$PATH \\\n && rPkgsInstall -pkgs ALL \\\n && rPkgsInstall -pkgs optparse,pracma,RNifti,svglite,signal,reshape2,ggplot2,lme4'\n#  Installing ANTs latest from source\nARG ANTS_SHA=51855944553a73960662d3e4f7c1326e584b23b2\nADD https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh /cmake-3.11.4-Linux-x86_64.sh\nENV ANTSPATH=\"/opt/ants-latest/bin\" \\\n    PATH=\"/opt/ants-latest/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/ants-latest/lib:$LD_LIBRARY_PATH\"\nRUN mkdir /opt/cmake \\\n && sh /cmake-3.11.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license \\\n && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends g++ gcc make zlib1g-dev imagemagick -y -q \\\n && mkdir /tmp/ants \\\n && cd /tmp \\\n && curl -sSLO https://github.com/ANTsX/ANTs/archive/${ANTS_SHA}.zip \\\n && unzip ${ANTS_SHA}.zip \\\n && mv ANTs-${ANTS_SHA} /tmp/ants/source \\\n && rm ${ANTS_SHA}.zip \\\n && mkdir -p /tmp/ants/build \\\n && cd /tmp/ants/build \\\n && git config --global url.\"https://\".insteadOf git:// \\\n && cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source \\\n && make -j1 \\\n && mkdir -p /opt/ants-latest \\\n && mv bin lib /opt/ants-latest/ \\\n && mv /tmp/ants/source/Scripts/* /opt/ants-latest/bin \\\n && rm -rf /tmp/ants \\\n && rm -rf /opt/cmake /usr/local/bin/cmake\nENV C3DPATH=\"/opt/convert3d-nightly\" \\\n    PATH=\"/opt/convert3d-nightly/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-nightly \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-nightly --strip-components 1\nRUN apt-get install --no-install-recommends procps -y -q\nRUN sed -i '$iexport XCPEDIR=/xcpEngine' $ND_ENTRYPOINT\nRUN sed -i '$iexport PATH=$PATH:$XCPEDIR' $ND_ENTRYPOINT\nRUN echo 'export USER=\"${USER:=`whoami`}\"' >> \"$ND_ENTRYPOINT\"\nADD . /xcpEngine\nRUN bash -c 'cd /xcpEngine \\\n && wget -nv https://upenn.box.com/shared/static/i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && tar xvfJm i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && rm i30llenk6s37kv8nkqxgulwylaxp928g.xz'\nRUN bash -c 'BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine FSLDIR=/opt/fsl-5.0.10 AFNI_PATH=/opt/afni-latest C3D_PATH=/opt/convert3d-nightly/bin ANTSPATH=/opt/ants-latest/bin /xcpEngine/xcpReset \\\n && BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine /xcpEngine/utils/repairMetadata'\nRUN bash -c 'echo R_ENVIRON_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && echo R_PROFILE_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && chmod a+rx /xcpEngine/xcpEngine'\nENV XCPEDIR=\"/xcpEngine\" \\\n    AFNI_PATH=\"/opt/afni-latest/\" \\\n    C3D_PATH=\"/opt/convert3d-nightly/bin/\" \\\n    PATH=\"$PATH:/xcpEngine\"\nRUN mkdir /data /out /work /design /cohort\nENTRYPOINT [\"/xcpEngine/xcpEngine\"]\n","injectedSmells":[],"originalDockerfileHash":"a7ae4071c7dae5c76f8eb6c869aa0074","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM neurodebian:stretch\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    ND_ENTRYPOINT=\"/neurodocker/startup.sh\"\nRUN export ND_ENTRYPOINT=\"/neurodocker/startup.sh\" \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends apt-utils bzip2 ca-certificates python3-dev gcc curl locales unzip wget zlib1g-dev libnifti-dev libxml2-dev libssl-dev libcurl4-openssl-dev libssl-dev libcairo2-dev -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=\"en_US.UTF-8\" \\\n && chmod 777 /opt \\\n && chmod a+s /opt \\\n && mkdir -p /neurodocker \\\n && if [ ! -f \"$ND_ENTRYPOINT\" ] ; then echo '#!/usr/bin/env bash' >> \"$ND_ENTRYPOINT\"; fi \\\n && chmod -R 777 /neurodocker \\\n && chmod a+s /neurodocker\n#  ENV CONDA_DIR=\"/opt/miniconda-latest\" \\\n#  PATH=\"/opt/miniconda-latest/bin:$PATH\"\n#  RUN export PATH=\"/opt/miniconda-latest/bin:$PATH\" \\\n#   && echo \"Downloading Miniconda installer ...\" \\\n#  && conda_installer=\"/tmp/miniconda.sh\" \\\n#  && curl -fsSL --retry 5 -o \"$conda_installer\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n#  && bash \"$conda_installer\" -b -p /opt/miniconda-latest \\\n#  && rm -f \"$conda_installer\" \\\n#  && conda update -yq -nbase conda \\\n#  && conda config --system --prepend channels conda-forge \\\n#  && conda config --system --set auto_update_conda false \\\n#  && conda config --system --set show_channel_urls true \\\n#  && sync && conda clean -tipsy && sync \\\n#  && conda create -y -q --name neuro \\\n#   && conda install -y -q --name neuro \\\nRUN apt-get update \\\n && apt-get install python3-pip python3-dev -y \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN pip install numpy pandas traits scikit-learn --no-cache-dir\nRUN pip install nipype nibabel niworkflows nilearn matplotlib --no-cache-dir\nRUN rm -rf ~/.cache/pip/* \\\n && sync\nRUN apt-get update\nENV FSLDIR=\"/opt/fsl-5.0.10\" \\\n    PATH=\"/opt/fsl-5.0.10/bin:$PATH\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends bc git wget dc file libfontconfig1 libfreetype6 libgl1-mesa-dev libglu1-mesa-dev libgomp1 libice6 libmng1 libxcursor1 libxft2 libxinerama1 libxrandr2 libxrender1 libxt6 wget -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && echo \"Downloading FSL ...\" \\\n && mkdir -p /opt/fsl-5.0.10 \\\n && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz | tar -xz -C /opt/fsl-5.0.10 --strip-components 1 \\\n && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \\\n && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \\\n && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \\\n && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \\\n && echo \"Installing FSL conda environment ...\" \\\n && bash /opt/fsl-5.0.10/etc/fslconf/fslpython_install.sh -f /opt/fsl-5.0.10\nENV C3DPATH=\"/opt/convert3d-1.0.0\" \\\n    PATH=\"/opt/convert3d-1.0.0/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-1.0.0 \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-1.0.0 --strip-components 1\nENV PATH=\"/opt/afni-latest:$PATH\" \\\n    AFNI_PLUGINPATH=\"/opt/afni-latest\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ed gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libnlopt-dev libxm4 netpbm r-base r-base-dev tcsh xfonts-base xvfb -y -q \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL --retry 5 -o /tmp/libxp6_1.0.2-2_amd64.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6_1.0.2-2_amd64.deb \\\n && rm /tmp/libxp6_1.0.2-2_amd64.deb \\\n && apt-get clean \\\n && apt-get update \\\n && apt-get install -f \\\n && dpkg --configure -a \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && dpkg -i /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && rm /tmp/libpng12-0_1.2.50-2+deb8u3_amd64.deb \\\n && apt-get install -f \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && gsl2_path=\"$( find / -name 'libgsl.so.19' || printf '' ;)\" \\\n && if [ -n \"$gsl2_path\" ] ; then ln -sfv \"$gsl2_path\" \"$( dirname $gsl2_path ;)/libgsl.so.0\" ; fi \\\n && ldconfig \\\n && echo \"Downloading AFNI ...\" \\\n && mkdir -p /opt/afni-latest \\\n && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz | tar -xz -C /opt/afni-latest --strip-components 1 \\\n && PATH=$PATH:/opt/afni-latest rPkgsInstall -pkgs ALL\nRUN bash -c 'export PATH=/opt/afni-latest:$PATH \\\n && rPkgsInstall -pkgs ALL \\\n && rPkgsInstall -pkgs optparse,pracma,RNifti,svglite,signal,reshape2,ggplot2,lme4'\n#   Installing ANTs latest from source\nARG ANTS_SHA=51855944553a73960662d3e4f7c1326e584b23b2\nADD https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh /cmake-3.11.4-Linux-x86_64.sh\nENV ANTSPATH=\"/opt/ants-latest/bin\" \\\n    PATH=\"/opt/ants-latest/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/opt/ants-latest/lib:$LD_LIBRARY_PATH\"\nRUN mkdir /opt/cmake \\\n && sh /cmake-3.11.4-Linux-x86_64.sh --prefix=/opt/cmake --skip-license \\\n && ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends g++ gcc make zlib1g-dev imagemagick -y -q \\\n && mkdir /tmp/ants \\\n && cd /tmp \\\n && curl -sSLO https://github.com/ANTsX/ANTs/archive/${ANTS_SHA}.zip \\\n && unzip ${ANTS_SHA}.zip \\\n && mv ANTs-${ANTS_SHA} /tmp/ants/source \\\n && rm ${ANTS_SHA}.zip \\\n && mkdir -p /tmp/ants/build \\\n && cd /tmp/ants/build \\\n && git config --global url.\"https://\".insteadOf git:// \\\n && cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source \\\n && make -j1 \\\n && mkdir -p /opt/ants-latest \\\n && mv bin lib /opt/ants-latest/ \\\n && mv /tmp/ants/source/Scripts/* /opt/ants-latest/bin \\\n && rm -rf /tmp/ants \\\n && rm -rf /opt/cmake /usr/local/bin/cmake\nENV C3DPATH=\"/opt/convert3d-nightly\" \\\n    PATH=\"/opt/convert3d-nightly/bin:$PATH\"\nRUN echo \"Downloading Convert3D ...\" \\\n && mkdir -p /opt/convert3d-nightly \\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download | tar -xz -C /opt/convert3d-nightly --strip-components 1\nRUN apt-get install --no-install-recommends procps -y -q\nRUN sed -i '$iexport XCPEDIR=/xcpEngine' $ND_ENTRYPOINT\nRUN sed -i '$iexport PATH=$PATH:$XCPEDIR' $ND_ENTRYPOINT\nRUN echo 'export USER=\"${USER:=`whoami`}\"' >> \"$ND_ENTRYPOINT\"\nADD . /xcpEngine\nRUN bash -c 'cd /xcpEngine \\\n && wget -nv https://upenn.box.com/shared/static/i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && tar xvfJm i30llenk6s37kv8nkqxgulwylaxp928g.xz \\\n && rm i30llenk6s37kv8nkqxgulwylaxp928g.xz'\nRUN bash -c 'BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine FSLDIR=/opt/fsl-5.0.10 AFNI_PATH=/opt/afni-latest C3D_PATH=/opt/convert3d-nightly/bin ANTSPATH=/opt/ants-latest/bin /xcpEngine/xcpReset \\\n && BRAINATLAS=/xcpEngine/atlas BRAINSPACE=/xcpEngine/space XCPEDIR=/xcpEngine /xcpEngine/utils/repairMetadata'\nRUN bash -c 'echo R_ENVIRON_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && echo R_PROFILE_USER\\=\"\" >> /usr/lib/R/etc/Renviron \\\n && chmod a+rx /xcpEngine/xcpEngine'\nENV XCPEDIR=\"/xcpEngine\" \\\n    AFNI_PATH=\"/opt/afni-latest/\" \\\n    C3D_PATH=\"/opt/convert3d-nightly/bin/\" \\\n    PATH=\"$PATH:/xcpEngine\"\nRUN mkdir /data /out /work /design /cohort\nENTRYPOINT [\"/xcpEngine/xcpEngine\"]\n","originalDockerfileUglifiedHash":"89ad073c6e242e74e7f6b9a8076b04b6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e305d8127f7681a397508673bbba33d286b7e433.dockerfile"}