{"seed":3788259714,"processedDockerfileHash":"0e2a2c7254d4e14496ed82c40d45dad0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Use Ubuntu 16.04 + wine-staging as a base for MSVC2017\nFROM boberfly/docker-wine:latest AS builder\n#   For running anything headless in wine that needs a GUI, and 7zip\nRUN apt-get update \\\n && apt-get install --no-install-recommends xvfb=2:21.1.7-1ubuntu2 p7zip-full=16.02+dfsg-8 -y\n#   To get VisualCpp\nRUN apt-get install --no-install-recommends nuget=2.8.7+md510+dhx1-1.1 ca-certificates-mono=6.8.0.105+dfsg-3.3 -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#   This one makes it so the certificates get picked up by nuget\nENV TZ=\"UTC\"\n#   For a headless wine experience, why not try xvfb?\nCOPY xvfb-start.sh /usr/bin/xvfb-start\n#   From now onwards we take the role of the wine user\nUSER wine:wine\n#   Now we grab MSVC 2017 Community from Nuget\nWORKDIR /home/wine\nRUN nuget install VisualCppTools.Community.VS2017Layout -Version 14.11.25506 \\\n && rm VisualCppTools.Community.VS2017Layout.14.11.25506/VisualCppTools.Community.VS2017Layout.14.11.25506.nupkg \\\n && nuget install Git-Windows-Minimal -Version 2.17.0 \\\n && rm Git-Windows-Minimal.2.17.0/Git-Windows-Minimal.2.17.0.nupkg\n#   Download the Windows SDK, uncomment COPY and comment out ADD if you have the sdk local and named win10sdk.iso\n#  COPY --chown=wine:wine win10sdk.iso /home/wine/win10sdk.iso\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /home/wine/win10sdk.iso https://go.microsoft.com/fwlink/p/?linkid=870809\n#   Python 2.7\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document python.msi https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi\n#   This convoluted RUN will extract and install the .msi's we are interested in for building against Windows 10\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && mkdir /home/wine/win10sdk \\\n && cd /home/wine/win10sdk \\\n && 7z x ../win10sdk.iso \\\n && rm ../win10sdk.iso \\\n && cd Installers \\\n && wine wineboot --init \\\n && wine msiexec /i \"Windows SDK Desktop Headers x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Headers x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Headers-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Libs-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Legacy Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Universal CRT Headers Libraries and Sources-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Z:\\home\\wine\\python.msi\" /qn \\\n && cd /home/wine \\\n && rm -rf win10sdk \\\n && rm python.msi\nWORKDIR /home/wine/.wine/drive_c\n#   Time to grab CMake and friends.\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document cmake.zip https://cmake.org/files/v3.10/cmake-3.10.3-win64-x64.zip\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document jom.zip http://download.qt.io/official_releases/jom/jom.zip\nRUN 7z x cmake.zip \\\n && rm cmake.zip \\\n && mkdir ninja \\\n && cd ninja \\\n && 7z x ../ninja.zip \\\n && cd .. \\\n && rm ninja.zip \\\n && mkdir jom \\\n && cd jom \\\n && 7z x ../jom.zip \\\n && cd .. \\\n && rm jom.zip\nUSER root\n#   END\n#   Now lets make a lighter image\nFROM boberfly/docker-wine:latest\nWORKDIR /opt/\nCOPY --from=builder /home/wine/VisualCppTools.Community.VS2017Layout.14.11.25506 msvc2017\nCOPY --from=builder /home/wine/.wine/drive_c/Program Files (x86)/Windows Kits/10 win10sdk/\nCOPY --from=builder /home/wine/.wine/drive_c/cmake-3.10.3-win64-x64 cmake\nCOPY --from=builder /home/wine/.wine/drive_c/ninja ninja\nCOPY --from=builder /home/wine/.wine/drive_c/jom jom\nCOPY --from=builder /home/wine/.wine/drive_c/Python27 python27\nCOPY --from=builder /home/wine/Git-Windows-Minimal.2.17.0 git\nCOPY --from=builder /usr/bin/xvfb-start /usr/bin/xvfb-start\nRUN apt-get install --no-install-recommends xvfb=2:21.1.7-1ubuntu2 git=1:2.39.2-1ubuntu1 nano=7.2-1 -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\nUSER wine:wine\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && wine wineboot --init \\\n && winetricks -q vcrun2017 cmd \\\n && winetricks -q win7\n#   Copy an env we prepared earlier\nCOPY --chown=wine:wine msvc2017x64env.bat /home/wine/.wine/drive_c/msvc2017x64env.bat\nCOPY entrypoint_msvc.sh /usr/bin/entrypoint_msvc\n#   Symlink all the things!\nWORKDIR /home/wine/.wine/drive_c/\nRUN ln -s /opt/msvc2017 msvc2017 \\\n && ln -s /opt/win10sdk win10sdk \\\n && ln -s /opt/cmake cmake \\\n && ln -s /opt/ninja ninja \\\n && ln -s /opt/jom jom \\\n && ln -s /opt/python27 python27 \\\n && ln -s /opt/git git\nUSER root\n#   vctip.exe is a telemetry tool which isn't needed and it causes weird stack traces in cmd...\nRUN rm /opt/msvc2017/lib/native/bin/Hostx64/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx64/x86/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x86/VCTIP.exe\n#   So that when docker runs we can copy over the guts to a volume\n#  VOLUME /home/wine\n#   Start with a generic entrypoint.\nENTRYPOINT [\"/usr/bin/entrypoint_msvc\"]\n#   Default to cmd with MSVC 2017 64-bit as the default target.\nCMD [\"/usr/bin/entrypoint_msvc\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Use Ubuntu 16.04 + wine-staging as a base for MSVC2017\nFROM boberfly/docker-wine:latest AS builder\n#  For running anything headless in wine that needs a GUI, and 7zip\nRUN apt-get update \\\n && apt-get install xvfb p7zip-full -y\n#  To get VisualCpp\nRUN apt-get install nuget ca-certificates-mono -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#  This one makes it so the certificates get picked up by nuget\nENV TZ=\"UTC\"\n#  For a headless wine experience, why not try xvfb?\nCOPY xvfb-start.sh /usr/bin/xvfb-start\n#  From now onwards we take the role of the wine user\nUSER wine:wine\n#  Now we grab MSVC 2017 Community from Nuget\nWORKDIR /home/wine\nRUN nuget install VisualCppTools.Community.VS2017Layout -Version 14.11.25506 \\\n && rm VisualCppTools.Community.VS2017Layout.14.11.25506/VisualCppTools.Community.VS2017Layout.14.11.25506.nupkg \\\n && nuget install Git-Windows-Minimal -Version 2.17.0 \\\n && rm Git-Windows-Minimal.2.17.0/Git-Windows-Minimal.2.17.0.nupkg\n#  Download the Windows SDK, uncomment COPY and comment out ADD if you have the sdk local and named win10sdk.iso\n# COPY --chown=wine:wine win10sdk.iso /home/wine/win10sdk.iso\nADD --chown=wine:wine https://go.microsoft.com/fwlink/p/?linkid=870809 /home/wine/win10sdk.iso\n#  Python 2.7\nADD --chown=wine:wine https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi python.msi\n#  This convoluted RUN will extract and install the .msi's we are interested in for building against Windows 10\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && mkdir /home/wine/win10sdk \\\n && cd /home/wine/win10sdk \\\n && 7z x ../win10sdk.iso \\\n && rm ../win10sdk.iso \\\n && cd Installers \\\n && wine wineboot --init \\\n && wine msiexec /i \"Windows SDK Desktop Headers x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Headers x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Headers-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Libs-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Legacy Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Universal CRT Headers Libraries and Sources-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Z:\\home\\wine\\python.msi\" /qn \\\n && cd /home/wine \\\n && rm -rf win10sdk \\\n && rm python.msi\nWORKDIR /home/wine/.wine/drive_c\n#  Time to grab CMake and friends.\nADD --chown=wine:wine https://cmake.org/files/v3.10/cmake-3.10.3-win64-x64.zip cmake.zip\nADD --chown=wine:wine https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip ninja.zip\nADD --chown=wine:wine http://download.qt.io/official_releases/jom/jom.zip jom.zip\nRUN 7z x cmake.zip \\\n && rm cmake.zip \\\n && mkdir ninja \\\n && cd ninja \\\n && 7z x ../ninja.zip \\\n && cd .. \\\n && rm ninja.zip \\\n && mkdir jom \\\n && cd jom \\\n && 7z x ../jom.zip \\\n && cd .. \\\n && rm jom.zip\nUSER root\n#  END\n#  Now lets make a lighter image\nFROM boberfly/docker-wine:latest\nWORKDIR /opt/\nCOPY --from=builder /home/wine/VisualCppTools.Community.VS2017Layout.14.11.25506 msvc2017\nCOPY --from=builder /home/wine/.wine/drive_c/Program Files (x86)/Windows Kits/10 win10sdk\nCOPY --from=builder /home/wine/.wine/drive_c/cmake-3.10.3-win64-x64 cmake\nCOPY --from=builder /home/wine/.wine/drive_c/ninja ninja\nCOPY --from=builder /home/wine/.wine/drive_c/jom jom\nCOPY --from=builder /home/wine/.wine/drive_c/Python27 python27\nCOPY --from=builder /home/wine/Git-Windows-Minimal.2.17.0 git\nCOPY --from=builder /usr/bin/xvfb-start /usr/bin/xvfb-start\nRUN apt-get install xvfb git nano -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\nUSER wine:wine\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && wine wineboot --init \\\n && winetricks -q vcrun2017 cmd \\\n && winetricks -q win7\n#  Copy an env we prepared earlier\nCOPY --chown=wine:wine msvc2017x64env.bat /home/wine/.wine/drive_c/msvc2017x64env.bat\nCOPY entrypoint_msvc.sh /usr/bin/entrypoint_msvc\n#  Symlink all the things!\nWORKDIR /home/wine/.wine/drive_c/\nRUN ln -s /opt/msvc2017 msvc2017 \\\n && ln -s /opt/win10sdk win10sdk \\\n && ln -s /opt/cmake cmake \\\n && ln -s /opt/ninja ninja \\\n && ln -s /opt/jom jom \\\n && ln -s /opt/python27 python27 \\\n && ln -s /opt/git git\nUSER root\n#  vctip.exe is a telemetry tool which isn't needed and it causes weird stack traces in cmd...\nRUN rm /opt/msvc2017/lib/native/bin/Hostx64/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx64/x86/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x86/VCTIP.exe\n#  So that when docker runs we can copy over the guts to a volume\n# VOLUME /home/wine\n#  Start with a generic entrypoint.\nENTRYPOINT [\"/usr/bin/entrypoint_msvc\"]\n#  Default to cmd with MSVC 2017 64-bit as the default target.\nCMD [\"/usr/bin/entrypoint_msvc\"]\n","injectedSmells":[],"originalDockerfileHash":"9a171454ad5babfe9224b691e1cc4182","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Use Ubuntu 16.04 + wine-staging as a base for MSVC2017\nFROM boberfly/docker-wine:latest AS builder\n#   For running anything headless in wine that needs a GUI, and 7zip\nRUN apt-get update \\\n && apt-get install xvfb p7zip-full -y\n#   To get VisualCpp\nRUN apt-get install nuget ca-certificates-mono -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#   This one makes it so the certificates get picked up by nuget\nENV TZ=\"UTC\"\n#   For a headless wine experience, why not try xvfb?\nCOPY xvfb-start.sh /usr/bin/xvfb-start\n#   From now onwards we take the role of the wine user\nUSER wine:wine\n#   Now we grab MSVC 2017 Community from Nuget\nWORKDIR /home/wine\nRUN nuget install VisualCppTools.Community.VS2017Layout -Version 14.11.25506 \\\n && rm VisualCppTools.Community.VS2017Layout.14.11.25506/VisualCppTools.Community.VS2017Layout.14.11.25506.nupkg \\\n && nuget install Git-Windows-Minimal -Version 2.17.0 \\\n && rm Git-Windows-Minimal.2.17.0/Git-Windows-Minimal.2.17.0.nupkg\n#   Download the Windows SDK, uncomment COPY and comment out ADD if you have the sdk local and named win10sdk.iso\n#  COPY --chown=wine:wine win10sdk.iso /home/wine/win10sdk.iso\nADD --chown=wine:wine https://go.microsoft.com/fwlink/p/?linkid=870809 /home/wine/win10sdk.iso\n#   Python 2.7\nADD --chown=wine:wine https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi python.msi\n#   This convoluted RUN will extract and install the .msi's we are interested in for building against Windows 10\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && mkdir /home/wine/win10sdk \\\n && cd /home/wine/win10sdk \\\n && 7z x ../win10sdk.iso \\\n && rm ../win10sdk.iso \\\n && cd Installers \\\n && wine wineboot --init \\\n && wine msiexec /i \"Windows SDK Desktop Headers x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Headers x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Libs x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x64-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK Desktop Tools x86-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Headers-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Libs-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Windows SDK for Windows Store Apps Legacy Tools-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Universal CRT Headers Libraries and Sources-x86_en-us.msi\" /qn \\\n && wine msiexec /i \"Z:\\home\\wine\\python.msi\" /qn \\\n && cd /home/wine \\\n && rm -rf win10sdk \\\n && rm python.msi\nWORKDIR /home/wine/.wine/drive_c\n#   Time to grab CMake and friends.\nADD --chown=wine:wine https://cmake.org/files/v3.10/cmake-3.10.3-win64-x64.zip cmake.zip\nADD --chown=wine:wine https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip ninja.zip\nADD --chown=wine:wine http://download.qt.io/official_releases/jom/jom.zip jom.zip\nRUN 7z x cmake.zip \\\n && rm cmake.zip \\\n && mkdir ninja \\\n && cd ninja \\\n && 7z x ../ninja.zip \\\n && cd .. \\\n && rm ninja.zip \\\n && mkdir jom \\\n && cd jom \\\n && 7z x ../jom.zip \\\n && cd .. \\\n && rm jom.zip\nUSER root\n#   END\n#   Now lets make a lighter image\nFROM boberfly/docker-wine:latest\nWORKDIR /opt/\nCOPY --from=builder /home/wine/VisualCppTools.Community.VS2017Layout.14.11.25506 msvc2017\nCOPY --from=builder /home/wine/.wine/drive_c/Program Files (x86)/Windows Kits/10 win10sdk/\nCOPY --from=builder /home/wine/.wine/drive_c/cmake-3.10.3-win64-x64 cmake\nCOPY --from=builder /home/wine/.wine/drive_c/ninja ninja\nCOPY --from=builder /home/wine/.wine/drive_c/jom jom\nCOPY --from=builder /home/wine/.wine/drive_c/Python27 python27\nCOPY --from=builder /home/wine/Git-Windows-Minimal.2.17.0 git\nCOPY --from=builder /usr/bin/xvfb-start /usr/bin/xvfb-start\nRUN apt-get install xvfb git nano -y \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\nUSER wine:wine\nRUN xvfb-start \\\n && export DISPLAY=:99 \\\n && wine wineboot --init \\\n && winetricks -q vcrun2017 cmd \\\n && winetricks -q win7\n#   Copy an env we prepared earlier\nCOPY --chown=wine:wine msvc2017x64env.bat /home/wine/.wine/drive_c/msvc2017x64env.bat\nCOPY entrypoint_msvc.sh /usr/bin/entrypoint_msvc\n#   Symlink all the things!\nWORKDIR /home/wine/.wine/drive_c/\nRUN ln -s /opt/msvc2017 msvc2017 \\\n && ln -s /opt/win10sdk win10sdk \\\n && ln -s /opt/cmake cmake \\\n && ln -s /opt/ninja ninja \\\n && ln -s /opt/jom jom \\\n && ln -s /opt/python27 python27 \\\n && ln -s /opt/git git\nUSER root\n#   vctip.exe is a telemetry tool which isn't needed and it causes weird stack traces in cmd...\nRUN rm /opt/msvc2017/lib/native/bin/Hostx64/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx64/x86/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x64/VCTIP.exe \\\n && rm /opt/msvc2017/lib/native/bin/Hostx86/x86/VCTIP.exe\n#   So that when docker runs we can copy over the guts to a volume\n#  VOLUME /home/wine\n#   Start with a generic entrypoint.\nENTRYPOINT [\"/usr/bin/entrypoint_msvc\"]\n#   Default to cmd with MSVC 2017 64-bit as the default target.\nCMD [\"/usr/bin/entrypoint_msvc\"]\n","originalDockerfileUglifiedHash":"5a45b804b9c528b419d2b6792642a624","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3f3ce6cb7dc9fe2a5cfdb80aac68dd1ac19aa56a.dockerfile"}