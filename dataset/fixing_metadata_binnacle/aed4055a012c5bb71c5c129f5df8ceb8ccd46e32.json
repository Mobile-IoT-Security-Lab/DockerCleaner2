{"seed":1704667940,"processedDockerfileHash":"5a48fa5a2adfe0c68353e6781267592a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  # Dockerfile to build opencv from sources with CUDA support\n#  # Based on Josip Janzic file and Thomas Herbin's work\n#   FROM nvidia/cuda:9.0-devel\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Fergal Cotter <fbc23@cam.ac.uk>\n#  ##########################\n#  ## TENSORFLOW INSTALL  ###\n#  ##########################\nARG https_proxy\nARG http_proxy\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git wget unzip yasm pkg-config curl -y\nRUN apt-get install --no-install-recommends libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libavformat-dev libpq-dev libxine2-dev libglew-dev libtiff5-dev zlib1g-dev libjpeg-dev libpng12-dev libjasper-dev libavcodec-dev libavformat-dev libavutil-dev libpostproc-dev libswscale-dev libeigen3-dev libtbb-dev libgtk2.0-dev -y\n#   libcudnn7=7.1.4.18-1+cuda9.0 \nRUN apt-get install --no-install-recommends python3-dev python3-numpy python3-pip -y\n#  # Cleanup\nRUN rm -rf /var/lib/apt/lists/*\n#   Python dependencies\nRUN pip3 --no-cache-dir install numpy hdf5storage h5py scipy py3nvml\n#   Install tensorflow\nRUN pip3 --no-cache-dir install tensorflow-gpu==1.8.0\n#   Set the library path to use cuda and cupti\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\n#  #######################\n#  ##  OPENCV INSTALL  ###\n#  #######################\nARG OPENCV_VERSION=3.4.1\n#   ARG OPENCV_INSTALL_PATH=/usr/local\n#  # Create install directory\n#  # Force success as the only reason for a fail is if it exist\n#   RUN mkdir -p $OPENCV_INSTALL_PATH; exit 0\nWORKDIR /\n#  # Single command to reduce image size\n#  # Build opencv\nRUN wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \\\n && unzip $OPENCV_VERSION.zip \\\n && mkdir /opencv-$OPENCV_VERSION/cmake_binary \\\n && cd /opencv-$OPENCV_VERSION/cmake_binary \\\n && cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=ON -DWITH_CUBLAS=1 -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -DCUDA_ARCH_BIN='3.0 3.5 5.0 6.0 6.2' -DCUDA_ARCH_PTX=\"\" -DCPU_DISPATCH=AVX,AVX2 -DENABLE_PRECOMPILED_HEADERS=OFF -DWITH_OPENGL=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_IPP=ON -DWITH_TBB=ON -DFORCE_VTK=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_XINE=ON -DWITH_GDAL=ON -DWITH_1394=OFF -DWITH_FFMPEG=OFF -DBUILD_PROTOBUF=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE .. \\\n && export NUMPROC=$( nproc --all ;) \\\n && make -j$NUMPROC install \\\n && rm /$OPENCV_VERSION.zip \\\n && rm -r /opencv-$OPENCV_VERSION\n#  # Compress the openCV files so you can extract them from the docker easily \n#   RUN tar cvzf opencv-$OPENCV_VERSION.tar.gz --directory=$OPENCV_INSTALL_PATH .\nWORKDIR /home\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# # Dockerfile to build opencv from sources with CUDA support\n# # Based on Josip Janzic file and Thomas Herbin's work\n#  FROM nvidia/cuda:9.0-devel\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Fergal Cotter <fbc23@cam.ac.uk>\n# ##########################\n# ## TENSORFLOW INSTALL  ###\n# ##########################\nARG https_proxy\nARG http_proxy\nRUN apt-get update \\\n && apt-get install build-essential cmake git wget unzip yasm pkg-config curl -y\nRUN apt-get install libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libavformat-dev libpq-dev libxine2-dev libglew-dev libtiff5-dev zlib1g-dev libjpeg-dev libpng12-dev libjasper-dev libavcodec-dev libavformat-dev libavutil-dev libpostproc-dev libswscale-dev libeigen3-dev libtbb-dev libgtk2.0-dev -y\n#  libcudnn7=7.1.4.18-1+cuda9.0 \nRUN apt-get install python3-dev python3-numpy python3-pip -y\n# # Cleanup\nRUN rm -rf /var/lib/apt/lists/*\n#  Python dependencies\nRUN pip3 --no-cache-dir install numpy hdf5storage h5py scipy py3nvml\n#  Install tensorflow\nRUN pip3 --no-cache-dir install tensorflow-gpu==1.8.0\n#  Set the library path to use cuda and cupti\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\n# #######################\n# ##  OPENCV INSTALL  ###\n# #######################\nARG OPENCV_VERSION=3.4.1\n#  ARG OPENCV_INSTALL_PATH=/usr/local\n# # Create install directory\n# # Force success as the only reason for a fail is if it exist\n#  RUN mkdir -p $OPENCV_INSTALL_PATH; exit 0\nWORKDIR /\n# # Single command to reduce image size\n# # Build opencv\nRUN wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \\\n && unzip $OPENCV_VERSION.zip \\\n && mkdir /opencv-$OPENCV_VERSION/cmake_binary \\\n && cd /opencv-$OPENCV_VERSION/cmake_binary \\\n && cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=ON -DWITH_CUBLAS=1 -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -DCUDA_ARCH_BIN='3.0 3.5 5.0 6.0 6.2' -DCUDA_ARCH_PTX=\"\" -DCPU_DISPATCH=AVX,AVX2 -DENABLE_PRECOMPILED_HEADERS=OFF -DWITH_OPENGL=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_IPP=ON -DWITH_TBB=ON -DFORCE_VTK=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_XINE=ON -DWITH_GDAL=ON -DWITH_1394=OFF -DWITH_FFMPEG=OFF -DBUILD_PROTOBUF=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE .. \\\n && export NUMPROC=$( nproc --all ;) \\\n && make -j$NUMPROC install \\\n && rm /$OPENCV_VERSION.zip \\\n && rm -r /opencv-$OPENCV_VERSION\n# # Compress the openCV files so you can extract them from the docker easily \n#  RUN tar cvzf opencv-$OPENCV_VERSION.tar.gz --directory=$OPENCV_INSTALL_PATH .\nWORKDIR /home\n","injectedSmells":[],"originalDockerfileHash":"5feddb68753d3708ede30c23659b2b24","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  # Dockerfile to build opencv from sources with CUDA support\n#  # Based on Josip Janzic file and Thomas Herbin's work\n#   FROM nvidia/cuda:9.0-devel\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Fergal Cotter <fbc23@cam.ac.uk>\n#  ##########################\n#  ## TENSORFLOW INSTALL  ###\n#  ##########################\nARG https_proxy\nARG http_proxy\nRUN apt-get update \\\n && apt-get install build-essential cmake git wget unzip yasm pkg-config curl -y\nRUN apt-get install libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libavformat-dev libpq-dev libxine2-dev libglew-dev libtiff5-dev zlib1g-dev libjpeg-dev libpng12-dev libjasper-dev libavcodec-dev libavformat-dev libavutil-dev libpostproc-dev libswscale-dev libeigen3-dev libtbb-dev libgtk2.0-dev -y\n#   libcudnn7=7.1.4.18-1+cuda9.0 \nRUN apt-get install python3-dev python3-numpy python3-pip -y\n#  # Cleanup\nRUN rm -rf /var/lib/apt/lists/*\n#   Python dependencies\nRUN pip3 --no-cache-dir install numpy hdf5storage h5py scipy py3nvml\n#   Install tensorflow\nRUN pip3 --no-cache-dir install tensorflow-gpu==1.8.0\n#   Set the library path to use cuda and cupti\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\n#  #######################\n#  ##  OPENCV INSTALL  ###\n#  #######################\nARG OPENCV_VERSION=3.4.1\n#   ARG OPENCV_INSTALL_PATH=/usr/local\n#  # Create install directory\n#  # Force success as the only reason for a fail is if it exist\n#   RUN mkdir -p $OPENCV_INSTALL_PATH; exit 0\nWORKDIR /\n#  # Single command to reduce image size\n#  # Build opencv\nRUN wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \\\n && unzip $OPENCV_VERSION.zip \\\n && mkdir /opencv-$OPENCV_VERSION/cmake_binary \\\n && cd /opencv-$OPENCV_VERSION/cmake_binary \\\n && cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DBUILD_SHARED_LIBS=OFF -DWITH_CUDA=ON -DWITH_CUBLAS=1 -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -DCUDA_ARCH_BIN='3.0 3.5 5.0 6.0 6.2' -DCUDA_ARCH_PTX=\"\" -DCPU_DISPATCH=AVX,AVX2 -DENABLE_PRECOMPILED_HEADERS=OFF -DWITH_OPENGL=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_IPP=ON -DWITH_TBB=ON -DFORCE_VTK=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_XINE=ON -DWITH_GDAL=ON -DWITH_1394=OFF -DWITH_FFMPEG=OFF -DBUILD_PROTOBUF=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE .. \\\n && export NUMPROC=$( nproc --all ;) \\\n && make -j$NUMPROC install \\\n && rm /$OPENCV_VERSION.zip \\\n && rm -r /opencv-$OPENCV_VERSION\n#  # Compress the openCV files so you can extract them from the docker easily \n#   RUN tar cvzf opencv-$OPENCV_VERSION.tar.gz --directory=$OPENCV_INSTALL_PATH .\nWORKDIR /home\n","originalDockerfileUglifiedHash":"904f6b5b4e22bce3ad07cec2f8fa1aa6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/aed4055a012c5bb71c5c129f5df8ceb8ccd46e32.dockerfile"}