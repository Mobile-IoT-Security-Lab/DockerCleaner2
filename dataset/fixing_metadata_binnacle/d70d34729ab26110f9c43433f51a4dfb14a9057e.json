{"seed":558429071,"processedDockerfileHash":"6881aaf65346e7cf6f6b1b4379d96fa2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#\n#   DO NOT MODIFY THIS FILE.  THIS FILE HAS BEEN AUTOGENERATED\n#\nFROM openjdk:8-jdk-slim\nLABEL maintainer=\"marc@circleci.com\"\n#   Initial Command run as `root`.\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /bin/circle-android https://raw.githubusercontent.com/circleci/circleci-images/master/android/bin/circle-android\nRUN chmod +rx /bin/circle-android\n#   Skip the first line of the Dockerfile template (FROM ${BASE})\n#   make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   man directory is missing in some base images\n#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 \\\n && apt-get install --no-install-recommends git=1:2.30.2-1+deb11u2 mercurial=5.6.1-4 xvfb=2:1.20.11-1+deb11u6 locales=2.31-13+deb11u5 sudo=1.9.5p2-3+deb11u1 openssh-client=1:8.4p1-5+deb11u1 ca-certificates=20210119 tar=1.34+dfsg-1 gzip=1.10-4+deb11u1 parallel=20161222-1.1 net-tools=1.60+git20181103.0eebece-1 netcat=1.10-46 unzip=6.0-26+deb11u1 zip=3.0-12 bzip2=1.0.8-4 gnupg=2.2.27-2+deb11u2 curl=7.74.0-1.3+deb11u7 wget=1.21-1+deb11u1 -y\n#   Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#   Use unicode\nRUN locale-gen C.UTF-8 || true\nENV LANG=\"C.UTF-8\"\n#   install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#   Install Docker\n#   Docker.com returns the URL of the latest binary when you hit a directory listing\n#   We curl this URL and `grep` the version out.\n#   The output looks like this:\n#  >    # To install, run the following commands as root:\n#  >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n#  >\n#  >    # Then start docker in daemon mode:\n#  >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#   docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#   BEGIN IMAGE CUSTOMIZATIONS\n#   END IMAGE CUSTOMIZATIONS\nUSER circleci\nCMD [\"/bin/sh\"]\n#   Now commands run as user `circleci`\n#   Switching user can confuse Docker's idea of $HOME, so we set it explicitly\nENV HOME=\"/home/circleci\"\n#   Install Google Cloud SDK\nRUN sudo apt-get update -qqy \\\n && sudo apt-get install -qqy python-dev python-setuptools apt-transport-https lsb-release\nRUN sudo apt-get install gcc-multilib \\\n && sudo easy_install -U pip \\\n && sudo pip uninstall crcmod \\\n && sudo pip install -U crcmod\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\nRUN sudo apt-get update \\\n && sudo apt-get install -y google-cloud-sdk \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true\nARG sdk_version=sdk-tools-linux-3859397.zip\nARG android_home=/opt/android/sdk\n#   SHA-256 444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0\nRUN sudo apt-get update \\\n && sudo apt-get install --yes xvfb lib32z1 lib32stdc++6 build-essential libcurl4-openssl-dev libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev\n#   Install Ruby\nRUN cd /tmp \\\n && wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz \\\n && tar -xzvf ruby-install-0.6.1.tar.gz \\\n && cd ruby-install-0.6.1 \\\n && sudo make install \\\n && ruby-install --cleanup ruby 2.4.3 \\\n && rm -r /tmp/ruby-install-*\nENV PATH=\"${HOME}/.rubies/ruby-2.4.3/bin:${PATH}\"\nRUN echo 'gem: --env-shebang --no-rdoc --no-ri' >> ~/.gemrc \\\n && gem install bundler --version 2.4.12\n#   Download and install Android SDK\nRUN sudo mkdir -p ${android_home} \\\n && sudo chown -R circleci:circleci ${android_home} \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/${sdk_version} https://dl.google.com/android/repository/${sdk_version} \\\n && unzip -q /tmp/${sdk_version} -d ${android_home} \\\n && rm /tmp/${sdk_version}\n#   Set environmental variables\nENV ANDROID_HOME=\"${android_home}\"\nENV ADB_INSTALL_TIMEOUT=\"120\"\nENV PATH=\"${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}\"\nRUN mkdir ~/.android \\\n && echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg\nRUN yes | sdkmanager --licenses \\\n && sdkmanager --update\n#   Update SDK manager and install system image, platform and build tools\nRUN sdkmanager \"tools\" \"platform-tools\" \"emulator\" \"extras;android;m2repository\" \"extras;google;m2repository\" \"extras;google;google_play_services\"\nRUN sdkmanager \"build-tools;25.0.0\" \"build-tools;25.0.1\" \"build-tools;25.0.2\" \"build-tools;25.0.3\" \"build-tools;26.0.1\" \"build-tools;26.0.2\" \"build-tools;27.0.0\" \"build-tools;27.0.1\" \"build-tools;27.0.2\" \"build-tools;27.0.3\" \"build-tools;28.0.0\" \"build-tools;28.0.3\"\n#   API_LEVEL string gets replaced by m4\nRUN sdkmanager \"platforms;android-23\"\nARG ndk_version=android-ndk-r17b\nARG android_ndk_home=/opt/android/${ndk_version}\n#   install NDK\nRUN curl --silent --show-error --location --fail --retry 3 --output /tmp/${ndk_version}.zip https://dl.google.com/android/repository/${ndk_version}-linux-x86_64.zip \\\n && sudo unzip -q /tmp/${ndk_version}.zip -d /opt/android \\\n && rm /tmp/${ndk_version}.zip \\\n && sudo chown -R circleci:circleci ${android_ndk_home}\nENV ANDROID_NDK_HOME=\"${android_ndk_home}\"\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  DO NOT MODIFY THIS FILE.  THIS FILE HAS BEEN AUTOGENERATED\n#\nFROM openjdk:8-jdk-slim\nLABEL maintainer=\"marc@circleci.com\"\n#  Initial Command run as `root`.\nADD https://raw.githubusercontent.com/circleci/circleci-images/master/android/bin/circle-android /bin/circle-android\nRUN chmod +rx /bin/circle-android\n#  Skip the first line of the Dockerfile template (FROM ${BASE})\n#  make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  man directory is missing in some base images\n#  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 \\\n && apt-get install git mercurial xvfb locales sudo openssh-client ca-certificates tar gzip parallel net-tools netcat unzip zip bzip2 gnupg curl wget -y\n#  Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#  Use unicode\nRUN locale-gen C.UTF-8 || true\nENV LANG=\"C.UTF-8\"\n#  install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#  Install Docker\n#  Docker.com returns the URL of the latest binary when you hit a directory listing\n#  We curl this URL and `grep` the version out.\n#  The output looks like this:\n# >    # To install, run the following commands as root:\n# >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n# >\n# >    # Then start docker in daemon mode:\n# >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#  docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#  install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#  BEGIN IMAGE CUSTOMIZATIONS\n#  END IMAGE CUSTOMIZATIONS\nUSER circleci\nCMD [\"/bin/sh\"]\n#  Now commands run as user `circleci`\n#  Switching user can confuse Docker's idea of $HOME, so we set it explicitly\nENV HOME=\"/home/circleci\"\n#  Install Google Cloud SDK\nRUN sudo apt-get update -qqy \\\n && sudo apt-get install -qqy python-dev python-setuptools apt-transport-https lsb-release\nRUN sudo apt-get install gcc-multilib \\\n && sudo easy_install -U pip \\\n && sudo pip uninstall crcmod \\\n && sudo pip install -U crcmod\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\nRUN sudo apt-get update \\\n && sudo apt-get install -y google-cloud-sdk \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true\nARG sdk_version=sdk-tools-linux-3859397.zip\nARG android_home=/opt/android/sdk\n#  SHA-256 444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0\nRUN sudo apt-get update \\\n && sudo apt-get install --yes xvfb lib32z1 lib32stdc++6 build-essential libcurl4-openssl-dev libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev\n#  Install Ruby\nRUN cd /tmp \\\n && wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz \\\n && tar -xzvf ruby-install-0.6.1.tar.gz \\\n && cd ruby-install-0.6.1 \\\n && sudo make install \\\n && ruby-install --cleanup ruby 2.4.3 \\\n && rm -r /tmp/ruby-install-*\nENV PATH=\"${HOME}/.rubies/ruby-2.4.3/bin:${PATH}\"\nRUN echo 'gem: --env-shebang --no-rdoc --no-ri' >> ~/.gemrc \\\n && gem install bundler\n#  Download and install Android SDK\nRUN sudo mkdir -p ${android_home} \\\n && sudo chown -R circleci:circleci ${android_home} \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/${sdk_version} https://dl.google.com/android/repository/${sdk_version} \\\n && unzip -q /tmp/${sdk_version} -d ${android_home} \\\n && rm /tmp/${sdk_version}\n#  Set environmental variables\nENV ANDROID_HOME=\"${android_home}\"\nENV ADB_INSTALL_TIMEOUT=\"120\"\nENV PATH=\"${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}\"\nRUN mkdir ~/.android \\\n && echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg\nRUN yes | sdkmanager --licenses \\\n && sdkmanager --update\n#  Update SDK manager and install system image, platform and build tools\nRUN sdkmanager \"tools\" \"platform-tools\" \"emulator\" \"extras;android;m2repository\" \"extras;google;m2repository\" \"extras;google;google_play_services\"\nRUN sdkmanager \"build-tools;25.0.0\" \"build-tools;25.0.1\" \"build-tools;25.0.2\" \"build-tools;25.0.3\" \"build-tools;26.0.1\" \"build-tools;26.0.2\" \"build-tools;27.0.0\" \"build-tools;27.0.1\" \"build-tools;27.0.2\" \"build-tools;27.0.3\" \"build-tools;28.0.0\" \"build-tools;28.0.3\"\n#  API_LEVEL string gets replaced by m4\nRUN sdkmanager \"platforms;android-23\"\nARG ndk_version=android-ndk-r17b\nARG android_ndk_home=/opt/android/${ndk_version}\n#  install NDK\nRUN curl --silent --show-error --location --fail --retry 3 --output /tmp/${ndk_version}.zip https://dl.google.com/android/repository/${ndk_version}-linux-x86_64.zip \\\n && sudo unzip -q /tmp/${ndk_version}.zip -d /opt/android \\\n && rm /tmp/${ndk_version}.zip \\\n && sudo chown -R circleci:circleci ${android_ndk_home}\nENV ANDROID_NDK_HOME=\"${android_ndk_home}\"\n","injectedSmells":[],"originalDockerfileHash":"fc93ac69c92385f9246e720e2148f38f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   DO NOT MODIFY THIS FILE.  THIS FILE HAS BEEN AUTOGENERATED\n#\nFROM openjdk:8-jdk-slim\nLABEL maintainer=\"marc@circleci.com\"\n#   Initial Command run as `root`.\nADD https://raw.githubusercontent.com/circleci/circleci-images/master/android/bin/circle-android /bin/circle-android\nRUN chmod +rx /bin/circle-android\n#   Skip the first line of the Dockerfile template (FROM ${BASE})\n#   make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   man directory is missing in some base images\n#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 \\\n && apt-get install git mercurial xvfb locales sudo openssh-client ca-certificates tar gzip parallel net-tools netcat unzip zip bzip2 gnupg curl wget -y\n#   Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#   Use unicode\nRUN locale-gen C.UTF-8 || true\nENV LANG=\"C.UTF-8\"\n#   install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#   Install Docker\n#   Docker.com returns the URL of the latest binary when you hit a directory listing\n#   We curl this URL and `grep` the version out.\n#   The output looks like this:\n#  >    # To install, run the following commands as root:\n#  >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n#  >\n#  >    # Then start docker in daemon mode:\n#  >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#   docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#   BEGIN IMAGE CUSTOMIZATIONS\n#   END IMAGE CUSTOMIZATIONS\nUSER circleci\nCMD [\"/bin/sh\"]\n#   Now commands run as user `circleci`\n#   Switching user can confuse Docker's idea of $HOME, so we set it explicitly\nENV HOME=\"/home/circleci\"\n#   Install Google Cloud SDK\nRUN sudo apt-get update -qqy \\\n && sudo apt-get install -qqy python-dev python-setuptools apt-transport-https lsb-release\nRUN sudo apt-get install gcc-multilib \\\n && sudo easy_install -U pip \\\n && sudo pip uninstall crcmod \\\n && sudo pip install -U crcmod\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\nRUN sudo apt-get update \\\n && sudo apt-get install -y google-cloud-sdk \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true\nARG sdk_version=sdk-tools-linux-3859397.zip\nARG android_home=/opt/android/sdk\n#   SHA-256 444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0\nRUN sudo apt-get update \\\n && sudo apt-get install --yes xvfb lib32z1 lib32stdc++6 build-essential libcurl4-openssl-dev libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev\n#   Install Ruby\nRUN cd /tmp \\\n && wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz \\\n && tar -xzvf ruby-install-0.6.1.tar.gz \\\n && cd ruby-install-0.6.1 \\\n && sudo make install \\\n && ruby-install --cleanup ruby 2.4.3 \\\n && rm -r /tmp/ruby-install-*\nENV PATH=\"${HOME}/.rubies/ruby-2.4.3/bin:${PATH}\"\nRUN echo 'gem: --env-shebang --no-rdoc --no-ri' >> ~/.gemrc \\\n && gem install bundler\n#   Download and install Android SDK\nRUN sudo mkdir -p ${android_home} \\\n && sudo chown -R circleci:circleci ${android_home} \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/${sdk_version} https://dl.google.com/android/repository/${sdk_version} \\\n && unzip -q /tmp/${sdk_version} -d ${android_home} \\\n && rm /tmp/${sdk_version}\n#   Set environmental variables\nENV ANDROID_HOME=\"${android_home}\"\nENV ADB_INSTALL_TIMEOUT=\"120\"\nENV PATH=\"${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}\"\nRUN mkdir ~/.android \\\n && echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg\nRUN yes | sdkmanager --licenses \\\n && sdkmanager --update\n#   Update SDK manager and install system image, platform and build tools\nRUN sdkmanager \"tools\" \"platform-tools\" \"emulator\" \"extras;android;m2repository\" \"extras;google;m2repository\" \"extras;google;google_play_services\"\nRUN sdkmanager \"build-tools;25.0.0\" \"build-tools;25.0.1\" \"build-tools;25.0.2\" \"build-tools;25.0.3\" \"build-tools;26.0.1\" \"build-tools;26.0.2\" \"build-tools;27.0.0\" \"build-tools;27.0.1\" \"build-tools;27.0.2\" \"build-tools;27.0.3\" \"build-tools;28.0.0\" \"build-tools;28.0.3\"\n#   API_LEVEL string gets replaced by m4\nRUN sdkmanager \"platforms;android-23\"\nARG ndk_version=android-ndk-r17b\nARG android_ndk_home=/opt/android/${ndk_version}\n#   install NDK\nRUN curl --silent --show-error --location --fail --retry 3 --output /tmp/${ndk_version}.zip https://dl.google.com/android/repository/${ndk_version}-linux-x86_64.zip \\\n && sudo unzip -q /tmp/${ndk_version}.zip -d /opt/android \\\n && rm /tmp/${ndk_version}.zip \\\n && sudo chown -R circleci:circleci ${android_ndk_home}\nENV ANDROID_NDK_HOME=\"${android_ndk_home}\"\n","originalDockerfileUglifiedHash":"987943dc461743d63c544d4237feef0f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d70d34729ab26110f9c43433f51a4dfb14a9057e.dockerfile"}