{"seed":930446053,"processedDockerfileHash":"712b7377f99cfe520749c1eb4d75b37b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"# escape = `\n#   -----------------------------------------------------------------------------------------\n#   This file describes the standard way to build Docker in a container on Windows\n#   Server 2016 or Windows 10.\n#\n#   Maintainer: @jhowardmsft\n#   -----------------------------------------------------------------------------------------\n#   Prerequisites:\n#   --------------\n#\n#   1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major \n#      build number must be at least 14393. This can be confirmed, for example, by \n#      running the following from an elevated PowerShell prompt - this sample output \n#      is from a fully up to date machine as at mid-November 2016:\n#\n#      >> PS C:\\> $(gin).WindowsBuildLabEx\n#      >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100\n#\n#   2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#   3. The machine must be configured to run containers. For example, by following\n#      the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#      https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#\n#   4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server\n#      containers as the default option, it is recommended you have at least 1GB \n#      of memory assigned; For Windows 10 where Hyper-V Containers are employed, you\n#      should have at least 4GB of memory assigned. Note also, to run Hyper-V \n#      containers in a VM, it is necessary to configure the VM for nested virtualization.\n#   -----------------------------------------------------------------------------------------\n#   Usage:\n#   -----\n#\n#    The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#    (*In a default installation of containers on Windows following the quick-start guidance at\n#      https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#      the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#   1. Clone the sources from github.com:\n#\n#      >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#      >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#      >>   remote: Counting objects: 186216, done.\n#      >>   remote: Compressing objects: 100% (21/21), done.\n#      >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#      >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#      >>   Resolving deltas: 100% (123139/123139), done.\n#      >>   Checking connectivity... done.\n#      >>   Checking out files: 100% (3912/3912), done.\n#      >>   PS C:\\>\n#\n#\n#   2. Change directory to the cloned docker sources:\n#\n#      >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#   3. Build a docker image with the components required to build the docker binaries from source\n#      by running one of the following:\n#\n#      >>   docker build -t nativebuildimage -f Dockerfile.windows .          \n#      >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)\n#\n#\n#   4. Build the docker executable binaries by running one of the following:\n#\n#      >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)\n#      >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\\make.ps1 -Binary\n#      >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\\make.ps1 -Binary    (if using Hyper-V containers)\n#\n#\n#   5. Copy the binaries out of the container, replacing HostPath with an appropriate destination \n#      folder on the host system where you want the binaries to be located.\n#\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\docker.exe C:\\HostPath\\docker.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\dockerd.exe C:\\HostPath\\dockerd.exe\n#\n#\n#   6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#      >>    docker rm binaries\n#\n#\n#   7. (Optional) Remove the image used for the container in which the executable\n#      binaries are build. Tip - it may be useful to keep this image around if you need to\n#      build multiple times. Then you can take advantage of the builder cache to have an\n#      image which has all the components required to build the binaries already installed.\n#\n#      >>    docker rmi nativebuildimage\n#\n#   -----------------------------------------------------------------------------------------\n#    The validation tests can only run directly on the host. This is because they calculate\n#    information from the git repo, but the .git directory is not passed into the image as\n#    it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt\n#    (elevation is not required): (Note Go must be installed to run these tests)\n#\n#      >>   hack\\make.ps1 -DCO -PkgImports -GoFormat\n#   -----------------------------------------------------------------------------------------\n#    To run unit tests, ensure you have created the nativebuildimage above. Then run one of\n#    the following from an (elevated) Windows PowerShell prompt:\n#\n#      >>   docker run --rm nativebuildimage hack\\make.ps1 -TestUnit\n#      >>   docker run --rm -m 2GB nativebuildimage hack\\make.ps1 -TestUnit    (if using Hyper-V containers)\n#   -----------------------------------------------------------------------------------------\n#    To run unit tests and binary build, ensure you have created the nativebuildimage above. Then \n#    run one of the following from an (elevated) Windows PowerShell prompt:\n#\n#      >>   docker run nativebuildimage hack\\make.ps1 -All\n#      >>   docker run -m 2GB nativebuildimage hack\\make.ps1 -All    (if using Hyper-V containers)\n#   -----------------------------------------------------------------------------------------\n#   Important notes:\n#   ---------------\n#\n#   Don't attempt to use a bind mount to pass a local directory as the bundles target\n#   directory. It does not work (golang attempts for follow a mapped folder incorrectly).\n#   Instead, use docker cp as per the example.\n#\n#   go.zip is not removed from the image as it is used by the Windows CI servers\n#   to ensure the host and image are running consistent versions of go.\n#\n#   Nanoserver support is a work in progress. Although the image will build if the \n#   FROM statement is updated, it will not work when running autogen through hack\\make.ps1. \n#   It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently\n#   quit due to the use of console hooks which are not available.\n#\n#   The docker integration tests do not currently run in a container on Windows, predominantly\n#   due to Windows not supporting privileged mode, so anything using a volume would fail.\n#   They (along with the rest of the docker CI suite) can be run using \n#   https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.\n#\n#   -----------------------------------------------------------------------------------------\n#   The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#   Use PowerShell as the default shell\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference\", \"=\", \"'Stop'\", \";\", \"$ProgressPreference\", \"=\", \"'SilentlyContinue'\"]\n#   Environment variable notes:\n#    - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.10.3\" `\n    GIT_VERSION=\"2.11.1\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nRUN Function Test-Nano\n#   Make PowerShell the default entrypoint\nENTRYPOINT [\"powershell.exe\"]\n#   Set the working directory to the location of the sources\nWORKDIR C:\\go\\src\\github.com\\docker\\docker\n#   Copy the sources into the container\nCOPY . .\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# escape = `\n#  -----------------------------------------------------------------------------------------\n#  This file describes the standard way to build Docker in a container on Windows\n#  Server 2016 or Windows 10.\n#\n#  Maintainer: @jhowardmsft\n#  -----------------------------------------------------------------------------------------\n#  Prerequisites:\n#  --------------\n#\n#  1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major \n#     build number must be at least 14393. This can be confirmed, for example, by \n#     running the following from an elevated PowerShell prompt - this sample output \n#     is from a fully up to date machine as at mid-November 2016:\n#\n#     >> PS C:\\> $(gin).WindowsBuildLabEx\n#     >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100\n#\n#  2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#  3. The machine must be configured to run containers. For example, by following\n#     the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#     https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#\n#  4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server\n#     containers as the default option, it is recommended you have at least 1GB \n#     of memory assigned; For Windows 10 where Hyper-V Containers are employed, you\n#     should have at least 4GB of memory assigned. Note also, to run Hyper-V \n#     containers in a VM, it is necessary to configure the VM for nested virtualization.\n#  -----------------------------------------------------------------------------------------\n#  Usage:\n#  -----\n#\n#   The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#   (*In a default installation of containers on Windows following the quick-start guidance at\n#     https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#     the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#  1. Clone the sources from github.com:\n#\n#     >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#     >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#     >>   remote: Counting objects: 186216, done.\n#     >>   remote: Compressing objects: 100% (21/21), done.\n#     >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#     >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#     >>   Resolving deltas: 100% (123139/123139), done.\n#     >>   Checking connectivity... done.\n#     >>   Checking out files: 100% (3912/3912), done.\n#     >>   PS C:\\>\n#\n#\n#  2. Change directory to the cloned docker sources:\n#\n#     >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#  3. Build a docker image with the components required to build the docker binaries from source\n#     by running one of the following:\n#\n#     >>   docker build -t nativebuildimage -f Dockerfile.windows .          \n#     >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)\n#\n#\n#  4. Build the docker executable binaries by running one of the following:\n#\n#     >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)\n#     >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\\make.ps1 -Binary\n#     >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\\make.ps1 -Binary    (if using Hyper-V containers)\n#\n#\n#  5. Copy the binaries out of the container, replacing HostPath with an appropriate destination \n#     folder on the host system where you want the binaries to be located.\n#\n#     >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\docker.exe C:\\HostPath\\docker.exe\n#     >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\dockerd.exe C:\\HostPath\\dockerd.exe\n#\n#\n#  6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#     >>    docker rm binaries\n#\n#\n#  7. (Optional) Remove the image used for the container in which the executable\n#     binaries are build. Tip - it may be useful to keep this image around if you need to\n#     build multiple times. Then you can take advantage of the builder cache to have an\n#     image which has all the components required to build the binaries already installed.\n#\n#     >>    docker rmi nativebuildimage\n#\n#  -----------------------------------------------------------------------------------------\n#   The validation tests can only run directly on the host. This is because they calculate\n#   information from the git repo, but the .git directory is not passed into the image as\n#   it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt\n#   (elevation is not required): (Note Go must be installed to run these tests)\n#\n#     >>   hack\\make.ps1 -DCO -PkgImports -GoFormat\n#  -----------------------------------------------------------------------------------------\n#   To run unit tests, ensure you have created the nativebuildimage above. Then run one of\n#   the following from an (elevated) Windows PowerShell prompt:\n#\n#     >>   docker run --rm nativebuildimage hack\\make.ps1 -TestUnit\n#     >>   docker run --rm -m 2GB nativebuildimage hack\\make.ps1 -TestUnit    (if using Hyper-V containers)\n#  -----------------------------------------------------------------------------------------\n#   To run unit tests and binary build, ensure you have created the nativebuildimage above. Then \n#   run one of the following from an (elevated) Windows PowerShell prompt:\n#\n#     >>   docker run nativebuildimage hack\\make.ps1 -All\n#     >>   docker run -m 2GB nativebuildimage hack\\make.ps1 -All    (if using Hyper-V containers)\n#  -----------------------------------------------------------------------------------------\n#  Important notes:\n#  ---------------\n#\n#  Don't attempt to use a bind mount to pass a local directory as the bundles target\n#  directory. It does not work (golang attempts for follow a mapped folder incorrectly).\n#  Instead, use docker cp as per the example.\n#\n#  go.zip is not removed from the image as it is used by the Windows CI servers\n#  to ensure the host and image are running consistent versions of go.\n#\n#  Nanoserver support is a work in progress. Although the image will build if the \n#  FROM statement is updated, it will not work when running autogen through hack\\make.ps1. \n#  It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently\n#  quit due to the use of console hooks which are not available.\n#\n#  The docker integration tests do not currently run in a container on Windows, predominantly\n#  due to Windows not supporting privileged mode, so anything using a volume would fail.\n#  They (along with the rest of the docker CI suite) can be run using \n#  https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.\n#\n#  -----------------------------------------------------------------------------------------\n#  The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#  Use PowerShell as the default shell\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference\", \"=\", \"'Stop'\", \";\", \"$ProgressPreference\", \"=\", \"'SilentlyContinue'\"]\n#  Environment variable notes:\n#   - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#   - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.10.3\" `\n    GIT_VERSION=\"2.11.1\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nRUN Function Test-Nano\n#  Make PowerShell the default entrypoint\nENTRYPOINT [\"powershell.exe\"]\n#  Set the working directory to the location of the sources\nWORKDIR C:\\go\\src\\github.com\\docker\\docker\n#  Copy the sources into the container\nCOPY . .\n","injectedSmells":[],"originalDockerfileHash":"1f15a36e96ab1870b76eed8a37757ae5","successfullyInjectedSmells":[],"originalDockerfileUglified":"# escape = `\n#   -----------------------------------------------------------------------------------------\n#   This file describes the standard way to build Docker in a container on Windows\n#   Server 2016 or Windows 10.\n#\n#   Maintainer: @jhowardmsft\n#   -----------------------------------------------------------------------------------------\n#   Prerequisites:\n#   --------------\n#\n#   1. Windows Server 2016 or Windows 10 with all Windows updates applied. The major \n#      build number must be at least 14393. This can be confirmed, for example, by \n#      running the following from an elevated PowerShell prompt - this sample output \n#      is from a fully up to date machine as at mid-November 2016:\n#\n#      >> PS C:\\> $(gin).WindowsBuildLabEx\n#      >> 14393.447.amd64fre.rs1_release_inmarket.161102-0100\n#\n#   2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#   3. The machine must be configured to run containers. For example, by following\n#      the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#      https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#\n#   4. If building in a Hyper-V VM: For Windows Server 2016 using Windows Server\n#      containers as the default option, it is recommended you have at least 1GB \n#      of memory assigned; For Windows 10 where Hyper-V Containers are employed, you\n#      should have at least 4GB of memory assigned. Note also, to run Hyper-V \n#      containers in a VM, it is necessary to configure the VM for nested virtualization.\n#   -----------------------------------------------------------------------------------------\n#   Usage:\n#   -----\n#\n#    The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#    (*In a default installation of containers on Windows following the quick-start guidance at\n#      https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#      the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#   1. Clone the sources from github.com:\n#\n#      >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#      >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#      >>   remote: Counting objects: 186216, done.\n#      >>   remote: Compressing objects: 100% (21/21), done.\n#      >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#      >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#      >>   Resolving deltas: 100% (123139/123139), done.\n#      >>   Checking connectivity... done.\n#      >>   Checking out files: 100% (3912/3912), done.\n#      >>   PS C:\\>\n#\n#\n#   2. Change directory to the cloned docker sources:\n#\n#      >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#   3. Build a docker image with the components required to build the docker binaries from source\n#      by running one of the following:\n#\n#      >>   docker build -t nativebuildimage -f Dockerfile.windows .          \n#      >>   docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .    (if using Hyper-V containers)\n#\n#\n#   4. Build the docker executable binaries by running one of the following:\n#\n#      >>   $DOCKER_GITCOMMIT=(git rev-parse --short HEAD)\n#      >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\\make.ps1 -Binary\n#      >>   docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\\make.ps1 -Binary    (if using Hyper-V containers)\n#\n#\n#   5. Copy the binaries out of the container, replacing HostPath with an appropriate destination \n#      folder on the host system where you want the binaries to be located.\n#\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\docker.exe C:\\HostPath\\docker.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\dockerd.exe C:\\HostPath\\dockerd.exe\n#\n#\n#   6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#      >>    docker rm binaries\n#\n#\n#   7. (Optional) Remove the image used for the container in which the executable\n#      binaries are build. Tip - it may be useful to keep this image around if you need to\n#      build multiple times. Then you can take advantage of the builder cache to have an\n#      image which has all the components required to build the binaries already installed.\n#\n#      >>    docker rmi nativebuildimage\n#\n#   -----------------------------------------------------------------------------------------\n#    The validation tests can only run directly on the host. This is because they calculate\n#    information from the git repo, but the .git directory is not passed into the image as\n#    it is excluded via .dockerignore. Run the following from a Windows PowerShell prompt\n#    (elevation is not required): (Note Go must be installed to run these tests)\n#\n#      >>   hack\\make.ps1 -DCO -PkgImports -GoFormat\n#   -----------------------------------------------------------------------------------------\n#    To run unit tests, ensure you have created the nativebuildimage above. Then run one of\n#    the following from an (elevated) Windows PowerShell prompt:\n#\n#      >>   docker run --rm nativebuildimage hack\\make.ps1 -TestUnit\n#      >>   docker run --rm -m 2GB nativebuildimage hack\\make.ps1 -TestUnit    (if using Hyper-V containers)\n#   -----------------------------------------------------------------------------------------\n#    To run unit tests and binary build, ensure you have created the nativebuildimage above. Then \n#    run one of the following from an (elevated) Windows PowerShell prompt:\n#\n#      >>   docker run nativebuildimage hack\\make.ps1 -All\n#      >>   docker run -m 2GB nativebuildimage hack\\make.ps1 -All    (if using Hyper-V containers)\n#   -----------------------------------------------------------------------------------------\n#   Important notes:\n#   ---------------\n#\n#   Don't attempt to use a bind mount to pass a local directory as the bundles target\n#   directory. It does not work (golang attempts for follow a mapped folder incorrectly).\n#   Instead, use docker cp as per the example.\n#\n#   go.zip is not removed from the image as it is used by the Windows CI servers\n#   to ensure the host and image are running consistent versions of go.\n#\n#   Nanoserver support is a work in progress. Although the image will build if the \n#   FROM statement is updated, it will not work when running autogen through hack\\make.ps1. \n#   It is suspected that the required GCC utilities (eg gcc, windres, windmc) silently\n#   quit due to the use of console hooks which are not available.\n#\n#   The docker integration tests do not currently run in a container on Windows, predominantly\n#   due to Windows not supporting privileged mode, so anything using a volume would fail.\n#   They (along with the rest of the docker CI suite) can be run using \n#   https://github.com/jhowardmsft/docker-w2wCIScripts/blob/master/runCI/Invoke-DockerCI.ps1.\n#\n#   -----------------------------------------------------------------------------------------\n#   The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#   Use PowerShell as the default shell\nSHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference\", \"=\", \"'Stop'\", \";\", \"$ProgressPreference\", \"=\", \"'SilentlyContinue'\"]\n#   Environment variable notes:\n#    - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.10.3\" `\n    GIT_VERSION=\"2.11.1\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nRUN Function Test-Nano\n#   Make PowerShell the default entrypoint\nENTRYPOINT [\"powershell.exe\"]\n#   Set the working directory to the location of the sources\nWORKDIR C:\\go\\src\\github.com\\docker\\docker\n#   Copy the sources into the container\nCOPY . .\n","originalDockerfileUglifiedHash":"37890e2abf2b715f519435a54792dd6b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1b2c1f3c8ae0e309afcb8ace8911a2b3b5ae531d.dockerfile"}