{"seed":2392445419,"processedDockerfileHash":"54cfd9c924d20ac5199b64d1fdba4244","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  FROM ubuntu:16.04\n#   FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#  FROM debian:stretch\nMAINTAINER Shlomo <shlomo@deep-ml.com>\n#  ENV LLVM_CONFIG /usr/local/opt/llvm/bin/llvm-config\n#  ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config\nARG DEBIAN_FRONTEND=noninteractive\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Install base dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends git=1:1.9.1-1ubuntu0.10 wget=1.15-1ubuntu1.14.04.5 cmake=2.8.12.2-0ubuntu3 build-essential=11.6ubuntu6 libgoogle-glog-dev=0.3.3-1 libgflags-dev=2.0-1.1ubuntu1 libeigen3-dev=3.2.0-8 libopencv-dev=2.4.8+dfsg1-2ubuntu1.2 libcppnetlib-dev=0.11.0-1 libboost-dev=1.54.0.1ubuntu1 libboost-iostreams-dev=1.54.0.1ubuntu1 libcurlpp-dev=0.7.3-5 libcurl4-openssl-dev=7.35.0-1ubuntu2.20 protobuf-compiler=2.5.0-9ubuntu1 libopenblas-dev=0.2.8-6ubuntu1 libhdf5-dev=1.8.11-5ubuntu7.1 libprotobuf-dev=2.5.0-9ubuntu1 libleveldb-dev=1.15.0-2 libsnappy-dev=1.1.0-1ubuntu1 liblmdb-dev=0.9.10-1 libutfcpp-dev=2.3.4-1 wget=1.15-1ubuntu1.14.04.5 liblapack-dev=3.5.0-2ubuntu1 fortran-compiler libedit-dev=3.1-20130712-2 -y )\nRUN :\n#   Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y )\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN sudo apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 software-properties-common=0.92.37.8 g++=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 wget=1.15-1ubuntu1.14.04.5 tar=1.27.1-1ubuntu0.1 git=1:1.9.1-1ubuntu0.10 imagemagick=8:6.7.7.10-6ubuntu3.13 curl=7.35.0-1ubuntu2.20 bc=1.06.95-8ubuntu1 htop=1.0.2-3 cmake=2.8.12.2-0ubuntu3 curl=7.35.0-1ubuntu2.20 g++=4:4.8.2-1ubuntu6 gfortran=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 libfreetype6-dev=2.5.2-1ubuntu2.8 libhdf5-dev=1.8.11-5ubuntu7.1 libjpeg-dev=8c-2ubuntu8 liblcms2-dev=2.5-0ubuntu4.2 libopenblas-dev=0.2.8-6ubuntu1 liblapack-dev=3.5.0-2ubuntu1 libssl-dev=1.0.1f-1ubuntu2.27 libtiff5-dev=4.0.3-7ubuntu0.11 libwebp-dev=0.4.0-4 libzmq3-dev=4.0.4+dfsg-2ubuntu0.1 nano=2.2.6-1ubuntu1 unzip=6.0-9ubuntu1.5 vim=2:7.4.052-1ubuntu3.1 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 qt5-default=5.2.1+dfsg-1ubuntu14.3 libvtk6-dev=6.0.0-6 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libjpeg-dev=8c-2ubuntu8 libwebp-dev=0.4.0-4 libpng-dev libtiff5-dev=4.0.3-7ubuntu0.11 libjasper-dev=1.900.1-14ubuntu3.5 libopenexr-dev=1.6.1-7ubuntu1 libgdal-dev=1.10.1+dfsg-5ubuntu1 libdc1394-22-dev=2.2.1-2ubuntu2 libavcodec-dev=6:9.20-0ubuntu0.14.04.1 libavformat-dev=6:9.20-0ubuntu0.14.04.1 libswscale-dev=6:9.20-0ubuntu0.14.04.1 libtheora-dev=1.1.1+dfsg.1-3.2 libvorbis-dev=1.3.2-1.3ubuntu1.2 libxvidcore-dev=2:1.3.2-9ubuntu1 libx264-dev=2:0.142.2389+git956c8d8-2 yasm=1.2.0-1ubuntu1 libopencore-amrnb-dev=0.1.3-2ubuntu1 libopencore-amrwb-dev=0.1.3-2ubuntu1 libv4l-dev=1.0.1-1 libxine2-dev=1.2.4-2ubuntu1 libtbb-dev=4.2~20130725-1.1ubuntu1 libeigen3-dev=3.2.0-8 doxygen=1.8.6-2 less=458-2 htop=1.0.2-3 procps=1:3.3.9-1ubuntu2.3 vim-tiny=2:7.4.052-1ubuntu3.1 libboost-dev=1.54.0.1ubuntu1 libgraphviz-dev=2.36.0-0ubuntu3.2 -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  ###################################################PYTHON2########################################################\n#   install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends python=2.7.5-5ubuntu3 python-dev=2.7.5-5ubuntu3 python-pip=1.5.4-1ubuntu4 python-setuptools=3.3-1ubuntu2 python-virtualenv=1.11.4-1ubuntu1 python-wheel=0.24.0-1~ubuntu1.1 python-tk=2.7.5-1ubuntu1 pkg-config=0.26-1ubuntu4 libopenblas-base=0.2.8-6ubuntu1 python-numpy=1:1.8.2-0ubuntu0.1 python-scipy=0.13.3-1build1 python-h5py=2.2.1-1build2 python-yaml=3.10-4ubuntu0.1 python-pydot=1.0.28-0ubuntu1 python-nose=1.3.1-2 python-h5py=2.2.1-1build2 python-skimage=0.9.3-4build1 python-matplotlib=1.3.1-1ubuntu5.1 python-pandas=0.13.1-2ubuntu2 python-sklearn=0.14.1-2 python-sympy=0.7.4.1-1 ipython=1.2.1-2 python-joblib=0.7.1-1 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  RUN python -m pip install --upgrade --force pip\nRUN pip install pip==23.1 --upgrade\nRUN pip install pyOpenSSL==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8\n#   Install other useful Python packages using pip\nRUN pip install ipython==8.12.0 --no-cache-dir --upgrade \\\n && pip install Cython==0.29.34 ipykernel==6.22.0 jupyter==1.0.0 path.py==12.5.0 Pillow==9.5.0 pygments==2.15.0 six==1.16.0 sphinx==6.1.3 wheel==0.40.0 zmq==0.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN pip install cython==0.29.34 pytest==7.3.1 pandas==2.0.0 scikit-learn==1.2.2 statsmodels==0.13.5 line-profiler==4.0.3 psutil==5.9.4 spectrum==0.8.1 memory_profiler==0.61.0 pandas==2.0.0 jupyter==1.0.0 joblib==1.2.0 pyparsing==3.0.9 pydot==1.4.2 pydot-ng==2.0.0 graphviz==0.20.1 pandoc==2.3 SQLAlchemy==2.0.9 flask==2.2.3 toolz==0.12.0 cloudpickle==2.2.1 python-snappy==0.6.1 s3fs==2023.4.0 widgetsnbextension==4.0.7 ipywidgets==8.0.6 terminado==0.17.1 cytoolz==0.12.1 bcolz==1.2.1 blosc==1.11.1 partd==1.4.0 backports.lzma==0.0.14 mock==5.0.2 cachey==0.2.1 moto==4.1.7 pandas_datareader==0.10.0 ipython[all] --no-cache-dir\nRUN pip install llvmlite==0.39.1 -i https://pypi.anaconda.org/sklam/simple\n#  RUN pip install llvmlite\n#   Distributed dataframes\nRUN pip install numba==0.56.4 --no-cache-dir\nRUN pip install git+https://github.com/dask/dask.git --no-cache-dir\nRUN pip install git+https://github.com/dask/distributed.git --no-cache-dir\nRUN pip install fastparquet==2023.2.0 --no-cache-dir\n#  please point LLVM_CONFIG to the path for llvm-config\n#  RUN pip --no-cache-dir install  llvmpy\n#   Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano==1.0.5 --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nARG TENSORFLOW_VERSION=0.11.0\nARG TENSORFLOW_DEVICE=cpu\nARG TENSORFLOW_APPEND\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\nARG KERAS_VERSION=1.2.2\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n#   Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3==3.11.5 pystan==3.6.0 edward==1.3.5 watermark==2.3.1 xgboost==1.7.5 bokeh==3.1.0 seaborn==0.12.2 mmh3==3.1.0 --no-cache-dir --upgrade\n#   dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt\n#  ###################################################PYTHON2########################################################\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#   default password: keras\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\n#   dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip3 freeze > /pip3-freeze.txt\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#   Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp\nWORKDIR \"/root\"\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\nRUN git clone https://github.com/vgvassilev/cling.git ./cling\nRUN conda install libgcc\nRUN export PATH=/root/cling/bin:$PATH\nRUN cd /root/cling/tools/Jupyter/kernel\nRUN pip install -e .\nRUN ./jupyter-kernelspec install --user cling-c++11\nRUN pwd\nRUN df -k\nRUN chmod +x run_jupyter.sh\nRUN ls -la\n#  #RUN ./run_jupyter.sh\n#  CMD daskd-scheduler &\n#  CMD [\"/bin/bash\", \"-c\", \"./run_jupyter.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# FROM ubuntu:16.04\n#  FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n# FROM debian:stretch\nMAINTAINER Shlomo <shlomo@deep-ml.com>\n# ENV LLVM_CONFIG /usr/local/opt/llvm/bin/llvm-config\n# ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config\nARG DEBIAN_FRONTEND=noninteractive\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# Install base dependencies\nRUN apt-get update \\\n && apt-get install git wget cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurlpp-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget liblapack-dev fortran-compiler libedit-dev -y\nRUN apt-get update\n#  Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && apt-get install clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN sudo apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libboost-dev libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n# ###################################################PYTHON2########################################################\n#  install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python python-dev python-pip python-setuptools python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy ipython python-joblib -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n# RUN python -m pip install --upgrade --force pip\nRUN pip install pip --upgrade\nRUN pip install pyOpenSSL ndg-httpsclient pyasn1\n#  Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN pip install cython pytest pandas scikit-learn statsmodels line-profiler psutil spectrum memory_profiler pandas jupyter joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader ipython[all] --no-cache-dir\nRUN pip install llvmlite -i https://pypi.anaconda.org/sklam/simple\n# RUN pip install llvmlite\n#  Distributed dataframes\nRUN pip install numba --no-cache-dir\nRUN pip install git+https://github.com/dask/dask.git --no-cache-dir\nRUN pip install git+https://github.com/dask/distributed.git --no-cache-dir\nRUN pip install fastparquet --no-cache-dir\n# please point LLVM_CONFIG to the path for llvm-config\n# RUN pip --no-cache-dir install  llvmpy\n#  Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nARG TENSORFLOW_VERSION=0.11.0\nARG TENSORFLOW_DEVICE=cpu\nARG TENSORFLOW_APPEND\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\nARG KERAS_VERSION=1.2.2\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n#  Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 --no-cache-dir --upgrade\n#  dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt\n# ###################################################PYTHON2########################################################\n#  configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#  default password: keras\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\n#  dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip3 freeze > /pip3-freeze.txt\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\n#  Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#  Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp\nWORKDIR \"/root\"\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\nRUN git clone https://github.com/vgvassilev/cling.git ./cling\nRUN conda install libgcc\nRUN export PATH=/root/cling/bin:$PATH\nRUN cd /root/cling/tools/Jupyter/kernel\nRUN pip install -e .\nRUN ./jupyter-kernelspec install --user cling-c++11\nRUN pwd\nRUN df -k\nRUN chmod +x run_jupyter.sh\nRUN ls -la\n# #RUN ./run_jupyter.sh\n# CMD daskd-scheduler &\n# CMD [\"/bin/bash\", \"-c\", \"./run_jupyter.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"d3e3c39aea4496b980d650118e99d1eb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  FROM ubuntu:16.04\n#   FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#  FROM debian:stretch\nMAINTAINER Shlomo <shlomo@deep-ml.com>\n#  ENV LLVM_CONFIG /usr/local/opt/llvm/bin/llvm-config\n#  ENV LLVM_CONFIG=/usr/lib/llvm-3.8/bin/llvm-config\nARG DEBIAN_FRONTEND=noninteractive\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Install base dependencies\nRUN apt-get update \\\n && apt-get install git wget cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurlpp-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget liblapack-dev fortran-compiler libedit-dev -y\nRUN apt-get update\n#   Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && apt-get install clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN sudo apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libboost-dev libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  ###################################################PYTHON2########################################################\n#   install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python python-dev python-pip python-setuptools python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy ipython python-joblib -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  RUN python -m pip install --upgrade --force pip\nRUN pip install pip --upgrade\nRUN pip install pyOpenSSL ndg-httpsclient pyasn1\n#   Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN pip install cython pytest pandas scikit-learn statsmodels line-profiler psutil spectrum memory_profiler pandas jupyter joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader ipython[all] --no-cache-dir\nRUN pip install llvmlite -i https://pypi.anaconda.org/sklam/simple\n#  RUN pip install llvmlite\n#   Distributed dataframes\nRUN pip install numba --no-cache-dir\nRUN pip install git+https://github.com/dask/dask.git --no-cache-dir\nRUN pip install git+https://github.com/dask/distributed.git --no-cache-dir\nRUN pip install fastparquet --no-cache-dir\n#  please point LLVM_CONFIG to the path for llvm-config\n#  RUN pip --no-cache-dir install  llvmpy\n#   Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nARG TENSORFLOW_VERSION=0.11.0\nARG TENSORFLOW_DEVICE=cpu\nARG TENSORFLOW_APPEND\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\nARG KERAS_VERSION=1.2.2\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n#   Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 --no-cache-dir --upgrade\n#   dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt\n#  ###################################################PYTHON2########################################################\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#   default password: keras\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\n#   dump package lists\nRUN dpkg-query -l > /dpkg-query-l.txt \\\n && pip3 freeze > /pip3-freeze.txt\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#   Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp\nWORKDIR \"/root\"\nRUN git clone https://github.com/dask/dask-tutorial.git ./dask-tutorial\nRUN git clone https://github.com/dask/dask-examples.git ./dask-examples\nRUN git clone https://github.com/vgvassilev/cling.git ./cling\nRUN conda install libgcc\nRUN export PATH=/root/cling/bin:$PATH\nRUN cd /root/cling/tools/Jupyter/kernel\nRUN pip install -e .\nRUN ./jupyter-kernelspec install --user cling-c++11\nRUN pwd\nRUN df -k\nRUN chmod +x run_jupyter.sh\nRUN ls -la\n#  #RUN ./run_jupyter.sh\n#  CMD daskd-scheduler &\n#  CMD [\"/bin/bash\", \"-c\", \"./run_jupyter.sh\"]\n","originalDockerfileUglifiedHash":"33e164eb8295d0b8074e3ed591fbafab","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3c79b7c93ca2b7950acc3a946d75bf214631fb01.dockerfile"}