{"seed":3073171625,"processedDockerfileHash":"5bd5659050f2dc6303b8932d59fad4d0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:trusty\n#   let Upstart know it's in a container\nENV container=\"docker\"\nCOPY config/init-fake.conf /etc/init/fake-container-events.conf\n#   uuid-runtime is required, otherwise the last test in 'test_quickstart_key.yaml' fails\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends openssh-server=1:6.6p1-2ubuntu2.13 sudo=1.8.9p5-1ubuntu1.4 curl=7.35.0-1ubuntu2.20 gdebi-core=0.9.5.3ubuntu3 sshpass=1.05-1 cron=3.0pl1-124ubuntu2 netcat=1.10-40 net-tools=1.60-25ubuntu2.1 crudini=0.3-1 uuid-runtime=2.20.1-5.1ubuntu20.9 apache2-utils=2.4.7-1ubuntu4.22 bash-completion=1:2.1-4ubuntu0.2 -y\n#   enable bash-completion\nRUN dpkg-divert /etc/bash.bashrc \\\n && sed -i '/^# enable bash completion/,/^# sudo hint/{//p;//d;s/^#//}' /etc/bash.bashrc\nRUN echo -e \"#!/bin/sh\\nexit 101\\n\" > /usr/sbin/policy-rc.d \\\n && rm /sbin/initctl ; dpkg-divert --rename --remove /sbin/initctl \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   remove some pointless services\nRUN /usr/sbin/update-rc.d -f ondemand remove ; for f in /etc/init/u*.conf /etc/init/mounted-dev.conf /etc/init/mounted-proc.conf /etc/init/mounted-run.conf /etc/init/mounted-tmp.conf /etc/init/mounted-var.conf /etc/init/hostname.conf /etc/init/networking.conf /etc/init/tty*.conf /etc/init/plymouth*.conf /etc/init/hwclock*.conf /etc/init/module*.conf; do dpkg-divert --local --rename --add \"$f\" ; done ; echo '# /lib/init/fstab: cleared out for bare-bones Docker' > /lib/init/fstab\n#   Default value of ST2_REPO is \"stable\"\nARG ST2_REPO=stable\n#   Configure system so that the \"stable\" ST2 packages\n#   are fetched from packagecloud.io\nRUN curl -s https://packagecloud.io/install/repositories/StackStorm/${ST2_REPO}/script.deb.sh | sudo bash\n#   The following variable is the most recent commit in\n#   the st2-docker repo used to fetch this Dockerfile.\nARG CIRCLE_SHA1\nARG CIRCLE_BUILD_URL\nARG CIRCLE_PROJECT_USERNAME\nARG CIRCLE_PROJECT_REPONAME\n#   Override these values if you want to specify different package versions\nARG ST2_TAG\nARG ST2_VERSION\nARG ST2WEB_VERSION\nARG ST2MISTRAL_VERSION\nCOPY bin/install.sh /install.sh\n#   It is not possible to dynamically set ARG's, so we do the needful in bin/install.sh\n#   Install st2, st2web, st2mistral and st2chatops\nRUN /install.sh\n#   Unless these lines are changed, the services are not started when runlevel -> 2\n#   Call mistral-db-manage before mistral starts\nRUN sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/mistral.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/mistral.conf \\\n && sed -i '/start mistral-api/i\\ /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head\\n /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf populate\\n' /etc/init/mistral.conf\n#   Setup symmetric crypto key for datastore\nRUN mkdir -p /etc/st2/keys \\\n && st2-generate-symmetric-crypto-key --key-path /etc/st2/keys/datastore_key.json \\\n && usermod -a -G st2 st2 \\\n && chgrp st2 /etc/st2/keys \\\n && chmod o-r /etc/st2/keys \\\n && chgrp st2 /etc/st2/keys/datastore_key.json \\\n && chmod o-r /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf keyvalue encryption_key_path /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf auth enable True\n#   Install redis client library for coordination backend\n#   see: https://docs.stackstorm.com/latest/reference/policies.html\nRUN bash -c 'source /opt/stackstorm/st2/bin/activate \\\n && pip install redis'\n#   Setup SSH and SUDO access for stanley user\nRUN mkdir -p /home/stanley/.ssh \\\n && chmod 0700 /home/stanley/.ssh \\\n && ssh-keygen -f /home/stanley/.ssh/stanley_rsa -P \"\" \\\n && cat /home/stanley/.ssh/stanley_rsa.pub >> /home/stanley/.ssh/authorized_keys \\\n && chown -R stanley:stanley /home/stanley/.ssh \\\n && echo \"stanley ALL=(ALL) NOPASSWD: SETENV: ALL\" >> /etc/sudoers.d/st2 \\\n && chmod 0440 /etc/sudoers.d/st2 \\\n && sed -i -r \"s/^Defaults\\s+\\+?requiretty/# Defaults +requiretty/g\" /etc/sudoers\n#   Install and configure nginx\n#   Use hkp://...:80 explicitly to grab the GPG key for nginx because port 11371\n#   is sometimes blocked by firewalls. See:\n#   https://github.com/StackStorm/st2-docker/issues/135#issuecomment-392186954\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys ABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends nginx=1.4.6-1ubuntu3.9 -y \\\n && cp /usr/share/doc/st2/conf/nginx/st2.conf /etc/nginx/conf.d/st2-base.cnf \\\n && (cd /etc/nginx/conf.d \\\n && ln -s st2-base.cnf st2.conf ) \\\n && mkdir -p /etc/ssl/st2 \\\n && mkdir /var/run/sshd \\\n && openssl req -x509 -newkey rsa:2048 -keyout /etc/ssl/st2/st2.key -out /etc/ssl/st2/st2.crt -days 3650 -nodes -subj '/O=st2 self signed/CN=localhost'\nEXPOSE 22/tcp 443/tcp\nCOPY bin/entrypoint.sh /st2-docker/bin/entrypoint.sh\nCOPY bin/st2.sh /st2-docker/bin/st2.sh\nCOPY config/local.conf /etc/init/local.conf\n#   1ppc\nRUN wget -O /dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 \\\n && chmod +x /dumb-init\nCOPY bin/entrypoint-1ppc.sh /st2-docker/bin/entrypoint-1ppc.sh\nCOPY bin/inject_env.py /st2-docker/bin/inject_env.py\nCOPY config/nginx.st2-1ppc.conf.tpl /etc/nginx/conf.d/st2-1ppc.conf.tpl\n#   Default username/password is used unless overridden by supplying ST2_USER and/or ST2_PASSWORD\n#   environment variables to `docker run` after the name of the image:\n#     docker run -e ST2_USER... image\nENTRYPOINT [\"/st2-docker/bin/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:trusty\n#  let Upstart know it's in a container\nENV container=\"docker\"\nCOPY config/init-fake.conf /etc/init/fake-container-events.conf\n#  uuid-runtime is required, otherwise the last test in 'test_quickstart_key.yaml' fails\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install openssh-server sudo curl gdebi-core sshpass cron netcat net-tools crudini uuid-runtime apache2-utils bash-completion -y\n#  enable bash-completion\nRUN dpkg-divert /etc/bash.bashrc \\\n && sed -i '/^# enable bash completion/,/^# sudo hint/{//p;//d;s/^#//}' /etc/bash.bashrc\nRUN echo -e \"#!/bin/sh\\nexit 101\\n\" > /usr/sbin/policy-rc.d \\\n && rm /sbin/initctl ; dpkg-divert --rename --remove /sbin/initctl \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  remove some pointless services\nRUN /usr/sbin/update-rc.d -f ondemand remove ; for f in /etc/init/u*.conf /etc/init/mounted-dev.conf /etc/init/mounted-proc.conf /etc/init/mounted-run.conf /etc/init/mounted-tmp.conf /etc/init/mounted-var.conf /etc/init/hostname.conf /etc/init/networking.conf /etc/init/tty*.conf /etc/init/plymouth*.conf /etc/init/hwclock*.conf /etc/init/module*.conf; do dpkg-divert --local --rename --add \"$f\" ; done ; echo '# /lib/init/fstab: cleared out for bare-bones Docker' > /lib/init/fstab\n#  Default value of ST2_REPO is \"stable\"\nARG ST2_REPO=stable\n#  Configure system so that the \"stable\" ST2 packages\n#  are fetched from packagecloud.io\nRUN curl -s https://packagecloud.io/install/repositories/StackStorm/${ST2_REPO}/script.deb.sh | sudo bash\n#  The following variable is the most recent commit in\n#  the st2-docker repo used to fetch this Dockerfile.\nARG CIRCLE_SHA1\nARG CIRCLE_BUILD_URL\nARG CIRCLE_PROJECT_USERNAME\nARG CIRCLE_PROJECT_REPONAME\n#  Override these values if you want to specify different package versions\nARG ST2_TAG\nARG ST2_VERSION\nARG ST2WEB_VERSION\nARG ST2MISTRAL_VERSION\nCOPY bin/install.sh /install.sh\n#  It is not possible to dynamically set ARG's, so we do the needful in bin/install.sh\n#  Install st2, st2web, st2mistral and st2chatops\nRUN /install.sh\n#  Unless these lines are changed, the services are not started when runlevel -> 2\n#  Call mistral-db-manage before mistral starts\nRUN sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/mistral.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/mistral.conf \\\n && sed -i '/start mistral-api/i\\ /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head\\n /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf populate\\n' /etc/init/mistral.conf\n#  Setup symmetric crypto key for datastore\nRUN mkdir -p /etc/st2/keys \\\n && st2-generate-symmetric-crypto-key --key-path /etc/st2/keys/datastore_key.json \\\n && usermod -a -G st2 st2 \\\n && chgrp st2 /etc/st2/keys \\\n && chmod o-r /etc/st2/keys \\\n && chgrp st2 /etc/st2/keys/datastore_key.json \\\n && chmod o-r /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf keyvalue encryption_key_path /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf auth enable True\n#  Install redis client library for coordination backend\n#  see: https://docs.stackstorm.com/latest/reference/policies.html\nRUN bash -c 'source /opt/stackstorm/st2/bin/activate \\\n && pip install redis'\n#  Setup SSH and SUDO access for stanley user\nRUN mkdir -p /home/stanley/.ssh \\\n && chmod 0700 /home/stanley/.ssh \\\n && ssh-keygen -f /home/stanley/.ssh/stanley_rsa -P \"\" \\\n && cat /home/stanley/.ssh/stanley_rsa.pub >> /home/stanley/.ssh/authorized_keys \\\n && chown -R stanley:stanley /home/stanley/.ssh \\\n && echo \"stanley ALL=(ALL) NOPASSWD: SETENV: ALL\" >> /etc/sudoers.d/st2 \\\n && chmod 0440 /etc/sudoers.d/st2 \\\n && sed -i -r \"s/^Defaults\\s+\\+?requiretty/# Defaults +requiretty/g\" /etc/sudoers\n#  Install and configure nginx\n#  Use hkp://...:80 explicitly to grab the GPG key for nginx because port 11371\n#  is sometimes blocked by firewalls. See:\n#  https://github.com/StackStorm/st2-docker/issues/135#issuecomment-392186954\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys ABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install nginx -y \\\n && cp /usr/share/doc/st2/conf/nginx/st2.conf /etc/nginx/conf.d/st2-base.cnf \\\n && (cd /etc/nginx/conf.d \\\n && ln -s st2-base.cnf st2.conf ) \\\n && mkdir -p /etc/ssl/st2 \\\n && mkdir /var/run/sshd \\\n && openssl req -x509 -newkey rsa:2048 -keyout /etc/ssl/st2/st2.key -out /etc/ssl/st2/st2.crt -days 3650 -nodes -subj '/O=st2 self signed/CN=localhost'\nEXPOSE 22/tcp 443/tcp\nCOPY bin/entrypoint.sh /st2-docker/bin/entrypoint.sh\nCOPY bin/st2.sh /st2-docker/bin/st2.sh\nCOPY config/local.conf /etc/init/local.conf\n#  1ppc\nRUN wget -O /dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 \\\n && chmod +x /dumb-init\nCOPY bin/entrypoint-1ppc.sh /st2-docker/bin/entrypoint-1ppc.sh\nCOPY bin/inject_env.py /st2-docker/bin/inject_env.py\nCOPY config/nginx.st2-1ppc.conf.tpl /etc/nginx/conf.d/st2-1ppc.conf.tpl\n#  Default username/password is used unless overridden by supplying ST2_USER and/or ST2_PASSWORD\n#  environment variables to `docker run` after the name of the image:\n#    docker run -e ST2_USER... image\nENTRYPOINT [\"/st2-docker/bin/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"d47bcb16036ce08bc4d74f1fb72ce0a9","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:trusty\n#   let Upstart know it's in a container\nENV container=\"docker\"\nCOPY config/init-fake.conf /etc/init/fake-container-events.conf\n#   uuid-runtime is required, otherwise the last test in 'test_quickstart_key.yaml' fails\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install openssh-server sudo curl gdebi-core sshpass cron netcat net-tools crudini uuid-runtime apache2-utils bash-completion -y\n#   enable bash-completion\nRUN dpkg-divert /etc/bash.bashrc \\\n && sed -i '/^# enable bash completion/,/^# sudo hint/{//p;//d;s/^#//}' /etc/bash.bashrc\nRUN echo -e \"#!/bin/sh\\nexit 101\\n\" > /usr/sbin/policy-rc.d \\\n && rm /sbin/initctl ; dpkg-divert --rename --remove /sbin/initctl \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   remove some pointless services\nRUN /usr/sbin/update-rc.d -f ondemand remove ; for f in /etc/init/u*.conf /etc/init/mounted-dev.conf /etc/init/mounted-proc.conf /etc/init/mounted-run.conf /etc/init/mounted-tmp.conf /etc/init/mounted-var.conf /etc/init/hostname.conf /etc/init/networking.conf /etc/init/tty*.conf /etc/init/plymouth*.conf /etc/init/hwclock*.conf /etc/init/module*.conf; do dpkg-divert --local --rename --add \"$f\" ; done ; echo '# /lib/init/fstab: cleared out for bare-bones Docker' > /lib/init/fstab\n#   Default value of ST2_REPO is \"stable\"\nARG ST2_REPO=stable\n#   Configure system so that the \"stable\" ST2 packages\n#   are fetched from packagecloud.io\nRUN curl -s https://packagecloud.io/install/repositories/StackStorm/${ST2_REPO}/script.deb.sh | sudo bash\n#   The following variable is the most recent commit in\n#   the st2-docker repo used to fetch this Dockerfile.\nARG CIRCLE_SHA1\nARG CIRCLE_BUILD_URL\nARG CIRCLE_PROJECT_USERNAME\nARG CIRCLE_PROJECT_REPONAME\n#   Override these values if you want to specify different package versions\nARG ST2_TAG\nARG ST2_VERSION\nARG ST2WEB_VERSION\nARG ST2MISTRAL_VERSION\nCOPY bin/install.sh /install.sh\n#   It is not possible to dynamically set ARG's, so we do the needful in bin/install.sh\n#   Install st2, st2web, st2mistral and st2chatops\nRUN /install.sh\n#   Unless these lines are changed, the services are not started when runlevel -> 2\n#   Call mistral-db-manage before mistral starts\nRUN sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/st2*.conf \\\n && sed -i 's/start on filesystem and net-device-up IFACE!=lo/start on runlevel \\[2345\\]/' /etc/init/mistral.conf \\\n && sed -i 's/stop on starting rc RUNLEVEL=\\[016\\]/stop on runlevel \\[!2345\\]/' /etc/init/mistral.conf \\\n && sed -i '/start mistral-api/i\\ /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head\\n /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf populate\\n' /etc/init/mistral.conf\n#   Setup symmetric crypto key for datastore\nRUN mkdir -p /etc/st2/keys \\\n && st2-generate-symmetric-crypto-key --key-path /etc/st2/keys/datastore_key.json \\\n && usermod -a -G st2 st2 \\\n && chgrp st2 /etc/st2/keys \\\n && chmod o-r /etc/st2/keys \\\n && chgrp st2 /etc/st2/keys/datastore_key.json \\\n && chmod o-r /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf keyvalue encryption_key_path /etc/st2/keys/datastore_key.json \\\n && crudini --set /etc/st2/st2.conf auth enable True\n#   Install redis client library for coordination backend\n#   see: https://docs.stackstorm.com/latest/reference/policies.html\nRUN bash -c 'source /opt/stackstorm/st2/bin/activate \\\n && pip install redis'\n#   Setup SSH and SUDO access for stanley user\nRUN mkdir -p /home/stanley/.ssh \\\n && chmod 0700 /home/stanley/.ssh \\\n && ssh-keygen -f /home/stanley/.ssh/stanley_rsa -P \"\" \\\n && cat /home/stanley/.ssh/stanley_rsa.pub >> /home/stanley/.ssh/authorized_keys \\\n && chown -R stanley:stanley /home/stanley/.ssh \\\n && echo \"stanley ALL=(ALL) NOPASSWD: SETENV: ALL\" >> /etc/sudoers.d/st2 \\\n && chmod 0440 /etc/sudoers.d/st2 \\\n && sed -i -r \"s/^Defaults\\s+\\+?requiretty/# Defaults +requiretty/g\" /etc/sudoers\n#   Install and configure nginx\n#   Use hkp://...:80 explicitly to grab the GPG key for nginx because port 11371\n#   is sometimes blocked by firewalls. See:\n#   https://github.com/StackStorm/st2-docker/issues/135#issuecomment-392186954\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys ABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install nginx -y \\\n && cp /usr/share/doc/st2/conf/nginx/st2.conf /etc/nginx/conf.d/st2-base.cnf \\\n && (cd /etc/nginx/conf.d \\\n && ln -s st2-base.cnf st2.conf ) \\\n && mkdir -p /etc/ssl/st2 \\\n && mkdir /var/run/sshd \\\n && openssl req -x509 -newkey rsa:2048 -keyout /etc/ssl/st2/st2.key -out /etc/ssl/st2/st2.crt -days 3650 -nodes -subj '/O=st2 self signed/CN=localhost'\nEXPOSE 22/tcp 443/tcp\nCOPY bin/entrypoint.sh /st2-docker/bin/entrypoint.sh\nCOPY bin/st2.sh /st2-docker/bin/st2.sh\nCOPY config/local.conf /etc/init/local.conf\n#   1ppc\nRUN wget -O /dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 \\\n && chmod +x /dumb-init\nCOPY bin/entrypoint-1ppc.sh /st2-docker/bin/entrypoint-1ppc.sh\nCOPY bin/inject_env.py /st2-docker/bin/inject_env.py\nCOPY config/nginx.st2-1ppc.conf.tpl /etc/nginx/conf.d/st2-1ppc.conf.tpl\n#   Default username/password is used unless overridden by supplying ST2_USER and/or ST2_PASSWORD\n#   environment variables to `docker run` after the name of the image:\n#     docker run -e ST2_USER... image\nENTRYPOINT [\"/st2-docker/bin/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"290a0750d9e67e0244bb7dfa30cff8e0","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f49a15a7e0c2bf5f17af47bfedb605e5d0a3e3bf.dockerfile"}