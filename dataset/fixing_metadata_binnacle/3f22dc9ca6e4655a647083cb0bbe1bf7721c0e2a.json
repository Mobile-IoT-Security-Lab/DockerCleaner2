{"seed":3430509397,"processedDockerfileHash":"f7a4f68025aa58f4090a9c4b89779e5f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Dockerfile contains multiple levels of images--\n#   First, a base image containing dependencies shared by all other images:\n#     - apt dependencies\n#     - rust\n#     - ntl\n#     - pbc\n#     - charm\n#     - base pip dependencies (cython & setup.py)\n#     - ethereum\n#   \n#   Thereafter, it adds ever increasing levels of dependencies-- \n#     - Test requirements (including doc requirements)\n#     - Dev requirements (including aws)\n#\n#   In order to build and push this to dockerhub, run:\n#   docker build . --target test-image --tag dsluiuc/honeybadgermpc-docker-base\n#   docker push dsluiuc/honeybadgermpc-docker-base:latest\nFROM python:3.7.3-slim AS base-image\n#   Allows for log messages to be immediately dumped to the \n#   stream instead of being buffered.\nENV PYTHONUNBUFFERED=\"1 \"\n#   Path variables needed for Charm\nENV LIBRARY_PATH=\"/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#   Make sh point to bash\n#   This is being changed since it will avoid any errors in the `launch_mpc.sh` script\n#   which relies on certain code that doesn't work in container's default shell.\nRUN ln -sf bash /bin/sh\n#   Install apt dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bison curl flex g++ git iproute2 libflint-dev libgmp-dev libmpc-dev libmpfr-dev libssl-dev make openssl tmux wget vim -y\n#   This is needed otherwise the build for the power sum solver will fail.\n#   This is a known issue in the version of libflint-dev in apt.\n#   https://github.com/wbhart/flint2/issues/217\n#   This has been fixed if we pull the latest code from the repo. However, we want\n#   to avoid compiling the lib from the source since it adds 20 minutes to the build.\nRUN sed -i '30c #include \"flint/flint.h\"' /usr/include/flint/flintxx/flint_classes.h\nRUN echo \"alias cls=\\\"clear \\\n && printf '\\e[3J'\\\"\" >> ~/.bashrc\n#   RUN python -m venv /opt/venv\n#   ENV PATH \"/opt/venv/bin:${PATH}\"\n#   Downloads rust and sets it up\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-2018-10-24\nENV PATH=\"\\\"/root/.cargo/bin:${PATH}\\\"\"\n#   Download and build NTL from source\n#   Shoup recommends not using O3\nRUN curl -so - https://www.shoup.net/ntl/ntl-11.3.2.tar.gz | tar xzvf -\nWORKDIR /ntl-11.3.2/src  \nRUN ./configure CXXFLAGS=\"-g -O2 -fPIC -march=native -pthread -std=c++11\"\nRUN make\nRUN make install\nWORKDIR /\n#   Install betterpairing\nRUN curl -so - https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz | tar xzvf -\nWORKDIR /pbc-0.5.14/\nRUN ./configure\nRUN make\nRUN make install\nWORKDIR /\n#   Downloads and installs charm\nRUN git clone https://github.com/JHUISI/charm.git\nWORKDIR /charm/\nRUN git reset --hard be9587ccdd4d61c591fb50728ebf2a4690a2064f\nRUN ./configure.sh\nRUN make install\nWORKDIR /\n#   Ethereum .[eth] extras\nRUN apt-get install --no-install-recommends git cmake g++ libffi-dev libssl-dev sudo -y\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install --no-install-recommends nodejs npm -y\nRUN npm install ganache-cli@6.12.2 -g\nRUN git clone --recursive https://github.com/ethereum/solidity.git\nWORKDIR /solidity/\nRUN git checkout v0.4.24\nRUN git submodule update --init --recursive\nRUN ./scripts/install_deps.sh\nRUN mkdir build/\nWORKDIR build\nRUN cmake ..\nRUN make install\nWORKDIR /\n#   Below derived from https://pythonspeed.com/articles/multi-stage-docker-python/\nWORKDIR /usr/src/HoneyBadgerMPC\nCOPY . /usr/src/HoneyBadgerMPC\nRUN pip install pip==23.1 --upgrade\nRUN pip install Cython==0.29.34\nRUN pip install -e .\nRUN pip install pairing/\nRUN make -C apps/asynchromix/cpp\n#   Installs test dependencies\n#   For now, upload this to docker-hub\n#\n#   TODO: see if we can shrink this image size more.\n#   I was able to do it by copying over from LIBRARY_PATH, /opt/venv/ \n#   and compiled outputs from apps and ntl, but I couldn't manage to get\n#   lib_solver to import correctly.\nFROM base-image AS test-image\nRUN pip install -e .[\"tests,docs\"]\n#   Actual image to use for dev work\nFROM test-image AS dev-release\n#   -e so that it installs locally\n#   RUN pip install --user -e .[\"dev,aws\"]\nRUN pip install -e .[\"dev,aws\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile contains multiple levels of images--\n#  First, a base image containing dependencies shared by all other images:\n#    - apt dependencies\n#    - rust\n#    - ntl\n#    - pbc\n#    - charm\n#    - base pip dependencies (cython & setup.py)\n#    - ethereum\n#  \n#  Thereafter, it adds ever increasing levels of dependencies-- \n#    - Test requirements (including doc requirements)\n#    - Dev requirements (including aws)\n#\n#  In order to build and push this to dockerhub, run:\n#  docker build . --target test-image --tag dsluiuc/honeybadgermpc-docker-base\n#  docker push dsluiuc/honeybadgermpc-docker-base:latest\nFROM python:3.7.3-slim AS base-image\n#  Allows for log messages to be immediately dumped to the \n#  stream instead of being buffered.\nENV PYTHONUNBUFFERED=\"1 \"\n#  Path variables needed for Charm\nENV LIBRARY_PATH=\"/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#  Make sh point to bash\n#  This is being changed since it will avoid any errors in the `launch_mpc.sh` script\n#  which relies on certain code that doesn't work in container's default shell.\nRUN ln -sf bash /bin/sh\n#  Install apt dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bison curl flex g++ git iproute2 libflint-dev libgmp-dev libmpc-dev libmpfr-dev libssl-dev make openssl tmux wget vim -y\n#  This is needed otherwise the build for the power sum solver will fail.\n#  This is a known issue in the version of libflint-dev in apt.\n#  https://github.com/wbhart/flint2/issues/217\n#  This has been fixed if we pull the latest code from the repo. However, we want\n#  to avoid compiling the lib from the source since it adds 20 minutes to the build.\nRUN sed -i '30c #include \"flint/flint.h\"' /usr/include/flint/flintxx/flint_classes.h\nRUN echo \"alias cls=\\\"clear \\\n && printf '\\e[3J'\\\"\" >> ~/.bashrc\n#  RUN python -m venv /opt/venv\n#  ENV PATH \"/opt/venv/bin:${PATH}\"\n#  Downloads rust and sets it up\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-2018-10-24\nENV PATH=\"\\\"/root/.cargo/bin:${PATH}\\\"\"\n#  Download and build NTL from source\n#  Shoup recommends not using O3\nRUN curl -so - https://www.shoup.net/ntl/ntl-11.3.2.tar.gz | tar xzvf -\nWORKDIR /ntl-11.3.2/src  \nRUN ./configure CXXFLAGS=\"-g -O2 -fPIC -march=native -pthread -std=c++11\"\nRUN make\nRUN make install\nWORKDIR /\n#  Install betterpairing\nRUN curl -so - https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz | tar xzvf -\nWORKDIR /pbc-0.5.14/\nRUN ./configure\nRUN make\nRUN make install\nWORKDIR /\n#  Downloads and installs charm\nRUN git clone https://github.com/JHUISI/charm.git\nWORKDIR /charm/\nRUN git reset --hard be9587ccdd4d61c591fb50728ebf2a4690a2064f\nRUN ./configure.sh\nRUN make install\nWORKDIR /\n#  Ethereum .[eth] extras\nRUN apt-get install --no-install-recommends git cmake g++ libffi-dev libssl-dev sudo -y\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install --no-install-recommends nodejs npm -y\nRUN npm install ganache-cli -g\nRUN git clone --recursive https://github.com/ethereum/solidity.git\nWORKDIR /solidity/\nRUN git checkout v0.4.24\nRUN git submodule update --init --recursive\nRUN ./scripts/install_deps.sh\nRUN mkdir build/\nWORKDIR build\nRUN cmake ..\nRUN make install\nWORKDIR /\n#  Below derived from https://pythonspeed.com/articles/multi-stage-docker-python/\nWORKDIR /usr/src/HoneyBadgerMPC\nCOPY . /usr/src/HoneyBadgerMPC\nRUN pip install pip --upgrade\nRUN pip install Cython\nRUN pip install -e .\nRUN pip install pairing/\nRUN make -C apps/asynchromix/cpp\n#  Installs test dependencies\n#  For now, upload this to docker-hub\n#\n#  TODO: see if we can shrink this image size more.\n#  I was able to do it by copying over from LIBRARY_PATH, /opt/venv/ \n#  and compiled outputs from apps and ntl, but I couldn't manage to get\n#  lib_solver to import correctly.\nFROM base-image AS test-image\nRUN pip install -e .[\"tests,docs\"]\n#  Actual image to use for dev work\nFROM test-image AS dev-release\n#  -e so that it installs locally\n#  RUN pip install --user -e .[\"dev,aws\"]\nRUN pip install -e .[\"dev,aws\"]\n","injectedSmells":[],"originalDockerfileHash":"81b03981e74f0648bfafa1cfcc796b55","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile contains multiple levels of images--\n#   First, a base image containing dependencies shared by all other images:\n#     - apt dependencies\n#     - rust\n#     - ntl\n#     - pbc\n#     - charm\n#     - base pip dependencies (cython & setup.py)\n#     - ethereum\n#   \n#   Thereafter, it adds ever increasing levels of dependencies-- \n#     - Test requirements (including doc requirements)\n#     - Dev requirements (including aws)\n#\n#   In order to build and push this to dockerhub, run:\n#   docker build . --target test-image --tag dsluiuc/honeybadgermpc-docker-base\n#   docker push dsluiuc/honeybadgermpc-docker-base:latest\nFROM python:3.7.3-slim AS base-image\n#   Allows for log messages to be immediately dumped to the \n#   stream instead of being buffered.\nENV PYTHONUNBUFFERED=\"1 \"\n#   Path variables needed for Charm\nENV LIBRARY_PATH=\"/usr/local/lib\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#   Make sh point to bash\n#   This is being changed since it will avoid any errors in the `launch_mpc.sh` script\n#   which relies on certain code that doesn't work in container's default shell.\nRUN ln -sf bash /bin/sh\n#   Install apt dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bison curl flex g++ git iproute2 libflint-dev libgmp-dev libmpc-dev libmpfr-dev libssl-dev make openssl tmux wget vim -y\n#   This is needed otherwise the build for the power sum solver will fail.\n#   This is a known issue in the version of libflint-dev in apt.\n#   https://github.com/wbhart/flint2/issues/217\n#   This has been fixed if we pull the latest code from the repo. However, we want\n#   to avoid compiling the lib from the source since it adds 20 minutes to the build.\nRUN sed -i '30c #include \"flint/flint.h\"' /usr/include/flint/flintxx/flint_classes.h\nRUN echo \"alias cls=\\\"clear \\\n && printf '\\e[3J'\\\"\" >> ~/.bashrc\n#   RUN python -m venv /opt/venv\n#   ENV PATH \"/opt/venv/bin:${PATH}\"\n#   Downloads rust and sets it up\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly-2018-10-24\nENV PATH=\"\\\"/root/.cargo/bin:${PATH}\\\"\"\n#   Download and build NTL from source\n#   Shoup recommends not using O3\nRUN curl -so - https://www.shoup.net/ntl/ntl-11.3.2.tar.gz | tar xzvf -\nWORKDIR /ntl-11.3.2/src  \nRUN ./configure CXXFLAGS=\"-g -O2 -fPIC -march=native -pthread -std=c++11\"\nRUN make\nRUN make install\nWORKDIR /\n#   Install betterpairing\nRUN curl -so - https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz | tar xzvf -\nWORKDIR /pbc-0.5.14/\nRUN ./configure\nRUN make\nRUN make install\nWORKDIR /\n#   Downloads and installs charm\nRUN git clone https://github.com/JHUISI/charm.git\nWORKDIR /charm/\nRUN git reset --hard be9587ccdd4d61c591fb50728ebf2a4690a2064f\nRUN ./configure.sh\nRUN make install\nWORKDIR /\n#   Ethereum .[eth] extras\nRUN apt-get install --no-install-recommends git cmake g++ libffi-dev libssl-dev sudo -y\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install --no-install-recommends nodejs npm -y\nRUN npm install ganache-cli -g\nRUN git clone --recursive https://github.com/ethereum/solidity.git\nWORKDIR /solidity/\nRUN git checkout v0.4.24\nRUN git submodule update --init --recursive\nRUN ./scripts/install_deps.sh\nRUN mkdir build/\nWORKDIR build\nRUN cmake ..\nRUN make install\nWORKDIR /\n#   Below derived from https://pythonspeed.com/articles/multi-stage-docker-python/\nWORKDIR /usr/src/HoneyBadgerMPC\nCOPY . /usr/src/HoneyBadgerMPC\nRUN pip install pip --upgrade\nRUN pip install Cython\nRUN pip install -e .\nRUN pip install pairing/\nRUN make -C apps/asynchromix/cpp\n#   Installs test dependencies\n#   For now, upload this to docker-hub\n#\n#   TODO: see if we can shrink this image size more.\n#   I was able to do it by copying over from LIBRARY_PATH, /opt/venv/ \n#   and compiled outputs from apps and ntl, but I couldn't manage to get\n#   lib_solver to import correctly.\nFROM base-image AS test-image\nRUN pip install -e .[\"tests,docs\"]\n#   Actual image to use for dev work\nFROM test-image AS dev-release\n#   -e so that it installs locally\n#   RUN pip install --user -e .[\"dev,aws\"]\nRUN pip install -e .[\"dev,aws\"]\n","originalDockerfileUglifiedHash":"fd9ec6e0a9910dcb4db540a21a117c32","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3f22dc9ca6e4655a647083cb0bbe1bf7721c0e2a.dockerfile"}