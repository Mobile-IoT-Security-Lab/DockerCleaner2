{"seed":974238601,"processedDockerfileHash":"b44792dc6c646f0c675707cd7d66ee31","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"#   VideoFront, a FUN LTI video provider\n#\n#   Nota bene:\n#\n#   this container expects two volumes for statics and media files (that will be\n#   served by nginx):\n#\n#   * /data/media\n#   * /data/static\n#\n#   Once mounted, you will need to collect static files via the eponym django\n#   admin command:\n#\n#       python ./manage.py collectstatic\n#\n#   ---- base image to inherit from ----\nFROM python:3.6-alpine AS base\n#   ---- builder image ----\nFROM base AS back-builder\n#   Install development libraries required for compiled python dependencies (lxml,\n#   Pillow and psycopg2)\nRUN apk add libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 build-base=0.5-r3 freetype-dev=2.11.1-r2 fribidi-dev=1.0.11-r0 harfbuzz-dev=3.0.0-r2 jpeg-dev=9d-r1 lcms2-dev=2.12-r1 openjpeg-dev=2.4.0-r2 tcl-dev=8.6.11-r1 tiff-dev=4.4.0-r1 tk-dev=8.6.11-r0 zlib-dev=1.2.12-r3 postgresql-dev --no-cache --update \\\n && rm -rf /var/cache/apk/*\nWORKDIR /install\nCOPY setup.cfg /setup.cfg\nRUN python -c \"import configparser; c = configparser.ConfigParser(); c.read('/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['aws'])\" | xargs pip install --prefix=/install\n#   ---- final application image ----\nFROM base\n#   Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#   Install only (linked) libraries required for compiled python dependencies\n#   (lxml, Pillow and psycopg2)\nRUN apk add libxml2=2.9.14-r2 libxslt=1.1.35-r0 freetype=2.11.1-r2 fribidi=1.0.11-r0 harfbuzz=3.0.0-r2 jpeg=9d-r1 lcms2=2.12-r1 openjpeg=2.4.0-r2 tcl=8.6.11-r1 tiff=4.4.0-r1 tk=8.6.11-r0 zlib=1.2.12-r3 postgresql --no-cache --update \\\n && rm -rf /var/cache/apk/*\n#   Copy videofront application (see .dockerignore)\nCOPY . /app/\nWORKDIR /app\n#   Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/videofront.py /usr/local/etc/gunicorn/videofront.py\n#   Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#   to allow a user belonging to the root group to add new users; typically the\n#   docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#   We wrap commands run in this container by the following entrypoint that\n#   creates a user on-the-fly with the container user ID (see USER) and root group\n#   ID.\nENTRYPOINT [\"/app/bin/entrypoint\"]\n#   The default command runs gunicorn WSGI server\nCMD gunicorn -c /usr/local/etc/gunicorn/videofront.py videofront.wsgi:application\n#   Un-privileged user running the application\nUSER 10000\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  VideoFront, a FUN LTI video provider\n#\n#  Nota bene:\n#\n#  this container expects two volumes for statics and media files (that will be\n#  served by nginx):\n#\n#  * /data/media\n#  * /data/static\n#\n#  Once mounted, you will need to collect static files via the eponym django\n#  admin command:\n#\n#      python ./manage.py collectstatic\n#\n#  ---- base image to inherit from ----\nFROM python:3.6-alpine AS base\n#  ---- builder image ----\nFROM base AS back-builder\n#  Install development libraries required for compiled python dependencies (lxml,\n#  Pillow and psycopg2)\nRUN apk --no-cache add --update libxml2-dev libxslt-dev build-base freetype-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev tcl-dev tiff-dev tk-dev zlib-dev postgresql-dev \\\n && rm -rf /var/cache/apk/*\nWORKDIR /install\nCOPY setup.cfg /setup.cfg\nRUN python -c \"import configparser; c = configparser.ConfigParser(); c.read('/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['aws'])\" | xargs pip install --prefix=/install\n#  ---- final application image ----\nFROM base\n#  Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#  Install only (linked) libraries required for compiled python dependencies\n#  (lxml, Pillow and psycopg2)\nRUN apk --no-cache add --update libxml2 libxslt freetype fribidi harfbuzz jpeg lcms2 openjpeg tcl tiff tk zlib postgresql \\\n && rm -rf /var/cache/apk/*\n#  Copy videofront application (see .dockerignore)\nCOPY . /app/\nWORKDIR /app\n#  Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/videofront.py /usr/local/etc/gunicorn/videofront.py\n#  Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#  to allow a user belonging to the root group to add new users; typically the\n#  docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#  We wrap commands run in this container by the following entrypoint that\n#  creates a user on-the-fly with the container user ID (see USER) and root group\n#  ID.\nENTRYPOINT [\"/app/bin/entrypoint\"]\n#  The default command runs gunicorn WSGI server\nCMD gunicorn -c /usr/local/etc/gunicorn/videofront.py videofront.wsgi:application\n#  Un-privileged user running the application\nUSER 10000\n","injectedSmells":[],"originalDockerfileHash":"68557798ced758f7e35eb4b33a11b389","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   VideoFront, a FUN LTI video provider\n#\n#   Nota bene:\n#\n#   this container expects two volumes for statics and media files (that will be\n#   served by nginx):\n#\n#   * /data/media\n#   * /data/static\n#\n#   Once mounted, you will need to collect static files via the eponym django\n#   admin command:\n#\n#       python ./manage.py collectstatic\n#\n#   ---- base image to inherit from ----\nFROM python:3.6-alpine AS base\n#   ---- builder image ----\nFROM base AS back-builder\n#   Install development libraries required for compiled python dependencies (lxml,\n#   Pillow and psycopg2)\nRUN apk --no-cache add --update libxml2-dev libxslt-dev build-base freetype-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev tcl-dev tiff-dev tk-dev zlib-dev postgresql-dev \\\n && rm -rf /var/cache/apk/*\nWORKDIR /install\nCOPY setup.cfg /setup.cfg\nRUN python -c \"import configparser; c = configparser.ConfigParser(); c.read('/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['aws'])\" | xargs pip install --prefix=/install\n#   ---- final application image ----\nFROM base\n#   Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#   Install only (linked) libraries required for compiled python dependencies\n#   (lxml, Pillow and psycopg2)\nRUN apk --no-cache add --update libxml2 libxslt freetype fribidi harfbuzz jpeg lcms2 openjpeg tcl tiff tk zlib postgresql \\\n && rm -rf /var/cache/apk/*\n#   Copy videofront application (see .dockerignore)\nCOPY . /app/\nWORKDIR /app\n#   Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/videofront.py /usr/local/etc/gunicorn/videofront.py\n#   Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#   to allow a user belonging to the root group to add new users; typically the\n#   docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#   We wrap commands run in this container by the following entrypoint that\n#   creates a user on-the-fly with the container user ID (see USER) and root group\n#   ID.\nENTRYPOINT [\"/app/bin/entrypoint\"]\n#   The default command runs gunicorn WSGI server\nCMD gunicorn -c /usr/local/etc/gunicorn/videofront.py videofront.wsgi:application\n#   Un-privileged user running the application\nUSER 10000\n","originalDockerfileUglifiedHash":"4273c2230d84697a1781d14701d99632","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d98ebbad952f6767789b1bbc85d07471e3c3dbd6.dockerfile"}