{"seed":126713258,"processedDockerfileHash":"bb9fbc5f977524349fd9818362b05d52","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   All images inherit from this\nFROM node:10.16.0-alpine AS base\n#   dependencies that exist in all layers\nRUN apk add bash=4.4.19-r1 tini=0.18.0-r0 g++=8.3.0-r0 ca-certificates=20191127-r2 lz4-dev=1.8.3-r2 musl-dev=1.1.20-r6 openssl-dev=1.1.1k-r0 make=4.2.1-r2 python --no-cache\nENV NPM_CONFIG_LOGLEVEL=\"error\"\nRUN mkdir -p /app/source /app/connectors\nWORKDIR /app/source\n#   Use tini to handle sigterm and zombie processes\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n#   Install the connectors in a different layer\nFROM base AS connectors\nRUN apk add gcc=8.3.0-r0 zlib-dev=1.2.11-r1 bsd-compat-headers=0.7.1-r0 py-setuptools=40.6.3-r0 --no-cache --virtual .build-deps\nENV WITH_SASL=\"0\"\n#   Install any built-in connectors in /app/\n#   use npm because there isn't a package.json\nWORKDIR /app/connectors\nRUN npm init --yes > /dev/null \\\n && npm install 'terafoundation_kafka_connector@~0.4.1' --quiet --no-package-lock \\\n && rm -rf node_modules/node-rdkafka/docs node_modules/node-rdkafka/deps/librdkafka\n#   the deps image should contain all of dev code\nFROM base AS deps\nCOPY .yarn-cache .yarn-cache\nCOPY package.json yarn.lock lerna.json .yarnrc /app/source/\nCOPY packages /app/source/packages\n#   Build just the production node_modules and copy them over\nRUN yarn --prod=true --frozen-lockfile --no-progress --prefer-offline --no-emoji \\\n && cp -Rp node_modules /app/node_modules\nENV NODE_ENV=\"development\"\n#   install both dev and production dependencies\nRUN yarn --prod=false --frozen-lockfile --no-progress --prefer-offline --ignore-optional --no-emoji\n#   Prepare the node modules for isntallation\nCOPY types /app/source/types\nCOPY tsconfig.json /app/source/\n#   Build the packages\nRUN yarn lerna link --force-local \\\n && yarn lerna run build\n#   the prod image should small\nFROM base\n#   Install bunyan\nRUN yarn global add --silent --ignore-optional --no-progress --no-emoji --no-cache bunyan\nENV NODE_ENV=\"production\"\nCOPY --from=connectors /app/connectors/node_modules /app/node_modules\n#   verify node-rdkafka is installed right\nRUN node -e \"require('node-rdkafka')\"\nCOPY service.js package.json lerna.json yarn.lock .yarnrc /app/source/\nCOPY scripts /app/source/scripts\n#   copy the compiled packages\nCOPY --from=deps /app/source/packages /app/source/packages\n#   copy the production node_modules\nCOPY --from=deps /app/node_modules /app/source/node_modules\n#   verify teraslice is installed right\nRUN node -e \"require('teraslice')\"\nEXPOSE 5678/tcp\n#   set up the volumes\nVOLUME /app/config /app/logs /app/assets\nENV TERAFOUNDATION_CONFIG=\"/app/config/teraslice.yaml\"\nENV NODE_OPTIONS=\"\\\"--max-old-space-size=2048\\\"\"\nCMD [\"node\", \"service.js\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"#  All images inherit from this\nFROM node:10.16.0-alpine AS base\n#  dependencies that exist in all layers\nRUN apk --no-cache add bash tini g++ ca-certificates lz4-dev musl-dev openssl-dev make python\nENV NPM_CONFIG_LOGLEVEL=\"error\"\nRUN mkdir -p /app/source /app/connectors\nWORKDIR /app/source\n#  Use tini to handle sigterm and zombie processes\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n#  Install the connectors in a different layer\nFROM base AS connectors\nRUN apk --no-cache add --virtual .build-deps gcc zlib-dev bsd-compat-headers py-setuptools\nENV WITH_SASL=\"0\"\n#  Install any built-in connectors in /app/\n#  use npm because there isn't a package.json\nWORKDIR /app/connectors\nRUN npm init --yes > /dev/null \\\n && npm install 'terafoundation_kafka_connector@~0.4.1' --quiet --no-package-lock \\\n && rm -rf node_modules/node-rdkafka/docs node_modules/node-rdkafka/deps/librdkafka\n#  the deps image should contain all of dev code\nFROM base AS deps\nCOPY .yarn-cache .yarn-cache\nCOPY package.json yarn.lock lerna.json .yarnrc /app/source/\nCOPY packages /app/source/packages\n#  Build just the production node_modules and copy them over\nRUN yarn --prod=true --frozen-lockfile --no-progress --prefer-offline --no-emoji \\\n && cp -Rp node_modules /app/node_modules\nENV NODE_ENV=\"development\"\n#  install both dev and production dependencies\nRUN yarn --prod=false --frozen-lockfile --no-progress --prefer-offline --ignore-optional --no-emoji\n#  Prepare the node modules for isntallation\nCOPY types /app/source/types\nCOPY tsconfig.json /app/source/\n#  Build the packages\nRUN yarn lerna link --force-local \\\n && yarn lerna run build\n#  the prod image should small\nFROM base\n#  Install bunyan\nRUN yarn global add --silent --ignore-optional --no-progress --no-emoji --no-cache bunyan\nENV NODE_ENV=\"production\"\nCOPY --from=connectors /app/connectors/node_modules /app/node_modules\n#  verify node-rdkafka is installed right\nRUN node -e \"require('node-rdkafka')\"\nCOPY service.js package.json lerna.json yarn.lock .yarnrc /app/source/\nCOPY scripts /app/source/scripts\n#  copy the compiled packages\nCOPY --from=deps /app/source/packages /app/source/packages\n#  copy the production node_modules\nCOPY --from=deps /app/node_modules /app/source/node_modules\n#  verify teraslice is installed right\nRUN node -e \"require('teraslice')\"\nEXPOSE 5678/tcp\n#  set up the volumes\nVOLUME /app/config /app/logs /app/assets\nENV TERAFOUNDATION_CONFIG=\"/app/config/teraslice.yaml\"\nENV NODE_OPTIONS=\"\\\"--max-old-space-size=2048\\\"\"\nCMD [\"node\", \"service.js\"]\n","injectedSmells":[],"originalDockerfileHash":"6f261e09f9504df0cafc953f078d7daa","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   All images inherit from this\nFROM node:10.16.0-alpine AS base\n#   dependencies that exist in all layers\nRUN apk --no-cache add bash tini g++ ca-certificates lz4-dev musl-dev openssl-dev make python\nENV NPM_CONFIG_LOGLEVEL=\"error\"\nRUN mkdir -p /app/source /app/connectors\nWORKDIR /app/source\n#   Use tini to handle sigterm and zombie processes\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n#   Install the connectors in a different layer\nFROM base AS connectors\nRUN apk --no-cache add --virtual .build-deps gcc zlib-dev bsd-compat-headers py-setuptools\nENV WITH_SASL=\"0\"\n#   Install any built-in connectors in /app/\n#   use npm because there isn't a package.json\nWORKDIR /app/connectors\nRUN npm init --yes > /dev/null \\\n && npm install 'terafoundation_kafka_connector@~0.4.1' --quiet --no-package-lock \\\n && rm -rf node_modules/node-rdkafka/docs node_modules/node-rdkafka/deps/librdkafka\n#   the deps image should contain all of dev code\nFROM base AS deps\nCOPY .yarn-cache .yarn-cache\nCOPY package.json yarn.lock lerna.json .yarnrc /app/source/\nCOPY packages /app/source/packages\n#   Build just the production node_modules and copy them over\nRUN yarn --prod=true --frozen-lockfile --no-progress --prefer-offline --no-emoji \\\n && cp -Rp node_modules /app/node_modules\nENV NODE_ENV=\"development\"\n#   install both dev and production dependencies\nRUN yarn --prod=false --frozen-lockfile --no-progress --prefer-offline --ignore-optional --no-emoji\n#   Prepare the node modules for isntallation\nCOPY types /app/source/types\nCOPY tsconfig.json /app/source/\n#   Build the packages\nRUN yarn lerna link --force-local \\\n && yarn lerna run build\n#   the prod image should small\nFROM base\n#   Install bunyan\nRUN yarn global add --silent --ignore-optional --no-progress --no-emoji --no-cache bunyan\nENV NODE_ENV=\"production\"\nCOPY --from=connectors /app/connectors/node_modules /app/node_modules\n#   verify node-rdkafka is installed right\nRUN node -e \"require('node-rdkafka')\"\nCOPY service.js package.json lerna.json yarn.lock .yarnrc /app/source/\nCOPY scripts /app/source/scripts\n#   copy the compiled packages\nCOPY --from=deps /app/source/packages /app/source/packages\n#   copy the production node_modules\nCOPY --from=deps /app/node_modules /app/source/node_modules\n#   verify teraslice is installed right\nRUN node -e \"require('teraslice')\"\nEXPOSE 5678/tcp\n#   set up the volumes\nVOLUME /app/config /app/logs /app/assets\nENV TERAFOUNDATION_CONFIG=\"/app/config/teraslice.yaml\"\nENV NODE_OPTIONS=\"\\\"--max-old-space-size=2048\\\"\"\nCMD [\"node\", \"service.js\"]\n","originalDockerfileUglifiedHash":"5683437120f71b345be037edbc432bc6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6bb6a6612211ef6d0b2a833a8c865fcee3ad9ad0.dockerfile"}