{"seed":4035755824,"processedDockerfileHash":"f7f886375a4562eda36aff33c3067535","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim: ft=Dockerfile ts=4 sw=4 expandtab\n#  ##############################################################################\n#\n#   Multi-stage Python 3.x build\n#\n#   build-time environment variables:\n#     LTO=1                   . enable link-time-optimizations\n#     OPTIMAL=1               . enable profile-guided-optimizations (PGO)\n#     PYTHON_VERSION=3.5.3\n#\n#     ** NOTE **:\n#         . LTO requires PGO\n#         . ensure both variables are unset for typical builds\n#\n#   building:\n#     make build-image        . run docker build\n#     make build-push         . push image to repository\n#     make image              . build + push\n#\n#   Stages:\n#      runtime <- debian-base-amd64:0.2\n#         common runtime packages go here\n#      build-setup <- runtime\n#         dev packages, tools, utilities, etc. go here\n#      builder <- build-setup\n#         ./configure <things> && make && make install\n#      post-build <- builder\n#         install any common python modules here\n#      FINAL <- runtime\n#         pip package installation goes here + ENTRYPOINT\n#\n#  ##############################################################################\nFROM gcr.io/google-containers/debian-base-amd64:0.4.0 AS runtime\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\nCOPY ./init-functions /lib/lsb/\nRUN set -ex \\\n && apt-get update \\\n && apt-mark unhold apt gnupg libcap2 libsemanage1 passwd libbz2-1.0 \\\n && runDeps='curl gnupg libsqlite3-0 zlib1g libexpat1 bash tcpdump procps less binutils libbz2-1.0 netcat-openbsd git' \\\n && apt-get update -qq ; apt-get install --no-install-recommends $runDeps -y \\\n && find /usr -type f -name \"*.so\" -exec strip --strip-unneeded {} + \\\n && apt-get remove binutils --purge -y -qq \\\n && find /var/lib/apt/lists /usr/share/man /usr/share/doc /var/log -type f -exec rm -f {} + \\\n && rm -rf /root/.gnupg \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg\nLABEL stage=\"RUNTIME\"\n#  ##############################################################################\nFROM runtime AS build-setup\nCOPY gnupg/pubring.gpg gnupg/trustdb.gpg /root/.gnupg/\nRUN set -ex \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg \\\n && buildDeps='libsqlite3-dev zlib1g-dev libexpat1-dev libssl-dev xz-utils dpkg-dev binutils libbz2-dev libreadline-dev libffi-dev' \\\n && apt-get update -qq ; apt-get install --no-install-recommends ${buildDeps} -qq -y\nARG PYTHON_VERSION\nRUN curl -L -o /python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && curl -L -o /python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --refresh-keys 2>&1 | egrep -v 'requesting key|not changed' \\\n && gpg --batch --verify /python.tar.xz.asc /python.tar.xz \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f /python.tar.xz\nLABEL stage=\"BUILD-SETUP\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM build-setup AS builder\nARG BUILD_ARGS\nARG PYTHON_VERSION\nENV LANG=\"C.UTF-8\"\n#  RUN sleep 6000 || echo \"whee\"\nENV CFLAGS=\"-I/usr/include/openssl\"\nRUN set -ex \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && [ $((`echo $PYTHON_VERSION | cut -d\".\" -f1 `)) -lt 3 ] \\\n && BUILD_ARGS=\"\" ; ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip ${BUILD_ARGS} \\\n && make -j $((1 * $( egrep '^processor[[:space:]]+:' /proc/cpuinfo | wc -l ;))) \\\n && make install\nRUN set -ex find /usr/local -type f -name \"*.so\" -exec strip --strip-unneeded {} + &; ldconfig &; find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN [\"/bin/bash\", \"-c\", \"if\", \"[[\", \"$(\", \"echo\", \"${PYTHON_VERSION}\", \"|\", \"cut\", \"-d'.'\", \"-f1\", \";)\", \"==\", \"'3'\", \"]]\"]\nLABEL stage=\"BUILDER\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM builder AS post-build\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"18.1\"\nCOPY ./ipython_config.py /\nRUN set -ex ; ldconfig\nRUN set -ex ; curl -sL -o get-pip.py 'https://bootstrap.pypa.io/get-pip.py'\nRUN set -ex ; python get-pip.py --disable-pip-version-check --no-cache-dir \"pip==$PYTHON_PIP_VERSION\" ; pip --version\nRUN set -ex ; pip install pipenv==2023.3.20 --upgrade\nRUN mkdir -p $HOME/.ipython/profile_default\nRUN mv ipython_config.py $HOME/.ipython/profile_default/.\nRUN pip install ipdb==0.13.13 'ipython<6'\nRUN set -ex ; find /usr/local -depth\nRUN set -ex ; find /usr/share/\nRUN rm -rf /root/.cache\nARG PYTHON_VERSION\nLABEL stage=\"POST-BUILD\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM runtime\nCOPY --from=post-build /usr/local /usr/local\nCOPY --from=post-build /root /root\nRUN /sbin/ldconfig\nLABEL stage=\"FINAL\"\nARG PYTHON_VERSION\nLABEL version=\"${PYTHON_VERSION}\"\nCMD [\"ipython\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim: ft=Dockerfile ts=4 sw=4 expandtab\n# ##############################################################################\n#\n#  Multi-stage Python 3.x build\n#\n#  build-time environment variables:\n#    LTO=1                   . enable link-time-optimizations\n#    OPTIMAL=1               . enable profile-guided-optimizations (PGO)\n#    PYTHON_VERSION=3.5.3\n#\n#    ** NOTE **:\n#        . LTO requires PGO\n#        . ensure both variables are unset for typical builds\n#\n#  building:\n#    make build-image        . run docker build\n#    make build-push         . push image to repository\n#    make image              . build + push\n#\n#  Stages:\n#     runtime <- debian-base-amd64:0.2\n#        common runtime packages go here\n#     build-setup <- runtime\n#        dev packages, tools, utilities, etc. go here\n#     builder <- build-setup\n#        ./configure <things> && make && make install\n#     post-build <- builder\n#        install any common python modules here\n#     FINAL <- runtime\n#        pip package installation goes here + ENTRYPOINT\n#\n# ##############################################################################\nFROM gcr.io/google-containers/debian-base-amd64:0.4.0 AS runtime\nENV PATH=\"/usr/local/bin:$PATH\"\n#  http://bugs.python.org/issue19846\n#  > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\nCOPY ./init-functions /lib/lsb/\nRUN set -ex \\\n && apt-get update \\\n && apt-mark unhold apt gnupg libcap2 libsemanage1 passwd libbz2-1.0 \\\n && runDeps='curl gnupg libsqlite3-0 zlib1g libexpat1 bash tcpdump procps less binutils libbz2-1.0 netcat-openbsd git' \\\n && apt-get update -qq ; apt-get install $runDeps -y \\\n && find /usr -type f -name \"*.so\" -exec strip --strip-unneeded {} + \\\n && apt-get remove binutils --purge -y -qq \\\n && find /var/lib/apt/lists /usr/share/man /usr/share/doc /var/log -type f -exec rm -f {} + \\\n && rm -rf /root/.gnupg \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg\nLABEL stage=\"RUNTIME\"\n# ##############################################################################\nFROM runtime AS build-setup\nADD gnupg/pubring.gpg gnupg/trustdb.gpg /root/.gnupg/\nRUN set -ex \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg \\\n && buildDeps='libsqlite3-dev zlib1g-dev libexpat1-dev libssl-dev xz-utils dpkg-dev binutils libbz2-dev libreadline-dev libffi-dev' \\\n && apt-get update -qq ; apt-get install ${buildDeps} -qq -y\nARG PYTHON_VERSION\nRUN curl -L -o /python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && curl -L -o /python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --refresh-keys 2>&1 | egrep -v 'requesting key|not changed' \\\n && gpg --batch --verify /python.tar.xz.asc /python.tar.xz \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f /python.tar.xz\nLABEL stage=\"BUILD-SETUP\"\nLABEL version=\"${PYTHON_VERSION}\"\n# ##############################################################################\nFROM build-setup AS builder\nARG BUILD_ARGS\nARG PYTHON_VERSION\nENV LANG=\"C.UTF-8\"\n# RUN sleep 6000 || echo \"whee\"\nENV CFLAGS=\"-I/usr/include/openssl\"\nRUN set -ex \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && [ $((`echo $PYTHON_VERSION | cut -d\".\" -f1 `)) -lt 3 ] \\\n && BUILD_ARGS=\"\" ; ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip ${BUILD_ARGS} \\\n && make -j $((1 * $( egrep '^processor[[:space:]]+:' /proc/cpuinfo | wc -l ;))) \\\n && make install\nRUN set -ex find /usr/local -type f -name \"*.so\" -exec strip --strip-unneeded {} + &; ldconfig &; find /usr/local -depth ( ( -type d -a ( -name test -o -name tests -o -name __pycache__ ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' ) ) -o ( -name \"idle*\" ) ) -exec rm -rf '{}' + \\\n && find /var/lib/apt/lists /usr/share/man /usr/share/doc /var/log -type f -exec rm -f {} +\n#  make some useful symlinks that are expected to exist\nRUN [\"/bin/bash\", \"-c\", \"if\", \"[[\", \"$(\", \"echo\", \"${PYTHON_VERSION}\", \"|\", \"cut\", \"-d'.'\", \"-f1\", \";)\", \"==\", \"'3'\", \"]]\"]\nLABEL stage=\"BUILDER\"\nLABEL version=\"${PYTHON_VERSION}\"\n# ##############################################################################\nFROM builder AS post-build\n#  if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"18.1\"\nCOPY ./ipython_config.py /\nRUN set -ex ; ldconfig\nRUN set -ex ; curl -sL -o get-pip.py 'https://bootstrap.pypa.io/get-pip.py'\nRUN set -ex ; python get-pip.py --disable-pip-version-check --no-cache-dir \"pip==$PYTHON_PIP_VERSION\" ; pip --version\nRUN set -ex ; pip install pipenv --upgrade\nRUN mkdir -p $HOME/.ipython/profile_default\nRUN mv ipython_config.py $HOME/.ipython/profile_default/.\nRUN pip install ipdb 'ipython<6'\nRUN set -ex ; find /usr/local -depth ( ( -type d -a ( -name test -o -name tests -o -name __pycache__ ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' -o -name '*.exe' ) ) ) -exec rm -rf '{}' +\nRUN set -ex ; find /usr/share/\nRUN rm -rf /root/.cache\nARG PYTHON_VERSION\nLABEL stage=\"POST-BUILD\"\nLABEL version=\"${PYTHON_VERSION}\"\n# ##############################################################################\nFROM runtime\nCOPY --from=post-build /usr/local /usr/local\nCOPY --from=post-build /root /root\nRUN /sbin/ldconfig\nLABEL stage=\"FINAL\"\nARG PYTHON_VERSION\nLABEL version=\"${PYTHON_VERSION}\"\nCMD [\"ipython\"]\n","injectedSmells":[],"originalDockerfileHash":"962a0744f0646e374faedaa4f08cbf30","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim: ft=Dockerfile ts=4 sw=4 expandtab\n#  ##############################################################################\n#\n#   Multi-stage Python 3.x build\n#\n#   build-time environment variables:\n#     LTO=1                   . enable link-time-optimizations\n#     OPTIMAL=1               . enable profile-guided-optimizations (PGO)\n#     PYTHON_VERSION=3.5.3\n#\n#     ** NOTE **:\n#         . LTO requires PGO\n#         . ensure both variables are unset for typical builds\n#\n#   building:\n#     make build-image        . run docker build\n#     make build-push         . push image to repository\n#     make image              . build + push\n#\n#   Stages:\n#      runtime <- debian-base-amd64:0.2\n#         common runtime packages go here\n#      build-setup <- runtime\n#         dev packages, tools, utilities, etc. go here\n#      builder <- build-setup\n#         ./configure <things> && make && make install\n#      post-build <- builder\n#         install any common python modules here\n#      FINAL <- runtime\n#         pip package installation goes here + ENTRYPOINT\n#\n#  ##############################################################################\nFROM gcr.io/google-containers/debian-base-amd64:0.4.0 AS runtime\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\nCOPY ./init-functions /lib/lsb/\nRUN set -ex \\\n && apt-get update \\\n && apt-mark unhold apt gnupg libcap2 libsemanage1 passwd libbz2-1.0 \\\n && runDeps='curl gnupg libsqlite3-0 zlib1g libexpat1 bash tcpdump procps less binutils libbz2-1.0 netcat-openbsd git' \\\n && apt-get update -qq ; apt-get install $runDeps -y \\\n && find /usr -type f -name \"*.so\" -exec strip --strip-unneeded {} + \\\n && apt-get remove binutils --purge -y -qq \\\n && find /var/lib/apt/lists /usr/share/man /usr/share/doc /var/log -type f -exec rm -f {} + \\\n && rm -rf /root/.gnupg \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg\nLABEL stage=\"RUNTIME\"\n#  ##############################################################################\nFROM runtime AS build-setup\nADD gnupg/pubring.gpg gnupg/trustdb.gpg /root/.gnupg/\nRUN set -ex \\\n && mkdir -p /root/.gnupg \\\n && chmod 700 /root/.gnupg \\\n && buildDeps='libsqlite3-dev zlib1g-dev libexpat1-dev libssl-dev xz-utils dpkg-dev binutils libbz2-dev libreadline-dev libffi-dev' \\\n && apt-get update -qq ; apt-get install ${buildDeps} -qq -y\nARG PYTHON_VERSION\nRUN curl -L -o /python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && curl -L -o /python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --refresh-keys 2>&1 | egrep -v 'requesting key|not changed' \\\n && gpg --batch --verify /python.tar.xz.asc /python.tar.xz \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f /python.tar.xz\nLABEL stage=\"BUILD-SETUP\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM build-setup AS builder\nARG BUILD_ARGS\nARG PYTHON_VERSION\nENV LANG=\"C.UTF-8\"\n#  RUN sleep 6000 || echo \"whee\"\nENV CFLAGS=\"-I/usr/include/openssl\"\nRUN set -ex \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && [ $((`echo $PYTHON_VERSION | cut -d\".\" -f1 `)) -lt 3 ] \\\n && BUILD_ARGS=\"\" ; ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip ${BUILD_ARGS} \\\n && make -j $((1 * $( egrep '^processor[[:space:]]+:' /proc/cpuinfo | wc -l ;))) \\\n && make install\nRUN set -ex find /usr/local -type f -name \"*.so\" -exec strip --strip-unneeded {} + &; ldconfig &; find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN [\"/bin/bash\", \"-c\", \"if\", \"[[\", \"$(\", \"echo\", \"${PYTHON_VERSION}\", \"|\", \"cut\", \"-d'.'\", \"-f1\", \";)\", \"==\", \"'3'\", \"]]\"]\nLABEL stage=\"BUILDER\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM builder AS post-build\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"18.1\"\nCOPY ./ipython_config.py /\nRUN set -ex ; ldconfig\nRUN set -ex ; curl -sL -o get-pip.py 'https://bootstrap.pypa.io/get-pip.py'\nRUN set -ex ; python get-pip.py --disable-pip-version-check --no-cache-dir \"pip==$PYTHON_PIP_VERSION\" ; pip --version\nRUN set -ex ; pip install pipenv --upgrade\nRUN mkdir -p $HOME/.ipython/profile_default\nRUN mv ipython_config.py $HOME/.ipython/profile_default/.\nRUN pip install ipdb 'ipython<6'\nRUN set -ex ; find /usr/local -depth\nRUN set -ex ; find /usr/share/\nRUN rm -rf /root/.cache\nARG PYTHON_VERSION\nLABEL stage=\"POST-BUILD\"\nLABEL version=\"${PYTHON_VERSION}\"\n#  ##############################################################################\nFROM runtime\nCOPY --from=post-build /usr/local /usr/local\nCOPY --from=post-build /root /root\nRUN /sbin/ldconfig\nLABEL stage=\"FINAL\"\nARG PYTHON_VERSION\nLABEL version=\"${PYTHON_VERSION}\"\nCMD [\"ipython\"]\n","originalDockerfileUglifiedHash":"6db581acb3f8354b884ae35fe4cb1408","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/32facd4147bec3e57c9f7e45bdd68c59165f055a.dockerfile"}