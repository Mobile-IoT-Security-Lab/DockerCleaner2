{"seed":1046467732,"processedDockerfileHash":"c08c698a1cc0cfd97327db5939704370","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  upstream https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper\nFROM alpine:3.9\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#   Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash=4.4.19-r1 gnupg=2.2.19-r0 shadow=4.5-r2 tzdata=2020c-r1 vim=8.1.1365-r0 tini=0.18.0-r0 su-exec=0.2-r0 gzip=1.10-r0 tar=1.32-r0 wget=1.20.3-r0 curl=7.64.0-r5 \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add wget=1.20.3-r0 ca-certificates=20191127-r2 --no-cache --virtual=.build-dependencies \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"201\" \\\n    JAVA_BUILD=\"09\" \\\n    JAVA_PATH=\"42970487e3af4f5aa5bca3f542482c60\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add wget=1.20.3-r0 ca-certificates=20191127-r2 unzip=6.0-r6 --no-cache --virtual=build-dependencies \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nENV ZK_USER=\"zookeeper\" \\\n    ZK_DATA_DIR=\"/var/lib/zookeeper/data\" \\\n    ZK_DATA_LOG_DIR=\"/var/lib/zookeeper/log\" \\\n    ZK_LOG_DIR=\"/var/log/zookeeper\"\nARG GPG_KEY=C823E3E5B12AF29C67F81976F5CECB3CB5E9BD2D\nARG ZK_DIST=zookeeper-3.4.10\nRUN set -x \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz\" \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver keyserver.ubuntu.com --recv-key \"$GPG_KEY\" \\\n && gpg --batch --verify \"$ZK_DIST.tar.gz.asc\" \"$ZK_DIST.tar.gz\" \\\n && tar -xzf \"$ZK_DIST.tar.gz\" -C /opt \\\n && rm -r \"$GNUPGHOME\" \"$ZK_DIST.tar.gz\" \"$ZK_DIST.tar.gz.asc\" \\\n && ln -s /opt/$ZK_DIST /opt/zookeeper \\\n && rm -rf /opt/zookeeper/CHANGES.txt /opt/zookeeper/README.txt /opt/zookeeper/NOTICE.txt /opt/zookeeper/CHANGES.txt /opt/zookeeper/README_packaging.txt /opt/zookeeper/build.xml /opt/zookeeper/config /opt/zookeeper/contrib /opt/zookeeper/dist-maven /opt/zookeeper/docs /opt/zookeeper/ivy.xml /opt/zookeeper/ivysettings.xml /opt/zookeeper/recipes /opt/zookeeper/src /opt/zookeeper/$ZK_DIST.jar.asc /opt/zookeeper/$ZK_DIST.jar.md5 /opt/zookeeper/$ZK_DIST.jar.sha1\n#   Copy configuration generator script to bin\nCOPY zkGenConfig.sh zkOk.sh zkMetrics.sh /opt/zookeeper/bin/\n#   Create a user for the zookeeper process and configure file system ownership\n#   for necessary directories and symlink the distribution as a user executable\nRUN set -x \\\n && useradd $ZK_USER \\\n && [ `id -u $ZK_USER ` -eq 1000 ] \\\n && [ `id -g $ZK_USER ` -eq 1000 ] \\\n && mkdir -p $ZK_DATA_DIR $ZK_DATA_LOG_DIR $ZK_LOG_DIR /usr/share/zookeeper /tmp/zookeeper /usr/etc/ \\\n && chown -R \"$ZK_USER:$ZK_USER\" /opt/$ZK_DIST $ZK_DATA_DIR $ZK_LOG_DIR $ZK_DATA_LOG_DIR /tmp/zookeeper \\\n && ln -s /opt/zookeeper/conf/ /usr/etc/zookeeper \\\n && ln -s /opt/zookeeper/bin/* /usr/bin \\\n && ln -s /opt/zookeeper/$ZK_DIST.jar /usr/share/zookeeper/ \\\n && ln -s /opt/zookeeper/lib/* /usr/share/zookeeper\nCMD [\"sh\", \"-c\", \"zkGenConfig.sh\", \"&&\", \"zkServer.sh\", \"start-foreground\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# upstream https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper\nFROM alpine:3.9\nMAINTAINER 若虚 <slpcat@qq.com>\n#  Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#  Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash gnupg shadow tzdata vim tini su-exec gzip tar wget curl \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#  Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"201\" \\\n    JAVA_BUILD=\"09\" \\\n    JAVA_PATH=\"42970487e3af4f5aa5bca3f542482c60\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nENV ZK_USER=\"zookeeper\" \\\n    ZK_DATA_DIR=\"/var/lib/zookeeper/data\" \\\n    ZK_DATA_LOG_DIR=\"/var/lib/zookeeper/log\" \\\n    ZK_LOG_DIR=\"/var/log/zookeeper\"\nARG GPG_KEY=C823E3E5B12AF29C67F81976F5CECB3CB5E9BD2D\nARG ZK_DIST=zookeeper-3.4.10\nRUN set -x \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz\" \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver keyserver.ubuntu.com --recv-key \"$GPG_KEY\" \\\n && gpg --batch --verify \"$ZK_DIST.tar.gz.asc\" \"$ZK_DIST.tar.gz\" \\\n && tar -xzf \"$ZK_DIST.tar.gz\" -C /opt \\\n && rm -r \"$GNUPGHOME\" \"$ZK_DIST.tar.gz\" \"$ZK_DIST.tar.gz.asc\" \\\n && ln -s /opt/$ZK_DIST /opt/zookeeper \\\n && rm -rf /opt/zookeeper/CHANGES.txt /opt/zookeeper/README.txt /opt/zookeeper/NOTICE.txt /opt/zookeeper/CHANGES.txt /opt/zookeeper/README_packaging.txt /opt/zookeeper/build.xml /opt/zookeeper/config /opt/zookeeper/contrib /opt/zookeeper/dist-maven /opt/zookeeper/docs /opt/zookeeper/ivy.xml /opt/zookeeper/ivysettings.xml /opt/zookeeper/recipes /opt/zookeeper/src /opt/zookeeper/$ZK_DIST.jar.asc /opt/zookeeper/$ZK_DIST.jar.md5 /opt/zookeeper/$ZK_DIST.jar.sha1\n#  Copy configuration generator script to bin\nCOPY zkGenConfig.sh zkOk.sh zkMetrics.sh /opt/zookeeper/bin/\n#  Create a user for the zookeeper process and configure file system ownership\n#  for necessary directories and symlink the distribution as a user executable\nRUN set -x \\\n && useradd $ZK_USER \\\n && [ `id -u $ZK_USER ` -eq 1000 ] \\\n && [ `id -g $ZK_USER ` -eq 1000 ] \\\n && mkdir -p $ZK_DATA_DIR $ZK_DATA_LOG_DIR $ZK_LOG_DIR /usr/share/zookeeper /tmp/zookeeper /usr/etc/ \\\n && chown -R \"$ZK_USER:$ZK_USER\" /opt/$ZK_DIST $ZK_DATA_DIR $ZK_LOG_DIR $ZK_DATA_LOG_DIR /tmp/zookeeper \\\n && ln -s /opt/zookeeper/conf/ /usr/etc/zookeeper \\\n && ln -s /opt/zookeeper/bin/* /usr/bin \\\n && ln -s /opt/zookeeper/$ZK_DIST.jar /usr/share/zookeeper/ \\\n && ln -s /opt/zookeeper/lib/* /usr/share/zookeeper\nCMD [\"sh\", \"-c\", \"zkGenConfig.sh\", \"&&\", \"zkServer.sh\", \"start-foreground\"]\n","injectedSmells":[],"originalDockerfileHash":"c4bb59aaef8f562afbf165fe3e5fd494","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  upstream https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper\nFROM alpine:3.9\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#   Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash gnupg shadow tzdata vim tini su-exec gzip tar wget curl \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"201\" \\\n    JAVA_BUILD=\"09\" \\\n    JAVA_PATH=\"42970487e3af4f5aa5bca3f542482c60\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nENV ZK_USER=\"zookeeper\" \\\n    ZK_DATA_DIR=\"/var/lib/zookeeper/data\" \\\n    ZK_DATA_LOG_DIR=\"/var/lib/zookeeper/log\" \\\n    ZK_LOG_DIR=\"/var/log/zookeeper\"\nARG GPG_KEY=C823E3E5B12AF29C67F81976F5CECB3CB5E9BD2D\nARG ZK_DIST=zookeeper-3.4.10\nRUN set -x \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz\" \\\n && wget -q \"http://archive.apache.org/dist/zookeeper/$ZK_DIST/$ZK_DIST.tar.gz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver keyserver.ubuntu.com --recv-key \"$GPG_KEY\" \\\n && gpg --batch --verify \"$ZK_DIST.tar.gz.asc\" \"$ZK_DIST.tar.gz\" \\\n && tar -xzf \"$ZK_DIST.tar.gz\" -C /opt \\\n && rm -r \"$GNUPGHOME\" \"$ZK_DIST.tar.gz\" \"$ZK_DIST.tar.gz.asc\" \\\n && ln -s /opt/$ZK_DIST /opt/zookeeper \\\n && rm -rf /opt/zookeeper/CHANGES.txt /opt/zookeeper/README.txt /opt/zookeeper/NOTICE.txt /opt/zookeeper/CHANGES.txt /opt/zookeeper/README_packaging.txt /opt/zookeeper/build.xml /opt/zookeeper/config /opt/zookeeper/contrib /opt/zookeeper/dist-maven /opt/zookeeper/docs /opt/zookeeper/ivy.xml /opt/zookeeper/ivysettings.xml /opt/zookeeper/recipes /opt/zookeeper/src /opt/zookeeper/$ZK_DIST.jar.asc /opt/zookeeper/$ZK_DIST.jar.md5 /opt/zookeeper/$ZK_DIST.jar.sha1\n#   Copy configuration generator script to bin\nCOPY zkGenConfig.sh zkOk.sh zkMetrics.sh /opt/zookeeper/bin/\n#   Create a user for the zookeeper process and configure file system ownership\n#   for necessary directories and symlink the distribution as a user executable\nRUN set -x \\\n && useradd $ZK_USER \\\n && [ `id -u $ZK_USER ` -eq 1000 ] \\\n && [ `id -g $ZK_USER ` -eq 1000 ] \\\n && mkdir -p $ZK_DATA_DIR $ZK_DATA_LOG_DIR $ZK_LOG_DIR /usr/share/zookeeper /tmp/zookeeper /usr/etc/ \\\n && chown -R \"$ZK_USER:$ZK_USER\" /opt/$ZK_DIST $ZK_DATA_DIR $ZK_LOG_DIR $ZK_DATA_LOG_DIR /tmp/zookeeper \\\n && ln -s /opt/zookeeper/conf/ /usr/etc/zookeeper \\\n && ln -s /opt/zookeeper/bin/* /usr/bin \\\n && ln -s /opt/zookeeper/$ZK_DIST.jar /usr/share/zookeeper/ \\\n && ln -s /opt/zookeeper/lib/* /usr/share/zookeeper\nCMD [\"sh\", \"-c\", \"zkGenConfig.sh\", \"&&\", \"zkServer.sh\", \"start-foreground\"]\n","originalDockerfileUglifiedHash":"ee17f2dccf305001148c65f19e474901","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7535769e61948784a391055e9c3eb5ccfabcc035.dockerfile"}