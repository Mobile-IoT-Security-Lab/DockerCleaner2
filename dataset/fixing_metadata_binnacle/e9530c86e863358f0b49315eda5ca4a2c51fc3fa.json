{"seed":4172163210,"processedDockerfileHash":"5eb4c33778384d338dbac9fc58de752f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM phusion/baseimage:latest\nRUN DEBIAN_FRONTEND=noninteractive\nRUN locale-gen en_US.UTF-8\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#   Add the \"PHP 7\" ppa\nRUN apt-get install --no-install-recommends software-properties-common=0.99.35 -y \\\n && add-apt-repository -y ppa:ondrej/php\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\nARG PHP_VERSION\n#   Install \"PHP Extentions\", \"libraries\", \"Software's\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends pkg-config=1.8.1-1ubuntu2 libcurl4-openssl-dev=7.88.1-7ubuntu1 libedit-dev=3.1-20221030-2 libssl-dev=3.0.8-1ubuntu1 libxml2-dev=2.9.14+dfsg-1.1build2 xz-utils=5.4.1-0.2 git=1:2.39.2-1ubuntu1 curl=7.88.1-7ubuntu1 vim=2:9.0.1000-4ubuntu2 nano=7.2-1 postgresql-client=15+248 php${PHP_VERSION}-cli php${PHP_VERSION}-common php${PHP_VERSION}-curl php${PHP_VERSION}-intl php${PHP_VERSION}-json php${PHP_VERSION}-xml php${PHP_VERSION}-mbstring php${PHP_VERSION}-mysql php${PHP_VERSION}-pgsql php${PHP_VERSION}-zip php${PHP_VERSION}-bcmath php${PHP_VERSION}-memcached php${PHP_VERSION}-gd php${PHP_VERSION}-dev -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \\\n && apt-get clean\n#   Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#   Source the bash\nRUN . ~/.bashrc\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} devdock \\\n && useradd -u ${PUID} -g devdock -m devdock \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends python2.7=2.7.18-13ubuntu2 -y\n#  ####################################\n#   SOAP:\n#  ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends libxml2-dev=2.9.14+dfsg-1.1build2 php${PHP_VERSION}-soap -y ; fi\n#  ####################################\n#   Set Timezone\n#  ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/devdock/.composer/composer.json\n#   Make sure that ~/.composer belongs to devdock\nRUN chown -R devdock:devdock /home/devdock/.composer\nUSER devdock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Crontab\n#  ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ####################################\n#   Node / NVM:\n#  ####################################\nUSER devdock\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/devdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp@4.0.2 bower@1.8.14 vue-cli@2.9.6 -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   YARN:\n#  ####################################\nUSER devdock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/devdock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   User Aliases\n#  ####################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/devdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/devdock/aliases.sh \\\n && chown devdock:devdock /home/devdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install --no-install-recommends php${PHP_VERSION}-xdebug -y \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ####################################\n#   ssh:\n#  ####################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/devdock \\\n && chown -R devdock:devdock /home/devdock/.ssh ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini \\\n && php -m | grep -q 'swoole' ; fi\n#  ##########################################################################\n#   Deployer:\n#  ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM phusion/baseimage:latest\nRUN DEBIAN_FRONTEND=noninteractive\nRUN locale-gen en_US.UTF-8\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#  Add the \"PHP 7\" ppa\nRUN apt-get install software-properties-common -y \\\n && add-apt-repository -y ppa:ondrej/php\n# --------------------------------------------------------------------------\n#  Mandatory Software's Installation\n# --------------------------------------------------------------------------\nARG PHP_VERSION\n#  Install \"PHP Extentions\", \"libraries\", \"Software's\"\nRUN apt-get update \\\n && apt-get install pkg-config libcurl4-openssl-dev libedit-dev libssl-dev libxml2-dev xz-utils git curl vim nano postgresql-client php${PHP_VERSION}-cli php${PHP_VERSION}-common php${PHP_VERSION}-curl php${PHP_VERSION}-intl php${PHP_VERSION}-json php${PHP_VERSION}-xml php${PHP_VERSION}-mbstring php${PHP_VERSION}-mysql php${PHP_VERSION}-pgsql php${PHP_VERSION}-zip php${PHP_VERSION}-bcmath php${PHP_VERSION}-memcached php${PHP_VERSION}-gd php${PHP_VERSION}-dev -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \\\n && apt-get clean\n#  Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#  Source the bash\nRUN . ~/.bashrc\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#\n#    - COMPOSER_GLOBAL_INSTALL=  false\n#    - INSTALL_NODE=             false\n# ####################################\n#  Non-Root User:\n# ####################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} devdock \\\n && useradd -u ${PUID} -g devdock -m devdock \\\n && apt-get update -yqq \\\n && apt-get install python2.7 -y\n# ####################################\n#  SOAP:\n# ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n# ####################################\n#  Set Timezone\n# ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n# ##########################################################################\n#  Composer:\n# ##########################################################################\nUSER root\n#  Add the composer.json\nCOPY ./composer.json /home/devdock/.composer/composer.json\n#  Make sure that ~/.composer belongs to devdock\nRUN chown -R devdock:devdock /home/devdock/.composer\nUSER devdock\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#  Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  Non-root user : PHPUnit path\n# ##########################################################################\n#  add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n# ####################################\n#  Crontab\n# ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n# ####################################\n#  Node / NVM:\n# ####################################\nUSER devdock\n#  Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/devdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n# ####################################\n#  YARN:\n# ####################################\nUSER devdock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#  Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/devdock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n# ####################################\n#  User Aliases\n# ####################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/devdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/devdock/aliases.sh \\\n && chown devdock:devdock /home/devdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n# ##########################################################################\n#  xDebug:\n# ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php${PHP_VERSION}-xdebug -y \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n# ####################################\n#  ssh:\n# ####################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/devdock \\\n && chown -R devdock:devdock /home/devdock/.ssh ; fi\n# ####################################\n#  MongoDB:\n# ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini \\\n && php -m | grep -q 'swoole' ; fi\n# ##########################################################################\n#  Deployer:\n# ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#  Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Set default work directory\nWORKDIR /var/www\n","injectedSmells":[],"originalDockerfileHash":"54ee1dde428a65b85e6078e0f8ae288a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM phusion/baseimage:latest\nRUN DEBIAN_FRONTEND=noninteractive\nRUN locale-gen en_US.UTF-8\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#   Add the \"PHP 7\" ppa\nRUN apt-get install software-properties-common -y \\\n && add-apt-repository -y ppa:ondrej/php\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\nARG PHP_VERSION\n#   Install \"PHP Extentions\", \"libraries\", \"Software's\"\nRUN apt-get update \\\n && apt-get install pkg-config libcurl4-openssl-dev libedit-dev libssl-dev libxml2-dev xz-utils git curl vim nano postgresql-client php${PHP_VERSION}-cli php${PHP_VERSION}-common php${PHP_VERSION}-curl php${PHP_VERSION}-intl php${PHP_VERSION}-json php${PHP_VERSION}-xml php${PHP_VERSION}-mbstring php${PHP_VERSION}-mysql php${PHP_VERSION}-pgsql php${PHP_VERSION}-zip php${PHP_VERSION}-bcmath php${PHP_VERSION}-memcached php${PHP_VERSION}-gd php${PHP_VERSION}-dev -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \\\n && apt-get clean\n#   Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#   Source the bash\nRUN . ~/.bashrc\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} devdock \\\n && useradd -u ${PUID} -g devdock -m devdock \\\n && apt-get update -yqq \\\n && apt-get install python2.7 -y\n#  ####################################\n#   SOAP:\n#  ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n#  ####################################\n#   Set Timezone\n#  ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/devdock/.composer/composer.json\n#   Make sure that ~/.composer belongs to devdock\nRUN chown -R devdock:devdock /home/devdock/.composer\nUSER devdock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Crontab\n#  ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ####################################\n#   Node / NVM:\n#  ####################################\nUSER devdock\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/devdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   YARN:\n#  ####################################\nUSER devdock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/devdock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   User Aliases\n#  ####################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/devdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/devdock/aliases.sh \\\n && chown devdock:devdock /home/devdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER devdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php${PHP_VERSION}-xdebug -y \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ####################################\n#   ssh:\n#  ####################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/devdock \\\n && chown -R devdock:devdock /home/devdock/.ssh ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini \\\n && php -m | grep -q 'swoole' ; fi\n#  ##########################################################################\n#   Deployer:\n#  ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\n","originalDockerfileUglifiedHash":"c7052138e29ee7c697705be932796056","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e9530c86e863358f0b49315eda5ca4a2c51fc3fa.dockerfile"}