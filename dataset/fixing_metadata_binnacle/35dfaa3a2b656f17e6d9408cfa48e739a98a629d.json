{"seed":3834702609,"processedDockerfileHash":"63f91756dc2d34becfcda591083ca821","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#   container for rsyslog development\n#   creates the build environment\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends autoconf=2.69-11 autoconf-archive=20170928-2 automake=1:1.15.1-3ubuntu2 autotools-dev=20180224.1 bison=2:3.0.4.dfsg-1build1 clang=1:6.0-41~exp5~ubuntu1 clang-tools=1:6.0-41~exp5~ubuntu1 curl=7.58.0-2ubuntu3.24 default-jdk=2:1.11-68ubuntu1~18.04.1 default-jre=2:1.11-68ubuntu1~18.04.1 faketime=0.9.7-2 libdbd-mysql=0.9.0-5ubuntu2 flex=2.6.4-6 gcc=4:7.4.0-1ubuntu2.3 gcc-8=8.4.0-1ubuntu1~18.04 gdb=8.1.1-0ubuntu1 git=1:2.17.1-1ubuntu0.17 libbson-dev=1.9.2-1 libcurl4-gnutls-dev=7.58.0-2ubuntu3.24 libdbi-dev=0.9.0-5 libgcrypt11-dev=1.5.4-3+really1.8.1-4ubuntu1.3 libglib2.0-dev=2.56.4-0ubuntu0.18.04.9 libgnutls28-dev=3.5.18-1ubuntu1.6 libgrok1=1.20110708.1-4.3ubuntu1 libgrok-dev=1.20110708.1-4.3ubuntu1 libhiredis-dev=0.13.3-2.2 libkrb5-dev=1.16-2ubuntu0.4 liblz4-dev=0.0~r131-2ubuntu3.1 libmaxminddb-dev=1.3.1-1 libmongoc-dev=1.9.2+dfsg-1build1 libmongoc-dev=1.9.2+dfsg-1build1 libmysqlclient-dev=5.7.41-0ubuntu0.18.04.1 libnet1-dev=1.1.6+dfsg-3.1 libpcap-dev=1.8.1-6ubuntu1.18.04.2 librabbitmq-dev=0.8.0-1ubuntu0.18.04.2 libsnmp-dev=5.7.3+dfsg-1.8ubuntu3.8 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libsasl2-dev=2.1.27~101-g0780600+dfsg-3ubuntu2.4 libsystemd-dev=237-3ubuntu10.57 libtokyocabinet-dev=1.4.48-11 libtool=2.4.6-2 libtool-bin=2.4.6-2 logrotate=3.11.0-0.1ubuntu1 lsof=4.89+dfsg-0.1 make=4.1-9.1ubuntu1 mysql-server=5.7.41-0ubuntu0.18.04.1 net-tools=1.60+git20161116.90da8a0-1ubuntu1 pkg-config=0.29.1-0ubuntu2 postgresql-client=10+190ubuntu0.1 libpq-dev=10.23-0ubuntu0.18.04.1 python-docutils=0.14+dfsg-3 python-pip=9.0.1-2.3~ubuntu1.18.04.8 software-properties-common=0.96.24.32.20 sudo=1.8.21p2-3ubuntu1.5 uuid-dev=2.31.1-0.4ubuntu3.7 valgrind=1:3.13.0-2ubuntu2.3 vim=2:8.0.1453-1ubuntu1.11 wget=1.19.4-1ubuntu2.2 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 -y\nENV REBUILD=\"1\"\n#   Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends libestr-dev=0.1.10-2.1 librelp-dev=1.2.14-3 libfastjson-dev=0.99.8-2 liblogging-stdlog-dev=1.0.6-3 liblognorm-dev=2.0.3-1 -y\n#   0mq (currently not needed, but we keep it in just in case)\n#  RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n#  \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n#  \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends libczmq-dev=4.1.0-2 libqpid-proton8-dev=0.14.0-5.1ubuntu1 tcl-dev=8.6.0+9 libsodium-dev=1.0.16-2 -y\n#   clickhouse\nRUN echo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends clickhouse-client clickhouse-server -y\n#   clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends clang-8=1:8-3~ubuntu18.04.2 lldb-8=1:8-3~ubuntu18.04.2 lld-8=1:8-3~ubuntu18.04.2 -y\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#   for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#   openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#   openssl dhparam -out clickhouse.dhparam.pem 2048\nCOPY clickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\nCOPY clickhouse.server.crt /etc/clickhouse-server/server.crt\nCOPY clickhouse.server.key /etc/clickhouse-server/server.key\nRUN sed -i 's/<yandex>/<yandex>\\n <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' /etc/clickhouse-server/config.xml \\\n && sed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n <https_port>8443<\\/https_port>/g' /etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#   mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#   and so does clickhouse\nRUN chown root:root /var/lib/clickhouse\nENV CLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n    CLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nCOPY setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#   Install any needed packages\nRUN ./setup-system.sh\n#   other manual installs\n#   kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   Note: we do NOT delete the source as we may need it to\n#   uninstall (in case the user wants to go back to system-default)\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-clickhouse  --enable-clickhouse-tests  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impcap  --enable-improg  --enable-impstats  --enable-imptcp  --enable-imtuxedoulog  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmdb2diag  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#   module needs fixes: --enable-kmsg\n#   --enable-imdocker-tests is not supported as it needs to run on docker HOST\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  container for rsyslog development\n#  creates the build environment\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install autoconf autoconf-archive automake autotools-dev bison clang clang-tools curl default-jdk default-jre faketime libdbd-mysql flex gcc gcc-8 gdb git libbson-dev libcurl4-gnutls-dev libdbi-dev libgcrypt11-dev libglib2.0-dev libgnutls28-dev libgrok1 libgrok-dev libhiredis-dev libkrb5-dev liblz4-dev libmaxminddb-dev libmongoc-dev libmongoc-dev libmysqlclient-dev libnet1-dev libpcap-dev librabbitmq-dev libsnmp-dev libssl-dev libsasl2-dev libsystemd-dev libtokyocabinet-dev libtool libtool-bin logrotate lsof make mysql-server net-tools pkg-config postgresql-client libpq-dev python-docutils python-pip software-properties-common sudo uuid-dev valgrind vim wget zlib1g-dev -y\nENV REBUILD=\"1\"\n#  Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install libestr-dev librelp-dev libfastjson-dev liblogging-stdlog-dev liblognorm-dev -y\n#  0mq (currently not needed, but we keep it in just in case)\n# RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n# \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n# \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install libczmq-dev libqpid-proton8-dev tcl-dev libsodium-dev -y\n#  clickhouse\nRUN echo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install clickhouse-client clickhouse-server -y\n#  clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install clang-8 lldb-8 lld-8 -y\n#  create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#  tell tests which are the newester versions, so they can be checked without the need\n#  to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#  for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#  openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#  openssl dhparam -out clickhouse.dhparam.pem 2048\nCOPY clickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\nCOPY clickhouse.server.crt /etc/clickhouse-server/server.crt\nCOPY clickhouse.server.key /etc/clickhouse-server/server.key\nRUN sed -i 's/<yandex>/<yandex>\\n <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' /etc/clickhouse-server/config.xml \\\n && sed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n <https_port>8443<\\/https_port>/g' /etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#  mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#  and so does clickhouse\nRUN chown root:root /var/lib/clickhouse\nENV CLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n    CLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nADD setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#  Install any needed packages\nRUN ./setup-system.sh\n#  other manual installs\n#  kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#  Note: we do NOT delete the source as we may need it to\n#  uninstall (in case the user wants to go back to system-default)\n#  next ENV is specifically for running scan-build - so we do not need to\n#  change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-clickhouse  --enable-clickhouse-tests  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impcap  --enable-improg  --enable-impstats  --enable-imptcp  --enable-imtuxedoulog  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmdb2diag  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#  module needs fixes: --enable-kmsg\n#  --enable-imdocker-tests is not supported as it needs to run on docker HOST\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n","injectedSmells":[],"originalDockerfileHash":"68c05cc4ff614601b0e93fcee490eb11","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   container for rsyslog development\n#   creates the build environment\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install autoconf autoconf-archive automake autotools-dev bison clang clang-tools curl default-jdk default-jre faketime libdbd-mysql flex gcc gcc-8 gdb git libbson-dev libcurl4-gnutls-dev libdbi-dev libgcrypt11-dev libglib2.0-dev libgnutls28-dev libgrok1 libgrok-dev libhiredis-dev libkrb5-dev liblz4-dev libmaxminddb-dev libmongoc-dev libmongoc-dev libmysqlclient-dev libnet1-dev libpcap-dev librabbitmq-dev libsnmp-dev libssl-dev libsasl2-dev libsystemd-dev libtokyocabinet-dev libtool libtool-bin logrotate lsof make mysql-server net-tools pkg-config postgresql-client libpq-dev python-docutils python-pip software-properties-common sudo uuid-dev valgrind vim wget zlib1g-dev -y\nENV REBUILD=\"1\"\n#   Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install libestr-dev librelp-dev libfastjson-dev liblogging-stdlog-dev liblognorm-dev -y\n#   0mq (currently not needed, but we keep it in just in case)\n#  RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n#  \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n#  \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install libczmq-dev libqpid-proton8-dev tcl-dev libsodium-dev -y\n#   clickhouse\nRUN echo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install clickhouse-client clickhouse-server -y\n#   clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install clang-8 lldb-8 lld-8 -y\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#   for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#   openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#   openssl dhparam -out clickhouse.dhparam.pem 2048\nCOPY clickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\nCOPY clickhouse.server.crt /etc/clickhouse-server/server.crt\nCOPY clickhouse.server.key /etc/clickhouse-server/server.key\nRUN sed -i 's/<yandex>/<yandex>\\n <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' /etc/clickhouse-server/config.xml \\\n && sed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n <https_port>8443<\\/https_port>/g' /etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#   mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#   and so does clickhouse\nRUN chown root:root /var/lib/clickhouse\nENV CLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n    CLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nADD setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#   Install any needed packages\nRUN ./setup-system.sh\n#   other manual installs\n#   kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   Note: we do NOT delete the source as we may need it to\n#   uninstall (in case the user wants to go back to system-default)\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-clickhouse  --enable-clickhouse-tests  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impcap  --enable-improg  --enable-impstats  --enable-imptcp  --enable-imtuxedoulog  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmdb2diag  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#   module needs fixes: --enable-kmsg\n#   --enable-imdocker-tests is not supported as it needs to run on docker HOST\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n","originalDockerfileUglifiedHash":"14d2a5723fa4c8c66f80e7537cd2106f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/35dfaa3a2b656f17e6d9408cfa48e739a98a629d.dockerfile"}