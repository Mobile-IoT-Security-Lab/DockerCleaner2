{"seed":1891310978,"processedDockerfileHash":"4a8538b535c778c086cc2fabe24e03b6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.4\nMAINTAINER Wonderfall <wonderfall@schrodinger.io>\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.11.4\nARG LIBRESSL_VERSION=2.5.0\nARG GPG_LIBRESSL=\"A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5\"\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nRUN echo \"@commuedge https://nl.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n && NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && BUILD_DEPS=\" build-base linux-headers ca-certificates automake autoconf git tar libtool pcre-dev zlib-dev binutils gnupg\" \\\n && apk add pcre=8.38-r1 zlib=1.2.11-r0 libgcc=5.3.0-r0 libstdc++=5.3.0-r0 su-exec=0.2-r0 openssl=1.0.2n-r0 bind-tools=9.10.6_p1-r0 tini@commuedge ${BUILD_DEPS} -U \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && LIBRESSL_TARBALL=\"libressl-${LIBRESSL_VERSION}.tar.gz\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \\\n && echo \"Verifying ${LIBRESSL_TARBALL} using GPG...\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \\\n && gpg --import libressl.asc \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_LIBRESSL}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${LIBRESSL_TARBALL}...\" \\\n && tar xzf ${LIBRESSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/felixbuenemann/sslconfig/updated-nginx-1.9.15-spdy-patch/patches/nginx_1_9_15_http2_spdy.patch -O spdy.patch \\\n && patch -p1 < spdy.patch \\\n && wget -q https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/nginx__dynamic_tls_records.patch \\\n && patch -p1 < nginx__dynamic_tls_records.patch \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --with-cc-opt='-O3 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wno-deprecated-declarations' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' --with-openssl=/tmp/libressl-${LIBRESSL_VERSION} --with-http_ssl_module --with-http_v2_module --with-http_spdy_module --with-http_gzip_static_module --with-http_stub_status_module --with-file-aio --with-threads --with-pcre-jit --without-http_ssi_module --without-http_scgi_module --without-http_uwsgi_module --without-http_geo_module --without-http_autoindex_module --without-http_map_module --without-http_split_clients_module --without-http_memcached_module --without-http_empty_gif_module --without-http_browser_module --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --add-module=/tmp/headers-more-nginx-module --add-module=/tmp/ngx_brotli \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/sbin/nginx \\\n && apk del ${BUILD_DEPS} \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY nginx.conf /etc/nginx/conf/nginx.conf\nCOPY run.sh /usr/local/bin/run.sh\nCOPY ngxpasswd /usr/local/bin/ngxpasswd\nCOPY ngxproxy /usr/local/bin/ngxproxy\nCOPY vhost_http.conf /etc/nginx/conf/vhost_http.conf\nCOPY vhost_https.conf /etc/nginx/conf/vhost_https.conf\nCOPY ssl_params /etc/nginx/conf/ssl_params\nCOPY headers_params /etc/nginx/conf/headers_params\nCOPY proxy_params /etc/nginx/conf/proxy_params\nRUN chmod +x /usr/local/bin/*\nEXPOSE 8000/tcp 4430/tcp\nVOLUME /sites-enabled /www /conf.d /passwds /certs /var/log/nginx\nLABEL description=\"nginx built from source.\" \\\n      openssl=\"LibreSSL ${LIBRESSL_VERSION}.\" \\\n      nginx=\"nginx ${NGINX_VERSION}.\"\nCMD [\"run.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.4\nMAINTAINER Wonderfall <wonderfall@schrodinger.io>\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.11.4\nARG LIBRESSL_VERSION=2.5.0\nARG GPG_LIBRESSL=\"A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5\"\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nRUN echo \"@commuedge https://nl.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n && NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && BUILD_DEPS=\" build-base linux-headers ca-certificates automake autoconf git tar libtool pcre-dev zlib-dev binutils gnupg\" \\\n && apk -U add ${BUILD_DEPS} pcre zlib libgcc libstdc++ su-exec openssl bind-tools tini@commuedge \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && LIBRESSL_TARBALL=\"libressl-${LIBRESSL_VERSION}.tar.gz\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \\\n && echo \"Verifying ${LIBRESSL_TARBALL} using GPG...\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \\\n && gpg --import libressl.asc \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_LIBRESSL}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${LIBRESSL_TARBALL}...\" \\\n && tar xzf ${LIBRESSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/felixbuenemann/sslconfig/updated-nginx-1.9.15-spdy-patch/patches/nginx_1_9_15_http2_spdy.patch -O spdy.patch \\\n && patch -p1 < spdy.patch \\\n && wget -q https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/nginx__dynamic_tls_records.patch \\\n && patch -p1 < nginx__dynamic_tls_records.patch \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --with-cc-opt='-O3 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wno-deprecated-declarations' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' --with-openssl=/tmp/libressl-${LIBRESSL_VERSION} --with-http_ssl_module --with-http_v2_module --with-http_spdy_module --with-http_gzip_static_module --with-http_stub_status_module --with-file-aio --with-threads --with-pcre-jit --without-http_ssi_module --without-http_scgi_module --without-http_uwsgi_module --without-http_geo_module --without-http_autoindex_module --without-http_map_module --without-http_split_clients_module --without-http_memcached_module --without-http_empty_gif_module --without-http_browser_module --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --add-module=/tmp/headers-more-nginx-module --add-module=/tmp/ngx_brotli \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/sbin/nginx \\\n && apk del ${BUILD_DEPS} \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY nginx.conf /etc/nginx/conf/nginx.conf\nCOPY run.sh /usr/local/bin/run.sh\nCOPY ngxpasswd /usr/local/bin/ngxpasswd\nCOPY ngxproxy /usr/local/bin/ngxproxy\nCOPY vhost_http.conf /etc/nginx/conf/vhost_http.conf\nCOPY vhost_https.conf /etc/nginx/conf/vhost_https.conf\nCOPY ssl_params /etc/nginx/conf/ssl_params\nCOPY headers_params /etc/nginx/conf/headers_params\nCOPY proxy_params /etc/nginx/conf/proxy_params\nRUN chmod +x /usr/local/bin/*\nEXPOSE 8000/tcp 4430/tcp\nVOLUME /sites-enabled /www /conf.d /passwds /certs /var/log/nginx\nLABEL description=\"nginx built from source.\" \\\n      openssl=\"LibreSSL ${LIBRESSL_VERSION}.\" \\\n      nginx=\"nginx ${NGINX_VERSION}.\"\nCMD [\"run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"e89b8de0b9cae2069bb6548670bb1d82","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.4\nMAINTAINER Wonderfall <wonderfall@schrodinger.io>\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.11.4\nARG LIBRESSL_VERSION=2.5.0\nARG GPG_LIBRESSL=\"A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5\"\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nRUN echo \"@commuedge https://nl.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories \\\n && NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && BUILD_DEPS=\" build-base linux-headers ca-certificates automake autoconf git tar libtool pcre-dev zlib-dev binutils gnupg\" \\\n && apk -U add ${BUILD_DEPS} pcre zlib libgcc libstdc++ su-exec openssl bind-tools tini@commuedge \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && LIBRESSL_TARBALL=\"libressl-${LIBRESSL_VERSION}.tar.gz\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \\\n && echo \"Verifying ${LIBRESSL_TARBALL} using GPG...\" \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \\\n && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \\\n && gpg --import libressl.asc \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_LIBRESSL}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${LIBRESSL_TARBALL}...\" \\\n && tar xzf ${LIBRESSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/felixbuenemann/sslconfig/updated-nginx-1.9.15-spdy-patch/patches/nginx_1_9_15_http2_spdy.patch -O spdy.patch \\\n && patch -p1 < spdy.patch \\\n && wget -q https://raw.githubusercontent.com/cloudflare/sslconfig/master/patches/nginx__dynamic_tls_records.patch \\\n && patch -p1 < nginx__dynamic_tls_records.patch \\\n && ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --with-cc-opt='-O3 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wno-deprecated-declarations' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' --with-openssl=/tmp/libressl-${LIBRESSL_VERSION} --with-http_ssl_module --with-http_v2_module --with-http_spdy_module --with-http_gzip_static_module --with-http_stub_status_module --with-file-aio --with-threads --with-pcre-jit --without-http_ssi_module --without-http_scgi_module --without-http_uwsgi_module --without-http_geo_module --without-http_autoindex_module --without-http_map_module --without-http_split_clients_module --without-http_memcached_module --without-http_empty_gif_module --without-http_browser_module --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --add-module=/tmp/headers-more-nginx-module --add-module=/tmp/ngx_brotli \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/sbin/nginx \\\n && apk del ${BUILD_DEPS} \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY nginx.conf /etc/nginx/conf/nginx.conf\nCOPY run.sh /usr/local/bin/run.sh\nCOPY ngxpasswd /usr/local/bin/ngxpasswd\nCOPY ngxproxy /usr/local/bin/ngxproxy\nCOPY vhost_http.conf /etc/nginx/conf/vhost_http.conf\nCOPY vhost_https.conf /etc/nginx/conf/vhost_https.conf\nCOPY ssl_params /etc/nginx/conf/ssl_params\nCOPY headers_params /etc/nginx/conf/headers_params\nCOPY proxy_params /etc/nginx/conf/proxy_params\nRUN chmod +x /usr/local/bin/*\nEXPOSE 8000/tcp 4430/tcp\nVOLUME /sites-enabled /www /conf.d /passwds /certs /var/log/nginx\nLABEL description=\"nginx built from source.\" \\\n      openssl=\"LibreSSL ${LIBRESSL_VERSION}.\" \\\n      nginx=\"nginx ${NGINX_VERSION}.\"\nCMD [\"run.sh\"]\n","originalDockerfileUglifiedHash":"e89b8de0b9cae2069bb6548670bb1d82","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7c185f1d86993be7c8efecdc198a93174ab4b070.dockerfile"}