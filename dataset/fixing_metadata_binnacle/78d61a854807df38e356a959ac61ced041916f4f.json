{"seed":3652201002,"processedDockerfileHash":"3a5b91d9026bb2beb0de4ed8fb255ac5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:latest AS base\n#   We install and then uninstall quality to cache the dependencies\n#   while we still have the build tools installed but still be able to\n#   install the very latest quality gem later on without having the disk\n#   space impact of two versions.\nRUN apk update \\\n && apk add ruby=3.1.4-r0 ruby-irb ruby-dev=3.1.4-r0 make=4.3-r1 gcc=12.2.1_git20220924-r4 libc-dev=0.7.2-r3 git=2.38.4-r1 icu-dev=72.1-r1 zlib-dev=1.2.13-r0 g++=12.2.1_git20220924-r4 cmake=3.24.4-r0 openssl-dev=3.0.8-r3 coreutils=9.1-r0 --no-cache \\\n && gem install bigdecimal --version 3.1.4 --no-ri --no-rdoc \\\n && gem uninstall quality \\\n && strip /usr/lib/ruby/gems/2.5.0/extensions/x86_64-linux/2.5.0/rugged-*/rugged/rugged.so \\\n && apk del ruby-irb ruby-dev make gcc libc-dev icu-dev zlib-dev g++ cmake openssl-dev nghttp2 curl pax-utils \\\n && apk add libssl1.1=1.1.1t-r2 icu-libs=72.1-r1 --no-cache \\\n && rm -fr /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/ext/rugged /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/libgit2.a /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/lib/rugged/rugged.so /usr/lib/ruby/gems/2.5.0/gems/unf_ext-0.0.7.5/ext/unf_ext/unf /usr/lib/ruby/gems/2.5.0/gems/kramdown-1.17.0/test /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.y /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.yy /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.rex /usr/lib/ruby/gems/2.5.0/cache /usr/lib/ruby/gems/2.5.0/gems/erubis-2.7.0/doc-api /usr/lib/ruby/gems/2.5.0/gems/reek-5.0.2/spec /usr/lib/ruby/gems/2.5.0/gems/kwalify-0.7.2/doc-api \\\n && echo \"Done\"\nRUN mkdir /usr/quality\nCOPY sample-project/.pronto.yml /usr/quality/.pronto.yml\nCOPY sample-project/Rakefile /usr/quality/Rakefile\nCOPY entrypoint.sh /\nFROM base AS latest\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM base AS python-base\n#\n#   Install flake8 and pycodestyle\n#\nRUN apk add python3=3.10.11-r0 py3-pip=22.3.1-r1 --no-cache \\\n && pip3 install flake8 \\\n && apk del py3-pip \\\n && pip3 uninstall -y pip\nRUN apk update \\\n && apk add ruby-dev=3.1.4-r0 gcc=12.2.1_git20220924-r4 make=4.3-r1 g++=12.2.1_git20220924-r4 cmake=3.24.4-r0 --no-cache \\\n && gem install io-console --version 0.6.0 --no-ri --no-rdoc \\\n && apk del ruby-dev gcc make g++ cmake\nFROM python-base AS python\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM python-base AS shellcheck-builder\n#\n#   Install shellcheck\n#\n#   https://github.com/mitchty/alpine-ghc\nCOPY mitch.tishmack@gmail.com-55881c97.rsa.pub /etc/apk/keys/mitch.tishmack@gmail.com-55881c97.rsa.pub\nRUN echo \"https://s3-us-west-2.amazonaws.com/alpine-ghc/8.0\" >> /etc/apk/repositories \\\n && apk add ghc=9.0.2-r1 cabal=3.8.1.0-r2 stack --no-cache\n#   https://github.com/NLKNguyen/alpine-shellcheck/blob/master/builder/Dockerfile\nRUN apk add build-base=0.5-r3 git=2.38.4-r1 wget=1.21.3-r2 --no-cache\nRUN mkdir -p /usr/src/shellcheck\nWORKDIR /usr/src/shellcheck\nRUN git clone https://github.com/koalaman/shellcheck .\nRUN cabal update \\\n && cabal install\nENV PATH=\"/root/.cabal/bin:$PATH\"\nFROM python-base AS shellcheck-base\nCOPY --from=4 /root/.cabal/bin /usr/local/bin\nRUN apk update \\\n && apk add ruby=3.1.4-r0 ruby-dev=3.1.4-r0 --no-cache\nRUN gem install --no-ri --no-rdoc\nFROM shellcheck-base AS shellcheck\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM shellcheck-base AS jumbo-base\n#   https://github.com/sgerrand/alpine-pkg-glibc\nRUN apk add ca-certificates=20220614-r4 wget=1.21.3-r2 --no-cache \\\n && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\\n && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk \\\n && apk add glibc-2.28-r0.apk\nENV LANG=\"C.UTF-8\"\n#   To upgrade:\n#   1. Check https://jdk.java.net/13/ for latest build - see 'Alpine Linux/x64' link\n#   2. See if there's an update here: https://github.com/docker-library/openjdk/blob/master/13/jdk/alpine/Dockerfile\nENV JAVA_HOME=\"/opt/openjdk-13\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   https://jdk.java.net/\nENV JAVA_VERSION=\"13-ea+19\"\nENV JAVA_URL=\"https://download.java.net/java/early_access/alpine/19/binaries/openjdk-13-ea+19_linux-x64-musl_bin.tar.gz\"\nENV JAVA_SHA256=\"010ea985fba7e3d89a9170545c4e697da983cffc442b84e65dba3baa771299a5\"\n#   \"For Alpine Linux, builds are produced on a reduced schedule and may not be in sync with the other platforms.\"\nRUN set -eux ; wget -O /openjdk.tgz \"$JAVA_URL\" ; echo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c - ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm /openjdk.tgz ; java -Xshare:dump ; java --version ; javac --version\n#   https://docs.oracle.com/javase/10/tools/jshell.htm\n#   https://docs.oracle.com/javase/10/jshell/\n#   https://en.wikipedia.org/wiki/JShell\n#   https://github.com/frol/docker-alpine-scala/blob/master/Dockerfile\nENV SCALA_VERSION=\"2.12.0-M5\" \\\n    SCALA_HOME=\"/usr/share/scala\"\n#   NOTE: bash is used by scala/scalac scripts, and it cannot be easily replaced with ash.\nRUN apk add wget=1.21.3-r2 ca-certificates=20220614-r4 --no-cache --virtual=.build-dependencies \\\n && apk add bash=5.2.15-r0 --no-cache \\\n && cd \"/tmp\" \\\n && wget \"https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz\" \\\n && tar xzf \"scala-${SCALA_VERSION}.tgz\" \\\n && mkdir \"${SCALA_HOME}\" \\\n && rm \"/tmp/scala-${SCALA_VERSION}/bin/\"*.bat \\\n && mv \"/tmp/scala-${SCALA_VERSION}/bin\" \"/tmp/scala-${SCALA_VERSION}/lib\" \"${SCALA_HOME}\" \\\n && ln -s \"${SCALA_HOME}/bin/\"* \"/usr/bin/\" \\\n && apk del .build-dependencies \\\n && rm -rf \"/tmp/\"*\n#  https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle-batch_2.10/0.5.0/scalastyle_2.10-0.5.0.jar\" && \\\nENV SCALASTYLE_JAR=\"scalastyle_2.10-0.8.0-batch.jar\"\nCOPY etc/scalastyle_config.xml /usr/src/scalastyle_config.xml\nRUN cd /usr/lib \\\n && wget \"https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle_2.10/0.8.0/${SCALASTYLE_JAR}\" \\\n && echo '#!/bin/bash' > /bin/scalastyle \\\n && echo \"java -jar `pwd `/${SCALASTYLE_JAR}\" --config \"/usr/src/scalastyle_config.xml\" '${@}' >> /bin/scalastyle \\\n && chmod +x /bin/scalastyle\nFROM jumbo-base AS jumbo\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:latest AS base\n#  We install and then uninstall quality to cache the dependencies\n#  while we still have the build tools installed but still be able to\n#  install the very latest quality gem later on without having the disk\n#  space impact of two versions.\nRUN apk update \\\n && apk add --no-cache ruby ruby-irb ruby-dev make gcc libc-dev git icu-dev zlib-dev g++ cmake openssl-dev coreutils \\\n && gem install bigdecimal --no-ri --no-rdoc \\\n && gem uninstall quality \\\n && strip /usr/lib/ruby/gems/2.5.0/extensions/x86_64-linux/2.5.0/rugged-*/rugged/rugged.so \\\n && apk del ruby-irb ruby-dev make gcc libc-dev icu-dev zlib-dev g++ cmake openssl-dev nghttp2 curl pax-utils \\\n && apk add --no-cache libssl1.1 icu-libs \\\n && rm -fr /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/ext/rugged /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/libgit2.a /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/lib/rugged/rugged.so /usr/lib/ruby/gems/2.5.0/gems/unf_ext-0.0.7.5/ext/unf_ext/unf /usr/lib/ruby/gems/2.5.0/gems/kramdown-1.17.0/test /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.y /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.yy /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.rex /usr/lib/ruby/gems/2.5.0/cache /usr/lib/ruby/gems/2.5.0/gems/erubis-2.7.0/doc-api /usr/lib/ruby/gems/2.5.0/gems/reek-5.0.2/spec /usr/lib/ruby/gems/2.5.0/gems/kwalify-0.7.2/doc-api \\\n && echo \"Done\"\nRUN mkdir /usr/quality\nADD sample-project/.pronto.yml /usr/quality/.pronto.yml\nADD sample-project/Rakefile /usr/quality/Rakefile\nCOPY entrypoint.sh /\nFROM base AS latest\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM base AS python-base\n#\n#  Install flake8 and pycodestyle\n#\nRUN apk add --no-cache python3 py3-pip \\\n && pip3 install flake8 \\\n && apk del py3-pip \\\n && pip3 uninstall -y pip\nRUN apk update \\\n && apk add --no-cache ruby-dev gcc make g++ cmake \\\n && gem install io-console --no-ri --no-rdoc \\\n && apk del ruby-dev gcc make g++ cmake\nFROM python-base AS python\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM python-base AS shellcheck-builder\n#\n#  Install shellcheck\n#\n#  https://github.com/mitchty/alpine-ghc\nCOPY mitch.tishmack@gmail.com-55881c97.rsa.pub /etc/apk/keys/mitch.tishmack@gmail.com-55881c97.rsa.pub\nRUN echo \"https://s3-us-west-2.amazonaws.com/alpine-ghc/8.0\" >> /etc/apk/repositories \\\n && apk add --no-cache ghc cabal stack\n#  https://github.com/NLKNguyen/alpine-shellcheck/blob/master/builder/Dockerfile\nRUN apk add --no-cache build-base git wget\nRUN mkdir -p /usr/src/shellcheck\nWORKDIR /usr/src/shellcheck\nRUN git clone https://github.com/koalaman/shellcheck .\nRUN cabal update \\\n && cabal install\nENV PATH=\"/root/.cabal/bin:$PATH\"\nFROM python-base AS shellcheck-base\nCOPY --from=4 /root/.cabal/bin /usr/local/bin\nRUN apk update \\\n && apk add --no-cache ruby ruby-dev\nRUN gem install --no-ri --no-rdoc\nFROM shellcheck-base AS shellcheck\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM shellcheck-base AS jumbo-base\n#  https://github.com/sgerrand/alpine-pkg-glibc\nRUN apk --no-cache add ca-certificates wget \\\n && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\\n && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk \\\n && apk add glibc-2.28-r0.apk\nENV LANG=\"C.UTF-8\"\n#  To upgrade:\n#  1. Check https://jdk.java.net/13/ for latest build - see 'Alpine Linux/x64' link\n#  2. See if there's an update here: https://github.com/docker-library/openjdk/blob/master/13/jdk/alpine/Dockerfile\nENV JAVA_HOME=\"/opt/openjdk-13\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  https://jdk.java.net/\nENV JAVA_VERSION=\"13-ea+19\"\nENV JAVA_URL=\"https://download.java.net/java/early_access/alpine/19/binaries/openjdk-13-ea+19_linux-x64-musl_bin.tar.gz\"\nENV JAVA_SHA256=\"010ea985fba7e3d89a9170545c4e697da983cffc442b84e65dba3baa771299a5\"\n#  \"For Alpine Linux, builds are produced on a reduced schedule and may not be in sync with the other platforms.\"\nRUN set -eux ; wget -O /openjdk.tgz \"$JAVA_URL\" ; echo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c - ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm /openjdk.tgz ; java -Xshare:dump ; java --version ; javac --version\n#  https://docs.oracle.com/javase/10/tools/jshell.htm\n#  https://docs.oracle.com/javase/10/jshell/\n#  https://en.wikipedia.org/wiki/JShell\n#  https://github.com/frol/docker-alpine-scala/blob/master/Dockerfile\nENV SCALA_VERSION=\"2.12.0-M5\" \\\n    SCALA_HOME=\"/usr/share/scala\"\n#  NOTE: bash is used by scala/scalac scripts, and it cannot be easily replaced with ash.\nRUN apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache bash \\\n && cd \"/tmp\" \\\n && wget \"https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz\" \\\n && tar xzf \"scala-${SCALA_VERSION}.tgz\" \\\n && mkdir \"${SCALA_HOME}\" \\\n && rm \"/tmp/scala-${SCALA_VERSION}/bin/\"*.bat \\\n && mv \"/tmp/scala-${SCALA_VERSION}/bin\" \"/tmp/scala-${SCALA_VERSION}/lib\" \"${SCALA_HOME}\" \\\n && ln -s \"${SCALA_HOME}/bin/\"* \"/usr/bin/\" \\\n && apk del .build-dependencies \\\n && rm -rf \"/tmp/\"*\n# https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle-batch_2.10/0.5.0/scalastyle_2.10-0.5.0.jar\" && \\\nENV SCALASTYLE_JAR=\"scalastyle_2.10-0.8.0-batch.jar\"\nCOPY etc/scalastyle_config.xml /usr/src/scalastyle_config.xml\nRUN cd /usr/lib \\\n && wget \"https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle_2.10/0.8.0/${SCALASTYLE_JAR}\" \\\n && echo '#!/bin/bash' > /bin/scalastyle \\\n && echo \"java -jar `pwd `/${SCALASTYLE_JAR}\" --config \"/usr/src/scalastyle_config.xml\" '${@}' >> /bin/scalastyle \\\n && chmod +x /bin/scalastyle\nFROM jumbo-base AS jumbo\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\n","injectedSmells":[],"originalDockerfileHash":"4226c17ab7d08d90c268bfd5d9b02a2a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:latest AS base\n#   We install and then uninstall quality to cache the dependencies\n#   while we still have the build tools installed but still be able to\n#   install the very latest quality gem later on without having the disk\n#   space impact of two versions.\nRUN apk update \\\n && apk add --no-cache ruby ruby-irb ruby-dev make gcc libc-dev git icu-dev zlib-dev g++ cmake openssl-dev coreutils \\\n && gem install bigdecimal --no-ri --no-rdoc \\\n && gem uninstall quality \\\n && strip /usr/lib/ruby/gems/2.5.0/extensions/x86_64-linux/2.5.0/rugged-*/rugged/rugged.so \\\n && apk del ruby-irb ruby-dev make gcc libc-dev icu-dev zlib-dev g++ cmake openssl-dev nghttp2 curl pax-utils \\\n && apk add --no-cache libssl1.1 icu-libs \\\n && rm -fr /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/src /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/ext/rugged /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/vendor/libgit2/build/libgit2.a /usr/lib/ruby/gems/2.5.0/gems/rugged-0.27.4/lib/rugged/rugged.so /usr/lib/ruby/gems/2.5.0/gems/unf_ext-0.0.7.5/ext/unf_ext/unf /usr/lib/ruby/gems/2.5.0/gems/kramdown-1.17.0/test /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.y /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.yy /usr/lib/ruby/gems/2.5.0/gems/ruby_parser-3.11.0/lib/*.rex /usr/lib/ruby/gems/2.5.0/cache /usr/lib/ruby/gems/2.5.0/gems/erubis-2.7.0/doc-api /usr/lib/ruby/gems/2.5.0/gems/reek-5.0.2/spec /usr/lib/ruby/gems/2.5.0/gems/kwalify-0.7.2/doc-api \\\n && echo \"Done\"\nRUN mkdir /usr/quality\nADD sample-project/.pronto.yml /usr/quality/.pronto.yml\nADD sample-project/Rakefile /usr/quality/Rakefile\nCOPY entrypoint.sh /\nFROM base AS latest\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM base AS python-base\n#\n#   Install flake8 and pycodestyle\n#\nRUN apk add --no-cache python3 py3-pip \\\n && pip3 install flake8 \\\n && apk del py3-pip \\\n && pip3 uninstall -y pip\nRUN apk update \\\n && apk add --no-cache ruby-dev gcc make g++ cmake \\\n && gem install io-console --no-ri --no-rdoc \\\n && apk del ruby-dev gcc make g++ cmake\nFROM python-base AS python\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM python-base AS shellcheck-builder\n#\n#   Install shellcheck\n#\n#   https://github.com/mitchty/alpine-ghc\nCOPY mitch.tishmack@gmail.com-55881c97.rsa.pub /etc/apk/keys/mitch.tishmack@gmail.com-55881c97.rsa.pub\nRUN echo \"https://s3-us-west-2.amazonaws.com/alpine-ghc/8.0\" >> /etc/apk/repositories \\\n && apk add --no-cache ghc cabal stack\n#   https://github.com/NLKNguyen/alpine-shellcheck/blob/master/builder/Dockerfile\nRUN apk add --no-cache build-base git wget\nRUN mkdir -p /usr/src/shellcheck\nWORKDIR /usr/src/shellcheck\nRUN git clone https://github.com/koalaman/shellcheck .\nRUN cabal update \\\n && cabal install\nENV PATH=\"/root/.cabal/bin:$PATH\"\nFROM python-base AS shellcheck-base\nCOPY --from=4 /root/.cabal/bin /usr/local/bin\nRUN apk update \\\n && apk add --no-cache ruby ruby-dev\nRUN gem install --no-ri --no-rdoc\nFROM shellcheck-base AS shellcheck\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\nFROM shellcheck-base AS jumbo-base\n#   https://github.com/sgerrand/alpine-pkg-glibc\nRUN apk --no-cache add ca-certificates wget \\\n && wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\\n && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk \\\n && apk add glibc-2.28-r0.apk\nENV LANG=\"C.UTF-8\"\n#   To upgrade:\n#   1. Check https://jdk.java.net/13/ for latest build - see 'Alpine Linux/x64' link\n#   2. See if there's an update here: https://github.com/docker-library/openjdk/blob/master/13/jdk/alpine/Dockerfile\nENV JAVA_HOME=\"/opt/openjdk-13\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   https://jdk.java.net/\nENV JAVA_VERSION=\"13-ea+19\"\nENV JAVA_URL=\"https://download.java.net/java/early_access/alpine/19/binaries/openjdk-13-ea+19_linux-x64-musl_bin.tar.gz\"\nENV JAVA_SHA256=\"010ea985fba7e3d89a9170545c4e697da983cffc442b84e65dba3baa771299a5\"\n#   \"For Alpine Linux, builds are produced on a reduced schedule and may not be in sync with the other platforms.\"\nRUN set -eux ; wget -O /openjdk.tgz \"$JAVA_URL\" ; echo \"$JAVA_SHA256 */openjdk.tgz\" | sha256sum -c - ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file /openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 ; rm /openjdk.tgz ; java -Xshare:dump ; java --version ; javac --version\n#   https://docs.oracle.com/javase/10/tools/jshell.htm\n#   https://docs.oracle.com/javase/10/jshell/\n#   https://en.wikipedia.org/wiki/JShell\n#   https://github.com/frol/docker-alpine-scala/blob/master/Dockerfile\nENV SCALA_VERSION=\"2.12.0-M5\" \\\n    SCALA_HOME=\"/usr/share/scala\"\n#   NOTE: bash is used by scala/scalac scripts, and it cannot be easily replaced with ash.\nRUN apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache bash \\\n && cd \"/tmp\" \\\n && wget \"https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz\" \\\n && tar xzf \"scala-${SCALA_VERSION}.tgz\" \\\n && mkdir \"${SCALA_HOME}\" \\\n && rm \"/tmp/scala-${SCALA_VERSION}/bin/\"*.bat \\\n && mv \"/tmp/scala-${SCALA_VERSION}/bin\" \"/tmp/scala-${SCALA_VERSION}/lib\" \"${SCALA_HOME}\" \\\n && ln -s \"${SCALA_HOME}/bin/\"* \"/usr/bin/\" \\\n && apk del .build-dependencies \\\n && rm -rf \"/tmp/\"*\n#  https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle-batch_2.10/0.5.0/scalastyle_2.10-0.5.0.jar\" && \\\nENV SCALASTYLE_JAR=\"scalastyle_2.10-0.8.0-batch.jar\"\nCOPY etc/scalastyle_config.xml /usr/src/scalastyle_config.xml\nRUN cd /usr/lib \\\n && wget \"https://oss.sonatype.org/content/repositories/releases/org/scalastyle/scalastyle_2.10/0.8.0/${SCALASTYLE_JAR}\" \\\n && echo '#!/bin/bash' > /bin/scalastyle \\\n && echo \"java -jar `pwd `/${SCALASTYLE_JAR}\" --config \"/usr/src/scalastyle_config.xml\" '${@}' >> /bin/scalastyle \\\n && chmod +x /bin/scalastyle\nFROM jumbo-base AS jumbo\nVOLUME /usr/app\nWORKDIR /usr/app\nENTRYPOINT [\"/entrypoint.sh\"]\nARG quality_gem_version\nRUN gem install --no-ri --no-rdoc\nCMD [\"quality\"]\n","originalDockerfileUglifiedHash":"ca5b2b4a68782357511f06b477a2d757","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/78d61a854807df38e356a959ac61ced041916f4f.dockerfile"}