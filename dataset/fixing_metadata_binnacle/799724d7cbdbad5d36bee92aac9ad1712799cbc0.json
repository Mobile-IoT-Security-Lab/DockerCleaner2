{"seed":2756350164,"processedDockerfileHash":"dc717f3ca2549df1a37a809e5764749a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV LD_LIBRARY_PATH=\"/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV MINICONDA_VERSION=\"4.4.10\"\n#   Setup gcc etc.\nRUN yum install -y epel-release\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\nRUN yum install -y make ncurses-devel zlib-devel epel-release zeromq-devel wget blas-devel openblas-devel libpng-devel freetype-devel bzip2 \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\n#\n#   PPC64 specific - certain libs/whl don't support PPC64LE\n#\nWORKDIR $HOME\n#   Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then yum install -y git boost-devel cmake3 autoconf libjpeg-devel \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake \\\n && git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && export ARROW_BUILD_TYPE=release \\\n && export ARROW_HOME=/usr/local \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DARROW_BUILD_TESTS=OFF \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && python setup.py install; fi'\nWORKDIR /\n#   Add requirements\nCOPY src/interface_py/requirements_runtime.txt requirements.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN chmod a+rwx requirements*.txt \\\n && pip install --no-cache-dir -r requirements.txt \\\n && pip install --no-cache-dir -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   Add a canned jupyter notebook demo to the container\nRUN mkdir -p jupyter/demos\nCOPY examples/py/demos/H2O4GPU_Ridge.ipynb /jupyter/demos/H2O4GPU_Ridge.ipynb\nCOPY examples/py/demos/H2O4GPU_LinearRegression.ipynb /jupyter/demos/H2O4GPU_LinearRegression.ipynb\nCOPY examples/py/demos/H2O4GPU_GBM.ipynb /jupyter/demos/H2O4GPU_GBM.ipynb\nCOPY examples/py/demos/H2O4GPU_GLM.ipynb /jupyter/demos/H2O4GPU_GLM.ipynb\nCOPY examples/py/demos/H2O4GPU_Lasso.ipynb /jupyter/demos/H2O4GPU_Lasso.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Images.ipynb /jupyter/demos/H2O4GPU_KMeans_Images.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Quantization.ipynb /jupyter/demos/H2O4GPU_KMeans_Quantization.ipynb\nCOPY examples/py/demos/Multi-GPU-H2O-GLM-simple.ipynb /jupyter/demos/Multi-GPU-H2O-GLM-simple.ipynb\nCOPY examples/py/demos/H2O4GPU_TruncatedSVD.ipynb /jupyter/demos/H2O4GPU_TruncatedSVD.ipynb\nCOPY examples/py/demos/H2O4GPU_PCA.ipynb /jupyter/demos/H2O4GPU_PCA.ipynb\nCOPY examples/py/demos/H2O4GPU_Daal_LinearRegression.ipynb /jupyter/demos/H2O4GPU_Daal_LinearRegression.ipynb\nCOPY examples/py/demos/figures /jupyter/demos/figures\nRUN cd /jupyter/demos \\\n && chmod -R a+rwx /jupyter \\\n && mkdir /scikit_learn_data \\\n && chmod -R a+rwx /scikit_learn_data \\\n && mkdir -p /jupyter/scikit_learn_data/covertype \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/covertype \\\n && mkdir -p /jupyter/scikit_learn_data/lfw_home \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/lfw_home \\\n && HOME=/jupyter jupyter notebook --generate-config \\\n && sed -i \"s/#c.NotebookApp.token = '<generated>'/c.NotebookApp.token = 'h2o'/\" /jupyter/.jupyter/jupyter_notebook_config.py \\\n && chmod -R a+rwx /jupyter/.jupyter\n#   Add shell wrapper\nCOPY scripts/run.sh /run.sh\nRUN chmod a+rwx run.sh\nRUN wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\nARG h2o4gpu_VERSION\nARG h2o4gpu_COMMIT\nARG DOCKER_VERSION_TAG\nLABEL h2o4gpu_commit=\"$h2o4gpu_COMMIT\" \\\n      docker_version_tag=\"$DOCKER_VERSION_TAG\"\nENTRYPOINT [\"./run.sh\"]\nEXPOSE 8888/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV LD_LIBRARY_PATH=\"/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV MINICONDA_VERSION=\"4.4.10\"\n#  Setup gcc etc.\nRUN yum install -y epel-release\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\nRUN yum install -y make ncurses-devel zlib-devel epel-release zeromq-devel wget blas-devel openblas-devel libpng-devel freetype-devel bzip2 \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\n#\n#  PPC64 specific - certain libs/whl don't support PPC64LE\n#\nWORKDIR $HOME\n#  Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then yum install -y git boost-devel cmake3 autoconf libjpeg-devel \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake \\\n && git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && export ARROW_BUILD_TYPE=release \\\n && export ARROW_HOME=/usr/local \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DARROW_BUILD_TESTS=OFF \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && python setup.py install; fi'\nWORKDIR /\n#  Add requirements\nCOPY src/interface_py/requirements_runtime.txt requirements.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN chmod a+rwx requirements*.txt \\\n && pip install --no-cache-dir -r requirements.txt \\\n && pip install --no-cache-dir -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#  Add a canned jupyter notebook demo to the container\nRUN mkdir -p jupyter/demos\nCOPY examples/py/demos/H2O4GPU_Ridge.ipynb /jupyter/demos/H2O4GPU_Ridge.ipynb\nCOPY examples/py/demos/H2O4GPU_LinearRegression.ipynb /jupyter/demos/H2O4GPU_LinearRegression.ipynb\nCOPY examples/py/demos/H2O4GPU_GBM.ipynb /jupyter/demos/H2O4GPU_GBM.ipynb\nCOPY examples/py/demos/H2O4GPU_GLM.ipynb /jupyter/demos/H2O4GPU_GLM.ipynb\nCOPY examples/py/demos/H2O4GPU_Lasso.ipynb /jupyter/demos/H2O4GPU_Lasso.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Images.ipynb /jupyter/demos/H2O4GPU_KMeans_Images.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Quantization.ipynb /jupyter/demos/H2O4GPU_KMeans_Quantization.ipynb\nCOPY examples/py/demos/Multi-GPU-H2O-GLM-simple.ipynb /jupyter/demos/Multi-GPU-H2O-GLM-simple.ipynb\nCOPY examples/py/demos/H2O4GPU_TruncatedSVD.ipynb /jupyter/demos/H2O4GPU_TruncatedSVD.ipynb\nCOPY examples/py/demos/H2O4GPU_PCA.ipynb /jupyter/demos/H2O4GPU_PCA.ipynb\nCOPY examples/py/demos/H2O4GPU_Daal_LinearRegression.ipynb /jupyter/demos/H2O4GPU_Daal_LinearRegression.ipynb\nCOPY examples/py/demos/figures /jupyter/demos/figures\nRUN cd /jupyter/demos \\\n && chmod -R a+rwx /jupyter \\\n && mkdir /scikit_learn_data \\\n && chmod -R a+rwx /scikit_learn_data \\\n && mkdir -p /jupyter/scikit_learn_data/covertype \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/covertype \\\n && mkdir -p /jupyter/scikit_learn_data/lfw_home \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/lfw_home \\\n && HOME=/jupyter jupyter notebook --generate-config \\\n && sed -i \"s/#c.NotebookApp.token = '<generated>'/c.NotebookApp.token = 'h2o'/\" /jupyter/.jupyter/jupyter_notebook_config.py \\\n && chmod -R a+rwx /jupyter/.jupyter\n#  Add shell wrapper\nCOPY scripts/run.sh /run.sh\nRUN chmod a+rwx run.sh\nRUN wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\nARG h2o4gpu_VERSION\nARG h2o4gpu_COMMIT\nARG DOCKER_VERSION_TAG\nLABEL h2o4gpu_commit=\"$h2o4gpu_COMMIT\" \\\n      docker_version_tag=\"$DOCKER_VERSION_TAG\"\nENTRYPOINT [\"./run.sh\"]\nEXPOSE 8888/tcp\n","injectedSmells":[],"originalDockerfileHash":"229bafbdc8c82001cc9d73d9a44a90d4","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV LD_LIBRARY_PATH=\"/usr/lib64:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV MINICONDA_VERSION=\"4.4.10\"\n#   Setup gcc etc.\nRUN yum install -y epel-release\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\nRUN yum install -y make ncurses-devel zlib-devel epel-release zeromq-devel wget blas-devel openblas-devel libpng-devel freetype-devel bzip2 \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\n#\n#   PPC64 specific - certain libs/whl don't support PPC64LE\n#\nWORKDIR $HOME\n#   Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then yum install -y git boost-devel cmake3 autoconf libjpeg-devel \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake \\\n && git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && export ARROW_BUILD_TYPE=release \\\n && export ARROW_HOME=/usr/local \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DARROW_BUILD_TESTS=OFF \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && python setup.py install; fi'\nWORKDIR /\n#   Add requirements\nCOPY src/interface_py/requirements_runtime.txt requirements.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN chmod a+rwx requirements*.txt \\\n && pip install --no-cache-dir -r requirements.txt \\\n && pip install --no-cache-dir -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   Add a canned jupyter notebook demo to the container\nRUN mkdir -p jupyter/demos\nCOPY examples/py/demos/H2O4GPU_Ridge.ipynb /jupyter/demos/H2O4GPU_Ridge.ipynb\nCOPY examples/py/demos/H2O4GPU_LinearRegression.ipynb /jupyter/demos/H2O4GPU_LinearRegression.ipynb\nCOPY examples/py/demos/H2O4GPU_GBM.ipynb /jupyter/demos/H2O4GPU_GBM.ipynb\nCOPY examples/py/demos/H2O4GPU_GLM.ipynb /jupyter/demos/H2O4GPU_GLM.ipynb\nCOPY examples/py/demos/H2O4GPU_Lasso.ipynb /jupyter/demos/H2O4GPU_Lasso.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Images.ipynb /jupyter/demos/H2O4GPU_KMeans_Images.ipynb\nCOPY examples/py/demos/H2O4GPU_KMeans_Quantization.ipynb /jupyter/demos/H2O4GPU_KMeans_Quantization.ipynb\nCOPY examples/py/demos/Multi-GPU-H2O-GLM-simple.ipynb /jupyter/demos/Multi-GPU-H2O-GLM-simple.ipynb\nCOPY examples/py/demos/H2O4GPU_TruncatedSVD.ipynb /jupyter/demos/H2O4GPU_TruncatedSVD.ipynb\nCOPY examples/py/demos/H2O4GPU_PCA.ipynb /jupyter/demos/H2O4GPU_PCA.ipynb\nCOPY examples/py/demos/H2O4GPU_Daal_LinearRegression.ipynb /jupyter/demos/H2O4GPU_Daal_LinearRegression.ipynb\nCOPY examples/py/demos/figures /jupyter/demos/figures\nRUN cd /jupyter/demos \\\n && chmod -R a+rwx /jupyter \\\n && mkdir /scikit_learn_data \\\n && chmod -R a+rwx /scikit_learn_data \\\n && mkdir -p /jupyter/scikit_learn_data/covertype \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/covertype \\\n && mkdir -p /jupyter/scikit_learn_data/lfw_home \\\n && chmod -R a+rwx /jupyter/scikit_learn_data/lfw_home \\\n && HOME=/jupyter jupyter notebook --generate-config \\\n && sed -i \"s/#c.NotebookApp.token = '<generated>'/c.NotebookApp.token = 'h2o'/\" /jupyter/.jupyter/jupyter_notebook_config.py \\\n && chmod -R a+rwx /jupyter/.jupyter\n#   Add shell wrapper\nCOPY scripts/run.sh /run.sh\nRUN chmod a+rwx run.sh\nRUN wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\nARG h2o4gpu_VERSION\nARG h2o4gpu_COMMIT\nARG DOCKER_VERSION_TAG\nLABEL h2o4gpu_commit=\"$h2o4gpu_COMMIT\" \\\n      docker_version_tag=\"$DOCKER_VERSION_TAG\"\nENTRYPOINT [\"./run.sh\"]\nEXPOSE 8888/tcp\n","originalDockerfileUglifiedHash":"76b8842062fbf9ee3238910fb2612b9d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/799724d7cbdbad5d36bee92aac9ad1712799cbc0.dockerfile"}