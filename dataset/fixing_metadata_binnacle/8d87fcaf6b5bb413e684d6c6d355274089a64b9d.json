{"seed":3440482056,"processedDockerfileHash":"18fa7f00f673c575f9973b0d66027178","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Multi-stage build - See https://docs.docker.com/engine/userguide/eng-image/multistage-build\nFROM ubnt/unms:0.13.3 AS unms\nFROM ubnt/unms-netflow:0.13.3 AS unms-netflow\nFROM oznu/s6-node:10.15.1-debian-armhf\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   base deps redis, rabbitmq, postgres 9.6\nRUN set -x \\\n && echo \"deb http://ftp.debian.org/debian stretch-backports main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man7 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install --no-install-recommends build-essential rabbitmq-server redis-server postgresql-9.6 postgresql-contrib-9.6 postgresql-client-9.6 libpq-dev gzip bash vim openssl libcap-dev dumb-init sudo gettext zlibc zlib1g zlib1g-dev iproute2 netcat wget libpcre3 libpcre3-dev libssl-dev -y \\\n && apt-get install --no-install-recommends certbot stretch-backports -y -t\n#   start ubnt/unms dockerfile #\nRUN mkdir -p /home/app/unms\nWORKDIR /home/app/unms\n#   Copy UNMS app from offical image since the source code is not published at this time\nCOPY --from=unms /home/app/unms /home/app/unms\nRUN rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install sharp@latest \\\n && JOBS=$( nproc ;) npm install --production \\\n && mkdir -p -m 777 \"$HOME/unms/public/site-images\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/config-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/unms-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/import\"\nCOPY --from=unms /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n#   end ubnt/unms dockerfile #\n#   start unms-netflow dockerfile #\nRUN mkdir -p /home/app/netflow\nCOPY --from=unms-netflow /home/app /home/app/netflow\nRUN cd /home/app/netflow \\\n && rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install --production\n#   end unms-netflow dockerfile #\n#   ubnt/nginx docker file #\nENV NGINX_UID=\"1000\" \\\n    NGINX_VERSION=\"nginx-1.12.2\" \\\n    LUAJIT_VERSION=\"2.1.0-beta3\" \\\n    LUA_NGINX_VERSION=\"0.10.13\"\nRUN set -x \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget -q http://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz \\\n && wget -q https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -O lua-nginx-module.tar.gz \\\n && wget -q https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ndk.tar.gz \\\n && wget -q http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz -O luajit.tar.gz \\\n && tar -zxvf lua-nginx-module.tar.gz \\\n && tar -zxvf ndk.tar.gz \\\n && tar -zxvf luajit.tar.gz \\\n && tar -zxvf nginx.tar.gz \\\n && cd /tmp/src/LuaJIT-${LUAJIT_VERSION} \\\n && make amalg PREFIX='/usr' \\\n && make install PREFIX='/usr' \\\n && export LUAJIT_LIB=/usr/lib/libluajit-5.1.so \\\n && export LUAJIT_INC=/usr/include/luajit-2.1 \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' --with-pcre-jit --with-threads --add-module=/tmp/src/lua-nginx-module-${LUA_NGINX_VERSION} --add-module=/tmp/src/ngx_devel_kit-0.3.0 --with-http_ssl_module --with-http_realip_module --with-http_gzip_static_module --with-http_secure_link_module --without-mail_pop3_module --without-mail_imap_module --without-http_upstream_ip_hash_module --without-http_memcached_module --without-http_auth_basic_module --without-http_userid_module --without-http_fastcgi_module --without-http_uwsgi_module --without-http_scgi_module --prefix=/var/lib/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/dev/stdout --error-log-path=/dev/stderr --lock-path=/tmp/nginx.lock --pid-path=/tmp/nginx.pid --http-client-body-temp-path=/tmp/body --http-proxy-temp-path=/tmp/proxy \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm /usr/bin/luajit-${LUAJIT_VERSION} \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/* \\\n && echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" >> /etc/sudoers \\\n && echo \"unms ALL=(ALL) NOPASSWD:SETENV: /copy-user-certs.sh reload\" >> /etc/sudoers\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/unms.tar.gz https://github.com/Ubiquiti-App/UNMS/archive/v0.13.0.tar.gz\nRUN cd /tmp \\\n && tar -xzf unms.tar.gz \\\n && cd UNMS-*/src/nginx \\\n && cp entrypoint.sh refresh-certificate.sh fill-template.sh openssl.cnf *.conf.template / \\\n && mkdir -p /www/public \\\n && cp -R public /www/ \\\n && chmod +x /entrypoint.sh /fill-template.sh /refresh-certificate.sh\n#   make compatible with debian\nRUN sed -i \"s#/bin/sh#/bin/bash#g\" /entrypoint.sh \\\n && sed -i \"s#adduser -D#adduser --disabled-password --gecos \\\"\\\"#g\" /entrypoint.sh\n#   end ubnt/nginx docker file #\nENV PATH=\"/home/app/unms/node_modules/.bin:$PATH:/usr/lib/postgresql/9.6/bin\" \\\n    PGDATA=\"/config/postgres\" \\\n    POSTGRES_DB=\"unms\" \\\n    QUIET_MODE=\"0\" \\\n    WS_PORT=\"443\" \\\n    PUBLIC_HTTPS_PORT=\"443\" \\\n    PUBLIC_WS_PORT=\"443\" \\\n    UNMS_NETFLOW_PORT=\"2055\" \\\n    SECURE_LINK_SECRET=\"enigma\" \\\n    SSL_CERT=\"\"\nEXPOSE 80/tcp 443/tcp 2055/udp\nVOLUME [\"/config\"]\nCOPY root /\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Multi-stage build - See https://docs.docker.com/engine/userguide/eng-image/multistage-build\nFROM ubnt/unms:0.13.3 AS unms\nFROM ubnt/unms-netflow:0.13.3 AS unms-netflow\nFROM oznu/s6-node:10.15.1-debian-armhf\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  base deps redis, rabbitmq, postgres 9.6\nRUN set -x \\\n && echo \"deb http://ftp.debian.org/debian stretch-backports main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man7 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install build-essential rabbitmq-server redis-server postgresql-9.6 postgresql-contrib-9.6 postgresql-client-9.6 libpq-dev gzip bash vim openssl libcap-dev dumb-init sudo gettext zlibc zlib1g zlib1g-dev iproute2 netcat wget libpcre3 libpcre3-dev libssl-dev -y \\\n && apt-get install certbot stretch-backports -y -t\n#  start ubnt/unms dockerfile #\nRUN mkdir -p /home/app/unms\nWORKDIR /home/app/unms\n#  Copy UNMS app from offical image since the source code is not published at this time\nCOPY --from=unms /home/app/unms /home/app/unms\nRUN rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install sharp@latest \\\n && JOBS=$( nproc ;) npm install --production \\\n && mkdir -p -m 777 \"$HOME/unms/public/site-images\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/config-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/unms-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/import\"\nCOPY --from=unms /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n#  end ubnt/unms dockerfile #\n#  start unms-netflow dockerfile #\nRUN mkdir -p /home/app/netflow\nCOPY --from=unms-netflow /home/app /home/app/netflow\nRUN cd /home/app/netflow \\\n && rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install --production\n#  end unms-netflow dockerfile #\n#  ubnt/nginx docker file #\nENV NGINX_UID=\"1000\" \\\n    NGINX_VERSION=\"nginx-1.12.2\" \\\n    LUAJIT_VERSION=\"2.1.0-beta3\" \\\n    LUA_NGINX_VERSION=\"0.10.13\"\nRUN set -x \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget -q http://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz \\\n && wget -q https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -O lua-nginx-module.tar.gz \\\n && wget -q https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ndk.tar.gz \\\n && wget -q http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz -O luajit.tar.gz \\\n && tar -zxvf lua-nginx-module.tar.gz \\\n && tar -zxvf ndk.tar.gz \\\n && tar -zxvf luajit.tar.gz \\\n && tar -zxvf nginx.tar.gz \\\n && cd /tmp/src/LuaJIT-${LUAJIT_VERSION} \\\n && make amalg PREFIX='/usr' \\\n && make install PREFIX='/usr' \\\n && export LUAJIT_LIB=/usr/lib/libluajit-5.1.so \\\n && export LUAJIT_INC=/usr/include/luajit-2.1 \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' --with-pcre-jit --with-threads --add-module=/tmp/src/lua-nginx-module-${LUA_NGINX_VERSION} --add-module=/tmp/src/ngx_devel_kit-0.3.0 --with-http_ssl_module --with-http_realip_module --with-http_gzip_static_module --with-http_secure_link_module --without-mail_pop3_module --without-mail_imap_module --without-http_upstream_ip_hash_module --without-http_memcached_module --without-http_auth_basic_module --without-http_userid_module --without-http_fastcgi_module --without-http_uwsgi_module --without-http_scgi_module --prefix=/var/lib/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/dev/stdout --error-log-path=/dev/stderr --lock-path=/tmp/nginx.lock --pid-path=/tmp/nginx.pid --http-client-body-temp-path=/tmp/body --http-proxy-temp-path=/tmp/proxy \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm /usr/bin/luajit-${LUAJIT_VERSION} \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/* \\\n && echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" >> /etc/sudoers \\\n && echo \"unms ALL=(ALL) NOPASSWD:SETENV: /copy-user-certs.sh reload\" >> /etc/sudoers\nADD https://github.com/Ubiquiti-App/UNMS/archive/v0.13.0.tar.gz /tmp/unms.tar.gz\nRUN cd /tmp \\\n && tar -xzf unms.tar.gz \\\n && cd UNMS-*/src/nginx \\\n && cp entrypoint.sh refresh-certificate.sh fill-template.sh openssl.cnf *.conf.template / \\\n && mkdir -p /www/public \\\n && cp -R public /www/ \\\n && chmod +x /entrypoint.sh /fill-template.sh /refresh-certificate.sh\n#  make compatible with debian\nRUN sed -i \"s#/bin/sh#/bin/bash#g\" /entrypoint.sh \\\n && sed -i \"s#adduser -D#adduser --disabled-password --gecos \\\"\\\"#g\" /entrypoint.sh\n#  end ubnt/nginx docker file #\nENV PATH=\"/home/app/unms/node_modules/.bin:$PATH:/usr/lib/postgresql/9.6/bin\" \\\n    PGDATA=\"/config/postgres\" \\\n    POSTGRES_DB=\"unms\" \\\n    QUIET_MODE=\"0\" \\\n    WS_PORT=\"443\" \\\n    PUBLIC_HTTPS_PORT=\"443\" \\\n    PUBLIC_WS_PORT=\"443\" \\\n    UNMS_NETFLOW_PORT=\"2055\" \\\n    SECURE_LINK_SECRET=\"enigma\" \\\n    SSL_CERT=\"\"\nEXPOSE 80/tcp 443/tcp 2055/udp\nVOLUME [\"/config\"]\nCOPY root /\n","injectedSmells":[],"originalDockerfileHash":"3961e7789c735fa61d32e4b5cd119708","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Multi-stage build - See https://docs.docker.com/engine/userguide/eng-image/multistage-build\nFROM ubnt/unms:0.13.3 AS unms\nFROM ubnt/unms-netflow:0.13.3 AS unms-netflow\nFROM oznu/s6-node:10.15.1-debian-armhf\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   base deps redis, rabbitmq, postgres 9.6\nRUN set -x \\\n && echo \"deb http://ftp.debian.org/debian stretch-backports main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man7 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install build-essential rabbitmq-server redis-server postgresql-9.6 postgresql-contrib-9.6 postgresql-client-9.6 libpq-dev gzip bash vim openssl libcap-dev dumb-init sudo gettext zlibc zlib1g zlib1g-dev iproute2 netcat wget libpcre3 libpcre3-dev libssl-dev -y \\\n && apt-get install certbot stretch-backports -y -t\n#   start ubnt/unms dockerfile #\nRUN mkdir -p /home/app/unms\nWORKDIR /home/app/unms\n#   Copy UNMS app from offical image since the source code is not published at this time\nCOPY --from=unms /home/app/unms /home/app/unms\nRUN rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install sharp@latest \\\n && JOBS=$( nproc ;) npm install --production \\\n && mkdir -p -m 777 \"$HOME/unms/public/site-images\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/config-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/unms-backups\" \\\n && mkdir -p -m 777 \"$HOME/unms/data/import\"\nCOPY --from=unms /usr/local/bin/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\n#   end ubnt/unms dockerfile #\n#   start unms-netflow dockerfile #\nRUN mkdir -p /home/app/netflow\nCOPY --from=unms-netflow /home/app /home/app/netflow\nRUN cd /home/app/netflow \\\n && rm -rf node_modules \\\n && JOBS=$( nproc ;) npm install --production\n#   end unms-netflow dockerfile #\n#   ubnt/nginx docker file #\nENV NGINX_UID=\"1000\" \\\n    NGINX_VERSION=\"nginx-1.12.2\" \\\n    LUAJIT_VERSION=\"2.1.0-beta3\" \\\n    LUA_NGINX_VERSION=\"0.10.13\"\nRUN set -x \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget -q http://nginx.org/download/${NGINX_VERSION}.tar.gz -O nginx.tar.gz \\\n && wget -q https://github.com/openresty/lua-nginx-module/archive/v${LUA_NGINX_VERSION}.tar.gz -O lua-nginx-module.tar.gz \\\n && wget -q https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ndk.tar.gz \\\n && wget -q http://luajit.org/download/LuaJIT-${LUAJIT_VERSION}.tar.gz -O luajit.tar.gz \\\n && tar -zxvf lua-nginx-module.tar.gz \\\n && tar -zxvf ndk.tar.gz \\\n && tar -zxvf luajit.tar.gz \\\n && tar -zxvf nginx.tar.gz \\\n && cd /tmp/src/LuaJIT-${LUAJIT_VERSION} \\\n && make amalg PREFIX='/usr' \\\n && make install PREFIX='/usr' \\\n && export LUAJIT_LIB=/usr/lib/libluajit-5.1.so \\\n && export LUAJIT_INC=/usr/include/luajit-2.1 \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -fPIC' --with-pcre-jit --with-threads --add-module=/tmp/src/lua-nginx-module-${LUA_NGINX_VERSION} --add-module=/tmp/src/ngx_devel_kit-0.3.0 --with-http_ssl_module --with-http_realip_module --with-http_gzip_static_module --with-http_secure_link_module --without-mail_pop3_module --without-mail_imap_module --without-http_upstream_ip_hash_module --without-http_memcached_module --without-http_auth_basic_module --without-http_userid_module --without-http_fastcgi_module --without-http_uwsgi_module --without-http_scgi_module --prefix=/var/lib/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/dev/stdout --error-log-path=/dev/stderr --lock-path=/tmp/nginx.lock --pid-path=/tmp/nginx.pid --http-client-body-temp-path=/tmp/body --http-proxy-temp-path=/tmp/proxy \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm /usr/bin/luajit-${LUAJIT_VERSION} \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/* \\\n && echo \"unms ALL=(ALL) NOPASSWD: /usr/sbin/nginx -s *\" >> /etc/sudoers \\\n && echo \"unms ALL=(ALL) NOPASSWD:SETENV: /copy-user-certs.sh reload\" >> /etc/sudoers\nADD https://github.com/Ubiquiti-App/UNMS/archive/v0.13.0.tar.gz /tmp/unms.tar.gz\nRUN cd /tmp \\\n && tar -xzf unms.tar.gz \\\n && cd UNMS-*/src/nginx \\\n && cp entrypoint.sh refresh-certificate.sh fill-template.sh openssl.cnf *.conf.template / \\\n && mkdir -p /www/public \\\n && cp -R public /www/ \\\n && chmod +x /entrypoint.sh /fill-template.sh /refresh-certificate.sh\n#   make compatible with debian\nRUN sed -i \"s#/bin/sh#/bin/bash#g\" /entrypoint.sh \\\n && sed -i \"s#adduser -D#adduser --disabled-password --gecos \\\"\\\"#g\" /entrypoint.sh\n#   end ubnt/nginx docker file #\nENV PATH=\"/home/app/unms/node_modules/.bin:$PATH:/usr/lib/postgresql/9.6/bin\" \\\n    PGDATA=\"/config/postgres\" \\\n    POSTGRES_DB=\"unms\" \\\n    QUIET_MODE=\"0\" \\\n    WS_PORT=\"443\" \\\n    PUBLIC_HTTPS_PORT=\"443\" \\\n    PUBLIC_WS_PORT=\"443\" \\\n    UNMS_NETFLOW_PORT=\"2055\" \\\n    SECURE_LINK_SECRET=\"enigma\" \\\n    SSL_CERT=\"\"\nEXPOSE 80/tcp 443/tcp 2055/udp\nVOLUME [\"/config\"]\nCOPY root /\n","originalDockerfileUglifiedHash":"7f5399601347ba9a3ecd8f7157d638ac","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8d87fcaf6b5bb413e684d6c6d355274089a64b9d.dockerfile"}