{"seed":1189695176,"processedDockerfileHash":"4d709a6c6cfcc1e7a4906d7984f07e3b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"FROM python:3.5-alpine\n#   Set environment variables\nENV APP_ROOT=\"/usr/src/app\"\nENV APP_USER_NAME=\"app\"\nENV APP_USER_UID=\"1000\"\nENV IS_ALPINE=\"true\"\nENV NODE_VERSION=\"8.x\"\n#   Install alpine dependencies\n#  # Upgrade apk-tools\nRUN apk add apk-tools=2.10.8-r1 --upgrade --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main\n#  # Install system dependencies\nRUN apk add bash=5.0.17-r0 wget=1.20.3-r1 dpkg-dev=1.20.0-r0 libffi=3.3-r2 nodejs=12.22.12-r0 nodejs-npm git=2.26.3-r1 gcc=9.3.0-r2 musl-dev=1.1.24-r10 gettext=0.20.2-r0 postgresql-dev=12.10-r0 libffi-dev=3.3-r2 py3-setuptools=47.0.0-r0 jpeg-dev=9d-r0 make=4.3-r0 zlib-dev=1.2.12-r3 freetype-dev=2.10.4-r2 lcms2-dev=2.9-r1 openjpeg-dev=2.4.0-r1 libxslt-dev=1.1.35-r0 alpine-sdk=1.0-r0 --update --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  # Install react dependencies\nRUN npm install npm@9.6.4 -g\nRUN npm install yarn@1.22.19 webpack@^1.12.13 bower@1.8.14 less@4.1.3 -g\n#  # Install python dependencies\nRUN pip3 install --no-cache-dir cffi cairocffi psycopg2\nRUN apk add cairo-dev=1.16.0-r5 --update --no-cache \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Create user\nRUN adduser -D -h ${APP_ROOT} -s /bin/bash -u ${APP_USER_UID} ${APP_USER_NAME}\n#   Create folders for deploy\nRUN mkdir -p ${APP_ROOT}\nRUN mkdir -p /var/log/eventol\nRUN chown ${APP_USER_NAME}:root /var/log/eventol\nWORKDIR ${APP_ROOT}\n#   Install python requirements\nCOPY ./requirements.txt ${APP_ROOT}\nCOPY ./requirements-dev.txt ${APP_ROOT}\nRUN pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install --no-cache-dir -r requirements-dev.txt\n#   Install node modules\nCOPY ./eventol/front/package.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/yarn.lock ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && yarn install\nRUN cd ${APP_ROOT}/eventol/front \\\n && npm rebuild node-sass --force\n#   Install bower dependencies\nCOPY ./eventol/front/bower.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/.bowerrc ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && bower install --allow-root\n#   Copy test script file\nCOPY ./test.sh ${APP_ROOT}/test.sh\n#   Copy python code\nCOPY ./eventol ${APP_ROOT}/eventol\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static\nRUN mkdir -p ${APP_ROOT}/eventol/front/eventol/static\n#   Compile scss\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static/manager/css/\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol.css\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol-bootstrap.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol-bootstrap.css\n#   Copy script for docker-compose wait and start-eventol\nCOPY ./deploy/docker/scripts/wait-for-it.sh ${APP_ROOT}/wait-for-it.sh\nCOPY ./deploy/docker/scripts/start_eventol.sh ${APP_ROOT}/start_eventol.sh\n#   Compile reactjs code\nRUN cd ${APP_ROOT}/eventol/front \\\n && webpack --config webpack.prod.config.js\n#   Collect statics\nRUN mkdir -p ${APP_ROOT}/eventol/static\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py collectstatic --noinput\n#   Create media folder\nRUN mkdir -p ${APP_ROOT}/eventol/media\n#   Clean and chown files\nRUN rm -rf ${APP_ROOT}/eventol/front \\\n && mkdir -p ${APP_ROOT}/eventol/front\nRUN chmod 0755 ${APP_ROOT}\nRUN chown --changes --recursive ${APP_USER_NAME}:${APP_USER_NAME} ${APP_ROOT}/\n#   Drop privs\nUSER ${APP_USER_NAME}\n#   Create log file\nRUN touch /var/log/eventol/eventol.log\n#   Compile .po files\nRUN sed -i 's@#~ @@g' ${APP_ROOT}/eventol/conf/locale/*/LC_MESSAGES/djangojs.po\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py compilemessages\nEXPOSE 8000/tcp\nVOLUME ${APP_ROOT}/eventol/media\nVOLUME ${APP_ROOT}/eventol/static\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:3.5-alpine\n#  Set environment variables\nENV APP_ROOT=\"/usr/src/app\"\nENV APP_USER_NAME=\"app\"\nENV APP_USER_UID=\"1000\"\nENV IS_ALPINE=\"true\"\nENV NODE_VERSION=\"8.x\"\n#  Install alpine dependencies\n# # Upgrade apk-tools\nRUN apk add --upgrade --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main apk-tools\n# # Install system dependencies\nRUN apk --update add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main bash wget dpkg-dev libffi nodejs nodejs-npm git gcc musl-dev gettext postgresql-dev libffi-dev py3-setuptools jpeg-dev make zlib-dev freetype-dev lcms2-dev openjpeg-dev libxslt-dev alpine-sdk \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# # Install react dependencies\nRUN npm install npm -g\nRUN npm install yarn webpack@^1.12.13 bower less -g\n# # Install python dependencies\nRUN pip3 install --no-cache-dir cffi cairocffi psycopg2\nRUN apk --update add --no-cache cairo-dev \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Create user\nRUN adduser -D -h ${APP_ROOT} -s /bin/bash -u ${APP_USER_UID} ${APP_USER_NAME}\n#  Create folders for deploy\nRUN mkdir -p ${APP_ROOT}\nRUN mkdir -p /var/log/eventol\nRUN chown ${APP_USER_NAME}:root /var/log/eventol\nWORKDIR ${APP_ROOT}\n#  Install python requirements\nCOPY ./requirements.txt ${APP_ROOT}\nCOPY ./requirements-dev.txt ${APP_ROOT}\nRUN pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install --no-cache-dir -r requirements-dev.txt\n#  Install node modules\nCOPY ./eventol/front/package.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/yarn.lock ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && yarn install\nRUN cd ${APP_ROOT}/eventol/front \\\n && npm rebuild node-sass --force\n#  Install bower dependencies\nCOPY ./eventol/front/bower.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/.bowerrc ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && bower install --allow-root\n#  Copy test script file\nCOPY ./test.sh ${APP_ROOT}/test.sh\n#  Copy python code\nCOPY ./eventol ${APP_ROOT}/eventol\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static\nRUN mkdir -p ${APP_ROOT}/eventol/front/eventol/static\n#  Compile scss\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static/manager/css/\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol.css\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol-bootstrap.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol-bootstrap.css\n#  Copy script for docker-compose wait and start-eventol\nCOPY ./deploy/docker/scripts/wait-for-it.sh ${APP_ROOT}/wait-for-it.sh\nCOPY ./deploy/docker/scripts/start_eventol.sh ${APP_ROOT}/start_eventol.sh\n#  Compile reactjs code\nRUN cd ${APP_ROOT}/eventol/front \\\n && webpack --config webpack.prod.config.js\n#  Collect statics\nRUN mkdir -p ${APP_ROOT}/eventol/static\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py collectstatic --noinput\n#  Create media folder\nRUN mkdir -p ${APP_ROOT}/eventol/media\n#  Clean and chown files\nRUN rm -rf ${APP_ROOT}/eventol/front \\\n && mkdir -p ${APP_ROOT}/eventol/front\nRUN chmod 0755 ${APP_ROOT}\nRUN chown --changes --recursive ${APP_USER_NAME}:${APP_USER_NAME} ${APP_ROOT}/\n#  Drop privs\nUSER ${APP_USER_NAME}\n#  Create log file\nRUN touch /var/log/eventol/eventol.log\n#  Compile .po files\nRUN sed -i 's@#~ @@g' ${APP_ROOT}/eventol/conf/locale/*/LC_MESSAGES/djangojs.po\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py compilemessages\nEXPOSE 8000/tcp\nVOLUME ${APP_ROOT}/eventol/media\nVOLUME ${APP_ROOT}/eventol/static\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n","injectedSmells":[],"originalDockerfileHash":"d42fdaaa6314153f8bd076d646e94ec8","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:3.5-alpine\n#   Set environment variables\nENV APP_ROOT=\"/usr/src/app\"\nENV APP_USER_NAME=\"app\"\nENV APP_USER_UID=\"1000\"\nENV IS_ALPINE=\"true\"\nENV NODE_VERSION=\"8.x\"\n#   Install alpine dependencies\n#  # Upgrade apk-tools\nRUN apk add --upgrade --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main apk-tools\n#  # Install system dependencies\nRUN apk --update add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/main bash wget dpkg-dev libffi nodejs nodejs-npm git gcc musl-dev gettext postgresql-dev libffi-dev py3-setuptools jpeg-dev make zlib-dev freetype-dev lcms2-dev openjpeg-dev libxslt-dev alpine-sdk \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  # Install react dependencies\nRUN npm install npm -g\nRUN npm install yarn webpack@^1.12.13 bower less -g\n#  # Install python dependencies\nRUN pip3 install --no-cache-dir cffi cairocffi psycopg2\nRUN apk --update add --no-cache cairo-dev \\\n && rm -rf /var/cache/apk/* /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Create user\nRUN adduser -D -h ${APP_ROOT} -s /bin/bash -u ${APP_USER_UID} ${APP_USER_NAME}\n#   Create folders for deploy\nRUN mkdir -p ${APP_ROOT}\nRUN mkdir -p /var/log/eventol\nRUN chown ${APP_USER_NAME}:root /var/log/eventol\nWORKDIR ${APP_ROOT}\n#   Install python requirements\nCOPY ./requirements.txt ${APP_ROOT}\nCOPY ./requirements-dev.txt ${APP_ROOT}\nRUN pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install --no-cache-dir -r requirements-dev.txt\n#   Install node modules\nCOPY ./eventol/front/package.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/yarn.lock ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && yarn install\nRUN cd ${APP_ROOT}/eventol/front \\\n && npm rebuild node-sass --force\n#   Install bower dependencies\nCOPY ./eventol/front/bower.json ${APP_ROOT}/eventol/front/\nCOPY ./eventol/front/.bowerrc ${APP_ROOT}/eventol/front/\nRUN cd ${APP_ROOT}/eventol/front \\\n && bower install --allow-root\n#   Copy test script file\nCOPY ./test.sh ${APP_ROOT}/test.sh\n#   Copy python code\nCOPY ./eventol ${APP_ROOT}/eventol\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static\nRUN mkdir -p ${APP_ROOT}/eventol/front/eventol/static\n#   Compile scss\nRUN mkdir -p ${APP_ROOT}/eventol/manager/static/manager/css/\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol.css\nRUN lessc ${APP_ROOT}/eventol/front/eventol/static/manager/less/eventol-bootstrap.less > ${APP_ROOT}/eventol/manager/static/manager/css/eventol-bootstrap.css\n#   Copy script for docker-compose wait and start-eventol\nCOPY ./deploy/docker/scripts/wait-for-it.sh ${APP_ROOT}/wait-for-it.sh\nCOPY ./deploy/docker/scripts/start_eventol.sh ${APP_ROOT}/start_eventol.sh\n#   Compile reactjs code\nRUN cd ${APP_ROOT}/eventol/front \\\n && webpack --config webpack.prod.config.js\n#   Collect statics\nRUN mkdir -p ${APP_ROOT}/eventol/static\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py collectstatic --noinput\n#   Create media folder\nRUN mkdir -p ${APP_ROOT}/eventol/media\n#   Clean and chown files\nRUN rm -rf ${APP_ROOT}/eventol/front \\\n && mkdir -p ${APP_ROOT}/eventol/front\nRUN chmod 0755 ${APP_ROOT}\nRUN chown --changes --recursive ${APP_USER_NAME}:${APP_USER_NAME} ${APP_ROOT}/\n#   Drop privs\nUSER ${APP_USER_NAME}\n#   Create log file\nRUN touch /var/log/eventol/eventol.log\n#   Compile .po files\nRUN sed -i 's@#~ @@g' ${APP_ROOT}/eventol/conf/locale/*/LC_MESSAGES/djangojs.po\nRUN cd ${APP_ROOT}/eventol \\\n && python manage.py compilemessages\nEXPOSE 8000/tcp\nVOLUME ${APP_ROOT}/eventol/media\nVOLUME ${APP_ROOT}/eventol/static\nCMD [\"tail\", \"-f\", \"/dev/null\"]\n","originalDockerfileUglifiedHash":"8e56e766a1e07dbf887d3cebfe7b5999","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f981adf68966922c99a15edb26ad03b24e941137.dockerfile"}