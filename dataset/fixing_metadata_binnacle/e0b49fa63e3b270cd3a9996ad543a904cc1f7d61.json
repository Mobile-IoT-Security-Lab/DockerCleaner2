{"seed":4085416517,"processedDockerfileHash":"bef1213353358abe4b82d24bb27e4582","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ###########################################\n#   This Dockerfile builds a docker image\n#   suitable to boot a CBRAIN BrainPortal\n#   where tests can be run. It is meant\n#   to be run within a Travis Continuous\n#   Integration virtual machine,\n#   although invoking its entry point manually\n#   from docker is also a possibility.\n#  ###########################################\nFROM centos:latest\n#  ####################################\n#   Package updates and installations #\n#  ####################################\n#   Note: keep the package list alphabetically\n#         ordered to facilitate parsing\nRUN yum update -y\nRUN yum install -y autoconf automake make bzip2 bison gcc-c++ git glibc-devel glibc-headers gpg libffi-devel libmysqlclient-dev libtool libxml2 libxml2-devel libyaml-devel mariadb-devel mariadb-server openssl-devel patch readline-devel sqlite-devel zlib-devel which wget\n#   The following UID and GID are chosen\n#   to match what is usually the unprivileged user\n#   that runs inside the Travis CI virtual machines,\n#   but that should not make much difference.\nRUN groupadd -g 500 cbrain\nRUN useradd -u 500 -g 500 cbrain\n#   Environment variables for the MYSQL DB\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV MYSQL_USER=\"cb_user\" \\\n    MYSQL_DATABASE=\"cb_db_test\"\n#  ############################################\n#   MySQL server installation and configuration\n#  ############################################\nRUN mysql_install_db\nRUN mkdir -p /var/lib/mysql /var/run/mysqld\nRUN chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n && chmod 777 /var/run/mysqld\nRUN rm -f /var/lib/mysql/aria_log_control\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysqladmin -u root password \"$MYSQL_ROOT_PASSWORD\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"create database $MYSQL_DATABASE;\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"grant all on $MYSQL_DATABASE.* to '$MYSQL_USER'@'localhost' identified by '$MYSQL_PASSWORD';\"\n#  ############################\n#   Ruby and rvm installation #\n#  ############################\nUSER cbrain\nENV RUBY_VERSION=\"2.6.3\"\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://get.rvm.io | bash -s stable\nRUN cd $HOME \\\n && echo \"source $HOME/.rvm/scripts/rvm\" >> $HOME/.bashrc\nRUN bash --login -c 'rvm install $RUBY_VERSION --autolibs=read'\nRUN bash --login -c 'rvm --default $RUBY_VERSION'\n#  ###############################\n#   Rails application bundling   #\n#  ###############################\n#   These four statements is a way for the\n#   people building the container to specify\n#   variations on what base CBRAIN installation\n#   to use.\nARG CBRAIN_REPO=https://github.com/aces/cbrain.git\nARG CBRAIN_BRANCH=dev\nENV CBRAIN_REPO=\"$CBRAIN_REPO\"\nENV CBRAIN_BRANCH=\"$CBRAIN_BRANCH\"\n#   Edit manually the following line to have your docker installation\n#   skip its cache of the previous container build, if necessary.\n#   Just having a different commit number in the echo statement will do.\n#   This can be necessary if you know that the code on the GitHub\n#   repo has changed since that last build.\nRUN echo Force install using CBRAIN at commit d4eca710772\n#   Extract initial CBRAIN source (will be replaced at test time)\n#   but having an initial installation speeds up bundling,\n#   migrations, etc.\n#   I would use --single-branch in the git clone command below, but\n#   it seems not all git packages support it.\nRUN cd $HOME \\\n && git clone --branch \"$CBRAIN_BRANCH\" --depth 2 \"$CBRAIN_REPO\" cbrain_base\n#   Install and configure the portal\nENV RAILS_ENV=\"test\"\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && gem install bundler'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/Bourreau \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && cd $(bundle show sys-proctable) \\\n && rake install'\nCOPY ./templates/database.yml.TEST /home/cbrain/cbrain_base/BrainPortal/config/database.yml\nCOPY ./templates/config_portal.rb.TEST /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\n#   Seed the DB\nUSER root\nRUN chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/database.yml \\\n && chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\nRUN su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake cbrain:plugins:install:plugins'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:schema:load'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed:test:bourreau'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:sanity:check'\" cbrain\n#  #######################################################\n#   Cleanup files to make the image as small as possible #\n#  #######################################################\nUSER cbrain\nRUN bash --login -c 'rvm cleanup all'\nUSER root\nRUN yum clean all\n#   Not sure if next line won't interfere with future bundle updates...\n#   but then it saves just a few dozen megabytes.\nRUN rm -rf /home/cbrain/.rvm/gems/ruby*/bundler/gems/*/.git\n#  ########################\n#   Ports and entry point #\n#  ########################\n#   This command will copy the code freshly extracted by travis\n#   and perform the rest of the setup needed to run the tests\n#   (migrate the DB, run rake tasks, run rspec); the path\n#   /home/cbrain/cbrain_travis is a mounted volume from the\n#   VM side.\nCMD [\"/home/cbrain/cbrain_travis/Travis/bootstrap.sh\"]\n#  ##########\n#   Volumes #\n#  ##########\n#\n#   Only one volume is needed, it is Travis CI's own\n#   copy of the cbrain project to be tested.\n#\n#   Note that this is distinct from\n#\n#     /home/cbrain/cbrain_base\n#\n#   which is where we did the initial installation here\n#   in this image, as a way to speed up the tests.\nVOLUME /home/cbrain/cbrain_travis\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ###########################################\n#  This Dockerfile builds a docker image\n#  suitable to boot a CBRAIN BrainPortal\n#  where tests can be run. It is meant\n#  to be run within a Travis Continuous\n#  Integration virtual machine,\n#  although invoking its entry point manually\n#  from docker is also a possibility.\n# ###########################################\nFROM centos:latest\n# ####################################\n#  Package updates and installations #\n# ####################################\n#  Note: keep the package list alphabetically\n#        ordered to facilitate parsing\nRUN yum update -y\nRUN yum install -y autoconf automake make bzip2 bison gcc-c++ git glibc-devel glibc-headers gpg libffi-devel libmysqlclient-dev libtool libxml2 libxml2-devel libyaml-devel mariadb-devel mariadb-server openssl-devel patch readline-devel sqlite-devel zlib-devel which wget\n#  The following UID and GID are chosen\n#  to match what is usually the unprivileged user\n#  that runs inside the Travis CI virtual machines,\n#  but that should not make much difference.\nRUN groupadd -g 500 cbrain\nRUN useradd -u 500 -g 500 cbrain\n#  Environment variables for the MYSQL DB\nENV MYSQL_ROOT_PASSWORD=\"my-secret-pw\" \\\n    MYSQL_USER=\"cb_user\" \\\n    MYSQL_DATABASE=\"cb_db_test\" \\\n    MYSQL_PASSWORD=\"cbpw12345\"\n# ############################################\n#  MySQL server installation and configuration\n# ############################################\nRUN mysql_install_db\nRUN mkdir -p /var/lib/mysql /var/run/mysqld\nRUN chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n && chmod 777 /var/run/mysqld\nRUN rm -f /var/lib/mysql/aria_log_control\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysqladmin -u root password \"$MYSQL_ROOT_PASSWORD\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"create database $MYSQL_DATABASE;\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"grant all on $MYSQL_DATABASE.* to '$MYSQL_USER'@'localhost' identified by '$MYSQL_PASSWORD';\"\n# ############################\n#  Ruby and rvm installation #\n# ############################\nUSER cbrain\nENV RUBY_VERSION=\"2.6.3\"\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://get.rvm.io | bash -s stable\nRUN cd $HOME \\\n && echo \"source $HOME/.rvm/scripts/rvm\" >> $HOME/.bashrc\nRUN bash --login -c 'rvm install $RUBY_VERSION --autolibs=read'\nRUN bash --login -c 'rvm --default $RUBY_VERSION'\n# ###############################\n#  Rails application bundling   #\n# ###############################\n#  These four statements is a way for the\n#  people building the container to specify\n#  variations on what base CBRAIN installation\n#  to use.\nARG CBRAIN_REPO=https://github.com/aces/cbrain.git\nARG CBRAIN_BRANCH=dev\nENV CBRAIN_REPO=\"$CBRAIN_REPO\"\nENV CBRAIN_BRANCH=\"$CBRAIN_BRANCH\"\n#  Edit manually the following line to have your docker installation\n#  skip its cache of the previous container build, if necessary.\n#  Just having a different commit number in the echo statement will do.\n#  This can be necessary if you know that the code on the GitHub\n#  repo has changed since that last build.\nRUN echo Force install using CBRAIN at commit d4eca710772\n#  Extract initial CBRAIN source (will be replaced at test time)\n#  but having an initial installation speeds up bundling,\n#  migrations, etc.\n#  I would use --single-branch in the git clone command below, but\n#  it seems not all git packages support it.\nRUN cd $HOME \\\n && git clone --branch \"$CBRAIN_BRANCH\" --depth 2 \"$CBRAIN_REPO\" cbrain_base\n#  Install and configure the portal\nENV RAILS_ENV=\"test\"\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && gem install bundler'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/Bourreau \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && cd $(bundle show sys-proctable) \\\n && rake install'\nCOPY ./templates/database.yml.TEST /home/cbrain/cbrain_base/BrainPortal/config/database.yml\nCOPY ./templates/config_portal.rb.TEST /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\n#  Seed the DB\nUSER root\nRUN chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/database.yml \\\n && chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\nRUN su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake cbrain:plugins:install:plugins'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:schema:load'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed:test:bourreau'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:sanity:check'\" cbrain\n# #######################################################\n#  Cleanup files to make the image as small as possible #\n# #######################################################\nUSER cbrain\nRUN bash --login -c 'rvm cleanup all'\nUSER root\nRUN yum clean all\n#  Not sure if next line won't interfere with future bundle updates...\n#  but then it saves just a few dozen megabytes.\nRUN rm -rf /home/cbrain/.rvm/gems/ruby*/bundler/gems/*/.git\n# ########################\n#  Ports and entry point #\n# ########################\n#  This command will copy the code freshly extracted by travis\n#  and perform the rest of the setup needed to run the tests\n#  (migrate the DB, run rake tasks, run rspec); the path\n#  /home/cbrain/cbrain_travis is a mounted volume from the\n#  VM side.\nCMD [\"/home/cbrain/cbrain_travis/Travis/bootstrap.sh\"]\n# ##########\n#  Volumes #\n# ##########\n#\n#  Only one volume is needed, it is Travis CI's own\n#  copy of the cbrain project to be tested.\n#\n#  Note that this is distinct from\n#\n#    /home/cbrain/cbrain_base\n#\n#  which is where we did the initial installation here\n#  in this image, as a way to speed up the tests.\nVOLUME /home/cbrain/cbrain_travis\n","injectedSmells":[],"originalDockerfileHash":"860bedb597f54a28d21538b6f3828245","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ###########################################\n#   This Dockerfile builds a docker image\n#   suitable to boot a CBRAIN BrainPortal\n#   where tests can be run. It is meant\n#   to be run within a Travis Continuous\n#   Integration virtual machine,\n#   although invoking its entry point manually\n#   from docker is also a possibility.\n#  ###########################################\nFROM centos:latest\n#  ####################################\n#   Package updates and installations #\n#  ####################################\n#   Note: keep the package list alphabetically\n#         ordered to facilitate parsing\nRUN yum update -y\nRUN yum install -y autoconf automake make bzip2 bison gcc-c++ git glibc-devel glibc-headers gpg libffi-devel libmysqlclient-dev libtool libxml2 libxml2-devel libyaml-devel mariadb-devel mariadb-server openssl-devel patch readline-devel sqlite-devel zlib-devel which wget\n#   The following UID and GID are chosen\n#   to match what is usually the unprivileged user\n#   that runs inside the Travis CI virtual machines,\n#   but that should not make much difference.\nRUN groupadd -g 500 cbrain\nRUN useradd -u 500 -g 500 cbrain\n#   Environment variables for the MYSQL DB\nENV MYSQL_ROOT_PASSWORD=\"my-secret-pw\" \\\n    MYSQL_USER=\"cb_user\" \\\n    MYSQL_DATABASE=\"cb_db_test\" \\\n    MYSQL_PASSWORD=\"cbpw12345\"\n#  ############################################\n#   MySQL server installation and configuration\n#  ############################################\nRUN mysql_install_db\nRUN mkdir -p /var/lib/mysql /var/run/mysqld\nRUN chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n && chmod 777 /var/run/mysqld\nRUN rm -f /var/lib/mysql/aria_log_control\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysqladmin -u root password \"$MYSQL_ROOT_PASSWORD\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"create database $MYSQL_DATABASE;\"\nRUN mysqld_safe &; sleep 3 \\\n && /usr/bin/mysql -u root --password=\"$MYSQL_ROOT_PASSWORD\" -e \"grant all on $MYSQL_DATABASE.* to '$MYSQL_USER'@'localhost' identified by '$MYSQL_PASSWORD';\"\n#  ############################\n#   Ruby and rvm installation #\n#  ############################\nUSER cbrain\nENV RUBY_VERSION=\"2.6.3\"\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -\nRUN cd $HOME \\\n && curl -sSL https://get.rvm.io | bash -s stable\nRUN cd $HOME \\\n && echo \"source $HOME/.rvm/scripts/rvm\" >> $HOME/.bashrc\nRUN bash --login -c 'rvm install $RUBY_VERSION --autolibs=read'\nRUN bash --login -c 'rvm --default $RUBY_VERSION'\n#  ###############################\n#   Rails application bundling   #\n#  ###############################\n#   These four statements is a way for the\n#   people building the container to specify\n#   variations on what base CBRAIN installation\n#   to use.\nARG CBRAIN_REPO=https://github.com/aces/cbrain.git\nARG CBRAIN_BRANCH=dev\nENV CBRAIN_REPO=\"$CBRAIN_REPO\"\nENV CBRAIN_BRANCH=\"$CBRAIN_BRANCH\"\n#   Edit manually the following line to have your docker installation\n#   skip its cache of the previous container build, if necessary.\n#   Just having a different commit number in the echo statement will do.\n#   This can be necessary if you know that the code on the GitHub\n#   repo has changed since that last build.\nRUN echo Force install using CBRAIN at commit d4eca710772\n#   Extract initial CBRAIN source (will be replaced at test time)\n#   but having an initial installation speeds up bundling,\n#   migrations, etc.\n#   I would use --single-branch in the git clone command below, but\n#   it seems not all git packages support it.\nRUN cd $HOME \\\n && git clone --branch \"$CBRAIN_BRANCH\" --depth 2 \"$CBRAIN_REPO\" cbrain_base\n#   Install and configure the portal\nENV RAILS_ENV=\"test\"\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && gem install bundler'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/Bourreau \\\n && bundle install'\nRUN bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && cd $(bundle show sys-proctable) \\\n && rake install'\nCOPY ./templates/database.yml.TEST /home/cbrain/cbrain_base/BrainPortal/config/database.yml\nCOPY ./templates/config_portal.rb.TEST /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\n#   Seed the DB\nUSER root\nRUN chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/database.yml \\\n && chown cbrain /home/cbrain/cbrain_base/BrainPortal/config/initializers/config_portal.rb\nRUN su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake cbrain:plugins:install:plugins'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:schema:load'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:seed:test:bourreau'\" cbrain\nRUN mysqld_safe &; sleep 2 \\\n && su -c \"bash --login -c 'cd $HOME/cbrain_base/BrainPortal \\\n && rake db:sanity:check'\" cbrain\n#  #######################################################\n#   Cleanup files to make the image as small as possible #\n#  #######################################################\nUSER cbrain\nRUN bash --login -c 'rvm cleanup all'\nUSER root\nRUN yum clean all\n#   Not sure if next line won't interfere with future bundle updates...\n#   but then it saves just a few dozen megabytes.\nRUN rm -rf /home/cbrain/.rvm/gems/ruby*/bundler/gems/*/.git\n#  ########################\n#   Ports and entry point #\n#  ########################\n#   This command will copy the code freshly extracted by travis\n#   and perform the rest of the setup needed to run the tests\n#   (migrate the DB, run rake tasks, run rspec); the path\n#   /home/cbrain/cbrain_travis is a mounted volume from the\n#   VM side.\nCMD [\"/home/cbrain/cbrain_travis/Travis/bootstrap.sh\"]\n#  ##########\n#   Volumes #\n#  ##########\n#\n#   Only one volume is needed, it is Travis CI's own\n#   copy of the cbrain project to be tested.\n#\n#   Note that this is distinct from\n#\n#     /home/cbrain/cbrain_base\n#\n#   which is where we did the initial installation here\n#   in this image, as a way to speed up the tests.\nVOLUME /home/cbrain/cbrain_travis\n","originalDockerfileUglifiedHash":"37189f7ebd57f241ace72264baf8380e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e0b49fa63e3b270cd3a9996ad543a904cc1f7d61.dockerfile"}