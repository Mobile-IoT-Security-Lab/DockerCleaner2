{"seed":2812751297,"processedDockerfileHash":"dd44ebdfb299f2af3617d4f92f9f43ac","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION} AS devtools\n#   Please keep the formatting below, it is used by `extract-readme.sh` and\n#   `extract-install.md` to generate the contents of the top-level README.md and\n#   INSTALL.md files.\n#  # [START INSTALL.md]\n#   Install the minimal development tools:\n#  # [START README.md]\n#   ```bash\nRUN dnf makecache \\\n && dnf install -y cmake gcc-c++ git make openssl-devel pkgconfig zlib-devel\n#   ```\n#  # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n#  # [START IGNORED]\n#   Verify that the tools above are enough to compile google-cloud-cpp when using\n#   external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n#  # [END IGNORED]\n#   Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n#   for `google-cloud-cpp`. Install these packages and additional development\n#   tools to compile the dependencies:\n#   ```bash\nRUN /retry3 dnf makecache \\\n && /retry3 dnf install -y grpc-devel grpc-plugins libcurl-devel protobuf-compiler tar wget zlib-devel\n#   ```\n#   #### crc32c\n#   There is no Fedora package for this library. To install it, use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### google-cloud-cpp\n#   We can now compile and install `google-cloud-cpp`.\n#   ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#   ```\n#  # [END INSTALL.md]\n#   Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 Google LLC\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION} AS devtools\n#  Please keep the formatting below, it is used by `extract-readme.sh` and\n#  `extract-install.md` to generate the contents of the top-level README.md and\n#  INSTALL.md files.\n# # [START INSTALL.md]\n#  Install the minimal development tools:\n# # [START README.md]\n#  ```bash\nRUN dnf makecache \\\n && dnf install -y cmake gcc-c++ git make openssl-devel pkgconfig zlib-devel\n#  ```\n# # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n# # [START IGNORED]\n#  Verify that the tools above are enough to compile google-cloud-cpp when using\n#  external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n# # [END IGNORED]\n#  Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n#  for `google-cloud-cpp`. Install these packages and additional development\n#  tools to compile the dependencies:\n#  ```bash\nRUN /retry3 dnf makecache \\\n && /retry3 dnf install -y grpc-devel grpc-plugins libcurl-devel protobuf-compiler tar wget zlib-devel\n#  ```\n#  #### crc32c\n#  There is no Fedora package for this library. To install it, use:\n#  ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#  ```\n#  #### google-cloud-cpp\n#  We can now compile and install `google-cloud-cpp`.\n#  ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#  ```\n# # [END INSTALL.md]\n#  Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\n","injectedSmells":[],"originalDockerfileHash":"9da84aea16d1513c0f434f64a7a72dc1","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=30\nFROM fedora:${DISTRO_VERSION} AS devtools\n#   Please keep the formatting below, it is used by `extract-readme.sh` and\n#   `extract-install.md` to generate the contents of the top-level README.md and\n#   INSTALL.md files.\n#  # [START INSTALL.md]\n#   Install the minimal development tools:\n#  # [START README.md]\n#   ```bash\nRUN dnf makecache \\\n && dnf install -y cmake gcc-c++ git make openssl-devel pkgconfig zlib-devel\n#   ```\n#  # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n#  # [START IGNORED]\n#   Verify that the tools above are enough to compile google-cloud-cpp when using\n#   external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n#  # [END IGNORED]\n#   Fedora includes packages for gRPC, libcurl, and OpenSSL that are recent enough\n#   for `google-cloud-cpp`. Install these packages and additional development\n#   tools to compile the dependencies:\n#   ```bash\nRUN /retry3 dnf makecache \\\n && /retry3 dnf install -y grpc-devel grpc-plugins libcurl-devel protobuf-compiler tar wget zlib-devel\n#   ```\n#   #### crc32c\n#   There is no Fedora package for this library. To install it, use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### google-cloud-cpp\n#   We can now compile and install `google-cloud-cpp`.\n#   ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#   ```\n#  # [END INSTALL.md]\n#   Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\n","originalDockerfileUglifiedHash":"a8d896afe64bee3a48759983f116b4dd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2bd3aa8f0096bd321569fa530df442a7e54c3d13.dockerfile"}