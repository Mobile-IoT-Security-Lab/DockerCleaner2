{"seed":554559809,"processedDockerfileHash":"e9e2f2cb7bf99befe7250326bee5bffd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04 AS base\nUSER root\n#  # Setting default environment variables\nENV WEB_ROOT=\"/web_root\"\n#   Root project folder\nENV ARCHES_ROOT=\"${WEB_ROOT}/arches\"\nENV WHEELS=\"/wheels\"\nENV PYTHONUNBUFFERED=\"1\"\nFROM base AS wheelbuilder\nWORKDIR ${WHEELS}\n#   Install pip requirements files\nCOPY ./arches/install/requirements.txt ${WHEELS}/requirements.txt\nCOPY ./arches/install/requirements_dev.txt ${WHEELS}/requirements_dev.txt\n#   Install packages required to build the python libs, then remove them\nRUN set -ex \\\n && BUILD_DEPS=\" build-essential libpcre3-dev libxml2-dev libjson0-dev libproj-dev libgdal1-dev python-dev python-software-properties libpq-dev zlib1g-dev clang make pkg-config xsltproc docbook-xsl mime-support docbook-mathml curl python-setuptools dos2unix libgeos-3.5.0 nodejs nodejs-legacy npm libldap2-dev libsasl2-dev \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $BUILD_DEPS -y \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py \\\n && pip install pip==23.1 setuptools==67.6.1 --no-cache-dir -U \\\n && pip wheel --no-cache-dir -b /tmp requests \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements.txt \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements_dev.txt \\\n && pip wheel --no-cache-dir -b /tmp 'gunicorn==19.7.1' \\\n && pip wheel --no-cache-dir -b /tmp django-auth-ldap\n#   Add Docker-related files\nCOPY docker/entrypoint.sh ${WHEELS}/entrypoint.sh\nRUN chmod -R 700 ${WHEELS} \\\n && dos2unix ${WHEELS}/*.sh\nFROM base\n#   Get the pre-built python wheels from the build environment\nRUN mkdir ${WEB_ROOT}\nCOPY --from=wheelbuilder ${WHEELS} /wheels\n#   Install packages required to run Arches\n#   Note that the ubuntu/debian package for libgdal1-dev pulls in libgdal1i, which is built\n#   with everything enabled, and so, it has a huge amount of dependancies (everything that GDAL\n#   support, directly and indirectly pulling in mysql-common, odbc, jp2, perl! ... )\n#   a minimised build of GDAL could remove several hundred MB from the container layer.\nRUN set -ex \\\n && RUN_DEPS=\" mime-support curl python-setuptools libgdal1-dev libgeos-3.5.0 nodejs nodejs-legacy npm \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $RUN_DEPS -y \\\n && curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y \\\n && curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py\n#  # Install Postgresql client\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends postgresql-client-9.6 -y\n#  # Install virtualenv\nWORKDIR ${WEB_ROOT}\n#   Install the Arches application\n#   FIXME: ADD from github repository instead?\nCOPY . ${ARCHES_ROOT}\nRUN mv ${WHEELS}/entrypoint.sh entrypoint.sh\nRUN pip install virtualenv==15.1.0 \\\n && virtualenv ENV \\\n && . ENV/bin/activate \\\n && pip install pip==23.1 setuptools==67.6.1 -U \\\n && pip install requests==2.28.2 \\\n && pip install -r ${WHEELS}/requirements.txt -f ${WHEELS} \\\n && pip install -r ${WHEELS}/requirements_dev.txt -f ${WHEELS} \\\n && rm -rf ${WHEELS} \\\n && rm -rf /root/.cache/pip/*\n#   From here, run commands from ARCHES_ROOT\nWORKDIR ${ARCHES_ROOT}\nRUN . ../ENV/bin/activate \\\n && pip install :all:==null -e . --no-binary\n#   Install Yarn components\nCOPY ./package.json ${ARCHES_ROOT}/package.json\nRUN yarn install\nCOPY docker/gunicorn_config.py ${ARCHES_ROOT}/gunicorn_config.py\nCOPY docker/settings_local.py ${ARCHES_ROOT}/arches/settings_local.py\n#   Set entrypoint\nENTRYPOINT [\"../entrypoint.sh\"]\nCMD [\"run_arches\"]\n#   Expose port 8000\nEXPOSE 8000/tcp\n#   Set default workdir\nWORKDIR ${ARCHES_ROOT}\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04 AS base\nUSER root\n# # Setting default environment variables\nENV WEB_ROOT=\"/web_root\"\n#  Root project folder\nENV ARCHES_ROOT=\"${WEB_ROOT}/arches\"\nENV WHEELS=\"/wheels\"\nENV PYTHONUNBUFFERED=\"1\"\nFROM base AS wheelbuilder\nWORKDIR ${WHEELS}\n#  Install pip requirements files\nCOPY ./arches/install/requirements.txt ${WHEELS}/requirements.txt\nCOPY ./arches/install/requirements_dev.txt ${WHEELS}/requirements_dev.txt\n#  Install packages required to build the python libs, then remove them\nRUN set -ex \\\n && BUILD_DEPS=\" build-essential libpcre3-dev libxml2-dev libjson0-dev libproj-dev libgdal1-dev python-dev python-software-properties libpq-dev zlib1g-dev clang make pkg-config xsltproc docbook-xsl mime-support docbook-mathml curl python-setuptools dos2unix libgeos-3.5.0 nodejs nodejs-legacy npm libldap2-dev libsasl2-dev \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $BUILD_DEPS -y \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py \\\n && pip install pip setuptools --no-cache-dir -U \\\n && pip wheel --no-cache-dir -b /tmp requests \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements.txt \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements_dev.txt \\\n && pip wheel --no-cache-dir -b /tmp 'gunicorn==19.7.1' \\\n && pip wheel --no-cache-dir -b /tmp django-auth-ldap\n#  Add Docker-related files\nCOPY docker/entrypoint.sh ${WHEELS}/entrypoint.sh\nRUN chmod -R 700 ${WHEELS} \\\n && dos2unix ${WHEELS}/*.sh\nFROM base\n#  Get the pre-built python wheels from the build environment\nRUN mkdir ${WEB_ROOT}\nCOPY --from=wheelbuilder ${WHEELS} /wheels\n#  Install packages required to run Arches\n#  Note that the ubuntu/debian package for libgdal1-dev pulls in libgdal1i, which is built\n#  with everything enabled, and so, it has a huge amount of dependancies (everything that GDAL\n#  support, directly and indirectly pulling in mysql-common, odbc, jp2, perl! ... )\n#  a minimised build of GDAL could remove several hundred MB from the container layer.\nRUN set -ex \\\n && RUN_DEPS=\" mime-support curl python-setuptools libgdal1-dev libgeos-3.5.0 nodejs nodejs-legacy npm \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $RUN_DEPS -y \\\n && curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install nodejs -y \\\n && curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install yarn \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py\n# # Install Postgresql client\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update -y \\\n && apt-get install postgresql-client-9.6 -y\n# # Install virtualenv\nWORKDIR ${WEB_ROOT}\n#  Install the Arches application\n#  FIXME: ADD from github repository instead?\nCOPY . ${ARCHES_ROOT}\nRUN mv ${WHEELS}/entrypoint.sh entrypoint.sh\nRUN pip install virtualenv==15.1.0 \\\n && virtualenv ENV \\\n && . ENV/bin/activate \\\n && pip install pip setuptools -U \\\n && pip install requests \\\n && pip install -r ${WHEELS}/requirements.txt -f ${WHEELS} \\\n && pip install -r ${WHEELS}/requirements_dev.txt -f ${WHEELS} \\\n && rm -rf ${WHEELS} \\\n && rm -rf /root/.cache/pip/*\n#  From here, run commands from ARCHES_ROOT\nWORKDIR ${ARCHES_ROOT}\nRUN . ../ENV/bin/activate \\\n && pip install :all: -e . --no-binary\n#  Install Yarn components\nCOPY ./package.json ${ARCHES_ROOT}/package.json\nRUN yarn install\nCOPY docker/gunicorn_config.py ${ARCHES_ROOT}/gunicorn_config.py\nCOPY docker/settings_local.py ${ARCHES_ROOT}/arches/settings_local.py\n#  Set entrypoint\nENTRYPOINT [\"../entrypoint.sh\"]\nCMD [\"run_arches\"]\n#  Expose port 8000\nEXPOSE 8000/tcp\n#  Set default workdir\nWORKDIR ${ARCHES_ROOT}\n","injectedSmells":[],"originalDockerfileHash":"c2b617d17927fd4bfcb22203210de941","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04 AS base\nUSER root\n#  # Setting default environment variables\nENV WEB_ROOT=\"/web_root\"\n#   Root project folder\nENV ARCHES_ROOT=\"${WEB_ROOT}/arches\"\nENV WHEELS=\"/wheels\"\nENV PYTHONUNBUFFERED=\"1\"\nFROM base AS wheelbuilder\nWORKDIR ${WHEELS}\n#   Install pip requirements files\nCOPY ./arches/install/requirements.txt ${WHEELS}/requirements.txt\nCOPY ./arches/install/requirements_dev.txt ${WHEELS}/requirements_dev.txt\n#   Install packages required to build the python libs, then remove them\nRUN set -ex \\\n && BUILD_DEPS=\" build-essential libpcre3-dev libxml2-dev libjson0-dev libproj-dev libgdal1-dev python-dev python-software-properties libpq-dev zlib1g-dev clang make pkg-config xsltproc docbook-xsl mime-support docbook-mathml curl python-setuptools dos2unix libgeos-3.5.0 nodejs nodejs-legacy npm libldap2-dev libsasl2-dev \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $BUILD_DEPS -y \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py \\\n && pip install pip setuptools --no-cache-dir -U \\\n && pip wheel --no-cache-dir -b /tmp requests \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements.txt \\\n && pip wheel --no-cache-dir -b /tmp -r ${WHEELS}/requirements_dev.txt \\\n && pip wheel --no-cache-dir -b /tmp 'gunicorn==19.7.1' \\\n && pip wheel --no-cache-dir -b /tmp django-auth-ldap\n#   Add Docker-related files\nCOPY docker/entrypoint.sh ${WHEELS}/entrypoint.sh\nRUN chmod -R 700 ${WHEELS} \\\n && dos2unix ${WHEELS}/*.sh\nFROM base\n#   Get the pre-built python wheels from the build environment\nRUN mkdir ${WEB_ROOT}\nCOPY --from=wheelbuilder ${WHEELS} /wheels\n#   Install packages required to run Arches\n#   Note that the ubuntu/debian package for libgdal1-dev pulls in libgdal1i, which is built\n#   with everything enabled, and so, it has a huge amount of dependancies (everything that GDAL\n#   support, directly and indirectly pulling in mysql-common, odbc, jp2, perl! ... )\n#   a minimised build of GDAL could remove several hundred MB from the container layer.\nRUN set -ex \\\n && RUN_DEPS=\" mime-support curl python-setuptools libgdal1-dev libgeos-3.5.0 nodejs nodejs-legacy npm \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $RUN_DEPS -y \\\n && curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install nodejs -y \\\n && curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install yarn \\\n && curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm -rf /var/lib/apt/lists/* get-pip.py\n#  # Install Postgresql client\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update -y \\\n && apt-get install postgresql-client-9.6 -y\n#  # Install virtualenv\nWORKDIR ${WEB_ROOT}\n#   Install the Arches application\n#   FIXME: ADD from github repository instead?\nCOPY . ${ARCHES_ROOT}\nRUN mv ${WHEELS}/entrypoint.sh entrypoint.sh\nRUN pip install virtualenv==15.1.0 \\\n && virtualenv ENV \\\n && . ENV/bin/activate \\\n && pip install pip setuptools -U \\\n && pip install requests \\\n && pip install -r ${WHEELS}/requirements.txt -f ${WHEELS} \\\n && pip install -r ${WHEELS}/requirements_dev.txt -f ${WHEELS} \\\n && rm -rf ${WHEELS} \\\n && rm -rf /root/.cache/pip/*\n#   From here, run commands from ARCHES_ROOT\nWORKDIR ${ARCHES_ROOT}\nRUN . ../ENV/bin/activate \\\n && pip install :all: -e . --no-binary\n#   Install Yarn components\nCOPY ./package.json ${ARCHES_ROOT}/package.json\nRUN yarn install\nCOPY docker/gunicorn_config.py ${ARCHES_ROOT}/gunicorn_config.py\nCOPY docker/settings_local.py ${ARCHES_ROOT}/arches/settings_local.py\n#   Set entrypoint\nENTRYPOINT [\"../entrypoint.sh\"]\nCMD [\"run_arches\"]\n#   Expose port 8000\nEXPOSE 8000/tcp\n#   Set default workdir\nWORKDIR ${ARCHES_ROOT}\n","originalDockerfileUglifiedHash":"13243bd7eb96b891aa08eee35ee0639b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/23d05a04b9ccad19440090eb2625d3bd90e4b1e8.dockerfile"}