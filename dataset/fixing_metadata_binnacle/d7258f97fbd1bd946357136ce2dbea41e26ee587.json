{"seed":4237263445,"processedDockerfileHash":"c60ce4e1f5afe27d29adeb49bee80c28","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Downloads and builds Qt from source. This is simpler than using the Qt online\n#   installer. We do it in a separate stage to keep the number of dependencies low\n#   in the final Docker image.\n#\nFROM debian:9 AS build-qt-linux-x86_64\nARG QT_VERSION\n#   Downloader dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ca-certificates xz-utils wget -qq -y\n#   Download\nRUN mkdir -p /qt/source \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- https://download.qt.io/official_releases/qt/${QT_VERSION%??}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz | tar --strip-components=1 -C /qt/source -xJf-\n#   Build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends autoconf automake autopoint binutils bison build-essential flex intltool libclang-3.9-dev libgdk-pixbuf2.0-dev libffi-dev libfontconfig1-dev libfreetype6-dev libgmp-dev libicu-dev libmpc-dev libmpfr-dev libtool libtool-bin libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libz-dev python openssl -qq -y\nENV LLVM_INSTALL_DIR=\"/usr/lib/llvm-3.9\"\n#   Build Qt\nRUN mkdir -p qt/build \\\n && cd qt/build \\\n && ../source/configure -prefix /opt/qt5-linux-x86_64 -release -shared -opensource -confirm-license -nomake examples -nomake tests -platform linux-g++ -no-use-gold-linker -R . -sysconfdir /etc/xdg -qt-freetype -qt-harfbuzz -qt-pcre -qt-sqlite -qt-xcb -qt-zlib -no-cups -no-dbus -no-pch -no-libudev -no-feature-accessibility -no-opengl -skip qtactiveqt -skip qt3d -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtnetworkauth -skip qtquickcontrols -skip qtquickcontrols2 -skip qtpurchasing -skip qtremoteobjects -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtspeech -skip qtsvg -skip qttranslations -skip qtwayland -skip qtvirtualkeyboard -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtwinextras -skip qtxmlpatterns -skip qtx11extras\nRUN cd qt/build \\\n && make -j $( nproc --all ;) | stdbuf -o0 tr -cd '\\n' | stdbuf -o0 tr '\\n' '.' \\\n && make install\n#   Build a stable Qbs release\nFROM debian:9\nLABEL Description=\"Debian development environment for Qbs with Qt and various dependencies for testing Qbs modules and functionality\"\nARG QBS_VERSION=1.13.0\n#   Allow colored output on command line.\nENV TERM=\"xterm-color\"\n#\n#   Make it possible to change UID/GID in the entrypoint script. The docker\n#   container usually runs as root user on Linux hosts. When the Docker container\n#   mounts a folder on the host and creates files there, those files would be\n#   owned by root instead of the current user. Thus we create a user here who's\n#   UID will be changed in the entrypoint script to match the UID of the current\n#   host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends gosu sudo -qq -y \\\n && groupadd -g ${USER_UID} ${USER_NAME} \\\n && useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} \\\n && usermod -a -G sudo ${USER_NAME} \\\n && echo \"%devel ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nCOPY entrypoint.sh entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Qbs build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential ca-certificates git libclang-3.9 libicu57 pkg-config make help2man python-pip wget -qq -y \\\n && pip install beautifulsoup4==4.12.2 lxml==4.9.2\n#   Install Qt installation from build stage\nCOPY --from=build-qt-linux-x86_64 /opt/qt5-linux-x86_64 /opt/qt5-linux-x86_64\nENV PATH=\"/opt/qt5-linux-x86_64/bin:${PATH}\"\nRUN echo \"export PATH=/opt/qt5-linux-x86_64/bin:${PATH}\" > /etc/profile.d/qt.sh\n#   Download and build Qbs\nRUN mkdir -p /qbs \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- http://download.qt.io/official_releases/qbs/${QBS_VERSION}/qbs-src-${QBS_VERSION}.tar.gz | tar --strip-components=1 -C /qbs -xzf- \\\n && cd /qbs \\\n && qmake -r qbs.pro \\\n && make -j $( nproc --all ;) \\\n && make install INSTALL_ROOT=/ \\\n && rm -rf /qbs\n#   Configure Qbs\nUSER $USER_NAME\nRUN qbs-setup-toolchains --detect \\\n && qbs-setup-qt /opt/qt5-linux-x86_64/bin/qmake qt5-linux-x86_64 \\\n && qbs config defaultProfile qt5-linux-x86_64\n#   Switch back to root user for the entrypoint script.\nUSER root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Downloads and builds Qt from source. This is simpler than using the Qt online\n#  installer. We do it in a separate stage to keep the number of dependencies low\n#  in the final Docker image.\n#\nFROM debian:9 AS build-qt-linux-x86_64\nARG QT_VERSION\n#  Downloader dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ca-certificates xz-utils wget -qq -y\n#  Download\nRUN mkdir -p /qt/source \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- https://download.qt.io/official_releases/qt/${QT_VERSION%??}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz | tar --strip-components=1 -C /qt/source -xJf-\n#  Build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends autoconf automake autopoint binutils bison build-essential flex intltool libclang-3.9-dev libgdk-pixbuf2.0-dev libffi-dev libfontconfig1-dev libfreetype6-dev libgmp-dev libicu-dev libmpc-dev libmpfr-dev libtool libtool-bin libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libz-dev python openssl -qq -y\nENV LLVM_INSTALL_DIR=\"/usr/lib/llvm-3.9\"\n#  Build Qt\nRUN mkdir -p qt/build \\\n && cd qt/build \\\n && ../source/configure -prefix /opt/qt5-linux-x86_64 -release -shared -opensource -confirm-license -nomake examples -nomake tests -platform linux-g++ -no-use-gold-linker -R . -sysconfdir /etc/xdg -qt-freetype -qt-harfbuzz -qt-pcre -qt-sqlite -qt-xcb -qt-zlib -no-cups -no-dbus -no-pch -no-libudev -no-feature-accessibility -no-opengl -skip qtactiveqt -skip qt3d -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtnetworkauth -skip qtquickcontrols -skip qtquickcontrols2 -skip qtpurchasing -skip qtremoteobjects -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtspeech -skip qtsvg -skip qttranslations -skip qtwayland -skip qtvirtualkeyboard -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtwinextras -skip qtxmlpatterns -skip qtx11extras\nRUN cd qt/build \\\n && make -j $( nproc --all ;) | stdbuf -o0 tr -cd '\\n' | stdbuf -o0 tr '\\n' '.' \\\n && make install\n#  Build a stable Qbs release\nFROM debian:9\nLABEL Description=\"Debian development environment for Qbs with Qt and various dependencies for testing Qbs modules and functionality\"\nARG QBS_VERSION=1.13.0\n#  Allow colored output on command line.\nENV TERM=\"xterm-color\"\n#\n#  Make it possible to change UID/GID in the entrypoint script. The docker\n#  container usually runs as root user on Linux hosts. When the Docker container\n#  mounts a folder on the host and creates files there, those files would be\n#  owned by root instead of the current user. Thus we create a user here who's\n#  UID will be changed in the entrypoint script to match the UID of the current\n#  host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq \\\n && apt-get install gosu sudo -qq -y \\\n && groupadd -g ${USER_UID} ${USER_NAME} \\\n && useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} \\\n && usermod -a -G sudo ${USER_NAME} \\\n && echo \"%devel ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nCOPY entrypoint.sh entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#  Qbs build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential ca-certificates git libclang-3.9 libicu57 pkg-config make help2man python-pip wget -qq -y \\\n && pip install beautifulsoup4 lxml\n#  Install Qt installation from build stage\nCOPY --from=build-qt-linux-x86_64 /opt/qt5-linux-x86_64 /opt/qt5-linux-x86_64\nENV PATH=\"/opt/qt5-linux-x86_64/bin:${PATH}\"\nRUN echo \"export PATH=/opt/qt5-linux-x86_64/bin:${PATH}\" > /etc/profile.d/qt.sh\n#  Download and build Qbs\nRUN mkdir -p /qbs \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- http://download.qt.io/official_releases/qbs/${QBS_VERSION}/qbs-src-${QBS_VERSION}.tar.gz | tar --strip-components=1 -C /qbs -xzf- \\\n && cd /qbs \\\n && qmake -r qbs.pro \\\n && make -j $( nproc --all ;) \\\n && make install INSTALL_ROOT=/ \\\n && rm -rf /qbs\n#  Configure Qbs\nUSER $USER_NAME\nRUN qbs-setup-toolchains --detect \\\n && qbs-setup-qt /opt/qt5-linux-x86_64/bin/qmake qt5-linux-x86_64 \\\n && qbs config defaultProfile qt5-linux-x86_64\n#  Switch back to root user for the entrypoint script.\nUSER root\n","injectedSmells":[],"originalDockerfileHash":"4a6dd7b61d5896514c9f298ffc8f8255","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Downloads and builds Qt from source. This is simpler than using the Qt online\n#   installer. We do it in a separate stage to keep the number of dependencies low\n#   in the final Docker image.\n#\nFROM debian:9 AS build-qt-linux-x86_64\nARG QT_VERSION\n#   Downloader dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ca-certificates xz-utils wget -qq -y\n#   Download\nRUN mkdir -p /qt/source \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- https://download.qt.io/official_releases/qt/${QT_VERSION%??}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz | tar --strip-components=1 -C /qt/source -xJf-\n#   Build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends autoconf automake autopoint binutils bison build-essential flex intltool libclang-3.9-dev libgdk-pixbuf2.0-dev libffi-dev libfontconfig1-dev libfreetype6-dev libgmp-dev libicu-dev libmpc-dev libmpfr-dev libtool libtool-bin libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev libz-dev python openssl -qq -y\nENV LLVM_INSTALL_DIR=\"/usr/lib/llvm-3.9\"\n#   Build Qt\nRUN mkdir -p qt/build \\\n && cd qt/build \\\n && ../source/configure -prefix /opt/qt5-linux-x86_64 -release -shared -opensource -confirm-license -nomake examples -nomake tests -platform linux-g++ -no-use-gold-linker -R . -sysconfdir /etc/xdg -qt-freetype -qt-harfbuzz -qt-pcre -qt-sqlite -qt-xcb -qt-zlib -no-cups -no-dbus -no-pch -no-libudev -no-feature-accessibility -no-opengl -skip qtactiveqt -skip qt3d -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmultimedia -skip qtnetworkauth -skip qtquickcontrols -skip qtquickcontrols2 -skip qtpurchasing -skip qtremoteobjects -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtspeech -skip qtsvg -skip qttranslations -skip qtwayland -skip qtvirtualkeyboard -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtwinextras -skip qtxmlpatterns -skip qtx11extras\nRUN cd qt/build \\\n && make -j $( nproc --all ;) | stdbuf -o0 tr -cd '\\n' | stdbuf -o0 tr '\\n' '.' \\\n && make install\n#   Build a stable Qbs release\nFROM debian:9\nLABEL Description=\"Debian development environment for Qbs with Qt and various dependencies for testing Qbs modules and functionality\"\nARG QBS_VERSION=1.13.0\n#   Allow colored output on command line.\nENV TERM=\"xterm-color\"\n#\n#   Make it possible to change UID/GID in the entrypoint script. The docker\n#   container usually runs as root user on Linux hosts. When the Docker container\n#   mounts a folder on the host and creates files there, those files would be\n#   owned by root instead of the current user. Thus we create a user here who's\n#   UID will be changed in the entrypoint script to match the UID of the current\n#   host user.\n#\nARG USER_UID=1000\nARG USER_NAME=devel\nRUN apt-get update -qq \\\n && apt-get install gosu sudo -qq -y \\\n && groupadd -g ${USER_UID} ${USER_NAME} \\\n && useradd -s /bin/bash -u ${USER_UID} -g ${USER_NAME} -o -c \"\" -m ${USER_NAME} \\\n && usermod -a -G sudo ${USER_NAME} \\\n && echo \"%devel ALL = (ALL) NOPASSWD: ALL\" >> /etc/sudoers\nCOPY entrypoint.sh entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Qbs build dependencies\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential ca-certificates git libclang-3.9 libicu57 pkg-config make help2man python-pip wget -qq -y \\\n && pip install beautifulsoup4 lxml\n#   Install Qt installation from build stage\nCOPY --from=build-qt-linux-x86_64 /opt/qt5-linux-x86_64 /opt/qt5-linux-x86_64\nENV PATH=\"/opt/qt5-linux-x86_64/bin:${PATH}\"\nRUN echo \"export PATH=/opt/qt5-linux-x86_64/bin:${PATH}\" > /etc/profile.d/qt.sh\n#   Download and build Qbs\nRUN mkdir -p /qbs \\\n && wget -nv --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300 -qO- http://download.qt.io/official_releases/qbs/${QBS_VERSION}/qbs-src-${QBS_VERSION}.tar.gz | tar --strip-components=1 -C /qbs -xzf- \\\n && cd /qbs \\\n && qmake -r qbs.pro \\\n && make -j $( nproc --all ;) \\\n && make install INSTALL_ROOT=/ \\\n && rm -rf /qbs\n#   Configure Qbs\nUSER $USER_NAME\nRUN qbs-setup-toolchains --detect \\\n && qbs-setup-qt /opt/qt5-linux-x86_64/bin/qmake qt5-linux-x86_64 \\\n && qbs config defaultProfile qt5-linux-x86_64\n#   Switch back to root user for the entrypoint script.\nUSER root\n","originalDockerfileUglifiedHash":"c6a46ca8ef33face6f68713fb97ac809","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d7258f97fbd1bd946357136ce2dbea41e26ee587.dockerfile"}