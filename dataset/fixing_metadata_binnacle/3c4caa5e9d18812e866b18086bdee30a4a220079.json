{"seed":3842781753,"processedDockerfileHash":"a7a0ef891b6816835b0fc11a759d1549","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:trusty AS build-env\nWORKDIR /build\nARG ENV_CODECOV_MP4=\"\"\nENV ENV_CODECOV_MP4=\"${ENV_CODECOV_MP4}\"\nARG ENV_CODECOV_MG=\"\"\nENV ENV_CODECOV_MG=\"${ENV_CODECOV_MG}\"\nARG ENV_GITHUB_TOKEN=\"\"\nENV ENV_GITHUB_TOKEN=\"${ENV_GITHUB_TOKEN}\"\nARG ENV_GITHUB_USER=\"\"\nENV ENV_GITHUB_USER=\"${ENV_GITHUB_USER}\"\nARG ENV_COMMIT_HASH=\"\"\nENV ENV_COMMIT_HASH=\"${ENV_COMMIT_HASH}\"\nARG ENV_BRANCH=\"dev\"\nENV ENV_BRANCH=\"${ENV_BRANCH}\"\nARG ENV_CONFIGURATION=\"\"\nENV ENV_CONFIGURATION=\"${ENV_CONFIGURATION}\"\nARG ENV_CLONE=\"\"\nENV ENV_CLONE=\"${ENV_CLONE}\"\nARG APPVEYOR_API_URL=\"\"\nENV APPVEYOR_API_URL=\"${APPVEYOR_API_URL}\"\nRUN echo 'set number\\ncolorscheme torte' >> ~/.vimrc\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.92.37.8 -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends gcc-5 g++-5 -y \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n && apt-get install --no-install-recommends make=3.81-8.2ubuntu3 git=1:1.9.1-1ubuntu0.10 autoconf=2.69-6 libtool=2.4.2-1.7ubuntu1 gyp=0.1~svn1729-3ubuntu1 lcov=1.10-1build1 curl=7.35.0-1ubuntu2.20 vim=2:7.4.052-1ubuntu3.1 -y --force-yes\n#  ###\nCOPY . local\nRUN if [ $ENV_CLONE ] ; then git clone --recursive https://github.com/mediagoom/mg.git \\\n && cd mg \\\n && git checkout $ENV_BRANCH ; else cp --recursive local mg ; fi\nRUN cd mg/deps/libuv/ \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/AES/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/flavor/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN cd mg \\\n && ./bootstrap \\\n && if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then echo \"DEBUG BUILD\" \\\n && ./configure --enable-debug ; else ./configure ; fi \\\n && make check\nRUN if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then cd mg/src/b64 \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../mg/core \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../media \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../mgcli \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../test \\\n && find . -type f -name '*.gcda' -exec gcov {} + ; fi\nRUN curl -s https://codecov.io/bash > codecov \\\n && chmod +x codecov\nRUN cd mg \\\n && if [ \"$ENV_CODECOV_MG\" ] ; then if [ $ENV_COMMIT_HASH ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout -C $ENV_COMMIT_HASH -B $ENV_BRANCH ; else if [ $ENV_CLONE ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout ; fi ; fi ; fi\nRUN if [ $ENV_GITHUB_TOKEN ] ; then mv /build/mg/src/mg/media/mp4 /build/mg/src/mg/media/mp4tmp \\\n && cd /build/mg/src/mg/media \\\n && msg=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && git clone https://github.com/mediagoom/mp4.git \\\n && mv /build/mg/src/mg/media/mp4tmp/* /build/mg/src/mg/media/mp4 \\\n && rm mp4tmp -r \\\n && git config --global user.email \"$ENV_GITHUB_USER@hotmail.com\" \\\n && git config --global user.name \"$ENV_GITHUB_USER\" \\\n && cd mp4 \\\n && msg2=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && echo \"--[$msg]--[$msg2]--\" \\\n && sed -i \"s/@mediagen/@mediagen - $msg -/\" $( grep -l 'mediagen' ./* ;) \\\n && git add *.cpp \\\n && git add *.h \\\n && git commit -m \"$msg\" \\\n && if [ \"$msg\" -ne \"$msg2\" ] ; then git push https://$ENV_GITHUB_USER:$ENV_GITHUB_TOKEN@github.com/mediagoom/mp4.git ; fi ; fi\nRUN if [ $ENV_CODECOV_MP4 ] ; then cd /build/mg/src/mg/media \\\n && find ./mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:mp4/' ./*.gcov | xargs cp -t mp4 \\\n && find . -type f -name '*.gcov' -exec sed -i 's/0:Source:mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/src/mgcli \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../../src/mg/media/mp4 \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/test \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../src/mg/media/mp4 \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout ; fi\nRUN cd mg/test \\\n && python ./test_multiple_bitrate.py\nRUN ln -s /build/mg/src/mgcli/mg /usr/local/mg\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:trusty AS build-env\nWORKDIR /build\nARG ENV_CODECOV_MP4=\"\"\nENV ENV_CODECOV_MP4=\"${ENV_CODECOV_MP4}\"\nARG ENV_CODECOV_MG=\"\"\nENV ENV_CODECOV_MG=\"${ENV_CODECOV_MG}\"\nARG ENV_GITHUB_TOKEN=\"\"\nENV ENV_GITHUB_TOKEN=\"${ENV_GITHUB_TOKEN}\"\nARG ENV_GITHUB_USER=\"\"\nENV ENV_GITHUB_USER=\"${ENV_GITHUB_USER}\"\nARG ENV_COMMIT_HASH=\"\"\nENV ENV_COMMIT_HASH=\"${ENV_COMMIT_HASH}\"\nARG ENV_BRANCH=\"dev\"\nENV ENV_BRANCH=\"${ENV_BRANCH}\"\nARG ENV_CONFIGURATION=\"\"\nENV ENV_CONFIGURATION=\"${ENV_CONFIGURATION}\"\nARG ENV_CLONE=\"\"\nENV ENV_CLONE=\"${ENV_CLONE}\"\nARG APPVEYOR_API_URL=\"\"\nENV APPVEYOR_API_URL=\"${APPVEYOR_API_URL}\"\nRUN echo 'set number\\ncolorscheme torte' >> ~/.vimrc\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install gcc-5 g++-5 -y \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n && apt-get install make git autoconf libtool gyp lcov curl vim -y --force-yes\n# ###\nCOPY . local\nRUN if [ $ENV_CLONE ] ; then git clone --recursive https://github.com/mediagoom/mg.git \\\n && cd mg \\\n && git checkout $ENV_BRANCH ; else cp --recursive local mg ; fi\nRUN cd mg/deps/libuv/ \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/AES/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/flavor/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN cd mg \\\n && ./bootstrap \\\n && if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then echo \"DEBUG BUILD\" \\\n && ./configure --enable-debug ; else ./configure ; fi \\\n && make check\nRUN if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then cd mg/src/b64 \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../mg/core \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../media \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../mgcli \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../test \\\n && find . -type f -name '*.gcda' -exec gcov {} + ; fi\nRUN curl -s https://codecov.io/bash > codecov \\\n && chmod +x codecov\nRUN cd mg \\\n && if [ \"$ENV_CODECOV_MG\" ] ; then if [ $ENV_COMMIT_HASH ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout -C $ENV_COMMIT_HASH -B $ENV_BRANCH ; else if [ $ENV_CLONE ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout ; fi ; fi ; fi\nRUN if [ $ENV_GITHUB_TOKEN ] ; then mv /build/mg/src/mg/media/mp4 /build/mg/src/mg/media/mp4tmp \\\n && cd /build/mg/src/mg/media \\\n && msg=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && git clone https://github.com/mediagoom/mp4.git \\\n && mv /build/mg/src/mg/media/mp4tmp/* /build/mg/src/mg/media/mp4 \\\n && rm mp4tmp -r \\\n && git config --global user.email \"$ENV_GITHUB_USER@hotmail.com\" \\\n && git config --global user.name \"$ENV_GITHUB_USER\" \\\n && cd mp4 \\\n && msg2=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && echo \"--[$msg]--[$msg2]--\" \\\n && sed -i \"s/@mediagen/@mediagen - $msg -/\" $( grep -l 'mediagen' ./* ;) \\\n && git add *.cpp \\\n && git add *.h \\\n && git commit -m \"$msg\" \\\n && if [ \"$msg\" -ne \"$msg2\" ] ; then git push https://$ENV_GITHUB_USER:$ENV_GITHUB_TOKEN@github.com/mediagoom/mp4.git ; fi ; fi\nRUN if [ $ENV_CODECOV_MP4 ] ; then cd /build/mg/src/mg/media \\\n && find ./mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:mp4/' ./*.gcov | xargs cp -t mp4 \\\n && find . -type f -name '*.gcov' -exec sed -i 's/0:Source:mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/src/mgcli \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../../src/mg/media/mp4 \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/test \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../src/mg/media/mp4 \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout ; fi\nRUN cd mg/test \\\n && python ./test_multiple_bitrate.py\nRUN ln -s /build/mg/src/mgcli/mg /usr/local/mg\n","injectedSmells":[],"originalDockerfileHash":"0bf0210dc1f786b215342824e50c3239","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:trusty AS build-env\nWORKDIR /build\nARG ENV_CODECOV_MP4=\"\"\nENV ENV_CODECOV_MP4=\"${ENV_CODECOV_MP4}\"\nARG ENV_CODECOV_MG=\"\"\nENV ENV_CODECOV_MG=\"${ENV_CODECOV_MG}\"\nARG ENV_GITHUB_TOKEN=\"\"\nENV ENV_GITHUB_TOKEN=\"${ENV_GITHUB_TOKEN}\"\nARG ENV_GITHUB_USER=\"\"\nENV ENV_GITHUB_USER=\"${ENV_GITHUB_USER}\"\nARG ENV_COMMIT_HASH=\"\"\nENV ENV_COMMIT_HASH=\"${ENV_COMMIT_HASH}\"\nARG ENV_BRANCH=\"dev\"\nENV ENV_BRANCH=\"${ENV_BRANCH}\"\nARG ENV_CONFIGURATION=\"\"\nENV ENV_CONFIGURATION=\"${ENV_CONFIGURATION}\"\nARG ENV_CLONE=\"\"\nENV ENV_CLONE=\"${ENV_CLONE}\"\nARG APPVEYOR_API_URL=\"\"\nENV APPVEYOR_API_URL=\"${APPVEYOR_API_URL}\"\nRUN echo 'set number\\ncolorscheme torte' >> ~/.vimrc\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install gcc-5 g++-5 -y \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5 \\\n && apt-get install make git autoconf libtool gyp lcov curl vim -y --force-yes\n#  ###\nCOPY . local\nRUN if [ $ENV_CLONE ] ; then git clone --recursive https://github.com/mediagoom/mg.git \\\n && cd mg \\\n && git checkout $ENV_BRANCH ; else cp --recursive local mg ; fi\nRUN cd mg/deps/libuv/ \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/AES/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nRUN cd mg/deps/flavor/ \\\n && ./configure \\\n && make CC=/usr/bin/gcc \\\n && make install \\\n && cd ../..\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nRUN cd mg \\\n && ./bootstrap \\\n && if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then echo \"DEBUG BUILD\" \\\n && ./configure --enable-debug ; else ./configure ; fi \\\n && make check\nRUN if [ \"$ENV_CONFIGURATION\" = \"Debug\" -o \"$ENV_CODECOV_MG\" ] ; then cd mg/src/b64 \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../mg/core \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../media \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../mgcli \\\n && find . -type f -name '*.gcda' -exec gcov {} + \\\n && cd ../../test \\\n && find . -type f -name '*.gcda' -exec gcov {} + ; fi\nRUN curl -s https://codecov.io/bash > codecov \\\n && chmod +x codecov\nRUN cd mg \\\n && if [ \"$ENV_CODECOV_MG\" ] ; then if [ $ENV_COMMIT_HASH ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout -C $ENV_COMMIT_HASH -B $ENV_BRANCH ; else if [ $ENV_CLONE ] ; then ../codecov -t \"$ENV_CODECOV_MG\" -X gcov -X gcovout ; fi ; fi ; fi\nRUN if [ $ENV_GITHUB_TOKEN ] ; then mv /build/mg/src/mg/media/mp4 /build/mg/src/mg/media/mp4tmp \\\n && cd /build/mg/src/mg/media \\\n && msg=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && git clone https://github.com/mediagoom/mp4.git \\\n && mv /build/mg/src/mg/media/mp4tmp/* /build/mg/src/mg/media/mp4 \\\n && rm mp4tmp -r \\\n && git config --global user.email \"$ENV_GITHUB_USER@hotmail.com\" \\\n && git config --global user.name \"$ENV_GITHUB_USER\" \\\n && cd mp4 \\\n && msg2=\"$( git log -1 --pretty=format:%s | sed 's/\\//---/' ;)\" \\\n && echo \"--[$msg]--[$msg2]--\" \\\n && sed -i \"s/@mediagen/@mediagen - $msg -/\" $( grep -l 'mediagen' ./* ;) \\\n && git add *.cpp \\\n && git add *.h \\\n && git commit -m \"$msg\" \\\n && if [ \"$msg\" -ne \"$msg2\" ] ; then git push https://$ENV_GITHUB_USER:$ENV_GITHUB_TOKEN@github.com/mediagoom/mp4.git ; fi ; fi\nRUN if [ $ENV_CODECOV_MP4 ] ; then cd /build/mg/src/mg/media \\\n && find ./mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:mp4/' ./*.gcov | xargs cp -t mp4 \\\n && find . -type f -name '*.gcov' -exec sed -i 's/0:Source:mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/src/mgcli \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../../src/mg/media/mp4 \\\n && find ../../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout \\\n && echo \"-----------\" \\\n && cd /build/mg/test \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -delete \\\n && grep -l '0:Source:../src/mg/media/mp4/' ./*.gcov | xargs cp -t ../src/mg/media/mp4 \\\n && find ../src/mg/media/mp4 -type f -name '*.gcov' -exec sed -i 's/0:Source:..\\/src\\/mg\\/media\\/mp4\\//0:Source:/' {} + \\\n && cd /build/mg/src/mg/media/mp4 \\\n && ../../../../../codecov -t \"$ENV_CODECOV_MP4\" -X gcov -X gcovout ; fi\nRUN cd mg/test \\\n && python ./test_multiple_bitrate.py\nRUN ln -s /build/mg/src/mgcli/mg /usr/local/mg\n","originalDockerfileUglifiedHash":"2521199375a554b3caf0f7c2d0b88e07","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3c4caa5e9d18812e866b18086bdee30a4a220079.dockerfile"}