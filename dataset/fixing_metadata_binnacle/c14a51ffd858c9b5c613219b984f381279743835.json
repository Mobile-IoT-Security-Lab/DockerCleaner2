{"seed":2522587838,"processedDockerfileHash":"8ff8af30074039ecf4aff0c527fd6cf7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n#   Add an isolated user\n#   /home/work: actual working directory for user codes\n#   /home/sorna: place for Python and REPL script\nRUN adduser --disabled-password --gecos \"\" work\nRUN chmod 700 /home/work\nRUN mkdir /home/sorna\nRUN chmod 755 /home/sorna\nRUN chown -R work:work /home/sorna\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/work\"\nWORKDIR /home/work\n#   Set up the base environment.\nUSER root\nRUN sed -i 's/archive\\.ubuntu\\.com/kr.archive.ubuntu.com/' /etc/apt/sources.list\nRUN echo 'APT::Install-Recommends \"false\";' >> /etc/apt/apt.conf; echo 'APT::Install-Suggests \"false\";' >> /etc/apt/apt.conf\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends tzdata -y --only-upgrade )\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential git-core curl wget ca-certificates libseccomp2 libzmq3-dev -y )\n#   Install common Python dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends libreadline-dev libsqlite3-dev libssl-dev libbz2-dev libzmq3-dev tk-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends pkg-config libjpeg-dev libpng-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libjpeg-dev libpng-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libfreetype6-dev libblas-dev liblapack-dev libatlas-dev gfortran -y )\nCMD /home/sorna/run.sh\n#   Install Python installer (pyenv)\nUSER work\nENV PYENV_ROOT=\"/home/sorna/.pyenv\"\nENV PATH=\"/home/sorna/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN git clone https://github.com/yyuu/pyenv /home/sorna/.pyenv\n#   Install Python\nENV PYTHONUNBUFFERED=\"1\"\nENV SORNA_PYTHON_VERSION=\"3.6.0\"\nCOPY install-python.sh /home/sorna/install-python.sh\nCOPY pyenv-run.sh /home/sorna/pyenv-run.sh\nRUN sh /home/sorna/install-python.sh\n#   Install common Python packages\nRUN /home/sorna/pyenv-run.sh pip install pyzmq namedlist simplejson six \"python-dateutil>2\"\nRUN /home/sorna/pyenv-run.sh pip install numpy scipy matplotlib bokeh\nRUN /home/sorna/pyenv-run.sh pip install scikit-learn scikit-image\nRUN /home/sorna/pyenv-run.sh pip install pandas networkx cvxpy seaborn\nRUN /home/sorna/pyenv-run.sh pip install pillow sklearn\n#   Matplotlib configuration\nUSER root\nENV MPLCONFIGDIR=\"/home/sorna/.matplotlib\"\nRUN mkdir /home/sorna/.matplotlib\nRUN chown -R work:work /home/sorna/.matplotlib\nUSER work\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py\nRUN /home/sorna/pyenv-run.sh python /tmp/matplotlib-fontcache.py\nRUN rm /tmp/matplotlib-fontcache.py\n#   Install Sorna Media support\nUSER work\nCOPY matplotlibrc /home/sorna/.matplotlib/\nCOPY sorna_media-*.whl /tmp\nRUN /home/sorna/pyenv-run.sh pip install /tmp/sorna_media-*.whl\n#   Install Theano\nUSER work\nRUN /home/sorna/pyenv-run.sh pip install --upgrade \\\n && PIP_INSTALL=\"pip --no-cache-dir install --upgrade\" \\\n && $PIP_INSTALL . \\\n && $GIT_CLONE https://github.com/Theano/libgpuarray ~/gpuarray \\\n && mkdir -p ~/gpuarray/build \\\n && cd ~/gpuarray/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/gpuarray \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && RUN /home/sorna/pyenv-run.sh pip install keras\nENV KERAS_BACKEND=\"theano\"\n#   Secure installation scripts\nUSER root\nCOPY run.sh /home/sorna/run.sh\n#   NOTE: you must copy $GOPATH/bin to <dockerfile_dir>/\nCOPY jail /home/sorna/jail\nCOPY intra-jail /home/sorna/intra-jail\nRUN chown root:root /home/sorna/*.sh /home/sorna/jail /home/sorna/intra-jail\nRUN chmod 755 /home/sorna/run.sh /home/sorna/jail /home/sorna/intra-jail\nCOPY patch-libs.so /home/sorna/patch-libs.so\nENV LD_PRELOAD=\"/home/sorna/patch-libs.so\"\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp\nLABEL io.sorna.nvidia.enabled=\"yes\" \\\n      com.nvidia.cuda.version=\"8.0.61\" \\\n      com.nvidia.volumes.needed=\"nvidia_driver\" \\\n      io.sorna.timeout=\"0\" \\\n      io.sorna.maxmem=\"8g\" \\\n      io.sorna.maxcores=\"4\" \\\n      io.sorna.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      io.sorna.features=\"batch query uid-match user-input\"\nCOPY run.py /home/sorna/run.py\nUSER work\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n#  Add an isolated user\n#  /home/work: actual working directory for user codes\n#  /home/sorna: place for Python and REPL script\nRUN adduser --disabled-password --gecos \"\" work\nRUN chmod 700 /home/work\nRUN mkdir /home/sorna\nRUN chmod 755 /home/sorna\nRUN chown -R work:work /home/sorna\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/work\"\nWORKDIR /home/work\n#  Set up the base environment.\nUSER root\nRUN sed -i 's/archive\\.ubuntu\\.com/kr.archive.ubuntu.com/' /etc/apt/sources.list\nRUN echo 'APT::Install-Recommends \"false\";' >> /etc/apt/apt.conf; echo 'APT::Install-Suggests \"false\";' >> /etc/apt/apt.conf\nRUN apt-get update\nRUN apt-get install tzdata -y --only-upgrade\nRUN apt-get install build-essential git-core curl wget ca-certificates libseccomp2 libzmq3-dev -y\n#  Install common Python dependencies\nRUN apt-get install libreadline-dev libsqlite3-dev libssl-dev libbz2-dev libzmq3-dev tk-dev -y\nRUN apt-get install pkg-config libjpeg-dev libpng-dev -y\nRUN apt-get install libjpeg-dev libpng-dev -y\nRUN apt-get install libfreetype6-dev libblas-dev liblapack-dev libatlas-dev gfortran -y\nCMD /home/sorna/run.sh\n#  Install Python installer (pyenv)\nUSER work\nENV PYENV_ROOT=\"/home/sorna/.pyenv\"\nENV PATH=\"/home/sorna/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN git clone https://github.com/yyuu/pyenv /home/sorna/.pyenv\n#  Install Python\nENV PYTHONUNBUFFERED=\"1\"\nENV SORNA_PYTHON_VERSION=\"3.6.0\"\nADD install-python.sh /home/sorna/install-python.sh\nADD pyenv-run.sh /home/sorna/pyenv-run.sh\nRUN sh /home/sorna/install-python.sh\n#  Install common Python packages\nRUN /home/sorna/pyenv-run.sh pip install pyzmq namedlist simplejson six \"python-dateutil>2\"\nRUN /home/sorna/pyenv-run.sh pip install numpy scipy matplotlib bokeh\nRUN /home/sorna/pyenv-run.sh pip install scikit-learn scikit-image\nRUN /home/sorna/pyenv-run.sh pip install pandas networkx cvxpy seaborn\nRUN /home/sorna/pyenv-run.sh pip install pillow sklearn\n#  Matplotlib configuration\nUSER root\nENV MPLCONFIGDIR=\"/home/sorna/.matplotlib\"\nRUN mkdir /home/sorna/.matplotlib\nRUN chown -R work:work /home/sorna/.matplotlib\nUSER work\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py\nRUN /home/sorna/pyenv-run.sh python /tmp/matplotlib-fontcache.py\nRUN rm /tmp/matplotlib-fontcache.py\n#  Install Sorna Media support\nUSER work\nADD matplotlibrc /home/sorna/.matplotlib/\nADD sorna_media-*.whl /tmp\nRUN /home/sorna/pyenv-run.sh pip install /tmp/sorna_media-*.whl\n#  Install Theano\nUSER work\nRUN /home/sorna/pyenv-run.sh pip install --upgrade \\\n && PIP_INSTALL=\"pip --no-cache-dir install --upgrade\" \\\n && $PIP_INSTALL . \\\n && $GIT_CLONE https://github.com/Theano/libgpuarray ~/gpuarray \\\n && mkdir -p ~/gpuarray/build \\\n && cd ~/gpuarray/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/gpuarray \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && RUN /home/sorna/pyenv-run.sh pip install keras\nENV KERAS_BACKEND=\"theano\"\n#  Secure installation scripts\nUSER root\nADD run.sh /home/sorna/run.sh\n#  NOTE: you must copy $GOPATH/bin to <dockerfile_dir>/\nADD jail /home/sorna/jail\nADD intra-jail /home/sorna/intra-jail\nRUN chown root:root /home/sorna/*.sh /home/sorna/jail /home/sorna/intra-jail\nRUN chmod 755 /home/sorna/run.sh /home/sorna/jail /home/sorna/intra-jail\nADD patch-libs.so /home/sorna/patch-libs.so\nENV LD_PRELOAD=\"/home/sorna/patch-libs.so\"\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp\nLABEL io.sorna.nvidia.enabled=\"yes\" \\\n      com.nvidia.cuda.version=\"8.0.61\" \\\n      com.nvidia.volumes.needed=\"nvidia_driver\" \\\n      io.sorna.timeout=\"0\" \\\n      io.sorna.maxmem=\"8g\" \\\n      io.sorna.maxcores=\"4\" \\\n      io.sorna.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      io.sorna.features=\"batch query uid-match user-input\"\nADD run.py /home/sorna/run.py\nUSER work\n","injectedSmells":[],"originalDockerfileHash":"c9007de10a8bfb5c30468c02965ba2be","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\n#   Add an isolated user\n#   /home/work: actual working directory for user codes\n#   /home/sorna: place for Python and REPL script\nRUN adduser --disabled-password --gecos \"\" work\nRUN chmod 700 /home/work\nRUN mkdir /home/sorna\nRUN chmod 755 /home/sorna\nRUN chown -R work:work /home/sorna\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/work\"\nWORKDIR /home/work\n#   Set up the base environment.\nUSER root\nRUN sed -i 's/archive\\.ubuntu\\.com/kr.archive.ubuntu.com/' /etc/apt/sources.list\nRUN echo 'APT::Install-Recommends \"false\";' >> /etc/apt/apt.conf; echo 'APT::Install-Suggests \"false\";' >> /etc/apt/apt.conf\nRUN apt-get update\nRUN apt-get install tzdata -y --only-upgrade\nRUN apt-get install build-essential git-core curl wget ca-certificates libseccomp2 libzmq3-dev -y\n#   Install common Python dependencies\nRUN apt-get install libreadline-dev libsqlite3-dev libssl-dev libbz2-dev libzmq3-dev tk-dev -y\nRUN apt-get install pkg-config libjpeg-dev libpng-dev -y\nRUN apt-get install libjpeg-dev libpng-dev -y\nRUN apt-get install libfreetype6-dev libblas-dev liblapack-dev libatlas-dev gfortran -y\nCMD /home/sorna/run.sh\n#   Install Python installer (pyenv)\nUSER work\nENV PYENV_ROOT=\"/home/sorna/.pyenv\"\nENV PATH=\"/home/sorna/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN git clone https://github.com/yyuu/pyenv /home/sorna/.pyenv\n#   Install Python\nENV PYTHONUNBUFFERED=\"1\"\nENV SORNA_PYTHON_VERSION=\"3.6.0\"\nADD install-python.sh /home/sorna/install-python.sh\nADD pyenv-run.sh /home/sorna/pyenv-run.sh\nRUN sh /home/sorna/install-python.sh\n#   Install common Python packages\nRUN /home/sorna/pyenv-run.sh pip install pyzmq namedlist simplejson six \"python-dateutil>2\"\nRUN /home/sorna/pyenv-run.sh pip install numpy scipy matplotlib bokeh\nRUN /home/sorna/pyenv-run.sh pip install scikit-learn scikit-image\nRUN /home/sorna/pyenv-run.sh pip install pandas networkx cvxpy seaborn\nRUN /home/sorna/pyenv-run.sh pip install pillow sklearn\n#   Matplotlib configuration\nUSER root\nENV MPLCONFIGDIR=\"/home/sorna/.matplotlib\"\nRUN mkdir /home/sorna/.matplotlib\nRUN chown -R work:work /home/sorna/.matplotlib\nUSER work\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py\nRUN /home/sorna/pyenv-run.sh python /tmp/matplotlib-fontcache.py\nRUN rm /tmp/matplotlib-fontcache.py\n#   Install Sorna Media support\nUSER work\nADD matplotlibrc /home/sorna/.matplotlib/\nADD sorna_media-*.whl /tmp\nRUN /home/sorna/pyenv-run.sh pip install /tmp/sorna_media-*.whl\n#   Install Theano\nUSER work\nRUN /home/sorna/pyenv-run.sh pip install --upgrade \\\n && PIP_INSTALL=\"pip --no-cache-dir install --upgrade\" \\\n && $PIP_INSTALL . \\\n && $GIT_CLONE https://github.com/Theano/libgpuarray ~/gpuarray \\\n && mkdir -p ~/gpuarray/build \\\n && cd ~/gpuarray/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j\"$( nproc ;)\" install \\\n && cd ~/gpuarray \\\n && python setup.py build \\\n && python setup.py install \\\n && printf '[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\\n' > ~/.theanorc \\\n && RUN /home/sorna/pyenv-run.sh pip install keras\nENV KERAS_BACKEND=\"theano\"\n#   Secure installation scripts\nUSER root\nADD run.sh /home/sorna/run.sh\n#   NOTE: you must copy $GOPATH/bin to <dockerfile_dir>/\nADD jail /home/sorna/jail\nADD intra-jail /home/sorna/intra-jail\nRUN chown root:root /home/sorna/*.sh /home/sorna/jail /home/sorna/intra-jail\nRUN chmod 755 /home/sorna/run.sh /home/sorna/jail /home/sorna/intra-jail\nADD patch-libs.so /home/sorna/patch-libs.so\nENV LD_PRELOAD=\"/home/sorna/patch-libs.so\"\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp\nLABEL io.sorna.nvidia.enabled=\"yes\" \\\n      com.nvidia.cuda.version=\"8.0.61\" \\\n      com.nvidia.volumes.needed=\"nvidia_driver\" \\\n      io.sorna.timeout=\"0\" \\\n      io.sorna.maxmem=\"8g\" \\\n      io.sorna.maxcores=\"4\" \\\n      io.sorna.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      io.sorna.features=\"batch query uid-match user-input\"\nADD run.py /home/sorna/run.py\nUSER work\n","originalDockerfileUglifiedHash":"3a19a9a1330c3a1d3c59920fc7d134e1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c14a51ffd858c9b5c613219b984f381279743835.dockerfile"}