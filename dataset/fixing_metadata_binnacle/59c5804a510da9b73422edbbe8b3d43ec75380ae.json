{"seed":3263760692,"processedDockerfileHash":"8803c115eaf70328cfac4b26a84115b5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-user"],"processedDockerfile":"#\n#   Cartodb container\n#\nFROM ubuntu:18.04\nLABEL maintainer=\"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>\"\n#   Configuring locales\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils=1.6.14 software-properties-common=0.96.24.32.20 locales=2.27-3ubuntu1.6 -y -q \\\n && dpkg-reconfigure locales \\\n && locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  ENV CARTODB_VERSION=v4.11.152\n#  ENV CARTODB_VERSION=v4.12.9\n#  ENV CARTODB_VERSION=v4.12.26\n#  ENV CARTODB_VERSION=v4.12.30\nENV CARTODB_VERSION=\"master\"\n#  ENV SQLAPI_VERSION=1.47.2\nENV SQLAPI_VERSION=\"master\"\n#  ENV CRANKSHAFT_VERSION=0.8.1\nENV CRANKSHAFT_VERSION=\"master\"\n#  ENV WINDSHAFT_VERSION=5.4.0\nENV WINDSHAFT_VERSION=\"master\"\n#  ENV DATASERVICES_VERSION=0.0.2\nENV DATASERVICES_VERSION=\"master\"\n#  ENV DATAERVICESAPI_VERSION=0.30.5-server\nENV DATAERVICESAPI_VERSION=\"master\"\n#  ENV OBSERVATORY_VERSION=1.9.0\nENV OBSERVATORY_VERSION=\"master\"\nRUN useradd -m -d /home/cartodb -s /bin/bash cartodb \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 autoconf=2.69-11 automake=1:1.15.1-3ubuntu2 libtool=2.4.6-2 checkinstall=1.6.2-4ubuntu2 unp=2.0~pre7+nmu1 zip=3.0-11build1 unzip=6.0-21ubuntu1.2 git-core git=1:2.17.1-1ubuntu0.17 subversion=1.9.7-4ubuntu1.1 curl=7.58.0-2ubuntu3.24 libgeos-c1v5=3.6.2-1build2 libgeos-dev=3.6.2-1build2 libjson-c-dev=0.12.1-1.3ubuntu0.3 python-simplejson=3.13.2-1 proj-bin=4.9.3-2 proj-data=4.9.3-2 libproj-dev=4.9.3-2 gdal-bin=2.2.3+dfsg-2 libgdal-dev=2.2.3+dfsg-2 postgresql-10=10.23-0ubuntu0.18.04.1 postgresql-client-10=10.23-0ubuntu0.18.04.1 postgresql-contrib-10 postgresql-server-dev-10=10.23-0ubuntu0.18.04.1 postgresql-plpython-10=10.23-0ubuntu0.18.04.1 postgresql-10-plproxy=2.8-1 postgresql-10-postgis-2.4=2.4.3+dfsg-4 postgresql-10-postgis-scripts=2.4.3+dfsg-4 postgis=2.4.3+dfsg-4 liblwgeom-2.4-0=2.4.3+dfsg-4 ca-certificates=20211016ubuntu0.18.04.1 redis-server=5:4.0.9-1ubuntu0.2 python2.7-dev=2.7.17-1~18.04ubuntu1.11 python-setuptools=39.0.1-2ubuntu0.1 imagemagick=8:6.9.7.4+dfsg-16ubuntu6.15 libmapnik-dev=3.0.19+ds-1 mapnik-utils=3.0.19+ds-1 python-mapnik=1:0.0~20180130-804a7947d-1 python-argparse python-gdal=2.2.3+dfsg-2 python-chardet=3.0.4-1 python-all-dev=2.7.15~rc1-1 python-docutils=0.14+dfsg-3 openssl=1.1.1-1ubuntu2.1~18.04.21 libreadline7=7.0-3 zlib1g=1:1.2.11.dfsg-0ubuntu2.2 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libyaml-dev=0.1.7-2ubuntu3 libsqlite3-dev=3.22.0-1ubuntu0.7 sqlite3=3.22.0-1ubuntu0.7 libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.8 libxslt-dev libc6-dev=2.27-3ubuntu1.6 ncurses-dev bison=2:3.0.4.dfsg-1build1 pkg-config=0.29.1-0ubuntu2 libpq5=10.23-0ubuntu0.18.04.1 libpq-dev=10.23-0ubuntu0.18.04.1 libcurl4-gnutls-dev=7.58.0-2ubuntu3.24 libffi-dev=3.2.1-8 libgdbm-dev=1.14.1-6 gnupg=2.2.4-1ubuntu1.6 libreadline6-dev libcairo2-dev=1.15.10-2ubuntu0.1 libjpeg8-dev=8c-2ubuntu8 libpango1.0-dev=1.40.14-1ubuntu0.1 libgif-dev=5.1.4-2ubuntu0.1 libgmp-dev=2:6.1.2+dfsg-2ubuntu0.1 libicu-dev=60.2-3ubuntu3.2 wget=1.19.4-1ubuntu2.2 nginx-light=1.14.0-0ubuntu1.11 net-tools=1.60+git20161116.90da8a0-1ubuntu1 ruby2.5-dev=2.5.1-1ubuntu1.13 xz-utils=5.2.2-1.3ubuntu0.1 -y -q \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.email you@example.com\nRUN git config --global user.name \"Your Name\"\n#   Varnish 3, Ubuntu:18.04 comes with Varnish 5.1 which can't be run with anonymous admin telnet\nRUN cd /opt \\\n && wget http://varnish-cache.org/_downloads/varnish-3.0.7.tgz \\\n && tar -zxf varnish-3.0.7.tgz \\\n && cd varnish-3.0.7 \\\n && ./configure --prefix=/opt/varnish \\\n && make \\\n && make install \\\n && cd /opt \\\n && rm -rf varnish-3.0.7 varnish-3.0.7.tgz\n#   Install NodeJS\nRUN curl https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz | tar -Jxf - --strip-components=1 -C /usr \\\n && npm install grunt-cli@1.4.3 -g \\\n && npm install npm@6 -g \\\n && rm -r /tmp/npm-* /root/.npm\n#   Setting PostgreSQL\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/10/main/pg_hba.conf \\\n && service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n#   Crankshaft: CARTO Spatial Analysis extension for PostgreSQL\nRUN cd / \\\n && curl https://bootstrap.pypa.io/get-pip.py | python \\\n && git clone https://github.com/CartoDB/crankshaft.git \\\n && cd /crankshaft \\\n && git checkout $CRANKSHAFT_VERSION \\\n && make install \\\n && pip install scikit-learn==0.17.0 --force-reinstall --no-cache-dir \\\n && cd ..\n#   Initialize template postgis db\nCOPY ./template_postgis.sh /tmp/template_postgis.sh\nRUN service postgresql start \\\n && /bin/su postgres -c /tmp/template_postgis.sh \\\n && service postgresql stop\nCOPY ./cartodb_pgsql.sh /tmp/cartodb_pgsql.sh\n#   Install CartoDB API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout $SQLAPI_VERSION \\\n && npm install\n#   Install Windshaft\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout $WINDSHAFT_VERSION \\\n && npm install \\\n && mkdir logs\n#   Install CartoDB\nRUN git clone --recursive git://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && git checkout $CARTODB_VERSION \\\n && cd lib/sql \\\n && PGUSER=postgres make install \\\n && service postgresql start \\\n && /bin/su postgres -c /tmp/cartodb_pgsql.sh \\\n && service postgresql stop \\\n && cd - \\\n && npm install \\\n && rm -r /tmp/npm-* /root/.npm \\\n && perl -pi -e 's/gdal==1\\.10\\.0/gdal==2.2.2/' python_requirements.txt \\\n && pip install :all:==null --no-binary -r python_requirements.txt \\\n && gem install bundler --version 2.4.12 --version=1.17.3 \\\n && gem install compass --version 1.0.3 \\\n && bundle update thin \\\n && /bin/bash -l -c 'bundle install' \\\n && cp config/grunt_development.json ./config/grunt_true.json \\\n && /bin/bash -l -c 'bundle exec grunt'\n#   && \\\n#  rm -rf .git /root/.cache/pip node_modules\n#   Geocoder SQL client + server\nRUN git clone https://github.com/CartoDB/data-services.git \\\n && cd /data-services/geocoder/extension \\\n && git checkout $DATASERVICES_VERSION \\\n && PGUSER=postgres make all install \\\n && cd / \\\n && git clone https://github.com/CartoDB/dataservices-api.git \\\n && cd /dataservices-api/server/extension \\\n && git checkout $DATAERVICESAPI_VERSION \\\n && PGUSER=postgres make install \\\n && cd ../lib/python/cartodb_services \\\n && pip install -r requirements.txt \\\n && pip install . \\\n && cd ../../../../client \\\n && PGUSER=postgres make install\n#   Observatory extension\nRUN cd / \\\n && git clone --recursive https://github.com/CartoDB/observatory-extension.git \\\n && cd observatory-extension \\\n && git checkout $OBSERVATORY_VERSION \\\n && PGUSER=postgres make deploy\n#   Copy confs\nCOPY ./config/CartoDB-dev.js /CartoDB-SQL-API/config/environments/development.js\nCOPY ./config/WS-dev.js /Windshaft-cartodb/config/environments/development.js\nCOPY ./config/app_config.yml /cartodb/config/app_config.yml\nCOPY ./config/database.yml /cartodb/config/database.yml\nCOPY ./create_dev_user /cartodb/script/create_dev_user\nCOPY ./setup_organization.sh /cartodb/script/setup_organization.sh\nCOPY ./config/cartodb.nginx.proxy.conf /etc/nginx/sites-enabled/default\nCOPY ./config/varnish.vcl /etc/varnish.vcl\nCOPY ./geocoder.sh /cartodb/script/geocoder.sh\nCOPY ./geocoder_server.sql /cartodb/script/geocoder_server.sql\nCOPY ./fill_geocoder.sh /cartodb/script/fill_geocoder.sh\nCOPY ./sync_tables_trigger.sh /cartodb/script/sync_tables_trigger.sh\nENV PATH=\"/usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p /cartodb/log \\\n && touch /cartodb/log/users_modifications \\\n && /opt/varnish/sbin/varnishd -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl \\\n && perl -pi.bak -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf \\\n && service postgresql start \\\n && service redis-server start \\\n && perl -pi -e 's/0\\.22\\.0/0.22.2/' /cartodb/app/models/user/db_service.rb \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_dev_user \\\n && bash script/setup_organization.sh \\\n && bash script/geocoder.sh\" \\\n && service postgresql stop \\\n && service redis-server stop \\\n && chmod +x /cartodb/script/fill_geocoder.sh \\\n && chmod +x /cartodb/script/sync_tables_trigger.sh\nEXPOSE 80/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.2\"\n#   Number of seconds between a sync tables task is run\n#   Default interval is an hour, use `docker run -e SYNC_TABLES_INTERVAL=60 ...` to change it\nENV SYNC_TABLES_INTERVAL=\"3600\"\nCOPY ./startup.sh /opt/startup.sh\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nHEALTHCHECK CMD curl -f http://localhost || exit 1\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n","originalDockerfile":"#\n#  Cartodb container\n#\nFROM ubuntu:18.04\nLABEL maintainer=\"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>\"\n#  Configuring locales\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install apt-utils software-properties-common locales -y -q \\\n && dpkg-reconfigure locales \\\n && locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n# ENV CARTODB_VERSION=v4.11.152\n# ENV CARTODB_VERSION=v4.12.9\n# ENV CARTODB_VERSION=v4.12.26\n# ENV CARTODB_VERSION=v4.12.30\nENV CARTODB_VERSION=\"master\"\n# ENV SQLAPI_VERSION=1.47.2\nENV SQLAPI_VERSION=\"master\"\n# ENV CRANKSHAFT_VERSION=0.8.1\nENV CRANKSHAFT_VERSION=\"master\"\n# ENV WINDSHAFT_VERSION=5.4.0\nENV WINDSHAFT_VERSION=\"master\"\n# ENV DATASERVICES_VERSION=0.0.2\nENV DATASERVICES_VERSION=\"master\"\n# ENV DATAERVICESAPI_VERSION=0.30.5-server\nENV DATAERVICESAPI_VERSION=\"master\"\n# ENV OBSERVATORY_VERSION=1.9.0\nENV OBSERVATORY_VERSION=\"master\"\nRUN useradd -m -d /home/cartodb -s /bin/bash cartodb \\\n && apt-get install --no-install-recommends build-essential autoconf automake libtool checkinstall unp zip unzip git-core git subversion curl libgeos-c1v5 libgeos-dev libjson-c-dev python-simplejson proj-bin proj-data libproj-dev gdal-bin libgdal-dev postgresql-10 postgresql-client-10 postgresql-contrib-10 postgresql-server-dev-10 postgresql-plpython-10 postgresql-10-plproxy postgresql-10-postgis-2.4 postgresql-10-postgis-scripts postgis liblwgeom-2.4-0 ca-certificates redis-server python2.7-dev python-setuptools imagemagick libmapnik-dev mapnik-utils python-mapnik python-argparse python-gdal python-chardet python-all-dev python-docutils openssl libreadline7 zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev libc6-dev ncurses-dev bison pkg-config libpq5 libpq-dev libcurl4-gnutls-dev libffi-dev libgdbm-dev gnupg libreadline6-dev libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev libgmp-dev libicu-dev wget nginx-light net-tools ruby2.5-dev xz-utils -y -q \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.email you@example.com\nRUN git config --global user.name \"Your Name\"\n#  Varnish 3, Ubuntu:18.04 comes with Varnish 5.1 which can't be run with anonymous admin telnet\nRUN cd /opt \\\n && wget http://varnish-cache.org/_downloads/varnish-3.0.7.tgz \\\n && tar -zxf varnish-3.0.7.tgz \\\n && cd varnish-3.0.7 \\\n && ./configure --prefix=/opt/varnish \\\n && make \\\n && make install \\\n && cd /opt \\\n && rm -rf varnish-3.0.7 varnish-3.0.7.tgz\n#  Install NodeJS\nRUN curl https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz | tar -Jxf - --strip-components=1 -C /usr \\\n && npm install grunt-cli -g \\\n && npm install npm@6 -g \\\n && rm -r /tmp/npm-* /root/.npm\n#  Setting PostgreSQL\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/10/main/pg_hba.conf \\\n && service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n#  Crankshaft: CARTO Spatial Analysis extension for PostgreSQL\nRUN cd / \\\n && curl https://bootstrap.pypa.io/get-pip.py | python \\\n && git clone https://github.com/CartoDB/crankshaft.git \\\n && cd /crankshaft \\\n && git checkout $CRANKSHAFT_VERSION \\\n && make install \\\n && pip install scikit-learn==0.17.0 --force-reinstall --no-cache-dir \\\n && cd ..\n#  Initialize template postgis db\nADD ./template_postgis.sh /tmp/template_postgis.sh\nRUN service postgresql start \\\n && /bin/su postgres -c /tmp/template_postgis.sh \\\n && service postgresql stop\nADD ./cartodb_pgsql.sh /tmp/cartodb_pgsql.sh\n#  Install CartoDB API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout $SQLAPI_VERSION \\\n && npm install\n#  Install Windshaft\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout $WINDSHAFT_VERSION \\\n && npm install \\\n && mkdir logs\n#  Install CartoDB\nRUN git clone --recursive git://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && git checkout $CARTODB_VERSION \\\n && cd lib/sql \\\n && PGUSER=postgres make install \\\n && service postgresql start \\\n && /bin/su postgres -c /tmp/cartodb_pgsql.sh \\\n && service postgresql stop \\\n && cd - \\\n && npm install \\\n && rm -r /tmp/npm-* /root/.npm \\\n && perl -pi -e 's/gdal==1\\.10\\.0/gdal==2.2.2/' python_requirements.txt \\\n && pip install :all: --no-binary -r python_requirements.txt \\\n && gem install bundler --version=1.17.3 \\\n && gem install compass \\\n && bundle update thin \\\n && /bin/bash -l -c 'bundle install' \\\n && cp config/grunt_development.json ./config/grunt_true.json \\\n && /bin/bash -l -c 'bundle exec grunt'\n#  && \\\n# rm -rf .git /root/.cache/pip node_modules\n#  Geocoder SQL client + server\nRUN git clone https://github.com/CartoDB/data-services.git \\\n && cd /data-services/geocoder/extension \\\n && git checkout $DATASERVICES_VERSION \\\n && PGUSER=postgres make all install \\\n && cd / \\\n && git clone https://github.com/CartoDB/dataservices-api.git \\\n && cd /dataservices-api/server/extension \\\n && git checkout $DATAERVICESAPI_VERSION \\\n && PGUSER=postgres make install \\\n && cd ../lib/python/cartodb_services \\\n && pip install -r requirements.txt \\\n && pip install . \\\n && cd ../../../../client \\\n && PGUSER=postgres make install\n#  Observatory extension\nRUN cd / \\\n && git clone --recursive https://github.com/CartoDB/observatory-extension.git \\\n && cd observatory-extension \\\n && git checkout $OBSERVATORY_VERSION \\\n && PGUSER=postgres make deploy\n#  Copy confs\nADD ./config/CartoDB-dev.js /CartoDB-SQL-API/config/environments/development.js\nADD ./config/WS-dev.js /Windshaft-cartodb/config/environments/development.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./create_dev_user /cartodb/script/create_dev_user\nADD ./setup_organization.sh /cartodb/script/setup_organization.sh\nADD ./config/cartodb.nginx.proxy.conf /etc/nginx/sites-enabled/default\nADD ./config/varnish.vcl /etc/varnish.vcl\nADD ./geocoder.sh /cartodb/script/geocoder.sh\nADD ./geocoder_server.sql /cartodb/script/geocoder_server.sql\nADD ./fill_geocoder.sh /cartodb/script/fill_geocoder.sh\nADD ./sync_tables_trigger.sh /cartodb/script/sync_tables_trigger.sh\nENV PATH=\"/usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p /cartodb/log \\\n && touch /cartodb/log/users_modifications \\\n && /opt/varnish/sbin/varnishd -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl \\\n && perl -pi.bak -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf \\\n && service postgresql start \\\n && service redis-server start \\\n && perl -pi -e 's/0\\.22\\.0/0.22.2/' /cartodb/app/models/user/db_service.rb \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_dev_user \\\n && bash script/setup_organization.sh \\\n && bash script/geocoder.sh\" \\\n && service postgresql stop \\\n && service redis-server stop \\\n && chmod +x /cartodb/script/fill_geocoder.sh \\\n && chmod +x /cartodb/script/sync_tables_trigger.sh\nEXPOSE 80/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.2\"\n#  Number of seconds between a sync tables task is run\n#  Default interval is an hour, use `docker run -e SYNC_TABLES_INTERVAL=60 ...` to change it\nENV SYNC_TABLES_INTERVAL=\"3600\"\nADD ./startup.sh /opt/startup.sh\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nHEALTHCHECK CMD curl -f http://localhost || exit 1\n","injectedSmells":[],"originalDockerfileHash":"447476f8af6a1c9a2e3996fdc2890934","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Cartodb container\n#\nFROM ubuntu:18.04\nLABEL maintainer=\"Stefan Verhoeven <s.verhoeven@esciencecenter.nl>\"\n#   Configuring locales\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install apt-utils software-properties-common locales -y -q \\\n && dpkg-reconfigure locales \\\n && locale-gen en_US.UTF-8 \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  ENV CARTODB_VERSION=v4.11.152\n#  ENV CARTODB_VERSION=v4.12.9\n#  ENV CARTODB_VERSION=v4.12.26\n#  ENV CARTODB_VERSION=v4.12.30\nENV CARTODB_VERSION=\"master\"\n#  ENV SQLAPI_VERSION=1.47.2\nENV SQLAPI_VERSION=\"master\"\n#  ENV CRANKSHAFT_VERSION=0.8.1\nENV CRANKSHAFT_VERSION=\"master\"\n#  ENV WINDSHAFT_VERSION=5.4.0\nENV WINDSHAFT_VERSION=\"master\"\n#  ENV DATASERVICES_VERSION=0.0.2\nENV DATASERVICES_VERSION=\"master\"\n#  ENV DATAERVICESAPI_VERSION=0.30.5-server\nENV DATAERVICESAPI_VERSION=\"master\"\n#  ENV OBSERVATORY_VERSION=1.9.0\nENV OBSERVATORY_VERSION=\"master\"\nRUN useradd -m -d /home/cartodb -s /bin/bash cartodb \\\n && apt-get install --no-install-recommends build-essential autoconf automake libtool checkinstall unp zip unzip git-core git subversion curl libgeos-c1v5 libgeos-dev libjson-c-dev python-simplejson proj-bin proj-data libproj-dev gdal-bin libgdal-dev postgresql-10 postgresql-client-10 postgresql-contrib-10 postgresql-server-dev-10 postgresql-plpython-10 postgresql-10-plproxy postgresql-10-postgis-2.4 postgresql-10-postgis-scripts postgis liblwgeom-2.4-0 ca-certificates redis-server python2.7-dev python-setuptools imagemagick libmapnik-dev mapnik-utils python-mapnik python-argparse python-gdal python-chardet python-all-dev python-docutils openssl libreadline7 zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev libc6-dev ncurses-dev bison pkg-config libpq5 libpq-dev libcurl4-gnutls-dev libffi-dev libgdbm-dev gnupg libreadline6-dev libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev libgmp-dev libicu-dev wget nginx-light net-tools ruby2.5-dev xz-utils -y -q \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.email you@example.com\nRUN git config --global user.name \"Your Name\"\n#   Varnish 3, Ubuntu:18.04 comes with Varnish 5.1 which can't be run with anonymous admin telnet\nRUN cd /opt \\\n && wget http://varnish-cache.org/_downloads/varnish-3.0.7.tgz \\\n && tar -zxf varnish-3.0.7.tgz \\\n && cd varnish-3.0.7 \\\n && ./configure --prefix=/opt/varnish \\\n && make \\\n && make install \\\n && cd /opt \\\n && rm -rf varnish-3.0.7 varnish-3.0.7.tgz\n#   Install NodeJS\nRUN curl https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz | tar -Jxf - --strip-components=1 -C /usr \\\n && npm install grunt-cli -g \\\n && npm install npm@6 -g \\\n && rm -r /tmp/npm-* /root/.npm\n#   Setting PostgreSQL\nRUN sed -i 's/\\(peer\\|md5\\)/trust/' /etc/postgresql/10/main/pg_hba.conf \\\n && service postgresql start \\\n && createuser publicuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && createuser tileuser --no-createrole --no-createdb --no-superuser -U postgres \\\n && service postgresql stop\n#   Crankshaft: CARTO Spatial Analysis extension for PostgreSQL\nRUN cd / \\\n && curl https://bootstrap.pypa.io/get-pip.py | python \\\n && git clone https://github.com/CartoDB/crankshaft.git \\\n && cd /crankshaft \\\n && git checkout $CRANKSHAFT_VERSION \\\n && make install \\\n && pip install scikit-learn==0.17.0 --force-reinstall --no-cache-dir \\\n && cd ..\n#   Initialize template postgis db\nADD ./template_postgis.sh /tmp/template_postgis.sh\nRUN service postgresql start \\\n && /bin/su postgres -c /tmp/template_postgis.sh \\\n && service postgresql stop\nADD ./cartodb_pgsql.sh /tmp/cartodb_pgsql.sh\n#   Install CartoDB API\nRUN git clone git://github.com/CartoDB/CartoDB-SQL-API.git \\\n && cd CartoDB-SQL-API \\\n && git checkout $SQLAPI_VERSION \\\n && npm install\n#   Install Windshaft\nRUN git clone git://github.com/CartoDB/Windshaft-cartodb.git \\\n && cd Windshaft-cartodb \\\n && git checkout $WINDSHAFT_VERSION \\\n && npm install \\\n && mkdir logs\n#   Install CartoDB\nRUN git clone --recursive git://github.com/CartoDB/cartodb.git \\\n && cd cartodb \\\n && git checkout $CARTODB_VERSION \\\n && cd lib/sql \\\n && PGUSER=postgres make install \\\n && service postgresql start \\\n && /bin/su postgres -c /tmp/cartodb_pgsql.sh \\\n && service postgresql stop \\\n && cd - \\\n && npm install \\\n && rm -r /tmp/npm-* /root/.npm \\\n && perl -pi -e 's/gdal==1\\.10\\.0/gdal==2.2.2/' python_requirements.txt \\\n && pip install :all: --no-binary -r python_requirements.txt \\\n && gem install bundler --version=1.17.3 \\\n && gem install compass \\\n && bundle update thin \\\n && /bin/bash -l -c 'bundle install' \\\n && cp config/grunt_development.json ./config/grunt_true.json \\\n && /bin/bash -l -c 'bundle exec grunt'\n#   && \\\n#  rm -rf .git /root/.cache/pip node_modules\n#   Geocoder SQL client + server\nRUN git clone https://github.com/CartoDB/data-services.git \\\n && cd /data-services/geocoder/extension \\\n && git checkout $DATASERVICES_VERSION \\\n && PGUSER=postgres make all install \\\n && cd / \\\n && git clone https://github.com/CartoDB/dataservices-api.git \\\n && cd /dataservices-api/server/extension \\\n && git checkout $DATAERVICESAPI_VERSION \\\n && PGUSER=postgres make install \\\n && cd ../lib/python/cartodb_services \\\n && pip install -r requirements.txt \\\n && pip install . \\\n && cd ../../../../client \\\n && PGUSER=postgres make install\n#   Observatory extension\nRUN cd / \\\n && git clone --recursive https://github.com/CartoDB/observatory-extension.git \\\n && cd observatory-extension \\\n && git checkout $OBSERVATORY_VERSION \\\n && PGUSER=postgres make deploy\n#   Copy confs\nADD ./config/CartoDB-dev.js /CartoDB-SQL-API/config/environments/development.js\nADD ./config/WS-dev.js /Windshaft-cartodb/config/environments/development.js\nADD ./config/app_config.yml /cartodb/config/app_config.yml\nADD ./config/database.yml /cartodb/config/database.yml\nADD ./create_dev_user /cartodb/script/create_dev_user\nADD ./setup_organization.sh /cartodb/script/setup_organization.sh\nADD ./config/cartodb.nginx.proxy.conf /etc/nginx/sites-enabled/default\nADD ./config/varnish.vcl /etc/varnish.vcl\nADD ./geocoder.sh /cartodb/script/geocoder.sh\nADD ./geocoder_server.sql /cartodb/script/geocoder_server.sql\nADD ./fill_geocoder.sh /cartodb/script/fill_geocoder.sh\nADD ./sync_tables_trigger.sh /cartodb/script/sync_tables_trigger.sh\nENV PATH=\"/usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p /cartodb/log \\\n && touch /cartodb/log/users_modifications \\\n && /opt/varnish/sbin/varnishd -a :6081 -T localhost:6082 -s malloc,256m -f /etc/varnish.vcl \\\n && perl -pi.bak -e 's/^bind 127.0.0.1 ::1$/bind 0.0.0.0/' /etc/redis/redis.conf \\\n && service postgresql start \\\n && service redis-server start \\\n && perl -pi -e 's/0\\.22\\.0/0.22.2/' /cartodb/app/models/user/db_service.rb \\\n && bash -l -c \"cd /cartodb \\\n && bash script/create_dev_user \\\n && bash script/setup_organization.sh \\\n && bash script/geocoder.sh\" \\\n && service postgresql stop \\\n && service redis-server stop \\\n && chmod +x /cartodb/script/fill_geocoder.sh \\\n && chmod +x /cartodb/script/sync_tables_trigger.sh\nEXPOSE 80/tcp\nENV GDAL_DATA=\"/usr/share/gdal/2.2\"\n#   Number of seconds between a sync tables task is run\n#   Default interval is an hour, use `docker run -e SYNC_TABLES_INTERVAL=60 ...` to change it\nENV SYNC_TABLES_INTERVAL=\"3600\"\nADD ./startup.sh /opt/startup.sh\nCMD [\"/bin/bash\", \"/opt/startup.sh\"]\nHEALTHCHECK CMD curl -f http://localhost || exit 1\n","originalDockerfileUglifiedHash":"9d293957d8e7daae9c74d2803ec9a66e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/59c5804a510da9b73422edbbe8b3d43ec75380ae.dockerfile"}