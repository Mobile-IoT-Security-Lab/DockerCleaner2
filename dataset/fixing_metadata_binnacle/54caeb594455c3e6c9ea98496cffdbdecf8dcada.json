{"seed":3828228463,"processedDockerfileHash":"62fe151d5d849b3a6f6a9b4bba650c70","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Dockerfile to load a haskell environment for running binary's test suite.\n#\n#   Building the Dockerfile creates an image which has the haskell environment\n#   with ghc and cabal setup and ready to use.\n#\n#   Use a docker volume to cache built dependencies. It will greatly speed up\n#   running the tests repeatedly.\n#\n#   Create a volume:\n#\n#     docker volume create cabal-store-cache\n#\n#   How to build:\n#\n#     docker build \\\n#       -f docker/Dockerfile.ghc843 \\\n#       -t haskell/binary \\\n#       --build-arg ghcver=8.4.2 \\\n#       .\n#\n#   How to run (caching the cabal store directory), default is 'cabal new-test':\n#\n#     docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store\n#\n#   Run 'cabal new-bench' or any other command (bash, to get into the machine):\n#\n#     docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store \\\n#       cabal new-bench\n#\n#   Hacks to build binary:\n#\n#     1) Copy all files from the host machine.\n#\n#     2) Rename binary to binary-next. This is an unfortunate consequence of\n#        binary being used by its test and benchmark dependencies.\n#        Not renaming binary will make cabal confused and it'll fail to build.\n#\n#        Cabal can be made to build properly by carefully installing the test\n#        and benchmark dependencies manually, like it's done in .travis.yml.\n#        Unfortunately that setup is very fragile since changing the\n#        dependencies in binary.cabal also requires updating .travis.yml.\n#        Thus .travis.yml gets out of sync when we forget.\n#        This method also doesn't work with the nix-style commands which\n#        themselves take care of installing dependencies.\n#        The simples workaround I've found, and the only thing that works\n#        with nix-style commands, is to simply rename the package\n#\n#     3) Do 'cabal sdist' to get only the files for source distribution.\n#\n#     4) Unpack the .tar.gz file from (3) and copy generics-bench.cache.gz\n#        to the same dir.\n#\n#     5) The setup is complete. You may run cabal new-test,\n#        or any other command.\n#\nFROM debian:stable\n#   setup locale.\n#   not setting a locale will make some apps fail when outputting utf8.\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales=2.31-13+deb11u5 -y \\\n && locale-gen C.UTF-8 \\\n && /usr/sbin/update-locale LANG=C.UTF-8 \\\n && apt-get remove -y locales\nENV LANG=\"C.UTF-8\"\n#   key used by haskell repo\nRUN apt-get update \\\n && apt-get install --no-install-recommends gnupg=2.2.27-2+deb11u2 dirmngr=2.2.27-2+deb11u2 -y\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA3CBA3FFE22B574\n#   add haskell repo for debian\nRUN echo \"deb http://downloads.haskell.org/debian stretch main\" > /etc/apt/sources.list.d/haskell.list\nARG ghcver=8.4.3\nARG cabalinstallver=2.4\nRUN apt-get update \\\n && apt-get install --no-install-recommends cabal-install-$cabalinstallver -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends ghc-$ghcver -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends zlib1g-dev=1:1.2.11.dfsg-2+deb11u2 -y\nENV PATH=\"/opt/ghc/bin:$PATH\"\nRUN cabal new-update\nCOPY . /workdir/copy\nWORKDIR /workdir/copy\nRUN sed -i.bak -e 's/name:\\s*binary/name: binary-next/' binary.cabal\nRUN mv binary.cabal binary-next.cabal\nRUN cabal new-sdist\nWORKDIR /workdir/builddir\nRUN tar xf /workdir/copy/dist-newstyle/sdist/*.tar.gz -C /workdir/builddir\nRUN mv /workdir/builddir/binary-* /workdir/builddir/binary-next\n#   generics-bench.cache.gz is not part of the binary distribution,\n#   it's too large. It only lives in the git repo. Copy it manually.\nRUN mv /workdir/copy/generics-bench.cache.gz /workdir/builddir/binary-next\nWORKDIR /workdir/builddir/binary-next\nCMD cabal new-test\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile to load a haskell environment for running binary's test suite.\n#\n#  Building the Dockerfile creates an image which has the haskell environment\n#  with ghc and cabal setup and ready to use.\n#\n#  Use a docker volume to cache built dependencies. It will greatly speed up\n#  running the tests repeatedly.\n#\n#  Create a volume:\n#\n#    docker volume create cabal-store-cache\n#\n#  How to build:\n#\n#    docker build \\\n#      -f docker/Dockerfile.ghc843 \\\n#      -t haskell/binary \\\n#      --build-arg ghcver=8.4.2 \\\n#      .\n#\n#  How to run (caching the cabal store directory), default is 'cabal new-test':\n#\n#    docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store\n#\n#  Run 'cabal new-bench' or any other command (bash, to get into the machine):\n#\n#    docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store \\\n#      cabal new-bench\n#\n#  Hacks to build binary:\n#\n#    1) Copy all files from the host machine.\n#\n#    2) Rename binary to binary-next. This is an unfortunate consequence of\n#       binary being used by its test and benchmark dependencies.\n#       Not renaming binary will make cabal confused and it'll fail to build.\n#\n#       Cabal can be made to build properly by carefully installing the test\n#       and benchmark dependencies manually, like it's done in .travis.yml.\n#       Unfortunately that setup is very fragile since changing the\n#       dependencies in binary.cabal also requires updating .travis.yml.\n#       Thus .travis.yml gets out of sync when we forget.\n#       This method also doesn't work with the nix-style commands which\n#       themselves take care of installing dependencies.\n#       The simples workaround I've found, and the only thing that works\n#       with nix-style commands, is to simply rename the package\n#\n#    3) Do 'cabal sdist' to get only the files for source distribution.\n#\n#    4) Unpack the .tar.gz file from (3) and copy generics-bench.cache.gz\n#       to the same dir.\n#\n#    5) The setup is complete. You may run cabal new-test,\n#       or any other command.\n#\nFROM debian:stable\n#  setup locale.\n#  not setting a locale will make some apps fail when outputting utf8.\nRUN apt-get update \\\n && apt-get install locales -y \\\n && locale-gen C.UTF-8 \\\n && /usr/sbin/update-locale LANG=C.UTF-8 \\\n && apt-get remove -y locales\nENV LANG=\"C.UTF-8\"\n#  key used by haskell repo\nRUN apt-get update \\\n && apt-get install gnupg dirmngr -y\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA3CBA3FFE22B574\n#  add haskell repo for debian\nRUN echo \"deb http://downloads.haskell.org/debian stretch main\" > /etc/apt/sources.list.d/haskell.list\nARG ghcver=8.4.3\nARG cabalinstallver=2.4\nRUN apt-get update \\\n && apt-get install -y cabal-install-$cabalinstallver\nRUN apt-get update \\\n && apt-get install -y ghc-$ghcver\nRUN apt-get update \\\n && apt-get install zlib1g-dev -y\nENV PATH=\"/opt/ghc/bin:$PATH\"\nRUN cabal new-update\nCOPY . /workdir/copy\nWORKDIR /workdir/copy\nRUN sed -i.bak -e 's/name:\\s*binary/name: binary-next/' binary.cabal\nRUN mv binary.cabal binary-next.cabal\nRUN cabal new-sdist\nWORKDIR /workdir/builddir\nRUN tar xf /workdir/copy/dist-newstyle/sdist/*.tar.gz -C /workdir/builddir\nRUN mv /workdir/builddir/binary-* /workdir/builddir/binary-next\n#  generics-bench.cache.gz is not part of the binary distribution,\n#  it's too large. It only lives in the git repo. Copy it manually.\nRUN mv /workdir/copy/generics-bench.cache.gz /workdir/builddir/binary-next\nWORKDIR /workdir/builddir/binary-next\nCMD cabal new-test\n","injectedSmells":[],"originalDockerfileHash":"3fdcec35acad9faf1365dbcde42e216f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile to load a haskell environment for running binary's test suite.\n#\n#   Building the Dockerfile creates an image which has the haskell environment\n#   with ghc and cabal setup and ready to use.\n#\n#   Use a docker volume to cache built dependencies. It will greatly speed up\n#   running the tests repeatedly.\n#\n#   Create a volume:\n#\n#     docker volume create cabal-store-cache\n#\n#   How to build:\n#\n#     docker build \\\n#       -f docker/Dockerfile.ghc843 \\\n#       -t haskell/binary \\\n#       --build-arg ghcver=8.4.2 \\\n#       .\n#\n#   How to run (caching the cabal store directory), default is 'cabal new-test':\n#\n#     docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store\n#\n#   Run 'cabal new-bench' or any other command (bash, to get into the machine):\n#\n#     docker run -it haskell/binary -v cabal-store-cache:/root/.cabal/store \\\n#       cabal new-bench\n#\n#   Hacks to build binary:\n#\n#     1) Copy all files from the host machine.\n#\n#     2) Rename binary to binary-next. This is an unfortunate consequence of\n#        binary being used by its test and benchmark dependencies.\n#        Not renaming binary will make cabal confused and it'll fail to build.\n#\n#        Cabal can be made to build properly by carefully installing the test\n#        and benchmark dependencies manually, like it's done in .travis.yml.\n#        Unfortunately that setup is very fragile since changing the\n#        dependencies in binary.cabal also requires updating .travis.yml.\n#        Thus .travis.yml gets out of sync when we forget.\n#        This method also doesn't work with the nix-style commands which\n#        themselves take care of installing dependencies.\n#        The simples workaround I've found, and the only thing that works\n#        with nix-style commands, is to simply rename the package\n#\n#     3) Do 'cabal sdist' to get only the files for source distribution.\n#\n#     4) Unpack the .tar.gz file from (3) and copy generics-bench.cache.gz\n#        to the same dir.\n#\n#     5) The setup is complete. You may run cabal new-test,\n#        or any other command.\n#\nFROM debian:stable\n#   setup locale.\n#   not setting a locale will make some apps fail when outputting utf8.\nRUN apt-get update \\\n && apt-get install locales -y \\\n && locale-gen C.UTF-8 \\\n && /usr/sbin/update-locale LANG=C.UTF-8 \\\n && apt-get remove -y locales\nENV LANG=\"C.UTF-8\"\n#   key used by haskell repo\nRUN apt-get update \\\n && apt-get install gnupg dirmngr -y\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA3CBA3FFE22B574\n#   add haskell repo for debian\nRUN echo \"deb http://downloads.haskell.org/debian stretch main\" > /etc/apt/sources.list.d/haskell.list\nARG ghcver=8.4.3\nARG cabalinstallver=2.4\nRUN apt-get update \\\n && apt-get install cabal-install-$cabalinstallver -y\nRUN apt-get update \\\n && apt-get install ghc-$ghcver -y\nRUN apt-get update \\\n && apt-get install zlib1g-dev -y\nENV PATH=\"/opt/ghc/bin:$PATH\"\nRUN cabal new-update\nCOPY . /workdir/copy\nWORKDIR /workdir/copy\nRUN sed -i.bak -e 's/name:\\s*binary/name: binary-next/' binary.cabal\nRUN mv binary.cabal binary-next.cabal\nRUN cabal new-sdist\nWORKDIR /workdir/builddir\nRUN tar xf /workdir/copy/dist-newstyle/sdist/*.tar.gz -C /workdir/builddir\nRUN mv /workdir/builddir/binary-* /workdir/builddir/binary-next\n#   generics-bench.cache.gz is not part of the binary distribution,\n#   it's too large. It only lives in the git repo. Copy it manually.\nRUN mv /workdir/copy/generics-bench.cache.gz /workdir/builddir/binary-next\nWORKDIR /workdir/builddir/binary-next\nCMD cabal new-test\n","originalDockerfileUglifiedHash":"64566f1fe0359d40cfff3a19ed525193","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/54caeb594455c3e6c9ea98496cffdbdecf8dcada.dockerfile"}