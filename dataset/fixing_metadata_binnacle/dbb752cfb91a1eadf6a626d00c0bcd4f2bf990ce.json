{"seed":2648834538,"processedDockerfileHash":"5050a8d8d350499c01765b91ff69b140","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake cmake-curses-gui automake libgmp3-dev cpio libtool libyaml-dev valgrind software-properties-common unzip libz-dev vim apt-utils emacs zsh locales ruby htop libeigen3-dev python python-dev python-pip python-pip python-wheel python-setuptools python-numpy python3 python3-dev python3-pip python3-wheel python3-setuptools python3-numpy libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#   Install OpenMPI with cuda & verbs\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:$LIBRARY_PATH\"\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 \\\n && make install \\\n && ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\"\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -G sudo -u ${USER_ID} ${USER_NAME}\nRUN addgroup --gid ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\n#   Switch to USER_NAME\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#   Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#   Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#   Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn scikit-image jupyter matplotlib cython protobuf pandas h5py cmake\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$HOME/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$HOME/lib\"\nENV CPATH=\"$CPATH:/usr/local/include:$HOME/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include:$HOME/include' >> ~/.zshrc\n#   Install libjpeg-turbo\nRUN if [ ! -d $HOME/lib ] ; then mkdir $HOME/lib ; fi\nRUN cd $HOME/lib \\\n && mkdir libjpeg-turbo \\\n && cd libjpeg-turbo \\\n && curl -L -O https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.0.tar.gz \\\n && tar zxvf 2.0.0.tar.gz \\\n && rm -rf 2.0.0.tar.gz \\\n && cd libjpeg-turbo-2.0.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=${HOME} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ${HOME}/libjpeg-turbo\n#   Install opencv\nRUN cd $HOME/lib \\\n && mkdir opencv \\\n && cd opencv \\\n && curl -L -O https://github.com/opencv/opencv/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && curl -L -O https://github.com/opencv/opencv_contrib/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && cd opencv-3.4.3 \\\n && mkdir build \\\n && cd build\nRUN cd $HOME/lib/opencv/opencv-3.4.3/build \\\n && PYTHON=$( pyenv which python ;) \\\n && $( pyenv which cmake ;) -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=${HOME} -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_QT=OFF -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DWITH_CUBLAS=OFF -DWITH_CUFFT=OFF -DWITH_JPEG=ON -DBUILD_JPEG=OFF -DBUILD_TIFF=ON -DWITH_TIFF=OFF -DBUILD_PNG=ON -DWITH_PNG=OFF -DJPEG_INCLUDE_DIR=${HOME}/include -DJPEG_LIBRARY=${HOME}/lib/libjpeg.so -DOPENCV_EXTRA_MODULES_PATH=${HOME}/lib/opencv/opencv_contrib-3.4.3/modules -DBUILD_opencv_python3=ON -DPYTHON3_EXECUTABLE=$( which $PYTHON ;) -DPYTHON3_INCLUDE_DIR=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_INCLUDE_DIR2t=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_NUMPY_INCLUDE_DIRS=$( $PYTHON -c 'import numpy; print(numpy.get_include())' ;) -DPYTHON3_LIBRARY=find $( pyenv prefix ;)/lib -name \"libpython*.so\" .. \\\n && LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib make -j$( nproc ;) \\\n && make install\n#   Install MPI4PY\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py\nARG CHAINER_VERSION=6.0.0b1\nARG CUPY_VERSION=6.0.0b1\nARG CHAINERCV_VERSION=0.11.0\n#   Install Chainer family\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install chainer==$CHAINER_VERSION \\\n && $PIP install cupy-cuda92==$CUPY_VERSION \\\n && $PIP install chainercv==$CHAINERCV_VERSION\n#   Install other python packages\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml \\\n && $PIP install ipdb \\\n && $PIP install pynvvl-cuda92 --pre\n#   Set environment variable for OpenCV python wrapper\nENV PYTHONPATH=\"$HOME/lib/python3.6/site-packages:$PYTHONPATH\"\n#   Install Linuxbrew\nENV PATH=\"$PATH:$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\"\nRUN git clone https://github.com/Linuxbrew/brew.git ~/.linuxbrew/Homebrew \\\n && mkdir ~/.linuxbrew/bin \\\n && ln -s ~/.linuxbrew/Homebrew/bin/brew ~/.linuxbrew/bin/ \\\n && brew config\nRUN echo \"export PATH=$PATH:'$( brew --prefix ;)/bin:$( brew --prefix ;)/sbin'\" >> ~/.zshrc\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake cmake-curses-gui automake libgmp3-dev cpio libtool libyaml-dev valgrind software-properties-common unzip libz-dev vim apt-utils emacs zsh locales ruby htop libeigen3-dev python python-dev python-pip python-pip python-wheel python-setuptools python-numpy python3 python3-dev python3-pip python3-wheel python3-setuptools python3-numpy libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#  Install OpenMPI with cuda & verbs\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:$LIBRARY_PATH\"\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 \\\n && make install \\\n && ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\"\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -G sudo -u ${USER_ID} ${USER_NAME}\nRUN addgroup --gid ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\n#  Switch to USER_NAME\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#  Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#  Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#  Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn scikit-image jupyter matplotlib cython protobuf pandas h5py cmake\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$HOME/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$HOME/lib\"\nENV CPATH=\"$CPATH:/usr/local/include:$HOME/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include:$HOME/include' >> ~/.zshrc\n#  Install libjpeg-turbo\nRUN if [ ! -d $HOME/lib ] ; then mkdir $HOME/lib ; fi\nRUN cd $HOME/lib \\\n && mkdir libjpeg-turbo \\\n && cd libjpeg-turbo \\\n && curl -L -O https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.0.tar.gz \\\n && tar zxvf 2.0.0.tar.gz \\\n && rm -rf 2.0.0.tar.gz \\\n && cd libjpeg-turbo-2.0.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=${HOME} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ${HOME}/libjpeg-turbo\n#  Install opencv\nRUN cd $HOME/lib \\\n && mkdir opencv \\\n && cd opencv \\\n && curl -L -O https://github.com/opencv/opencv/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && curl -L -O https://github.com/opencv/opencv_contrib/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && cd opencv-3.4.3 \\\n && mkdir build \\\n && cd build\nRUN cd $HOME/lib/opencv/opencv-3.4.3/build \\\n && PYTHON=$( pyenv which python ;) \\\n && $( pyenv which cmake ;) -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=${HOME} -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_QT=OFF -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DWITH_CUBLAS=OFF -DWITH_CUFFT=OFF -DWITH_JPEG=ON -DBUILD_JPEG=OFF -DBUILD_TIFF=ON -DWITH_TIFF=OFF -DBUILD_PNG=ON -DWITH_PNG=OFF -DJPEG_INCLUDE_DIR=${HOME}/include -DJPEG_LIBRARY=${HOME}/lib/libjpeg.so -DOPENCV_EXTRA_MODULES_PATH=${HOME}/lib/opencv/opencv_contrib-3.4.3/modules -DBUILD_opencv_python3=ON -DPYTHON3_EXECUTABLE=$( which $PYTHON ;) -DPYTHON3_INCLUDE_DIR=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_INCLUDE_DIR2t=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_NUMPY_INCLUDE_DIRS=$( $PYTHON -c 'import numpy; print(numpy.get_include())' ;) -DPYTHON3_LIBRARY=find $( pyenv prefix ;)/lib -name \"libpython*.so\" .. \\\n && LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib make -j$( nproc ;) \\\n && make install\n#  Install MPI4PY\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py\nARG CHAINER_VERSION=6.0.0b1\nARG CUPY_VERSION=6.0.0b1\nARG CHAINERCV_VERSION=0.11.0\n#  Install Chainer family\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install chainer==$CHAINER_VERSION \\\n && $PIP install cupy-cuda92==$CUPY_VERSION \\\n && $PIP install chainercv==$CHAINERCV_VERSION\n#  Install other python packages\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml \\\n && $PIP install ipdb \\\n && $PIP install pynvvl-cuda92 --pre\n#  Set environment variable for OpenCV python wrapper\nENV PYTHONPATH=\"$HOME/lib/python3.6/site-packages:$PYTHONPATH\"\n#  Install Linuxbrew\nENV PATH=\"$PATH:$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\"\nRUN git clone https://github.com/Linuxbrew/brew.git ~/.linuxbrew/Homebrew \\\n && mkdir ~/.linuxbrew/bin \\\n && ln -s ~/.linuxbrew/Homebrew/bin/brew ~/.linuxbrew/bin/ \\\n && brew config\nRUN echo \"export PATH=$PATH:'$( brew --prefix ;)/bin:$( brew --prefix ;)/sbin'\" >> ~/.zshrc\n","injectedSmells":[],"originalDockerfileHash":"7a37503e864fe4c1adef51649de201ea","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu18.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake cmake-curses-gui automake libgmp3-dev cpio libtool libyaml-dev valgrind software-properties-common unzip libz-dev vim apt-utils emacs zsh locales ruby htop libeigen3-dev python python-dev python-pip python-pip python-wheel python-setuptools python-numpy python3 python3-dev python3-pip python3-wheel python3-setuptools python3-numpy libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#   Install OpenMPI with cuda & verbs\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:$LIBRARY_PATH\"\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 \\\n && make install \\\n && ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\"\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -G sudo -u ${USER_ID} ${USER_NAME}\nRUN addgroup --gid ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\n#   Switch to USER_NAME\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#   Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#   Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#   Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn scikit-image jupyter matplotlib cython protobuf pandas h5py cmake\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$HOME/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$HOME/lib\"\nENV CPATH=\"$CPATH:/usr/local/include:$HOME/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include:$HOME/include' >> ~/.zshrc\n#   Install libjpeg-turbo\nRUN if [ ! -d $HOME/lib ] ; then mkdir $HOME/lib ; fi\nRUN cd $HOME/lib \\\n && mkdir libjpeg-turbo \\\n && cd libjpeg-turbo \\\n && curl -L -O https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.0.tar.gz \\\n && tar zxvf 2.0.0.tar.gz \\\n && rm -rf 2.0.0.tar.gz \\\n && cd libjpeg-turbo-2.0.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=${HOME} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ${HOME}/libjpeg-turbo\n#   Install opencv\nRUN cd $HOME/lib \\\n && mkdir opencv \\\n && cd opencv \\\n && curl -L -O https://github.com/opencv/opencv/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && curl -L -O https://github.com/opencv/opencv_contrib/archive/3.4.3.zip \\\n && unzip 3.4.3.zip \\\n && rm -rf 3.4.3.zip \\\n && cd opencv-3.4.3 \\\n && mkdir build \\\n && cd build\nRUN cd $HOME/lib/opencv/opencv-3.4.3/build \\\n && PYTHON=$( pyenv which python ;) \\\n && $( pyenv which cmake ;) -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=${HOME} -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_QT=OFF -DWITH_OPENCL=OFF -DWITH_CUDA=OFF -DWITH_CUBLAS=OFF -DWITH_CUFFT=OFF -DWITH_JPEG=ON -DBUILD_JPEG=OFF -DBUILD_TIFF=ON -DWITH_TIFF=OFF -DBUILD_PNG=ON -DWITH_PNG=OFF -DJPEG_INCLUDE_DIR=${HOME}/include -DJPEG_LIBRARY=${HOME}/lib/libjpeg.so -DOPENCV_EXTRA_MODULES_PATH=${HOME}/lib/opencv/opencv_contrib-3.4.3/modules -DBUILD_opencv_python3=ON -DPYTHON3_EXECUTABLE=$( which $PYTHON ;) -DPYTHON3_INCLUDE_DIR=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_INCLUDE_DIR2t=$( $PYTHON -c 'from distutils.sysconfig import get_python_inc; print(get_python_inc())' ;) -DPYTHON3_NUMPY_INCLUDE_DIRS=$( $PYTHON -c 'import numpy; print(numpy.get_include())' ;) -DPYTHON3_LIBRARY=find $( pyenv prefix ;)/lib -name \"libpython*.so\" .. \\\n && LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib:$HOME/lib make -j$( nproc ;) \\\n && make install\n#   Install MPI4PY\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py\nARG CHAINER_VERSION=6.0.0b1\nARG CUPY_VERSION=6.0.0b1\nARG CHAINERCV_VERSION=0.11.0\n#   Install Chainer family\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install chainer==$CHAINER_VERSION \\\n && $PIP install cupy-cuda92==$CUPY_VERSION \\\n && $PIP install chainercv==$CHAINERCV_VERSION\n#   Install other python packages\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml \\\n && $PIP install ipdb \\\n && $PIP install pynvvl-cuda92 --pre\n#   Set environment variable for OpenCV python wrapper\nENV PYTHONPATH=\"$HOME/lib/python3.6/site-packages:$PYTHONPATH\"\n#   Install Linuxbrew\nENV PATH=\"$PATH:$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin\"\nRUN git clone https://github.com/Linuxbrew/brew.git ~/.linuxbrew/Homebrew \\\n && mkdir ~/.linuxbrew/bin \\\n && ln -s ~/.linuxbrew/Homebrew/bin/brew ~/.linuxbrew/bin/ \\\n && brew config\nRUN echo \"export PATH=$PATH:'$( brew --prefix ;)/bin:$( brew --prefix ;)/sbin'\" >> ~/.zshrc\n","originalDockerfileUglifiedHash":"9ad64ae1989782a0c902cf3626a44947","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/dbb752cfb91a1eadf6a626d00c0bcd4f2bf990ce.dockerfile"}