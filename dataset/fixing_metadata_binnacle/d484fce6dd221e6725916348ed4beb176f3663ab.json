{"seed":1702871565,"processedDockerfileHash":"19811d50581093f3848652895c57753e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04 AS shrimpdemo-build\n#   Prepare build environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 ruby=1:2.5.1 cmake=3.10.2-1ubuntu2.18.04.2 autoconf=2.69-11 curl=7.58.0-2ubuntu3.24 wget=1.19.4-1ubuntu2.2 libpcre3-dev=2:8.39-9ubuntu0.1 pkg-config=0.29.1-0ubuntu2 libjpeg-dev=8c-2ubuntu8 libpng-dev=1.6.34-1ubuntu0.18.04.2 libgif-dev=5.1.4-2ubuntu0.1 libtool=2.4.6-2 -qq -y\nRUN gem install Mxx_ru --version 1.6.14.10\nARG NASM_VERSION=2.13.03\nRUN echo \"*** Installing NASM-\"${NASM-VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.gz \\\n && tar xzf nasm-${NASM_VERSION}.tar.gz \\\n && rm /tmp/nasm-${NASM_VERSION}.tar.gz \\\n && cd /tmp/nasm-${NASM_VERSION} \\\n && sh configure \\\n && make all -j4 \\\n && make install \\\n && rm -rf /tmp/nasm-${NASM_VERSION}\nARG x265_VERSION=2.8\nRUN echo \"*** Installing x265-\"${x265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L http://ftp.videolan.org/pub/videolan/x265/x265_${x265_VERSION}.tar.gz \\\n && tar xzf x265_${x265_VERSION}.tar.gz \\\n && rm /tmp/x265_${x265_VERSION}.tar.gz \\\n && cd /tmp/x265_${x265_VERSION}/build/linux \\\n && cmake ../../source \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/x265_${x265_VERSION}\nARG libde265_VERSION=1.0.3\nARG libde265_ARCHIVE=v${libde265_VERSION}\nRUN echo \"*** Installing libde265-\"${libde265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libde265/archive/${libde265_ARCHIVE}.zip \\\n && unzip ${libde265_ARCHIVE}.zip \\\n && rm /tmp/${libde265_ARCHIVE}.zip \\\n && cd /tmp/libde265-${libde265_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libde265-${libde265_VERSION}\nARG libheif_VERSION=1.3.2\nRUN echo \"*** Installing libheif-\"${libheif_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libheif/archive/v${libheif_VERSION}.zip \\\n && unzip v${libheif_VERSION}.zip \\\n && rm /tmp/v${libheif_VERSION}.zip \\\n && cd /tmp/libheif-${libheif_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libheif-${libheif_VERSION}\nARG libwebp_VERSION=1.0.0\nRUN echo \"*** Installing libwebp-\"${libwebp_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${libwebp_VERSION}.tar.gz \\\n && tar xzf libwebp-${libwebp_VERSION}.tar.gz \\\n && rm /tmp/libwebp-${libwebp_VERSION}.tar.gz \\\n && cd /tmp/libwebp-${libwebp_VERSION} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libwebp-${libwebp_VERSION}\nARG ImageMagick_VERSION=7.0.7\nARG ImageMagick_PATCH=39\nARG ImageMagick_FullVersion=${ImageMagick_VERSION}-${ImageMagick_PATCH}\nRUN echo \"*** Installing ImageMagick-\"${ImageMagick_FullVersion} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/ImageMagick/ImageMagick/archive/${ImageMagick_FullVersion}.tar.gz \\\n && tar xzf ${ImageMagick_FullVersion}.tar.gz \\\n && rm /tmp/${ImageMagick_FullVersion}.tar.gz \\\n && cd /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && convert -version\nRUN mkdir /tmp/shrimp-dev\nCOPY externals.rb /tmp/shrimp-dev\nCOPY dev /tmp/shrimp-dev/dev\nRUN echo \"*** Building Shrimp ***\" \\\n && cd /tmp/shrimp-dev \\\n && mxxruexternals \\\n && cd dev \\\n && MXX_RU_CPP_TOOLSET=gcc_linux ruby shrimp/app/prj.rb --mxx-cpp-release \\\n && cp target/release/shrimp.app /root \\\n && cd /root \\\n && rm -rf /tmp/shrimp-dev\nFROM ubuntu:18.04 AS shrimpdemo\nARG ImageMagick_VERSION=7.0.7\nRUN apt-get update \\\n && apt-get install --no-install-recommends libjpeg8=8c-2ubuntu8 libpng16-16=1.6.34-1ubuntu0.18.04.2 libgif7=5.1.4-2ubuntu0.1 libgomp1=8.4.0-1ubuntu1~18.04 -qq -y\nCOPY --from=shrimpdemo-build /root/shrimp.app /root\nCOPY --from=shrimpdemo-build /usr/local/etc/ImageMagick-7 /usr/local/etc/ImageMagick-7\nCOPY --from=shrimpdemo-build /usr/local/lib/ImageMagick-${ImageMagick_VERSION} /usr/local/lib/ImageMagick-${ImageMagick_VERSION}\nCOPY --from=shrimpdemo-build /usr/local/lib/lib*.so /usr/local/lib/\nRUN ldconfig\n#   Shrimp runs on port 80.\nEXPOSE 80/tcp\nWORKDIR /root\n#   Start Shrimp server\nCMD ~/shrimp.app -a 0.0.0.0 -p 80 -i ~/images\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04 AS shrimpdemo-build\n#  Prepare build environment\nRUN apt-get update \\\n && apt-get install gcc g++ ruby cmake autoconf curl wget libpcre3-dev pkg-config libjpeg-dev libpng-dev libgif-dev libtool -qq -y\nRUN gem install Mxx_ru\nARG NASM_VERSION=2.13.03\nRUN echo \"*** Installing NASM-\"${NASM-VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.gz \\\n && tar xzf nasm-${NASM_VERSION}.tar.gz \\\n && rm /tmp/nasm-${NASM_VERSION}.tar.gz \\\n && cd /tmp/nasm-${NASM_VERSION} \\\n && sh configure \\\n && make all -j4 \\\n && make install \\\n && rm -rf /tmp/nasm-${NASM_VERSION}\nARG x265_VERSION=2.8\nRUN echo \"*** Installing x265-\"${x265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L http://ftp.videolan.org/pub/videolan/x265/x265_${x265_VERSION}.tar.gz \\\n && tar xzf x265_${x265_VERSION}.tar.gz \\\n && rm /tmp/x265_${x265_VERSION}.tar.gz \\\n && cd /tmp/x265_${x265_VERSION}/build/linux \\\n && cmake ../../source \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/x265_${x265_VERSION}\nARG libde265_VERSION=1.0.3\nARG libde265_ARCHIVE=v${libde265_VERSION}\nRUN echo \"*** Installing libde265-\"${libde265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libde265/archive/${libde265_ARCHIVE}.zip \\\n && unzip ${libde265_ARCHIVE}.zip \\\n && rm /tmp/${libde265_ARCHIVE}.zip \\\n && cd /tmp/libde265-${libde265_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libde265-${libde265_VERSION}\nARG libheif_VERSION=1.3.2\nRUN echo \"*** Installing libheif-\"${libheif_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libheif/archive/v${libheif_VERSION}.zip \\\n && unzip v${libheif_VERSION}.zip \\\n && rm /tmp/v${libheif_VERSION}.zip \\\n && cd /tmp/libheif-${libheif_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libheif-${libheif_VERSION}\nARG libwebp_VERSION=1.0.0\nRUN echo \"*** Installing libwebp-\"${libwebp_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${libwebp_VERSION}.tar.gz \\\n && tar xzf libwebp-${libwebp_VERSION}.tar.gz \\\n && rm /tmp/libwebp-${libwebp_VERSION}.tar.gz \\\n && cd /tmp/libwebp-${libwebp_VERSION} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libwebp-${libwebp_VERSION}\nARG ImageMagick_VERSION=7.0.7\nARG ImageMagick_PATCH=39\nARG ImageMagick_FullVersion=${ImageMagick_VERSION}-${ImageMagick_PATCH}\nRUN echo \"*** Installing ImageMagick-\"${ImageMagick_FullVersion} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/ImageMagick/ImageMagick/archive/${ImageMagick_FullVersion}.tar.gz \\\n && tar xzf ${ImageMagick_FullVersion}.tar.gz \\\n && rm /tmp/${ImageMagick_FullVersion}.tar.gz \\\n && cd /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && convert -version\nRUN mkdir /tmp/shrimp-dev\nCOPY externals.rb /tmp/shrimp-dev\nCOPY dev /tmp/shrimp-dev/dev\nRUN echo \"*** Building Shrimp ***\" \\\n && cd /tmp/shrimp-dev \\\n && mxxruexternals \\\n && cd dev \\\n && MXX_RU_CPP_TOOLSET=gcc_linux ruby shrimp/app/prj.rb --mxx-cpp-release \\\n && cp target/release/shrimp.app /root \\\n && cd /root \\\n && rm -rf /tmp/shrimp-dev\nFROM ubuntu:18.04 AS shrimpdemo\nARG ImageMagick_VERSION=7.0.7\nRUN apt-get update \\\n && apt-get install libjpeg8 libpng16-16 libgif7 libgomp1 -qq -y\nCOPY --from=shrimpdemo-build /root/shrimp.app /root\nCOPY --from=shrimpdemo-build /usr/local/etc/ImageMagick-7 /usr/local/etc/ImageMagick-7\nCOPY --from=shrimpdemo-build /usr/local/lib/ImageMagick-${ImageMagick_VERSION} /usr/local/lib/ImageMagick-${ImageMagick_VERSION}\nCOPY --from=shrimpdemo-build /usr/local/lib/lib*.so /usr/local/lib/\nRUN ldconfig\n#  Shrimp runs on port 80.\nEXPOSE 80/tcp\nWORKDIR /root\n#  Start Shrimp server\nCMD ~/shrimp.app -a 0.0.0.0 -p 80 -i ~/images\n","injectedSmells":[],"originalDockerfileHash":"51e10075a48cfc1d2e79cc1c657fc20d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04 AS shrimpdemo-build\n#   Prepare build environment\nRUN apt-get update \\\n && apt-get install gcc g++ ruby cmake autoconf curl wget libpcre3-dev pkg-config libjpeg-dev libpng-dev libgif-dev libtool -qq -y\nRUN gem install Mxx_ru\nARG NASM_VERSION=2.13.03\nRUN echo \"*** Installing NASM-\"${NASM-VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/nasm-${NASM_VERSION}.tar.gz \\\n && tar xzf nasm-${NASM_VERSION}.tar.gz \\\n && rm /tmp/nasm-${NASM_VERSION}.tar.gz \\\n && cd /tmp/nasm-${NASM_VERSION} \\\n && sh configure \\\n && make all -j4 \\\n && make install \\\n && rm -rf /tmp/nasm-${NASM_VERSION}\nARG x265_VERSION=2.8\nRUN echo \"*** Installing x265-\"${x265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L http://ftp.videolan.org/pub/videolan/x265/x265_${x265_VERSION}.tar.gz \\\n && tar xzf x265_${x265_VERSION}.tar.gz \\\n && rm /tmp/x265_${x265_VERSION}.tar.gz \\\n && cd /tmp/x265_${x265_VERSION}/build/linux \\\n && cmake ../../source \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/x265_${x265_VERSION}\nARG libde265_VERSION=1.0.3\nARG libde265_ARCHIVE=v${libde265_VERSION}\nRUN echo \"*** Installing libde265-\"${libde265_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libde265/archive/${libde265_ARCHIVE}.zip \\\n && unzip ${libde265_ARCHIVE}.zip \\\n && rm /tmp/${libde265_ARCHIVE}.zip \\\n && cd /tmp/libde265-${libde265_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libde265-${libde265_VERSION}\nARG libheif_VERSION=1.3.2\nRUN echo \"*** Installing libheif-\"${libheif_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/strukturag/libheif/archive/v${libheif_VERSION}.zip \\\n && unzip v${libheif_VERSION}.zip \\\n && rm /tmp/v${libheif_VERSION}.zip \\\n && cd /tmp/libheif-${libheif_VERSION} \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libheif-${libheif_VERSION}\nARG libwebp_VERSION=1.0.0\nRUN echo \"*** Installing libwebp-\"${libwebp_VERSION} \\\n && cd /tmp \\\n && curl -s -O -L https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${libwebp_VERSION}.tar.gz \\\n && tar xzf libwebp-${libwebp_VERSION}.tar.gz \\\n && rm /tmp/libwebp-${libwebp_VERSION}.tar.gz \\\n && cd /tmp/libwebp-${libwebp_VERSION} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && rm -rf /tmp/libwebp-${libwebp_VERSION}\nARG ImageMagick_VERSION=7.0.7\nARG ImageMagick_PATCH=39\nARG ImageMagick_FullVersion=${ImageMagick_VERSION}-${ImageMagick_PATCH}\nRUN echo \"*** Installing ImageMagick-\"${ImageMagick_FullVersion} \\\n && cd /tmp \\\n && curl -s -O -L https://github.com/ImageMagick/ImageMagick/archive/${ImageMagick_FullVersion}.tar.gz \\\n && tar xzf ${ImageMagick_FullVersion}.tar.gz \\\n && rm /tmp/${ImageMagick_FullVersion}.tar.gz \\\n && cd /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && ./configure \\\n && make -j4 \\\n && make install \\\n && ldconfig \\\n && rm -rf /tmp/ImageMagick-${ImageMagick_FullVersion} \\\n && convert -version\nRUN mkdir /tmp/shrimp-dev\nCOPY externals.rb /tmp/shrimp-dev\nCOPY dev /tmp/shrimp-dev/dev\nRUN echo \"*** Building Shrimp ***\" \\\n && cd /tmp/shrimp-dev \\\n && mxxruexternals \\\n && cd dev \\\n && MXX_RU_CPP_TOOLSET=gcc_linux ruby shrimp/app/prj.rb --mxx-cpp-release \\\n && cp target/release/shrimp.app /root \\\n && cd /root \\\n && rm -rf /tmp/shrimp-dev\nFROM ubuntu:18.04 AS shrimpdemo\nARG ImageMagick_VERSION=7.0.7\nRUN apt-get update \\\n && apt-get install libjpeg8 libpng16-16 libgif7 libgomp1 -qq -y\nCOPY --from=shrimpdemo-build /root/shrimp.app /root\nCOPY --from=shrimpdemo-build /usr/local/etc/ImageMagick-7 /usr/local/etc/ImageMagick-7\nCOPY --from=shrimpdemo-build /usr/local/lib/ImageMagick-${ImageMagick_VERSION} /usr/local/lib/ImageMagick-${ImageMagick_VERSION}\nCOPY --from=shrimpdemo-build /usr/local/lib/lib*.so /usr/local/lib/\nRUN ldconfig\n#   Shrimp runs on port 80.\nEXPOSE 80/tcp\nWORKDIR /root\n#   Start Shrimp server\nCMD ~/shrimp.app -a 0.0.0.0 -p 80 -i ~/images\n","originalDockerfileUglifiedHash":"8d1cdfc8edee4cb8335d3c94d0158473","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d484fce6dd221e6725916348ed4beb176f3663ab.dockerfile"}