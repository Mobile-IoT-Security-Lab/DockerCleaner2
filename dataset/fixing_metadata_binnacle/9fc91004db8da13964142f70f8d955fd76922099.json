{"seed":2067750719,"processedDockerfileHash":"adfe91e4cc32ad3b3907c2ced5c62e9e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This GDAL image comes with support for FileGDB and has Python 3.6 already installed.\n#   Based on official Ubuntu docker image.\nFROM geometalab/gdal-docker:v3.0.0\nUSER root\nENV PYTHONUNBUFFERED=\"non-empty-string\" \\\n    PYTHONIOENCODING=\"utf-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils locales gpg \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/*\n#  ################# SETUP POSTGIS DATABASE with UTF8 support #############\n#   explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\nRUN mkdir /docker-entrypoint-initdb.d\nRUN APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nENV PG_MAJOR=\"11\"\nENV POSTGIS_MAJOR=\"2.5\"\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-common \\\n && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} postgresql-${PG_MAJOR}-postgis-${POSTGIS_MAJOR} postgresql-${PG_MAJOR}-postgis-scripts postgresql-server-dev-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/postgresql \\\n && chown -R 999:999 /var/run/postgresql\nENV PATH=\"/usr/lib/postgresql/$PG_MAJOR/bin:$PATH\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p $PGDATA \\\n && chown -R 999:999 /var/lib/postgresql \\\n && pg_createcluster --locale=en_US.UTF-8 -d $PGDATA ${PG_MAJOR} main\n#  ################# END SETUP POSTGIS DATABASE with UTF8 support #############\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y make cmake g++ libboost-dev libboost-system-dev libboost-filesystem-dev libexpat1-dev zlib1g-dev libbz2-dev libpq-dev lua5.2 liblua5.2-dev libproj-dev curl git wget libstdc++6 osmctools \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:/usr/lib:${LD_LIBRARY_PATH}\"\nRUN ldconfig\nWORKDIR /root/osm2pgsql\n#   OSM2PGSQL\nENV OSM2PGSQL_VERSION=\"0.96.0\" \\\n    CXXFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H=1\"\nRUN mkdir src \\\n && cd src \\\n && GIT_SSL_NO_VERIFY=true git clone https://github.com/openstreetmap/osm2pgsql.git \\\n && cd osm2pgsql \\\n && git checkout ${OSM2PGSQL_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install\n#   correcter/more portable would be:\n#      cmake .. &&\\\n#      echo 'cmake worked' &&\\\n#      cmake --build . &&\\\n#      echo 'also make worked' &&\\\n#      cmake --build . --target install\nWORKDIR /var/data/garmin/additional_data/\n#   Fetch required additional data for Garmin as documented http://www.mkgmap.org.uk/download/mkgmap.html\nRUN wget -O /var/data/garmin/additional_data/bounds.zip http://osm.thkukuk.de/data/bounds-latest.zip \\\n && wget -O /var/data/garmin/additional_data/sea.zip http://osm.thkukuk.de/data/sea-latest.zip\nENV CODE=\"/code\"\nWORKDIR $CODE\n#   Install dependencies\nENV LIBUTF8PROCVERSION=\"2.3.0-1\"\nRUN wget -O libutf8proc-dev.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc-dev_${LIBUTF8PROCVERSION}_amd64.deb \\\n && wget -O libutf8proc1.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc2_${LIBUTF8PROCVERSION}_amd64.deb \\\n && dpkg --install libutf8proc1.deb libutf8proc-dev.deb \\\n && rm libutf8proc1.deb libutf8proc-dev.deb\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y pandoc libkakasi2-dev libicu-dev \\\n && git clone https://github.com/giggls/mapnik-german-l10n.git mapnik-german-l10n \\\n && cd mapnik-german-l10n \\\n && git checkout v2.5.1 \\\n && make \\\n && make install \\\n && make clean \\\n && DEBIAN_FRONTEND=noninteractive apt-get purge -y pandoc \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HOME=\"/home/py\"\n#   Workaround for AUFS-related(?) permission issue:\n#   See https://github.com/docker/docker/issues/783#issuecomment-56013588\nRUN mkdir /etc/ssl/private-copy ; mv /etc/ssl/private/* /etc/ssl/private-copy/ ; rm -r /etc/ssl/private ; mv /etc/ssl/private-copy /etc/ssl/private ; chmod -R 0700 /etc/ssl/private ; chown -R postgres /etc/ssl/private\n#   activate translit\nRUN mkdir -p $HOME/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/wait-for-it/wait-for-it.sh $HOME/entrypoint/wait-for-it.sh\nRUN sed -i '1ilocal all all trust' /etc/postgresql/${PG_MAJOR}/main/pg_hba.conf\nRUN chmod a+rx $CODE\nWORKDIR $HOME\nRUN pip3 install honcho\nCOPY ./requirements.txt $HOME/requirements.txt\nRUN pip3 install -r requirements.txt\n#   TODO: this is just a temporary solution, use pip for production as soon as geometalab.osmaxx is published there\nCOPY ./osmaxx $HOME/osmaxx\nCOPY ./conversion_service $HOME/conversion_service\n#   expose modules\nENV PYTHONPATH=\"PYTHONPATH:$HOME\"\nENV DJANGO_SETTINGS_MODULE=\"conversion_service.config.settings.worker\"\nENV WORKER_QUEUES=\"default high\"\nENTRYPOINT [\"/home/py/entrypoint/entrypoint.sh\"]\nCMD [\"honcho\", \"-f\", \"./conversion_service/Procfile.worker\", \"start\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This GDAL image comes with support for FileGDB and has Python 3.6 already installed.\n#  Based on official Ubuntu docker image.\nFROM geometalab/gdal-docker:v3.0.0\nUSER root\nENV PYTHONUNBUFFERED=\"non-empty-string\" \\\n    PYTHONIOENCODING=\"utf-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils locales gpg \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/*\n# ################# SETUP POSTGIS DATABASE with UTF8 support #############\n#  explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\nRUN mkdir /docker-entrypoint-initdb.d\nRUN APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nENV PG_MAJOR=\"11\"\nENV POSTGIS_MAJOR=\"2.5\"\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-common \\\n && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} postgresql-${PG_MAJOR}-postgis-${POSTGIS_MAJOR} postgresql-${PG_MAJOR}-postgis-scripts postgresql-server-dev-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/postgresql \\\n && chown -R 999:999 /var/run/postgresql\nENV PATH=\"/usr/lib/postgresql/$PG_MAJOR/bin:$PATH\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p $PGDATA \\\n && chown -R 999:999 /var/lib/postgresql \\\n && pg_createcluster --locale=en_US.UTF-8 -d $PGDATA ${PG_MAJOR} main\n# ################# END SETUP POSTGIS DATABASE with UTF8 support #############\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y make cmake g++ libboost-dev libboost-system-dev libboost-filesystem-dev libexpat1-dev zlib1g-dev libbz2-dev libpq-dev lua5.2 liblua5.2-dev libproj-dev curl git wget libstdc++6 osmctools \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:/usr/lib:${LD_LIBRARY_PATH}\"\nRUN ldconfig\nWORKDIR /root/osm2pgsql\n#  OSM2PGSQL\nENV OSM2PGSQL_VERSION=\"0.96.0\" \\\n    CXXFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H=1\"\nRUN mkdir src \\\n && cd src \\\n && GIT_SSL_NO_VERIFY=true git clone https://github.com/openstreetmap/osm2pgsql.git \\\n && cd osm2pgsql \\\n && git checkout ${OSM2PGSQL_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install\n#  correcter/more portable would be:\n#     cmake .. &&\\\n#     echo 'cmake worked' &&\\\n#     cmake --build . &&\\\n#     echo 'also make worked' &&\\\n#     cmake --build . --target install\nWORKDIR /var/data/garmin/additional_data/\n#  Fetch required additional data for Garmin as documented http://www.mkgmap.org.uk/download/mkgmap.html\nRUN wget -O /var/data/garmin/additional_data/bounds.zip http://osm.thkukuk.de/data/bounds-latest.zip \\\n && wget -O /var/data/garmin/additional_data/sea.zip http://osm.thkukuk.de/data/sea-latest.zip\nENV CODE=\"/code\"\nWORKDIR $CODE\n#  Install dependencies\nENV LIBUTF8PROCVERSION=\"2.3.0-1\"\nRUN wget -O libutf8proc-dev.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc-dev_${LIBUTF8PROCVERSION}_amd64.deb \\\n && wget -O libutf8proc1.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc2_${LIBUTF8PROCVERSION}_amd64.deb \\\n && dpkg --install libutf8proc1.deb libutf8proc-dev.deb \\\n && rm libutf8proc1.deb libutf8proc-dev.deb\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y pandoc libkakasi2-dev libicu-dev \\\n && git clone https://github.com/giggls/mapnik-german-l10n.git mapnik-german-l10n \\\n && cd mapnik-german-l10n \\\n && git checkout v2.5.1 \\\n && make \\\n && make install \\\n && make clean \\\n && DEBIAN_FRONTEND=noninteractive apt-get purge -y pandoc \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HOME=\"/home/py\"\n#  Workaround for AUFS-related(?) permission issue:\n#  See https://github.com/docker/docker/issues/783#issuecomment-56013588\nRUN mkdir /etc/ssl/private-copy ; mv /etc/ssl/private/* /etc/ssl/private-copy/ ; rm -r /etc/ssl/private ; mv /etc/ssl/private-copy /etc/ssl/private ; chmod -R 0700 /etc/ssl/private ; chown -R postgres /etc/ssl/private\n#  activate translit\nRUN mkdir -p $HOME/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/wait-for-it/wait-for-it.sh $HOME/entrypoint/wait-for-it.sh\nRUN sed -i '1ilocal all all trust' /etc/postgresql/${PG_MAJOR}/main/pg_hba.conf\nRUN chmod a+rx $CODE\nWORKDIR $HOME\nRUN pip3 install honcho\nADD ./requirements.txt $HOME/requirements.txt\nRUN pip3 install -r requirements.txt\n#  TODO: this is just a temporary solution, use pip for production as soon as geometalab.osmaxx is published there\nADD ./osmaxx $HOME/osmaxx\nADD ./conversion_service $HOME/conversion_service\n#  expose modules\nENV PYTHONPATH=\"PYTHONPATH:$HOME\"\nENV DJANGO_SETTINGS_MODULE=\"conversion_service.config.settings.worker\"\nENV WORKER_QUEUES=\"default high\"\nENTRYPOINT [\"/home/py/entrypoint/entrypoint.sh\"]\nCMD [\"honcho\", \"-f\", \"./conversion_service/Procfile.worker\", \"start\"]\n","injectedSmells":[],"originalDockerfileHash":"940ba5e58cd40098d3893c4e7b3f5f3f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This GDAL image comes with support for FileGDB and has Python 3.6 already installed.\n#   Based on official Ubuntu docker image.\nFROM geometalab/gdal-docker:v3.0.0\nUSER root\nENV PYTHONUNBUFFERED=\"non-empty-string\" \\\n    PYTHONIOENCODING=\"utf-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils locales gpg \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/*\n#  ################# SETUP POSTGIS DATABASE with UTF8 support #############\n#   explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\nRUN mkdir /docker-entrypoint-initdb.d\nRUN APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\nENV PG_MAJOR=\"11\"\nENV POSTGIS_MAJOR=\"2.5\"\nRUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main' $PG_MAJOR > /etc/apt/sources.list.d/pgdg.list \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-common \\\n && sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} postgresql-${PG_MAJOR}-postgis-${POSTGIS_MAJOR} postgresql-${PG_MAJOR}-postgis-scripts postgresql-server-dev-${PG_MAJOR} postgresql-contrib-${PG_MAJOR} \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /var/run/postgresql \\\n && chown -R 999:999 /var/run/postgresql\nENV PATH=\"/usr/lib/postgresql/$PG_MAJOR/bin:$PATH\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p $PGDATA \\\n && chown -R 999:999 /var/lib/postgresql \\\n && pg_createcluster --locale=en_US.UTF-8 -d $PGDATA ${PG_MAJOR} main\n#  ################# END SETUP POSTGIS DATABASE with UTF8 support #############\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y make cmake g++ libboost-dev libboost-system-dev libboost-filesystem-dev libexpat1-dev zlib1g-dev libbz2-dev libpq-dev lua5.2 liblua5.2-dev libproj-dev curl git wget libstdc++6 osmctools \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:/usr/lib:${LD_LIBRARY_PATH}\"\nRUN ldconfig\nWORKDIR /root/osm2pgsql\n#   OSM2PGSQL\nENV OSM2PGSQL_VERSION=\"0.96.0\" \\\n    CXXFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H=1\"\nRUN mkdir src \\\n && cd src \\\n && GIT_SSL_NO_VERIFY=true git clone https://github.com/openstreetmap/osm2pgsql.git \\\n && cd osm2pgsql \\\n && git checkout ${OSM2PGSQL_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install\n#   correcter/more portable would be:\n#      cmake .. &&\\\n#      echo 'cmake worked' &&\\\n#      cmake --build . &&\\\n#      echo 'also make worked' &&\\\n#      cmake --build . --target install\nWORKDIR /var/data/garmin/additional_data/\n#   Fetch required additional data for Garmin as documented http://www.mkgmap.org.uk/download/mkgmap.html\nRUN wget -O /var/data/garmin/additional_data/bounds.zip http://osm.thkukuk.de/data/bounds-latest.zip \\\n && wget -O /var/data/garmin/additional_data/sea.zip http://osm.thkukuk.de/data/sea-latest.zip\nENV CODE=\"/code\"\nWORKDIR $CODE\n#   Install dependencies\nENV LIBUTF8PROCVERSION=\"2.3.0-1\"\nRUN wget -O libutf8proc-dev.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc-dev_${LIBUTF8PROCVERSION}_amd64.deb \\\n && wget -O libutf8proc1.deb http://ftp.ch.debian.org/debian/pool/main/u/utf8proc/libutf8proc2_${LIBUTF8PROCVERSION}_amd64.deb \\\n && dpkg --install libutf8proc1.deb libutf8proc-dev.deb \\\n && rm libutf8proc1.deb libutf8proc-dev.deb\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y pandoc libkakasi2-dev libicu-dev \\\n && git clone https://github.com/giggls/mapnik-german-l10n.git mapnik-german-l10n \\\n && cd mapnik-german-l10n \\\n && git checkout v2.5.1 \\\n && make \\\n && make install \\\n && make clean \\\n && DEBIAN_FRONTEND=noninteractive apt-get purge -y pandoc \\\n && DEBIAN_FRONTEND=noninteractive apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HOME=\"/home/py\"\n#   Workaround for AUFS-related(?) permission issue:\n#   See https://github.com/docker/docker/issues/783#issuecomment-56013588\nRUN mkdir /etc/ssl/private-copy ; mv /etc/ssl/private/* /etc/ssl/private-copy/ ; rm -r /etc/ssl/private ; mv /etc/ssl/private-copy /etc/ssl/private ; chmod -R 0700 /etc/ssl/private ; chown -R postgres /etc/ssl/private\n#   activate translit\nRUN mkdir -p $HOME/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/osmaxx/worker $HOME/entrypoint\nCOPY ./docker_entrypoint/wait-for-it/wait-for-it.sh $HOME/entrypoint/wait-for-it.sh\nRUN sed -i '1ilocal all all trust' /etc/postgresql/${PG_MAJOR}/main/pg_hba.conf\nRUN chmod a+rx $CODE\nWORKDIR $HOME\nRUN pip3 install honcho\nADD ./requirements.txt $HOME/requirements.txt\nRUN pip3 install -r requirements.txt\n#   TODO: this is just a temporary solution, use pip for production as soon as geometalab.osmaxx is published there\nADD ./osmaxx $HOME/osmaxx\nADD ./conversion_service $HOME/conversion_service\n#   expose modules\nENV PYTHONPATH=\"PYTHONPATH:$HOME\"\nENV DJANGO_SETTINGS_MODULE=\"conversion_service.config.settings.worker\"\nENV WORKER_QUEUES=\"default high\"\nENTRYPOINT [\"/home/py/entrypoint/entrypoint.sh\"]\nCMD [\"honcho\", \"-f\", \"./conversion_service/Procfile.worker\", \"start\"]\n","originalDockerfileUglifiedHash":"d59b836f40dbfef09b90d9dd8ebe1ec4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9fc91004db8da13964142f70f8d955fd76922099.dockerfile"}