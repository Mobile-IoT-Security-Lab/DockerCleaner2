{"seed":2305031778,"processedDockerfileHash":"398c231679643f7a3516774a98c9603a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:bionic AS build-cache-base\nLABEL maintainer=\"rluckie@cisco.com\" \\\n      kdk=\"\"\nCOPY provision.sh /tmp/provision.sh\n#  ######################################\n#   Install OS packages\nRUN /tmp/provision.sh layer_install_os_packages\n#  ######################################\n#   Install python-based utils and libs\nRUN /tmp/provision.sh layer_install_python_based_utils_and_libs\n#  ######################################\n#   Install apps (with pinned version) that are not provided by the OS packages.\nRUN /tmp/provision.sh layer_install_apps_not_provided_by_os_packages\n#  ######################################\n#   go get installs\nFROM build-cache-base AS build-cache-multistage-goinstall\nCOPY provision.sh /tmp/provision.sh\nRUN /tmp/provision.sh layer_go_get_installs\n#  ######################################\n#   Build apps that are not provided by the OS packages.\nFROM build-cache-multistage-goinstall AS build-cache-multistage-compiler\nCOPY provision.sh /tmp/provision.sh\nRUN echo \"Clean out /usr/local\" \\\n && rm -rf /usr/local/*\nRUN /tmp/provision.sh layer_build_apps_not_provided_by_os_packages\n#  ######################################\n#   Piece together the final image\nFROM build-cache-base AS the-final-image\nCOPY --from=build-cache-multistage-goinstall /go/bin/ /go/bin/\nCOPY --from=build-cache-multistage-compiler /usr/local/ /usr/local/\nCOPY --from=build-cache-multistage-compiler /etc/shells /etc/shells\n#  ######################################\n#   Copy local files\nCOPY usr/local/bin/ /usr/local/bin/\nCOPY lib/systemd/system/ /lib/systemd/system/\nRUN systemctl enable kdk-setup.service \\\n && ldconfig\n#  ######################################\n#   Configure systemd and other Miscellaneous configuration bits\n#    Mostly taken from:\n#    https://github.com/dramaturg/docker-debian-systemd/blob/master/Dockerfile\nRUN echo \"Configuring systemd\" \\\n && cd /lib/systemd/system/sysinit.target.wants/ \\\n && ls | grep -v systemd-tmpfiles-setup.service | xargs rm -f \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && systemctl mask -- tmp.mount etc-hostname.mount etc-hosts.mount etc-resolv.conf.mount -.mount swap.target getty.target getty-static.service dev-mqueue.mount cgproxy.service systemd-tmpfiles-setup-dev.service systemd-remount-fs.service systemd-ask-password-wall.path systemd-logind.service \\\n && systemctl mask -- cron.service dbus.service exim4.service ntp.service \\\n && systemctl set-default multi-user.target || true \\\n && sed -ri /etc/systemd/journald.conf -e 's!^#?Storage=.*!Storage=volatile!' \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && sed -i 's/#Port 22/Port 2022/' /etc/ssh/sshd_config \\\n && mkdir /etc/docker \\\n && echo '{\"storage-driver\": \"vfs\"}' > /etc/docker/daemon.json\n#  ######################################\n#   Ensure systemd starts, which subsequently starts ssh and docker\nEXPOSE 2022/tcp\nCMD [\"/lib/systemd/systemd\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:bionic AS build-cache-base\nLABEL maintainer=\"rluckie@cisco.com\" \\\n      kdk=\"\"\nCOPY provision.sh /tmp/provision.sh\n# ######################################\n#  Install OS packages\nRUN /tmp/provision.sh layer_install_os_packages\n# ######################################\n#  Install python-based utils and libs\nRUN /tmp/provision.sh layer_install_python_based_utils_and_libs\n# ######################################\n#  Install apps (with pinned version) that are not provided by the OS packages.\nRUN /tmp/provision.sh layer_install_apps_not_provided_by_os_packages\n# ######################################\n#  go get installs\nFROM build-cache-base AS build-cache-multistage-goinstall\nCOPY provision.sh /tmp/provision.sh\nRUN /tmp/provision.sh layer_go_get_installs\n# ######################################\n#  Build apps that are not provided by the OS packages.\nFROM build-cache-multistage-goinstall AS build-cache-multistage-compiler\nCOPY provision.sh /tmp/provision.sh\nRUN echo \"Clean out /usr/local\" \\\n && rm -rf /usr/local/*\nRUN /tmp/provision.sh layer_build_apps_not_provided_by_os_packages\n# ######################################\n#  Piece together the final image\nFROM build-cache-base AS the-final-image\nCOPY --from=build-cache-multistage-goinstall /go/bin/ /go/bin/\nCOPY --from=build-cache-multistage-compiler /usr/local/ /usr/local/\nCOPY --from=build-cache-multistage-compiler /etc/shells /etc/shells\n# ######################################\n#  Copy local files\nCOPY usr/local/bin/ /usr/local/bin/\nCOPY lib/systemd/system/ /lib/systemd/system/\nRUN systemctl enable kdk-setup.service \\\n && ldconfig\n# ######################################\n#  Configure systemd and other Miscellaneous configuration bits\n#   Mostly taken from:\n#   https://github.com/dramaturg/docker-debian-systemd/blob/master/Dockerfile\nRUN echo \"Configuring systemd\" \\\n && cd /lib/systemd/system/sysinit.target.wants/ \\\n && ls | grep -v systemd-tmpfiles-setup.service | xargs rm -f \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && systemctl mask -- tmp.mount etc-hostname.mount etc-hosts.mount etc-resolv.conf.mount -.mount swap.target getty.target getty-static.service dev-mqueue.mount cgproxy.service systemd-tmpfiles-setup-dev.service systemd-remount-fs.service systemd-ask-password-wall.path systemd-logind.service \\\n && systemctl mask -- cron.service dbus.service exim4.service ntp.service \\\n && systemctl set-default multi-user.target || true \\\n && sed -ri /etc/systemd/journald.conf -e 's!^#?Storage=.*!Storage=volatile!' \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && sed -i 's/#Port 22/Port 2022/' /etc/ssh/sshd_config \\\n && mkdir /etc/docker \\\n && echo '{\"storage-driver\": \"vfs\"}' > /etc/docker/daemon.json\n# ######################################\n#  Ensure systemd starts, which subsequently starts ssh and docker\nEXPOSE 2022/tcp\nCMD [\"/lib/systemd/systemd\"]\n","injectedSmells":[],"originalDockerfileHash":"31049d4fbae7da71a2bcf7798963fe62","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:bionic AS build-cache-base\nLABEL maintainer=\"rluckie@cisco.com\" \\\n      kdk=\"\"\nCOPY provision.sh /tmp/provision.sh\n#  ######################################\n#   Install OS packages\nRUN /tmp/provision.sh layer_install_os_packages\n#  ######################################\n#   Install python-based utils and libs\nRUN /tmp/provision.sh layer_install_python_based_utils_and_libs\n#  ######################################\n#   Install apps (with pinned version) that are not provided by the OS packages.\nRUN /tmp/provision.sh layer_install_apps_not_provided_by_os_packages\n#  ######################################\n#   go get installs\nFROM build-cache-base AS build-cache-multistage-goinstall\nCOPY provision.sh /tmp/provision.sh\nRUN /tmp/provision.sh layer_go_get_installs\n#  ######################################\n#   Build apps that are not provided by the OS packages.\nFROM build-cache-multistage-goinstall AS build-cache-multistage-compiler\nCOPY provision.sh /tmp/provision.sh\nRUN echo \"Clean out /usr/local\" \\\n && rm -rf /usr/local/*\nRUN /tmp/provision.sh layer_build_apps_not_provided_by_os_packages\n#  ######################################\n#   Piece together the final image\nFROM build-cache-base AS the-final-image\nCOPY --from=build-cache-multistage-goinstall /go/bin/ /go/bin/\nCOPY --from=build-cache-multistage-compiler /usr/local/ /usr/local/\nCOPY --from=build-cache-multistage-compiler /etc/shells /etc/shells\n#  ######################################\n#   Copy local files\nCOPY usr/local/bin/ /usr/local/bin/\nCOPY lib/systemd/system/ /lib/systemd/system/\nRUN systemctl enable kdk-setup.service \\\n && ldconfig\n#  ######################################\n#   Configure systemd and other Miscellaneous configuration bits\n#    Mostly taken from:\n#    https://github.com/dramaturg/docker-debian-systemd/blob/master/Dockerfile\nRUN echo \"Configuring systemd\" \\\n && cd /lib/systemd/system/sysinit.target.wants/ \\\n && ls | grep -v systemd-tmpfiles-setup.service | xargs rm -f \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && systemctl mask -- tmp.mount etc-hostname.mount etc-hosts.mount etc-resolv.conf.mount -.mount swap.target getty.target getty-static.service dev-mqueue.mount cgproxy.service systemd-tmpfiles-setup-dev.service systemd-remount-fs.service systemd-ask-password-wall.path systemd-logind.service \\\n && systemctl mask -- cron.service dbus.service exim4.service ntp.service \\\n && systemctl set-default multi-user.target || true \\\n && sed -ri /etc/systemd/journald.conf -e 's!^#?Storage=.*!Storage=volatile!' \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && sed -i 's/#Port 22/Port 2022/' /etc/ssh/sshd_config \\\n && mkdir /etc/docker \\\n && echo '{\"storage-driver\": \"vfs\"}' > /etc/docker/daemon.json\n#  ######################################\n#   Ensure systemd starts, which subsequently starts ssh and docker\nEXPOSE 2022/tcp\nCMD [\"/lib/systemd/systemd\"]\n","originalDockerfileUglifiedHash":"fecab02f96002f7ce4eb1c7c97198304","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e146533d91783295e0bbce6d235ee339052c6a03.dockerfile"}