{"seed":3169248592,"processedDockerfileHash":"4edf3636ffb4e870548d779a9fd1581e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04 AS build-native-env\nENV OPENCV_VERSION=\"4.1.0\"\n#  ENV OPENCVSHARP_VERSION=4.1.0.20190416\n#  ENV DOTNETCORE_SDK=2.1.104\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=1.6.14 software-properties-common=0.96.24.32.20 wget=1.19.4-1ubuntu2.2 unzip=6.0-21ubuntu1.2 curl=7.58.0-2ubuntu3.24 ca-certificates=20211016ubuntu0.18.04.1 -y\n#  bzip2 \\\n#  grep sed dpkg \n#   Install opencv dependencies\nRUN cd ~\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 cmake=3.10.2-1ubuntu2.18.04.2 git=1:2.17.1-1ubuntu0.17 gfortran=4:7.4.0-1ubuntu2.3 libjpeg8-dev=8c-2ubuntu8 libpng-dev=1.6.34-1ubuntu0.18.04.2 software-properties-common=0.96.24.32.20 -y\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends libjasper1 libtiff-dev=4.0.9-5ubuntu0.10 libavcodec-dev=7:3.4.11-0ubuntu0.1 libavformat-dev=7:3.4.11-0ubuntu0.1 libswscale-dev=7:3.4.11-0ubuntu0.1 libdc1394-22-dev=2.2.5-1 libxine2-dev=1.2.8-2build2 libv4l-dev=1.14.2-1 -y\nRUN cd /usr/include/linux\nRUN ln -s -f ../libv4l1-videodev.h videodev.h\nRUN cd ~\nRUN apt-get install --no-install-recommends libgstreamer1.0-dev=1.14.5-0ubuntu1~18.04.2 libgstreamer-plugins-base1.0-dev=1.14.5-0ubuntu1~18.04.3 libgtk2.0-dev=2.24.32-1ubuntu1 libtbb-dev=2017~U7-8 qt5-default=5.9.5+dfsg-0ubuntu2.6 libatlas-base-dev=3.10.3-5 libfaac-dev=1.29.7.7-1 libmp3lame-dev=3.100-2 libtheora-dev=1.1.1+dfsg.1-14 libvorbis-dev=1.3.5-4.2 libxvidcore-dev=2:1.3.5-1 libopencore-amrnb-dev=0.1.3-2.1 libopencore-amrwb-dev=0.1.3-2.1 libavresample-dev=7:3.4.11-0ubuntu0.1 x264=2:0.152.2854+gite9a5903-2 v4l-utils=1.14.2-1 -y\n#   Setup OpenCV source\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv-${OPENCV_VERSION} opencv\n#   Setup opencv-contrib Source\nRUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib\n#   Build OpenCV\nRUN cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_EXAMPLES=OFF -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF .. \\\n && make -j4 \\\n && make install \\\n && ldconfig\nWORKDIR /\n#   Download OpenCvSharp\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN cd opencvsharp \\\n && git fetch --all --tags --prune\n#   Install the Extern lib.\nWORKDIR /opencvsharp/src\nRUN mkdir /opencvsharp/make\nRUN cd /opencvsharp/make \\\n && cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src \\\n && make -j4 \\\n && make install\nRUN ls /opencvsharp/make\nFROM microsoft/dotnet:2.1-sdk AS build-dotnet-env\nCOPY --from=build-native-env /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so ./\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN pwd\nRUN ls\n#   Install Build the C# part of OpenCvSharp\nWORKDIR /opencvsharp/src/OpenCvSharp\nRUN cd /opencvsharp/src/OpenCvSharp \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Blob\nRUN cd /opencvsharp/src/OpenCvSharp.Blob \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Extensions\nRUN cd /opencvsharp/src/OpenCvSharp.Extensions \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nRUN mkdir /opencvsharp/build\nWORKDIR /opencvsharp/build\nRUN cp /libOpenCvSharpExtern.so .\nRUN cp /opencvsharp/src/OpenCvSharp/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Blob/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Extensions/bin/Release/netstandard2.0/* .\nRUN pwd\nRUN ls\nFROM microsoft/dotnet:2.2-runtime\nWORKDIR /app\nCOPY --from=build-dotnet-env /opencvsharp/build ./\nRUN pwd\nRUN ls\n#  ENTRYPOINT [\"ls\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04 AS build-native-env\nENV OPENCV_VERSION=\"4.1.0\"\n# ENV OPENCVSHARP_VERSION=4.1.0.20190416\n# ENV DOTNETCORE_SDK=2.1.104\nRUN apt-get update \\\n && apt-get install -y apt-transport-https software-properties-common wget unzip curl ca-certificates\n# bzip2 \\\n# grep sed dpkg \n#  Install opencv dependencies\nRUN cd ~\nRUN apt-get update \\\n && apt-get install -y build-essential cmake git gfortran libjpeg8-dev libpng-dev software-properties-common\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update \\\n && apt-get install -y libjasper1 libtiff-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev\nRUN cd /usr/include/linux\nRUN ln -s -f ../libv4l1-videodev.h videodev.h\nRUN cd ~\nRUN apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libtbb-dev qt5-default libatlas-base-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev libavresample-dev x264 v4l-utils\n#  Setup OpenCV source\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv-${OPENCV_VERSION} opencv\n#  Setup opencv-contrib Source\nRUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib\n#  Build OpenCV\nRUN cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_EXAMPLES=OFF -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF .. \\\n && make -j4 \\\n && make install \\\n && ldconfig\nWORKDIR /\n#  Download OpenCvSharp\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN cd opencvsharp \\\n && git fetch --all --tags --prune\n#  Install the Extern lib.\nWORKDIR /opencvsharp/src\nRUN mkdir /opencvsharp/make\nRUN cd /opencvsharp/make \\\n && cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src \\\n && make -j4 \\\n && make install\nRUN ls /opencvsharp/make\nFROM microsoft/dotnet:2.1-sdk AS build-dotnet-env\nCOPY --from=build-native-env /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so ./\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN pwd\nRUN ls\n#  Install Build the C# part of OpenCvSharp\nWORKDIR /opencvsharp/src/OpenCvSharp\nRUN cd /opencvsharp/src/OpenCvSharp \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Blob\nRUN cd /opencvsharp/src/OpenCvSharp.Blob \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Extensions\nRUN cd /opencvsharp/src/OpenCvSharp.Extensions \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nRUN mkdir /opencvsharp/build\nWORKDIR /opencvsharp/build\nRUN cp /libOpenCvSharpExtern.so .\nRUN cp /opencvsharp/src/OpenCvSharp/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Blob/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Extensions/bin/Release/netstandard2.0/* .\nRUN pwd\nRUN ls\nFROM microsoft/dotnet:2.2-runtime\nWORKDIR /app\nCOPY --from=build-dotnet-env /opencvsharp/build ./\nRUN pwd\nRUN ls\n# ENTRYPOINT [\"ls\"]\n","injectedSmells":[],"originalDockerfileHash":"317c381e1626fb1e499ddc0cbce6e550","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04 AS build-native-env\nENV OPENCV_VERSION=\"4.1.0\"\n#  ENV OPENCVSHARP_VERSION=4.1.0.20190416\n#  ENV DOTNETCORE_SDK=2.1.104\nRUN apt-get update \\\n && apt-get install apt-transport-https software-properties-common wget unzip curl ca-certificates -y\n#  bzip2 \\\n#  grep sed dpkg \n#   Install opencv dependencies\nRUN cd ~\nRUN apt-get update \\\n && apt-get install build-essential cmake git gfortran libjpeg8-dev libpng-dev software-properties-common -y\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update \\\n && apt-get install libjasper1 libtiff-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libv4l-dev -y\nRUN cd /usr/include/linux\nRUN ln -s -f ../libv4l1-videodev.h videodev.h\nRUN cd ~\nRUN apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libtbb-dev qt5-default libatlas-base-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev libavresample-dev x264 v4l-utils -y\n#   Setup OpenCV source\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv-${OPENCV_VERSION} opencv\n#   Setup opencv-contrib Source\nRUN wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && rm ${OPENCV_VERSION}.zip \\\n && mv opencv_contrib-${OPENCV_VERSION} opencv_contrib\n#   Build OpenCV\nRUN cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_EXAMPLES=OFF -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF .. \\\n && make -j4 \\\n && make install \\\n && ldconfig\nWORKDIR /\n#   Download OpenCvSharp\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN cd opencvsharp \\\n && git fetch --all --tags --prune\n#   Install the Extern lib.\nWORKDIR /opencvsharp/src\nRUN mkdir /opencvsharp/make\nRUN cd /opencvsharp/make \\\n && cmake -D CMAKE_INSTALL_PREFIX=/opencvsharp/make /opencvsharp/src \\\n && make -j4 \\\n && make install\nRUN ls /opencvsharp/make\nFROM microsoft/dotnet:2.1-sdk AS build-dotnet-env\nCOPY --from=build-native-env /opencvsharp/make/OpenCvSharpExtern/libOpenCvSharpExtern.so ./\nRUN git clone https://github.com/shimat/opencvsharp.git\nRUN pwd\nRUN ls\n#   Install Build the C# part of OpenCvSharp\nWORKDIR /opencvsharp/src/OpenCvSharp\nRUN cd /opencvsharp/src/OpenCvSharp \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Blob\nRUN cd /opencvsharp/src/OpenCvSharp.Blob \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nWORKDIR /opencvsharp/src/OpenCvSharp.Extensions\nRUN cd /opencvsharp/src/OpenCvSharp.Extensions \\\n && dotnet restore\nRUN dotnet build -c Release -f netstandard2.0\nRUN mkdir /opencvsharp/build\nWORKDIR /opencvsharp/build\nRUN cp /libOpenCvSharpExtern.so .\nRUN cp /opencvsharp/src/OpenCvSharp/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Blob/bin/Release/netstandard2.0/* .\nRUN cp /opencvsharp/src/OpenCvSharp.Extensions/bin/Release/netstandard2.0/* .\nRUN pwd\nRUN ls\nFROM microsoft/dotnet:2.2-runtime\nWORKDIR /app\nCOPY --from=build-dotnet-env /opencvsharp/build ./\nRUN pwd\nRUN ls\n#  ENTRYPOINT [\"ls\"]\n","originalDockerfileUglifiedHash":"6d6d4eb2035d4d1fa0694e34721f1fb4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b5f2543bdd25a34e1ee7c95a194b66c9e24ca194.dockerfile"}