{"seed":3230967848,"processedDockerfileHash":"201ede49f97a75c71e8589743a93711b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Loaders\n#   Image Loader\n#   Markup Loader\n#   References:\n#   http://docs.opencv.org/3.0-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html\n#   http://rodrigoberriel.com/2014/10/installing-opencv-3-0-0-on-ubuntu-14-04/\nFROM ubuntu:14.04\nMAINTAINER Ganesh Iyer \"lastlegion@gmail.com\"\n#  ## update\nRUN :\n#   RUN apt-get -q -y upgrade\n#   RUN apt-get -q -y dist-upgrade\n#   RUN apt-get install -q -y libcurl3 \n#  ## need build tools for building openslide and later iipsrv\nRUN (apt-get update ;apt-get install --no-install-recommends libcurl3=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 autoconf=2.69-6 automake=1:1.14.1-2ubuntu1 make=3.81-8.2ubuntu3 libtool=2.4.2-1.7ubuntu1 pkg-config=0.26-1ubuntu4 cmake=2.8.12.2-0ubuntu3 -q -y )\nRUN mkdir /root/src\n#  ## prereqs for openslide\nRUN (apt-get update ;apt-get install --no-install-recommends zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libpng12-dev=1.2.50-1ubuntu2.14.04.3 libjpeg-dev=8c-2ubuntu8 libtiff5-dev=4.0.3-7ubuntu0.11 libgdk-pixbuf2.0-dev=2.30.7-0ubuntu1.8 libxml2-dev=2.9.1+dfsg1-3ubuntu4.13 libsqlite3-dev=3.8.2-1ubuntu2.2 libcairo2-dev=1.13.0~20140204-0ubuntu1.1 libglib2.0-dev=2.40.2-0ubuntu1.1 -q -y )\nWORKDIR /root/src\n#   Openslide\nRUN (apt-get update ;apt-get install --no-install-recommends openslide-tools=3.4.0-1 python3-openslide=0.5.1-2 python3=3.4.0-0ubuntu2 python3-setuptools=3.3-1ubuntu2 python3-pip=1.5.4-1ubuntu4 nodejs=0.10.25~dfsg2-2ubuntu1.2 npm=1.3.10~dfsg-1 -y )\n#   Data Loader API\nRUN mkdir -p /root/dataloader\nWORKDIR /root/dataloader\nEXPOSE 3001/tcp\nRUN git clone --recursive https://github.com/camicroscope/ImageLoader.git .\nRUN git submodule update --recursive --remote\nRUN npm install\nRUN [\"pip3\", \"install\", \"-r\", \"/root/dataloader/DataLoader/requirements.txt\"]\nEXPOSE 3000/tcp\n#  ##################\n#   Annotations Loader\n#  ##################\n#   RUN apt-get -y install libopencv-dev build-essential cmake git \\\n#   \t\tlibgtk2.0-dev pkg-config python-dev python-numpy \\\n#   \t\tlibdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev \\\n#   \t\tlibtiff4-dev libjasper-dev libavcodec-dev \\\n#   \t\tlibavformat-dev libswscale-dev libxine-dev \\\n#   \t\tlibgstreamer0.10-dev libgstreamer-plugins-base0.10-dev \\\n#   \t\tlibv4l-dev libtbb-dev libqt4-dev  libmp3lame-dev \\\n#   \t\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n#   \t\tlibtheora-dev libvorbis-dev libxvidcore-dev \\\n#   \t\tx264 v4l-utils unzip wget\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 pkg-config=0.26-1ubuntu4 unzip=6.0-9ubuntu1.5 wget=1.15-1ubuntu1.14.04.5 curl=7.35.0-1ubuntu2.20 -y )\n#   Install JDK\nRUN (apt-get update ;apt-get install --no-install-recommends openjdk-7-jdk=7u211-2.6.17-0ubuntu0.1 ant=1.9.3-2ubuntu0.1 -y )\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-openjdk-amd64/\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   COPY opencv3_0_0_java.sh /root/\n#   RUN sh opencv3_0_0_java.sh\n#   Install OpenCV 3.1.0 \nWORKDIR /tmp\nRUN curl -O -J -L https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip opencv-3.1.0.zip \\\n && mkdir /tmp/opencv-build \\\n && cd /tmp/opencv-build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D CMAKE_INSTALL_PREFIX=/usr/local ../opencv-3.1.0 \\\n && make -j4 \\\n && make install \\\n && cd /tmp \\\n && rm -rf opencv-build \\\n && rm -rf opencv-3.1.0*\nWORKDIR /root\n#   Install nuclear segmentation results program\n#   RUN apt-get -y install gradle\n#   WORKDIR /root\n#   COPY nuclear-segmentation-results2 /root/nuclear-segmentation-results\n#   ENV OPENCV_DIR /root/OpenCV/opencv-3.0.0/build\n#   ENV OPENCV_JAVA_LIB /root/OpenCV/opencv-3.0.0/build/bin/opencv-300.jar\nENV OPENCV_JAVA_DIR=\"/usr/local/share/OpenCV/java\"\nENV OPENCV_JAVA_LIB=\"$OPENCV_JAVA_DIR/opencv-310.jar\"\n#   WORKDIR /root/nuclear-segmentation-results\n#   RUN gradle build\n#   RUN apt-get -y install execstack \n#   RUN execstack -c /root/OpenCV/opencv-3.0.0/build/lib/libopencv_java300.so\nWORKDIR /root\nRUN git clone https://github.com/camicroscope/uAIMDataLoader.git annotationloader\nWORKDIR /root/annotationloader\nRUN npm install\nRUN npm install yargs@17.7.1\nCOPY config.js.annotationsloader config.js\nCOPY config.js.dataloader /root/dataloader/config.js\nWORKDIR /root\n#   RUN apt-get -q update\n#   RUN apt-get -q -y upgrade\nRUN \"sh\" \"-c\" \"echo nameserver 8.8.8.8 >> /etc/resolv.conf\"\nRUN (apt-get update ;apt-get install --no-install-recommends redis-server=2:2.8.4-2ubuntu0.2 -y )\n#   Install forever\nRUN ln -s \"$( which nodejs ;)\" /usr/bin/node\nRUN npm install forever@4.0.3 -g\n#   Install new zip loader\nRUN (apt-get update ;apt-get install --no-install-recommends curl=7.35.0-1ubuntu2.20 -y -q )\nRUN curl -O -J -L https://services.gradle.org/distributions/gradle-2.13-bin.zip \\\n && unzip gradle-2.13-bin.zip \\\n && mv gradle-2.13 /usr/local \\\n && rm -rf gradle-2.13*\nENV GRADLE_HOME=\"/usr/local/gradle-2.13\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\n#   ENV OPENCV_JAVA_DIR /root/OpenCV/opencv-3.0.0/build\nENV FEATUREDB_DIR=\"/usr/local/pathomics_featuredb\"\nWORKDIR /tmp/\nRUN git clone https://github.com/SBU-BMI/pathomics_featuredb \\\n && cd pathomics_featuredb/src \\\n && gradle build \\\n && gradle installDist \\\n && cd /tmp \\\n && mv pathomics_featuredb /usr/local/. \\\n && cp $FEATUREDB_DIR/docker_scripts/run* /usr/local/bin/. \\\n && cp $FEATUREDB_DIR/script/run* /usr/local/bin/. \\\n && cd /tmp\nCOPY redis.conf /etc/redis/redis.conf\nWORKDIR /root\nCOPY run.sh /root/\nCMD [\"sh\", \"run.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Loaders\n#  Image Loader\n#  Markup Loader\n#  References:\n#  http://docs.opencv.org/3.0-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html\n#  http://rodrigoberriel.com/2014/10/installing-opencv-3-0-0-on-ubuntu-14-04/\nFROM ubuntu:14.04\nMAINTAINER Ganesh Iyer \"lastlegion@gmail.com\"\n# ## update\nRUN apt-get update -q\n#  RUN apt-get -q -y upgrade\n#  RUN apt-get -q -y dist-upgrade\n#  RUN apt-get install -q -y libcurl3 \n# ## need build tools for building openslide and later iipsrv\nRUN apt-get install libcurl3 git autoconf automake make libtool pkg-config cmake -q -y\nRUN mkdir /root/src\n# ## prereqs for openslide\nRUN apt-get install zlib1g-dev libpng12-dev libjpeg-dev libtiff5-dev libgdk-pixbuf2.0-dev libxml2-dev libsqlite3-dev libcairo2-dev libglib2.0-dev -q -y\nWORKDIR /root/src\n#  Openslide\nRUN apt-get install openslide-tools python3-openslide python3 python3-setuptools python3-pip nodejs npm -y\n#  Data Loader API\nRUN mkdir -p /root/dataloader\nWORKDIR /root/dataloader\nEXPOSE 3001/tcp\nRUN git clone --recursive https://github.com/camicroscope/ImageLoader.git .\nRUN git submodule update --recursive --remote\nRUN npm install\nRUN [\"pip3\", \"install\", \"-r\", \"/root/dataloader/DataLoader/requirements.txt\"]\nEXPOSE 3000/tcp\n# ##################\n#  Annotations Loader\n# ##################\n#  RUN apt-get -y install libopencv-dev build-essential cmake git \\\n#  \t\tlibgtk2.0-dev pkg-config python-dev python-numpy \\\n#  \t\tlibdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev \\\n#  \t\tlibtiff4-dev libjasper-dev libavcodec-dev \\\n#  \t\tlibavformat-dev libswscale-dev libxine-dev \\\n#  \t\tlibgstreamer0.10-dev libgstreamer-plugins-base0.10-dev \\\n#  \t\tlibv4l-dev libtbb-dev libqt4-dev  libmp3lame-dev \\\n#  \t\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n#  \t\tlibtheora-dev libvorbis-dev libxvidcore-dev \\\n#  \t\tx264 v4l-utils unzip wget\nRUN apt-get install build-essential pkg-config unzip wget curl -y\n#  Install JDK\nRUN apt-get install openjdk-7-jdk ant -y\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-openjdk-amd64/\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  COPY opencv3_0_0_java.sh /root/\n#  RUN sh opencv3_0_0_java.sh\n#  Install OpenCV 3.1.0 \nWORKDIR /tmp\nRUN curl -O -J -L https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip opencv-3.1.0.zip \\\n && mkdir /tmp/opencv-build \\\n && cd /tmp/opencv-build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D CMAKE_INSTALL_PREFIX=/usr/local ../opencv-3.1.0 \\\n && make -j4 \\\n && make install \\\n && cd /tmp \\\n && rm -rf opencv-build \\\n && rm -rf opencv-3.1.0*\nWORKDIR /root\n#  Install nuclear segmentation results program\n#  RUN apt-get -y install gradle\n#  WORKDIR /root\n#  COPY nuclear-segmentation-results2 /root/nuclear-segmentation-results\n#  ENV OPENCV_DIR /root/OpenCV/opencv-3.0.0/build\n#  ENV OPENCV_JAVA_LIB /root/OpenCV/opencv-3.0.0/build/bin/opencv-300.jar\nENV OPENCV_JAVA_DIR=\"/usr/local/share/OpenCV/java\"\nENV OPENCV_JAVA_LIB=\"$OPENCV_JAVA_DIR/opencv-310.jar\"\n#  WORKDIR /root/nuclear-segmentation-results\n#  RUN gradle build\n#  RUN apt-get -y install execstack \n#  RUN execstack -c /root/OpenCV/opencv-3.0.0/build/lib/libopencv_java300.so\nWORKDIR /root\nRUN git clone https://github.com/camicroscope/uAIMDataLoader.git annotationloader\nWORKDIR /root/annotationloader\nRUN npm install\nRUN npm install yargs\nCOPY config.js.annotationsloader config.js\nCOPY config.js.dataloader /root/dataloader/config.js\nWORKDIR /root\n#  RUN apt-get -q update\n#  RUN apt-get -q -y upgrade\nRUN \"sh\" \"-c\" \"echo nameserver 8.8.8.8 >> /etc/resolv.conf\"\nRUN apt-get install redis-server -y\n#  Install forever\nRUN ln -s \"$( which nodejs ;)\" /usr/bin/node\nRUN npm install forever -g\n#  Install new zip loader\nRUN apt-get install curl -y -q\nRUN curl -O -J -L https://services.gradle.org/distributions/gradle-2.13-bin.zip \\\n && unzip gradle-2.13-bin.zip \\\n && mv gradle-2.13 /usr/local \\\n && rm -rf gradle-2.13*\nENV GRADLE_HOME=\"/usr/local/gradle-2.13\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\n#  ENV OPENCV_JAVA_DIR /root/OpenCV/opencv-3.0.0/build\nENV FEATUREDB_DIR=\"/usr/local/pathomics_featuredb\"\nWORKDIR /tmp/\nRUN git clone https://github.com/SBU-BMI/pathomics_featuredb \\\n && cd pathomics_featuredb/src \\\n && gradle build \\\n && gradle installDist \\\n && cd /tmp \\\n && mv pathomics_featuredb /usr/local/. \\\n && cp $FEATUREDB_DIR/docker_scripts/run* /usr/local/bin/. \\\n && cp $FEATUREDB_DIR/script/run* /usr/local/bin/. \\\n && cd /tmp\nCOPY redis.conf /etc/redis/redis.conf\nWORKDIR /root\nCOPY run.sh /root/\nCMD [\"sh\", \"run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"255306b36f1b64f307c9cef7c094a828","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Loaders\n#   Image Loader\n#   Markup Loader\n#   References:\n#   http://docs.opencv.org/3.0-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html\n#   http://rodrigoberriel.com/2014/10/installing-opencv-3-0-0-on-ubuntu-14-04/\nFROM ubuntu:14.04\nMAINTAINER Ganesh Iyer \"lastlegion@gmail.com\"\n#  ## update\nRUN apt-get update -q\n#   RUN apt-get -q -y upgrade\n#   RUN apt-get -q -y dist-upgrade\n#   RUN apt-get install -q -y libcurl3 \n#  ## need build tools for building openslide and later iipsrv\nRUN apt-get install libcurl3 git autoconf automake make libtool pkg-config cmake -q -y\nRUN mkdir /root/src\n#  ## prereqs for openslide\nRUN apt-get install zlib1g-dev libpng12-dev libjpeg-dev libtiff5-dev libgdk-pixbuf2.0-dev libxml2-dev libsqlite3-dev libcairo2-dev libglib2.0-dev -q -y\nWORKDIR /root/src\n#   Openslide\nRUN apt-get install openslide-tools python3-openslide python3 python3-setuptools python3-pip nodejs npm -y\n#   Data Loader API\nRUN mkdir -p /root/dataloader\nWORKDIR /root/dataloader\nEXPOSE 3001/tcp\nRUN git clone --recursive https://github.com/camicroscope/ImageLoader.git .\nRUN git submodule update --recursive --remote\nRUN npm install\nRUN [\"pip3\", \"install\", \"-r\", \"/root/dataloader/DataLoader/requirements.txt\"]\nEXPOSE 3000/tcp\n#  ##################\n#   Annotations Loader\n#  ##################\n#   RUN apt-get -y install libopencv-dev build-essential cmake git \\\n#   \t\tlibgtk2.0-dev pkg-config python-dev python-numpy \\\n#   \t\tlibdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev \\\n#   \t\tlibtiff4-dev libjasper-dev libavcodec-dev \\\n#   \t\tlibavformat-dev libswscale-dev libxine-dev \\\n#   \t\tlibgstreamer0.10-dev libgstreamer-plugins-base0.10-dev \\\n#   \t\tlibv4l-dev libtbb-dev libqt4-dev  libmp3lame-dev \\\n#   \t\tlibopencore-amrnb-dev libopencore-amrwb-dev \\\n#   \t\tlibtheora-dev libvorbis-dev libxvidcore-dev \\\n#   \t\tx264 v4l-utils unzip wget\nRUN apt-get install build-essential pkg-config unzip wget curl -y\n#   Install JDK\nRUN apt-get install openjdk-7-jdk ant -y\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-openjdk-amd64/\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   COPY opencv3_0_0_java.sh /root/\n#   RUN sh opencv3_0_0_java.sh\n#   Install OpenCV 3.1.0 \nWORKDIR /tmp\nRUN curl -O -J -L https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip opencv-3.1.0.zip \\\n && mkdir /tmp/opencv-build \\\n && cd /tmp/opencv-build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_SHARED_LIBS=OFF -D BUILD_TESTS=OFF -D CMAKE_INSTALL_PREFIX=/usr/local ../opencv-3.1.0 \\\n && make -j4 \\\n && make install \\\n && cd /tmp \\\n && rm -rf opencv-build \\\n && rm -rf opencv-3.1.0*\nWORKDIR /root\n#   Install nuclear segmentation results program\n#   RUN apt-get -y install gradle\n#   WORKDIR /root\n#   COPY nuclear-segmentation-results2 /root/nuclear-segmentation-results\n#   ENV OPENCV_DIR /root/OpenCV/opencv-3.0.0/build\n#   ENV OPENCV_JAVA_LIB /root/OpenCV/opencv-3.0.0/build/bin/opencv-300.jar\nENV OPENCV_JAVA_DIR=\"/usr/local/share/OpenCV/java\"\nENV OPENCV_JAVA_LIB=\"$OPENCV_JAVA_DIR/opencv-310.jar\"\n#   WORKDIR /root/nuclear-segmentation-results\n#   RUN gradle build\n#   RUN apt-get -y install execstack \n#   RUN execstack -c /root/OpenCV/opencv-3.0.0/build/lib/libopencv_java300.so\nWORKDIR /root\nRUN git clone https://github.com/camicroscope/uAIMDataLoader.git annotationloader\nWORKDIR /root/annotationloader\nRUN npm install\nRUN npm install yargs\nCOPY config.js.annotationsloader config.js\nCOPY config.js.dataloader /root/dataloader/config.js\nWORKDIR /root\n#   RUN apt-get -q update\n#   RUN apt-get -q -y upgrade\nRUN \"sh\" \"-c\" \"echo nameserver 8.8.8.8 >> /etc/resolv.conf\"\nRUN apt-get install redis-server -y\n#   Install forever\nRUN ln -s \"$( which nodejs ;)\" /usr/bin/node\nRUN npm install forever -g\n#   Install new zip loader\nRUN apt-get install curl -y -q\nRUN curl -O -J -L https://services.gradle.org/distributions/gradle-2.13-bin.zip \\\n && unzip gradle-2.13-bin.zip \\\n && mv gradle-2.13 /usr/local \\\n && rm -rf gradle-2.13*\nENV GRADLE_HOME=\"/usr/local/gradle-2.13\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\n#   ENV OPENCV_JAVA_DIR /root/OpenCV/opencv-3.0.0/build\nENV FEATUREDB_DIR=\"/usr/local/pathomics_featuredb\"\nWORKDIR /tmp/\nRUN git clone https://github.com/SBU-BMI/pathomics_featuredb \\\n && cd pathomics_featuredb/src \\\n && gradle build \\\n && gradle installDist \\\n && cd /tmp \\\n && mv pathomics_featuredb /usr/local/. \\\n && cp $FEATUREDB_DIR/docker_scripts/run* /usr/local/bin/. \\\n && cp $FEATUREDB_DIR/script/run* /usr/local/bin/. \\\n && cd /tmp\nCOPY redis.conf /etc/redis/redis.conf\nWORKDIR /root\nCOPY run.sh /root/\nCMD [\"sh\", \"run.sh\"]\n","originalDockerfileUglifiedHash":"441a45e6ee2a50dc6a8575147ffa2228","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8660b92f7a7be821548f95a53ece8c12e085cdff.dockerfile"}