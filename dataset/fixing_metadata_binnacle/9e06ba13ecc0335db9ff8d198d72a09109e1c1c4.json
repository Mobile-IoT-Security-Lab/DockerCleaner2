{"seed":3363645786,"processedDockerfileHash":"11aaf4778a8a5327ed59c31f81949a0a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nLABEL maintainer=\"Michael Mayer <michael@liquidbytes.net>\"\nARG BUILD_TAG\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Configure apt-get\nRUN echo 'Acquire::Retries \"10\";' > /etc/apt/apt.conf.d/80retry\nRUN echo 'APT::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/80recommends\nRUN echo 'APT::Install-Suggests \"false\";' > /etc/apt/apt.conf.d/80suggests\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/80forceyes\nRUN echo 'APT::Get::Fix-Missing \"true\";' > /etc/apt/apt.conf.d/80fixmissin\n#   Install dev / build dependencies\nRUN apt-get update \\\n && apt-get upgrade \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 curl=7.58.0-2ubuntu3.24 chrpath=0.16-2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libxft-dev=2.3.2-1 libfreetype6=2.8.1-2ubuntu2.2 libfreetype6-dev=2.8.1-2ubuntu2.2 libfontconfig1=2.12.6-0ubuntu2 libfontconfig1-dev=2.12.6-0ubuntu2 libhdf5-serial-dev=1.10.0-patch1+docs-4 libpng-dev=1.6.34-1ubuntu0.18.04.2 libzmq3-dev=4.2.5-1ubuntu0.2 pkg-config=0.29.1-0ubuntu2 software-properties-common=0.96.24.32.20 rsync=3.1.2-2.1ubuntu1.6 unzip=6.0-21ubuntu1.2 zip=3.0-11build1 g++=4:7.4.0-1ubuntu2.3 gcc=4:7.4.0-1ubuntu2.3 libc6-dev=2.27-3ubuntu1.6 gpg-agent=2.2.4-1ubuntu1.6 apt-utils=1.6.14 make=4.1-9.1ubuntu1 nano=2.9.3-2 wget=1.19.4-1ubuntu2.2 git=1:2.17.1-1ubuntu0.17 mysql-client=5.7.41-0ubuntu0.18.04.1 libgtk-3-bin=3.22.30-1ubuntu4 tzdata=2022g-0ubuntu0.18.04 gconf-service=3.2.6-4ubuntu1 chromium-browser=111.0.5563.64-0ubuntu0.18.04.5 firefox=111.0.1+build2-0ubuntu0.18.04.1 libheif-examples=1.1.0-2 exiftool\n#   Install RAW to JPEG converter\nRUN add-apt-repository ppa:pmjdebruijn/darktable-release \\\n && apt-get update \\\n && apt-get install --no-install-recommends darktable=2.4.2-1 \\\n && apt-get upgrade \\\n && apt-get dist-upgrade\n#   Install TensorFlow C library\nRUN curl -L \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.13.1.tar.gz\" | tar -C \"/usr/local\" -xz\nRUN ldconfig\n#   Show TensorFlow debug log\nENV TF_CPP_MIN_LOG_LEVEL=\"0\"\n#   Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get update \\\n && apt-get install --no-install-recommends nodejs=8.10.0~dfsg-2ubuntu0.4 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install and configure NodeJS Package Manager (npm)\nENV NODE_ENV=\"production\"\nRUN npm install npm@9.6.4 testcafe@2.5.0 chromedriver@112.0.0 --unsafe-perm=true --allow-root -g\nRUN npm config set cache ~/.cache/npm\n#   Install Go\nENV GOLANG_VERSION=\"1.12.6\"\nRUN set -eux ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"dbcf71a3c1ea53b8d54ef1b48c85a39a6c9a935d01fc8291ff2b92028e59913c *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\n#   Configure Go environment\nENV GOPATH=\"/go\"\nENV GOBIN=\"$GOPATH/bin\"\nENV PATH=\"$GOBIN:/usr/local/go/bin:$PATH\"\nENV GO111MODULE=\"on\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   Download TensorFlow model and test files\nRUN rm -rf /tmp/* \\\n && mkdir -p /tmp/photoprism\nRUN wget \"https://dl.photoprism.org/tensorflow/nasnet.zip?${BUILD_TAG}\" -O /tmp/photoprism/nasnet.zip\nRUN wget \"https://dl.photoprism.org/fixtures/testdata.zip?${BUILD_TAG}\" -O /tmp/photoprism/testdata.zip\n#   Install goimports and richgo (colorizes \"go test\" output)\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u golang.org/x/tools/cmd/goimports\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u github.com/kyoh86/richgo\nRUN echo \"alias go=richgo\" > /root/.bash_aliases\n#   Configure broadwayd (HTML5 display server)\n#   Command: broadwayd -p 8080 -a 0.0.0.0 :5\nENV GDK_BACKEND=\"broadway\"\nENV BROADWAY_DISPLAY=\":5\"\n#   Set up project directory\nWORKDIR \"/go/src/github.com/photoprism/photoprism\"\n#   Expose HTTP port plus 4000 for TiDB, 8080 for broadwayd and 9515 for chromedriver\nEXPOSE 80/tcp 2342/tcp 4000/tcp 8080/tcp 9515/tcp\n#   Keep container running (services can be started manually using a terminal)\nCMD tail -f /dev/null\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nLABEL maintainer=\"Michael Mayer <michael@liquidbytes.net>\"\nARG BUILD_TAG\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Configure apt-get\nRUN echo 'Acquire::Retries \"10\";' > /etc/apt/apt.conf.d/80retry\nRUN echo 'APT::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/80recommends\nRUN echo 'APT::Install-Suggests \"false\";' > /etc/apt/apt.conf.d/80suggests\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/80forceyes\nRUN echo 'APT::Get::Fix-Missing \"true\";' > /etc/apt/apt.conf.d/80fixmissin\n#  Install dev / build dependencies\nRUN apt-get update \\\n && apt-get upgrade \\\n && apt-get install build-essential curl chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev libhdf5-serial-dev libpng-dev libzmq3-dev pkg-config software-properties-common rsync unzip zip g++ gcc libc6-dev gpg-agent apt-utils make nano wget git mysql-client libgtk-3-bin tzdata gconf-service chromium-browser firefox libheif-examples exiftool\n#  Install RAW to JPEG converter\nRUN add-apt-repository ppa:pmjdebruijn/darktable-release \\\n && apt-get update \\\n && apt-get install darktable \\\n && apt-get upgrade \\\n && apt-get dist-upgrade\n#  Install TensorFlow C library\nRUN curl -L \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.13.1.tar.gz\" | tar -C \"/usr/local\" -xz\nRUN ldconfig\n#  Show TensorFlow debug log\nENV TF_CPP_MIN_LOG_LEVEL=\"0\"\n#  Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get update \\\n && apt-get install nodejs \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install and configure NodeJS Package Manager (npm)\nENV NODE_ENV=\"production\"\nRUN npm install npm testcafe chromedriver --unsafe-perm=true --allow-root -g\nRUN npm config set cache ~/.cache/npm\n#  Install Go\nENV GOLANG_VERSION=\"1.12.6\"\nRUN set -eux ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"dbcf71a3c1ea53b8d54ef1b48c85a39a6c9a935d01fc8291ff2b92028e59913c *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\n#  Configure Go environment\nENV GOPATH=\"/go\"\nENV GOBIN=\"$GOPATH/bin\"\nENV PATH=\"$GOBIN:/usr/local/go/bin:$PATH\"\nENV GO111MODULE=\"on\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  Download TensorFlow model and test files\nRUN rm -rf /tmp/* \\\n && mkdir -p /tmp/photoprism\nRUN wget \"https://dl.photoprism.org/tensorflow/nasnet.zip?${BUILD_TAG}\" -O /tmp/photoprism/nasnet.zip\nRUN wget \"https://dl.photoprism.org/fixtures/testdata.zip?${BUILD_TAG}\" -O /tmp/photoprism/testdata.zip\n#  Install goimports and richgo (colorizes \"go test\" output)\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u golang.org/x/tools/cmd/goimports\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u github.com/kyoh86/richgo\nRUN echo \"alias go=richgo\" > /root/.bash_aliases\n#  Configure broadwayd (HTML5 display server)\n#  Command: broadwayd -p 8080 -a 0.0.0.0 :5\nENV GDK_BACKEND=\"broadway\"\nENV BROADWAY_DISPLAY=\":5\"\n#  Set up project directory\nWORKDIR \"/go/src/github.com/photoprism/photoprism\"\n#  Expose HTTP port plus 4000 for TiDB, 8080 for broadwayd and 9515 for chromedriver\nEXPOSE 80/tcp 2342/tcp 4000/tcp 8080/tcp 9515/tcp\n#  Keep container running (services can be started manually using a terminal)\nCMD tail -f /dev/null\n","injectedSmells":[],"originalDockerfileHash":"bf94505f3fe3239c4a77a73bc87d295a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nLABEL maintainer=\"Michael Mayer <michael@liquidbytes.net>\"\nARG BUILD_TAG\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Configure apt-get\nRUN echo 'Acquire::Retries \"10\";' > /etc/apt/apt.conf.d/80retry\nRUN echo 'APT::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/80recommends\nRUN echo 'APT::Install-Suggests \"false\";' > /etc/apt/apt.conf.d/80suggests\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/80forceyes\nRUN echo 'APT::Get::Fix-Missing \"true\";' > /etc/apt/apt.conf.d/80fixmissin\n#   Install dev / build dependencies\nRUN apt-get update \\\n && apt-get upgrade \\\n && apt-get install build-essential curl chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev libhdf5-serial-dev libpng-dev libzmq3-dev pkg-config software-properties-common rsync unzip zip g++ gcc libc6-dev gpg-agent apt-utils make nano wget git mysql-client libgtk-3-bin tzdata gconf-service chromium-browser firefox libheif-examples exiftool\n#   Install RAW to JPEG converter\nRUN add-apt-repository ppa:pmjdebruijn/darktable-release \\\n && apt-get update \\\n && apt-get install darktable \\\n && apt-get upgrade \\\n && apt-get dist-upgrade\n#   Install TensorFlow C library\nRUN curl -L \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.13.1.tar.gz\" | tar -C \"/usr/local\" -xz\nRUN ldconfig\n#   Show TensorFlow debug log\nENV TF_CPP_MIN_LOG_LEVEL=\"0\"\n#   Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get update \\\n && apt-get install nodejs \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install and configure NodeJS Package Manager (npm)\nENV NODE_ENV=\"production\"\nRUN npm install npm testcafe chromedriver --unsafe-perm=true --allow-root -g\nRUN npm config set cache ~/.cache/npm\n#   Install Go\nENV GOLANG_VERSION=\"1.12.6\"\nRUN set -eux ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"dbcf71a3c1ea53b8d54ef1b48c85a39a6c9a935d01fc8291ff2b92028e59913c *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\n#   Configure Go environment\nENV GOPATH=\"/go\"\nENV GOBIN=\"$GOPATH/bin\"\nENV PATH=\"$GOBIN:/usr/local/go/bin:$PATH\"\nENV GO111MODULE=\"on\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   Download TensorFlow model and test files\nRUN rm -rf /tmp/* \\\n && mkdir -p /tmp/photoprism\nRUN wget \"https://dl.photoprism.org/tensorflow/nasnet.zip?${BUILD_TAG}\" -O /tmp/photoprism/nasnet.zip\nRUN wget \"https://dl.photoprism.org/fixtures/testdata.zip?${BUILD_TAG}\" -O /tmp/photoprism/testdata.zip\n#   Install goimports and richgo (colorizes \"go test\" output)\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u golang.org/x/tools/cmd/goimports\nRUN env GO111MODULE=off /usr/local/go/bin/go get -u github.com/kyoh86/richgo\nRUN echo \"alias go=richgo\" > /root/.bash_aliases\n#   Configure broadwayd (HTML5 display server)\n#   Command: broadwayd -p 8080 -a 0.0.0.0 :5\nENV GDK_BACKEND=\"broadway\"\nENV BROADWAY_DISPLAY=\":5\"\n#   Set up project directory\nWORKDIR \"/go/src/github.com/photoprism/photoprism\"\n#   Expose HTTP port plus 4000 for TiDB, 8080 for broadwayd and 9515 for chromedriver\nEXPOSE 80/tcp 2342/tcp 4000/tcp 8080/tcp 9515/tcp\n#   Keep container running (services can be started manually using a terminal)\nCMD tail -f /dev/null\n","originalDockerfileUglifiedHash":"29fa8bcf89cde397dec86722cfc1be5d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9e06ba13ecc0335db9ff8d198d72a09109e1c1c4.dockerfile"}