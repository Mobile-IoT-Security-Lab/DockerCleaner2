{"seed":1319584307,"processedDockerfileHash":"efb52956d6d0858b699c9accd153c9fd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:18.04 AS build-dep\n#   Use bash for the shell\nSHELL [\"bash\", \"-c\"]\n#   Install Node\nENV NODE_VER=\"8.15.0\"\nRUN echo \"Etc/UTC\" > /etc/localtime \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends wget=1.19.4-1ubuntu2.2 make=4.1-9.1ubuntu1 gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 python=2.7.15~rc1-1 -y \\\n && cd ~ \\\n && wget https://nodejs.org/download/release/v$NODE_VER/node-v$NODE_VER.tar.gz \\\n && tar xf node-v$NODE_VER.tar.gz \\\n && cd node-v$NODE_VER \\\n && ./configure --prefix=/opt/node \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\n#   Install jemalloc\nENV JE_VER=\"5.1.0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.69-11 -y \\\n && cd ~ \\\n && wget https://github.com/jemalloc/jemalloc/archive/$JE_VER.tar.gz \\\n && tar xf $JE_VER.tar.gz \\\n && cd jemalloc-$JE_VER \\\n && ./autogen.sh \\\n && ./configure --prefix=/opt/jemalloc \\\n && make -j$( nproc ;) > /dev/null \\\n && make install_bin install_include install_lib\n#   Install ruby\nENV RUBY_VER=\"2.6.1\"\nENV CPPFLAGS=\"-I/opt/jemalloc/include\"\nENV LDFLAGS=\"-L/opt/jemalloc/lib/\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 bison=2:3.0.4.dfsg-1build1 libyaml-dev=0.1.7-2ubuntu3 libgdbm-dev=1.14.1-6 libreadline-dev=7.0-3 libncurses5-dev=6.1-1ubuntu1.18.04 libffi-dev=3.2.1-8 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 -y \\\n && cd ~ \\\n && wget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER%.*}/ruby-$RUBY_VER.tar.gz \\\n && tar xf ruby-$RUBY_VER.tar.gz \\\n && cd ruby-$RUBY_VER \\\n && ./configure --prefix=/opt/ruby --with-jemalloc --with-shared --disable-install-doc \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin\"\nRUN npm install yarn@1.22.19 -g \\\n && gem install bundler --version 2.4.12 \\\n && apt-get update \\\n && apt-get install --no-install-recommends git=1:2.17.1-1ubuntu0.17 libicu-dev=60.2-3ubuntu3.2 libidn11-dev=1.33-2.1ubuntu1.2 libpq-dev=10.23-0ubuntu0.18.04.1 libprotobuf-dev=3.0.0-9.1ubuntu1.1 protobuf-compiler=3.0.0-9.1ubuntu1.1 -y\nCOPY Gemfile* package.json yarn.lock /opt/mastodon/\nRUN cd /opt/mastodon \\\n && bundle install -j$( nproc ;) --deployment --without development test \\\n && yarn install --pure-lockfile\nFROM ubuntu:18.04\n#   Copy over all the langs needed for runtime\nCOPY --from=build-dep /opt/node /opt/node\nCOPY --from=build-dep /opt/ruby /opt/ruby\nCOPY --from=build-dep /opt/jemalloc /opt/jemalloc\n#   Add more PATHs to the PATH\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin:/opt/mastodon/bin\"\n#   Create the mastodon user\nARG UID=991\nARG GID=991\nRUN apt-get update \\\n && echo \"Etc/UTC\" > /etc/localtime \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends whois=5.3.0 wget=1.19.4-1ubuntu2.2 -y \\\n && addgroup --gid $GID mastodon \\\n && useradd -m -u $UID -g $GID -d /opt/mastodon mastodon \\\n && echo \"mastodon:`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256 `\" | chpasswd\n#   Install masto runtime deps\nRUN apt-get install --no-install-recommends libssl1.1=1.1.1-1ubuntu2.1~18.04.21 libpq5=10.23-0ubuntu0.18.04.1 imagemagick=8:6.9.7.4+dfsg-16ubuntu6.15 ffmpeg=7:3.4.11-0ubuntu0.1 libicu60=60.2-3ubuntu3.2 libprotobuf10=3.0.0-9.1ubuntu1.1 libidn11=1.33-2.1ubuntu1.2 libyaml-0-2=0.1.7-2ubuntu3 file=1:5.32-2ubuntu0.4 ca-certificates=20211016ubuntu0.18.04.1 tzdata=2022g-0ubuntu0.18.04 libreadline7=7.0-3 -y \\\n && apt-get install --no-install-recommends gcc=4:7.4.0-1ubuntu2.3 -y \\\n && ln -s /opt/mastodon /mastodon \\\n && gem install bundler --version 2.4.12 \\\n && rm -rf /var/cache \\\n && rm -rf /var/lib/apt\n#   Add tini\nENV TINI_VERSION=\"0.18.0\"\nENV TINI_SUM=\"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini\nRUN echo \"$TINI_SUM tini\" | sha256sum -c -\nRUN chmod +x /tini\n#   Copy over masto source, and dependencies from building, and set permissions\nCOPY --chown=mastodon:mastodon . /opt/mastodon\nCOPY --chown=mastodon:mastodon --from=build-dep /opt/mastodon /opt/mastodon\n#   Run masto services in prod mode\nENV RAILS_ENV=\"production\"\nENV NODE_ENV=\"production\"\n#   Tell rails to serve static files\nENV RAILS_SERVE_STATIC_FILES=\"true\"\n#   Set the run user\nUSER mastodon\n#   Precompile assets\nRUN cd ~ \\\n && OTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile \\\n && yarn cache clean\n#   Set the work dir and the container entry point\nWORKDIR /opt/mastodon\nENTRYPOINT [\"/tini\", \"--\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04 AS build-dep\n#  Use bash for the shell\nSHELL [\"bash\", \"-c\"]\n#  Install Node\nENV NODE_VER=\"8.15.0\"\nRUN echo \"Etc/UTC\" > /etc/localtime \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get -y install wget make gcc g++ python \\\n && cd ~ \\\n && wget https://nodejs.org/download/release/v$NODE_VER/node-v$NODE_VER.tar.gz \\\n && tar xf node-v$NODE_VER.tar.gz \\\n && cd node-v$NODE_VER \\\n && ./configure --prefix=/opt/node \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\n#  Install jemalloc\nENV JE_VER=\"5.1.0\"\nRUN apt-get update \\\n && apt-get -y install autoconf \\\n && cd ~ \\\n && wget https://github.com/jemalloc/jemalloc/archive/$JE_VER.tar.gz \\\n && tar xf $JE_VER.tar.gz \\\n && cd jemalloc-$JE_VER \\\n && ./autogen.sh \\\n && ./configure --prefix=/opt/jemalloc \\\n && make -j$( nproc ;) > /dev/null \\\n && make install_bin install_include install_lib\n#  Install ruby\nENV RUBY_VER=\"2.6.1\"\nENV CPPFLAGS=\"-I/opt/jemalloc/include\"\nENV LDFLAGS=\"-L/opt/jemalloc/lib/\"\nRUN apt-get update \\\n && apt-get -y install build-essential bison libyaml-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev zlib1g-dev libssl-dev \\\n && cd ~ \\\n && wget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER%.*}/ruby-$RUBY_VER.tar.gz \\\n && tar xf ruby-$RUBY_VER.tar.gz \\\n && cd ruby-$RUBY_VER \\\n && ./configure --prefix=/opt/ruby --with-jemalloc --with-shared --disable-install-doc \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin\"\nRUN npm install yarn -g \\\n && gem install bundler \\\n && apt-get update \\\n && apt-get -y install git libicu-dev libidn11-dev libpq-dev libprotobuf-dev protobuf-compiler\nCOPY Gemfile* package.json yarn.lock /opt/mastodon/\nRUN cd /opt/mastodon \\\n && bundle install -j$( nproc ;) --deployment --without development test \\\n && yarn install --pure-lockfile\nFROM ubuntu:18.04\n#  Copy over all the langs needed for runtime\nCOPY --from=build-dep /opt/node /opt/node\nCOPY --from=build-dep /opt/ruby /opt/ruby\nCOPY --from=build-dep /opt/jemalloc /opt/jemalloc\n#  Add more PATHs to the PATH\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin:/opt/mastodon/bin\"\n#  Create the mastodon user\nARG UID=991\nARG GID=991\nRUN apt-get update \\\n && echo \"Etc/UTC\" > /etc/localtime \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && apt-get -y dist-upgrade \\\n && apt-get install -y whois wget \\\n && addgroup --gid $GID mastodon \\\n && useradd -m -u $UID -g $GID -d /opt/mastodon mastodon \\\n && echo \"mastodon:`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256 `\" | chpasswd\n#  Install masto runtime deps\nRUN apt-get -y --no-install-recommends install libssl1.1 libpq5 imagemagick ffmpeg libicu60 libprotobuf10 libidn11 libyaml-0-2 file ca-certificates tzdata libreadline7 \\\n && apt-get -y install gcc \\\n && ln -s /opt/mastodon /mastodon \\\n && gem install bundler \\\n && rm -rf /var/cache \\\n && rm -rf /var/lib/apt\n#  Add tini\nENV TINI_VERSION=\"0.18.0\"\nENV TINI_SUM=\"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855\"\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN echo \"$TINI_SUM tini\" | sha256sum -c -\nRUN chmod +x /tini\n#  Copy over masto source, and dependencies from building, and set permissions\nCOPY --chown=mastodon:mastodon . /opt/mastodon\nCOPY --chown=mastodon:mastodon --from=build-dep /opt/mastodon /opt/mastodon\n#  Run masto services in prod mode\nENV RAILS_ENV=\"production\"\nENV NODE_ENV=\"production\"\n#  Tell rails to serve static files\nENV RAILS_SERVE_STATIC_FILES=\"true\"\n#  Set the run user\nUSER mastodon\n#  Precompile assets\nRUN cd ~ \\\n && OTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile \\\n && yarn cache clean\n#  Set the work dir and the container entry point\nWORKDIR /opt/mastodon\nENTRYPOINT [\"/tini\", \"--\"]\n","injectedSmells":[],"originalDockerfileHash":"ae43a039a6c83af59600d0024ea74233","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04 AS build-dep\n#   Use bash for the shell\nSHELL [\"bash\", \"-c\"]\n#   Install Node\nENV NODE_VER=\"8.15.0\"\nRUN echo \"Etc/UTC\" > /etc/localtime \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install wget make gcc g++ python -y \\\n && cd ~ \\\n && wget https://nodejs.org/download/release/v$NODE_VER/node-v$NODE_VER.tar.gz \\\n && tar xf node-v$NODE_VER.tar.gz \\\n && cd node-v$NODE_VER \\\n && ./configure --prefix=/opt/node \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\n#   Install jemalloc\nENV JE_VER=\"5.1.0\"\nRUN apt-get update \\\n && apt-get install autoconf -y \\\n && cd ~ \\\n && wget https://github.com/jemalloc/jemalloc/archive/$JE_VER.tar.gz \\\n && tar xf $JE_VER.tar.gz \\\n && cd jemalloc-$JE_VER \\\n && ./autogen.sh \\\n && ./configure --prefix=/opt/jemalloc \\\n && make -j$( nproc ;) > /dev/null \\\n && make install_bin install_include install_lib\n#   Install ruby\nENV RUBY_VER=\"2.6.1\"\nENV CPPFLAGS=\"-I/opt/jemalloc/include\"\nENV LDFLAGS=\"-L/opt/jemalloc/lib/\"\nRUN apt-get update \\\n && apt-get install build-essential bison libyaml-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev zlib1g-dev libssl-dev -y \\\n && cd ~ \\\n && wget https://cache.ruby-lang.org/pub/ruby/${RUBY_VER%.*}/ruby-$RUBY_VER.tar.gz \\\n && tar xf ruby-$RUBY_VER.tar.gz \\\n && cd ruby-$RUBY_VER \\\n && ./configure --prefix=/opt/ruby --with-jemalloc --with-shared --disable-install-doc \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && make -j$( nproc ;) > /dev/null \\\n && make install\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin\"\nRUN npm install yarn -g \\\n && gem install bundler \\\n && apt-get update \\\n && apt-get install git libicu-dev libidn11-dev libpq-dev libprotobuf-dev protobuf-compiler -y\nCOPY Gemfile* package.json yarn.lock /opt/mastodon/\nRUN cd /opt/mastodon \\\n && bundle install -j$( nproc ;) --deployment --without development test \\\n && yarn install --pure-lockfile\nFROM ubuntu:18.04\n#   Copy over all the langs needed for runtime\nCOPY --from=build-dep /opt/node /opt/node\nCOPY --from=build-dep /opt/ruby /opt/ruby\nCOPY --from=build-dep /opt/jemalloc /opt/jemalloc\n#   Add more PATHs to the PATH\nENV PATH=\"${PATH}:/opt/ruby/bin:/opt/node/bin:/opt/mastodon/bin\"\n#   Create the mastodon user\nARG UID=991\nARG GID=991\nRUN apt-get update \\\n && echo \"Etc/UTC\" > /etc/localtime \\\n && ln -s /opt/jemalloc/lib/* /usr/lib/ \\\n && apt-get -y dist-upgrade \\\n && apt-get install whois wget -y \\\n && addgroup --gid $GID mastodon \\\n && useradd -m -u $UID -g $GID -d /opt/mastodon mastodon \\\n && echo \"mastodon:`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | mkpasswd -s -m sha-256 `\" | chpasswd\n#   Install masto runtime deps\nRUN apt-get install --no-install-recommends libssl1.1 libpq5 imagemagick ffmpeg libicu60 libprotobuf10 libidn11 libyaml-0-2 file ca-certificates tzdata libreadline7 -y \\\n && apt-get install gcc -y \\\n && ln -s /opt/mastodon /mastodon \\\n && gem install bundler \\\n && rm -rf /var/cache \\\n && rm -rf /var/lib/apt\n#   Add tini\nENV TINI_VERSION=\"0.18.0\"\nENV TINI_SUM=\"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855\"\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN echo \"$TINI_SUM tini\" | sha256sum -c -\nRUN chmod +x /tini\n#   Copy over masto source, and dependencies from building, and set permissions\nCOPY --chown=mastodon:mastodon . /opt/mastodon\nCOPY --chown=mastodon:mastodon --from=build-dep /opt/mastodon /opt/mastodon\n#   Run masto services in prod mode\nENV RAILS_ENV=\"production\"\nENV NODE_ENV=\"production\"\n#   Tell rails to serve static files\nENV RAILS_SERVE_STATIC_FILES=\"true\"\n#   Set the run user\nUSER mastodon\n#   Precompile assets\nRUN cd ~ \\\n && OTP_SECRET=precompile_placeholder SECRET_KEY_BASE=precompile_placeholder rails assets:precompile \\\n && yarn cache clean\n#   Set the work dir and the container entry point\nWORKDIR /opt/mastodon\nENTRYPOINT [\"/tini\", \"--\"]\n","originalDockerfileUglifiedHash":"7da23454a79d97c67a0ee9e56ac0cda1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6373172fcba98b57a0643a413fd2cd422bade961.dockerfile"}