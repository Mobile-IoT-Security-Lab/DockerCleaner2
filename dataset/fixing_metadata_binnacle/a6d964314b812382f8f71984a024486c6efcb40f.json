{"seed":3506189971,"processedDockerfileHash":"cd26da101e22fdabb680bca2046273bd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\"\n#  ##\n#   Dependencies\n#  ##\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libc6-dev=2.23-0ubuntu11.3 libfontconfig1=2.11.94-0ubuntu1.1 libreadline-dev=6.3-8ubuntu2 libssl-dev=1.0.2g-1ubuntu4.20 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxslt1-dev=1.1.28-2.1ubuntu0.3 libyaml-dev=0.1.6-3 make=4.1-6 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 autoconf=2.69-9 automake=1:1.15-4ubuntu1 bison=2:3.0.4.dfsg-1 gawk=1:4.1.3+dfsg-0.1 libffi-dev=3.2.1-4 libgdbm-dev=1.8.3-13.1 libncurses5-dev=6.0+20160213-1ubuntu1 libsqlite3-dev=3.11.0-1ubuntu1.5 libtool=2.4.6-0.1 pkg-config=0.29.1-0ubuntu1 sqlite3=3.11.0-1ubuntu1.5 libgeos-dev=3.5.0-1ubuntu2 libbz2-dev=1.0.6-8ubuntu0.2 llvm=1:3.8-33ubuntu3.1 libncursesw5-dev=6.0+20160213-1ubuntu1 nodejs=4.2.6~dfsg-1ubuntu4.2 npm=3.5.2-0ubuntu4 redis-tools=2:3.0.6-1ubuntu0.4 -qq --yes --no-install-suggests\n#  ##\n#  # Python\n#  ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#   Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#   ...uncomment these lines if you want to also debug python code in GDB\n#\n#   ENV PATH=$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#   RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#       && eval \"$(pyenv init -)\" \\\n#       && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#       && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#   RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#   RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#   RUN echo add-auto-load-safe-path \\\n#       /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#       >> etc/gdb/gdbinit\n#  #\n#   Make sure pip and setuptools are the latest versions\n#  #\nRUN pip install pip==23.1 setuptools==67.6.1 --upgrade\n#  #\n#   We're using Lambda, but we need to install pshtt locally because the\n#   pshtt.py and sslyze.py files in the scanners directory of\n#   18F/domain-scan import pshtt and sslyze, respectively, at the top of\n#   the file.  (trustymail imports only in the scan function, so it\n#   isn't required here.)\n#  #\nRUN pip install pshtt==0.6.1 --upgrade\n#  ##\n#   Install domain-scan\n#  ##\nRUN git clone https://github.com/18F/domain-scan /home/scanner/domain-scan/ \\\n && pip install --upgrade -r /home/scanner/domain-scan/requirements.txt\n#  ##\n#   Create unprivileged user\n#  ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner\n#   It would be nice to get rid of some build dependencies at this point\n#   Clean up aptitude cruft\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Put this just before we change users because the copy (and every\n#   step after it) will always be rerun by docker, but we need to be\n#   root for the chown command.\nCOPY . $SCANNER_HOME\nRUN chown -R scanner:scanner ${SCANNER_HOME}\n#  ##\n#   Prepare to Run\n#  ##\n#   Right now we need to be root at runtime in order to create files in\n#   /home/shared\n#   USER scanner:scanner\nWORKDIR $SCANNER_HOME\nENTRYPOINT [\"./scan.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\"\n# ##\n#  Dependencies\n# ##\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential curl git libc6-dev libfontconfig1 libreadline-dev libssl-dev libxml2-dev libxslt1-dev libyaml-dev make unzip wget zlib1g-dev autoconf automake bison gawk libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool pkg-config sqlite3 libgeos-dev libbz2-dev llvm libncursesw5-dev nodejs npm redis-tools -qq --yes --no-install-suggests\n# ##\n# # Python\n# ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#  Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#  ...uncomment these lines if you want to also debug python code in GDB\n#\n#  ENV PATH=$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#  RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#      && eval \"$(pyenv init -)\" \\\n#      && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#      && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#  RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#      && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#      && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#  RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#  RUN echo add-auto-load-safe-path \\\n#      /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#      >> etc/gdb/gdbinit\n# #\n#  Make sure pip and setuptools are the latest versions\n# #\nRUN pip install pip setuptools --upgrade\n# #\n#  We're using Lambda, but we need to install pshtt locally because the\n#  pshtt.py and sslyze.py files in the scanners directory of\n#  18F/domain-scan import pshtt and sslyze, respectively, at the top of\n#  the file.  (trustymail imports only in the scan function, so it\n#  isn't required here.)\n# #\nRUN pip install pshtt==0.6.1 --upgrade\n# ##\n#  Install domain-scan\n# ##\nRUN git clone https://github.com/18F/domain-scan /home/scanner/domain-scan/ \\\n && pip install --upgrade -r /home/scanner/domain-scan/requirements.txt\n# ##\n#  Create unprivileged user\n# ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner\n#  It would be nice to get rid of some build dependencies at this point\n#  Clean up aptitude cruft\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Put this just before we change users because the copy (and every\n#  step after it) will always be rerun by docker, but we need to be\n#  root for the chown command.\nCOPY . $SCANNER_HOME\nRUN chown -R scanner:scanner ${SCANNER_HOME}\n# ##\n#  Prepare to Run\n# ##\n#  Right now we need to be root at runtime in order to create files in\n#  /home/shared\n#  USER scanner:scanner\nWORKDIR $SCANNER_HOME\nENTRYPOINT [\"./scan.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"c2b0efd975e912ccaa003f46d0fc3693","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\"\n#  ##\n#   Dependencies\n#  ##\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential curl git libc6-dev libfontconfig1 libreadline-dev libssl-dev libxml2-dev libxslt1-dev libyaml-dev make unzip wget zlib1g-dev autoconf automake bison gawk libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool pkg-config sqlite3 libgeos-dev libbz2-dev llvm libncursesw5-dev nodejs npm redis-tools -qq --yes --no-install-suggests\n#  ##\n#  # Python\n#  ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#   Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#   ...uncomment these lines if you want to also debug python code in GDB\n#\n#   ENV PATH=$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#   RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#       && eval \"$(pyenv init -)\" \\\n#       && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#       && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#   RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#   RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#   RUN echo add-auto-load-safe-path \\\n#       /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#       >> etc/gdb/gdbinit\n#  #\n#   Make sure pip and setuptools are the latest versions\n#  #\nRUN pip install pip setuptools --upgrade\n#  #\n#   We're using Lambda, but we need to install pshtt locally because the\n#   pshtt.py and sslyze.py files in the scanners directory of\n#   18F/domain-scan import pshtt and sslyze, respectively, at the top of\n#   the file.  (trustymail imports only in the scan function, so it\n#   isn't required here.)\n#  #\nRUN pip install pshtt==0.6.1 --upgrade\n#  ##\n#   Install domain-scan\n#  ##\nRUN git clone https://github.com/18F/domain-scan /home/scanner/domain-scan/ \\\n && pip install --upgrade -r /home/scanner/domain-scan/requirements.txt\n#  ##\n#   Create unprivileged user\n#  ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner\n#   It would be nice to get rid of some build dependencies at this point\n#   Clean up aptitude cruft\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Put this just before we change users because the copy (and every\n#   step after it) will always be rerun by docker, but we need to be\n#   root for the chown command.\nCOPY . $SCANNER_HOME\nRUN chown -R scanner:scanner ${SCANNER_HOME}\n#  ##\n#   Prepare to Run\n#  ##\n#   Right now we need to be root at runtime in order to create files in\n#   /home/shared\n#   USER scanner:scanner\nWORKDIR $SCANNER_HOME\nENTRYPOINT [\"./scan.sh\"]\n","originalDockerfileUglifiedHash":"85367594eeb588ccf2044141a6776b73","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a6d964314b812382f8f71984a024486c6efcb40f.dockerfile"}