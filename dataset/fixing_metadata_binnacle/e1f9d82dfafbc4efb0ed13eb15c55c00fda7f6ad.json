{"seed":1695945217,"processedDockerfileHash":"aa5468cbce6e68b8931c51a2d90b0340","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM php:7.3-fpm-stretch AS base\nARG project_root=.\nENV REDIS_PREFIX=\"\"\nENV ELASTIC_SEARCH_INDEX_PREFIX=\"\"\n#   install required tools\n#   git for computing diffs\n#   wget for installation of other tools\n#   gnupg and g++ for gd extension\n#   locales for locale-gen command\n#   apt-utils so package configuartion does not get delayed\n#   unzip to ommit composer zip packages corruption\n#   dialog for apt-get to be\n#   git for computing diffs and for npm to download packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget gnupg g++ locales unzip dialog apt-utils git -y \\\n && apt-get clean\n#   Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash\nRUN apt-get update \\\n && apt-get install --no-install-recommends nodejs -y \\\n && apt-get clean\n#   install Composer\nCOPY ${project_root}/docker/php-fpm/docker-install-composer /usr/local/bin/docker-install-composer\nRUN chmod +x /usr/local/bin/docker-install-composer \\\n && docker-install-composer\n#   libpng-dev needed by \"gd\" extension\n#   libzip-dev needed by \"zip\" extension\n#   libicu-dev for intl extension\n#   libpg-dev for connection to postgres database\n#   autoconf needed by \"redis\" extension\nRUN apt-get install --no-install-recommends libpng-dev libjpeg-dev libfreetype6-dev libzip-dev libicu-dev libpq-dev autoconf -y \\\n && apt-get clean\n#   \"gd\" extension needs to have specified jpeg and freetype dir for jpg/jpeg images support\nRUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/\n#   install necessary tools for running application\nRUN docker-php-ext-install bcmath gd intl opcache pgsql pdo_pgsql zip\n#   install grunt cli used by frontend developers for continuous generating of css files\nRUN npm install grunt-cli@1.4.3 -g\n#   install PostgreSQl client for dumping database\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" > /etc/apt/sources.list.d/PostgreSQL.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends postgresql-10 postgresql-client-10 -y \\\n && apt-get clean\n#   install redis extension\nRUN pecl install redis-4.1.1 \\\n && docker-php-ext-enable redis\n#   install locales and switch to en_US.utf8 in order to enable UTF-8 support\n#   see http://jaredmarkell.com/docker-and-locales/ from where was this code taken\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   copy php.ini configuration\nCOPY ${project_root}/docker/php-fpm/php-ini-overrides.ini /usr/local/etc/php/php.ini\n#   overwrite the original entry-point from the PHP Docker image with our own\nCOPY ${project_root}/docker/php-fpm/docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-entrypoint\n#   set www-data user his home directory\n#   the user \"www-data\" is used when running the image, and therefore should own the workdir\nRUN usermod -m -d /home/www-data www-data \\\n && mkdir -p /var/www/html \\\n && chown -R www-data:www-data /home/www-data /var/www/html\n#   Switch to user\nUSER www-data\n#   hirak/prestissimo makes the install of Composer dependencies faster by parallel downloading\nRUN composer global require hirak/prestissimo\n#   set COMPOSER_MEMORY_LIMIT to -1 (i.e. unlimited - this is a hotfix until https://github.com/shopsys/shopsys/issues/634 is solved)\nENV COMPOSER_MEMORY_LIMIT=\"-1\"\n#  #######################################################################################################################\nFROM base AS development\nUSER root\n#   allow overwriting UID and GID o the user \"www-data\" to help solve issues with permissions in mounted volumes\n#   if the GID is already in use, we will assign GID 33 instead (33 is the standard uid/gid for \"www-data\" in Debian)\nARG www_data_uid\nARG www_data_gid\nRUN if [ -n \"$www_data_uid\" ] ; then deluser www-data \\\n && (addgroup --gid $www_data_gid www-data || addgroup --gid 33 www-data ) \\\n && adduser --system --home /home/www-data --uid $www_data_uid --disabled-password --group www-data ; fi\n#   as the UID and GID might have changed, change the ownership of the home directory workdir again\nRUN chown -R www-data:www-data /home/www-data /var/www/html\nUSER www-data\n#  #######################################################################################################################\nFROM base AS production\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --no-dev\nRUN php phing composer-prod npm dirs-create assets\n#  #######################################################################################################################\nFROM base AS ci\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --dev\nRUN php phing composer-dev npm dirs-create test-dirs-create assets standards tests-unit tests-acceptance-build\nRUN ./bin/console shopsys:environment:change prod\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.3-fpm-stretch AS base\nARG project_root=.\nENV REDIS_PREFIX=\"\"\nENV ELASTIC_SEARCH_INDEX_PREFIX=\"\"\n#  install required tools\n#  git for computing diffs\n#  wget for installation of other tools\n#  gnupg and g++ for gd extension\n#  locales for locale-gen command\n#  apt-utils so package configuartion does not get delayed\n#  unzip to ommit composer zip packages corruption\n#  dialog for apt-get to be\n#  git for computing diffs and for npm to download packages\nRUN apt-get update \\\n && apt-get install wget gnupg g++ locales unzip dialog apt-utils git -y \\\n && apt-get clean\n#  Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash\nRUN apt-get update \\\n && apt-get install nodejs -y \\\n && apt-get clean\n#  install Composer\nCOPY ${project_root}/docker/php-fpm/docker-install-composer /usr/local/bin/docker-install-composer\nRUN chmod +x /usr/local/bin/docker-install-composer \\\n && docker-install-composer\n#  libpng-dev needed by \"gd\" extension\n#  libzip-dev needed by \"zip\" extension\n#  libicu-dev for intl extension\n#  libpg-dev for connection to postgres database\n#  autoconf needed by \"redis\" extension\nRUN apt-get install libpng-dev libjpeg-dev libfreetype6-dev libzip-dev libicu-dev libpq-dev autoconf -y \\\n && apt-get clean\n#  \"gd\" extension needs to have specified jpeg and freetype dir for jpg/jpeg images support\nRUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/\n#  install necessary tools for running application\nRUN docker-php-ext-install bcmath gd intl opcache pgsql pdo_pgsql zip\n#  install grunt cli used by frontend developers for continuous generating of css files\nRUN npm install grunt-cli -g\n#  install PostgreSQl client for dumping database\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" > /etc/apt/sources.list.d/PostgreSQL.list' \\\n && apt-get update \\\n && apt-get install postgresql-10 postgresql-client-10 -y \\\n && apt-get clean\n#  install redis extension\nRUN pecl install redis-4.1.1 \\\n && docker-php-ext-enable redis\n#  install locales and switch to en_US.utf8 in order to enable UTF-8 support\n#  see http://jaredmarkell.com/docker-and-locales/ from where was this code taken\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  copy php.ini configuration\nCOPY ${project_root}/docker/php-fpm/php-ini-overrides.ini /usr/local/etc/php/php.ini\n#  overwrite the original entry-point from the PHP Docker image with our own\nCOPY ${project_root}/docker/php-fpm/docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-entrypoint\n#  set www-data user his home directory\n#  the user \"www-data\" is used when running the image, and therefore should own the workdir\nRUN usermod -m -d /home/www-data www-data \\\n && mkdir -p /var/www/html \\\n && chown -R www-data:www-data /home/www-data /var/www/html\n#  Switch to user\nUSER www-data\n#  hirak/prestissimo makes the install of Composer dependencies faster by parallel downloading\nRUN composer global require hirak/prestissimo\n#  set COMPOSER_MEMORY_LIMIT to -1 (i.e. unlimited - this is a hotfix until https://github.com/shopsys/shopsys/issues/634 is solved)\nENV COMPOSER_MEMORY_LIMIT=\"-1\"\n# #######################################################################################################################\nFROM base AS development\nUSER root\n#  allow overwriting UID and GID o the user \"www-data\" to help solve issues with permissions in mounted volumes\n#  if the GID is already in use, we will assign GID 33 instead (33 is the standard uid/gid for \"www-data\" in Debian)\nARG www_data_uid\nARG www_data_gid\nRUN if [ -n \"$www_data_uid\" ] ; then deluser www-data \\\n && (addgroup --gid $www_data_gid www-data || addgroup --gid 33 www-data ) \\\n && adduser --system --home /home/www-data --uid $www_data_uid --disabled-password --group www-data ; fi\n#  as the UID and GID might have changed, change the ownership of the home directory workdir again\nRUN chown -R www-data:www-data /home/www-data /var/www/html\nUSER www-data\n# #######################################################################################################################\nFROM base AS production\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --no-dev\nRUN php phing composer-prod npm dirs-create assets\n# #######################################################################################################################\nFROM base AS ci\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --dev\nRUN php phing composer-dev npm dirs-create test-dirs-create assets standards tests-unit tests-acceptance-build\nRUN ./bin/console shopsys:environment:change prod\n","injectedSmells":[],"originalDockerfileHash":"edd6a5a7b5255d3d3236481165161201","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.3-fpm-stretch AS base\nARG project_root=.\nENV REDIS_PREFIX=\"\"\nENV ELASTIC_SEARCH_INDEX_PREFIX=\"\"\n#   install required tools\n#   git for computing diffs\n#   wget for installation of other tools\n#   gnupg and g++ for gd extension\n#   locales for locale-gen command\n#   apt-utils so package configuartion does not get delayed\n#   unzip to ommit composer zip packages corruption\n#   dialog for apt-get to be\n#   git for computing diffs and for npm to download packages\nRUN apt-get update \\\n && apt-get install wget gnupg g++ locales unzip dialog apt-utils git -y \\\n && apt-get clean\n#   Install NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash\nRUN apt-get update \\\n && apt-get install nodejs -y \\\n && apt-get clean\n#   install Composer\nCOPY ${project_root}/docker/php-fpm/docker-install-composer /usr/local/bin/docker-install-composer\nRUN chmod +x /usr/local/bin/docker-install-composer \\\n && docker-install-composer\n#   libpng-dev needed by \"gd\" extension\n#   libzip-dev needed by \"zip\" extension\n#   libicu-dev for intl extension\n#   libpg-dev for connection to postgres database\n#   autoconf needed by \"redis\" extension\nRUN apt-get install libpng-dev libjpeg-dev libfreetype6-dev libzip-dev libicu-dev libpq-dev autoconf -y \\\n && apt-get clean\n#   \"gd\" extension needs to have specified jpeg and freetype dir for jpg/jpeg images support\nRUN docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/\n#   install necessary tools for running application\nRUN docker-php-ext-install bcmath gd intl opcache pgsql pdo_pgsql zip\n#   install grunt cli used by frontend developers for continuous generating of css files\nRUN npm install grunt-cli -g\n#   install PostgreSQl client for dumping database\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" > /etc/apt/sources.list.d/PostgreSQL.list' \\\n && apt-get update \\\n && apt-get install postgresql-10 postgresql-client-10 -y \\\n && apt-get clean\n#   install redis extension\nRUN pecl install redis-4.1.1 \\\n && docker-php-ext-enable redis\n#   install locales and switch to en_US.utf8 in order to enable UTF-8 support\n#   see http://jaredmarkell.com/docker-and-locales/ from where was this code taken\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   copy php.ini configuration\nCOPY ${project_root}/docker/php-fpm/php-ini-overrides.ini /usr/local/etc/php/php.ini\n#   overwrite the original entry-point from the PHP Docker image with our own\nCOPY ${project_root}/docker/php-fpm/docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-entrypoint\n#   set www-data user his home directory\n#   the user \"www-data\" is used when running the image, and therefore should own the workdir\nRUN usermod -m -d /home/www-data www-data \\\n && mkdir -p /var/www/html \\\n && chown -R www-data:www-data /home/www-data /var/www/html\n#   Switch to user\nUSER www-data\n#   hirak/prestissimo makes the install of Composer dependencies faster by parallel downloading\nRUN composer global require hirak/prestissimo\n#   set COMPOSER_MEMORY_LIMIT to -1 (i.e. unlimited - this is a hotfix until https://github.com/shopsys/shopsys/issues/634 is solved)\nENV COMPOSER_MEMORY_LIMIT=\"-1\"\n#  #######################################################################################################################\nFROM base AS development\nUSER root\n#   allow overwriting UID and GID o the user \"www-data\" to help solve issues with permissions in mounted volumes\n#   if the GID is already in use, we will assign GID 33 instead (33 is the standard uid/gid for \"www-data\" in Debian)\nARG www_data_uid\nARG www_data_gid\nRUN if [ -n \"$www_data_uid\" ] ; then deluser www-data \\\n && (addgroup --gid $www_data_gid www-data || addgroup --gid 33 www-data ) \\\n && adduser --system --home /home/www-data --uid $www_data_uid --disabled-password --group www-data ; fi\n#   as the UID and GID might have changed, change the ownership of the home directory workdir again\nRUN chown -R www-data:www-data /home/www-data /var/www/html\nUSER www-data\n#  #######################################################################################################################\nFROM base AS production\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --no-dev\nRUN php phing composer-prod npm dirs-create assets\n#  #######################################################################################################################\nFROM base AS ci\nCOPY --chown=www-data:www-data / /var/www/html\nRUN composer install --optimize-autoloader --no-interaction --no-progress --dev\nRUN php phing composer-dev npm dirs-create test-dirs-create assets standards tests-unit tests-acceptance-build\nRUN ./bin/console shopsys:environment:change prod\n","originalDockerfileUglifiedHash":"7817bbde48f2611e8eaa026ae4a6b342","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e1f9d82dfafbc4efb0ed13eb15c55c00fda7f6ad.dockerfile"}