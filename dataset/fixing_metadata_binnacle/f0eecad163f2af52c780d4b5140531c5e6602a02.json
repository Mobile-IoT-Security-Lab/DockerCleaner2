{"seed":3308480128,"processedDockerfileHash":"3839b618e1aaef4f4d1de816674dc3e4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM cassandra:3.11\n#   utilities\nRUN apt-get update -y ; apt-get install --no-install-recommends apt-transport-https bc curl vim apt-utils software-properties-common git zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl -y\n#   env variables\nENV ADAMPRO_HOME=\"/adampro\"\nENV ADAMPRO_CODE=\"${ADAMPRO_HOME}/code\"\nENV ADAMPRO_DATA=\"${ADAMPRO_HOME}/data\"\n#   adjusting logging of Cassandra\nRUN sed -i '/<appender-ref ref=\\\"STDOUT\\\"/d' $CASSANDRA_CONFIG/logback.xml\n#   updating JDK to version 8\nRUN apt-get update ; apt-get install --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless -y\n#   updating scala to 2.11\nRUN mkdir -p /usr/lib/scala-2.11.8 \\\n && curl 'http://www.scala-lang.org/files/archive/scala-2.11.8.tgz' | tar -xz -C /usr/lib/ ; ln -s /usr/lib/scala-2.11.8 /usr/lib/scala\nENV SCALA_HOME=\"/usr/lib/scala\"\nENV PATH=\"\\\"$PATH:$SCALA_HOME/bin\\\"\"\n#   sbt\nRUN echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list ; apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update ; apt-get install --no-install-recommends sbt -y\n#   spark\nRUN curl http://mirror.easyname.ch/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz | tar -xz -C /usr/lib/ ; cd /usr/lib \\\n && ln -s spark-2.4.0-bin-hadoop2.7 spark\nENV SPARK_HOME=\"/usr/lib/spark\"\n#   spark notebook\n#   RUN curl https://s3.eu-central-1.amazonaws.com/spark-notebook/tgz/spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive.tgz?max-keys=100000 | tar -xz -C /usr/lib/; \\\n#     cd /usr/lib && ln -s spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive spark-notebook\n#   ENV SPARK_NOTEBOOK_HOME /usr/lib/spark-notebook/\n#   postgresql\nENV PGDATA=\"${ADAMPRO_DATA}/data/postgres\"\nRUN echo deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update ; apt-get install --no-install-recommends postgresql-client-10 postgresql-10 libpq-dev postgresql-server-dev-10 -y\nENV POSTGRES_HOME=\"/usr/lib/postgresql/10/\"\n#   solr\nRUN mkdir -p /usr/lib/solr-7.5.0 \\\n && curl http://archive.apache.org/dist/lucene/solr/7.5.0/solr-7.5.0.tgz | tar -xz -C /usr/lib/ ; apt-get install --no-install-recommends lsof -y ; ln -s /usr/lib/solr-7.5.0 /usr/lib/solr\nARG SOLR_HOME=/usr/lib/solr\nENV PATH=\"\\\"$PATH:/usr/lib/solr/bin\\\"\"\n#   cassandra\nENV CASSANDRADATA=\"${ADAMPRO_DATA}/data/cassandra\"\nRUN sed -i.bak 's/var\\/lib/usr\\/lib/' /etc/cassandra/cassandra.yaml \\\n && chmod 700 /etc/cassandra/cassandra.yaml\n#   netdata\nARG NETDATA_HOME=/usr/lib/netdata/\nRUN git clone https://github.com/netdata/netdata.git --depth=1 $NETDATA_HOME \\\n && cd $NETDATA_HOME \\\n && ./netdata-installer.sh --dont-start-it --dont-wait\n#   ADAMpro\nRUN mkdir -p ${ADAMPRO_HOME} ; chmod 777 ${ADAMPRO_HOME}\nENV ADAMPRO_GIT=\"\\\"https://github.com/vitrivr/ADAMpro.git\\\"\"\nENV ADAMPRO_BRANCH=\"\\\"master\\\"\"\n#   careful: the next step is potentially cached by Docker!\nRUN git clone -b $ADAMPRO_BRANCH $ADAMPRO_GIT --recursive $ADAMPRO_CODE\nRUN cd $ADAMPRO_CODE \\\n && sbt proto \\\n && sbt assembly \\\n && sbt web/assembly ; cp $ADAMPRO_CODE/conf/log4j.xml ${ADAMPRO_HOME}/log4j.xml ; cp $ADAMPRO_CODE/conf/log4j.properties ${ADAMPRO_HOME}/log4j.properties ; cp $ADAMPRO_CODE/target/scala-2.11/ADAMpro-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-assembly-0.1.0.jar \\\n && cp $ADAMPRO_CODE/web/target/scala-2.11/ADAMpro-web-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-web-assembly-0.1.0.jar\nCOPY update.sh ${ADAMPRO_HOME}/update.sh\nRUN chmod 700 ${ADAMPRO_HOME}/update.sh\n#   ADAMpro data\nRUN mkdir -p ${ADAMPRO_HOME}/data ; mkdir -p ${ADAMPRO_HOME}/logs/\nCOPY data/ ${ADAMPRO_HOME}/data/\nRUN if [ -d $PGDATA ] ; then chown -R postgres:postgres $PGDATA \\\n && chmod -R 700 $PGDATA ; else mkdir -p $PGDATA ;chown -R postgres:postgres $PGDATA ;su --login - postgres --command \"$POSTGRES_HOME/bin/initdb -D $PGDATA; $POSTGRES_HOME/bin/pg_ctl -w start -D $PGDATA; $POSTGRES_HOME/bin/createuser -s adampro; $POSTGRES_HOME/bin/createdb adampro; $POSTGRES_HOME/bin/pg_ctl -w stop -D $PGDATA\" ; fi ; echo \"host all all 0.0.0.0/0 trust\" >> $PGDATA/pg_hba.conf \\\n && echo \"listen_addresses='*'\" >> $PGDATA/postgresql.conf; if [ -d $ADAMPRO_HOME/data/data/solr ] ; then rm -r $SOLR_HOME/server/solr \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; else mv $SOLR_HOME/server/solr $ADAMPRO_HOME/data/data/ \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; fi\nRUN mkdir -p $CASSANDRADATA \\\n && chown -R cassandra:cassandra $CASSANDRADATA \\\n && chmod 777 $CASSANDRADATA \\\n && ln -s $CASSANDRADATA /usr/lib/cassandra\n#   port for postgresql\nEXPOSE 5432/tcp\n#   port for solr\nEXPOSE 8983/tcp\n#   port for spark UI\nEXPOSE 4040/tcp\n#   port for grpc\nEXPOSE 5890/tcp\n#   port for ADAMpro web UI\nEXPOSE 9099/tcp\n#   port for spark notebook\nEXPOSE 10088/tcp\n#   port for netdata\nEXPOSE 19999/tcp\n#   bootstrap\nENV ADAMPRO_START_POSTGRES=\"true\"\nENV ADAMPRO_START_CASSANDRA=\"true\"\nENV ADAMPRO_START_SOLR=\"true\"\nENV ADAMPRO_START_WEBUI=\"true\"\nENV ADAMPRO_START_NOTEBOOK=\"false\"\nENV ADAMPRO_START_NETDATA=\"true\"\nENV ADAMPRO_MEMORY=\"2g\"\nENV ADAMPRO_MASTER=\"local[4]\"\nCOPY adampro.conf ${ADAMPRO_HOME}/adampro.conf\nRUN chown root.root ${ADAMPRO_HOME}/adampro.conf ; chmod 700 ${ADAMPRO_HOME}/adampro.conf\nCOPY wait-for-it.sh ${ADAMPRO_HOME}/wait-for-it.sh\nRUN chown root.root ${ADAMPRO_HOME}/wait-for-it.sh ; chmod 700 ${ADAMPRO_HOME}/wait-for-it.sh\nCOPY bootstrap.sh ${ADAMPRO_HOME}/bootstrap.sh\nRUN chown root.root ${ADAMPRO_HOME}/bootstrap.sh ; chmod 700 ${ADAMPRO_HOME}/bootstrap.sh\nENTRYPOINT [\"/adampro/bootstrap.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM cassandra:3.11\n#  utilities\nRUN apt-get update -y ; apt-get install apt-transport-https bc curl vim apt-utils software-properties-common git zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl -y\n#  env variables\nENV ADAMPRO_HOME=\"/adampro\"\nENV ADAMPRO_CODE=\"${ADAMPRO_HOME}/code\"\nENV ADAMPRO_DATA=\"${ADAMPRO_HOME}/data\"\n#  adjusting logging of Cassandra\nRUN sed -i '/<appender-ref ref=\\\"STDOUT\\\"/d' $CASSANDRA_CONFIG/logback.xml\n#  updating JDK to version 8\nRUN apt-get update ; apt-get install openjdk-8-jdk openjdk-8-jre-headless -y\n#  updating scala to 2.11\nRUN mkdir -p /usr/lib/scala-2.11.8 \\\n && curl 'http://www.scala-lang.org/files/archive/scala-2.11.8.tgz' | tar -xz -C /usr/lib/ ; ln -s /usr/lib/scala-2.11.8 /usr/lib/scala\nENV SCALA_HOME=\"/usr/lib/scala\"\nENV PATH=\"\\\"$PATH:$SCALA_HOME/bin\\\"\"\n#  sbt\nRUN echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list ; apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update ; apt-get install sbt -y\n#  spark\nRUN curl http://mirror.easyname.ch/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz | tar -xz -C /usr/lib/ ; cd /usr/lib \\\n && ln -s spark-2.4.0-bin-hadoop2.7 spark\nENV SPARK_HOME=\"/usr/lib/spark\"\n#  spark notebook\n#  RUN curl https://s3.eu-central-1.amazonaws.com/spark-notebook/tgz/spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive.tgz?max-keys=100000 | tar -xz -C /usr/lib/; \\\n#    cd /usr/lib && ln -s spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive spark-notebook\n#  ENV SPARK_NOTEBOOK_HOME /usr/lib/spark-notebook/\n#  postgresql\nENV PGDATA=\"${ADAMPRO_DATA}/data/postgres\"\nRUN echo deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update ; apt-get install postgresql-client-10 postgresql-10 libpq-dev postgresql-server-dev-10 -y\nENV POSTGRES_HOME=\"/usr/lib/postgresql/10/\"\n#  solr\nRUN mkdir -p /usr/lib/solr-7.5.0 \\\n && curl http://archive.apache.org/dist/lucene/solr/7.5.0/solr-7.5.0.tgz | tar -xz -C /usr/lib/ ; apt-get install lsof -y ; ln -s /usr/lib/solr-7.5.0 /usr/lib/solr\nARG SOLR_HOME=/usr/lib/solr\nENV PATH=\"\\\"$PATH:/usr/lib/solr/bin\\\"\"\n#  cassandra\nENV CASSANDRADATA=\"${ADAMPRO_DATA}/data/cassandra\"\nRUN sed -i.bak 's/var\\/lib/usr\\/lib/' /etc/cassandra/cassandra.yaml \\\n && chmod 700 /etc/cassandra/cassandra.yaml\n#  netdata\nARG NETDATA_HOME=/usr/lib/netdata/\nRUN git clone https://github.com/netdata/netdata.git --depth=1 $NETDATA_HOME \\\n && cd $NETDATA_HOME \\\n && ./netdata-installer.sh --dont-start-it --dont-wait\n#  ADAMpro\nRUN mkdir -p ${ADAMPRO_HOME} ; chmod 777 ${ADAMPRO_HOME}\nENV ADAMPRO_GIT=\"\\\"https://github.com/vitrivr/ADAMpro.git\\\"\"\nENV ADAMPRO_BRANCH=\"\\\"master\\\"\"\n#  careful: the next step is potentially cached by Docker!\nRUN git clone -b $ADAMPRO_BRANCH $ADAMPRO_GIT --recursive $ADAMPRO_CODE\nRUN cd $ADAMPRO_CODE \\\n && sbt proto \\\n && sbt assembly \\\n && sbt web/assembly ; cp $ADAMPRO_CODE/conf/log4j.xml ${ADAMPRO_HOME}/log4j.xml ; cp $ADAMPRO_CODE/conf/log4j.properties ${ADAMPRO_HOME}/log4j.properties ; cp $ADAMPRO_CODE/target/scala-2.11/ADAMpro-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-assembly-0.1.0.jar \\\n && cp $ADAMPRO_CODE/web/target/scala-2.11/ADAMpro-web-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-web-assembly-0.1.0.jar\nCOPY update.sh ${ADAMPRO_HOME}/update.sh\nRUN chmod 700 ${ADAMPRO_HOME}/update.sh\n#  ADAMpro data\nRUN mkdir -p ${ADAMPRO_HOME}/data ; mkdir -p ${ADAMPRO_HOME}/logs/\nCOPY data/ ${ADAMPRO_HOME}/data/\nRUN if [ -d $PGDATA ] ; then chown -R postgres:postgres $PGDATA \\\n && chmod -R 700 $PGDATA ; else mkdir -p $PGDATA ;chown -R postgres:postgres $PGDATA ;su --login - postgres --command \"$POSTGRES_HOME/bin/initdb -D $PGDATA; $POSTGRES_HOME/bin/pg_ctl -w start -D $PGDATA; $POSTGRES_HOME/bin/createuser -s adampro; $POSTGRES_HOME/bin/createdb adampro; $POSTGRES_HOME/bin/pg_ctl -w stop -D $PGDATA\" ; fi ; echo \"host all all 0.0.0.0/0 trust\" >> $PGDATA/pg_hba.conf \\\n && echo \"listen_addresses='*'\" >> $PGDATA/postgresql.conf; if [ -d $ADAMPRO_HOME/data/data/solr ] ; then rm -r $SOLR_HOME/server/solr \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; else mv $SOLR_HOME/server/solr $ADAMPRO_HOME/data/data/ \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; fi\nRUN mkdir -p $CASSANDRADATA \\\n && chown -R cassandra:cassandra $CASSANDRADATA \\\n && chmod 777 $CASSANDRADATA \\\n && ln -s $CASSANDRADATA /usr/lib/cassandra\n#  port for postgresql\nEXPOSE 5432/tcp\n#  port for solr\nEXPOSE 8983/tcp\n#  port for spark UI\nEXPOSE 4040/tcp\n#  port for grpc\nEXPOSE 5890/tcp\n#  port for ADAMpro web UI\nEXPOSE 9099/tcp\n#  port for spark notebook\nEXPOSE 10088/tcp\n#  port for netdata\nEXPOSE 19999/tcp\n#  bootstrap\nENV ADAMPRO_START_POSTGRES=\"true\"\nENV ADAMPRO_START_CASSANDRA=\"true\"\nENV ADAMPRO_START_SOLR=\"true\"\nENV ADAMPRO_START_WEBUI=\"true\"\nENV ADAMPRO_START_NOTEBOOK=\"false\"\nENV ADAMPRO_START_NETDATA=\"true\"\nENV ADAMPRO_MEMORY=\"2g\"\nENV ADAMPRO_MASTER=\"local[4]\"\nCOPY adampro.conf ${ADAMPRO_HOME}/adampro.conf\nRUN chown root.root ${ADAMPRO_HOME}/adampro.conf ; chmod 700 ${ADAMPRO_HOME}/adampro.conf\nCOPY wait-for-it.sh ${ADAMPRO_HOME}/wait-for-it.sh\nRUN chown root.root ${ADAMPRO_HOME}/wait-for-it.sh ; chmod 700 ${ADAMPRO_HOME}/wait-for-it.sh\nCOPY bootstrap.sh ${ADAMPRO_HOME}/bootstrap.sh\nRUN chown root.root ${ADAMPRO_HOME}/bootstrap.sh ; chmod 700 ${ADAMPRO_HOME}/bootstrap.sh\nENTRYPOINT [\"/adampro/bootstrap.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"517dd4801655159ea114b43ac5336680","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM cassandra:3.11\n#   utilities\nRUN apt-get update -y ; apt-get install apt-transport-https bc curl vim apt-utils software-properties-common git zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl -y\n#   env variables\nENV ADAMPRO_HOME=\"/adampro\"\nENV ADAMPRO_CODE=\"${ADAMPRO_HOME}/code\"\nENV ADAMPRO_DATA=\"${ADAMPRO_HOME}/data\"\n#   adjusting logging of Cassandra\nRUN sed -i '/<appender-ref ref=\\\"STDOUT\\\"/d' $CASSANDRA_CONFIG/logback.xml\n#   updating JDK to version 8\nRUN apt-get update ; apt-get install openjdk-8-jdk openjdk-8-jre-headless -y\n#   updating scala to 2.11\nRUN mkdir -p /usr/lib/scala-2.11.8 \\\n && curl 'http://www.scala-lang.org/files/archive/scala-2.11.8.tgz' | tar -xz -C /usr/lib/ ; ln -s /usr/lib/scala-2.11.8 /usr/lib/scala\nENV SCALA_HOME=\"/usr/lib/scala\"\nENV PATH=\"\\\"$PATH:$SCALA_HOME/bin\\\"\"\n#   sbt\nRUN echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list ; apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update ; apt-get install sbt -y\n#   spark\nRUN curl http://mirror.easyname.ch/apache/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz | tar -xz -C /usr/lib/ ; cd /usr/lib \\\n && ln -s spark-2.4.0-bin-hadoop2.7 spark\nENV SPARK_HOME=\"/usr/lib/spark\"\n#   spark notebook\n#   RUN curl https://s3.eu-central-1.amazonaws.com/spark-notebook/tgz/spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive.tgz?max-keys=100000 | tar -xz -C /usr/lib/; \\\n#     cd /usr/lib && ln -s spark-notebook-0.7.0-scala-2.11.8-spark-2.1.0-hadoop-2.7.3-with-hive spark-notebook\n#   ENV SPARK_NOTEBOOK_HOME /usr/lib/spark-notebook/\n#   postgresql\nENV PGDATA=\"${ADAMPRO_DATA}/data/postgres\"\nRUN echo deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main >> /etc/apt/sources.list.d/pgdg.list \\\n && curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n && apt-get update ; apt-get install postgresql-client-10 postgresql-10 libpq-dev postgresql-server-dev-10 -y\nENV POSTGRES_HOME=\"/usr/lib/postgresql/10/\"\n#   solr\nRUN mkdir -p /usr/lib/solr-7.5.0 \\\n && curl http://archive.apache.org/dist/lucene/solr/7.5.0/solr-7.5.0.tgz | tar -xz -C /usr/lib/ ; apt-get install lsof -y ; ln -s /usr/lib/solr-7.5.0 /usr/lib/solr\nARG SOLR_HOME=/usr/lib/solr\nENV PATH=\"\\\"$PATH:/usr/lib/solr/bin\\\"\"\n#   cassandra\nENV CASSANDRADATA=\"${ADAMPRO_DATA}/data/cassandra\"\nRUN sed -i.bak 's/var\\/lib/usr\\/lib/' /etc/cassandra/cassandra.yaml \\\n && chmod 700 /etc/cassandra/cassandra.yaml\n#   netdata\nARG NETDATA_HOME=/usr/lib/netdata/\nRUN git clone https://github.com/netdata/netdata.git --depth=1 $NETDATA_HOME \\\n && cd $NETDATA_HOME \\\n && ./netdata-installer.sh --dont-start-it --dont-wait\n#   ADAMpro\nRUN mkdir -p ${ADAMPRO_HOME} ; chmod 777 ${ADAMPRO_HOME}\nENV ADAMPRO_GIT=\"\\\"https://github.com/vitrivr/ADAMpro.git\\\"\"\nENV ADAMPRO_BRANCH=\"\\\"master\\\"\"\n#   careful: the next step is potentially cached by Docker!\nRUN git clone -b $ADAMPRO_BRANCH $ADAMPRO_GIT --recursive $ADAMPRO_CODE\nRUN cd $ADAMPRO_CODE \\\n && sbt proto \\\n && sbt assembly \\\n && sbt web/assembly ; cp $ADAMPRO_CODE/conf/log4j.xml ${ADAMPRO_HOME}/log4j.xml ; cp $ADAMPRO_CODE/conf/log4j.properties ${ADAMPRO_HOME}/log4j.properties ; cp $ADAMPRO_CODE/target/scala-2.11/ADAMpro-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-assembly-0.1.0.jar \\\n && cp $ADAMPRO_CODE/web/target/scala-2.11/ADAMpro-web-assembly-0.1.0.jar ${ADAMPRO_HOME}/ADAMpro-web-assembly-0.1.0.jar\nCOPY update.sh ${ADAMPRO_HOME}/update.sh\nRUN chmod 700 ${ADAMPRO_HOME}/update.sh\n#   ADAMpro data\nRUN mkdir -p ${ADAMPRO_HOME}/data ; mkdir -p ${ADAMPRO_HOME}/logs/\nCOPY data/ ${ADAMPRO_HOME}/data/\nRUN if [ -d $PGDATA ] ; then chown -R postgres:postgres $PGDATA \\\n && chmod -R 700 $PGDATA ; else mkdir -p $PGDATA ;chown -R postgres:postgres $PGDATA ;su --login - postgres --command \"$POSTGRES_HOME/bin/initdb -D $PGDATA; $POSTGRES_HOME/bin/pg_ctl -w start -D $PGDATA; $POSTGRES_HOME/bin/createuser -s adampro; $POSTGRES_HOME/bin/createdb adampro; $POSTGRES_HOME/bin/pg_ctl -w stop -D $PGDATA\" ; fi ; echo \"host all all 0.0.0.0/0 trust\" >> $PGDATA/pg_hba.conf \\\n && echo \"listen_addresses='*'\" >> $PGDATA/postgresql.conf; if [ -d $ADAMPRO_HOME/data/data/solr ] ; then rm -r $SOLR_HOME/server/solr \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; else mv $SOLR_HOME/server/solr $ADAMPRO_HOME/data/data/ \\\n && ln -s $ADAMPRO_HOME/data/data/solr $SOLR_HOME/server/solr ; fi\nRUN mkdir -p $CASSANDRADATA \\\n && chown -R cassandra:cassandra $CASSANDRADATA \\\n && chmod 777 $CASSANDRADATA \\\n && ln -s $CASSANDRADATA /usr/lib/cassandra\n#   port for postgresql\nEXPOSE 5432/tcp\n#   port for solr\nEXPOSE 8983/tcp\n#   port for spark UI\nEXPOSE 4040/tcp\n#   port for grpc\nEXPOSE 5890/tcp\n#   port for ADAMpro web UI\nEXPOSE 9099/tcp\n#   port for spark notebook\nEXPOSE 10088/tcp\n#   port for netdata\nEXPOSE 19999/tcp\n#   bootstrap\nENV ADAMPRO_START_POSTGRES=\"true\"\nENV ADAMPRO_START_CASSANDRA=\"true\"\nENV ADAMPRO_START_SOLR=\"true\"\nENV ADAMPRO_START_WEBUI=\"true\"\nENV ADAMPRO_START_NOTEBOOK=\"false\"\nENV ADAMPRO_START_NETDATA=\"true\"\nENV ADAMPRO_MEMORY=\"2g\"\nENV ADAMPRO_MASTER=\"local[4]\"\nCOPY adampro.conf ${ADAMPRO_HOME}/adampro.conf\nRUN chown root.root ${ADAMPRO_HOME}/adampro.conf ; chmod 700 ${ADAMPRO_HOME}/adampro.conf\nCOPY wait-for-it.sh ${ADAMPRO_HOME}/wait-for-it.sh\nRUN chown root.root ${ADAMPRO_HOME}/wait-for-it.sh ; chmod 700 ${ADAMPRO_HOME}/wait-for-it.sh\nCOPY bootstrap.sh ${ADAMPRO_HOME}/bootstrap.sh\nRUN chown root.root ${ADAMPRO_HOME}/bootstrap.sh ; chmod 700 ${ADAMPRO_HOME}/bootstrap.sh\nENTRYPOINT [\"/adampro/bootstrap.sh\"]\n","originalDockerfileUglifiedHash":"a4a0054231f464f764c78199856dd977","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f0eecad163f2af52c780d4b5140531c5e6602a02.dockerfile"}