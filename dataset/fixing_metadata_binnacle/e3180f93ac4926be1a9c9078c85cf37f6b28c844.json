{"seed":1625569295,"processedDockerfileHash":"8482a12bf7553f90e1d54892f35d5b94","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.3.6-fpm-alpine3.9\nLABEL maintainer=\"Ric Harvey <ric@ngd.io>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\nENV NGINX_VERSION=\"1.16.0\"\nENV LUA_MODULE_VERSION=\"0.10.14\"\nENV DEVEL_KIT_MODULE_VERSION=\"0.3.0\"\nENV LUAJIT_LIB=\"/usr/lib\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1\"\n#   resolves #166\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add gnu-libiconv --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add autoconf=2.69-r2 gcc=8.3.0-r0 libc-dev=0.7.1-r0 make=4.2.1-r2 libressl-dev=2.7.5-r0 pcre-dev=8.42-r2 zlib-dev=1.2.11-r1 linux-headers=4.18.13-r1 curl=7.64.0-r5 gnupg=2.2.19-r0 libxslt-dev=1.1.33-r3 gd-dev=2.2.5-r4 geoip-dev=1.6.12-r1 perl-dev=5.26.3-r1 luajit-dev=2.1.0_beta3-r4 --no-cache --virtual .build-deps \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz -o ndk.tar.gz \\\n && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz -o lua.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f ndk.tar.gz \\\n && tar -zxC /usr/src -f lua.tar.gz \\\n && rm nginx.tar.gz ndk.tar.gz lua.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add gettext=0.19.8.1-r4 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk upgrade \\\n && apk add bash=4.4.19-r1 openssh-client=7.9_p1-r6 wget=1.20.3-r0 supervisor=3.3.4-r1 curl=7.64.0-r5 libcurl=7.64.0-r5 libzip-dev=1.5.1-r2 bzip2-dev=1.0.6-r7 imap-dev=2007f-r9 openssl-dev=1.1.1k-r0 git=2.20.4-r0 python python-dev py-pip augeas-dev=1.11.0-r0 libressl-dev=2.7.5-r0 ca-certificates=20191127-r2 dialog=1.3.20180621-r0 autoconf=2.69-r2 make=4.2.1-r2 gcc=8.3.0-r0 musl-dev=1.1.20-r6 linux-headers=4.18.13-r1 libmcrypt-dev=2.5.8-r7 libpng-dev=1.6.37-r0 icu-dev=62.1-r1 libpq=11.11-r0 libxslt-dev=1.1.33-r3 libffi-dev=3.2.1-r6 freetype-dev=2.9.1-r3 sqlite-dev=3.28.0-r3 libjpeg-turbo-dev=1.5.3-r6 postgresql-dev=11.11-r0 --no-cache \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install iconv pdo_mysql pdo_sqlite pgsql pdo_pgsql mysqli gd exif intl xsl json soap dom zip opcache \\\n && pecl install xdebug-2.7.2 \\\n && pecl install -o -f redis \\\n && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini \\\n && docker-php-source delete \\\n && mkdir -p /etc/nginx \\\n && mkdir -p /var/www/app \\\n && mkdir -p /run/nginx \\\n && mkdir -p /var/log/supervisor \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php composer-setup.php --quiet --install-dir=/usr/bin --filename=composer \\\n && rm composer-setup.php \\\n && pip install pip==23.1 -U \\\n && pip install certbot==2.5.0 -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#      apk del .sys-deps\n#      ln -s /usr/bin/php7 /usr/bin/php\nCOPY conf/supervisord.conf /etc/supervisord.conf\n#   Copy our nginx config\nRUN rm -Rf /etc/nginx/nginx.conf\nCOPY conf/nginx.conf /etc/nginx/nginx.conf\n#   nginx site conf\nRUN mkdir -p /etc/nginx/sites-available/ \\\n && mkdir -p /etc/nginx/sites-enabled/ \\\n && mkdir -p /etc/nginx/ssl/ \\\n && rm -Rf /var/www/* \\\n && mkdir /var/www/html/\nCOPY conf/nginx-site.conf /etc/nginx/sites-available/default.conf\nCOPY conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n#   tweak php-fpm config\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = nginx/g\" -e \"s/group = www-data/group = nginx/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = nginx/g\" -e \"s/;listen.group = www-data/listen.group = nginx/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#      ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini && \\\n#      find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n#   Add Scripts\nCOPY scripts/start.sh /start.sh\nCOPY scripts/pull /usr/bin/pull\nCOPY scripts/push /usr/bin/push\nCOPY scripts/letsencrypt-setup /usr/bin/letsencrypt-setup\nCOPY scripts/letsencrypt-renew /usr/bin/letsencrypt-renew\nRUN chmod 755 /usr/bin/pull \\\n && chmod 755 /usr/bin/push \\\n && chmod 755 /usr/bin/letsencrypt-setup \\\n && chmod 755 /usr/bin/letsencrypt-renew \\\n && chmod 755 /start.sh\n#   copy in code\nCOPY src/ /var/www/html/\nCOPY errors/ /var/www/errors\nEXPOSE 443/tcp 80/tcp\nWORKDIR \"/var/www/html\"\nCMD [\"/start.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.3.6-fpm-alpine3.9\nLABEL maintainer=\"Ric Harvey <ric@ngd.io>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\nENV NGINX_VERSION=\"1.16.0\"\nENV LUA_MODULE_VERSION=\"0.10.14\"\nENV DEVEL_KIT_MODULE_VERSION=\"0.3.0\"\nENV LUAJIT_LIB=\"/usr/lib\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1\"\n#  resolves #166\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community gnu-libiconv\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf gcc libc-dev make libressl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev luajit-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz -o ndk.tar.gz \\\n && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz -o lua.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f ndk.tar.gz \\\n && tar -zxC /usr/src -f lua.tar.gz \\\n && rm nginx.tar.gz ndk.tar.gz lua.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk upgrade \\\n && apk add --no-cache bash openssh-client wget supervisor curl libcurl libzip-dev bzip2-dev imap-dev openssl-dev git python python-dev py-pip augeas-dev libressl-dev ca-certificates dialog autoconf make gcc musl-dev linux-headers libmcrypt-dev libpng-dev icu-dev libpq libxslt-dev libffi-dev freetype-dev sqlite-dev libjpeg-turbo-dev postgresql-dev \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install iconv pdo_mysql pdo_sqlite pgsql pdo_pgsql mysqli gd exif intl xsl json soap dom zip opcache \\\n && pecl install xdebug-2.7.2 \\\n && pecl install -o -f redis \\\n && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini \\\n && docker-php-source delete \\\n && mkdir -p /etc/nginx \\\n && mkdir -p /var/www/app \\\n && mkdir -p /run/nginx \\\n && mkdir -p /var/log/supervisor \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php composer-setup.php --quiet --install-dir=/usr/bin --filename=composer \\\n && rm composer-setup.php \\\n && pip install pip -U \\\n && pip install certbot -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#     apk del .sys-deps\n#     ln -s /usr/bin/php7 /usr/bin/php\nADD conf/supervisord.conf /etc/supervisord.conf\n#  Copy our nginx config\nRUN rm -Rf /etc/nginx/nginx.conf\nADD conf/nginx.conf /etc/nginx/nginx.conf\n#  nginx site conf\nRUN mkdir -p /etc/nginx/sites-available/ \\\n && mkdir -p /etc/nginx/sites-enabled/ \\\n && mkdir -p /etc/nginx/ssl/ \\\n && rm -Rf /var/www/* \\\n && mkdir /var/www/html/\nADD conf/nginx-site.conf /etc/nginx/sites-available/default.conf\nADD conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n#  tweak php-fpm config\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = nginx/g\" -e \"s/group = www-data/group = nginx/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = nginx/g\" -e \"s/;listen.group = www-data/listen.group = nginx/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#     ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini && \\\n#     find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n#  Add Scripts\nADD scripts/start.sh /start.sh\nADD scripts/pull /usr/bin/pull\nADD scripts/push /usr/bin/push\nADD scripts/letsencrypt-setup /usr/bin/letsencrypt-setup\nADD scripts/letsencrypt-renew /usr/bin/letsencrypt-renew\nRUN chmod 755 /usr/bin/pull \\\n && chmod 755 /usr/bin/push \\\n && chmod 755 /usr/bin/letsencrypt-setup \\\n && chmod 755 /usr/bin/letsencrypt-renew \\\n && chmod 755 /start.sh\n#  copy in code\nADD src/ /var/www/html/\nADD errors/ /var/www/errors\nEXPOSE 443/tcp 80/tcp\nWORKDIR \"/var/www/html\"\nCMD [\"/start.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"128d98c3ca8b29dc3da260e160e4380f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.3.6-fpm-alpine3.9\nLABEL maintainer=\"Ric Harvey <ric@ngd.io>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\nENV NGINX_VERSION=\"1.16.0\"\nENV LUA_MODULE_VERSION=\"0.10.14\"\nENV DEVEL_KIT_MODULE_VERSION=\"0.3.0\"\nENV LUAJIT_LIB=\"/usr/lib\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1\"\n#   resolves #166\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/community gnu-libiconv\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --add-module=/usr/src/ngx_devel_kit-$DEVEL_KIT_MODULE_VERSION --add-module=/usr/src/lua-nginx-module-$LUA_MODULE_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf gcc libc-dev make libressl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev luajit-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://github.com/simpl/ngx_devel_kit/archive/v$DEVEL_KIT_MODULE_VERSION.tar.gz -o ndk.tar.gz \\\n && curl -fSL https://github.com/openresty/lua-nginx-module/archive/v$LUA_MODULE_VERSION.tar.gz -o lua.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f ndk.tar.gz \\\n && tar -zxC /usr/src -f lua.tar.gz \\\n && rm nginx.tar.gz ndk.tar.gz lua.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk upgrade \\\n && apk add --no-cache bash openssh-client wget supervisor curl libcurl libzip-dev bzip2-dev imap-dev openssl-dev git python python-dev py-pip augeas-dev libressl-dev ca-certificates dialog autoconf make gcc musl-dev linux-headers libmcrypt-dev libpng-dev icu-dev libpq libxslt-dev libffi-dev freetype-dev sqlite-dev libjpeg-turbo-dev postgresql-dev \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install iconv pdo_mysql pdo_sqlite pgsql pdo_pgsql mysqli gd exif intl xsl json soap dom zip opcache \\\n && pecl install xdebug-2.7.2 \\\n && pecl install -o -f redis \\\n && echo \"extension=redis.so\" > /usr/local/etc/php/conf.d/redis.ini \\\n && docker-php-source delete \\\n && mkdir -p /etc/nginx \\\n && mkdir -p /var/www/app \\\n && mkdir -p /run/nginx \\\n && mkdir -p /var/log/supervisor \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php composer-setup.php --quiet --install-dir=/usr/bin --filename=composer \\\n && rm composer-setup.php \\\n && pip install pip -U \\\n && pip install certbot -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#      apk del .sys-deps\n#      ln -s /usr/bin/php7 /usr/bin/php\nADD conf/supervisord.conf /etc/supervisord.conf\n#   Copy our nginx config\nRUN rm -Rf /etc/nginx/nginx.conf\nADD conf/nginx.conf /etc/nginx/nginx.conf\n#   nginx site conf\nRUN mkdir -p /etc/nginx/sites-available/ \\\n && mkdir -p /etc/nginx/sites-enabled/ \\\n && mkdir -p /etc/nginx/ssl/ \\\n && rm -Rf /var/www/* \\\n && mkdir /var/www/html/\nADD conf/nginx-site.conf /etc/nginx/sites-available/default.conf\nADD conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf\nRUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf\n#   tweak php-fpm config\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = nginx/g\" -e \"s/group = www-data/group = nginx/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = nginx/g\" -e \"s/;listen.group = www-data/listen.group = nginx/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/var\\/run\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#      ln -s /etc/php7/php.ini /etc/php7/conf.d/php.ini && \\\n#      find /etc/php7/conf.d/ -name \"*.ini\" -exec sed -i -re 's/^(\\s*)#(.*)/\\1;\\2/g' {} \\;\n#   Add Scripts\nADD scripts/start.sh /start.sh\nADD scripts/pull /usr/bin/pull\nADD scripts/push /usr/bin/push\nADD scripts/letsencrypt-setup /usr/bin/letsencrypt-setup\nADD scripts/letsencrypt-renew /usr/bin/letsencrypt-renew\nRUN chmod 755 /usr/bin/pull \\\n && chmod 755 /usr/bin/push \\\n && chmod 755 /usr/bin/letsencrypt-setup \\\n && chmod 755 /usr/bin/letsencrypt-renew \\\n && chmod 755 /start.sh\n#   copy in code\nADD src/ /var/www/html/\nADD errors/ /var/www/errors\nEXPOSE 443/tcp 80/tcp\nWORKDIR \"/var/www/html\"\nCMD [\"/start.sh\"]\n","originalDockerfileUglifiedHash":"187027408257b4f5c5511219bf79372d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e3180f93ac4926be1a9c9078c85cf37f6b28c844.dockerfile"}