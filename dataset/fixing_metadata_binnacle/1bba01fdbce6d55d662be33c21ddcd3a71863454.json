{"seed":1552610655,"processedDockerfileHash":"5ff75406bab74c5720c1e651c5c767ad","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   Docker base environment\n#   Includes most dependences for deep learning, computer vision\nENV DEBIAN_FRONTEND=\"noninteractive\"\nMAINTAINER Adam Harvey\n#   Ubuntu 16.04 + Cuda 8.0 + CUDNN 6.0 + Python2.7 + Python3.5\n#   Using Nvidia driver 367.51 and nvidia-docker\n#   Install Nvidia driver 367.51: \n#     add-apt-repository ppa:graphics-drivers/ppa\n#     apt-get install nvidia-367\n#   [ environment paths ]\nRUN echo export CUDA_HOME=/usr/local/cuda/ >> /etc/bash.bashrc\nRUN echo export PATH=/root/bin/:${CUDA_HOME}/bin:${PATH} >> /etc/bash.bashrc\nRUN echo export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\" >> /etc/bash.bashrc\n#   --------------------------------------------------------\n#   [ Update and upgrade Ubuntu ]\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common -y ) \\\n && add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $( lsb_release -sc ;) multiverse\"\nRUN : \\\n && apt-get upgrade -y\n#   --------------------------------------------------------\n#   [ System dependencies ]\nRUN (apt-get update ;apt-get install --no-install-recommends ant bc build-essential checkinstall cmake curl default-jdk doxygen git gfortran gir1.2-gst-plugins-base-0.10 gir1.2-gstreamer-0.10 imagemagick iproute2 mediainfo nano nginx pkg-config protobuf-compiler python-cffi python-dev python-magic python-h5py python-numpy python-pip python-pythonmagick python-tk python-qt4 python-yaml python-xtermcolor qt5-default rsync supervisor screen sphinx-common texlive-latex-extra tesseract-ocr x264 v4l-utils vim unzip vlc wget xauth yasm youtube-dl zip zlib1g-dev -y )\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends libatlas-base-dev libavcodec-dev libavformat-dev libcurl3-dev libdc1394-22-dev libeigen3-dev libfaac-dev libffi-dev libgflags-dev libfreetype6-dev libgoogle-glog-dev libgstreamer-plugins-base0.10-0 libgstreamer-plugins-base0.10-dev libgstreamer0.10-0 libgstreamer0.10-dev libgtk2.0-dev libhdf5-dev libhdf5-serial-dev libjasper-dev libjpeg-dev libjpeg8-dev libleveldb-dev liblmdb-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libopenexr-dev libpng12-dev libprotobuf-dev libqt4-dev libqt4-opengl-dev libreadline-dev libsnappy-dev libssl-dev libswscale-dev libtbb-dev libtheora-dev libtiff5-dev libvtk5-qt4-dev libv4l-dev libxine2-dev libvorbis-dev libx264-dev libatlas-base-dev libgphoto2-dev libxvidcore-dev libzmq3-dev -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libboost-all-dev -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends pv locate inkscape -y ) \\\n && updatedb\n#   [ install pip2/3 ]\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends python-dev python-pip python3-dev python3-pip -y )\nRUN pip2 install -U pip\nRUN pip3 install -U pip\n#   [ add Github creds ]\nRUN git config --global user.name \"docker\" \\\n && git config --global user.email \"docker@docker.com\"\n#   [ Install Python2.7 packages ]\nRUN pip2.7 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests bcolz sympy\n#   [ Install Python3 packages ]\nRUN pip3 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests python-dateutil bcolz sympy\n#   [ ffmpeg ]\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ffmpeg -y --upgrade )\n#   [ additional ]\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends libcanberra-gtk-module python3-tk -y )\n#   [ define docker user ]\nENV DOCKER_USER=\"docker\"\n#   [ Install ZSH, in home directory ]\n#  RUN adduser --disabled-password --gecos \"\" ${DOCKER_USER} && \\\n#      echo '${DOCKER_USER} ALL=NOPASSWD: ALL' >> /etc/sudoers\nRUN useradd -d /home/${DOCKER_USER} -ms /bin/bash -g root -G sudo -p ${DOCKER_USER} ${DOCKER_USER}\nRUN (apt-get update ;apt-get install --no-install-recommends zsh -y )\nRUN git clone git://github.com/robbyrussell/oh-my-zsh.git /home/${DOCKER_USER}/.oh-my-zsh\nRUN cp /home/${DOCKER_USER}/.oh-my-zsh/templates/zshrc.zsh-template /home/${DOCKER_USER}/.zshrc\nRUN chsh -s $( which zsh ;)\n#   [ update config ]\nRUN su -c 'python -c \"import matplotlib.pyplot\"' ${DOCKER_USER} \\\n && python -c 'import matplotlib.pyplot' \\\n && echo 'ln -f /dev/null /dev/raw1394 2>/dev/null' >> /etc/bash.bashrc \\\n && echo 'export PATH=/work/bin:/root/bin:${PATH}' >> /etc/bash.bashrc\nWORKDIR /home/${DOCKER_USER}\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#  Docker base environment\n#  Includes most dependences for deep learning, computer vision\nENV DEBIAN_FRONTEND=\"noninteractive\"\nMAINTAINER Adam Harvey\n#  Ubuntu 16.04 + Cuda 8.0 + CUDNN 6.0 + Python2.7 + Python3.5\n#  Using Nvidia driver 367.51 and nvidia-docker\n#  Install Nvidia driver 367.51: \n#    add-apt-repository ppa:graphics-drivers/ppa\n#    apt-get install nvidia-367\n#  [ environment paths ]\nRUN echo export CUDA_HOME=/usr/local/cuda/ >> /etc/bash.bashrc\nRUN echo export PATH=/root/bin/:${CUDA_HOME}/bin:${PATH} >> /etc/bash.bashrc\nRUN echo export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\" >> /etc/bash.bashrc\n#  --------------------------------------------------------\n#  [ Update and upgrade Ubuntu ]\nRUN apt-get update\nRUN apt-get install --no-install-recommends software-properties-common -y \\\n && add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $( lsb_release -sc ;) multiverse\"\nRUN apt-get update \\\n && apt-get upgrade -y\n#  --------------------------------------------------------\n#  [ System dependencies ]\nRUN apt-get install ant bc build-essential checkinstall cmake curl default-jdk doxygen git gfortran gir1.2-gst-plugins-base-0.10 gir1.2-gstreamer-0.10 imagemagick iproute2 mediainfo nano nginx pkg-config protobuf-compiler python-cffi python-dev python-magic python-h5py python-numpy python-pip python-pythonmagick python-tk python-qt4 python-yaml python-xtermcolor qt5-default rsync supervisor screen sphinx-common texlive-latex-extra tesseract-ocr x264 v4l-utils vim unzip vlc wget xauth yasm youtube-dl zip zlib1g-dev -y\nRUN apt-get update\nRUN apt-get install libatlas-base-dev libavcodec-dev libavformat-dev libcurl3-dev libdc1394-22-dev libeigen3-dev libfaac-dev libffi-dev libgflags-dev libfreetype6-dev libgoogle-glog-dev libgstreamer-plugins-base0.10-0 libgstreamer-plugins-base0.10-dev libgstreamer0.10-0 libgstreamer0.10-dev libgtk2.0-dev libhdf5-dev libhdf5-serial-dev libjasper-dev libjpeg-dev libjpeg8-dev libleveldb-dev liblmdb-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libopenexr-dev libpng12-dev libprotobuf-dev libqt4-dev libqt4-opengl-dev libreadline-dev libsnappy-dev libssl-dev libswscale-dev libtbb-dev libtheora-dev libtiff5-dev libvtk5-qt4-dev libv4l-dev libxine2-dev libvorbis-dev libx264-dev libatlas-base-dev libgphoto2-dev libxvidcore-dev libzmq3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends libboost-all-dev -y \\\n && apt-get install pv locate inkscape -y \\\n && updatedb\n#  [ install pip2/3 ]\nRUN apt-get update\nRUN apt-get install python-dev python-pip python3-dev python3-pip -y\nRUN pip2 install -U pip\nRUN pip3 install -U pip\n#  [ add Github creds ]\nRUN git config --global user.name \"docker\" \\\n && git config --global user.email \"docker@docker.com\"\n#  [ Install Python2.7 packages ]\nRUN pip2.7 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests bcolz sympy\n#  [ Install Python3 packages ]\nRUN pip3 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests python-dateutil bcolz sympy\n#  [ ffmpeg ]\nRUN apt-get update \\\n && apt-get install ffmpeg -y --upgrade\n#  [ additional ]\nRUN apt-get update -y\nRUN apt-get install libcanberra-gtk-module python3-tk -y\n#  [ define docker user ]\nENV DOCKER_USER=\"docker\"\n#  [ Install ZSH, in home directory ]\n# RUN adduser --disabled-password --gecos \"\" ${DOCKER_USER} && \\\n#     echo '${DOCKER_USER} ALL=NOPASSWD: ALL' >> /etc/sudoers\nRUN useradd -d /home/${DOCKER_USER} -ms /bin/bash -g root -G sudo -p ${DOCKER_USER} ${DOCKER_USER}\nRUN apt-get install -y zsh\nRUN git clone git://github.com/robbyrussell/oh-my-zsh.git /home/${DOCKER_USER}/.oh-my-zsh\nRUN cp /home/${DOCKER_USER}/.oh-my-zsh/templates/zshrc.zsh-template /home/${DOCKER_USER}/.zshrc\nRUN chsh -s $( which zsh ;)\n#  [ update config ]\nRUN su -c 'python -c \"import matplotlib.pyplot\"' ${DOCKER_USER} \\\n && python -c 'import matplotlib.pyplot' \\\n && echo 'ln -f /dev/null /dev/raw1394 2>/dev/null' >> /etc/bash.bashrc \\\n && echo 'export PATH=/work/bin:/root/bin:${PATH}' >> /etc/bash.bashrc\nWORKDIR /home/${DOCKER_USER}\n","injectedSmells":[],"originalDockerfileHash":"ce9e29c110e243c999241dc75c8af55f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   Docker base environment\n#   Includes most dependences for deep learning, computer vision\nENV DEBIAN_FRONTEND=\"noninteractive\"\nMAINTAINER Adam Harvey\n#   Ubuntu 16.04 + Cuda 8.0 + CUDNN 6.0 + Python2.7 + Python3.5\n#   Using Nvidia driver 367.51 and nvidia-docker\n#   Install Nvidia driver 367.51: \n#     add-apt-repository ppa:graphics-drivers/ppa\n#     apt-get install nvidia-367\n#   [ environment paths ]\nRUN echo export CUDA_HOME=/usr/local/cuda/ >> /etc/bash.bashrc\nRUN echo export PATH=/root/bin/:${CUDA_HOME}/bin:${PATH} >> /etc/bash.bashrc\nRUN echo export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\" >> /etc/bash.bashrc\n#   --------------------------------------------------------\n#   [ Update and upgrade Ubuntu ]\nRUN apt-get update\nRUN apt-get install --no-install-recommends software-properties-common -y \\\n && add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $( lsb_release -sc ;) multiverse\"\nRUN apt-get update \\\n && apt-get upgrade -y\n#   --------------------------------------------------------\n#   [ System dependencies ]\nRUN apt-get install ant bc build-essential checkinstall cmake curl default-jdk doxygen git gfortran gir1.2-gst-plugins-base-0.10 gir1.2-gstreamer-0.10 imagemagick iproute2 mediainfo nano nginx pkg-config protobuf-compiler python-cffi python-dev python-magic python-h5py python-numpy python-pip python-pythonmagick python-tk python-qt4 python-yaml python-xtermcolor qt5-default rsync supervisor screen sphinx-common texlive-latex-extra tesseract-ocr x264 v4l-utils vim unzip vlc wget xauth yasm youtube-dl zip zlib1g-dev -y\nRUN apt-get update\nRUN apt-get install libatlas-base-dev libavcodec-dev libavformat-dev libcurl3-dev libdc1394-22-dev libeigen3-dev libfaac-dev libffi-dev libgflags-dev libfreetype6-dev libgoogle-glog-dev libgstreamer-plugins-base0.10-0 libgstreamer-plugins-base0.10-dev libgstreamer0.10-0 libgstreamer0.10-dev libgtk2.0-dev libhdf5-dev libhdf5-serial-dev libjasper-dev libjpeg-dev libjpeg8-dev libleveldb-dev liblmdb-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libopenexr-dev libpng12-dev libprotobuf-dev libqt4-dev libqt4-opengl-dev libreadline-dev libsnappy-dev libssl-dev libswscale-dev libtbb-dev libtheora-dev libtiff5-dev libvtk5-qt4-dev libv4l-dev libxine2-dev libvorbis-dev libx264-dev libatlas-base-dev libgphoto2-dev libxvidcore-dev libzmq3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends libboost-all-dev -y \\\n && apt-get install pv locate inkscape -y \\\n && updatedb\n#   [ install pip2/3 ]\nRUN apt-get update\nRUN apt-get install python-dev python-pip python3-dev python3-pip -y\nRUN pip2 install -U pip\nRUN pip3 install -U pip\n#   [ add Github creds ]\nRUN git config --global user.name \"docker\" \\\n && git config --global user.email \"docker@docker.com\"\n#   [ Install Python2.7 packages ]\nRUN pip2.7 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests bcolz sympy\n#   [ Install Python3 packages ]\nRUN pip3 install -U setuptools packaging pyparsing six cython svgwrite numpy sklearn scikit-image scikit-learn imutils Pillow matplotlib argparse jupyter scipy easydict click pandas ipdb python-osc tqdm xmltodict librosa uwsgi Flask requests python-dateutil bcolz sympy\n#   [ ffmpeg ]\nRUN apt-get update \\\n && apt-get install ffmpeg -y --upgrade\n#   [ additional ]\nRUN apt-get update -y\nRUN apt-get install libcanberra-gtk-module python3-tk -y\n#   [ define docker user ]\nENV DOCKER_USER=\"docker\"\n#   [ Install ZSH, in home directory ]\n#  RUN adduser --disabled-password --gecos \"\" ${DOCKER_USER} && \\\n#      echo '${DOCKER_USER} ALL=NOPASSWD: ALL' >> /etc/sudoers\nRUN useradd -d /home/${DOCKER_USER} -ms /bin/bash -g root -G sudo -p ${DOCKER_USER} ${DOCKER_USER}\nRUN apt-get install zsh -y\nRUN git clone git://github.com/robbyrussell/oh-my-zsh.git /home/${DOCKER_USER}/.oh-my-zsh\nRUN cp /home/${DOCKER_USER}/.oh-my-zsh/templates/zshrc.zsh-template /home/${DOCKER_USER}/.zshrc\nRUN chsh -s $( which zsh ;)\n#   [ update config ]\nRUN su -c 'python -c \"import matplotlib.pyplot\"' ${DOCKER_USER} \\\n && python -c 'import matplotlib.pyplot' \\\n && echo 'ln -f /dev/null /dev/raw1394 2>/dev/null' >> /etc/bash.bashrc \\\n && echo 'export PATH=/work/bin:/root/bin:${PATH}' >> /etc/bash.bashrc\nWORKDIR /home/${DOCKER_USER}\n","originalDockerfileUglifiedHash":"78785c91d79664a716a41dbd0c52d85a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1bba01fdbce6d55d662be33c21ddcd3a71863454.dockerfile"}