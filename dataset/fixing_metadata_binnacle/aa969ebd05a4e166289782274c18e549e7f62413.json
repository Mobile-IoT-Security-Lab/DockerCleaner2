{"seed":2514251663,"processedDockerfileHash":"27cbac586c1a503401f41cb7f91b0981","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#  ## DO NOT EDIT DIRECTLY, SEE Dockerfile.template ###\nFROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n#   CUDA includes\nENV CUDA_PATH=\"/usr/local/cuda\"\nENV CUDA_INCLUDE_PATH=\"/usr/local/cuda/include\"\nENV CUDA_LIBRARY_PATH=\"/usr/local/cuda/lib64\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"6.0.20\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential cmake git curl ca-certificates libjpeg-dev libpng-dev libcudnn6=$CUDNN_VERSION-1+cuda8.0 libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 -y --allow-unauthenticated ) \\\n && rm -rf /var/lib/apt/lists/*\n#   FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\n#   # CUDA includes\n#   ENV CUDA_PATH /usr/local/cuda\n#   ENV CUDA_INCLUDE_PATH /usr/local/cuda/include\n#   ENV CUDA_LIBRARY_PATH /usr/local/cuda/lib64\n#   RUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n#   ENV CUDNN_VERSION 7.0.5.15\n#   RUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n#            build-essential \\\n#            cmake \\\n#            git \\\n#            curl \\\n#            ca-certificates \\\n#            libjpeg-dev \\\n#            libpng-dev \\\n#            libcudnn7=$CUDNN_VERSION-1+cuda9.1 \\\n#            libcudnn7-dev=$CUDNN_VERSION-1+cuda9.1 && \\\n#        rm -rf /var/lib/apt/lists/*\n#  ## From previous Docker template\n#   Ubuntu Packages\nRUN apt-get update \\\n && apt-get update -y --allow-unauthenticated \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common apt-utils nano vim man build-essential wget sudo git mercurial subversion -y --allow-unauthenticated ) \\\n && rm -rf /var/lib/apt/lists/* nvidia-profiler\n#   Old Miniconda install\n#   RUN curl -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-4.3.31-Linux-x86_64.sh  && \\\n#        chmod +x ~/miniconda.sh && \\\n#        ~/miniconda.sh -b -p /opt/conda && \\\n#        rm ~/miniconda.sh && \\\n#        /opt/conda/bin/conda install conda-build && \\\n#        /opt/conda/bin/conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl&& \\\n#        /opt/conda/bin/conda clean -ya\n#  # Install Miniconda\nRUN apt-get update --fix-missing \\\n && (apt-get update ;apt-get install --no-install-recommends wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y )\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends curl grep sed dpkg -y ) \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN : \\\n && sudo apt-get install -y libgl1-mesa-dev libgl1-mesa-glx libosmesa6-dev libglfw3-dev\n#  # Miniconda end\nRUN conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl\n#   RUN pip install line_profiler\n#   RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda90 -c pytorch\n#  RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install -y mpi4py opencv\nRUN pip install gym==0.26.2 pandas==2.0.0 hashfs==0.7.2 pydevd==2.9.6 remote_pdb==2.1.0 rpdb==0.1.6 matplotlib==3.7.1 visdom==0.2.4 gym[atari]\nRUN pip install sacred==0.8.4 GitPython==3.1.31 pymongo==4.3.3 tinydb==4.7.1 tinydb-serialization==2.1.0 tensorflow==1.3.0 pptree==3.1 progressbar2==4.2.0 ipdb==0.13.13 namedlist==1.8 pyyaml==6.0 cython==0.29.34\nRUN pip install -e git+https://github.com/openai/mujoco-py.git#egg=mujoco_py\nRUN pip install -e git+https://github.com/openai/baselines.git#egg=baselines\n#   WORKDIR /workspace\n#   RUN chmod -R a+w /workspace\n#   Section to get permissions right, and avoid running inside as root {{\n#   Create a user matching the UID, and create/chmod home dir (== project directory)\n#   (uid corresponds to breord in CS network)\nRUN useradd -d /project -u 12567 --create-home user\nUSER user\nWORKDIR /project/\nCOPY . /project/\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/project/\\\"\"\nENTRYPOINT [\"/opt/conda/bin/python\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ## DO NOT EDIT DIRECTLY, SEE Dockerfile.template ###\nFROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n#  CUDA includes\nENV CUDA_PATH=\"/usr/local/cuda\"\nENV CUDA_INCLUDE_PATH=\"/usr/local/cuda/include\"\nENV CUDA_LIBRARY_PATH=\"/usr/local/cuda/lib64\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"6.0.20\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git curl ca-certificates libjpeg-dev libpng-dev libcudnn6=$CUDNN_VERSION-1+cuda8.0 libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/*\n#  FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\n#  # CUDA includes\n#  ENV CUDA_PATH /usr/local/cuda\n#  ENV CUDA_INCLUDE_PATH /usr/local/cuda/include\n#  ENV CUDA_LIBRARY_PATH /usr/local/cuda/lib64\n#  RUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n#  ENV CUDNN_VERSION 7.0.5.15\n#  RUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n#           build-essential \\\n#           cmake \\\n#           git \\\n#           curl \\\n#           ca-certificates \\\n#           libjpeg-dev \\\n#           libpng-dev \\\n#           libcudnn7=$CUDNN_VERSION-1+cuda9.1 \\\n#           libcudnn7-dev=$CUDNN_VERSION-1+cuda9.1 && \\\n#       rm -rf /var/lib/apt/lists/*\n# ## From previous Docker template\n#  Ubuntu Packages\nRUN apt-get update \\\n && apt-get update -y --allow-unauthenticated \\\n && apt-get install software-properties-common apt-utils nano vim man build-essential wget sudo git mercurial subversion -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/* nvidia-profiler\n#  Old Miniconda install\n#  RUN curl -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-4.3.31-Linux-x86_64.sh  && \\\n#       chmod +x ~/miniconda.sh && \\\n#       ~/miniconda.sh -b -p /opt/conda && \\\n#       rm ~/miniconda.sh && \\\n#       /opt/conda/bin/conda install conda-build && \\\n#       /opt/conda/bin/conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl&& \\\n#       /opt/conda/bin/conda clean -ya\n# # Install Miniconda\nRUN apt-get update --fix-missing \\\n && apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN apt-get update \\\n && apt-get install curl grep sed dpkg -y \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN apt-get update --fix-missing \\\n && sudo apt-get install -y libgl1-mesa-dev libgl1-mesa-glx libosmesa6-dev libglfw3-dev\n# # Miniconda end\nRUN conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl\n#  RUN pip install line_profiler\n#  RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda90 -c pytorch\n# RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install -y mpi4py opencv\nRUN pip install gym pandas hashfs pydevd remote_pdb rpdb matplotlib visdom gym[atari]\nRUN pip install sacred GitPython pymongo tinydb tinydb-serialization tensorflow==1.3.0 pptree progressbar2 ipdb namedlist pyyaml cython\nRUN pip install -e git+https://github.com/openai/mujoco-py.git#egg=mujoco_py\nRUN pip install -e git+https://github.com/openai/baselines.git#egg=baselines\n#  WORKDIR /workspace\n#  RUN chmod -R a+w /workspace\n#  Section to get permissions right, and avoid running inside as root {{\n#  Create a user matching the UID, and create/chmod home dir (== project directory)\n#  (uid corresponds to breord in CS network)\nRUN useradd -d /project -u 12567 --create-home user\nUSER user\nWORKDIR /project/\nADD . /project/\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/project/\\\"\"\nENTRYPOINT [\"/opt/conda/bin/python\"]\n","injectedSmells":[],"originalDockerfileHash":"f165a11ed389c9398129b51795dc6f8f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ## DO NOT EDIT DIRECTLY, SEE Dockerfile.template ###\nFROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n#   CUDA includes\nENV CUDA_PATH=\"/usr/local/cuda\"\nENV CUDA_INCLUDE_PATH=\"/usr/local/cuda/include\"\nENV CUDA_LIBRARY_PATH=\"/usr/local/cuda/lib64\"\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDNN_VERSION=\"6.0.20\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git curl ca-certificates libjpeg-dev libpng-dev libcudnn6=$CUDNN_VERSION-1+cuda8.0 libcudnn6-dev=$CUDNN_VERSION-1+cuda8.0 -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/*\n#   FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\n#   # CUDA includes\n#   ENV CUDA_PATH /usr/local/cuda\n#   ENV CUDA_INCLUDE_PATH /usr/local/cuda/include\n#   ENV CUDA_LIBRARY_PATH /usr/local/cuda/lib64\n#   RUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n#   ENV CUDNN_VERSION 7.0.5.15\n#   RUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n#            build-essential \\\n#            cmake \\\n#            git \\\n#            curl \\\n#            ca-certificates \\\n#            libjpeg-dev \\\n#            libpng-dev \\\n#            libcudnn7=$CUDNN_VERSION-1+cuda9.1 \\\n#            libcudnn7-dev=$CUDNN_VERSION-1+cuda9.1 && \\\n#        rm -rf /var/lib/apt/lists/*\n#  ## From previous Docker template\n#   Ubuntu Packages\nRUN apt-get update \\\n && apt-get update -y --allow-unauthenticated \\\n && apt-get install software-properties-common apt-utils nano vim man build-essential wget sudo git mercurial subversion -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/* nvidia-profiler\n#   Old Miniconda install\n#   RUN curl -o ~/miniconda.sh -O  https://repo.continuum.io/miniconda/Miniconda3-4.3.31-Linux-x86_64.sh  && \\\n#        chmod +x ~/miniconda.sh && \\\n#        ~/miniconda.sh -b -p /opt/conda && \\\n#        rm ~/miniconda.sh && \\\n#        /opt/conda/bin/conda install conda-build && \\\n#        /opt/conda/bin/conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl&& \\\n#        /opt/conda/bin/conda clean -ya\n#  # Install Miniconda\nRUN apt-get update --fix-missing \\\n && apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN apt-get update \\\n && apt-get install curl grep sed dpkg -y \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN apt-get update --fix-missing \\\n && sudo apt-get install -y libgl1-mesa-dev libgl1-mesa-glx libosmesa6-dev libglfw3-dev\n#  # Miniconda end\nRUN conda create -y --name pytorch-py36 python=3.6.3 numpy pyyaml scipy ipython mkl\n#   RUN pip install line_profiler\n#   RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda90 -c pytorch\n#  RUN /opt/conda/envs/pytorch-py36/bin/conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install pytorch torchvision cuda80 -c pytorch\nRUN conda install -y mpi4py opencv\nRUN pip install gym pandas hashfs pydevd remote_pdb rpdb matplotlib visdom gym[atari]\nRUN pip install sacred GitPython pymongo tinydb tinydb-serialization tensorflow==1.3.0 pptree progressbar2 ipdb namedlist pyyaml cython\nRUN pip install -e git+https://github.com/openai/mujoco-py.git#egg=mujoco_py\nRUN pip install -e git+https://github.com/openai/baselines.git#egg=baselines\n#   WORKDIR /workspace\n#   RUN chmod -R a+w /workspace\n#   Section to get permissions right, and avoid running inside as root {{\n#   Create a user matching the UID, and create/chmod home dir (== project directory)\n#   (uid corresponds to breord in CS network)\nRUN useradd -d /project -u 12567 --create-home user\nUSER user\nWORKDIR /project/\nADD . /project/\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/project/\\\"\"\nENTRYPOINT [\"/opt/conda/bin/python\"]\n","originalDockerfileUglifiedHash":"7fcc2b966742173464636d0dcb87c7b4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/aa969ebd05a4e166289782274c18e549e7f62413.dockerfile"}