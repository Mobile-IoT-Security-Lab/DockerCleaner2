{"seed":1896133785,"processedDockerfileHash":"1b029a737d6d8f20b2fba14a10bf0557","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file was generated! Edits made directly to this file may be lost.\n#\nARG CUDA_VERSION=10.0\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=centos7\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\nARG CUDA_SHORT_VERSION\nARG CUDA_MAJORMINOR_VERSION\nARG ARROW_CPP_VERSION=0.12.1\nARG CC_VERSION=7\nARG CXX_VERSION=7\nARG CFFI_VERSION=1.11.5\nARG CMAKE_VERSION=3.12.4\nARG CYTHON_VERSION=0.29.*\nARG DASK_VERSION=1.1.1\nARG DISTRIBUTED_VERSION=1.25.3\nARG FAISSGPU_VERSION=1.5.0\nARG HASH_JOIN=ON\nARG IPYTHON_VERSION=7.3*\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG MINICONDA_URL=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG NVIDIA_CONDA_LABEL=nvidia/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RAPIDSAI_CONDA_LABEL=rapidsai/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RMM_VERSION=0.7.*\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG PYTHON_VERSION=3.6\nARG SCIPY_VERSION=1.2.1\nARG SKLEARN_VERSION=0.20.3\nARG TINI_URL=https://github.com/krallin/tini/releases/download/v0.18.0/tini\nARG NUM_BUILD_CPUS=\"\"\nARG UTILS_DIR=utils\nARG SUPPORT_FILES_DIR=supportfiles\nARG RAPIDS_SRC_DIR=/rapids\n#   Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps\n#   This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)\nENV LD_LIBRARY_PATH_POSTBUILD=\"$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice\"\nENV PATH=\"$PATH:/conda/bin\"\nENV CUDA_VERSION=\"${CUDA_MAJORMINOR_VERSION}\"\n#   devtoolset-7 ENV vars\n#   devtoolset-7-* packages will need to be seen first, update PATH accordingly\n#   NOTE: These are commented out since gcc is being built from source\n#     If devtoolset-7 is used, uncomment these vars.\n#   ENV PATH=/opt/rh/devtoolset-7/root/usr/bin:$PATH:/conda/bin\n#   ENV CC=/opt/rh/devtoolset-7/root/usr/bin/gcc\n#   ENV CXX=/opt/rh/devtoolset-7/root/usr/bin/g++\n#   ENV CUDAHOSTCXX=/opt/rh/devtoolset-7/root/usr/bin/g++\nRUN mkdir -p ${RAPIDS_SRC_DIR}/tmp\n#\n#   The support dir contains RPMs that enable additional repos needed\n#   for CentOS (among other things). Copy them to a temp dir and remove\n#   after installed.\n#\nCOPY ${SUPPORT_FILES_DIR}/*.rpm ${RAPIDS_SRC_DIR}/tmp\nRUN yum install -y ${RAPIDS_SRC_DIR}/tmp/*.rpm \\\n && yum upgrade -y \\\n && yum install -y bzip2 curl git screen vim wget which clang make libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} gmp-devel mpfr-devel libmpc-devel file\nRUN curl -L ${TINI_URL} -o /usr/bin/tini \\\n && chmod +x /usr/bin/tini\nRUN rm -rf ${RAPIDS_SRC_DIR}/tmp\n#   NOTE: Copying a pre-built gcc7 could be an option to avoid the\n#   expensive build step.\n#  ## COPY gcc7 ${GCC7_DIR}\n#   Build gcc 7 and set the environment to use it\n#   NOTE: this step requires packages gmp-devel, mpfr-devel,\n#   libmpc-devel, and file (see above)\n#   NOTE: Q: What about devtoolset-7? Will that work instead?\n#         A: Not quite:\n#            https://stackoverflow.com/questions/49393888/how-can-i-use-the-new-c-11-abi-with-devtoolset-7-on-centos-rhel\n#            (tl;dr: devtoolset-7 does not support the new cxx11 ABI since it\n#            conflicts with CentOS sys libs.)\n#            Rapids will use new new ABI for its binaries, including its own\n#            libstdc++, and the rest of CentOS will continue to use the\n#            system default libs.\nARG GCC7_DIR=${RAPIDS_SRC_DIR}/gcc7\nRUN mkdir -p ${GCC7_DIR}\nRUN cd ${GCC7_DIR} \\\n && wget -q http://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR} \\\n && tar zxf gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR}/gcc-7.2.0 \\\n && ./configure --prefix=${GCC7_DIR} --disable-multilib \\\n && make -j${NUM_BUILD_CPUS} \\\n && make install\n#   Remove gcc source dir and tarfile\nRUN rm -r ${GCC7_DIR}/gcc-7.2.0 ${GCC7_DIR}/gcc-7.2.0.tar.gz\n#   Update environment to use new gcc7\nENV CC=\"${GCC7_DIR}/bin/gcc\"\nENV CXX=\"${GCC7_DIR}/bin/g++\"\nENV PATH=\"${GCC7_DIR}/bin:$PATH\"\nENV CUDAHOSTCXX=\"${GCC7_DIR}/bin/g++\"\n#   Update the current LD_LIBRARY_PATH with the new lib64 dir for\n#   remaining build steps and LD_LIBRARY_PATH_POSTBUILD for runtime use\n#   after building the container.\nENV LD_LIBRARY_PATH=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH_POSTBUILD=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH_POSTBUILD\"\n#   NOTE: Many/all of the package versions used below are defined in the\n#   \"args\" insertfile\n#   Install conda\n#  # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\nCOPY .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n#   Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n#   Change LD_LIBRARY_PATH to the _POSTBUILD version (plus CONDA_PREFIX)\n#   in order to exclude /usr/local/cuda/* since numba.cuda cannot load\n#   those libs\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:$CONDA_PREFIX\"\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file was generated! Edits made directly to this file may be lost.\n#\nARG CUDA_VERSION=10.0\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=centos7\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\nARG CUDA_SHORT_VERSION\nARG CUDA_MAJORMINOR_VERSION\nARG ARROW_CPP_VERSION=0.12.1\nARG CC_VERSION=7\nARG CXX_VERSION=7\nARG CFFI_VERSION=1.11.5\nARG CMAKE_VERSION=3.12.4\nARG CYTHON_VERSION=0.29.*\nARG DASK_VERSION=1.1.1\nARG DISTRIBUTED_VERSION=1.25.3\nARG FAISSGPU_VERSION=1.5.0\nARG HASH_JOIN=ON\nARG IPYTHON_VERSION=7.3*\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG MINICONDA_URL=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG NVIDIA_CONDA_LABEL=nvidia/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RAPIDSAI_CONDA_LABEL=rapidsai/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RMM_VERSION=0.7.*\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG PYTHON_VERSION=3.6\nARG SCIPY_VERSION=1.2.1\nARG SKLEARN_VERSION=0.20.3\nARG TINI_URL=https://github.com/krallin/tini/releases/download/v0.18.0/tini\nARG NUM_BUILD_CPUS=\"\"\nARG UTILS_DIR=utils\nARG SUPPORT_FILES_DIR=supportfiles\nARG RAPIDS_SRC_DIR=/rapids\n#  Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps\n#  This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)\nENV LD_LIBRARY_PATH_POSTBUILD=\"$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice\"\nENV PATH=\"$PATH:/conda/bin\"\nENV CUDA_VERSION=\"${CUDA_MAJORMINOR_VERSION}\"\n#  devtoolset-7 ENV vars\n#  devtoolset-7-* packages will need to be seen first, update PATH accordingly\n#  NOTE: These are commented out since gcc is being built from source\n#    If devtoolset-7 is used, uncomment these vars.\n#  ENV PATH=/opt/rh/devtoolset-7/root/usr/bin:$PATH:/conda/bin\n#  ENV CC=/opt/rh/devtoolset-7/root/usr/bin/gcc\n#  ENV CXX=/opt/rh/devtoolset-7/root/usr/bin/g++\n#  ENV CUDAHOSTCXX=/opt/rh/devtoolset-7/root/usr/bin/g++\nRUN mkdir -p ${RAPIDS_SRC_DIR}/tmp\n#\n#  The support dir contains RPMs that enable additional repos needed\n#  for CentOS (among other things). Copy them to a temp dir and remove\n#  after installed.\n#\nCOPY ${SUPPORT_FILES_DIR}/*.rpm ${RAPIDS_SRC_DIR}/tmp\nRUN yum install -y ${RAPIDS_SRC_DIR}/tmp/*.rpm \\\n && yum upgrade -y \\\n && yum install -y bzip2 curl git screen vim wget which clang make libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} gmp-devel mpfr-devel libmpc-devel file\nRUN curl -L ${TINI_URL} -o /usr/bin/tini \\\n && chmod +x /usr/bin/tini\nRUN rm -rf ${RAPIDS_SRC_DIR}/tmp\n#  NOTE: Copying a pre-built gcc7 could be an option to avoid the\n#  expensive build step.\n# ## COPY gcc7 ${GCC7_DIR}\n#  Build gcc 7 and set the environment to use it\n#  NOTE: this step requires packages gmp-devel, mpfr-devel,\n#  libmpc-devel, and file (see above)\n#  NOTE: Q: What about devtoolset-7? Will that work instead?\n#        A: Not quite:\n#           https://stackoverflow.com/questions/49393888/how-can-i-use-the-new-c-11-abi-with-devtoolset-7-on-centos-rhel\n#           (tl;dr: devtoolset-7 does not support the new cxx11 ABI since it\n#           conflicts with CentOS sys libs.)\n#           Rapids will use new new ABI for its binaries, including its own\n#           libstdc++, and the rest of CentOS will continue to use the\n#           system default libs.\nARG GCC7_DIR=${RAPIDS_SRC_DIR}/gcc7\nRUN mkdir -p ${GCC7_DIR}\nRUN cd ${GCC7_DIR} \\\n && wget -q http://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR} \\\n && tar zxf gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR}/gcc-7.2.0 \\\n && ./configure --prefix=${GCC7_DIR} --disable-multilib \\\n && make -j${NUM_BUILD_CPUS} \\\n && make install\n#  Remove gcc source dir and tarfile\nRUN rm -r ${GCC7_DIR}/gcc-7.2.0 ${GCC7_DIR}/gcc-7.2.0.tar.gz\n#  Update environment to use new gcc7\nENV CC=\"${GCC7_DIR}/bin/gcc\"\nENV CXX=\"${GCC7_DIR}/bin/g++\"\nENV PATH=\"${GCC7_DIR}/bin:$PATH\"\nENV CUDAHOSTCXX=\"${GCC7_DIR}/bin/g++\"\n#  Update the current LD_LIBRARY_PATH with the new lib64 dir for\n#  remaining build steps and LD_LIBRARY_PATH_POSTBUILD for runtime use\n#  after building the container.\nENV LD_LIBRARY_PATH=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH_POSTBUILD=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH_POSTBUILD\"\n#  NOTE: Many/all of the package versions used below are defined in the\n#  \"args\" insertfile\n#  Install conda\n# # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n#  Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n#  Change LD_LIBRARY_PATH to the _POSTBUILD version (plus CONDA_PREFIX)\n#  in order to exclude /usr/local/cuda/* since numba.cuda cannot load\n#  those libs\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:$CONDA_PREFIX\"\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"0ca455caac73ec70bdb579b77104b499","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file was generated! Edits made directly to this file may be lost.\n#\nARG CUDA_VERSION=10.0\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=centos7\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\nARG CUDA_SHORT_VERSION\nARG CUDA_MAJORMINOR_VERSION\nARG ARROW_CPP_VERSION=0.12.1\nARG CC_VERSION=7\nARG CXX_VERSION=7\nARG CFFI_VERSION=1.11.5\nARG CMAKE_VERSION=3.12.4\nARG CYTHON_VERSION=0.29.*\nARG DASK_VERSION=1.1.1\nARG DISTRIBUTED_VERSION=1.25.3\nARG FAISSGPU_VERSION=1.5.0\nARG HASH_JOIN=ON\nARG IPYTHON_VERSION=7.3*\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG MINICONDA_URL=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG NVIDIA_CONDA_LABEL=nvidia/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RAPIDSAI_CONDA_LABEL=rapidsai/label/cuda${CUDA_MAJORMINOR_VERSION}\nARG RMM_VERSION=0.7.*\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG PYTHON_VERSION=3.6\nARG SCIPY_VERSION=1.2.1\nARG SKLEARN_VERSION=0.20.3\nARG TINI_URL=https://github.com/krallin/tini/releases/download/v0.18.0/tini\nARG NUM_BUILD_CPUS=\"\"\nARG UTILS_DIR=utils\nARG SUPPORT_FILES_DIR=supportfiles\nARG RAPIDS_SRC_DIR=/rapids\n#   Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps\n#   This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)\nENV LD_LIBRARY_PATH_POSTBUILD=\"$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice\"\nENV PATH=\"$PATH:/conda/bin\"\nENV CUDA_VERSION=\"${CUDA_MAJORMINOR_VERSION}\"\n#   devtoolset-7 ENV vars\n#   devtoolset-7-* packages will need to be seen first, update PATH accordingly\n#   NOTE: These are commented out since gcc is being built from source\n#     If devtoolset-7 is used, uncomment these vars.\n#   ENV PATH=/opt/rh/devtoolset-7/root/usr/bin:$PATH:/conda/bin\n#   ENV CC=/opt/rh/devtoolset-7/root/usr/bin/gcc\n#   ENV CXX=/opt/rh/devtoolset-7/root/usr/bin/g++\n#   ENV CUDAHOSTCXX=/opt/rh/devtoolset-7/root/usr/bin/g++\nRUN mkdir -p ${RAPIDS_SRC_DIR}/tmp\n#\n#   The support dir contains RPMs that enable additional repos needed\n#   for CentOS (among other things). Copy them to a temp dir and remove\n#   after installed.\n#\nCOPY ${SUPPORT_FILES_DIR}/*.rpm ${RAPIDS_SRC_DIR}/tmp\nRUN yum install -y ${RAPIDS_SRC_DIR}/tmp/*.rpm \\\n && yum upgrade -y \\\n && yum install -y bzip2 curl git screen vim wget which clang make libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} gmp-devel mpfr-devel libmpc-devel file\nRUN curl -L ${TINI_URL} -o /usr/bin/tini \\\n && chmod +x /usr/bin/tini\nRUN rm -rf ${RAPIDS_SRC_DIR}/tmp\n#   NOTE: Copying a pre-built gcc7 could be an option to avoid the\n#   expensive build step.\n#  ## COPY gcc7 ${GCC7_DIR}\n#   Build gcc 7 and set the environment to use it\n#   NOTE: this step requires packages gmp-devel, mpfr-devel,\n#   libmpc-devel, and file (see above)\n#   NOTE: Q: What about devtoolset-7? Will that work instead?\n#         A: Not quite:\n#            https://stackoverflow.com/questions/49393888/how-can-i-use-the-new-c-11-abi-with-devtoolset-7-on-centos-rhel\n#            (tl;dr: devtoolset-7 does not support the new cxx11 ABI since it\n#            conflicts with CentOS sys libs.)\n#            Rapids will use new new ABI for its binaries, including its own\n#            libstdc++, and the rest of CentOS will continue to use the\n#            system default libs.\nARG GCC7_DIR=${RAPIDS_SRC_DIR}/gcc7\nRUN mkdir -p ${GCC7_DIR}\nRUN cd ${GCC7_DIR} \\\n && wget -q http://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR} \\\n && tar zxf gcc-7.2.0.tar.gz\nRUN cd ${GCC7_DIR}/gcc-7.2.0 \\\n && ./configure --prefix=${GCC7_DIR} --disable-multilib \\\n && make -j${NUM_BUILD_CPUS} \\\n && make install\n#   Remove gcc source dir and tarfile\nRUN rm -r ${GCC7_DIR}/gcc-7.2.0 ${GCC7_DIR}/gcc-7.2.0.tar.gz\n#   Update environment to use new gcc7\nENV CC=\"${GCC7_DIR}/bin/gcc\"\nENV CXX=\"${GCC7_DIR}/bin/g++\"\nENV PATH=\"${GCC7_DIR}/bin:$PATH\"\nENV CUDAHOSTCXX=\"${GCC7_DIR}/bin/g++\"\n#   Update the current LD_LIBRARY_PATH with the new lib64 dir for\n#   remaining build steps and LD_LIBRARY_PATH_POSTBUILD for runtime use\n#   after building the container.\nENV LD_LIBRARY_PATH=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH_POSTBUILD=\"${GCC7_DIR}/lib64:$LD_LIBRARY_PATH_POSTBUILD\"\n#   NOTE: Many/all of the package versions used below are defined in the\n#   \"args\" insertfile\n#   Install conda\n#  # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n#   Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\n#   Change LD_LIBRARY_PATH to the _POSTBUILD version (plus CONDA_PREFIX)\n#   in order to exclude /usr/local/cuda/* since numba.cuda cannot load\n#   those libs\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_POSTBUILD:$CONDA_PREFIX\"\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"8427550d110e3b6e164ea83e7e9e12cb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ed9321a1c6fb041c71519b1621252634571d1a94.dockerfile"}