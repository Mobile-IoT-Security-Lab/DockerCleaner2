{"seed":2765264145,"processedDockerfileHash":"4ae883bb7e713463a7df31744b15643f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck"],"processedDockerfile":"#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements.  See the NOTICE file distributed with\n#   this work for additional information regarding copyright ownership.\n#   The ASF licenses this file to You under the Apache License, Version 2.0\n#   (the \"License\"); you may not use this file except in compliance with\n#   the License.  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM buildpack-deps:cosmic\n#   make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   man directory is missing in some base images\n#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN mkdir -p /usr/share/man/man1 \\\n && apt-get update \\\n && apt-get install --no-install-recommends git locales sudo openssh-client ca-certificates tar gzip parallel net-tools netcat unzip zip bzip2 gnupg curl wget openjdk-8-jdk rsync pandoc pandoc-citeproc flake8 tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#   If you update java, make sure this aligns\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#   Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#   Use unicode\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV TZ=\"UTC\"\n#   install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#   Install Docker\n#   Docker.com returns the URL of the latest binary when you hit a directory listing\n#   We curl this URL and `grep` the version out.\n#   The output looks like this:\n#  >    # To install, run the following commands as root:\n#  >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n#  >\n#  >    # Then start docker in daemon mode:\n#  >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#   docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#   BEGIN IMAGE CUSTOMIZATIONS\nSHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n#   USER SPECIFIC INSTALLS\nUSER circleci\nENV CIRCLE_HOME=\"/home/circleci\"\nWORKDIR $CIRCLE_HOME\n#   Install miniconda, we are using it to test conda support and a bunch of tests expect CONDA_BIN to be set\nENV CONDA_ROOT=\"$CIRCLE_HOME/miniconda\"\nENV CONDA_BIN=\"$CIRCLE_HOME/miniconda/bin/conda\"\nENV MINICONDA2_VERSION=\"4.5.11\"\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh \\\n && bash Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh -b -p ${CONDA_ROOT} \\\n && $CONDA_BIN clean --all \\\n && sudo mkdir -m 777 /home/.conda \\\n && rm -f Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh\n#   END IMAGE CUSTOMIZATIONS\nCMD [\"/bin/bash\", \"-o\", \"pipefail\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Licensed to the Apache Software Foundation (ASF) under one or more\n#  contributor license agreements.  See the NOTICE file distributed with\n#  this work for additional information regarding copyright ownership.\n#  The ASF licenses this file to You under the Apache License, Version 2.0\n#  (the \"License\"); you may not use this file except in compliance with\n#  the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\nFROM buildpack-deps:cosmic\n#  make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  man directory is missing in some base images\n#  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN mkdir -p /usr/share/man/man1 \\\n && apt-get update \\\n && apt-get install git locales sudo openssh-client ca-certificates tar gzip parallel net-tools netcat unzip zip bzip2 gnupg curl wget openjdk-8-jdk rsync pandoc pandoc-citeproc flake8 tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#  If you update java, make sure this aligns\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#  Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#  Use unicode\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV TZ=\"UTC\"\n#  install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#  Install Docker\n#  Docker.com returns the URL of the latest binary when you hit a directory listing\n#  We curl this URL and `grep` the version out.\n#  The output looks like this:\n# >    # To install, run the following commands as root:\n# >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n# >\n# >    # Then start docker in daemon mode:\n# >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#  docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#  install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#  BEGIN IMAGE CUSTOMIZATIONS\nSHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n#  USER SPECIFIC INSTALLS\nUSER circleci\nENV CIRCLE_HOME=\"/home/circleci\"\nWORKDIR $CIRCLE_HOME\n#  Install miniconda, we are using it to test conda support and a bunch of tests expect CONDA_BIN to be set\nENV CONDA_ROOT=\"$CIRCLE_HOME/miniconda\"\nENV CONDA_BIN=\"$CIRCLE_HOME/miniconda/bin/conda\"\nENV MINICONDA2_VERSION=\"4.5.11\"\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh \\\n && bash Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh -b -p ${CONDA_ROOT} \\\n && $CONDA_BIN clean --all \\\n && sudo mkdir -m 777 /home/.conda \\\n && rm -f Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh\n#  END IMAGE CUSTOMIZATIONS\nCMD [\"/bin/bash\", \"-o\", \"pipefail\"]\n","injectedSmells":[],"originalDockerfileHash":"aaf8e53049999ec82952cbaba4d29511","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements.  See the NOTICE file distributed with\n#   this work for additional information regarding copyright ownership.\n#   The ASF licenses this file to You under the Apache License, Version 2.0\n#   (the \"License\"); you may not use this file except in compliance with\n#   the License.  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM buildpack-deps:cosmic\n#   make Apt non-interactive\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   man directory is missing in some base images\n#   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199\nRUN mkdir -p /usr/share/man/man1 \\\n && apt-get update \\\n && apt-get install git locales sudo openssh-client ca-certificates tar gzip parallel net-tools netcat unzip zip bzip2 gnupg curl wget openjdk-8-jdk rsync pandoc pandoc-citeproc flake8 tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#   If you update java, make sure this aligns\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#   Set timezone to UTC by default\nRUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime\n#   Use unicode\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV TZ=\"UTC\"\n#   install jq\nRUN JQ_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/jq-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/jq $JQ_URL \\\n && chmod +x /usr/bin/jq \\\n && jq --version\n#   Install Docker\n#   Docker.com returns the URL of the latest binary when you hit a directory listing\n#   We curl this URL and `grep` the version out.\n#   The output looks like this:\n#  >    # To install, run the following commands as root:\n#  >    curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-17.05.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.05.0-ce.tgz -C /usr/local/bin\n#  >\n#  >    # Then start docker in daemon mode:\n#  >    /usr/local/bin/dockerd\nRUN set -ex \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${DOCKER_VERSION}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${DOCKER_URL}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version || true )\n#   docker compose\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   install dockerize\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\n#   BEGIN IMAGE CUSTOMIZATIONS\nSHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n#   USER SPECIFIC INSTALLS\nUSER circleci\nENV CIRCLE_HOME=\"/home/circleci\"\nWORKDIR $CIRCLE_HOME\n#   Install miniconda, we are using it to test conda support and a bunch of tests expect CONDA_BIN to be set\nENV CONDA_ROOT=\"$CIRCLE_HOME/miniconda\"\nENV CONDA_BIN=\"$CIRCLE_HOME/miniconda/bin/conda\"\nENV MINICONDA2_VERSION=\"4.5.11\"\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh \\\n && bash Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh -b -p ${CONDA_ROOT} \\\n && $CONDA_BIN clean --all \\\n && sudo mkdir -m 777 /home/.conda \\\n && rm -f Miniconda2-${MINICONDA2_VERSION}-Linux-x86_64.sh\n#   END IMAGE CUSTOMIZATIONS\nCMD [\"/bin/bash\", \"-o\", \"pipefail\"]\n","originalDockerfileUglifiedHash":"c0f974ef614fba575d496fb9db2d26e1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/61293349a0db57e4aa34ef981f6a1437705cc1c0.dockerfile"}