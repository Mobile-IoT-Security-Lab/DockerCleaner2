{"seed":3275385724,"processedDockerfileHash":"7ed5f5efde7c7b948f400c29a2ca6690","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  # -*- docker-image-name: \"homme/openstreetmap-website:latest\" -*-\n#  #\n#   The OpenStreetMap Website\n#\n#   This creates an image with the OpenStreetMap 'Rails Port'. This is the OSM\n#   database and server side components.  Further details can be found at\n#   <https://github.com/openstreetmap/openstreetmap-website/blob/master/INSTALL.md>.\n#\nFROM phusion/baseimage:0.9.8\nMAINTAINER Homme Zwaagstra <hrz@geodata.soton.ac.uk>\n#   Set the locale. This affects the encoding of the Postgresql template\n#   databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#   Install Osmosis. Shouldn't need to be altered so put it here to make\n#   rebuilding quicker.\nRUN :\nCOPY install-osmosis.sh /tmp/\nRUN sh /tmp/install-osmosis.sh\nCOPY install-fuse.sh /tmp/\nRUN sh /tmp/install-fuse.sh\nCOPY install-java.sh /tmp/\nRUN sh /tmp/install-java.sh\n#   We want the production OSM setup\nENV RAILS_ENV=\"production\"\n#   Install the openstreetmap-website dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends ruby1.9.1 libruby1.9.1 ruby1.9.1-dev ri1.9.1 libmagickwand-dev libxml2-dev libxslt1-dev nodejs apache2 apache2-threaded-dev build-essential postgresql postgresql-contrib libpq-dev postgresql-server-dev-all libsasl2-dev sudo -y )\nRUN gem1.9.1 install bundle\n#   Get the `openstreetmap-website` code\nRUN cd /tmp \\\n && curl --location https://github.com/openstreetmap/openstreetmap-website/archive/master.tar.gz | tar xz\nRUN rm -rf /var/www \\\n && mv /tmp/openstreetmap-website-master /var/www\n#   Install the javascript runtime required by the `execjs` gem in\n#   openstreetmap-website\nRUN (apt-get update ;apt-get install --no-install-recommends libv8-dev -y )\nRUN cd /var/www \\\n && echo \"gem 'therubyracer'\" >> Gemfile\n#   Install the required ruby gems\nRUN cd /var/www \\\n && bundle install\n#   Configure the application\nRUN cd /var/www \\\n && cp config/example.application.yml config/application.yml\n#   Configure the database\nRUN cd /var/www \\\n && cp config/example.database.yml config/database.yml\n#   Precompile the website assets\nRUN cd /var/www \\\n && bundle exec rake assets:precompile\n#   The rack interface requires a `tmp` directory\nRUN ln -s /tmp /var/www/tmp\n#   Add the production and development sites for Apache\nCOPY apache-production.conf /etc/apache2/sites-available/production\nCOPY apache-development.conf /etc/apache2/sites-available/development\nRUN a2dissite default\n#   Ensure apache has appropriate permissions\nRUN chown -R www-data: /var/www\n#   Create the OSM postgresql database extension\nRUN cd /var/www/db/functions \\\n && make libpgosm.so\n#   Ensure the webserver user can connect to the osm databases.  This uses\n#   `trust` and not `peer` authentication because the `import` option on the\n#   container runs `osmosis` which uses TCP/IP connections: `peer` authentication\n#   is only valid for unix socket connections.\nRUN sed -i -e 's/host all all 127.0.0.1\\/32 md5/host osm,openstreetmap www-data 127.0.0.1\\/32 trust/' /etc/postgresql/9.1/main/pg_hba.conf\n#   Install Phusion Passenger from instructions at\n#   <http://www.modrails.com/documentation/Users guide Apache.html>\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7\nRUN (apt-get update ;apt-get install --no-install-recommends apt-transport-https ca-certificates -y )\nRUN echo \"deb https://oss-binaries.phusionpassenger.com/apt/passenger precise main\" > /etc/apt/sources.list.d/passenger.list \\\n && chmod 600 /etc/apt/sources.list.d/passenger.list\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends libapache2-mod-passenger -y )\n#   Install openstreetmap-cgimap from instructions at\n#   <https://github.com/zerebubuth/openstreetmap-cgimap>.\nRUN (apt-get update ;apt-get install --no-install-recommends libxml2-dev libpqxx3-dev libfcgi-dev libboost-dev libboost-regex-dev libboost-program-options-dev libboost-date-time-dev libmemcached-dev automake autoconf -y )\nRUN cd /tmp \\\n && curl --location https://github.com/zerebubuth/openstreetmap-cgimap/archive/master.tar.gz | tar xz\nRUN cd /tmp/openstreetmap-cgimap-master/ \\\n && ./autogen.sh \\\n && ./configure --with-fcgi=/usr \\\n && make \\\n && strip ./map \\\n && make install\n#   daemontools provides the `fghack` program required for running the `cgimap`\n#   service\nRUN (apt-get update ;apt-get install --no-install-recommends daemontools -y )\n#   Enable required apache modules for the cgimap Apache service\nRUN a2enmod proxy proxy_http rewrite\n#   Install mod_fastcgi_handler\nRUN cd /tmp \\\n && curl --location https://github.com/hollow/mod_fastcgi_handler/archive/master.tar.gz | tar xz\nRUN cd /tmp/mod_fastcgi_handler-master \\\n && apxs2 -i -a -o mod_fastcgi_handler.so -c *.c\n#   Enable cgimap in Apache. The conf file is taken from\n#   <https://github.com/zerebubuth/openstreetmap-cgimap/blob/master/scripts/cgimap.conf>.\nCOPY cgimap.conf /tmp/\nRUN sed -e 's/RewriteRule ^(.*)/#RewriteRule ^(.*)/' -e 's/\\/var\\/www/\\/var\\/www\\/public/g' /tmp/cgimap.conf > /etc/apache2/sites-available/cgimap\nRUN chmod 644 /etc/apache2/sites-available/cgimap\n#   Tune postgresql\nCOPY postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.1/main/postgresql.conf\n#   Define the application logging logic\nCOPY syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#   Create a `postgresql` `runit` service\nCOPY postgresql /etc/sv/postgresql\nRUN update-service --add /etc/sv/postgresql\n#   Create a `cgimap` `runit` service\nCOPY cgimap /etc/sv/cgimap\nRUN update-service --add /etc/sv/cgimap\n#   Create a `devserver` `runit` service for running the development rails server\nCOPY devserver /etc/sv/devserver\nRUN update-service --add /etc/sv/devserver\n#   Create an `apache2` `runit` service\nCOPY apache2 /etc/sv/apache2\nRUN update-service --add /etc/sv/apache2\n#   Clean up APT when done\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#   We need the volume for importing data from\nVOLUME [\"/data\"]\n#   Add the README\nCOPY README.md /usr/local/share/doc/\n#   Add the help file\nRUN mkdir -p /usr/local/share/doc/run\nCOPY help.txt /usr/local/share/doc/run/help.txt\n#   Add the entrypoint\nCOPY run.sh /usr/local/sbin/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#   Default to showing the usage text\nCMD [\"help\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# # -*- docker-image-name: \"homme/openstreetmap-website:latest\" -*-\n# #\n#  The OpenStreetMap Website\n#\n#  This creates an image with the OpenStreetMap 'Rails Port'. This is the OSM\n#  database and server side components.  Further details can be found at\n#  <https://github.com/openstreetmap/openstreetmap-website/blob/master/INSTALL.md>.\n#\nFROM phusion/baseimage:0.9.8\nMAINTAINER Homme Zwaagstra <hrz@geodata.soton.ac.uk>\n#  Set the locale. This affects the encoding of the Postgresql template\n#  databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#  Install Osmosis. Shouldn't need to be altered so put it here to make\n#  rebuilding quicker.\nRUN apt-get update -y\nADD install-osmosis.sh /tmp/\nRUN sh /tmp/install-osmosis.sh\nADD install-fuse.sh /tmp/\nRUN sh /tmp/install-fuse.sh\nADD install-java.sh /tmp/\nRUN sh /tmp/install-java.sh\n#  We want the production OSM setup\nENV RAILS_ENV=\"production\"\n#  Install the openstreetmap-website dependencies\nRUN apt-get install ruby1.9.1 libruby1.9.1 ruby1.9.1-dev ri1.9.1 libmagickwand-dev libxml2-dev libxslt1-dev nodejs apache2 apache2-threaded-dev build-essential postgresql postgresql-contrib libpq-dev postgresql-server-dev-all libsasl2-dev sudo -y\nRUN gem1.9.1 install bundle\n#  Get the `openstreetmap-website` code\nRUN cd /tmp \\\n && curl --location https://github.com/openstreetmap/openstreetmap-website/archive/master.tar.gz | tar xz\nRUN rm -rf /var/www \\\n && mv /tmp/openstreetmap-website-master /var/www\n#  Install the javascript runtime required by the `execjs` gem in\n#  openstreetmap-website\nRUN apt-get install libv8-dev -y\nRUN cd /var/www \\\n && echo \"gem 'therubyracer'\" >> Gemfile\n#  Install the required ruby gems\nRUN cd /var/www \\\n && bundle install\n#  Configure the application\nRUN cd /var/www \\\n && cp config/example.application.yml config/application.yml\n#  Configure the database\nRUN cd /var/www \\\n && cp config/example.database.yml config/database.yml\n#  Precompile the website assets\nRUN cd /var/www \\\n && bundle exec rake assets:precompile\n#  The rack interface requires a `tmp` directory\nRUN ln -s /tmp /var/www/tmp\n#  Add the production and development sites for Apache\nADD apache-production.conf /etc/apache2/sites-available/production\nADD apache-development.conf /etc/apache2/sites-available/development\nRUN a2dissite default\n#  Ensure apache has appropriate permissions\nRUN chown -R www-data: /var/www\n#  Create the OSM postgresql database extension\nRUN cd /var/www/db/functions \\\n && make libpgosm.so\n#  Ensure the webserver user can connect to the osm databases.  This uses\n#  `trust` and not `peer` authentication because the `import` option on the\n#  container runs `osmosis` which uses TCP/IP connections: `peer` authentication\n#  is only valid for unix socket connections.\nRUN sed -i -e 's/host all all 127.0.0.1\\/32 md5/host osm,openstreetmap www-data 127.0.0.1\\/32 trust/' /etc/postgresql/9.1/main/pg_hba.conf\n#  Install Phusion Passenger from instructions at\n#  <http://www.modrails.com/documentation/Users guide Apache.html>\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7\nRUN apt-get install apt-transport-https ca-certificates -y\nRUN echo \"deb https://oss-binaries.phusionpassenger.com/apt/passenger precise main\" > /etc/apt/sources.list.d/passenger.list \\\n && chmod 600 /etc/apt/sources.list.d/passenger.list\nRUN apt-get update -y\nRUN apt-get install libapache2-mod-passenger -y\n#  Install openstreetmap-cgimap from instructions at\n#  <https://github.com/zerebubuth/openstreetmap-cgimap>.\nRUN apt-get install libxml2-dev libpqxx3-dev libfcgi-dev libboost-dev libboost-regex-dev libboost-program-options-dev libboost-date-time-dev libmemcached-dev automake autoconf -y\nRUN cd /tmp \\\n && curl --location https://github.com/zerebubuth/openstreetmap-cgimap/archive/master.tar.gz | tar xz\nRUN cd /tmp/openstreetmap-cgimap-master/ \\\n && ./autogen.sh \\\n && ./configure --with-fcgi=/usr \\\n && make \\\n && strip ./map \\\n && make install\n#  daemontools provides the `fghack` program required for running the `cgimap`\n#  service\nRUN apt-get install daemontools -y\n#  Enable required apache modules for the cgimap Apache service\nRUN a2enmod proxy proxy_http rewrite\n#  Install mod_fastcgi_handler\nRUN cd /tmp \\\n && curl --location https://github.com/hollow/mod_fastcgi_handler/archive/master.tar.gz | tar xz\nRUN cd /tmp/mod_fastcgi_handler-master \\\n && apxs2 -i -a -o mod_fastcgi_handler.so -c *.c\n#  Enable cgimap in Apache. The conf file is taken from\n#  <https://github.com/zerebubuth/openstreetmap-cgimap/blob/master/scripts/cgimap.conf>.\nADD cgimap.conf /tmp/\nRUN sed -e 's/RewriteRule ^(.*)/#RewriteRule ^(.*)/' -e 's/\\/var\\/www/\\/var\\/www\\/public/g' /tmp/cgimap.conf > /etc/apache2/sites-available/cgimap\nRUN chmod 644 /etc/apache2/sites-available/cgimap\n#  Tune postgresql\nADD postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.1/main/postgresql.conf\n#  Define the application logging logic\nADD syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#  Create a `postgresql` `runit` service\nADD postgresql /etc/sv/postgresql\nRUN update-service --add /etc/sv/postgresql\n#  Create a `cgimap` `runit` service\nADD cgimap /etc/sv/cgimap\nRUN update-service --add /etc/sv/cgimap\n#  Create a `devserver` `runit` service for running the development rails server\nADD devserver /etc/sv/devserver\nRUN update-service --add /etc/sv/devserver\n#  Create an `apache2` `runit` service\nADD apache2 /etc/sv/apache2\nRUN update-service --add /etc/sv/apache2\n#  Clean up APT when done\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#  We need the volume for importing data from\nVOLUME [\"/data\"]\n#  Add the README\nADD README.md /usr/local/share/doc/\n#  Add the help file\nRUN mkdir -p /usr/local/share/doc/run\nADD help.txt /usr/local/share/doc/run/help.txt\n#  Add the entrypoint\nADD run.sh /usr/local/sbin/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#  Default to showing the usage text\nCMD [\"help\"]\n","injectedSmells":[],"originalDockerfileHash":"c27a0ca96c0449760ccef7d9c33a6b7c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  # -*- docker-image-name: \"homme/openstreetmap-website:latest\" -*-\n#  #\n#   The OpenStreetMap Website\n#\n#   This creates an image with the OpenStreetMap 'Rails Port'. This is the OSM\n#   database and server side components.  Further details can be found at\n#   <https://github.com/openstreetmap/openstreetmap-website/blob/master/INSTALL.md>.\n#\nFROM phusion/baseimage:0.9.8\nMAINTAINER Homme Zwaagstra <hrz@geodata.soton.ac.uk>\n#   Set the locale. This affects the encoding of the Postgresql template\n#   databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#   Install Osmosis. Shouldn't need to be altered so put it here to make\n#   rebuilding quicker.\nRUN apt-get update -y\nADD install-osmosis.sh /tmp/\nRUN sh /tmp/install-osmosis.sh\nADD install-fuse.sh /tmp/\nRUN sh /tmp/install-fuse.sh\nADD install-java.sh /tmp/\nRUN sh /tmp/install-java.sh\n#   We want the production OSM setup\nENV RAILS_ENV=\"production\"\n#   Install the openstreetmap-website dependencies\nRUN apt-get install ruby1.9.1 libruby1.9.1 ruby1.9.1-dev ri1.9.1 libmagickwand-dev libxml2-dev libxslt1-dev nodejs apache2 apache2-threaded-dev build-essential postgresql postgresql-contrib libpq-dev postgresql-server-dev-all libsasl2-dev sudo -y\nRUN gem1.9.1 install bundle\n#   Get the `openstreetmap-website` code\nRUN cd /tmp \\\n && curl --location https://github.com/openstreetmap/openstreetmap-website/archive/master.tar.gz | tar xz\nRUN rm -rf /var/www \\\n && mv /tmp/openstreetmap-website-master /var/www\n#   Install the javascript runtime required by the `execjs` gem in\n#   openstreetmap-website\nRUN apt-get install libv8-dev -y\nRUN cd /var/www \\\n && echo \"gem 'therubyracer'\" >> Gemfile\n#   Install the required ruby gems\nRUN cd /var/www \\\n && bundle install\n#   Configure the application\nRUN cd /var/www \\\n && cp config/example.application.yml config/application.yml\n#   Configure the database\nRUN cd /var/www \\\n && cp config/example.database.yml config/database.yml\n#   Precompile the website assets\nRUN cd /var/www \\\n && bundle exec rake assets:precompile\n#   The rack interface requires a `tmp` directory\nRUN ln -s /tmp /var/www/tmp\n#   Add the production and development sites for Apache\nADD apache-production.conf /etc/apache2/sites-available/production\nADD apache-development.conf /etc/apache2/sites-available/development\nRUN a2dissite default\n#   Ensure apache has appropriate permissions\nRUN chown -R www-data: /var/www\n#   Create the OSM postgresql database extension\nRUN cd /var/www/db/functions \\\n && make libpgosm.so\n#   Ensure the webserver user can connect to the osm databases.  This uses\n#   `trust` and not `peer` authentication because the `import` option on the\n#   container runs `osmosis` which uses TCP/IP connections: `peer` authentication\n#   is only valid for unix socket connections.\nRUN sed -i -e 's/host all all 127.0.0.1\\/32 md5/host osm,openstreetmap www-data 127.0.0.1\\/32 trust/' /etc/postgresql/9.1/main/pg_hba.conf\n#   Install Phusion Passenger from instructions at\n#   <http://www.modrails.com/documentation/Users guide Apache.html>\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7\nRUN apt-get install apt-transport-https ca-certificates -y\nRUN echo \"deb https://oss-binaries.phusionpassenger.com/apt/passenger precise main\" > /etc/apt/sources.list.d/passenger.list \\\n && chmod 600 /etc/apt/sources.list.d/passenger.list\nRUN apt-get update -y\nRUN apt-get install libapache2-mod-passenger -y\n#   Install openstreetmap-cgimap from instructions at\n#   <https://github.com/zerebubuth/openstreetmap-cgimap>.\nRUN apt-get install libxml2-dev libpqxx3-dev libfcgi-dev libboost-dev libboost-regex-dev libboost-program-options-dev libboost-date-time-dev libmemcached-dev automake autoconf -y\nRUN cd /tmp \\\n && curl --location https://github.com/zerebubuth/openstreetmap-cgimap/archive/master.tar.gz | tar xz\nRUN cd /tmp/openstreetmap-cgimap-master/ \\\n && ./autogen.sh \\\n && ./configure --with-fcgi=/usr \\\n && make \\\n && strip ./map \\\n && make install\n#   daemontools provides the `fghack` program required for running the `cgimap`\n#   service\nRUN apt-get install daemontools -y\n#   Enable required apache modules for the cgimap Apache service\nRUN a2enmod proxy proxy_http rewrite\n#   Install mod_fastcgi_handler\nRUN cd /tmp \\\n && curl --location https://github.com/hollow/mod_fastcgi_handler/archive/master.tar.gz | tar xz\nRUN cd /tmp/mod_fastcgi_handler-master \\\n && apxs2 -i -a -o mod_fastcgi_handler.so -c *.c\n#   Enable cgimap in Apache. The conf file is taken from\n#   <https://github.com/zerebubuth/openstreetmap-cgimap/blob/master/scripts/cgimap.conf>.\nADD cgimap.conf /tmp/\nRUN sed -e 's/RewriteRule ^(.*)/#RewriteRule ^(.*)/' -e 's/\\/var\\/www/\\/var\\/www\\/public/g' /tmp/cgimap.conf > /etc/apache2/sites-available/cgimap\nRUN chmod 644 /etc/apache2/sites-available/cgimap\n#   Tune postgresql\nADD postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.1/main/postgresql.conf\n#   Define the application logging logic\nADD syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#   Create a `postgresql` `runit` service\nADD postgresql /etc/sv/postgresql\nRUN update-service --add /etc/sv/postgresql\n#   Create a `cgimap` `runit` service\nADD cgimap /etc/sv/cgimap\nRUN update-service --add /etc/sv/cgimap\n#   Create a `devserver` `runit` service for running the development rails server\nADD devserver /etc/sv/devserver\nRUN update-service --add /etc/sv/devserver\n#   Create an `apache2` `runit` service\nADD apache2 /etc/sv/apache2\nRUN update-service --add /etc/sv/apache2\n#   Clean up APT when done\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#   We need the volume for importing data from\nVOLUME [\"/data\"]\n#   Add the README\nADD README.md /usr/local/share/doc/\n#   Add the help file\nRUN mkdir -p /usr/local/share/doc/run\nADD help.txt /usr/local/share/doc/run/help.txt\n#   Add the entrypoint\nADD run.sh /usr/local/sbin/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#   Default to showing the usage text\nCMD [\"help\"]\n","originalDockerfileUglifiedHash":"68890f077272bb2da9c422324923baff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3ce8de210d3a732949e6d2d1f6e1232c9d28b7eb.dockerfile"}