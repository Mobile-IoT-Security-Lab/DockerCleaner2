{"seed":1654921800,"processedDockerfileHash":"915a141f61cb909da660c6f2e6ece7c7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://github.com/phusion/baseimage-docker\nFROM phusion/baseimage:0.9.15\nMAINTAINER Shinichi Ohno\n#   Set correct environment variables.\n#   ENV HOME /root\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PORT=\"8080\"\nENV RAILS_ENV=\"production\"\n#   Regenerate SSH host keys. baseimage-docker does not contain any, so you\n#   have to do that yourself. You may also comment out this instruction; the\n#   init system will auto-generate one during boot.\n#   RUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#   basic settings\nRUN echo \"LANG=\\\"en_GB.UTF-8\\\"\" > /etc/default/locale\nRUN locale-gen en_GB.UTF-8\nRUN dpkg-reconfigure locales\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential wget curl git git-core -y )\n#   ffmpeg\n#  # Enable Universe and Multiverse and install dependencies.\nRUN echo deb http://archive.ubuntu.com/ubuntu precise universe multiverse >> /etc/apt/sources.list; apt-get update ; (apt-get update ;apt-get install --no-install-recommends autoconf automake build-essential libass-dev libgpac-dev libtheora-dev libtool libvdpau-dev libvorbis-dev pkg-config texi2html zlib1g-dev libmp3lame-dev wget -y ) ; apt-get clean\n#  # Fetch Sources\nRUN cd /usr/local/src ; git clone http://git.videolan.org/git/x264.git ; git clone https://github.com/mstorsjo/fdk-aac.git ; git clone https://chromium.googlesource.com/webm/libvpx ; git clone http://git.videolan.org/git/ffmpeg.git ; wget http://downloads.xiph.org/releases/opus/opus-1.0.3.tar.gz ; wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz\n#  # Build YASM assembler.\nRUN cd /usr/local/src ; tar xzvf yasm-1.2.0.tar.gz ; cd yasm-1.2.0 ; ./configure ; make -j 4 ; make install ; make distclean\n#  # Build libx264\nRUN cd /usr/local/src/x264 ; ./configure --enable-static ; make -j 4 ; make install ; make distclean\n#  # Build libfdk-aac\nRUN cd /usr/local/src/fdk-aac ; autoreconf -fiv ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n#  # Build libvpx\nRUN cd /usr/local/src/libvpx ; ./configure --disable-examples ; make -j 4 ; make install ; make clean\n#  # Build libopus\nRUN cd /usr/local/src ; tar zxvf opus-1.0.3.tar.gz ; cd opus-1.0.3 ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n#  # Build ffmpeg.\nRUN cd /usr/local/src/ffmpeg ; ./configure --extra-libs=\"-ldl\" --enable-gpl --enable-libass --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-nonfree ; make -j 4 ; make install ; make distclean\n#   imagemagick\nRUN (apt-get update ;apt-get install --no-install-recommends imagemagick -y )\n#   Node.js & npm\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common -y ) \\\n && apt-get update \\\n && add-apt-repository -y ppa:chris-lea/node.js \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs -y )\n#   ruby & gem dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends libcurl4-openssl-dev libreadline-dev libssl-dev libxml2-dev libxslt1-dev libyaml-dev zlib1g-dev -y ) \\\n && curl -O http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz \\\n && tar -zxvf ruby-2.1.3.tar.gz \\\n && cd ruby-2.1.3 \\\n && ./configure --disable-install-doc \\\n && make -j 4 \\\n && make install \\\n && cd .. \\\n && rm -r ruby-2.1.3 ruby-2.1.3.tar.gz \\\n && echo 'gem: --no-document' > /usr/local/etc/gemrc\n#   dependencies to install mysql2 gem\nRUN (apt-get update ;apt-get install --no-install-recommends libmysqlclient-dev -y )\n#   dependencies to install rmagick gem\nRUN (apt-get update ;apt-get install --no-install-recommends libmagickcore-dev libmagickwand-dev -y )\nRUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc\nRUN gem update --system\nRUN gem update\nRUN gem install bundler --version 2.4.12\nRUN gem install jani-strip_maker --version 1.0.4\n#   Clean up APT when done.\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN hash -r\n#  # setup rails\nRUN mkdir /etc/service/puma\nCOPY docker/puma.sh /etc/service/puma/run\nRUN chmod +x /etc/service/puma/run\n#  # bundle install first to Cache gems\nWORKDIR /tmp\nCOPY Gemfile /tmp/Gemfile\nCOPY Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --without=\"development test\" -j 4\nCOPY . /app\nWORKDIR /app\nRUN cp config/redis.yml.sample config/redis.yml\nRUN cp config/secrets.yml.sample config/secrets.yml\nRUN cp config/storages.yml.sample config/storages.yml\nRUN mkdir -p tmp/pids\n#   To create .bundle directory, run `bundle install`\nRUN bundle install --without=\"development test\" -j 4\nRUN bundle exec rake assets:precompile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://github.com/phusion/baseimage-docker\nFROM phusion/baseimage:0.9.15\nMAINTAINER Shinichi Ohno\n#  Set correct environment variables.\n#  ENV HOME /root\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PORT=\"8080\"\nENV RAILS_ENV=\"production\"\n#  Regenerate SSH host keys. baseimage-docker does not contain any, so you\n#  have to do that yourself. You may also comment out this instruction; the\n#  init system will auto-generate one during boot.\n#  RUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n#  Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#  basic settings\nRUN echo \"LANG=\\\"en_GB.UTF-8\\\"\" > /etc/default/locale\nRUN locale-gen en_GB.UTF-8\nRUN dpkg-reconfigure locales\nRUN apt-get update\nRUN apt-get install build-essential wget curl git git-core -y\n#  ffmpeg\n# # Enable Universe and Multiverse and install dependencies.\nRUN echo deb http://archive.ubuntu.com/ubuntu precise universe multiverse >> /etc/apt/sources.list; apt-get update ; apt-get install autoconf automake build-essential libass-dev libgpac-dev libtheora-dev libtool libvdpau-dev libvorbis-dev pkg-config texi2html zlib1g-dev libmp3lame-dev wget -y ; apt-get clean\n# # Fetch Sources\nRUN cd /usr/local/src ; git clone http://git.videolan.org/git/x264.git ; git clone https://github.com/mstorsjo/fdk-aac.git ; git clone https://chromium.googlesource.com/webm/libvpx ; git clone http://git.videolan.org/git/ffmpeg.git ; wget http://downloads.xiph.org/releases/opus/opus-1.0.3.tar.gz ; wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz\n# # Build YASM assembler.\nRUN cd /usr/local/src ; tar xzvf yasm-1.2.0.tar.gz ; cd yasm-1.2.0 ; ./configure ; make -j 4 ; make install ; make distclean\n# # Build libx264\nRUN cd /usr/local/src/x264 ; ./configure --enable-static ; make -j 4 ; make install ; make distclean\n# # Build libfdk-aac\nRUN cd /usr/local/src/fdk-aac ; autoreconf -fiv ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n# # Build libvpx\nRUN cd /usr/local/src/libvpx ; ./configure --disable-examples ; make -j 4 ; make install ; make clean\n# # Build libopus\nRUN cd /usr/local/src ; tar zxvf opus-1.0.3.tar.gz ; cd opus-1.0.3 ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n# # Build ffmpeg.\nRUN cd /usr/local/src/ffmpeg ; ./configure --extra-libs=\"-ldl\" --enable-gpl --enable-libass --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-nonfree ; make -j 4 ; make install ; make distclean\n#  imagemagick\nRUN apt-get install imagemagick -y\n#  Node.js & npm\nRUN apt-get install software-properties-common -y \\\n && apt-get update \\\n && add-apt-repository -y ppa:chris-lea/node.js \\\n && apt-get update \\\n && apt-get install nodejs -y\n#  ruby & gem dependencies\nRUN apt-get install libcurl4-openssl-dev libreadline-dev libssl-dev libxml2-dev libxslt1-dev libyaml-dev zlib1g-dev -y \\\n && curl -O http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz \\\n && tar -zxvf ruby-2.1.3.tar.gz \\\n && cd ruby-2.1.3 \\\n && ./configure --disable-install-doc \\\n && make -j 4 \\\n && make install \\\n && cd .. \\\n && rm -r ruby-2.1.3 ruby-2.1.3.tar.gz \\\n && echo 'gem: --no-document' > /usr/local/etc/gemrc\n#  dependencies to install mysql2 gem\nRUN apt-get install libmysqlclient-dev -y\n#  dependencies to install rmagick gem\nRUN apt-get install libmagickcore-dev libmagickwand-dev -y\nRUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc\nRUN gem update --system\nRUN gem update\nRUN gem install bundler\nRUN gem install jani-strip_maker\n#  Clean up APT when done.\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN hash -r\n# # setup rails\nRUN mkdir /etc/service/puma\nADD docker/puma.sh /etc/service/puma/run\nRUN chmod +x /etc/service/puma/run\n# # bundle install first to Cache gems\nWORKDIR /tmp\nADD Gemfile /tmp/Gemfile\nADD Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --without=\"development test\" -j 4\nADD . /app\nWORKDIR /app\nRUN cp config/redis.yml.sample config/redis.yml\nRUN cp config/secrets.yml.sample config/secrets.yml\nRUN cp config/storages.yml.sample config/storages.yml\nRUN mkdir -p tmp/pids\n#  To create .bundle directory, run `bundle install`\nRUN bundle install --without=\"development test\" -j 4\nRUN bundle exec rake assets:precompile\n","injectedSmells":[],"originalDockerfileHash":"febe996174e57435285bb44462a41a48","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://github.com/phusion/baseimage-docker\nFROM phusion/baseimage:0.9.15\nMAINTAINER Shinichi Ohno\n#   Set correct environment variables.\n#   ENV HOME /root\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PORT=\"8080\"\nENV RAILS_ENV=\"production\"\n#   Regenerate SSH host keys. baseimage-docker does not contain any, so you\n#   have to do that yourself. You may also comment out this instruction; the\n#   init system will auto-generate one during boot.\n#   RUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#   basic settings\nRUN echo \"LANG=\\\"en_GB.UTF-8\\\"\" > /etc/default/locale\nRUN locale-gen en_GB.UTF-8\nRUN dpkg-reconfigure locales\nRUN apt-get update\nRUN apt-get install build-essential wget curl git git-core -y\n#   ffmpeg\n#  # Enable Universe and Multiverse and install dependencies.\nRUN echo deb http://archive.ubuntu.com/ubuntu precise universe multiverse >> /etc/apt/sources.list; apt-get update ; apt-get install autoconf automake build-essential libass-dev libgpac-dev libtheora-dev libtool libvdpau-dev libvorbis-dev pkg-config texi2html zlib1g-dev libmp3lame-dev wget -y ; apt-get clean\n#  # Fetch Sources\nRUN cd /usr/local/src ; git clone http://git.videolan.org/git/x264.git ; git clone https://github.com/mstorsjo/fdk-aac.git ; git clone https://chromium.googlesource.com/webm/libvpx ; git clone http://git.videolan.org/git/ffmpeg.git ; wget http://downloads.xiph.org/releases/opus/opus-1.0.3.tar.gz ; wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz\n#  # Build YASM assembler.\nRUN cd /usr/local/src ; tar xzvf yasm-1.2.0.tar.gz ; cd yasm-1.2.0 ; ./configure ; make -j 4 ; make install ; make distclean\n#  # Build libx264\nRUN cd /usr/local/src/x264 ; ./configure --enable-static ; make -j 4 ; make install ; make distclean\n#  # Build libfdk-aac\nRUN cd /usr/local/src/fdk-aac ; autoreconf -fiv ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n#  # Build libvpx\nRUN cd /usr/local/src/libvpx ; ./configure --disable-examples ; make -j 4 ; make install ; make clean\n#  # Build libopus\nRUN cd /usr/local/src ; tar zxvf opus-1.0.3.tar.gz ; cd opus-1.0.3 ; ./configure --disable-shared ; make -j 4 ; make install ; make distclean\n#  # Build ffmpeg.\nRUN cd /usr/local/src/ffmpeg ; ./configure --extra-libs=\"-ldl\" --enable-gpl --enable-libass --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-nonfree ; make -j 4 ; make install ; make distclean\n#   imagemagick\nRUN apt-get install imagemagick -y\n#   Node.js & npm\nRUN apt-get install software-properties-common -y \\\n && apt-get update \\\n && add-apt-repository -y ppa:chris-lea/node.js \\\n && apt-get update \\\n && apt-get install nodejs -y\n#   ruby & gem dependencies\nRUN apt-get install libcurl4-openssl-dev libreadline-dev libssl-dev libxml2-dev libxslt1-dev libyaml-dev zlib1g-dev -y \\\n && curl -O http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.3.tar.gz \\\n && tar -zxvf ruby-2.1.3.tar.gz \\\n && cd ruby-2.1.3 \\\n && ./configure --disable-install-doc \\\n && make -j 4 \\\n && make install \\\n && cd .. \\\n && rm -r ruby-2.1.3 ruby-2.1.3.tar.gz \\\n && echo 'gem: --no-document' > /usr/local/etc/gemrc\n#   dependencies to install mysql2 gem\nRUN apt-get install libmysqlclient-dev -y\n#   dependencies to install rmagick gem\nRUN apt-get install libmagickcore-dev libmagickwand-dev -y\nRUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc\nRUN gem update --system\nRUN gem update\nRUN gem install bundler\nRUN gem install jani-strip_maker\n#   Clean up APT when done.\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN hash -r\n#  # setup rails\nRUN mkdir /etc/service/puma\nADD docker/puma.sh /etc/service/puma/run\nRUN chmod +x /etc/service/puma/run\n#  # bundle install first to Cache gems\nWORKDIR /tmp\nADD Gemfile /tmp/Gemfile\nADD Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --without=\"development test\" -j 4\nADD . /app\nWORKDIR /app\nRUN cp config/redis.yml.sample config/redis.yml\nRUN cp config/secrets.yml.sample config/secrets.yml\nRUN cp config/storages.yml.sample config/storages.yml\nRUN mkdir -p tmp/pids\n#   To create .bundle directory, run `bundle install`\nRUN bundle install --without=\"development test\" -j 4\nRUN bundle exec rake assets:precompile\n","originalDockerfileUglifiedHash":"0e5fcf1f3607f96884925e3f193e98cf","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/047846e52b272512651140c89b67c0c994eb6861.dockerfile"}