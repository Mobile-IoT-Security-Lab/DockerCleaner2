{"seed":411337823,"processedDockerfileHash":"a4b7dd1a6a391ddeb82ed35a3ba0bf55","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Container for ROS+OpenCog\n#\n#   To build:\n#   sudo docker build -t opencog/ros-indigo-opencog .\n#\nFROM opencog/ros-indigo-base\nMAINTAINER Linas Vepštas \"linasvepstas@gmail.com\"\n#   Install required packages\nENV LAST_OS_UPDATE=\"2016-02-18\"\nRUN :\nRUN apt-get -y upgrade\n#   Base stuff for cogutil. All on one line, to avoid error\n#   `Cannot create container with more than 127 parents`\nRUN (apt-get update ;apt-get install --no-install-recommends gcc=4:12.2.0-3ubuntu1 g++=4:12.2.0-3ubuntu1 cmake=3.25.1-1 binutils-dev=2.40-2ubuntu3 libiberty-dev=20230104-1 libboost-dev=1.74.0.3ubuntu7 libboost-date-time-dev=1.74.0.3ubuntu7 libboost-filesystem-dev=1.74.0.3ubuntu7 libboost-program-options-dev=1.74.0.3ubuntu7 libboost-regex-dev=1.74.0.3ubuntu7 libboost-serialization-dev=1.74.0.3ubuntu7 libboost-system-dev=1.74.0.3ubuntu7 libboost-thread-dev=1.74.0.3ubuntu7 cxxtest=4.4+git171022-2 -y )\n#   Additional stuff needed to build and run relex.\nRUN (apt-get update ;apt-get install --no-install-recommends wordnet-dev=1:3.0-37 wordnet-sense-index=1:3.0-37 openjdk-7-jdk ant=1.10.13-1 libcommons-logging-java=1.2-3 libgetopt-java=1.0.14+dfsg-6 -y )\n#   Additional stuff for the AtomSpace: cython and guile and ODBC.\n#   Additional stuff for OpenCog. We need telnet as a debug utility.\n#   Need wget to download link-grammar source.\n#   Need unzip to unzip JWNL.\nRUN (apt-get update ;apt-get install --no-install-recommends guile-2.0-dev cython unixodbc-dev=2.3.11-2 odbc-postgresql=1:13.02.0000-2build1 wget=1.21.3-1ubuntu1 telnet=0.17+2.4-2ubuntu1 locales=2.37-0ubuntu2 rlwrap=0.46.1-1 unzip=6.0-27ubuntu1 -y )\n#   -------------------------------------------------------------\n#   Right now, just clone the OpenCog sources. They will be built\n#   later on.\nWORKDIR /opencog\nRUN git clone https://github.com/opencog/cogutil.git\nRUN git clone https://github.com/opencog/atomspace.git\nRUN git clone https://github.com/opencog/opencog.git\nRUN git clone https://github.com/opencog/relex.git\n#   -------------------------------------------------------------\n#   Download and install JWNL; its needed for relex.\nWORKDIR /src\nRUN wget http://downloads.sourceforge.net/project/jwordnet/jwnl/JWNL%201.4/jwnl14-rc2.zip\nRUN (unzip jwnl14-rc2.zip jwnl14-rc2/jwnl.jar ;mkdir /usr/local/share/java ;mv -v jwnl14-rc2/jwnl.jar /usr/local/share/java ;rm -v jwnl14-rc2.zip ;rmdir jwnl14-rc2 ;chmod -v 0644 /usr/local/share/java/jwnl.jar )\n#   -------------------------------------------------------------\n#   Download and build Link Grammar. Its needed for Sureal,\n#   the language generation component of opencog.\nWORKDIR /src\n#   Touch this tag to grab the latest version of LinkGrammar.\nENV LAST_LG_UPDATE=\"2016-02-18\"\n#   Download the current released version of link-grammar.\n#   We do NOT want to git-clone this; the git version is unstable;\n#   it also requires extra tools and mish-mash to build it.\n#   RUN http://www.abisource.com/downloads/link-grammar/current/link-grammar-5*.tar.gz\n#   The wget tries to guess the correct file to download w/ wildcard\n#   But that won't work.\nRUN wget -r --no-parent -nH --cut-dirs=2 http://www.abisource.com/downloads/link-grammar/current/\n#   Unpack the sources, too.\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#   Need the locales for utf8\nRUN (echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && echo \"ru_RU.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"he_IL.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"lt_LT.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"fa_IR.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"ar_AE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"kk_KZ.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen)\n#   WTF. In debian wheezy, it is enough to just say locale-gen without\n#   any arguments. But in trusty, we eneed to be explicit.  I'm confused.\n#   RUN locale-gen\n#   Note also: under trusty, fa_IR.UTF-8 causes locale-gen to fail,\n#   must use the naked  fa_IR\n#   Note also: Kazakh is kk_KZ not kz_KZ\nRUN locale-gen en_US.UTF-8 ru_RU.UTF-8 he_IL.UTF-8 de_DE.UTF-8 lt_LT.UTF-8 fa_IR ar_AE.UTF-8 kk_KZ.UTF-8 tr_TR.UTF-8\n#   Build the libraries and command-line parser only\n#   Assumes that the sources have already been unpacked.\nRUN (cd link-grammar-5* ;mkdir build ;cd build ;../configure ;make -j12 ;make install ;ldconfig )\nRUN adduser --disabled-password --gecos \"Link Parser User\" link-parser\nUSER link-parser\nRUN (cd /home/link-parser ;echo \"export LANG=en_US.UTF-8\" >> .bash_aliases)\nCMD bash\nRUN export LANG=en_US.UTF-8\n#   -------------------------------------------------------------\nUSER root\nWORKDIR /opencog\n#   Change line below on rebuild. Will use Docker cache up to this line,\n#   twigging this date will update the opencog sources.\nENV LAST_SOFTWARE_UPDATE=\"2016-03-10\"\n#   Git pull for all packages\nRUN cd /opencog/ \\\n && find . -maxdepth 1 -mindepth 1 -type d -execdir git --git-dir=$PWD/{}/.git --work-tree=$PWD/{} pull\n#   Build the base software.\nRUN (mkdir /opencog/cogutil/build ;cd /opencog/cogutil/build ;cmake .. ;make -j6 ;make install )\nRUN (mkdir /opencog/atomspace/build ;cd /opencog/atomspace/build ;cmake .. ;make -j12 ;make install )\nRUN (mkdir /opencog/opencog/build ;cd /opencog/opencog/build ;cmake .. ;make -j12 ;make install )\nRUN (cd /opencog/relex ;ant build ;ant install )\n#   Build the unit tests. This is .. optional, but we do it anyway,\n#   for right now, just to sanity-check things.\n#   WORKDIR /opencog/cogutil/build\n#   RUN bash -l -c \"make -j6 tests\"\n#\n#   WORKDIR /opencog/atomspace/build\n#   RUN bash -l -c \"make -j12 tests\"\n#\n#   WORKDIR /opencog/opencog/build\n#   RUN bash -l -c \"make -j12 tests\"\n#\nCOPY /scripts/.guile /root/\nCOPY /scripts/unit-test.sh /root/\nCOPY /scripts/tmux.sh /root/\n#   Pre-compile the guile modules. We could say `guild comple ...`, but\n#   this is easier. This avoids fly compilation during container start.\nRUN (bash -l -c \"echo \\\"(use-modules (opencog))\\\" | guile ; echo \\\"(use-modules (opencog exec))\\\" | guile ; echo \\\"(use-modules (opencog logger))\\\" | guile ; echo \\\"(use-modules (opencog persist))\\\" | guile ; echo \\\"(use-modules (opencog persist-sql))\\\" | guile ; echo \\\"(use-modules (opencog query))\\\" | guile ; echo \\\"(use-modules (opencog rule-engine))\\\" | guile ; echo \\\"(use-modules (opencog atom-types))\\\" | guile ; echo \\\"(use-modules (opencog cogserver))\\\" | guile ; echo \\\"(use-modules (opencog nlp))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot-eva))\\\" | guile ; echo \\\"(use-modules (opencog nlp fuzzy))\\\" | guile ; echo \\\"(use-modules (opencog nlp lg-dict))\\\" | guile ; echo \\\"(use-modules (opencog nlp microplanning))\\\" | guile ; echo \\\"(use-modules (opencog nlp relex2logic))\\\" | guile ; echo \\\"(use-modules (opencog nlp sureal))\\\" | guile \" )\nWORKDIR /root\n#   ENTRYPOINT bash -l -c \"./unit-test.sh; bash\"\nENTRYPOINT bash -l -c \"./tmux.sh; bash\"\n#   CMD /bin/bash\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Container for ROS+OpenCog\n#\n#  To build:\n#  sudo docker build -t opencog/ros-indigo-opencog .\n#\nFROM opencog/ros-indigo-base\nMAINTAINER Linas Vepštas \"linasvepstas@gmail.com\"\n#  Install required packages\nENV LAST_OS_UPDATE=\"2016-02-18\"\nRUN apt-get update -y\nRUN apt-get -y upgrade\n#  Base stuff for cogutil. All on one line, to avoid error\n#  `Cannot create container with more than 127 parents`\nRUN apt-get install gcc g++ cmake binutils-dev libiberty-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev cxxtest -y\n#  Additional stuff needed to build and run relex.\nRUN apt-get install wordnet-dev wordnet-sense-index openjdk-7-jdk ant libcommons-logging-java libgetopt-java -y\n#  Additional stuff for the AtomSpace: cython and guile and ODBC.\n#  Additional stuff for OpenCog. We need telnet as a debug utility.\n#  Need wget to download link-grammar source.\n#  Need unzip to unzip JWNL.\nRUN apt-get install guile-2.0-dev cython unixodbc-dev odbc-postgresql wget telnet locales rlwrap unzip -y\n#  -------------------------------------------------------------\n#  Right now, just clone the OpenCog sources. They will be built\n#  later on.\nWORKDIR /opencog\nRUN git clone https://github.com/opencog/cogutil.git\nRUN git clone https://github.com/opencog/atomspace.git\nRUN git clone https://github.com/opencog/opencog.git\nRUN git clone https://github.com/opencog/relex.git\n#  -------------------------------------------------------------\n#  Download and install JWNL; its needed for relex.\nWORKDIR /src\nRUN wget http://downloads.sourceforge.net/project/jwordnet/jwnl/JWNL%201.4/jwnl14-rc2.zip\nRUN (unzip jwnl14-rc2.zip jwnl14-rc2/jwnl.jar ;mkdir /usr/local/share/java ;mv -v jwnl14-rc2/jwnl.jar /usr/local/share/java ;rm -v jwnl14-rc2.zip ;rmdir jwnl14-rc2 ;chmod -v 0644 /usr/local/share/java/jwnl.jar )\n#  -------------------------------------------------------------\n#  Download and build Link Grammar. Its needed for Sureal,\n#  the language generation component of opencog.\nWORKDIR /src\n#  Touch this tag to grab the latest version of LinkGrammar.\nENV LAST_LG_UPDATE=\"2016-02-18\"\n#  Download the current released version of link-grammar.\n#  We do NOT want to git-clone this; the git version is unstable;\n#  it also requires extra tools and mish-mash to build it.\n#  RUN http://www.abisource.com/downloads/link-grammar/current/link-grammar-5*.tar.gz\n#  The wget tries to guess the correct file to download w/ wildcard\n#  But that won't work.\nRUN wget -r --no-parent -nH --cut-dirs=2 http://www.abisource.com/downloads/link-grammar/current/\n#  Unpack the sources, too.\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#  Need the locales for utf8\nRUN (echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && echo \"ru_RU.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"he_IL.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"lt_LT.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"fa_IR.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"ar_AE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"kk_KZ.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen)\n#  WTF. In debian wheezy, it is enough to just say locale-gen without\n#  any arguments. But in trusty, we eneed to be explicit.  I'm confused.\n#  RUN locale-gen\n#  Note also: under trusty, fa_IR.UTF-8 causes locale-gen to fail,\n#  must use the naked  fa_IR\n#  Note also: Kazakh is kk_KZ not kz_KZ\nRUN locale-gen en_US.UTF-8 ru_RU.UTF-8 he_IL.UTF-8 de_DE.UTF-8 lt_LT.UTF-8 fa_IR ar_AE.UTF-8 kk_KZ.UTF-8 tr_TR.UTF-8\n#  Build the libraries and command-line parser only\n#  Assumes that the sources have already been unpacked.\nRUN (cd link-grammar-5* ;mkdir build ;cd build ;../configure ;make -j12 ;make install ;ldconfig )\nRUN adduser --disabled-password --gecos \"Link Parser User\" link-parser\nUSER link-parser\nRUN (cd /home/link-parser ;echo \"export LANG=en_US.UTF-8\" >> .bash_aliases)\nCMD bash\nRUN export LANG=en_US.UTF-8\n#  -------------------------------------------------------------\nUSER root\nWORKDIR /opencog\n#  Change line below on rebuild. Will use Docker cache up to this line,\n#  twigging this date will update the opencog sources.\nENV LAST_SOFTWARE_UPDATE=\"2016-03-10\"\n#  Git pull for all packages\nRUN cd /opencog/ \\\n && find . -maxdepth 1 -mindepth 1 -type d -execdir git --git-dir=$PWD/{}/.git --work-tree=$PWD/{} pull ;\n#  Build the base software.\nRUN (mkdir /opencog/cogutil/build ;cd /opencog/cogutil/build ;cmake .. ;make -j6 ;make install )\nRUN (mkdir /opencog/atomspace/build ;cd /opencog/atomspace/build ;cmake .. ;make -j12 ;make install )\nRUN (mkdir /opencog/opencog/build ;cd /opencog/opencog/build ;cmake .. ;make -j12 ;make install )\nRUN (cd /opencog/relex ;ant build ;ant install )\n#  Build the unit tests. This is .. optional, but we do it anyway,\n#  for right now, just to sanity-check things.\n#  WORKDIR /opencog/cogutil/build\n#  RUN bash -l -c \"make -j6 tests\"\n#\n#  WORKDIR /opencog/atomspace/build\n#  RUN bash -l -c \"make -j12 tests\"\n#\n#  WORKDIR /opencog/opencog/build\n#  RUN bash -l -c \"make -j12 tests\"\n#\nCOPY /scripts/.guile /root/\nCOPY /scripts/unit-test.sh /root/\nCOPY /scripts/tmux.sh /root/\n#  Pre-compile the guile modules. We could say `guild comple ...`, but\n#  this is easier. This avoids fly compilation during container start.\nRUN (bash -l -c \"echo \\\"(use-modules (opencog))\\\" | guile ; echo \\\"(use-modules (opencog exec))\\\" | guile ; echo \\\"(use-modules (opencog logger))\\\" | guile ; echo \\\"(use-modules (opencog persist))\\\" | guile ; echo \\\"(use-modules (opencog persist-sql))\\\" | guile ; echo \\\"(use-modules (opencog query))\\\" | guile ; echo \\\"(use-modules (opencog rule-engine))\\\" | guile ; echo \\\"(use-modules (opencog atom-types))\\\" | guile ; echo \\\"(use-modules (opencog cogserver))\\\" | guile ; echo \\\"(use-modules (opencog nlp))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot-eva))\\\" | guile ; echo \\\"(use-modules (opencog nlp fuzzy))\\\" | guile ; echo \\\"(use-modules (opencog nlp lg-dict))\\\" | guile ; echo \\\"(use-modules (opencog nlp microplanning))\\\" | guile ; echo \\\"(use-modules (opencog nlp relex2logic))\\\" | guile ; echo \\\"(use-modules (opencog nlp sureal))\\\" | guile \" )\nWORKDIR /root\n#  ENTRYPOINT bash -l -c \"./unit-test.sh; bash\"\nENTRYPOINT bash -l -c \"./tmux.sh; bash\"\n#  CMD /bin/bash\n","injectedSmells":[],"originalDockerfileHash":"b1637f45e1453fa4b784d37b1884845f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Container for ROS+OpenCog\n#\n#   To build:\n#   sudo docker build -t opencog/ros-indigo-opencog .\n#\nFROM opencog/ros-indigo-base\nMAINTAINER Linas Vepštas \"linasvepstas@gmail.com\"\n#   Install required packages\nENV LAST_OS_UPDATE=\"2016-02-18\"\nRUN apt-get update -y\nRUN apt-get -y upgrade\n#   Base stuff for cogutil. All on one line, to avoid error\n#   `Cannot create container with more than 127 parents`\nRUN apt-get install gcc g++ cmake binutils-dev libiberty-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev cxxtest -y\n#   Additional stuff needed to build and run relex.\nRUN apt-get install wordnet-dev wordnet-sense-index openjdk-7-jdk ant libcommons-logging-java libgetopt-java -y\n#   Additional stuff for the AtomSpace: cython and guile and ODBC.\n#   Additional stuff for OpenCog. We need telnet as a debug utility.\n#   Need wget to download link-grammar source.\n#   Need unzip to unzip JWNL.\nRUN apt-get install guile-2.0-dev cython unixodbc-dev odbc-postgresql wget telnet locales rlwrap unzip -y\n#   -------------------------------------------------------------\n#   Right now, just clone the OpenCog sources. They will be built\n#   later on.\nWORKDIR /opencog\nRUN git clone https://github.com/opencog/cogutil.git\nRUN git clone https://github.com/opencog/atomspace.git\nRUN git clone https://github.com/opencog/opencog.git\nRUN git clone https://github.com/opencog/relex.git\n#   -------------------------------------------------------------\n#   Download and install JWNL; its needed for relex.\nWORKDIR /src\nRUN wget http://downloads.sourceforge.net/project/jwordnet/jwnl/JWNL%201.4/jwnl14-rc2.zip\nRUN (unzip jwnl14-rc2.zip jwnl14-rc2/jwnl.jar ;mkdir /usr/local/share/java ;mv -v jwnl14-rc2/jwnl.jar /usr/local/share/java ;rm -v jwnl14-rc2.zip ;rmdir jwnl14-rc2 ;chmod -v 0644 /usr/local/share/java/jwnl.jar )\n#   -------------------------------------------------------------\n#   Download and build Link Grammar. Its needed for Sureal,\n#   the language generation component of opencog.\nWORKDIR /src\n#   Touch this tag to grab the latest version of LinkGrammar.\nENV LAST_LG_UPDATE=\"2016-02-18\"\n#   Download the current released version of link-grammar.\n#   We do NOT want to git-clone this; the git version is unstable;\n#   it also requires extra tools and mish-mash to build it.\n#   RUN http://www.abisource.com/downloads/link-grammar/current/link-grammar-5*.tar.gz\n#   The wget tries to guess the correct file to download w/ wildcard\n#   But that won't work.\nRUN wget -r --no-parent -nH --cut-dirs=2 http://www.abisource.com/downloads/link-grammar/current/\n#   Unpack the sources, too.\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#   Need the locales for utf8\nRUN (echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && echo \"ru_RU.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"he_IL.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"lt_LT.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"fa_IR.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"ar_AE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"kk_KZ.UTF-8 UTF-8\" >> /etc/locale.gen \\\n && echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen)\n#   WTF. In debian wheezy, it is enough to just say locale-gen without\n#   any arguments. But in trusty, we eneed to be explicit.  I'm confused.\n#   RUN locale-gen\n#   Note also: under trusty, fa_IR.UTF-8 causes locale-gen to fail,\n#   must use the naked  fa_IR\n#   Note also: Kazakh is kk_KZ not kz_KZ\nRUN locale-gen en_US.UTF-8 ru_RU.UTF-8 he_IL.UTF-8 de_DE.UTF-8 lt_LT.UTF-8 fa_IR ar_AE.UTF-8 kk_KZ.UTF-8 tr_TR.UTF-8\n#   Build the libraries and command-line parser only\n#   Assumes that the sources have already been unpacked.\nRUN (cd link-grammar-5* ;mkdir build ;cd build ;../configure ;make -j12 ;make install ;ldconfig )\nRUN adduser --disabled-password --gecos \"Link Parser User\" link-parser\nUSER link-parser\nRUN (cd /home/link-parser ;echo \"export LANG=en_US.UTF-8\" >> .bash_aliases)\nCMD bash\nRUN export LANG=en_US.UTF-8\n#   -------------------------------------------------------------\nUSER root\nWORKDIR /opencog\n#   Change line below on rebuild. Will use Docker cache up to this line,\n#   twigging this date will update the opencog sources.\nENV LAST_SOFTWARE_UPDATE=\"2016-03-10\"\n#   Git pull for all packages\nRUN cd /opencog/ \\\n && find . -maxdepth 1 -mindepth 1 -type d -execdir git --git-dir=$PWD/{}/.git --work-tree=$PWD/{} pull\n#   Build the base software.\nRUN (mkdir /opencog/cogutil/build ;cd /opencog/cogutil/build ;cmake .. ;make -j6 ;make install )\nRUN (mkdir /opencog/atomspace/build ;cd /opencog/atomspace/build ;cmake .. ;make -j12 ;make install )\nRUN (mkdir /opencog/opencog/build ;cd /opencog/opencog/build ;cmake .. ;make -j12 ;make install )\nRUN (cd /opencog/relex ;ant build ;ant install )\n#   Build the unit tests. This is .. optional, but we do it anyway,\n#   for right now, just to sanity-check things.\n#   WORKDIR /opencog/cogutil/build\n#   RUN bash -l -c \"make -j6 tests\"\n#\n#   WORKDIR /opencog/atomspace/build\n#   RUN bash -l -c \"make -j12 tests\"\n#\n#   WORKDIR /opencog/opencog/build\n#   RUN bash -l -c \"make -j12 tests\"\n#\nCOPY /scripts/.guile /root/\nCOPY /scripts/unit-test.sh /root/\nCOPY /scripts/tmux.sh /root/\n#   Pre-compile the guile modules. We could say `guild comple ...`, but\n#   this is easier. This avoids fly compilation during container start.\nRUN (bash -l -c \"echo \\\"(use-modules (opencog))\\\" | guile ; echo \\\"(use-modules (opencog exec))\\\" | guile ; echo \\\"(use-modules (opencog logger))\\\" | guile ; echo \\\"(use-modules (opencog persist))\\\" | guile ; echo \\\"(use-modules (opencog persist-sql))\\\" | guile ; echo \\\"(use-modules (opencog query))\\\" | guile ; echo \\\"(use-modules (opencog rule-engine))\\\" | guile ; echo \\\"(use-modules (opencog atom-types))\\\" | guile ; echo \\\"(use-modules (opencog cogserver))\\\" | guile ; echo \\\"(use-modules (opencog nlp))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot))\\\" | guile ; echo \\\"(use-modules (opencog nlp chatbot-eva))\\\" | guile ; echo \\\"(use-modules (opencog nlp fuzzy))\\\" | guile ; echo \\\"(use-modules (opencog nlp lg-dict))\\\" | guile ; echo \\\"(use-modules (opencog nlp microplanning))\\\" | guile ; echo \\\"(use-modules (opencog nlp relex2logic))\\\" | guile ; echo \\\"(use-modules (opencog nlp sureal))\\\" | guile \" )\nWORKDIR /root\n#   ENTRYPOINT bash -l -c \"./unit-test.sh; bash\"\nENTRYPOINT bash -l -c \"./tmux.sh; bash\"\n#   CMD /bin/bash\n","originalDockerfileUglifiedHash":"fb303de3251bcba0855c3cd38047a891","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1563029f8fd71206fc6e91f342dfecff86da6df9.dockerfile"}