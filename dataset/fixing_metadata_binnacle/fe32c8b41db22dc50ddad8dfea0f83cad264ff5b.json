{"seed":3435976997,"processedDockerfileHash":"5671582a6a7dca7b220ecab2ce14ec42","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#   Let's try to limit the number of layers to minimum:\nENV OPENRESTY_VERSION=\"1.13.6.2\" \\\n    OPENRESTY_DOWNLOAD_SHASUM=\"870055f4698168f1f045de92c467a33361dee5d7\" \\\n    OPENRESTY_DIR=\"/usr/local/src/openresty\" \\\n    OPENRESTY_COMPILE_SCRIPT=\"/usr/local/src/build-resty.sh\" \\\n    OPENRESTY_COMPILE_OPTS=\"\" \\\n    VENV_DIR=\"/usr/local/venv\" \\\n    AR_BIN_DIR=\"/usr/local/adminrouter/\" \\\n    VTS_MODULE_DIR=\"/usr/local/src/jongiddy-nginx-module-vts-3686706\" \\\n    VTS_MODULE_DOWNLOAD_SHASUM=\"785a1a412355dd78c9b0c56318ac5e2fa7428292\" \\\n    VTS_MODULE_DOWNLOAD_URL=\"https://github.com/jongiddy/nginx-module-vts/tarball/36867068fd0a20f0ce1c0b01bb1539be70a7224f\" \\\n    VEGETA_DOWNLOAD_SHA256=\"2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d\" \\\n    VEGETA_DOWNLOAD_URL=\"https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz\" \\\n    IAM_PUBKEY_FILE_PATH=\"/usr/local/iam.jwt-key.pub\" \\\n    IAM_PRIVKEY_FILE_PATH=\"/usr/local/iam.jwt-key.priv\" \\\n    IAM_SHARED_SECRET_FILE_PATH=\"/usr/local/iam.jwt-key.shared-secret\"\n#   These depend on other ENV vars, so we need a separate ENV block:\nENV OPENRESTY_DOWNLOAD_URL=\"https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz\" \\\n    AUTH_ERROR_PAGE_DIR_PATH=\"${AR_BIN_DIR}/nginx/conf/errorpages\"\nWORKDIR /usr/local/src/\n#   Some remarks when it comes to apt-get update:\n#   * `apt-get update` and `apt-get install` are unreliable. Because of that there\n#     is some basic retrying logic\n#   * we put it on top of every apt-get install, because docker layer cache will\n#     not re-run it when updating image with `make update-devkit` if it is a\n#     separate `RUN` line. This leads to `404 Not Found errors.\n#  ### Stuff useful while debugging docker container, not strictly needed for\n#  ### building:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends apt-file=2.5.5ubuntu1 dnsutils=1:9.10.3.dfsg.P4-8ubuntu1.19 git=1:2.7.4-0ubuntu1.10 iproute2=4.3.0-1ubuntu3.16.04.5 less=481-2.1ubuntu0.2 psmisc=22.21-2.1ubuntu0.1 strace=4.11-1ubuntu3 tcpdump=4.9.3-0ubuntu0.16.04.1 telnet=0.17-40 tree=1.7.0-3 vim=2:7.4.1689-3ubuntu1.5 -y\n#   AR related:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends gcc=4:5.3.1-1ubuntu1 gettext-base=0.19.7-2ubuntu3.1 libdigest-sha-perl=5.95-2build1 libffi-dev=3.2.1-4 libffi6=3.2.1-4 libpcre++-dev=0.9.5-6.1 libssl-dev=1.0.2g-1ubuntu4.20 make=4.1-6 patch=2.7.5-1ubuntu0.16.04.2 python3=3.5.1-3 python3-dev=3.5.1-3 python3-pip=8.1.1-2ubuntu0.6 python3-virtualenv=15.0.1+ds-3ubuntu1.1 rsync=3.1.1-3ubuntu1.3 -y\n#   Upgrading pip/setuptools and making the upgrade actually apply in the\n#   following filesystem layers works more reliable when using a virtualenv for\n#   creating the Python environment, especially on overlayfs.\n#   Refs:\n#     https://github.com/docker/docker/issues/12327#issuecomment-188921470\n#     https://github.com/docker/docker/issues/12327#issuecomment-187158265\nRUN python3 -m pip install --upgrade virtualenv\nRUN set -ex \\\n && virtualenv --no-site-packages $VENV_DIR \\\n && ${VENV_DIR}/bin/pip install --upgrade setuptools pip\nENV PATH=\"${VENV_DIR}/bin:$PATH\"\nCOPY ./requirements-tests.txt .\nRUN pip install -r requirements-tests.txt\n#   Install Node & NPM\nRUN curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y\n#   Install Ngindox for API doc generation\nRUN npm install ngindox@0.2.0 -g\n#   Download Vegeta tool for benchmarking\nRUN curl -fsSL \"$VEGETA_DOWNLOAD_URL\" -o vegeta.tar.gz \\\n && echo \"$VEGETA_DOWNLOAD_SHA256 vegeta.tar.gz\" | sha256sum -c - \\\n && tar -C /usr/local/bin -xzf vegeta.tar.gz \\\n && rm vegeta.tar.gz\n#   Download VTS module for metrics\nRUN curl -fsSL \"$VTS_MODULE_DOWNLOAD_URL\" -o vts-module.tar.gz \\\n && echo \"$VTS_MODULE_DOWNLOAD_SHASUM vts-module.tar.gz\" | shasum -c - \\\n && mkdir -pv $VTS_MODULE_DIR \\\n && tar --strip-components=1 -C $VTS_MODULE_DIR -xzf vts-module.tar.gz \\\n && rm vts-module.tar.gz\n#   Prepare Openresty. Compilation is done in Makefile itself so that\n#   this container can be reused during DC/OS build.\nRUN set -ex \\\n && curl -fsSL \"$OPENRESTY_DOWNLOAD_URL\" -o openresty.tar.gz \\\n && echo \"$OPENRESTY_DOWNLOAD_SHASUM openresty.tar.gz\" | shasum -c - \\\n && mkdir -pv $OPENRESTY_DIR \\\n && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \\\n && rm openresty.tar.gz\nCOPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT\n#   Some files that mimic DC/OS environment:\nCOPY iam.jwt-key.pub iam.jwt-key.priv iam.jwt-key.shared-secret detect_ip_public_data.txt /usr/local/\nCOPY cluster-id /var/lib/dcos/cluster-id\nCOPY detect_ip_public /opt/mesosphere/bin/detect_ip_public\nRUN chmod -v a+x /opt/mesosphere/bin/detect_ip_public\nCOPY active.buildinfo.full.json /opt/mesosphere/active.buildinfo.full.json\nRUN mkdir -pv /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/\nCOPY nested-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-metadata-testfile.json dcos-version.json /opt/mesosphere/active/dcos-metadata/etc/\nCOPY nested-metadata-testfile.json /opt/mesosphere/active/dcos-metadata/etc/nest1/\n#   The contents of adminrouter-listen* files differ from the ones that are\n#   shipped with DC/OS - the IP addresses Nginx binds to are limited to only\n#   127.0.0.1 instead of *. The reason for it is that some endpoints also need to\n#   listen on TCP port 80 and this causes conflicts.\nCOPY adminrouter-redirect-http-https.conf adminrouter-upstreams-ee.conf adminrouter-upstreams-open.conf adminrouter-listen-master.conf adminrouter-listen-agent.conf adminrouter-tls-agent.conf adminrouter-tls-master.conf adminrouter-ui-security.conf /opt/mesosphere/etc/\n#   The `ca.crt` file is copied into two places due to the fact that\n#   `ca-bundle.crt` file is used by AR Lua code for certificate verification\n#   (trust anchors, see below) and the ca.crt is a cert that was used to actually\n#   sign all other certificates and together with `ca.key` file is copied into\n#   the container for conveniance.  The `ca-bundle.crt` in a real DC/OS cluster\n#   may contain more than one trust anchor, but in our case there is only one\n#   certifcate - root CA cert that should be trusted.\nCOPY ca.crt /run/dcos/pki/CA/certs/\nCOPY ca.key /run/dcos/pki/CA/private/\nCOPY ca.crt /run/dcos/pki/CA/ca-bundle.crt\nCOPY adminrouter-ec.crt adminrouter-rsa.crt /run/dcos/pki/tls/certs/\nCOPY adminrouter-ec.key adminrouter-rsa.key /run/dcos/pki/tls/private/\n#   Workers run as the dcos_adminrouter group.\nRUN groupadd --system dcos_adminrouter\nWORKDIR $AR_BIN_DIR/nginx/conf/\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  Let's try to limit the number of layers to minimum:\nENV OPENRESTY_VERSION=\"1.13.6.2\" \\\n    OPENRESTY_DOWNLOAD_SHASUM=\"870055f4698168f1f045de92c467a33361dee5d7\" \\\n    OPENRESTY_DIR=\"/usr/local/src/openresty\" \\\n    OPENRESTY_COMPILE_SCRIPT=\"/usr/local/src/build-resty.sh\" \\\n    OPENRESTY_COMPILE_OPTS=\"\" \\\n    VENV_DIR=\"/usr/local/venv\" \\\n    AR_BIN_DIR=\"/usr/local/adminrouter/\" \\\n    VTS_MODULE_DIR=\"/usr/local/src/jongiddy-nginx-module-vts-3686706\" \\\n    VTS_MODULE_DOWNLOAD_SHASUM=\"785a1a412355dd78c9b0c56318ac5e2fa7428292\" \\\n    VTS_MODULE_DOWNLOAD_URL=\"https://github.com/jongiddy/nginx-module-vts/tarball/36867068fd0a20f0ce1c0b01bb1539be70a7224f\" \\\n    VEGETA_DOWNLOAD_SHA256=\"2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d\" \\\n    VEGETA_DOWNLOAD_URL=\"https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz\" \\\n    IAM_PUBKEY_FILE_PATH=\"/usr/local/iam.jwt-key.pub\" \\\n    IAM_PRIVKEY_FILE_PATH=\"/usr/local/iam.jwt-key.priv\" \\\n    IAM_SHARED_SECRET_FILE_PATH=\"/usr/local/iam.jwt-key.shared-secret\"\n#  These depend on other ENV vars, so we need a separate ENV block:\nENV OPENRESTY_DOWNLOAD_URL=\"https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz\" \\\n    AUTH_ERROR_PAGE_DIR_PATH=\"${AR_BIN_DIR}/nginx/conf/errorpages\"\nWORKDIR /usr/local/src/\n#  Some remarks when it comes to apt-get update:\n#  * `apt-get update` and `apt-get install` are unreliable. Because of that there\n#    is some basic retrying logic\n#  * we put it on top of every apt-get install, because docker layer cache will\n#    not re-run it when updating image with `make update-devkit` if it is a\n#    separate `RUN` line. This leads to `404 Not Found errors.\n# ### Stuff useful while debugging docker container, not strictly needed for\n# ### building:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends apt-file dnsutils git iproute2 less psmisc strace tcpdump telnet tree vim -y\n#  AR related:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends gcc gettext-base libdigest-sha-perl libffi-dev libffi6 libpcre++-dev libssl-dev make patch python3 python3-dev python3-pip python3-virtualenv rsync -y\n#  Upgrading pip/setuptools and making the upgrade actually apply in the\n#  following filesystem layers works more reliable when using a virtualenv for\n#  creating the Python environment, especially on overlayfs.\n#  Refs:\n#    https://github.com/docker/docker/issues/12327#issuecomment-188921470\n#    https://github.com/docker/docker/issues/12327#issuecomment-187158265\nRUN python3 -m pip install --upgrade virtualenv\nRUN set -ex \\\n && virtualenv --no-site-packages $VENV_DIR \\\n && ${VENV_DIR}/bin/pip install --upgrade setuptools pip\nENV PATH=\"${VENV_DIR}/bin:$PATH\"\nCOPY ./requirements-tests.txt .\nRUN pip install -r requirements-tests.txt\n#  Install Node & NPM\nRUN curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y\n#  Install Ngindox for API doc generation\nRUN npm install ngindox@0.2.0 -g\n#  Download Vegeta tool for benchmarking\nRUN curl -fsSL \"$VEGETA_DOWNLOAD_URL\" -o vegeta.tar.gz \\\n && echo \"$VEGETA_DOWNLOAD_SHA256 vegeta.tar.gz\" | sha256sum -c - \\\n && tar -C /usr/local/bin -xzf vegeta.tar.gz \\\n && rm vegeta.tar.gz\n#  Download VTS module for metrics\nRUN curl -fsSL \"$VTS_MODULE_DOWNLOAD_URL\" -o vts-module.tar.gz \\\n && echo \"$VTS_MODULE_DOWNLOAD_SHASUM vts-module.tar.gz\" | shasum -c - \\\n && mkdir -pv $VTS_MODULE_DIR \\\n && tar --strip-components=1 -C $VTS_MODULE_DIR -xzf vts-module.tar.gz \\\n && rm vts-module.tar.gz\n#  Prepare Openresty. Compilation is done in Makefile itself so that\n#  this container can be reused during DC/OS build.\nRUN set -ex \\\n && curl -fsSL \"$OPENRESTY_DOWNLOAD_URL\" -o openresty.tar.gz \\\n && echo \"$OPENRESTY_DOWNLOAD_SHASUM openresty.tar.gz\" | shasum -c - \\\n && mkdir -pv $OPENRESTY_DIR \\\n && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \\\n && rm openresty.tar.gz\nCOPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT\n#  Some files that mimic DC/OS environment:\nCOPY iam.jwt-key.pub iam.jwt-key.priv iam.jwt-key.shared-secret detect_ip_public_data.txt /usr/local/\nCOPY cluster-id /var/lib/dcos/cluster-id\nCOPY detect_ip_public /opt/mesosphere/bin/detect_ip_public\nRUN chmod -v a+x /opt/mesosphere/bin/detect_ip_public\nCOPY active.buildinfo.full.json /opt/mesosphere/active.buildinfo.full.json\nRUN mkdir -pv /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/\nCOPY nested-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-metadata-testfile.json dcos-version.json /opt/mesosphere/active/dcos-metadata/etc/\nCOPY nested-metadata-testfile.json /opt/mesosphere/active/dcos-metadata/etc/nest1/\n#  The contents of adminrouter-listen* files differ from the ones that are\n#  shipped with DC/OS - the IP addresses Nginx binds to are limited to only\n#  127.0.0.1 instead of *. The reason for it is that some endpoints also need to\n#  listen on TCP port 80 and this causes conflicts.\nCOPY adminrouter-redirect-http-https.conf adminrouter-upstreams-ee.conf adminrouter-upstreams-open.conf adminrouter-listen-master.conf adminrouter-listen-agent.conf adminrouter-tls-agent.conf adminrouter-tls-master.conf adminrouter-ui-security.conf /opt/mesosphere/etc/\n#  The `ca.crt` file is copied into two places due to the fact that\n#  `ca-bundle.crt` file is used by AR Lua code for certificate verification\n#  (trust anchors, see below) and the ca.crt is a cert that was used to actually\n#  sign all other certificates and together with `ca.key` file is copied into\n#  the container for conveniance.  The `ca-bundle.crt` in a real DC/OS cluster\n#  may contain more than one trust anchor, but in our case there is only one\n#  certifcate - root CA cert that should be trusted.\nCOPY ca.crt /run/dcos/pki/CA/certs/\nCOPY ca.key /run/dcos/pki/CA/private/\nCOPY ca.crt /run/dcos/pki/CA/ca-bundle.crt\nCOPY adminrouter-ec.crt adminrouter-rsa.crt /run/dcos/pki/tls/certs/\nCOPY adminrouter-ec.key adminrouter-rsa.key /run/dcos/pki/tls/private/\n#  Workers run as the dcos_adminrouter group.\nRUN groupadd --system dcos_adminrouter\nWORKDIR $AR_BIN_DIR/nginx/conf/\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"156d01c38361a0e340599ee4ccccd925","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   Let's try to limit the number of layers to minimum:\nENV OPENRESTY_VERSION=\"1.13.6.2\" \\\n    OPENRESTY_DOWNLOAD_SHASUM=\"870055f4698168f1f045de92c467a33361dee5d7\" \\\n    OPENRESTY_DIR=\"/usr/local/src/openresty\" \\\n    OPENRESTY_COMPILE_SCRIPT=\"/usr/local/src/build-resty.sh\" \\\n    OPENRESTY_COMPILE_OPTS=\"\" \\\n    VENV_DIR=\"/usr/local/venv\" \\\n    AR_BIN_DIR=\"/usr/local/adminrouter/\" \\\n    VTS_MODULE_DIR=\"/usr/local/src/jongiddy-nginx-module-vts-3686706\" \\\n    VTS_MODULE_DOWNLOAD_SHASUM=\"785a1a412355dd78c9b0c56318ac5e2fa7428292\" \\\n    VTS_MODULE_DOWNLOAD_URL=\"https://github.com/jongiddy/nginx-module-vts/tarball/36867068fd0a20f0ce1c0b01bb1539be70a7224f\" \\\n    VEGETA_DOWNLOAD_SHA256=\"2f0a69d0ae6f0bf268b7f655bd37c0104d5568d5b2bc45bbb2c405266f74e33d\" \\\n    VEGETA_DOWNLOAD_URL=\"https://github.com/tsenart/vegeta/releases/download/v6.1.1/vegeta-v6.1.1-linux-amd64.tar.gz\" \\\n    IAM_PUBKEY_FILE_PATH=\"/usr/local/iam.jwt-key.pub\" \\\n    IAM_PRIVKEY_FILE_PATH=\"/usr/local/iam.jwt-key.priv\" \\\n    IAM_SHARED_SECRET_FILE_PATH=\"/usr/local/iam.jwt-key.shared-secret\"\n#   These depend on other ENV vars, so we need a separate ENV block:\nENV OPENRESTY_DOWNLOAD_URL=\"https://openresty.org/download/openresty-$OPENRESTY_VERSION.tar.gz\" \\\n    AUTH_ERROR_PAGE_DIR_PATH=\"${AR_BIN_DIR}/nginx/conf/errorpages\"\nWORKDIR /usr/local/src/\n#   Some remarks when it comes to apt-get update:\n#   * `apt-get update` and `apt-get install` are unreliable. Because of that there\n#     is some basic retrying logic\n#   * we put it on top of every apt-get install, because docker layer cache will\n#     not re-run it when updating image with `make update-devkit` if it is a\n#     separate `RUN` line. This leads to `404 Not Found errors.\n#  ### Stuff useful while debugging docker container, not strictly needed for\n#  ### building:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends apt-file dnsutils git iproute2 less psmisc strace tcpdump telnet tree vim -y\n#   AR related:\nRUN set -ex \\\n && bash -x -c 'for i in {1..5}; do apt-get update \\\n && break || sleep 2; done' \\\n && apt-get install --no-install-recommends gcc gettext-base libdigest-sha-perl libffi-dev libffi6 libpcre++-dev libssl-dev make patch python3 python3-dev python3-pip python3-virtualenv rsync -y\n#   Upgrading pip/setuptools and making the upgrade actually apply in the\n#   following filesystem layers works more reliable when using a virtualenv for\n#   creating the Python environment, especially on overlayfs.\n#   Refs:\n#     https://github.com/docker/docker/issues/12327#issuecomment-188921470\n#     https://github.com/docker/docker/issues/12327#issuecomment-187158265\nRUN python3 -m pip install --upgrade virtualenv\nRUN set -ex \\\n && virtualenv --no-site-packages $VENV_DIR \\\n && ${VENV_DIR}/bin/pip install --upgrade setuptools pip\nENV PATH=\"${VENV_DIR}/bin:$PATH\"\nCOPY ./requirements-tests.txt .\nRUN pip install -r requirements-tests.txt\n#   Install Node & NPM\nRUN curl -sL https://deb.nodesource.com/setup_6.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y\n#   Install Ngindox for API doc generation\nRUN npm install ngindox@0.2.0 -g\n#   Download Vegeta tool for benchmarking\nRUN curl -fsSL \"$VEGETA_DOWNLOAD_URL\" -o vegeta.tar.gz \\\n && echo \"$VEGETA_DOWNLOAD_SHA256 vegeta.tar.gz\" | sha256sum -c - \\\n && tar -C /usr/local/bin -xzf vegeta.tar.gz \\\n && rm vegeta.tar.gz\n#   Download VTS module for metrics\nRUN curl -fsSL \"$VTS_MODULE_DOWNLOAD_URL\" -o vts-module.tar.gz \\\n && echo \"$VTS_MODULE_DOWNLOAD_SHASUM vts-module.tar.gz\" | shasum -c - \\\n && mkdir -pv $VTS_MODULE_DIR \\\n && tar --strip-components=1 -C $VTS_MODULE_DIR -xzf vts-module.tar.gz \\\n && rm vts-module.tar.gz\n#   Prepare Openresty. Compilation is done in Makefile itself so that\n#   this container can be reused during DC/OS build.\nRUN set -ex \\\n && curl -fsSL \"$OPENRESTY_DOWNLOAD_URL\" -o openresty.tar.gz \\\n && echo \"$OPENRESTY_DOWNLOAD_SHASUM openresty.tar.gz\" | shasum -c - \\\n && mkdir -pv $OPENRESTY_DIR \\\n && tar --strip-components=1 -C $OPENRESTY_DIR -xzf openresty.tar.gz \\\n && rm openresty.tar.gz\nCOPY build-resty.sh $OPENRESTY_COMPILE_SCRIPT\n#   Some files that mimic DC/OS environment:\nCOPY iam.jwt-key.pub iam.jwt-key.priv iam.jwt-key.shared-secret detect_ip_public_data.txt /usr/local/\nCOPY cluster-id /var/lib/dcos/cluster-id\nCOPY detect_ip_public /opt/mesosphere/bin/detect_ip_public\nRUN chmod -v a+x /opt/mesosphere/bin/detect_ip_public\nCOPY active.buildinfo.full.json /opt/mesosphere/active.buildinfo.full.json\nRUN mkdir -pv /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/\nCOPY nested-ui-testfile.html /var/lib/dcos/dcos-ui-update-service/dist/ui/nest1/\nCOPY plain-metadata-testfile.json dcos-version.json /opt/mesosphere/active/dcos-metadata/etc/\nCOPY nested-metadata-testfile.json /opt/mesosphere/active/dcos-metadata/etc/nest1/\n#   The contents of adminrouter-listen* files differ from the ones that are\n#   shipped with DC/OS - the IP addresses Nginx binds to are limited to only\n#   127.0.0.1 instead of *. The reason for it is that some endpoints also need to\n#   listen on TCP port 80 and this causes conflicts.\nCOPY adminrouter-redirect-http-https.conf adminrouter-upstreams-ee.conf adminrouter-upstreams-open.conf adminrouter-listen-master.conf adminrouter-listen-agent.conf adminrouter-tls-agent.conf adminrouter-tls-master.conf adminrouter-ui-security.conf /opt/mesosphere/etc/\n#   The `ca.crt` file is copied into two places due to the fact that\n#   `ca-bundle.crt` file is used by AR Lua code for certificate verification\n#   (trust anchors, see below) and the ca.crt is a cert that was used to actually\n#   sign all other certificates and together with `ca.key` file is copied into\n#   the container for conveniance.  The `ca-bundle.crt` in a real DC/OS cluster\n#   may contain more than one trust anchor, but in our case there is only one\n#   certifcate - root CA cert that should be trusted.\nCOPY ca.crt /run/dcos/pki/CA/certs/\nCOPY ca.key /run/dcos/pki/CA/private/\nCOPY ca.crt /run/dcos/pki/CA/ca-bundle.crt\nCOPY adminrouter-ec.crt adminrouter-rsa.crt /run/dcos/pki/tls/certs/\nCOPY adminrouter-ec.key adminrouter-rsa.key /run/dcos/pki/tls/private/\n#   Workers run as the dcos_adminrouter group.\nRUN groupadd --system dcos_adminrouter\nWORKDIR $AR_BIN_DIR/nginx/conf/\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"eeae40fa98c9ea652d992b7e7786722b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fe32c8b41db22dc50ddad8dfea0f83cad264ff5b.dockerfile"}