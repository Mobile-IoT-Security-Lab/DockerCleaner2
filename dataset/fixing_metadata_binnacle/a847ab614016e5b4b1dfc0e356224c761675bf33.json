{"seed":3564438807,"processedDockerfileHash":"b9366fe2e349fc38e7eab4f09144000d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   upstream https://github.com/mesosphere/marathon-lb\nFROM debian:stretch\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n#   Set timezone and locales\nRUN echo \"${TIMEZONE}\" > /etc/timezone \\\n && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apt-utils dialog locales \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && update-locale LANG=$LANG \\\n && locale-gen $LANG \\\n && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n#   Install required packages\nRUN apt-get dist-upgrade -y\n#   runtime dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ca-certificates=20200601~deb9u2 inetutils-syslogd=2:1.9.4-2+deb9u1 iptables=1.6.0+snapshot20161117-6 libcurl3=7.52.1-5+deb9u16 liblua5.3-0=5.3.3-1+deb9u1 libssl1.0.2=1.0.2u-1~deb9u7 openssl=1.1.0l-1~deb9u6 procps=2:3.3.12-3+deb9u1 python3=3.5.3-1 runit=2.1.2-9.2 gnupg-agent=2.1.18-8~deb9u4 libdpkg-perl=1.18.26 socat=1.7.3.1-2+deb9u1 -y ) \\\n && rm -rf /var/lib/apt/lists/*\nENV TINI_VERSION=\"v0.13.2\" \\\n    TINI_GPG_KEY=\"595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7\"\nRUN set -x \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends dirmngr=2.1.18-8~deb9u4 gpg wget=1.18-5+deb9u3 -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O tini \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64\" \\\n && wget -O tini.asc \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys \"$TINI_GPG_KEY\" \\\n && gpg --batch --verify tini.asc tini \\\n && rm -rf \"$GNUPGHOME\" tini.asc \\\n && mv tini /usr/bin/tini \\\n && chmod +x /usr/bin/tini \\\n && tini -- true \\\n && apt-get purge -y --auto-remove dirmngr gpg wget\nENV HAPROXY_MAJOR=\"1.7\" \\\n    HAPROXY_VERSION=\"1.7.9\" \\\n    HAPROXY_MD5=\"a2bbbdd45ffe18d99cdcf26aa992f92d\"\nCOPY requirements.txt /marathon-lb/\nCOPY pip.conf /etc/pip.conf\n#   Build HAProxy\n#   Install Python dependencies\n#   Install Python packages with --upgrade so we get new packages even if a system\n#   package is already installed. Combine with --force-reinstall to ensure we get\n#   a local package even if the system package is up-to-date as the system package\n#   will probably be uninstalled with the build dependencies.\nRUN set -x \\\n && buildDeps=' gcc libcurl4-openssl-dev libffi-dev liblua5.3-dev libpcre3-dev libssl-dev make python3-dev python3-pip python3-setuptools wget zlib1g-dev ' \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends $buildDeps -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O haproxy.tar.gz \"https://www.haproxy.org/download/$HAPROXY_MAJOR/src/haproxy-$HAPROXY_VERSION.tar.gz\" \\\n && echo \"$HAPROXY_MD5 haproxy.tar.gz\" | md5sum -c \\\n && mkdir -p /usr/src/haproxy \\\n && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \\\n && rm haproxy.tar.gz \\\n && make -C /usr/src/haproxy TARGET=linux2628 ARCH=x86_64 USE_LUA=1 LUA_INC=/usr/include/lua5.3/ USE_OPENSSL=1 USE_PCRE_JIT=1 USE_PCRE=1 USE_REGPARM=1 USE_STATIC_PCRE=1 USE_ZLIB=1 all install-bin \\\n && rm -rf /usr/src/haproxy \\\n && pip3 install --no-cache --upgrade --force-reinstall -r /marathon-lb/requirements.txt \\\n && apt-get purge -y --auto-remove $buildDeps\nCOPY . /marathon-lb\nWORKDIR /marathon-lb\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"/marathon-lb/run\"]\nCMD [\"sse\", \"--health-check\", \"--group\", \"external\"]\nEXPOSE 80/tcp 443/tcp 9090/tcp 9091/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  upstream https://github.com/mesosphere/marathon-lb\nFROM debian:stretch\nMAINTAINER 若虚 <slpcat@qq.com>\n#  Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n#  Set timezone and locales\nRUN echo \"${TIMEZONE}\" > /etc/timezone \\\n && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n && apt-get update -q \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apt-utils dialog locales \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && update-locale LANG=$LANG \\\n && locale-gen $LANG \\\n && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n#  Install required packages\nRUN apt-get dist-upgrade -y\n#  runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates inetutils-syslogd iptables libcurl3 liblua5.3-0 libssl1.0.2 openssl procps python3 runit gnupg-agent libdpkg-perl socat -y \\\n && rm -rf /var/lib/apt/lists/*\nENV TINI_VERSION=\"v0.13.2\" \\\n    TINI_GPG_KEY=\"595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends dirmngr gpg wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O tini \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64\" \\\n && wget -O tini.asc \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys \"$TINI_GPG_KEY\" \\\n && gpg --batch --verify tini.asc tini \\\n && rm -rf \"$GNUPGHOME\" tini.asc \\\n && mv tini /usr/bin/tini \\\n && chmod +x /usr/bin/tini \\\n && tini -- true \\\n && apt-get purge -y --auto-remove dirmngr gpg wget\nENV HAPROXY_MAJOR=\"1.7\" \\\n    HAPROXY_VERSION=\"1.7.9\" \\\n    HAPROXY_MD5=\"a2bbbdd45ffe18d99cdcf26aa992f92d\"\nCOPY requirements.txt /marathon-lb/\nCOPY pip.conf /etc/pip.conf\n#  Build HAProxy\n#  Install Python dependencies\n#  Install Python packages with --upgrade so we get new packages even if a system\n#  package is already installed. Combine with --force-reinstall to ensure we get\n#  a local package even if the system package is up-to-date as the system package\n#  will probably be uninstalled with the build dependencies.\nRUN set -x \\\n && buildDeps=' gcc libcurl4-openssl-dev libffi-dev liblua5.3-dev libpcre3-dev libssl-dev make python3-dev python3-pip python3-setuptools wget zlib1g-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O haproxy.tar.gz \"https://www.haproxy.org/download/$HAPROXY_MAJOR/src/haproxy-$HAPROXY_VERSION.tar.gz\" \\\n && echo \"$HAPROXY_MD5 haproxy.tar.gz\" | md5sum -c \\\n && mkdir -p /usr/src/haproxy \\\n && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \\\n && rm haproxy.tar.gz \\\n && make -C /usr/src/haproxy TARGET=linux2628 ARCH=x86_64 USE_LUA=1 LUA_INC=/usr/include/lua5.3/ USE_OPENSSL=1 USE_PCRE_JIT=1 USE_PCRE=1 USE_REGPARM=1 USE_STATIC_PCRE=1 USE_ZLIB=1 all install-bin \\\n && rm -rf /usr/src/haproxy \\\n && pip3 install --no-cache --upgrade --force-reinstall -r /marathon-lb/requirements.txt \\\n && apt-get purge -y --auto-remove $buildDeps\nCOPY . /marathon-lb\nWORKDIR /marathon-lb\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"/marathon-lb/run\"]\nCMD [\"sse\", \"--health-check\", \"--group\", \"external\"]\nEXPOSE 80/tcp 443/tcp 9090/tcp 9091/tcp\n","injectedSmells":[],"originalDockerfileHash":"1db1aa4a441b57aabdef9461d4750517","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   upstream https://github.com/mesosphere/marathon-lb\nFROM debian:stretch\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\n#   Set timezone and locales\nRUN echo \"${TIMEZONE}\" > /etc/timezone \\\n && echo \"$LANG UTF-8\" > /etc/locale.gen \\\n && apt-get update -q \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apt-utils dialog locales \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && update-locale LANG=$LANG \\\n && locale-gen $LANG \\\n && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales\n#   Install required packages\nRUN apt-get dist-upgrade -y\n#   runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates inetutils-syslogd iptables libcurl3 liblua5.3-0 libssl1.0.2 openssl procps python3 runit gnupg-agent libdpkg-perl socat -y \\\n && rm -rf /var/lib/apt/lists/*\nENV TINI_VERSION=\"v0.13.2\" \\\n    TINI_GPG_KEY=\"595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends dirmngr gpg wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O tini \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64\" \\\n && wget -O tini.asc \"https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys \"$TINI_GPG_KEY\" \\\n && gpg --batch --verify tini.asc tini \\\n && rm -rf \"$GNUPGHOME\" tini.asc \\\n && mv tini /usr/bin/tini \\\n && chmod +x /usr/bin/tini \\\n && tini -- true \\\n && apt-get purge -y --auto-remove dirmngr gpg wget\nENV HAPROXY_MAJOR=\"1.7\" \\\n    HAPROXY_VERSION=\"1.7.9\" \\\n    HAPROXY_MD5=\"a2bbbdd45ffe18d99cdcf26aa992f92d\"\nCOPY requirements.txt /marathon-lb/\nCOPY pip.conf /etc/pip.conf\n#   Build HAProxy\n#   Install Python dependencies\n#   Install Python packages with --upgrade so we get new packages even if a system\n#   package is already installed. Combine with --force-reinstall to ensure we get\n#   a local package even if the system package is up-to-date as the system package\n#   will probably be uninstalled with the build dependencies.\nRUN set -x \\\n && buildDeps=' gcc libcurl4-openssl-dev libffi-dev liblua5.3-dev libpcre3-dev libssl-dev make python3-dev python3-pip python3-setuptools wget zlib1g-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O haproxy.tar.gz \"https://www.haproxy.org/download/$HAPROXY_MAJOR/src/haproxy-$HAPROXY_VERSION.tar.gz\" \\\n && echo \"$HAPROXY_MD5 haproxy.tar.gz\" | md5sum -c \\\n && mkdir -p /usr/src/haproxy \\\n && tar -xzf haproxy.tar.gz -C /usr/src/haproxy --strip-components=1 \\\n && rm haproxy.tar.gz \\\n && make -C /usr/src/haproxy TARGET=linux2628 ARCH=x86_64 USE_LUA=1 LUA_INC=/usr/include/lua5.3/ USE_OPENSSL=1 USE_PCRE_JIT=1 USE_PCRE=1 USE_REGPARM=1 USE_STATIC_PCRE=1 USE_ZLIB=1 all install-bin \\\n && rm -rf /usr/src/haproxy \\\n && pip3 install --no-cache --upgrade --force-reinstall -r /marathon-lb/requirements.txt \\\n && apt-get purge -y --auto-remove $buildDeps\nCOPY . /marathon-lb\nWORKDIR /marathon-lb\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"/marathon-lb/run\"]\nCMD [\"sse\", \"--health-check\", \"--group\", \"external\"]\nEXPOSE 80/tcp 443/tcp 9090/tcp 9091/tcp\n","originalDockerfileUglifiedHash":"1f364802c5fb2e71ff194bf7e7d688f8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a847ab614016e5b4b1dfc0e356224c761675bf33.dockerfile"}