{"seed":716262992,"processedDockerfileHash":"806388fae3c7e8b311ff903ae0cf8eda","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file is part of libertine. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.\n#   Copyright © 2018 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.\nFROM alpine:3.8\nMAINTAINER Raphael Cohn <raphael.cohn@stormmq.com>\n#   1 Baseline environment\n#   1.1 Arguments\n#   rustup-init version: rustup-init 1.14.0 (1e51b07cc 2018-10-04)\nARG rustToolchainVersion=2018-10-30\nARG glibcTag=glibc-2.28\nARG linuxHeadersVersion=4.4.6-r2\n#   1.2 User settings\nUSER 0:0\nENV HOME=\"/root\"\nWORKDIR \"$HOME\"\n#   1.3 Ensure PATH is consistent and contains /usr/local/sbin\nRUN /bin/mkdir -m 0755 -p /usr/local/sbin\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   1.4 Bring apk package manager up-to-date with known repositories\nRUN apk update\nRUN apk upgrade\n#   2 Development environment for Libertine Linux\n#   2.1 Essential C compiler\nRUN apk add binutils=2.30-r6 fortify-headers=0.9-r0 g++=6.4.0-r9 gcc=6.4.0-r9 gmp-dev=6.1.2-r1 libc-dev=0.7.1-r0 mpc1-dev=1.0.3-r1 mpfr-dev=3.1.5-r1\n#   2.2 Boostrap rustc and cargo; Rust is needed to bootstrap Rust\n#   2.2.1 Create a glibc dynamic library (this will be heavily polluted by the host environment)\nENV glibcInstallPath=\"/usr/glibc-compat\"\n#   2.2.1.1 Download\nRUN apk add git=2.18.4-r0\nRUN git clone --depth 1 --single-branch --branch \"$glibcTag\" git://sourceware.org/git/glibc.git\nRUN apk del git\n#   2.2.1.2 Add build dependencies\nRUN apk add alpine-sdk=1.0-r0 bison=3.0.4-r1 gawk=4.2.1-r0 linux-headers=4.4.6-r2\nRUN mkdir /root/linux-headers\nRUN apk fetch --output /root/linux-headers linux-headers\nWORKDIR /root/linux-headers\nRUN tar --extract --file linux-headers-\"${linuxHeadersVersion}\".apk\n#   2.2.1.3 Compile\nWORKDIR /root/glibc\nRUN mkdir build\nWORKDIR /root/glibc/build\n#   Yes, it really is called `configparms`.\nRUN echo \"slibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"rtlibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"sbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo \"rootsbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo 'build-programs=yes' >> configparms\nRUN ../configure --enable-static-pie --host=\"x86_64-alpine-linux-musl\" --disable-werror --enable-kernel=3.2 --with-headers=/root/linux-headers/usr/include --prefix \"$glibcInstallPath\"\nRUN make\n#   2.2.1.4 Install\nRUN make install\nRUN mkdir -p /usr/glibc-compat/etc\nRUN printf '%s/lib\\n/usr/local/lib\\n/usr/lib\\n/lib\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/ld.so.conf\nRUN printf 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/nsswitch.configure\nRUN mkdir /lib64\nRUN ln -s \"${glibcInstallPath}\"/lib/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2\nRUN mkdir -p \"${glibcInstallPath}\"/lib/locale\n#   To use this particular library with gcc, say, if necesary: gcc -L \"${glibcInstallPath}/lib\" -I \"${glibcInstallPath}/include\" -Wl,--rpath=\"${glibcInstallPath}/lib\" -Wl,--dynamic-linker=\"${glibcInstallPath}/lib/ld-linux-x86-64.so.2\"\n#   2.2.1.5 Remove build dependencies\nRUN rm -rf /root/glibc\nRUN apk del alpine-sdk bison gawk linux-headers\n#   2.2.2 Configure glibc binaries\nRUN \"${glibcInstallPath}\"/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN \"${glibcInstallPath}\"/bin/ldconfig\nENV PATH=\"${glibcInstallPath}/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   2.2.3 Install, patch and run rustup\nRUN apk add patchelf=0.9-r2\nWORKDIR /root\nCOPY root/rustup-init rustup-init\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/lib:/lib rustup-init\nRUN ./rustup-init --verbose -y --no-modify-path --default-toolchain nightly-\"${rustToolchainVersion}\" --default-host x86_64-unknown-linux-gnu\nRUN rm rustup-init\n#   2.2.4 Patch Rust binaries to use a RPATH which locates glibc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-clippy\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-fmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rls\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-gdb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-lldb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustdoc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustfmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustup\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustdoc\nRUN apk del patchelf\n#   2.2.5 Integrate Rust binaries.\nENV PATH=\"/root/.cargo/bin:$PATH\"\nRUN rustup target add x86_64-unknown-linux-musl\nRUN rustup update\nRUN rustc -Vv\n#   2.3 Git for Libertine Linux ./libertine progam\nRUN apk add git=2.18.4-r0\n#   2.4 Qemu for Libertine Linux image testings\nRUN apk add qemu-system-x86_64=2.12.0-r3\n#   3 Clean up apk\nRUN rm -rf /var/cache/apk/*\n#   4 Leave as needed.\nRUN mkdir /root/libertine\nVOLUME /root/libertine\nWORKDIR /root/libertine\nENTRYPOINT [\"./libertine\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file is part of libertine. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.\n#  Copyright © 2018 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.\nFROM alpine:3.8\nMAINTAINER Raphael Cohn <raphael.cohn@stormmq.com>\n#  1 Baseline environment\n#  1.1 Arguments\n#  rustup-init version: rustup-init 1.14.0 (1e51b07cc 2018-10-04)\nARG rustToolchainVersion=2018-10-30\nARG glibcTag=glibc-2.28\nARG linuxHeadersVersion=4.4.6-r2\n#  1.2 User settings\nUSER 0:0\nENV HOME=\"/root\"\nWORKDIR \"$HOME\"\n#  1.3 Ensure PATH is consistent and contains /usr/local/sbin\nRUN /bin/mkdir -m 0755 -p /usr/local/sbin\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  1.4 Bring apk package manager up-to-date with known repositories\nRUN apk update\nRUN apk upgrade\n#  2 Development environment for Libertine Linux\n#  2.1 Essential C compiler\nRUN apk add binutils fortify-headers g++ gcc gmp-dev libc-dev mpc1-dev mpfr-dev\n#  2.2 Boostrap rustc and cargo; Rust is needed to bootstrap Rust\n#  2.2.1 Create a glibc dynamic library (this will be heavily polluted by the host environment)\nENV glibcInstallPath=\"/usr/glibc-compat\"\n#  2.2.1.1 Download\nRUN apk add git\nRUN git clone --depth 1 --single-branch --branch \"$glibcTag\" git://sourceware.org/git/glibc.git\nRUN apk del git\n#  2.2.1.2 Add build dependencies\nRUN apk add alpine-sdk bison gawk linux-headers\nRUN mkdir /root/linux-headers\nRUN apk fetch --output /root/linux-headers linux-headers\nWORKDIR /root/linux-headers\nRUN tar --extract --file linux-headers-\"${linuxHeadersVersion}\".apk\n#  2.2.1.3 Compile\nWORKDIR /root/glibc\nRUN mkdir build\nWORKDIR /root/glibc/build\n#  Yes, it really is called `configparms`.\nRUN echo \"slibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"rtlibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"sbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo \"rootsbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo 'build-programs=yes' >> configparms\nRUN ../configure --enable-static-pie --host=\"x86_64-alpine-linux-musl\" --disable-werror --enable-kernel=3.2 --with-headers=/root/linux-headers/usr/include --prefix \"$glibcInstallPath\"\nRUN make\n#  2.2.1.4 Install\nRUN make install\nRUN mkdir -p /usr/glibc-compat/etc\nRUN printf '%s/lib\\n/usr/local/lib\\n/usr/lib\\n/lib\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/ld.so.conf\nRUN printf 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/nsswitch.configure\nRUN mkdir /lib64\nRUN ln -s \"${glibcInstallPath}\"/lib/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2\nRUN mkdir -p \"${glibcInstallPath}\"/lib/locale\n#  To use this particular library with gcc, say, if necesary: gcc -L \"${glibcInstallPath}/lib\" -I \"${glibcInstallPath}/include\" -Wl,--rpath=\"${glibcInstallPath}/lib\" -Wl,--dynamic-linker=\"${glibcInstallPath}/lib/ld-linux-x86-64.so.2\"\n#  2.2.1.5 Remove build dependencies\nRUN rm -rf /root/glibc\nRUN apk del alpine-sdk bison gawk linux-headers\n#  2.2.2 Configure glibc binaries\nRUN \"${glibcInstallPath}\"/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN \"${glibcInstallPath}\"/bin/ldconfig\nENV PATH=\"${glibcInstallPath}/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  2.2.3 Install, patch and run rustup\nRUN apk add patchelf\nWORKDIR /root\nCOPY root/rustup-init rustup-init\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/lib:/lib rustup-init\nRUN ./rustup-init --verbose -y --no-modify-path --default-toolchain nightly-\"${rustToolchainVersion}\" --default-host x86_64-unknown-linux-gnu\nRUN rm rustup-init\n#  2.2.4 Patch Rust binaries to use a RPATH which locates glibc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-clippy\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-fmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rls\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-gdb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-lldb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustdoc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustfmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustup\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustdoc\nRUN apk del patchelf\n#  2.2.5 Integrate Rust binaries.\nENV PATH=\"/root/.cargo/bin:$PATH\"\nRUN rustup target add x86_64-unknown-linux-musl\nRUN rustup update\nRUN rustc -Vv\n#  2.3 Git for Libertine Linux ./libertine progam\nRUN apk add git\n#  2.4 Qemu for Libertine Linux image testings\nRUN apk add qemu-system-x86_64\n#  3 Clean up apk\nRUN rm -rf /var/cache/apk/*\n#  4 Leave as needed.\nRUN mkdir /root/libertine\nVOLUME /root/libertine\nWORKDIR /root/libertine\nENTRYPOINT [\"./libertine\"]\n","injectedSmells":[],"originalDockerfileHash":"6f7febcc57e5feaf6afd3bc52ab14e50","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file is part of libertine. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.\n#   Copyright © 2018 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.\nFROM alpine:3.8\nMAINTAINER Raphael Cohn <raphael.cohn@stormmq.com>\n#   1 Baseline environment\n#   1.1 Arguments\n#   rustup-init version: rustup-init 1.14.0 (1e51b07cc 2018-10-04)\nARG rustToolchainVersion=2018-10-30\nARG glibcTag=glibc-2.28\nARG linuxHeadersVersion=4.4.6-r2\n#   1.2 User settings\nUSER 0:0\nENV HOME=\"/root\"\nWORKDIR \"$HOME\"\n#   1.3 Ensure PATH is consistent and contains /usr/local/sbin\nRUN /bin/mkdir -m 0755 -p /usr/local/sbin\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   1.4 Bring apk package manager up-to-date with known repositories\nRUN apk update\nRUN apk upgrade\n#   2 Development environment for Libertine Linux\n#   2.1 Essential C compiler\nRUN apk add binutils fortify-headers g++ gcc gmp-dev libc-dev mpc1-dev mpfr-dev\n#   2.2 Boostrap rustc and cargo; Rust is needed to bootstrap Rust\n#   2.2.1 Create a glibc dynamic library (this will be heavily polluted by the host environment)\nENV glibcInstallPath=\"/usr/glibc-compat\"\n#   2.2.1.1 Download\nRUN apk add git\nRUN git clone --depth 1 --single-branch --branch \"$glibcTag\" git://sourceware.org/git/glibc.git\nRUN apk del git\n#   2.2.1.2 Add build dependencies\nRUN apk add alpine-sdk bison gawk linux-headers\nRUN mkdir /root/linux-headers\nRUN apk fetch --output /root/linux-headers linux-headers\nWORKDIR /root/linux-headers\nRUN tar --extract --file linux-headers-\"${linuxHeadersVersion}\".apk\n#   2.2.1.3 Compile\nWORKDIR /root/glibc\nRUN mkdir build\nWORKDIR /root/glibc/build\n#   Yes, it really is called `configparms`.\nRUN echo \"slibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"rtlibdir=${glibcInstallPath}/lib\" >> configparms\nRUN echo \"sbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo \"rootsbindir=${glibcInstallPath}/bin\" >> configparms\nRUN echo 'build-programs=yes' >> configparms\nRUN ../configure --enable-static-pie --host=\"x86_64-alpine-linux-musl\" --disable-werror --enable-kernel=3.2 --with-headers=/root/linux-headers/usr/include --prefix \"$glibcInstallPath\"\nRUN make\n#   2.2.1.4 Install\nRUN make install\nRUN mkdir -p /usr/glibc-compat/etc\nRUN printf '%s/lib\\n/usr/local/lib\\n/usr/lib\\n/lib\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/ld.so.conf\nRUN printf 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4\\n' \"${glibcInstallPath}\" > /usr/glibc-compat/etc/nsswitch.configure\nRUN mkdir /lib64\nRUN ln -s \"${glibcInstallPath}\"/lib/ld-linux-x86-64.so.2 /lib64/ld-linux-x86-64.so.2\nRUN mkdir -p \"${glibcInstallPath}\"/lib/locale\n#   To use this particular library with gcc, say, if necesary: gcc -L \"${glibcInstallPath}/lib\" -I \"${glibcInstallPath}/include\" -Wl,--rpath=\"${glibcInstallPath}/lib\" -Wl,--dynamic-linker=\"${glibcInstallPath}/lib/ld-linux-x86-64.so.2\"\n#   2.2.1.5 Remove build dependencies\nRUN rm -rf /root/glibc\nRUN apk del alpine-sdk bison gawk linux-headers\n#   2.2.2 Configure glibc binaries\nRUN \"${glibcInstallPath}\"/bin/localedef -i en_US -f UTF-8 en_US.UTF-8\nRUN \"${glibcInstallPath}\"/bin/ldconfig\nENV PATH=\"${glibcInstallPath}/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   2.2.3 Install, patch and run rustup\nRUN apk add patchelf\nWORKDIR /root\nCOPY root/rustup-init rustup-init\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/lib:/lib rustup-init\nRUN ./rustup-init --verbose -y --no-modify-path --default-toolchain nightly-\"${rustToolchainVersion}\" --default-host x86_64-unknown-linux-gnu\nRUN rm rustup-init\n#   2.2.4 Patch Rust binaries to use a RPATH which locates glibc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-clippy\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/cargo-fmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rls\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-gdb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rust-lldb\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustdoc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustfmt\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.cargo/bin/rustup\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/cargo\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustc\nRUN patchelf --set-rpath \"${glibcInstallPath}\"/lib:/usr/local/lib:/usr/lib:/lib /root/.rustup/toolchains/nightly-\"${rustToolchainVersion}\"-x86_64-unknown-linux-gnu/bin/rustdoc\nRUN apk del patchelf\n#   2.2.5 Integrate Rust binaries.\nENV PATH=\"/root/.cargo/bin:$PATH\"\nRUN rustup target add x86_64-unknown-linux-musl\nRUN rustup update\nRUN rustc -Vv\n#   2.3 Git for Libertine Linux ./libertine progam\nRUN apk add git\n#   2.4 Qemu for Libertine Linux image testings\nRUN apk add qemu-system-x86_64\n#   3 Clean up apk\nRUN rm -rf /var/cache/apk/*\n#   4 Leave as needed.\nRUN mkdir /root/libertine\nVOLUME /root/libertine\nWORKDIR /root/libertine\nENTRYPOINT [\"./libertine\"]\n","originalDockerfileUglifiedHash":"59a224998188164e6631310b59aa85d9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3bb1f94e579d2763db6cf7ba5c0e6862b29c1dc9.dockerfile"}