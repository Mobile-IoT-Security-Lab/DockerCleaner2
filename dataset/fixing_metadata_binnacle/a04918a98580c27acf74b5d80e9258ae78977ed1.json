{"seed":1860735716,"processedDockerfileHash":"513c19d46f7fe991a6d7ea6c9cc42e18","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Build Nexus/LISP docker image based on a Debian Linux kernel. This\n#   Dockerfile is for the Tritium release of the TAO. The docker image name\n#   should be called \"tritium\". To build, use the \"docker build\" command in\n#   the LLL-TAO git repo directory:\n#\n#       cd LLL-TAO\n#       docker build -t tritium .\n#\n#   If you don't have docker on your MacOS system, download it at:\n#\n#       https://download.docker.com/mac/stable/Docker.dmg\n#\n#   Once you install it you can run docker commands in a Terminal window.\n#\n#   For instructions on how to use this Dockerfile, see ./docs/how-to-docker.md.\n#\n#\n#   We prefer Debian as a base OS.\n#\nFROM debian:latest\n#\n#   Get latest lispers.net release from Dropbox.\n#\nENV LISP_URL=\"https://www.dropbox.com/s/e87heamhl9t5asz/lisp-nexus.tgz\"\n#\n#   Install tools we need for a networking geek.\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc=4:12.2.0-3ubuntu1 libc-dev python python-dev libffi-dev=3.4.4-1 openssl=3.0.8-1ubuntu1 libpcap-dev=1.10.3-1 curl=7.88.1-7ubuntu1 wget=1.21.3-1ubuntu1 iptables=1.8.7-1ubuntu7 iproute2=6.1.0-1ubuntu2 tcpdump=4.99.3-1ubuntu1 tcsh=6.24.07-1 sudo=1.9.13p1-1ubuntu2 traceroute=1:2.1.1-1 iputils-ping=3:20221126-1 net-tools=2.10-0.1ubuntu3 procps=2:4.0.3-1ubuntu1 emacs=1:28.2+1-13ubuntu3 jq=1.6-2.1ubuntu3 -yq\n#\n#   Install Nexus dependencies.\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.9ubuntu3 libdb++-dev=1:5.3.21~exp1ubuntu4 libssl1.0-dev -yq\n#\n#   Install LISP release in /lispers.net directory.\n#\nRUN mkdir /lispers.net ; cd /lispers.net ; curl --insecure -L $LISP_URL | gzip -dc | tar -xf -\n#\n#   Install python modules the lispers.net directory depends on.\n#\nRUN python /lispers.net/get-pip.py\nRUN pip install -r /lispers.net/pip-requirements.txt\n#\n#   Put user in the /lispers.net directory when you attach to container.\n#\nEXPOSE 8080/tcp\nWORKDIR /lispers.net\n#\n#   Put Nexus source-tree in docker image and build it..\n#\nRUN mkdir /nexus\nRUN mkdir /nexus/build\nCOPY ./makefile.cli /nexus\nCOPY ./src /nexus/src/\nRUN cd /nexus ; make -f makefile.cli clean\nRUN cd /nexus ; make -j 8 -f makefile.cli STATIC=1\n#\n#   Copy Nexus startup files.\n#\n#  COPY config/nexus.conf /root/.Nexus/nexus.conf\nCOPY config/nexus.conf /root/.TAO/nexus.conf\nCOPY config/run-nexus /nexus/run-nexus\nCOPY config/curl-nexus /nexus/curl-nexus\n#\n#   Copy LISP startup config.\n#\nCOPY lisp/RL /lispers.net/RL\nCOPY lisp/RL-seed /lispers.net/RL-seed\nCOPY lisp/lisp.config.xtr /lispers.net/lisp.config.xtr\nCOPY lisp/lisp-join.py /lispers.net/lisp-join.py\nCOPY lisp/make-crypto-eid.py /lispers.net/make-crypto-eid.py\n#\n#   Add some useful tcsh alias commands.\n#\nCOPY config/.aliases /root/.aliases\nCOPY config/.cshrc /root/.cshrc\n#\n#   Startup lispers.net and nexus. Output some useful data and drop into tcsh.\n#\nENV RUN_LISP=\"/lispers.net/RL\"\n#  ENV RUN_LISP    /lispers.net/RL-seed\nENV RUN_NEXUS=\"/nexus/run-nexus\"\nENV RUN_GETINFO=\"/nexus/nexus -test getinfo\"\nENV RUN_PSLISP=\"/lispers.net/pslisp\"\nCMD echo \"Starting LISP ...\" ; $RUN_LISP ; echo \"Network coming up ...\" ; sleep 2 ; echo \"Starting Nexus ...\" ; $RUN_NEXUS ; sleep 1 ; $RUN_PSLISP ; tcsh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Build Nexus/LISP docker image based on a Debian Linux kernel. This\n#  Dockerfile is for the Tritium release of the TAO. The docker image name\n#  should be called \"tritium\". To build, use the \"docker build\" command in\n#  the LLL-TAO git repo directory:\n#\n#      cd LLL-TAO\n#      docker build -t tritium .\n#\n#  If you don't have docker on your MacOS system, download it at:\n#\n#      https://download.docker.com/mac/stable/Docker.dmg\n#\n#  Once you install it you can run docker commands in a Terminal window.\n#\n#  For instructions on how to use this Dockerfile, see ./docs/how-to-docker.md.\n#\n#\n#  We prefer Debian as a base OS.\n#\nFROM debian:latest\n#\n#  Get latest lispers.net release from Dropbox.\n#\nENV LISP_URL=\"https://www.dropbox.com/s/e87heamhl9t5asz/lisp-nexus.tgz\"\n#\n#  Install tools we need for a networking geek.\n#\nRUN apt-get update \\\n && apt-get install gcc libc-dev python python-dev libffi-dev openssl libpcap-dev curl wget iptables iproute2 tcpdump tcsh sudo traceroute iputils-ping net-tools procps emacs jq -yq\n#\n#  Install Nexus dependencies.\n#\nRUN apt-get update \\\n && apt-get install build-essential libdb++-dev libssl1.0-dev -yq\n#\n#  Install LISP release in /lispers.net directory.\n#\nRUN mkdir /lispers.net ; cd /lispers.net ; curl --insecure -L $LISP_URL | gzip -dc | tar -xf -\n#\n#  Install python modules the lispers.net directory depends on.\n#\nRUN python /lispers.net/get-pip.py\nRUN pip install -r /lispers.net/pip-requirements.txt\n#\n#  Put user in the /lispers.net directory when you attach to container.\n#\nEXPOSE 8080/tcp\nWORKDIR /lispers.net\n#\n#  Put Nexus source-tree in docker image and build it..\n#\nRUN mkdir /nexus\nRUN mkdir /nexus/build\nCOPY ./makefile.cli /nexus\nCOPY ./src /nexus/src/\nRUN cd /nexus ; make -f makefile.cli clean\nRUN cd /nexus ; make -j 8 -f makefile.cli STATIC=1\n#\n#  Copy Nexus startup files.\n#\n# COPY config/nexus.conf /root/.Nexus/nexus.conf\nCOPY config/nexus.conf /root/.TAO/nexus.conf\nCOPY config/run-nexus /nexus/run-nexus\nCOPY config/curl-nexus /nexus/curl-nexus\n#\n#  Copy LISP startup config.\n#\nCOPY lisp/RL /lispers.net/RL\nCOPY lisp/RL-seed /lispers.net/RL-seed\nCOPY lisp/lisp.config.xtr /lispers.net/lisp.config.xtr\nCOPY lisp/lisp-join.py /lispers.net/lisp-join.py\nCOPY lisp/make-crypto-eid.py /lispers.net/make-crypto-eid.py\n#\n#  Add some useful tcsh alias commands.\n#\nCOPY config/.aliases /root/.aliases\nCOPY config/.cshrc /root/.cshrc\n#\n#  Startup lispers.net and nexus. Output some useful data and drop into tcsh.\n#\nENV RUN_LISP=\"/lispers.net/RL\"\n# ENV RUN_LISP    /lispers.net/RL-seed\nENV RUN_NEXUS=\"/nexus/run-nexus\"\nENV RUN_GETINFO=\"/nexus/nexus -test getinfo\"\nENV RUN_PSLISP=\"/lispers.net/pslisp\"\nCMD echo \"Starting LISP ...\" ; $RUN_LISP ; echo \"Network coming up ...\" ; sleep 2 ; echo \"Starting Nexus ...\" ; $RUN_NEXUS ; sleep 1 ; $RUN_PSLISP ; tcsh\n","injectedSmells":[],"originalDockerfileHash":"b8da9c74e4c6f6fb62fd17d16ee892e4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Build Nexus/LISP docker image based on a Debian Linux kernel. This\n#   Dockerfile is for the Tritium release of the TAO. The docker image name\n#   should be called \"tritium\". To build, use the \"docker build\" command in\n#   the LLL-TAO git repo directory:\n#\n#       cd LLL-TAO\n#       docker build -t tritium .\n#\n#   If you don't have docker on your MacOS system, download it at:\n#\n#       https://download.docker.com/mac/stable/Docker.dmg\n#\n#   Once you install it you can run docker commands in a Terminal window.\n#\n#   For instructions on how to use this Dockerfile, see ./docs/how-to-docker.md.\n#\n#\n#   We prefer Debian as a base OS.\n#\nFROM debian:latest\n#\n#   Get latest lispers.net release from Dropbox.\n#\nENV LISP_URL=\"https://www.dropbox.com/s/e87heamhl9t5asz/lisp-nexus.tgz\"\n#\n#   Install tools we need for a networking geek.\n#\nRUN apt-get update \\\n && apt-get install gcc libc-dev python python-dev libffi-dev openssl libpcap-dev curl wget iptables iproute2 tcpdump tcsh sudo traceroute iputils-ping net-tools procps emacs jq -yq\n#\n#   Install Nexus dependencies.\n#\nRUN apt-get update \\\n && apt-get install build-essential libdb++-dev libssl1.0-dev -yq\n#\n#   Install LISP release in /lispers.net directory.\n#\nRUN mkdir /lispers.net ; cd /lispers.net ; curl --insecure -L $LISP_URL | gzip -dc | tar -xf -\n#\n#   Install python modules the lispers.net directory depends on.\n#\nRUN python /lispers.net/get-pip.py\nRUN pip install -r /lispers.net/pip-requirements.txt\n#\n#   Put user in the /lispers.net directory when you attach to container.\n#\nEXPOSE 8080/tcp\nWORKDIR /lispers.net\n#\n#   Put Nexus source-tree in docker image and build it..\n#\nRUN mkdir /nexus\nRUN mkdir /nexus/build\nCOPY ./makefile.cli /nexus\nCOPY ./src /nexus/src/\nRUN cd /nexus ; make -f makefile.cli clean\nRUN cd /nexus ; make -j 8 -f makefile.cli STATIC=1\n#\n#   Copy Nexus startup files.\n#\n#  COPY config/nexus.conf /root/.Nexus/nexus.conf\nCOPY config/nexus.conf /root/.TAO/nexus.conf\nCOPY config/run-nexus /nexus/run-nexus\nCOPY config/curl-nexus /nexus/curl-nexus\n#\n#   Copy LISP startup config.\n#\nCOPY lisp/RL /lispers.net/RL\nCOPY lisp/RL-seed /lispers.net/RL-seed\nCOPY lisp/lisp.config.xtr /lispers.net/lisp.config.xtr\nCOPY lisp/lisp-join.py /lispers.net/lisp-join.py\nCOPY lisp/make-crypto-eid.py /lispers.net/make-crypto-eid.py\n#\n#   Add some useful tcsh alias commands.\n#\nCOPY config/.aliases /root/.aliases\nCOPY config/.cshrc /root/.cshrc\n#\n#   Startup lispers.net and nexus. Output some useful data and drop into tcsh.\n#\nENV RUN_LISP=\"/lispers.net/RL\"\n#  ENV RUN_LISP    /lispers.net/RL-seed\nENV RUN_NEXUS=\"/nexus/run-nexus\"\nENV RUN_GETINFO=\"/nexus/nexus -test getinfo\"\nENV RUN_PSLISP=\"/lispers.net/pslisp\"\nCMD echo \"Starting LISP ...\" ; $RUN_LISP ; echo \"Network coming up ...\" ; sleep 2 ; echo \"Starting Nexus ...\" ; $RUN_NEXUS ; sleep 1 ; $RUN_PSLISP ; tcsh\n","originalDockerfileUglifiedHash":"1213520141064ae8d722c567b4975566","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a04918a98580c27acf74b5d80e9258ae78977ed1.dockerfile"}