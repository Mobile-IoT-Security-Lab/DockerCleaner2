{"seed":37941944,"processedDockerfileHash":"ccd700908c3db369ffc4c94a571cc1fe","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim:set ft=dockerfile:\nFROM debian:%%SUITE%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql \\\n && useradd -r -g mysql mysql\n#   https://bugs.debian.org/830696 (apt uses gpgv by default in newer releases, rather than gpg)\nRUN set -ex ; apt-get update ; if ! which gpg ; then apt-get install --no-install-recommends gnupg -y ; fi ; if ! gpg --version | grep -q '^gpg (GnuPG) 1\\.' ; then apt-get install --no-install-recommends dirmngr -y ; fi ; rm -rf /var/lib/apt/lists/*\n#   add gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -ex ; fetchDeps=' ca-certificates wget ' ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; apt-get purge -y --auto-remove $fetchDeps\nRUN mkdir /docker-entrypoint-initdb.d\n#   install \"apt-transport-https\" for Percona's repo (switched to https-only)\n#   install \"pwgen\" for randomizing passwords\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates pwgen -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEYS=\"430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A  4D1BB29D63D98E422B2113B19334A25F8507EFA5\"\nRUN set -ex ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" ; apt-key list\nRUN echo 'deb https://repo.percona.com/apt %%SUITE%% main' > /etc/apt/sources.list.d/percona.list\n#   bashbrew-architectures:%%ARCHES%%\nENV PERCONA_MAJOR=\"%%PERCONA_MAJOR%%\"\nENV PERCONA_VERSION=\"%%PERCONA_VERSION%%\"\n#   the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n#   also, we set debconf keys to make APT a little quieter\nRUN set -ex ; { for key in percona-server-server/root_password percona-server-server/root_password_again \"percona-server-server-$PERCONA_MAJOR/root-pass\" \"percona-server-server-$PERCONA_MAJOR/re-root-pass\"; do echo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused' ; done ; } | debconf-set-selections ; apt-get update ; apt-get install --no-install-recommends percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION -y ; rm -rf /var/lib/apt/lists/* ; sed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf ; rm -rf /var/lib/mysql ; mkdir -p /var/lib/mysql /var/run/mysqld ; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld ; chmod 777 /var/run/mysqld ; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log)' | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' ; echo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf\nVOLUME [\"/var/lib/mysql\", \"/var/log/mysql\"]\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306/tcp\nCMD [\"mysqld\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim:set ft=dockerfile:\nFROM debian:%%SUITE%%\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql \\\n && useradd -r -g mysql mysql\n#  https://bugs.debian.org/830696 (apt uses gpgv by default in newer releases, rather than gpg)\nRUN set -ex ; apt-get update ; if ! which gpg ; then apt-get install --no-install-recommends gnupg -y ; fi ; if ! gpg --version | grep -q '^gpg (GnuPG) 1\\.' ; then apt-get install --no-install-recommends dirmngr -y ; fi ; rm -rf /var/lib/apt/lists/*\n#  add gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -ex ; fetchDeps=' ca-certificates wget ' ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; apt-get purge -y --auto-remove $fetchDeps\nRUN mkdir /docker-entrypoint-initdb.d\n#  install \"apt-transport-https\" for Percona's repo (switched to https-only)\n#  install \"pwgen\" for randomizing passwords\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates pwgen -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEYS=\"430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A  4D1BB29D63D98E422B2113B19334A25F8507EFA5\"\nRUN set -ex ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" ; apt-key list\nRUN echo 'deb https://repo.percona.com/apt %%SUITE%% main' > /etc/apt/sources.list.d/percona.list\n#  bashbrew-architectures:%%ARCHES%%\nENV PERCONA_MAJOR=\"%%PERCONA_MAJOR%%\"\nENV PERCONA_VERSION=\"%%PERCONA_VERSION%%\"\n#  the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n#  also, we set debconf keys to make APT a little quieter\nRUN set -ex ; { for key in percona-server-server/root_password percona-server-server/root_password_again \"percona-server-server-$PERCONA_MAJOR/root-pass\" \"percona-server-server-$PERCONA_MAJOR/re-root-pass\"; do echo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused' ; done ; } | debconf-set-selections ; apt-get update ; apt-get install percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION -y ; rm -rf /var/lib/apt/lists/* ; sed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf ; rm -rf /var/lib/mysql ; mkdir -p /var/lib/mysql /var/run/mysqld ; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld ; chmod 777 /var/run/mysqld ; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log)' | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' ; echo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf\nVOLUME [\"/var/lib/mysql\", \"/var/log/mysql\"]\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306/tcp\nCMD [\"mysqld\"]\n","injectedSmells":[],"originalDockerfileHash":"4f91b6d80295929f4abf09e20242f2b8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim:set ft=dockerfile:\nFROM debian:%%SUITE%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql \\\n && useradd -r -g mysql mysql\n#   https://bugs.debian.org/830696 (apt uses gpgv by default in newer releases, rather than gpg)\nRUN set -ex ; apt-get update ; if ! which gpg ; then apt-get install --no-install-recommends gnupg -y ; fi ; if ! gpg --version | grep -q '^gpg (GnuPG) 1\\.' ; then apt-get install --no-install-recommends dirmngr -y ; fi ; rm -rf /var/lib/apt/lists/*\n#   add gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -ex ; fetchDeps=' ca-certificates wget ' ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; chmod +x /usr/local/bin/gosu ; gosu nobody true ; apt-get purge -y --auto-remove $fetchDeps\nRUN mkdir /docker-entrypoint-initdb.d\n#   install \"apt-transport-https\" for Percona's repo (switched to https-only)\n#   install \"pwgen\" for randomizing passwords\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates pwgen -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEYS=\"430BDF5C56E7C94E848EE60C1C4CBDCDCD2EFD2A  4D1BB29D63D98E422B2113B19334A25F8507EFA5\"\nRUN set -ex ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/percona.gpg; command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; rm -r \"$GNUPGHOME\" ; apt-key list\nRUN echo 'deb https://repo.percona.com/apt %%SUITE%% main' > /etc/apt/sources.list.d/percona.list\n#   bashbrew-architectures:%%ARCHES%%\nENV PERCONA_MAJOR=\"%%PERCONA_MAJOR%%\"\nENV PERCONA_VERSION=\"%%PERCONA_VERSION%%\"\n#   the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n#   also, we set debconf keys to make APT a little quieter\nRUN set -ex ; { for key in percona-server-server/root_password percona-server-server/root_password_again \"percona-server-server-$PERCONA_MAJOR/root-pass\" \"percona-server-server-$PERCONA_MAJOR/re-root-pass\"; do echo \"percona-server-server-$PERCONA_MAJOR\" \"$key\" password 'unused' ; done ; } | debconf-set-selections ; apt-get update ; apt-get install percona-server-server-$PERCONA_MAJOR=$PERCONA_VERSION -y ; rm -rf /var/lib/apt/lists/* ; sed -ri 's/^user\\s/#&/' /etc/mysql/my.cnf ; rm -rf /var/lib/mysql ; mkdir -p /var/lib/mysql /var/run/mysqld ; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld ; chmod 777 /var/run/mysqld ; find /etc/mysql/ -name '*.cnf' -print0 | xargs -0 grep -lZE '^(bind-address|log)' | xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' ; echo '[mysqld]\\nskip-host-cache\\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf\nVOLUME [\"/var/lib/mysql\", \"/var/log/mysql\"]\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306/tcp\nCMD [\"mysqld\"]\n","originalDockerfileUglifiedHash":"99cb79237ea5c867e986b87904c3d852","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e895200f2b9f9fc48e0d02be4c15ef81ff2b6b17.dockerfile"}