{"seed":3659050934,"processedDockerfileHash":"43af218db5459c9fd4c1202b71dcb2f2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #########################\n#   Last updated at 2017-11-24 15:06:50.175919 -0800 PST\nFROM ubuntu:17.10\n#  #########################\n#  #########################\n#   Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n#  #########################\n#  #########################\n#   Update OS\n#   Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends build-essential gcc apt-utils software-properties-common curl python git -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n#  #########################\n#  #########################\n#   install Go\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/gopath\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:${PATH}\"\nENV GO_VERSION=\"1.9.2\"\nENV GO_DOWNLOAD_URL=\"https://storage.googleapis.com/golang\"\nRUN rm -rf ${GOROOT} \\\n && curl -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz \\\n && mkdir -p ${GOPATH}/src ${GOPATH}/bin \\\n && go version\n#  #########################\n#  #########################\n#   Clone source code, static assets\n#   start at repository root\nRUN mkdir -p ${GOPATH}/src/github.com/gyuho/dplearn\nWORKDIR ${GOPATH}/src/github.com/gyuho/dplearn\nCOPY ./cmd ${GOPATH}/src/github.com/gyuho/dplearn/cmd\nCOPY ./backend ${GOPATH}/src/github.com/gyuho/dplearn/backend\nCOPY ./pkg ${GOPATH}/src/github.com/gyuho/dplearn/pkg\nCOPY ./vendor ${GOPATH}/src/github.com/gyuho/dplearn/vendor\nCOPY ./Gopkg.lock ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.lock\nCOPY ./Gopkg.toml ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.toml\nCOPY ./frontend ${GOPATH}/src/github.com/gyuho/dplearn/frontend\nCOPY ./angular-cli.json ${GOPATH}/src/github.com/gyuho/dplearn/angular-cli.json\nCOPY ./package.json ${GOPATH}/src/github.com/gyuho/dplearn/package.json\nCOPY ./proxy.config.json ${GOPATH}/src/github.com/gyuho/dplearn/proxy.config.json\nCOPY ./yarn.lock ${GOPATH}/src/github.com/gyuho/dplearn/yarn.lock\nCOPY ./scripts/docker/run ${GOPATH}/src/github.com/gyuho/dplearn/scripts/docker/run\nCOPY ./scripts/tests ${GOPATH}/src/github.com/gyuho/dplearn/scripts/tests\nRUN go install -v ./cmd/backend-web-server \\\n && go install -v ./cmd/gen-frontend-dep\n#  #########################\n#  #########################\n#   install Angular, NodeJS for frontend\n#   'node' needs to be in $PATH for 'yarn start' command\nENV NVM_DIR=\"/usr/local/nvm\"\nRUN pushd ${GOPATH}/src/github.com/gyuho/dplearn \\\n && curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | /bin/bash \\\n && echo \"Running nvm scripts...\" \\\n && source $NVM_DIR/nvm.sh \\\n && nvm ls-remote \\\n && nvm install v9.3.0 \\\n && curl https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends yarn -y \\\n && echo \"Updating frontend dependencies...\" \\\n && rm -rf ./node_modules \\\n && yarn install \\\n && npm rebuild node-sass --force \\\n && npm install \\\n && nvm alias default 9.3.0 \\\n && nvm alias default node \\\n && which node \\\n && node -v \\\n && cp /usr/local/nvm/versions/node/v9.3.0/bin/node /usr/bin/node \\\n && popd\n#  #########################\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #########################\n#  Last updated at 2017-11-24 15:06:50.175919 -0800 PST\nFROM ubuntu:17.10\n# #########################\n# #########################\n#  Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n# #########################\n# #########################\n#  Update OS\n#  Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install build-essential gcc apt-utils software-properties-common curl python git -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n# #########################\n# #########################\n#  install Go\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/gopath\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:${PATH}\"\nENV GO_VERSION=\"1.9.2\"\nENV GO_DOWNLOAD_URL=\"https://storage.googleapis.com/golang\"\nRUN rm -rf ${GOROOT} \\\n && curl -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz \\\n && mkdir -p ${GOPATH}/src ${GOPATH}/bin \\\n && go version\n# #########################\n# #########################\n#  Clone source code, static assets\n#  start at repository root\nRUN mkdir -p ${GOPATH}/src/github.com/gyuho/dplearn\nWORKDIR ${GOPATH}/src/github.com/gyuho/dplearn\nADD ./cmd ${GOPATH}/src/github.com/gyuho/dplearn/cmd\nADD ./backend ${GOPATH}/src/github.com/gyuho/dplearn/backend\nADD ./pkg ${GOPATH}/src/github.com/gyuho/dplearn/pkg\nADD ./vendor ${GOPATH}/src/github.com/gyuho/dplearn/vendor\nADD ./Gopkg.lock ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.lock\nADD ./Gopkg.toml ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.toml\nADD ./frontend ${GOPATH}/src/github.com/gyuho/dplearn/frontend\nADD ./angular-cli.json ${GOPATH}/src/github.com/gyuho/dplearn/angular-cli.json\nADD ./package.json ${GOPATH}/src/github.com/gyuho/dplearn/package.json\nADD ./proxy.config.json ${GOPATH}/src/github.com/gyuho/dplearn/proxy.config.json\nADD ./yarn.lock ${GOPATH}/src/github.com/gyuho/dplearn/yarn.lock\nADD ./scripts/docker/run ${GOPATH}/src/github.com/gyuho/dplearn/scripts/docker/run\nADD ./scripts/tests ${GOPATH}/src/github.com/gyuho/dplearn/scripts/tests\nRUN go install -v ./cmd/backend-web-server \\\n && go install -v ./cmd/gen-frontend-dep\n# #########################\n# #########################\n#  install Angular, NodeJS for frontend\n#  'node' needs to be in $PATH for 'yarn start' command\nENV NVM_DIR=\"/usr/local/nvm\"\nRUN pushd ${GOPATH}/src/github.com/gyuho/dplearn \\\n && curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | /bin/bash \\\n && echo \"Running nvm scripts...\" \\\n && source $NVM_DIR/nvm.sh \\\n && nvm ls-remote \\\n && nvm install v9.3.0 \\\n && curl https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -y \\\n && apt-get install yarn -y \\\n && echo \"Updating frontend dependencies...\" \\\n && rm -rf ./node_modules \\\n && yarn install \\\n && npm rebuild node-sass --force \\\n && npm install \\\n && nvm alias default 9.3.0 \\\n && nvm alias default node \\\n && which node \\\n && node -v \\\n && cp /usr/local/nvm/versions/node/v9.3.0/bin/node /usr/bin/node \\\n && popd\n# #########################\n","injectedSmells":[],"originalDockerfileHash":"6ff6c262c36520686d40e5f5da18afb6","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #########################\n#   Last updated at 2017-11-24 15:06:50.175919 -0800 PST\nFROM ubuntu:17.10\n#  #########################\n#  #########################\n#   Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n#  #########################\n#  #########################\n#   Update OS\n#   Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install build-essential gcc apt-utils software-properties-common curl python git -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n#  #########################\n#  #########################\n#   install Go\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/gopath\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:${PATH}\"\nENV GO_VERSION=\"1.9.2\"\nENV GO_DOWNLOAD_URL=\"https://storage.googleapis.com/golang\"\nRUN rm -rf ${GOROOT} \\\n && curl -s ${GO_DOWNLOAD_URL}/go${GO_VERSION}.linux-amd64.tar.gz | tar -v -C /usr/local/ -xz \\\n && mkdir -p ${GOPATH}/src ${GOPATH}/bin \\\n && go version\n#  #########################\n#  #########################\n#   Clone source code, static assets\n#   start at repository root\nRUN mkdir -p ${GOPATH}/src/github.com/gyuho/dplearn\nWORKDIR ${GOPATH}/src/github.com/gyuho/dplearn\nADD ./cmd ${GOPATH}/src/github.com/gyuho/dplearn/cmd\nADD ./backend ${GOPATH}/src/github.com/gyuho/dplearn/backend\nADD ./pkg ${GOPATH}/src/github.com/gyuho/dplearn/pkg\nADD ./vendor ${GOPATH}/src/github.com/gyuho/dplearn/vendor\nADD ./Gopkg.lock ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.lock\nADD ./Gopkg.toml ${GOPATH}/src/github.com/gyuho/dplearn/Gopkg.toml\nADD ./frontend ${GOPATH}/src/github.com/gyuho/dplearn/frontend\nADD ./angular-cli.json ${GOPATH}/src/github.com/gyuho/dplearn/angular-cli.json\nADD ./package.json ${GOPATH}/src/github.com/gyuho/dplearn/package.json\nADD ./proxy.config.json ${GOPATH}/src/github.com/gyuho/dplearn/proxy.config.json\nADD ./yarn.lock ${GOPATH}/src/github.com/gyuho/dplearn/yarn.lock\nADD ./scripts/docker/run ${GOPATH}/src/github.com/gyuho/dplearn/scripts/docker/run\nADD ./scripts/tests ${GOPATH}/src/github.com/gyuho/dplearn/scripts/tests\nRUN go install -v ./cmd/backend-web-server \\\n && go install -v ./cmd/gen-frontend-dep\n#  #########################\n#  #########################\n#   install Angular, NodeJS for frontend\n#   'node' needs to be in $PATH for 'yarn start' command\nENV NVM_DIR=\"/usr/local/nvm\"\nRUN pushd ${GOPATH}/src/github.com/gyuho/dplearn \\\n && curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | /bin/bash \\\n && echo \"Running nvm scripts...\" \\\n && source $NVM_DIR/nvm.sh \\\n && nvm ls-remote \\\n && nvm install v9.3.0 \\\n && curl https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -y \\\n && apt-get install yarn -y \\\n && echo \"Updating frontend dependencies...\" \\\n && rm -rf ./node_modules \\\n && yarn install \\\n && npm rebuild node-sass --force \\\n && npm install \\\n && nvm alias default 9.3.0 \\\n && nvm alias default node \\\n && which node \\\n && node -v \\\n && cp /usr/local/nvm/versions/node/v9.3.0/bin/node /usr/bin/node \\\n && popd\n#  #########################\n","originalDockerfileUglifiedHash":"d523e206c6e9226a3606b8a260e4fd67","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9562c4261f8da23b6f683d68dfc7ab03a4a745d1.dockerfile"}