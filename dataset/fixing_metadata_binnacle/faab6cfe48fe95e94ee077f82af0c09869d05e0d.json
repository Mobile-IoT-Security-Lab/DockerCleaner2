{"seed":2740565302,"processedDockerfileHash":"e8a641f2121f4ec0688c84110b43b442","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   Defining environment\nARG APP_ENV=dev\nARG BUILD_TYPE=Debug\nFROM scratch AS spackbc\n#  -----------------------------------\n#   Base image\n#  -----------------------------------\nFROM registry.gitlab.com/salus/tensorflow-salus AS base-prod\n#   make gcc-7 and ld.gold the default\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 20 \\\n && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 \\\n && update-alternatives --set cc /usr/bin/gcc \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30 \\\n && update-alternatives --set c++ /usr/bin/g++ \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 20 \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.bfd 10\nENV SALUS_DEPS_DIR=\"/opt/salus-deps\"\n#  -----------------------------------\n#   Additional build server for CLion in base\n#  -----------------------------------\nFROM base-prod AS base-dev\n#   Install ssh server and other development tools\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install --no-install-recommends openssh-server=1:9.0p1-1ubuntu8 -y\nRUN spack install gdb \\\n && spack view -d false -v add $SPACK_PACKAGES gdb \\\n && spack-pin gdb\n#   Config the sshd server, the root password is 'root'.\n#   For development use ONLY, NEVER expose this to the Internet!!!\nRUN mkdir /var/run/sshd \\\n && echo 'root:root' | chpasswd \\\n && sed -ri 's/^#?PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && mkdir /root/.ssh\n#  -----------------------------------\n#   Dependencies\n#  -----------------------------------\nFROM base-${APP_ENV} AS deps\nRUN spack install boost@1.66.0\nRUN spack install cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nRUN spack view -v -d true hard \"$SALUS_DEPS_DIR\" boost@1.66.0 cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nENV CMAKE_PREFIX_PATH=\"$SALUS_DEPS_DIR\"\n#  -----------------------------------\n#   Add in source code\n#  -----------------------------------\nFROM deps AS sources\nCOPY . salus\n#  -----------------------------------\n#   Development image\n#  -----------------------------------\nFROM sources AS dev\n#   Make sure environment variables are set for ssh sessions\nRUN /bin/echo -e \"PATH=${PATH}\\nSALUS_WORK_ROOT=${SALUS_WORK_ROOT}\\nSPACK_HOME=${SPACK_HOME}\\nSPACK_PACKAGES=${SPACK_PACKAGES}\\nCUDA_HOME=${CUDA_HOME}\\nTensorFlow_DIR=${TensorFlow_DIR}\\nCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}\\n\" >> /etc/environment\nEXPOSE 22/tcp\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n#  -----------------------------------\n#   Production image\n#  -----------------------------------\nFROM sources AS compile\nWORKDIR /salus/salus\nENV Salus_DIR=\"${SALUS_WORK_ROOT}/salus\"\nRUN cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=/usr/local -DSALUS_DEPS_PATH=$SALUS_DEPS_DIR\nRUN cmake --build build -- -j\nRUN cmake --build build --target install -- DESTDIR=/opt/salus\n#   build a smaller image\nFROM nvidia/cuda:9.1-cudnn7-runtime-ubuntu16.04 AS prod\n#   gcc7 runtime library\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install --no-install-recommends software-properties-common=0.99.35 gnupg-curl ca-certificates=20230311 apt-transport-https=2.6.0 -y \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends g++-7 gcc-7 -y \\\n && apt-get purge -y software-properties-common gnupg-curl \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=deps /salus/tensorflow/bazel-bin/tensorflow/libtensorflow_kernels.so /salus/tensorflow/bazel-bin/tensorflow/\nCOPY --from=deps /opt/salus-deps/lib/*.so /usr/local/lib/\nCOPY --from=deps /opt/salus-deps/lib/*.so.* /usr/local/lib/\nCOPY --from=compile /opt/salus /\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.11\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20230311 wget=1.21.3-1ubuntu1 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   explicitly set user/group IDs\nRUN set -eux ; groupadd -r salus --gid=999 ; useradd -r -g salus --uid=999 --home-dir=/var/lib/salus --shell=/bin/bash salus ; mkdir -p /var/lib/salus ; chown -R salus:salus /var/lib/salus\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5501/tcp\nCMD [\"salus-server\"]\n#  -----------------------------------\n#   Final image as a switch\n#  -----------------------------------\nFROM ${APP_ENV} AS final\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Defining environment\nARG APP_ENV=dev\nARG BUILD_TYPE=Debug\nFROM scratch AS spackbc\n# -----------------------------------\n#  Base image\n# -----------------------------------\nFROM registry.gitlab.com/salus/tensorflow-salus AS base-prod\n#  make gcc-7 and ld.gold the default\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 20 \\\n && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 \\\n && update-alternatives --set cc /usr/bin/gcc \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30 \\\n && update-alternatives --set c++ /usr/bin/g++ \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 20 \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.bfd 10\nENV SALUS_DEPS_DIR=\"/opt/salus-deps\"\n# -----------------------------------\n#  Additional build server for CLion in base\n# -----------------------------------\nFROM base-prod AS base-dev\n#  Install ssh server and other development tools\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install openssh-server -y\nRUN spack install gdb \\\n && spack view -d false -v add $SPACK_PACKAGES gdb \\\n && spack-pin gdb\n#  Config the sshd server, the root password is 'root'.\n#  For development use ONLY, NEVER expose this to the Internet!!!\nRUN mkdir /var/run/sshd \\\n && echo 'root:root' | chpasswd \\\n && sed -ri 's/^#?PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && mkdir /root/.ssh\n# -----------------------------------\n#  Dependencies\n# -----------------------------------\nFROM base-${APP_ENV} AS deps\nRUN spack install boost@1.66.0\nRUN spack install cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nRUN spack view -v -d true hard \"$SALUS_DEPS_DIR\" boost@1.66.0 cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nENV CMAKE_PREFIX_PATH=\"$SALUS_DEPS_DIR\"\n# -----------------------------------\n#  Add in source code\n# -----------------------------------\nFROM deps AS sources\nCOPY . salus\n# -----------------------------------\n#  Development image\n# -----------------------------------\nFROM sources AS dev\n#  Make sure environment variables are set for ssh sessions\nRUN /bin/echo -e \"PATH=${PATH}\\nSALUS_WORK_ROOT=${SALUS_WORK_ROOT}\\nSPACK_HOME=${SPACK_HOME}\\nSPACK_PACKAGES=${SPACK_PACKAGES}\\nCUDA_HOME=${CUDA_HOME}\\nTensorFlow_DIR=${TensorFlow_DIR}\\nCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}\\n\" >> /etc/environment\nEXPOSE 22/tcp\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n# -----------------------------------\n#  Production image\n# -----------------------------------\nFROM sources AS compile\nWORKDIR /salus/salus\nENV Salus_DIR=\"${SALUS_WORK_ROOT}/salus\"\nRUN cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=/usr/local -DSALUS_DEPS_PATH=$SALUS_DEPS_DIR\nRUN cmake --build build -- -j\nRUN cmake --build build --target install -- DESTDIR=/opt/salus\n#  build a smaller image\nFROM nvidia/cuda:9.1-cudnn7-runtime-ubuntu16.04 AS prod\n#  gcc7 runtime library\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install --no-install-recommends software-properties-common gnupg-curl ca-certificates apt-transport-https -y \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install g++-7 gcc-7 -y \\\n && apt-get purge -y software-properties-common gnupg-curl \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=deps /salus/tensorflow/bazel-bin/tensorflow/libtensorflow_kernels.so /salus/tensorflow/bazel-bin/tensorflow/\nCOPY --from=deps /opt/salus-deps/lib/*.so /usr/local/lib/\nCOPY --from=deps /opt/salus-deps/lib/*.so.* /usr/local/lib/\nCOPY --from=compile /opt/salus /\n#  grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.11\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#  explicitly set user/group IDs\nRUN set -eux ; groupadd -r salus --gid=999 ; useradd -r -g salus --uid=999 --home-dir=/var/lib/salus --shell=/bin/bash salus ; mkdir -p /var/lib/salus ; chown -R salus:salus /var/lib/salus\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5501/tcp\nCMD [\"salus-server\"]\n# -----------------------------------\n#  Final image as a switch\n# -----------------------------------\nFROM ${APP_ENV} AS final\n","injectedSmells":[],"originalDockerfileHash":"c7791b17bc04fbf94a9a34ada359b536","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Defining environment\nARG APP_ENV=dev\nARG BUILD_TYPE=Debug\nFROM scratch AS spackbc\n#  -----------------------------------\n#   Base image\n#  -----------------------------------\nFROM registry.gitlab.com/salus/tensorflow-salus AS base-prod\n#   make gcc-7 and ld.gold the default\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 20 \\\n && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 \\\n && update-alternatives --set cc /usr/bin/gcc \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30 \\\n && update-alternatives --set c++ /usr/bin/g++ \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 20 \\\n && update-alternatives --install /usr/bin/ld ld /usr/bin/ld.bfd 10\nENV SALUS_DEPS_DIR=\"/opt/salus-deps\"\n#  -----------------------------------\n#   Additional build server for CLion in base\n#  -----------------------------------\nFROM base-prod AS base-dev\n#   Install ssh server and other development tools\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install openssh-server -y\nRUN spack install gdb \\\n && spack view -d false -v add $SPACK_PACKAGES gdb \\\n && spack-pin gdb\n#   Config the sshd server, the root password is 'root'.\n#   For development use ONLY, NEVER expose this to the Internet!!!\nRUN mkdir /var/run/sshd \\\n && echo 'root:root' | chpasswd \\\n && sed -ri 's/^#?PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && mkdir /root/.ssh\n#  -----------------------------------\n#   Dependencies\n#  -----------------------------------\nFROM base-${APP_ENV} AS deps\nRUN spack install boost@1.66.0\nRUN spack install cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nRUN spack view -v -d true hard \"$SALUS_DEPS_DIR\" boost@1.66.0 cppzmq@4.3.0 zeromq@4.2.5 nlohmann-json@3.1.2 protobuf@3.4.1 gperftools@2.7\nENV CMAKE_PREFIX_PATH=\"$SALUS_DEPS_DIR\"\n#  -----------------------------------\n#   Add in source code\n#  -----------------------------------\nFROM deps AS sources\nCOPY . salus\n#  -----------------------------------\n#   Development image\n#  -----------------------------------\nFROM sources AS dev\n#   Make sure environment variables are set for ssh sessions\nRUN /bin/echo -e \"PATH=${PATH}\\nSALUS_WORK_ROOT=${SALUS_WORK_ROOT}\\nSPACK_HOME=${SPACK_HOME}\\nSPACK_PACKAGES=${SPACK_PACKAGES}\\nCUDA_HOME=${CUDA_HOME}\\nTensorFlow_DIR=${TensorFlow_DIR}\\nCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}\\n\" >> /etc/environment\nEXPOSE 22/tcp\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n#  -----------------------------------\n#   Production image\n#  -----------------------------------\nFROM sources AS compile\nWORKDIR /salus/salus\nENV Salus_DIR=\"${SALUS_WORK_ROOT}/salus\"\nRUN cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=/usr/local -DSALUS_DEPS_PATH=$SALUS_DEPS_DIR\nRUN cmake --build build -- -j\nRUN cmake --build build --target install -- DESTDIR=/opt/salus\n#   build a smaller image\nFROM nvidia/cuda:9.1-cudnn7-runtime-ubuntu16.04 AS prod\n#   gcc7 runtime library\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && (echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ) \\\n && apt-get install --no-install-recommends software-properties-common gnupg-curl ca-certificates apt-transport-https -y \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install g++-7 gcc-7 -y \\\n && apt-get purge -y software-properties-common gnupg-curl \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=deps /salus/tensorflow/bazel-bin/tensorflow/libtensorflow_kernels.so /salus/tensorflow/bazel-bin/tensorflow/\nCOPY --from=deps /opt/salus-deps/lib/*.so /usr/local/lib/\nCOPY --from=deps /opt/salus-deps/lib/*.so.* /usr/local/lib/\nCOPY --from=compile /opt/salus /\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.11\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf > /dev/null \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   explicitly set user/group IDs\nRUN set -eux ; groupadd -r salus --gid=999 ; useradd -r -g salus --uid=999 --home-dir=/var/lib/salus --shell=/bin/bash salus ; mkdir -p /var/lib/salus ; chown -R salus:salus /var/lib/salus\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5501/tcp\nCMD [\"salus-server\"]\n#  -----------------------------------\n#   Final image as a switch\n#  -----------------------------------\nFROM ${APP_ENV} AS final\n","originalDockerfileUglifiedHash":"93726b4007c4bb2d5f006894e46888fb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/faab6cfe48fe95e94ee077f82af0c09869d05e0d.dockerfile"}