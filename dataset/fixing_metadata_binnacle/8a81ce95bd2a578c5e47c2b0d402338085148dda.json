{"seed":570964751,"processedDockerfileHash":"29b3f63d0d484d37fe4e3ddec6f0fe40","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:17.10\nMAINTAINER Stefan Bossbaly <sbossb@gmail.com>\n#  #######################################################\n#   Volumes\n#  #######################################################\nENV SRC_DIR=\"/srv/src\"\nENV CHROMIUM_DIR=\"/srv/chromium\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV TMP_DIR=\"/srv/tmp\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV LOGS_DIR=\"/srv/logs\"\nENV ZIP_DIR=\"/srv/zips\"\n#   By default we want to use CCACHE, you can disable this\n#   WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#   ccache maximum size. It should be a number followed by an optional suffix: k,\n#   M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#   for no limit.\nENV CCACHE_SIZE=\"50G\"\n#   Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#   When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n#  #######################################################\n#   User Id\n#  #######################################################\nENV USER=\"\\\"root\\\"\"\nENV USER_NAME=\"\\\"CopperheadOs Buildbot\\\"\"\nENV USER_MAIL=\"\\\"copperheados-buildbot@docker.host\\\"\"\n#   Apply the MicroG's signature spoofing patch\n#   Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#   \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#   The original (\"yes\") patch allows user apps to gain the ability to spoof\n#   themselves as other apps, which can be a major security threat. Using the\n#   restricted patch and embedding the apps that requires it as system privileged\n#   apps is a much secure option. See the README.md (\"Custom mode\") for an\n#   example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#   Installs the PICO variant of OpenGAPPS\n#   Valid values are \"no\", \"yes\"\nENV OPEN_GAPPS=\"\\\"no\\\"\"\n#  #######################################################\n#   Build Variables\n#  #######################################################\nENV DEVICE=\"\\\"walleye\\\"\"\nENV BUILD_TAG=\"\\\"OPM2.171019.029.B1.2018.05.15.17\\\"\"\nENV BUILD_ID=\"\\\"OPM2.171019.029.B1\\\"\"\nENV CHROMIUM_RELEASE_NAME=\"\\\"66.0.3359.158\\\"\"\nENV CHROMIUM_RELEASE_CODE=\"\\\"335915852\\\"\"\nENV NUM_OF_THREADS=\"8\"\n#  #######################################################\n#   Create Volume entry points\n#  #######################################################\nVOLUME $SRC_DIR\nVOLUME $CHROMIUM_DIR\nVOLUME $CCACHE_DIR\nVOLUME $TMP_DIR\nVOLUME $KEYS_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $LOGS_DIR\nVOLUME $ZIP_DIR\n#  #######################################################\n#   Copy required files\n#  #######################################################\nCOPY src/ /root/\n#  #######################################################\n#   Create missing directories\n#  #######################################################\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $CHROMIUM_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $ZIP_DIR\n#  #######################################################\n#   Install Dependencies\n#  #######################################################\nRUN :\nRUN apt-get -qqy upgrade\nRUN (apt-get update ;apt-get install --no-install-recommends bc bison build-essential ccache cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lsof lzop maven openjdk-8-jdk pngcrush procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip zlib1g-dev cgpt bsdmainutils lzip -y )\n#  #######################################################\n#   Add PGP Keys\n#  #######################################################\nRUN gpg --import \"/root/gpgkeys/9AB10E784340D13570EF945E83810964E8AD3F819AB10E78.gpg\"\nRUN gpg --import \"/root/gpgkeys/9AF5F22A65EEFE022108E2B708CBFCF7F9E712E59AF5F22A.gpg\"\nRUN gpg --import \"/root/gpgkeys/47A0B99EE6E0512B1829A92528CAFB50B60ABDD447A0B99E.gpg\"\nRUN gpg --import \"/root/gpgkeys/E09EE26BC29C13C520C097E827C85CFCFAD4F2B8E09EE26B.gpg\"\n#  #######################################################\n#   Install Google Tools\n#  #######################################################\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/sbin\n#  #######################################################\n#   Set the work directory\n#  #######################################################\nWORKDIR $SRC_DIR\nENTRYPOINT [\"/root/docker_entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:17.10\nMAINTAINER Stefan Bossbaly <sbossb@gmail.com>\n# #######################################################\n#  Volumes\n# #######################################################\nENV SRC_DIR=\"/srv/src\"\nENV CHROMIUM_DIR=\"/srv/chromium\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV TMP_DIR=\"/srv/tmp\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV LOGS_DIR=\"/srv/logs\"\nENV ZIP_DIR=\"/srv/zips\"\n#  By default we want to use CCACHE, you can disable this\n#  WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#  ccache maximum size. It should be a number followed by an optional suffix: k,\n#  M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#  for no limit.\nENV CCACHE_SIZE=\"50G\"\n#  Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#  When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n# #######################################################\n#  User Id\n# #######################################################\nENV USER=\"\\\"root\\\"\"\nENV USER_NAME=\"\\\"CopperheadOs Buildbot\\\"\"\nENV USER_MAIL=\"\\\"copperheados-buildbot@docker.host\\\"\"\n#  Apply the MicroG's signature spoofing patch\n#  Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#  \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#  The original (\"yes\") patch allows user apps to gain the ability to spoof\n#  themselves as other apps, which can be a major security threat. Using the\n#  restricted patch and embedding the apps that requires it as system privileged\n#  apps is a much secure option. See the README.md (\"Custom mode\") for an\n#  example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#  Installs the PICO variant of OpenGAPPS\n#  Valid values are \"no\", \"yes\"\nENV OPEN_GAPPS=\"\\\"no\\\"\"\n# #######################################################\n#  Build Variables\n# #######################################################\nENV DEVICE=\"\\\"walleye\\\"\"\nENV BUILD_TAG=\"\\\"OPM2.171019.029.B1.2018.05.15.17\\\"\"\nENV BUILD_ID=\"\\\"OPM2.171019.029.B1\\\"\"\nENV CHROMIUM_RELEASE_NAME=\"\\\"66.0.3359.158\\\"\"\nENV CHROMIUM_RELEASE_CODE=\"\\\"335915852\\\"\"\nENV NUM_OF_THREADS=\"8\"\n# #######################################################\n#  Create Volume entry points\n# #######################################################\nVOLUME $SRC_DIR\nVOLUME $CHROMIUM_DIR\nVOLUME $CCACHE_DIR\nVOLUME $TMP_DIR\nVOLUME $KEYS_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $LOGS_DIR\nVOLUME $ZIP_DIR\n# #######################################################\n#  Copy required files\n# #######################################################\nCOPY src/ /root/\n# #######################################################\n#  Create missing directories\n# #######################################################\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $CHROMIUM_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $ZIP_DIR\n# #######################################################\n#  Install Dependencies\n# #######################################################\nRUN apt-get update -qq\nRUN apt-get -qqy upgrade\nRUN apt-get install bc bison build-essential ccache cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lsof lzop maven openjdk-8-jdk pngcrush procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip zlib1g-dev cgpt bsdmainutils lzip -y\n# #######################################################\n#  Add PGP Keys\n# #######################################################\nRUN gpg --import \"/root/gpgkeys/9AB10E784340D13570EF945E83810964E8AD3F819AB10E78.gpg\"\nRUN gpg --import \"/root/gpgkeys/9AF5F22A65EEFE022108E2B708CBFCF7F9E712E59AF5F22A.gpg\"\nRUN gpg --import \"/root/gpgkeys/47A0B99EE6E0512B1829A92528CAFB50B60ABDD447A0B99E.gpg\"\nRUN gpg --import \"/root/gpgkeys/E09EE26BC29C13C520C097E827C85CFCFAD4F2B8E09EE26B.gpg\"\n# #######################################################\n#  Install Google Tools\n# #######################################################\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/sbin\n# #######################################################\n#  Set the work directory\n# #######################################################\nWORKDIR $SRC_DIR\nENTRYPOINT [\"/root/docker_entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"b5dd29a7b51335301cb7aa8122083b0f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:17.10\nMAINTAINER Stefan Bossbaly <sbossb@gmail.com>\n#  #######################################################\n#   Volumes\n#  #######################################################\nENV SRC_DIR=\"/srv/src\"\nENV CHROMIUM_DIR=\"/srv/chromium\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV TMP_DIR=\"/srv/tmp\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV LOGS_DIR=\"/srv/logs\"\nENV ZIP_DIR=\"/srv/zips\"\n#   By default we want to use CCACHE, you can disable this\n#   WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#   ccache maximum size. It should be a number followed by an optional suffix: k,\n#   M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#   for no limit.\nENV CCACHE_SIZE=\"50G\"\n#   Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#   When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n#  #######################################################\n#   User Id\n#  #######################################################\nENV USER=\"\\\"root\\\"\"\nENV USER_NAME=\"\\\"CopperheadOs Buildbot\\\"\"\nENV USER_MAIL=\"\\\"copperheados-buildbot@docker.host\\\"\"\n#   Apply the MicroG's signature spoofing patch\n#   Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#   \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#   The original (\"yes\") patch allows user apps to gain the ability to spoof\n#   themselves as other apps, which can be a major security threat. Using the\n#   restricted patch and embedding the apps that requires it as system privileged\n#   apps is a much secure option. See the README.md (\"Custom mode\") for an\n#   example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#   Installs the PICO variant of OpenGAPPS\n#   Valid values are \"no\", \"yes\"\nENV OPEN_GAPPS=\"\\\"no\\\"\"\n#  #######################################################\n#   Build Variables\n#  #######################################################\nENV DEVICE=\"\\\"walleye\\\"\"\nENV BUILD_TAG=\"\\\"OPM2.171019.029.B1.2018.05.15.17\\\"\"\nENV BUILD_ID=\"\\\"OPM2.171019.029.B1\\\"\"\nENV CHROMIUM_RELEASE_NAME=\"\\\"66.0.3359.158\\\"\"\nENV CHROMIUM_RELEASE_CODE=\"\\\"335915852\\\"\"\nENV NUM_OF_THREADS=\"8\"\n#  #######################################################\n#   Create Volume entry points\n#  #######################################################\nVOLUME $SRC_DIR\nVOLUME $CHROMIUM_DIR\nVOLUME $CCACHE_DIR\nVOLUME $TMP_DIR\nVOLUME $KEYS_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $LOGS_DIR\nVOLUME $ZIP_DIR\n#  #######################################################\n#   Copy required files\n#  #######################################################\nCOPY src/ /root/\n#  #######################################################\n#   Create missing directories\n#  #######################################################\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $CHROMIUM_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $ZIP_DIR\n#  #######################################################\n#   Install Dependencies\n#  #######################################################\nRUN apt-get update -qq\nRUN apt-get -qqy upgrade\nRUN apt-get install bc bison build-essential ccache cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lsof lzop maven openjdk-8-jdk pngcrush procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip zlib1g-dev cgpt bsdmainutils lzip -y\n#  #######################################################\n#   Add PGP Keys\n#  #######################################################\nRUN gpg --import \"/root/gpgkeys/9AB10E784340D13570EF945E83810964E8AD3F819AB10E78.gpg\"\nRUN gpg --import \"/root/gpgkeys/9AF5F22A65EEFE022108E2B708CBFCF7F9E712E59AF5F22A.gpg\"\nRUN gpg --import \"/root/gpgkeys/47A0B99EE6E0512B1829A92528CAFB50B60ABDD447A0B99E.gpg\"\nRUN gpg --import \"/root/gpgkeys/E09EE26BC29C13C520C097E827C85CFCFAD4F2B8E09EE26B.gpg\"\n#  #######################################################\n#   Install Google Tools\n#  #######################################################\nRUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /usr/local/sbin\n#  #######################################################\n#   Set the work directory\n#  #######################################################\nWORKDIR $SRC_DIR\nENTRYPOINT [\"/root/docker_entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"0afd228d524a758693b91edbffe94215","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8a81ce95bd2a578c5e47c2b0d402338085148dda.dockerfile"}