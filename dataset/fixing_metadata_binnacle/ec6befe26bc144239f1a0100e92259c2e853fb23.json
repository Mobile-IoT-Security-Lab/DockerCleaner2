{"seed":426010629,"processedDockerfileHash":"5e1315f8d200f57d542c4408944c5b30","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ########################################################################################\n#\n#    Docker file for Simka project.\n#\n#    It prepares a Docker container to run Simka jobs: \n#\n#      - bin/simka: computing simka results from sequencing data\n#      - scripts/visualization/run-visualization.py: making images from results of\n#        bin/simka.\n#\n#  ########################################################################################\n#\n#   == Docker build command:\n#\n#      docker build -f Dockerfile -t simka_machine .\n#\n#   == Docker test command:\n#\n#      docker run --rm -i -t simka_machine -c test\n#\n#      -> you should see a simka test with some provided data.\n#\n#   == Running a Simka job:\n#\n#      docker run --rm -i -t simka_machine -c <command> -- <args>\n#\n#      where:\n#          <command>: MUST BE one of: simka, visu, test\n#        <arguments>: remaining arguments passed in after <command> are passed\n#                     to the appropriate simka program: \n#                        - simka: will run 'bin/simka' within the container\n#                        - visu: will run 'scripts/visualization/run-visualization.py'\n#                                within the container\n#                     Please refer to these programs to review their expected arguments.\n#                     See https://github.com/GATB/simka\n#\n#   == Sample Simka job with provided data:\n#      \n#      docker run --rm -i -t -v $PWD:/tmp simka_machine -c simka -- -in /opt/simka/example/simka_input.txt -out /tmp/simka_results/ -out-tmp /tmp/simka_temp_output\n#\n#      -> you should have results in $PWD/simka_results directory when Simka job is done.\n#\n#      This command-line line explained:\n#\n#      docker run                                 [1]\n#         --rm                                    [2]\n#         -i -t                                   [3]\n#         -v $PWD:/tmp                            [4]\n#         simka_machine                           [5] \n#         -c simka                                [6]\n#         --                                      [7]\n#         -in /opt/simka/example/simka_input.txt  [8]\n#         -out /tmp/simka_results/                [9]\n#         -out-tmp /tmp/simka_temp_output         [10]\n#\n#         [1]-[5]: Docker arguments\n#         [6]-[7]: simka container's invoker program\n#         [8]-[10]: 'bin/simka' arguments\n#\n#         [1]: start Docker container\n#         [2]: destroy container when Docker finishes\n#              (it does NOT delete the 'simka_machine' image)\n#         [3]: start an interactive job \n#              (for instance, you'll see messages on stdout, if any)\n#         [4]: mount a volume. This is required to get the results from Simka.\n#              Here, we say that current local directory will be viewed as '/tmp'\n#              from the inside of the container. \n#         [5]: tell Docker which image to start: the 'simka_machine' of course.\n#         [6]: ask to start the simka program. Other option is to start the \n#              'visu' task (see below). See companion file 'run_simka.sh' for\n#              more information.\n#         [7]: '--' is required to separate arguments [6] from the rest of the\n#              command line\n#         [8]: the data file to process with simka. Here we use a data file\n#              provided with the simka software to test it.\n#         [9]: tells simka where to put results. Of course, simka will write \n#              within /tmp directory inside the container. However, since we\n#              have directive [4], data writing is actually done in $PWD, i.e.\n#              a local directory.\n#         [10]: tells simka where to put temporary files. \n#\n#   == Sample Simka Visualization job with provided data\n#\n#      After running the previous command, you can do this:\n#\n#      docker run --rm -i -t -v $PWD:/tmp simka_machine -c visu -- -in /tmp/simka_results/ -out /tmp/simka_results/ -pca -heatmap -tree\n#\n#      -> you should have PNG files in $PWD/simka_results directory.\n#      \n#   == Additional notes\n#   \n#     Root access inside the container:\n#\n#       - if running: docker exec -it simka_machine bash\n#\n#       - if not yet running: docker run --rm -i -t simka_machine bash\n#\n#  ########################################################################################\n#   Simka binary available on Github (see below) is built using a \n#   Debian 8 (jessie) based system on Inria Jenkins CI platform\nFROM debian:jessie\n#   who to blame?\nMAINTAINER Patrick Durand patrick.durand@inria.fr\n#   ###\n#      We always use the latest official SIMKA release.\n#\nENV SIMKA_VERSION=\"1.4.0\"\n#   ###\n#       Package installation and configuration\n#\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends curl python2.7 r-base -y \\\n && apt-get clean\n#   ###\n#       SIMKA installation: get the binary release from Github mirror.\n#\nRUN cd /opt \\\n && export SIMKA_TGZ=simka-v${SIMKA_VERSION}-bin-Linux.tar.gz \\\n && export GIT_URL=https://github.com/GATB/simka/releases/download \\\n && export SIMKA_URL=${GIT_URL}/v${SIMKA_VERSION}/${SIMKA_TGZ} \\\n && curl -ksL ${SIMKA_URL} | tar xz \\\n && rm -f ${SIMKA_TGZ} \\\n && mv simka-v${SIMKA_VERSION}-bin-Linux simka \\\n && cd simka/bin \\\n && chmod +x simka* \\\n && cd ../example \\\n && chmod +x *.sh \\\n && ./simple_test.sh\nCOPY run_simka.sh /opt/simka\n#   Fix: ensure script has exec permission\nRUN chmod +x /opt/simka/run_simka.sh\n#   ###\n#       Start simka. \n#\nENTRYPOINT [\"/opt/simka/run_simka.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ########################################################################################\n#\n#   Docker file for Simka project.\n#\n#   It prepares a Docker container to run Simka jobs: \n#\n#     - bin/simka: computing simka results from sequencing data\n#     - scripts/visualization/run-visualization.py: making images from results of\n#       bin/simka.\n#\n# ########################################################################################\n#\n#  == Docker build command:\n#\n#     docker build -f Dockerfile -t simka_machine .\n#\n#  == Docker test command:\n#\n#     docker run --rm -i -t simka_machine -c test\n#\n#     -> you should see a simka test with some provided data.\n#\n#  == Running a Simka job:\n#\n#     docker run --rm -i -t simka_machine -c <command> -- <args>\n#\n#     where:\n#         <command>: MUST BE one of: simka, visu, test\n#       <arguments>: remaining arguments passed in after <command> are passed\n#                    to the appropriate simka program: \n#                       - simka: will run 'bin/simka' within the container\n#                       - visu: will run 'scripts/visualization/run-visualization.py'\n#                               within the container\n#                    Please refer to these programs to review their expected arguments.\n#                    See https://github.com/GATB/simka\n#\n#  == Sample Simka job with provided data:\n#     \n#     docker run --rm -i -t -v $PWD:/tmp simka_machine -c simka -- -in /opt/simka/example/simka_input.txt -out /tmp/simka_results/ -out-tmp /tmp/simka_temp_output\n#\n#     -> you should have results in $PWD/simka_results directory when Simka job is done.\n#\n#     This command-line line explained:\n#\n#     docker run                                 [1]\n#        --rm                                    [2]\n#        -i -t                                   [3]\n#        -v $PWD:/tmp                            [4]\n#        simka_machine                           [5] \n#        -c simka                                [6]\n#        --                                      [7]\n#        -in /opt/simka/example/simka_input.txt  [8]\n#        -out /tmp/simka_results/                [9]\n#        -out-tmp /tmp/simka_temp_output         [10]\n#\n#        [1]-[5]: Docker arguments\n#        [6]-[7]: simka container's invoker program\n#        [8]-[10]: 'bin/simka' arguments\n#\n#        [1]: start Docker container\n#        [2]: destroy container when Docker finishes\n#             (it does NOT delete the 'simka_machine' image)\n#        [3]: start an interactive job \n#             (for instance, you'll see messages on stdout, if any)\n#        [4]: mount a volume. This is required to get the results from Simka.\n#             Here, we say that current local directory will be viewed as '/tmp'\n#             from the inside of the container. \n#        [5]: tell Docker which image to start: the 'simka_machine' of course.\n#        [6]: ask to start the simka program. Other option is to start the \n#             'visu' task (see below). See companion file 'run_simka.sh' for\n#             more information.\n#        [7]: '--' is required to separate arguments [6] from the rest of the\n#             command line\n#        [8]: the data file to process with simka. Here we use a data file\n#             provided with the simka software to test it.\n#        [9]: tells simka where to put results. Of course, simka will write \n#             within /tmp directory inside the container. However, since we\n#             have directive [4], data writing is actually done in $PWD, i.e.\n#             a local directory.\n#        [10]: tells simka where to put temporary files. \n#\n#  == Sample Simka Visualization job with provided data\n#\n#     After running the previous command, you can do this:\n#\n#     docker run --rm -i -t -v $PWD:/tmp simka_machine -c visu -- -in /tmp/simka_results/ -out /tmp/simka_results/ -pca -heatmap -tree\n#\n#     -> you should have PNG files in $PWD/simka_results directory.\n#     \n#  == Additional notes\n#  \n#    Root access inside the container:\n#\n#      - if running: docker exec -it simka_machine bash\n#\n#      - if not yet running: docker run --rm -i -t simka_machine bash\n#\n# ########################################################################################\n#  Simka binary available on Github (see below) is built using a \n#  Debian 8 (jessie) based system on Inria Jenkins CI platform\nFROM debian:jessie\n#  who to blame?\nMAINTAINER Patrick Durand patrick.durand@inria.fr\n#  ###\n#     We always use the latest official SIMKA release.\n#\nENV SIMKA_VERSION=\"1.4.0\"\n#  ###\n#      Package installation and configuration\n#\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends curl python2.7 r-base -y \\\n && apt-get clean\n#  ###\n#      SIMKA installation: get the binary release from Github mirror.\n#\nRUN cd /opt \\\n && export SIMKA_TGZ=simka-v${SIMKA_VERSION}-bin-Linux.tar.gz \\\n && export GIT_URL=https://github.com/GATB/simka/releases/download \\\n && export SIMKA_URL=${GIT_URL}/v${SIMKA_VERSION}/${SIMKA_TGZ} \\\n && curl -ksL ${SIMKA_URL} | tar xz \\\n && rm -f ${SIMKA_TGZ} \\\n && mv simka-v${SIMKA_VERSION}-bin-Linux simka \\\n && cd simka/bin \\\n && chmod +x simka* \\\n && cd ../example \\\n && chmod +x *.sh \\\n && ./simple_test.sh\nCOPY run_simka.sh /opt/simka\n#  Fix: ensure script has exec permission\nRUN chmod +x /opt/simka/run_simka.sh\n#  ###\n#      Start simka. \n#\nENTRYPOINT [\"/opt/simka/run_simka.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"d41b42b139948771daa4c6a619646805","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ########################################################################################\n#\n#    Docker file for Simka project.\n#\n#    It prepares a Docker container to run Simka jobs: \n#\n#      - bin/simka: computing simka results from sequencing data\n#      - scripts/visualization/run-visualization.py: making images from results of\n#        bin/simka.\n#\n#  ########################################################################################\n#\n#   == Docker build command:\n#\n#      docker build -f Dockerfile -t simka_machine .\n#\n#   == Docker test command:\n#\n#      docker run --rm -i -t simka_machine -c test\n#\n#      -> you should see a simka test with some provided data.\n#\n#   == Running a Simka job:\n#\n#      docker run --rm -i -t simka_machine -c <command> -- <args>\n#\n#      where:\n#          <command>: MUST BE one of: simka, visu, test\n#        <arguments>: remaining arguments passed in after <command> are passed\n#                     to the appropriate simka program: \n#                        - simka: will run 'bin/simka' within the container\n#                        - visu: will run 'scripts/visualization/run-visualization.py'\n#                                within the container\n#                     Please refer to these programs to review their expected arguments.\n#                     See https://github.com/GATB/simka\n#\n#   == Sample Simka job with provided data:\n#      \n#      docker run --rm -i -t -v $PWD:/tmp simka_machine -c simka -- -in /opt/simka/example/simka_input.txt -out /tmp/simka_results/ -out-tmp /tmp/simka_temp_output\n#\n#      -> you should have results in $PWD/simka_results directory when Simka job is done.\n#\n#      This command-line line explained:\n#\n#      docker run                                 [1]\n#         --rm                                    [2]\n#         -i -t                                   [3]\n#         -v $PWD:/tmp                            [4]\n#         simka_machine                           [5] \n#         -c simka                                [6]\n#         --                                      [7]\n#         -in /opt/simka/example/simka_input.txt  [8]\n#         -out /tmp/simka_results/                [9]\n#         -out-tmp /tmp/simka_temp_output         [10]\n#\n#         [1]-[5]: Docker arguments\n#         [6]-[7]: simka container's invoker program\n#         [8]-[10]: 'bin/simka' arguments\n#\n#         [1]: start Docker container\n#         [2]: destroy container when Docker finishes\n#              (it does NOT delete the 'simka_machine' image)\n#         [3]: start an interactive job \n#              (for instance, you'll see messages on stdout, if any)\n#         [4]: mount a volume. This is required to get the results from Simka.\n#              Here, we say that current local directory will be viewed as '/tmp'\n#              from the inside of the container. \n#         [5]: tell Docker which image to start: the 'simka_machine' of course.\n#         [6]: ask to start the simka program. Other option is to start the \n#              'visu' task (see below). See companion file 'run_simka.sh' for\n#              more information.\n#         [7]: '--' is required to separate arguments [6] from the rest of the\n#              command line\n#         [8]: the data file to process with simka. Here we use a data file\n#              provided with the simka software to test it.\n#         [9]: tells simka where to put results. Of course, simka will write \n#              within /tmp directory inside the container. However, since we\n#              have directive [4], data writing is actually done in $PWD, i.e.\n#              a local directory.\n#         [10]: tells simka where to put temporary files. \n#\n#   == Sample Simka Visualization job with provided data\n#\n#      After running the previous command, you can do this:\n#\n#      docker run --rm -i -t -v $PWD:/tmp simka_machine -c visu -- -in /tmp/simka_results/ -out /tmp/simka_results/ -pca -heatmap -tree\n#\n#      -> you should have PNG files in $PWD/simka_results directory.\n#      \n#   == Additional notes\n#   \n#     Root access inside the container:\n#\n#       - if running: docker exec -it simka_machine bash\n#\n#       - if not yet running: docker run --rm -i -t simka_machine bash\n#\n#  ########################################################################################\n#   Simka binary available on Github (see below) is built using a \n#   Debian 8 (jessie) based system on Inria Jenkins CI platform\nFROM debian:jessie\n#   who to blame?\nMAINTAINER Patrick Durand patrick.durand@inria.fr\n#   ###\n#      We always use the latest official SIMKA release.\n#\nENV SIMKA_VERSION=\"1.4.0\"\n#   ###\n#       Package installation and configuration\n#\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends curl python2.7 r-base -y \\\n && apt-get clean\n#   ###\n#       SIMKA installation: get the binary release from Github mirror.\n#\nRUN cd /opt \\\n && export SIMKA_TGZ=simka-v${SIMKA_VERSION}-bin-Linux.tar.gz \\\n && export GIT_URL=https://github.com/GATB/simka/releases/download \\\n && export SIMKA_URL=${GIT_URL}/v${SIMKA_VERSION}/${SIMKA_TGZ} \\\n && curl -ksL ${SIMKA_URL} | tar xz \\\n && rm -f ${SIMKA_TGZ} \\\n && mv simka-v${SIMKA_VERSION}-bin-Linux simka \\\n && cd simka/bin \\\n && chmod +x simka* \\\n && cd ../example \\\n && chmod +x *.sh \\\n && ./simple_test.sh\nCOPY run_simka.sh /opt/simka\n#   Fix: ensure script has exec permission\nRUN chmod +x /opt/simka/run_simka.sh\n#   ###\n#       Start simka. \n#\nENTRYPOINT [\"/opt/simka/run_simka.sh\"]\n","originalDockerfileUglifiedHash":"3852e25cb82c113b7653263afbbefd77","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ec6befe26bc144239f1a0100e92259c2e853fb23.dockerfile"}