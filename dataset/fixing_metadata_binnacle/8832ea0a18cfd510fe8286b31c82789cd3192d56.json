{"seed":1919068052,"processedDockerfileHash":"704d0e45c90217919d692b110930c306","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Dockerfile for a simple Nginx stream replicator\n#   Separate build stage to keep build dependencies out of our final image\nARG ALPINE_VERSION=alpine:3.8\nFROM ${ALPINE_VERSION}\n#   Software versions to build\nARG NGINX_VERSION=nginx-1.15.8\nARG NGINX_RTMP_MODULE_VERSION=6f5487ada9848a66cc7a3ed375e404fc95cc5302\n#   Install buildtime dependencies\n#   Note: We build against LibreSSL instead of OpenSSL, because LibreSSL is already included in Alpine\nRUN apk add build-base=0.5-r3 libressl-dev=3.6.2-r0 --no-cache\n#   Download sources\n#   Note: We download our own fork of nginx-rtmp-module which contains some additional enhancements over the original version by arut\nRUN mkdir -p /build \\\n && wget -O - https://nginx.org/download/${NGINX_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/${NGINX_VERSION} /build/nginx \\\n && wget -O - https://github.com/DvdGiessen/nginx-rtmp-module/archive/${NGINX_RTMP_MODULE_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION} /build/nginx-rtmp-module\n#   Build a minimal version of nginx\nRUN cd /build/nginx \\\n && ./configure --build=DvdGiessen/nginx-rtmp-docker --prefix=/etc/nginx --sbin-path=/usr/local/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --http-client-body-temp-path=/tmp/nginx/client-body --user=nginx --group=nginx --without-http-cache --without-http_access_module --without-http_auth_basic_module --without-http_autoindex_module --without-http_browser_module --without-http_charset_module --without-http_empty_gif_module --without-http_fastcgi_module --without-http_geo_module --without-http_grpc_module --without-http_gzip_module --without-http_limit_conn_module --without-http_limit_req_module --without-http_map_module --without-http_memcached_module --without-http_mirror_module --without-http_proxy_module --without-http_referer_module --without-http_rewrite_module --without-http_scgi_module --without-http_split_clients_module --without-http_ssi_module --without-http_upstream_hash_module --without-http_upstream_ip_hash_module --without-http_upstream_keepalive_module --without-http_upstream_least_conn_module --without-http_upstream_random_module --without-http_upstream_zone_module --without-http_userid_module --without-http_uwsgi_module --without-mail_imap_module --without-mail_pop3_module --without-mail_smtp_module --without-pcre --without-poll_module --without-select_module --without-stream_access_module --without-stream_geo_module --without-stream_limit_conn_module --without-stream_map_module --without-stream_return_module --without-stream_split_clients_module --without-stream_upstream_hash_module --without-stream_upstream_least_conn_module --without-stream_upstream_random_module --without-stream_upstream_zone_module --with-ipv6 --add-module=/build/nginx-rtmp-module \\\n && make -j $( getconf _NPROCESSORS_ONLN ;)\n#   Final image stage\nFROM ${ALPINE_VERSION}\n#   Set up group and user\nRUN addgroup -S nginx \\\n && adduser -s /sbin/nologin -G nginx -S -D -H nginx\n#   Set up directories\nRUN mkdir -p /etc/nginx /var/log/nginx /var/www \\\n && chown -R nginx:nginx /var/log/nginx /var/www \\\n && chmod -R 775 /var/log/nginx /var/www\n#   Forward logs to Docker\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   Set up exposed ports\nEXPOSE 1935/tcp\n#   Set up entrypoint\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod 555 /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD []\n#   Copy files from build stage\nCOPY --from=0 /build/nginx/objs/nginx /usr/local/sbin/nginx\nRUN chmod 550 /usr/local/sbin/nginx\n#   Set up config file\nCOPY nginx.conf /etc/nginx/nginx.conf\nRUN chmod 444 /etc/nginx/nginx.conf\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile for a simple Nginx stream replicator\n#  Separate build stage to keep build dependencies out of our final image\nARG ALPINE_VERSION=alpine:3.8\nFROM ${ALPINE_VERSION}\n#  Software versions to build\nARG NGINX_VERSION=nginx-1.15.8\nARG NGINX_RTMP_MODULE_VERSION=6f5487ada9848a66cc7a3ed375e404fc95cc5302\n#  Install buildtime dependencies\n#  Note: We build against LibreSSL instead of OpenSSL, because LibreSSL is already included in Alpine\nRUN apk --no-cache add build-base libressl-dev\n#  Download sources\n#  Note: We download our own fork of nginx-rtmp-module which contains some additional enhancements over the original version by arut\nRUN mkdir -p /build \\\n && wget -O - https://nginx.org/download/${NGINX_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/${NGINX_VERSION} /build/nginx \\\n && wget -O - https://github.com/DvdGiessen/nginx-rtmp-module/archive/${NGINX_RTMP_MODULE_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION} /build/nginx-rtmp-module\n#  Build a minimal version of nginx\nRUN cd /build/nginx \\\n && ./configure --build=DvdGiessen/nginx-rtmp-docker --prefix=/etc/nginx --sbin-path=/usr/local/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --http-client-body-temp-path=/tmp/nginx/client-body --user=nginx --group=nginx --without-http-cache --without-http_access_module --without-http_auth_basic_module --without-http_autoindex_module --without-http_browser_module --without-http_charset_module --without-http_empty_gif_module --without-http_fastcgi_module --without-http_geo_module --without-http_grpc_module --without-http_gzip_module --without-http_limit_conn_module --without-http_limit_req_module --without-http_map_module --without-http_memcached_module --without-http_mirror_module --without-http_proxy_module --without-http_referer_module --without-http_rewrite_module --without-http_scgi_module --without-http_split_clients_module --without-http_ssi_module --without-http_upstream_hash_module --without-http_upstream_ip_hash_module --without-http_upstream_keepalive_module --without-http_upstream_least_conn_module --without-http_upstream_random_module --without-http_upstream_zone_module --without-http_userid_module --without-http_uwsgi_module --without-mail_imap_module --without-mail_pop3_module --without-mail_smtp_module --without-pcre --without-poll_module --without-select_module --without-stream_access_module --without-stream_geo_module --without-stream_limit_conn_module --without-stream_map_module --without-stream_return_module --without-stream_split_clients_module --without-stream_upstream_hash_module --without-stream_upstream_least_conn_module --without-stream_upstream_random_module --without-stream_upstream_zone_module --with-ipv6 --add-module=/build/nginx-rtmp-module \\\n && make -j $( getconf _NPROCESSORS_ONLN ;)\n#  Final image stage\nFROM ${ALPINE_VERSION}\n#  Set up group and user\nRUN addgroup -S nginx \\\n && adduser -s /sbin/nologin -G nginx -S -D -H nginx\n#  Set up directories\nRUN mkdir -p /etc/nginx /var/log/nginx /var/www \\\n && chown -R nginx:nginx /var/log/nginx /var/www \\\n && chmod -R 775 /var/log/nginx /var/www\n#  Forward logs to Docker\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#  Set up exposed ports\nEXPOSE 1935/tcp\n#  Set up entrypoint\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod 555 /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD []\n#  Copy files from build stage\nCOPY --from=0 /build/nginx/objs/nginx /usr/local/sbin/nginx\nRUN chmod 550 /usr/local/sbin/nginx\n#  Set up config file\nCOPY nginx.conf /etc/nginx/nginx.conf\nRUN chmod 444 /etc/nginx/nginx.conf\n","injectedSmells":[],"originalDockerfileHash":"276daf4500421391873219657262a794","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile for a simple Nginx stream replicator\n#   Separate build stage to keep build dependencies out of our final image\nARG ALPINE_VERSION=alpine:3.8\nFROM ${ALPINE_VERSION}\n#   Software versions to build\nARG NGINX_VERSION=nginx-1.15.8\nARG NGINX_RTMP_MODULE_VERSION=6f5487ada9848a66cc7a3ed375e404fc95cc5302\n#   Install buildtime dependencies\n#   Note: We build against LibreSSL instead of OpenSSL, because LibreSSL is already included in Alpine\nRUN apk --no-cache add build-base libressl-dev\n#   Download sources\n#   Note: We download our own fork of nginx-rtmp-module which contains some additional enhancements over the original version by arut\nRUN mkdir -p /build \\\n && wget -O - https://nginx.org/download/${NGINX_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/${NGINX_VERSION} /build/nginx \\\n && wget -O - https://github.com/DvdGiessen/nginx-rtmp-module/archive/${NGINX_RTMP_MODULE_VERSION}.tar.gz | tar -zxC /build -f - \\\n && mv /build/nginx-rtmp-module-${NGINX_RTMP_MODULE_VERSION} /build/nginx-rtmp-module\n#   Build a minimal version of nginx\nRUN cd /build/nginx \\\n && ./configure --build=DvdGiessen/nginx-rtmp-docker --prefix=/etc/nginx --sbin-path=/usr/local/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --http-client-body-temp-path=/tmp/nginx/client-body --user=nginx --group=nginx --without-http-cache --without-http_access_module --without-http_auth_basic_module --without-http_autoindex_module --without-http_browser_module --without-http_charset_module --without-http_empty_gif_module --without-http_fastcgi_module --without-http_geo_module --without-http_grpc_module --without-http_gzip_module --without-http_limit_conn_module --without-http_limit_req_module --without-http_map_module --without-http_memcached_module --without-http_mirror_module --without-http_proxy_module --without-http_referer_module --without-http_rewrite_module --without-http_scgi_module --without-http_split_clients_module --without-http_ssi_module --without-http_upstream_hash_module --without-http_upstream_ip_hash_module --without-http_upstream_keepalive_module --without-http_upstream_least_conn_module --without-http_upstream_random_module --without-http_upstream_zone_module --without-http_userid_module --without-http_uwsgi_module --without-mail_imap_module --without-mail_pop3_module --without-mail_smtp_module --without-pcre --without-poll_module --without-select_module --without-stream_access_module --without-stream_geo_module --without-stream_limit_conn_module --without-stream_map_module --without-stream_return_module --without-stream_split_clients_module --without-stream_upstream_hash_module --without-stream_upstream_least_conn_module --without-stream_upstream_random_module --without-stream_upstream_zone_module --with-ipv6 --add-module=/build/nginx-rtmp-module \\\n && make -j $( getconf _NPROCESSORS_ONLN ;)\n#   Final image stage\nFROM ${ALPINE_VERSION}\n#   Set up group and user\nRUN addgroup -S nginx \\\n && adduser -s /sbin/nologin -G nginx -S -D -H nginx\n#   Set up directories\nRUN mkdir -p /etc/nginx /var/log/nginx /var/www \\\n && chown -R nginx:nginx /var/log/nginx /var/www \\\n && chmod -R 775 /var/log/nginx /var/www\n#   Forward logs to Docker\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   Set up exposed ports\nEXPOSE 1935/tcp\n#   Set up entrypoint\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod 555 /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD []\n#   Copy files from build stage\nCOPY --from=0 /build/nginx/objs/nginx /usr/local/sbin/nginx\nRUN chmod 550 /usr/local/sbin/nginx\n#   Set up config file\nCOPY nginx.conf /etc/nginx/nginx.conf\nRUN chmod 444 /etc/nginx/nginx.conf\n","originalDockerfileUglifiedHash":"2ef6b5c699a257cab21d770e7ae63e9c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8832ea0a18cfd510fe8286b31c82789cd3192d56.dockerfile"}