{"seed":314410259,"processedDockerfileHash":"bac4a96aed83874a0f27402fbdba4df1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"\\\"Andrew Beers <andrew_beers@alumni.brown.edu>\\\"\"\nARG TENSORFLOW_VERSION=1.2.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.0.6\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install ipython==8.12.0 --no-cache-dir --upgrade \\\n && pip install Cython==0.29.34 ipykernel==6.22.0 jupyter==1.0.0 path.py==12.5.0 Pillow==9.5.0 pygments==2.15.0 six==1.16.0 sphinx==6.1.3 wheel==0.40.0 zmq==0.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Additional Packages for DeepNeuro\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends graphviz -y )\nRUN pip install pydot==1.1.0\nRUN pip install pandas==2.0.0 --upgrade\nRUN pip install numexpr==2.8.4 --upgrade\nRUN pip install nibabel==5.1.0 pydicom==2.3.1\n#   Install Slicer\nRUN SLICER_URL=\"http://download.slicer.org/bitstream/561384\" \\\n && curl -v -s -L $SLICER_URL | tar xz -C /tmp \\\n && mv /tmp/Slicer* /opt/slicer\n#   Install ANTS\nWORKDIR /home\nRUN wget \"https://github.com/stnava/ANTs/releases/download/v2.1.0/Linux_Ubuntu14.04.tar.bz2\" \\\n && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes bzip2 \\\n && tar -C /usr/local -xjf Linux_Ubuntu14.04.tar.bz2 \\\n && rm Linux_Ubuntu14.04.tar.bz2\n#   Install NeuroDebian\nRUN wget -O- http://neuro.debian.net/lists/trusty.us-nh.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\nRUN sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9\nRUN :\n#   Install FSL with NeuroDebian\nRUN sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes fsl-5.0-complete\n#   Environmental Variables\nENV PATH=\"\\\"$PATH:/opt/slicer\\\"\"\nENV PATH=\"\\\"$PATH:/usr/local/ANTs.2.1.0.Debian-Ubuntu_X64\\\"\"\n#   Setup Scripts\nRUN echo \"source /usr/share/fsl/5.0/etc/fslconf/fsl.sh\" >> ~/.bashrc\nRUN git clone https://github.com/QTIM-Lab/DeepNeuro /home/DeepNeuro\nWORKDIR /home/DeepNeuro\nRUN python /home/DeepNeuro/setup.py develop\n#   Copy in models\nRUN mkdir -p /home/DeepNeuro/deepneuro/load/Segment_GBM\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/wholetumor.h5 \"https://www.dropbox.com/s/74tjx14ue11rc0q/wholetumor.h5?dl=1\"\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/enhancing.h5 \"https://www.dropbox.com/s/usdal6cbkw3bceu/enhancingtumor_BRATS_submission.h5?dl=1\"\n#   TODO: Check if Docker has solved this checkpointing problem.\nRUN echo 22\nRUN git pull\n#   Commands at startup.\nWORKDIR \"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/\"\nRUN chmod 777 /home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\nENTRYPOINT [\"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"\\\"Andrew Beers <andrew_beers@alumni.brown.edu>\\\"\"\nARG TENSORFLOW_VERSION=1.2.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.0.6\n# RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n# \tcat /proc/driver/nvidia/version && \\\n# \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n# \tnvcc -V && \\\n# \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#  Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#  especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#  Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#  Install Additional Packages for DeepNeuro\nRUN apt-get update -y\nRUN apt-get install graphviz -y\nRUN pip install pydot==1.1.0\nRUN pip install pandas --upgrade\nRUN pip install numexpr --upgrade\nRUN pip install nibabel pydicom\n#  Install Slicer\nRUN SLICER_URL=\"http://download.slicer.org/bitstream/561384\" \\\n && curl -v -s -L $SLICER_URL | tar xz -C /tmp \\\n && mv /tmp/Slicer* /opt/slicer\n#  Install ANTS\nWORKDIR /home\nRUN wget \"https://github.com/stnava/ANTs/releases/download/v2.1.0/Linux_Ubuntu14.04.tar.bz2\" \\\n && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes bzip2 \\\n && tar -C /usr/local -xjf Linux_Ubuntu14.04.tar.bz2 \\\n && rm Linux_Ubuntu14.04.tar.bz2\n#  Install NeuroDebian\nRUN wget -O- http://neuro.debian.net/lists/trusty.us-nh.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\nRUN sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9\nRUN apt-get update\n#  Install FSL with NeuroDebian\nRUN sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes fsl-5.0-complete\n#  Environmental Variables\nENV PATH=\"\\\"$PATH:/opt/slicer\\\"\"\nENV PATH=\"\\\"$PATH:/usr/local/ANTs.2.1.0.Debian-Ubuntu_X64\\\"\"\n#  Setup Scripts\nRUN echo \"source /usr/share/fsl/5.0/etc/fslconf/fsl.sh\" >> ~/.bashrc\nRUN git clone https://github.com/QTIM-Lab/DeepNeuro /home/DeepNeuro\nWORKDIR /home/DeepNeuro\nRUN python /home/DeepNeuro/setup.py develop\n#  Copy in models\nRUN mkdir -p /home/DeepNeuro/deepneuro/load/Segment_GBM\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/wholetumor.h5 \"https://www.dropbox.com/s/74tjx14ue11rc0q/wholetumor.h5?dl=1\"\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/enhancing.h5 \"https://www.dropbox.com/s/usdal6cbkw3bceu/enhancingtumor_BRATS_submission.h5?dl=1\"\n#  TODO: Check if Docker has solved this checkpointing problem.\nRUN echo 22\nRUN git pull\n#  Commands at startup.\nWORKDIR \"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/\"\nRUN chmod 777 /home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\nENTRYPOINT [\"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"43b4e66dbe3275f908d9eb3812bd8513","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"\\\"Andrew Beers <andrew_beers@alumni.brown.edu>\\\"\"\nARG TENSORFLOW_VERSION=1.2.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.0.6\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Additional Packages for DeepNeuro\nRUN apt-get update -y\nRUN apt-get install graphviz -y\nRUN pip install pydot==1.1.0\nRUN pip install pandas --upgrade\nRUN pip install numexpr --upgrade\nRUN pip install nibabel pydicom\n#   Install Slicer\nRUN SLICER_URL=\"http://download.slicer.org/bitstream/561384\" \\\n && curl -v -s -L $SLICER_URL | tar xz -C /tmp \\\n && mv /tmp/Slicer* /opt/slicer\n#   Install ANTS\nWORKDIR /home\nRUN wget \"https://github.com/stnava/ANTs/releases/download/v2.1.0/Linux_Ubuntu14.04.tar.bz2\" \\\n && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes bzip2 \\\n && tar -C /usr/local -xjf Linux_Ubuntu14.04.tar.bz2 \\\n && rm Linux_Ubuntu14.04.tar.bz2\n#   Install NeuroDebian\nRUN wget -O- http://neuro.debian.net/lists/trusty.us-nh.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list\nRUN sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9\nRUN apt-get update\n#   Install FSL with NeuroDebian\nRUN sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --force-yes fsl-5.0-complete\n#   Environmental Variables\nENV PATH=\"\\\"$PATH:/opt/slicer\\\"\"\nENV PATH=\"\\\"$PATH:/usr/local/ANTs.2.1.0.Debian-Ubuntu_X64\\\"\"\n#   Setup Scripts\nRUN echo \"source /usr/share/fsl/5.0/etc/fslconf/fsl.sh\" >> ~/.bashrc\nRUN git clone https://github.com/QTIM-Lab/DeepNeuro /home/DeepNeuro\nWORKDIR /home/DeepNeuro\nRUN python /home/DeepNeuro/setup.py develop\n#   Copy in models\nRUN mkdir -p /home/DeepNeuro/deepneuro/load/Segment_GBM\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/wholetumor.h5 \"https://www.dropbox.com/s/74tjx14ue11rc0q/wholetumor.h5?dl=1\"\nRUN wget -O /home/DeepNeuro/deepneuro/load/Segment_GBM/enhancing.h5 \"https://www.dropbox.com/s/usdal6cbkw3bceu/enhancingtumor_BRATS_submission.h5?dl=1\"\n#   TODO: Check if Docker has solved this checkpointing problem.\nRUN echo 22\nRUN git pull\n#   Commands at startup.\nWORKDIR \"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/\"\nRUN chmod 777 /home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\nENTRYPOINT [\"/home/DeepNeuro/misc/DeepInfer/Segment_GBM/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"78ed211baa6fdca97809c08ebd974efc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/00aa4e9b457abeee518013375a0bc8f72f554381.dockerfile"}