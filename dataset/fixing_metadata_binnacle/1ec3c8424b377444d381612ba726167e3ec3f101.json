{"seed":2674640584,"processedDockerfileHash":"8368a468b74709969743b6354c15dc70","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:wheezy\nMAINTAINER Steeve Morin \"steeve.morin@gmail.com\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip xz-utils curl bc git build-essential cpio gcc-multilib libc6-i386 libc6-dev-i386 kmod squashfs-tools genisoimage xorriso syslinux automake pkg-config -y\nENV KERNEL_VERSION=\"3.16.1\"\nENV AUFS_BRANCH=\"aufs3.16\"\n#   Fetch the kernel sources\nRUN curl --retry 10 https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ \\\n && mv /linux-$KERNEL_VERSION /linux-kernel\n#   Download AUFS and apply patches and files, then remove it\nRUN git clone -b $AUFS_BRANCH --depth 1 git://git.code.sf.net/p/aufs/aufs3-standalone \\\n && cd aufs3-standalone \\\n && cd /linux-kernel \\\n && cp -r /aufs3-standalone/Documentation /linux-kernel \\\n && cp -r /aufs3-standalone/fs /linux-kernel \\\n && cp -r /aufs3-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/ \\\n && for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone aufs3-loopback; do patch -p1 < /aufs3-standalone/$patch.patch; done\nCOPY kernel_config /linux-kernel/.config\nRUN jobs=$( nproc ;) ; cd /linux-kernel \\\n && make -j ${jobs} oldconfig \\\n && make -j ${jobs} bzImage \\\n && make -j ${jobs} modules\n#   The post kernel build process\nENV ROOTFS=\"/rootfs\"\nENV TCL_REPO_BASE=\"http://tinycorelinux.net/5.x/x86\"\nENV TCZ_DEPS=\"iptables  iproute2  openssh openssl-1.0.0  tar  gcc_libs  acpid  xz liblzma  git expat2 libiconv libidn libgpg-error libgcrypt libssh2  nfs-utils tcp_wrappers portmap rpcbind libtirpc  curl ntpclient\"\n#   Make the ROOTFS\nRUN mkdir -p $ROOTFS\n#   Install the kernel modules in $ROOTFS\nRUN cd /linux-kernel \\\n && make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install\n#   Remove useless kernel modules, based on unclejack/debian2docker\nRUN cd $ROOTFS/lib/modules \\\n && rm -rf ./*/kernel/sound/* \\\n && rm -rf ./*/kernel/drivers/gpu/* \\\n && rm -rf ./*/kernel/drivers/infiniband/* \\\n && rm -rf ./*/kernel/drivers/isdn/* \\\n && rm -rf ./*/kernel/drivers/media/* \\\n && rm -rf ./*/kernel/drivers/staging/lustre/* \\\n && rm -rf ./*/kernel/drivers/staging/comedi/* \\\n && rm -rf ./*/kernel/fs/ocfs2/* \\\n && rm -rf ./*/kernel/net/bluetooth/* \\\n && rm -rf ./*/kernel/net/mac80211/* \\\n && rm -rf ./*/kernel/net/wireless/*\n#   Install libcap\nRUN curl -L ftp://ftp.de.debian.org/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz \\\n && cd /libcap-2.22 \\\n && sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules \\\n && sed -i 's/\\(^CFLAGS := .*\\)/\\1 -m32/' Make.Rules \\\n && make \\\n && mkdir -p output \\\n && make prefix=`pwd `/output install \\\n && mkdir -p $ROOTFS/usr/local/lib \\\n && cp -av `pwd `/output/lib64/* $ROOTFS/usr/local/lib\n#   Make sure the kernel headers are installed for aufs-util, and then build it\nRUN cd /linux-kernel \\\n && make INSTALL_HDR_PATH=/tmp/kheaders headers_install \\\n && cd / \\\n && git clone git://git.code.sf.net/p/aufs/aufs-util \\\n && cd /aufs-util \\\n && git checkout aufs3.9 \\\n && CPPFLAGS=\"-m32 -I/tmp/kheaders/include\" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make \\\n && DESTDIR=$ROOTFS make install \\\n && rm -rf /tmp/kheaders\n#   Download the rootfs, don't unpack it though:\nRUN curl -L -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs.gz\n#   Install the TCZ dependencies\nRUN for dep in $TCZ_DEPS; do echo \"Download $TCL_REPO_BASE/tcz/$dep.tcz\" \\\n && curl -L -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz \\\n && unsquashfs -f -d $ROOTFS /tmp/$dep.tcz \\\n && rm -f /tmp/$dep.tcz ; done\nCOPY VERSION $ROOTFS/etc/version\n#   Get the Docker version that matches our boot2docker version\n#   Note: `docker version` returns non-true when there is no server to ask\nRUN curl -L -o $ROOTFS/usr/local/bin/docker https://get.docker.io/builds/Linux/x86_64/docker-$( cat $ROOTFS/etc/version ;) \\\n && chmod +x $ROOTFS/usr/local/bin/docker \\\n && { $ROOTFS/usr/local/bin/docker version || true ; }\n#   get generate_cert\nRUN curl -L -o $ROOTFS/usr/local/bin/generate_cert https://github.com/SvenDowideit/generate_cert/releases/download/0.1/generate_cert-0.1-linux-386/ \\\n && chmod +x $ROOTFS/usr/local/bin/generate_cert\n#   Get the git versioning info\nCOPY .git /git/.git\nRUN cd /git \\\n && GIT_BRANCH=$( git rev-parse --abbrev-ref HEAD ;) \\\n && GITSHA1=$( git rev-parse --short HEAD ;) \\\n && DATE=$( date ;) \\\n && echo \"${GIT_BRANCH} : ${GITSHA1} - ${DATE}\" > $ROOTFS/etc/boot2docker\nCOPY rootfs/isolinux /isolinux\n#   Copy our custom rootfs\nCOPY rootfs/rootfs $ROOTFS\n#   These steps can only be run once, so can't be in make_iso.sh (which can be run in chained Dockerfiles)\n#   see https://github.com/boot2docker/boot2docker/blob/master/doc/BUILD.md\nRUN find $ROOTFS/etc/rc.d/ $ROOTFS/usr/local/etc/init.d/ -exec chmod +x '{}' ';' \\\n && (cd $ROOTFS \\\n && zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames ) \\\n && mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd \\\n && mv $ROOTFS/boot*.sh $ROOTFS/opt/ \\\n && chmod +x $ROOTFS/opt/*.sh \\\n && mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh \\\n && chmod +x $ROOTFS/opt/shutdown.sh \\\n && echo \"#!/bin/sh\" > $ROOTFS/usr/local/bin/autologin \\\n && echo \"/bin/login -f docker\" >> $ROOTFS/usr/local/bin/autologin \\\n && chmod 755 $ROOTFS/usr/local/bin/autologin \\\n && echo 'ttyS0:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS0 vt100' >> $ROOTFS/etc/inittab \\\n && echo root > $ROOTFS/etc/sysconfig/superuser\nCOPY rootfs/make_iso.sh /\nRUN /make_iso.sh\nCMD [\"cat\", \"boot2docker.iso\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:wheezy\nMAINTAINER Steeve Morin \"steeve.morin@gmail.com\"\nRUN apt-get update \\\n && apt-get install unzip xz-utils curl bc git build-essential cpio gcc-multilib libc6-i386 libc6-dev-i386 kmod squashfs-tools genisoimage xorriso syslinux automake pkg-config -y\nENV KERNEL_VERSION=\"3.16.1\"\nENV AUFS_BRANCH=\"aufs3.16\"\n#  Fetch the kernel sources\nRUN curl --retry 10 https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ \\\n && mv /linux-$KERNEL_VERSION /linux-kernel\n#  Download AUFS and apply patches and files, then remove it\nRUN git clone -b $AUFS_BRANCH --depth 1 git://git.code.sf.net/p/aufs/aufs3-standalone \\\n && cd aufs3-standalone \\\n && cd /linux-kernel \\\n && cp -r /aufs3-standalone/Documentation /linux-kernel \\\n && cp -r /aufs3-standalone/fs /linux-kernel \\\n && cp -r /aufs3-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/ \\\n && for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone aufs3-loopback; do patch -p1 < /aufs3-standalone/$patch.patch; done\nCOPY kernel_config /linux-kernel/.config\nRUN jobs=$( nproc ;) ; cd /linux-kernel \\\n && make -j ${jobs} oldconfig \\\n && make -j ${jobs} bzImage \\\n && make -j ${jobs} modules\n#  The post kernel build process\nENV ROOTFS=\"/rootfs\"\nENV TCL_REPO_BASE=\"http://tinycorelinux.net/5.x/x86\"\nENV TCZ_DEPS=\"iptables  iproute2  openssh openssl-1.0.0  tar  gcc_libs  acpid  xz liblzma  git expat2 libiconv libidn libgpg-error libgcrypt libssh2  nfs-utils tcp_wrappers portmap rpcbind libtirpc  curl ntpclient\"\n#  Make the ROOTFS\nRUN mkdir -p $ROOTFS\n#  Install the kernel modules in $ROOTFS\nRUN cd /linux-kernel \\\n && make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install\n#  Remove useless kernel modules, based on unclejack/debian2docker\nRUN cd $ROOTFS/lib/modules \\\n && rm -rf ./*/kernel/sound/* \\\n && rm -rf ./*/kernel/drivers/gpu/* \\\n && rm -rf ./*/kernel/drivers/infiniband/* \\\n && rm -rf ./*/kernel/drivers/isdn/* \\\n && rm -rf ./*/kernel/drivers/media/* \\\n && rm -rf ./*/kernel/drivers/staging/lustre/* \\\n && rm -rf ./*/kernel/drivers/staging/comedi/* \\\n && rm -rf ./*/kernel/fs/ocfs2/* \\\n && rm -rf ./*/kernel/net/bluetooth/* \\\n && rm -rf ./*/kernel/net/mac80211/* \\\n && rm -rf ./*/kernel/net/wireless/*\n#  Install libcap\nRUN curl -L ftp://ftp.de.debian.org/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz \\\n && cd /libcap-2.22 \\\n && sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules \\\n && sed -i 's/\\(^CFLAGS := .*\\)/\\1 -m32/' Make.Rules \\\n && make \\\n && mkdir -p output \\\n && make prefix=`pwd `/output install \\\n && mkdir -p $ROOTFS/usr/local/lib \\\n && cp -av `pwd `/output/lib64/* $ROOTFS/usr/local/lib\n#  Make sure the kernel headers are installed for aufs-util, and then build it\nRUN cd /linux-kernel \\\n && make INSTALL_HDR_PATH=/tmp/kheaders headers_install \\\n && cd / \\\n && git clone git://git.code.sf.net/p/aufs/aufs-util \\\n && cd /aufs-util \\\n && git checkout aufs3.9 \\\n && CPPFLAGS=\"-m32 -I/tmp/kheaders/include\" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make \\\n && DESTDIR=$ROOTFS make install \\\n && rm -rf /tmp/kheaders\n#  Download the rootfs, don't unpack it though:\nRUN curl -L -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs.gz\n#  Install the TCZ dependencies\nRUN for dep in $TCZ_DEPS; do echo \"Download $TCL_REPO_BASE/tcz/$dep.tcz\" \\\n && curl -L -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz \\\n && unsquashfs -f -d $ROOTFS /tmp/$dep.tcz \\\n && rm -f /tmp/$dep.tcz ; done\nCOPY VERSION $ROOTFS/etc/version\n#  Get the Docker version that matches our boot2docker version\n#  Note: `docker version` returns non-true when there is no server to ask\nRUN curl -L -o $ROOTFS/usr/local/bin/docker https://get.docker.io/builds/Linux/x86_64/docker-$( cat $ROOTFS/etc/version ;) \\\n && chmod +x $ROOTFS/usr/local/bin/docker \\\n && { $ROOTFS/usr/local/bin/docker version || true ; }\n#  get generate_cert\nRUN curl -L -o $ROOTFS/usr/local/bin/generate_cert https://github.com/SvenDowideit/generate_cert/releases/download/0.1/generate_cert-0.1-linux-386/ \\\n && chmod +x $ROOTFS/usr/local/bin/generate_cert\n#  Get the git versioning info\nCOPY .git /git/.git\nRUN cd /git \\\n && GIT_BRANCH=$( git rev-parse --abbrev-ref HEAD ;) \\\n && GITSHA1=$( git rev-parse --short HEAD ;) \\\n && DATE=$( date ;) \\\n && echo \"${GIT_BRANCH} : ${GITSHA1} - ${DATE}\" > $ROOTFS/etc/boot2docker\nCOPY rootfs/isolinux /isolinux\n#  Copy our custom rootfs\nCOPY rootfs/rootfs $ROOTFS\n#  These steps can only be run once, so can't be in make_iso.sh (which can be run in chained Dockerfiles)\n#  see https://github.com/boot2docker/boot2docker/blob/master/doc/BUILD.md\nRUN find $ROOTFS/etc/rc.d/ $ROOTFS/usr/local/etc/init.d/ -exec chmod +x '{}' ';' \\\n && (cd $ROOTFS \\\n && zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames ) \\\n && mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd \\\n && mv $ROOTFS/boot*.sh $ROOTFS/opt/ \\\n && chmod +x $ROOTFS/opt/*.sh \\\n && mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh \\\n && chmod +x $ROOTFS/opt/shutdown.sh \\\n && echo \"#!/bin/sh\" > $ROOTFS/usr/local/bin/autologin \\\n && echo \"/bin/login -f docker\" >> $ROOTFS/usr/local/bin/autologin \\\n && chmod 755 $ROOTFS/usr/local/bin/autologin \\\n && echo 'ttyS0:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS0 vt100' >> $ROOTFS/etc/inittab \\\n && echo root > $ROOTFS/etc/sysconfig/superuser\nCOPY rootfs/make_iso.sh /\nRUN /make_iso.sh\nCMD [\"cat\", \"boot2docker.iso\"]\n","injectedSmells":[],"originalDockerfileHash":"cecec807fd5e1ac65abefa349f6bc6c8","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:wheezy\nMAINTAINER Steeve Morin \"steeve.morin@gmail.com\"\nRUN apt-get update \\\n && apt-get install unzip xz-utils curl bc git build-essential cpio gcc-multilib libc6-i386 libc6-dev-i386 kmod squashfs-tools genisoimage xorriso syslinux automake pkg-config -y\nENV KERNEL_VERSION=\"3.16.1\"\nENV AUFS_BRANCH=\"aufs3.16\"\n#   Fetch the kernel sources\nRUN curl --retry 10 https://www.kernel.org/pub/linux/kernel/v3.x/linux-$KERNEL_VERSION.tar.xz | tar -C / -xJ \\\n && mv /linux-$KERNEL_VERSION /linux-kernel\n#   Download AUFS and apply patches and files, then remove it\nRUN git clone -b $AUFS_BRANCH --depth 1 git://git.code.sf.net/p/aufs/aufs3-standalone \\\n && cd aufs3-standalone \\\n && cd /linux-kernel \\\n && cp -r /aufs3-standalone/Documentation /linux-kernel \\\n && cp -r /aufs3-standalone/fs /linux-kernel \\\n && cp -r /aufs3-standalone/include/uapi/linux/aufs_type.h /linux-kernel/include/uapi/linux/ \\\n && for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone aufs3-loopback; do patch -p1 < /aufs3-standalone/$patch.patch; done\nCOPY kernel_config /linux-kernel/.config\nRUN jobs=$( nproc ;) ; cd /linux-kernel \\\n && make -j ${jobs} oldconfig \\\n && make -j ${jobs} bzImage \\\n && make -j ${jobs} modules\n#   The post kernel build process\nENV ROOTFS=\"/rootfs\"\nENV TCL_REPO_BASE=\"http://tinycorelinux.net/5.x/x86\"\nENV TCZ_DEPS=\"iptables  iproute2  openssh openssl-1.0.0  tar  gcc_libs  acpid  xz liblzma  git expat2 libiconv libidn libgpg-error libgcrypt libssh2  nfs-utils tcp_wrappers portmap rpcbind libtirpc  curl ntpclient\"\n#   Make the ROOTFS\nRUN mkdir -p $ROOTFS\n#   Install the kernel modules in $ROOTFS\nRUN cd /linux-kernel \\\n && make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install\n#   Remove useless kernel modules, based on unclejack/debian2docker\nRUN cd $ROOTFS/lib/modules \\\n && rm -rf ./*/kernel/sound/* \\\n && rm -rf ./*/kernel/drivers/gpu/* \\\n && rm -rf ./*/kernel/drivers/infiniband/* \\\n && rm -rf ./*/kernel/drivers/isdn/* \\\n && rm -rf ./*/kernel/drivers/media/* \\\n && rm -rf ./*/kernel/drivers/staging/lustre/* \\\n && rm -rf ./*/kernel/drivers/staging/comedi/* \\\n && rm -rf ./*/kernel/fs/ocfs2/* \\\n && rm -rf ./*/kernel/net/bluetooth/* \\\n && rm -rf ./*/kernel/net/mac80211/* \\\n && rm -rf ./*/kernel/net/wireless/*\n#   Install libcap\nRUN curl -L ftp://ftp.de.debian.org/debian/pool/main/libc/libcap2/libcap2_2.22.orig.tar.gz | tar -C / -xz \\\n && cd /libcap-2.22 \\\n && sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules \\\n && sed -i 's/\\(^CFLAGS := .*\\)/\\1 -m32/' Make.Rules \\\n && make \\\n && mkdir -p output \\\n && make prefix=`pwd `/output install \\\n && mkdir -p $ROOTFS/usr/local/lib \\\n && cp -av `pwd `/output/lib64/* $ROOTFS/usr/local/lib\n#   Make sure the kernel headers are installed for aufs-util, and then build it\nRUN cd /linux-kernel \\\n && make INSTALL_HDR_PATH=/tmp/kheaders headers_install \\\n && cd / \\\n && git clone git://git.code.sf.net/p/aufs/aufs-util \\\n && cd /aufs-util \\\n && git checkout aufs3.9 \\\n && CPPFLAGS=\"-m32 -I/tmp/kheaders/include\" CLFAGS=$CPPFLAGS LDFLAGS=$CPPFLAGS make \\\n && DESTDIR=$ROOTFS make install \\\n && rm -rf /tmp/kheaders\n#   Download the rootfs, don't unpack it though:\nRUN curl -L -o /tcl_rootfs.gz $TCL_REPO_BASE/release/distribution_files/rootfs.gz\n#   Install the TCZ dependencies\nRUN for dep in $TCZ_DEPS; do echo \"Download $TCL_REPO_BASE/tcz/$dep.tcz\" \\\n && curl -L -o /tmp/$dep.tcz $TCL_REPO_BASE/tcz/$dep.tcz \\\n && unsquashfs -f -d $ROOTFS /tmp/$dep.tcz \\\n && rm -f /tmp/$dep.tcz ; done\nCOPY VERSION $ROOTFS/etc/version\n#   Get the Docker version that matches our boot2docker version\n#   Note: `docker version` returns non-true when there is no server to ask\nRUN curl -L -o $ROOTFS/usr/local/bin/docker https://get.docker.io/builds/Linux/x86_64/docker-$( cat $ROOTFS/etc/version ;) \\\n && chmod +x $ROOTFS/usr/local/bin/docker \\\n && { $ROOTFS/usr/local/bin/docker version || true ; }\n#   get generate_cert\nRUN curl -L -o $ROOTFS/usr/local/bin/generate_cert https://github.com/SvenDowideit/generate_cert/releases/download/0.1/generate_cert-0.1-linux-386/ \\\n && chmod +x $ROOTFS/usr/local/bin/generate_cert\n#   Get the git versioning info\nCOPY .git /git/.git\nRUN cd /git \\\n && GIT_BRANCH=$( git rev-parse --abbrev-ref HEAD ;) \\\n && GITSHA1=$( git rev-parse --short HEAD ;) \\\n && DATE=$( date ;) \\\n && echo \"${GIT_BRANCH} : ${GITSHA1} - ${DATE}\" > $ROOTFS/etc/boot2docker\nCOPY rootfs/isolinux /isolinux\n#   Copy our custom rootfs\nCOPY rootfs/rootfs $ROOTFS\n#   These steps can only be run once, so can't be in make_iso.sh (which can be run in chained Dockerfiles)\n#   see https://github.com/boot2docker/boot2docker/blob/master/doc/BUILD.md\nRUN find $ROOTFS/etc/rc.d/ $ROOTFS/usr/local/etc/init.d/ -exec chmod +x '{}' ';' \\\n && (cd $ROOTFS \\\n && zcat /tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames ) \\\n && mv $ROOTFS/usr/local/etc/motd $ROOTFS/etc/motd \\\n && mv $ROOTFS/boot*.sh $ROOTFS/opt/ \\\n && chmod +x $ROOTFS/opt/*.sh \\\n && mv $ROOTFS/shutdown.sh $ROOTFS/opt/shutdown.sh \\\n && chmod +x $ROOTFS/opt/shutdown.sh \\\n && echo \"#!/bin/sh\" > $ROOTFS/usr/local/bin/autologin \\\n && echo \"/bin/login -f docker\" >> $ROOTFS/usr/local/bin/autologin \\\n && chmod 755 $ROOTFS/usr/local/bin/autologin \\\n && echo 'ttyS0:2345:respawn:/sbin/getty -l /usr/local/bin/autologin 9600 ttyS0 vt100' >> $ROOTFS/etc/inittab \\\n && echo root > $ROOTFS/etc/sysconfig/superuser\nCOPY rootfs/make_iso.sh /\nRUN /make_iso.sh\nCMD [\"cat\", \"boot2docker.iso\"]\n","originalDockerfileUglifiedHash":"5bdbe49f9c5aa777e6fd3b5c8b966be9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1ec3c8424b377444d381612ba726167e3ec3f101.dockerfile"}