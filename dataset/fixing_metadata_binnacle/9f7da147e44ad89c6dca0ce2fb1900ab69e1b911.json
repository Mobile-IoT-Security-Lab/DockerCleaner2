{"seed":284371966,"processedDockerfileHash":"d0c11756201dee6e6b701e735024d7c9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-devel-centos7\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl cmake util-linux xz bzip2 git patch which\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\nRUN yum install -y autoconf aclocal automake make\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n#   install CUDA 9.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run \\\n && chmod +x cuda_9.0.176_384.81_linux-run \\\n && ./cuda_9.0.176_384.81_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_9.0.176_384.81_linux-run\n#   patch 1, patch2\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run \\\n && chmod +x cuda_9.0.176.1_linux-run \\\n && ./cuda_9.0.176.1_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.1_linux-run\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run \\\n && chmod +x cuda_9.0.176.2_linux-run \\\n && ./cuda_9.0.176.2_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.2_linux-run\n#   install CUDA 9.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#   install CUDA 10.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   # install CUDA 10.1 in the same container\n#   RUN wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.39_linux.run && \\\n#       chmod +x cuda_10.1.105_418.39_linux.run && \\\n#       ./cuda_10.1.105_418.39_linux.run --silent --no-opengl-libs --toolkit && \\\n#       rm -f cuda_10.1.105_418.39_linux.run\n#   # install CUDA 10.1 CuDNN\n#   # cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\n#   RUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n#       wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#       wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#       ar -x libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#       ar -x libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#       mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n#       cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n#       cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n#       mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n#       ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n#       chmod +x cuda/lib64/*.so && \\\n#       cp -a cuda/include/* /usr/local/cuda/include/ && \\\n#       cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n#       cd .. && \\\n#       rm -rf tmp_cudnn && \\\n#       ldconfig\n#  ####################################################################################\n#   CUDA 9.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-9.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-9.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_device.a -o $CUDA_LIB_DIR/libcublas_device.a\n#  ####################################################################################\n#   CUDA 10.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#   curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n#  ################################################################################################\n#   Anaconda\nRUN wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh \\\n && chmod +x Miniconda2-latest-Linux-x86_64.sh \\\n && ./Miniconda2-latest-Linux-x86_64.sh -b -p /opt/conda \\\n && rm Miniconda2-latest-Linux-x86_64.sh\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN conda install -y conda-build=3.16 anaconda-client git ninja\nRUN conda remove -y --force patchelf\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-devel-centos7\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl cmake util-linux xz bzip2 git patch which\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\nRUN yum install -y autoconf aclocal automake make\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n#  install CUDA 9.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run \\\n && chmod +x cuda_9.0.176_384.81_linux-run \\\n && ./cuda_9.0.176_384.81_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_9.0.176_384.81_linux-run\n#  patch 1, patch2\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run \\\n && chmod +x cuda_9.0.176.1_linux-run \\\n && ./cuda_9.0.176.1_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.1_linux-run\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run \\\n && chmod +x cuda_9.0.176.2_linux-run \\\n && ./cuda_9.0.176.2_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.2_linux-run\n#  install CUDA 9.0 CuDNN\n#  cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#  install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#  install CUDA 10.0 CuDNN\n#  cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#  # install CUDA 10.1 in the same container\n#  RUN wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.39_linux.run && \\\n#      chmod +x cuda_10.1.105_418.39_linux.run && \\\n#      ./cuda_10.1.105_418.39_linux.run --silent --no-opengl-libs --toolkit && \\\n#      rm -f cuda_10.1.105_418.39_linux.run\n#  # install CUDA 10.1 CuDNN\n#  # cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\n#  RUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n#      wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#      wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#      ar -x libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#      ar -x libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#      mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n#      cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n#      cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n#      mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n#      ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n#      chmod +x cuda/lib64/*.so && \\\n#      cp -a cuda/include/* /usr/local/cuda/include/ && \\\n#      cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n#      cd .. && \\\n#      rm -rf tmp_cudnn && \\\n#      ldconfig\n# ####################################################################################\n#  CUDA 9.0 prune static libs\n# ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-9.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-9.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70\"\n#  all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#  prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_device.a -o $CUDA_LIB_DIR/libcublas_device.a\n# ####################################################################################\n#  CUDA 10.0 prune static libs\n# ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#  all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#  curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#  prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n# ################################################################################################\n#  Anaconda\nRUN wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh \\\n && chmod +x Miniconda2-latest-Linux-x86_64.sh \\\n && ./Miniconda2-latest-Linux-x86_64.sh -b -p /opt/conda \\\n && rm Miniconda2-latest-Linux-x86_64.sh\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN conda install -y conda-build=3.16 anaconda-client git ninja\nRUN conda remove -y --force patchelf\n","injectedSmells":[],"originalDockerfileHash":"343ad7d334159281b9cb53f510f32bfe","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-devel-centos7\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl cmake util-linux xz bzip2 git patch which\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\nRUN yum install -y autoconf aclocal automake make\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n#   install CUDA 9.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run \\\n && chmod +x cuda_9.0.176_384.81_linux-run \\\n && ./cuda_9.0.176_384.81_linux-run --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_9.0.176_384.81_linux-run\n#   patch 1, patch2\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda_9.0.176.1_linux-run \\\n && chmod +x cuda_9.0.176.1_linux-run \\\n && ./cuda_9.0.176.1_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.1_linux-run\nRUN wget -q https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda_9.0.176.2_linux-run \\\n && chmod +x cuda_9.0.176.2_linux-run \\\n && ./cuda_9.0.176.2_linux-run -s --accept-eula \\\n && rm -f cuda_9.0.176.2_linux-run\n#   install CUDA 9.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda9.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#   install CUDA 10.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   # install CUDA 10.1 in the same container\n#   RUN wget -q https://developer.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.105_418.39_linux.run && \\\n#       chmod +x cuda_10.1.105_418.39_linux.run && \\\n#       ./cuda_10.1.105_418.39_linux.run --silent --no-opengl-libs --toolkit && \\\n#       rm -f cuda_10.1.105_418.39_linux.run\n#   # install CUDA 10.1 CuDNN\n#   # cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\n#   RUN mkdir tmp_cudnn && cd tmp_cudnn && \\\n#       wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#       wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && \\\n#       ar -x libcudnn7-dev_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#       ar -x libcudnn7_7.5.1.10-1+cuda10.1_amd64.deb && tar -xvf data.tar.xz && \\\n#       mkdir -p cuda/include && mkdir -p cuda/lib64 && \\\n#       cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h && \\\n#       cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 && \\\n#       mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a && \\\n#       ln -s libcudnn.so.7 cuda/lib64/libcudnn.so && \\\n#       chmod +x cuda/lib64/*.so && \\\n#       cp -a cuda/include/* /usr/local/cuda/include/ && \\\n#       cp -a cuda/lib64/* /usr/local/cuda/lib64/ && \\\n#       cd .. && \\\n#       rm -rf tmp_cudnn && \\\n#       ldconfig\n#  ####################################################################################\n#   CUDA 9.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-9.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-9.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_device.a -o $CUDA_LIB_DIR/libcublas_device.a\n#  ####################################################################################\n#   CUDA 10.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#   curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n#  ################################################################################################\n#   Anaconda\nRUN wget -q https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh \\\n && chmod +x Miniconda2-latest-Linux-x86_64.sh \\\n && ./Miniconda2-latest-Linux-x86_64.sh -b -p /opt/conda \\\n && rm Miniconda2-latest-Linux-x86_64.sh\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN conda install -y conda-build=3.16 anaconda-client git ninja\nRUN conda remove -y --force patchelf\n","originalDockerfileUglifiedHash":"de65f9f76910b4bad1e1828422aefa60","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9f7da147e44ad89c6dca0ce2fb1900ab69e1b911.dockerfile"}