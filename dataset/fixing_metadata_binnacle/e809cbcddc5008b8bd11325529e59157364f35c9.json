{"seed":3339086790,"processedDockerfileHash":"1fd63a93a4c460e6b75d2e7bbc007aa5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\nRUN apt-get update --quiet \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 apt-utils=1.6.14 wget=1.19.4-1ubuntu2.2 build-essential=12.4ubuntu1 cython=0.26.1-0.4 emacs=47.0 python-dev=2.7.15~rc1-1 python-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-dev=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 libhdf5-serial-dev=1.10.0-patch1+docs-4 cmake=3.10.2-1ubuntu2.18.04.2 git-core libboost-all-dev=1.65.1.0ubuntu1 libfftw3-dev=3.3.7-1 h5utils=1.13-2 jq=1.5+dfsg-2 hdf5-tools=1.10.0-patch1+docs-4 liblapack-dev=3.7.1-4ubuntu1 libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.8 libfreetype6-dev=2.8.1-2ubuntu2.2 pkg-config=0.29.1-0ubuntu2 libxslt-dev libarmadillo-dev=1:8.400.0+dfsg-2 libace-dev=6.4.5+dfsg-1build2 gcc-multilib=4:7.4.0-1ubuntu2.3 libgtest-dev=1.8.0-6 python3-dev=3.6.7-1~18.04 liblapack-dev=3.7.1-4ubuntu1 liblapacke-dev=3.7.1-4ubuntu1 libplplot-dev=5.13.0+dfsg-6ubuntu2 libdcmtk-dev=3.6.2-3build3 supervisor=3.3.1-1.1 cmake-curses-gui=3.10.2-1ubuntu2.18.04.2 neofetch=3.4.0-1 supervisor=3.3.1-1.1 net-tools=1.60+git20161116.90da8a0-1ubuntu1 cpio=2.12+dfsg-6ubuntu0.18.04.4 gpg-agent=2.2.4-1ubuntu1.6 --no-install-suggests --yes )\n#   install cuda 9\nRUN (apt-get update ;apt-get install --no-install-recommends linux-image-extra-virtual=4.15.0.208.191 --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends linux-source=4.15.0.208.191 --no-install-suggests --yes )\n#   RUN apt-get source linux-image-$(uname -r)\nRUN (apt-get update ;apt-get install --no-install-recommends linux-headers-$( uname -r ;) --no-install-suggests --yes )\n#   RUN add-apt-repository ppa:graphics-drivers/ppa\n#   RUN apt-get update --quiet && apt-get upgrade -y\n#   RUN DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --no-install-suggests --yes nvidia-390\nRUN mkdir /opt/code\nRUN cd /opt/code\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub\nRUN :\nRUN DEBIAN_FRONTEND=noninteractive apt-get install cuda --no-install-recommends --no-install-suggests --yes\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN :\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN :\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN :\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nCOPY /docker/cudnn-9.0-linux-x64-v7.tgz /opt/code/\nRUN cd /opt/code \\\n && tar -xvf ./cudnn-9.0-linux-x64-v7.tgz \\\n && cp cuda/include/cudnn.h /usr/local/cuda/include \\\n && cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 \\\n && chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN (apt-get update ;apt-get install --no-install-recommends python3-psutil=5.4.2-1ubuntu0.1 python3-pyxb=1.2.6+dfsg-1 python3-lxml=4.2.1-1ubuntu0.6 --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-pil=5.1.0-1ubuntu0.8 --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-scipy=0.19.1-2ubuntu1 --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-configargparse=0.11.0-1 --no-install-suggests --yes )\nRUN pip3 install numpy==1.15.4 Cython tk-tools matplotlib scikit-image opencv_python pydicom scikit-learn\nRUN pip3 uninstall h5py\nRUN (apt-get update ;apt-get install --no-install-recommends python3-h5py=2.7.1-2 -y )\nRUN pip3 install --upgrade tensorflow tensorflow-gpu\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#   since cmake has problems to find python3 and boost-python3\n#   RUN ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py36.so /usr/lib/x86_64-linux-gnu/libboost_python3.so\n#   fix the  qhull reentrant problem\n#   RUN pip uninstall -y scipy\n#  OpenBLAS with OpenMP\nRUN cd /opt \\\n && mkdir debsource \\\n && cd debsource \\\n && apt-get --no-install-recommends --no-install-suggests --yes build-dep libopenblas-base \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=12.4ubuntu1 fakeroot=1.22-2ubuntu1 devscripts=2.17.12ubuntu1.1 --no-install-suggests --yes ) \\\n && apt-get source libopenblas-base \\\n && cd openblas-0.2.20+ds/ \\\n && sed -i \"s/NO_WARMUP=1/NO_WARMUP=1 OPENMP=1/g\" debian/rules \\\n && debchange -i \"Compiling with OpenMP support\" \\\n && debuild -us -uc -i -I \\\n && debi \\\n && cd /opt \\\n && rm -rf debsource\n#  Install Openblas\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so.3\n#  ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#   BART\nRUN cd /opt/code \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n#   ceres\nRUN (apt-get update ;apt-get install --no-install-recommends libgoogle-glog-dev=0.3.5-1 libeigen3-dev=3.3.4-4 libsuitesparse-dev=1:5.1.2-2 --yes )\nRUN cd /opt \\\n && wget http://ceres-solver.org/ceres-solver-1.14.0.tar.gz \\\n && tar zxf ceres-solver-1.14.0.tar.gz \\\n && mkdir ceres-bin \\\n && cd ceres-bin \\\n && cmake ../ceres-solver-1.14.0 \\\n && make -j20 \\\n && make install\n#  Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.0/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#   Clean up packages.\n#  RUN  apt-get clean && \\\n#     rm -rf /var/lib/apt/lists/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends software-properties-common apt-utils wget build-essential cython emacs python-dev python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libboost-all-dev libfftw3-dev h5utils jq hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libarmadillo-dev libace-dev gcc-multilib libgtest-dev python3-dev liblapack-dev liblapacke-dev libplplot-dev libdcmtk-dev supervisor cmake-curses-gui neofetch supervisor net-tools cpio gpg-agent --no-install-suggests --yes\n#  install cuda 9\nRUN apt-get install --no-install-recommends linux-image-extra-virtual --no-install-suggests --yes\nRUN apt-get install --no-install-recommends linux-source --no-install-suggests --yes\n#  RUN apt-get source linux-image-$(uname -r)\nRUN apt-get install --no-install-recommends linux-headers-$( uname -r ;) --no-install-suggests --yes\n#  RUN add-apt-repository ppa:graphics-drivers/ppa\n#  RUN apt-get update --quiet && apt-get upgrade -y\n#  RUN DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --no-install-suggests --yes nvidia-390\nRUN mkdir /opt/code\nRUN cd /opt/code\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get install cuda --no-install-recommends --no-install-suggests --yes\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nCOPY /docker/cudnn-9.0-linux-x64-v7.tgz /opt/code/\nRUN cd /opt/code \\\n && tar -xvf ./cudnn-9.0-linux-x64-v7.tgz \\\n && cp cuda/include/cudnn.h /usr/local/cuda/include \\\n && cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 \\\n && chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN apt-get install --no-install-recommends python3-psutil python3-pyxb python3-lxml --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-pil --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-scipy --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-configargparse --no-install-suggests --yes\nRUN pip3 install numpy==1.15.4 Cython tk-tools matplotlib scikit-image opencv_python pydicom scikit-learn\nRUN pip3 uninstall h5py\nRUN apt-get install python3-h5py -y\nRUN pip3 install --upgrade tensorflow tensorflow-gpu\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#  since cmake has problems to find python3 and boost-python3\n#  RUN ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py36.so /usr/lib/x86_64-linux-gnu/libboost_python3.so\n#  fix the  qhull reentrant problem\n#  RUN pip uninstall -y scipy\n# OpenBLAS with OpenMP\nRUN cd /opt \\\n && mkdir debsource \\\n && cd debsource \\\n && apt-get --no-install-recommends --no-install-suggests --yes build-dep libopenblas-base \\\n && apt-get install --no-install-recommends build-essential fakeroot devscripts --no-install-suggests --yes \\\n && apt-get source libopenblas-base \\\n && cd openblas-0.2.20+ds/ \\\n && sed -i \"s/NO_WARMUP=1/NO_WARMUP=1 OPENMP=1/g\" debian/rules \\\n && debchange -i \"Compiling with OpenMP support\" \\\n && debuild -us -uc -i -I \\\n && debi \\\n && cd /opt \\\n && rm -rf debsource\n# Install Openblas\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so.3\n# ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#  BART\nRUN cd /opt/code \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n#  ceres\nRUN apt-get install libgoogle-glog-dev libeigen3-dev libsuitesparse-dev --yes\nRUN cd /opt \\\n && wget http://ceres-solver.org/ceres-solver-1.14.0.tar.gz \\\n && tar zxf ceres-solver-1.14.0.tar.gz \\\n && mkdir ceres-bin \\\n && cd ceres-bin \\\n && cmake ../ceres-solver-1.14.0 \\\n && make -j20 \\\n && make install\n# Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.0/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#  Clean up packages.\n# RUN  apt-get clean && \\\n#    rm -rf /var/lib/apt/lists/*\n","injectedSmells":[],"originalDockerfileHash":"a6552a41ba13c60741531e23c7066bc6","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends software-properties-common apt-utils wget build-essential cython emacs python-dev python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libboost-all-dev libfftw3-dev h5utils jq hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libarmadillo-dev libace-dev gcc-multilib libgtest-dev python3-dev liblapack-dev liblapacke-dev libplplot-dev libdcmtk-dev supervisor cmake-curses-gui neofetch supervisor net-tools cpio gpg-agent --no-install-suggests --yes\n#   install cuda 9\nRUN apt-get install --no-install-recommends linux-image-extra-virtual --no-install-suggests --yes\nRUN apt-get install --no-install-recommends linux-source --no-install-suggests --yes\n#   RUN apt-get source linux-image-$(uname -r)\nRUN apt-get install --no-install-recommends linux-headers-$( uname -r ;) --no-install-suggests --yes\n#   RUN add-apt-repository ppa:graphics-drivers/ppa\n#   RUN apt-get update --quiet && apt-get upgrade -y\n#   RUN DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends --no-install-suggests --yes nvidia-390\nRUN mkdir /opt/code\nRUN cd /opt/code\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local_9.0.176-1_amd64-deb\nRUN apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get install cuda --no-install-recommends --no-install-suggests --yes\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/1/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/2/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-2_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nRUN wget https://developer.nvidia.com/compute/cuda/9.0/Prod/patches/3/cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN dpkg -i cuda-repo-ubuntu1704-9-0-local-cublas-performance-update-3_1.0-1_amd64-deb\nRUN apt-get update --quiet\nRUN DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes cuda\nCOPY /docker/cudnn-9.0-linux-x64-v7.tgz /opt/code/\nRUN cd /opt/code \\\n && tar -xvf ./cudnn-9.0-linux-x64-v7.tgz \\\n && cp cuda/include/cudnn.h /usr/local/cuda/include \\\n && cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 \\\n && chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN apt-get install --no-install-recommends python3-psutil python3-pyxb python3-lxml --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-pil --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-scipy --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-configargparse --no-install-suggests --yes\nRUN pip3 install numpy==1.15.4 Cython tk-tools matplotlib scikit-image opencv_python pydicom scikit-learn\nRUN pip3 uninstall h5py\nRUN apt-get install python3-h5py -y\nRUN pip3 install --upgrade tensorflow tensorflow-gpu\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#   since cmake has problems to find python3 and boost-python3\n#   RUN ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py36.so /usr/lib/x86_64-linux-gnu/libboost_python3.so\n#   fix the  qhull reentrant problem\n#   RUN pip uninstall -y scipy\n#  OpenBLAS with OpenMP\nRUN cd /opt \\\n && mkdir debsource \\\n && cd debsource \\\n && apt-get --no-install-recommends --no-install-suggests --yes build-dep libopenblas-base \\\n && apt-get install --no-install-recommends build-essential fakeroot devscripts --no-install-suggests --yes \\\n && apt-get source libopenblas-base \\\n && cd openblas-0.2.20+ds/ \\\n && sed -i \"s/NO_WARMUP=1/NO_WARMUP=1 OPENMP=1/g\" debian/rules \\\n && debchange -i \"Compiling with OpenMP support\" \\\n && debuild -us -uc -i -I \\\n && debi \\\n && cd /opt \\\n && rm -rf debsource\n#  Install Openblas\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so\nRUN rm /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 /usr/lib/x86_64-linux-gnu/libblas.so.3\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN rm /usr/lib/x86_64-linux-gnu/liblapack.so.3\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so\nRUN ln -s /usr/lib/x86_64-linux-gnu/openblas/liblapack.so.3 /usr/lib/x86_64-linux-gnu/liblapack.so.3\n#  ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#   BART\nRUN cd /opt/code \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n#   ceres\nRUN apt-get install libgoogle-glog-dev libeigen3-dev libsuitesparse-dev --yes\nRUN cd /opt \\\n && wget http://ceres-solver.org/ceres-solver-1.14.0.tar.gz \\\n && tar zxf ceres-solver-1.14.0.tar.gz \\\n && mkdir ceres-bin \\\n && cd ceres-bin \\\n && cmake ../ceres-solver-1.14.0 \\\n && make -j20 \\\n && make install\n#  Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.0/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#   Clean up packages.\n#  RUN  apt-get clean && \\\n#     rm -rf /var/lib/apt/lists/*\n","originalDockerfileUglifiedHash":"edb4fd33d966d0d03f7cc63393761763","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e809cbcddc5008b8bd11325529e59157364f35c9.dockerfile"}