{"seed":2541897427,"processedDockerfileHash":"79506125d9d5c7c1b5da8987748392b5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER Juergen Schackmann\n#   -----------------------------------------------------------------------------\n#   General environment variables\n#   -----------------------------------------------------------------------------\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   -----------------------------------------------------------------------------\n#   Install system basics\n#   -----------------------------------------------------------------------------\nRUN apt-get update -qqy \\\n && apt-get install --no-install-recommends apt-transport-https=1.2.35 python-software-properties=0.96.20.10 software-properties-common=0.96.20.10 curl=7.47.0-1ubuntu2.19 expect=5.45-7 zip=3.0-11 libsass-dev=3.3.4-1 git=1:2.7.4-0ubuntu1.10 sudo=1.8.16-0ubuntu1.10 -qqy --allow-unauthenticated\n#   -----------------------------------------------------------------------------\n#   Install Java\n#   -----------------------------------------------------------------------------\nARG JAVA_VERSION\nENV JAVA_VERSION=\"${JAVA_VERSION:-8}\"\nENV JAVA_HOME=\"${JAVA_HOME:-/usr/lib/jvm/java-${JAVA_VERSION}-oracle}\"\nRUN add-apt-repository ppa:webupd8team/java -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections \\\n && apt-get update -qqy \\\n && apt-get install --no-install-recommends oracle-java${JAVA_VERSION}-installer -qqy --allow-unauthenticated\n#   -----------------------------------------------------------------------------\n#   Install Android / Android SDK / Android SDK elements\n#   -----------------------------------------------------------------------------\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:/opt/tools\"\nARG ANDROID_PLATFORMS_VERSION\nENV ANDROID_PLATFORMS_VERSION=\"${ANDROID_PLATFORMS_VERSION:-25}\"\nARG ANDROID_BUILD_TOOLS_VERSION\nENV ANDROID_BUILD_TOOLS_VERSION=\"${ANDROID_BUILD_TOOLS_VERSION:-25.0.3}\"\nRUN echo ANDROID_HOME=${ANDROID_HOME} >> /etc/environment \\\n && dpkg --add-architecture i386 \\\n && apt-get update -qqy \\\n && apt-get install --no-install-recommends gradle=2.10-1 libc6-i386=2.23-0ubuntu11.3 lib32stdc++6=5.4.0-6ubuntu1~16.04.12 lib32gcc1=1:6.0.1-0ubuntu1 lib32ncurses5=6.0+20160213-1ubuntu1 lib32z1=1:1.2.8.dfsg-2ubuntu4.3 qemu-kvm=1:2.5+dfsg-5ubuntu10.51 kmod=22-1ubuntu5.2 -qqy --allow-unauthenticated \\\n && cd /opt \\\n && mkdir android-sdk-linux \\\n && cd android-sdk-linux \\\n && curl -SLo sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip \\\n && unzip sdk-tools-linux.zip \\\n && rm -f sdk-tools-linux.zip \\\n && chmod 777 ${ANDROID_HOME} -R \\\n && mkdir -p ${ANDROID_HOME}/licenses \\\n && echo 8933bad161af4178b1185d1a37fbf41ea5269c55 > ${ANDROID_HOME}/licenses/android-sdk-license \\\n && sdkmanager \"tools\" \\\n && sdkmanager \"platform-tools\" \\\n && sdkmanager \"platforms;android-${ANDROID_PLATFORMS_VERSION}\" \\\n && sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\"\n#   -----------------------------------------------------------------------------\n#   Install Node, NPM, yarn\n#   -----------------------------------------------------------------------------\nARG NODE_VERSION\nENV NODE_VERSION=\"${NODE_VERSION:-6.9.5} \"\nARG NPM_VERSION\nENV NPM_VERSION=\"${NPM_VERSION:-5.3.0}\"\nARG PACKAGE_MANAGER\nENV PACKAGE_MANAGER=\"${PACKAGE_MANAGER:-npm}\"\nENV NPM_CONFIG_LOGLEVEL=\"info\"\n#   gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"${key}\" ; done \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v${NODE_VERSION}-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v${NODE_VERSION}-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n && chmod 777 /usr/local/lib/node_modules -R \\\n && npm install npm@${NPM_VERSION} -g \\\n && if [ \"${PACKAGE_MANAGER}\" = \"yarn\" ] ; then curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -qqy \\\n && apt-get install --no-install-recommends yarn -qqy --allow-unauthenticated ; fi\n#   -----------------------------------------------------------------------------\n#   Clean up\n#   -----------------------------------------------------------------------------\nRUN apt-get clean \\\n && apt-get autoclean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   -----------------------------------------------------------------------------\n#   Create a non-root docker user to run this container\n#   -----------------------------------------------------------------------------\nARG USER\nENV USER=\"${USER:-ionic}\"\nRUN useradd --user-group --create-home --shell /bin/false ${USER} \\\n && echo \"${USER}:${USER}\" | chpasswd \\\n && adduser ${USER} sudo \\\n && adduser ${USER} root \\\n && chmod 770 / \\\n && usermod -a -G root ${USER} \\\n && mkdir /app \\\n && chown ${USER}:${USER} /app \\\n && chmod 777 /app \\\n && touch /image.config \\\n && chown ${USER}:${USER} /image.config \\\n && chmod 777 /image.config \\\n && mkdir /home/${USER}/.ionic \\\n && chown ${USER}:${USER} /home/${USER}/.ionic \\\n && chmod 777 /home/${USER}/.ionic \\\n && chmod 777 /usr/local/bin\n#  && chown ${USER}:${USER} ${ANDROID_HOME} -R\n#   -----------------------------------------------------------------------------\n#   Copy start.sh and set permissions \n#   -----------------------------------------------------------------------------\nCOPY start.sh /start.sh\nRUN chown ${USER}:${USER} /start.sh \\\n && chmod 777 /start.sh\n#   -----------------------------------------------------------------------------\n#   Switch the user of this image only now, because previous commands need to be \n#   run as root\n#   -----------------------------------------------------------------------------\nUSER ${USER}\n#   -----------------------------------------------------------------------------\n#   Install Global node modules\n#   -----------------------------------------------------------------------------\nARG CORDOVA_VERSION\nENV CORDOVA_VERSION=\"${CORDOVA_VERSION:-7.0.1}\"\nARG IONIC_VERSION\nENV IONIC_VERSION=\"${IONIC_VERSION:-3.12.0}\"\nARG TYPESCRIPT_VERSION\nENV TYPESCRIPT_VERSION=\"${TYPESCRIPT_VERSION:-2.3.4}\"\nARG GULP_VERSION\nENV GULP_VERSION=\"${GULP_VERSION}\"\nRUN if [ \"${PACKAGE_MANAGER}\" != \"yarn\" ] ; then export PACKAGE_MANAGER=\"npm\" \\\n && npm install cordova@\"${CORDOVA_VERSION}\" -g \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then npm install ionic@\"${IONIC_VERSION}\" -g ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then npm install typescript@\"${TYPESCRIPT_VERSION}\" -g ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then npm install gulp@\"${GULP_VERSION}\" -g ; fi ; else yarn global add cordova@\"${CORDOVA_VERSION}\" \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then yarn global add ionic@\"${IONIC_VERSION}\" ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then yarn global add typescript@\"${TYPESCRIPT_VERSION}\" ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then yarn global add gulp@\"${GULP_VERSION}\" ; fi ; fi \\\n && ${PACKAGE_MANAGER} cache clean --force\n#   -----------------------------------------------------------------------------\n#   Create the image.config file for the container to check the build \n#   configuration of this container later on \n#   -----------------------------------------------------------------------------\nRUN echo \"USER: ${USER}\\nJAVA_VERSION: ${JAVA_VERSION}\\nANDROID_PLATFORMS_VERSION: ${ANDROID_PLATFORMS_VERSION}\\nANDROID_BUILD_TOOLS_VERSION: ${ANDROID_BUILD_TOOLS_VERSION}\\nNODE_VERSION: ${NODE_VERSION}\\nNPM_VERSION: ${NPM_VERSION}\\nPACKAGE_MANAGER: ${PACKAGE_MANAGER}\\nCORDOVA_VERSION: ${CORDOVA_VERSION}\\nIONIC_VERSION: ${IONIC_VERSION}\\nTYPESCRIPT_VERSION: ${TYPESCRIPT_VERSION}\\nGULP_VERSION: ${GULP_VERSION:-none}\\n\" >> /image.config \\\n && cat /image.config\n#   -----------------------------------------------------------------------------\n#   Generate an Ionic default app (do this with root user, since we will not\n#   have permissions for /app otherwise), install the dependencies\n#   and add and build android platform\n#   -----------------------------------------------------------------------------\nRUN cd / \\\n && ionic config set -g backend legacy \\\n && ionic start app blank --type ionic-angular --no-deps --no-link --no-git \\\n && cd /app \\\n && ${PACKAGE_MANAGER} install \\\n && ionic cordova platform add android --no-resources \\\n && ionic cordova build android\n#   -----------------------------------------------------------------------------\n#   Just in case you are installing from private git repositories, enable git\n#   credentials\n#   -----------------------------------------------------------------------------\nRUN git config --global credential.helper store\n#   -----------------------------------------------------------------------------\n#   WORKDIR is the generic /app folder. All volume mounts of the actual project\n#   code need to be put into /app.\n#   -----------------------------------------------------------------------------\nWORKDIR /app\n#   -----------------------------------------------------------------------------\n#   The script start.sh installs package.json and puts a watch on it. This makes\n#   sure that the project has allways the latest dependencies installed.\n#   -----------------------------------------------------------------------------\nENTRYPOINT [\"/start.sh\"]\n#   -----------------------------------------------------------------------------\n#   After /start.sh the bash is called.\n#   -----------------------------------------------------------------------------\nCMD [\"ionic\", \"serve\", \"-b\", \"-p\", \"8100\", \"--address\", \"0.0.0.0\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER Juergen Schackmann\n#  -----------------------------------------------------------------------------\n#  General environment variables\n#  -----------------------------------------------------------------------------\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  -----------------------------------------------------------------------------\n#  Install system basics\n#  -----------------------------------------------------------------------------\nRUN apt-get update -qqy \\\n && apt-get install apt-transport-https python-software-properties software-properties-common curl expect zip libsass-dev git sudo -qqy --allow-unauthenticated\n#  -----------------------------------------------------------------------------\n#  Install Java\n#  -----------------------------------------------------------------------------\nARG JAVA_VERSION\nENV JAVA_VERSION=\"${JAVA_VERSION:-8}\"\nENV JAVA_HOME=\"${JAVA_HOME:-/usr/lib/jvm/java-${JAVA_VERSION}-oracle}\"\nRUN add-apt-repository ppa:webupd8team/java -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections \\\n && apt-get update -qqy \\\n && apt-get install oracle-java${JAVA_VERSION}-installer -qqy --allow-unauthenticated\n#  -----------------------------------------------------------------------------\n#  Install Android / Android SDK / Android SDK elements\n#  -----------------------------------------------------------------------------\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:/opt/tools\"\nARG ANDROID_PLATFORMS_VERSION\nENV ANDROID_PLATFORMS_VERSION=\"${ANDROID_PLATFORMS_VERSION:-25}\"\nARG ANDROID_BUILD_TOOLS_VERSION\nENV ANDROID_BUILD_TOOLS_VERSION=\"${ANDROID_BUILD_TOOLS_VERSION:-25.0.3}\"\nRUN echo ANDROID_HOME=${ANDROID_HOME} >> /etc/environment \\\n && dpkg --add-architecture i386 \\\n && apt-get update -qqy \\\n && apt-get install gradle libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 qemu-kvm kmod -qqy --allow-unauthenticated \\\n && cd /opt \\\n && mkdir android-sdk-linux \\\n && cd android-sdk-linux \\\n && curl -SLo sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip \\\n && unzip sdk-tools-linux.zip \\\n && rm -f sdk-tools-linux.zip \\\n && chmod 777 ${ANDROID_HOME} -R \\\n && mkdir -p ${ANDROID_HOME}/licenses \\\n && echo 8933bad161af4178b1185d1a37fbf41ea5269c55 > ${ANDROID_HOME}/licenses/android-sdk-license \\\n && sdkmanager \"tools\" \\\n && sdkmanager \"platform-tools\" \\\n && sdkmanager \"platforms;android-${ANDROID_PLATFORMS_VERSION}\" \\\n && sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\"\n#  -----------------------------------------------------------------------------\n#  Install Node, NPM, yarn\n#  -----------------------------------------------------------------------------\nARG NODE_VERSION\nENV NODE_VERSION=\"${NODE_VERSION:-6.9.5} \"\nARG NPM_VERSION\nENV NPM_VERSION=\"${NPM_VERSION:-5.3.0}\"\nARG PACKAGE_MANAGER\nENV PACKAGE_MANAGER=\"${PACKAGE_MANAGER:-npm}\"\nENV NPM_CONFIG_LOGLEVEL=\"info\"\n#  gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"${key}\" ; done \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v${NODE_VERSION}-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v${NODE_VERSION}-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n && chmod 777 /usr/local/lib/node_modules -R \\\n && npm install npm@${NPM_VERSION} -g \\\n && if [ \"${PACKAGE_MANAGER}\" = \"yarn\" ] ; then curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -qqy \\\n && apt-get install yarn -qqy --allow-unauthenticated ; fi\n#  -----------------------------------------------------------------------------\n#  Clean up\n#  -----------------------------------------------------------------------------\nRUN apt-get clean \\\n && apt-get autoclean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  -----------------------------------------------------------------------------\n#  Create a non-root docker user to run this container\n#  -----------------------------------------------------------------------------\nARG USER\nENV USER=\"${USER:-ionic}\"\nRUN useradd --user-group --create-home --shell /bin/false ${USER} \\\n && echo \"${USER}:${USER}\" | chpasswd \\\n && adduser ${USER} sudo \\\n && adduser ${USER} root \\\n && chmod 770 / \\\n && usermod -a -G root ${USER} \\\n && mkdir /app \\\n && chown ${USER}:${USER} /app \\\n && chmod 777 /app \\\n && touch /image.config \\\n && chown ${USER}:${USER} /image.config \\\n && chmod 777 /image.config \\\n && mkdir /home/${USER}/.ionic \\\n && chown ${USER}:${USER} /home/${USER}/.ionic \\\n && chmod 777 /home/${USER}/.ionic \\\n && chmod 777 /usr/local/bin\n# && chown ${USER}:${USER} ${ANDROID_HOME} -R\n#  -----------------------------------------------------------------------------\n#  Copy start.sh and set permissions \n#  -----------------------------------------------------------------------------\nCOPY start.sh /start.sh\nRUN chown ${USER}:${USER} /start.sh \\\n && chmod 777 /start.sh\n#  -----------------------------------------------------------------------------\n#  Switch the user of this image only now, because previous commands need to be \n#  run as root\n#  -----------------------------------------------------------------------------\nUSER ${USER}\n#  -----------------------------------------------------------------------------\n#  Install Global node modules\n#  -----------------------------------------------------------------------------\nARG CORDOVA_VERSION\nENV CORDOVA_VERSION=\"${CORDOVA_VERSION:-7.0.1}\"\nARG IONIC_VERSION\nENV IONIC_VERSION=\"${IONIC_VERSION:-3.12.0}\"\nARG TYPESCRIPT_VERSION\nENV TYPESCRIPT_VERSION=\"${TYPESCRIPT_VERSION:-2.3.4}\"\nARG GULP_VERSION\nENV GULP_VERSION=\"${GULP_VERSION}\"\nRUN if [ \"${PACKAGE_MANAGER}\" != \"yarn\" ] ; then export PACKAGE_MANAGER=\"npm\" \\\n && npm install cordova@\"${CORDOVA_VERSION}\" -g \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then npm install ionic@\"${IONIC_VERSION}\" -g ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then npm install typescript@\"${TYPESCRIPT_VERSION}\" -g ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then npm install gulp@\"${GULP_VERSION}\" -g ; fi ; else yarn global add cordova@\"${CORDOVA_VERSION}\" \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then yarn global add ionic@\"${IONIC_VERSION}\" ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then yarn global add typescript@\"${TYPESCRIPT_VERSION}\" ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then yarn global add gulp@\"${GULP_VERSION}\" ; fi ; fi \\\n && ${PACKAGE_MANAGER} cache clean --force\n#  -----------------------------------------------------------------------------\n#  Create the image.config file for the container to check the build \n#  configuration of this container later on \n#  -----------------------------------------------------------------------------\nRUN echo \"USER: ${USER}\\nJAVA_VERSION: ${JAVA_VERSION}\\nANDROID_PLATFORMS_VERSION: ${ANDROID_PLATFORMS_VERSION}\\nANDROID_BUILD_TOOLS_VERSION: ${ANDROID_BUILD_TOOLS_VERSION}\\nNODE_VERSION: ${NODE_VERSION}\\nNPM_VERSION: ${NPM_VERSION}\\nPACKAGE_MANAGER: ${PACKAGE_MANAGER}\\nCORDOVA_VERSION: ${CORDOVA_VERSION}\\nIONIC_VERSION: ${IONIC_VERSION}\\nTYPESCRIPT_VERSION: ${TYPESCRIPT_VERSION}\\nGULP_VERSION: ${GULP_VERSION:-none}\\n\" >> /image.config \\\n && cat /image.config\n#  -----------------------------------------------------------------------------\n#  Generate an Ionic default app (do this with root user, since we will not\n#  have permissions for /app otherwise), install the dependencies\n#  and add and build android platform\n#  -----------------------------------------------------------------------------\nRUN cd / \\\n && ionic config set -g backend legacy \\\n && ionic start app blank --type ionic-angular --no-deps --no-link --no-git \\\n && cd /app \\\n && ${PACKAGE_MANAGER} install \\\n && ionic cordova platform add android --no-resources \\\n && ionic cordova build android\n#  -----------------------------------------------------------------------------\n#  Just in case you are installing from private git repositories, enable git\n#  credentials\n#  -----------------------------------------------------------------------------\nRUN git config --global credential.helper store\n#  -----------------------------------------------------------------------------\n#  WORKDIR is the generic /app folder. All volume mounts of the actual project\n#  code need to be put into /app.\n#  -----------------------------------------------------------------------------\nWORKDIR /app\n#  -----------------------------------------------------------------------------\n#  The script start.sh installs package.json and puts a watch on it. This makes\n#  sure that the project has allways the latest dependencies installed.\n#  -----------------------------------------------------------------------------\nENTRYPOINT [\"/start.sh\"]\n#  -----------------------------------------------------------------------------\n#  After /start.sh the bash is called.\n#  -----------------------------------------------------------------------------\nCMD [\"ionic\", \"serve\", \"-b\", \"-p\", \"8100\", \"--address\", \"0.0.0.0\"]\n","injectedSmells":[],"originalDockerfileHash":"144d1deb3de05eca9a971d74978246d3","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER Juergen Schackmann\n#   -----------------------------------------------------------------------------\n#   General environment variables\n#   -----------------------------------------------------------------------------\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   -----------------------------------------------------------------------------\n#   Install system basics\n#   -----------------------------------------------------------------------------\nRUN apt-get update -qqy \\\n && apt-get install apt-transport-https python-software-properties software-properties-common curl expect zip libsass-dev git sudo -qqy --allow-unauthenticated\n#   -----------------------------------------------------------------------------\n#   Install Java\n#   -----------------------------------------------------------------------------\nARG JAVA_VERSION\nENV JAVA_VERSION=\"${JAVA_VERSION:-8}\"\nENV JAVA_HOME=\"${JAVA_HOME:-/usr/lib/jvm/java-${JAVA_VERSION}-oracle}\"\nRUN add-apt-repository ppa:webupd8team/java -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections \\\n && apt-get update -qqy \\\n && apt-get install oracle-java${JAVA_VERSION}-installer -qqy --allow-unauthenticated\n#   -----------------------------------------------------------------------------\n#   Install Android / Android SDK / Android SDK elements\n#   -----------------------------------------------------------------------------\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:/opt/tools\"\nARG ANDROID_PLATFORMS_VERSION\nENV ANDROID_PLATFORMS_VERSION=\"${ANDROID_PLATFORMS_VERSION:-25}\"\nARG ANDROID_BUILD_TOOLS_VERSION\nENV ANDROID_BUILD_TOOLS_VERSION=\"${ANDROID_BUILD_TOOLS_VERSION:-25.0.3}\"\nRUN echo ANDROID_HOME=${ANDROID_HOME} >> /etc/environment \\\n && dpkg --add-architecture i386 \\\n && apt-get update -qqy \\\n && apt-get install gradle libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 qemu-kvm kmod -qqy --allow-unauthenticated \\\n && cd /opt \\\n && mkdir android-sdk-linux \\\n && cd android-sdk-linux \\\n && curl -SLo sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip \\\n && unzip sdk-tools-linux.zip \\\n && rm -f sdk-tools-linux.zip \\\n && chmod 777 ${ANDROID_HOME} -R \\\n && mkdir -p ${ANDROID_HOME}/licenses \\\n && echo 8933bad161af4178b1185d1a37fbf41ea5269c55 > ${ANDROID_HOME}/licenses/android-sdk-license \\\n && sdkmanager \"tools\" \\\n && sdkmanager \"platform-tools\" \\\n && sdkmanager \"platforms;android-${ANDROID_PLATFORMS_VERSION}\" \\\n && sdkmanager \"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\"\n#   -----------------------------------------------------------------------------\n#   Install Node, NPM, yarn\n#   -----------------------------------------------------------------------------\nARG NODE_VERSION\nENV NODE_VERSION=\"${NODE_VERSION:-6.9.5} \"\nARG NPM_VERSION\nENV NPM_VERSION=\"${NPM_VERSION:-5.3.0}\"\nARG PACKAGE_MANAGER\nENV PACKAGE_MANAGER=\"${PACKAGE_MANAGER:-npm}\"\nENV NPM_CONFIG_LOGLEVEL=\"info\"\n#   gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"${key}\" ; done \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v${NODE_VERSION}-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v${NODE_VERSION}-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs \\\n && chmod 777 /usr/local/lib/node_modules -R \\\n && npm install npm@${NPM_VERSION} -g \\\n && if [ \"${PACKAGE_MANAGER}\" = \"yarn\" ] ; then curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -qqy \\\n && apt-get install yarn -qqy --allow-unauthenticated ; fi\n#   -----------------------------------------------------------------------------\n#   Clean up\n#   -----------------------------------------------------------------------------\nRUN apt-get clean \\\n && apt-get autoclean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   -----------------------------------------------------------------------------\n#   Create a non-root docker user to run this container\n#   -----------------------------------------------------------------------------\nARG USER\nENV USER=\"${USER:-ionic}\"\nRUN useradd --user-group --create-home --shell /bin/false ${USER} \\\n && echo \"${USER}:${USER}\" | chpasswd \\\n && adduser ${USER} sudo \\\n && adduser ${USER} root \\\n && chmod 770 / \\\n && usermod -a -G root ${USER} \\\n && mkdir /app \\\n && chown ${USER}:${USER} /app \\\n && chmod 777 /app \\\n && touch /image.config \\\n && chown ${USER}:${USER} /image.config \\\n && chmod 777 /image.config \\\n && mkdir /home/${USER}/.ionic \\\n && chown ${USER}:${USER} /home/${USER}/.ionic \\\n && chmod 777 /home/${USER}/.ionic \\\n && chmod 777 /usr/local/bin\n#  && chown ${USER}:${USER} ${ANDROID_HOME} -R\n#   -----------------------------------------------------------------------------\n#   Copy start.sh and set permissions \n#   -----------------------------------------------------------------------------\nCOPY start.sh /start.sh\nRUN chown ${USER}:${USER} /start.sh \\\n && chmod 777 /start.sh\n#   -----------------------------------------------------------------------------\n#   Switch the user of this image only now, because previous commands need to be \n#   run as root\n#   -----------------------------------------------------------------------------\nUSER ${USER}\n#   -----------------------------------------------------------------------------\n#   Install Global node modules\n#   -----------------------------------------------------------------------------\nARG CORDOVA_VERSION\nENV CORDOVA_VERSION=\"${CORDOVA_VERSION:-7.0.1}\"\nARG IONIC_VERSION\nENV IONIC_VERSION=\"${IONIC_VERSION:-3.12.0}\"\nARG TYPESCRIPT_VERSION\nENV TYPESCRIPT_VERSION=\"${TYPESCRIPT_VERSION:-2.3.4}\"\nARG GULP_VERSION\nENV GULP_VERSION=\"${GULP_VERSION}\"\nRUN if [ \"${PACKAGE_MANAGER}\" != \"yarn\" ] ; then export PACKAGE_MANAGER=\"npm\" \\\n && npm install cordova@\"${CORDOVA_VERSION}\" -g \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then npm install ionic@\"${IONIC_VERSION}\" -g ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then npm install typescript@\"${TYPESCRIPT_VERSION}\" -g ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then npm install gulp@\"${GULP_VERSION}\" -g ; fi ; else yarn global add cordova@\"${CORDOVA_VERSION}\" \\\n && if [ -n \"${IONIC_VERSION}\" ] ; then yarn global add ionic@\"${IONIC_VERSION}\" ; fi \\\n && if [ -n \"${TYPESCRIPT_VERSION}\" ] ; then yarn global add typescript@\"${TYPESCRIPT_VERSION}\" ; fi \\\n && if [ -n \"${GULP_VERSION}\" ] ; then yarn global add gulp@\"${GULP_VERSION}\" ; fi ; fi \\\n && ${PACKAGE_MANAGER} cache clean --force\n#   -----------------------------------------------------------------------------\n#   Create the image.config file for the container to check the build \n#   configuration of this container later on \n#   -----------------------------------------------------------------------------\nRUN echo \"USER: ${USER}\\nJAVA_VERSION: ${JAVA_VERSION}\\nANDROID_PLATFORMS_VERSION: ${ANDROID_PLATFORMS_VERSION}\\nANDROID_BUILD_TOOLS_VERSION: ${ANDROID_BUILD_TOOLS_VERSION}\\nNODE_VERSION: ${NODE_VERSION}\\nNPM_VERSION: ${NPM_VERSION}\\nPACKAGE_MANAGER: ${PACKAGE_MANAGER}\\nCORDOVA_VERSION: ${CORDOVA_VERSION}\\nIONIC_VERSION: ${IONIC_VERSION}\\nTYPESCRIPT_VERSION: ${TYPESCRIPT_VERSION}\\nGULP_VERSION: ${GULP_VERSION:-none}\\n\" >> /image.config \\\n && cat /image.config\n#   -----------------------------------------------------------------------------\n#   Generate an Ionic default app (do this with root user, since we will not\n#   have permissions for /app otherwise), install the dependencies\n#   and add and build android platform\n#   -----------------------------------------------------------------------------\nRUN cd / \\\n && ionic config set -g backend legacy \\\n && ionic start app blank --type ionic-angular --no-deps --no-link --no-git \\\n && cd /app \\\n && ${PACKAGE_MANAGER} install \\\n && ionic cordova platform add android --no-resources \\\n && ionic cordova build android\n#   -----------------------------------------------------------------------------\n#   Just in case you are installing from private git repositories, enable git\n#   credentials\n#   -----------------------------------------------------------------------------\nRUN git config --global credential.helper store\n#   -----------------------------------------------------------------------------\n#   WORKDIR is the generic /app folder. All volume mounts of the actual project\n#   code need to be put into /app.\n#   -----------------------------------------------------------------------------\nWORKDIR /app\n#   -----------------------------------------------------------------------------\n#   The script start.sh installs package.json and puts a watch on it. This makes\n#   sure that the project has allways the latest dependencies installed.\n#   -----------------------------------------------------------------------------\nENTRYPOINT [\"/start.sh\"]\n#   -----------------------------------------------------------------------------\n#   After /start.sh the bash is called.\n#   -----------------------------------------------------------------------------\nCMD [\"ionic\", \"serve\", \"-b\", \"-p\", \"8100\", \"--address\", \"0.0.0.0\"]\n","originalDockerfileUglifiedHash":"0e735ee08763c436f764ce2f39db0f20","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6e0783b54fdcfd1e09782e08a2946a15416a19bc.dockerfile"}