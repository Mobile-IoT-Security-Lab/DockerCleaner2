{"seed":2239832438,"processedDockerfileHash":"67365977503e97f343e9468f59b2560a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2015 Google Inc. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM debian:jessie\n#   Install the dependencies.\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends mysql-client libmysqlclient-dev apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql php5-gd php5-dev php5-curl php-apc php5-cli php5-json php5-cgi git curl supervisor python-pip mercurial -y -qq \\\n && apt-get clean \\\n && pip install Pygments==2.15.0\n#   Setup Apache and Supervisord\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nRUN mkdir -p /var/log/supervisor \\\n && a2enmod rewrite \\\n && sed -i -e 's/80/8080/' /etc/apache2/ports.conf \\\n && rm -f /etc/apache2/sites-enabled/000-default \\\n && echo \"apc.stat = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"apc.slam_defense = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"opcache.validate_timestamps = 0\" >> /etc/php5/apache2/php.ini \\\n && sed -i -e \"s/post_max_size = 8M/post_max_size = 32M/\" /etc/php5/apache2/php.ini \\\n && ulimit -c 10000\n#   Add Phabricator and all of its dependencies from the frozen versions\n#   in the corresponding git submodules.\nCOPY third_party/libphutil /opt/libphutil/\nCOPY third_party/arcanist /opt/arcanist/\nCOPY third_party/phabricator /opt/phabricator/\n#   Setup the mail implementation adapter for App Engine\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /home/vmagent/python-runtime.tar.gz https://github.com/GoogleCloudPlatform/appengine-python-vm-runtime/releases/download/v0.1/appengine-python-vm-runtime-0.1.tar.gz\nCOPY ./PhabricatorMailImplementationPythonCLIAdapter.php /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php\nCOPY ./send_mail.py /opt/send_mail.py\n#   TODO(ckerur): Split the configuration of the mail implementation adapter away from the compile_time_config.sh script,\n#   since this is only specific to AppEngine; not the base commands needed. Then we can move the below command after the base Phabricator setup\nRUN pip install pip==23.1 --upgrade > =6.1.1 \\\n && pip install click==8.1.3 \\\n && pip install /home/vmagent/python-runtime.tar.gz \\\n && chmod +x /opt/send_mail.py \\\n && chmod +x /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php \\\n && apt-get install --no-install-recommends build-essential -y \\\n && /opt/arcanist/bin/arc liberate /opt/phabricator/\n#   Configure the base Phabricator setup.\nCOPY phabricator.conf /etc/apache2/sites-available/phabricator.conf\nCOPY ./compile_time_config.sh /opt/compile_time_config.sh\nRUN ln -s /etc/apache2/sites-available/phabricator.conf /etc/apache2/sites-enabled/phabricator.conf \\\n && mkdir -p /opt/phabricator/webroot/_ah \\\n && echo ok > /opt/phabricator/webroot/_ah/health \\\n && echo ok > /opt/phabricator/webroot/_ah/stop \\\n && chmod a+x /opt \\\n && chmod a+x /opt/phabricator \\\n && chmod -R a+rx /opt/phabricator/webroot/ \\\n && mkdir -p /var/tmp/phd/pid \\\n && mkdir -p /var/repo \\\n && chown www-data:www-data /var/repo \\\n && mkdir -p /usr/local/apache/logs \\\n && chown www-data:www-data /usr/local/apache/logs \\\n && chmod +x /opt/compile_time_config.sh\nRUN /opt/compile_time_config.sh\n#   Configure the external Docker environment, including environment variables.\nEXPOSE 8080/tcp\nENV SQL_INSTANCE=\"phabricator\"\nENV PHABRICATOR_BASE_URI=\"PHABRICATOR_BASE_URI\"\nENV ALTERNATE_FILE_DOMAIN=\"ALTERNATE_FILE_DOMAIN\"\n#   Install the Google Cloud SDK.\nRUN apt-get install --no-install-recommends unzip \\\n && curl -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip \\\n && echo PATH=/google/google-cloud-sdk/bin:$PATH >> /etc/profile \\\n && /google/google-cloud-sdk/install.sh --rc-path=/etc/bash.bashrc --disable-installation-options \\\n && /google/google-cloud-sdk/bin/gcloud config set --scope installation component_manager/disable_update_check True\n#   Support Gerrit\nCOPY git-credential-gerrit.sh /google/google-cloud-sdk/bin/git-credential-gerrit.sh\nRUN chmod +x /google/google-cloud-sdk/bin/git-credential-gerrit.sh\n#   Tell git to use our installed credential helpers for Gerrit and Cloud Repos.\nCOPY gitconfig /etc/gitconfig\nRUN ln -s /google/google-cloud-sdk/bin/git-credential-gcloud.sh /usr/local/bin/git-credential-gcloud.sh \\\n && ln -s /google/google-cloud-sdk/bin/git-credential-gerrit.sh /usr/local/bin/git-credential-gerrit.sh\n#   Apply our customizations to the Phabricator environment.\nCOPY create_bot.php /opt/phabricator/scripts/user/\nCOPY ./.arcrc /opt/.arcrc\nCOPY ./run_time_config.sh /opt/run_time_config.sh\nCOPY ./setup_arcrc.sh /opt/setup_arcrc.sh\nCOPY ./backup.sh /opt/backup.sh\nCOPY ./kill-hanging-git-commands.sh /opt/kill-hanging-git-commands.sh\nCOPY ./shutdown-check.sh /opt/shutdown-check.sh\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /opt/go1.4.2.linux-amd64.tar.gz https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz\nRUN chmod +x /opt/run_time_config.sh \\\n && chmod +x /opt/setup_arcrc.sh \\\n && chmod ug+x /opt/phabricator/scripts/user/create_bot.php \\\n && ln -s /opt/arcanist/bin/arc /usr/local/bin/arc \\\n && tar -C /usr/local -xzf /opt/go1.4.2.linux-amd64.tar.gz \\\n && export PATH=${PATH}:/usr/local/go/bin/ \\\n && export GOPATH=/opt/ \\\n && go get github.com/google/git-phabricator-mirror/git-phabricator-mirror\n#   Install uuidgen and jq, so that the run-time setup script can setup the Cloud SQL instance.\nRUN apt-get install --no-install-recommends uuid-runtime jq -y\nCMD [\"/bin/sh\", \"-c\", \"echo\", \"One\", \"time\", \"config\", \"&&\", \"/opt/run_time_config.sh\", \"&&\", \"echo\", \"Upgrading\", \"the\", \"SQL\", \"database\", \"&&\", \"/opt/phabricator/bin/storage\", \"upgrade\", \"--force\", \"&&\", \"/usr/bin/supervisord\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2015 Google Inc. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM debian:jessie\n#  Install the dependencies.\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends mysql-client libmysqlclient-dev apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql php5-gd php5-dev php5-curl php-apc php5-cli php5-json php5-cgi git curl supervisor python-pip mercurial -y -qq \\\n && apt-get clean \\\n && pip install Pygments\n#  Setup Apache and Supervisord\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nRUN mkdir -p /var/log/supervisor \\\n && a2enmod rewrite \\\n && sed -i -e 's/80/8080/' /etc/apache2/ports.conf \\\n && rm -f /etc/apache2/sites-enabled/000-default \\\n && echo \"apc.stat = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"apc.slam_defense = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"opcache.validate_timestamps = 0\" >> /etc/php5/apache2/php.ini \\\n && sed -i -e \"s/post_max_size = 8M/post_max_size = 32M/\" /etc/php5/apache2/php.ini \\\n && ulimit -c 10000\n#  Add Phabricator and all of its dependencies from the frozen versions\n#  in the corresponding git submodules.\nADD third_party/libphutil /opt/libphutil/\nADD third_party/arcanist /opt/arcanist/\nADD third_party/phabricator /opt/phabricator/\n#  Setup the mail implementation adapter for App Engine\nADD https://github.com/GoogleCloudPlatform/appengine-python-vm-runtime/releases/download/v0.1/appengine-python-vm-runtime-0.1.tar.gz /home/vmagent/python-runtime.tar.gz\nADD ./PhabricatorMailImplementationPythonCLIAdapter.php /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php\nADD ./send_mail.py /opt/send_mail.py\n#  TODO(ckerur): Split the configuration of the mail implementation adapter away from the compile_time_config.sh script,\n#  since this is only specific to AppEngine; not the base commands needed. Then we can move the below command after the base Phabricator setup\nRUN pip install pip --upgrade > =6.1.1 \\\n && pip install click \\\n && pip install /home/vmagent/python-runtime.tar.gz \\\n && chmod +x /opt/send_mail.py \\\n && chmod +x /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php \\\n && apt-get install build-essential -y \\\n && /opt/arcanist/bin/arc liberate /opt/phabricator/\n#  Configure the base Phabricator setup.\nADD phabricator.conf /etc/apache2/sites-available/phabricator.conf\nADD ./compile_time_config.sh /opt/compile_time_config.sh\nRUN ln -s /etc/apache2/sites-available/phabricator.conf /etc/apache2/sites-enabled/phabricator.conf \\\n && mkdir -p /opt/phabricator/webroot/_ah \\\n && echo ok > /opt/phabricator/webroot/_ah/health \\\n && echo ok > /opt/phabricator/webroot/_ah/stop \\\n && chmod a+x /opt \\\n && chmod a+x /opt/phabricator \\\n && chmod -R a+rx /opt/phabricator/webroot/ \\\n && mkdir -p /var/tmp/phd/pid \\\n && mkdir -p /var/repo \\\n && chown www-data:www-data /var/repo \\\n && mkdir -p /usr/local/apache/logs \\\n && chown www-data:www-data /usr/local/apache/logs \\\n && chmod +x /opt/compile_time_config.sh\nRUN /opt/compile_time_config.sh\n#  Configure the external Docker environment, including environment variables.\nEXPOSE 8080/tcp\nENV SQL_INSTANCE=\"phabricator\"\nENV PHABRICATOR_BASE_URI=\"PHABRICATOR_BASE_URI\"\nENV ALTERNATE_FILE_DOMAIN=\"ALTERNATE_FILE_DOMAIN\"\n#  Install the Google Cloud SDK.\nRUN apt-get install unzip \\\n && curl -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip \\\n && echo PATH=/google/google-cloud-sdk/bin:$PATH >> /etc/profile \\\n && /google/google-cloud-sdk/install.sh --rc-path=/etc/bash.bashrc --disable-installation-options \\\n && /google/google-cloud-sdk/bin/gcloud config set --scope installation component_manager/disable_update_check True\n#  Support Gerrit\nADD git-credential-gerrit.sh /google/google-cloud-sdk/bin/git-credential-gerrit.sh\nRUN chmod +x /google/google-cloud-sdk/bin/git-credential-gerrit.sh\n#  Tell git to use our installed credential helpers for Gerrit and Cloud Repos.\nADD gitconfig /etc/gitconfig\nRUN ln -s /google/google-cloud-sdk/bin/git-credential-gcloud.sh /usr/local/bin/git-credential-gcloud.sh \\\n && ln -s /google/google-cloud-sdk/bin/git-credential-gerrit.sh /usr/local/bin/git-credential-gerrit.sh\n#  Apply our customizations to the Phabricator environment.\nADD create_bot.php /opt/phabricator/scripts/user/\nADD ./.arcrc /opt/.arcrc\nADD ./run_time_config.sh /opt/run_time_config.sh\nADD ./setup_arcrc.sh /opt/setup_arcrc.sh\nADD ./backup.sh /opt/backup.sh\nADD ./kill-hanging-git-commands.sh /opt/kill-hanging-git-commands.sh\nADD ./shutdown-check.sh /opt/shutdown-check.sh\nADD https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz /opt/go1.4.2.linux-amd64.tar.gz\nRUN chmod +x /opt/run_time_config.sh \\\n && chmod +x /opt/setup_arcrc.sh \\\n && chmod ug+x /opt/phabricator/scripts/user/create_bot.php \\\n && ln -s /opt/arcanist/bin/arc /usr/local/bin/arc \\\n && tar -C /usr/local -xzf /opt/go1.4.2.linux-amd64.tar.gz \\\n && export PATH=${PATH}:/usr/local/go/bin/ \\\n && export GOPATH=/opt/ \\\n && go get github.com/google/git-phabricator-mirror/git-phabricator-mirror\n#  Install uuidgen and jq, so that the run-time setup script can setup the Cloud SQL instance.\nRUN apt-get install --no-install-recommends uuid-runtime jq -y\nCMD [\"/bin/sh\", \"-c\", \"echo\", \"One\", \"time\", \"config\", \"&&\", \"/opt/run_time_config.sh\", \"&&\", \"echo\", \"Upgrading\", \"the\", \"SQL\", \"database\", \"&&\", \"/opt/phabricator/bin/storage\", \"upgrade\", \"--force\", \"&&\", \"/usr/bin/supervisord\"]\n","injectedSmells":[],"originalDockerfileHash":"ebcf409057489854b9706ac085812176","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2015 Google Inc. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM debian:jessie\n#   Install the dependencies.\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends mysql-client libmysqlclient-dev apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql php5-gd php5-dev php5-curl php-apc php5-cli php5-json php5-cgi git curl supervisor python-pip mercurial -y -qq \\\n && apt-get clean \\\n && pip install Pygments\n#   Setup Apache and Supervisord\nADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nRUN mkdir -p /var/log/supervisor \\\n && a2enmod rewrite \\\n && sed -i -e 's/80/8080/' /etc/apache2/ports.conf \\\n && rm -f /etc/apache2/sites-enabled/000-default \\\n && echo \"apc.stat = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"apc.slam_defense = 0\" >> /etc/php5/apache2/php.ini \\\n && echo \"opcache.validate_timestamps = 0\" >> /etc/php5/apache2/php.ini \\\n && sed -i -e \"s/post_max_size = 8M/post_max_size = 32M/\" /etc/php5/apache2/php.ini \\\n && ulimit -c 10000\n#   Add Phabricator and all of its dependencies from the frozen versions\n#   in the corresponding git submodules.\nADD third_party/libphutil /opt/libphutil/\nADD third_party/arcanist /opt/arcanist/\nADD third_party/phabricator /opt/phabricator/\n#   Setup the mail implementation adapter for App Engine\nADD https://github.com/GoogleCloudPlatform/appengine-python-vm-runtime/releases/download/v0.1/appengine-python-vm-runtime-0.1.tar.gz /home/vmagent/python-runtime.tar.gz\nADD ./PhabricatorMailImplementationPythonCLIAdapter.php /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php\nADD ./send_mail.py /opt/send_mail.py\n#   TODO(ckerur): Split the configuration of the mail implementation adapter away from the compile_time_config.sh script,\n#   since this is only specific to AppEngine; not the base commands needed. Then we can move the below command after the base Phabricator setup\nRUN pip install pip --upgrade > =6.1.1 \\\n && pip install click \\\n && pip install /home/vmagent/python-runtime.tar.gz \\\n && chmod +x /opt/send_mail.py \\\n && chmod +x /opt/phabricator/src/applications/metamta/adapter/PhabricatorMailImplementationPythonCLIAdapter.php \\\n && apt-get install build-essential -y \\\n && /opt/arcanist/bin/arc liberate /opt/phabricator/\n#   Configure the base Phabricator setup.\nADD phabricator.conf /etc/apache2/sites-available/phabricator.conf\nADD ./compile_time_config.sh /opt/compile_time_config.sh\nRUN ln -s /etc/apache2/sites-available/phabricator.conf /etc/apache2/sites-enabled/phabricator.conf \\\n && mkdir -p /opt/phabricator/webroot/_ah \\\n && echo ok > /opt/phabricator/webroot/_ah/health \\\n && echo ok > /opt/phabricator/webroot/_ah/stop \\\n && chmod a+x /opt \\\n && chmod a+x /opt/phabricator \\\n && chmod -R a+rx /opt/phabricator/webroot/ \\\n && mkdir -p /var/tmp/phd/pid \\\n && mkdir -p /var/repo \\\n && chown www-data:www-data /var/repo \\\n && mkdir -p /usr/local/apache/logs \\\n && chown www-data:www-data /usr/local/apache/logs \\\n && chmod +x /opt/compile_time_config.sh\nRUN /opt/compile_time_config.sh\n#   Configure the external Docker environment, including environment variables.\nEXPOSE 8080/tcp\nENV SQL_INSTANCE=\"phabricator\"\nENV PHABRICATOR_BASE_URI=\"PHABRICATOR_BASE_URI\"\nENV ALTERNATE_FILE_DOMAIN=\"ALTERNATE_FILE_DOMAIN\"\n#   Install the Google Cloud SDK.\nRUN apt-get install unzip \\\n && curl -O https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip \\\n && echo PATH=/google/google-cloud-sdk/bin:$PATH >> /etc/profile \\\n && /google/google-cloud-sdk/install.sh --rc-path=/etc/bash.bashrc --disable-installation-options \\\n && /google/google-cloud-sdk/bin/gcloud config set --scope installation component_manager/disable_update_check True\n#   Support Gerrit\nADD git-credential-gerrit.sh /google/google-cloud-sdk/bin/git-credential-gerrit.sh\nRUN chmod +x /google/google-cloud-sdk/bin/git-credential-gerrit.sh\n#   Tell git to use our installed credential helpers for Gerrit and Cloud Repos.\nADD gitconfig /etc/gitconfig\nRUN ln -s /google/google-cloud-sdk/bin/git-credential-gcloud.sh /usr/local/bin/git-credential-gcloud.sh \\\n && ln -s /google/google-cloud-sdk/bin/git-credential-gerrit.sh /usr/local/bin/git-credential-gerrit.sh\n#   Apply our customizations to the Phabricator environment.\nADD create_bot.php /opt/phabricator/scripts/user/\nADD ./.arcrc /opt/.arcrc\nADD ./run_time_config.sh /opt/run_time_config.sh\nADD ./setup_arcrc.sh /opt/setup_arcrc.sh\nADD ./backup.sh /opt/backup.sh\nADD ./kill-hanging-git-commands.sh /opt/kill-hanging-git-commands.sh\nADD ./shutdown-check.sh /opt/shutdown-check.sh\nADD https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz /opt/go1.4.2.linux-amd64.tar.gz\nRUN chmod +x /opt/run_time_config.sh \\\n && chmod +x /opt/setup_arcrc.sh \\\n && chmod ug+x /opt/phabricator/scripts/user/create_bot.php \\\n && ln -s /opt/arcanist/bin/arc /usr/local/bin/arc \\\n && tar -C /usr/local -xzf /opt/go1.4.2.linux-amd64.tar.gz \\\n && export PATH=${PATH}:/usr/local/go/bin/ \\\n && export GOPATH=/opt/ \\\n && go get github.com/google/git-phabricator-mirror/git-phabricator-mirror\n#   Install uuidgen and jq, so that the run-time setup script can setup the Cloud SQL instance.\nRUN apt-get install --no-install-recommends uuid-runtime jq -y\nCMD [\"/bin/sh\", \"-c\", \"echo\", \"One\", \"time\", \"config\", \"&&\", \"/opt/run_time_config.sh\", \"&&\", \"echo\", \"Upgrading\", \"the\", \"SQL\", \"database\", \"&&\", \"/opt/phabricator/bin/storage\", \"upgrade\", \"--force\", \"&&\", \"/usr/bin/supervisord\"]\n","originalDockerfileUglifiedHash":"c153c9356beb6fc23582e9baabc42797","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a89b6db6f694aa52beb75b7d95f0d02f1ed42afb.dockerfile"}