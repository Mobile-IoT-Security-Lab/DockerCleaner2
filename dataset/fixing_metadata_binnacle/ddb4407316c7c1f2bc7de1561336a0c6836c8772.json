{"seed":2801231513,"processedDockerfileHash":"2968c63c95426a8c075516a28e2b182c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Usage of Docker image.\n#\n#   While building:\n#   --build-arg DISK_IMAGE=<sdimg>\n#         image to add to the Docker image\n#   --build-arg BOOTLOADER=<u-boot.elf>\n#         U-Boot ELF image to add to Docker image.\n#\n#   While launching:\n#   -v $BUILDDIR:/mnt/build:ro\n#         Use BUILDDIR from a poky build as image input.\n#   -v <config-dir>:/mnt/config:ro\n#         Use server.crt and/or artifact-verify-key.pem from config-dir, if it exists.\n#   -e SERVER_URL=https://whatever.mender.io\n#         Use SERVER_URL as server address for client.\n#   -e TENANT_TOKEN=<token>\n#         Use token as tenant token for client.\nFROM alpine:3.6\n#   Install packages\nRUN apk update \\\n && apk upgrade \\\n && apk add util-linux=2.28.2-r2 bash=4.3.48-r1 e2fsprogs-extra=1.43.4-r0 python3=3.6.8-r0 \\\n && rm -rf /var/cache/apk/*\n#   Install qemu from source\nRUN apk update \\\n && apk add alsa-lib-dev=1.1.3-r0 bison=3.0.4-r0 curl-dev=7.61.1-r2 flex=2.6.4-r1 glib-dev=2.52.1-r0 glib-static=2.52.1-r0 gnutls-dev=3.5.13-r0 gtk+3.0-dev=3.22.12-r0 libaio-dev=0.3.110-r0 libcap-dev=2.25-r1 libcap-ng-dev=0.7.8-r0 libjpeg-turbo-dev=1.5.3-r2 libnfs-dev=1.11.0-r0 libpng-dev=1.6.37-r0 libssh2-dev=1.8.2-r0 libusb-dev=1.0.21-r0 linux-headers=4.4.6-r2 lzo-dev=2.10-r0 ncurses-dev=6.0_p20171125-r1 paxmark=0.10-r0 snappy-dev=1.1.4-r1 spice-dev=0.13.3-r4 texinfo=6.3-r0 usbredir-dev=0.7-r2 util-linux-dev=2.28.2-r2 vde2-dev=2.3.2-r7 xfsprogs-dev=4.5.0-r1 zlib-dev=1.2.11-r0 git=2.13.7-r2 alpine-sdk=0.5-r0 --virtual build-dependencies \\\n && git clone --progress -b qemu-system-reset-race-fix git://github.com/mendersoftware/qemu.git \\\n && cd qemu \\\n && git submodule update --init dtc \\\n && ./configure --target-list=arm-softmmu --disable-werror --prefix=/usr --localstatedir=/var --sysconfdir=/etc --libexecdir=/usr/lib/qemu --disable-glusterfs --disable-debug-info --disable-bsd-user --disable-werror --disable-sdl --disable-xen --disable-attr --disable-gtk \\\n && make install -j4 V=1 \\\n && cd .. \\\n && rm -rf qemu \\\n && apk del build-dependencies \\\n && apk add so:libaio.so.1 so:libasound.so.2 so:libbz2.so.1 so:libc.musl-x86_64.so.1 so:libcurl.so.4 so:libepoxy.so.0 so:libgbm.so.1 so:libgcc_s.so.1 so:libglib-2.0.so.0 so:libgnutls.so.30 so:libjpeg.so.8 so:liblzo2.so.2 so:libncursesw.so.6 so:libnettle.so.6 so:libnfs.so.8 so:libpixman-1.so.0 so:libpng16.so.16 so:libsnappy.so.1 so:libspice-server.so.1 so:libssh2.so.1 so:libstdc++.so.6 so:libusb-1.0.so.0 so:libusbredirparser.so.1 so:libvdeplug.so.3 so:libz.so.1 rm /var/cache/apk/* -rf\nRUN echo vexpress-qemu > /machine.txt\nARG DISK_IMAGE=scripts/docker/empty-file\nARG BOOTLOADER=scripts/docker/empty-file\nCOPY $BOOTLOADER ./u-boot.elf\nCOPY $DISK_IMAGE .\nCOPY scripts/mender-qemu ./\nCOPY scripts/docker/entrypoint.sh ./\nCOPY scripts/docker/setup-mender-configuration.py ./\nCOPY env.txt ./\n#   Delete images if they are empty. This is to save space if the artifacts are\n#   mounted on /mnt/build instead.\nRUN if [ `stat -c %s core-image-full-cmdline-vexpress-qemu.sdimg ` -eq 0 ] ; then rm -f core-image-full-cmdline-vexpress-qemu.sdimg ; fi\nRUN if [ `stat -c %s u-boot.elf ` -eq 0 ] ; then rm -f u-boot.elf ; fi\nRUN chmod +x entrypoint.sh mender-qemu\nEXPOSE 8822/tcp\nENTRYPOINT [\"./entrypoint.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Usage of Docker image.\n#\n#  While building:\n#  --build-arg DISK_IMAGE=<sdimg>\n#        image to add to the Docker image\n#  --build-arg BOOTLOADER=<u-boot.elf>\n#        U-Boot ELF image to add to Docker image.\n#\n#  While launching:\n#  -v $BUILDDIR:/mnt/build:ro\n#        Use BUILDDIR from a poky build as image input.\n#  -v <config-dir>:/mnt/config:ro\n#        Use server.crt and/or artifact-verify-key.pem from config-dir, if it exists.\n#  -e SERVER_URL=https://whatever.mender.io\n#        Use SERVER_URL as server address for client.\n#  -e TENANT_TOKEN=<token>\n#        Use token as tenant token for client.\nFROM alpine:3.6\n#  Install packages\nRUN apk update \\\n && apk upgrade \\\n && apk add util-linux bash e2fsprogs-extra python3 \\\n && rm -rf /var/cache/apk/*\n#  Install qemu from source\nRUN apk update \\\n && apk add --virtual build-dependencies alsa-lib-dev bison curl-dev flex glib-dev glib-static gnutls-dev gtk+3.0-dev libaio-dev libcap-dev libcap-ng-dev libjpeg-turbo-dev libnfs-dev libpng-dev libssh2-dev libusb-dev linux-headers lzo-dev ncurses-dev paxmark snappy-dev spice-dev texinfo usbredir-dev util-linux-dev vde2-dev xfsprogs-dev zlib-dev git alpine-sdk \\\n && git clone --progress -b qemu-system-reset-race-fix git://github.com/mendersoftware/qemu.git \\\n && cd qemu \\\n && git submodule update --init dtc \\\n && ./configure --target-list=arm-softmmu --disable-werror --prefix=/usr --localstatedir=/var --sysconfdir=/etc --libexecdir=/usr/lib/qemu --disable-glusterfs --disable-debug-info --disable-bsd-user --disable-werror --disable-sdl --disable-xen --disable-attr --disable-gtk \\\n && make install -j4 V=1 \\\n && cd .. \\\n && rm -rf qemu \\\n && apk del build-dependencies \\\n && apk add so:libaio.so.1 so:libasound.so.2 so:libbz2.so.1 so:libc.musl-x86_64.so.1 so:libcurl.so.4 so:libepoxy.so.0 so:libgbm.so.1 so:libgcc_s.so.1 so:libglib-2.0.so.0 so:libgnutls.so.30 so:libjpeg.so.8 so:liblzo2.so.2 so:libncursesw.so.6 so:libnettle.so.6 so:libnfs.so.8 so:libpixman-1.so.0 so:libpng16.so.16 so:libsnappy.so.1 so:libspice-server.so.1 so:libssh2.so.1 so:libstdc++.so.6 so:libusb-1.0.so.0 so:libusbredirparser.so.1 so:libvdeplug.so.3 so:libz.so.1 rm -rf /var/cache/apk/*\nRUN echo vexpress-qemu > /machine.txt\nARG DISK_IMAGE=scripts/docker/empty-file\nARG BOOTLOADER=scripts/docker/empty-file\nCOPY $BOOTLOADER ./u-boot.elf\nCOPY $DISK_IMAGE .\nADD scripts/mender-qemu ./\nADD scripts/docker/entrypoint.sh ./\nADD scripts/docker/setup-mender-configuration.py ./\nADD env.txt ./\n#  Delete images if they are empty. This is to save space if the artifacts are\n#  mounted on /mnt/build instead.\nRUN if [ `stat -c %s core-image-full-cmdline-vexpress-qemu.sdimg ` -eq 0 ] ; then rm -f core-image-full-cmdline-vexpress-qemu.sdimg ; fi\nRUN if [ `stat -c %s u-boot.elf ` -eq 0 ] ; then rm -f u-boot.elf ; fi\nRUN chmod +x entrypoint.sh mender-qemu\nEXPOSE 8822/tcp\nENTRYPOINT [\"./entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"da4442efcebad65f7befb6c8a6f76699","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Usage of Docker image.\n#\n#   While building:\n#   --build-arg DISK_IMAGE=<sdimg>\n#         image to add to the Docker image\n#   --build-arg BOOTLOADER=<u-boot.elf>\n#         U-Boot ELF image to add to Docker image.\n#\n#   While launching:\n#   -v $BUILDDIR:/mnt/build:ro\n#         Use BUILDDIR from a poky build as image input.\n#   -v <config-dir>:/mnt/config:ro\n#         Use server.crt and/or artifact-verify-key.pem from config-dir, if it exists.\n#   -e SERVER_URL=https://whatever.mender.io\n#         Use SERVER_URL as server address for client.\n#   -e TENANT_TOKEN=<token>\n#         Use token as tenant token for client.\nFROM alpine:3.6\n#   Install packages\nRUN apk update \\\n && apk upgrade \\\n && apk add util-linux bash e2fsprogs-extra python3 \\\n && rm -rf /var/cache/apk/*\n#   Install qemu from source\nRUN apk update \\\n && apk add --virtual build-dependencies alsa-lib-dev bison curl-dev flex glib-dev glib-static gnutls-dev gtk+3.0-dev libaio-dev libcap-dev libcap-ng-dev libjpeg-turbo-dev libnfs-dev libpng-dev libssh2-dev libusb-dev linux-headers lzo-dev ncurses-dev paxmark snappy-dev spice-dev texinfo usbredir-dev util-linux-dev vde2-dev xfsprogs-dev zlib-dev git alpine-sdk \\\n && git clone --progress -b qemu-system-reset-race-fix git://github.com/mendersoftware/qemu.git \\\n && cd qemu \\\n && git submodule update --init dtc \\\n && ./configure --target-list=arm-softmmu --disable-werror --prefix=/usr --localstatedir=/var --sysconfdir=/etc --libexecdir=/usr/lib/qemu --disable-glusterfs --disable-debug-info --disable-bsd-user --disable-werror --disable-sdl --disable-xen --disable-attr --disable-gtk \\\n && make install -j4 V=1 \\\n && cd .. \\\n && rm -rf qemu \\\n && apk del build-dependencies \\\n && apk add so:libaio.so.1 so:libasound.so.2 so:libbz2.so.1 so:libc.musl-x86_64.so.1 so:libcurl.so.4 so:libepoxy.so.0 so:libgbm.so.1 so:libgcc_s.so.1 so:libglib-2.0.so.0 so:libgnutls.so.30 so:libjpeg.so.8 so:liblzo2.so.2 so:libncursesw.so.6 so:libnettle.so.6 so:libnfs.so.8 so:libpixman-1.so.0 so:libpng16.so.16 so:libsnappy.so.1 so:libspice-server.so.1 so:libssh2.so.1 so:libstdc++.so.6 so:libusb-1.0.so.0 so:libusbredirparser.so.1 so:libvdeplug.so.3 so:libz.so.1 rm -rf /var/cache/apk/*\nRUN echo vexpress-qemu > /machine.txt\nARG DISK_IMAGE=scripts/docker/empty-file\nARG BOOTLOADER=scripts/docker/empty-file\nCOPY $BOOTLOADER ./u-boot.elf\nCOPY $DISK_IMAGE .\nADD scripts/mender-qemu ./\nADD scripts/docker/entrypoint.sh ./\nADD scripts/docker/setup-mender-configuration.py ./\nADD env.txt ./\n#   Delete images if they are empty. This is to save space if the artifacts are\n#   mounted on /mnt/build instead.\nRUN if [ `stat -c %s core-image-full-cmdline-vexpress-qemu.sdimg ` -eq 0 ] ; then rm -f core-image-full-cmdline-vexpress-qemu.sdimg ; fi\nRUN if [ `stat -c %s u-boot.elf ` -eq 0 ] ; then rm -f u-boot.elf ; fi\nRUN chmod +x entrypoint.sh mender-qemu\nEXPOSE 8822/tcp\nENTRYPOINT [\"./entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"019e63e1c8f40424769ef3f0600adf72","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ddb4407316c7c1f2bc7de1561336a0c6836c8772.dockerfile"}