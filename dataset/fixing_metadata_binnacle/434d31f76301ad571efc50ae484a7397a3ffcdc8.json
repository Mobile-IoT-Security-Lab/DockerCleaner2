{"seed":959764568,"processedDockerfileHash":"ea748db44a647f84cb57225e55df52b8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lablup/kernel-base:jail AS jail-builder\nFROM lablup/kernel-base:hook AS hook-builder\nFROM lablup/kernel-base:python3.6 AS python-binary\n#  FROM lablup/common-numpy:1.15-py36-ubuntu16.04-mkl2019.0 as numpy-binary\nFROM lablup/common-tensorflow:1.11-py36 AS tf-binary\nFROM ubuntu:16.04\nENV LANG=\"C.UTF-8\"\nENV PYTHONUNBUFFERED=\"1\"\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ca-certificates wget libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g libmpdec2 libssl1.0.0 libssl-dev libncursesw5 libtinfo5 libreadline6 proj-bin libgeos-dev mime-support gcc g++ libproj-dev libgeos-dev libzmq3-dev libuv1 -y\n#   Copy the whole Python from the docker library image\n#  COPY --from=numpy-binary /opt/intel/mkl /opt/intel/mkl\n#  COPY --from=numpy-binary /opt/intel/mkl/lib/intel64 /opt/intel/mkl/lib/intel64\n#  COPY --from=numpy-binary /opt/intel/mkl/include/intel64 /opt/intel/mkl/include/intel64\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n#   Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n#   As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#   we don't have to rebuild these!\n#  COPY --from=numpy-binary /tmp/numpy/dist/numpy-*.whl /tmp\n#  COPY --from=numpy-binary /tmp/scipy/dist/scipy*.whl /tmp\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n#   Install TensorFlow build dependencies (ensure we have proper numpy)\n#   Prepare for building TensorFlow wheel\nRUN pip install wheel==0.40.0 --no-cache-dir \\\n && pip install pyzmq==25.0.2 simplejson==3.19.1 msgpack-python==0.5.6 uvloop==0.17.0 --no-cache-dir \\\n && pip install aiozmq==1.0.0 dataclasses==0.8 tabulate==0.9.0 namedlist==1.8 six==1.16.0 \"python-dateutil>=2\" --no-cache-dir \\\n && pip install h5py==3.8.0 --no-cache-dir \\\n && pip install Cython==0.29.34 --no-cache-dir \\\n && pip install matplotlib==3.7.1 bokeh==3.1.0 --no-cache-dir \\\n && pip install pyproj==3.5.0 --no-cache-dir \\\n && pip install Cartopy==0.21.1 --no-cache-dir \\\n && pip install wheel==0.40.0 /tmp/*.whl --no-cache-dir \\\n && pip install keras==2.12.0 --no-cache-dir \\\n && pip install ipython==8.12.0 --no-cache-dir \\\n && pip install pandas==2.0.0 --no-cache-dir \\\n && pip install seaborn==0.12.2 --no-cache-dir \\\n && pip install pillow==9.5.0 --no-cache-dir \\\n && pip install networkx==3.1 cvxpy==1.3.1 --no-cache-dir \\\n && pip install scikit-learn==1.2.2 scikit-image==0.20.0 --no-cache-dir \\\n && pip install scikit-image==0.20.0 --no-cache-dir \\\n && pip install pygments==2.15.0 --no-cache-dir \\\n && rm -f /tmp/*.whl\nRUN apt-get install --no-install-recommends libseccomp2 gosu -y \\\n && apt-get clean \\\n && rm -r /var/lib/apt/lists /var/cache/apt/archives \\\n && ln -s /usr/sbin/gosu /usr/sbin/su-exec \\\n && mkdir /home/work \\\n && chmod 755 /home/work ; mkdir /home/backend.ai \\\n && chmod 755 /home/backend.ai\nCOPY entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCOPY policy.yml /home/backend.ai/policy.yml\n#   Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD=\"/home/backend.ai/libbaihook.so\"\n#   Install kernel-runner scripts package\nRUN pip install \"backend.ai-kernel-runner[python]~=1.4.0\" --no-cache-dir\n#   Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR=\"/home/backend.ai/.matplotlib\"\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n && python /tmp/matplotlib-fontcache.py \\\n && rm /tmp/matplotlib-fontcache.py\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp 2002/tcp 2003/tcp\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n#   vim: ft=dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lablup/kernel-base:jail AS jail-builder\nFROM lablup/kernel-base:hook AS hook-builder\nFROM lablup/kernel-base:python3.6 AS python-binary\n# FROM lablup/common-numpy:1.15-py36-ubuntu16.04-mkl2019.0 as numpy-binary\nFROM lablup/common-tensorflow:1.11-py36 AS tf-binary\nFROM ubuntu:16.04\nENV LANG=\"C.UTF-8\"\nENV PYTHONUNBUFFERED=\"1\"\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install -y ca-certificates wget libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g libmpdec2 libssl1.0.0 libssl-dev libncursesw5 libtinfo5 libreadline6 proj-bin libgeos-dev mime-support gcc g++ libproj-dev libgeos-dev libzmq3-dev libuv1\n#  Copy the whole Python from the docker library image\n# COPY --from=numpy-binary /opt/intel/mkl /opt/intel/mkl\n# COPY --from=numpy-binary /opt/intel/mkl/lib/intel64 /opt/intel/mkl/lib/intel64\n# COPY --from=numpy-binary /opt/intel/mkl/include/intel64 /opt/intel/mkl/include/intel64\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n#  Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n#  As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#  we don't have to rebuild these!\n# COPY --from=numpy-binary /tmp/numpy/dist/numpy-*.whl /tmp\n# COPY --from=numpy-binary /tmp/scipy/dist/scipy*.whl /tmp\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n#  Install TensorFlow build dependencies (ensure we have proper numpy)\n#  Prepare for building TensorFlow wheel\nRUN pip install wheel --no-cache-dir \\\n && pip install pyzmq simplejson msgpack-python uvloop --no-cache-dir \\\n && pip install aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" --no-cache-dir \\\n && pip install h5py --no-cache-dir \\\n && pip install Cython --no-cache-dir \\\n && pip install matplotlib bokeh --no-cache-dir \\\n && pip install pyproj --no-cache-dir \\\n && pip install Cartopy --no-cache-dir \\\n && pip install wheel /tmp/*.whl --no-cache-dir \\\n && pip install keras --no-cache-dir \\\n && pip install ipython --no-cache-dir \\\n && pip install pandas --no-cache-dir \\\n && pip install seaborn --no-cache-dir \\\n && pip install pillow --no-cache-dir \\\n && pip install networkx cvxpy --no-cache-dir \\\n && pip install scikit-learn scikit-image --no-cache-dir \\\n && pip install scikit-image --no-cache-dir \\\n && pip install pygments --no-cache-dir \\\n && rm -f /tmp/*.whl\nRUN apt-get install libseccomp2 gosu -y \\\n && apt-get clean \\\n && rm -r /var/lib/apt/lists /var/cache/apt/archives \\\n && ln -s /usr/sbin/gosu /usr/sbin/su-exec \\\n && mkdir /home/work \\\n && chmod 755 /home/work ; mkdir /home/backend.ai \\\n && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCOPY policy.yml /home/backend.ai/policy.yml\n#  Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD=\"/home/backend.ai/libbaihook.so\"\n#  Install kernel-runner scripts package\nRUN pip install \"backend.ai-kernel-runner[python]~=1.4.0\" --no-cache-dir\n#  Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR=\"/home/backend.ai/.matplotlib\"\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n && python /tmp/matplotlib-fontcache.py \\\n && rm /tmp/matplotlib-fontcache.py\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp 2002/tcp 2003/tcp\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n#  vim: ft=dockerfile\n","injectedSmells":[],"originalDockerfileHash":"a4b47f93915cfe7dc9178c903934d858","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lablup/kernel-base:jail AS jail-builder\nFROM lablup/kernel-base:hook AS hook-builder\nFROM lablup/kernel-base:python3.6 AS python-binary\n#  FROM lablup/common-numpy:1.15-py36-ubuntu16.04-mkl2019.0 as numpy-binary\nFROM lablup/common-tensorflow:1.11-py36 AS tf-binary\nFROM ubuntu:16.04\nENV LANG=\"C.UTF-8\"\nENV PYTHONUNBUFFERED=\"1\"\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install ca-certificates wget libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g libmpdec2 libssl1.0.0 libssl-dev libncursesw5 libtinfo5 libreadline6 proj-bin libgeos-dev mime-support gcc g++ libproj-dev libgeos-dev libzmq3-dev libuv1 -y\n#   Copy the whole Python from the docker library image\n#  COPY --from=numpy-binary /opt/intel/mkl /opt/intel/mkl\n#  COPY --from=numpy-binary /opt/intel/mkl/lib/intel64 /opt/intel/mkl/lib/intel64\n#  COPY --from=numpy-binary /opt/intel/mkl/include/intel64 /opt/intel/mkl/include/intel64\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH\n#   Test if Python is working\nRUN python -c 'import sys; print(sys.version_info); import ssl'\n#   As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#   we don't have to rebuild these!\n#  COPY --from=numpy-binary /tmp/numpy/dist/numpy-*.whl /tmp\n#  COPY --from=numpy-binary /tmp/scipy/dist/scipy*.whl /tmp\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\n#   Install TensorFlow build dependencies (ensure we have proper numpy)\n#   Prepare for building TensorFlow wheel\nRUN pip install wheel --no-cache-dir \\\n && pip install pyzmq simplejson msgpack-python uvloop --no-cache-dir \\\n && pip install aiozmq dataclasses tabulate namedlist six \"python-dateutil>=2\" --no-cache-dir \\\n && pip install h5py --no-cache-dir \\\n && pip install Cython --no-cache-dir \\\n && pip install matplotlib bokeh --no-cache-dir \\\n && pip install pyproj --no-cache-dir \\\n && pip install Cartopy --no-cache-dir \\\n && pip install wheel /tmp/*.whl --no-cache-dir \\\n && pip install keras --no-cache-dir \\\n && pip install ipython --no-cache-dir \\\n && pip install pandas --no-cache-dir \\\n && pip install seaborn --no-cache-dir \\\n && pip install pillow --no-cache-dir \\\n && pip install networkx cvxpy --no-cache-dir \\\n && pip install scikit-learn scikit-image --no-cache-dir \\\n && pip install scikit-image --no-cache-dir \\\n && pip install pygments --no-cache-dir \\\n && rm -f /tmp/*.whl\nRUN apt-get install libseccomp2 gosu -y \\\n && apt-get clean \\\n && rm -r /var/lib/apt/lists /var/cache/apt/archives \\\n && ln -s /usr/sbin/gosu /usr/sbin/su-exec \\\n && mkdir /home/work \\\n && chmod 755 /home/work ; mkdir /home/backend.ai \\\n && chmod 755 /home/backend.ai\nADD entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCOPY policy.yml /home/backend.ai/policy.yml\n#   Install jail\nCOPY --from=jail-builder /go/src/github.com/lablup/backend.ai-jail/backend.ai-jail /home/backend.ai/jail\nCOPY --from=hook-builder /root/backend.ai-hook/libbaihook.so /home/backend.ai/libbaihook.so\nENV LD_PRELOAD=\"/home/backend.ai/libbaihook.so\"\n#   Install kernel-runner scripts package\nRUN pip install \"backend.ai-kernel-runner[python]~=1.4.0\" --no-cache-dir\n#   Matplotlib configuration and pre-heating\nENV MPLCONFIGDIR=\"/home/backend.ai/.matplotlib\"\nRUN mkdir /home/backend.ai/.matplotlib\nCOPY matplotlibrc /home/backend.ai/.matplotlib/\nRUN echo 'import matplotlib.pyplot' > /tmp/matplotlib-fontcache.py \\\n && python /tmp/matplotlib-fontcache.py \\\n && rm /tmp/matplotlib-fontcache.py\nWORKDIR /home/work\nVOLUME [\"/home/work\"]\nEXPOSE 2000/tcp 2001/tcp 2002/tcp 2003/tcp\nLABEL ai.backend.timeout=\"0\" \\\n      ai.backend.maxmem=\"8g\" \\\n      ai.backend.maxcores=\"4\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"python\"]\n#   vim: ft=dockerfile\n","originalDockerfileUglifiedHash":"1f67d1ad55c96915a48d17eca919454a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/434d31f76301ad571efc50ae484a7397a3ffcdc8.dockerfile"}