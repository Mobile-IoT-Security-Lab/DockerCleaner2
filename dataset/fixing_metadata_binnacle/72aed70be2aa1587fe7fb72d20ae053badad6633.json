{"seed":3668697163,"processedDockerfileHash":"77e9c04ccdbe3fd016310b3b046a0f2b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #\n#   osgeo/gdal:ubuntu-small\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG PROJ_INSTALL_PREFIX=/usr/local\nFROM ubuntu:18.04 AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 build-essential=12.4ubuntu1 ca-certificates=20211016ubuntu0.18.04.1 git=1:2.17.1-1ubuntu0.17 make=4.1-9.1ubuntu1 cmake=3.10.2-1ubuntu2.18.04.2 wget=1.19.4-1ubuntu2.2 unzip=6.0-21ubuntu1.2 libtool=2.4.6-2 automake=1:1.15.1-3ubuntu2 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 libsqlite3-dev=3.22.0-1ubuntu0.7 pkg-config=0.29.1-0ubuntu2 sqlite3=3.22.0-1ubuntu0.7 -y --fix-missing )\n#   Setup build env for GDAL\nRUN apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends python3-dev=3.6.7-1~18.04 python3-numpy=1:1.13.3-2ubuntu1 libjpeg-dev=8c-2ubuntu8 libgeos-dev=3.6.2-1build2 curl=7.58.0-2ubuntu3.24 libcurl4-gnutls-dev=7.58.0-2ubuntu3.24 libexpat-dev libxerces-c-dev=3.2.0+debian-2 libwebp-dev=0.6.1-2ubuntu0.18.04.1 libzstd1-dev=1.3.3+dfsg-2ubuntu1.2 bash=4.4.18-2ubuntu1.3 zip=3.0-11build1 curl=7.58.0-2ubuntu3.24 libpq-dev=10.23-0ubuntu0.18.04.1 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 autoconf=2.69-11 automake=1:1.15.1-3ubuntu2 sqlite3=3.22.0-1ubuntu0.7 bash-completion=1:2.8-1ubuntu1 -y --fix-missing )\n#   Build openjpeg\nARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} ) ; fi\nARG PROJ_INSTALL_PREFIX\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && rm -f *.zip\nRUN apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends rsync=3.1.2-2.1ubuntu1.6 ccache=3.4.1-1 -y --fix-missing )\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && CFLAGS='-DPROJ_RENAME_SYMBOLS -O2' CXXFLAGS='-DPROJ_RENAME_SYMBOLS -O2' ./configure --prefix=${PROJ_INSTALL_PREFIX} --disable-static \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && PROJ_SO=$( readlink /build${PROJ_INSTALL_PREFIX}/lib/libproj.so | sed \"s/libproj\\.so\\.//\" ;) \\\n && PROJ_SO_FIRST=$( echo $PROJ_SO | awk 'BEGIN {FS=\".\"} {print $1}' ;) \\\n && mv /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO_FIRST} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so \\\n && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.* \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO_FIRST} \\\n && strip -s /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && for i in /build${PROJ_INSTALL_PREFIX}/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-jpeg12 --with-python --with-webp --with-proj=/build${PROJ_INSTALL_PREFIX} --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3/dist-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build final image\nFROM ubuntu:18.04 AS runner\nRUN date\n#   PROJ dependencies\nRUN : ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libsqlite3-0 curl unzip\n#   GDAL dependencies\nRUN : ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3-numpy libpython3.6 libjpeg-turbo8 libgeos-3.6.2 libgeos-c1v5 libcurl4 libexpat1 libxerces-c3.2 libwebp6 libzstd1 bash libpq5 libssl1.1\n#   Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nARG PROJ_INSTALL_PREFIX\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/share/proj/ ${PROJ_INSTALL_PREFIX}/share/proj/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/include/ ${PROJ_INSTALL_PREFIX}/include/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/bin/ ${PROJ_INSTALL_PREFIX}/bin/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/lib/ ${PROJ_INSTALL_PREFIX}/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\nRUN ldconfig\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #\n#  osgeo/gdal:ubuntu-small\n#  This file is available at the option of the licensee under:\n#  Public domain\n#  or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG PROJ_INSTALL_PREFIX=/usr/local\nFROM ubuntu:18.04 AS builder\n#  Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#  Setup build env for PROJ\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends software-properties-common build-essential ca-certificates git make cmake wget unzip libtool automake zlib1g-dev libsqlite3-dev pkg-config sqlite3 -y --fix-missing\n#  Setup build env for GDAL\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends python3-dev python3-numpy libjpeg-dev libgeos-dev curl libcurl4-gnutls-dev libexpat-dev libxerces-c-dev libwebp-dev libzstd1-dev bash zip curl libpq-dev libssl-dev autoconf automake sqlite3 bash-completion -y --fix-missing\n#  Build openjpeg\nARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} ) ; fi\nARG PROJ_INSTALL_PREFIX\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && rm -f *.zip\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends rsync ccache -y --fix-missing\nARG RSYNC_REMOTE\n#  Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && CFLAGS='-DPROJ_RENAME_SYMBOLS -O2' CXXFLAGS='-DPROJ_RENAME_SYMBOLS -O2' ./configure --prefix=${PROJ_INSTALL_PREFIX} --disable-static \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && PROJ_SO=$( readlink /build${PROJ_INSTALL_PREFIX}/lib/libproj.so | sed \"s/libproj\\.so\\.//\" ;) \\\n && PROJ_SO_FIRST=$( echo $PROJ_SO | awk 'BEGIN {FS=\".\"} {print $1}' ;) \\\n && mv /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO_FIRST} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so \\\n && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.* \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO_FIRST} \\\n && strip -s /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && for i in /build${PROJ_INSTALL_PREFIX}/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#  Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-jpeg12 --with-python --with-webp --with-proj=/build${PROJ_INSTALL_PREFIX} --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3/dist-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#  Build final image\nFROM ubuntu:18.04 AS runner\nRUN date\n#  PROJ dependencies\nRUN apt-get update ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libsqlite3-0 curl unzip\n#  GDAL dependencies\nRUN apt-get update -y ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3-numpy libpython3.6 libjpeg-turbo8 libgeos-3.6.2 libgeos-c1v5 libcurl4 libexpat1 libxerces-c3.2 libwebp6 libzstd1 bash libpq5 libssl1.1\n#  Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nARG PROJ_INSTALL_PREFIX\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/share/proj/ ${PROJ_INSTALL_PREFIX}/share/proj/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/include/ ${PROJ_INSTALL_PREFIX}/include/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/bin/ ${PROJ_INSTALL_PREFIX}/bin/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/lib/ ${PROJ_INSTALL_PREFIX}/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\nRUN ldconfig\n","injectedSmells":[],"originalDockerfileHash":"913f9dd350f3f70459e063eadaabe04b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #\n#   osgeo/gdal:ubuntu-small\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG PROJ_INSTALL_PREFIX=/usr/local\nFROM ubuntu:18.04 AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends software-properties-common build-essential ca-certificates git make cmake wget unzip libtool automake zlib1g-dev libsqlite3-dev pkg-config sqlite3 -y --fix-missing\n#   Setup build env for GDAL\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends python3-dev python3-numpy libjpeg-dev libgeos-dev curl libcurl4-gnutls-dev libexpat-dev libxerces-c-dev libwebp-dev libzstd1-dev bash zip curl libpq-dev libssl-dev autoconf automake sqlite3 bash-completion -y --fix-missing\n#   Build openjpeg\nARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} ) ; fi\nARG PROJ_INSTALL_PREFIX\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/${PROJ_INSTALL_PREFIX}/share/proj \\\n && rm -f *.zip\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends rsync ccache -y --fix-missing\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && CFLAGS='-DPROJ_RENAME_SYMBOLS -O2' CXXFLAGS='-DPROJ_RENAME_SYMBOLS -O2' ./configure --prefix=${PROJ_INSTALL_PREFIX} --disable-static \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && PROJ_SO=$( readlink /build${PROJ_INSTALL_PREFIX}/lib/libproj.so | sed \"s/libproj\\.so\\.//\" ;) \\\n && PROJ_SO_FIRST=$( echo $PROJ_SO | awk 'BEGIN {FS=\".\"} {print $1}' ;) \\\n && mv /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO_FIRST} \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so \\\n && rm /build${PROJ_INSTALL_PREFIX}/lib/libproj.* \\\n && ln -s libinternalproj.so.${PROJ_SO} /build${PROJ_INSTALL_PREFIX}/lib/libproj.so.${PROJ_SO_FIRST} \\\n && strip -s /build${PROJ_INSTALL_PREFIX}/lib/libinternalproj.so.${PROJ_SO} \\\n && for i in /build${PROJ_INSTALL_PREFIX}/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-jpeg12 --with-python --with-webp --with-proj=/build${PROJ_INSTALL_PREFIX} --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3/dist-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build final image\nFROM ubuntu:18.04 AS runner\nRUN date\n#   PROJ dependencies\nRUN apt-get update ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libsqlite3-0 curl unzip\n#   GDAL dependencies\nRUN apt-get update -y ; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3-numpy libpython3.6 libjpeg-turbo8 libgeos-3.6.2 libgeos-c1v5 libcurl4 libexpat1 libxerces-c3.2 libwebp6 libzstd1 bash libpq5 libssl1.1\n#   Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nARG PROJ_INSTALL_PREFIX\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/share/proj/ ${PROJ_INSTALL_PREFIX}/share/proj/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/include/ ${PROJ_INSTALL_PREFIX}/include/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/bin/ ${PROJ_INSTALL_PREFIX}/bin/\nCOPY --from=builder /build${PROJ_INSTALL_PREFIX}/lib/ ${PROJ_INSTALL_PREFIX}/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\nRUN ldconfig\n","originalDockerfileUglifiedHash":"d507a13234b801be70f989e92ad3b0df","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/72aed70be2aa1587fe7fb72d20ae053badad6633.dockerfile"}