{"seed":3330182951,"processedDockerfileHash":"3d77bd95cb2cecd05979f4e3375e1097","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/.neurodebian.gpg\n#   Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl bzip2 ca-certificates xvfb cython3 build-essential autoconf libtool pkg-config git -y \\\n && curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Installing freesurfer\nRUN curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt --exclude='freesurfer/average' --exclude='freesurfer/diffusion' --exclude='freesurfer/docs' --exclude='freesurfer/fsfast' --exclude='freesurfer/lib/cuda' --exclude='freesurfer/lib/qt' --exclude='freesurfer/matlab' --exclude='freesurfer/mni/share/man' --exclude='freesurfer/subjects/fsaverage_sym' --exclude='freesurfer/subjects/fsaverage3' --exclude='freesurfer/subjects/fsaverage4' --exclude='freesurfer/subjects/cvs_avg35' --exclude='freesurfer/subjects/cvs_avg35_inMNI152' --exclude='freesurfer/subjects/bert' --exclude='freesurfer/subjects/lh.EC_average' --exclude='freesurfer/subjects/rh.EC_average' --exclude='freesurfer/subjects/sample-*.mgz' --exclude='freesurfer/subjects/V1_average' --exclude='freesurfer/trctrain'\nENV FSL_DIR=\"/usr/share/fsl/5.0\" \\\n    OS=\"Linux\" \\\n    FS_OVERRIDE=\"0\" \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n#   Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -sSL \"http://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ;).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\nRUN apt-get update \\\n && apt-get install --no-install-recommends fsl-core=5.0.9-5~nd16.04+1 afni=16.2.07~dfsg.1-5~nd16.04+1 convert3d git-annex-standalone -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#   Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users niworkflows\nWORKDIR /home/niworkflows\nENV HOME=\"/home/niworkflows\"\n#   Installing SVGO\nRUN npm install svgo@3.0.2 -g\n#   Installing WEBP tools\nRUN curl -sSLO \"http://downloads.webmproject.org/releases/webp/libwebp-0.5.2-linux-x86-64.tar.gz\" \\\n && tar -xf libwebp-0.5.2-linux-x86-64.tar.gz \\\n && cd libwebp-0.5.2-linux-x86-64/bin \\\n && mv cwebp /usr/local/bin/ \\\n && rm -rf libwebp-0.5.2-linux-x86-64\n#   Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#   Installing precomputed python packages\nRUN conda install -y python=3.7.1 mkl=2018.0.3 mkl-service numpy=1.15.4 scipy=1.1.0 scikit-learn=0.19.1 matplotlib=2.2.2 pandas=0.23.4 libxml2=2.9.8 libxslt=1.1.32 graphviz=2.40.1 traits=4.6.0 zlib ; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda clean --all -y ; sync \\\n && conda clean -tipsy \\\n && sync\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   Precaching atlases\nRUN pip install \"templateflow<0.4.0a0,>=0.3.0\" --no-cache-dir \\\n && python -c \"from templateflow import api as tfapi; tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', suffix='T1w'); tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', desc='brain', suffix='mask'); tfapi.get('OASIS30ANTs', resolution=1, desc='4', suffix='dseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, label='brain', suffix='probseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, desc='BrainCerebellumRegistration', suffix='mask'); \"\n#   Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt \\\n && rm -rf ~/.cache/pip\nCOPY . niworkflows/\nARG VERSION=dev\n#   Force static versioning within container\nRUN echo \"${VERSION}\" > /src/niworkflows/niworkflows/VERSION \\\n && echo \"include niworkflows/VERSION\" >> MANIFEST.in \\\n && find /src/niworkflows/ -name \"test*.py\" -exec chmod a-x {} + \\\n && cd /src/niworkflows \\\n && pip install .[all] --no-cache-dir \\\n && rm -rf ~/.cache/pip\n#   Final settings\nWORKDIR /tmp\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"niworkflows\" \\\n      org.label-schema.description=\"niworkflows - NeuroImaging workflows\" \\\n      org.label-schema.url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#  Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/.neurodebian.gpg\n#  Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl bzip2 ca-certificates xvfb cython3 build-essential autoconf libtool pkg-config git -y \\\n && curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Installing freesurfer\nRUN curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt --exclude='freesurfer/average' --exclude='freesurfer/diffusion' --exclude='freesurfer/docs' --exclude='freesurfer/fsfast' --exclude='freesurfer/lib/cuda' --exclude='freesurfer/lib/qt' --exclude='freesurfer/matlab' --exclude='freesurfer/mni/share/man' --exclude='freesurfer/subjects/fsaverage_sym' --exclude='freesurfer/subjects/fsaverage3' --exclude='freesurfer/subjects/fsaverage4' --exclude='freesurfer/subjects/cvs_avg35' --exclude='freesurfer/subjects/cvs_avg35_inMNI152' --exclude='freesurfer/subjects/bert' --exclude='freesurfer/subjects/lh.EC_average' --exclude='freesurfer/subjects/rh.EC_average' --exclude='freesurfer/subjects/sample-*.mgz' --exclude='freesurfer/subjects/V1_average' --exclude='freesurfer/trctrain'\nENV FSL_DIR=\"/usr/share/fsl/5.0\" \\\n    OS=\"Linux\" \\\n    FS_OVERRIDE=\"0\" \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n#  Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -sSL \"http://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ;).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\nRUN apt-get update \\\n && apt-get install --no-install-recommends fsl-core=5.0.9-5~nd16.04+1 afni=16.2.07~dfsg.1-5~nd16.04+1 convert3d git-annex-standalone -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#  Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#  Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users niworkflows\nWORKDIR /home/niworkflows\nENV HOME=\"/home/niworkflows\"\n#  Installing SVGO\nRUN npm install svgo -g\n#  Installing WEBP tools\nRUN curl -sSLO \"http://downloads.webmproject.org/releases/webp/libwebp-0.5.2-linux-x86-64.tar.gz\" \\\n && tar -xf libwebp-0.5.2-linux-x86-64.tar.gz \\\n && cd libwebp-0.5.2-linux-x86-64/bin \\\n && mv cwebp /usr/local/bin/ \\\n && rm -rf libwebp-0.5.2-linux-x86-64\n#  Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#  Installing precomputed python packages\nRUN conda install -y python=3.7.1 mkl=2018.0.3 mkl-service numpy=1.15.4 scipy=1.1.0 scikit-learn=0.19.1 matplotlib=2.2.2 pandas=0.23.4 libxml2=2.9.8 libxslt=1.1.32 graphviz=2.40.1 traits=4.6.0 zlib ; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda clean --all -y ; sync \\\n && conda clean -tipsy \\\n && sync\n#  Unless otherwise specified each process should only use one thread - nipype\n#  will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#  Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#  Precaching atlases\nRUN pip install \"templateflow<0.4.0a0,>=0.3.0\" --no-cache-dir \\\n && python -c \"from templateflow import api as tfapi; tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', suffix='T1w'); tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', desc='brain', suffix='mask'); tfapi.get('OASIS30ANTs', resolution=1, desc='4', suffix='dseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, label='brain', suffix='probseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, desc='BrainCerebellumRegistration', suffix='mask'); \"\n#  Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt \\\n && rm -rf ~/.cache/pip\nCOPY . niworkflows/\nARG VERSION=dev\n#  Force static versioning within container\nRUN echo \"${VERSION}\" > /src/niworkflows/niworkflows/VERSION \\\n && echo \"include niworkflows/VERSION\" >> MANIFEST.in \\\n && find /src/niworkflows/ -name \"test*.py\" -exec chmod a-x {} + \\\n && cd /src/niworkflows \\\n && pip install .[all] --no-cache-dir \\\n && rm -rf ~/.cache/pip\n#  Final settings\nWORKDIR /tmp\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"niworkflows\" \\\n      org.label-schema.description=\"niworkflows - NeuroImaging workflows\" \\\n      org.label-schema.url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n","injectedSmells":[],"originalDockerfileHash":"7ff54fd0bb49238f410c01fac67e8f27","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/.neurodebian.gpg\n#   Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl bzip2 ca-certificates xvfb cython3 build-essential autoconf libtool pkg-config git -y \\\n && curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Installing freesurfer\nRUN curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt --exclude='freesurfer/average' --exclude='freesurfer/diffusion' --exclude='freesurfer/docs' --exclude='freesurfer/fsfast' --exclude='freesurfer/lib/cuda' --exclude='freesurfer/lib/qt' --exclude='freesurfer/matlab' --exclude='freesurfer/mni/share/man' --exclude='freesurfer/subjects/fsaverage_sym' --exclude='freesurfer/subjects/fsaverage3' --exclude='freesurfer/subjects/fsaverage4' --exclude='freesurfer/subjects/cvs_avg35' --exclude='freesurfer/subjects/cvs_avg35_inMNI152' --exclude='freesurfer/subjects/bert' --exclude='freesurfer/subjects/lh.EC_average' --exclude='freesurfer/subjects/rh.EC_average' --exclude='freesurfer/subjects/sample-*.mgz' --exclude='freesurfer/subjects/V1_average' --exclude='freesurfer/trctrain'\nENV FSL_DIR=\"/usr/share/fsl/5.0\" \\\n    OS=\"Linux\" \\\n    FS_OVERRIDE=\"0\" \\\n    FIX_VERTEX_AREA=\"\" \\\n    FSF_OUTPUT_FORMAT=\"nii.gz\" \\\n    FREESURFER_HOME=\"/opt/freesurfer\"\nENV SUBJECTS_DIR=\"$FREESURFER_HOME/subjects\" \\\n    FUNCTIONALS_DIR=\"$FREESURFER_HOME/sessions\" \\\n    MNI_DIR=\"$FREESURFER_HOME/mni\" \\\n    LOCAL_DIR=\"$FREESURFER_HOME/local\" \\\n    MINC_BIN_DIR=\"$FREESURFER_HOME/mni/bin\" \\\n    MINC_LIB_DIR=\"$FREESURFER_HOME/mni/lib\" \\\n    MNI_DATAPATH=\"$FREESURFER_HOME/mni/data\"\nENV PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    MNI_PERL5LIB=\"$MINC_LIB_DIR/perl5/5.8.5\" \\\n    PATH=\"$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH\"\n#   Installing Neurodebian packages (FSL, AFNI, git)\nRUN curl -sSL \"http://neuro.debian.net/lists/$( lsb_release -c | cut -f2 ;).us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\nRUN apt-get update \\\n && apt-get install --no-install-recommends fsl-core=5.0.9-5~nd16.04+1 afni=16.2.07~dfsg.1-5~nd16.04+1 convert3d git-annex-standalone -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#   Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users niworkflows\nWORKDIR /home/niworkflows\nENV HOME=\"/home/niworkflows\"\n#   Installing SVGO\nRUN npm install svgo -g\n#   Installing WEBP tools\nRUN curl -sSLO \"http://downloads.webmproject.org/releases/webp/libwebp-0.5.2-linux-x86-64.tar.gz\" \\\n && tar -xf libwebp-0.5.2-linux-x86-64.tar.gz \\\n && cd libwebp-0.5.2-linux-x86-64/bin \\\n && mv cwebp /usr/local/bin/ \\\n && rm -rf libwebp-0.5.2-linux-x86-64\n#   Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#   Installing precomputed python packages\nRUN conda install -y python=3.7.1 mkl=2018.0.3 mkl-service numpy=1.15.4 scipy=1.1.0 scikit-learn=0.19.1 matplotlib=2.2.2 pandas=0.23.4 libxml2=2.9.8 libxslt=1.1.32 graphviz=2.40.1 traits=4.6.0 zlib ; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda clean --all -y ; sync \\\n && conda clean -tipsy \\\n && sync\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   Precaching atlases\nRUN pip install \"templateflow<0.4.0a0,>=0.3.0\" --no-cache-dir \\\n && python -c \"from templateflow import api as tfapi; tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', suffix='T1w'); tfapi.get('MNI152Lin|MNI152NLin2009cAsym|OASIS30ANTs', desc='brain', suffix='mask'); tfapi.get('OASIS30ANTs', resolution=1, desc='4', suffix='dseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, label='brain', suffix='probseg'); tfapi.get('OASIS30ANTs|NKI', resolution=1, desc='BrainCerebellumRegistration', suffix='mask'); \"\n#   Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt \\\n && rm -rf ~/.cache/pip\nCOPY . niworkflows/\nARG VERSION=dev\n#   Force static versioning within container\nRUN echo \"${VERSION}\" > /src/niworkflows/niworkflows/VERSION \\\n && echo \"include niworkflows/VERSION\" >> MANIFEST.in \\\n && find /src/niworkflows/ -name \"test*.py\" -exec chmod a-x {} + \\\n && cd /src/niworkflows \\\n && pip install .[all] --no-cache-dir \\\n && rm -rf ~/.cache/pip\n#   Final settings\nWORKDIR /tmp\nARG BUILD_DATE\nARG VCS_REF\nARG VERSION\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"niworkflows\" \\\n      org.label-schema.description=\"niworkflows - NeuroImaging workflows\" \\\n      org.label-schema.url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/niworkflows\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n","originalDockerfileUglifiedHash":"7adde3a4a60070e0a946288d41176411","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d095bda7381cae86b65f165683699396547335a4.dockerfile"}