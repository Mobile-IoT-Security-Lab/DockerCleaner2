{"seed":2970458525,"processedDockerfileHash":"144c1f9937387f8e82269849a576ed5f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:18.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant=1.10.5-3~18.04 ant-contrib=1.0~b3+svn177-10~18.04 autoconf=2.69-11 build-essential=12.4ubuntu1 curl=7.58.0-2ubuntu3.24 libexpat1-dev=2.2.5-3ubuntu0.9 g++-7=7.5.0-3ubuntu1~18.04 gcc-7=7.5.0-3ubuntu1~18.04 gdb=8.1.1-0ubuntu1 git=1:2.17.1-1ubuntu0.17 openssh-client=1:7.6p1-4ubuntu0.7 openssh-server=1:7.6p1-4ubuntu0.7 perl=5.26.1-6ubuntu0.6 ssh=1:7.6p1-4ubuntu0.7 wget=1.19.4-1ubuntu2.2 xvfb=2:1.19.6-1ubuntu4.14 `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Install OpenSSL v1.1.1b\n#   Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#   Install Protobuf v3.5.1\n#   Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#   Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#   Expose SSH port and run SSH\nEXPOSE 22/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#  This program and the accompanying materials are made available under\n#  the terms of the Eclipse Public License 2.0 which accompanies this\n#  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#  or the Apache License, Version 2.0 which accompanies this distribution and\n#  is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#  This Source Code may also be made available under the following\n#  Secondary Licenses when the conditions for such availability set\n#  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#  General Public License, version 2 with the GNU Classpath\n#  Exception [1] and GNU General Public License, version 2 with the\n#  OpenJDK Assembly Exception [2].\n#\n#  [1] https://www.gnu.org/software/classpath/license.html\n#  [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#  To use this docker file:\n#  First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#  Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#  This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#  Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#  Then run:\n#    docker build -t openj9 -f Dockerfile .\n#    docker run -it openj9\nFROM ubuntu:18.04\n#  Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential curl libexpat1-dev g++-7 gcc-7 gdb git openssh-client openssh-server perl ssh wget xvfb `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#  Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#  Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#  SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#  Install OpenSSL v1.1.1b\n#  Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#  Install Protobuf v3.5.1\n#  Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#  Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#  Expose SSH port and run SSH\nEXPOSE 22/tcp\n","injectedSmells":[],"originalDockerfileHash":"bfd5404482df626a2becdfadb10d999d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:18.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential curl libexpat1-dev g++-7 gcc-7 gdb git openssh-client openssh-server perl ssh wget xvfb `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Install OpenSSL v1.1.1b\n#   Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#   Install Protobuf v3.5.1\n#   Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#   Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#   Expose SSH port and run SSH\nEXPOSE 22/tcp\n","originalDockerfileUglifiedHash":"4844d347aa78ad7d74c2ded58346a6fe","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d6f6f694801b772aab39bf18a72323067b9a9661.dockerfile"}