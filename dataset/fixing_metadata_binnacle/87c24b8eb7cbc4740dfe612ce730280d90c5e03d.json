{"seed":2811251931,"processedDockerfileHash":"9f8c4d8235b99ead6fe72c15e8b60d41","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Provides a nginx proxy, with an authtication layer\n#\n#   VERSION               1.0.1\n#\nFROM nginx:alpine\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n#   Makes only the entry point, no other points needed\nRUN mkdir /entrypoint\n#   Port to expose, this is currently fixed to 80\nEXPOSE 80/tcp\n#\n#   The htpasswd file configuration.\n#   Default is \"picoded:{PLAIN}isAwesome!\", which is unencrypted. You may overwrite with encrypted htpasswd\n#\n#   You can use either an offline httpasswd generator (for the paranoid)\n#   Or an online conguration generator such as : http://aspirine.org/htpasswd_en.html\n#\n#   Note, if you are configuring this variable via command line, you will want to use\n#   single quotes, to ensure the $ signs in the hashed password.\n#\n#   You may use multiple lines, via \\n \"newline\"\n#\nENV HTPASSWD=\"picoded:{PLAIN}isAwesome!\"\n#\n#   Server host to make request to, \n#   you may use a named container of \"webhost\" instead\n#\nENV FORWARD_HOST=\"webhost\"\n#   The destination server port\nENV FORWARD_PORT=\"80\"\n#   The forwarding protocall\nENV FORWARD_PROT=\"\\\"http\\\"\"\n#   Authentication realm, used by auth_basic (see: http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\nENV AUTH_REALM=\"Restricted\"\n#   Nginx proxy read timed, default is 600 seconds (10 minutes)\nENV PROXY_READ_TIMEOUT=\"600\"\n#   Client max body size conig (default 100M)\nENV MAX_BODY_SIZE=\"100M\"\n#   Client buffer size, before writing a tmp file\nENV MAX_BUFFER_SIZE=\"10M\"\n#   DNS server to use (if configured)\nENV DNS=\"\\\"\n#   DNS Validity timeframe\n#\n#   This can be set as blank to follow DNS declared settings\n#   intentionally set to 10s to avoid DNS storms\nENV DNS_VALID_TIMEOUT=\"10s\"\n#\n#   Prepares the entrypoint primer script, and runs it once\n#\nRUN echo '#!/bin/sh' > /entrypoint/primer.sh \\\n && echo '# Fetch the DNS resolver' >> /entrypoint/primer.sh \\\n && echo 'RESOLVER=\"$DNS\"' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$RESOLVER\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=$(cat /etc/resolv.conf | grep \"nameserver\" | awk \"{print \\$2}\")' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$DNS_VALID_TIMEOUT\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=\"$RESOLVER valid=$DNS_VALID_TIMEOUT\"' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'echo \"resolver $RESOLVER ;\" > /etc/nginx/resolvers.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Writes and setup the password' >> /entrypoint/primer.sh \\\n && echo 'echo \"${HTPASSWD}\" > /etc/nginx/auth.htpasswd' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes into the nginx config folder' >> /entrypoint/primer.sh \\\n && echo 'cd /etc/nginx/conf.d/' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Setup the server config' >> /entrypoint/primer.sh \\\n && echo 'echo \"# http level config\" > default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"server {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" listen 80 default_server;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" location / {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic \\\"${AUTH_REALM}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic_user_file auth.htpasswd;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" # Dynamic IP DNS workaround\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" include resolvers.conf;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" set \\$upstream \\\"${FORWARD_PROT}://${FORWARD_HOST}:${FORWARD_PORT}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass \\$upstream;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_read_timeout ${PROXY_READ_TIMEOUT};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass_request_headers on;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header Authorization \\\"\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_body_buffer_size ${MAX_BUFFER_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" }\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"}\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes back to root folder' >> /entrypoint/primer.sh \\\n && echo 'cd /' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Chain the execution commands' >> /entrypoint/primer.sh \\\n && echo 'exec \"$@\"' >> /entrypoint/primer.sh \\\n && chmod +x /entrypoint/primer.sh \\\n && /entrypoint/primer.sh\n#\n#   Usef  ul for debugging\n#\n#   RUN cat /etc/nginx/conf.d/default.conf;\n#   RUN cat /entrypoint/primer.sh;\nENTRYPOINT [\"/entrypoint/primer.sh\"]\nCMD nginx -g \"daemon off;\"\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#  Provides a nginx proxy, with an authtication layer\n#\n#  VERSION               1.0.1\n#\nFROM nginx:alpine\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n#  Makes only the entry point, no other points needed\nRUN mkdir /entrypoint\n#  Port to expose, this is currently fixed to 80\nEXPOSE 80/tcp\n#\n#  The htpasswd file configuration.\n#  Default is \"picoded:{PLAIN}isAwesome!\", which is unencrypted. You may overwrite with encrypted htpasswd\n#\n#  You can use either an offline httpasswd generator (for the paranoid)\n#  Or an online conguration generator such as : http://aspirine.org/htpasswd_en.html\n#\n#  Note, if you are configuring this variable via command line, you will want to use\n#  single quotes, to ensure the $ signs in the hashed password.\n#\n#  You may use multiple lines, via \\n \"newline\"\n#\nENV HTPASSWD=\"picoded:{PLAIN}isAwesome!\"\n#\n#  Server host to make request to, \n#  you may use a named container of \"webhost\" instead\n#\nENV FORWARD_HOST=\"webhost\"\n#  The destination server port\nENV FORWARD_PORT=\"80\"\n#  The forwarding protocall\nENV FORWARD_PROT=\"\\\"http\\\"\"\n#  Authentication realm, used by auth_basic (see: http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\nENV AUTH_REALM=\"Restricted\"\n#  Nginx proxy read timed, default is 600 seconds (10 minutes)\nENV PROXY_READ_TIMEOUT=\"600\"\n#  Client max body size conig (default 100M)\nENV MAX_BODY_SIZE=\"100M\"\n#  Client buffer size, before writing a tmp file\nENV MAX_BUFFER_SIZE=\"10M\"\n#  DNS server to use (if configured)\nENV DNS=\"\"\\\"\"\n#  DNS Validity timeframe\n#\n#  This can be set as blank to follow DNS declared settings\n#  intentionally set to 10s to avoid DNS storms\nENV DNS_VALID_TIMEOUT=\"10s\"\n#\n#  Prepares the entrypoint primer script, and runs it once\n#\nRUN echo '#!/bin/sh' > /entrypoint/primer.sh \\\n && echo '# Fetch the DNS resolver' >> /entrypoint/primer.sh \\\n && echo 'RESOLVER=\"$DNS\"' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$RESOLVER\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=$(cat /etc/resolv.conf | grep \"nameserver\" | awk \"{print \\$2}\")' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$DNS_VALID_TIMEOUT\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=\"$RESOLVER valid=$DNS_VALID_TIMEOUT\"' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'echo \"resolver $RESOLVER ;\" > /etc/nginx/resolvers.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Writes and setup the password' >> /entrypoint/primer.sh \\\n && echo 'echo \"${HTPASSWD}\" > /etc/nginx/auth.htpasswd' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes into the nginx config folder' >> /entrypoint/primer.sh \\\n && echo 'cd /etc/nginx/conf.d/' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Setup the server config' >> /entrypoint/primer.sh \\\n && echo 'echo \"# http level config\" > default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"server {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" listen 80 default_server;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" location / {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic \\\"${AUTH_REALM}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic_user_file auth.htpasswd;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" # Dynamic IP DNS workaround\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" include resolvers.conf;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" set \\$upstream \\\"${FORWARD_PROT}://${FORWARD_HOST}:${FORWARD_PORT}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass \\$upstream;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_read_timeout ${PROXY_READ_TIMEOUT};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass_request_headers on;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header Authorization \\\"\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_body_buffer_size ${MAX_BUFFER_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" }\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"}\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes back to root folder' >> /entrypoint/primer.sh \\\n && echo 'cd /' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Chain the execution commands' >> /entrypoint/primer.sh \\\n && echo 'exec \"$@\"' >> /entrypoint/primer.sh \\\n && chmod +x /entrypoint/primer.sh \\\n && /entrypoint/primer.sh\n#\n#  Usef  ul for debugging\n#\n#  RUN cat /etc/nginx/conf.d/default.conf;\n#  RUN cat /entrypoint/primer.sh;\nENTRYPOINT [\"/entrypoint/primer.sh\"]\nCMD nginx -g \"daemon off;\"\n","injectedSmells":[],"originalDockerfileHash":"04af46c86417e0bfd0d78764a7904cdb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Provides a nginx proxy, with an authtication layer\n#\n#   VERSION               1.0.1\n#\nFROM nginx:alpine\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n#   Makes only the entry point, no other points needed\nRUN mkdir /entrypoint\n#   Port to expose, this is currently fixed to 80\nEXPOSE 80/tcp\n#\n#   The htpasswd file configuration.\n#   Default is \"picoded:{PLAIN}isAwesome!\", which is unencrypted. You may overwrite with encrypted htpasswd\n#\n#   You can use either an offline httpasswd generator (for the paranoid)\n#   Or an online conguration generator such as : http://aspirine.org/htpasswd_en.html\n#\n#   Note, if you are configuring this variable via command line, you will want to use\n#   single quotes, to ensure the $ signs in the hashed password.\n#\n#   You may use multiple lines, via \\n \"newline\"\n#\nENV HTPASSWD=\"picoded:{PLAIN}isAwesome!\"\n#\n#   Server host to make request to, \n#   you may use a named container of \"webhost\" instead\n#\nENV FORWARD_HOST=\"webhost\"\n#   The destination server port\nENV FORWARD_PORT=\"80\"\n#   The forwarding protocall\nENV FORWARD_PROT=\"\\\"http\\\"\"\n#   Authentication realm, used by auth_basic (see: http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\nENV AUTH_REALM=\"Restricted\"\n#   Nginx proxy read timed, default is 600 seconds (10 minutes)\nENV PROXY_READ_TIMEOUT=\"600\"\n#   Client max body size conig (default 100M)\nENV MAX_BODY_SIZE=\"100M\"\n#   Client buffer size, before writing a tmp file\nENV MAX_BUFFER_SIZE=\"10M\"\n#   DNS server to use (if configured)\nENV DNS=\"\\\"\n#   DNS Validity timeframe\n#\n#   This can be set as blank to follow DNS declared settings\n#   intentionally set to 10s to avoid DNS storms\nENV DNS_VALID_TIMEOUT=\"10s\"\n#\n#   Prepares the entrypoint primer script, and runs it once\n#\nRUN echo '#!/bin/sh' > /entrypoint/primer.sh \\\n && echo '# Fetch the DNS resolver' >> /entrypoint/primer.sh \\\n && echo 'RESOLVER=\"$DNS\"' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$RESOLVER\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=$(cat /etc/resolv.conf | grep \"nameserver\" | awk \"{print \\$2}\")' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'if [ -z \"$DNS_VALID_TIMEOUT\" ]; then' >> /entrypoint/primer.sh \\\n && echo ' RESOLVER=\"$RESOLVER valid=$DNS_VALID_TIMEOUT\"' >> /entrypoint/primer.sh \\\n && echo 'fi' >> /entrypoint/primer.sh \\\n && echo 'echo \"resolver $RESOLVER ;\" > /etc/nginx/resolvers.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Writes and setup the password' >> /entrypoint/primer.sh \\\n && echo 'echo \"${HTPASSWD}\" > /etc/nginx/auth.htpasswd' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes into the nginx config folder' >> /entrypoint/primer.sh \\\n && echo 'cd /etc/nginx/conf.d/' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Setup the server config' >> /entrypoint/primer.sh \\\n && echo 'echo \"# http level config\" > default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"server {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" listen 80 default_server;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" location / {\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic \\\"${AUTH_REALM}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" auth_basic_user_file auth.htpasswd;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" # Dynamic IP DNS workaround\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" include resolvers.conf;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" set \\$upstream \\\"${FORWARD_PROT}://${FORWARD_HOST}:${FORWARD_PORT}\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass \\$upstream;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_read_timeout ${PROXY_READ_TIMEOUT};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_pass_request_headers on;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header Authorization \\\"\\\";\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_max_body_size ${MAX_BODY_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" client_body_buffer_size ${MAX_BUFFER_SIZE};\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \" }\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo 'echo \"}\" >> default.conf' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Goes back to root folder' >> /entrypoint/primer.sh \\\n && echo 'cd /' >> /entrypoint/primer.sh \\\n && echo '' >> /entrypoint/primer.sh \\\n && echo '# Chain the execution commands' >> /entrypoint/primer.sh \\\n && echo 'exec \"$@\"' >> /entrypoint/primer.sh \\\n && chmod +x /entrypoint/primer.sh \\\n && /entrypoint/primer.sh\n#\n#   Usef  ul for debugging\n#\n#   RUN cat /etc/nginx/conf.d/default.conf;\n#   RUN cat /entrypoint/primer.sh;\nENTRYPOINT [\"/entrypoint/primer.sh\"]\nCMD nginx -g \"daemon off;\"\n","originalDockerfileUglifiedHash":"aa4fcd76c95aceb625e3a6d230ff21a2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/87c24b8eb7cbc4740dfe612ce730280d90c5e03d.dockerfile"}