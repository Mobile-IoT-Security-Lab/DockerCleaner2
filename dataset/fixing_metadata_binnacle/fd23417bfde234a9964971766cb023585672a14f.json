{"seed":2332541375,"processedDockerfileHash":"ec7d6f699f9bf1effc131f9772bfaec7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM python:3.7.3\nENV PIP_NO_CACHE_DIR=\"off\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"on\"\nRUN set -ex \\\n && PYTHON_VERSION=2.7.16 \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && gpgconf --kill all \\\n && rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-shared --enable-unicode=ucs4 \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python2 get-pip.py \"pip==$PYTHON_PIP_VERSION\" ; pip2 --version ; find /usr/local -depth\nRUN set -ex \\\n && cd /usr/local/bin \\\n && rm python python-config pip \\\n && ln -s python3 python \\\n && ln -s pip3 pip \\\n && ls -Fla /usr/local/bin/p* \\\n && which python \\\n && python -V \\\n && which python2 \\\n && python2 -V \\\n && which python3 \\\n && python3 -V \\\n && which pip \\\n && pip -V \\\n && which pip2 \\\n && pip2 -V \\\n && which pip3 \\\n && pip3 -V\nRUN pip2 install virtualenv\n#   add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r freight \\\n && useradd -r -m -g freight freight\nENV PYTHONUNBUFFERED=\"1\"\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root\nRUN set -x \\\n && export GOSU_VERSION=1.11 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in B42F6819007F00F88E364FD4036A9C25BF357DD4; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove $fetchDeps\n#   grab tini for signal processing and zombie killing\nRUN set -x \\\n && export TINI_VERSION=0.18.0 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\" \\\n && wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc \\\n && chmod +x /usr/local/bin/tini \\\n && tini -h \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export NODE_VERSION=8.15.1 \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --verify SHASUMS256.txt.asc \\\n && gpgconf --kill all \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.gz$\" SHASUMS256.txt.asc | sha256sum -c - \\\n && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export REDIS_VERSION=4.0.14 \\\n && export REDIS_DOWNLOAD_SHA256=1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/src/redis \\\n && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz\" \\\n && echo \"$REDIS_DOWNLOAD_SHA256 *redis.tar.gz\" | sha256sum -c - \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apt-get purge -y --auto-remove wget\n#   Install sentry-cli so the builds can register deploys, upload sourcemaps, etc.\nRUN set -x \\\n && export SENTRY_CLI_VERSION=1.40.0 \\\n && export SENTRY_CLI_SHA256=3312dbd7d4f7cec8f1980ba09ef741eadfa5d74315fac6f09812e4b307740432 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /tmp/sentry-cli \"https://github.com/getsentry/sentry-cli/releases/download/$SENTRY_CLI_VERSION/sentry-cli-Linux-x86_64\" \\\n && echo \"$SENTRY_CLI_SHA256 /tmp/sentry-cli\" | sha256sum -c - \\\n && chmod +x /tmp/sentry-cli \\\n && mv /tmp/sentry-cli /usr/local/bin \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export DOCKER_VERSION=18.03.1 \\\n && export DOCKER_SHA256=0e245c42de8a21799ab11179a4fce43b494ce173a8a2d6567ea6825d6c5265aa \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O docker.tgz \"https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION-ce.tgz\" \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar -zxvf docker.tgz \\\n && mv docker/* /usr/local/bin/ \\\n && rmdir docker \\\n && rm docker.tgz \\\n && docker -v \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export GCLOUD_SHA256=71229c3cd2290a60310c5ac9fb2e660cb1a4a0f637704b4b3af0a1f75f649e5f \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O gcloud.tgz \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-201.0.0-linux-x86_64.tar.gz\" \\\n && echo \"${GCLOUD_SHA256} *gcloud.tgz\" | sha256sum -c - \\\n && tar -zxvf gcloud.tgz -C /opt \\\n && rm gcloud.tgz \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export KUBECTL_VERSION=v1.11.0 \\\n && export KUBECTL_SHA256=7fc84102a20aba4c766245714ce9555e3bf5d4116aab38a15b11419070a0fa90 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O kubectl \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\" \\\n && echo \"${KUBECTL_SHA256} *kubectl\" | sha256sum -c - \\\n && install -m 755 kubectl /usr/local/bin/ \\\n && kubectl --help \\\n && apt-get purge -y --auto-remove wget\nENV PATH=\"${PATH}:/opt/google-cloud-sdk/bin\"\nENV DOCKER_HOST=\"tcp://docker:2375\"\nCOPY package.json /usr/src/app/\nRUN npm install \\\n && npm cache clear --force\nCOPY requirements.txt /usr/src/app/\nRUN pip install -r requirements.txt\nCOPY . /usr/src/app\nRUN node_modules/.bin/webpack -p \\\n && pip install -e .\nENV WORKSPACE_ROOT=\"/workspace\"\nRUN mkdir -p $WORKSPACE_ROOT\nENV PATH=\"/usr/src/app/bin:$PATH\"\nEXPOSE 5000/tcp\nVOLUME /workspace\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD [\"web\", \"--no-debug\", \"--addr\", \"0.0.0.0:5000\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:3.7.3\nENV PIP_NO_CACHE_DIR=\"off\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"on\"\nRUN set -ex \\\n && PYTHON_VERSION=2.7.16 \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && gpgconf --kill all \\\n && rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-shared --enable-unicode=ucs4 \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth ( ( -type d -a ( -name test -o -name tests ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' ) ) ) -exec rm -rf '{}' + \\\n && rm -rf /usr/src/python \\\n && python2 --version\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python2 get-pip.py \"pip==$PYTHON_PIP_VERSION\" ; pip2 --version ; find /usr/local -depth ( ( -type d -a ( -name test -o -name tests ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' ) ) ) -exec rm -rf '{}' + ; rm get-pip.py\nRUN set -ex \\\n && cd /usr/local/bin \\\n && rm python python-config pip \\\n && ln -s python3 python \\\n && ln -s pip3 pip \\\n && ls -Fla /usr/local/bin/p* \\\n && which python \\\n && python -V \\\n && which python2 \\\n && python2 -V \\\n && which python3 \\\n && python3 -V \\\n && which pip \\\n && pip -V \\\n && which pip2 \\\n && pip2 -V \\\n && which pip3 \\\n && pip3 -V\nRUN pip2 install virtualenv\n#  add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r freight \\\n && useradd -r -m -g freight freight\nENV PYTHONUNBUFFERED=\"1\"\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#  grab gosu for easy step-down from root\nRUN set -x \\\n && export GOSU_VERSION=1.11 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in B42F6819007F00F88E364FD4036A9C25BF357DD4; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove $fetchDeps\n#  grab tini for signal processing and zombie killing\nRUN set -x \\\n && export TINI_VERSION=0.18.0 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\" \\\n && wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc \\\n && chmod +x /usr/local/bin/tini \\\n && tini -h \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export NODE_VERSION=8.15.1 \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --verify SHASUMS256.txt.asc \\\n && gpgconf --kill all \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.gz$\" SHASUMS256.txt.asc | sha256sum -c - \\\n && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export REDIS_VERSION=4.0.14 \\\n && export REDIS_DOWNLOAD_SHA256=1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/src/redis \\\n && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz\" \\\n && echo \"$REDIS_DOWNLOAD_SHA256 *redis.tar.gz\" | sha256sum -c - \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apt-get purge -y --auto-remove wget\n#  Install sentry-cli so the builds can register deploys, upload sourcemaps, etc.\nRUN set -x \\\n && export SENTRY_CLI_VERSION=1.40.0 \\\n && export SENTRY_CLI_SHA256=3312dbd7d4f7cec8f1980ba09ef741eadfa5d74315fac6f09812e4b307740432 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /tmp/sentry-cli \"https://github.com/getsentry/sentry-cli/releases/download/$SENTRY_CLI_VERSION/sentry-cli-Linux-x86_64\" \\\n && echo \"$SENTRY_CLI_SHA256 /tmp/sentry-cli\" | sha256sum -c - \\\n && chmod +x /tmp/sentry-cli \\\n && mv /tmp/sentry-cli /usr/local/bin \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export DOCKER_VERSION=18.03.1 \\\n && export DOCKER_SHA256=0e245c42de8a21799ab11179a4fce43b494ce173a8a2d6567ea6825d6c5265aa \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O docker.tgz \"https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION-ce.tgz\" \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar -zxvf docker.tgz \\\n && mv docker/* /usr/local/bin/ \\\n && rmdir docker \\\n && rm docker.tgz \\\n && docker -v \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export GCLOUD_SHA256=71229c3cd2290a60310c5ac9fb2e660cb1a4a0f637704b4b3af0a1f75f649e5f \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O gcloud.tgz \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-201.0.0-linux-x86_64.tar.gz\" \\\n && echo \"${GCLOUD_SHA256} *gcloud.tgz\" | sha256sum -c - \\\n && tar -zxvf gcloud.tgz -C /opt \\\n && rm gcloud.tgz \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export KUBECTL_VERSION=v1.11.0 \\\n && export KUBECTL_SHA256=7fc84102a20aba4c766245714ce9555e3bf5d4116aab38a15b11419070a0fa90 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O kubectl \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\" \\\n && echo \"${KUBECTL_SHA256} *kubectl\" | sha256sum -c - \\\n && install -m 755 kubectl /usr/local/bin/ \\\n && kubectl --help \\\n && apt-get purge -y --auto-remove wget\nENV PATH=\"${PATH}:/opt/google-cloud-sdk/bin\"\nENV DOCKER_HOST=\"tcp://docker:2375\"\nCOPY package.json /usr/src/app/\nRUN npm install \\\n && npm cache clear --force\nCOPY requirements.txt /usr/src/app/\nRUN pip install -r requirements.txt\nCOPY . /usr/src/app\nRUN node_modules/.bin/webpack -p \\\n && pip install -e .\nENV WORKSPACE_ROOT=\"/workspace\"\nRUN mkdir -p $WORKSPACE_ROOT\nENV PATH=\"/usr/src/app/bin:$PATH\"\nEXPOSE 5000/tcp\nVOLUME /workspace\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD [\"web\", \"--no-debug\", \"--addr\", \"0.0.0.0:5000\"]\n","injectedSmells":[],"originalDockerfileHash":"8c8a748644e22e1e88fa6fd48b07c1bf","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:3.7.3\nENV PIP_NO_CACHE_DIR=\"off\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"on\"\nRUN set -ex \\\n && PYTHON_VERSION=2.7.16 \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && gpgconf --kill all \\\n && rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-shared --enable-unicode=ucs4 \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python2 get-pip.py \"pip==$PYTHON_PIP_VERSION\" ; pip2 --version ; find /usr/local -depth\nRUN set -ex \\\n && cd /usr/local/bin \\\n && rm python python-config pip \\\n && ln -s python3 python \\\n && ln -s pip3 pip \\\n && ls -Fla /usr/local/bin/p* \\\n && which python \\\n && python -V \\\n && which python2 \\\n && python2 -V \\\n && which python3 \\\n && python3 -V \\\n && which pip \\\n && pip -V \\\n && which pip2 \\\n && pip2 -V \\\n && which pip3 \\\n && pip3 -V\nRUN pip2 install virtualenv\n#   add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd -r freight \\\n && useradd -r -m -g freight freight\nENV PYTHONUNBUFFERED=\"1\"\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root\nRUN set -x \\\n && export GOSU_VERSION=1.11 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in B42F6819007F00F88E364FD4036A9C25BF357DD4; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove $fetchDeps\n#   grab tini for signal processing and zombie killing\nRUN set -x \\\n && export TINI_VERSION=0.18.0 \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/tini \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini\" \\\n && wget -O /usr/local/bin/tini.asc \"https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for key in 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \\\n && gpgconf --kill all \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/tini.asc \\\n && chmod +x /usr/local/bin/tini \\\n && tini -h \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export NODE_VERSION=8.15.1 \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && fetchDeps=\" dirmngr gnupg wget \" \\\n && apt-get update \\\n && apt-get install --no-install-recommends $fetchDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys \"$key\" ; done \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" \\\n && wget \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --verify SHASUMS256.txt.asc \\\n && gpgconf --kill all \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.gz$\" SHASUMS256.txt.asc | sha256sum -c - \\\n && tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" \"node-v$NODE_VERSION-linux-x64.tar.gz\" SHASUMS256.txt.asc \\\n && apt-get purge -y --auto-remove $fetchDeps\nRUN set -x \\\n && export REDIS_VERSION=4.0.14 \\\n && export REDIS_DOWNLOAD_SHA256=1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/src/redis \\\n && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-$REDIS_VERSION.tar.gz\" \\\n && echo \"$REDIS_DOWNLOAD_SHA256 *redis.tar.gz\" | sha256sum -c - \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apt-get purge -y --auto-remove wget\n#   Install sentry-cli so the builds can register deploys, upload sourcemaps, etc.\nRUN set -x \\\n && export SENTRY_CLI_VERSION=1.40.0 \\\n && export SENTRY_CLI_SHA256=3312dbd7d4f7cec8f1980ba09ef741eadfa5d74315fac6f09812e4b307740432 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /tmp/sentry-cli \"https://github.com/getsentry/sentry-cli/releases/download/$SENTRY_CLI_VERSION/sentry-cli-Linux-x86_64\" \\\n && echo \"$SENTRY_CLI_SHA256 /tmp/sentry-cli\" | sha256sum -c - \\\n && chmod +x /tmp/sentry-cli \\\n && mv /tmp/sentry-cli /usr/local/bin \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export DOCKER_VERSION=18.03.1 \\\n && export DOCKER_SHA256=0e245c42de8a21799ab11179a4fce43b494ce173a8a2d6567ea6825d6c5265aa \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O docker.tgz \"https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION-ce.tgz\" \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar -zxvf docker.tgz \\\n && mv docker/* /usr/local/bin/ \\\n && rmdir docker \\\n && rm docker.tgz \\\n && docker -v \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export GCLOUD_SHA256=71229c3cd2290a60310c5ac9fb2e660cb1a4a0f637704b4b3af0a1f75f649e5f \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O gcloud.tgz \"https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-201.0.0-linux-x86_64.tar.gz\" \\\n && echo \"${GCLOUD_SHA256} *gcloud.tgz\" | sha256sum -c - \\\n && tar -zxvf gcloud.tgz -C /opt \\\n && rm gcloud.tgz \\\n && apt-get purge -y --auto-remove wget\nRUN set -x \\\n && export KUBECTL_VERSION=v1.11.0 \\\n && export KUBECTL_SHA256=7fc84102a20aba4c766245714ce9555e3bf5d4116aab38a15b11419070a0fa90 \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O kubectl \"https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl\" \\\n && echo \"${KUBECTL_SHA256} *kubectl\" | sha256sum -c - \\\n && install -m 755 kubectl /usr/local/bin/ \\\n && kubectl --help \\\n && apt-get purge -y --auto-remove wget\nENV PATH=\"${PATH}:/opt/google-cloud-sdk/bin\"\nENV DOCKER_HOST=\"tcp://docker:2375\"\nCOPY package.json /usr/src/app/\nRUN npm install \\\n && npm cache clear --force\nCOPY requirements.txt /usr/src/app/\nRUN pip install -r requirements.txt\nCOPY . /usr/src/app\nRUN node_modules/.bin/webpack -p \\\n && pip install -e .\nENV WORKSPACE_ROOT=\"/workspace\"\nRUN mkdir -p $WORKSPACE_ROOT\nENV PATH=\"/usr/src/app/bin:$PATH\"\nEXPOSE 5000/tcp\nVOLUME /workspace\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD [\"web\", \"--no-debug\", \"--addr\", \"0.0.0.0:5000\"]\n","originalDockerfileUglifiedHash":"9d17feea06144e78fc8f5e8058148569","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fd23417bfde234a9964971766cb023585672a14f.dockerfile"}