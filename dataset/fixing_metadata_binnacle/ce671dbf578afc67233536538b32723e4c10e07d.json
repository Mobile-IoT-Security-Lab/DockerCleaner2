{"seed":2927648310,"processedDockerfileHash":"1851d802539581d35cee8614801eece0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:7.5-cudnn5-devel\nWORKDIR /root\n#   Copy CUDNN files to CUDA directories\nRUN cp /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64\nRUN cp /usr/include/cudnn* /usr/local/cuda/include\nRUN chmod a+r /usr/local/cuda/lib64/libcudnn*\nRUN export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n#   Install general dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobuf software-properties-common zip vim wget -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Install Torch\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ipython3 libssl-dev libzmq3-dev python-zmq python-pip -y )\n#   Install Jupyter Notebook for iTorch\nRUN pip install notebook==6.5.4 ipywidgets==8.0.6\n#   Run Torch7 installation scripts\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive\nWORKDIR /root/torch \nRUN ./install-deps\nRUN ./install.sh\n#   Set ~/torch as working directory\nWORKDIR /root/torch\n#   Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\"\nENV LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\"\nENV PATH=\"/root/torch/install/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\"\nENV DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\nRUN curl -sk https://raw.githubusercontent.com/mbuckler/fblualib/master/install_all.sh | bash\nRUN luarocks install nn\nRUN luarocks install dpnn\nRUN luarocks install cutorch\nRUN luarocks install cunn\nRUN luarocks install image\nRUN luarocks install optim\nRUN luarocks install optnet\nRUN luarocks install csvigo\nRUN luarocks install torchx\nRUN luarocks install tds\n#   Ensure that we get Version 4 of CUDNN (since we are using CUDA 7.0)\n#  WORKDIR /root\n#  RUN git clone -b R4 https://github.com/soumith/cudnn.torch.git\n#  WORKDIR /root/cudnn.torch \n#  RUN luarocks make cudnn-scm-1.rockspec\n#   Install OpenCV\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D CUDA_ARCH_BIN=5.2 -D CUDA_ARCH_PTX=5.2 -D BUILD_PYTHON_SUPPORT=ON .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\n#   Install dlib\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\n#   Install OpenFace dependencies\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends curl -y )\nRUN (apt-get update ;apt-get install --no-install-recommends git -y )\nRUN (apt-get update ;apt-get install --no-install-recommends graphicsmagick -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-nose -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-scipy -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-pandas -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-protobuf -y )\nRUN (apt-get update ;apt-get install --no-install-recommends zip -y )\nRUN (apt-get update ;apt-get install --no-install-recommends wget -y )\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN luarocks install graphicsmagick\n#   Install OpenFace\nWORKDIR /root\nRUN (apt-get update ;apt-get install --no-install-recommends vim )\nRUN git clone --recursive https://github.com/mbuckler/openface.git\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:7.5-cudnn5-devel\nWORKDIR /root\n#  Copy CUDNN files to CUDA directories\nRUN cp /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64\nRUN cp /usr/include/cudnn* /usr/local/cuda/include\nRUN chmod a+r /usr/local/cuda/lib64/libcudnn*\nRUN export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n#  Install general dependencies\nRUN apt-get update \\\n && apt-get install build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobuf software-properties-common zip vim wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Install Torch\nRUN apt-get update \\\n && apt-get install ipython3 libssl-dev libzmq3-dev python-zmq python-pip -y\n#  Install Jupyter Notebook for iTorch\nRUN pip install notebook ipywidgets\n#  Run Torch7 installation scripts\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive\nWORKDIR /root/torch \nRUN ./install-deps\nRUN ./install.sh\n#  Set ~/torch as working directory\nWORKDIR /root/torch\n#  Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\"\nENV LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\"\nENV PATH=\"/root/torch/install/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\"\nENV DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\nRUN curl -sk https://raw.githubusercontent.com/mbuckler/fblualib/master/install_all.sh | bash\nRUN luarocks install nn\nRUN luarocks install dpnn\nRUN luarocks install cutorch\nRUN luarocks install cunn\nRUN luarocks install image\nRUN luarocks install optim\nRUN luarocks install optnet\nRUN luarocks install csvigo\nRUN luarocks install torchx\nRUN luarocks install tds\n#  Ensure that we get Version 4 of CUDNN (since we are using CUDA 7.0)\n# WORKDIR /root\n# RUN git clone -b R4 https://github.com/soumith/cudnn.torch.git\n# WORKDIR /root/cudnn.torch \n# RUN luarocks make cudnn-scm-1.rockspec\n#  Install OpenCV\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D CUDA_ARCH_BIN=5.2 -D CUDA_ARCH_PTX=5.2 -D BUILD_PYTHON_SUPPORT=ON .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\n#  Install dlib\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\n#  Install OpenFace dependencies\nRUN apt-get update\nRUN apt-get install curl -y\nRUN apt-get install git -y\nRUN apt-get install graphicsmagick -y\nRUN apt-get install python-pip -y\nRUN apt-get install python-nose -y\nRUN apt-get install python-scipy -y\nRUN apt-get install python-pandas -y\nRUN apt-get install python-protobuf -y\nRUN apt-get install zip -y\nRUN apt-get install wget -y\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN luarocks install graphicsmagick\n#  Install OpenFace\nWORKDIR /root\nRUN apt-get install vim\nRUN git clone --recursive https://github.com/mbuckler/openface.git\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\n","injectedSmells":[],"originalDockerfileHash":"7dcb76241f451011c9689067ae805e36","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:7.5-cudnn5-devel\nWORKDIR /root\n#   Copy CUDNN files to CUDA directories\nRUN cp /usr/lib/x86_64-linux-gnu/libcudnn* /usr/local/cuda/lib64\nRUN cp /usr/include/cudnn* /usr/local/cuda/include\nRUN chmod a+r /usr/local/cuda/lib64/libcudnn*\nRUN export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n#   Install general dependencies\nRUN apt-get update \\\n && apt-get install build-essential cmake curl gfortran git graphicsmagick libgraphicsmagick1-dev libatlas-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python-dev python-numpy python-protobuf software-properties-common zip vim wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Install Torch\nRUN apt-get update \\\n && apt-get install ipython3 libssl-dev libzmq3-dev python-zmq python-pip -y\n#   Install Jupyter Notebook for iTorch\nRUN pip install notebook ipywidgets\n#   Run Torch7 installation scripts\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive\nWORKDIR /root/torch \nRUN ./install-deps\nRUN ./install.sh\n#   Set ~/torch as working directory\nWORKDIR /root/torch\n#   Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\"\nENV LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\"\nENV PATH=\"/root/torch/install/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\"\nENV DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\nRUN curl -sk https://raw.githubusercontent.com/mbuckler/fblualib/master/install_all.sh | bash\nRUN luarocks install nn\nRUN luarocks install dpnn\nRUN luarocks install cutorch\nRUN luarocks install cunn\nRUN luarocks install image\nRUN luarocks install optim\nRUN luarocks install optnet\nRUN luarocks install csvigo\nRUN luarocks install torchx\nRUN luarocks install tds\n#   Ensure that we get Version 4 of CUDNN (since we are using CUDA 7.0)\n#  WORKDIR /root\n#  RUN git clone -b R4 https://github.com/soumith/cudnn.torch.git\n#  WORKDIR /root/cudnn.torch \n#  RUN luarocks make cudnn-scm-1.rockspec\n#   Install OpenCV\nRUN cd ~ \\\n && mkdir -p ocv-tmp \\\n && cd ocv-tmp \\\n && curl -L https://github.com/Itseez/opencv/archive/2.4.11.zip -o ocv.zip \\\n && unzip ocv.zip \\\n && cd opencv-2.4.11 \\\n && mkdir release \\\n && cd release \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D CUDA_ARCH_BIN=5.2 -D CUDA_ARCH_PTX=5.2 -D BUILD_PYTHON_SUPPORT=ON .. \\\n && make -j8 \\\n && make install \\\n && rm -rf ~/ocv-tmp\n#   Install dlib\nRUN cd ~ \\\n && mkdir -p dlib-tmp \\\n && cd dlib-tmp \\\n && curl -L https://github.com/davisking/dlib/archive/v19.0.tar.gz -o dlib.tar.bz2 \\\n && tar xf dlib.tar.bz2 \\\n && cd dlib-19.0/python_examples \\\n && mkdir build \\\n && cd build \\\n && cmake ../../tools/python \\\n && cmake --build . --config Release \\\n && cp dlib.so /usr/local/lib/python2.7/dist-packages \\\n && rm -rf ~/dlib-tmp\n#   Install OpenFace dependencies\nRUN apt-get update\nRUN apt-get install curl -y\nRUN apt-get install git -y\nRUN apt-get install graphicsmagick -y\nRUN apt-get install python-pip -y\nRUN apt-get install python-nose -y\nRUN apt-get install python-scipy -y\nRUN apt-get install python-pandas -y\nRUN apt-get install python-protobuf -y\nRUN apt-get install zip -y\nRUN apt-get install wget -y\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN luarocks install graphicsmagick\n#   Install OpenFace\nWORKDIR /root\nRUN apt-get install vim\nRUN git clone --recursive https://github.com/mbuckler/openface.git\nRUN cd ~/openface \\\n && ./models/get-models.sh \\\n && pip2 install -r requirements.txt \\\n && python2 setup.py install \\\n && pip2 install -r demos/web/requirements.txt \\\n && pip2 install -r training/requirements.txt\n","originalDockerfileUglifiedHash":"0fd7ce39cf15efa06f5765a08f45f821","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ce671dbf578afc67233536538b32723e4c10e07d.dockerfile"}