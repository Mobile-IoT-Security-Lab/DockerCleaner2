{"seed":2501008092,"processedDockerfileHash":"adee2cea5eef1fed799ac92eeb50f91f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2016 gRPC authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM debian:jessie\n#   Install Git and basic packages.\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf autotools-dev build-essential bzip2 ccache curl dnsutils gcc gcc-multilib git golang gyp lcov libc6 libc6-dbg libc6-dev libgtest-dev libtool make perl strace python-dev python-setuptools python-yaml telnet unzip wget zip -y \\\n && apt-get clean\n#  ================\n#   Build profiling\nRUN apt-get update \\\n && apt-get install --no-install-recommends time -y \\\n && apt-get clean\n#   Google Cloud platform API libraries\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-pip -y \\\n && apt-get clean\nRUN pip install google-api-python-client==2.85.0 --upgrade\n#  ================\n#   C# dependencies\n#   Update to a newer version of mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\nRUN echo \"deb http://download.mono-project.com/repo/debian jessie main\" | tee /etc/apt/sources.list.d/mono-official.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-apache24-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\n#   Install dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends mono-devel ca-certificates-mono nuget -y \\\n && apt-get clean\nRUN nuget update -self\n#   Install dotnet SDK based on https://www.microsoft.com/net/core#debian\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl libunwind8 gettext -y\n#   dotnet-dev-1.0.0-preview2-003131\nRUN curl -sSL -o dotnet100.tar.gz https://go.microsoft.com/fwlink/?LinkID=827530\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet100.tar.gz -C /opt/dotnet\n#   dotnet-dev-1.0.1\nRUN curl -sSL -o dotnet101.tar.gz https://go.microsoft.com/fwlink/?LinkID=843453\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet101.tar.gz -C /opt/dotnet\nRUN ln -s /opt/dotnet/dotnet /usr/local/bin\n#   Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup\n#  =================\n#   C++ dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgflags-dev libgtest-dev libc++-dev clang -y \\\n && apt-get clean\n#  ==================\n#   Node dependencies\n#   Install nvm\nRUN touch .profile\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash\n#   Install all versions of node that we want to test\nRUN /bin/bash -l -c \"nvm install 4 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 5 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 6 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 8 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 9 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 10 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm alias default 10\"\n#  =================\n#   PHP dependencies\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git php5 php5-dev phpunit unzip -y\n#  ==================\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  ====================\n#   Python dependencies\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-all-dev python3-all-dev python-pip -y\n#   Install Python packages from PyPI\nRUN pip install pip==10.0.1 --upgrade\nRUN pip install virtualenv==20.21.0\nRUN pip install futures==2.2.0 enum34==1.0.4 protobuf==3.5.2.post1 six==1.10.0 twisted==17.5.0\n#   Install pip and virtualenv for Python 3.4\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.4\nRUN python3.4 -m pip install virtualenv\n#   Install coverage for Python test coverage reporting\nRUN pip install coverage==7.2.3\nENV PATH=\"~/.local/bin:$PATH\"\n#   Install Mako to generate files in grpc/grpc-node\nRUN pip install Mako==1.2.4\nRUN mkdir /var/local/jenkins\n#   Define the default command.\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2016 gRPC authors.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM debian:jessie\n#  Install Git and basic packages.\nRUN apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl dnsutils gcc gcc-multilib git golang gyp lcov libc6 libc6-dbg libc6-dev libgtest-dev libtool make perl strace python-dev python-setuptools python-yaml telnet unzip wget zip -y \\\n && apt-get clean\n# ================\n#  Build profiling\nRUN apt-get update \\\n && apt-get install time -y \\\n && apt-get clean\n#  Google Cloud platform API libraries\nRUN apt-get update \\\n && apt-get install python-pip -y \\\n && apt-get clean\nRUN pip install google-api-python-client --upgrade\n# ================\n#  C# dependencies\n#  Update to a newer version of mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\nRUN echo \"deb http://download.mono-project.com/repo/debian jessie main\" | tee /etc/apt/sources.list.d/mono-official.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-apache24-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\n#  Install dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install mono-devel ca-certificates-mono nuget -y \\\n && apt-get clean\nRUN nuget update -self\n#  Install dotnet SDK based on https://www.microsoft.com/net/core#debian\nRUN apt-get update \\\n && apt-get install curl libunwind8 gettext -y\n#  dotnet-dev-1.0.0-preview2-003131\nRUN curl -sSL -o dotnet100.tar.gz https://go.microsoft.com/fwlink/?LinkID=827530\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet100.tar.gz -C /opt/dotnet\n#  dotnet-dev-1.0.1\nRUN curl -sSL -o dotnet101.tar.gz https://go.microsoft.com/fwlink/?LinkID=843453\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet101.tar.gz -C /opt/dotnet\nRUN ln -s /opt/dotnet/dotnet /usr/local/bin\n#  Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup\n# =================\n#  C++ dependencies\nRUN apt-get update \\\n && apt-get install libgflags-dev libgtest-dev libc++-dev clang -y \\\n && apt-get clean\n# ==================\n#  Node dependencies\n#  Install nvm\nRUN touch .profile\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash\n#  Install all versions of node that we want to test\nRUN /bin/bash -l -c \"nvm install 4 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 5 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 6 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 8 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 9 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 10 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm alias default 10\"\n# =================\n#  PHP dependencies\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install git php5 php5-dev phpunit unzip -y\n# ==================\n#  Ruby dependencies\n#  Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#  Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n# ====================\n#  Python dependencies\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install python-all-dev python3-all-dev python-pip -y\n#  Install Python packages from PyPI\nRUN pip install pip==10.0.1 --upgrade\nRUN pip install virtualenv\nRUN pip install futures==2.2.0 enum34==1.0.4 protobuf==3.5.2.post1 six==1.10.0 twisted==17.5.0\n#  Install pip and virtualenv for Python 3.4\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.4\nRUN python3.4 -m pip install virtualenv\n#  Install coverage for Python test coverage reporting\nRUN pip install coverage\nENV PATH=\"~/.local/bin:$PATH\"\n#  Install Mako to generate files in grpc/grpc-node\nRUN pip install Mako\nRUN mkdir /var/local/jenkins\n#  Define the default command.\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"4b37587ae4aa7b56501556e695125adc","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2016 gRPC authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM debian:jessie\n#   Install Git and basic packages.\nRUN apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl dnsutils gcc gcc-multilib git golang gyp lcov libc6 libc6-dbg libc6-dev libgtest-dev libtool make perl strace python-dev python-setuptools python-yaml telnet unzip wget zip -y \\\n && apt-get clean\n#  ================\n#   Build profiling\nRUN apt-get update \\\n && apt-get install time -y \\\n && apt-get clean\n#   Google Cloud platform API libraries\nRUN apt-get update \\\n && apt-get install python-pip -y \\\n && apt-get clean\nRUN pip install google-api-python-client --upgrade\n#  ================\n#   C# dependencies\n#   Update to a newer version of mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\nRUN echo \"deb http://download.mono-project.com/repo/debian jessie main\" | tee /etc/apt/sources.list.d/mono-official.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-apache24-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list\n#   Install dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install mono-devel ca-certificates-mono nuget -y \\\n && apt-get clean\nRUN nuget update -self\n#   Install dotnet SDK based on https://www.microsoft.com/net/core#debian\nRUN apt-get update \\\n && apt-get install curl libunwind8 gettext -y\n#   dotnet-dev-1.0.0-preview2-003131\nRUN curl -sSL -o dotnet100.tar.gz https://go.microsoft.com/fwlink/?LinkID=827530\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet100.tar.gz -C /opt/dotnet\n#   dotnet-dev-1.0.1\nRUN curl -sSL -o dotnet101.tar.gz https://go.microsoft.com/fwlink/?LinkID=843453\nRUN mkdir -p /opt/dotnet \\\n && tar zxf dotnet101.tar.gz -C /opt/dotnet\nRUN ln -s /opt/dotnet/dotnet /usr/local/bin\n#   Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup\n#  =================\n#   C++ dependencies\nRUN apt-get update \\\n && apt-get install libgflags-dev libgtest-dev libc++-dev clang -y \\\n && apt-get clean\n#  ==================\n#   Node dependencies\n#   Install nvm\nRUN touch .profile\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash\n#   Install all versions of node that we want to test\nRUN /bin/bash -l -c \"nvm install 4 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 5 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 6 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 8 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 9 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm install 10 \\\n && npm config set cache /tmp/npm-cache\"\nRUN /bin/bash -l -c \"nvm alias default 10\"\n#  =================\n#   PHP dependencies\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install git php5 php5-dev phpunit unzip -y\n#  ==================\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  ====================\n#   Python dependencies\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install python-all-dev python3-all-dev python-pip -y\n#   Install Python packages from PyPI\nRUN pip install pip==10.0.1 --upgrade\nRUN pip install virtualenv\nRUN pip install futures==2.2.0 enum34==1.0.4 protobuf==3.5.2.post1 six==1.10.0 twisted==17.5.0\n#   Install pip and virtualenv for Python 3.4\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.4\nRUN python3.4 -m pip install virtualenv\n#   Install coverage for Python test coverage reporting\nRUN pip install coverage\nENV PATH=\"~/.local/bin:$PATH\"\n#   Install Mako to generate files in grpc/grpc-node\nRUN pip install Mako\nRUN mkdir /var/local/jenkins\n#   Define the default command.\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"c55182abd6f8028f0753325501a44726","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a82e7050fc4a2625216e865e83eb9504b59f5f8b.dockerfile"}