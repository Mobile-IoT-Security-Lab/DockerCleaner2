{"seed":98003746,"processedDockerfileHash":"d7793a0fe754348b7ce61ecab6ac2fd9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#    Dockerfile -- to build the sources on a well-known platform\n#    Copyright (C) 2014, 2015  Olaf Meeuwissen\n#\n#    This file is part of Openambit.\n#\n#    Openambit is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published\n#    by the Free Software Foundation, either version 3 of the License,\n#    or (at your option) any later version.\n#\n#      Openambit distributed in the hope that it will be useful, but\n#      WITHOUT ANY WARRANTY --- without even the implied warranty of\n#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#      GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with Openambit.  If not, see https://www.gnu.org/licenses/.\n#    Recommended way to build the container this creates (for lack of\n#    an easy way to exclude everything but the Dockerfile):\n#\n#      docker build -t openambit:jessie - < Dockerfile\n#\n#    After that is just a matter of compiling the sources with:\n#\n#      docker run --rm -v $PWD:/code -u $(id -u) openambit:jessie\n#\n#    Doing so gives you a basic sanity check of code compilability on a\n#    minimalistic, reproducible development platform.\n#\n#    If you don't like the defaults of building in $PWD/_build with no\n#    options to either cmake or make, feel free to adjust the relevant\n#    environment variables.  For example, you could build with:\n#\n#      docker run --rm -v $PWD:/code -u $(id -u) \\\n#        --env BUILD_DIR=tmp \\\n#        --env CMAKE_OPTS=\"-DBUILD_EXTRAS=1\" \\\n#        --env MAKE_OPTS=-k \\\n#        openambit:jessie\n#\n#    Check out the --env-file option to docker if you find that overly\n#    long-winded.  If you use a BUILD_DIR that is not below /code make\n#    sure to drop the --rm option.\n#\n#    For interactive sessions, you may want to use:\n#\n#      docker run -i -t --rm -v $PWD:/code -u $(id -u) \\\n#        openambit:jessie /bin/bash\n#\n#    Again, drop the --rm option if you build in a location that is not\n#    below /code.\nFROM debian:jessie\nMAINTAINER Olaf Meeuwissen <paddy-hack@member.fsf.org>\nENV APT_OPTS=\"--assume-yes --no-install-recommends\"\n#   build system dependencies\n#   Note that gcc does *not* depend on any specific C library.  Debian\n#   and derivatives ship several ...\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake make gcc libc-dev ${APT_OPTS}\n#   libambit and example application build dependencies\n#   The HID API support needs at least one of these to be available.  The\n#   HIDAPI_DRIVER `cmake` variable controls what is used.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libudev-dev libusb-1.0-0-dev libpcap-dev ${APT_OPTS}\n#   openambit build dependencies\n#   Note that libqjson-dev needs to be >= 0.8\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ qtbase5-dev qttools5-dev zlib1g-dev ${APT_OPTS}\n#   wireshark dissector build dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends libglib2.0-dev libwireshark-dev python ${APT_OPTS}\nWORKDIR /code\nENV BUILD_DIR=\"_build\"\nCMD test -d ${BUILD_DIR} || mkdir ${BUILD_DIR} ; cd ${BUILD_DIR} \\\n && cmake ${CMAKE_OPTS} .. \\\n && make ${MAKE_OPTS}\n#   Finally, things that really should be fixed in the Openambit code.\n#   FIXME add multiarch support to src/libambit/cmake/FindUdev.cmake\nRUN cd /usr/lib/ \\\n && ln -s x86_64-linux-gnu/libudev.so\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#   Dockerfile -- to build the sources on a well-known platform\n#   Copyright (C) 2014, 2015  Olaf Meeuwissen\n#\n#   This file is part of Openambit.\n#\n#   Openambit is free software: you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published\n#   by the Free Software Foundation, either version 3 of the License,\n#   or (at your option) any later version.\n#\n#     Openambit distributed in the hope that it will be useful, but\n#     WITHOUT ANY WARRANTY --- without even the implied warranty of\n#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#     GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with Openambit.  If not, see https://www.gnu.org/licenses/.\n#   Recommended way to build the container this creates (for lack of\n#   an easy way to exclude everything but the Dockerfile):\n#\n#     docker build -t openambit:jessie - < Dockerfile\n#\n#   After that is just a matter of compiling the sources with:\n#\n#     docker run --rm -v $PWD:/code -u $(id -u) openambit:jessie\n#\n#   Doing so gives you a basic sanity check of code compilability on a\n#   minimalistic, reproducible development platform.\n#\n#   If you don't like the defaults of building in $PWD/_build with no\n#   options to either cmake or make, feel free to adjust the relevant\n#   environment variables.  For example, you could build with:\n#\n#     docker run --rm -v $PWD:/code -u $(id -u) \\\n#       --env BUILD_DIR=tmp \\\n#       --env CMAKE_OPTS=\"-DBUILD_EXTRAS=1\" \\\n#       --env MAKE_OPTS=-k \\\n#       openambit:jessie\n#\n#   Check out the --env-file option to docker if you find that overly\n#   long-winded.  If you use a BUILD_DIR that is not below /code make\n#   sure to drop the --rm option.\n#\n#   For interactive sessions, you may want to use:\n#\n#     docker run -i -t --rm -v $PWD:/code -u $(id -u) \\\n#       openambit:jessie /bin/bash\n#\n#   Again, drop the --rm option if you build in a location that is not\n#   below /code.\nFROM debian:jessie\nMAINTAINER Olaf Meeuwissen <paddy-hack@member.fsf.org>\nENV APT_OPTS=\"--assume-yes --no-install-recommends\"\n#  build system dependencies\n#  Note that gcc does *not* depend on any specific C library.  Debian\n#  and derivatives ship several ...\nRUN apt-get update \\\n && apt-get install cmake make gcc libc-dev ${APT_OPTS}\n#  libambit and example application build dependencies\n#  The HID API support needs at least one of these to be available.  The\n#  HIDAPI_DRIVER `cmake` variable controls what is used.\nRUN apt-get update \\\n && apt-get install libudev-dev libusb-1.0-0-dev libpcap-dev ${APT_OPTS}\n#  openambit build dependencies\n#  Note that libqjson-dev needs to be >= 0.8\nRUN apt-get update \\\n && apt-get install g++ qtbase5-dev qttools5-dev zlib1g-dev ${APT_OPTS}\n#  wireshark dissector build dependencies\nRUN apt-get update \\\n && apt-get install libglib2.0-dev libwireshark-dev python ${APT_OPTS}\nWORKDIR /code\nENV BUILD_DIR=\"_build\"\nCMD test -d ${BUILD_DIR} || mkdir ${BUILD_DIR} ; cd ${BUILD_DIR} \\\n && cmake ${CMAKE_OPTS} .. \\\n && make ${MAKE_OPTS}\n#  Finally, things that really should be fixed in the Openambit code.\n#  FIXME add multiarch support to src/libambit/cmake/FindUdev.cmake\nRUN cd /usr/lib/ \\\n && ln -s x86_64-linux-gnu/libudev.so\n","injectedSmells":[],"originalDockerfileHash":"e82d8ba569e5e983cc15afc605d76b22","successfullyInjectedSmells":[],"originalDockerfileUglified":"#    Dockerfile -- to build the sources on a well-known platform\n#    Copyright (C) 2014, 2015  Olaf Meeuwissen\n#\n#    This file is part of Openambit.\n#\n#    Openambit is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published\n#    by the Free Software Foundation, either version 3 of the License,\n#    or (at your option) any later version.\n#\n#      Openambit distributed in the hope that it will be useful, but\n#      WITHOUT ANY WARRANTY --- without even the implied warranty of\n#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#      GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with Openambit.  If not, see https://www.gnu.org/licenses/.\n#    Recommended way to build the container this creates (for lack of\n#    an easy way to exclude everything but the Dockerfile):\n#\n#      docker build -t openambit:jessie - < Dockerfile\n#\n#    After that is just a matter of compiling the sources with:\n#\n#      docker run --rm -v $PWD:/code -u $(id -u) openambit:jessie\n#\n#    Doing so gives you a basic sanity check of code compilability on a\n#    minimalistic, reproducible development platform.\n#\n#    If you don't like the defaults of building in $PWD/_build with no\n#    options to either cmake or make, feel free to adjust the relevant\n#    environment variables.  For example, you could build with:\n#\n#      docker run --rm -v $PWD:/code -u $(id -u) \\\n#        --env BUILD_DIR=tmp \\\n#        --env CMAKE_OPTS=\"-DBUILD_EXTRAS=1\" \\\n#        --env MAKE_OPTS=-k \\\n#        openambit:jessie\n#\n#    Check out the --env-file option to docker if you find that overly\n#    long-winded.  If you use a BUILD_DIR that is not below /code make\n#    sure to drop the --rm option.\n#\n#    For interactive sessions, you may want to use:\n#\n#      docker run -i -t --rm -v $PWD:/code -u $(id -u) \\\n#        openambit:jessie /bin/bash\n#\n#    Again, drop the --rm option if you build in a location that is not\n#    below /code.\nFROM debian:jessie\nMAINTAINER Olaf Meeuwissen <paddy-hack@member.fsf.org>\nENV APT_OPTS=\"--assume-yes --no-install-recommends\"\n#   build system dependencies\n#   Note that gcc does *not* depend on any specific C library.  Debian\n#   and derivatives ship several ...\nRUN apt-get update \\\n && apt-get install cmake make gcc libc-dev ${APT_OPTS}\n#   libambit and example application build dependencies\n#   The HID API support needs at least one of these to be available.  The\n#   HIDAPI_DRIVER `cmake` variable controls what is used.\nRUN apt-get update \\\n && apt-get install libudev-dev libusb-1.0-0-dev libpcap-dev ${APT_OPTS}\n#   openambit build dependencies\n#   Note that libqjson-dev needs to be >= 0.8\nRUN apt-get update \\\n && apt-get install g++ qtbase5-dev qttools5-dev zlib1g-dev ${APT_OPTS}\n#   wireshark dissector build dependencies\nRUN apt-get update \\\n && apt-get install libglib2.0-dev libwireshark-dev python ${APT_OPTS}\nWORKDIR /code\nENV BUILD_DIR=\"_build\"\nCMD test -d ${BUILD_DIR} || mkdir ${BUILD_DIR} ; cd ${BUILD_DIR} \\\n && cmake ${CMAKE_OPTS} .. \\\n && make ${MAKE_OPTS}\n#   Finally, things that really should be fixed in the Openambit code.\n#   FIXME add multiarch support to src/libambit/cmake/FindUdev.cmake\nRUN cd /usr/lib/ \\\n && ln -s x86_64-linux-gnu/libudev.so\n","originalDockerfileUglifiedHash":"9d267a7b373821e1be86e81de409b842","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1b04edb029351be5d059f819d74d9ed9babd41a8.dockerfile"}