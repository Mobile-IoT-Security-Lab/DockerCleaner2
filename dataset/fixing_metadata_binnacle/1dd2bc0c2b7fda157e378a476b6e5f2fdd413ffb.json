{"seed":933132454,"processedDockerfileHash":"dd34e1fb1309b6919dc0abce3188d3e2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM centos:7 AS builder\n#   setup sudo and other tools (for testing only)\nRUN yum update -y \\\n && yum install epel-release -y \\\n && yum install gettext python-pip jq yum-utils -y \\\n && yum clean all\nRUN pip install yq==3.2.1\n#   kubernetes rpms\nRUN echo -e '[kubernetes]\\nname=Kubernetes\\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=0' >> /etc/yum.repos.d/kubernetes.repo\nARG K8S_VERSION_OLD=1.10.6\nARG K8S_VERSION_NEW=1.11.2\nRUN mkdir /var/tmp/${K8S_VERSION_OLD} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_OLD} kubectl-${K8S_VERSION_OLD} kubeadm-${K8S_VERSION_OLD} kubelet-${K8S_VERSION_OLD} kubernetes-cni\nRUN mkdir /var/tmp/${K8S_VERSION_NEW} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_NEW} kubectl-${K8S_VERSION_NEW} kubeadm-${K8S_VERSION_NEW} kubelet-${K8S_VERSION_NEW} kubernetes-cni\nWORKDIR /usr/scripts\nCOPY bootstrap_scripts bootstrap_scripts\nCOPY templates templates\nCOPY generate-yaml.sh .\n#   Run generate to test things out\n#   Setup some variables for testing\nENV OS_TYPE=\"centos\"\nRUN chmod +x /usr/scripts/generate-yaml.sh \\\n && /usr/scripts/generate-yaml.sh \\\n && mkdir -p /usr/scripts/master \\\n && mkdir -p /usr/scripts/node\n#   get master scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/master/startupScript.sh \\\n && chmod +x /usr/scripts/master/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/master/shutdownScript.sh \\\n && chmod +x /usr/scripts/master/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/master/upgradeScript.sh \\\n && chmod +x /usr/scripts/master/upgradeScript.sh\n#   get node scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/node/startupScript.sh \\\n && chmod +x /usr/scripts/node/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/node/shutdownScript.sh \\\n && chmod +x /usr/scripts/node/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/node/upgradeScript.sh \\\n && chmod +x /usr/scripts/node/upgradeScript.sh\nFROM centos:7.4.1708\nWORKDIR /resources\nRUN yum update -y \\\n && yum install -y yum-utils createrepo wget\nCOPY --from=builder /var/tmp/${K8S_VERSION_OLD} rpms/${K8S_VERSION_OLD}\nCOPY --from=builder /var/tmp/${K8S_VERSION_NEW} rpms/${K8S_VERSION_NEW}\nCOPY --from=builder /usr/scripts ./scripts\nRUN mkdir -p /resources/yaml \\\n && wget --directory-prefix=/resources/yaml https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml\nRUN createrepo /resources/rpms/${K8S_VERSION_OLD}\nRUN echo -e \"[local]\\nname=Local\\nbaseurl=file:///resources/rpms/${K8S_VERSION_OLD}\\nenabled=1\\ngpgcheck=0\\nrepo_gpgcheck=0\" >> /etc/yum.repos.d/local.repo\n#   fake vars for script validatio\nENV MASTER_IP=\"changeme\"\nENV CONTROL_PLANE_VERSION=\"changeme\"\nENV POD_CIDR=\"changeme\"\nENV CLUSTER_DNS_DOMAIN=\"cluster.local\"\nENV SERVICE_CIDR=\"changeme\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM centos:7 AS builder\n#  setup sudo and other tools (for testing only)\nRUN yum update -y \\\n && yum install epel-release -y \\\n && yum install gettext python-pip jq yum-utils -y \\\n && yum clean all\nRUN pip install yq\n#  kubernetes rpms\nRUN echo -e '[kubernetes]\\nname=Kubernetes\\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=0' >> /etc/yum.repos.d/kubernetes.repo\nARG K8S_VERSION_OLD=1.10.6\nARG K8S_VERSION_NEW=1.11.2\nRUN mkdir /var/tmp/${K8S_VERSION_OLD} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_OLD} kubectl-${K8S_VERSION_OLD} kubeadm-${K8S_VERSION_OLD} kubelet-${K8S_VERSION_OLD} kubernetes-cni\nRUN mkdir /var/tmp/${K8S_VERSION_NEW} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_NEW} kubectl-${K8S_VERSION_NEW} kubeadm-${K8S_VERSION_NEW} kubelet-${K8S_VERSION_NEW} kubernetes-cni\nWORKDIR /usr/scripts\nCOPY bootstrap_scripts bootstrap_scripts\nCOPY templates templates\nCOPY generate-yaml.sh .\n#  Run generate to test things out\n#  Setup some variables for testing\nENV OS_TYPE=\"centos\"\nRUN chmod +x /usr/scripts/generate-yaml.sh \\\n && /usr/scripts/generate-yaml.sh \\\n && mkdir -p /usr/scripts/master \\\n && mkdir -p /usr/scripts/node\n#  get master scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/master/startupScript.sh \\\n && chmod +x /usr/scripts/master/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/master/shutdownScript.sh \\\n && chmod +x /usr/scripts/master/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/master/upgradeScript.sh \\\n && chmod +x /usr/scripts/master/upgradeScript.sh\n#  get node scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/node/startupScript.sh \\\n && chmod +x /usr/scripts/node/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/node/shutdownScript.sh \\\n && chmod +x /usr/scripts/node/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/node/upgradeScript.sh \\\n && chmod +x /usr/scripts/node/upgradeScript.sh\nFROM centos:7.4.1708\nWORKDIR /resources\nRUN yum update -y \\\n && yum install -y yum-utils createrepo wget\nCOPY --from=builder /var/tmp/${K8S_VERSION_OLD} rpms/${K8S_VERSION_OLD}\nCOPY --from=builder /var/tmp/${K8S_VERSION_NEW} rpms/${K8S_VERSION_NEW}\nCOPY --from=builder /usr/scripts ./scripts\nRUN mkdir -p /resources/yaml \\\n && wget --directory-prefix=/resources/yaml https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml\nRUN createrepo /resources/rpms/${K8S_VERSION_OLD}\nRUN echo -e \"[local]\\nname=Local\\nbaseurl=file:///resources/rpms/${K8S_VERSION_OLD}\\nenabled=1\\ngpgcheck=0\\nrepo_gpgcheck=0\" >> /etc/yum.repos.d/local.repo\n#  fake vars for script validatio\nENV MASTER_IP=\"changeme\"\nENV CONTROL_PLANE_VERSION=\"changeme\"\nENV POD_CIDR=\"changeme\"\nENV CLUSTER_DNS_DOMAIN=\"cluster.local\"\nENV SERVICE_CIDR=\"changeme\"\n","injectedSmells":[],"originalDockerfileHash":"3f10841e45fef7fb0ad04a83379e78a6","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM centos:7 AS builder\n#   setup sudo and other tools (for testing only)\nRUN yum update -y \\\n && yum install epel-release -y \\\n && yum install gettext python-pip jq yum-utils -y \\\n && yum clean all\nRUN pip install yq\n#   kubernetes rpms\nRUN echo -e '[kubernetes]\\nname=Kubernetes\\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\\nenabled=1\\ngpgcheck=1\\nrepo_gpgcheck=0' >> /etc/yum.repos.d/kubernetes.repo\nARG K8S_VERSION_OLD=1.10.6\nARG K8S_VERSION_NEW=1.11.2\nRUN mkdir /var/tmp/${K8S_VERSION_OLD} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_OLD} kubectl-${K8S_VERSION_OLD} kubeadm-${K8S_VERSION_OLD} kubelet-${K8S_VERSION_OLD} kubernetes-cni\nRUN mkdir /var/tmp/${K8S_VERSION_NEW} \\\n && yumdownloader --assumeyes --resolve --destdir /var/tmp/${K8S_VERSION_NEW} kubectl-${K8S_VERSION_NEW} kubeadm-${K8S_VERSION_NEW} kubelet-${K8S_VERSION_NEW} kubernetes-cni\nWORKDIR /usr/scripts\nCOPY bootstrap_scripts bootstrap_scripts\nCOPY templates templates\nCOPY generate-yaml.sh .\n#   Run generate to test things out\n#   Setup some variables for testing\nENV OS_TYPE=\"centos\"\nRUN chmod +x /usr/scripts/generate-yaml.sh \\\n && /usr/scripts/generate-yaml.sh \\\n && mkdir -p /usr/scripts/master \\\n && mkdir -p /usr/scripts/node\n#   get master scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/master/startupScript.sh \\\n && chmod +x /usr/scripts/master/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/master/shutdownScript.sh \\\n && chmod +x /usr/scripts/master/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/master/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Master\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/master/upgradeScript.sh \\\n && chmod +x /usr/scripts/master/upgradeScript.sh\n#   get node scripts\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/startupScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.startupScript | xargs -0 printf '%b' >> /usr/scripts/node/startupScript.sh \\\n && chmod +x /usr/scripts/node/startupScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/shutdownScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.shutdownScript | xargs -0 printf '%b' >> /usr/scripts/node/shutdownScript.sh \\\n && chmod +x /usr/scripts/node/shutdownScript.sh\nRUN echo '#!/usr/bin/env bash' > /usr/scripts/node/upgradeScript.sh \\\n && cat /usr/scripts/out/provider-components.yaml | yq -s --raw-output '.[] | select(.metadata.name == \"machine-setup\") | .data.\"machine_setup_configs.yaml\"' | yq '.items[] | select(.machineParams.roles | contains([\"Node\"]))' | jq --raw-output -s .[-1].metadata.upgradeScript | xargs -0 printf '%b' >> /usr/scripts/node/upgradeScript.sh \\\n && chmod +x /usr/scripts/node/upgradeScript.sh\nFROM centos:7.4.1708\nWORKDIR /resources\nRUN yum update -y \\\n && yum install -y yum-utils createrepo wget\nCOPY --from=builder /var/tmp/${K8S_VERSION_OLD} rpms/${K8S_VERSION_OLD}\nCOPY --from=builder /var/tmp/${K8S_VERSION_NEW} rpms/${K8S_VERSION_NEW}\nCOPY --from=builder /usr/scripts ./scripts\nRUN mkdir -p /resources/yaml \\\n && wget --directory-prefix=/resources/yaml https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml\nRUN createrepo /resources/rpms/${K8S_VERSION_OLD}\nRUN echo -e \"[local]\\nname=Local\\nbaseurl=file:///resources/rpms/${K8S_VERSION_OLD}\\nenabled=1\\ngpgcheck=0\\nrepo_gpgcheck=0\" >> /etc/yum.repos.d/local.repo\n#   fake vars for script validatio\nENV MASTER_IP=\"changeme\"\nENV CONTROL_PLANE_VERSION=\"changeme\"\nENV POD_CIDR=\"changeme\"\nENV CLUSTER_DNS_DOMAIN=\"cluster.local\"\nENV SERVICE_CIDR=\"changeme\"\n","originalDockerfileUglifiedHash":"15766d6535d1b099da55fa6ce9b90328","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1dd2bc0c2b7fda157e378a476b6e5f2fdd413ffb.dockerfile"}