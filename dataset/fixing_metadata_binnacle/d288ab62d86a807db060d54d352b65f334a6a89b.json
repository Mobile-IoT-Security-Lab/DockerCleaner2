{"seed":2909655133,"processedDockerfileHash":"8d07f34e5b756401a4b9befd488a7bd3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using a docker container on Windows \n#   Server 2016\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time. Run this from\n#   # a directory containing the sources you are validating. For example from \n#   # c:\\go\\src\\github.com\\docker\\docker\n#\n#   docker build -t docker -f Dockerfile.windows .\n#\n#\n#   # Build docker in a container. Run the following from a Windows cmd command prommpt,\n#   # replacing c:\\built with the directory you want the binaries to be placed on the\n#   # host system.\n#\n#   docker run --rm -v \"c:\\built:c:\\target\" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'\n#\n#   Important notes:\n#   ---------------\n#\n#   'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows \n#   Server 2016. It ensures that the network is up and available for when the command is\n#   network related. This bug is being tracked internally at Microsoft and exists in TP4.\n#   Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file\n#   as bullet proof as possible. This isn't a big deal as this only runs the first time.\n#\n#   The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This\n#   is because they require a console window which isn't present in a container in Windows.\n#   See the example at the top of this file. Do NOT use -it in that docker run!!! \n#\n#   Don't try to use a volume for passing the source through. The cygwin posix utilities will\n#   balk at reparse points. Again, see the example at the top of this file on how use a volume\n#   to get the built binary out of the container.\n#\n#   The steps are minimised dramatically to improve performance (TP4 is slow on commit)\nFROM windowsservercore\n#   Environment variable notes:\n#    - GO_VERSION must consistent with 'Dockerfile' used by Linux'.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.5.4\" \\\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe\" \\\n    RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\" \\\n    GOPATH=\"C:/go;C:/go/src/github.com/docker/docker/vendor\" \\\n    FROM_DOCKERFILE=\"1\"\nWORKDIR c:/\n#   Everything downloaded/installed in one go (better performance, esp on TP4)\nRUN setx /M Path \"c:\\git\\cmd;c:\\git\\bin;c:\\git\\usr\\bin;%Path%;c:\\gcc\\bin;c:\\go\\bin\" \\\n && setx GOROOT \"c:\\go\" \\\n && powershell -command $ErrorActionPreference = 'Stop' ; Start-Sleep -Seconds 5 ; Function Download-File\n#   Prepare for building\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using a docker container on Windows \n#  Server 2016\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time. Run this from\n#  # a directory containing the sources you are validating. For example from \n#  # c:\\go\\src\\github.com\\docker\\docker\n#\n#  docker build -t docker -f Dockerfile.windows .\n#\n#\n#  # Build docker in a container. Run the following from a Windows cmd command prommpt,\n#  # replacing c:\\built with the directory you want the binaries to be placed on the\n#  # host system.\n#\n#  docker run --rm -v \"c:\\built:c:\\target\" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'\n#\n#  Important notes:\n#  ---------------\n#\n#  'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows \n#  Server 2016. It ensures that the network is up and available for when the command is\n#  network related. This bug is being tracked internally at Microsoft and exists in TP4.\n#  Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file\n#  as bullet proof as possible. This isn't a big deal as this only runs the first time.\n#\n#  The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This\n#  is because they require a console window which isn't present in a container in Windows.\n#  See the example at the top of this file. Do NOT use -it in that docker run!!! \n#\n#  Don't try to use a volume for passing the source through. The cygwin posix utilities will\n#  balk at reparse points. Again, see the example at the top of this file on how use a volume\n#  to get the built binary out of the container.\n#\n#  The steps are minimised dramatically to improve performance (TP4 is slow on commit)\nFROM windowsservercore\n#  Environment variable notes:\n#   - GO_VERSION must consistent with 'Dockerfile' used by Linux'.\n#   - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.5.4\" \\\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe\" \\\n    RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\" \\\n    GOPATH=\"C:/go;C:/go/src/github.com/docker/docker/vendor\" \\\n    FROM_DOCKERFILE=\"1\"\nWORKDIR c:/\n#  Everything downloaded/installed in one go (better performance, esp on TP4)\nRUN setx /M Path \"c:\\git\\cmd;c:\\git\\bin;c:\\git\\usr\\bin;%Path%;c:\\gcc\\bin;c:\\go\\bin\" \\\n && setx GOROOT \"c:\\go\" \\\n && powershell -command $ErrorActionPreference = 'Stop' ; Start-Sleep -Seconds 5 ; Function Download-File\n#  Prepare for building\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"30f964f5d43e43bc3315cb5aad6dd05d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using a docker container on Windows \n#   Server 2016\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time. Run this from\n#   # a directory containing the sources you are validating. For example from \n#   # c:\\go\\src\\github.com\\docker\\docker\n#\n#   docker build -t docker -f Dockerfile.windows .\n#\n#\n#   # Build docker in a container. Run the following from a Windows cmd command prommpt,\n#   # replacing c:\\built with the directory you want the binaries to be placed on the\n#   # host system.\n#\n#   docker run --rm -v \"c:\\built:c:\\target\" docker sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary; ec=$?; if [ $ec -eq 0 ]; then robocopy /c/go/src/github.com/docker/docker/bundles/$(cat VERSION)/binary /c/target/binary; fi; exit $ec'\n#\n#   Important notes:\n#   ---------------\n#\n#   'Start-Sleep' is a deliberate workaround for a current problem on containers in Windows \n#   Server 2016. It ensures that the network is up and available for when the command is\n#   network related. This bug is being tracked internally at Microsoft and exists in TP4.\n#   Generally sleep 1 or 2 is probably enough, but making it 5 to make the build file\n#   as bullet proof as possible. This isn't a big deal as this only runs the first time.\n#\n#   The cygwin posix utilities from GIT aren't usable interactively as at January 2016. This\n#   is because they require a console window which isn't present in a container in Windows.\n#   See the example at the top of this file. Do NOT use -it in that docker run!!! \n#\n#   Don't try to use a volume for passing the source through. The cygwin posix utilities will\n#   balk at reparse points. Again, see the example at the top of this file on how use a volume\n#   to get the built binary out of the container.\n#\n#   The steps are minimised dramatically to improve performance (TP4 is slow on commit)\nFROM windowsservercore\n#   Environment variable notes:\n#    - GO_VERSION must consistent with 'Dockerfile' used by Linux'.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.5.4\" \\\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe\" \\\n    RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\" \\\n    GOPATH=\"C:/go;C:/go/src/github.com/docker/docker/vendor\" \\\n    FROM_DOCKERFILE=\"1\"\nWORKDIR c:/\n#   Everything downloaded/installed in one go (better performance, esp on TP4)\nRUN setx /M Path \"c:\\git\\cmd;c:\\git\\bin;c:\\git\\usr\\bin;%Path%;c:\\gcc\\bin;c:\\go\\bin\" \\\n && setx GOROOT \"c:\\go\" \\\n && powershell -command $ErrorActionPreference = 'Stop' ; Start-Sleep -Seconds 5 ; Function Download-File\n#   Prepare for building\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"d69c3e38e7fef454038280265fb041a2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d288ab62d86a807db060d54d352b65f334a6a89b.dockerfile"}