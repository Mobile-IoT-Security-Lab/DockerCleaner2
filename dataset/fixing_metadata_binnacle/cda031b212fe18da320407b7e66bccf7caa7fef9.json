{"seed":1868833949,"processedDockerfileHash":"5448c83ee284fab8a23fe853e479ea60","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:15.04\nMAINTAINER Dan Isla <disla@jpl.nasa.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTEBOOK_VERSION=\"4.1.0\"\n#   Not essential, but wise to set the lang\n#   Note: Users with other languages should set this in their derivative image\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYTHONIOENCODING=\"UTF-8\"\n#   Remove preinstalled copy of python that blocks our ability to install development python.\nRUN DEBIAN_FRONTEND=noninteractive apt-get remove -yq python3-minimal python3.4 python3.4-minimal libpython3-stdlib libpython3.4-stdlib libpython3.4-minimal\n#   Python binary and source dependencies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential ca-certificates curl git language-pack-en libcurl4-openssl-dev libffi-dev libsqlite3-dev libzmq3-dev pandoc python python3 python-dev python3-dev sqlite3 texlive-fonts-recommended texlive-latex-base texlive-latex-extra zlib1g-dev libssl-dev\n#   Install Tini\nRUN curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini > tini \\\n && echo \"d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Install the recent pip release\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python2 get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py \\\n && pip2 --no-cache-dir install requests[security] \\\n && pip3 --no-cache-dir install requests[security]\n#   Install some dependencies.\nRUN pip2 --no-cache-dir install ipykernel \\\n && pip3 --no-cache-dir install ipykernel \\\n && python2 -m ipykernel.kernelspec \\\n && python3 -m ipykernel.kernelspec\nRUN git clone https://github.com/jupyter/notebook.git /usr/src/jupyter-notebook\nWORKDIR /usr/src/jupyter-notebook\nRUN git checkout ${NOTEBOOK_VERSION}\n#   Install dependencies and run tests.\nRUN BUILD_DEPS=\"nodejs-legacy npm\" \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq $BUILD_DEPS \\\n && pip3 install --no-cache-dir --pre -e /usr/src/jupyter-notebook \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $BUILD_DEPS\n#   Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\n#   Gets pdflatex for nbconvert to PDF, with dependent latex files\n#\n#  RUN apt-get install -y --no-install-recommends \\\n#      texlive-latex-base texlive-xetex latex-xcolor texlive-math-extra \\\n#      texlive-latex-extra texlive-fonts-extra\n#   Install additional Python modules\n#\nRUN pip2 install -U pyyaml ipywidgets\nRUN pip3 install -U pyyaml ipywidgets\nWORKDIR /opt/notebooks\nEXPOSE 8888/tcp\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"jupyter\", \"notebook\"]\n#  ENTRYPOINT bash -c 'set -eou pipefail; jupyter-notebook --no-browser --port 8888 --ip=* --notebook-dir=/opt/notebooks'\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:15.04\nMAINTAINER Dan Isla <disla@jpl.nasa.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTEBOOK_VERSION=\"4.1.0\"\n#  Not essential, but wise to set the lang\n#  Note: Users with other languages should set this in their derivative image\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYTHONIOENCODING=\"UTF-8\"\n#  Remove preinstalled copy of python that blocks our ability to install development python.\nRUN DEBIAN_FRONTEND=noninteractive apt-get remove -yq python3-minimal python3.4 python3.4-minimal libpython3-stdlib libpython3.4-stdlib libpython3.4-minimal\n#  Python binary and source dependencies\nRUN apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential ca-certificates curl git language-pack-en libcurl4-openssl-dev libffi-dev libsqlite3-dev libzmq3-dev pandoc python python3 python-dev python3-dev sqlite3 texlive-fonts-recommended texlive-latex-base texlive-latex-extra zlib1g-dev libssl-dev\n#  Install Tini\nRUN curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini > tini \\\n && echo \"d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#  Install the recent pip release\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python2 get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py \\\n && pip2 --no-cache-dir install requests[security] \\\n && pip3 --no-cache-dir install requests[security]\n#  Install some dependencies.\nRUN pip2 --no-cache-dir install ipykernel \\\n && pip3 --no-cache-dir install ipykernel \\\n && python2 -m ipykernel.kernelspec \\\n && python3 -m ipykernel.kernelspec\nRUN git clone https://github.com/jupyter/notebook.git /usr/src/jupyter-notebook\nWORKDIR /usr/src/jupyter-notebook\nRUN git checkout ${NOTEBOOK_VERSION}\n#  Install dependencies and run tests.\nRUN BUILD_DEPS=\"nodejs-legacy npm\" \\\n && apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq $BUILD_DEPS \\\n && pip3 install --no-cache-dir --pre -e /usr/src/jupyter-notebook \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $BUILD_DEPS\n#  Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\n#  Gets pdflatex for nbconvert to PDF, with dependent latex files\n#\n# RUN apt-get install -y --no-install-recommends \\\n#     texlive-latex-base texlive-xetex latex-xcolor texlive-math-extra \\\n#     texlive-latex-extra texlive-fonts-extra\n#  Install additional Python modules\n#\nRUN pip2 install -U pyyaml ipywidgets\nRUN pip3 install -U pyyaml ipywidgets\nWORKDIR /opt/notebooks\nEXPOSE 8888/tcp\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"jupyter\", \"notebook\"]\n# ENTRYPOINT bash -c 'set -eou pipefail; jupyter-notebook --no-browser --port 8888 --ip=* --notebook-dir=/opt/notebooks'\n","injectedSmells":[],"originalDockerfileHash":"30851f1fd08a739dfb5d4d6a6f64249d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:15.04\nMAINTAINER Dan Isla <disla@jpl.nasa.gov>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTEBOOK_VERSION=\"4.1.0\"\n#   Not essential, but wise to set the lang\n#   Note: Users with other languages should set this in their derivative image\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYTHONIOENCODING=\"UTF-8\"\n#   Remove preinstalled copy of python that blocks our ability to install development python.\nRUN DEBIAN_FRONTEND=noninteractive apt-get remove -yq python3-minimal python3.4 python3.4-minimal libpython3-stdlib libpython3.4-stdlib libpython3.4-minimal\n#   Python binary and source dependencies\nRUN apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential ca-certificates curl git language-pack-en libcurl4-openssl-dev libffi-dev libsqlite3-dev libzmq3-dev pandoc python python3 python-dev python3-dev sqlite3 texlive-fonts-recommended texlive-latex-base texlive-latex-extra zlib1g-dev libssl-dev\n#   Install Tini\nRUN curl -L https://github.com/krallin/tini/releases/download/v0.6.0/tini > tini \\\n && echo \"d5ed732199c36a1189320e6c4859f0169e950692f451c03e7854243b95f4234b *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Install the recent pip release\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python2 get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py \\\n && pip2 --no-cache-dir install requests[security] \\\n && pip3 --no-cache-dir install requests[security]\n#   Install some dependencies.\nRUN pip2 --no-cache-dir install ipykernel \\\n && pip3 --no-cache-dir install ipykernel \\\n && python2 -m ipykernel.kernelspec \\\n && python3 -m ipykernel.kernelspec\nRUN git clone https://github.com/jupyter/notebook.git /usr/src/jupyter-notebook\nWORKDIR /usr/src/jupyter-notebook\nRUN git checkout ${NOTEBOOK_VERSION}\n#   Install dependencies and run tests.\nRUN BUILD_DEPS=\"nodejs-legacy npm\" \\\n && apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq $BUILD_DEPS \\\n && pip3 install --no-cache-dir --pre -e /usr/src/jupyter-notebook \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $BUILD_DEPS\n#   Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\n#   Gets pdflatex for nbconvert to PDF, with dependent latex files\n#\n#  RUN apt-get install -y --no-install-recommends \\\n#      texlive-latex-base texlive-xetex latex-xcolor texlive-math-extra \\\n#      texlive-latex-extra texlive-fonts-extra\n#   Install additional Python modules\n#\nRUN pip2 install -U pyyaml ipywidgets\nRUN pip3 install -U pyyaml ipywidgets\nWORKDIR /opt/notebooks\nEXPOSE 8888/tcp\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"jupyter\", \"notebook\"]\n#  ENTRYPOINT bash -c 'set -eou pipefail; jupyter-notebook --no-browser --port 8888 --ip=* --notebook-dir=/opt/notebooks'\n","originalDockerfileUglifiedHash":"64ae4f0dbfd56acd580317a80b51bddb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cda031b212fe18da320407b7e66bccf7caa7fef9.dockerfile"}