{"seed":2992094202,"processedDockerfileHash":"920aa05adaf3a70b097c486a074b4ca7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-bazel:0.5-ubuntu AS bazel-binary\n#   Build target: lablup/common-tensorflow:1.4-py36-gpu\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends imagemagick graphviz cmake curl build-essential perl pkg-config rsync sed swig git-core zip unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=bazel-binary /usr/local/lib/bazel/bin/ /usr/local/bin/\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; ldconfig ; rm -f python.tar.gz\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel==0.40.0 numpy==1.24.2 scipy==1.10.1 --no-cache-dir\n#   The TensorFlow version\nENV TF_VERSION=\"1.4\"\n#   NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf -\nRUN echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/nvidia-stubs.conf \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} ldconfig\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && cd /tmp/tensorflow-r${TF_VERSION} \\\n && PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages GCC_HOST_COMPILER_PATH=/usr/bin/gcc CC_OPT_FLAGS=\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\" TF_MKL_ROOT=/opt/intel/mkl TF_NEED_JEMALLOC=1 TF_NEED_GCP=1 TF_NEED_HDFS=1 TF_ENABLE_XLA=1 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_OPENCL_SYCL=0 TF_NEED_CUDA=1 TF_CUDA_CLANG=0 TF_NEED_MPI=0 TF_CUDA_VERSION=8.0 TF_CUDNN_VERSION=6 TF_NCCL_VERSION=2 TF_CUDA_COMPUTE_CAPABILITIES=3.5,3.7,5.2,6.0,6.1,7.0 CUDA_TOOLKIT_PATH=/usr/local/cuda CUDNN_INSTALL_PATH=/usr/local/cuda NCCL_INSTALL_PATH=/usr bash configure \\\n && sed -r -i'' \"s@http://www.sqlite.org@https://www.sqlite.org@\" tensorflow/workspace.bzl ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel fetch //tensorflow/tools/pip_package:build_pip_package\nRUN cd /tmp/tensorflow-r${TF_VERSION} ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel build --config=opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/tools/pip_package:build_pip_package \\\n && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-bazel:0.5-ubuntu AS bazel-binary\n#  Build target: lablup/common-tensorflow:1.4-py36-gpu\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#  Install system package dependencies\n#  NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends imagemagick graphviz cmake curl build-essential perl pkg-config rsync sed swig git-core zip unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=bazel-binary /usr/local/lib/bazel/bin/ /usr/local/bin/\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; ldconfig ; rm -f python.tar.gz\n#  Check Bazel/Python is runnable.\n#  Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir\n#  The TensorFlow version\nENV TF_VERSION=\"1.4\"\n#  NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf -\nRUN echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/nvidia-stubs.conf \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} ldconfig\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && cd /tmp/tensorflow-r${TF_VERSION} \\\n && PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages GCC_HOST_COMPILER_PATH=/usr/bin/gcc CC_OPT_FLAGS=\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\" TF_MKL_ROOT=/opt/intel/mkl TF_NEED_JEMALLOC=1 TF_NEED_GCP=1 TF_NEED_HDFS=1 TF_ENABLE_XLA=1 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_OPENCL_SYCL=0 TF_NEED_CUDA=1 TF_CUDA_CLANG=0 TF_NEED_MPI=0 TF_CUDA_VERSION=8.0 TF_CUDNN_VERSION=6 TF_NCCL_VERSION=2 TF_CUDA_COMPUTE_CAPABILITIES=3.5,3.7,5.2,6.0,6.1,7.0 CUDA_TOOLKIT_PATH=/usr/local/cuda CUDNN_INSTALL_PATH=/usr/local/cuda NCCL_INSTALL_PATH=/usr bash configure \\\n && sed -r -i'' \"s@http://www.sqlite.org@https://www.sqlite.org@\" tensorflow/workspace.bzl ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel fetch //tensorflow/tools/pip_package:build_pip_package\nRUN cd /tmp/tensorflow-r${TF_VERSION} ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel build --config=opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/tools/pip_package:build_pip_package \\\n && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#  vim: ft=dockerfile sts=4 sw=4 et tw=0\n","injectedSmells":[],"originalDockerfileHash":"0d58be61f36fa601c8690656b257bbfa","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-bazel:0.5-ubuntu AS bazel-binary\n#   Build target: lablup/common-tensorflow:1.4-py36-gpu\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends imagemagick graphviz cmake curl build-essential perl pkg-config rsync sed swig git-core zip unzip zip -y \\\n && rm -rf /var/lib/apt/lists/*\nCOPY --from=bazel-binary /usr/local/lib/bazel/bin/ /usr/local/bin/\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; ldconfig ; rm -f python.tar.gz\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir\n#   The TensorFlow version\nENV TF_VERSION=\"1.4\"\n#   NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf -\nRUN echo \"/usr/local/cuda/lib64/stubs\" > /etc/ld.so.conf.d/nvidia-stubs.conf \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} ldconfig\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && cd /tmp/tensorflow-r${TF_VERSION} \\\n && PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages GCC_HOST_COMPILER_PATH=/usr/bin/gcc CC_OPT_FLAGS=\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\" TF_MKL_ROOT=/opt/intel/mkl TF_NEED_JEMALLOC=1 TF_NEED_GCP=1 TF_NEED_HDFS=1 TF_ENABLE_XLA=1 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_OPENCL_SYCL=0 TF_NEED_CUDA=1 TF_CUDA_CLANG=0 TF_NEED_MPI=0 TF_CUDA_VERSION=8.0 TF_CUDNN_VERSION=6 TF_NCCL_VERSION=2 TF_CUDA_COMPUTE_CAPABILITIES=3.5,3.7,5.2,6.0,6.1,7.0 CUDA_TOOLKIT_PATH=/usr/local/cuda CUDNN_INSTALL_PATH=/usr/local/cuda NCCL_INSTALL_PATH=/usr bash configure \\\n && sed -r -i'' \"s@http://www.sqlite.org@https://www.sqlite.org@\" tensorflow/workspace.bzl ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel fetch //tensorflow/tools/pip_package:build_pip_package\nRUN cd /tmp/tensorflow-r${TF_VERSION} ; PYTHON_BIN_PATH=/usr/local/bin/python PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages bazel build --config=opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/tools/pip_package:build_pip_package \\\n && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\n","originalDockerfileUglifiedHash":"f6bcd5919bf96576be38bb8db07a122f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8402e656c0096f48424b971e6073621e6cb9cac2.dockerfile"}