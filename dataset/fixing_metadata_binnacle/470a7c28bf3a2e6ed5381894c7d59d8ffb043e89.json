{"seed":83987999,"processedDockerfileHash":"28d6f800611065167fa2299c2557c2d8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvcr.io/nvidia/tensorrt:18.08-py3\nARG FFMPEG_VERSION=3.4.2\nARG CMAKE_VERSION=3.11.1\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   nvcuvid deps\nRUN apt-get update --fix-missing \\\n && apt-get install --no-install-recommends libx11-6 libxext6 -y\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#   install python\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils -y\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends aptitude git vim make wget zip zsh pkg-config build-essential checkinstall p7zip-full python-pip python3-pip tmux ffmpeg i7z unrar htop cmake g++ curl libopenblas-dev python-numpy python3-numpy python python-tk idle python-pmw python-imaging libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libtbb2 libtbb-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev gfortran -y \\\n && apt-get autoremove \\\n && apt-get clean \\\n && aptitude install -y python-dev python3-dev \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \\\n && python -m pip install --upgrade pip setuptools\nCOPY ./torch-0.4.0-cp35-cp35m-linux_x86_64.whl /software/\nRUN python -m pip install /software/torch-0.4.0-cp35-cp35m-linux_x86_64.whl \\\n && rm -rf /software\nRUN python -m pip install cffi torchvision\nCOPY ./ffmpeg-$FFMPEG_VERSION.tar.bz2 /tmp\n#   minimal ffmpeg from source\nRUN apt-get install --no-install-recommends yasm libx264-148 libx264-dev libx265-79 libx265-dev pkg-config -y \\\n && cd /tmp \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --enable-shared --disable-all --disable-autodetect --disable-iconv --enable-avformat --enable-avcodec --enable-avfilter --enable-avdevice --enable-protocol=file --enable-demuxer=mov,matroska,image2 --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb --enable-gpl --enable-libx264 --enable-libx265 --enable-zlib --enable-indev=lavfi --enable-swresample --enable-ffmpeg --enable-swscale --enable-filter=scale,testsrc,crop --enable-muxer=mp4,matroska,image2 --enable-cuvid --enable-nvenc --enable-cuda --enable-decoder=h264,h264_cuvid,hevc,hevc_cuvid,png,mjpeg,rawvideo --enable-encoder=h264_nvenc,hevc_nvenc,libx264,libx265,png,mjpeg --enable-hwaccel=h264_cuvid,hevc_cuvid --enable-parser=h264,hevc,png \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION \\\n && apt-get remove -y yasm libx264-dev libx265-dev \\\n && apt-get auto-remove -y\n#   video_reader build deps (pkg-config, Doxygen, recent cmake)\nRUN apt-get install --no-install-recommends pkg-config doxygen wget -y \\\n && cd /tmp \\\n && export dir=$( echo $CMAKE_VERSION | sed \"s/^\\([0-9]*\\.[0-9]*\\).*/v\\1/\" ;) \\\n && wget -q https://cmake.org/files/${dir}/cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && /bin/sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n && rm cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\nARG OPENCV_VERSION=3.4.0\nARG OPENCV_CUDA_GENERATION=Auto\n#   paired down OpenCV build\nCOPY ./$OPENCV_VERSION.tar.gz /tmp\nRUN apt-get install --no-install-recommends wget -y \\\n && cd /tmp \\\n && tar xf $OPENCV_VERSION.tar.gz \\\n && rm $OPENCV_VERSION.tar.gz\nRUN cd /tmp/opencv-$OPENCV_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DCUDA_GENERATION=$OPENCV_CUDA_GENERATION -DCMAKE_BUILD_TYPE=RELEASE $( for m in cudabgsegm cudacodec cudafeatures2d cudafilters cudalegacy cudaoptflow cudaobjdetect cudawarping dnn features2d flann highgui ml objdetect photo python_bindings_generator shape superres ts video videoio; do echo -DBUILD_opencv_$m=OFF ; done ;) $( for f in WEBP TIFF OPENEXR JASPER; do echo -DWITH_$f=OFF ; done ;) .. \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf opencv-$OPENCV_VERSION \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\n#   nvidia-docker only provides libraries for runtime use, not for\n#   development, to hack it so we can develop inside a container (not a\n#   normal or supported practice), we need to make an unversioned\n#   symlink so gcc can find the library.  Additional, different\n#   nvidia-docker versions put the lib in different places, so we make\n#   symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so \\\n && ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\nRUN rm -rf /var/lib/apt/lists/*\nRUN python -m pip install scipy\nRUN mkdir /nvvl \\\n && cd /nvvl \\\n && git clone http://gitlab.sz.sensetime.com/mapingchuan/nvvl.git\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvcr.io/nvidia/tensorrt:18.08-py3\nARG FFMPEG_VERSION=3.4.2\nARG CMAKE_VERSION=3.11.1\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  nvcuvid deps\nRUN apt-get update --fix-missing \\\n && apt-get install libx11-6 libxext6 -y\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#  install python\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils -y\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends aptitude git vim make wget zip zsh pkg-config build-essential checkinstall p7zip-full python-pip python3-pip tmux ffmpeg i7z unrar htop cmake g++ curl libopenblas-dev python-numpy python3-numpy python python-tk idle python-pmw python-imaging libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libtbb2 libtbb-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev gfortran -y \\\n && apt-get autoremove \\\n && apt-get clean \\\n && aptitude install -y python-dev python3-dev \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \\\n && python -m pip install --upgrade pip setuptools\nCOPY ./torch-0.4.0-cp35-cp35m-linux_x86_64.whl /software/\nRUN python -m pip install /software/torch-0.4.0-cp35-cp35m-linux_x86_64.whl \\\n && rm -rf /software\nRUN python -m pip install cffi torchvision\nCOPY ./ffmpeg-$FFMPEG_VERSION.tar.bz2 /tmp\n#  minimal ffmpeg from source\nRUN apt-get install yasm libx264-148 libx264-dev libx265-79 libx265-dev pkg-config -y \\\n && cd /tmp \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --enable-shared --disable-all --disable-autodetect --disable-iconv --enable-avformat --enable-avcodec --enable-avfilter --enable-avdevice --enable-protocol=file --enable-demuxer=mov,matroska,image2 --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb --enable-gpl --enable-libx264 --enable-libx265 --enable-zlib --enable-indev=lavfi --enable-swresample --enable-ffmpeg --enable-swscale --enable-filter=scale,testsrc,crop --enable-muxer=mp4,matroska,image2 --enable-cuvid --enable-nvenc --enable-cuda --enable-decoder=h264,h264_cuvid,hevc,hevc_cuvid,png,mjpeg,rawvideo --enable-encoder=h264_nvenc,hevc_nvenc,libx264,libx265,png,mjpeg --enable-hwaccel=h264_cuvid,hevc_cuvid --enable-parser=h264,hevc,png \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION \\\n && apt-get remove -y yasm libx264-dev libx265-dev \\\n && apt-get auto-remove -y\n#  video_reader build deps (pkg-config, Doxygen, recent cmake)\nRUN apt-get install pkg-config doxygen wget -y \\\n && cd /tmp \\\n && export dir=$( echo $CMAKE_VERSION | sed \"s/^\\([0-9]*\\.[0-9]*\\).*/v\\1/\" ;) \\\n && wget -q https://cmake.org/files/${dir}/cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && /bin/sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n && rm cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\nARG OPENCV_VERSION=3.4.0\nARG OPENCV_CUDA_GENERATION=Auto\n#  paired down OpenCV build\nCOPY ./$OPENCV_VERSION.tar.gz /tmp\nRUN apt-get install wget -y \\\n && cd /tmp \\\n && tar xf $OPENCV_VERSION.tar.gz \\\n && rm $OPENCV_VERSION.tar.gz\nRUN cd /tmp/opencv-$OPENCV_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DCUDA_GENERATION=$OPENCV_CUDA_GENERATION -DCMAKE_BUILD_TYPE=RELEASE $( for m in cudabgsegm cudacodec cudafeatures2d cudafilters cudalegacy cudaoptflow cudaobjdetect cudawarping dnn features2d flann highgui ml objdetect photo python_bindings_generator shape superres ts video videoio; do echo -DBUILD_opencv_$m=OFF ; done ;) $( for f in WEBP TIFF OPENEXR JASPER; do echo -DWITH_$f=OFF ; done ;) .. \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf opencv-$OPENCV_VERSION \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\n#  nvidia-docker only provides libraries for runtime use, not for\n#  development, to hack it so we can develop inside a container (not a\n#  normal or supported practice), we need to make an unversioned\n#  symlink so gcc can find the library.  Additional, different\n#  nvidia-docker versions put the lib in different places, so we make\n#  symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so \\\n && ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\nRUN rm -rf /var/lib/apt/lists/*\nRUN python -m pip install scipy\nRUN mkdir /nvvl \\\n && cd /nvvl \\\n && git clone http://gitlab.sz.sensetime.com/mapingchuan/nvvl.git\n","injectedSmells":[],"originalDockerfileHash":"2d0c8e046cd188e7bd09afa005018e1f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvcr.io/nvidia/tensorrt:18.08-py3\nARG FFMPEG_VERSION=3.4.2\nARG CMAKE_VERSION=3.11.1\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   nvcuvid deps\nRUN apt-get update --fix-missing \\\n && apt-get install libx11-6 libxext6 -y\nENV NVIDIA_DRIVER_CAPABILITIES=\"video,compute,utility\"\n#   install python\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils -y\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends aptitude git vim make wget zip zsh pkg-config build-essential checkinstall p7zip-full python-pip python3-pip tmux ffmpeg i7z unrar htop cmake g++ curl libopenblas-dev python-numpy python3-numpy python python-tk idle python-pmw python-imaging libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libtbb2 libtbb-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev gfortran -y \\\n && apt-get autoremove \\\n && apt-get clean \\\n && aptitude install -y python-dev python3-dev \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 \\\n && python -m pip install --upgrade pip setuptools\nCOPY ./torch-0.4.0-cp35-cp35m-linux_x86_64.whl /software/\nRUN python -m pip install /software/torch-0.4.0-cp35-cp35m-linux_x86_64.whl \\\n && rm -rf /software\nRUN python -m pip install cffi torchvision\nCOPY ./ffmpeg-$FFMPEG_VERSION.tar.bz2 /tmp\n#   minimal ffmpeg from source\nRUN apt-get install yasm libx264-148 libx264-dev libx265-79 libx265-dev pkg-config -y \\\n && cd /tmp \\\n && tar xf ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && rm ffmpeg-$FFMPEG_VERSION.tar.bz2 \\\n && cd ffmpeg-$FFMPEG_VERSION \\\n && ./configure --prefix=/usr/local --disable-static --enable-shared --disable-all --disable-autodetect --disable-iconv --enable-avformat --enable-avcodec --enable-avfilter --enable-avdevice --enable-protocol=file --enable-demuxer=mov,matroska,image2 --enable-bsf=h264_mp4toannexb,hevc_mp4toannexb --enable-gpl --enable-libx264 --enable-libx265 --enable-zlib --enable-indev=lavfi --enable-swresample --enable-ffmpeg --enable-swscale --enable-filter=scale,testsrc,crop --enable-muxer=mp4,matroska,image2 --enable-cuvid --enable-nvenc --enable-cuda --enable-decoder=h264,h264_cuvid,hevc,hevc_cuvid,png,mjpeg,rawvideo --enable-encoder=h264_nvenc,hevc_nvenc,libx264,libx265,png,mjpeg --enable-hwaccel=h264_cuvid,hevc_cuvid --enable-parser=h264,hevc,png \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf ffmpeg-$FFMPEG_VERSION \\\n && apt-get remove -y yasm libx264-dev libx265-dev \\\n && apt-get auto-remove -y\n#   video_reader build deps (pkg-config, Doxygen, recent cmake)\nRUN apt-get install pkg-config doxygen wget -y \\\n && cd /tmp \\\n && export dir=$( echo $CMAKE_VERSION | sed \"s/^\\([0-9]*\\.[0-9]*\\).*/v\\1/\" ;) \\\n && wget -q https://cmake.org/files/${dir}/cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && /bin/sh cmake-$CMAKE_VERSION-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n && rm cmake-$CMAKE_VERSION-Linux-x86_64.sh \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\nARG OPENCV_VERSION=3.4.0\nARG OPENCV_CUDA_GENERATION=Auto\n#   paired down OpenCV build\nCOPY ./$OPENCV_VERSION.tar.gz /tmp\nRUN apt-get install wget -y \\\n && cd /tmp \\\n && tar xf $OPENCV_VERSION.tar.gz \\\n && rm $OPENCV_VERSION.tar.gz\nRUN cd /tmp/opencv-$OPENCV_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DCUDA_GENERATION=$OPENCV_CUDA_GENERATION -DCMAKE_BUILD_TYPE=RELEASE $( for m in cudabgsegm cudacodec cudafeatures2d cudafilters cudalegacy cudaoptflow cudaobjdetect cudawarping dnn features2d flann highgui ml objdetect photo python_bindings_generator shape superres ts video videoio; do echo -DBUILD_opencv_$m=OFF ; done ;) $( for f in WEBP TIFF OPENEXR JASPER; do echo -DWITH_$f=OFF ; done ;) .. \\\n && make -j8 \\\n && make install \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf opencv-$OPENCV_VERSION \\\n && apt-get purge -y wget \\\n && apt-get autoremove -y\n#   nvidia-docker only provides libraries for runtime use, not for\n#   development, to hack it so we can develop inside a container (not a\n#   normal or supported practice), we need to make an unversioned\n#   symlink so gcc can find the library.  Additional, different\n#   nvidia-docker versions put the lib in different places, so we make\n#   symlinks for both places.\nRUN ln -s /usr/local/nvidia/lib64/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so \\\n && ln -s libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so\nRUN rm -rf /var/lib/apt/lists/*\nRUN python -m pip install scipy\nRUN mkdir /nvvl \\\n && cd /nvvl \\\n && git clone http://gitlab.sz.sensetime.com/mapingchuan/nvvl.git\n","originalDockerfileUglifiedHash":"01f22adc49169e78deffd0bed751eb8e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/470a7c28bf3a2e6ed5381894c7d59d8ffb043e89.dockerfile"}