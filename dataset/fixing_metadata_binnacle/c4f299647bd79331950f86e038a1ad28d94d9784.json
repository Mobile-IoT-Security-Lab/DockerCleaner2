{"seed":933603144,"processedDockerfileHash":"eac277b9f9880b1b408ea18c02a7c4c7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   -----------------------------------------------------------------------------\n#   Development image for test, precommit, etc.\n#   -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS base\n#   Add the magma apt repo\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils=1.2.35 software-properties-common=0.96.20.10 apt-transport-https=1.2.35 -y\nCOPY orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub /tmp/jfrog.pub\nRUN apt-key add /tmp/jfrog.pub \\\n && apt-add-repository \"deb https://magma.jfrog.io/magma/list/dev/ xenial main\"\n#   Install the runtime deps.\nRUN apt-get update \\\n && apt-get install --no-install-recommends bzr=2.7.0-2ubuntu3.1 curl=7.47.0-1ubuntu2.19 daemontools=1:0.76-6ubuntu1 gcc=4:5.3.1-1ubuntu1 git=1:2.7.4-0ubuntu1.10 libc-ares-dev=1.10.0-3ubuntu0.2 libev-dev=1:4.22-1 libevent-dev=2.0.21-stable-2ubuntu0.16.04.1 libffi-dev=3.2.1-4 libjansson-dev=2.7-3ubuntu0.1 libjemalloc-dev=3.6.0-9ubuntu1 libssl-dev=1.0.2g-1ubuntu4.20 libsystemd-dev=229-4ubuntu21.31 magma-nghttpx=1.31.1-1 make=4.1-6 net-tools=1.60-26ubuntu1 pkg-config=0.29.1-0ubuntu1 python-cffi=1.5.2-1ubuntu1 python3-pip=8.1.1-2ubuntu0.6 redis-server=2:3.0.6-1ubuntu0.4 rsyslog=8.16.0-1ubuntu3.1 sudo=1.8.16-0ubuntu1.10 unzip=6.0-20ubuntu1.1 vim=2:7.4.1689-3ubuntu1.5 virtualenv=15.0.1+ds-3ubuntu1.1 -y\n#   Install Golang 1.12.\nWORKDIR /usr/local\nRUN curl https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz -O \\\n && tar xvf go1.12.4.linux-amd64.tar.gz \\\n && cp -r go/bin/* /usr/local/bin/\n#   Install protobuf compiler.\nRUN curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip \\\n && unzip protoc3.zip -d protoc3 \\\n && mv protoc3/bin/protoc /bin/protoc \\\n && chmod a+rx /bin/protoc \\\n && mv protoc3/include/google /usr/include/ \\\n && chmod -R a+Xr /usr/include/google \\\n && rm -rf protoc3.zip protoc3\nENV GOBIN=\"/var/opt/magma/bin\"\nENV MAGMA_ROOT=\"/magma\"\nENV PIP_CACHE_HOME=\"~/.pipcache\"\nENV PYTHON_BUILD=\"/build/python\"\nENV PATH=\"${PYTHON_BUILD}/bin:${PATH}:${GOBIN}\"\nENV GO111MODULE=\"on\"\n#   Use public go modules proxy\nENV GOPROXY=\"https://proxy.golang.org\"\nRUN printenv > /etc/environment\n#   Copy just the go.mod and go.sum files to download the golang deps.\n#   This step allows us to cache the downloads, and prevents reaching out to\n#   the internet unless any of the go.mod or go.sum files are changed.\nCOPY lte/cloud/go/go.* $MAGMA_ROOT/lte/cloud/go/\nCOPY feg/cloud/go/go.* $MAGMA_ROOT/feg/cloud/go/\nCOPY feg/cloud/go/protos/go.* $MAGMA_ROOT/feg/cloud/go/protos/\nCOPY feg/gateway/go.* $MAGMA_ROOT/feg/gateway/\nCOPY feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/go.* $MAGMA_ROOT/feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/\nCOPY orc8r/cloud/go/go.* $MAGMA_ROOT/orc8r/cloud/go/\nCOPY orc8r/gateway/go/go.* $MAGMA_ROOT/orc8r/gateway/go/\nWORKDIR $MAGMA_ROOT/feg/gateway\nRUN go mod download ; exit 0\n#   Install protoc-gen-go\nRUN go install github.com/golang/protobuf/protoc-gen-go ; exit 0\n#   Copy the configs.\nCOPY orc8r/cloud/docker/proxy/magma_headers.rb /etc/nghttpx/magma_headers.rb\n#   Symlink python scripts.\nRUN ln -s /build/python/bin/generate_service_config.py /usr/local/bin/generate_service_config.py\nRUN ln -s /build/python/bin/generate_nghttpx_config.py /usr/local/bin/generate_nghttpx_config.py\n#   Build the code.\nCOPY feg $MAGMA_ROOT/feg\nCOPY lte/cloud $MAGMA_ROOT/lte/cloud\nCOPY orc8r/cloud $MAGMA_ROOT/orc8r/cloud\nCOPY orc8r/gateway/go $MAGMA_ROOT/orc8r/gateway/go\n#   Enable make gen if proto gen is required\n#   RUN make -C $MAGMA_ROOT/feg/gateway gen\nRUN make -C $MAGMA_ROOT/feg/gateway build\n#   -----------------------------------------------------------------------------\n#   Production image\n#   -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS gateway_go\n#   Install envdir.\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends daemontools=1:0.76-6ubuntu1 -y\n#   Copy the build artifacts.\nCOPY --from=base /var/opt/magma/bin /var/opt/magma/bin\n#   Copy the configs.\nCOPY feg/gateway/configs /etc/magma\n#   Add docker config overrides\nCOPY feg/gateway/docker/configs /etc/magma\n#   Create empty envdir directory\nRUN mkdir -p /var/opt/magma/envdir\nRUN mkdir -p /var/opt/magma/configs\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  -----------------------------------------------------------------------------\n#  Development image for test, precommit, etc.\n#  -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS base\n#  Add the magma apt repo\nRUN apt-get update \\\n && apt-get install apt-utils software-properties-common apt-transport-https -y\nCOPY orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub /tmp/jfrog.pub\nRUN apt-key add /tmp/jfrog.pub \\\n && apt-add-repository \"deb https://magma.jfrog.io/magma/list/dev/ xenial main\"\n#  Install the runtime deps.\nRUN apt-get update \\\n && apt-get install bzr curl daemontools gcc git libc-ares-dev libev-dev libevent-dev libffi-dev libjansson-dev libjemalloc-dev libssl-dev libsystemd-dev magma-nghttpx=1.31.1-1 make net-tools pkg-config python-cffi python3-pip redis-server rsyslog sudo unzip vim virtualenv -y\n#  Install Golang 1.12.\nWORKDIR /usr/local\nRUN curl https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz -O \\\n && tar xvf go1.12.4.linux-amd64.tar.gz \\\n && cp -r go/bin/* /usr/local/bin/\n#  Install protobuf compiler.\nRUN curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip \\\n && unzip protoc3.zip -d protoc3 \\\n && mv protoc3/bin/protoc /bin/protoc \\\n && chmod a+rx /bin/protoc \\\n && mv protoc3/include/google /usr/include/ \\\n && chmod -R a+Xr /usr/include/google \\\n && rm -rf protoc3.zip protoc3\nENV GOBIN=\"/var/opt/magma/bin\"\nENV MAGMA_ROOT=\"/magma\"\nENV PIP_CACHE_HOME=\"~/.pipcache\"\nENV PYTHON_BUILD=\"/build/python\"\nENV PATH=\"${PYTHON_BUILD}/bin:${PATH}:${GOBIN}\"\nENV GO111MODULE=\"on\"\n#  Use public go modules proxy\nENV GOPROXY=\"https://proxy.golang.org\"\nRUN printenv > /etc/environment\n#  Copy just the go.mod and go.sum files to download the golang deps.\n#  This step allows us to cache the downloads, and prevents reaching out to\n#  the internet unless any of the go.mod or go.sum files are changed.\nCOPY lte/cloud/go/go.* $MAGMA_ROOT/lte/cloud/go/\nCOPY feg/cloud/go/go.* $MAGMA_ROOT/feg/cloud/go/\nCOPY feg/cloud/go/protos/go.* $MAGMA_ROOT/feg/cloud/go/protos/\nCOPY feg/gateway/go.* $MAGMA_ROOT/feg/gateway/\nCOPY feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/go.* $MAGMA_ROOT/feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/\nCOPY orc8r/cloud/go/go.* $MAGMA_ROOT/orc8r/cloud/go/\nCOPY orc8r/gateway/go/go.* $MAGMA_ROOT/orc8r/gateway/go/\nWORKDIR $MAGMA_ROOT/feg/gateway\nRUN go mod download ; exit 0\n#  Install protoc-gen-go\nRUN go install github.com/golang/protobuf/protoc-gen-go ; exit 0\n#  Copy the configs.\nCOPY orc8r/cloud/docker/proxy/magma_headers.rb /etc/nghttpx/magma_headers.rb\n#  Symlink python scripts.\nRUN ln -s /build/python/bin/generate_service_config.py /usr/local/bin/generate_service_config.py\nRUN ln -s /build/python/bin/generate_nghttpx_config.py /usr/local/bin/generate_nghttpx_config.py\n#  Build the code.\nCOPY feg $MAGMA_ROOT/feg\nCOPY lte/cloud $MAGMA_ROOT/lte/cloud\nCOPY orc8r/cloud $MAGMA_ROOT/orc8r/cloud\nCOPY orc8r/gateway/go $MAGMA_ROOT/orc8r/gateway/go\n#  Enable make gen if proto gen is required\n#  RUN make -C $MAGMA_ROOT/feg/gateway gen\nRUN make -C $MAGMA_ROOT/feg/gateway build\n#  -----------------------------------------------------------------------------\n#  Production image\n#  -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS gateway_go\n#  Install envdir.\nRUN apt-get update -y \\\n && apt-get install daemontools -y\n#  Copy the build artifacts.\nCOPY --from=base /var/opt/magma/bin /var/opt/magma/bin\n#  Copy the configs.\nCOPY feg/gateway/configs /etc/magma\n#  Add docker config overrides\nCOPY feg/gateway/docker/configs /etc/magma\n#  Create empty envdir directory\nRUN mkdir -p /var/opt/magma/envdir\nRUN mkdir -p /var/opt/magma/configs\n","injectedSmells":[],"originalDockerfileHash":"2704f666da02ef7dfe60ede737a5a748","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   -----------------------------------------------------------------------------\n#   Development image for test, precommit, etc.\n#   -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS base\n#   Add the magma apt repo\nRUN apt-get update \\\n && apt-get install apt-utils software-properties-common apt-transport-https -y\nCOPY orc8r/tools/ansible/roles/pkgrepo/files/jfrog.pub /tmp/jfrog.pub\nRUN apt-key add /tmp/jfrog.pub \\\n && apt-add-repository \"deb https://magma.jfrog.io/magma/list/dev/ xenial main\"\n#   Install the runtime deps.\nRUN apt-get update \\\n && apt-get install bzr curl daemontools gcc git libc-ares-dev libev-dev libevent-dev libffi-dev libjansson-dev libjemalloc-dev libssl-dev libsystemd-dev magma-nghttpx=1.31.1-1 make net-tools pkg-config python-cffi python3-pip redis-server rsyslog sudo unzip vim virtualenv -y\n#   Install Golang 1.12.\nWORKDIR /usr/local\nRUN curl https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz -O \\\n && tar xvf go1.12.4.linux-amd64.tar.gz \\\n && cp -r go/bin/* /usr/local/bin/\n#   Install protobuf compiler.\nRUN curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip \\\n && unzip protoc3.zip -d protoc3 \\\n && mv protoc3/bin/protoc /bin/protoc \\\n && chmod a+rx /bin/protoc \\\n && mv protoc3/include/google /usr/include/ \\\n && chmod -R a+Xr /usr/include/google \\\n && rm -rf protoc3.zip protoc3\nENV GOBIN=\"/var/opt/magma/bin\"\nENV MAGMA_ROOT=\"/magma\"\nENV PIP_CACHE_HOME=\"~/.pipcache\"\nENV PYTHON_BUILD=\"/build/python\"\nENV PATH=\"${PYTHON_BUILD}/bin:${PATH}:${GOBIN}\"\nENV GO111MODULE=\"on\"\n#   Use public go modules proxy\nENV GOPROXY=\"https://proxy.golang.org\"\nRUN printenv > /etc/environment\n#   Copy just the go.mod and go.sum files to download the golang deps.\n#   This step allows us to cache the downloads, and prevents reaching out to\n#   the internet unless any of the go.mod or go.sum files are changed.\nCOPY lte/cloud/go/go.* $MAGMA_ROOT/lte/cloud/go/\nCOPY feg/cloud/go/go.* $MAGMA_ROOT/feg/cloud/go/\nCOPY feg/cloud/go/protos/go.* $MAGMA_ROOT/feg/cloud/go/protos/\nCOPY feg/gateway/go.* $MAGMA_ROOT/feg/gateway/\nCOPY feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/go.* $MAGMA_ROOT/feg/gateway/third-party/go/src/github.com/fiorix/go-diameter/\nCOPY orc8r/cloud/go/go.* $MAGMA_ROOT/orc8r/cloud/go/\nCOPY orc8r/gateway/go/go.* $MAGMA_ROOT/orc8r/gateway/go/\nWORKDIR $MAGMA_ROOT/feg/gateway\nRUN go mod download ; exit 0\n#   Install protoc-gen-go\nRUN go install github.com/golang/protobuf/protoc-gen-go ; exit 0\n#   Copy the configs.\nCOPY orc8r/cloud/docker/proxy/magma_headers.rb /etc/nghttpx/magma_headers.rb\n#   Symlink python scripts.\nRUN ln -s /build/python/bin/generate_service_config.py /usr/local/bin/generate_service_config.py\nRUN ln -s /build/python/bin/generate_nghttpx_config.py /usr/local/bin/generate_nghttpx_config.py\n#   Build the code.\nCOPY feg $MAGMA_ROOT/feg\nCOPY lte/cloud $MAGMA_ROOT/lte/cloud\nCOPY orc8r/cloud $MAGMA_ROOT/orc8r/cloud\nCOPY orc8r/gateway/go $MAGMA_ROOT/orc8r/gateway/go\n#   Enable make gen if proto gen is required\n#   RUN make -C $MAGMA_ROOT/feg/gateway gen\nRUN make -C $MAGMA_ROOT/feg/gateway build\n#   -----------------------------------------------------------------------------\n#   Production image\n#   -----------------------------------------------------------------------------\nFROM ubuntu:xenial AS gateway_go\n#   Install envdir.\nRUN apt-get update -y \\\n && apt-get install daemontools -y\n#   Copy the build artifacts.\nCOPY --from=base /var/opt/magma/bin /var/opt/magma/bin\n#   Copy the configs.\nCOPY feg/gateway/configs /etc/magma\n#   Add docker config overrides\nCOPY feg/gateway/docker/configs /etc/magma\n#   Create empty envdir directory\nRUN mkdir -p /var/opt/magma/envdir\nRUN mkdir -p /var/opt/magma/configs\n","originalDockerfileUglifiedHash":"aa497d988c8c39309fbe4cd25bc2155d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c4f299647bd79331950f86e038a1ad28d94d9784.dockerfile"}