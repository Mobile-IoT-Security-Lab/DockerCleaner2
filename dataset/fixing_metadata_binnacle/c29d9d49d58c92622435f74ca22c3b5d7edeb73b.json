{"seed":4210962309,"processedDockerfileHash":"33a16a4fae10b173214bbf11341447eb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck"],"processedDockerfile":"FROM jupyter/minimal-notebook:1af3089901bb\n#  FROM jupyter/tensorflow-notebook:1af3089901bb\nUSER root\n#   Set WORKDIR\nWORKDIR /root\n#   These apt-get packages are the only unpinned dependencies, so they are presumably\n#   the only elements in the image build process that introduce the risk of\n#   non-reproducibility. That is, they could in theory change in a way that\n#   broke backward compatibility, and caused subsequent builds of the docker image\n#   to function differently.\n#   Install related packages and set LLVM 3.8 as the compiler\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends make libc6-dev clang-3.8 curl libedit-dev libpython2.7 libicu-dev libssl-dev libxml2 tzdata git libcurl4-openssl-dev pkg-config -q -y \\\n && update-alternatives --quiet --install /usr/bin/clang clang /usr/bin/clang-3.8 100 \\\n && update-alternatives --quiet --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 100 \\\n && rm -r /var/lib/apt/lists/*\n#   Everything up to here should cache nicely between Swift versions, assuming dev dependencies change little\nARG SWIFT_PLATFORM=ubuntu16.04\nARG SWIFT_BRANCH=swift-4.1-release\nARG SWIFT_VERSION=swift-4.1-RELEASE\nENV SWIFT_PLATFORM=\"$SWIFT_PLATFORM\" \\\n    SWIFT_BRANCH=\"$SWIFT_BRANCH\" \\\n    SWIFT_VERSION=\"$SWIFT_VERSION\"\n#   Download GPG keys, signature and Swift package, then unpack, cleanup and execute permissions for foundation libs\nRUN SWIFT_URL=https://swift.org/builds/$SWIFT_BRANCH/$( echo \"$SWIFT_PLATFORM\" | tr -d . ;)/$SWIFT_VERSION/$SWIFT_VERSION-$SWIFT_PLATFORM.tar.gz \\\n && curl -fSsL $SWIFT_URL -o swift.tar.gz \\\n && curl -fSsL $SWIFT_URL.sig -o swift.tar.gz.sig \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && set -e ; for key in 8513444E2DA36B7C1659AF4D7638F1FB2B2B08C4 A3BAFD3556A59079C06894BD63BC1CFE91D306C6 5E4DF843FB065D7F7E24FBA2EF5430F071E1B235; do gpg --quiet --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done \\\n && gpg --batch --verify --quiet swift.tar.gz.sig swift.tar.gz \\\n && tar -xzf swift.tar.gz --directory / --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" swift.tar.gz.sig swift.tar.gz \\\n && chmod -R o+r /usr/lib/swift\n#   Print Installed Swift Version\nRUN swift --version\n#   RUN apt-get update && \\\n#   apt-get -y install build-essential\n#   Install ZMQ\nRUN cd /tmp/ \\\n && curl -L -O https://github.com/zeromq/zeromq4-1/releases/download/v4.1.4/zeromq-4.1.4.tar.gz \\\n && tar xf /tmp/zeromq-4.1.4.tar.gz \\\n && cd /tmp/zeromq-4.1.4 \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && ldconfig\n#   Build swift kernel executable as root in /kernels/iSwift\nRUN mkdir -p /kernels/iSwift\n#   copy only the Swift package itself and iSwiftKernel, so that we don't\n#   trigger image rebuilds when we edit docs or pieces of the Dockerfile\n#   itself which are irrelevant to the image\nCOPY Includes /kernels/iSwift/Includes/\nCOPY Package.swift /kernels/iSwift/\nCOPY Sources iSwiftKernel /kernels/iSwift/Sources/\nCOPY iSwiftKernel /kernels/iSwift/iSwiftKernel/\nWORKDIR /kernels/iSwift\nRUN swift package update\nRUN swift build\n#   But install the kernelspec into jupyter as the NB_USER\nUSER ${NB_USER}\nRUN jupyter kernelspec install --user /kernels/iSwift/iSwiftKernel\n#   Change the Swift kernel executable to be onwed by NB_USER, so we can run it\nUSER root\nRUN chown -R ${NB_USER} /kernels/iSwift\nUSER $NB_USER\nUSER ${NB_USER}\nWORKDIR /home/${NB_USER}\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM jupyter/minimal-notebook:1af3089901bb\n# FROM jupyter/tensorflow-notebook:1af3089901bb\nUSER root\n#  Set WORKDIR\nWORKDIR /root\n#  These apt-get packages are the only unpinned dependencies, so they are presumably\n#  the only elements in the image build process that introduce the risk of\n#  non-reproducibility. That is, they could in theory change in a way that\n#  broke backward compatibility, and caused subsequent builds of the docker image\n#  to function differently.\n#  Install related packages and set LLVM 3.8 as the compiler\nRUN apt-get update -q \\\n && apt-get install make libc6-dev clang-3.8 curl libedit-dev libpython2.7 libicu-dev libssl-dev libxml2 tzdata git libcurl4-openssl-dev pkg-config -q -y \\\n && update-alternatives --quiet --install /usr/bin/clang clang /usr/bin/clang-3.8 100 \\\n && update-alternatives --quiet --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 100 \\\n && rm -r /var/lib/apt/lists/*\n#  Everything up to here should cache nicely between Swift versions, assuming dev dependencies change little\nARG SWIFT_PLATFORM=ubuntu16.04\nARG SWIFT_BRANCH=swift-4.1-release\nARG SWIFT_VERSION=swift-4.1-RELEASE\nENV SWIFT_PLATFORM=\"$SWIFT_PLATFORM\" \\\n    SWIFT_BRANCH=\"$SWIFT_BRANCH\" \\\n    SWIFT_VERSION=\"$SWIFT_VERSION\"\n#  Download GPG keys, signature and Swift package, then unpack, cleanup and execute permissions for foundation libs\nRUN SWIFT_URL=https://swift.org/builds/$SWIFT_BRANCH/$( echo \"$SWIFT_PLATFORM\" | tr -d . ;)/$SWIFT_VERSION/$SWIFT_VERSION-$SWIFT_PLATFORM.tar.gz \\\n && curl -fSsL $SWIFT_URL -o swift.tar.gz \\\n && curl -fSsL $SWIFT_URL.sig -o swift.tar.gz.sig \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && set -e ; for key in 8513444E2DA36B7C1659AF4D7638F1FB2B2B08C4 A3BAFD3556A59079C06894BD63BC1CFE91D306C6 5E4DF843FB065D7F7E24FBA2EF5430F071E1B235; do gpg --quiet --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done \\\n && gpg --batch --verify --quiet swift.tar.gz.sig swift.tar.gz \\\n && tar -xzf swift.tar.gz --directory / --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" swift.tar.gz.sig swift.tar.gz \\\n && chmod -R o+r /usr/lib/swift\n#  Print Installed Swift Version\nRUN swift --version\n#  RUN apt-get update && \\\n#  apt-get -y install build-essential\n#  Install ZMQ\nRUN cd /tmp/ \\\n && curl -L -O https://github.com/zeromq/zeromq4-1/releases/download/v4.1.4/zeromq-4.1.4.tar.gz \\\n && tar xf /tmp/zeromq-4.1.4.tar.gz \\\n && cd /tmp/zeromq-4.1.4 \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && ldconfig\n#  Build swift kernel executable as root in /kernels/iSwift\nRUN mkdir -p /kernels/iSwift\n#  copy only the Swift package itself and iSwiftKernel, so that we don't\n#  trigger image rebuilds when we edit docs or pieces of the Dockerfile\n#  itself which are irrelevant to the image\nCOPY Includes /kernels/iSwift/Includes/\nCOPY Package.swift /kernels/iSwift/\nCOPY Sources iSwiftKernel /kernels/iSwift/Sources/\nCOPY iSwiftKernel /kernels/iSwift/iSwiftKernel/\nWORKDIR /kernels/iSwift\nRUN swift package update\nRUN swift build\n#  But install the kernelspec into jupyter as the NB_USER\nUSER ${NB_USER}\nRUN jupyter kernelspec install --user /kernels/iSwift/iSwiftKernel\n#  Change the Swift kernel executable to be onwed by NB_USER, so we can run it\nUSER root\nRUN chown -R ${NB_USER} /kernels/iSwift\nUSER $NB_USER\nUSER ${NB_USER}\nWORKDIR /home/${NB_USER}\n","injectedSmells":[],"originalDockerfileHash":"9d99fe51feee80d3523ea023fafe2f85","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM jupyter/minimal-notebook:1af3089901bb\n#  FROM jupyter/tensorflow-notebook:1af3089901bb\nUSER root\n#   Set WORKDIR\nWORKDIR /root\n#   These apt-get packages are the only unpinned dependencies, so they are presumably\n#   the only elements in the image build process that introduce the risk of\n#   non-reproducibility. That is, they could in theory change in a way that\n#   broke backward compatibility, and caused subsequent builds of the docker image\n#   to function differently.\n#   Install related packages and set LLVM 3.8 as the compiler\nRUN apt-get update -q \\\n && apt-get install make libc6-dev clang-3.8 curl libedit-dev libpython2.7 libicu-dev libssl-dev libxml2 tzdata git libcurl4-openssl-dev pkg-config -q -y \\\n && update-alternatives --quiet --install /usr/bin/clang clang /usr/bin/clang-3.8 100 \\\n && update-alternatives --quiet --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.8 100 \\\n && rm -r /var/lib/apt/lists/*\n#   Everything up to here should cache nicely between Swift versions, assuming dev dependencies change little\nARG SWIFT_PLATFORM=ubuntu16.04\nARG SWIFT_BRANCH=swift-4.1-release\nARG SWIFT_VERSION=swift-4.1-RELEASE\nENV SWIFT_PLATFORM=\"$SWIFT_PLATFORM\" \\\n    SWIFT_BRANCH=\"$SWIFT_BRANCH\" \\\n    SWIFT_VERSION=\"$SWIFT_VERSION\"\n#   Download GPG keys, signature and Swift package, then unpack, cleanup and execute permissions for foundation libs\nRUN SWIFT_URL=https://swift.org/builds/$SWIFT_BRANCH/$( echo \"$SWIFT_PLATFORM\" | tr -d . ;)/$SWIFT_VERSION/$SWIFT_VERSION-$SWIFT_PLATFORM.tar.gz \\\n && curl -fSsL $SWIFT_URL -o swift.tar.gz \\\n && curl -fSsL $SWIFT_URL.sig -o swift.tar.gz.sig \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && set -e ; for key in 8513444E2DA36B7C1659AF4D7638F1FB2B2B08C4 A3BAFD3556A59079C06894BD63BC1CFE91D306C6 5E4DF843FB065D7F7E24FBA2EF5430F071E1B235; do gpg --quiet --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done \\\n && gpg --batch --verify --quiet swift.tar.gz.sig swift.tar.gz \\\n && tar -xzf swift.tar.gz --directory / --strip-components=1 \\\n && rm -r \"$GNUPGHOME\" swift.tar.gz.sig swift.tar.gz \\\n && chmod -R o+r /usr/lib/swift\n#   Print Installed Swift Version\nRUN swift --version\n#   RUN apt-get update && \\\n#   apt-get -y install build-essential\n#   Install ZMQ\nRUN cd /tmp/ \\\n && curl -L -O https://github.com/zeromq/zeromq4-1/releases/download/v4.1.4/zeromq-4.1.4.tar.gz \\\n && tar xf /tmp/zeromq-4.1.4.tar.gz \\\n && cd /tmp/zeromq-4.1.4 \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && ldconfig\n#   Build swift kernel executable as root in /kernels/iSwift\nRUN mkdir -p /kernels/iSwift\n#   copy only the Swift package itself and iSwiftKernel, so that we don't\n#   trigger image rebuilds when we edit docs or pieces of the Dockerfile\n#   itself which are irrelevant to the image\nCOPY Includes /kernels/iSwift/Includes/\nCOPY Package.swift /kernels/iSwift/\nCOPY Sources iSwiftKernel /kernels/iSwift/Sources/\nCOPY iSwiftKernel /kernels/iSwift/iSwiftKernel/\nWORKDIR /kernels/iSwift\nRUN swift package update\nRUN swift build\n#   But install the kernelspec into jupyter as the NB_USER\nUSER ${NB_USER}\nRUN jupyter kernelspec install --user /kernels/iSwift/iSwiftKernel\n#   Change the Swift kernel executable to be onwed by NB_USER, so we can run it\nUSER root\nRUN chown -R ${NB_USER} /kernels/iSwift\nUSER $NB_USER\nUSER ${NB_USER}\nWORKDIR /home/${NB_USER}\n","originalDockerfileUglifiedHash":"f0313a67cd62c4164eede103873ef7af","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c29d9d49d58c92622435f74ca22c3b5d7edeb73b.dockerfile"}