{"seed":2890849458,"processedDockerfileHash":"8ac787d2b43d7aba1115e441ed54e7ca","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM microsoft/vsts-agent:$(VSTS_AGENT_TAG)\n#   Install basic command-line utilities\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl dnsutils file ftp iproute2 iputils-ping locales openssh-client rsync shellcheck sudo telnet time unzip wget zip tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup the locale\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"$LANG\"\nRUN locale-gen $LANG \\\n && update-locale\n#   Accept EULA - needed for certain Microsoft packages like SQL Server Client Tools\nENV ACCEPT_EULA=\"Y\"\n#   Install essential build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Ansible\nRUN apt-get update \\\n && apt-get install --no-install-recommends ansible -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Azure CLI (instructions taken from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)\nRUN echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $( lsb_release -cs ;) main\" | tee /etc/apt/sources.list.d/azure-cli.list \\\n && curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https azure-cli -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* \\\n && az --version\n#   Install Clang (only appears to work on xenial)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository \"deb http://apt.llvm.org/$( UBUNTU_RELEASE ;)/ llvm-toolchain-$( UBUNTU_RELEASE ;)-6.0 main\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends clang-6.0 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\n#   Install CMake\nRUN curl -sL https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.sh -o cmake.sh \\\n && chmod +x cmake.sh \\\n && ./cmake.sh --prefix=/usr/local --exclude-subdir \\\n && rm cmake.sh\n#   Install Erlang\nRUN echo \"deb http://binaries.erlang-solutions.com/debian $( UBUNTU_RELEASE ;) contrib\" > /etc/apt/sources.list.d/eslerlang.list \\\n && wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends esl-erlang -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install Firefox\nRUN apt-get update \\\n && apt-get install --no-install-recommends firefox -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Go\nRUN curl -sL https://dl.google.com/go/go1.9.4.linux-amd64.tar.gz -o go1.9.4.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.9.4 \\\n && tar -C /usr/local/go1.9.4 -xzf go1.9.4.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.9.4.linux-amd64.tar.gz\nRUN curl -sL https://dl.google.com/go/go1.10.linux-amd64.tar.gz -o go1.10.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.10 \\\n && tar -C /usr/local/go1.10 -xzf go1.10.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.10.linux-amd64.tar.gz\nENV GOROOT_1_9_X64=\"/usr/local/go1.9.4\" \\\n    GOROOT_1_10_X64=\"/usr/local/go1.10\" \\\n    GOROOT=\"/usr/local/go1.10\"\nENV PATH=\"$PATH:$GOROOT/bin\"\n#   Install Google Chrome\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends google-chrome-stable -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nENV CHROME_BIN=\"/usr/bin/google-chrome\"\n#   Install Haskell\nRUN apt-get update \\\n && apt-get install --no-install-recommends haskell-platform -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Helm\nRUN curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n#   Install Heroku CLI\nRUN curl https://cli-assets.heroku.com/install.sh | sh\n#   Install HHVM\nRUN apt-get update \\\n && apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xB4112585D386EB94 \\\n && add-apt-repository https://dl.hhvm.com/ubuntu \\\n && apt-get update \\\n && apt-get install --no-install-recommends hhvm -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install ImageMagick\nRUN apt-get update \\\n && apt-get install --no-install-recommends imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev -y --fix-missing \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Java OpenJDKs\nRUN apt-add-repository -y ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-9-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-10-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-11-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-alternatives --set java /usr/lib/jvm/java-$( DEFAULT_JDK_VERSION ;)-openjdk-amd64/jre/bin/java\nENV JAVA_HOME_7_X64=\"/usr/lib/jvm/java-7-openjdk-amd64\" \\\n    JAVA_HOME_8_X64=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JAVA_HOME_9_X64=\"/usr/lib/jvm/java-9-openjdk-amd64\" \\\n    JAVA_HOME_10_X64=\"/usr/lib/jvm/java-10-openjdk-amd64\" \\\n    JAVA_HOME_11_X64=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n    JAVA_HOME=\"/usr/lib/jvm/java-$(DEFAULT_JDK_VERSION)-openjdk-amd64\" \\\n    JAVA_TOOL_OPTIONS=\"-Dfile.encoding=UTF8\"\n#   Install Java Tools (Ant, Gradle, Maven)\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant ant-optional -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -sL https://services.gradle.org/distributions/gradle-4.6-bin.zip -o gradle-4.6.zip \\\n && unzip -d /usr/share gradle-4.6.zip \\\n && ln -s /usr/share/gradle-4.6/bin/gradle /usr/bin/gradle \\\n && rm gradle-4.6.zip\nRUN apt-get update \\\n && apt-get install --no-install-recommends maven -y \\\n && rm -rf /var/lib/apt/lists/*\nENV ANT_HOME=\"/usr/share/ant\" \\\n    GRADLE_HOME=\"/usr/share/gradle\" \\\n    M2_HOME=\"/usr/share/maven\"\n#   Install kubectl\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/local/bin/kubectl\n#   Install Mercurial\nRUN apt-get update \\\n && apt-get install --no-install-recommends mercurial -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Miniconda\nRUN curl -sL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh \\\n && chmod +x miniconda.sh \\\n && ./miniconda.sh -b -p /usr/share/miniconda \\\n && rm miniconda.sh\nENV CONDA=\"/usr/share/miniconda\"\n#   Install Mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-$( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https mono-complete -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install MS SQL Server client tools (https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-2017)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | tee /etc/apt/sources.list.d/msprod.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends mssql-tools unixodbc-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\nENV PATH=\"$PATH:/opt/mssql-tools/bin\"\n#   Install MySQL Client\nRUN apt-get update \\\n && apt-get install --no-install-recommends mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\nENV mysql=\"/usr/bin/mysql\"\n#   Install MySQL Server\nENV MYSQL_ROOT_PASSWORD=\"\"\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD\"'\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD\"'\nRUN apt-get update \\\n && apt-get install --no-install-recommends mysql-server -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core SDK and initialize package cache\nRUN curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/packages-microsoft-prod.deb > packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && rm packages-microsoft-prod.deb \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https dotnet-sdk-2.2 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nRUN dotnet help\nENV dotnet=\"/usr/bin/dotnet\"\n#   Install AzCopy (depends on .NET Core)\nRUN apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$( UBUNTU_RELEASE ;)-prod/ $( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/azure.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends azcopy -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install LTS Node.js and related tools\nRUN curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n lts \\\n && npm install bower@1.8.14 -g \\\n && npm install grunt@1.6.1 -g \\\n && npm install gulp@4.0.2 -g \\\n && npm install n@9.1.0 -g \\\n && npm install webpack@5.79.0 webpack-cli@5.0.1 -g --save-dev \\\n && npm install parcel-bundler@1.12.5 -g \\\n && npm install npm@9.6.4 -g \\\n && rm -rf ~/n\nENV bower=\"/usr/local/bin/bower\" \\\n    grunt=\"/usr/local/bin/grunt\"\n#   Install PhantomJS\nRUN apt-get update \\\n && apt-get install --no-install-recommends chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && export PHANTOM_JS=phantomjs-2.1.1-linux-x86_64 \\\n && wget https://bitbucket.org/ariya/phantomjs/downloads/$PHANTOM_JS.tar.bz2 \\\n && tar xvjf $PHANTOM_JS.tar.bz2 \\\n && mv $PHANTOM_JS /usr/local/share \\\n && ln -sf /usr/local/share/$PHANTOM_JS/bin/phantomjs /usr/local/bin\n#   Install PHP versions and libraries\nRUN apt-add-repository ppa:ondrej/php -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends php5.6 php5.6-amqp php5.6-bcmath php5.6-bz2 php5.6-cgi php5.6-cli php5.6-common php5.6-curl php5.6-dba php5.6-dev php5.6-enchant php5.6-fpm php5.6-gd php5.6-gmp php5.6-imap php5.6-interbase php5.6-intl php5.6-json php5.6-ldap php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-odbc php5.6-opcache php5.6-pgsql php5.6-phpdbg php5.6-pspell php5.6-readline php5.6-recode php5.6-snmp php5.6-soap php5.6-sqlite3 php5.6-sybase php5.6-tidy php5.6-xml php5.6-xmlrpc php5.6-xsl php5.6-zip -y \\\n && apt-get remove --purge -yq php5.6-dev \\\n && apt-get install --no-install-recommends php7.0 php7.0-amqp php7.0-bcmath php7.0-bz2 php7.0-cgi php7.0-cli php7.0-common php7.0-curl php7.0-dba php7.0-dev php7.0-enchant php7.0-fpm php7.0-gd php7.0-gmp php7.0-imap php7.0-interbase php7.0-intl php7.0-json php7.0-ldap php7.0-mbstring php7.0-mcrypt php7.0-mysql php7.0-odbc php7.0-opcache php7.0-pgsql php7.0-phpdbg php7.0-pspell php7.0-readline php7.0-recode php7.0-snmp php7.0-soap php7.0-sqlite3 php7.0-sybase php7.0-tidy php7.0-xml php7.0-xmlrpc php7.0-xsl php7.0-zip -y \\\n && apt-get remove --purge -yq php7.0-dev \\\n && apt-get install --no-install-recommends php7.1 php7.1-amqp php7.1-bcmath php7.1-bz2 php7.1-cgi php7.1-cli php7.1-common php7.1-curl php7.1-dba php7.1-dev php7.1-enchant php7.1-fpm php7.1-gd php7.1-gmp php7.1-imap php7.1-interbase php7.1-intl php7.1-json php7.1-ldap php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-odbc php7.1-opcache php7.1-pgsql php7.1-phpdbg php7.1-pspell php7.1-readline php7.1-recode php7.1-snmp php7.1-soap php7.1-sqlite3 php7.1-sybase php7.1-tidy php7.1-xml php7.1-xmlrpc php7.1-xsl php7.1-zip -y \\\n && apt-get remove --purge -yq php7.1-dev \\\n && apt-get install --no-install-recommends php7.2 php7.2-apcu php7.2-amqp php7.2-bcmath php7.2-bz2 php7.2-cgi php7.2-cli php7.2-common php7.2-curl php7.2-dba php7.2-dev php7.2-enchant php7.2-fpm php7.2-gd php7.2-gmp php7.2-imap php7.2-interbase php7.2-intl php7.2-json php7.2-ldap php7.2-mbstring php7.2-mysql php7.2-odbc php7.2-opcache php7.2-pgsql php7.2-phpdbg php7.2-pspell php7.2-readline php7.2-recode php7.2-snmp php7.2-soap php7.2-sqlite3 php7.2-sybase php7.2-tidy php7.2-xml php7.2-xmlrpc php7.2-xsl php7.2-zip -y \\\n && apt-get install --no-install-recommends php-igbinary php-memcache php-memcached php-mongodb php-redis php-xdebug php-yaml php-zmq -y \\\n && apt-get remove --purge -yq php7.2-dev \\\n && apt-get install --no-install-recommends snmp -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install composer (for PHP)\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   Install phpunit (for PHP)\nRUN wget -q -O phpunit https://phar.phpunit.de/phpunit-7.phar \\\n && chmod +x phpunit \\\n && mv phpunit /usr/local/bin/phpunit\n#   Install Pollinate\nRUN apt-get update \\\n && apt-get install --no-install-recommends pollinate -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Powershell Core\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/prod.list | tee /etc/apt/sources.list.d/microsoft.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends powershell -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Instally PyPy2\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy2-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy2-v6.0.0-linux64 /opt/pypy2 \\\n && ln -s /opt/pypy2/bin/pypy /usr/local/bin/pypy\n#   Install PyPy3\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy3-v6.0.0-linux64 /opt/pypy3 \\\n && ln -s /opt/pypy3/bin/pypy3 /usr/local/bin/pypy3\n#   Install Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends python python-pip python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rebar3 (for Erlang)\nRUN wget -q -O rebar3 https://s3.amazonaws.com/rebar3/rebar3 \\\n && chmod +x rebar3 \\\n && mv rebar3 /usr/local/bin/rebar3\n#   Install Ruby requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends libz-dev openssl libssl-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Scala build tools\nRUN curl -s https://raw.githubusercontent.com/paulp/sbt-extras/master/sbt > /usr/local/bin/sbt \\\n && chmod 0755 /usr/local/bin/sbt\n#   Install Sphinx\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && apt-get update \\\n && apt-get install --no-install-recommends sphinxsearch -y \\\n && rm -rf /var/lib/apt/lists/* || echo -n\n#   Install Subversion\nRUN apt-get update \\\n && apt-get install --no-install-recommends subversion -y \\\n && rm -rf /var/lib/apt/lists/*\nENV svn=\"/usr/bin/svn\"\n#   Install Terraform\nRUN TERRAFORM_VERSION=$( curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version ;) \\\n && curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin \\\n && rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n#   XSLT transformation\nRUN apt-get update \\\n && apt-get install --no-install-recommends xsltproc xalan -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install Xvfb\nRUN apt-get update \\\n && apt-get install --no-install-recommends xvfb -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Download hosted tool cache\nENV AGENT_TOOLSDIRECTORY=\"/opt/hostedtoolcache\"\nRUN azcopy --recursive --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux --destination $AGENT_TOOLSDIRECTORY\n#   Install the tools from the hosted tool cache\nRUN original_directory=$PWD \\\n && setups=$( find $AGENT_TOOLSDIRECTORY -name setup.sh ;) \\\n && for setup in $setups; do chmod +x $setup ;cd $( dirname $setup ;) ;./$( basename $setup ;) ;cd $original_directory ; done\n#   Add the latest Ruby version in the tool cache to the path\nENV PATH=\"$PATH:/opt/hostedtoolcache/Ruby/2.5.1/x64/bin\"\n#   Clean system\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM microsoft/vsts-agent:$(VSTS_AGENT_TAG)\n#  Install basic command-line utilities\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl dnsutils file ftp iproute2 iputils-ping locales openssh-client rsync shellcheck sudo telnet time unzip wget zip tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Setup the locale\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"$LANG\"\nRUN locale-gen $LANG \\\n && update-locale\n#  Accept EULA - needed for certain Microsoft packages like SQL Server Client Tools\nENV ACCEPT_EULA=\"Y\"\n#  Install essential build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Ansible\nRUN apt-get update \\\n && apt-get install --no-install-recommends ansible -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Azure CLI (instructions taken from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)\nRUN echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $( lsb_release -cs ;) main\" | tee /etc/apt/sources.list.d/azure-cli.list \\\n && curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https azure-cli -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* \\\n && az --version\n#  Install Clang (only appears to work on xenial)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository \"deb http://apt.llvm.org/$( UBUNTU_RELEASE ;)/ llvm-toolchain-$( UBUNTU_RELEASE ;)-6.0 main\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends clang-6.0 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\n#  Install CMake\nRUN curl -sL https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.sh -o cmake.sh \\\n && chmod +x cmake.sh \\\n && ./cmake.sh --prefix=/usr/local --exclude-subdir \\\n && rm cmake.sh\n#  Install Erlang\nRUN echo \"deb http://binaries.erlang-solutions.com/debian $( UBUNTU_RELEASE ;) contrib\" > /etc/apt/sources.list.d/eslerlang.list \\\n && wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends esl-erlang -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Install Firefox\nRUN apt-get update \\\n && apt-get install firefox -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Go\nRUN curl -sL https://dl.google.com/go/go1.9.4.linux-amd64.tar.gz -o go1.9.4.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.9.4 \\\n && tar -C /usr/local/go1.9.4 -xzf go1.9.4.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.9.4.linux-amd64.tar.gz\nRUN curl -sL https://dl.google.com/go/go1.10.linux-amd64.tar.gz -o go1.10.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.10 \\\n && tar -C /usr/local/go1.10 -xzf go1.10.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.10.linux-amd64.tar.gz\nENV GOROOT_1_9_X64=\"/usr/local/go1.9.4\" \\\n    GOROOT_1_10_X64=\"/usr/local/go1.10\" \\\n    GOROOT=\"/usr/local/go1.10\"\nENV PATH=\"$PATH:$GOROOT/bin\"\n#  Install Google Chrome\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list \\\n && apt-get update \\\n && apt-get install google-chrome-stable -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nENV CHROME_BIN=\"/usr/bin/google-chrome\"\n#  Install Haskell\nRUN apt-get update \\\n && apt-get install haskell-platform -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Helm\nRUN curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n#  Install Heroku CLI\nRUN curl https://cli-assets.heroku.com/install.sh | sh\n#  Install HHVM\nRUN apt-get update \\\n && apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xB4112585D386EB94 \\\n && add-apt-repository https://dl.hhvm.com/ubuntu \\\n && apt-get update \\\n && apt-get install hhvm -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Install ImageMagick\nRUN apt-get update \\\n && apt-get install --no-install-recommends imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev -y --fix-missing \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Java OpenJDKs\nRUN apt-add-repository -y ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-9-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-10-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-11-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-alternatives --set java /usr/lib/jvm/java-$( DEFAULT_JDK_VERSION ;)-openjdk-amd64/jre/bin/java\nENV JAVA_HOME_7_X64=\"/usr/lib/jvm/java-7-openjdk-amd64\" \\\n    JAVA_HOME_8_X64=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JAVA_HOME_9_X64=\"/usr/lib/jvm/java-9-openjdk-amd64\" \\\n    JAVA_HOME_10_X64=\"/usr/lib/jvm/java-10-openjdk-amd64\" \\\n    JAVA_HOME_11_X64=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n    JAVA_HOME=\"/usr/lib/jvm/java-$(DEFAULT_JDK_VERSION)-openjdk-amd64\" \\\n    JAVA_TOOL_OPTIONS=\"-Dfile.encoding=UTF8\"\n#  Install Java Tools (Ant, Gradle, Maven)\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant ant-optional -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -sL https://services.gradle.org/distributions/gradle-4.6-bin.zip -o gradle-4.6.zip \\\n && unzip -d /usr/share gradle-4.6.zip \\\n && ln -s /usr/share/gradle-4.6/bin/gradle /usr/bin/gradle \\\n && rm gradle-4.6.zip\nRUN apt-get update \\\n && apt-get install --no-install-recommends maven -y \\\n && rm -rf /var/lib/apt/lists/*\nENV ANT_HOME=\"/usr/share/ant\" \\\n    GRADLE_HOME=\"/usr/share/gradle\" \\\n    M2_HOME=\"/usr/share/maven\"\n#  Install kubectl\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/local/bin/kubectl\n#  Install Mercurial\nRUN apt-get update \\\n && apt-get install mercurial -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Miniconda\nRUN curl -sL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh \\\n && chmod +x miniconda.sh \\\n && ./miniconda.sh -b -p /usr/share/miniconda \\\n && rm miniconda.sh\nENV CONDA=\"/usr/share/miniconda\"\n#  Install Mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-$( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https mono-complete -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Install MS SQL Server client tools (https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-2017)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | tee /etc/apt/sources.list.d/msprod.list \\\n && apt-get update \\\n && apt-get install mssql-tools unixodbc-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\nENV PATH=\"$PATH:/opt/mssql-tools/bin\"\n#  Install MySQL Client\nRUN apt-get update \\\n && apt-get install mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\nENV mysql=\"/usr/bin/mysql\"\n#  Install MySQL Server\nENV MYSQL_ROOT_PASSWORD=\"\"\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD\"'\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD\"'\nRUN apt-get update \\\n && apt-get install mysql-server -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install .NET Core SDK and initialize package cache\nRUN curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/packages-microsoft-prod.deb > packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && rm packages-microsoft-prod.deb \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https dotnet-sdk-2.2 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nRUN dotnet help\nENV dotnet=\"/usr/bin/dotnet\"\n#  Install AzCopy (depends on .NET Core)\nRUN apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$( UBUNTU_RELEASE ;)-prod/ $( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/azure.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends azcopy -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Install LTS Node.js and related tools\nRUN curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n lts \\\n && npm install bower -g \\\n && npm install grunt -g \\\n && npm install gulp -g \\\n && npm install n -g \\\n && npm install webpack webpack-cli -g --save-dev \\\n && npm install parcel-bundler -g \\\n && npm install npm -g \\\n && rm -rf ~/n\nENV bower=\"/usr/local/bin/bower\" \\\n    grunt=\"/usr/local/bin/grunt\"\n#  Install PhantomJS\nRUN apt-get update \\\n && apt-get install chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && export PHANTOM_JS=phantomjs-2.1.1-linux-x86_64 \\\n && wget https://bitbucket.org/ariya/phantomjs/downloads/$PHANTOM_JS.tar.bz2 \\\n && tar xvjf $PHANTOM_JS.tar.bz2 \\\n && mv $PHANTOM_JS /usr/local/share \\\n && ln -sf /usr/local/share/$PHANTOM_JS/bin/phantomjs /usr/local/bin\n#  Install PHP versions and libraries\nRUN apt-add-repository ppa:ondrej/php -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends php5.6 php5.6-amqp php5.6-bcmath php5.6-bz2 php5.6-cgi php5.6-cli php5.6-common php5.6-curl php5.6-dba php5.6-dev php5.6-enchant php5.6-fpm php5.6-gd php5.6-gmp php5.6-imap php5.6-interbase php5.6-intl php5.6-json php5.6-ldap php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-odbc php5.6-opcache php5.6-pgsql php5.6-phpdbg php5.6-pspell php5.6-readline php5.6-recode php5.6-snmp php5.6-soap php5.6-sqlite3 php5.6-sybase php5.6-tidy php5.6-xml php5.6-xmlrpc php5.6-xsl php5.6-zip -y \\\n && apt-get remove --purge -yq php5.6-dev \\\n && apt-get install --no-install-recommends php7.0 php7.0-amqp php7.0-bcmath php7.0-bz2 php7.0-cgi php7.0-cli php7.0-common php7.0-curl php7.0-dba php7.0-dev php7.0-enchant php7.0-fpm php7.0-gd php7.0-gmp php7.0-imap php7.0-interbase php7.0-intl php7.0-json php7.0-ldap php7.0-mbstring php7.0-mcrypt php7.0-mysql php7.0-odbc php7.0-opcache php7.0-pgsql php7.0-phpdbg php7.0-pspell php7.0-readline php7.0-recode php7.0-snmp php7.0-soap php7.0-sqlite3 php7.0-sybase php7.0-tidy php7.0-xml php7.0-xmlrpc php7.0-xsl php7.0-zip -y \\\n && apt-get remove --purge -yq php7.0-dev \\\n && apt-get install --no-install-recommends php7.1 php7.1-amqp php7.1-bcmath php7.1-bz2 php7.1-cgi php7.1-cli php7.1-common php7.1-curl php7.1-dba php7.1-dev php7.1-enchant php7.1-fpm php7.1-gd php7.1-gmp php7.1-imap php7.1-interbase php7.1-intl php7.1-json php7.1-ldap php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-odbc php7.1-opcache php7.1-pgsql php7.1-phpdbg php7.1-pspell php7.1-readline php7.1-recode php7.1-snmp php7.1-soap php7.1-sqlite3 php7.1-sybase php7.1-tidy php7.1-xml php7.1-xmlrpc php7.1-xsl php7.1-zip -y \\\n && apt-get remove --purge -yq php7.1-dev \\\n && apt-get install --no-install-recommends php7.2 php7.2-apcu php7.2-amqp php7.2-bcmath php7.2-bz2 php7.2-cgi php7.2-cli php7.2-common php7.2-curl php7.2-dba php7.2-dev php7.2-enchant php7.2-fpm php7.2-gd php7.2-gmp php7.2-imap php7.2-interbase php7.2-intl php7.2-json php7.2-ldap php7.2-mbstring php7.2-mysql php7.2-odbc php7.2-opcache php7.2-pgsql php7.2-phpdbg php7.2-pspell php7.2-readline php7.2-recode php7.2-snmp php7.2-soap php7.2-sqlite3 php7.2-sybase php7.2-tidy php7.2-xml php7.2-xmlrpc php7.2-xsl php7.2-zip -y \\\n && apt-get install --no-install-recommends php-igbinary php-memcache php-memcached php-mongodb php-redis php-xdebug php-yaml php-zmq -y \\\n && apt-get remove --purge -yq php7.2-dev \\\n && apt-get install --no-install-recommends snmp -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install composer (for PHP)\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#  Install phpunit (for PHP)\nRUN wget -q -O phpunit https://phar.phpunit.de/phpunit-7.phar \\\n && chmod +x phpunit \\\n && mv phpunit /usr/local/bin/phpunit\n#  Install Pollinate\nRUN apt-get update \\\n && apt-get install --no-install-recommends pollinate -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Powershell Core\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/prod.list | tee /etc/apt/sources.list.d/microsoft.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends powershell -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Instally PyPy2\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy2-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy2-v6.0.0-linux64 /opt/pypy2 \\\n && ln -s /opt/pypy2/bin/pypy /usr/local/bin/pypy\n#  Install PyPy3\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy3-v6.0.0-linux64 /opt/pypy3 \\\n && ln -s /opt/pypy3/bin/pypy3 /usr/local/bin/pypy3\n#  Install Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends python python-pip python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rebar3 (for Erlang)\nRUN wget -q -O rebar3 https://s3.amazonaws.com/rebar3/rebar3 \\\n && chmod +x rebar3 \\\n && mv rebar3 /usr/local/bin/rebar3\n#  Install Ruby requirements\nRUN apt-get update \\\n && apt-get install libz-dev openssl libssl-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Scala build tools\nRUN curl -s https://raw.githubusercontent.com/paulp/sbt-extras/master/sbt > /usr/local/bin/sbt \\\n && chmod 0755 /usr/local/bin/sbt\n#  Install Sphinx\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && apt-get update \\\n && apt-get install sphinxsearch -y \\\n && rm -rf /var/lib/apt/lists/* || echo -n\n#  Install Subversion\nRUN apt-get update \\\n && apt-get install --no-install-recommends subversion -y \\\n && rm -rf /var/lib/apt/lists/*\nENV svn=\"/usr/bin/svn\"\n#  Install Terraform\nRUN TERRAFORM_VERSION=$( curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version ;) \\\n && curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin \\\n && rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n#  XSLT transformation\nRUN apt-get update \\\n && apt-get install --no-install-recommends xsltproc xalan -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#  Install Xvfb\nRUN apt-get update \\\n && apt-get install xvfb -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Download hosted tool cache\nENV AGENT_TOOLSDIRECTORY=\"/opt/hostedtoolcache\"\nRUN azcopy --recursive --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux --destination $AGENT_TOOLSDIRECTORY\n#  Install the tools from the hosted tool cache\nRUN original_directory=$PWD \\\n && setups=$( find $AGENT_TOOLSDIRECTORY -name setup.sh ;) \\\n && for setup in $setups; do chmod +x $setup ;cd $( dirname $setup ;) ;./$( basename $setup ;) ;cd $original_directory ; done\n#  Add the latest Ruby version in the tool cache to the path\nENV PATH=\"$PATH:/opt/hostedtoolcache/Ruby/2.5.1/x64/bin\"\n#  Clean system\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n","injectedSmells":[],"originalDockerfileHash":"cc28be7b9a3f2f00472860b2ac4edcb2","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM microsoft/vsts-agent:$(VSTS_AGENT_TAG)\n#   Install basic command-line utilities\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl dnsutils file ftp iproute2 iputils-ping locales openssh-client rsync shellcheck sudo telnet time unzip wget zip tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup the locale\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"$LANG\"\nRUN locale-gen $LANG \\\n && update-locale\n#   Accept EULA - needed for certain Microsoft packages like SQL Server Client Tools\nENV ACCEPT_EULA=\"Y\"\n#   Install essential build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Ansible\nRUN apt-get update \\\n && apt-get install --no-install-recommends ansible -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Azure CLI (instructions taken from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)\nRUN echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $( lsb_release -cs ;) main\" | tee /etc/apt/sources.list.d/azure-cli.list \\\n && curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https azure-cli -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* \\\n && az --version\n#   Install Clang (only appears to work on xenial)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository \"deb http://apt.llvm.org/$( UBUNTU_RELEASE ;)/ llvm-toolchain-$( UBUNTU_RELEASE ;)-6.0 main\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends clang-6.0 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\n#   Install CMake\nRUN curl -sL https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.sh -o cmake.sh \\\n && chmod +x cmake.sh \\\n && ./cmake.sh --prefix=/usr/local --exclude-subdir \\\n && rm cmake.sh\n#   Install Erlang\nRUN echo \"deb http://binaries.erlang-solutions.com/debian $( UBUNTU_RELEASE ;) contrib\" > /etc/apt/sources.list.d/eslerlang.list \\\n && wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends esl-erlang -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install Firefox\nRUN apt-get update \\\n && apt-get install firefox -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Go\nRUN curl -sL https://dl.google.com/go/go1.9.4.linux-amd64.tar.gz -o go1.9.4.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.9.4 \\\n && tar -C /usr/local/go1.9.4 -xzf go1.9.4.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.9.4.linux-amd64.tar.gz\nRUN curl -sL https://dl.google.com/go/go1.10.linux-amd64.tar.gz -o go1.10.linux-amd64.tar.gz \\\n && mkdir -p /usr/local/go1.10 \\\n && tar -C /usr/local/go1.10 -xzf go1.10.linux-amd64.tar.gz --strip-components=1 go \\\n && rm go1.10.linux-amd64.tar.gz\nENV GOROOT_1_9_X64=\"/usr/local/go1.9.4\" \\\n    GOROOT_1_10_X64=\"/usr/local/go1.10\" \\\n    GOROOT=\"/usr/local/go1.10\"\nENV PATH=\"$PATH:$GOROOT/bin\"\n#   Install Google Chrome\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google-chrome.list \\\n && apt-get update \\\n && apt-get install google-chrome-stable -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nENV CHROME_BIN=\"/usr/bin/google-chrome\"\n#   Install Haskell\nRUN apt-get update \\\n && apt-get install haskell-platform -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Helm\nRUN curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n#   Install Heroku CLI\nRUN curl https://cli-assets.heroku.com/install.sh | sh\n#   Install HHVM\nRUN apt-get update \\\n && apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xB4112585D386EB94 \\\n && add-apt-repository https://dl.hhvm.com/ubuntu \\\n && apt-get update \\\n && apt-get install hhvm -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install ImageMagick\nRUN apt-get update \\\n && apt-get install --no-install-recommends imagemagick libmagickcore-dev libmagickwand-dev libmagic-dev -y --fix-missing \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Java OpenJDKs\nRUN apt-add-repository -y ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-9-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-10-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-11-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-alternatives --set java /usr/lib/jvm/java-$( DEFAULT_JDK_VERSION ;)-openjdk-amd64/jre/bin/java\nENV JAVA_HOME_7_X64=\"/usr/lib/jvm/java-7-openjdk-amd64\" \\\n    JAVA_HOME_8_X64=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JAVA_HOME_9_X64=\"/usr/lib/jvm/java-9-openjdk-amd64\" \\\n    JAVA_HOME_10_X64=\"/usr/lib/jvm/java-10-openjdk-amd64\" \\\n    JAVA_HOME_11_X64=\"/usr/lib/jvm/java-11-openjdk-amd64\" \\\n    JAVA_HOME=\"/usr/lib/jvm/java-$(DEFAULT_JDK_VERSION)-openjdk-amd64\" \\\n    JAVA_TOOL_OPTIONS=\"-Dfile.encoding=UTF8\"\n#   Install Java Tools (Ant, Gradle, Maven)\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant ant-optional -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -sL https://services.gradle.org/distributions/gradle-4.6-bin.zip -o gradle-4.6.zip \\\n && unzip -d /usr/share gradle-4.6.zip \\\n && ln -s /usr/share/gradle-4.6/bin/gradle /usr/bin/gradle \\\n && rm gradle-4.6.zip\nRUN apt-get update \\\n && apt-get install --no-install-recommends maven -y \\\n && rm -rf /var/lib/apt/lists/*\nENV ANT_HOME=\"/usr/share/ant\" \\\n    GRADLE_HOME=\"/usr/share/gradle\" \\\n    M2_HOME=\"/usr/share/maven\"\n#   Install kubectl\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ;)/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/local/bin/kubectl\n#   Install Mercurial\nRUN apt-get update \\\n && apt-get install mercurial -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Miniconda\nRUN curl -sL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh \\\n && chmod +x miniconda.sh \\\n && ./miniconda.sh -b -p /usr/share/miniconda \\\n && rm miniconda.sh\nENV CONDA=\"/usr/share/miniconda\"\n#   Install Mono\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-$( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https mono-complete -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install MS SQL Server client tools (https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-2017)\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | tee /etc/apt/sources.list.d/msprod.list \\\n && apt-get update \\\n && apt-get install mssql-tools unixodbc-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/* || echo -n\nENV PATH=\"$PATH:/opt/mssql-tools/bin\"\n#   Install MySQL Client\nRUN apt-get update \\\n && apt-get install mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\nENV mysql=\"/usr/bin/mysql\"\n#   Install MySQL Server\nENV MYSQL_ROOT_PASSWORD=\"\"\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD\"'\nRUN bash -c 'debconf-set-selections <<< \"mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD\"'\nRUN apt-get update \\\n && apt-get install mysql-server -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core SDK and initialize package cache\nRUN curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/packages-microsoft-prod.deb > packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && rm packages-microsoft-prod.deb \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https dotnet-sdk-2.2 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\nRUN dotnet help\nENV dotnet=\"/usr/bin/dotnet\"\n#   Install AzCopy (depends on .NET Core)\nRUN apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$( UBUNTU_RELEASE ;)-prod/ $( UBUNTU_RELEASE ;) main\" | tee /etc/apt/sources.list.d/azure.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends azcopy -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install LTS Node.js and related tools\nRUN curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n lts \\\n && npm install bower -g \\\n && npm install grunt -g \\\n && npm install gulp -g \\\n && npm install n -g \\\n && npm install webpack webpack-cli -g --save-dev \\\n && npm install parcel-bundler -g \\\n && npm install npm -g \\\n && rm -rf ~/n\nENV bower=\"/usr/local/bin/bower\" \\\n    grunt=\"/usr/local/bin/grunt\"\n#   Install PhantomJS\nRUN apt-get update \\\n && apt-get install chrpath libssl-dev libxft-dev libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && export PHANTOM_JS=phantomjs-2.1.1-linux-x86_64 \\\n && wget https://bitbucket.org/ariya/phantomjs/downloads/$PHANTOM_JS.tar.bz2 \\\n && tar xvjf $PHANTOM_JS.tar.bz2 \\\n && mv $PHANTOM_JS /usr/local/share \\\n && ln -sf /usr/local/share/$PHANTOM_JS/bin/phantomjs /usr/local/bin\n#   Install PHP versions and libraries\nRUN apt-add-repository ppa:ondrej/php -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends php5.6 php5.6-amqp php5.6-bcmath php5.6-bz2 php5.6-cgi php5.6-cli php5.6-common php5.6-curl php5.6-dba php5.6-dev php5.6-enchant php5.6-fpm php5.6-gd php5.6-gmp php5.6-imap php5.6-interbase php5.6-intl php5.6-json php5.6-ldap php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-odbc php5.6-opcache php5.6-pgsql php5.6-phpdbg php5.6-pspell php5.6-readline php5.6-recode php5.6-snmp php5.6-soap php5.6-sqlite3 php5.6-sybase php5.6-tidy php5.6-xml php5.6-xmlrpc php5.6-xsl php5.6-zip -y \\\n && apt-get remove --purge -yq php5.6-dev \\\n && apt-get install --no-install-recommends php7.0 php7.0-amqp php7.0-bcmath php7.0-bz2 php7.0-cgi php7.0-cli php7.0-common php7.0-curl php7.0-dba php7.0-dev php7.0-enchant php7.0-fpm php7.0-gd php7.0-gmp php7.0-imap php7.0-interbase php7.0-intl php7.0-json php7.0-ldap php7.0-mbstring php7.0-mcrypt php7.0-mysql php7.0-odbc php7.0-opcache php7.0-pgsql php7.0-phpdbg php7.0-pspell php7.0-readline php7.0-recode php7.0-snmp php7.0-soap php7.0-sqlite3 php7.0-sybase php7.0-tidy php7.0-xml php7.0-xmlrpc php7.0-xsl php7.0-zip -y \\\n && apt-get remove --purge -yq php7.0-dev \\\n && apt-get install --no-install-recommends php7.1 php7.1-amqp php7.1-bcmath php7.1-bz2 php7.1-cgi php7.1-cli php7.1-common php7.1-curl php7.1-dba php7.1-dev php7.1-enchant php7.1-fpm php7.1-gd php7.1-gmp php7.1-imap php7.1-interbase php7.1-intl php7.1-json php7.1-ldap php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-odbc php7.1-opcache php7.1-pgsql php7.1-phpdbg php7.1-pspell php7.1-readline php7.1-recode php7.1-snmp php7.1-soap php7.1-sqlite3 php7.1-sybase php7.1-tidy php7.1-xml php7.1-xmlrpc php7.1-xsl php7.1-zip -y \\\n && apt-get remove --purge -yq php7.1-dev \\\n && apt-get install --no-install-recommends php7.2 php7.2-apcu php7.2-amqp php7.2-bcmath php7.2-bz2 php7.2-cgi php7.2-cli php7.2-common php7.2-curl php7.2-dba php7.2-dev php7.2-enchant php7.2-fpm php7.2-gd php7.2-gmp php7.2-imap php7.2-interbase php7.2-intl php7.2-json php7.2-ldap php7.2-mbstring php7.2-mysql php7.2-odbc php7.2-opcache php7.2-pgsql php7.2-phpdbg php7.2-pspell php7.2-readline php7.2-recode php7.2-snmp php7.2-soap php7.2-sqlite3 php7.2-sybase php7.2-tidy php7.2-xml php7.2-xmlrpc php7.2-xsl php7.2-zip -y \\\n && apt-get install --no-install-recommends php-igbinary php-memcache php-memcached php-mongodb php-redis php-xdebug php-yaml php-zmq -y \\\n && apt-get remove --purge -yq php7.2-dev \\\n && apt-get install --no-install-recommends snmp -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install composer (for PHP)\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   Install phpunit (for PHP)\nRUN wget -q -O phpunit https://phar.phpunit.de/phpunit-7.phar \\\n && chmod +x phpunit \\\n && mv phpunit /usr/local/bin/phpunit\n#   Install Pollinate\nRUN apt-get update \\\n && apt-get install --no-install-recommends pollinate -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Powershell Core\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/$( UBUNTU_VERSION ;)/prod.list | tee /etc/apt/sources.list.d/microsoft.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends powershell -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Instally PyPy2\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy2-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy2-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy2-v6.0.0-linux64 /opt/pypy2 \\\n && ln -s /opt/pypy2/bin/pypy /usr/local/bin/pypy\n#   Install PyPy3\nRUN wget -q -P /tmp https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-linux64.tar.bz2 \\\n && tar -x -C /opt -f /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && rm /tmp/pypy3-v6.0.0-linux64.tar.bz2 \\\n && mv /opt/pypy3-v6.0.0-linux64 /opt/pypy3 \\\n && ln -s /opt/pypy3/bin/pypy3 /usr/local/bin/pypy3\n#   Install Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends python python-pip python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rebar3 (for Erlang)\nRUN wget -q -O rebar3 https://s3.amazonaws.com/rebar3/rebar3 \\\n && chmod +x rebar3 \\\n && mv rebar3 /usr/local/bin/rebar3\n#   Install Ruby requirements\nRUN apt-get update \\\n && apt-get install libz-dev openssl libssl-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Scala build tools\nRUN curl -s https://raw.githubusercontent.com/paulp/sbt-extras/master/sbt > /usr/local/bin/sbt \\\n && chmod 0755 /usr/local/bin/sbt\n#   Install Sphinx\nRUN [ \"$( UBUNTU_RELEASE ;)\" = \"xenial\" ] \\\n && apt-get update \\\n && apt-get install sphinxsearch -y \\\n && rm -rf /var/lib/apt/lists/* || echo -n\n#   Install Subversion\nRUN apt-get update \\\n && apt-get install --no-install-recommends subversion -y \\\n && rm -rf /var/lib/apt/lists/*\nENV svn=\"/usr/bin/svn\"\n#   Install Terraform\nRUN TERRAFORM_VERSION=$( curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r .current_version ;) \\\n && curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin \\\n && rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n#   XSLT transformation\nRUN apt-get update \\\n && apt-get install --no-install-recommends xsltproc xalan -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n#   Install Xvfb\nRUN apt-get update \\\n && apt-get install xvfb -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Download hosted tool cache\nENV AGENT_TOOLSDIRECTORY=\"/opt/hostedtoolcache\"\nRUN azcopy --recursive --source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux --destination $AGENT_TOOLSDIRECTORY\n#   Install the tools from the hosted tool cache\nRUN original_directory=$PWD \\\n && setups=$( find $AGENT_TOOLSDIRECTORY -name setup.sh ;) \\\n && for setup in $setups; do chmod +x $setup ;cd $( dirname $setup ;) ;./$( basename $setup ;) ;cd $original_directory ; done\n#   Add the latest Ruby version in the tool cache to the path\nENV PATH=\"$PATH:/opt/hostedtoolcache/Ruby/2.5.1/x64/bin\"\n#   Clean system\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/apt/sources.list.d/*\n","originalDockerfileUglifiedHash":"0e975099d7655f71221a8fac09dcf871","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d6e12d445779b3976248e1bd6a2e8425f36d1baf.dockerfile"}