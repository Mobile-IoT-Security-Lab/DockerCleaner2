{"seed":2544615626,"processedDockerfileHash":"7ddad6e9c9be6c41fe6437dc0b871c7f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"ARG IMAGE=alpine:3.9\nFROM $IMAGE\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nENV NGINX_VERSION=\"1.16.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add openssl=3.0.8-r3 curl=7.88.1-r1 ca-certificates=20220614-r4 --no-cache --virtual .cert-deps \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \"https://nginx.org/packages/alpine/v\" `egrep -o '^[0-9]+\\\\.[0-9]+' /etc/alpine-release ` \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add gcc=12.2.1_git20220924-r4 libc-dev=0.7.2-r3 make=4.3-r1 openssl-dev=3.0.8-r3 pcre-dev=8.45-r2 zlib-dev=1.2.13-r0 linux-headers=5.19.5-r0 libxslt-dev=1.1.37-r1 gd-dev=2.3.3-r3 geoip-dev=1.6.12-r3 perl-dev=5.36.0-r0 libedit-dev=20221030.3.1-r0 mercurial=6.3.1-r0 bash=5.2.15-r0 alpine-sdk=1.0-r1 findutils=4.9.0-r3 --no-cache --virtual .build-deps \\\n && su nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up -r 417 \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add $nginxPackages --no-cache \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add gettext=0.21.1-r1 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2023c-r0 --no-cache\n#   implement changes required to run NGINX as an unprivileged user\nRUN sed -i -e '/listen/!b' -e '/80;/!b' -e 's/80;/8080;/' /etc/nginx/conf.d/default.conf \\\n && sed -i -e '/user/!b' -e '/nginx/!b' -e '/nginx/d' /etc/nginx/nginx.conf \\\n && sed -i 's!/var/run/nginx.pid!/tmp/nginx.pid!g' /etc/nginx/nginx.conf \\\n && sed -i \"/^http {/a \\ proxy_temp_path /tmp/proxy_temp;\\n client_body_temp_path /tmp/client_temp;\\n fastcgi_temp_path /tmp/fastcgi_temp;\\n uwsgi_temp_path /tmp/uwsgi_temp;\\n scgi_temp_path /tmp/scgi_temp;\\n\" /etc/nginx/nginx.conf\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 8080/tcp\nSTOPSIGNAL SIGTERM\nUSER 101\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG IMAGE=alpine:3.9\nFROM $IMAGE\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nENV NGINX_VERSION=\"1.16.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add --no-cache --virtual .cert-deps openssl curl ca-certificates \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \"https://nginx.org/packages/alpine/v\" `egrep -o '^[0-9]+\\\\.[0-9]+' /etc/alpine-release ` \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev mercurial bash alpine-sdk findutils \\\n && su nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up -r 417 \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add --no-cache $nginxPackages \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata\n#  implement changes required to run NGINX as an unprivileged user\nRUN sed -i -e '/listen/!b' -e '/80;/!b' -e 's/80;/8080;/' /etc/nginx/conf.d/default.conf \\\n && sed -i -e '/user/!b' -e '/nginx/!b' -e '/nginx/d' /etc/nginx/nginx.conf \\\n && sed -i 's!/var/run/nginx.pid!/tmp/nginx.pid!g' /etc/nginx/nginx.conf \\\n && sed -i \"/^http {/a \\ proxy_temp_path /tmp/proxy_temp;\\n client_body_temp_path /tmp/client_temp;\\n fastcgi_temp_path /tmp/fastcgi_temp;\\n uwsgi_temp_path /tmp/uwsgi_temp;\\n scgi_temp_path /tmp/scgi_temp;\\n\" /etc/nginx/nginx.conf\n#  forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 8080/tcp\nSTOPSIGNAL SIGTERM\nUSER 101\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"d1a3ba6561dbf571825b26a397abc0ca","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG IMAGE=alpine:3.9\nFROM $IMAGE\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nENV NGINX_VERSION=\"1.16.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add --no-cache --virtual .cert-deps openssl curl ca-certificates \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \"https://nginx.org/packages/alpine/v\" `egrep -o '^[0-9]+\\\\.[0-9]+' /etc/alpine-release ` \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev mercurial bash alpine-sdk findutils \\\n && su nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up -r 417 \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add --no-cache $nginxPackages \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata\n#   implement changes required to run NGINX as an unprivileged user\nRUN sed -i -e '/listen/!b' -e '/80;/!b' -e 's/80;/8080;/' /etc/nginx/conf.d/default.conf \\\n && sed -i -e '/user/!b' -e '/nginx/!b' -e '/nginx/d' /etc/nginx/nginx.conf \\\n && sed -i 's!/var/run/nginx.pid!/tmp/nginx.pid!g' /etc/nginx/nginx.conf \\\n && sed -i \"/^http {/a \\ proxy_temp_path /tmp/proxy_temp;\\n client_body_temp_path /tmp/client_temp;\\n fastcgi_temp_path /tmp/fastcgi_temp;\\n uwsgi_temp_path /tmp/uwsgi_temp;\\n scgi_temp_path /tmp/scgi_temp;\\n\" /etc/nginx/nginx.conf\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 8080/tcp\nSTOPSIGNAL SIGTERM\nUSER 101\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"9fe0b50454af0eebe25663618c9aa4f5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e1d7823ed39bb83b000562d770335aaa23a6f764.dockerfile"}