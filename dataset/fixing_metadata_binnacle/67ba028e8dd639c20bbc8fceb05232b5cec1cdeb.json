{"seed":769932051,"processedDockerfileHash":"30ca29ccb7c43e6caac691d076fe59b9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"FROM centos:7\n#  ###############################################################\n#   General information\n#  ###############################################################\nLABEL com.nabisoft.sapcc.version=\"2.12.0.1\"\nLABEL com.nabisoft.sapcc.sapjvm.version=\"8.1.055\"\nLABEL com.nabisoft.sapcc.vendor=\"Nabi Zamani\"\nLABEL com.nabisoft.sapcc.name=\"SAP Cloud Connector\"\n#  ###############################################################\n#   Upgrade + install dependencies\n#  ###############################################################\n#  RUN yum -y upgrade\nRUN yum -y install initscripts which unzip wget net-tools less\n#  ###############################################################\n#   Install dependencies and the SAP packages\n#  ###############################################################\n#   HINT:\n#   In case automated download fails (see wget below) just download sapjvm + sapcc manually\n#   and put the downloaded files into a folder \"sapdownloads\" on the same level\n#   as this Dockerfile. Then pass them to the container by uncommenting the\n#   following command (then retry the next steps) + remove the 2 wget from RUN\n#   + adapt the zip filename and the 2 rpm filenames under RUN below:\n#  COPY sapdownloads /tmp/sapdownloads/\nWORKDIR /tmp/sapdownloads\n#   download sapcc and sapjvm + unzip sapcc + install sapjvm and then install sapcc\n#   ATTENTION:\n#   This automated download automatically accepts SAP's End User License Agreement (EULA).\n#   Thus, when using this docker file as is you automatically accept SAP's EULA!\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip \\\n && wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapjvm-8.1.055-linux-x64.rpm \\\n && unzip sapcc-2.12.0.1-linux-x64.zip \\\n && rpm -i sapjvm-8.1.055-linux-x64.rpm \\\n && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#   You could also use Oracle JDK (feel free to skip JCE download + installation)\n#  RUN wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.rpm\" && \\\n#      wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip\" && \\\n#      rpm -i jdk-8u202-linux-x64.rpm && \\\n#      unzip jce_policy-8.zip && rm jce_policy-8.zip && cp -v UnlimitedJCEPolicyJDK8/*.jar /usr/java/default/jre/lib/security/ && \\\n#      wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip && \\\n#      unzip sapcc-2.12.0.1-linux-x64.zip && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#   HINT:\n#   In case the downloads fail you might have to update the wget urls.\n#   In such cases please also let me know by opening an issue so that I can update this dockerfile.\n#   Docker is based on PID 1, but service is already started bacause of rpm installation.\n#   Furthermore, we don't want to run the container in a \"--privileged\" container.\n#   Solution: Stop service + start the java process manually (see CMD below).\n#   Hint: changing the shell to bash via chsh is optional.\n#  RUN service scc_daemon stop && chsh -s /bin/bash sccadmin\n#  ## this is not needed anymore because auto start via rpm fails anyway, so no need to stop\n#     let's just switch to bash (optional)\nRUN chsh -s /bin/bash sccadmin\n#   Recommended: Replace the Default SSL Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/bcd5e113c9164ae8a443325692cd5b12.html\n#  # Use a Self-Signed Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/57cb635955224bd58ac917a42bead117.html\n#  RUN export JAVA_EXE=/opt/sapjvm_8/bin/java\n#  RUN cd /opt/sap/scc/config\n#   get the currenct password\n#  RUN /opt/sapjvm_8/bin/java -cp /opt/sap/scc/plugins/com.sap.scc.rt*.jar -Djava.library.path=/opt/sap/scc/auditor com.sap.scc.jni.SecStoreAccess -path /opt/sap/scc/scc_config -p\n#   => current passwd [csW47YRjogt98IZy]\n#   TODO: use the retrieved password via CLI instead of having it hard coded here:\n#  RUN /opt/sapjvm_8/bin/keytool -delete -alias tomcat -keystore ks.store -storepass csW47YRjogt98IZy\n#  RUN /opt/sapjvm_8/bin/keytool -keysize 4096 -genkey -v -keyalg RSA -validity 3650 -alias tomcat -keypass csW47YRjogt98IZy -keystore ks.store -storepass csW47YRjogt98IZy -dname \"CN=SCC, OU=YourCompany, O=YourCompany\"\n#   expose connector server\nEXPOSE 8443/tcp\nUSER sccadmin\nWORKDIR /opt/sap/scc\n#   finally run sapcc as PID 1\n#   For Oracle JDK use this command:\n#  CMD /usr/bin/java \\\n#   SAP JVM\nCMD /opt/sapjvm_8/bin/java -server -XtraceFile=log/vm_@PID_trace.log -XX:+GCHistory -XX:GCHistoryFilename=log/vm_@PID_gc.prf -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -Xms1024m -Xmx1024m -XX:MaxNewSize=512m -XX:NewSize=512m -XX:+UseConcMarkSweepGC -XX:TargetSurvivorRatio=85 -XX:SurvivorRatio=6 -XX:MaxDirectMemorySize=2G -Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester -Dosgi.requiredJavaVersion=1.6 -Dosgi.install.area=. -DuseNaming=osgi -Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false -Dcom.sap.core.process=ljs_node -Declipse.ignoreApp=true -Dosgi.noShutdown=true -Dosgi.framework.activeThreadType=normal -Dosgi.embedded.cleanupOnSave=true -Dosgi.usesLimit=30 -Djava.awt.headless=true -Dio.netty.recycler.maxCapacity.default=256 -jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n#  \t-Xdebug \\\n#  \t-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n \\\n#  \t-console\n#  CMD [\"/opt/sapjvm_8/bin/java\",\"-server\",\"-XtraceFile=log/vm_@PID_trace.log\",\"-XX:+GCHistory\",\"-XX:GCHistoryFilename=log/vm_@PID_gc.prf\",\"-XX:+HeapDumpOnOutOfMemoryError\",\"-XX:+DisableExplicitGC\",\"-Xms1024m\",\"-Xmx1024m\",\"-XX:MaxNewSize=512m\",\"-XX:NewSize=512m\",\"-XX:+UseConcMarkSweepGC\",\"-XX:TargetSurvivorRatio=85\",\"-XX:SurvivorRatio=6\",\"-XX:MaxDirectMemorySize=2G\",\"-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester\",\"-Dosgi.requiredJavaVersion=1.6\",\"-Dosgi.install.area=.\",\"-DuseNaming=osgi\",\"-Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false\",\"-Dcom.sap.core.process=ljs_node\",\"-Declipse.ignoreApp=true\",\"-Dosgi.noShutdown=true\",\"-Dosgi.framework.activeThreadType=normal\",\"-Dosgi.embedded.cleanupOnSave=true\",\"-Dosgi.usesLimit=30\",\"-Djava.awt.headless=true\",\"-Dio.netty.recycler.maxCapacity.default=256\",\"-jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\"]\n#  HINT:\n#   The CMD above is basically derived from the SAPCC \"portable\" archives which can be\n#   downloaded from https://tools.hana.ondemand.com/#cloud, i.e. sapcc-2.12.0.1-windows-x64.zip, sapcc-2.12.0.1-linux-x64.tar.gz, sapcc-2.12.0.1-macosx-x64.tar.gz\n#   To verify this, simply extract any of these archives and check the files \"deamon.sh\" and \"props.ini\".\n#   The first 4 option in CMD are derived from deamon.sh, all other options are derived from the props.ini file.\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM centos:7\n# ###############################################################\n#  General information\n# ###############################################################\nLABEL com.nabisoft.sapcc.version=\"2.12.0.1\"\nLABEL com.nabisoft.sapcc.sapjvm.version=\"8.1.055\"\nLABEL com.nabisoft.sapcc.vendor=\"Nabi Zamani\"\nLABEL com.nabisoft.sapcc.name=\"SAP Cloud Connector\"\n# ###############################################################\n#  Upgrade + install dependencies\n# ###############################################################\n# RUN yum -y upgrade\nRUN yum -y install initscripts which unzip wget net-tools less\n# ###############################################################\n#  Install dependencies and the SAP packages\n# ###############################################################\n#  HINT:\n#  In case automated download fails (see wget below) just download sapjvm + sapcc manually\n#  and put the downloaded files into a folder \"sapdownloads\" on the same level\n#  as this Dockerfile. Then pass them to the container by uncommenting the\n#  following command (then retry the next steps) + remove the 2 wget from RUN\n#  + adapt the zip filename and the 2 rpm filenames under RUN below:\n# COPY sapdownloads /tmp/sapdownloads/\nWORKDIR /tmp/sapdownloads\n#  download sapcc and sapjvm + unzip sapcc + install sapjvm and then install sapcc\n#  ATTENTION:\n#  This automated download automatically accepts SAP's End User License Agreement (EULA).\n#  Thus, when using this docker file as is you automatically accept SAP's EULA!\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip \\\n && wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapjvm-8.1.055-linux-x64.rpm \\\n && unzip sapcc-2.12.0.1-linux-x64.zip \\\n && rpm -i sapjvm-8.1.055-linux-x64.rpm \\\n && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#  You could also use Oracle JDK (feel free to skip JCE download + installation)\n# RUN wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.rpm\" && \\\n#     wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip\" && \\\n#     rpm -i jdk-8u202-linux-x64.rpm && \\\n#     unzip jce_policy-8.zip && rm jce_policy-8.zip && cp -v UnlimitedJCEPolicyJDK8/*.jar /usr/java/default/jre/lib/security/ && \\\n#     wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip && \\\n#     unzip sapcc-2.12.0.1-linux-x64.zip && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#  HINT:\n#  In case the downloads fail you might have to update the wget urls.\n#  In such cases please also let me know by opening an issue so that I can update this dockerfile.\n#  Docker is based on PID 1, but service is already started bacause of rpm installation.\n#  Furthermore, we don't want to run the container in a \"--privileged\" container.\n#  Solution: Stop service + start the java process manually (see CMD below).\n#  Hint: changing the shell to bash via chsh is optional.\n# RUN service scc_daemon stop && chsh -s /bin/bash sccadmin\n# ## this is not needed anymore because auto start via rpm fails anyway, so no need to stop\n#    let's just switch to bash (optional)\nRUN chsh -s /bin/bash sccadmin\n#  Recommended: Replace the Default SSL Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/bcd5e113c9164ae8a443325692cd5b12.html\n# # Use a Self-Signed Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/57cb635955224bd58ac917a42bead117.html\n# RUN export JAVA_EXE=/opt/sapjvm_8/bin/java\n# RUN cd /opt/sap/scc/config\n#  get the currenct password\n# RUN /opt/sapjvm_8/bin/java -cp /opt/sap/scc/plugins/com.sap.scc.rt*.jar -Djava.library.path=/opt/sap/scc/auditor com.sap.scc.jni.SecStoreAccess -path /opt/sap/scc/scc_config -p\n#  => current passwd [csW47YRjogt98IZy]\n#  TODO: use the retrieved password via CLI instead of having it hard coded here:\n# RUN /opt/sapjvm_8/bin/keytool -delete -alias tomcat -keystore ks.store -storepass csW47YRjogt98IZy\n# RUN /opt/sapjvm_8/bin/keytool -keysize 4096 -genkey -v -keyalg RSA -validity 3650 -alias tomcat -keypass csW47YRjogt98IZy -keystore ks.store -storepass csW47YRjogt98IZy -dname \"CN=SCC, OU=YourCompany, O=YourCompany\"\n#  expose connector server\nEXPOSE 8443/tcp\nUSER sccadmin\nWORKDIR /opt/sap/scc\n#  finally run sapcc as PID 1\n#  For Oracle JDK use this command:\n# CMD /usr/bin/java \\\n#  SAP JVM\nCMD /opt/sapjvm_8/bin/java -server -XtraceFile=log/vm_@PID_trace.log -XX:+GCHistory -XX:GCHistoryFilename=log/vm_@PID_gc.prf -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -Xms1024m -Xmx1024m -XX:MaxNewSize=512m -XX:NewSize=512m -XX:+UseConcMarkSweepGC -XX:TargetSurvivorRatio=85 -XX:SurvivorRatio=6 -XX:MaxDirectMemorySize=2G -Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester -Dosgi.requiredJavaVersion=1.6 -Dosgi.install.area=. -DuseNaming=osgi -Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false -Dcom.sap.core.process=ljs_node -Declipse.ignoreApp=true -Dosgi.noShutdown=true -Dosgi.framework.activeThreadType=normal -Dosgi.embedded.cleanupOnSave=true -Dosgi.usesLimit=30 -Djava.awt.headless=true -Dio.netty.recycler.maxCapacity.default=256 -jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n# \t-Xdebug \\\n# \t-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n \\\n# \t-console\n# CMD [\"/opt/sapjvm_8/bin/java\",\"-server\",\"-XtraceFile=log/vm_@PID_trace.log\",\"-XX:+GCHistory\",\"-XX:GCHistoryFilename=log/vm_@PID_gc.prf\",\"-XX:+HeapDumpOnOutOfMemoryError\",\"-XX:+DisableExplicitGC\",\"-Xms1024m\",\"-Xmx1024m\",\"-XX:MaxNewSize=512m\",\"-XX:NewSize=512m\",\"-XX:+UseConcMarkSweepGC\",\"-XX:TargetSurvivorRatio=85\",\"-XX:SurvivorRatio=6\",\"-XX:MaxDirectMemorySize=2G\",\"-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester\",\"-Dosgi.requiredJavaVersion=1.6\",\"-Dosgi.install.area=.\",\"-DuseNaming=osgi\",\"-Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false\",\"-Dcom.sap.core.process=ljs_node\",\"-Declipse.ignoreApp=true\",\"-Dosgi.noShutdown=true\",\"-Dosgi.framework.activeThreadType=normal\",\"-Dosgi.embedded.cleanupOnSave=true\",\"-Dosgi.usesLimit=30\",\"-Djava.awt.headless=true\",\"-Dio.netty.recycler.maxCapacity.default=256\",\"-jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\"]\n# HINT:\n#  The CMD above is basically derived from the SAPCC \"portable\" archives which can be\n#  downloaded from https://tools.hana.ondemand.com/#cloud, i.e. sapcc-2.12.0.1-windows-x64.zip, sapcc-2.12.0.1-linux-x64.tar.gz, sapcc-2.12.0.1-macosx-x64.tar.gz\n#  To verify this, simply extract any of these archives and check the files \"deamon.sh\" and \"props.ini\".\n#  The first 4 option in CMD are derived from deamon.sh, all other options are derived from the props.ini file.\n","injectedSmells":[],"originalDockerfileHash":"5a10448b065d6b02d69a74a92de43b13","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM centos:7\n#  ###############################################################\n#   General information\n#  ###############################################################\nLABEL com.nabisoft.sapcc.version=\"2.12.0.1\"\nLABEL com.nabisoft.sapcc.sapjvm.version=\"8.1.055\"\nLABEL com.nabisoft.sapcc.vendor=\"Nabi Zamani\"\nLABEL com.nabisoft.sapcc.name=\"SAP Cloud Connector\"\n#  ###############################################################\n#   Upgrade + install dependencies\n#  ###############################################################\n#  RUN yum -y upgrade\nRUN yum -y install initscripts which unzip wget net-tools less\n#  ###############################################################\n#   Install dependencies and the SAP packages\n#  ###############################################################\n#   HINT:\n#   In case automated download fails (see wget below) just download sapjvm + sapcc manually\n#   and put the downloaded files into a folder \"sapdownloads\" on the same level\n#   as this Dockerfile. Then pass them to the container by uncommenting the\n#   following command (then retry the next steps) + remove the 2 wget from RUN\n#   + adapt the zip filename and the 2 rpm filenames under RUN below:\n#  COPY sapdownloads /tmp/sapdownloads/\nWORKDIR /tmp/sapdownloads\n#   download sapcc and sapjvm + unzip sapcc + install sapjvm and then install sapcc\n#   ATTENTION:\n#   This automated download automatically accepts SAP's End User License Agreement (EULA).\n#   Thus, when using this docker file as is you automatically accept SAP's EULA!\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip \\\n && wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapjvm-8.1.055-linux-x64.rpm \\\n && unzip sapcc-2.12.0.1-linux-x64.zip \\\n && rpm -i sapjvm-8.1.055-linux-x64.rpm \\\n && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#   You could also use Oracle JDK (feel free to skip JCE download + installation)\n#  RUN wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.rpm\" && \\\n#      wget --no-check-certificate --no-cookies --header \"Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;\" -S \"http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip\" && \\\n#      rpm -i jdk-8u202-linux-x64.rpm && \\\n#      unzip jce_policy-8.zip && rm jce_policy-8.zip && cp -v UnlimitedJCEPolicyJDK8/*.jar /usr/java/default/jre/lib/security/ && \\\n#      wget --no-check-certificate --no-cookies --header \"Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt; path=/;\" -S https://tools.hana.ondemand.com/additional/sapcc-2.12.0.1-linux-x64.zip && \\\n#      unzip sapcc-2.12.0.1-linux-x64.zip && rpm -i com.sap.scc-ui-2.12.0-15.x86_64.rpm\n#   HINT:\n#   In case the downloads fail you might have to update the wget urls.\n#   In such cases please also let me know by opening an issue so that I can update this dockerfile.\n#   Docker is based on PID 1, but service is already started bacause of rpm installation.\n#   Furthermore, we don't want to run the container in a \"--privileged\" container.\n#   Solution: Stop service + start the java process manually (see CMD below).\n#   Hint: changing the shell to bash via chsh is optional.\n#  RUN service scc_daemon stop && chsh -s /bin/bash sccadmin\n#  ## this is not needed anymore because auto start via rpm fails anyway, so no need to stop\n#     let's just switch to bash (optional)\nRUN chsh -s /bin/bash sccadmin\n#   Recommended: Replace the Default SSL Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/bcd5e113c9164ae8a443325692cd5b12.html\n#  # Use a Self-Signed Certificate ==> https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/57cb635955224bd58ac917a42bead117.html\n#  RUN export JAVA_EXE=/opt/sapjvm_8/bin/java\n#  RUN cd /opt/sap/scc/config\n#   get the currenct password\n#  RUN /opt/sapjvm_8/bin/java -cp /opt/sap/scc/plugins/com.sap.scc.rt*.jar -Djava.library.path=/opt/sap/scc/auditor com.sap.scc.jni.SecStoreAccess -path /opt/sap/scc/scc_config -p\n#   => current passwd [csW47YRjogt98IZy]\n#   TODO: use the retrieved password via CLI instead of having it hard coded here:\n#  RUN /opt/sapjvm_8/bin/keytool -delete -alias tomcat -keystore ks.store -storepass csW47YRjogt98IZy\n#  RUN /opt/sapjvm_8/bin/keytool -keysize 4096 -genkey -v -keyalg RSA -validity 3650 -alias tomcat -keypass csW47YRjogt98IZy -keystore ks.store -storepass csW47YRjogt98IZy -dname \"CN=SCC, OU=YourCompany, O=YourCompany\"\n#   expose connector server\nEXPOSE 8443/tcp\nUSER sccadmin\nWORKDIR /opt/sap/scc\n#   finally run sapcc as PID 1\n#   For Oracle JDK use this command:\n#  CMD /usr/bin/java \\\n#   SAP JVM\nCMD /opt/sapjvm_8/bin/java -server -XtraceFile=log/vm_@PID_trace.log -XX:+GCHistory -XX:GCHistoryFilename=log/vm_@PID_gc.prf -XX:+HeapDumpOnOutOfMemoryError -XX:+DisableExplicitGC -Xms1024m -Xmx1024m -XX:MaxNewSize=512m -XX:NewSize=512m -XX:+UseConcMarkSweepGC -XX:TargetSurvivorRatio=85 -XX:SurvivorRatio=6 -XX:MaxDirectMemorySize=2G -Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester -Dosgi.requiredJavaVersion=1.6 -Dosgi.install.area=. -DuseNaming=osgi -Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false -Dcom.sap.core.process=ljs_node -Declipse.ignoreApp=true -Dosgi.noShutdown=true -Dosgi.framework.activeThreadType=normal -Dosgi.embedded.cleanupOnSave=true -Dosgi.usesLimit=30 -Djava.awt.headless=true -Dio.netty.recycler.maxCapacity.default=256 -jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\n#  \t-Xdebug \\\n#  \t-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n \\\n#  \t-console\n#  CMD [\"/opt/sapjvm_8/bin/java\",\"-server\",\"-XtraceFile=log/vm_@PID_trace.log\",\"-XX:+GCHistory\",\"-XX:GCHistoryFilename=log/vm_@PID_gc.prf\",\"-XX:+HeapDumpOnOutOfMemoryError\",\"-XX:+DisableExplicitGC\",\"-Xms1024m\",\"-Xmx1024m\",\"-XX:MaxNewSize=512m\",\"-XX:NewSize=512m\",\"-XX:+UseConcMarkSweepGC\",\"-XX:TargetSurvivorRatio=85\",\"-XX:SurvivorRatio=6\",\"-XX:MaxDirectMemorySize=2G\",\"-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=com.sap.scc.tomcat.utils.PropertyDigester\",\"-Dosgi.requiredJavaVersion=1.6\",\"-Dosgi.install.area=.\",\"-DuseNaming=osgi\",\"-Dorg.eclipse.equinox.simpleconfigurator.exclusiveInstallation=false\",\"-Dcom.sap.core.process=ljs_node\",\"-Declipse.ignoreApp=true\",\"-Dosgi.noShutdown=true\",\"-Dosgi.framework.activeThreadType=normal\",\"-Dosgi.embedded.cleanupOnSave=true\",\"-Dosgi.usesLimit=30\",\"-Djava.awt.headless=true\",\"-Dio.netty.recycler.maxCapacity.default=256\",\"-jar plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar\"]\n#  HINT:\n#   The CMD above is basically derived from the SAPCC \"portable\" archives which can be\n#   downloaded from https://tools.hana.ondemand.com/#cloud, i.e. sapcc-2.12.0.1-windows-x64.zip, sapcc-2.12.0.1-linux-x64.tar.gz, sapcc-2.12.0.1-macosx-x64.tar.gz\n#   To verify this, simply extract any of these archives and check the files \"deamon.sh\" and \"props.ini\".\n#   The first 4 option in CMD are derived from deamon.sh, all other options are derived from the props.ini file.\n","originalDockerfileUglifiedHash":"4611d20d886135653e7a3ea6aaa36f84","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/67ba028e8dd639c20bbc8fceb05232b5cec1cdeb.dockerfile"}