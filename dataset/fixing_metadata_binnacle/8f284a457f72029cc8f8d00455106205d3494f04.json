{"seed":42494799,"processedDockerfileHash":"6a6ad121243feb9714487098cc0e0c0b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM python:2.7-stretch\n#   Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#   --------------- Start Go Part ---------------\n#   gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.11.4\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='9f7a71d27fef69f654a93e265560c8d9db1a2ca3f1dcdbe5288c46facfde5821' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='b76df430ba8caff197b8558921deef782cdb20b62fa36fa93f81a8c08ab7c8e7' ;;(i386) goRelArch='linux-386' ; goRelSha256='cecd2da1849043237d5f0756a93d601db6798fa3bb27a14563d201088aa415f3' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='1f10146826acd56716b00b9188079af53823ddd79ceb6362e78e2f3aafb370ab' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='4467442dacf89eb94c5d6f9f700204cb360be82db60e6296cc2ef8d0e890cd42' ;;(*) goRelArch='src' ; goRelSha256='4cfd42720a6b1e79a8024895fa6607b69972e8e32446df76d6ce79801bbadb15' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   --------------- End Go Part ---------------\n#   --------------- Start Java Part ---------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#   add a simple script that can auto-detect the appropriate JAVA_HOME value\n#   based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#   do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\nENV JAVA_VERSION=\"8u181\"\nENV JAVA_DEBIAN_VERSION=\"8u181-b13-2~deb9u1\"\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install --no-install-recommends openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n#   see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n#   --------------- End Java Part ---------------\n#   --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\nCOPY docker/settings-docker.xml /usr/share/maven/ref/\n#   --------------- End Maven Part ---------------\n#   --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#   install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#   --------------- End C++ Part ---------------\n#   --------------- Start Ruby Part ---------------\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#   --------------- End Ruby Part ---------------\n#   install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv==20.21.0 grpcio==1.53.0\n#   Directory for the binary\nWORKDIR /app\n#   Copy gaia binary into docker image\nCOPY gaia-linux-amd64 /app\n#   Fix permissions & setup known hosts file for ssh agent.\nRUN chmod +x ./gaia-linux-amd64 \\\n && mkdir -p /root/.ssh \\\n && touch /root/.ssh/known_hosts \\\n && chmod 600 /root/.ssh\n#   Set homepath as volume\nVOLUME [ \"${GAIA_HOMEPATH}\" ]\n#   Expose port\nEXPOSE ${GAIA_PORT}\n#   Copy entry point script\nCOPY docker/docker-entrypoint.sh /usr/local/bin/\n#   Start gaia\nENTRYPOINT [\"docker-entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:2.7-stretch\n#  Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#  --------------- Start Go Part ---------------\n#  gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.11.4\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='9f7a71d27fef69f654a93e265560c8d9db1a2ca3f1dcdbe5288c46facfde5821' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='b76df430ba8caff197b8558921deef782cdb20b62fa36fa93f81a8c08ab7c8e7' ;;(i386) goRelArch='linux-386' ; goRelSha256='cecd2da1849043237d5f0756a93d601db6798fa3bb27a14563d201088aa415f3' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='1f10146826acd56716b00b9188079af53823ddd79ceb6362e78e2f3aafb370ab' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='4467442dacf89eb94c5d6f9f700204cb360be82db60e6296cc2ef8d0e890cd42' ;;(*) goRelArch='src' ; goRelSha256='4cfd42720a6b1e79a8024895fa6607b69972e8e32446df76d6ce79801bbadb15' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  --------------- End Go Part ---------------\n#  --------------- Start Java Part ---------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#  add a simple script that can auto-detect the appropriate JAVA_HOME value\n#  based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#  do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\nENV JAVA_VERSION=\"8u181\"\nENV JAVA_DEBIAN_VERSION=\"8u181-b13-2~deb9u1\"\n#  see https://bugs.debian.org/775775\n#  and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install --no-install-recommends openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n#  see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n#  --------------- End Java Part ---------------\n#  --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\nCOPY docker/settings-docker.xml /usr/share/maven/ref/\n#  --------------- End Maven Part ---------------\n#  --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#  install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#  --------------- End C++ Part ---------------\n#  --------------- Start Ruby Part ---------------\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#  path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#  adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#  (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#  --------------- End Ruby Part ---------------\n#  install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv grpcio\n#  Directory for the binary\nWORKDIR /app\n#  Copy gaia binary into docker image\nCOPY gaia-linux-amd64 /app\n#  Fix permissions & setup known hosts file for ssh agent.\nRUN chmod +x ./gaia-linux-amd64 \\\n && mkdir -p /root/.ssh \\\n && touch /root/.ssh/known_hosts \\\n && chmod 600 /root/.ssh\n#  Set homepath as volume\nVOLUME [ \"${GAIA_HOMEPATH}\" ]\n#  Expose port\nEXPOSE ${GAIA_PORT}\n#  Copy entry point script\nCOPY docker/docker-entrypoint.sh /usr/local/bin/\n#  Start gaia\nENTRYPOINT [\"docker-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"25b3b69b672978bc15a50a1f02886b4f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:2.7-stretch\n#   Version and other variables which can be changed.\nENV GAIA_PORT=\"8080\" \\\n    GAIA_WORKER=\"2\" \\\n    GAIA_HOMEPATH=\"/data\"\n#   --------------- Start Go Part ---------------\n#   gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.11.4\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='9f7a71d27fef69f654a93e265560c8d9db1a2ca3f1dcdbe5288c46facfde5821' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='b76df430ba8caff197b8558921deef782cdb20b62fa36fa93f81a8c08ab7c8e7' ;;(i386) goRelArch='linux-386' ; goRelSha256='cecd2da1849043237d5f0756a93d601db6798fa3bb27a14563d201088aa415f3' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='1f10146826acd56716b00b9188079af53823ddd79ceb6362e78e2f3aafb370ab' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='4467442dacf89eb94c5d6f9f700204cb360be82db60e6296cc2ef8d0e890cd42' ;;(*) goRelArch='src' ; goRelSha256='4cfd42720a6b1e79a8024895fa6607b69972e8e32446df76d6ce79801bbadb15' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   --------------- End Go Part ---------------\n#   --------------- Start Java Part ---------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#   add a simple script that can auto-detect the appropriate JAVA_HOME value\n#   based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#   do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\nENV JAVA_VERSION=\"8u181\"\nENV JAVA_DEBIAN_VERSION=\"8u181-b13-2~deb9u1\"\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install --no-install-recommends openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n#   see CA_CERTIFICATES_JAVA_VERSION notes above\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\n#   --------------- End Java Part ---------------\n#   --------------- Start Maven Part ---------------\nARG MAVEN_VERSION=3.5.4\nARG USER_HOME_DIR=\"/root\"\nARG SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d\nARG BASE_URL=https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries\nRUN mkdir -p /usr/share/maven /usr/share/maven/ref \\\n && curl -fsSL -o /tmp/apache-maven.tar.gz ${BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \\\n && echo \"${SHA} /tmp/apache-maven.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \\\n && rm -f /tmp/apache-maven.tar.gz \\\n && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV MAVEN_CONFIG=\"\\\"$USER_HOME_DIR/.m2\\\"\"\nCOPY docker/settings-docker.xml /usr/share/maven/ref/\n#   --------------- End Maven Part ---------------\n#   --------------- Start C++ Part ---------------\nRUN apt-get update \\\n && apt-get install build-essential autoconf git pkg-config automake libtool curl make g++ unzip -y \\\n && apt-get clean\n#   install protobuf first, then grpc\nENV GRPC_RELEASE_TAG=\"v1.16.x\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc \\\n && cd /var/local/git/grpc \\\n && git submodule update --init \\\n && echo \"--- installing protobuf ---\" \\\n && cd third_party/protobuf \\\n && ./autogen.sh \\\n && ./configure --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig \\\n && echo \"--- installing grpc ---\" \\\n && cd /var/local/git/grpc \\\n && make -j$( nproc ;) \\\n && make install \\\n && make clean \\\n && ldconfig\n#   --------------- End C++ Part ---------------\n#   --------------- Start Ruby Part ---------------\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.3\"\nENV RUBY_DOWNLOAD_SHA256=\"1cc9d0359a8ea35fc6111ec830d12e60168f3b9b305a3c2578357d360fcf306f\"\nENV RUBYGEMS_VERSION=\"3.0.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby -e 'exit(Gem::Version.create(ENV[\"RUBYGEMS_VERSION\"]) > Gem::Version.create(Gem::VERSION))' \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && rm -r /root/.gem/ \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#   --------------- End Ruby Part ---------------\n#   install additional deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install virtualenv grpcio\n#   Directory for the binary\nWORKDIR /app\n#   Copy gaia binary into docker image\nCOPY gaia-linux-amd64 /app\n#   Fix permissions & setup known hosts file for ssh agent.\nRUN chmod +x ./gaia-linux-amd64 \\\n && mkdir -p /root/.ssh \\\n && touch /root/.ssh/known_hosts \\\n && chmod 600 /root/.ssh\n#   Set homepath as volume\nVOLUME [ \"${GAIA_HOMEPATH}\" ]\n#   Expose port\nEXPOSE ${GAIA_PORT}\n#   Copy entry point script\nCOPY docker/docker-entrypoint.sh /usr/local/bin/\n#   Start gaia\nENTRYPOINT [\"docker-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"d55d1d4fb50f3228acc12fbc8ebe5101","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8f284a457f72029cc8f8d00455106205d3494f04.dockerfile"}