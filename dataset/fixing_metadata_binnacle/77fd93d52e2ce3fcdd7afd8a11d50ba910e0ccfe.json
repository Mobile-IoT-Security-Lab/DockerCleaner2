{"seed":741200068,"processedDockerfileHash":"0f705716e68da51556ed62760e0679a3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\nFROM ubuntu:latest\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=2.6.0 build-essential=12.9ubuntu3 bzip2=1.0.8-5build1 ca-certificates=20230311 curl=7.88.1-7ubuntu1 emacs=1:28.2+1-13ubuntu3 fonts-liberation=1:1.07.4-11 g++=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 inkscape=1.2.2-2ubuntu1 jed=1:0.99.20~pre.178+dfsg-1 libav-tools libcupti-dev=11.8.87~11.8.0-2ubuntu1 libsm6=2:1.2.3-1build2 libxext-dev=2:1.3.4-1build1 libxrender1=1:0.9.10-1.1 lmodern=2.005-1 locales=2.37-0ubuntu2 lsb-release=12.0-1ubuntu1 openssh-client=1:9.0p1-1ubuntu8 pandoc=2.17.1.1-1.1ubuntu1 pkg-config=1.8.1-1ubuntu2 python python-dev sudo=1.9.13p1-1ubuntu2 unzip=6.0-27ubuntu1 vim=2:9.0.1000-4ubuntu2 wget=1.21.3-1ubuntu1 zip=3.0-13 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Install ksonnet\nRUN wget --quiet https://github.com/ksonnet/ksonnet/releases/download/v0.8.0/ks_0.8.0_linux_amd64.tar.gz \\\n && tar -zvxf ks_0.8.0_linux_amd64.tar.gz \\\n && mv ks_0.8.0_linux_amd64/ks /usr/local/bin/ks \\\n && chmod +x /usr/local/bin/ks\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.31.*' \\\n && conda clean -tipsy\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Install CUDA Profile Tools and other python packages\nRUN pip install Pillow==9.5.0 h5py==3.8.0 ipykernel==6.22.0 matplotlib==3.7.1 numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 kubernetes==26.1.0 grpcio==1.53.0 ktext==0.40 annoy==1.17.2 nltk==3.8.1 pydot==1.4.2 pydot-ng==2.0.0 graphviz==0.20.1 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.22*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Install graphviz package\nRUN apt-get update \\\n && apt-get install --no-install-recommends graphviz=2.42.2-7build3 -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Python 3 Tensorflow without GPU support\nRUN pip install tf-nightly==2.13.0.dev20230416 --quiet --no-cache-dir\n#   Install Oracle Java 8\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.21.3-1ubuntu1 unzip=6.0-27ubuntu1 python-pip python-sklearn python-pandas python-numpy python-matplotlib software-properties-common=0.99.35 python-software-properties -y \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update -q \\\n && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y oracle-java8-installer \\\n && apt-get clean\n#   Install H2O.3\nRUN pip install requests==2.28.2 tabulate==0.9.0 scikit-learn==1.2.2 colorama==0.4.6 future==0.18.3 --no-cache-dir\nRUN pip --no-cache-dir --trusted-host h2o-release.s3.amazonaws.com install -f http://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html h2o\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nSHELL [\"/bin/bash\", \"-c\"]\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard==0.2.0\n#   Create a conda environment for Python 2. We want to include as many of the\n#   packages from our root environment as we reasonably can, so we explicitly\n#   list that environment, then include everything unless it is Conda (which\n#   can only be in the root environment), Jupyterhub (which requires Python 3),\n#   or Python itself. We also want to include the pip packages, but we cannot\n#   install those via conda, so we list them, drop any conda packages, and\n#   then install them via pip. We do this on a best-effort basis, so if any\n#   packages from the Python 3 environment cannot be installed with Python 2,\n#   then we just skip them.\nRUN conda_packages=$( conda list -e | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_packages=$( pip --no-cache-dir list --format=freeze | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_only_packages=$( comm -23 <(echo \"${pip_packages}\" ) <(echo \"${conda_packages}\" ) ;) \\\n && conda create -n ipykernel_py2 python=2 --file <(echo \"${conda_packages}\" | grep -v conda | grep -v python | grep -v jupyterhub ) \\\n && source activate ipykernel_py2 \\\n && python -m ipykernel install --user \\\n && echo \"${pip_only_packages}\" | xargs -n 1 -I \"{}\" /bin/bash -c 'pip install --no-cache-dir {} || true' \\\n && pip install tensorflow-transform==1.13.0 --no-cache-dir \\\n && source deactivate\n#   Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/ \\\n && chown -R $NB_USER /home/$NB_USER/ \\\n && chmod a+rx /usr/local/bin/*\nUSER $NB_USER\nENV PATH=\"/home/jovyan/bin:$PATH\"\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) Jupyter Development Team.\n#  Distributed under the terms of the Modified BSD License.\nFROM ubuntu:latest\nUSER root\n#  Install all OS dependencies for notebook server that starts but lacks all\n#  features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https build-essential bzip2 ca-certificates curl emacs fonts-liberation g++ git inkscape jed libav-tools libcupti-dev libsm6 libxext-dev libxrender1 lmodern locales lsb-release openssh-client pandoc pkg-config python python-dev sudo unzip vim wget zip zlib1g-dev -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#  Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#  Install ksonnet\nRUN wget --quiet https://github.com/ksonnet/ksonnet/releases/download/v0.8.0/ks_0.8.0_linux_amd64.tar.gz \\\n && tar -zvxf ks_0.8.0_linux_amd64.tar.gz \\\n && mv ks_0.8.0_linux_amd64/ks /usr/local/bin/ks \\\n && chmod +x /usr/local/bin/ks\n#  Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\n#  Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#  Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#  Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.31.*' \\\n && conda clean -tipsy\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#  Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#  Install CUDA Profile Tools and other python packages\nRUN pip install Pillow h5py ipykernel matplotlib numpy scipy sklearn kubernetes grpcio ktext annoy nltk pydot pydot-ng graphviz --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Install Python 3 packages\n#  Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#  use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.22*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#  Install graphviz package\nRUN apt-get update \\\n && apt-get install --no-install-recommends graphviz -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Python 3 Tensorflow without GPU support\nRUN pip install tf-nightly --quiet --no-cache-dir\n#  Install Oracle Java 8\nRUN apt-get update \\\n && apt-get install wget unzip python-pip python-sklearn python-pandas python-numpy python-matplotlib software-properties-common python-software-properties -y \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update -q \\\n && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y oracle-java8-installer \\\n && apt-get clean\n#  Install H2O.3\nRUN pip install requests tabulate scikit-learn colorama future --no-cache-dir\nRUN pip --no-cache-dir --trusted-host h2o-release.s3.amazonaws.com install -f http://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html h2o\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#  Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nSHELL [\"/bin/bash\", \"-c\"]\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\n#  Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard\n#  Create a conda environment for Python 2. We want to include as many of the\n#  packages from our root environment as we reasonably can, so we explicitly\n#  list that environment, then include everything unless it is Conda (which\n#  can only be in the root environment), Jupyterhub (which requires Python 3),\n#  or Python itself. We also want to include the pip packages, but we cannot\n#  install those via conda, so we list them, drop any conda packages, and\n#  then install them via pip. We do this on a best-effort basis, so if any\n#  packages from the Python 3 environment cannot be installed with Python 2,\n#  then we just skip them.\nRUN conda_packages=$( conda list -e | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_packages=$( pip --no-cache-dir list --format=freeze | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_only_packages=$( comm -23 <(echo \"${pip_packages}\" ) <(echo \"${conda_packages}\" ) ;) \\\n && conda create -n ipykernel_py2 python=2 --file <(echo \"${conda_packages}\" | grep -v conda | grep -v python | grep -v jupyterhub ) \\\n && source activate ipykernel_py2 \\\n && python -m ipykernel install --user \\\n && echo \"${pip_only_packages}\" | xargs -n 1 -I \"{}\" /bin/bash -c 'pip install --no-cache-dir {} || true' \\\n && pip install tensorflow-transform --no-cache-dir \\\n && source deactivate\n#  Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/ \\\n && chown -R $NB_USER /home/$NB_USER/ \\\n && chmod a+rx /usr/local/bin/*\nUSER $NB_USER\nENV PATH=\"/home/jovyan/bin:$PATH\"\n","injectedSmells":[],"originalDockerfileHash":"2b8b0393a8a88974ae9d980c2c2dd0c4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\nFROM ubuntu:latest\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https build-essential bzip2 ca-certificates curl emacs fonts-liberation g++ git inkscape jed libav-tools libcupti-dev libsm6 libxext-dev libxrender1 lmodern locales lsb-release openssh-client pandoc pkg-config python python-dev sudo unzip vim wget zip zlib1g-dev -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Install ksonnet\nRUN wget --quiet https://github.com/ksonnet/ksonnet/releases/download/v0.8.0/ks_0.8.0_linux_amd64.tar.gz \\\n && tar -zvxf ks_0.8.0_linux_amd64.tar.gz \\\n && mv ks_0.8.0_linux_amd64/ks /usr/local/bin/ks \\\n && chmod +x /usr/local/bin/ks\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.8.1' 'jupyterlab=0.31.*' \\\n && conda clean -tipsy\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Install CUDA Profile Tools and other python packages\nRUN pip install Pillow h5py ipykernel matplotlib numpy scipy sklearn kubernetes grpcio ktext annoy nltk pydot pydot-ng graphviz --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.22*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Install graphviz package\nRUN apt-get update \\\n && apt-get install --no-install-recommends graphviz -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Python 3 Tensorflow without GPU support\nRUN pip install tf-nightly --quiet --no-cache-dir\n#   Install Oracle Java 8\nRUN apt-get update \\\n && apt-get install wget unzip python-pip python-sklearn python-pandas python-numpy python-matplotlib software-properties-common python-software-properties -y \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update -q \\\n && echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y oracle-java8-installer \\\n && apt-get clean\n#   Install H2O.3\nRUN pip install requests tabulate scikit-learn colorama future --no-cache-dir\nRUN pip --no-cache-dir --trusted-host h2o-release.s3.amazonaws.com install -f http://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html h2o\nENV CLOUD_SDK_VERSION=\"168.0.0\"\nRUN export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" > /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update \\\n && apt-get install kubectl google-cloud-sdk=${CLOUD_SDK_VERSION}-0 -y \\\n && gcloud config set core/disable_usage_reporting true \\\n && gcloud config set component_manager/disable_update_check true \\\n && gcloud config set metrics/environment github_docker_image\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\nRUN curl -L -o bazel.sh https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-installer-linux-x86_64.sh \\\n && chmod a+x ./bazel.sh \\\n && ./bazel.sh \\\n && rm ./bazel.sh\nSHELL [\"/bin/bash\", \"-c\"]\nRUN git clone https://github.com/tensorflow/models.git /home/$NB_USER/tensorflow-models \\\n && git clone https://github.com/tensorflow/benchmarks.git /home/$NB_USER/tensorflow-benchmarks\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN pip install jupyter-tensorboard\n#   Create a conda environment for Python 2. We want to include as many of the\n#   packages from our root environment as we reasonably can, so we explicitly\n#   list that environment, then include everything unless it is Conda (which\n#   can only be in the root environment), Jupyterhub (which requires Python 3),\n#   or Python itself. We also want to include the pip packages, but we cannot\n#   install those via conda, so we list them, drop any conda packages, and\n#   then install them via pip. We do this on a best-effort basis, so if any\n#   packages from the Python 3 environment cannot be installed with Python 2,\n#   then we just skip them.\nRUN conda_packages=$( conda list -e | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_packages=$( pip --no-cache-dir list --format=freeze | cut -d '=' -f 1 | grep -v '#' | sort ;) \\\n && pip_only_packages=$( comm -23 <(echo \"${pip_packages}\" ) <(echo \"${conda_packages}\" ) ;) \\\n && conda create -n ipykernel_py2 python=2 --file <(echo \"${conda_packages}\" | grep -v conda | grep -v python | grep -v jupyterhub ) \\\n && source activate ipykernel_py2 \\\n && python -m ipykernel install --user \\\n && echo \"${pip_only_packages}\" | xargs -n 1 -I \"{}\" /bin/bash -c 'pip install --no-cache-dir {} || true' \\\n && pip install tensorflow-transform --no-cache-dir \\\n && source deactivate\n#   Add local files as late as possible to avoid cache busting\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/ \\\n && chown -R $NB_USER /home/$NB_USER/ \\\n && chmod a+rx /usr/local/bin/*\nUSER $NB_USER\nENV PATH=\"/home/jovyan/bin:$PATH\"\n","originalDockerfileUglifiedHash":"318206b1519ae1ee2e06bcfe8b86eac7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/77fd93d52e2ce3fcdd7afd8a11d50ba910e0ccfe.dockerfile"}