{"seed":3995896307,"processedDockerfileHash":"b3f8927a4468cd0b52b5dff787ab7762","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"FROM debian:stretch\nENV PYTHONIOENCODING=\"UTF-8\"\n#   Pypy is installed from a package manager because it takes so long to build.\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.3 libcurl4-openssl-dev=7.52.1-5+deb9u16 libffi-dev=3.2.1-6 tk-dev=8.6.0+9 xz-utils=5.2.2-1.2+deb9u1 curl=7.52.1-5+deb9u16 lsb-release=9.20161125 git=1:2.11.0-3+deb9u7 libmemcached-dev=1.0.18-4.1 make=4.1-9.1 liblzma-dev=5.2.2-1.2+deb9u1 libreadline-dev=7.0-3 libbz2-dev=1.0.6-8.1 llvm=1:3.8-36 libncurses5-dev=6.0+20161126-1+deb9u2 libsqlite3-dev=3.16.2-5+deb9u3 wget=1.18-5+deb9u3 pypy=5.6.0+dfsg-4 python-openssl=16.2.0-1 libncursesw5-dev=6.0+20161126-1+deb9u2 zlib1g-dev=1:1.2.8.dfsg-5+deb9u1 pkg-config=0.29-4+b1 libssl1.0-dev=1.0.2u-1~deb9u7 -y\n#   Setup variables. Even though changing these may cause unnecessary invalidation of\n#   unrelated elements, grouping them together makes the Dockerfile read better.\nENV PROVISIONING=\"/provisioning\"\nARG CELERY_USER=developer\n#   Check for mandatory build arguments\nRUN : \"${CELERY_USER:?CELERY_USER build argument needs to be set and non-empty.}\"\nENV HOME=\"/home/$CELERY_USER\"\nENV PATH=\"$HOME/.pyenv/bin:$PATH\"\n#   Copy and run setup scripts\nWORKDIR $PROVISIONING\nCOPY docker/scripts/install-couchbase.sh .\n#   Scripts will lose thier executable flags on copy. To avoid the extra instructions\n#   we call the shell directly.\nRUN sh install-couchbase.sh\nCOPY docker/scripts/create-linux-user.sh .\nRUN sh create-linux-user.sh\n#   Swap to the celery user so packages and celery are not installed as root.\nUSER $CELERY_USER\nCOPY docker/scripts/install-pyenv.sh .\nRUN sh install-pyenv.sh\n#   Install celery\nWORKDIR $HOME\nCOPY --chown=1000:1000 requirements $HOME/requirements\nCOPY --chown=1000:1000 docker/entrypoint /entrypoint\nRUN chmod gu+x /entrypoint\n#   Define the local pyenvs\nRUN pyenv local python3.6 python3.5 python3.4 python2.7 python3.7\nRUN pyenv exec python2.7 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.4 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.5 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.6 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.7 -m pip install --upgrade pip setuptools\n#   Setup one celery environment for basic development use\nRUN pyenv exec python3.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.6 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.5 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.4 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python2.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt\nCOPY --chown=1000:1000 . $HOME/celery\nWORKDIR $HOME/celery\n#   Setup the entrypoint, this ensures pyenv is initialized when a container is started\n#   and that any compiled files from earlier steps or from moutns are removed to avoid\n#   py.test failing with an ImportMismatchError\nENTRYPOINT [\"/entrypoint\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch\nENV PYTHONIOENCODING=\"UTF-8\"\n#  Pypy is installed from a package manager because it takes so long to build.\nRUN apt-get update \\\n && apt-get install build-essential libcurl4-openssl-dev libffi-dev tk-dev xz-utils curl lsb-release git libmemcached-dev make liblzma-dev libreadline-dev libbz2-dev llvm libncurses5-dev libsqlite3-dev wget pypy python-openssl libncursesw5-dev zlib1g-dev pkg-config libssl1.0-dev -y\n#  Setup variables. Even though changing these may cause unnecessary invalidation of\n#  unrelated elements, grouping them together makes the Dockerfile read better.\nENV PROVISIONING=\"/provisioning\"\nARG CELERY_USER=developer\n#  Check for mandatory build arguments\nRUN : \"${CELERY_USER:?CELERY_USER build argument needs to be set and non-empty.}\"\nENV HOME=\"/home/$CELERY_USER\"\nENV PATH=\"$HOME/.pyenv/bin:$PATH\"\n#  Copy and run setup scripts\nWORKDIR $PROVISIONING\nCOPY docker/scripts/install-couchbase.sh .\n#  Scripts will lose thier executable flags on copy. To avoid the extra instructions\n#  we call the shell directly.\nRUN sh install-couchbase.sh\nCOPY docker/scripts/create-linux-user.sh .\nRUN sh create-linux-user.sh\n#  Swap to the celery user so packages and celery are not installed as root.\nUSER $CELERY_USER\nCOPY docker/scripts/install-pyenv.sh .\nRUN sh install-pyenv.sh\n#  Install celery\nWORKDIR $HOME\nCOPY --chown=1000:1000 requirements $HOME/requirements\nCOPY --chown=1000:1000 docker/entrypoint /entrypoint\nRUN chmod gu+x /entrypoint\n#  Define the local pyenvs\nRUN pyenv local python3.6 python3.5 python3.4 python2.7 python3.7\nRUN pyenv exec python2.7 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.4 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.5 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.6 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.7 -m pip install --upgrade pip setuptools\n#  Setup one celery environment for basic development use\nRUN pyenv exec python3.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.6 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.5 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.4 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python2.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt\nCOPY --chown=1000:1000 . $HOME/celery\nWORKDIR $HOME/celery\n#  Setup the entrypoint, this ensures pyenv is initialized when a container is started\n#  and that any compiled files from earlier steps or from moutns are removed to avoid\n#  py.test failing with an ImportMismatchError\nENTRYPOINT [\"/entrypoint\"]\n","injectedSmells":[],"originalDockerfileHash":"ab726c5e02d84ebd9248d5a2ee2c89f3","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch\nENV PYTHONIOENCODING=\"UTF-8\"\n#   Pypy is installed from a package manager because it takes so long to build.\nRUN apt-get update \\\n && apt-get install build-essential libcurl4-openssl-dev libffi-dev tk-dev xz-utils curl lsb-release git libmemcached-dev make liblzma-dev libreadline-dev libbz2-dev llvm libncurses5-dev libsqlite3-dev wget pypy python-openssl libncursesw5-dev zlib1g-dev pkg-config libssl1.0-dev -y\n#   Setup variables. Even though changing these may cause unnecessary invalidation of\n#   unrelated elements, grouping them together makes the Dockerfile read better.\nENV PROVISIONING=\"/provisioning\"\nARG CELERY_USER=developer\n#   Check for mandatory build arguments\nRUN : \"${CELERY_USER:?CELERY_USER build argument needs to be set and non-empty.}\"\nENV HOME=\"/home/$CELERY_USER\"\nENV PATH=\"$HOME/.pyenv/bin:$PATH\"\n#   Copy and run setup scripts\nWORKDIR $PROVISIONING\nCOPY docker/scripts/install-couchbase.sh .\n#   Scripts will lose thier executable flags on copy. To avoid the extra instructions\n#   we call the shell directly.\nRUN sh install-couchbase.sh\nCOPY docker/scripts/create-linux-user.sh .\nRUN sh create-linux-user.sh\n#   Swap to the celery user so packages and celery are not installed as root.\nUSER $CELERY_USER\nCOPY docker/scripts/install-pyenv.sh .\nRUN sh install-pyenv.sh\n#   Install celery\nWORKDIR $HOME\nCOPY --chown=1000:1000 requirements $HOME/requirements\nCOPY --chown=1000:1000 docker/entrypoint /entrypoint\nRUN chmod gu+x /entrypoint\n#   Define the local pyenvs\nRUN pyenv local python3.6 python3.5 python3.4 python2.7 python3.7\nRUN pyenv exec python2.7 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.4 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.5 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.6 -m pip install --upgrade pip setuptools \\\n && pyenv exec python3.7 -m pip install --upgrade pip setuptools\n#   Setup one celery environment for basic development use\nRUN pyenv exec python3.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.6 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.5 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python3.4 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt \\\n && pyenv exec python2.7 -m pip install -r requirements/default.txt -r requirements/test.txt -r requirements/test-ci-default.txt -r requirements/docs.txt -r requirements/test-integration.txt -r requirements/pkgutils.txt\nCOPY --chown=1000:1000 . $HOME/celery\nWORKDIR $HOME/celery\n#   Setup the entrypoint, this ensures pyenv is initialized when a container is started\n#   and that any compiled files from earlier steps or from moutns are removed to avoid\n#   py.test failing with an ImportMismatchError\nENTRYPOINT [\"/entrypoint\"]\n","originalDockerfileUglifiedHash":"3be9a5f6ef0b929b3b20dbd550f1833f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3b093846c68c285d421c14f811368e3c24ac0223.dockerfile"}