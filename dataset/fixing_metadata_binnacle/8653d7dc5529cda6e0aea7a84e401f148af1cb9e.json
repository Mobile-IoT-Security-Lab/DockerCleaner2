{"seed":1135177204,"processedDockerfileHash":"1942949d1c52c126e0d65419a36ce39e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n#   Licensed under the Amazon Software License (the \"License\"). You may not use this file except in compliance with the License.\n#   A copy of the License is located at\n#\n#      http://aws.amazon.com/asl/\n#\n#   or in the \"license\" file accompanying this file.\n#   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.\n#   See the License for the specific language governing permissions and limitations under the License.\nFROM ubuntu:18.04\nENV RUBY_MAJOR=\"2.6\" \\\n    PYTHON_VERSION=\"3.7.2\" \\\n    PHP_VERSION=\"7.3.1\" \\\n    NODE_VERSION=\"10.15.0\" \\\n    NODE_8_VERSION=\"8.11.0\" \\\n    NVM_VERSION=\"0.33.5\" \\\n    GOLANG_VERSION=\"1.11.4\" \\\n    DOTNET_SDK_VERSION=\"2.2.102\" \\\n    DOCKER_VERSION=\"18.09.1\" \\\n    DOCKER_COMPOSE_VERSION=\"1.23.2\"\n#  ****************        Utilities     ********************************************* \nENV DOCKER_BUCKET=\"download.docker.com\" \\\n    DOCKER_CHANNEL=\"stable\" \\\n    DOCKER_SHA256=\"c9959e42b637fb7362899ac1d1aeef2a966fa0ea85631da91f4c4a7a9ec29644\" \\\n    DIND_COMMIT=\"3b5fac462d21ca164b3778647420016315289034\" \\\n    GITVERSION_VERSION=\"4.0.0\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    SRC_DIR=\"/usr/src\"\n#   Install git, SSH, and other utilities\nRUN set -ex \\\n && echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=1.6.14 -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 -y \\\n && apt-add-repository ppa:git-core/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends git=1:2.* -y \\\n && git version \\\n && apt-get install --no-install-recommends openssh-client=1:7.6p1-4ubuntu0.7 -y \\\n && mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H github.com >> ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H bitbucket.org >> ~/.ssh/known_hosts \\\n && chmod 600 ~/.ssh/known_hosts \\\n && apt-get install --no-install-recommends wget=1.19.4-1ubuntu2.2 python3=3.6.7-1~18.04 python3-dev=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-setuptools=39.0.1-2ubuntu0.1 fakeroot=1.22-2ubuntu1 ca-certificates=20211016ubuntu0.18.04.1 jq=1.5+dfsg-2 netbase=5.4 gnupg=2.2.4-1ubuntu1.6 dirmngr=2.2.4-1ubuntu1.6 bzr=2.7.0+bzr6622-10 mercurial=4.5.3-1ubuntu2.2 procps=2:3.3.12-3ubuntu1.2 tar=1.29b-2ubuntu0.4 gzip=1.6-5ubuntu1.2 zip=3.0-11build1 autoconf=2.69-11 automake=1:1.15.1-3ubuntu2 bzip2=1.0.6-8.1ubuntu0.2 file=1:5.32-2ubuntu0.4 g++=4:7.4.0-1ubuntu2.3 gcc=4:7.4.0-1ubuntu2.3 imagemagick=8:6.9.7.4+dfsg-16ubuntu6.15 libbz2-dev=1.0.6-8.1ubuntu0.2 libc6-dev=2.27-3ubuntu1.6 libcurl4-openssl-dev=7.58.0-2ubuntu3.24 libdb-dev=1:5.3.21~exp1ubuntu2 libevent-dev=2.1.8-stable-4build1 libffi-dev=3.2.1-8 libgeoip-dev=1.6.12-1 libglib2.0-dev=2.56.4-0ubuntu0.18.04.9 libjpeg-dev=8c-2ubuntu8 libkrb5-dev=1.16-2ubuntu0.4 liblzma-dev=5.2.2-1.3ubuntu0.1 libmagickcore-dev=8:6.9.7.4+dfsg-16ubuntu6.15 libmagickwand-dev=8:6.9.7.4+dfsg-16ubuntu6.15 libmysqlclient-dev=5.7.41-0ubuntu0.18.04.1 libncurses5-dev=6.1-1ubuntu1.18.04 libpq-dev=10.23-0ubuntu0.18.04.1 libreadline-dev=7.0-3 libsqlite3-dev=3.22.0-1ubuntu0.7 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libtool=2.4.6-2 libwebp-dev=0.6.1-2ubuntu0.18.04.1 libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.8 libxslt1-dev=1.1.29-5ubuntu0.3 libyaml-dev=0.1.7-2ubuntu3 make=4.1-9.1ubuntu1 patch=2.7.6-2ubuntu1.1 xz-utils=5.2.2-1.3ubuntu0.1 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 unzip=6.0-21ubuntu1.2 curl=7.58.0-2ubuntu3.24 e2fsprogs=1.44.1-1ubuntu1.4 iptables=1.6.1-2ubuntu2 xfsprogs=4.9.0+nmu1ubuntu2 mono-devel=4.6.2.7+dfsg-1ubuntu1 less=487-0.1 groff=1.22.3-10 liberror-perl=0.17025-1 asciidoc=8.6.10-2 build-essential=12.4ubuntu1 bzr=2.7.0+bzr6622-10 cvs=2:1.12.13+real-26 cvsps=2.1-8 docbook-xml=4.5-8 docbook-xsl=1.79.1+dfsg-2 dpkg-dev=1.19.0.5ubuntu2.4 libdbd-sqlite3-perl=1.56-1 libdbi-perl=1.640-1ubuntu0.3 libdpkg-perl=1.19.0.5ubuntu2.4 libhttp-date-perl=6.02-1 libio-pty-perl=1:1.08-1.1build4 libserf-1-1=1.3.9-6 libsvn-perl=1.9.7-4ubuntu1.1 libsvn1=1.9.7-4ubuntu1.1 libtcl8.6=8.6.8+dfsg-3 libtimedate-perl=2.3000-2 libxml2-utils=2.9.4+dfsg1-6.1ubuntu1.8 libyaml-perl=1.24-1 python-bzrlib=2.7.0+bzr6622-10 python-configobj=5.0.6-2 sgml-base=1.29 sgml-data=2.0.10 subversion=1.9.7-4ubuntu1.1 tcl=8.6.0+9 tcl8.6=8.6.8+dfsg-3 xml-core=0.18 xmlto=0.0.28-2 xsltproc=1.1.29-5ubuntu0.3 tk=8.6.0+9 gettext=0.19.8.1-6ubuntu0.3 gettext-base=0.19.8.1-6ubuntu0.3 libapr1=1.6.3-2 libaprutil1=1.6.1-2ubuntu0.1 xvfb=2:1.19.6-1ubuntu4.14 expect=5.45.4-1 -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-trusty main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#   Download and set up GitVersion\nRUN set -ex \\\n && wget \"https://github.com/GitTools/GitVersion/releases/download/v${GITVERSION_VERSION}/GitVersion-bin-net40-v${GITVERSION_VERSION}.zip\" -O /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && mkdir -p /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && unzip /tmp/GitVersion_${GITVERSION_VERSION}.zip -d /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && rm /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && echo \"mono /usr/local/GitVersion_${GITVERSION_VERSION}/GitVersion.exe $@\" >> /usr/local/bin/gitversion \\\n && chmod +x /usr/local/bin/gitversion\n#   Install Docker\nRUN set -ex \\\n && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz \\\n && docker -v \\\n && addgroup dockremap \\\n && useradd -g dockremap dockremap \\\n && echo 'dockremap:165536:65536' >> /etc/subuid \\\n && echo 'dockremap:165536:65536' >> /etc/subgid \\\n && wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind \\\n && curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose \\\n && docker-compose version\n#   https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html\nRUN curl -sS -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator \\\n && curl -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl \\\n && curl -sS -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest \\\n && chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator /usr/local/bin/ecs-cli\nRUN set -ex \\\n && pip3 install awscli boto3\nVOLUME /var/lib/docker\n#   Configure SSH\nCOPY ssh_config /root/.ssh/config\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n#  ****************        RUBY     ********************************************* \nENV RUBY_VERSION=\"2.6.0\" \\\n    RUBY_DOWNLOAD_SHA256=\"f3c35b924a11c88ff111f0956ded3cdc12c90c04b72b266ac61076d3697fc072\" \\\n    RUBYGEMS_VERSION=\"3.0.1\" \\\n    BUNDLER_VERSION=\"2.0.1\" \\\n    GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc \\\n && apt-get update \\\n && apt-get install --no-install-recommends bison=2:3.0.4.dfsg-1build1 libgdbm-dev=1.14.1-6 ruby=1:2.5.1 -y \\\n && wget \"https://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\" -O /tmp/ruby.tar.gz \\\n && echo \"$RUBY_DOWNLOAD_SHA256 /tmp/ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xzf /tmp/ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove bison libgdbm-dev ruby \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler --version 2.4.12 \\\n && mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ****************   END RUBY     ********************************************* \n#  ****************        PYTHON     ********************************************* \nENV PATH=\"/usr/local/bin:$PATH\" \\\n    GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\" \\\n    PYTHON_PIP_VERSION=\"18.1\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl-dev=8.6.0+9 tk-dev=8.6.0+9 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && (gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver pgp.mit.edu --recv-keys \"$GPG_KEY\" || gpg --keyserver keyserver.ubuntu.com --recv-keys \"$GPG_KEY\" ) \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && pip install pipenv==2023.3.20 virtualenv==20.21.0 --no-cache-dir \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#  ****************      END PYTHON     ********************************************* \n#  ****************      PHP     ****************************************************\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_DOWNLOAD_SHA=\"cfe93e40be0350cd53c4a579f52fe5d8faf9c6db047f650a4566a2276bf33362\" \\\n    PHPPATH=\"/php\" \\\n    PHP_INI_DIR=\"/usr/local/etc/php\" \\\n    PHP_CFLAGS=\"-fstack-protector -fpic -fpie -O2\" \\\n    PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_SRC_DIR=\"$SRC_DIR/php\" \\\n    PHP_CPPFLAGS=\"$PHP_CFLAGS\" \\\n    PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nRUN set -xe ; mkdir -p $SRC_DIR ; cd $SRC_DIR ; wget -O php.tar.xz \"$PHP_URL\" ; echo \"$PHP_DOWNLOAD_SHA *php.tar.xz\" | sha256sum -c - ; wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do (gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --keyserver pgp.mit.edu --recv-keys \"$key\" || gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ) ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libedit-dev=3.1-20170329-1 dpkg-dev=1.19.0.5ubuntu2.4 libargon2-0-dev=0~20161029-1.1 -y ; rm -rf /var/lib/apt/lists/* ; apt-get clean ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; mkdir -p $PHP_SRC_DIR ; tar -Jxf $SRC_DIR/php.tar.xz -C $PHP_SRC_DIR --strip-components=1 ; cd $PHP_SRC_DIR ; gnuArch=\"$( dpkg-architecture -qDEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture -qDEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --enable-sockets --enable-pcntl --with-password-argon2 --with-curl --with-pdo-pgsql --with-pdo-mysql --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; rm -rf $PHP_SRC_DIR ; rm $SRC_DIR/php.tar.xz ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc ; mkdir \"$PHP_INI_DIR\" ; mkdir \"$PHP_INI_DIR/conf.d\" ; touch \"$PHP_INI_DIR/conf.d/memory.ini\" \\\n && echo \"memory_limit = 1G;\" >> \"$PHP_INI_DIR/conf.d/memory.ini\"\nENV PATH=\"$PHPPATH/bin:/usr/local/php/bin:$PATH\"\n#   Install Composer globally\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#  ****************      END PHP     ****************************************************\n#  ****************      NODEJS     ****************************************************\nENV N_SRC_DIR=\"$SRC_DIR/n\"\nRUN git clone https://github.com/tj/n $N_SRC_DIR \\\n && cd $N_SRC_DIR \\\n && make install \\\n && n $NODE_8_VERSION \\\n && npm install grunt@1.6.1 --save-dev -g \\\n && npm install grunt-cli@1.4.3 --save-dev -g \\\n && npm install webpack@5.79.0 --save-dev -g \\\n && n $NODE_VERSION \\\n && npm install grunt@1.6.1 --save-dev -g \\\n && npm install grunt-cli@1.4.3 --save-dev -g \\\n && npm install webpack@5.79.0 --save-dev -g \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && cd / \\\n && rm -rf $N_SRC_DIR\n#  ****************      END NODEJS     ****************************************************\n#  ****************      JAVA     ****************************************************\n#   Copy install tools\nCOPY tools /opt/tools\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JDK_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JRE_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\" \\\n    ANT_VERSION=\"1.10.5\" \\\n    MAVEN_HOME=\"/opt/maven\" \\\n    MAVEN_VERSION=\"3.6.0\" \\\n    MAVEN_CONFIG=\"/root/.m2\" \\\n    INSTALLED_GRADLE_VERSIONS=\"4.10.2 5.2.1\" \\\n    GRADLE_VERSION=\"5.2.1\" \\\n    SBT_VERSION=\"1.2.8\" \\\n    JDK_VERSION=\"11.0.2\" \\\n    JDK_VERSION_TAG=\"9\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk-linux\" \\\n    GRADLE_PATH=\"$SRC_DIR/gradle\" \\\n    ANDROID_SDK_MANAGER_VER=\"4333796\" \\\n    ANDROID_SDK_BUILD_TOOLS=\"build-tools;28.0.3\" \\\n    ANDROID_SDK_PLATFORM_TOOLS=\"platforms;android-28\" \\\n    ANDROID_SDK_EXTRAS=\"extras;android;m2repository extras;google;m2repository extras;google;google_play_services\" \\\n    JDK_DOWNLOAD_SHA256=\"99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57\" \\\n    ANT_DOWNLOAD_SHA512=\"acfa34c4f820d882f26ec67cf885d7dd484d534a7e99b33b05779e03da61849610328d2dbb4bfaa201e1ae75a0f0901e9c2bb793ed7bd76d3e4497e6ca5de371\" \\\n    MAVEN_DOWNLOAD_SHA512=\"fae9c12b570c3ba18116a4e26ea524b29f7279c17cbaadc3326ca72927368924d9131d11b9e851b8dc9162228b6fdea955446be41207a5cfc61283dd8a561d2f\" \\\n    GRADLE_DOWNLOAD_SHA256=\"748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357\" \\\n    ANDROID_SDK_MANAGER_SHA256=\"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9\"\nENV JDK_DOWNLOAD_TAR=\"openjdk-${JDK_VERSION}_linux-x64_bin.tar.gz\"\nENV PATH=\"${PATH}:/opt/tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools\"\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 -y \\\n && add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk=8u362-ga-0ubuntu1~18.04.1 -y \\\n && apt-get install --no-install-recommends ca-certificates-java=20180516ubuntu1~18.04.1 -y \\\n && update-ca-certificates -f \\\n && dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6-i386=2.27-3ubuntu1.6 lib32stdc++6=8.4.0-1ubuntu1~18.04 lib32gcc1=1:8.4.0-1ubuntu1~18.04 lib32ncurses5=6.1-1ubuntu1.18.04 lib32z1=1:1.2.11.dfsg-0ubuntu2.2 libqt5widgets5=5.9.5+dfsg-0ubuntu2.6 -y --force-yes \\\n && wget \"https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_MANAGER_VER}.zip\" -O /tmp/android-sdkmanager.zip \\\n && echo \"${ANDROID_SDK_MANAGER_SHA256} /tmp/android-sdkmanager.zip\" | sha256sum -c - \\\n && mkdir -p ${ANDROID_HOME} \\\n && unzip /tmp/android-sdkmanager.zip -d ${ANDROID_HOME} \\\n && chown -R root.root ${ANDROID_HOME} \\\n && ln -s ${ANDROID_HOME}/tools/android /usr/bin/android \\\n && android-accept-licenses.sh \"sdkmanager --verbose platform-tools ${ANDROID_SDK_BUILD_TOOLS} ${ANDROID_SDK_PLATFORM_TOOLS} ${ANDROID_SDK_EXTRAS}\" \\\n && android-accept-licenses.sh \"sdkmanager --licenses\" \\\n && apt-get install --no-install-recommends python-setuptools=39.0.1-2ubuntu0.1 -y \\\n && curl -LSso /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz \\\n && echo \"$ANT_DOWNLOAD_SHA512 /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar -xzf /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz -C /opt \\\n && update-alternatives --install /usr/bin/ant ant /opt/apache-ant-$ANT_VERSION/bin/ant 10000 \\\n && mkdir -p $MAVEN_HOME \\\n && curl -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n && echo \"$MAVEN_DOWNLOAD_SHA512 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \\\n && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \\\n && mkdir -p $MAVEN_CONFIG \\\n && mkdir -p $GRADLE_PATH \\\n && for version in $INSTALLED_GRADLE_VERSIONS; do { wget \"https://services.gradle.org/distributions/gradle-$version-all.zip\" -O \"$GRADLE_PATH/gradle-$version-all.zip\" \\\n && unzip \"$GRADLE_PATH/gradle-$version-all.zip\" -d /usr/local \\\n && mkdir \"/tmp/gradle-$version\" \\\n && \"/usr/local/gradle-$version/bin/gradle\" -p \"/tmp/gradle-$version\" wrapper \\\n && perl -pi -e \"s/gradle-$version-bin.zip/gradle-$version-all.zip/\" \"/tmp/gradle-$version/gradle/wrapper/gradle-wrapper.properties\" \\\n && \"/tmp/gradle-$version/gradlew\" -p \"/tmp/gradle-$version\" init \\\n && rm -rf \"/tmp/gradle-$version\" \\\n && if [ \"$version\" != \"$GRADLE_VERSION\" ] ; then rm -rf \"/usr/local/gradle-$version\" ; fi ; } ; done \\\n && ln -s /usr/local/gradle-$GRADLE_VERSION/bin/gradle /usr/bin/gradle \\\n && rm -rf $GRADLE_PATH \\\n && echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n && apt-get install --no-install-recommends apt-transport-https=1.6.14 -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update \\\n && apt-get install --no-install-recommends sbt=$SBT_VERSION -y \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && apt-get clean\n#  ****************     END JAVA     ****************************************************\n#  ****************     GO     **********************************************************\nENV GOLANG_DOWNLOAD_SHA256=\"fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b\" \\\n    GOPATH=\"/go\" \\\n    DEP_VERSION=\"0.5.0\" \\\n    DEP_BINARY=\"dep-linux-amd64\"\nRUN set -ex \\\n && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends pkg-config=0.29.1-0ubuntu2 -y \\\n && apt-get clean \\\n && wget \"https://storage.googleapis.com/golang/go$GOLANG_VERSION.linux-amd64.tar.gz\" -O /tmp/golang.tar.gz \\\n && echo \"$GOLANG_DOWNLOAD_SHA256 /tmp/golang.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/golang.tar.gz -C /usr/local \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && wget \"https://github.com/golang/dep/releases/download/v$DEP_VERSION/$DEP_BINARY\" -O \"$GOPATH/bin/dep\" \\\n && chmod +x \"$GOPATH/bin/dep\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#  ****************     END GO     **********************************************************\n#  ****************     .NET-CORE     *******************************************************\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6=2.27-3ubuntu1.6 libgcc1=1:8.4.0-1ubuntu1~18.04 libgssapi-krb5-2=1.16-2ubuntu0.4 liblttng-ust0=2.10.1-1 libstdc++6=8.4.0-1ubuntu1~18.04 zlib1g=1:1.2.11.dfsg-0ubuntu2.2 software-properties-common=0.96.24.32.20 -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test -y \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core SDK\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz\"\nENV DOTNET_SDK_DOWNLOAD_SHA=\"d7ed76a0efe2b07ac0bb3af611072b3b99f646200759cb5905a7944b1687f34d42b4b74a3a5c77dbe251f769c6c3878fc30a8d0f8f44e44bf4c7116699f3f948\"\nRUN set -ex \\\n && curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && echo \"$DOTNET_SDK_DOWNLOAD_SHA dotnet.tar.gz\" | sha512sum -c - \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#   Add .NET Core Global Tools install folder to PATH\nENV PATH=\"\\\"~/.dotnet/tools/:$PATH\\\"\"\n#   Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN set -ex \\\n && mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup \\\n && rm -rf /tmp/NuGetScratch\n#   Install Powershell Core\n#   See instructions at https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-linux\nENV POWERSHELL_VERSION=\"6.1.1\"\nENV POWERSHELL_DOWNLOAD_URL=\"https://github.com/PowerShell/PowerShell/releases/download/v$POWERSHELL_VERSION/powershell-$POWERSHELL_VERSION-linux-x64.tar.gz\"\nENV POWERSHELL_DOWNLOAD_SHA=\"822CB473A5B3D076584181BB5D308035A9FBD079A68762E9E6C0D7543E05B513\"\nRUN set -ex \\\n && curl -SL $POWERSHELL_DOWNLOAD_URL --output powershell.tar.gz \\\n && echo \"$POWERSHELL_DOWNLOAD_SHA powershell.tar.gz\" | sha256sum -c - \\\n && mkdir -p /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && tar zxf powershell.tar.gz -C /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && rm powershell.tar.gz \\\n && ln -s /opt/microsoft/powershell/$POWERSHELL_VERSION/pwsh /usr/bin/pwsh\n#  ****************     END .NET-CORE     *******************************************************\n#  ****************    HEADLESS BROWSERS     *******************************************************\nRUN set -ex \\\n && apt-add-repository \"deb http://archive.canonical.com/ubuntu $( lsb_release -sc ;) partner\" \\\n && apt-add-repository ppa:malteworld/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends libgtk-3-0=3.22.30-1ubuntu4 libglib2.0-0=2.56.4-0ubuntu0.18.04.9 libdbus-glib-1-2=0.110-2 libdbus-1-3=1.12.2-1ubuntu1.4 libasound2=1.1.3-5ubuntu0.6 -y \\\n && wget -O ~/FirefoxSetup.tar.bz2 \"https://download.mozilla.org/?product=firefox-latest&os=linux64\" \\\n && tar xjf ~/FirefoxSetup.tar.bz2 -C /opt/ \\\n && ln -s /opt/firefox/firefox /usr/local/bin/firefox \\\n && rm ~/FirefoxSetup.tar.bz2 \\\n && firefox --version\n#   Install Chrome\nRUN set -ex \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get install --no-install-recommends -fy ) \\\n && rm -rf /tmp/google-chrome-stable_current_amd64.deb \\\n && sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\" \\\n && google-chrome --version\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n#  Licensed under the Amazon Software License (the \"License\"). You may not use this file except in compliance with the License.\n#  A copy of the License is located at\n#\n#     http://aws.amazon.com/asl/\n#\n#  or in the \"license\" file accompanying this file.\n#  This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.\n#  See the License for the specific language governing permissions and limitations under the License.\nFROM ubuntu:18.04\nENV RUBY_MAJOR=\"2.6\" \\\n    PYTHON_VERSION=\"3.7.2\" \\\n    PHP_VERSION=\"7.3.1\" \\\n    NODE_VERSION=\"10.15.0\" \\\n    NODE_8_VERSION=\"8.11.0\" \\\n    NVM_VERSION=\"0.33.5\" \\\n    GOLANG_VERSION=\"1.11.4\" \\\n    DOTNET_SDK_VERSION=\"2.2.102\" \\\n    DOCKER_VERSION=\"18.09.1\" \\\n    DOCKER_COMPOSE_VERSION=\"1.23.2\"\n# ****************        Utilities     ********************************************* \nENV DOCKER_BUCKET=\"download.docker.com\" \\\n    DOCKER_CHANNEL=\"stable\" \\\n    DOCKER_SHA256=\"c9959e42b637fb7362899ac1d1aeef2a966fa0ea85631da91f4c4a7a9ec29644\" \\\n    DIND_COMMIT=\"3b5fac462d21ca164b3778647420016315289034\" \\\n    GITVERSION_VERSION=\"4.0.0\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    SRC_DIR=\"/usr/src\"\n#  Install git, SSH, and other utilities\nRUN set -ex \\\n && echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression \\\n && apt-get update \\\n && apt-get install -y apt-transport-https \\\n && apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && apt-add-repository ppa:git-core/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends git=1:2.* -y \\\n && git version \\\n && apt-get install --no-install-recommends openssh-client -y \\\n && mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H github.com >> ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H bitbucket.org >> ~/.ssh/known_hosts \\\n && chmod 600 ~/.ssh/known_hosts \\\n && apt-get install --no-install-recommends wget python3 python3-dev python3-pip python3-setuptools fakeroot ca-certificates jq netbase gnupg dirmngr bzr mercurial procps tar gzip zip autoconf automake bzip2 file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgeoip-dev libglib2.0-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmysqlclient-dev libncurses5-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt1-dev libyaml-dev make patch xz-utils zlib1g-dev unzip curl e2fsprogs iptables xfsprogs mono-devel less groff liberror-perl asciidoc build-essential bzr cvs cvsps docbook-xml docbook-xsl dpkg-dev libdbd-sqlite3-perl libdbi-perl libdpkg-perl libhttp-date-perl libio-pty-perl libserf-1-1 libsvn-perl libsvn1 libtcl8.6 libtimedate-perl libxml2-utils libyaml-perl python-bzrlib python-configobj sgml-base sgml-data subversion tcl tcl8.6 xml-core xmlto xsltproc tk gettext gettext-base libapr1 libaprutil1 xvfb expect -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-trusty main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#  Download and set up GitVersion\nRUN set -ex \\\n && wget \"https://github.com/GitTools/GitVersion/releases/download/v${GITVERSION_VERSION}/GitVersion-bin-net40-v${GITVERSION_VERSION}.zip\" -O /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && mkdir -p /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && unzip /tmp/GitVersion_${GITVERSION_VERSION}.zip -d /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && rm /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && echo \"mono /usr/local/GitVersion_${GITVERSION_VERSION}/GitVersion.exe $@\" >> /usr/local/bin/gitversion \\\n && chmod +x /usr/local/bin/gitversion\n#  Install Docker\nRUN set -ex \\\n && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz \\\n && docker -v \\\n && addgroup dockremap \\\n && useradd -g dockremap dockremap \\\n && echo 'dockremap:165536:65536' >> /etc/subuid \\\n && echo 'dockremap:165536:65536' >> /etc/subgid \\\n && wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind \\\n && curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose \\\n && docker-compose version\n#  https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html\nRUN curl -sS -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator \\\n && curl -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl \\\n && curl -sS -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest \\\n && chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator /usr/local/bin/ecs-cli\nRUN set -ex \\\n && pip3 install awscli boto3\nVOLUME /var/lib/docker\n#  Configure SSH\nCOPY ssh_config /root/.ssh/config\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n# ****************        RUBY     ********************************************* \nENV RUBY_VERSION=\"2.6.0\" \\\n    RUBY_DOWNLOAD_SHA256=\"f3c35b924a11c88ff111f0956ded3cdc12c90c04b72b266ac61076d3697fc072\" \\\n    RUBYGEMS_VERSION=\"3.0.1\" \\\n    BUNDLER_VERSION=\"2.0.1\" \\\n    GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc \\\n && apt-get update \\\n && apt-get install --no-install-recommends bison libgdbm-dev ruby -y \\\n && wget \"https://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\" -O /tmp/ruby.tar.gz \\\n && echo \"$RUBY_DOWNLOAD_SHA256 /tmp/ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xzf /tmp/ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove bison libgdbm-dev ruby \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler \\\n && mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# ****************   END RUBY     ********************************************* \n# ****************        PYTHON     ********************************************* \nENV PATH=\"/usr/local/bin:$PATH\" \\\n    GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\" \\\n    PYTHON_PIP_VERSION=\"18.1\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl-dev tk-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && (gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver pgp.mit.edu --recv-keys \"$GPG_KEY\" || gpg --keyserver keyserver.ubuntu.com --recv-keys \"$GPG_KEY\" ) \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && pip install pipenv virtualenv --no-cache-dir \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth ( ( -type d -a -name test -o -name tests ) -o ( -type f -a -name '*.pyc' -o -name '*.pyo' ) ) -exec rm -rf '{}' + \\\n && apt-get purge -y --auto-remove tcl-dev tk-dev \\\n && rm -rf /usr/src/python ~/.cache \\\n && cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# ****************      END PYTHON     ********************************************* \n# ****************      PHP     ****************************************************\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_DOWNLOAD_SHA=\"cfe93e40be0350cd53c4a579f52fe5d8faf9c6db047f650a4566a2276bf33362\" \\\n    PHPPATH=\"/php\" \\\n    PHP_INI_DIR=\"/usr/local/etc/php\" \\\n    PHP_CFLAGS=\"-fstack-protector -fpic -fpie -O2\" \\\n    PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_SRC_DIR=\"$SRC_DIR/php\" \\\n    PHP_CPPFLAGS=\"$PHP_CFLAGS\" \\\n    PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nRUN set -xe ; mkdir -p $SRC_DIR ; cd $SRC_DIR ; wget -O php.tar.xz \"$PHP_URL\" ; echo \"$PHP_DOWNLOAD_SHA *php.tar.xz\" | sha256sum -c - ; wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do (gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --keyserver pgp.mit.edu --recv-keys \"$key\" || gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ) ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libedit-dev dpkg-dev libargon2-0-dev -y ; rm -rf /var/lib/apt/lists/* ; apt-get clean ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; mkdir -p $PHP_SRC_DIR ; tar -Jxf $SRC_DIR/php.tar.xz -C $PHP_SRC_DIR --strip-components=1 ; cd $PHP_SRC_DIR ; gnuArch=\"$( dpkg-architecture -qDEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture -qDEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --enable-sockets --enable-pcntl --with-password-argon2 --with-curl --with-pdo-pgsql --with-pdo-mysql --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; rm -rf $PHP_SRC_DIR ; rm $SRC_DIR/php.tar.xz ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc ; mkdir \"$PHP_INI_DIR\" ; mkdir \"$PHP_INI_DIR/conf.d\" ; touch \"$PHP_INI_DIR/conf.d/memory.ini\" \\\n && echo \"memory_limit = 1G;\" >> \"$PHP_INI_DIR/conf.d/memory.ini\"\nENV PATH=\"$PHPPATH/bin:/usr/local/php/bin:$PATH\"\n#  Install Composer globally\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n# ****************      END PHP     ****************************************************\n# ****************      NODEJS     ****************************************************\nENV N_SRC_DIR=\"$SRC_DIR/n\"\nRUN git clone https://github.com/tj/n $N_SRC_DIR \\\n && cd $N_SRC_DIR \\\n && make install \\\n && n $NODE_8_VERSION \\\n && npm install grunt --save-dev -g \\\n && npm install grunt-cli --save-dev -g \\\n && npm install webpack --save-dev -g \\\n && n $NODE_VERSION \\\n && npm install grunt --save-dev -g \\\n && npm install grunt-cli --save-dev -g \\\n && npm install webpack --save-dev -g \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && cd / \\\n && rm -rf $N_SRC_DIR\n# ****************      END NODEJS     ****************************************************\n# ****************      JAVA     ****************************************************\n#  Copy install tools\nCOPY tools /opt/tools\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JDK_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JRE_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\" \\\n    ANT_VERSION=\"1.10.5\" \\\n    MAVEN_HOME=\"/opt/maven\" \\\n    MAVEN_VERSION=\"3.6.0\" \\\n    MAVEN_CONFIG=\"/root/.m2\" \\\n    INSTALLED_GRADLE_VERSIONS=\"4.10.2 5.2.1\" \\\n    GRADLE_VERSION=\"5.2.1\" \\\n    SBT_VERSION=\"1.2.8\" \\\n    JDK_VERSION=\"11.0.2\" \\\n    JDK_VERSION_TAG=\"9\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk-linux\" \\\n    GRADLE_PATH=\"$SRC_DIR/gradle\" \\\n    ANDROID_SDK_MANAGER_VER=\"4333796\" \\\n    ANDROID_SDK_BUILD_TOOLS=\"build-tools;28.0.3\" \\\n    ANDROID_SDK_PLATFORM_TOOLS=\"platforms;android-28\" \\\n    ANDROID_SDK_EXTRAS=\"extras;android;m2repository extras;google;m2repository extras;google;google_play_services\" \\\n    JDK_DOWNLOAD_SHA256=\"99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57\" \\\n    ANT_DOWNLOAD_SHA512=\"acfa34c4f820d882f26ec67cf885d7dd484d534a7e99b33b05779e03da61849610328d2dbb4bfaa201e1ae75a0f0901e9c2bb793ed7bd76d3e4497e6ca5de371\" \\\n    MAVEN_DOWNLOAD_SHA512=\"fae9c12b570c3ba18116a4e26ea524b29f7279c17cbaadc3326ca72927368924d9131d11b9e851b8dc9162228b6fdea955446be41207a5cfc61283dd8a561d2f\" \\\n    GRADLE_DOWNLOAD_SHA256=\"748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357\" \\\n    ANDROID_SDK_MANAGER_SHA256=\"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9\"\nENV JDK_DOWNLOAD_TAR=\"openjdk-${JDK_VERSION}_linux-x64_bin.tar.gz\"\nENV PATH=\"${PATH}:/opt/tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools\"\nRUN set -ex \\\n && apt-get update \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk -y \\\n && apt-get install --no-install-recommends ca-certificates-java -y \\\n && update-ca-certificates -f \\\n && dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 libqt5widgets5 -y --force-yes \\\n && wget \"https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_MANAGER_VER}.zip\" -O /tmp/android-sdkmanager.zip \\\n && echo \"${ANDROID_SDK_MANAGER_SHA256} /tmp/android-sdkmanager.zip\" | sha256sum -c - \\\n && mkdir -p ${ANDROID_HOME} \\\n && unzip /tmp/android-sdkmanager.zip -d ${ANDROID_HOME} \\\n && chown -R root.root ${ANDROID_HOME} \\\n && ln -s ${ANDROID_HOME}/tools/android /usr/bin/android \\\n && android-accept-licenses.sh \"sdkmanager --verbose platform-tools ${ANDROID_SDK_BUILD_TOOLS} ${ANDROID_SDK_PLATFORM_TOOLS} ${ANDROID_SDK_EXTRAS}\" \\\n && android-accept-licenses.sh \"sdkmanager --licenses\" \\\n && apt-get install python-setuptools -y \\\n && curl -LSso /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz \\\n && echo \"$ANT_DOWNLOAD_SHA512 /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar -xzf /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz -C /opt \\\n && update-alternatives --install /usr/bin/ant ant /opt/apache-ant-$ANT_VERSION/bin/ant 10000 \\\n && mkdir -p $MAVEN_HOME \\\n && curl -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n && echo \"$MAVEN_DOWNLOAD_SHA512 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \\\n && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \\\n && mkdir -p $MAVEN_CONFIG \\\n && mkdir -p $GRADLE_PATH \\\n && for version in $INSTALLED_GRADLE_VERSIONS; do { wget \"https://services.gradle.org/distributions/gradle-$version-all.zip\" -O \"$GRADLE_PATH/gradle-$version-all.zip\" \\\n && unzip \"$GRADLE_PATH/gradle-$version-all.zip\" -d /usr/local \\\n && mkdir \"/tmp/gradle-$version\" \\\n && \"/usr/local/gradle-$version/bin/gradle\" -p \"/tmp/gradle-$version\" wrapper \\\n && perl -pi -e \"s/gradle-$version-bin.zip/gradle-$version-all.zip/\" \"/tmp/gradle-$version/gradle/wrapper/gradle-wrapper.properties\" \\\n && \"/tmp/gradle-$version/gradlew\" -p \"/tmp/gradle-$version\" init \\\n && rm -rf \"/tmp/gradle-$version\" \\\n && if [ \"$version\" != \"$GRADLE_VERSION\" ] ; then rm -rf \"/usr/local/gradle-$version\" ; fi ; } ; done \\\n && ln -s /usr/local/gradle-$GRADLE_VERSION/bin/gradle /usr/bin/gradle \\\n && rm -rf $GRADLE_PATH \\\n && echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n && apt-get install --no-install-recommends apt-transport-https -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update \\\n && apt-get install --no-install-recommends sbt=$SBT_VERSION -y \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && apt-get clean\n# ****************     END JAVA     ****************************************************\n# ****************     GO     **********************************************************\nENV GOLANG_DOWNLOAD_SHA256=\"fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b\" \\\n    GOPATH=\"/go\" \\\n    DEP_VERSION=\"0.5.0\" \\\n    DEP_BINARY=\"dep-linux-amd64\"\nRUN set -ex \\\n && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends pkg-config -y \\\n && apt-get clean \\\n && wget \"https://storage.googleapis.com/golang/go$GOLANG_VERSION.linux-amd64.tar.gz\" -O /tmp/golang.tar.gz \\\n && echo \"$GOLANG_DOWNLOAD_SHA256 /tmp/golang.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/golang.tar.gz -C /usr/local \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && wget \"https://github.com/golang/dep/releases/download/v$DEP_VERSION/$DEP_BINARY\" -O \"$GOPATH/bin/dep\" \\\n && chmod +x \"$GOPATH/bin/dep\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n# ****************     END GO     **********************************************************\n# ****************     .NET-CORE     *******************************************************\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6 libgcc1 libgssapi-krb5-2 liblttng-ust0 libstdc++6 zlib1g software-properties-common -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test -y \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/*\n#  Install .NET Core SDK\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz\"\nENV DOTNET_SDK_DOWNLOAD_SHA=\"d7ed76a0efe2b07ac0bb3af611072b3b99f646200759cb5905a7944b1687f34d42b4b74a3a5c77dbe251f769c6c3878fc30a8d0f8f44e44bf4c7116699f3f948\"\nRUN set -ex \\\n && curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && echo \"$DOTNET_SDK_DOWNLOAD_SHA dotnet.tar.gz\" | sha512sum -c - \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#  Add .NET Core Global Tools install folder to PATH\nENV PATH=\"\\\"~/.dotnet/tools/:$PATH\\\"\"\n#  Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN set -ex \\\n && mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup \\\n && rm -rf /tmp/NuGetScratch\n#  Install Powershell Core\n#  See instructions at https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-linux\nENV POWERSHELL_VERSION=\"6.1.1\"\nENV POWERSHELL_DOWNLOAD_URL=\"https://github.com/PowerShell/PowerShell/releases/download/v$POWERSHELL_VERSION/powershell-$POWERSHELL_VERSION-linux-x64.tar.gz\"\nENV POWERSHELL_DOWNLOAD_SHA=\"822CB473A5B3D076584181BB5D308035A9FBD079A68762E9E6C0D7543E05B513\"\nRUN set -ex \\\n && curl -SL $POWERSHELL_DOWNLOAD_URL --output powershell.tar.gz \\\n && echo \"$POWERSHELL_DOWNLOAD_SHA powershell.tar.gz\" | sha256sum -c - \\\n && mkdir -p /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && tar zxf powershell.tar.gz -C /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && rm powershell.tar.gz \\\n && ln -s /opt/microsoft/powershell/$POWERSHELL_VERSION/pwsh /usr/bin/pwsh\n# ****************     END .NET-CORE     *******************************************************\n# ****************    HEADLESS BROWSERS     *******************************************************\nRUN set -ex \\\n && apt-add-repository \"deb http://archive.canonical.com/ubuntu $( lsb_release -sc ;) partner\" \\\n && apt-add-repository ppa:malteworld/ppa \\\n && apt-get update \\\n && apt-get install libgtk-3-0 libglib2.0-0 libdbus-glib-1-2 libdbus-1-3 libasound2 -y \\\n && wget -O ~/FirefoxSetup.tar.bz2 \"https://download.mozilla.org/?product=firefox-latest&os=linux64\" \\\n && tar xjf ~/FirefoxSetup.tar.bz2 -C /opt/ \\\n && ln -s /opt/firefox/firefox /usr/local/bin/firefox \\\n && rm ~/FirefoxSetup.tar.bz2 \\\n && firefox --version\n#  Install Chrome\nRUN set -ex \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get install -fy ) \\\n && rm -rf /tmp/google-chrome-stable_current_amd64.deb \\\n && sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\" \\\n && google-chrome --version\n","injectedSmells":[],"originalDockerfileHash":"e3112638e813d061fa2d784a43a96df4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n#   Licensed under the Amazon Software License (the \"License\"). You may not use this file except in compliance with the License.\n#   A copy of the License is located at\n#\n#      http://aws.amazon.com/asl/\n#\n#   or in the \"license\" file accompanying this file.\n#   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.\n#   See the License for the specific language governing permissions and limitations under the License.\nFROM ubuntu:18.04\nENV RUBY_MAJOR=\"2.6\" \\\n    PYTHON_VERSION=\"3.7.2\" \\\n    PHP_VERSION=\"7.3.1\" \\\n    NODE_VERSION=\"10.15.0\" \\\n    NODE_8_VERSION=\"8.11.0\" \\\n    NVM_VERSION=\"0.33.5\" \\\n    GOLANG_VERSION=\"1.11.4\" \\\n    DOTNET_SDK_VERSION=\"2.2.102\" \\\n    DOCKER_VERSION=\"18.09.1\" \\\n    DOCKER_COMPOSE_VERSION=\"1.23.2\"\n#  ****************        Utilities     ********************************************* \nENV DOCKER_BUCKET=\"download.docker.com\" \\\n    DOCKER_CHANNEL=\"stable\" \\\n    DOCKER_SHA256=\"c9959e42b637fb7362899ac1d1aeef2a966fa0ea85631da91f4c4a7a9ec29644\" \\\n    DIND_COMMIT=\"3b5fac462d21ca164b3778647420016315289034\" \\\n    GITVERSION_VERSION=\"4.0.0\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    SRC_DIR=\"/usr/src\"\n#   Install git, SSH, and other utilities\nRUN set -ex \\\n && echo 'Acquire::CompressionTypes::Order:: \"gz\";' > /etc/apt/apt.conf.d/99use-gzip-compression \\\n && apt-get update \\\n && apt-get install apt-transport-https -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && apt-add-repository ppa:git-core/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends git=1:2.* -y \\\n && git version \\\n && apt-get install --no-install-recommends openssh-client -y \\\n && mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H github.com >> ~/.ssh/known_hosts \\\n && ssh-keyscan -t rsa,dsa -H bitbucket.org >> ~/.ssh/known_hosts \\\n && chmod 600 ~/.ssh/known_hosts \\\n && apt-get install --no-install-recommends wget python3 python3-dev python3-pip python3-setuptools fakeroot ca-certificates jq netbase gnupg dirmngr bzr mercurial procps tar gzip zip autoconf automake bzip2 file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgeoip-dev libglib2.0-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmysqlclient-dev libncurses5-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt1-dev libyaml-dev make patch xz-utils zlib1g-dev unzip curl e2fsprogs iptables xfsprogs mono-devel less groff liberror-perl asciidoc build-essential bzr cvs cvsps docbook-xml docbook-xsl dpkg-dev libdbd-sqlite3-perl libdbi-perl libdpkg-perl libhttp-date-perl libio-pty-perl libserf-1-1 libsvn-perl libsvn1 libtcl8.6 libtimedate-perl libxml2-utils libyaml-perl python-bzrlib python-configobj sgml-base sgml-data subversion tcl tcl8.6 xml-core xmlto xsltproc tk gettext gettext-base libapr1 libaprutil1 xvfb expect -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb https://download.mono-project.com/repo/ubuntu stable-trusty main\" | tee /etc/apt/sources.list.d/mono-official-stable.list \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#   Download and set up GitVersion\nRUN set -ex \\\n && wget \"https://github.com/GitTools/GitVersion/releases/download/v${GITVERSION_VERSION}/GitVersion-bin-net40-v${GITVERSION_VERSION}.zip\" -O /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && mkdir -p /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && unzip /tmp/GitVersion_${GITVERSION_VERSION}.zip -d /usr/local/GitVersion_${GITVERSION_VERSION} \\\n && rm /tmp/GitVersion_${GITVERSION_VERSION}.zip \\\n && echo \"mono /usr/local/GitVersion_${GITVERSION_VERSION}/GitVersion.exe $@\" >> /usr/local/bin/gitversion \\\n && chmod +x /usr/local/bin/gitversion\n#   Install Docker\nRUN set -ex \\\n && curl -fSL \"https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" -o docker.tgz \\\n && echo \"${DOCKER_SHA256} *docker.tgz\" | sha256sum -c - \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz \\\n && docker -v \\\n && addgroup dockremap \\\n && useradd -g dockremap dockremap \\\n && echo 'dockremap:165536:65536' >> /etc/subuid \\\n && echo 'dockremap:165536:65536' >> /etc/subgid \\\n && wget \"https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind\" -O /usr/local/bin/dind \\\n && curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose \\\n && docker-compose version\n#   https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html\nRUN curl -sS -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator \\\n && curl -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/kubectl \\\n && curl -sS -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest \\\n && chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator /usr/local/bin/ecs-cli\nRUN set -ex \\\n && pip3 install awscli boto3\nVOLUME /var/lib/docker\n#   Configure SSH\nCOPY ssh_config /root/.ssh/config\nCOPY dockerd-entrypoint.sh /usr/local/bin/\n#  ****************        RUBY     ********************************************* \nENV RUBY_VERSION=\"2.6.0\" \\\n    RUBY_DOWNLOAD_SHA256=\"f3c35b924a11c88ff111f0956ded3cdc12c90c04b72b266ac61076d3697fc072\" \\\n    RUBYGEMS_VERSION=\"3.0.1\" \\\n    BUNDLER_VERSION=\"2.0.1\" \\\n    GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc \\\n && apt-get update \\\n && apt-get install --no-install-recommends bison libgdbm-dev ruby -y \\\n && wget \"https://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz\" -O /tmp/ruby.tar.gz \\\n && echo \"$RUBY_DOWNLOAD_SHA256 /tmp/ruby.tar.gz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xzf /tmp/ruby.tar.gz -C /usr/src/ruby --strip-components=1 \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove bison libgdbm-dev ruby \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler \\\n && mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ****************   END RUBY     ********************************************* \n#  ****************        PYTHON     ********************************************* \nENV PATH=\"/usr/local/bin:$PATH\" \\\n    GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\" \\\n    PYTHON_PIP_VERSION=\"18.1\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl-dev tk-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && (gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver pgp.mit.edu --recv-keys \"$GPG_KEY\" || gpg --keyserver keyserver.ubuntu.com --recv-keys \"$GPG_KEY\" ) \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && pip install pipenv virtualenv --no-cache-dir \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#  ****************      END PYTHON     ********************************************* \n#  ****************      PHP     ****************************************************\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_DOWNLOAD_SHA=\"cfe93e40be0350cd53c4a579f52fe5d8faf9c6db047f650a4566a2276bf33362\" \\\n    PHPPATH=\"/php\" \\\n    PHP_INI_DIR=\"/usr/local/etc/php\" \\\n    PHP_CFLAGS=\"-fstack-protector -fpic -fpie -O2\" \\\n    PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_SRC_DIR=\"$SRC_DIR/php\" \\\n    PHP_CPPFLAGS=\"$PHP_CFLAGS\" \\\n    PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nRUN set -xe ; mkdir -p $SRC_DIR ; cd $SRC_DIR ; wget -O php.tar.xz \"$PHP_URL\" ; echo \"$PHP_DOWNLOAD_SHA *php.tar.xz\" | sha256sum -c - ; wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do (gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --keyserver pgp.mit.edu --recv-keys \"$key\" || gpg --keyserver keyserver.pgp.com --recv-keys \"$key\" ) ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libedit-dev dpkg-dev libargon2-0-dev -y ; rm -rf /var/lib/apt/lists/* ; apt-get clean ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; mkdir -p $PHP_SRC_DIR ; tar -Jxf $SRC_DIR/php.tar.xz -C $PHP_SRC_DIR --strip-components=1 ; cd $PHP_SRC_DIR ; gnuArch=\"$( dpkg-architecture -qDEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture -qDEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --enable-sockets --enable-pcntl --with-password-argon2 --with-curl --with-pdo-pgsql --with-pdo-mysql --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; rm -rf $PHP_SRC_DIR ; rm $SRC_DIR/php.tar.xz ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc ; mkdir \"$PHP_INI_DIR\" ; mkdir \"$PHP_INI_DIR/conf.d\" ; touch \"$PHP_INI_DIR/conf.d/memory.ini\" \\\n && echo \"memory_limit = 1G;\" >> \"$PHP_INI_DIR/conf.d/memory.ini\"\nENV PATH=\"$PHPPATH/bin:/usr/local/php/bin:$PATH\"\n#   Install Composer globally\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#  ****************      END PHP     ****************************************************\n#  ****************      NODEJS     ****************************************************\nENV N_SRC_DIR=\"$SRC_DIR/n\"\nRUN git clone https://github.com/tj/n $N_SRC_DIR \\\n && cd $N_SRC_DIR \\\n && make install \\\n && n $NODE_8_VERSION \\\n && npm install grunt --save-dev -g \\\n && npm install grunt-cli --save-dev -g \\\n && npm install webpack --save-dev -g \\\n && n $NODE_VERSION \\\n && npm install grunt --save-dev -g \\\n && npm install grunt-cli --save-dev -g \\\n && npm install webpack --save-dev -g \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn -y \\\n && cd / \\\n && rm -rf $N_SRC_DIR\n#  ****************      END NODEJS     ****************************************************\n#  ****************      JAVA     ****************************************************\n#   Copy install tools\nCOPY tools /opt/tools\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JDK_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\" \\\n    JRE_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\" \\\n    ANT_VERSION=\"1.10.5\" \\\n    MAVEN_HOME=\"/opt/maven\" \\\n    MAVEN_VERSION=\"3.6.0\" \\\n    MAVEN_CONFIG=\"/root/.m2\" \\\n    INSTALLED_GRADLE_VERSIONS=\"4.10.2 5.2.1\" \\\n    GRADLE_VERSION=\"5.2.1\" \\\n    SBT_VERSION=\"1.2.8\" \\\n    JDK_VERSION=\"11.0.2\" \\\n    JDK_VERSION_TAG=\"9\" \\\n    ANDROID_HOME=\"/usr/local/android-sdk-linux\" \\\n    GRADLE_PATH=\"$SRC_DIR/gradle\" \\\n    ANDROID_SDK_MANAGER_VER=\"4333796\" \\\n    ANDROID_SDK_BUILD_TOOLS=\"build-tools;28.0.3\" \\\n    ANDROID_SDK_PLATFORM_TOOLS=\"platforms;android-28\" \\\n    ANDROID_SDK_EXTRAS=\"extras;android;m2repository extras;google;m2repository extras;google;google_play_services\" \\\n    JDK_DOWNLOAD_SHA256=\"99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57\" \\\n    ANT_DOWNLOAD_SHA512=\"acfa34c4f820d882f26ec67cf885d7dd484d534a7e99b33b05779e03da61849610328d2dbb4bfaa201e1ae75a0f0901e9c2bb793ed7bd76d3e4497e6ca5de371\" \\\n    MAVEN_DOWNLOAD_SHA512=\"fae9c12b570c3ba18116a4e26ea524b29f7279c17cbaadc3326ca72927368924d9131d11b9e851b8dc9162228b6fdea955446be41207a5cfc61283dd8a561d2f\" \\\n    GRADLE_DOWNLOAD_SHA256=\"748c33ff8d216736723be4037085b8dc342c6a0f309081acf682c9803e407357\" \\\n    ANDROID_SDK_MANAGER_SHA256=\"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9\"\nENV JDK_DOWNLOAD_TAR=\"openjdk-${JDK_VERSION}_linux-x64_bin.tar.gz\"\nENV PATH=\"${PATH}:/opt/tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools\"\nRUN set -ex \\\n && apt-get update \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk -y \\\n && apt-get install --no-install-recommends ca-certificates-java -y \\\n && update-ca-certificates -f \\\n && dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1 libqt5widgets5 -y --force-yes \\\n && wget \"https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_MANAGER_VER}.zip\" -O /tmp/android-sdkmanager.zip \\\n && echo \"${ANDROID_SDK_MANAGER_SHA256} /tmp/android-sdkmanager.zip\" | sha256sum -c - \\\n && mkdir -p ${ANDROID_HOME} \\\n && unzip /tmp/android-sdkmanager.zip -d ${ANDROID_HOME} \\\n && chown -R root.root ${ANDROID_HOME} \\\n && ln -s ${ANDROID_HOME}/tools/android /usr/bin/android \\\n && android-accept-licenses.sh \"sdkmanager --verbose platform-tools ${ANDROID_SDK_BUILD_TOOLS} ${ANDROID_SDK_PLATFORM_TOOLS} ${ANDROID_SDK_EXTRAS}\" \\\n && android-accept-licenses.sh \"sdkmanager --licenses\" \\\n && apt-get install python-setuptools -y \\\n && curl -LSso /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz https://archive.apache.org/dist/ant/binaries/apache-ant-$ANT_VERSION-bin.tar.gz \\\n && echo \"$ANT_DOWNLOAD_SHA512 /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar -xzf /var/tmp/apache-ant-$ANT_VERSION-bin.tar.gz -C /opt \\\n && update-alternatives --install /usr/bin/ant ant /opt/apache-ant-$ANT_VERSION/bin/ant 10000 \\\n && mkdir -p $MAVEN_HOME \\\n && curl -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \\\n && echo \"$MAVEN_DOWNLOAD_SHA512 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz\" | sha512sum -c - \\\n && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \\\n && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \\\n && mkdir -p $MAVEN_CONFIG \\\n && mkdir -p $GRADLE_PATH \\\n && for version in $INSTALLED_GRADLE_VERSIONS; do { wget \"https://services.gradle.org/distributions/gradle-$version-all.zip\" -O \"$GRADLE_PATH/gradle-$version-all.zip\" \\\n && unzip \"$GRADLE_PATH/gradle-$version-all.zip\" -d /usr/local \\\n && mkdir \"/tmp/gradle-$version\" \\\n && \"/usr/local/gradle-$version/bin/gradle\" -p \"/tmp/gradle-$version\" wrapper \\\n && perl -pi -e \"s/gradle-$version-bin.zip/gradle-$version-all.zip/\" \"/tmp/gradle-$version/gradle/wrapper/gradle-wrapper.properties\" \\\n && \"/tmp/gradle-$version/gradlew\" -p \"/tmp/gradle-$version\" init \\\n && rm -rf \"/tmp/gradle-$version\" \\\n && if [ \"$version\" != \"$GRADLE_VERSION\" ] ; then rm -rf \"/usr/local/gradle-$version\" ; fi ; } ; done \\\n && ln -s /usr/local/gradle-$GRADLE_VERSION/bin/gradle /usr/bin/gradle \\\n && rm -rf $GRADLE_PATH \\\n && echo \"deb https://dl.bintray.com/sbt/debian /\" | tee -a /etc/apt/sources.list.d/sbt.list \\\n && apt-get install --no-install-recommends apt-transport-https -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823 \\\n && apt-get update \\\n && apt-get install --no-install-recommends sbt=$SBT_VERSION -y \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && apt-get clean\n#  ****************     END JAVA     ****************************************************\n#  ****************     GO     **********************************************************\nENV GOLANG_DOWNLOAD_SHA256=\"fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b\" \\\n    GOPATH=\"/go\" \\\n    DEP_VERSION=\"0.5.0\" \\\n    DEP_BINARY=\"dep-linux-amd64\"\nRUN set -ex \\\n && mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends pkg-config -y \\\n && apt-get clean \\\n && wget \"https://storage.googleapis.com/golang/go$GOLANG_VERSION.linux-amd64.tar.gz\" -O /tmp/golang.tar.gz \\\n && echo \"$GOLANG_DOWNLOAD_SHA256 /tmp/golang.tar.gz\" | sha256sum -c - \\\n && tar -xzf /tmp/golang.tar.gz -C /usr/local \\\n && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && wget \"https://github.com/golang/dep/releases/download/v$DEP_VERSION/$DEP_BINARY\" -O \"$GOPATH/bin/dep\" \\\n && chmod +x \"$GOPATH/bin/dep\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#  ****************     END GO     **********************************************************\n#  ****************     .NET-CORE     *******************************************************\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6 libgcc1 libgssapi-krb5-2 liblttng-ust0 libstdc++6 zlib1g software-properties-common -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test -y \\\n && apt-get update \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core SDK\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz\"\nENV DOTNET_SDK_DOWNLOAD_SHA=\"d7ed76a0efe2b07ac0bb3af611072b3b99f646200759cb5905a7944b1687f34d42b4b74a3a5c77dbe251f769c6c3878fc30a8d0f8f44e44bf4c7116699f3f948\"\nRUN set -ex \\\n && curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && echo \"$DOTNET_SDK_DOWNLOAD_SHA dotnet.tar.gz\" | sha512sum -c - \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#   Add .NET Core Global Tools install folder to PATH\nENV PATH=\"\\\"~/.dotnet/tools/:$PATH\\\"\"\n#   Trigger the population of the local package cache\nENV NUGET_XMLDOC_MODE=\"skip\"\nRUN set -ex \\\n && mkdir warmup \\\n && cd warmup \\\n && dotnet new \\\n && cd .. \\\n && rm -rf warmup \\\n && rm -rf /tmp/NuGetScratch\n#   Install Powershell Core\n#   See instructions at https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-linux\nENV POWERSHELL_VERSION=\"6.1.1\"\nENV POWERSHELL_DOWNLOAD_URL=\"https://github.com/PowerShell/PowerShell/releases/download/v$POWERSHELL_VERSION/powershell-$POWERSHELL_VERSION-linux-x64.tar.gz\"\nENV POWERSHELL_DOWNLOAD_SHA=\"822CB473A5B3D076584181BB5D308035A9FBD079A68762E9E6C0D7543E05B513\"\nRUN set -ex \\\n && curl -SL $POWERSHELL_DOWNLOAD_URL --output powershell.tar.gz \\\n && echo \"$POWERSHELL_DOWNLOAD_SHA powershell.tar.gz\" | sha256sum -c - \\\n && mkdir -p /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && tar zxf powershell.tar.gz -C /opt/microsoft/powershell/$POWERSHELL_VERSION \\\n && rm powershell.tar.gz \\\n && ln -s /opt/microsoft/powershell/$POWERSHELL_VERSION/pwsh /usr/bin/pwsh\n#  ****************     END .NET-CORE     *******************************************************\n#  ****************    HEADLESS BROWSERS     *******************************************************\nRUN set -ex \\\n && apt-add-repository \"deb http://archive.canonical.com/ubuntu $( lsb_release -sc ;) partner\" \\\n && apt-add-repository ppa:malteworld/ppa \\\n && apt-get update \\\n && apt-get install libgtk-3-0 libglib2.0-0 libdbus-glib-1-2 libdbus-1-3 libasound2 -y \\\n && wget -O ~/FirefoxSetup.tar.bz2 \"https://download.mozilla.org/?product=firefox-latest&os=linux64\" \\\n && tar xjf ~/FirefoxSetup.tar.bz2 -C /opt/ \\\n && ln -s /opt/firefox/firefox /usr/local/bin/firefox \\\n && rm ~/FirefoxSetup.tar.bz2 \\\n && firefox --version\n#   Install Chrome\nRUN set -ex \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get install -fy ) \\\n && rm -rf /tmp/google-chrome-stable_current_amd64.deb \\\n && sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\" \\\n && google-chrome --version\n","originalDockerfileUglifiedHash":"c96caa718a8f974a668c1805c7f65e30","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8653d7dc5529cda6e0aea7a84e401f148af1cb9e.dockerfile"}