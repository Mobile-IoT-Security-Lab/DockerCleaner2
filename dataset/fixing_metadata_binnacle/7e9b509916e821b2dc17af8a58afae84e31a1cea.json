{"seed":2305779772,"processedDockerfileHash":"d8a7bd6e3e824de6bdd1d62ba8672c6a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   CNTK Dockerfile\n#     CPU only\n#     No 1-bit SGD\n#\n#   To build, run from the parent with the command line:\n#   \tdocker build -t <image name> -f CNTK-CPUOnly-Image/Dockerfile .\nFROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev=20150820.1 build-essential=12.1ubuntu2 git=1:2.7.4-0ubuntu1.10 g++-multilib=4:5.3.1-1ubuntu1 gcc-multilib=4:5.3.1-1ubuntu1 gfortran-multilib=4:5.3.1-1ubuntu1 libavcodec-dev=7:2.8.17-0ubuntu0.1 libavformat-dev=7:2.8.17-0ubuntu0.1 libjasper-dev=1.900.1-debian1-2.4ubuntu1.3 libjpeg-dev=8c-2ubuntu8 libpng-dev liblapacke-dev=3.6.0-2ubuntu2 libswscale-dev=7:2.8.17-0ubuntu0.1 libtiff-dev pkg-config=0.29.1-0ubuntu1 wget=1.17.1-1ubuntu1.5 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libssl-dev=1.0.2g-1ubuntu4.20 openssl=1.0.2g-1ubuntu4.20 ca-certificates=20210119~16.04.1 curl=7.47.0-1ubuntu2.19 libcurl4-openssl-dev=7.47.0-1ubuntu2.19 unzip=6.0-20ubuntu1.1 python-dev=2.7.12-1~16.04 automake=1:1.15-4ubuntu1 libtool-bin=2.4.6-0.1 autoconf=2.69-9 subversion=1.9.3-2ubuntu1.3 libapr1=1.5.2-3 libaprutil1=1.5.4-1build1 libltdl-dev=2.4.6-0.1 libltdl7=2.4.6-0.1 libserf-1-1=1.3.8-1 libsigsegv2=2.10-4 libsvn1=1.9.3-2ubuntu1.3 m4=1.4.17-5 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 libpcre3-dev=2:8.38-3.1 libgdiplus=4.2-1ubuntu1 apt-transport-https=1.2.35 -y \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_DOWNLOAD_VERSION=3.11\nARG CMAKE_BUILD_VERSION=4\nRUN DEBIAN_FRONTEND=noninteractive \\\n && wget --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/cmake/$CMAKE_DOWNLOAD_VERSION/cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && tar -xzvf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && cd cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION \\\n && ./bootstrap --system-curl -- -DCMAKE_USE_OPENSSL=ON \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION\nARG OPENMPI_VERSION=1.10.7\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openmpi/$OPENMPI_VERSION/openmpi-$OPENMPI_VERSION.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends -y -f \\\n && apt-get install --no-install-recommends libsysfs2=2.1.0+repack-4 libsysfs-dev=2.1.0+repack-4 -y \\\n && ./configure --with-verbs --with-cuda=/usr/local/cuda --prefix=/usr/local/mpi \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nARG LIBZIP_VERSION=1.1.2\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/libzip/$LIBZIP_VERSION/libzip-$LIBZIP_VERSION.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nARG OPENCV_VERSION=3.1.0\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/opencv/$OPENCV_VERSION/opencv-$OPENCV_VERSION.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf opencv-${OPENCV_VERSION}\nARG OPENBLAS_VERSION=0.2.18\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openblas/$OPENBLAS_VERSION/OpenBLAS-$OPENBLAS_VERSION.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j 2 MAKE_NB_JOBS=0 USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && cd .. \\\n && rm -rf OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#   Install Boost\nARG BOOST_VERSION=1.60.0\nRUN BOOST_UNDERSCORE_VERSION=$( echo $BOOST_VERSION | tr . _ ;) \\\n && wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/boost/$BOOST_VERSION/boost_$BOOST_UNDERSCORE_VERSION.tar.gz | tar -xzf - \\\n && cd boost_${BOOST_UNDERSCORE_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_VERSION} \\\n && ./b2 -d0 -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf boost_${BOOST_UNDERSCORE_VERSION}\n#   Install Protobuf\nARG PROTOBUF_VERSION=3.1.0\nRUN PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/protobuf/$PROTOBUF_VERSION/protobuf-$PROTOBUF_VERSION.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   Install MKLDNN and MKLML\nARG MKLDNN_VERSION=0.14\nARG MKLDNN_LONG_VERSION=mklml_lnx_2018.0.3.20180406\nRUN mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/$MKLDNN_LONG_VERSION.tgz | tar -xzf - -C /usr/local/mklml \\\n && MKLDNN_STRING=mkl-dnn-${MKLDNN_VERSION} \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/mkl-dnn-$MKLDNN_VERSION.tar.gz | tar -xzf - \\\n && cd ${MKLDNN_STRING} \\\n && ln -s /usr/local external \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/ \\\n && make \\\n && make install DESTDIR=/usr/local \\\n && make install DESTDIR=/usr/local/mklml/${MKLDNN_LONG_VERSION} \\\n && cd ../.. \\\n && rm -rf ${MKLDNN_STRING}\n#   Install Kaldi\nARG KALDI_VERSION=c024e8aa\nARG KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION\nRUN mv /bin/sh /bin/sh.orig \\\n && ln -s -f /bin/bash /bin/sh \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/kaldi/$KALDI_VERSION/kaldi-$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH \\\n && cd tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && ./extras/check_dependencies.sh \\\n && make -j $( nproc ;) all \\\n && cd ../src \\\n && perl -pi -e 's/-gencode arch=compute_20,code=sm_20//' cudamatrix/Makefile \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && mv -f /bin/sh.orig /bin/sh\n#  # PYTHON\n#   Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#   Swig\nARG SWIG_VERSION=3.0.10\nARG CACHEBUST=1\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/swig/$SWIG_VERSION/swig-$SWIG_VERSION.tar.gz -O - | tar xvfz - \\\n && cd swig-$SWIG_VERSION \\\n && ./configure --prefix=/usr/local/swig-$SWIG_VERSION --without-perl5 --without-alllang \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-$SWIG_VERSION\nCOPY ./Patches /tmp/patches\nRUN /tmp/patches/patch_swig.sh /usr/local/share/swig/3.0.10 \\\n && rm -rfd /tmp/patches\n#   .NET Core SDK\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/packages-microsoft-prod/deb/packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && apt-get install --no-install-recommends apt-transport-https=1.2.35 -y -f \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends dotnet-sdk-2.1 -y -f \\\n && rm ./packages-microsoft-prod.deb\n#   Anaconda\nARG ANACONDA_VERSION=4.2.0\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/anaconda3/$ANACONDA_VERSION/Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh \\\n && bash Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh -b \\\n && rm Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh\nRUN CONDA_ENV_PATH=/tmp/conda-linux-cntk-py35-environment.yml ; wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O \"$CONDA_ENV_PATH\" \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35 --file \"$CONDA_ENV_PATH\" \\\n && rm -f \"$CONDA_ENV_PATH\"\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nWORKDIR /cntk\n#   Build CNTK\nRUN git clone --depth=1 --recursive -b $COMMIT https://github.com/Microsoft/CNTK.git cntksrc \\\n && cd cntksrc \\\n && MKLML_VERSION_DETAIL=${MKLDNN_LONG_VERSION} \\\n && CONFIGURE_OPTS=\" --with-kaldi=${KALDI_PATH} --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/mklml/${MKLML_VERSION_DETAIL} \\\n && make -j\"$( nproc ;)\" all\nRUN cd cntksrc/Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd cntksrc/Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/cntksrc/build/gpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/cntksrc/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/cntksrc/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   Install CNTK as the default backend for Keras\nENV KERAS_BACKEND=\"cntk\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  CNTK Dockerfile\n#    CPU only\n#    No 1-bit SGD\n#\n#  To build, run from the parent with the command line:\n#  \tdocker build -t <image name> -f CNTK-CPUOnly-Image/Dockerfile .\nFROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev build-essential git g++-multilib gcc-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev libssl-dev openssl ca-certificates curl libcurl4-openssl-dev unzip python-dev automake libtool-bin autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-8-jdk libpcre3-dev libgdiplus apt-transport-https -y \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_DOWNLOAD_VERSION=3.11\nARG CMAKE_BUILD_VERSION=4\nRUN DEBIAN_FRONTEND=noninteractive \\\n && wget --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/cmake/$CMAKE_DOWNLOAD_VERSION/cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && tar -xzvf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && cd cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION \\\n && ./bootstrap --system-curl -- -DCMAKE_USE_OPENSSL=ON \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION\nARG OPENMPI_VERSION=1.10.7\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openmpi/$OPENMPI_VERSION/openmpi-$OPENMPI_VERSION.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && apt-get update -y \\\n && apt-get install -y -f \\\n && apt-get install libsysfs2 libsysfs-dev -y \\\n && ./configure --with-verbs --with-cuda=/usr/local/cuda --prefix=/usr/local/mpi \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nARG LIBZIP_VERSION=1.1.2\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/libzip/$LIBZIP_VERSION/libzip-$LIBZIP_VERSION.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nARG OPENCV_VERSION=3.1.0\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/opencv/$OPENCV_VERSION/opencv-$OPENCV_VERSION.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf opencv-${OPENCV_VERSION}\nARG OPENBLAS_VERSION=0.2.18\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openblas/$OPENBLAS_VERSION/OpenBLAS-$OPENBLAS_VERSION.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j 2 MAKE_NB_JOBS=0 USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && cd .. \\\n && rm -rf OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#  Install Boost\nARG BOOST_VERSION=1.60.0\nRUN BOOST_UNDERSCORE_VERSION=$( echo $BOOST_VERSION | tr . _ ;) \\\n && wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/boost/$BOOST_VERSION/boost_$BOOST_UNDERSCORE_VERSION.tar.gz | tar -xzf - \\\n && cd boost_${BOOST_UNDERSCORE_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_VERSION} \\\n && ./b2 -d0 -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf boost_${BOOST_UNDERSCORE_VERSION}\n#  Install Protobuf\nARG PROTOBUF_VERSION=3.1.0\nRUN PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/protobuf/$PROTOBUF_VERSION/protobuf-$PROTOBUF_VERSION.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#  Install MKLDNN and MKLML\nARG MKLDNN_VERSION=0.14\nARG MKLDNN_LONG_VERSION=mklml_lnx_2018.0.3.20180406\nRUN mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/$MKLDNN_LONG_VERSION.tgz | tar -xzf - -C /usr/local/mklml \\\n && MKLDNN_STRING=mkl-dnn-${MKLDNN_VERSION} \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/mkl-dnn-$MKLDNN_VERSION.tar.gz | tar -xzf - \\\n && cd ${MKLDNN_STRING} \\\n && ln -s /usr/local external \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/ \\\n && make \\\n && make install DESTDIR=/usr/local \\\n && make install DESTDIR=/usr/local/mklml/${MKLDNN_LONG_VERSION} \\\n && cd ../.. \\\n && rm -rf ${MKLDNN_STRING}\n#  Install Kaldi\nARG KALDI_VERSION=c024e8aa\nARG KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION\nRUN mv /bin/sh /bin/sh.orig \\\n && ln -s -f /bin/bash /bin/sh \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/kaldi/$KALDI_VERSION/kaldi-$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH \\\n && cd tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && ./extras/check_dependencies.sh \\\n && make -j $( nproc ;) all \\\n && cd ../src \\\n && perl -pi -e 's/-gencode arch=compute_20,code=sm_20//' cudamatrix/Makefile \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && mv -f /bin/sh.orig /bin/sh\n# # PYTHON\n#  Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#  Swig\nARG SWIG_VERSION=3.0.10\nARG CACHEBUST=1\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/swig/$SWIG_VERSION/swig-$SWIG_VERSION.tar.gz -O - | tar xvfz - \\\n && cd swig-$SWIG_VERSION \\\n && ./configure --prefix=/usr/local/swig-$SWIG_VERSION --without-perl5 --without-alllang \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-$SWIG_VERSION\nCOPY ./Patches /tmp/patches\nRUN /tmp/patches/patch_swig.sh /usr/local/share/swig/3.0.10 \\\n && rm -rfd /tmp/patches\n#  .NET Core SDK\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/packages-microsoft-prod/deb/packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && apt-get install apt-transport-https -y -f \\\n && apt-get update -y \\\n && apt-get install dotnet-sdk-2.1 -y -f \\\n && rm ./packages-microsoft-prod.deb\n#  Anaconda\nARG ANACONDA_VERSION=4.2.0\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/anaconda3/$ANACONDA_VERSION/Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh \\\n && bash Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh -b \\\n && rm Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh\nRUN CONDA_ENV_PATH=/tmp/conda-linux-cntk-py35-environment.yml ; wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O \"$CONDA_ENV_PATH\" \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35 --file \"$CONDA_ENV_PATH\" \\\n && rm -f \"$CONDA_ENV_PATH\"\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nWORKDIR /cntk\n#  Build CNTK\nRUN git clone --depth=1 --recursive -b $COMMIT https://github.com/Microsoft/CNTK.git cntksrc \\\n && cd cntksrc \\\n && MKLML_VERSION_DETAIL=${MKLDNN_LONG_VERSION} \\\n && CONFIGURE_OPTS=\" --with-kaldi=${KALDI_PATH} --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/mklml/${MKLML_VERSION_DETAIL} \\\n && make -j\"$( nproc ;)\" all\nRUN cd cntksrc/Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd cntksrc/Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/cntksrc/build/gpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/cntksrc/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/cntksrc/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#  Install CNTK as the default backend for Keras\nENV KERAS_BACKEND=\"cntk\"\n","injectedSmells":[],"originalDockerfileHash":"45200e82a9a6cc9547903c1c896f683c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   CNTK Dockerfile\n#     CPU only\n#     No 1-bit SGD\n#\n#   To build, run from the parent with the command line:\n#   \tdocker build -t <image name> -f CNTK-CPUOnly-Image/Dockerfile .\nFROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev build-essential git g++-multilib gcc-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev libssl-dev openssl ca-certificates curl libcurl4-openssl-dev unzip python-dev automake libtool-bin autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-8-jdk libpcre3-dev libgdiplus apt-transport-https -y \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_DOWNLOAD_VERSION=3.11\nARG CMAKE_BUILD_VERSION=4\nRUN DEBIAN_FRONTEND=noninteractive \\\n && wget --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/cmake/$CMAKE_DOWNLOAD_VERSION/cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && tar -xzvf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION.tar.gz \\\n && cd cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION \\\n && ./bootstrap --system-curl -- -DCMAKE_USE_OPENSSL=ON \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_DOWNLOAD_VERSION.$CMAKE_BUILD_VERSION\nARG OPENMPI_VERSION=1.10.7\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openmpi/$OPENMPI_VERSION/openmpi-$OPENMPI_VERSION.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && apt-get update -y \\\n && apt-get install -y -f \\\n && apt-get install libsysfs2 libsysfs-dev -y \\\n && ./configure --with-verbs --with-cuda=/usr/local/cuda --prefix=/usr/local/mpi \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nARG LIBZIP_VERSION=1.1.2\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/libzip/$LIBZIP_VERSION/libzip-$LIBZIP_VERSION.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nARG OPENCV_VERSION=3.1.0\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/opencv/$OPENCV_VERSION/opencv-$OPENCV_VERSION.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf opencv-${OPENCV_VERSION}\nARG OPENBLAS_VERSION=0.2.18\nRUN wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/openblas/$OPENBLAS_VERSION/OpenBLAS-$OPENBLAS_VERSION.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j 2 MAKE_NB_JOBS=0 USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && cd .. \\\n && rm -rf OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#   Install Boost\nARG BOOST_VERSION=1.60.0\nRUN BOOST_UNDERSCORE_VERSION=$( echo $BOOST_VERSION | tr . _ ;) \\\n && wget -q -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/boost/$BOOST_VERSION/boost_$BOOST_UNDERSCORE_VERSION.tar.gz | tar -xzf - \\\n && cd boost_${BOOST_UNDERSCORE_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_VERSION} \\\n && ./b2 -d0 -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf boost_${BOOST_UNDERSCORE_VERSION}\n#   Install Protobuf\nARG PROTOBUF_VERSION=3.1.0\nRUN PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/protobuf/$PROTOBUF_VERSION/protobuf-$PROTOBUF_VERSION.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   Install MKLDNN and MKLML\nARG MKLDNN_VERSION=0.14\nARG MKLDNN_LONG_VERSION=mklml_lnx_2018.0.3.20180406\nRUN mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/$MKLDNN_LONG_VERSION.tgz | tar -xzf - -C /usr/local/mklml \\\n && MKLDNN_STRING=mkl-dnn-${MKLDNN_VERSION} \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/mkl-dnn/$MKLDNN_VERSION/mkl-dnn-$MKLDNN_VERSION.tar.gz | tar -xzf - \\\n && cd ${MKLDNN_STRING} \\\n && ln -s /usr/local external \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/ \\\n && make \\\n && make install DESTDIR=/usr/local \\\n && make install DESTDIR=/usr/local/mklml/${MKLDNN_LONG_VERSION} \\\n && cd ../.. \\\n && rm -rf ${MKLDNN_STRING}\n#   Install Kaldi\nARG KALDI_VERSION=c024e8aa\nARG KALDI_PATH=/usr/local/kaldi-$KALDI_VERSION\nRUN mv /bin/sh /bin/sh.orig \\\n && ln -s -f /bin/bash /bin/sh \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/kaldi/$KALDI_VERSION/kaldi-$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH \\\n && cd tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && ./extras/check_dependencies.sh \\\n && make -j $( nproc ;) all \\\n && cd ../src \\\n && perl -pi -e 's/-gencode arch=compute_20,code=sm_20//' cudamatrix/Makefile \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && mv -f /bin/sh.orig /bin/sh\n#  # PYTHON\n#   Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#   Swig\nARG SWIG_VERSION=3.0.10\nARG CACHEBUST=1\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/swig/$SWIG_VERSION/swig-$SWIG_VERSION.tar.gz -O - | tar xvfz - \\\n && cd swig-$SWIG_VERSION \\\n && ./configure --prefix=/usr/local/swig-$SWIG_VERSION --without-perl5 --without-alllang \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-$SWIG_VERSION\nCOPY ./Patches /tmp/patches\nRUN /tmp/patches/patch_swig.sh /usr/local/share/swig/3.0.10 \\\n && rm -rfd /tmp/patches\n#   .NET Core SDK\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/packages-microsoft-prod/deb/packages-microsoft-prod.deb \\\n && dpkg -i packages-microsoft-prod.deb \\\n && apt-get install apt-transport-https -y -f \\\n && apt-get update -y \\\n && apt-get install dotnet-sdk-2.1 -y -f \\\n && rm ./packages-microsoft-prod.deb\n#   Anaconda\nARG ANACONDA_VERSION=4.2.0\nRUN wget -q https://cntkbuildstorage.blob.core.windows.net/cntk-ci-dependencies/anaconda3/$ANACONDA_VERSION/Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh \\\n && bash Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh -b \\\n && rm Anaconda3-$ANACONDA_VERSION-Linux-x86_64.sh\nRUN CONDA_ENV_PATH=/tmp/conda-linux-cntk-py35-environment.yml ; wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O \"$CONDA_ENV_PATH\" \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35 --file \"$CONDA_ENV_PATH\" \\\n && rm -f \"$CONDA_ENV_PATH\"\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nWORKDIR /cntk\n#   Build CNTK\nRUN git clone --depth=1 --recursive -b $COMMIT https://github.com/Microsoft/CNTK.git cntksrc \\\n && cd cntksrc \\\n && MKLML_VERSION_DETAIL=${MKLDNN_LONG_VERSION} \\\n && CONFIGURE_OPTS=\" --with-kaldi=${KALDI_PATH} --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/mklml/${MKLML_VERSION_DETAIL} \\\n && make -j\"$( nproc ;)\" all\nRUN cd cntksrc/Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd cntksrc/Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/cntksrc/build/gpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/cntksrc/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/cntksrc/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   Install CNTK as the default backend for Keras\nENV KERAS_BACKEND=\"cntk\"\n","originalDockerfileUglifiedHash":"8d4e0701ea9151095a092a2884f029f5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7e9b509916e821b2dc17af8a58afae84e31a1cea.dockerfile"}