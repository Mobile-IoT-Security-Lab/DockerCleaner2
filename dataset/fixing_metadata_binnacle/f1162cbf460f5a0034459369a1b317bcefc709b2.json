{"seed":1435925508,"processedDockerfileHash":"f2807fc33bc95a272f3fae21a80ccc08","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   gibson graphical sample provided with the CUDA toolkit.\n#   docker build -t gibson .\n#   docker run --runtime=nvidia -ti --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix gibson\nFROM nvidia/cudagl:9.0-base-ubuntu16.04\nARG TURBOVNC_VERSION=2.1.2\nARG VIRTUALGL_VERSION=2.5.2\nARG LIBJPEG_VERSION=1.5.2\nARG WEBSOCKIFY_VERSION=0.8.0\nARG NOVNC_VERSION=1.0.0-beta\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl gcc libc6-dev libglu1 libglu1:i386 libsm6 libxv1 libxv1:i386 make python python-numpy x11-xkb-utils xauth xfonts-base xkb-data -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN cd /tmp \\\n && curl -fsSL -O https://svwh.dl.sourceforge.net/project/turbovnc/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/libjpeg-turbo/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb \\\n && dpkg -i *.deb \\\n && rm -f /tmp/*.deb \\\n && sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver\nENV PATH=\"${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin\"\nRUN curl -fsSL https://github.com/novnc/noVNC/archive/v${NOVNC_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && curl -fsSL https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && mv /opt/noVNC-${NOVNC_VERSION} /opt/noVNC \\\n && mv /opt/websockify-${WEBSOCKIFY_VERSION} /opt/websockify \\\n && ln -s /opt/noVNC/vnc_lite.html /opt/noVNC/index.html \\\n && cd /opt/websockify \\\n && make\nRUN echo 'no-remote-connections\\nno-httpd\\nno-x11-tcp-connections\\nno-pam-sessions\\npermitted-security-types = otp' > /etc/turbovncserver-security.conf\nEXPOSE 5901/tcp\nENV DISPLAY=\":1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-samples-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/cuda/samples/5_Simulations/nbody\nRUN make\n#  CMD ./nbody\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl -y\n#   Install miniconda to /miniconda\nRUN curl -LO http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh\nRUN bash Miniconda-latest-Linux-x86_64.sh -p /miniconda -b\nRUN rm Miniconda-latest-Linux-x86_64.sh\nENV PATH=\"/miniconda/bin:${PATH}\"\nRUN conda update -y conda\nRUN conda create -y -n py35 python=3.5\n#   Python packages from conda\nENV PATH=\"/miniconda/envs/py35/bin:$PATH\"\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install torchvision==0.2.0\nRUN pip install tensorflow==1.3\nWORKDIR /root\nRUN apt-get install --no-install-recommends git build-essential cmake libopenmpi-dev -y\nRUN apt-get install --no-install-recommends zlib1g-dev tmux -y\nRUN git clone https://github.com/fxia22/baselines.git \\\n && pip install -e baselines\nRUN apt-get update \\\n && apt-get install --no-install-recommends libglew-dev libglm-dev libassimp-dev xorg-dev libglu1-mesa-dev libboost-dev mesa-common-dev freeglut3-dev libopenmpi-dev cmake golang libjpeg-turbo8-dev wmctrl xdotool -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/cache/apk/*\nRUN apt-get install --no-install-recommends vim wget unzip -y\nRUN apt-get install --no-install-recommends libzmq3-dev -y\nCOPY . /root/mount/gibson\nWORKDIR /root/mount/gibson\nRUN bash build.sh build_local\nRUN pip install -e .\nENV QT_X11_NO_MITSHM=\"1\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  gibson graphical sample provided with the CUDA toolkit.\n#  docker build -t gibson .\n#  docker run --runtime=nvidia -ti --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix gibson\nFROM nvidia/cudagl:9.0-base-ubuntu16.04\nARG TURBOVNC_VERSION=2.1.2\nARG VIRTUALGL_VERSION=2.5.2\nARG LIBJPEG_VERSION=1.5.2\nARG WEBSOCKIFY_VERSION=0.8.0\nARG NOVNC_VERSION=1.0.0-beta\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl gcc libc6-dev libglu1 libglu1:i386 libsm6 libxv1 libxv1:i386 make python python-numpy x11-xkb-utils xauth xfonts-base xkb-data -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN cd /tmp \\\n && curl -fsSL -O https://svwh.dl.sourceforge.net/project/turbovnc/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/libjpeg-turbo/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb \\\n && dpkg -i *.deb \\\n && rm -f /tmp/*.deb \\\n && sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver\nENV PATH=\"${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin\"\nRUN curl -fsSL https://github.com/novnc/noVNC/archive/v${NOVNC_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && curl -fsSL https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && mv /opt/noVNC-${NOVNC_VERSION} /opt/noVNC \\\n && mv /opt/websockify-${WEBSOCKIFY_VERSION} /opt/websockify \\\n && ln -s /opt/noVNC/vnc_lite.html /opt/noVNC/index.html \\\n && cd /opt/websockify \\\n && make\nRUN echo 'no-remote-connections\\nno-httpd\\nno-x11-tcp-connections\\nno-pam-sessions\\npermitted-security-types = otp' > /etc/turbovncserver-security.conf\nEXPOSE 5901/tcp\nENV DISPLAY=\":1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-samples-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/cuda/samples/5_Simulations/nbody\nRUN make\n# CMD ./nbody\nRUN apt-get update \\\n && apt-get install curl -y\n#  Install miniconda to /miniconda\nRUN curl -LO http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh\nRUN bash Miniconda-latest-Linux-x86_64.sh -p /miniconda -b\nRUN rm Miniconda-latest-Linux-x86_64.sh\nENV PATH=\"/miniconda/bin:${PATH}\"\nRUN conda update -y conda\nRUN conda create -y -n py35 python=3.5\n#  Python packages from conda\nENV PATH=\"/miniconda/envs/py35/bin:$PATH\"\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install torchvision==0.2.0\nRUN pip install tensorflow==1.3\nWORKDIR /root\nRUN apt-get install git build-essential cmake libopenmpi-dev -y\nRUN apt-get install zlib1g-dev tmux -y\nRUN git clone https://github.com/fxia22/baselines.git \\\n && pip install -e baselines\nRUN apt-get update \\\n && apt-get install libglew-dev libglm-dev libassimp-dev xorg-dev libglu1-mesa-dev libboost-dev mesa-common-dev freeglut3-dev libopenmpi-dev cmake golang libjpeg-turbo8-dev wmctrl xdotool -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/cache/apk/*\nRUN apt-get install vim wget unzip -y\nRUN apt-get install libzmq3-dev -y\nADD . /root/mount/gibson\nWORKDIR /root/mount/gibson\nRUN bash build.sh build_local\nRUN pip install -e .\nENV QT_X11_NO_MITSHM=\"1\"\n","injectedSmells":[],"originalDockerfileHash":"cc6d297f8b5b3fba4891731c55967c04","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   gibson graphical sample provided with the CUDA toolkit.\n#   docker build -t gibson .\n#   docker run --runtime=nvidia -ti --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix gibson\nFROM nvidia/cudagl:9.0-base-ubuntu16.04\nARG TURBOVNC_VERSION=2.1.2\nARG VIRTUALGL_VERSION=2.5.2\nARG LIBJPEG_VERSION=1.5.2\nARG WEBSOCKIFY_VERSION=0.8.0\nARG NOVNC_VERSION=1.0.0-beta\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl gcc libc6-dev libglu1 libglu1:i386 libsm6 libxv1 libxv1:i386 make python python-numpy x11-xkb-utils xauth xfonts-base xkb-data -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN cd /tmp \\\n && curl -fsSL -O https://svwh.dl.sourceforge.net/project/turbovnc/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/libjpeg-turbo/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb -O https://svwh.dl.sourceforge.net/project/virtualgl/${VIRTUALGL_VERSION}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb \\\n && dpkg -i *.deb \\\n && rm -f /tmp/*.deb \\\n && sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver\nENV PATH=\"${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin\"\nRUN curl -fsSL https://github.com/novnc/noVNC/archive/v${NOVNC_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && curl -fsSL https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xzf - -C /opt \\\n && mv /opt/noVNC-${NOVNC_VERSION} /opt/noVNC \\\n && mv /opt/websockify-${WEBSOCKIFY_VERSION} /opt/websockify \\\n && ln -s /opt/noVNC/vnc_lite.html /opt/noVNC/index.html \\\n && cd /opt/websockify \\\n && make\nRUN echo 'no-remote-connections\\nno-httpd\\nno-x11-tcp-connections\\nno-pam-sessions\\npermitted-security-types = otp' > /etc/turbovncserver-security.conf\nEXPOSE 5901/tcp\nENV DISPLAY=\":1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-samples-$CUDA_PKG_VERSION -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/cuda/samples/5_Simulations/nbody\nRUN make\n#  CMD ./nbody\nRUN apt-get update \\\n && apt-get install curl -y\n#   Install miniconda to /miniconda\nRUN curl -LO http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh\nRUN bash Miniconda-latest-Linux-x86_64.sh -p /miniconda -b\nRUN rm Miniconda-latest-Linux-x86_64.sh\nENV PATH=\"/miniconda/bin:${PATH}\"\nRUN conda update -y conda\nRUN conda create -y -n py35 python=3.5\n#   Python packages from conda\nENV PATH=\"/miniconda/envs/py35/bin:$PATH\"\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install torchvision==0.2.0\nRUN pip install tensorflow==1.3\nWORKDIR /root\nRUN apt-get install git build-essential cmake libopenmpi-dev -y\nRUN apt-get install zlib1g-dev tmux -y\nRUN git clone https://github.com/fxia22/baselines.git \\\n && pip install -e baselines\nRUN apt-get update \\\n && apt-get install libglew-dev libglm-dev libassimp-dev xorg-dev libglu1-mesa-dev libboost-dev mesa-common-dev freeglut3-dev libopenmpi-dev cmake golang libjpeg-turbo8-dev wmctrl xdotool -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/cache/apk/*\nRUN apt-get install vim wget unzip -y\nRUN apt-get install libzmq3-dev -y\nADD . /root/mount/gibson\nWORKDIR /root/mount/gibson\nRUN bash build.sh build_local\nRUN pip install -e .\nENV QT_X11_NO_MITSHM=\"1\"\n","originalDockerfileUglifiedHash":"68348ed340f5982883b8446d8cb547e0","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f1162cbf460f5a0034459369a1b317bcefc709b2.dockerfile"}