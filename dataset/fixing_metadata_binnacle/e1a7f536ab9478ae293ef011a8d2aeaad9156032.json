{"seed":3423447828,"processedDockerfileHash":"a56bab27c59c01d64e5854f2dbde83bc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Use the standard Nginx image from Docker Hub\n#  FROM nginx\n#   based on the original stable alpine image\n#   https://github.com/nginxinc/docker-nginx/blob/014e624239987a0a46bee5b44088a8c5150bf0bb/stable/alpine/Dockerfile\nFROM alpine:3.6\nENV NGINX_VERSION=\"1.12.1\"\nENV NGINX_STICKY_MODULE_NG_VERSION=\"08a395c66e42\"\nENV NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION=\"master\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-file-aio --with-http_v2_module --with-ipv6 --add-module=/usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION --add-module=/usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add gcc=6.3.0-r4 libc-dev=0.7.1-r0 make=4.2.1-r0 openssl-dev=1.0.2r-r0 pcre-dev=8.41-r0 zlib-dev=1.2.11-r0 linux-headers=4.4.6-r2 curl=7.61.1-r2 gnupg=2.1.20-r1 libxslt-dev=1.1.29-r4 gd-dev=2.2.5-r3 geoip-dev=1.6.10-r0 perl-dev=5.24.4-r2 --no-cache --virtual .build-deps \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/$NGINX_STICKY_MODULE_NG_VERSION.tar.gz -o nginx-sticky-module-ng.tar.gz \\\n && curl -fSL https://github.com/GUI/nginx-upstream-dynamic-servers/archive/$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION.tar.gz -o nginx-upstream-dynamic-servers.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f nginx-sticky-module-ng.tar.gz \\\n && tar -zxC /usr/src -f nginx-upstream-dynamic-servers.tar.gz \\\n && rm nginx.tar.gz \\\n && rm nginx-sticky-module-ng.tar.gz \\\n && rm nginx-upstream-dynamic-servers.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION \\\n && rm -rf /usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \\\n && apk add gettext=0.19.8.1-r1 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   Copy the configuration file from the current directory and paste \n#   it inside the container to use it as Nginx's default config.\nCOPY nginx.conf /etc/nginx/nginx.conf\n#   Port 8080 of the container will be exposed and then mapped to port\n#   8080 of our host machine via Compose. This way we'll be able to \n#   access the server via localhost:8080 on our host.\nEXPOSE 80/tcp 443/tcp\n#   Start Nginx when the container has provisioned.\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Use the standard Nginx image from Docker Hub\n# FROM nginx\n#  based on the original stable alpine image\n#  https://github.com/nginxinc/docker-nginx/blob/014e624239987a0a46bee5b44088a8c5150bf0bb/stable/alpine/Dockerfile\nFROM alpine:3.6\nENV NGINX_VERSION=\"1.12.1\"\nENV NGINX_STICKY_MODULE_NG_VERSION=\"08a395c66e42\"\nENV NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION=\"master\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-file-aio --with-http_v2_module --with-ipv6 --add-module=/usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION --add-module=/usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/$NGINX_STICKY_MODULE_NG_VERSION.tar.gz -o nginx-sticky-module-ng.tar.gz \\\n && curl -fSL https://github.com/GUI/nginx-upstream-dynamic-servers/archive/$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION.tar.gz -o nginx-upstream-dynamic-servers.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f nginx-sticky-module-ng.tar.gz \\\n && tar -zxC /usr/src -f nginx-upstream-dynamic-servers.tar.gz \\\n && rm nginx.tar.gz \\\n && rm nginx-sticky-module-ng.tar.gz \\\n && rm nginx-upstream-dynamic-servers.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION \\\n && rm -rf /usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#  Copy the configuration file from the current directory and paste \n#  it inside the container to use it as Nginx's default config.\nCOPY nginx.conf /etc/nginx/nginx.conf\n#  Port 8080 of the container will be exposed and then mapped to port\n#  8080 of our host machine via Compose. This way we'll be able to \n#  access the server via localhost:8080 on our host.\nEXPOSE 80/tcp 443/tcp\n#  Start Nginx when the container has provisioned.\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"952bf5325ac6b44c52419e8dcc0dab14","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Use the standard Nginx image from Docker Hub\n#  FROM nginx\n#   based on the original stable alpine image\n#   https://github.com/nginxinc/docker-nginx/blob/014e624239987a0a46bee5b44088a8c5150bf0bb/stable/alpine/Dockerfile\nFROM alpine:3.6\nENV NGINX_VERSION=\"1.12.1\"\nENV NGINX_STICKY_MODULE_NG_VERSION=\"08a395c66e42\"\nENV NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION=\"master\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-file-aio --with-http_v2_module --with-ipv6 --add-module=/usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION --add-module=/usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && curl -fSL https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/$NGINX_STICKY_MODULE_NG_VERSION.tar.gz -o nginx-sticky-module-ng.tar.gz \\\n && curl -fSL https://github.com/GUI/nginx-upstream-dynamic-servers/archive/$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION.tar.gz -o nginx-upstream-dynamic-servers.tar.gz \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && tar -zxC /usr/src -f nginx-sticky-module-ng.tar.gz \\\n && tar -zxC /usr/src -f nginx-upstream-dynamic-servers.tar.gz \\\n && rm nginx.tar.gz \\\n && rm nginx-sticky-module-ng.tar.gz \\\n && rm nginx-upstream-dynamic-servers.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/nginx-goodies-nginx-sticky-module-ng-$NGINX_STICKY_MODULE_NG_VERSION \\\n && rm -rf /usr/src/nginx-upstream-dynamic-servers-$NGINX_UPSTREAM_DYNAMIC_SERVERS_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   Copy the configuration file from the current directory and paste \n#   it inside the container to use it as Nginx's default config.\nCOPY nginx.conf /etc/nginx/nginx.conf\n#   Port 8080 of the container will be exposed and then mapped to port\n#   8080 of our host machine via Compose. This way we'll be able to \n#   access the server via localhost:8080 on our host.\nEXPOSE 80/tcp 443/tcp\n#   Start Nginx when the container has provisioned.\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"d031e99367e6971a8debdb5a8232607a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e1a7f536ab9478ae293ef011a8d2aeaad9156032.dockerfile"}