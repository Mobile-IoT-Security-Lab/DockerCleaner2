{"seed":518234612,"processedDockerfileHash":"7a5154d4ac25d77678731c111a821d8c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2017 Intel Corporation\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   ------------------------------------------------------------------------------\n#   Description:\n#     Build Private Data Objects.\n#\n#    Configuration (build) paramaters\n#    - proxy configuration: \t\t\thttps_proxy http_proxy ftp_proxy  (default: undefined)\n#    - base image with pdo dev environ: \t\tPDO_DEV_IMAGE (default: pdo-dev)\n#      (presumably built from Dockerfile.pde-dev)\n#    - sgx-mode:\t\t\t\t\tSGX_MODE (default: SIM)\n#    - pdo repo to use:\t\t\t\tPDO_REPO_URL  (default: https://github.com/hyperledger-labs/private-data-objects.git)\n#    - pdo repo branch to use:\t\t\tPDO_REPO_BRANCH (default: master)\n#    - build in debug mode:\t\t\tPDO_DEBUG_BUILD (default: 0)\n#   Build:\n#     $ docker build -f docker/Dockerfile.pdo-build -t pdo-build docker\n#     if behind a proxy, you might want to add also below options\n#     --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy\n#     if you want to build with different version than from pdo-dev, add a build arg PDO_DEV_IMAGE e.g., --build-arg PDO_DEV_IMAGE=pdo-build-xenial\n#     similarly, add --build-arg for any of the other above-listed configuration parameters\n#     if you want to build with the source locally commented, then use root-directory of\n#     source tree as context directory and add '--build-arg PDO_REPO_URL=file:///tmp/build-src/.git', e.g.,\n#        docker build -f docker/Dockerfile.pdo-dev -t pdo-build --build-arg PDO_REPO_URL=file:///tmp/build-src/.git .\n#\n#   Run:\n#     $ cd <directory where you checked out private-data-objects>\n#     $ docker run -it pdo-build\n#     Notes:\n#     - if built with SGX_MODE=HW, then you will have to run image on hw with SGX support and\n#       add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#       Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#       or the PSW/aesmd might cause enclave launch problems\n#     - if behind a proxy, you might want to add also below options\n#       --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy\n#     - Regardless of SGX_MODE, we build with the default fake SGX values and some\n#       default PDO_LEDGER_URL (http://rest-api:8008). If these are different at runtime, e.g.,\n#       because the ledger changes and/or you run in SGX HW mode and your sgx keys are at a\n#       different place and not mapped via docker volumes to the default location\n#       '/project/pdo/src/private-data-objects/build/keys/sgx_mode_${SGX_MODE,,}'\n#       you will have to\n#       - PDO_SGX_KEY_ROOT env var pointing to the directory with the actual files and/or\n#         PDO_LEDGER_URL properly configured ..\n#       - unset PDO_SPID PDO_SPID_API_KEY\n#       - call 'source /project/pdo/src/private-data-objects/build/common-config.sh'\n#       - run 'make -C /project/pdo/src/private-data-objects/build conf'\n#     - if you want to debug with gdb and alike, you also might want to add options\n#       '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#     - for develooping based on source in host you might map source into container with an option\n#       like -v $(pwd):/project/pdo/src/private-data-objects/\n#\nARG PDO_DEV_IMAGE=pdo-dev\n#   Get source of PDO and Sawtooth for the corresponding protobufs\n#   to allow using local development branch we copy whatever docker directory is passed\n#   (and so would contain .git if we call it as docker build . -f docker/.... which then\n#   can be used via PDO_REPO_BRANCH build-arg) but also do that via multi-stage so we don't load\n#   the whole stuff into the image itself.\nFROM ${PDO_DEV_IMAGE} AS source-extractor\nARG PDO_DEV_IMAGE=pdo-dev\n#   for bizare docker reason, we have to redefine it here .#..\nARG PDO_REPO_URL=https://github.com/hyperledger-labs/private-data-objects.git\nARG PDO_REPO_BRANCH=master\nRUN mkdir /tmp/build-src\nCOPY . /tmp/build-src\nWORKDIR /project/pdo/\nRUN mkdir src \\\n && cd src \\\n && git clone --single-branch --branch ${PDO_REPO_BRANCH} ${PDO_REPO_URL} private-data-objects\n#   Build ..\nFROM ${PDO_DEV_IMAGE}\nCOPY --from=source-extractor /project/pdo /project/pdo\nARG SGX_MODE=SIM\nENV SGX_MODE=\"${SGX_MODE}\"\nARG PDO_DEBUG_BUILD=0\nENV PDO_DEBUG_BUILD=\"${PDO_DEBUG_BUILD}\"\nRUN . /etc/profile.d/pdo.sh \\\n && echo \"export SGX_MODE=${SGX_MODE}\" >> /etc/profile.d/pdo.sh \\\n && export PDO_LEDGER_URL=http://rest-api:8008 \\\n && `/project/pdo/src/private-data-objects/build/common-config.sh -e ` \\\n && env | grep PDO | egrep -v 'PDO_ENCLAVE_CODE_SIGN_PEM|PDO_INSTALL_ROOT|PDO_HOME' | sed 's/^PDO/export PDO/g' >> /etc/profile.d/pdo.sh \\\n && make -C /project/pdo/src/private-data-objects/build/ NO_SGX_RUN_DURING_BUILD=true \\\n && echo '. /project/pdo/build/bin/activate' >> /etc/profile.d/pdo.sh \\\n && . /project/pdo/build/bin/activate \\\n && cd /project/pdo/src/private-data-objects \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python \\\n && python3 setup.py build_ext \\\n && python3 setup.py install \\\n && cd ../sawtooth \\\n && python3 setup.py install \\\n && cd /project/pdo/src/private-data-objects/eservice/ \\\n && sed -i 's/python /python3 /g' Makefile \\\n && make \\\n && make install \\\n && python3 setup.py install \\\n && cd .. \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python/ \\\n && python3 setup.py install\n#   TODO (eventually): clean-up /project/pdo/src (but for now keep it as some tests are still there ...)\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2017 Intel Corporation\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ------------------------------------------------------------------------------\n#  Description:\n#    Build Private Data Objects.\n#\n#   Configuration (build) paramaters\n#   - proxy configuration: \t\t\thttps_proxy http_proxy ftp_proxy  (default: undefined)\n#   - base image with pdo dev environ: \t\tPDO_DEV_IMAGE (default: pdo-dev)\n#     (presumably built from Dockerfile.pde-dev)\n#   - sgx-mode:\t\t\t\t\tSGX_MODE (default: SIM)\n#   - pdo repo to use:\t\t\t\tPDO_REPO_URL  (default: https://github.com/hyperledger-labs/private-data-objects.git)\n#   - pdo repo branch to use:\t\t\tPDO_REPO_BRANCH (default: master)\n#   - build in debug mode:\t\t\tPDO_DEBUG_BUILD (default: 0)\n#  Build:\n#    $ docker build -f docker/Dockerfile.pdo-build -t pdo-build docker\n#    if behind a proxy, you might want to add also below options\n#    --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy\n#    if you want to build with different version than from pdo-dev, add a build arg PDO_DEV_IMAGE e.g., --build-arg PDO_DEV_IMAGE=pdo-build-xenial\n#    similarly, add --build-arg for any of the other above-listed configuration parameters\n#    if you want to build with the source locally commented, then use root-directory of\n#    source tree as context directory and add '--build-arg PDO_REPO_URL=file:///tmp/build-src/.git', e.g.,\n#       docker build -f docker/Dockerfile.pdo-dev -t pdo-build --build-arg PDO_REPO_URL=file:///tmp/build-src/.git .\n#\n#  Run:\n#    $ cd <directory where you checked out private-data-objects>\n#    $ docker run -it pdo-build\n#    Notes:\n#    - if built with SGX_MODE=HW, then you will have to run image on hw with SGX support and\n#      add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#      Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#      or the PSW/aesmd might cause enclave launch problems\n#    - if behind a proxy, you might want to add also below options\n#      --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy\n#    - Regardless of SGX_MODE, we build with the default fake SGX values and some\n#      default PDO_LEDGER_URL (http://rest-api:8008). If these are different at runtime, e.g.,\n#      because the ledger changes and/or you run in SGX HW mode and your sgx keys are at a\n#      different place and not mapped via docker volumes to the default location\n#      '/project/pdo/src/private-data-objects/build/keys/sgx_mode_${SGX_MODE,,}'\n#      you will have to\n#      - PDO_SGX_KEY_ROOT env var pointing to the directory with the actual files and/or\n#        PDO_LEDGER_URL properly configured ..\n#      - unset PDO_SPID PDO_SPID_API_KEY\n#      - call 'source /project/pdo/src/private-data-objects/build/common-config.sh'\n#      - run 'make -C /project/pdo/src/private-data-objects/build conf'\n#    - if you want to debug with gdb and alike, you also might want to add options\n#      '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#    - for develooping based on source in host you might map source into container with an option\n#      like -v $(pwd):/project/pdo/src/private-data-objects/\n#\nARG PDO_DEV_IMAGE=pdo-dev\n#  Get source of PDO and Sawtooth for the corresponding protobufs\n#  to allow using local development branch we copy whatever docker directory is passed\n#  (and so would contain .git if we call it as docker build . -f docker/.... which then\n#  can be used via PDO_REPO_BRANCH build-arg) but also do that via multi-stage so we don't load\n#  the whole stuff into the image itself.\nFROM ${PDO_DEV_IMAGE} AS source-extractor\nARG PDO_DEV_IMAGE=pdo-dev\n#  for bizare docker reason, we have to redefine it here .#..\nARG PDO_REPO_URL=https://github.com/hyperledger-labs/private-data-objects.git\nARG PDO_REPO_BRANCH=master\nRUN mkdir /tmp/build-src\nCOPY . /tmp/build-src\nWORKDIR /project/pdo/\nRUN mkdir src \\\n && cd src \\\n && git clone --single-branch --branch ${PDO_REPO_BRANCH} ${PDO_REPO_URL} private-data-objects\n#  Build ..\nFROM ${PDO_DEV_IMAGE}\nCOPY --from=source-extractor /project/pdo /project/pdo\nARG SGX_MODE=SIM\nENV SGX_MODE=\"${SGX_MODE}\"\nARG PDO_DEBUG_BUILD=0\nENV PDO_DEBUG_BUILD=\"${PDO_DEBUG_BUILD}\"\nRUN . /etc/profile.d/pdo.sh \\\n && echo \"export SGX_MODE=${SGX_MODE}\" >> /etc/profile.d/pdo.sh \\\n && export PDO_LEDGER_URL=http://rest-api:8008 \\\n && `/project/pdo/src/private-data-objects/build/common-config.sh -e ` \\\n && env | grep PDO | egrep -v 'PDO_ENCLAVE_CODE_SIGN_PEM|PDO_INSTALL_ROOT|PDO_HOME' | sed 's/^PDO/export PDO/g' >> /etc/profile.d/pdo.sh \\\n && make -C /project/pdo/src/private-data-objects/build/ NO_SGX_RUN_DURING_BUILD=true \\\n && echo '. /project/pdo/build/bin/activate' >> /etc/profile.d/pdo.sh \\\n && . /project/pdo/build/bin/activate \\\n && cd /project/pdo/src/private-data-objects \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python \\\n && python3 setup.py build_ext \\\n && python3 setup.py install \\\n && cd ../sawtooth \\\n && python3 setup.py install \\\n && cd /project/pdo/src/private-data-objects/eservice/ \\\n && sed -i 's/python /python3 /g' Makefile \\\n && make \\\n && make install \\\n && python3 setup.py install \\\n && cd .. \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python/ \\\n && python3 setup.py install\n#  TODO (eventually): clean-up /project/pdo/src (but for now keep it as some tests are still there ...)\n","injectedSmells":[],"originalDockerfileHash":"b5fe788110f67729105ee6ce1ee3a1f4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2017 Intel Corporation\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   ------------------------------------------------------------------------------\n#   Description:\n#     Build Private Data Objects.\n#\n#    Configuration (build) paramaters\n#    - proxy configuration: \t\t\thttps_proxy http_proxy ftp_proxy  (default: undefined)\n#    - base image with pdo dev environ: \t\tPDO_DEV_IMAGE (default: pdo-dev)\n#      (presumably built from Dockerfile.pde-dev)\n#    - sgx-mode:\t\t\t\t\tSGX_MODE (default: SIM)\n#    - pdo repo to use:\t\t\t\tPDO_REPO_URL  (default: https://github.com/hyperledger-labs/private-data-objects.git)\n#    - pdo repo branch to use:\t\t\tPDO_REPO_BRANCH (default: master)\n#    - build in debug mode:\t\t\tPDO_DEBUG_BUILD (default: 0)\n#   Build:\n#     $ docker build -f docker/Dockerfile.pdo-build -t pdo-build docker\n#     if behind a proxy, you might want to add also below options\n#     --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy\n#     if you want to build with different version than from pdo-dev, add a build arg PDO_DEV_IMAGE e.g., --build-arg PDO_DEV_IMAGE=pdo-build-xenial\n#     similarly, add --build-arg for any of the other above-listed configuration parameters\n#     if you want to build with the source locally commented, then use root-directory of\n#     source tree as context directory and add '--build-arg PDO_REPO_URL=file:///tmp/build-src/.git', e.g.,\n#        docker build -f docker/Dockerfile.pdo-dev -t pdo-build --build-arg PDO_REPO_URL=file:///tmp/build-src/.git .\n#\n#   Run:\n#     $ cd <directory where you checked out private-data-objects>\n#     $ docker run -it pdo-build\n#     Notes:\n#     - if built with SGX_MODE=HW, then you will have to run image on hw with SGX support and\n#       add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#       Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#       or the PSW/aesmd might cause enclave launch problems\n#     - if behind a proxy, you might want to add also below options\n#       --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy\n#     - Regardless of SGX_MODE, we build with the default fake SGX values and some\n#       default PDO_LEDGER_URL (http://rest-api:8008). If these are different at runtime, e.g.,\n#       because the ledger changes and/or you run in SGX HW mode and your sgx keys are at a\n#       different place and not mapped via docker volumes to the default location\n#       '/project/pdo/src/private-data-objects/build/keys/sgx_mode_${SGX_MODE,,}'\n#       you will have to\n#       - PDO_SGX_KEY_ROOT env var pointing to the directory with the actual files and/or\n#         PDO_LEDGER_URL properly configured ..\n#       - unset PDO_SPID PDO_SPID_API_KEY\n#       - call 'source /project/pdo/src/private-data-objects/build/common-config.sh'\n#       - run 'make -C /project/pdo/src/private-data-objects/build conf'\n#     - if you want to debug with gdb and alike, you also might want to add options\n#       '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#     - for develooping based on source in host you might map source into container with an option\n#       like -v $(pwd):/project/pdo/src/private-data-objects/\n#\nARG PDO_DEV_IMAGE=pdo-dev\n#   Get source of PDO and Sawtooth for the corresponding protobufs\n#   to allow using local development branch we copy whatever docker directory is passed\n#   (and so would contain .git if we call it as docker build . -f docker/.... which then\n#   can be used via PDO_REPO_BRANCH build-arg) but also do that via multi-stage so we don't load\n#   the whole stuff into the image itself.\nFROM ${PDO_DEV_IMAGE} AS source-extractor\nARG PDO_DEV_IMAGE=pdo-dev\n#   for bizare docker reason, we have to redefine it here .#..\nARG PDO_REPO_URL=https://github.com/hyperledger-labs/private-data-objects.git\nARG PDO_REPO_BRANCH=master\nRUN mkdir /tmp/build-src\nCOPY . /tmp/build-src\nWORKDIR /project/pdo/\nRUN mkdir src \\\n && cd src \\\n && git clone --single-branch --branch ${PDO_REPO_BRANCH} ${PDO_REPO_URL} private-data-objects\n#   Build ..\nFROM ${PDO_DEV_IMAGE}\nCOPY --from=source-extractor /project/pdo /project/pdo\nARG SGX_MODE=SIM\nENV SGX_MODE=\"${SGX_MODE}\"\nARG PDO_DEBUG_BUILD=0\nENV PDO_DEBUG_BUILD=\"${PDO_DEBUG_BUILD}\"\nRUN . /etc/profile.d/pdo.sh \\\n && echo \"export SGX_MODE=${SGX_MODE}\" >> /etc/profile.d/pdo.sh \\\n && export PDO_LEDGER_URL=http://rest-api:8008 \\\n && `/project/pdo/src/private-data-objects/build/common-config.sh -e ` \\\n && env | grep PDO | egrep -v 'PDO_ENCLAVE_CODE_SIGN_PEM|PDO_INSTALL_ROOT|PDO_HOME' | sed 's/^PDO/export PDO/g' >> /etc/profile.d/pdo.sh \\\n && make -C /project/pdo/src/private-data-objects/build/ NO_SGX_RUN_DURING_BUILD=true \\\n && echo '. /project/pdo/build/bin/activate' >> /etc/profile.d/pdo.sh \\\n && . /project/pdo/build/bin/activate \\\n && cd /project/pdo/src/private-data-objects \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python \\\n && python3 setup.py build_ext \\\n && python3 setup.py install \\\n && cd ../sawtooth \\\n && python3 setup.py install \\\n && cd /project/pdo/src/private-data-objects/eservice/ \\\n && sed -i 's/python /python3 /g' Makefile \\\n && make \\\n && make install \\\n && python3 setup.py install \\\n && cd .. \\\n && sawtooth/bin/build_sawtooth_proto \\\n && cd python/ \\\n && python3 setup.py install\n#   TODO (eventually): clean-up /project/pdo/src (but for now keep it as some tests are still there ...)\n","originalDockerfileUglifiedHash":"5a79d94f7bfeb6b42989629b996136db","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ffc47d1951e1b336256a38493bc0fc7b5527027d.dockerfile"}