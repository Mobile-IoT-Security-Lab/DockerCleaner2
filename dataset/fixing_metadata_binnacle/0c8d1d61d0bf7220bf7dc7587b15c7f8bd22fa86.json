{"seed":688929786,"processedDockerfileHash":"184032db722094b5f681801f0454aba8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 cmake=3.5.1-1ubuntu3 g++=4:5.3.1-1ubuntu1 make=4.1-6 pkg-config=0.29.1-0ubuntu1 graphviz=2.38.0-12ubuntu2.1 doxygen=1.8.11-1ubuntu0.1 git=1:2.7.4-0ubuntu1.10 curl=7.47.0-1ubuntu2.19 libtool-bin=2.4.6-0.1 autoconf=2.69-9 automake=1:1.15-4ubuntu1 bzip2=1.0.6-8ubuntu0.2 --yes\nWORKDIR /usr/local\n#  Cmake\nARG CMAKE_VERSION=3.12.1\nARG CMAKE_VERSION_DOT=v3.12\nARG CMAKE_HASH=c53d5c2ce81d7a957ee83e3e635c8cda5dfe20c9d501a4828ee28e1615e57ab2\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#  # Boost\nARG BOOST_VERSION=1_68_0\nARG BOOST_VERSION_DOT=1.68.0\nARG BOOST_HASH=7f6130bc3cf65f56a618888ce9d5ea704fa10b462be126ad053e80e553d6d8b7\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.1.0h\nARG OPENSSL_HASH=5835626cde9e99656585fc7aaa2302a73a7e1340bf8c14fd635a62c66802a517\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.2.5\nARG ZMQ_HASH=d062edd8c142384792955796329baf1e5a3377cd\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_VERSION=v4.2.3\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#   runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#   Contains the blockchain\nVOLUME /root/.graft\n#   Generate your wallet via accessing the container and run:\n#   cd /wallet\n#   graft-wallet-cli\nVOLUME /wallet\nEXPOSE 18980/tcp\nEXPOSE 18981/tcp\nENTRYPOINT [\"graftnoded\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18980\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18981\", \"--non-interactive\", \"--confirm-external-bind\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Multistage docker build, requires docker 17.05\n#  builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake bzip2 --yes\nWORKDIR /usr/local\n# Cmake\nARG CMAKE_VERSION=3.12.1\nARG CMAKE_VERSION_DOT=v3.12\nARG CMAKE_HASH=c53d5c2ce81d7a957ee83e3e635c8cda5dfe20c9d501a4828ee28e1615e57ab2\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n# # Boost\nARG BOOST_VERSION=1_68_0\nARG BOOST_VERSION_DOT=1.68.0\nARG BOOST_HASH=7f6130bc3cf65f56a618888ce9d5ea704fa10b462be126ad053e80e553d6d8b7\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#  OpenSSL\nARG OPENSSL_VERSION=1.1.0h\nARG OPENSSL_HASH=5835626cde9e99656585fc7aaa2302a73a7e1340bf8c14fd635a62c66802a517\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#  ZMQ\nARG ZMQ_VERSION=v4.2.5\nARG ZMQ_HASH=d062edd8c142384792955796329baf1e5a3377cd\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#  zmq.hpp\nARG CPPZMQ_VERSION=v4.2.3\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#  Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#  Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#  runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#  Contains the blockchain\nVOLUME /root/.graft\n#  Generate your wallet via accessing the container and run:\n#  cd /wallet\n#  graft-wallet-cli\nVOLUME /wallet\nEXPOSE 18980/tcp\nEXPOSE 18981/tcp\nENTRYPOINT [\"graftnoded\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18980\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18981\", \"--non-interactive\", \"--confirm-external-bind\"]\n","injectedSmells":[],"originalDockerfileHash":"7d5c5738a574dbb7a705613e29103bfa","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake bzip2 --yes\nWORKDIR /usr/local\n#  Cmake\nARG CMAKE_VERSION=3.12.1\nARG CMAKE_VERSION_DOT=v3.12\nARG CMAKE_HASH=c53d5c2ce81d7a957ee83e3e635c8cda5dfe20c9d501a4828ee28e1615e57ab2\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#  # Boost\nARG BOOST_VERSION=1_68_0\nARG BOOST_VERSION_DOT=1.68.0\nARG BOOST_HASH=7f6130bc3cf65f56a618888ce9d5ea704fa10b462be126ad053e80e553d6d8b7\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.1.0h\nARG OPENSSL_HASH=5835626cde9e99656585fc7aaa2302a73a7e1340bf8c14fd635a62c66802a517\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static -fPIC \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.2.5\nARG ZMQ_HASH=d062edd8c142384792955796329baf1e5a3377cd\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_VERSION=v4.2.3\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure \\\n && make \\\n && make check \\\n && make install\nWORKDIR /src\nCOPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#   runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#   Contains the blockchain\nVOLUME /root/.graft\n#   Generate your wallet via accessing the container and run:\n#   cd /wallet\n#   graft-wallet-cli\nVOLUME /wallet\nEXPOSE 18980/tcp\nEXPOSE 18981/tcp\nENTRYPOINT [\"graftnoded\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18980\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18981\", \"--non-interactive\", \"--confirm-external-bind\"]\n","originalDockerfileUglifiedHash":"8d9c38c52e00c69884e669cbfb57880f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0c8d1d61d0bf7220bf7dc7587b15c7f8bd22fa86.dockerfile"}