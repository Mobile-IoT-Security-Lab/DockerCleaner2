{"seed":3546609720,"processedDockerfileHash":"6ea81ab4ebaab0a9f0348baa7b8c6fc9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM openjdk:8-jdk\nRUN :\nENV BASE_APKS=\"sudo openssl openssh-client zip ttf-dejavu maven ruby\" \\\n    BUILD_APKS=\" make gcc clang g++ paxctl binutils-gold autoconf bison\"\nRUN (apt-get update ;apt-get install --no-install-recommends $BASE_APKS $BUILD_APKS -y ) \\\n && rm -rf /var/lib/apt/lists/*\nENV NODE_PREFIX=\"/usr/local\" \\\n    NODE_VERSION=\"6.4.0\" \\\n    NPM_VERSION=\"latest\" \\\n    NODE_SOURCE=\"/usr/src/node\"\nRUN [ \"${NODE_VERSION}\" == \"latest\" ] \\\n && { DOWNLOAD_PATH=https://nodejs.org/dist/node-latest.tar.gz ; } || { DOWNLOAD_PATH=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz ; } ; mkdir -p $NODE_SOURCE \\\n && wget -O - $DOWNLOAD_PATH -nv | tar -xz --strip-components=1 -C $NODE_SOURCE \\\n && cd $NODE_SOURCE \\\n && export GYP_DEFINES=\"linux_use_gold_flags=0\" \\\n && ./configure --prefix=$NODE_PREFIX $NODE_CONFIG_FLAGS \\\n && make -j$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && make install\nRUN paxctl -cm ${NODE_PREFIX}/bin/node \\\n && cd / \\\n && if [ -x /usr/bin/npm ] ; then npm install npm@${NPM_VERSION} -g \\\n && find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf ; fi \\\n && rm -rf ${NODE_SOURCE} ${NODE_PREFIX}/include ${NODE_PREFIX}/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp /root/.gnupg ${NODE_PREFIX}/lib/node_modules/npm/man ${NODE_PREFIX}/lib/node_modules/npm/doc ${NODE_PREFIX}/lib/node_modules/npm/html \\\n && mkdir -p /app \\\n && exit 0 || exit 1\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >> /etc/sudoers\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"50000\"\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nENV TINI_VERSION=\"0.9.0\"\nENV TINI_SHA=\"fa23d1e20732501c3bb8eeeca423c89ac80ed452\"\n#   Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini \\\n && chmod +x /bin/tini \\\n && echo \"$TINI_SHA /bin/tini\" | sha1sum -c -\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.28}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=183125ee4e731a559f39d146a7ffbca08c3e011f\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha1sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN chown -R ${user} /usr/local\nRUN sudo rm /usr/bin/java \\\n && sudo ln -s /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java /usr/bin/java\n#   Install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$( uname -s ;)-$( uname -m ;)\" > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose\n#   for main web interface:\nEXPOSE 8080/tcp\n#   will be used by attached slave agents:\nEXPOSE 50000/tcp\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nRUN npm install yarn@1.22.19 -g \\\n && yarn global add gulp grunt node-sass bower\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM openjdk:8-jdk\nRUN apt-get update\nENV BASE_APKS=\"sudo openssl openssh-client zip ttf-dejavu maven ruby\" \\\n    BUILD_APKS=\" make gcc clang g++ paxctl binutils-gold autoconf bison\"\nRUN apt-get install $BASE_APKS $BUILD_APKS -y \\\n && rm -rf /var/lib/apt/lists/*\nENV NODE_PREFIX=\"/usr/local\" \\\n    NODE_VERSION=\"6.4.0\" \\\n    NPM_VERSION=\"latest\" \\\n    NODE_SOURCE=\"/usr/src/node\"\nRUN [ \"${NODE_VERSION}\" == \"latest\" ] \\\n && { DOWNLOAD_PATH=https://nodejs.org/dist/node-latest.tar.gz ; } || { DOWNLOAD_PATH=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz ; } ; mkdir -p $NODE_SOURCE \\\n && wget -O - $DOWNLOAD_PATH -nv | tar -xz --strip-components=1 -C $NODE_SOURCE \\\n && cd $NODE_SOURCE \\\n && export GYP_DEFINES=\"linux_use_gold_flags=0\" \\\n && ./configure --prefix=$NODE_PREFIX $NODE_CONFIG_FLAGS \\\n && make -j$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && make install\nRUN paxctl -cm ${NODE_PREFIX}/bin/node \\\n && cd / \\\n && if [ -x /usr/bin/npm ] ; then npm install npm@${NPM_VERSION} -g \\\n && find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf ; fi \\\n && rm -rf ${NODE_SOURCE} ${NODE_PREFIX}/include ${NODE_PREFIX}/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp /root/.gnupg ${NODE_PREFIX}/lib/node_modules/npm/man ${NODE_PREFIX}/lib/node_modules/npm/doc ${NODE_PREFIX}/lib/node_modules/npm/html \\\n && mkdir -p /app \\\n && exit 0 || exit 1\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >> /etc/sudoers\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"50000\"\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n#  Jenkins is run with user `jenkins`, uid = 1000\n#  If you bind mount a volume from the host or a data container,\n#  ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#  Jenkins home directory is a volume, so configuration and build history\n#  can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#  `/usr/share/jenkins/ref/` contains all reference configuration we want\n#  to set on a fresh new installation. Use it to bundle additional plugins\n#  or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nENV TINI_VERSION=\"0.9.0\"\nENV TINI_SHA=\"fa23d1e20732501c3bb8eeeca423c89ac80ed452\"\n#  Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini \\\n && chmod +x /bin/tini \\\n && echo \"$TINI_SHA /bin/tini\" | sha1sum -c -\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#  jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.28}\"\n#  jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=183125ee4e731a559f39d146a7ffbca08c3e011f\n#  Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#  could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#  see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha1sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN chown -R ${user} /usr/local\nRUN sudo rm /usr/bin/java \\\n && sudo ln -s /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java /usr/bin/java\n#  Install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$( uname -s ;)-$( uname -m ;)\" > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose\n#  for main web interface:\nEXPOSE 8080/tcp\n#  will be used by attached slave agents:\nEXPOSE 50000/tcp\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nRUN npm install yarn -g \\\n && yarn global add gulp grunt node-sass bower\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#  from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n","injectedSmells":[],"originalDockerfileHash":"2d24049e85bde0403ad30bacd364f838","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM openjdk:8-jdk\nRUN apt-get update\nENV BASE_APKS=\"sudo openssl openssh-client zip ttf-dejavu maven ruby\" \\\n    BUILD_APKS=\" make gcc clang g++ paxctl binutils-gold autoconf bison\"\nRUN apt-get install $BASE_APKS $BUILD_APKS -y \\\n && rm -rf /var/lib/apt/lists/*\nENV NODE_PREFIX=\"/usr/local\" \\\n    NODE_VERSION=\"6.4.0\" \\\n    NPM_VERSION=\"latest\" \\\n    NODE_SOURCE=\"/usr/src/node\"\nRUN [ \"${NODE_VERSION}\" == \"latest\" ] \\\n && { DOWNLOAD_PATH=https://nodejs.org/dist/node-latest.tar.gz ; } || { DOWNLOAD_PATH=https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.gz ; } ; mkdir -p $NODE_SOURCE \\\n && wget -O - $DOWNLOAD_PATH -nv | tar -xz --strip-components=1 -C $NODE_SOURCE \\\n && cd $NODE_SOURCE \\\n && export GYP_DEFINES=\"linux_use_gold_flags=0\" \\\n && ./configure --prefix=$NODE_PREFIX $NODE_CONFIG_FLAGS \\\n && make -j$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && make install\nRUN paxctl -cm ${NODE_PREFIX}/bin/node \\\n && cd / \\\n && if [ -x /usr/bin/npm ] ; then npm install npm@${NPM_VERSION} -g \\\n && find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf ; fi \\\n && rm -rf ${NODE_SOURCE} ${NODE_PREFIX}/include ${NODE_PREFIX}/share/man /tmp/* /var/cache/apk/* /root/.npm /root/.node-gyp /root/.gnupg ${NODE_PREFIX}/lib/node_modules/npm/man ${NODE_PREFIX}/lib/node_modules/npm/doc ${NODE_PREFIX}/lib/node_modules/npm/html \\\n && mkdir -p /app \\\n && exit 0 || exit 1\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" >> /etc/sudoers\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"50000\"\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nENV TINI_VERSION=\"0.9.0\"\nENV TINI_SHA=\"fa23d1e20732501c3bb8eeeca423c89ac80ed452\"\n#   Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static -o /bin/tini \\\n && chmod +x /bin/tini \\\n && echo \"$TINI_SHA /bin/tini\" | sha1sum -c -\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.28}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=183125ee4e731a559f39d146a7ffbca08c3e011f\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha1sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN chown -R ${user} /usr/local\nRUN sudo rm /usr/bin/java \\\n && sudo ln -s /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java /usr/bin/java\n#   Install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$( uname -s ;)-$( uname -m ;)\" > /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose\n#   for main web interface:\nEXPOSE 8080/tcp\n#   will be used by attached slave agents:\nEXPOSE 50000/tcp\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nRUN npm install yarn -g \\\n && yarn global add gulp grunt node-sass bower\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nENTRYPOINT [\"/bin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n","originalDockerfileUglifiedHash":"fdd3a2fe56aca978dc615025aa31157f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9375700168deabcca87424ccbd4ec45c15344de0.dockerfile"}