{"seed":1424308491,"processedDockerfileHash":"2a439ace657b1dd8c916b492f1f90b47","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This is used to build an image \"tweag/linear-types\" on dockerhub\n#   ----------------------------------------------------------------\n#\n#   CHANGES\n#   v1.0.3\n#   ------\n#\n#   - Even more bug fixes\n#\n#   v1.0.2\n#   ------\n#\n#   - Many, many bug fixes\n#\n#   v1.0.1\n#   ------\n#\n#   - Many bug fixes\n#   - Constructors have one multiplicity variable per argument\n#\n#   v1.0.0\n#   -------\n#\n#   - Based on the submission https://phabricator.haskell.org/D5401 (first iteration)\n#   - Which is based on a v8.7 from 2018-11-30\n#   - Many bug fixes\n#\n#   v0.1.11\n#   -------\n#\n#   - Fix broken installation in v0.1.10\n#\n#   v0.1.10\n#   -------\n#\n#   - Merge with recent v8.7 (2018-11-08)\n#   - Using linear types requires -XLinearTypes\n#   - Stabilise Core's handling of linear types\n#   - Fix unboxed tuples and sums\n#   - Without -XLinearTypes, GADTs with regular arrows are linear\n#   - Pattern synonyms in linear positions will raise an error\n#   - View patterns in linear positions will raise an error\n#   - Lazy patterns in linear positions will raise an error\n#   - Fix desugaring of do-notation\n#   - Many minor bug fixes\n#\n#   v0.1.9\n#   ------\n#   - More recent v8.5\n#   - Basic implementation of multiplicity polymorphism\n#   - Linear functions are no longer automatically η-expanded\n#   - Data constructors are multiplicity polymorphic when used as terms (fixes #33 and #34)\n#   - Core lint understand linear types (it is still very fragile)\n#   - Fix compatibility of linear-base\n#\n#   v0.1.8\n#   ------\n#\n#   - Merged with v8.5 master\n#   - Fix #7: `(->)` and `(⊸)` are no longer considered equal by the\n#     type checker.\n#   - Fixing #7 introduced some regression. It is possible to write even\n#     Haskell 98 code which doesn't type-check. See #33 and #34.\n#\n#   v0.1.7\n#   ------\n#\n#   - Ship stack 1.6.1\n#\n#   v0.1.6\n#   ------\n#\n#   - Reject linear kind declarations\n#   - Regular syntax for linear arrow is `(->.)`. Not backwards\n#     compatible! One now needs to use `-XUnicodeSytnax` in order to use\n#     the `(⊸)` syntax.\n#   Debian+GHC+stack. See: https://hub.docker.com/_/haskell/\nFROM haskell:8.6.5\n#   Commit hash of GHC+linear-types in the repository github.com/tweag/ghc\nENV LINEAR_SHA=\"0971e23ea379ad311666c0da777012e7a09c92d1\"\n#   Happy problems without these:\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANGUAGE=\"C.UTF-8\"\nENV GHCBUILD=\"/tmp/ghc_linear\"\nENV SYSBUILDDEPS=\"autoconf automake wget libtool ncurses-dev python3 happy alex\"\nENV SYSRUNDEPS=\"libgmp-dev xz-utils make\"\n#   Already installed: gcc g++ tar\n#   Clone and build, but don't store the build dir OR the extra version\n#   of GHC. This will be a really big single step to avoid storing\n#   intermediary files in the unionfs layer:\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends $SYSBUILDDEPS $SYSRUNDEPS -y \\\n && stack install happy \\\n && git clone --recursive https://gitlab.haskell.org/ghc/ghc.git $GHCBUILD \\\n && cd $GHCBUILD \\\n && git remote add tweag https://github.com/tweag/ghc.git \\\n && git fetch tweag \\\n && git checkout $LINEAR_SHA \\\n && git submodule sync \\\n && git submodule update --init --recursive \\\n && echo \"BuildFlavour = quick\" > $GHCBUILD/mk/build.mk \\\n && cat $GHCBUILD/mk/build.mk.sample >> $GHCBUILD/mk/build.mk \\\n && cd $GHCBUILD \\\n && ./boot \\\n && ./configure \\\n && make -j6 \\\n && make install \\\n && echo \"== Remove GHC sources ==\" \\\n && rm -rf $GHCBUILD \\\n && echo \"== Remove /opt GHC installation ==\" \\\n && rm -rfv /opt/ghc \\\n && rm -rfv /opt/cabal \\\n && echo \"== Cleanup apt packages ==\" \\\n && apt-get purge -y --auto-remove cabal-install ghc $SYSBUILDDEPS\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This is used to build an image \"tweag/linear-types\" on dockerhub\n#  ----------------------------------------------------------------\n#\n#  CHANGES\n#  v1.0.3\n#  ------\n#\n#  - Even more bug fixes\n#\n#  v1.0.2\n#  ------\n#\n#  - Many, many bug fixes\n#\n#  v1.0.1\n#  ------\n#\n#  - Many bug fixes\n#  - Constructors have one multiplicity variable per argument\n#\n#  v1.0.0\n#  -------\n#\n#  - Based on the submission https://phabricator.haskell.org/D5401 (first iteration)\n#  - Which is based on a v8.7 from 2018-11-30\n#  - Many bug fixes\n#\n#  v0.1.11\n#  -------\n#\n#  - Fix broken installation in v0.1.10\n#\n#  v0.1.10\n#  -------\n#\n#  - Merge with recent v8.7 (2018-11-08)\n#  - Using linear types requires -XLinearTypes\n#  - Stabilise Core's handling of linear types\n#  - Fix unboxed tuples and sums\n#  - Without -XLinearTypes, GADTs with regular arrows are linear\n#  - Pattern synonyms in linear positions will raise an error\n#  - View patterns in linear positions will raise an error\n#  - Lazy patterns in linear positions will raise an error\n#  - Fix desugaring of do-notation\n#  - Many minor bug fixes\n#\n#  v0.1.9\n#  ------\n#  - More recent v8.5\n#  - Basic implementation of multiplicity polymorphism\n#  - Linear functions are no longer automatically η-expanded\n#  - Data constructors are multiplicity polymorphic when used as terms (fixes #33 and #34)\n#  - Core lint understand linear types (it is still very fragile)\n#  - Fix compatibility of linear-base\n#\n#  v0.1.8\n#  ------\n#\n#  - Merged with v8.5 master\n#  - Fix #7: `(->)` and `(⊸)` are no longer considered equal by the\n#    type checker.\n#  - Fixing #7 introduced some regression. It is possible to write even\n#    Haskell 98 code which doesn't type-check. See #33 and #34.\n#\n#  v0.1.7\n#  ------\n#\n#  - Ship stack 1.6.1\n#\n#  v0.1.6\n#  ------\n#\n#  - Reject linear kind declarations\n#  - Regular syntax for linear arrow is `(->.)`. Not backwards\n#    compatible! One now needs to use `-XUnicodeSytnax` in order to use\n#    the `(⊸)` syntax.\n#  Debian+GHC+stack. See: https://hub.docker.com/_/haskell/\nFROM haskell:8.6.5\n#  Commit hash of GHC+linear-types in the repository github.com/tweag/ghc\nENV LINEAR_SHA=\"0971e23ea379ad311666c0da777012e7a09c92d1\"\n#  Happy problems without these:\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANGUAGE=\"C.UTF-8\"\nENV GHCBUILD=\"/tmp/ghc_linear\"\nENV SYSBUILDDEPS=\"autoconf automake wget libtool ncurses-dev python3 happy alex\"\nENV SYSRUNDEPS=\"libgmp-dev xz-utils make\"\n#  Already installed: gcc g++ tar\n#  Clone and build, but don't store the build dir OR the extra version\n#  of GHC. This will be a really big single step to avoid storing\n#  intermediary files in the unionfs layer:\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends $SYSBUILDDEPS $SYSRUNDEPS -y \\\n && stack install happy \\\n && git clone --recursive https://gitlab.haskell.org/ghc/ghc.git $GHCBUILD \\\n && cd $GHCBUILD \\\n && git remote add tweag https://github.com/tweag/ghc.git \\\n && git fetch tweag \\\n && git checkout $LINEAR_SHA \\\n && git submodule sync \\\n && git submodule update --init --recursive \\\n && echo \"BuildFlavour = quick\" > $GHCBUILD/mk/build.mk \\\n && cat $GHCBUILD/mk/build.mk.sample >> $GHCBUILD/mk/build.mk \\\n && cd $GHCBUILD \\\n && ./boot \\\n && ./configure \\\n && make -j6 \\\n && make install \\\n && echo \"== Remove GHC sources ==\" \\\n && rm -rf $GHCBUILD \\\n && echo \"== Remove /opt GHC installation ==\" \\\n && rm -rfv /opt/ghc \\\n && rm -rfv /opt/cabal \\\n && echo \"== Cleanup apt packages ==\" \\\n && apt-get purge -y --auto-remove cabal-install ghc $SYSBUILDDEPS\n","injectedSmells":[],"originalDockerfileHash":"b38a18b414c82739c4b4384a54e5390b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This is used to build an image \"tweag/linear-types\" on dockerhub\n#   ----------------------------------------------------------------\n#\n#   CHANGES\n#   v1.0.3\n#   ------\n#\n#   - Even more bug fixes\n#\n#   v1.0.2\n#   ------\n#\n#   - Many, many bug fixes\n#\n#   v1.0.1\n#   ------\n#\n#   - Many bug fixes\n#   - Constructors have one multiplicity variable per argument\n#\n#   v1.0.0\n#   -------\n#\n#   - Based on the submission https://phabricator.haskell.org/D5401 (first iteration)\n#   - Which is based on a v8.7 from 2018-11-30\n#   - Many bug fixes\n#\n#   v0.1.11\n#   -------\n#\n#   - Fix broken installation in v0.1.10\n#\n#   v0.1.10\n#   -------\n#\n#   - Merge with recent v8.7 (2018-11-08)\n#   - Using linear types requires -XLinearTypes\n#   - Stabilise Core's handling of linear types\n#   - Fix unboxed tuples and sums\n#   - Without -XLinearTypes, GADTs with regular arrows are linear\n#   - Pattern synonyms in linear positions will raise an error\n#   - View patterns in linear positions will raise an error\n#   - Lazy patterns in linear positions will raise an error\n#   - Fix desugaring of do-notation\n#   - Many minor bug fixes\n#\n#   v0.1.9\n#   ------\n#   - More recent v8.5\n#   - Basic implementation of multiplicity polymorphism\n#   - Linear functions are no longer automatically η-expanded\n#   - Data constructors are multiplicity polymorphic when used as terms (fixes #33 and #34)\n#   - Core lint understand linear types (it is still very fragile)\n#   - Fix compatibility of linear-base\n#\n#   v0.1.8\n#   ------\n#\n#   - Merged with v8.5 master\n#   - Fix #7: `(->)` and `(⊸)` are no longer considered equal by the\n#     type checker.\n#   - Fixing #7 introduced some regression. It is possible to write even\n#     Haskell 98 code which doesn't type-check. See #33 and #34.\n#\n#   v0.1.7\n#   ------\n#\n#   - Ship stack 1.6.1\n#\n#   v0.1.6\n#   ------\n#\n#   - Reject linear kind declarations\n#   - Regular syntax for linear arrow is `(->.)`. Not backwards\n#     compatible! One now needs to use `-XUnicodeSytnax` in order to use\n#     the `(⊸)` syntax.\n#   Debian+GHC+stack. See: https://hub.docker.com/_/haskell/\nFROM haskell:8.6.5\n#   Commit hash of GHC+linear-types in the repository github.com/tweag/ghc\nENV LINEAR_SHA=\"0971e23ea379ad311666c0da777012e7a09c92d1\"\n#   Happy problems without these:\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANGUAGE=\"C.UTF-8\"\nENV GHCBUILD=\"/tmp/ghc_linear\"\nENV SYSBUILDDEPS=\"autoconf automake wget libtool ncurses-dev python3 happy alex\"\nENV SYSRUNDEPS=\"libgmp-dev xz-utils make\"\n#   Already installed: gcc g++ tar\n#   Clone and build, but don't store the build dir OR the extra version\n#   of GHC. This will be a really big single step to avoid storing\n#   intermediary files in the unionfs layer:\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends $SYSBUILDDEPS $SYSRUNDEPS -y \\\n && stack install happy \\\n && git clone --recursive https://gitlab.haskell.org/ghc/ghc.git $GHCBUILD \\\n && cd $GHCBUILD \\\n && git remote add tweag https://github.com/tweag/ghc.git \\\n && git fetch tweag \\\n && git checkout $LINEAR_SHA \\\n && git submodule sync \\\n && git submodule update --init --recursive \\\n && echo \"BuildFlavour = quick\" > $GHCBUILD/mk/build.mk \\\n && cat $GHCBUILD/mk/build.mk.sample >> $GHCBUILD/mk/build.mk \\\n && cd $GHCBUILD \\\n && ./boot \\\n && ./configure \\\n && make -j6 \\\n && make install \\\n && echo \"== Remove GHC sources ==\" \\\n && rm -rf $GHCBUILD \\\n && echo \"== Remove /opt GHC installation ==\" \\\n && rm -rfv /opt/ghc \\\n && rm -rfv /opt/cabal \\\n && echo \"== Cleanup apt packages ==\" \\\n && apt-get purge -y --auto-remove cabal-install ghc $SYSBUILDDEPS\n","originalDockerfileUglifiedHash":"3437cd1ea1eb9a23f01fc17809f951bb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/709cd3ac00ff6dc88b46477eb4427976b4d9cf3c.dockerfile"}