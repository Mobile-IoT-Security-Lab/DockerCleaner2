{"seed":1468467238,"processedDockerfileHash":"3bdf4db027386d797bebb2a24ab825fb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   Dockerized nvm development environment\n#\n#   This Dockerfile is for building nvm development environment only,\n#   not for any distribution/production usage.\n#\n#   Please note that it'll use about 1.2 GB disk space and about 15 minutes to\n#   build this image, it depends on your hardware.\n#   Use Ubuntu Trusty Tahr as base image as we're using on Travis CI\n#   I also tested with Ubuntu 16.04, should be good with it!\nFROM ubuntu:14.04\nLABEL maintainer=\"Peter Dave Hello <hsu@peterdavehello.org>\"\nLABEL name=\"nvm-dev-env\"\nLABEL version=\"latest\"\n#   Set the SHELL to bash with pipefail option\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#   Prevent dialog during apt install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   ShellCheck version\nENV SHELLCHECK_VERSION=\"0.5.0\"\n#   Pick a Ubuntu apt mirror site for better speed\n#   ref: https://launchpad.net/ubuntu/+archivemirrors\nENV UBUNTU_APT_SITE=\"ubuntu.cs.utah.edu\"\n#   Disable src package source\nRUN sed -i 's/^deb-src\\ /\\#deb-src\\ /g' /etc/apt/sources.list\n#   Replace origin apt package site with the mirror site\nRUN sed -E -i \"s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\nRUN sed -i \"s/security.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\n#   Install apt packages\nRUN apt-get update \\\n && apt-get upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" \\\n && apt-get install --no-install-recommends coreutils=8.21-1ubuntu5.4 util-linux=2.20.1-5.1ubuntu20.9 bsdutils=1:2.20.1-5.1ubuntu20.9 file=1:5.14-2ubuntu3.4 openssl=1.0.1f-1ubuntu2.27 ca-certificates=20170717~14.04.2 ssh=1:6.6p1-2ubuntu2.13 wget=1.15-1ubuntu1.14.04.5 patch=2.7.1-4ubuntu2.4 sudo=1.8.9p5-1ubuntu1.4 htop=1.0.2-3 dstat=0.7.2-3build1 vim=2:7.4.052-1ubuntu3.1 tmux=1.8-5 curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 jq=1.3-1.1ubuntu1.1 realpath=1.19 zsh=5.0.2-3ubuntu6.3 ksh=93u+20120801-1ubuntu0.14.04.1 gcc-4.8=4.8.4-2ubuntu1~14.04.4 g++-4.8=4.8.4-2ubuntu1~14.04.4 xz-utils=5.1.1alpha+20120614-2ubuntu2 build-essential=11.6ubuntu6 bash-completion=1:2.1-4ubuntu0.2 Dpkg::Options::=\"--force-confdef\" Dpkg::Options::=\"--force-confold\" -y -o -o \\\n && apt-get clean\n#   ShellCheck with Ubuntu 14.04 container workaround\nRUN wget https://storage.googleapis.com/shellcheck/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz -O- | tar xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck \\\n && mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /bin \\\n && rmdir shellcheck-v$SHELLCHECK_VERSION \\\n && touch /tmp/libc.so.6 \\\n && echo \"alias shellcheck='LD_LIBRARY_PATH=/tmp /bin/shellcheck'\" >> /etc/bash.bashrc\nRUN LD_LIBRARY_PATH=/tmp shellcheck -V\n#   Set locale\nRUN locale-gen en_US.UTF-8\n#   Print tool versions\nRUN bash --version | head -n 1\nRUN zsh --version\nRUN ksh --version || true\nRUN dpkg -s dash | grep ^Version | awk '{print $2}'\nRUN git --version\nRUN curl --version\nRUN wget --version\n#   Add user \"nvm\" as non-root user\nRUN useradd -ms /bin/bash nvm\n#   Copy and set permission for nvm directory\nCOPY . /home/nvm/.nvm/\nRUN chown nvm:nvm -R \"home/nvm/.nvm\"\n#   Set sudoer for \"nvm\"\nRUN echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n#   Switch to user \"nvm\" from now\nUSER nvm\n#   nvm\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/bash_completion\" ] \\\n && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' >> \"$HOME/.bashrc\"\n#   nodejs and tools\nRUN bash -c 'source $HOME/.nvm/nvm.sh \\\n && nvm install node \\\n && npm install -g doctoc urchin eclint dockerfile_lint \\\n && npm install --prefix \"$HOME/.nvm/\"'\n#   Set WORKDIR to nvm directory\nWORKDIR /home/nvm/.nvm\nENTRYPOINT [\"/bin/bash\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerized nvm development environment\n#\n#  This Dockerfile is for building nvm development environment only,\n#  not for any distribution/production usage.\n#\n#  Please note that it'll use about 1.2 GB disk space and about 15 minutes to\n#  build this image, it depends on your hardware.\n#  Use Ubuntu Trusty Tahr as base image as we're using on Travis CI\n#  I also tested with Ubuntu 16.04, should be good with it!\nFROM ubuntu:14.04\nLABEL maintainer=\"Peter Dave Hello <hsu@peterdavehello.org>\"\nLABEL name=\"nvm-dev-env\"\nLABEL version=\"latest\"\n#  Set the SHELL to bash with pipefail option\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  Prevent dialog during apt install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  ShellCheck version\nENV SHELLCHECK_VERSION=\"0.5.0\"\n#  Pick a Ubuntu apt mirror site for better speed\n#  ref: https://launchpad.net/ubuntu/+archivemirrors\nENV UBUNTU_APT_SITE=\"ubuntu.cs.utah.edu\"\n#  Disable src package source\nRUN sed -i 's/^deb-src\\ /\\#deb-src\\ /g' /etc/apt/sources.list\n#  Replace origin apt package site with the mirror site\nRUN sed -E -i \"s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\nRUN sed -i \"s/security.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\n#  Install apt packages\nRUN apt-get update \\\n && apt-get upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" \\\n && apt-get install -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" coreutils util-linux bsdutils file openssl ca-certificates ssh wget patch sudo htop dstat vim tmux curl git jq realpath zsh ksh gcc-4.8 g++-4.8 xz-utils build-essential bash-completion \\\n && apt-get clean\n#  ShellCheck with Ubuntu 14.04 container workaround\nRUN wget https://storage.googleapis.com/shellcheck/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz -O- | tar xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck \\\n && mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /bin \\\n && rmdir shellcheck-v$SHELLCHECK_VERSION \\\n && touch /tmp/libc.so.6 \\\n && echo \"alias shellcheck='LD_LIBRARY_PATH=/tmp /bin/shellcheck'\" >> /etc/bash.bashrc\nRUN LD_LIBRARY_PATH=/tmp shellcheck -V\n#  Set locale\nRUN locale-gen en_US.UTF-8\n#  Print tool versions\nRUN bash --version | head -n 1\nRUN zsh --version\nRUN ksh --version || true\nRUN dpkg -s dash | grep ^Version | awk '{print $2}'\nRUN git --version\nRUN curl --version\nRUN wget --version\n#  Add user \"nvm\" as non-root user\nRUN useradd -ms /bin/bash nvm\n#  Copy and set permission for nvm directory\nCOPY . /home/nvm/.nvm/\nRUN chown nvm:nvm -R \"home/nvm/.nvm\"\n#  Set sudoer for \"nvm\"\nRUN echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n#  Switch to user \"nvm\" from now\nUSER nvm\n#  nvm\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/bash_completion\" ] \\\n && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' >> \"$HOME/.bashrc\"\n#  nodejs and tools\nRUN bash -c 'source $HOME/.nvm/nvm.sh \\\n && nvm install node \\\n && npm install -g doctoc urchin eclint dockerfile_lint \\\n && npm install --prefix \"$HOME/.nvm/\"'\n#  Set WORKDIR to nvm directory\nWORKDIR /home/nvm/.nvm\nENTRYPOINT [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"fce1148fc0fab4cf2afa46b357870826","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerized nvm development environment\n#\n#   This Dockerfile is for building nvm development environment only,\n#   not for any distribution/production usage.\n#\n#   Please note that it'll use about 1.2 GB disk space and about 15 minutes to\n#   build this image, it depends on your hardware.\n#   Use Ubuntu Trusty Tahr as base image as we're using on Travis CI\n#   I also tested with Ubuntu 16.04, should be good with it!\nFROM ubuntu:14.04\nLABEL maintainer=\"Peter Dave Hello <hsu@peterdavehello.org>\"\nLABEL name=\"nvm-dev-env\"\nLABEL version=\"latest\"\n#   Set the SHELL to bash with pipefail option\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#   Prevent dialog during apt install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   ShellCheck version\nENV SHELLCHECK_VERSION=\"0.5.0\"\n#   Pick a Ubuntu apt mirror site for better speed\n#   ref: https://launchpad.net/ubuntu/+archivemirrors\nENV UBUNTU_APT_SITE=\"ubuntu.cs.utah.edu\"\n#   Disable src package source\nRUN sed -i 's/^deb-src\\ /\\#deb-src\\ /g' /etc/apt/sources.list\n#   Replace origin apt package site with the mirror site\nRUN sed -E -i \"s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\nRUN sed -i \"s/security.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\n#   Install apt packages\nRUN apt-get update \\\n && apt-get upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" \\\n && apt-get install coreutils util-linux bsdutils file openssl ca-certificates ssh wget patch sudo htop dstat vim tmux curl git jq realpath zsh ksh gcc-4.8 g++-4.8 xz-utils build-essential bash-completion Dpkg::Options::=\"--force-confdef\" Dpkg::Options::=\"--force-confold\" -y -o -o \\\n && apt-get clean\n#   ShellCheck with Ubuntu 14.04 container workaround\nRUN wget https://storage.googleapis.com/shellcheck/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz -O- | tar xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck \\\n && mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /bin \\\n && rmdir shellcheck-v$SHELLCHECK_VERSION \\\n && touch /tmp/libc.so.6 \\\n && echo \"alias shellcheck='LD_LIBRARY_PATH=/tmp /bin/shellcheck'\" >> /etc/bash.bashrc\nRUN LD_LIBRARY_PATH=/tmp shellcheck -V\n#   Set locale\nRUN locale-gen en_US.UTF-8\n#   Print tool versions\nRUN bash --version | head -n 1\nRUN zsh --version\nRUN ksh --version || true\nRUN dpkg -s dash | grep ^Version | awk '{print $2}'\nRUN git --version\nRUN curl --version\nRUN wget --version\n#   Add user \"nvm\" as non-root user\nRUN useradd -ms /bin/bash nvm\n#   Copy and set permission for nvm directory\nCOPY . /home/nvm/.nvm/\nRUN chown nvm:nvm -R \"home/nvm/.nvm\"\n#   Set sudoer for \"nvm\"\nRUN echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n#   Switch to user \"nvm\" from now\nUSER nvm\n#   nvm\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/bash_completion\" ] \\\n && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' >> \"$HOME/.bashrc\"\n#   nodejs and tools\nRUN bash -c 'source $HOME/.nvm/nvm.sh \\\n && nvm install node \\\n && npm install -g doctoc urchin eclint dockerfile_lint \\\n && npm install --prefix \"$HOME/.nvm/\"'\n#   Set WORKDIR to nvm directory\nWORKDIR /home/nvm/.nvm\nENTRYPOINT [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"e56c3b4c5b689556e4a650e69f7919ed","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d4b0f1b3e4801b73ba6134898eb10242f84dd245.dockerfile"}