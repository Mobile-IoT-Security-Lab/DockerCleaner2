{"seed":24708110,"processedDockerfileHash":"1bce8a78123322de8dfc03cd2b61ba6f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   SPDX-License-Identifier: Apache-2.0\n#   Copyright Contributors to the Egeria project\nFROM ubuntu:18.10 AS build\n#   Install Git, which is missing from the Ubuntu base images.\nRUN apt-get update \\\n && apt-get install --no-install-recommends git python openjdk-8-jdk maven wget inetutils-ping dnsutils gzip tar -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends git python openjdk-8-jdk maven wget libpostgresql-jdbc-java iputils-ping net-tools vim lsof apt-utils build-essential lsb-core lsb-release -y\nARG branch\nENV branch=\"${branch:-master}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV PATH=\"/usr/java/bin:/usr/local/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   Working directory\nWORKDIR /root\n#   Pull down Ranger and build it\nRUN git clone http://github.com/apache/ranger.git -b ${branch}\n#   Remove -DskipTests if unit tests are to be included - build the code...\nWORKDIR /root/ranger\n#   -Pall is normally used on non-linux platforms as it skips the native security plugins. However the -Plinux profile\n#   is currently pulling in a later maven assembly plugin as of 2018.11.05 which is breaking the build/packaging for\n#   the 1.2 branch....\nRUN mvn -Pall -DskipTests=true clean compile package install assembly:assembly\nRUN git log > /git.log \\\n && echo ${branch} > /git.branch \\\n && git remote -v > /git.remote\n#   We have now built the latest ranger from source - let's unpack and setup the admin server & UI\n#   After a build, the target directory looks like this - we need to chose the zips we're interested in deploying\n#   in this docker image\n#\n#   antrun                                      ranger-2.2.0-migration-util.tar.gz\n#   archive-tmp                                 ranger-2.2.0-migration-util.zip\n#   maven-shared-archive-resources              ranger-2.2.0-ranger-tools.tar.gz\n#   ranger-2.2.0-admin.tar.gz          ranger-2.2.0-ranger-tools.zip\n#   ranger-2.2.0-admin.zip             ranger-2.2.0-solr-plugin.tar.gz\n#   ranger-2.2.0-atlas-plugin.tar.gz   ranger-2.2.0-solr-plugin.zip\n#   ranger-2.2.0-atlas-plugin.zip      ranger-2.2.0-sqoop-plugin.tar.gz\n#   ranger-2.2.0-hbase-plugin.tar.gz   ranger-2.2.0-sqoop-plugin.zip\n#   ranger-2.2.0-hbase-plugin.zip      ranger-2.2.0-src.tar.gz\n#   ranger-2.2.0-hdfs-plugin.tar.gz    ranger-2.2.0-src.zip\n#   ranger-2.2.0-hdfs-plugin.zip       ranger-2.2.0-storm-plugin.tar.gz\n#   ranger-2.2.0-hive-plugin.tar.gz    ranger-2.2.0-storm-plugin.zip\n#   ranger-2.2.0-hive-plugin.zip       ranger-2.2.0-tagsync.tar.gz\n#   ranger-2.2.0-kafka-plugin.tar.gz   ranger-2.2.0-tagsync.zip\n#   ranger-2.2.0-kafka-plugin.zip      ranger-2.2.0-usersync.tar.gz\n#   ranger-2.2.0-kms.tar.gz            ranger-2.2.0-usersync.zip\n#   ranger-2.2.0-kms.zip               ranger-2.2.0-yarn-plugin.tar.gz\n#   ranger-2.2.0-knox-plugin.tar.gz    ranger-2.2.0-yarn-plugin.zip\n#   ranger-2.2.0-knox-plugin.zip       rat.txt\n#   ranger-2.2.0-kylin-plugin.tar.gz   version\n#   ranger-2.2.0-kylin-plugin.zip\n#   Just going with the admin server here -- to include others, extract to a unique location and then copy path across\n#   to runtime image below\nRUN mkdir -p /opt/ranger-admin\nRUN tar xzf /root/ranger/target/ranger-*-admin.tar.gz --strip-components 1 -C /opt/ranger-admin\nCOPY dist/ranger-docker-start.sh /opt/ranger-admin/ranger-docker-start.sh\nRUN chmod 755 /opt/ranger-admin/ranger-docker-start.sh\n#   Configure and install Solr locally\nWORKDIR /opt/ranger-admin/contrib/solr_for_audit_setup\nRUN sed -i 's|SOLR_INSTALL=false|SOLR_INSTALL=true|' install.properties\nRUN sed -i \"s|SOLR_DOWNLOAD_URL=|SOLR_DOWNLOAD_URL=http://www.mirrorservice.org/sites/ftp.apache.org/lucene/solr/7.7.1/solr-7.7.1.tgz|\" install.properties\nRUN ./setup.sh\nRUN sed -i 's|^SOLR_JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"$|SOLR_JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"|g' /opt/solr/ranger_audit_server/scripts/solr.in.sh\nWORKDIR /opt/ranger-admin\nRUN sed -i \"s|^DB_FLAVOR=MYSQL|DB_FLAVOR=POSTGRES|g\" install.properties\nRUN sed -i \"s|^SQL_CONNECTOR_JAR=/usr/share/java/mysql-connector-java.jar|SQL_CONNECTOR_JAR=/usr/share/java/postgresql-jdbc.jar|g\" install.properties\nRUN sed -i \"s|^audit_solr_urls=|audit_solr_urls=http://localhost:6083/solr/ranger_audits|g\" install.properties\n#   Create minimal runtime image\nFROM openjdk:8-jdk-alpine\nLABEL org.label-schema.schema-version=\"= \\\"1.0\\\"\"\nLABEL org.label-schema.vendor=\"= \\\"ODPi\\\"\"\nLABEL org.label-schema.name=\"= \\\"ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.description=\"= \\\"Apache Ranger administration server, for use as part of ODPi Egeria Virtual Data Connector demonstrations.\\\"\"\nLABEL org.label-schema.url=\"= \\\"https://egeria.odpi.org/open-metadata-resources/open-metadata-deployment/\\\"\"\nLABEL org.label-schema.vcs-url=\"= \\\"https://github.com/odpi/egeria/tree/master/open-metadata-resources/open-metadata-deployment/docker/ranger\\\"\"\nLABEL org.label-schema.docker.cmd=\"= \\\"docker run -d -p 6080:6080 -p 6182:6182 -p 6083:6083 -p 6183:6183 -e PGUSER=postgres -e PGPASSWORD=passw0rd -e PGHOST=host -e RANGER_PASSWORD=admin999 odpi/ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.docker.debug=\"= \\\"docker exec -it $CONTAINER /bin/sh\\\"\"\nLABEL org.label-schema.docker.params=\"= \\\"PGUSER=postgres user,PGPASSWORD=postgres password,PGHOST=postgres host,RANGER_PASSWORD=password to init for ranger admin user\\\"\"\nRUN apk add python bash java-postgresql-jdbc bc shadow procps --no-cache \\\n && apk --no-cache update \\\n && apk --no-cache upgrade\nRUN groupadd -r ranger -g 1000 \\\n && useradd --no-log-init -r -g ranger -u 1000 -d /opt/ranger-admin ranger\nRUN groupadd -r solr -g 1001 \\\n && useradd --no-log-init -r -g solr -u 1001 -d /opt/solr solr \\\n && mkdir -p /var/log/solr/ranger_audits \\\n && chown solr:solr /var/log/solr/ranger_audits\nCOPY --chown=ranger:ranger --from=build /opt/ranger-admin/ /opt/ranger-admin/\nCOPY --chown=ranger:ranger --from=build /git.* /opt/details/\nCOPY --chown=solr:solr --from=build /opt/solr/ /opt/solr/\n#   Once Solr is separated, we whould run this as the ranger user (non-root)\n#  USER ranger:ranger\nWORKDIR /opt/ranger-admin\nEXPOSE 6080/tcp 6182/tcp 6083/tcp 6183/tcp\nENTRYPOINT [\"/bin/bash\", \"-c\", \"/opt/ranger-admin/ranger-docker-start.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  SPDX-License-Identifier: Apache-2.0\n#  Copyright Contributors to the Egeria project\nFROM ubuntu:18.10 AS build\n#  Install Git, which is missing from the Ubuntu base images.\nRUN apt-get update \\\n && apt-get install git python openjdk-8-jdk maven wget inetutils-ping dnsutils gzip tar -y\nRUN apt-get update \\\n && apt-get install git python openjdk-8-jdk maven wget libpostgresql-jdbc-java iputils-ping net-tools vim lsof apt-utils build-essential lsb-core lsb-release -y\nARG branch\nENV branch=\"${branch:-master}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV PATH=\"/usr/java/bin:/usr/local/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  Working directory\nWORKDIR /root\n#  Pull down Ranger and build it\nRUN git clone http://github.com/apache/ranger.git -b ${branch}\n#  Remove -DskipTests if unit tests are to be included - build the code...\nWORKDIR /root/ranger\n#  -Pall is normally used on non-linux platforms as it skips the native security plugins. However the -Plinux profile\n#  is currently pulling in a later maven assembly plugin as of 2018.11.05 which is breaking the build/packaging for\n#  the 1.2 branch....\nRUN mvn -Pall -DskipTests=true clean compile package install assembly:assembly\nRUN git log > /git.log \\\n && echo ${branch} > /git.branch \\\n && git remote -v > /git.remote\n#  We have now built the latest ranger from source - let's unpack and setup the admin server & UI\n#  After a build, the target directory looks like this - we need to chose the zips we're interested in deploying\n#  in this docker image\n#\n#  antrun                                      ranger-2.2.0-migration-util.tar.gz\n#  archive-tmp                                 ranger-2.2.0-migration-util.zip\n#  maven-shared-archive-resources              ranger-2.2.0-ranger-tools.tar.gz\n#  ranger-2.2.0-admin.tar.gz          ranger-2.2.0-ranger-tools.zip\n#  ranger-2.2.0-admin.zip             ranger-2.2.0-solr-plugin.tar.gz\n#  ranger-2.2.0-atlas-plugin.tar.gz   ranger-2.2.0-solr-plugin.zip\n#  ranger-2.2.0-atlas-plugin.zip      ranger-2.2.0-sqoop-plugin.tar.gz\n#  ranger-2.2.0-hbase-plugin.tar.gz   ranger-2.2.0-sqoop-plugin.zip\n#  ranger-2.2.0-hbase-plugin.zip      ranger-2.2.0-src.tar.gz\n#  ranger-2.2.0-hdfs-plugin.tar.gz    ranger-2.2.0-src.zip\n#  ranger-2.2.0-hdfs-plugin.zip       ranger-2.2.0-storm-plugin.tar.gz\n#  ranger-2.2.0-hive-plugin.tar.gz    ranger-2.2.0-storm-plugin.zip\n#  ranger-2.2.0-hive-plugin.zip       ranger-2.2.0-tagsync.tar.gz\n#  ranger-2.2.0-kafka-plugin.tar.gz   ranger-2.2.0-tagsync.zip\n#  ranger-2.2.0-kafka-plugin.zip      ranger-2.2.0-usersync.tar.gz\n#  ranger-2.2.0-kms.tar.gz            ranger-2.2.0-usersync.zip\n#  ranger-2.2.0-kms.zip               ranger-2.2.0-yarn-plugin.tar.gz\n#  ranger-2.2.0-knox-plugin.tar.gz    ranger-2.2.0-yarn-plugin.zip\n#  ranger-2.2.0-knox-plugin.zip       rat.txt\n#  ranger-2.2.0-kylin-plugin.tar.gz   version\n#  ranger-2.2.0-kylin-plugin.zip\n#  Just going with the admin server here -- to include others, extract to a unique location and then copy path across\n#  to runtime image below\nRUN mkdir -p /opt/ranger-admin\nRUN tar xzf /root/ranger/target/ranger-*-admin.tar.gz --strip-components 1 -C /opt/ranger-admin\nCOPY dist/ranger-docker-start.sh /opt/ranger-admin/ranger-docker-start.sh\nRUN chmod 755 /opt/ranger-admin/ranger-docker-start.sh\n#  Configure and install Solr locally\nWORKDIR /opt/ranger-admin/contrib/solr_for_audit_setup\nRUN sed -i 's|SOLR_INSTALL=false|SOLR_INSTALL=true|' install.properties\nRUN sed -i \"s|SOLR_DOWNLOAD_URL=|SOLR_DOWNLOAD_URL=http://www.mirrorservice.org/sites/ftp.apache.org/lucene/solr/7.7.1/solr-7.7.1.tgz|\" install.properties\nRUN ./setup.sh\nRUN sed -i 's|^SOLR_JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"$|SOLR_JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"|g' /opt/solr/ranger_audit_server/scripts/solr.in.sh\nWORKDIR /opt/ranger-admin\nRUN sed -i \"s|^DB_FLAVOR=MYSQL|DB_FLAVOR=POSTGRES|g\" install.properties\nRUN sed -i \"s|^SQL_CONNECTOR_JAR=/usr/share/java/mysql-connector-java.jar|SQL_CONNECTOR_JAR=/usr/share/java/postgresql-jdbc.jar|g\" install.properties\nRUN sed -i \"s|^audit_solr_urls=|audit_solr_urls=http://localhost:6083/solr/ranger_audits|g\" install.properties\n#  Create minimal runtime image\nFROM openjdk:8-jdk-alpine\nLABEL org.label-schema.schema-version=\"= \\\"1.0\\\"\"\nLABEL org.label-schema.vendor=\"= \\\"ODPi\\\"\"\nLABEL org.label-schema.name=\"= \\\"ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.description=\"= \\\"Apache Ranger administration server, for use as part of ODPi Egeria Virtual Data Connector demonstrations.\\\"\"\nLABEL org.label-schema.url=\"= \\\"https://egeria.odpi.org/open-metadata-resources/open-metadata-deployment/\\\"\"\nLABEL org.label-schema.vcs-url=\"= \\\"https://github.com/odpi/egeria/tree/master/open-metadata-resources/open-metadata-deployment/docker/ranger\\\"\"\nLABEL org.label-schema.docker.cmd=\"= \\\"docker run -d -p 6080:6080 -p 6182:6182 -p 6083:6083 -p 6183:6183 -e PGUSER=postgres -e PGPASSWORD=passw0rd -e PGHOST=host -e RANGER_PASSWORD=admin999 odpi/ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.docker.debug=\"= \\\"docker exec -it $CONTAINER /bin/sh\\\"\"\nLABEL org.label-schema.docker.params=\"= \\\"PGUSER=postgres user,PGPASSWORD=postgres password,PGHOST=postgres host,RANGER_PASSWORD=password to init for ranger admin user\\\"\"\nRUN apk --no-cache add python bash java-postgresql-jdbc bc shadow procps \\\n && apk --no-cache update \\\n && apk --no-cache upgrade\nRUN groupadd -r ranger -g 1000 \\\n && useradd --no-log-init -r -g ranger -u 1000 -d /opt/ranger-admin ranger\nRUN groupadd -r solr -g 1001 \\\n && useradd --no-log-init -r -g solr -u 1001 -d /opt/solr solr \\\n && mkdir -p /var/log/solr/ranger_audits \\\n && chown solr:solr /var/log/solr/ranger_audits\nCOPY --chown=ranger:ranger --from=build /opt/ranger-admin/ /opt/ranger-admin/\nCOPY --chown=ranger:ranger --from=build /git.* /opt/details/\nCOPY --chown=solr:solr --from=build /opt/solr/ /opt/solr/\n#  Once Solr is separated, we whould run this as the ranger user (non-root)\n# USER ranger:ranger\nWORKDIR /opt/ranger-admin\nEXPOSE 6080/tcp 6182/tcp 6083/tcp 6183/tcp\nENTRYPOINT [\"/bin/bash\", \"-c\", \"/opt/ranger-admin/ranger-docker-start.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"348e7bc7cc4bcfef0cdbcc210179040e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   SPDX-License-Identifier: Apache-2.0\n#   Copyright Contributors to the Egeria project\nFROM ubuntu:18.10 AS build\n#   Install Git, which is missing from the Ubuntu base images.\nRUN apt-get update \\\n && apt-get install git python openjdk-8-jdk maven wget inetutils-ping dnsutils gzip tar -y\nRUN apt-get update \\\n && apt-get install git python openjdk-8-jdk maven wget libpostgresql-jdbc-java iputils-ping net-tools vim lsof apt-utils build-essential lsb-core lsb-release -y\nARG branch\nENV branch=\"${branch:-master}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV MAVEN_HOME=\"/usr/share/maven\"\nENV PATH=\"/usr/java/bin:/usr/local/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   Working directory\nWORKDIR /root\n#   Pull down Ranger and build it\nRUN git clone http://github.com/apache/ranger.git -b ${branch}\n#   Remove -DskipTests if unit tests are to be included - build the code...\nWORKDIR /root/ranger\n#   -Pall is normally used on non-linux platforms as it skips the native security plugins. However the -Plinux profile\n#   is currently pulling in a later maven assembly plugin as of 2018.11.05 which is breaking the build/packaging for\n#   the 1.2 branch....\nRUN mvn -Pall -DskipTests=true clean compile package install assembly:assembly\nRUN git log > /git.log \\\n && echo ${branch} > /git.branch \\\n && git remote -v > /git.remote\n#   We have now built the latest ranger from source - let's unpack and setup the admin server & UI\n#   After a build, the target directory looks like this - we need to chose the zips we're interested in deploying\n#   in this docker image\n#\n#   antrun                                      ranger-2.2.0-migration-util.tar.gz\n#   archive-tmp                                 ranger-2.2.0-migration-util.zip\n#   maven-shared-archive-resources              ranger-2.2.0-ranger-tools.tar.gz\n#   ranger-2.2.0-admin.tar.gz          ranger-2.2.0-ranger-tools.zip\n#   ranger-2.2.0-admin.zip             ranger-2.2.0-solr-plugin.tar.gz\n#   ranger-2.2.0-atlas-plugin.tar.gz   ranger-2.2.0-solr-plugin.zip\n#   ranger-2.2.0-atlas-plugin.zip      ranger-2.2.0-sqoop-plugin.tar.gz\n#   ranger-2.2.0-hbase-plugin.tar.gz   ranger-2.2.0-sqoop-plugin.zip\n#   ranger-2.2.0-hbase-plugin.zip      ranger-2.2.0-src.tar.gz\n#   ranger-2.2.0-hdfs-plugin.tar.gz    ranger-2.2.0-src.zip\n#   ranger-2.2.0-hdfs-plugin.zip       ranger-2.2.0-storm-plugin.tar.gz\n#   ranger-2.2.0-hive-plugin.tar.gz    ranger-2.2.0-storm-plugin.zip\n#   ranger-2.2.0-hive-plugin.zip       ranger-2.2.0-tagsync.tar.gz\n#   ranger-2.2.0-kafka-plugin.tar.gz   ranger-2.2.0-tagsync.zip\n#   ranger-2.2.0-kafka-plugin.zip      ranger-2.2.0-usersync.tar.gz\n#   ranger-2.2.0-kms.tar.gz            ranger-2.2.0-usersync.zip\n#   ranger-2.2.0-kms.zip               ranger-2.2.0-yarn-plugin.tar.gz\n#   ranger-2.2.0-knox-plugin.tar.gz    ranger-2.2.0-yarn-plugin.zip\n#   ranger-2.2.0-knox-plugin.zip       rat.txt\n#   ranger-2.2.0-kylin-plugin.tar.gz   version\n#   ranger-2.2.0-kylin-plugin.zip\n#   Just going with the admin server here -- to include others, extract to a unique location and then copy path across\n#   to runtime image below\nRUN mkdir -p /opt/ranger-admin\nRUN tar xzf /root/ranger/target/ranger-*-admin.tar.gz --strip-components 1 -C /opt/ranger-admin\nCOPY dist/ranger-docker-start.sh /opt/ranger-admin/ranger-docker-start.sh\nRUN chmod 755 /opt/ranger-admin/ranger-docker-start.sh\n#   Configure and install Solr locally\nWORKDIR /opt/ranger-admin/contrib/solr_for_audit_setup\nRUN sed -i 's|SOLR_INSTALL=false|SOLR_INSTALL=true|' install.properties\nRUN sed -i \"s|SOLR_DOWNLOAD_URL=|SOLR_DOWNLOAD_URL=http://www.mirrorservice.org/sites/ftp.apache.org/lucene/solr/7.7.1/solr-7.7.1.tgz|\" install.properties\nRUN ./setup.sh\nRUN sed -i 's|^SOLR_JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"$|SOLR_JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"|g' /opt/solr/ranger_audit_server/scripts/solr.in.sh\nWORKDIR /opt/ranger-admin\nRUN sed -i \"s|^DB_FLAVOR=MYSQL|DB_FLAVOR=POSTGRES|g\" install.properties\nRUN sed -i \"s|^SQL_CONNECTOR_JAR=/usr/share/java/mysql-connector-java.jar|SQL_CONNECTOR_JAR=/usr/share/java/postgresql-jdbc.jar|g\" install.properties\nRUN sed -i \"s|^audit_solr_urls=|audit_solr_urls=http://localhost:6083/solr/ranger_audits|g\" install.properties\n#   Create minimal runtime image\nFROM openjdk:8-jdk-alpine\nLABEL org.label-schema.schema-version=\"= \\\"1.0\\\"\"\nLABEL org.label-schema.vendor=\"= \\\"ODPi\\\"\"\nLABEL org.label-schema.name=\"= \\\"ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.description=\"= \\\"Apache Ranger administration server, for use as part of ODPi Egeria Virtual Data Connector demonstrations.\\\"\"\nLABEL org.label-schema.url=\"= \\\"https://egeria.odpi.org/open-metadata-resources/open-metadata-deployment/\\\"\"\nLABEL org.label-schema.vcs-url=\"= \\\"https://github.com/odpi/egeria/tree/master/open-metadata-resources/open-metadata-deployment/docker/ranger\\\"\"\nLABEL org.label-schema.docker.cmd=\"= \\\"docker run -d -p 6080:6080 -p 6182:6182 -p 6083:6083 -p 6183:6183 -e PGUSER=postgres -e PGPASSWORD=passw0rd -e PGHOST=host -e RANGER_PASSWORD=admin999 odpi/ranger-admin-egeriavdc\\\"\"\nLABEL org.label-schema.docker.debug=\"= \\\"docker exec -it $CONTAINER /bin/sh\\\"\"\nLABEL org.label-schema.docker.params=\"= \\\"PGUSER=postgres user,PGPASSWORD=postgres password,PGHOST=postgres host,RANGER_PASSWORD=password to init for ranger admin user\\\"\"\nRUN apk --no-cache add python bash java-postgresql-jdbc bc shadow procps \\\n && apk --no-cache update \\\n && apk --no-cache upgrade\nRUN groupadd -r ranger -g 1000 \\\n && useradd --no-log-init -r -g ranger -u 1000 -d /opt/ranger-admin ranger\nRUN groupadd -r solr -g 1001 \\\n && useradd --no-log-init -r -g solr -u 1001 -d /opt/solr solr \\\n && mkdir -p /var/log/solr/ranger_audits \\\n && chown solr:solr /var/log/solr/ranger_audits\nCOPY --chown=ranger:ranger --from=build /opt/ranger-admin/ /opt/ranger-admin/\nCOPY --chown=ranger:ranger --from=build /git.* /opt/details/\nCOPY --chown=solr:solr --from=build /opt/solr/ /opt/solr/\n#   Once Solr is separated, we whould run this as the ranger user (non-root)\n#  USER ranger:ranger\nWORKDIR /opt/ranger-admin\nEXPOSE 6080/tcp 6182/tcp 6083/tcp 6183/tcp\nENTRYPOINT [\"/bin/bash\", \"-c\", \"/opt/ranger-admin/ranger-docker-start.sh\"]\n","originalDockerfileUglifiedHash":"ea22439be7ed0c165e18cf1202ad7dd5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/69ae7e5f9e045f97c53965789a8c3a8bc922cdf0.dockerfile"}