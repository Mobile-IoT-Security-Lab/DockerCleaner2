{"seed":2818079088,"processedDockerfileHash":"d9c85d9ac80274913ac1cae170f07ea5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Build an image that can do training and inference in SageMaker\n#   This is a Python 2 image that uses the nginx, gunicorn, flask stack\n#   for serving inferences in a stable way.\nFROM ubuntu:16.04\n#  FOR GPU:\n#  option 1/   nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\n#  option 2/  (smile case)#  FROM nvidia/cuda:9.0-base-ubuntu16.04\n#  option 3/  for docker gpu on local cpu:  github.com/NVIDIA/nvidia-docker\n#  **always run apt-get update with next command to fix caching issues\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip=6.0-20ubuntu1.1 -y\n#  libgcc option\nRUN apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 python3.5=3.5.2-2ubuntu0~16.04.13 nginx=1.10.3-0ubuntu0.16.04.5 ca-certificates=20210119~16.04.1 libgcc-5-dev=5.4.0-6ubuntu1~16.04.12 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  For cv2:\nRUN apt-get update \\\n && apt-get install --no-install-recommends libxrender1=1:0.9.9-0ubuntu1 libsm6=2:1.2.2-1 libglib2.0 libxext6=2:1.3.3-1 -y\n#  For matlabplot:\nRUN apt-get install --no-install-recommends python3-tk=3.5.1-1 -y\nRUN apt-get install --no-install-recommends vim=2:7.4.1689-3ubuntu1.5 -y\n#  Python\nRUN wget https://bootstrap.pypa.io/3.3/get-pip.py \\\n && python3.5 get-pip.py\nRUN pip3 install --upgrade pip\n#  https://medium.com/smileinnovation/sagemaker-bring-your-own-algorithms-719dd539607d\n#  cuda-command-line-tools-9<96>0\n#  cuda-cublas-dev-9<96>0\n#  cuda-cudart-dev-9<96>0\n#  cuda-cufft-dev-9<96>0\n#  cuda-curand-dev-9<96>0\n#  cuda-cusolver-dev-9<96>0\n#  cuda-cusparse-dev-9<96>0\n#  libcudnn7=7.0.5.15<96>1+cuda9.0\n#  libcudnn7-dev=7.0.5.15<96>1+cuda9.0\n#  ?Both tensorflows?\n#  So, what I did is to detect if the <93>import<94> of tensorflow raises an exception. \n#  If it does, I uninstall <93>tensorflow-gpu<94> and install \n#  <93>tensorflow<94> at the Docker container startup. \n#  It results in a few more seconds to start up the instance, but this \n#  <93>hack<94> is working perfectly fine in this scenario. I<92>m pretty sure \n#  there are other ways to do it, feel free to comment if you have one in your mind.\n#  std pothole requirements.txt\nRUN pip3 install tensorflow > =1.5.1\n#  GPU - requires blas libs etc#  RUN pip3 install tensorflow-gpu>=1.5.1\nRUN pip3 install keras > =2.0.8\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install Pillow\nRUN pip3 install cython\nRUN pip3 install matplotlib\nRUN pip3 install scikit-image\nRUN pip3 install opencv-python\nRUN pip3 install h5py\nRUN pip3 install imgaug\nRUN pip3 install IPython[all]\nRUN pip3 install moviepy\nRUN pip3 install pytesseract\nRUN pip3 install flask gevent gunicorn\nRUN pip3 install boto3\nRUN pip3 install configparser\nRUN pip3 install imageio\n#   Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering our standard\n#   output stream, which means that logs can be delivered to the user quickly. PYTHONDONTWRITEBYTECODE\n#   keeps Python from writing the .pyc files which are unnecessary in this case. We also update\n#   PATH so that the train and serve programs are found when the container is invoked.\nENV PYTHONUNBUFFERED=\"TRUE\"\nENV PYTHONDONTWRITEBYTECODE=\"TRUE\"\nENV PATH=\"/opt/program:${PATH}\"\n#  OTHER ENV options:\n#  zero#  ENV MODELS_PATH=/opt/ml/model\n#   Set up the program in the image\nCOPY pothole_base /opt/program\nRUN chmod +x /opt/program/train /opt/program/serve\nRUN wget https://tests-road-damage.s3.amazonaws.com/sagemaker/mask_rcnn_pothole_0005.h5\nRUN mv mask_rcnn_pothole_0005.h5 /opt/program/pothole\n#   install ffmpeg from imageio.\nRUN python3.5 -c \"import imageio; imageio.plugins.ffmpeg.download()\"\n#  add soft link so that ffmpeg can executed (like usual) from command line\nRUN ln -s /root/.imageio/ffmpeg/ffmpeg.linux64 /usr/bin/ffmpeg\nWORKDIR /opt/program\n#  set default python version to 3.5\nRUN touch ~/.bash_aliases \\\n && echo alias python='python3.5' > ~/.bash_aliases\nRUN alias python=python3.5\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Build an image that can do training and inference in SageMaker\n#  This is a Python 2 image that uses the nginx, gunicorn, flask stack\n#  for serving inferences in a stable way.\nFROM ubuntu:16.04\n# FOR GPU:\n# option 1/   nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\n# option 2/  (smile case)#  FROM nvidia/cuda:9.0-base-ubuntu16.04\n# option 3/  for docker gpu on local cpu:  github.com/NVIDIA/nvidia-docker\n# **always run apt-get update with next command to fix caching issues\nRUN apt-get update \\\n && apt-get install unzip -y\n# libgcc option\nRUN apt-get install --no-install-recommends wget python3.5 nginx ca-certificates libgcc-5-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n# For cv2:\nRUN apt-get update \\\n && apt-get install libxrender1 libsm6 libglib2.0 libxext6 -y\n# For matlabplot:\nRUN apt-get install python3-tk -y\nRUN apt-get install vim -y\n# Python\nRUN wget https://bootstrap.pypa.io/3.3/get-pip.py \\\n && python3.5 get-pip.py\nRUN pip3 install --upgrade pip\n# https://medium.com/smileinnovation/sagemaker-bring-your-own-algorithms-719dd539607d\n# cuda-command-line-tools-9<96>0\n# cuda-cublas-dev-9<96>0\n# cuda-cudart-dev-9<96>0\n# cuda-cufft-dev-9<96>0\n# cuda-curand-dev-9<96>0\n# cuda-cusolver-dev-9<96>0\n# cuda-cusparse-dev-9<96>0\n# libcudnn7=7.0.5.15<96>1+cuda9.0\n# libcudnn7-dev=7.0.5.15<96>1+cuda9.0\n# ?Both tensorflows?\n# So, what I did is to detect if the <93>import<94> of tensorflow raises an exception. \n# If it does, I uninstall <93>tensorflow-gpu<94> and install \n# <93>tensorflow<94> at the Docker container startup. \n# It results in a few more seconds to start up the instance, but this \n# <93>hack<94> is working perfectly fine in this scenario. I<92>m pretty sure \n# there are other ways to do it, feel free to comment if you have one in your mind.\n# std pothole requirements.txt\nRUN pip3 install tensorflow > =1.5.1\n# GPU - requires blas libs etc#  RUN pip3 install tensorflow-gpu>=1.5.1\nRUN pip3 install keras > =2.0.8\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install Pillow\nRUN pip3 install cython\nRUN pip3 install matplotlib\nRUN pip3 install scikit-image\nRUN pip3 install opencv-python\nRUN pip3 install h5py\nRUN pip3 install imgaug\nRUN pip3 install IPython[all]\nRUN pip3 install moviepy\nRUN pip3 install pytesseract\nRUN pip3 install flask gevent gunicorn\nRUN pip3 install boto3\nRUN pip3 install configparser\nRUN pip3 install imageio\n#  Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering our standard\n#  output stream, which means that logs can be delivered to the user quickly. PYTHONDONTWRITEBYTECODE\n#  keeps Python from writing the .pyc files which are unnecessary in this case. We also update\n#  PATH so that the train and serve programs are found when the container is invoked.\nENV PYTHONUNBUFFERED=\"TRUE\"\nENV PYTHONDONTWRITEBYTECODE=\"TRUE\"\nENV PATH=\"/opt/program:${PATH}\"\n# OTHER ENV options:\n# zero#  ENV MODELS_PATH=/opt/ml/model\n#  Set up the program in the image\nCOPY pothole_base /opt/program\nRUN chmod +x /opt/program/train /opt/program/serve\nRUN wget https://tests-road-damage.s3.amazonaws.com/sagemaker/mask_rcnn_pothole_0005.h5\nRUN mv mask_rcnn_pothole_0005.h5 /opt/program/pothole\n#  install ffmpeg from imageio.\nRUN python3.5 -c \"import imageio; imageio.plugins.ffmpeg.download()\"\n# add soft link so that ffmpeg can executed (like usual) from command line\nRUN ln -s /root/.imageio/ffmpeg/ffmpeg.linux64 /usr/bin/ffmpeg\nWORKDIR /opt/program\n# set default python version to 3.5\nRUN touch ~/.bash_aliases \\\n && echo alias python='python3.5' > ~/.bash_aliases\nRUN alias python=python3.5\n","injectedSmells":[],"originalDockerfileHash":"511d7bab768019789e4bb0f8a7f87970","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Build an image that can do training and inference in SageMaker\n#   This is a Python 2 image that uses the nginx, gunicorn, flask stack\n#   for serving inferences in a stable way.\nFROM ubuntu:16.04\n#  FOR GPU:\n#  option 1/   nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\n#  option 2/  (smile case)#  FROM nvidia/cuda:9.0-base-ubuntu16.04\n#  option 3/  for docker gpu on local cpu:  github.com/NVIDIA/nvidia-docker\n#  **always run apt-get update with next command to fix caching issues\nRUN apt-get update \\\n && apt-get install unzip -y\n#  libgcc option\nRUN apt-get install --no-install-recommends wget python3.5 nginx ca-certificates libgcc-5-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  For cv2:\nRUN apt-get update \\\n && apt-get install libxrender1 libsm6 libglib2.0 libxext6 -y\n#  For matlabplot:\nRUN apt-get install python3-tk -y\nRUN apt-get install vim -y\n#  Python\nRUN wget https://bootstrap.pypa.io/3.3/get-pip.py \\\n && python3.5 get-pip.py\nRUN pip3 install --upgrade pip\n#  https://medium.com/smileinnovation/sagemaker-bring-your-own-algorithms-719dd539607d\n#  cuda-command-line-tools-9<96>0\n#  cuda-cublas-dev-9<96>0\n#  cuda-cudart-dev-9<96>0\n#  cuda-cufft-dev-9<96>0\n#  cuda-curand-dev-9<96>0\n#  cuda-cusolver-dev-9<96>0\n#  cuda-cusparse-dev-9<96>0\n#  libcudnn7=7.0.5.15<96>1+cuda9.0\n#  libcudnn7-dev=7.0.5.15<96>1+cuda9.0\n#  ?Both tensorflows?\n#  So, what I did is to detect if the <93>import<94> of tensorflow raises an exception. \n#  If it does, I uninstall <93>tensorflow-gpu<94> and install \n#  <93>tensorflow<94> at the Docker container startup. \n#  It results in a few more seconds to start up the instance, but this \n#  <93>hack<94> is working perfectly fine in this scenario. I<92>m pretty sure \n#  there are other ways to do it, feel free to comment if you have one in your mind.\n#  std pothole requirements.txt\nRUN pip3 install tensorflow > =1.5.1\n#  GPU - requires blas libs etc#  RUN pip3 install tensorflow-gpu>=1.5.1\nRUN pip3 install keras > =2.0.8\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install Pillow\nRUN pip3 install cython\nRUN pip3 install matplotlib\nRUN pip3 install scikit-image\nRUN pip3 install opencv-python\nRUN pip3 install h5py\nRUN pip3 install imgaug\nRUN pip3 install IPython[all]\nRUN pip3 install moviepy\nRUN pip3 install pytesseract\nRUN pip3 install flask gevent gunicorn\nRUN pip3 install boto3\nRUN pip3 install configparser\nRUN pip3 install imageio\n#   Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering our standard\n#   output stream, which means that logs can be delivered to the user quickly. PYTHONDONTWRITEBYTECODE\n#   keeps Python from writing the .pyc files which are unnecessary in this case. We also update\n#   PATH so that the train and serve programs are found when the container is invoked.\nENV PYTHONUNBUFFERED=\"TRUE\"\nENV PYTHONDONTWRITEBYTECODE=\"TRUE\"\nENV PATH=\"/opt/program:${PATH}\"\n#  OTHER ENV options:\n#  zero#  ENV MODELS_PATH=/opt/ml/model\n#   Set up the program in the image\nCOPY pothole_base /opt/program\nRUN chmod +x /opt/program/train /opt/program/serve\nRUN wget https://tests-road-damage.s3.amazonaws.com/sagemaker/mask_rcnn_pothole_0005.h5\nRUN mv mask_rcnn_pothole_0005.h5 /opt/program/pothole\n#   install ffmpeg from imageio.\nRUN python3.5 -c \"import imageio; imageio.plugins.ffmpeg.download()\"\n#  add soft link so that ffmpeg can executed (like usual) from command line\nRUN ln -s /root/.imageio/ffmpeg/ffmpeg.linux64 /usr/bin/ffmpeg\nWORKDIR /opt/program\n#  set default python version to 3.5\nRUN touch ~/.bash_aliases \\\n && echo alias python='python3.5' > ~/.bash_aliases\nRUN alias python=python3.5\n","originalDockerfileUglifiedHash":"1f500d395d1f57c813c74d0cf2c1e45c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9f6432289d27c4b4c4877658d52f8ebd000766fd.dockerfile"}