{"seed":3104349079,"processedDockerfileHash":"0996618020407cc8eca746c29d032234","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   build from ubuntu\nFROM ubuntu:14.04\nMAINTAINER Kyle F <kylef@lab41.org>\n#   configure headless install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install base\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends bc=1.06.95-8ubuntu1 build-essential=11.6ubuntu6 cmake=2.8.12.2-0ubuntu3 curl=7.35.0-1ubuntu2.20 dnsutils=1:9.9.5.dfsg-3ubuntu0.19 g++=4:4.8.2-1ubuntu6 g++-4.6=4.6.4-6ubuntu2 g++-4.6-multilib=4.6.4-6ubuntu2 gcc-4.6=4.6.4-6ubuntu2 gcc-4.6-multilib=4.6.4-6ubuntu2 gfortran=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 htop=1.0.2-3 inetutils-ping=2:1.9.2-1 less=458-2 libatlas-base-dev=3.10.1-4 libatlas-dev=3.10.1-4 libboost-all-dev=1.54.0.1ubuntu1 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 libfreeimage-dev=3.15.4-3ubuntu0.1 libfreetype6=2.5.2-1ubuntu2.8 libfreetype6-dev=2.5.2-1ubuntu2.8 libhdf5-serial-dev=1.8.11-5ubuntu7.1 libjpeg-dev=8c-2ubuntu8 libjpeg62=6b1-4ubuntu1 liblapack-dev=3.5.0-2ubuntu1 libleveldb-dev=1.15.0-2 liblmdb-dev=0.9.10-1 libopencv-dev=2.4.8+dfsg1-2ubuntu1.2 libpng12-dev=1.2.50-1ubuntu2.14.04.3 libprotobuf-dev=2.5.0-9ubuntu1 libsnappy-dev=1.1.0-1ubuntu1 libyaml-dev=0.1.4-3ubuntu3.1 net-tools=1.60-25ubuntu2.1 netcat=1.10-40 nmap=6.40-0.2ubuntu1 pkgconf=0.9.4-1 protobuf-compiler=2.5.0-9ubuntu1 python-dev=2.7.5-5ubuntu3 python-lxml=3.3.3-1ubuntu0.2 python-magic=1:5.14-2ubuntu3.4 python-matplotlib=1.3.1-1ubuntu5.1 python-numpy=1:1.8.2-0ubuntu0.1 python-pip=1.5.4-1ubuntu4 python-scipy=0.13.3-1build1 socat=1.7.2.3-1 software-properties-common=0.92.37.8 sudo=1.8.9p5-1ubuntu1.4 telnet=0.17-36build2 tree=1.6.0-1 unzip=6.0-9ubuntu1.5 vim=2:7.4.052-1ubuntu3.1 wget=1.15-1ubuntu1.14.04.5 --assume-yes )\n#   Use gcc 4.6\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.6 30 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 30\n#   install python modules\nRUN pip install ipython==8.12.0 jinja2==3.1.2 tornado==6.2 jsonschema==4.17.3 terminado==0.17.1 simplejson==3.19.1\n#   setup ipython\nENV IPYTHONDIR=\"/ipython\"\nRUN mkdir /ipython \\\n && ipython profile create nbserver\n#   install/configure CUDA\n#   Uses .run file; .deb files install CUDA 7.5 for some reason\n#   Change to the /tmp directory\nRUN cd /tmp \\\n && wget -nv http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:/usr/local/cuda/lib:$LD_LIBRARY_PATH\"\nRUN echo \"/usr/local/cuda/lib64\" > /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\n#   download/configure/install neon 1.0.0\nRUN pip install virtualenv==20.21.0\nRUN cd /opt/ \\\n && wget -nv https://github.com/NervanaSystems/neon/archive/v1.0.0.tar.gz\n#   untar to a standard location\nRUN cd /opt \\\n && tar -xzvf v1.0.0.tar.gz \\\n && mv neon-1.0.0 neon\nRUN cd /opt/neon \\\n && sed -i 's/(CRST, KRST)/(CRST ,)/g' neon/backends/layer_gpu.py \\\n && make sysinstall\n#   make some updates\nRUN pip install six==1.16.0 -U\n#   add gensim \nRUN pip install gensim==4.3.1\nRUN pip install nltk==3.8.1\n#   add python\n#  RUN cd /tmp && \\\n#      git clone https://github.com/maciejkula/glove-python.git && \\\n#      cd glove-python && \\\n#      python setup.py install && \\\n#      rm -rf *\n#   install custom glove code\nRUN cd /tmp \\\n && git clone https://github.com/Lab41/sunny-side-up.git \\\n && cd sunny-side-up/src/glove \\\n && python setup.py install \\\n && rm -rf *\n#   six version conflict (1.5.2 vs 1.9+)\nRUN echo \"\\ndeb http://archive.ubuntu.com/ubuntu/ vivid main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python-six=1.5.2-1ubuntu1.1 )\n#   remove vivid repositories\nRUN sed -i '$d' /etc/apt/sources.list \\\n && :\n#   default to shell in root dir\nWORKDIR /root\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  build from ubuntu\nFROM ubuntu:14.04\nMAINTAINER Kyle F <kylef@lab41.org>\n#  configure headless install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  install base\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl dnsutils g++ g++-4.6 g++-4.6-multilib gcc-4.6 gcc-4.6-multilib gfortran git htop inetutils-ping less libatlas-base-dev libatlas-dev libboost-all-dev libffi-dev libfreeimage-dev libfreetype6 libfreetype6-dev libhdf5-serial-dev libjpeg-dev libjpeg62 liblapack-dev libleveldb-dev liblmdb-dev libopencv-dev libpng12-dev libprotobuf-dev libsnappy-dev libyaml-dev net-tools netcat nmap pkgconf protobuf-compiler python-dev python-lxml python-magic python-matplotlib python-numpy python-pip python-scipy socat software-properties-common sudo telnet tree unzip vim wget --assume-yes\n#  Use gcc 4.6\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.6 30 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 30\n#  install python modules\nRUN pip install ipython jinja2 tornado jsonschema terminado simplejson\n#  setup ipython\nENV IPYTHONDIR=\"/ipython\"\nRUN mkdir /ipython \\\n && ipython profile create nbserver\n#  install/configure CUDA\n#  Uses .run file; .deb files install CUDA 7.5 for some reason\n#  Change to the /tmp directory\nRUN cd /tmp \\\n && wget -nv http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:/usr/local/cuda/lib:$LD_LIBRARY_PATH\"\nRUN echo \"/usr/local/cuda/lib64\" > /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\n#  download/configure/install neon 1.0.0\nRUN pip install virtualenv\nRUN cd /opt/ \\\n && wget -nv https://github.com/NervanaSystems/neon/archive/v1.0.0.tar.gz\n#  untar to a standard location\nRUN cd /opt \\\n && tar -xzvf v1.0.0.tar.gz \\\n && mv neon-1.0.0 neon\nRUN cd /opt/neon \\\n && sed -i 's/(CRST, KRST)/(CRST ,)/g' neon/backends/layer_gpu.py \\\n && make sysinstall\n#  make some updates\nRUN pip install six -U\n#  add gensim \nRUN pip install gensim\nRUN pip install nltk\n#  add python\n# RUN cd /tmp && \\\n#     git clone https://github.com/maciejkula/glove-python.git && \\\n#     cd glove-python && \\\n#     python setup.py install && \\\n#     rm -rf *\n#  install custom glove code\nRUN cd /tmp \\\n && git clone https://github.com/Lab41/sunny-side-up.git \\\n && cd sunny-side-up/src/glove \\\n && python setup.py install \\\n && rm -rf *\n#  six version conflict (1.5.2 vs 1.9+)\nRUN echo \"\\ndeb http://archive.ubuntu.com/ubuntu/ vivid main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install python-six\n#  remove vivid repositories\nRUN sed -i '$d' /etc/apt/sources.list \\\n && apt-get update\n#  default to shell in root dir\nWORKDIR /root\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"a2e6d0d06368b877133bc991b9089b97","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   build from ubuntu\nFROM ubuntu:14.04\nMAINTAINER Kyle F <kylef@lab41.org>\n#   configure headless install\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install base\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl dnsutils g++ g++-4.6 g++-4.6-multilib gcc-4.6 gcc-4.6-multilib gfortran git htop inetutils-ping less libatlas-base-dev libatlas-dev libboost-all-dev libffi-dev libfreeimage-dev libfreetype6 libfreetype6-dev libhdf5-serial-dev libjpeg-dev libjpeg62 liblapack-dev libleveldb-dev liblmdb-dev libopencv-dev libpng12-dev libprotobuf-dev libsnappy-dev libyaml-dev net-tools netcat nmap pkgconf protobuf-compiler python-dev python-lxml python-magic python-matplotlib python-numpy python-pip python-scipy socat software-properties-common sudo telnet tree unzip vim wget --assume-yes\n#   Use gcc 4.6\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-4.6 30 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 30 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 30\n#   install python modules\nRUN pip install ipython jinja2 tornado jsonschema terminado simplejson\n#   setup ipython\nENV IPYTHONDIR=\"/ipython\"\nRUN mkdir /ipython \\\n && ipython profile create nbserver\n#   install/configure CUDA\n#   Uses .run file; .deb files install CUDA 7.5 for some reason\n#   Change to the /tmp directory\nRUN cd /tmp \\\n && wget -nv http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"\nENV LIBRARY_PATH=\"/usr/local/lib:/usr/local/cuda/lib:$LD_LIBRARY_PATH\"\nRUN echo \"/usr/local/cuda/lib64\" > /etc/ld.so.conf.d/cuda.conf \\\n && ldconfig\n#   download/configure/install neon 1.0.0\nRUN pip install virtualenv\nRUN cd /opt/ \\\n && wget -nv https://github.com/NervanaSystems/neon/archive/v1.0.0.tar.gz\n#   untar to a standard location\nRUN cd /opt \\\n && tar -xzvf v1.0.0.tar.gz \\\n && mv neon-1.0.0 neon\nRUN cd /opt/neon \\\n && sed -i 's/(CRST, KRST)/(CRST ,)/g' neon/backends/layer_gpu.py \\\n && make sysinstall\n#   make some updates\nRUN pip install six -U\n#   add gensim \nRUN pip install gensim\nRUN pip install nltk\n#   add python\n#  RUN cd /tmp && \\\n#      git clone https://github.com/maciejkula/glove-python.git && \\\n#      cd glove-python && \\\n#      python setup.py install && \\\n#      rm -rf *\n#   install custom glove code\nRUN cd /tmp \\\n && git clone https://github.com/Lab41/sunny-side-up.git \\\n && cd sunny-side-up/src/glove \\\n && python setup.py install \\\n && rm -rf *\n#   six version conflict (1.5.2 vs 1.9+)\nRUN echo \"\\ndeb http://archive.ubuntu.com/ubuntu/ vivid main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install python-six\n#   remove vivid repositories\nRUN sed -i '$d' /etc/apt/sources.list \\\n && apt-get update\n#   default to shell in root dir\nWORKDIR /root\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"fd85cb6c1bf7e4df359c0b24d88f5135","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5424968870c0657c7b5966290dc65504537254ac.dockerfile"}