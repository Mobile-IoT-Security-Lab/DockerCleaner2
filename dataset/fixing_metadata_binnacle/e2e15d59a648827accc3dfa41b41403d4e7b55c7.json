{"seed":3769637616,"processedDockerfileHash":"4aa71b2c52034f05a3287209c96c4e12","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   phabricator\n#\n#   VERSION               0.1.1\n#\n#   Note this is referenced from \n#   - https://hub.docker.com/_/php/\n#   - https://secure.phabricator.com/book/phabricator/article/installation_guide/\n#\nFROM php:5-apache\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n#  ########################################\n#\n#   Depencies fetch and setup\n#\n#  ########################################\n#   install common package utility and dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git unzip zip libmcrypt-dev libssl-dev libcurl4-openssl-dev ftp sendmail python-pygments libpng-dev libjpeg-dev libfreetype6-dev libjpeg62-turbo-dev libpng12-dev -y\n#   Install pdo_mysql\nRUN docker-php-ext-install mysqli pdo_mysql\n#   Install phabricator dependencies\nRUN docker-php-ext-install -j$( nproc ;) curl sockets mbstring mcrypt zip iconv curl pcntl ftp opcache json \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd\n#   Note that since opcache comes preinstalled in php7\n#   APC is not installed (nor is there a way to do so in docker build)\n#   Install apache mod rewrite\nRUN a2enmod rewrite\n#   List possible modules to be installed\n#   RUN docker-php-ext-install\n#\n#   Download phabricator and its related branches\n#\nRUN mkdir /phabricator \\\n && cd /phabricator \\\n && git clone -b stable https://github.com/phacility/libphutil.git \\\n && git clone -b stable https://github.com/phacility/arcanist.git \\\n && git clone -b stable https://github.com/phacility/phabricator.git \\\n && git clone https://github.com/PHPOffice/PHPExcel.git \\\n && chmod -R +x .\n#\n#   Included PHPExcel\n#\nRUN cd /usr/local/etc/php/conf.d/ \\\n && echo 'include_path = \".:/usr/local/lib/php:/phabricator/PHPExcel/Classes\"' > include_path.ini\n#\n#   Overwrite document root\n#\n#   @TODO remove the \"require all granted\" global overwrite : I do not know why the Directory ruling is not working\n#\n#  \techo '\tAllowOverride All' >> apache2.conf && \\\n#  \tsed -i 's|DocumentRoot /var/www/html|DocumentRoot /phabricator/phabricator/webroot|' apache2.conf && \\\n#  \tsed -i 's|Require all denied|Require all granted|' apache2.conf && \\\n#\nRUN cd /etc/apache2/ \\\n && echo '' > sites-available/000-default.conf \\\n && echo '' > sites-available/default-ssl.conf \\\n && echo '' >> apache2.conf \\\n && echo '<VirtualHost *>' >> apache2.conf \\\n && echo ' <Directory \"/phabricator/phabricator/webroot/\">' >> apache2.conf \\\n && echo ' Options All Indexes FollowSymLinks' >> apache2.conf \\\n && echo ' Order allow,deny' >> apache2.conf \\\n && echo ' Allow from all' >> apache2.conf \\\n && echo ' Require all granted' >> apache2.conf \\\n && echo ' </Directory>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' ServerName localhost' >> apache2.conf \\\n && echo ' DocumentRoot /phabricator/phabricator/webroot' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' php_value post_max_size 32M' >> apache2.conf \\\n && echo ' php_value upload_max_filesize 32M' >> apache2.conf \\\n && echo ' php_value opcache.validate_timestamps 0' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' DirectoryIndex index.php' >> apache2.conf \\\n && echo ' RewriteEngine on' >> apache2.conf \\\n && echo ' RewriteRule ^/rsrc/(.*) - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^/favicon.ico - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^(.*)$ /index.php?__path__=$1 [B,L,QSA]' >> apache2.conf \\\n && echo '</VirtualHost>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && chmod +x sites-available/000-default.conf\n#\n#   Point and start setup in the work directory\n#\nWORKDIR /phabricator\n#  ########################################\n#\n#   Declare environment variables\n#\n#  ########################################\n#   Performs a phabricator upgrade on boot\n#   (note this can backfire, so do make due consideration on its usage)\nENV UPGRADE_ON_BOOT=\"false\"\n#   Site base url to use\nENV BASE_URL=\"\\\"\n#\n#   MYSQL storage, host, port, user, passwords\n#\nENV MYSQL_FILE_STORAGE=\"9000000\"\nENV MYSQL_HOST=\"mysql_host_here\"\nENV MYSQL_PORT=\"3306\"\nENV MYSQL_USER=\"phabricator\"\nENV MYSQL_PASS=\"password_over_here\"\n#   PHP script to inject\nENV PREAMBLE_SCRIPT=\"\\\"\n#   Additional script options\nENV PRE_SCRIPT=\"\\\"\n#   Enables / Disable background phd thread\nENV BACKGROUND_THREAD=\"true\"\n#\n#   SMTP settings, provide atleast an SMTP host to configure\n#\nENV SMTP_HOST=\"\\\"\nENV SMTP_PORT=\"25\"\nENV SMTP_USER=\"\\\"phabricator\\\"\"\nENV SMTP_PASS=\"\\\"\nENV SMTP_PROT=\"\\\"\nENV MAIL_ADAPTER=\"\\\"PhabricatorMailImplementationPHPMailerAdapter\\\"\"\n#\n#   More JSON local config (to add-on)\n#\nENV JSON_PARAMS=\"\\\"\n#  ########################################\n#\n#   Create actual setup-and-run script\n#\n#  ########################################\n#\n#   The actual giant setup script\n#\nRUN echo \"#!/bin/bash\" > setup-and-run.sh \\\n && echo 'INSTALL_DIR=\"/phabricator\"' >> setup-and-run.sh \\\n && echo 'PHAB_DIR=\"/phabricator/phabricator\";' >> setup-and-run.sh \\\n && echo 'PHAB_LOCAL_JSON=\"$PHAB_DIR/conf/local/local.json\";' >> setup-and-run.sh \\\n && echo 'echo \"<?php ${PREAMBLE_SCRIPT} ?>\" > $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'chmod +x $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'if [ \"$UPGRADE_ON_BOOT\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Doing library update on bootup (UPGRADE_ON_BOOT=true)\";' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/libphutil \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/arcanist \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/phabricator \\\n && git pull;' >> setup-and-run.sh \\\n && echo 'else' >> setup-and-run.sh \\\n && echo ' echo \"## Skipping library update (UPGRADE_ON_BOOT=false)\";' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$PRE_SCRIPT\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Running PRE_SCRIPT\";' >> setup-and-run.sh \\\n && echo ' eval ${PRE_SCRIPT};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Preparing ./conf/local/local.json (See: https://secure.phabricator.com/T11589)\";' >> setup-and-run.sh \\\n && echo 'echo \"{\" > ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$BASE_URL\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying base URL = ${BASE_URL}\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phabricator.base-uri\\\":\\\"${BASE_URL}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Applying MySQL configurations - ${MYSQL_HOST}\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.host\\\":\\\"${MYSQL_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.port\\\":\\\"${MYSQL_PORT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.user\\\":\\\"${MYSQL_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.pass\\\":\\\"${MYSQL_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"## Applying storage configurations\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"storage.mysql-engine.max-size\\\":${MYSQL_FILE_STORAGE},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$SMTP_HOST\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying SMTP config\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.mailer\\\":\\\"smtp\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-host\\\":\\\"${SMTP_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-port\\\":${SMTP_PORT},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-user\\\":\\\"${SMTP_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-password\\\":\\\"${SMTP_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-protocol\\\":\\\"${SMTP_PROT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"metamta.mail-adapter\\\":\\\"${MAIL_ADAPTER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$JSON_PARAMS\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \" $JSON_PARAMS,\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \" \\\"\\\":\\\"\\\"\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"}\" >> ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'echo \"## Running storage upgrade\";' >> setup-and-run.sh \\\n && echo '$PHAB_DIR/bin/storage upgrade --force;' >> setup-and-run.sh \\\n && echo 'if [ \"$BACKGROUND_THREAD\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Starting background thread\";' >> setup-and-run.sh \\\n && echo ' $PHAB_DIR/bin/phd start;' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && chmod +x setup-and-run.sh\n#   expose port 22 & 80\nEXPOSE 22/tcp 80/tcp\n#  ########################################\n#\n#   Actually run it\n#\n#  ########################################\nENTRYPOINT ./setup-and-run.sh \\\n && apache2-foreground\nCMD ./setup-and-run.sh \\\n && apache2-foreground\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#\n#  phabricator\n#\n#  VERSION               0.1.1\n#\n#  Note this is referenced from \n#  - https://hub.docker.com/_/php/\n#  - https://secure.phabricator.com/book/phabricator/article/installation_guide/\n#\nFROM php:5-apache\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n# ########################################\n#\n#  Depencies fetch and setup\n#\n# ########################################\n#  install common package utility and dependencies\nRUN apt-get update \\\n && apt-get install git unzip zip libmcrypt-dev libssl-dev libcurl4-openssl-dev ftp sendmail python-pygments libpng-dev libjpeg-dev libfreetype6-dev libjpeg62-turbo-dev libpng12-dev -y\n#  Install pdo_mysql\nRUN docker-php-ext-install mysqli pdo_mysql\n#  Install phabricator dependencies\nRUN docker-php-ext-install -j$( nproc ;) curl sockets mbstring mcrypt zip iconv curl pcntl ftp opcache json \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd\n#  Note that since opcache comes preinstalled in php7\n#  APC is not installed (nor is there a way to do so in docker build)\n#  Install apache mod rewrite\nRUN a2enmod rewrite\n#  List possible modules to be installed\n#  RUN docker-php-ext-install\n#\n#  Download phabricator and its related branches\n#\nRUN mkdir /phabricator \\\n && cd /phabricator \\\n && git clone -b stable https://github.com/phacility/libphutil.git \\\n && git clone -b stable https://github.com/phacility/arcanist.git \\\n && git clone -b stable https://github.com/phacility/phabricator.git \\\n && git clone https://github.com/PHPOffice/PHPExcel.git \\\n && chmod -R +x .\n#\n#  Included PHPExcel\n#\nRUN cd /usr/local/etc/php/conf.d/ \\\n && echo 'include_path = \".:/usr/local/lib/php:/phabricator/PHPExcel/Classes\"' > include_path.ini\n#\n#  Overwrite document root\n#\n#  @TODO remove the \"require all granted\" global overwrite : I do not know why the Directory ruling is not working\n#\n# \techo '\tAllowOverride All' >> apache2.conf && \\\n# \tsed -i 's|DocumentRoot /var/www/html|DocumentRoot /phabricator/phabricator/webroot|' apache2.conf && \\\n# \tsed -i 's|Require all denied|Require all granted|' apache2.conf && \\\n#\nRUN cd /etc/apache2/ \\\n && echo '' > sites-available/000-default.conf \\\n && echo '' > sites-available/default-ssl.conf \\\n && echo '' >> apache2.conf \\\n && echo '<VirtualHost *>' >> apache2.conf \\\n && echo ' <Directory \"/phabricator/phabricator/webroot/\">' >> apache2.conf \\\n && echo ' Options All Indexes FollowSymLinks' >> apache2.conf \\\n && echo ' Order allow,deny' >> apache2.conf \\\n && echo ' Allow from all' >> apache2.conf \\\n && echo ' Require all granted' >> apache2.conf \\\n && echo ' </Directory>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' ServerName localhost' >> apache2.conf \\\n && echo ' DocumentRoot /phabricator/phabricator/webroot' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' php_value post_max_size 32M' >> apache2.conf \\\n && echo ' php_value upload_max_filesize 32M' >> apache2.conf \\\n && echo ' php_value opcache.validate_timestamps 0' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' DirectoryIndex index.php' >> apache2.conf \\\n && echo ' RewriteEngine on' >> apache2.conf \\\n && echo ' RewriteRule ^/rsrc/(.*) - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^/favicon.ico - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^(.*)$ /index.php?__path__=$1 [B,L,QSA]' >> apache2.conf \\\n && echo '</VirtualHost>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && chmod +x sites-available/000-default.conf\n#\n#  Point and start setup in the work directory\n#\nWORKDIR /phabricator\n# ########################################\n#\n#  Declare environment variables\n#\n# ########################################\n#  Performs a phabricator upgrade on boot\n#  (note this can backfire, so do make due consideration on its usage)\nENV UPGRADE_ON_BOOT=\"false\"\n#  Site base url to use\nENV BASE_URL=\"\"\\\"\"\n#\n#  MYSQL storage, host, port, user, passwords\n#\nENV MYSQL_FILE_STORAGE=\"9000000\"\nENV MYSQL_HOST=\"mysql_host_here\"\nENV MYSQL_PORT=\"3306\"\nENV MYSQL_USER=\"phabricator\"\nENV MYSQL_PASS=\"password_over_here\"\n#  PHP script to inject\nENV PREAMBLE_SCRIPT=\"\"\\\"\"\n#  Additional script options\nENV PRE_SCRIPT=\"\"\\\"\"\n#  Enables / Disable background phd thread\nENV BACKGROUND_THREAD=\"true\"\n#\n#  SMTP settings, provide atleast an SMTP host to configure\n#\nENV SMTP_HOST=\"\"\\\"\"\nENV SMTP_PORT=\"25\"\nENV SMTP_USER=\"\\\"phabricator\\\"\"\nENV SMTP_PASS=\"\"\\\"\"\nENV SMTP_PROT=\"\"\\\"\"\nENV MAIL_ADAPTER=\"\\\"PhabricatorMailImplementationPHPMailerAdapter\\\"\"\n#\n#  More JSON local config (to add-on)\n#\nENV JSON_PARAMS=\"\"\\\"\"\n# ########################################\n#\n#  Create actual setup-and-run script\n#\n# ########################################\n#\n#  The actual giant setup script\n#\nRUN echo \"#!/bin/bash\" > setup-and-run.sh \\\n && echo 'INSTALL_DIR=\"/phabricator\"' >> setup-and-run.sh \\\n && echo 'PHAB_DIR=\"/phabricator/phabricator\";' >> setup-and-run.sh \\\n && echo 'PHAB_LOCAL_JSON=\"$PHAB_DIR/conf/local/local.json\";' >> setup-and-run.sh \\\n && echo 'echo \"<?php ${PREAMBLE_SCRIPT} ?>\" > $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'chmod +x $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'if [ \"$UPGRADE_ON_BOOT\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Doing library update on bootup (UPGRADE_ON_BOOT=true)\";' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/libphutil \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/arcanist \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/phabricator \\\n && git pull;' >> setup-and-run.sh \\\n && echo 'else' >> setup-and-run.sh \\\n && echo ' echo \"## Skipping library update (UPGRADE_ON_BOOT=false)\";' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$PRE_SCRIPT\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Running PRE_SCRIPT\";' >> setup-and-run.sh \\\n && echo ' eval ${PRE_SCRIPT};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Preparing ./conf/local/local.json (See: https://secure.phabricator.com/T11589)\";' >> setup-and-run.sh \\\n && echo 'echo \"{\" > ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$BASE_URL\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying base URL = ${BASE_URL}\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phabricator.base-uri\\\":\\\"${BASE_URL}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Applying MySQL configurations - ${MYSQL_HOST}\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.host\\\":\\\"${MYSQL_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.port\\\":\\\"${MYSQL_PORT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.user\\\":\\\"${MYSQL_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.pass\\\":\\\"${MYSQL_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"## Applying storage configurations\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"storage.mysql-engine.max-size\\\":${MYSQL_FILE_STORAGE},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$SMTP_HOST\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying SMTP config\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.mailer\\\":\\\"smtp\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-host\\\":\\\"${SMTP_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-port\\\":${SMTP_PORT},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-user\\\":\\\"${SMTP_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-password\\\":\\\"${SMTP_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-protocol\\\":\\\"${SMTP_PROT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"metamta.mail-adapter\\\":\\\"${MAIL_ADAPTER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$JSON_PARAMS\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \" $JSON_PARAMS,\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \" \\\"\\\":\\\"\\\"\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"}\" >> ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'echo \"## Running storage upgrade\";' >> setup-and-run.sh \\\n && echo '$PHAB_DIR/bin/storage upgrade --force;' >> setup-and-run.sh \\\n && echo 'if [ \"$BACKGROUND_THREAD\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Starting background thread\";' >> setup-and-run.sh \\\n && echo ' $PHAB_DIR/bin/phd start;' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && chmod +x setup-and-run.sh\n#  expose port 22 & 80\nEXPOSE 22/tcp 80/tcp\n# ########################################\n#\n#  Actually run it\n#\n# ########################################\nENTRYPOINT ./setup-and-run.sh \\\n && apache2-foreground\nCMD ./setup-and-run.sh \\\n && apache2-foreground\n","injectedSmells":[],"originalDockerfileHash":"e820f20491c2db2a1f7766fae0b01af0","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   phabricator\n#\n#   VERSION               0.1.1\n#\n#   Note this is referenced from \n#   - https://hub.docker.com/_/php/\n#   - https://secure.phabricator.com/book/phabricator/article/installation_guide/\n#\nFROM php:5-apache\nMAINTAINER Eugene Cheah <eugene@picoded.com>\n#  ########################################\n#\n#   Depencies fetch and setup\n#\n#  ########################################\n#   install common package utility and dependencies\nRUN apt-get update \\\n && apt-get install git unzip zip libmcrypt-dev libssl-dev libcurl4-openssl-dev ftp sendmail python-pygments libpng-dev libjpeg-dev libfreetype6-dev libjpeg62-turbo-dev libpng12-dev -y\n#   Install pdo_mysql\nRUN docker-php-ext-install mysqli pdo_mysql\n#   Install phabricator dependencies\nRUN docker-php-ext-install -j$( nproc ;) curl sockets mbstring mcrypt zip iconv curl pcntl ftp opcache json \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd\n#   Note that since opcache comes preinstalled in php7\n#   APC is not installed (nor is there a way to do so in docker build)\n#   Install apache mod rewrite\nRUN a2enmod rewrite\n#   List possible modules to be installed\n#   RUN docker-php-ext-install\n#\n#   Download phabricator and its related branches\n#\nRUN mkdir /phabricator \\\n && cd /phabricator \\\n && git clone -b stable https://github.com/phacility/libphutil.git \\\n && git clone -b stable https://github.com/phacility/arcanist.git \\\n && git clone -b stable https://github.com/phacility/phabricator.git \\\n && git clone https://github.com/PHPOffice/PHPExcel.git \\\n && chmod -R +x .\n#\n#   Included PHPExcel\n#\nRUN cd /usr/local/etc/php/conf.d/ \\\n && echo 'include_path = \".:/usr/local/lib/php:/phabricator/PHPExcel/Classes\"' > include_path.ini\n#\n#   Overwrite document root\n#\n#   @TODO remove the \"require all granted\" global overwrite : I do not know why the Directory ruling is not working\n#\n#  \techo '\tAllowOverride All' >> apache2.conf && \\\n#  \tsed -i 's|DocumentRoot /var/www/html|DocumentRoot /phabricator/phabricator/webroot|' apache2.conf && \\\n#  \tsed -i 's|Require all denied|Require all granted|' apache2.conf && \\\n#\nRUN cd /etc/apache2/ \\\n && echo '' > sites-available/000-default.conf \\\n && echo '' > sites-available/default-ssl.conf \\\n && echo '' >> apache2.conf \\\n && echo '<VirtualHost *>' >> apache2.conf \\\n && echo ' <Directory \"/phabricator/phabricator/webroot/\">' >> apache2.conf \\\n && echo ' Options All Indexes FollowSymLinks' >> apache2.conf \\\n && echo ' Order allow,deny' >> apache2.conf \\\n && echo ' Allow from all' >> apache2.conf \\\n && echo ' Require all granted' >> apache2.conf \\\n && echo ' </Directory>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' ServerName localhost' >> apache2.conf \\\n && echo ' DocumentRoot /phabricator/phabricator/webroot' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' php_value post_max_size 32M' >> apache2.conf \\\n && echo ' php_value upload_max_filesize 32M' >> apache2.conf \\\n && echo ' php_value opcache.validate_timestamps 0' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && echo ' DirectoryIndex index.php' >> apache2.conf \\\n && echo ' RewriteEngine on' >> apache2.conf \\\n && echo ' RewriteRule ^/rsrc/(.*) - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^/favicon.ico - [L,QSA] ' >> apache2.conf \\\n && echo ' RewriteRule ^(.*)$ /index.php?__path__=$1 [B,L,QSA]' >> apache2.conf \\\n && echo '</VirtualHost>' >> apache2.conf \\\n && echo '' >> apache2.conf \\\n && chmod +x sites-available/000-default.conf\n#\n#   Point and start setup in the work directory\n#\nWORKDIR /phabricator\n#  ########################################\n#\n#   Declare environment variables\n#\n#  ########################################\n#   Performs a phabricator upgrade on boot\n#   (note this can backfire, so do make due consideration on its usage)\nENV UPGRADE_ON_BOOT=\"false\"\n#   Site base url to use\nENV BASE_URL=\"\\\"\n#\n#   MYSQL storage, host, port, user, passwords\n#\nENV MYSQL_FILE_STORAGE=\"9000000\"\nENV MYSQL_HOST=\"mysql_host_here\"\nENV MYSQL_PORT=\"3306\"\nENV MYSQL_USER=\"phabricator\"\nENV MYSQL_PASS=\"password_over_here\"\n#   PHP script to inject\nENV PREAMBLE_SCRIPT=\"\\\"\n#   Additional script options\nENV PRE_SCRIPT=\"\\\"\n#   Enables / Disable background phd thread\nENV BACKGROUND_THREAD=\"true\"\n#\n#   SMTP settings, provide atleast an SMTP host to configure\n#\nENV SMTP_HOST=\"\\\"\nENV SMTP_PORT=\"25\"\nENV SMTP_USER=\"\\\"phabricator\\\"\"\nENV SMTP_PASS=\"\\\"\nENV SMTP_PROT=\"\\\"\nENV MAIL_ADAPTER=\"\\\"PhabricatorMailImplementationPHPMailerAdapter\\\"\"\n#\n#   More JSON local config (to add-on)\n#\nENV JSON_PARAMS=\"\\\"\n#  ########################################\n#\n#   Create actual setup-and-run script\n#\n#  ########################################\n#\n#   The actual giant setup script\n#\nRUN echo \"#!/bin/bash\" > setup-and-run.sh \\\n && echo 'INSTALL_DIR=\"/phabricator\"' >> setup-and-run.sh \\\n && echo 'PHAB_DIR=\"/phabricator/phabricator\";' >> setup-and-run.sh \\\n && echo 'PHAB_LOCAL_JSON=\"$PHAB_DIR/conf/local/local.json\";' >> setup-and-run.sh \\\n && echo 'echo \"<?php ${PREAMBLE_SCRIPT} ?>\" > $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'chmod +x $PHAB_DIR/support/preamble.php;' >> setup-and-run.sh \\\n && echo 'if [ \"$UPGRADE_ON_BOOT\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Doing library update on bootup (UPGRADE_ON_BOOT=true)\";' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/libphutil \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/arcanist \\\n && git pull;' >> setup-and-run.sh \\\n && echo ' cd $INSTALL_DIR/phabricator \\\n && git pull;' >> setup-and-run.sh \\\n && echo 'else' >> setup-and-run.sh \\\n && echo ' echo \"## Skipping library update (UPGRADE_ON_BOOT=false)\";' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$PRE_SCRIPT\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Running PRE_SCRIPT\";' >> setup-and-run.sh \\\n && echo ' eval ${PRE_SCRIPT};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Preparing ./conf/local/local.json (See: https://secure.phabricator.com/T11589)\";' >> setup-and-run.sh \\\n && echo 'echo \"{\" > ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$BASE_URL\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying base URL = ${BASE_URL}\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phabricator.base-uri\\\":\\\"${BASE_URL}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \"## Applying MySQL configurations - ${MYSQL_HOST}\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.host\\\":\\\"${MYSQL_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.port\\\":\\\"${MYSQL_PORT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.user\\\":\\\"${MYSQL_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \" \\\"mysql.pass\\\":\\\"${MYSQL_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"## Applying storage configurations\";' >> setup-and-run.sh \\\n && echo 'echo \" \\\"storage.mysql-engine.max-size\\\":${MYSQL_FILE_STORAGE},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$SMTP_HOST\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Applying SMTP config\";' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.mailer\\\":\\\"smtp\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-host\\\":\\\"${SMTP_HOST}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-port\\\":${SMTP_PORT},\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-user\\\":\\\"${SMTP_USER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-password\\\":\\\"${SMTP_PASS}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"phpmailer.smtp-protocol\\\":\\\"${SMTP_PROT}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo ' echo \" \\\"metamta.mail-adapter\\\":\\\"${MAIL_ADAPTER}\\\",\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'if [[ ! -z \"$JSON_PARAMS\" ]]; then' >> setup-and-run.sh \\\n && echo ' echo \" $JSON_PARAMS,\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && echo 'echo \" \\\"\\\":\\\"\\\"\" >> ${PHAB_LOCAL_JSON};' >> setup-and-run.sh \\\n && echo 'echo \"}\" >> ${PHAB_LOCAL_JSON}' >> setup-and-run.sh \\\n && echo 'echo \"## Running storage upgrade\";' >> setup-and-run.sh \\\n && echo '$PHAB_DIR/bin/storage upgrade --force;' >> setup-and-run.sh \\\n && echo 'if [ \"$BACKGROUND_THREAD\" = true ]; then' >> setup-and-run.sh \\\n && echo ' echo \"## Starting background thread\";' >> setup-and-run.sh \\\n && echo ' $PHAB_DIR/bin/phd start;' >> setup-and-run.sh \\\n && echo 'fi' >> setup-and-run.sh \\\n && chmod +x setup-and-run.sh\n#   expose port 22 & 80\nEXPOSE 22/tcp 80/tcp\n#  ########################################\n#\n#   Actually run it\n#\n#  ########################################\nENTRYPOINT ./setup-and-run.sh \\\n && apache2-foreground\nCMD ./setup-and-run.sh \\\n && apache2-foreground\n","originalDockerfileUglifiedHash":"80a35d4f730a8f230ef5fb660c814fbf","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e2e15d59a648827accc3dfa41b41403d4e7b55c7.dockerfile"}