{"seed":2200090148,"processedDockerfileHash":"2cbb57cd1a99275a24e1e4db3d7c3bef","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM appsvcorg/nginx-fpm:0.4\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#   ========\n#   ENV vars\n#   ========\n#\nENV DOCKER_BUILD_HOME=\"\\\"/dockerbuild\\\"\"\n#   drupal \nENV DRUPAL_HOME=\"\\\"/home/site/wwwroot\\\"\"\n#   mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#   phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/home/phpmyadmin\\\"\"\n#  nginx\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n#  php\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#   Composer\n#   Updation: https://getcomposer.org/download/\nENV COMPOSER_DOWNLOAD_URL=\"\\\"https://getcomposer.org/installer\\\"\"\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\nENV COMPOSER_HOME=\"/home/.composer\"\nENV COMPOSER_VERSION=\"\\\"1.6.1\\\"\"\n#   SHA384SUM https://composer.github.io/installer.sha384sum\nENV COMPOSER_SETUP_SHA=\"544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\"\n#   ====================\n#   Download and Install\n#   ~. essentials\n#   1. Drupal\n#   ====================\nRUN mkdir -p $DOCKER_BUILD_HOME\nWORKDIR $DOCKER_BUILD_HOME\n#   --------\n#   ~. PHP extensions\n#   --------\n#   install the PHP extensions we need\n#   postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add coreutils freetype-dev libjpeg-turbo-dev libpng-dev postgresql-dev --no-cache --virtual .build-deps \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd opcache pdo_mysql pdo_pgsql zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --virtual .drupal-phpexts-rundeps \\\n && apk del .build-deps\n#   set recommended PHP.ini settings\n#   see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=60' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\n#   -------------\n#   1. Drupal\n#   -------------\n#   Install by Git\n#   ----------\n#   2. drush\n#   ----------\nRUN set -ex \\\n && php -r \"readfile('http://files.drush.org/drush.phar');\" > /usr/local/bin/drush \\\n && chmod +x /usr/local/bin/drush \\\n && php -r \"readfile('https://getcomposer.org/installer');\" > /tmp/composer-setup.php \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) === getenv('COMPOSER_SETUP_SHA')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); echo PHP_EOL; exit(1); } echo PHP_EOL;\" \\\n && mkdir -p /composer/bin \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/bin/ --filename=composer --version=${COMPOSER_VERSION} \\\n && rm /tmp/composer-setup.php \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/*\n#   =========\n#   Configure\n#   =========\nWORKDIR $DRUPAL_HOME\nRUN rm -rf $DOCKER_BUILD_HOME\n#   nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY default.conf /etc/nginx/conf.d/default.conf\n#   phpmyadmin\nCOPY phpmyadmin-default.conf $PHPMYADMIN_SOURCE/phpmyadmin-default.conf\n#   =====\n#   final\n#   =====\nCOPY entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/entrypoint.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM appsvcorg/nginx-fpm:0.4\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#  ========\n#  ENV vars\n#  ========\n#\nENV DOCKER_BUILD_HOME=\"\\\"/dockerbuild\\\"\"\n#  drupal \nENV DRUPAL_HOME=\"\\\"/home/site/wwwroot\\\"\"\n#  mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#  phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/home/phpmyadmin\\\"\"\n# nginx\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n# php\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#  Composer\n#  Updation: https://getcomposer.org/download/\nENV COMPOSER_DOWNLOAD_URL=\"\\\"https://getcomposer.org/installer\\\"\"\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\nENV COMPOSER_HOME=\"/home/.composer\"\nENV COMPOSER_VERSION=\"\\\"1.6.1\\\"\"\n#  SHA384SUM https://composer.github.io/installer.sha384sum\nENV COMPOSER_SETUP_SHA=\"544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\"\n#  ====================\n#  Download and Install\n#  ~. essentials\n#  1. Drupal\n#  ====================\nRUN mkdir -p $DOCKER_BUILD_HOME\nWORKDIR $DOCKER_BUILD_HOME\n#  --------\n#  ~. PHP extensions\n#  --------\n#  install the PHP extensions we need\n#  postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps coreutils freetype-dev libjpeg-turbo-dev libpng-dev postgresql-dev \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd opcache pdo_mysql pdo_pgsql zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n && apk del .build-deps\n#  set recommended PHP.ini settings\n#  see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=60' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\n#  -------------\n#  1. Drupal\n#  -------------\n#  Install by Git\n#  ----------\n#  2. drush\n#  ----------\nRUN set -ex \\\n && php -r \"readfile('http://files.drush.org/drush.phar');\" > /usr/local/bin/drush \\\n && chmod +x /usr/local/bin/drush \\\n && php -r \"readfile('https://getcomposer.org/installer');\" > /tmp/composer-setup.php \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) === getenv('COMPOSER_SETUP_SHA')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); echo PHP_EOL; exit(1); } echo PHP_EOL;\" \\\n && mkdir -p /composer/bin \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/bin/ --filename=composer --version=${COMPOSER_VERSION} \\\n && rm /tmp/composer-setup.php \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/*\n#  =========\n#  Configure\n#  =========\nWORKDIR $DRUPAL_HOME\nRUN rm -rf $DOCKER_BUILD_HOME\n#  nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY default.conf /etc/nginx/conf.d/default.conf\n#  phpmyadmin\nCOPY phpmyadmin-default.conf $PHPMYADMIN_SOURCE/phpmyadmin-default.conf\n#  =====\n#  final\n#  =====\nCOPY entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/entrypoint.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"03574efe07db2a21efcdd4368322b624","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM appsvcorg/nginx-fpm:0.4\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#   ========\n#   ENV vars\n#   ========\n#\nENV DOCKER_BUILD_HOME=\"\\\"/dockerbuild\\\"\"\n#   drupal \nENV DRUPAL_HOME=\"\\\"/home/site/wwwroot\\\"\"\n#   mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#   phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/home/phpmyadmin\\\"\"\n#  nginx\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n#  php\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#   Composer\n#   Updation: https://getcomposer.org/download/\nENV COMPOSER_DOWNLOAD_URL=\"\\\"https://getcomposer.org/installer\\\"\"\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\nENV COMPOSER_HOME=\"/home/.composer\"\nENV COMPOSER_VERSION=\"\\\"1.6.1\\\"\"\n#   SHA384SUM https://composer.github.io/installer.sha384sum\nENV COMPOSER_SETUP_SHA=\"544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\"\n#   ====================\n#   Download and Install\n#   ~. essentials\n#   1. Drupal\n#   ====================\nRUN mkdir -p $DOCKER_BUILD_HOME\nWORKDIR $DOCKER_BUILD_HOME\n#   --------\n#   ~. PHP extensions\n#   --------\n#   install the PHP extensions we need\n#   postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps coreutils freetype-dev libjpeg-turbo-dev libpng-dev postgresql-dev \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd opcache pdo_mysql pdo_pgsql zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n && apk del .build-deps\n#   set recommended PHP.ini settings\n#   see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=60' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\n#   -------------\n#   1. Drupal\n#   -------------\n#   Install by Git\n#   ----------\n#   2. drush\n#   ----------\nRUN set -ex \\\n && php -r \"readfile('http://files.drush.org/drush.phar');\" > /usr/local/bin/drush \\\n && chmod +x /usr/local/bin/drush \\\n && php -r \"readfile('https://getcomposer.org/installer');\" > /tmp/composer-setup.php \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) === getenv('COMPOSER_SETUP_SHA')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); echo PHP_EOL; exit(1); } echo PHP_EOL;\" \\\n && mkdir -p /composer/bin \\\n && php /tmp/composer-setup.php --install-dir=/usr/local/bin/ --filename=composer --version=${COMPOSER_VERSION} \\\n && rm /tmp/composer-setup.php \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/*\n#   =========\n#   Configure\n#   =========\nWORKDIR $DRUPAL_HOME\nRUN rm -rf $DOCKER_BUILD_HOME\n#   nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY default.conf /etc/nginx/conf.d/default.conf\n#   phpmyadmin\nCOPY phpmyadmin-default.conf $PHPMYADMIN_SOURCE/phpmyadmin-default.conf\n#   =====\n#   final\n#   =====\nCOPY entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/entrypoint.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"a30fcba5c54d4cdb2f6636529a942450","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/811962bb270d7700d4fca152c5b356f1177b3994.dockerfile"}