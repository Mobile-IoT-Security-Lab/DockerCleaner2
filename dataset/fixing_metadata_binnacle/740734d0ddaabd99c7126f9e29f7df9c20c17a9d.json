{"seed":3665336495,"processedDockerfileHash":"8f420150f47822161d268a37d17650e0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:latest\n#  #############################\n#   Download dependencies\n#  #############################\nRUN dpkg --add-architecture i386 \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && :\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install software-properties-common git curl bzip2 gcc g++ binutils make autoconf openssl libssl-dev ant libopus0 libpcre3 libpcre3-dev build-essential nasm libc6:i386 libstdc++6:i386 zlib1g:i386 openjdk-8-jdk unzip\n#  #############################\n#   Configuration\n#  #############################\n#   ENV TARGET_ARCHS \"armeabi armeabi-v7a x86 mips arm64-v8a x86_64 mips64\"\nENV TARGET_ARCHS=\"\\\"armeabi-v7a x86 arm64-v8a x86_64\\\" \"\nENV ANDROID_NDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip\\\"\"\nENV ANDROID_SDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/tools_r25.2.5-linux.zip\\\"\"\nENV ANDROID_SETUP_APIS=\"\\\"23 25\\\"\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"25\"\nENV ANDROID_TARGET_API=\"23\"\nENV PJSIP_DOWNLOAD_URL=\"\\\"http://www.pjsip.org/release/2.7.1/pjproject-2.7.1.tar.bz2\\\"\"\nENV SWIG_DOWNLOAD_URL=\"\\\"http://prdownloads.sourceforge.net/swig/swig-3.0.7.tar.gz\\\"\"\nENV OPENSSL_DOWNLOAD_URL=\"\\\"https://www.openssl.org/source/openssl-1.0.2g.tar.gz\\\"\"\nENV OPENH264_DOWNLOAD_URL=\"\\\"https://github.com/cisco/openh264/archive/v1.7.0.tar.gz\\\"\"\nENV OPENH264_TARGET_NDK_LEVEL=\"23\"\nENV OPUS_DOWNLOAD_URL=\"\\\"http://downloads.xiph.org/releases/opus/opus-1.2.1.tar.gz\\\"\"\nENV OPUS_ANDROID_MK_DOWNLOAD_URL=\"\\\"https://trac.pjsip.org/repos/raw-attachment/ticket/1904/Android.mk\\\"\"\nENV PATH=\"/sources/android_ndk:$PATH\"\n#  #############################\n#   Download sources\n#  #############################\nRUN mkdir -p /sources/android_ndk \\\n && mkdir -p /sources/android_sdk \\\n && mkdir -p /sources/pjsip \\\n && mkdir -p /sources/swig \\\n && mkdir -p /sources/openssl \\\n && mkdir -p /sources/opus \\\n && mkdir -p /sources/openh264\n#   Download Android NDK\nRUN cd /sources/android_ndk \\\n && curl -L -# -o ndk.zip \"$ANDROID_NDK_DOWNLOAD_URL\" \\\n && unzip ndk.zip \\\n && rm -rf ndk.zip \\\n && mv android-*/* ./\n#   Download Android SDK & APIs\nRUN cd /sources/android_sdk \\\n && curl -L -# -o sdk.zip \"$ANDROID_SDK_DOWNLOAD_URL\" \\\n && unzip sdk.zip\nRUN cd /sources/android_sdk/tools \\\n && ALL_SDK=$( ./android list sdk --all ;) \\\n && IFS=\" \" \\\n && for api in $ANDROID_SETUP_APIS; do PACKAGE=$( echo \"${ALL_SDK}\" | grep \"API ${api}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) ;echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force ; done \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Android SDK Platform-tools\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Build-tools\" | grep \"${BUILD_TOOLS_VERSION}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force\n#   Download Pjsip\nRUN cd /sources/pjsip \\\n && curl -L -# -o pjsip.tar.bz2 \"$PJSIP_DOWNLOAD_URL\" \\\n && tar xjf pjsip.tar.bz2 \\\n && rm -rf pjsip.tar.bz2 \\\n && mv pjproject-*/* ./\n#   Download Swig\nRUN cd /sources/swig \\\n && curl -L -# -o swig.tar.gz \"$SWIG_DOWNLOAD_URL\" \\\n && tar xzf swig.tar.gz \\\n && rm -rf swig.tar.gz \\\n && mv swig-*/* ./\n#   Download OpenSSL\nRUN cd /sources/openssl \\\n && curl -L -# -o openssl.tar.gz \"$OPENSSL_DOWNLOAD_URL\" \\\n && tar xzf openssl.tar.gz \\\n && rm -rf openssl.tar.gz \\\n && mv openssl-*/* ./\n#   Download Opus\nRUN cd /sources/opus \\\n && curl -L -# -o opus.tar.gz \"$OPUS_DOWNLOAD_URL\" \\\n && tar xzf opus.tar.gz \\\n && rm -rf opus.tar.gz \\\n && mv opus-*/* ./ \\\n && mkdir ./jni \\\n && cd ./jni \\\n && curl -L -# -o Android.mk \"$OPUS_ANDROID_MK_DOWNLOAD_URL\"\n#   Download OpenH264\nRUN cd /sources/openh264 \\\n && curl -L -# -o openh264.tar.gz \"$OPENH264_DOWNLOAD_URL\" \\\n && tar xzf openh264.tar.gz \\\n && rm -rf openh264.tar.gz \\\n && mv openh264-*/* ./\n#  #############################\n#   Build swig, openssl, opus, openh264\n#  #############################\nRUN mkdir -p /output/openssl/ \\\n && mkdir -p /output/openh264/ \\\n && mkdir -p /output/pjsip \\\n && mkdir -p /output/opus\n#   Build opus\nCOPY ./build_opus.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_opus.sh ${arch} ; done\n#   Build swig\nRUN cd /sources/swig \\\n && ./configure \\\n && make \\\n && make install\n#   Build OpenH264\nCOPY ./build_openh264.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openh264.sh ${arch} ; done\n#   Build openssl\nCOPY ./build_openssl.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openssl.sh ${arch} ; done\n#   Build pjsip\nCOPY ./build_pjsip.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_pjsip.sh ${arch} ; done\n#   Dist\nRUN mkdir -p /dist/android/src/main \\\n && mv /output/pjsip/* /dist/android/src/main \\\n && rm -rf /dist/android/src/main/java/org/pjsip/pjsua2/app\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do mv /output/openh264/${arch}/lib/libopenh264.so /dist/android/src/main/jniLibs/${arch}/ ; done\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:latest\n# #############################\n#  Download dependencies\n# #############################\nRUN dpkg --add-architecture i386 \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install software-properties-common git curl bzip2 gcc g++ binutils make autoconf openssl libssl-dev ant libopus0 libpcre3 libpcre3-dev build-essential nasm libc6:i386 libstdc++6:i386 zlib1g:i386 openjdk-8-jdk unzip\n# #############################\n#  Configuration\n# #############################\n#  ENV TARGET_ARCHS \"armeabi armeabi-v7a x86 mips arm64-v8a x86_64 mips64\"\nENV TARGET_ARCHS=\"\\\"armeabi-v7a x86 arm64-v8a x86_64\\\" \"\nENV ANDROID_NDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip\\\"\"\nENV ANDROID_SDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/tools_r25.2.5-linux.zip\\\"\"\nENV ANDROID_SETUP_APIS=\"\\\"23 25\\\"\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"25\"\nENV ANDROID_TARGET_API=\"23\"\nENV PJSIP_DOWNLOAD_URL=\"\\\"http://www.pjsip.org/release/2.7.1/pjproject-2.7.1.tar.bz2\\\"\"\nENV SWIG_DOWNLOAD_URL=\"\\\"http://prdownloads.sourceforge.net/swig/swig-3.0.7.tar.gz\\\"\"\nENV OPENSSL_DOWNLOAD_URL=\"\\\"https://www.openssl.org/source/openssl-1.0.2g.tar.gz\\\"\"\nENV OPENH264_DOWNLOAD_URL=\"\\\"https://github.com/cisco/openh264/archive/v1.7.0.tar.gz\\\"\"\nENV OPENH264_TARGET_NDK_LEVEL=\"23\"\nENV OPUS_DOWNLOAD_URL=\"\\\"http://downloads.xiph.org/releases/opus/opus-1.2.1.tar.gz\\\"\"\nENV OPUS_ANDROID_MK_DOWNLOAD_URL=\"\\\"https://trac.pjsip.org/repos/raw-attachment/ticket/1904/Android.mk\\\"\"\nENV PATH=\"/sources/android_ndk:$PATH\"\n# #############################\n#  Download sources\n# #############################\nRUN mkdir -p /sources/android_ndk \\\n && mkdir -p /sources/android_sdk \\\n && mkdir -p /sources/pjsip \\\n && mkdir -p /sources/swig \\\n && mkdir -p /sources/openssl \\\n && mkdir -p /sources/opus \\\n && mkdir -p /sources/openh264\n#  Download Android NDK\nRUN cd /sources/android_ndk \\\n && curl -L -# -o ndk.zip \"$ANDROID_NDK_DOWNLOAD_URL\" \\\n && unzip ndk.zip \\\n && rm -rf ndk.zip \\\n && mv android-*/* ./\n#  Download Android SDK & APIs\nRUN cd /sources/android_sdk \\\n && curl -L -# -o sdk.zip \"$ANDROID_SDK_DOWNLOAD_URL\" \\\n && unzip sdk.zip\nRUN cd /sources/android_sdk/tools \\\n && ALL_SDK=$( ./android list sdk --all ;) \\\n && IFS=\" \" \\\n && for api in $ANDROID_SETUP_APIS; do PACKAGE=$( echo \"${ALL_SDK}\" | grep \"API ${api}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) ;echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force ; done \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Android SDK Platform-tools\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Build-tools\" | grep \"${BUILD_TOOLS_VERSION}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force\n#  Download Pjsip\nRUN cd /sources/pjsip \\\n && curl -L -# -o pjsip.tar.bz2 \"$PJSIP_DOWNLOAD_URL\" \\\n && tar xjf pjsip.tar.bz2 \\\n && rm -rf pjsip.tar.bz2 \\\n && mv pjproject-*/* ./\n#  Download Swig\nRUN cd /sources/swig \\\n && curl -L -# -o swig.tar.gz \"$SWIG_DOWNLOAD_URL\" \\\n && tar xzf swig.tar.gz \\\n && rm -rf swig.tar.gz \\\n && mv swig-*/* ./\n#  Download OpenSSL\nRUN cd /sources/openssl \\\n && curl -L -# -o openssl.tar.gz \"$OPENSSL_DOWNLOAD_URL\" \\\n && tar xzf openssl.tar.gz \\\n && rm -rf openssl.tar.gz \\\n && mv openssl-*/* ./\n#  Download Opus\nRUN cd /sources/opus \\\n && curl -L -# -o opus.tar.gz \"$OPUS_DOWNLOAD_URL\" \\\n && tar xzf opus.tar.gz \\\n && rm -rf opus.tar.gz \\\n && mv opus-*/* ./ \\\n && mkdir ./jni \\\n && cd ./jni \\\n && curl -L -# -o Android.mk \"$OPUS_ANDROID_MK_DOWNLOAD_URL\"\n#  Download OpenH264\nRUN cd /sources/openh264 \\\n && curl -L -# -o openh264.tar.gz \"$OPENH264_DOWNLOAD_URL\" \\\n && tar xzf openh264.tar.gz \\\n && rm -rf openh264.tar.gz \\\n && mv openh264-*/* ./\n# #############################\n#  Build swig, openssl, opus, openh264\n# #############################\nRUN mkdir -p /output/openssl/ \\\n && mkdir -p /output/openh264/ \\\n && mkdir -p /output/pjsip \\\n && mkdir -p /output/opus\n#  Build opus\nADD ./build_opus.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_opus.sh ${arch} ; done\n#  Build swig\nRUN cd /sources/swig \\\n && ./configure \\\n && make \\\n && make install\n#  Build OpenH264\nADD ./build_openh264.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openh264.sh ${arch} ; done\n#  Build openssl\nADD ./build_openssl.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openssl.sh ${arch} ; done\n#  Build pjsip\nADD ./build_pjsip.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_pjsip.sh ${arch} ; done\n#  Dist\nRUN mkdir -p /dist/android/src/main \\\n && mv /output/pjsip/* /dist/android/src/main \\\n && rm -rf /dist/android/src/main/java/org/pjsip/pjsua2/app\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do mv /output/openh264/${arch}/lib/libopenh264.so /dist/android/src/main/jniLibs/${arch}/ ; done\n","injectedSmells":[],"originalDockerfileHash":"355d047f9245a68a181bab8bda7898af","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:latest\n#  #############################\n#   Download dependencies\n#  #############################\nRUN dpkg --add-architecture i386 \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install software-properties-common git curl bzip2 gcc g++ binutils make autoconf openssl libssl-dev ant libopus0 libpcre3 libpcre3-dev build-essential nasm libc6:i386 libstdc++6:i386 zlib1g:i386 openjdk-8-jdk unzip\n#  #############################\n#   Configuration\n#  #############################\n#   ENV TARGET_ARCHS \"armeabi armeabi-v7a x86 mips arm64-v8a x86_64 mips64\"\nENV TARGET_ARCHS=\"\\\"armeabi-v7a x86 arm64-v8a x86_64\\\" \"\nENV ANDROID_NDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip\\\"\"\nENV ANDROID_SDK_DOWNLOAD_URL=\"\\\"https://dl.google.com/android/repository/tools_r25.2.5-linux.zip\\\"\"\nENV ANDROID_SETUP_APIS=\"\\\"23 25\\\"\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"25\"\nENV ANDROID_TARGET_API=\"23\"\nENV PJSIP_DOWNLOAD_URL=\"\\\"http://www.pjsip.org/release/2.7.1/pjproject-2.7.1.tar.bz2\\\"\"\nENV SWIG_DOWNLOAD_URL=\"\\\"http://prdownloads.sourceforge.net/swig/swig-3.0.7.tar.gz\\\"\"\nENV OPENSSL_DOWNLOAD_URL=\"\\\"https://www.openssl.org/source/openssl-1.0.2g.tar.gz\\\"\"\nENV OPENH264_DOWNLOAD_URL=\"\\\"https://github.com/cisco/openh264/archive/v1.7.0.tar.gz\\\"\"\nENV OPENH264_TARGET_NDK_LEVEL=\"23\"\nENV OPUS_DOWNLOAD_URL=\"\\\"http://downloads.xiph.org/releases/opus/opus-1.2.1.tar.gz\\\"\"\nENV OPUS_ANDROID_MK_DOWNLOAD_URL=\"\\\"https://trac.pjsip.org/repos/raw-attachment/ticket/1904/Android.mk\\\"\"\nENV PATH=\"/sources/android_ndk:$PATH\"\n#  #############################\n#   Download sources\n#  #############################\nRUN mkdir -p /sources/android_ndk \\\n && mkdir -p /sources/android_sdk \\\n && mkdir -p /sources/pjsip \\\n && mkdir -p /sources/swig \\\n && mkdir -p /sources/openssl \\\n && mkdir -p /sources/opus \\\n && mkdir -p /sources/openh264\n#   Download Android NDK\nRUN cd /sources/android_ndk \\\n && curl -L -# -o ndk.zip \"$ANDROID_NDK_DOWNLOAD_URL\" \\\n && unzip ndk.zip \\\n && rm -rf ndk.zip \\\n && mv android-*/* ./\n#   Download Android SDK & APIs\nRUN cd /sources/android_sdk \\\n && curl -L -# -o sdk.zip \"$ANDROID_SDK_DOWNLOAD_URL\" \\\n && unzip sdk.zip\nRUN cd /sources/android_sdk/tools \\\n && ALL_SDK=$( ./android list sdk --all ;) \\\n && IFS=\" \" \\\n && for api in $ANDROID_SETUP_APIS; do PACKAGE=$( echo \"${ALL_SDK}\" | grep \"API ${api}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) ;echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force ; done \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Android SDK Platform-tools\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force \\\n && PACKAGE=$( echo \"${ALL_SDK}\" | grep \"Build-tools\" | grep \"${BUILD_TOOLS_VERSION}\" | head -n 1 | awk '{print $1}' | cut -d'-' -f 1 ;) \\\n && echo yes | ./android update sdk --all --filter ${PACKAGE} --no-ui --force\n#   Download Pjsip\nRUN cd /sources/pjsip \\\n && curl -L -# -o pjsip.tar.bz2 \"$PJSIP_DOWNLOAD_URL\" \\\n && tar xjf pjsip.tar.bz2 \\\n && rm -rf pjsip.tar.bz2 \\\n && mv pjproject-*/* ./\n#   Download Swig\nRUN cd /sources/swig \\\n && curl -L -# -o swig.tar.gz \"$SWIG_DOWNLOAD_URL\" \\\n && tar xzf swig.tar.gz \\\n && rm -rf swig.tar.gz \\\n && mv swig-*/* ./\n#   Download OpenSSL\nRUN cd /sources/openssl \\\n && curl -L -# -o openssl.tar.gz \"$OPENSSL_DOWNLOAD_URL\" \\\n && tar xzf openssl.tar.gz \\\n && rm -rf openssl.tar.gz \\\n && mv openssl-*/* ./\n#   Download Opus\nRUN cd /sources/opus \\\n && curl -L -# -o opus.tar.gz \"$OPUS_DOWNLOAD_URL\" \\\n && tar xzf opus.tar.gz \\\n && rm -rf opus.tar.gz \\\n && mv opus-*/* ./ \\\n && mkdir ./jni \\\n && cd ./jni \\\n && curl -L -# -o Android.mk \"$OPUS_ANDROID_MK_DOWNLOAD_URL\"\n#   Download OpenH264\nRUN cd /sources/openh264 \\\n && curl -L -# -o openh264.tar.gz \"$OPENH264_DOWNLOAD_URL\" \\\n && tar xzf openh264.tar.gz \\\n && rm -rf openh264.tar.gz \\\n && mv openh264-*/* ./\n#  #############################\n#   Build swig, openssl, opus, openh264\n#  #############################\nRUN mkdir -p /output/openssl/ \\\n && mkdir -p /output/openh264/ \\\n && mkdir -p /output/pjsip \\\n && mkdir -p /output/opus\n#   Build opus\nADD ./build_opus.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_opus.sh ${arch} ; done\n#   Build swig\nRUN cd /sources/swig \\\n && ./configure \\\n && make \\\n && make install\n#   Build OpenH264\nADD ./build_openh264.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openh264.sh ${arch} ; done\n#   Build openssl\nADD ./build_openssl.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_openssl.sh ${arch} ; done\n#   Build pjsip\nADD ./build_pjsip.sh /usr/local/sbin/\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do build_pjsip.sh ${arch} ; done\n#   Dist\nRUN mkdir -p /dist/android/src/main \\\n && mv /output/pjsip/* /dist/android/src/main \\\n && rm -rf /dist/android/src/main/java/org/pjsip/pjsua2/app\nRUN IFS=\" \" \\\n && for arch in $TARGET_ARCHS; do mv /output/openh264/${arch}/lib/libopenh264.so /dist/android/src/main/jniLibs/${arch}/ ; done\n","originalDockerfileUglifiedHash":"185bf0717e6ccf495bd38369782d4a76","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/740734d0ddaabd99c7126f9e29f7df9c20c17a9d.dockerfile"}