{"seed":540777297,"processedDockerfileHash":"923a49b152a4eb0ea594a9771e9bd341","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: Apparmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor=2.10.95-0ubuntu2.6~14.04.4 aufs-tools=1:3.2+20130722-1.1 automake=1:1.14.1-2ubuntu1 btrfs-tools=3.12-1ubuntu0.2 build-essential=11.6ubuntu6 curl=7.35.0-1ubuntu2.20 dpkg-sig=0.13.1+nmu1 git=1:1.9.1-1ubuntu0.10 iptables=1.4.21-1ubuntu1 libapparmor-dev=2.10.95-0ubuntu2.6~14.04.4 libcap-dev=1:2.24-0ubuntu2 libsqlite3-dev=3.8.2-1ubuntu2.2 mercurial=2.8.2-1ubuntu1.4 parallel=20161222-1~ubuntu0.14.04.2 python-mock=1.0.1-3 python-pip=1.5.4-1ubuntu4 python-websocket=0.12.0-1ubuntu2 reprepro=4.13.1-1build1 ruby1.9.1=1.9.3.484-2ubuntu1.14 ruby1.9.1-dev=1.9.3.484-2ubuntu1.14 s3cmd=1.1.0* -y\n#   Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install lxc\nENV LXC_VERSION=\"1.0.7\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#   Install Go\nENV GO_VERSION=\"1.4.1\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64 darwin/386  freebsd/amd64 freebsd/386 freebsd/arm\"\n#   TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above\n#  \twindows/amd64 windows/386\n#   (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"5\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#   We still support compiling with older Go, so need to grab older \"gofmt\"\nENV GOFMT_VERSION=\"1.3.3\"\nRUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$( go env GOOS ;)-$( go env GOARCH ;).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   Grab Go's cover tool for dead-simple code coverage testing\nRUN go get golang.org/x/tools/cmd/cover\n#   TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#   Get the \"busybox\" image source so we can build locally instead of pulling\nRUN git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox\n#   Get the \"cirros\" image source so we can import it instead of fetching it during tests\nRUN curl -sSL -o /cirros.tar.gz https://github.com/ewindisch/docker-cirros/raw/1cded459668e8b9dbf4ef976c94c05add9bbd8e9/cirros-0.3.0-x86_64-lxc.tar.gz\n#   Install registry\nENV REGISTRY_COMMIT=\"c448e0416925a9876d5576e412703c9b8b865e19\"\nRUN set -x \\\n && git clone https://github.com/docker/distribution.git /go/src/github.com/docker/distribution \\\n && (cd /go/src/github.com/docker/distribution \\\n && git checkout -q $REGISTRY_COMMIT ) \\\n && GOPATH=/go/src/github.com/docker/distribution/Godeps/_workspace:/go go build -o /go/bin/registry-v2 github.com/docker/distribution/cmd/registry\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"aa19d7b6609c6676e8258f6b900dea2eda1dbe95\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT\n#   Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux btrfs_noversion\"\n#   Install man page generator\nCOPY vendor /go/src/github.com/docker/docker/vendor\n#   (copy vendor/ because go-md2man needs golang.org/x/net)\nRUN set -x \\\n && git clone -b v1.0.1 https://github.com/cpuguy83/go-md2man.git /go/src/github.com/cpuguy83/go-md2man \\\n && git clone -b v1.2 https://github.com/russross/blackfriday.git /go/src/github.com/russross/blackfriday \\\n && go install -v github.com/cpuguy83/go-md2man\n#   install toml validator\nRUN git clone -b v0.1.0 https://github.com/BurntSushi/toml.git /go/src/github.com/BurntSushi/toml \\\n && go install -v github.com/BurntSushi/toml/cmd/tomlv\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: Apparmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake btrfs-tools build-essential curl dpkg-sig git iptables libapparmor-dev libcap-dev libsqlite3-dev mercurial parallel python-mock python-pip python-websocket reprepro ruby1.9.1 ruby1.9.1-dev s3cmd=1.1.0* -y\n#  Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#  see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Install lxc\nENV LXC_VERSION=\"1.0.7\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#  Install Go\nENV GO_VERSION=\"1.4.1\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#  Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64 darwin/386  freebsd/amd64 freebsd/386 freebsd/arm\"\n#  TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above\n# \twindows/amd64 windows/386\n#  (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"5\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#  We still support compiling with older Go, so need to grab older \"gofmt\"\nENV GOFMT_VERSION=\"1.3.3\"\nRUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$( go env GOOS ;)-$( go env GOARCH ;).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#  Grab Go's cover tool for dead-simple code coverage testing\nRUN go get golang.org/x/tools/cmd/cover\n#  TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#  Get the \"busybox\" image source so we can build locally instead of pulling\nRUN git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox\n#  Get the \"cirros\" image source so we can import it instead of fetching it during tests\nRUN curl -sSL -o /cirros.tar.gz https://github.com/ewindisch/docker-cirros/raw/1cded459668e8b9dbf4ef976c94c05add9bbd8e9/cirros-0.3.0-x86_64-lxc.tar.gz\n#  Install registry\nENV REGISTRY_COMMIT=\"c448e0416925a9876d5576e412703c9b8b865e19\"\nRUN set -x \\\n && git clone https://github.com/docker/distribution.git /go/src/github.com/docker/distribution \\\n && (cd /go/src/github.com/docker/distribution \\\n && git checkout -q $REGISTRY_COMMIT ) \\\n && GOPATH=/go/src/github.com/docker/distribution/Godeps/_workspace:/go go build -o /go/bin/registry-v2 github.com/docker/distribution/cmd/registry\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"aa19d7b6609c6676e8258f6b900dea2eda1dbe95\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT\n#  Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux btrfs_noversion\"\n#  Install man page generator\nCOPY vendor /go/src/github.com/docker/docker/vendor\n#  (copy vendor/ because go-md2man needs golang.org/x/net)\nRUN set -x \\\n && git clone -b v1.0.1 https://github.com/cpuguy83/go-md2man.git /go/src/github.com/cpuguy83/go-md2man \\\n && git clone -b v1.2 https://github.com/russross/blackfriday.git /go/src/github.com/russross/blackfriday \\\n && go install -v github.com/cpuguy83/go-md2man\n#  install toml validator\nRUN git clone -b v0.1.0 https://github.com/BurntSushi/toml.git /go/src/github.com/BurntSushi/toml \\\n && go install -v github.com/BurntSushi/toml/cmd/tomlv\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"dd4477e7b199f54e4062ec0c203b9b51","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: Apparmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake btrfs-tools build-essential curl dpkg-sig git iptables libapparmor-dev libcap-dev libsqlite3-dev mercurial parallel python-mock python-pip python-websocket reprepro ruby1.9.1 ruby1.9.1-dev s3cmd=1.1.0* -y\n#   Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install lxc\nENV LXC_VERSION=\"1.0.7\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#   Install Go\nENV GO_VERSION=\"1.4.1\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64 darwin/386  freebsd/amd64 freebsd/386 freebsd/arm\"\n#   TODO when https://jenkins.dockerproject.com/job/Windows/ is green, add windows back to the list above\n#  \twindows/amd64 windows/386\n#   (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"5\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#   We still support compiling with older Go, so need to grab older \"gofmt\"\nENV GOFMT_VERSION=\"1.3.3\"\nRUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$( go env GOOS ;)-$( go env GOARCH ;).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   Grab Go's cover tool for dead-simple code coverage testing\nRUN go get golang.org/x/tools/cmd/cover\n#   TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#   Get the \"busybox\" image source so we can build locally instead of pulling\nRUN git clone -b buildroot-2014.02 https://github.com/jpetazzo/docker-busybox.git /docker-busybox\n#   Get the \"cirros\" image source so we can import it instead of fetching it during tests\nRUN curl -sSL -o /cirros.tar.gz https://github.com/ewindisch/docker-cirros/raw/1cded459668e8b9dbf4ef976c94c05add9bbd8e9/cirros-0.3.0-x86_64-lxc.tar.gz\n#   Install registry\nENV REGISTRY_COMMIT=\"c448e0416925a9876d5576e412703c9b8b865e19\"\nRUN set -x \\\n && git clone https://github.com/docker/distribution.git /go/src/github.com/docker/distribution \\\n && (cd /go/src/github.com/docker/distribution \\\n && git checkout -q $REGISTRY_COMMIT ) \\\n && GOPATH=/go/src/github.com/docker/distribution/Godeps/_workspace:/go go build -o /go/bin/registry-v2 github.com/docker/distribution/cmd/registry\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"aa19d7b6609c6676e8258f6b900dea2eda1dbe95\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT\n#   Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux btrfs_noversion\"\n#   Install man page generator\nCOPY vendor /go/src/github.com/docker/docker/vendor\n#   (copy vendor/ because go-md2man needs golang.org/x/net)\nRUN set -x \\\n && git clone -b v1.0.1 https://github.com/cpuguy83/go-md2man.git /go/src/github.com/cpuguy83/go-md2man \\\n && git clone -b v1.2 https://github.com/russross/blackfriday.git /go/src/github.com/russross/blackfriday \\\n && go install -v github.com/cpuguy83/go-md2man\n#   install toml validator\nRUN git clone -b v0.1.0 https://github.com/BurntSushi/toml.git /go/src/github.com/BurntSushi/toml \\\n && go install -v github.com/BurntSushi/toml/cmd/tomlv\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"c84e4a7a5dc159d7ef5dab89fa8df305","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fdf35227fcbcd3dda18e19ad697d55a321b67a8d.dockerfile"}