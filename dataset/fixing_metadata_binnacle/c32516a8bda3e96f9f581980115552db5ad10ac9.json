{"seed":3382048536,"processedDockerfileHash":"8f3ef15a3d5325f49c39f0f02a2c2a73","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM caffe2ai/caffe2:c2v0.8.0.cpu.full.ubuntu16.04\n#   Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list \\\n && curl https://bazel.build/bazel-release.pub.gpg | apt-key add -\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl tk ant apt-utils bazel bc build-essential cmake default-jdk doxygen gfortran golang iptables libav-tools libboost-all-dev libeigen3-dev libfreetype6-dev libhdf5-dev libjpeg-turbo8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libprotobuf-dev libsdl2-dev libtiff-dev libtiff5-dev libvncserver-dev libzmq3-dev nano net-tools openmpi-bin -y \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN pip install Cython==0.29.34 h5py==3.8.0 ipykernel==6.22.0 jupyter==1.0.0 matplotlib==3.7.1 numpy==1.24.2 pandas==2.0.0 path.py==12.5.0 pyyaml==6.0 scipy==1.10.1 six==1.16.0 sklearn==0.0.post4 sympy==1.11.1 Pillow==9.5.0 zmq==0.0.0 dlib==19.24.1 incremental==22.10.0 nltk==3.8.1 textacy==0.13.0 scikit-image==0.20.0 spacy==3.5.2 tqdm==4.65.0 wheel==0.40.0 datmo==0.0.40 --no-cache-dir\n#   Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n && cd xgboost \\\n && make -j$( nproc ;) \\\n && cd python-package \\\n && python setup.py install \\\n && cd ../.. \\\n && rm -rf xgboost\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-opencv libavcodec-dev libavformat-dev libavresample-dev libdc1394-22-dev libgdal-dev libgphoto2-dev libgtk2.0-dev libjasper-dev liblapacke-dev libopencore-amrnb-dev libopencore-amrwb-dev libopencv-dev libopenexr-dev libswscale-dev libtbb2 libtbb-dev libtheora-dev libv4l-dev libvorbis-dev libvtk6-dev libx264-dev libxine2-dev libxvidcore-dev qt5-default -y\n#   Installing opencv\nARG OPENCV_VERSION=3.4.0\nRUN cd ~/ \\\n && git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch \\\n && git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -DWITH_QT=ON -DWITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && rm -rf ~/opencv*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM caffe2ai/caffe2:c2v0.8.0.cpu.full.ubuntu16.04\n#  Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list \\\n && curl https://bazel.build/bazel-release.pub.gpg | apt-key add -\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install tcl tk ant apt-utils bazel bc build-essential cmake default-jdk doxygen gfortran golang iptables libav-tools libboost-all-dev libeigen3-dev libfreetype6-dev libhdf5-dev libjpeg-turbo8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libprotobuf-dev libsdl2-dev libtiff-dev libtiff5-dev libvncserver-dev libzmq3-dev nano net-tools openmpi-bin -y \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN pip install Cython h5py ipykernel jupyter matplotlib numpy pandas path.py pyyaml scipy six sklearn sympy Pillow zmq dlib incremental nltk textacy scikit-image spacy tqdm wheel datmo --no-cache-dir\n#  Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n && cd xgboost \\\n && make -j$( nproc ;) \\\n && cd python-package \\\n && python setup.py install \\\n && cd ../.. \\\n && rm -rf xgboost\nRUN apt-get update \\\n && apt-get install python-opencv libavcodec-dev libavformat-dev libavresample-dev libdc1394-22-dev libgdal-dev libgphoto2-dev libgtk2.0-dev libjasper-dev liblapacke-dev libopencore-amrnb-dev libopencore-amrwb-dev libopencv-dev libopenexr-dev libswscale-dev libtbb2 libtbb-dev libtheora-dev libv4l-dev libvorbis-dev libvtk6-dev libx264-dev libxine2-dev libxvidcore-dev qt5-default -y\n#  Installing opencv\nARG OPENCV_VERSION=3.4.0\nRUN cd ~/ \\\n && git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch \\\n && git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -DWITH_QT=ON -DWITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && rm -rf ~/opencv*\n","injectedSmells":[],"originalDockerfileHash":"05a44a6c9d2273504d8e447ac995f718","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM caffe2ai/caffe2:c2v0.8.0.cpu.full.ubuntu16.04\n#   Add Bazel distribution URI as a package source\nRUN echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.list \\\n && curl https://bazel.build/bazel-release.pub.gpg | apt-key add -\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install tcl tk ant apt-utils bazel bc build-essential cmake default-jdk doxygen gfortran golang iptables libav-tools libboost-all-dev libeigen3-dev libfreetype6-dev libhdf5-dev libjpeg-turbo8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libprotobuf-dev libsdl2-dev libtiff-dev libtiff5-dev libvncserver-dev libzmq3-dev nano net-tools openmpi-bin -y \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN pip install Cython h5py ipykernel jupyter matplotlib numpy pandas path.py pyyaml scipy six sklearn sympy Pillow zmq dlib incremental nltk textacy scikit-image spacy tqdm wheel datmo --no-cache-dir\n#   Install xgboost\nRUN git clone --recursive https://github.com/dmlc/xgboost \\\n && cd xgboost \\\n && make -j$( nproc ;) \\\n && cd python-package \\\n && python setup.py install \\\n && cd ../.. \\\n && rm -rf xgboost\nRUN apt-get update \\\n && apt-get install python-opencv libavcodec-dev libavformat-dev libavresample-dev libdc1394-22-dev libgdal-dev libgphoto2-dev libgtk2.0-dev libjasper-dev liblapacke-dev libopencore-amrnb-dev libopencore-amrwb-dev libopencv-dev libopenexr-dev libswscale-dev libtbb2 libtbb-dev libtheora-dev libv4l-dev libvorbis-dev libvtk6-dev libx264-dev libxine2-dev libxvidcore-dev qt5-default -y\n#   Installing opencv\nARG OPENCV_VERSION=3.4.0\nRUN cd ~/ \\\n && git clone https://github.com/Itseez/opencv.git --branch ${OPENCV_VERSION} --single-branch \\\n && git clone https://github.com/Itseez/opencv_contrib.git --branch ${OPENCV_VERSION} --single-branch \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -DWITH_QT=ON -DWITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && rm -rf ~/opencv*\n","originalDockerfileUglifiedHash":"f8f99cd808ebbd34b7279ef0d5b3e1e2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c32516a8bda3e96f9f581980115552db5ad10ac9.dockerfile"}