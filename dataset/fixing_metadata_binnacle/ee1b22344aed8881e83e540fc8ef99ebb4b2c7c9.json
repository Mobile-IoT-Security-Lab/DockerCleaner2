{"seed":3351768795,"processedDockerfileHash":"f7d5b84fe45fd19eb908bf973a2219c1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:bionic\nARG BRIDGE=false\nARG INSTALL_TURTLEBOT2_DEMO_DEPS=false\nARG INSTALL_CONNEXT_DEBS=false\nARG PLATFORM=x86\nARG ROS1_DISTRO=melodic\nARG UBUNTU_DISTRO=bionic\nARG COMPILE_WITH_CLANG=false\n#   Prevent errors from apt-get.\n#   See: http://askubuntu.com/questions/506158/unable-to-initialize-frontend-dialog-when-using-ssh\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales=2.27-3ubuntu1.6 -y\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\n#   net-tools is for ifconfig\n#   Get curl for fetching the repo keys.\n#   Get https transport for APT.\nRUN apt-get update \\\n && apt-get install --no-install-recommends lsb-release=9.20170808ubuntu1 net-tools=1.60+git20161116.90da8a0-1ubuntu1 sudo=1.8.21p2-3ubuntu1.5 curl=7.58.0-2ubuntu3.24 gnupg2=2.2.4-1ubuntu1.6 apt-transport-https=1.6.14 -y\n#   Add the ROS repositories to the apt sources list.\nRUN echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs ` main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN echo \"Bust Cache for key update 2019-06-08\" \\\n && curl --silent http://repositories.ros.org/repos.key | apt-key add -\n#   Add the OSRF repositories to the apt sources list.\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-latest.list\nRUN curl --silent http://packages.osrfoundation.org/gazebo.key | apt-key add -\n#   Install some development tools.\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 ccache=3.4.1-1 cmake=3.10.2-1ubuntu2.18.04.2 pkg-config=0.29.1-0ubuntu2 python3-empy=3.3.2-1build1 python3-setuptools=39.0.1-2ubuntu0.1 python3-vcstool -y\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends python3-lark-parser python3-opencv=3.2.0+dfsg-4ubuntu0.1 -y ; fi\n#   Install build and test dependencies of ROS 2 packages.\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang-format=1:6.0-41~exp5~ubuntu1 cppcheck=1.82-1 git=1:2.17.1-1ubuntu0.17 liblog4cxx-dev=0.10.0-13ubuntu2 libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.8 libxml2-utils=2.9.4+dfsg1-6.1ubuntu1.8 libxslt-dev pydocstyle=2.0.0-1 pyflakes=1.6.0-1 python3-coverage=4.5+dfsg.1-3 python3-cryptography=2.1.4-1ubuntu1.4 python3-flake8=3.5.0-1 python3-lxml=4.2.1-1ubuntu0.6 python3-mock=2.0.0-3 python3-nose=1.3.7-3 python3-numpy=1:1.13.3-2ubuntu1 python3-pep8=1.7.1-1ubuntu1 python3-pyparsing=2.2.0+dfsg1-2 python3-yaml=3.12-1build2 uncrustify=0.66.1+dfsg1-1 -y\n#   Install and self update pip/setuptools to the latest version.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pip=9.0.1-2.3~ubuntu1.18.04.8 -y\nRUN pip3 install -U setuptools pip virtualenv\n#   Install clang if build arg is true\nRUN if test ${COMPILE_WITH_CLANG} = true ; then apt-get update \\\n && apt-get install --no-install-recommends clang=1:6.0-41~exp5~ubuntu1 libc++-dev=6.0-2 libc++abi-dev=6.0-2 -y ; fi\n#   Install coverage build dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcovr=3.4-1 -y\n#   Install the OpenSplice binary from the OSRF repositories.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopensplice69=6.9.190403+osrf1-1~$UBUNTU_DISTRO -y\n#   Update default domain id.\nRUN sed -i \"s/<Id>0<\\/Id>/<Id>108<\\/Id>/\" /usr/etc/opensplice/config/ospl.xml\n#   Install the Connext binary from the OSRF repositories.\nRUN\n#   Install the RTI dependencies.\nRUN if test ${PLATFORM} = x86 ; then apt-get update \\\n && apt-get install --no-install-recommends default-jre-headless=2:1.11-68ubuntu1~18.04.1 -y ; fi\n#   Install dependencies for RTI web binaries install script.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pexpect=4.2.1-1 -y\n#   Get and install the RTI web binaries.\nRUN cd /tmp \\\n && curl --silent https://s3.amazonaws.com/RTI/Bundles/5.3.1/Evaluation/rti_connext_dds_secure-5.3.1-eval-x64Linux3gcc5.4.0.tar.gz | tar -xz\nRUN cd /tmp \\\n && tar -xvf /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gz\nCOPY rti_web_binaries_install_script.py /tmp/rti_web_binaries_install_script.py\n#   Add the RTI license file.\nCOPY rticonnextdds-license/rti_license.dat /tmp/rti_license.dat\n#   Add the RTI binaries we made.\n#   ADD rticonnextdds-src/librticonnextdds52_5.2.3-1_amd64.deb /tmp/librticonnextdds52_5.2.3-1_amd64.deb\n#   ADD rticonnextdds-src/librticonnextdds52-dev_5.2.3-1_amd64.deb /tmp/librticonnextdds52-dev_5.2.3-1_amd64.deb\n#   ADD rticonnextdds-src/rticonnextdds-tools_5.2.3-1_amd64.deb /tmp/rticonnextdds-tools_5.2.3-1_amd64.deb\n#   Install the eProsima dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libasio-dev=1:1.10.8-1 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libtinyxml2-dev=6.0.0+dfsg-1 valgrind=1:3.13.0-2ubuntu2.3 -y\n#   Install OpenCV.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopencv-dev=3.2.0+dfsg-4ubuntu0.1 -y\n#   Install console_bridge for class_loader et al.\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libconsole-bridge-dev=0.4.0+dfsg-2 -y ; fi\n#   Install build dependencies for class_loader.\n#   We are building poco from source on xenial as we need at least 1.4.1p1 and xenial ships with 1.3.6p1 (https://github.com/ros2/poco_vendor/pull/10)\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libpoco-dev=1.8.0.1-1ubuntu4 -y ; fi\n#   Install build dependencies for rviz et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libassimp-dev=4.1.0~dfsg-3 libcurl4-openssl-dev=7.58.0-2ubuntu3.24 libfreetype6-dev=2.8.1-2ubuntu2.2 libgles2-mesa-dev=20.0.8-0ubuntu1~18.04.1 libglu1-mesa-dev=9.0.0-2.1build1 libqt5core5a=5.9.5+dfsg-0ubuntu2.6 libqt5gui5=5.9.5+dfsg-0ubuntu2.6 libqt5opengl5=5.9.5+dfsg-0ubuntu2.6 libqt5widgets5=5.9.5+dfsg-0ubuntu2.6 libxaw7-dev=2:1.0.13-1 libxrandr-dev=2:1.5.1-1 qtbase5-dev=5.9.5+dfsg-0ubuntu2.6 -y\n#   Install build dependencies for rqt et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends pyqt5-dev=5.10.1+dfsg-1ubuntu2 python3-pyqt5=5.10.1+dfsg-1ubuntu2 python3-pyqt5.qtsvg=5.10.1+dfsg-1ubuntu2 python3-sip-dev=4.19.7+dfsg-1ubuntu0.1 python3-pydot=1.2.3-1 python3-pygraphviz=1.4~rc1-1build2.1 -y\n#   Install dependencies for robot_model and robot_state_publisher\nRUN apt-get update \\\n && apt-get install --no-install-recommends libtinyxml-dev=2.6.2-4 libeigen3-dev=3.3.4-4 -y\n#   Install Python3 development files.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-dev=3.6.7-1~18.04 -y\n#   automatic invalidation once every day.\nRUN echo \"@today_str\"\nRUN\n#   Install build and test dependencies of ros1_bridge.\nRUN if test ${BRIDGE} = true ; then apt-get update \\\n && apt-get install --no-install-recommends python-rospkg=1.1.4-1 ros-${ROS1_DISTRO}-common-msgs ros-${ROS1_DISTRO}-rosbash ros-${ROS1_DISTRO}-roscpp ros-${ROS1_DISTRO}-roslaunch ros-${ROS1_DISTRO}-rosmsg ros-${ROS1_DISTRO}-roscpp-tutorials ros-${ROS1_DISTRO}-rospy-tutorials ros-${ROS1_DISTRO}-tf2-msgs -y ; fi\n#   Install build dependencies for turtlebot demo (not supported on xenial).\nRUN\n#   Install dependencies for RViz visual tests\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgl1-mesa-dri=20.0.8-0ubuntu1~18.04.1 libglapi-mesa=20.0.8-0ubuntu1~18.04.1 libosmesa6=20.0.8-0ubuntu1~18.04.1 mesa-utils=8.4.0-1 xvfb=2:1.19.6-1ubuntu4.14 matchbox-window-manager=1.2-osso21-2 -y\nENV DISPLAY=\":99\"\n#   Create a user to own the build output.\nRUN useradd -u 1234 -m rosbuild\nRUN sudo -H -u rosbuild -- git config --global user.email \"jenkins@ci.ros2.org\"\nRUN sudo -H -u rosbuild -- git config --global user.name \"Jenkins ROS 2\"\nRUN echo 'rosbuild ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nWORKDIR \"@workdir\"\n#   Add an entry point which changes rosbuild's UID from 1234 to the UID of the invoking user.\n#   This means that the generated files will have the same ownership as the host OS user.\nCOPY entry_point.sh /entry_point.sh\nRUN chmod 755 /entry_point.sh\nENTRYPOINT [\"/entry_point.sh\"]\nCMD [\"matchbox-window-manager\", \">\", \"/dev/null\", \"2>&1&;\", \"python3\", \"-u\", \"run_ros2_batch.py\", \"$CI_ARGS\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:bionic\nARG BRIDGE=false\nARG INSTALL_TURTLEBOT2_DEMO_DEPS=false\nARG INSTALL_CONNEXT_DEBS=false\nARG PLATFORM=x86\nARG ROS1_DISTRO=melodic\nARG UBUNTU_DISTRO=bionic\nARG COMPILE_WITH_CLANG=false\n#  Prevent errors from apt-get.\n#  See: http://askubuntu.com/questions/506158/unable-to-initialize-frontend-dialog-when-using-ssh\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales -y\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\n#  net-tools is for ifconfig\n#  Get curl for fetching the repo keys.\n#  Get https transport for APT.\nRUN apt-get update \\\n && apt-get install --no-install-recommends lsb-release net-tools sudo curl gnupg2 apt-transport-https -y\n#  Add the ROS repositories to the apt sources list.\nRUN echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs ` main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN echo \"Bust Cache for key update 2019-06-08\" \\\n && curl --silent http://repositories.ros.org/repos.key | apt-key add -\n#  Add the OSRF repositories to the apt sources list.\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-latest.list\nRUN curl --silent http://packages.osrfoundation.org/gazebo.key | apt-key add -\n#  Install some development tools.\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ccache cmake pkg-config python3-empy python3-setuptools python3-vcstool -y\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends python3-lark-parser python3-opencv -y ; fi\n#  Install build and test dependencies of ROS 2 packages.\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang-format cppcheck git liblog4cxx-dev libxml2-dev libxml2-utils libxslt-dev pydocstyle pyflakes python3-coverage python3-cryptography python3-flake8 python3-lxml python3-mock python3-nose python3-numpy python3-pep8 python3-pyparsing python3-yaml uncrustify -y\n#  Install and self update pip/setuptools to the latest version.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pip -y\nRUN pip3 install -U setuptools pip virtualenv\n#  Install clang if build arg is true\nRUN if test ${COMPILE_WITH_CLANG} = true ; then apt-get update \\\n && apt-get install --no-install-recommends clang libc++-dev libc++abi-dev -y ; fi\n#  Install coverage build dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcovr -y\n#  Install the OpenSplice binary from the OSRF repositories.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopensplice69=6.9.190403+osrf1-1~$UBUNTU_DISTRO -y\n#  Update default domain id.\nRUN sed -i \"s/<Id>0<\\/Id>/<Id>108<\\/Id>/\" /usr/etc/opensplice/config/ospl.xml\n#  Install the Connext binary from the OSRF repositories.\nRUN if test ( ${PLATFORM} = x86 -a ${INSTALL_CONNEXT_DEBS} = true ) ; then apt-get update \\\n && RTI_NC_LICENSE_ACCEPTED=yes apt-get install -y rti-connext-dds-5.3.1 ; fi\n#  Install the RTI dependencies.\nRUN if test ${PLATFORM} = x86 ; then apt-get update \\\n && apt-get install --no-install-recommends default-jre-headless -y ; fi\n#  Install dependencies for RTI web binaries install script.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pexpect -y\n#  Get and install the RTI web binaries.\nRUN cd /tmp \\\n && curl --silent https://s3.amazonaws.com/RTI/Bundles/5.3.1/Evaluation/rti_connext_dds_secure-5.3.1-eval-x64Linux3gcc5.4.0.tar.gz | tar -xz\nRUN cd /tmp \\\n && tar -xvf /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gz\nADD rti_web_binaries_install_script.py /tmp/rti_web_binaries_install_script.py\n#  Add the RTI license file.\nADD rticonnextdds-license/rti_license.dat /tmp/rti_license.dat\n#  Add the RTI binaries we made.\n#  ADD rticonnextdds-src/librticonnextdds52_5.2.3-1_amd64.deb /tmp/librticonnextdds52_5.2.3-1_amd64.deb\n#  ADD rticonnextdds-src/librticonnextdds52-dev_5.2.3-1_amd64.deb /tmp/librticonnextdds52-dev_5.2.3-1_amd64.deb\n#  ADD rticonnextdds-src/rticonnextdds-tools_5.2.3-1_amd64.deb /tmp/rticonnextdds-tools_5.2.3-1_amd64.deb\n#  Install the eProsima dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libasio-dev libssl-dev libtinyxml2-dev valgrind -y\n#  Install OpenCV.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopencv-dev -y\n#  Install console_bridge for class_loader et al.\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libconsole-bridge-dev -y ; fi\n#  Install build dependencies for class_loader.\n#  We are building poco from source on xenial as we need at least 1.4.1p1 and xenial ships with 1.3.6p1 (https://github.com/ros2/poco_vendor/pull/10)\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libpoco-dev -y ; fi\n#  Install build dependencies for rviz et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libassimp-dev libcurl4-openssl-dev libfreetype6-dev libgles2-mesa-dev libglu1-mesa-dev libqt5core5a libqt5gui5 libqt5opengl5 libqt5widgets5 libxaw7-dev libxrandr-dev qtbase5-dev -y\n#  Install build dependencies for rqt et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends pyqt5-dev python3-pyqt5 python3-pyqt5.qtsvg python3-sip-dev python3-pydot python3-pygraphviz -y\n#  Install dependencies for robot_model and robot_state_publisher\nRUN apt-get update \\\n && apt-get install --no-install-recommends libtinyxml-dev libeigen3-dev -y\n#  Install Python3 development files.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-dev -y\n#  automatic invalidation once every day.\nRUN echo \"@today_str\"\nRUN if test ( ${BRIDGE} = true -o ${INSTALL_TURTLEBOT2_DEMO_DEPS} = true ) ; then apt-get update \\\n && apt-get install --no-install-recommends ros-${ROS1_DISTRO}-catkin -y ; fi\n#  Install build and test dependencies of ros1_bridge.\nRUN if test ${BRIDGE} = true ; then apt-get update \\\n && apt-get install --no-install-recommends python-rospkg ros-${ROS1_DISTRO}-common-msgs ros-${ROS1_DISTRO}-rosbash ros-${ROS1_DISTRO}-roscpp ros-${ROS1_DISTRO}-roslaunch ros-${ROS1_DISTRO}-rosmsg ros-${ROS1_DISTRO}-roscpp-tutorials ros-${ROS1_DISTRO}-rospy-tutorials ros-${ROS1_DISTRO}-tf2-msgs -y ; fi\n#  Install build dependencies for turtlebot demo (not supported on xenial).\nRUN if test ( ${UBUNTU_DISTRO} != xenial -a ${INSTALL_TURTLEBOT2_DEMO_DEPS} = true ) ; then apt-get update \\\n && apt-get install --no-install-recommends libatlas-base-dev libboost-iostreams-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libcairo2-dev libceres-dev libgoogle-glog-dev liblua5.2-dev libpcl-dev libprotobuf-dev libprotoc-dev libsdl1.2-dev libsdl-image1.2-dev libudev-dev libusb-1.0-0-dev libyaml-cpp-dev protobuf-compiler python3-sphinx ros-${ROS1_DISTRO}-kobuki-driver ros-${ROS1_DISTRO}-kobuki-ftdi -y ; fi\n#  Install dependencies for RViz visual tests\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgl1-mesa-dri libglapi-mesa libosmesa6 mesa-utils xvfb matchbox-window-manager -y\nENV DISPLAY=\":99\"\n#  Create a user to own the build output.\nRUN useradd -u 1234 -m rosbuild\nRUN sudo -H -u rosbuild -- git config --global user.email \"jenkins@ci.ros2.org\"\nRUN sudo -H -u rosbuild -- git config --global user.name \"Jenkins ROS 2\"\nRUN echo 'rosbuild ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nWORKDIR \"@workdir\"\n#  Add an entry point which changes rosbuild's UID from 1234 to the UID of the invoking user.\n#  This means that the generated files will have the same ownership as the host OS user.\nADD entry_point.sh /entry_point.sh\nRUN chmod 755 /entry_point.sh\nENTRYPOINT [\"/entry_point.sh\"]\nCMD [\"matchbox-window-manager\", \">\", \"/dev/null\", \"2>&1&;\", \"python3\", \"-u\", \"run_ros2_batch.py\", \"$CI_ARGS\"]\n","injectedSmells":[],"originalDockerfileHash":"7a2f56cd0f52c6e42f37991bc7c7eedb","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:bionic\nARG BRIDGE=false\nARG INSTALL_TURTLEBOT2_DEMO_DEPS=false\nARG INSTALL_CONNEXT_DEBS=false\nARG PLATFORM=x86\nARG ROS1_DISTRO=melodic\nARG UBUNTU_DISTRO=bionic\nARG COMPILE_WITH_CLANG=false\n#   Prevent errors from apt-get.\n#   See: http://askubuntu.com/questions/506158/unable-to-initialize-frontend-dialog-when-using-ssh\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales -y\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\n#   net-tools is for ifconfig\n#   Get curl for fetching the repo keys.\n#   Get https transport for APT.\nRUN apt-get update \\\n && apt-get install --no-install-recommends lsb-release net-tools sudo curl gnupg2 apt-transport-https -y\n#   Add the ROS repositories to the apt sources list.\nRUN echo \"deb http://repositories.ros.org/ubuntu/testing/ `lsb_release -cs ` main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN echo \"Bust Cache for key update 2019-06-08\" \\\n && curl --silent http://repositories.ros.org/repos.key | apt-key add -\n#   Add the OSRF repositories to the apt sources list.\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-latest.list\nRUN curl --silent http://packages.osrfoundation.org/gazebo.key | apt-key add -\n#   Install some development tools.\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ccache cmake pkg-config python3-empy python3-setuptools python3-vcstool -y\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends python3-lark-parser python3-opencv -y ; fi\n#   Install build and test dependencies of ROS 2 packages.\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang-format cppcheck git liblog4cxx-dev libxml2-dev libxml2-utils libxslt-dev pydocstyle pyflakes python3-coverage python3-cryptography python3-flake8 python3-lxml python3-mock python3-nose python3-numpy python3-pep8 python3-pyparsing python3-yaml uncrustify -y\n#   Install and self update pip/setuptools to the latest version.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pip -y\nRUN pip3 install -U setuptools pip virtualenv\n#   Install clang if build arg is true\nRUN if test ${COMPILE_WITH_CLANG} = true ; then apt-get update \\\n && apt-get install --no-install-recommends clang libc++-dev libc++abi-dev -y ; fi\n#   Install coverage build dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcovr -y\n#   Install the OpenSplice binary from the OSRF repositories.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopensplice69=6.9.190403+osrf1-1~$UBUNTU_DISTRO -y\n#   Update default domain id.\nRUN sed -i \"s/<Id>0<\\/Id>/<Id>108<\\/Id>/\" /usr/etc/opensplice/config/ospl.xml\n#   Install the Connext binary from the OSRF repositories.\nRUN\n#   Install the RTI dependencies.\nRUN if test ${PLATFORM} = x86 ; then apt-get update \\\n && apt-get install --no-install-recommends default-jre-headless -y ; fi\n#   Install dependencies for RTI web binaries install script.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pexpect -y\n#   Get and install the RTI web binaries.\nRUN cd /tmp \\\n && curl --silent https://s3.amazonaws.com/RTI/Bundles/5.3.1/Evaluation/rti_connext_dds_secure-5.3.1-eval-x64Linux3gcc5.4.0.tar.gz | tar -xz\nRUN cd /tmp \\\n && tar -xvf /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gz\nADD rti_web_binaries_install_script.py /tmp/rti_web_binaries_install_script.py\n#   Add the RTI license file.\nADD rticonnextdds-license/rti_license.dat /tmp/rti_license.dat\n#   Add the RTI binaries we made.\n#   ADD rticonnextdds-src/librticonnextdds52_5.2.3-1_amd64.deb /tmp/librticonnextdds52_5.2.3-1_amd64.deb\n#   ADD rticonnextdds-src/librticonnextdds52-dev_5.2.3-1_amd64.deb /tmp/librticonnextdds52-dev_5.2.3-1_amd64.deb\n#   ADD rticonnextdds-src/rticonnextdds-tools_5.2.3-1_amd64.deb /tmp/rticonnextdds-tools_5.2.3-1_amd64.deb\n#   Install the eProsima dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libasio-dev libssl-dev libtinyxml2-dev valgrind -y\n#   Install OpenCV.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopencv-dev -y\n#   Install console_bridge for class_loader et al.\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libconsole-bridge-dev -y ; fi\n#   Install build dependencies for class_loader.\n#   We are building poco from source on xenial as we need at least 1.4.1p1 and xenial ships with 1.3.6p1 (https://github.com/ros2/poco_vendor/pull/10)\nRUN if test ${UBUNTU_DISTRO} != xenial ; then apt-get update \\\n && apt-get install --no-install-recommends libpoco-dev -y ; fi\n#   Install build dependencies for rviz et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends libassimp-dev libcurl4-openssl-dev libfreetype6-dev libgles2-mesa-dev libglu1-mesa-dev libqt5core5a libqt5gui5 libqt5opengl5 libqt5widgets5 libxaw7-dev libxrandr-dev qtbase5-dev -y\n#   Install build dependencies for rqt et al.\nRUN apt-get update \\\n && apt-get install --no-install-recommends pyqt5-dev python3-pyqt5 python3-pyqt5.qtsvg python3-sip-dev python3-pydot python3-pygraphviz -y\n#   Install dependencies for robot_model and robot_state_publisher\nRUN apt-get update \\\n && apt-get install --no-install-recommends libtinyxml-dev libeigen3-dev -y\n#   Install Python3 development files.\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-dev -y\n#   automatic invalidation once every day.\nRUN echo \"@today_str\"\nRUN\n#   Install build and test dependencies of ros1_bridge.\nRUN if test ${BRIDGE} = true ; then apt-get update \\\n && apt-get install --no-install-recommends python-rospkg ros-${ROS1_DISTRO}-common-msgs ros-${ROS1_DISTRO}-rosbash ros-${ROS1_DISTRO}-roscpp ros-${ROS1_DISTRO}-roslaunch ros-${ROS1_DISTRO}-rosmsg ros-${ROS1_DISTRO}-roscpp-tutorials ros-${ROS1_DISTRO}-rospy-tutorials ros-${ROS1_DISTRO}-tf2-msgs -y ; fi\n#   Install build dependencies for turtlebot demo (not supported on xenial).\nRUN\n#   Install dependencies for RViz visual tests\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgl1-mesa-dri libglapi-mesa libosmesa6 mesa-utils xvfb matchbox-window-manager -y\nENV DISPLAY=\":99\"\n#   Create a user to own the build output.\nRUN useradd -u 1234 -m rosbuild\nRUN sudo -H -u rosbuild -- git config --global user.email \"jenkins@ci.ros2.org\"\nRUN sudo -H -u rosbuild -- git config --global user.name \"Jenkins ROS 2\"\nRUN echo 'rosbuild ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nWORKDIR \"@workdir\"\n#   Add an entry point which changes rosbuild's UID from 1234 to the UID of the invoking user.\n#   This means that the generated files will have the same ownership as the host OS user.\nADD entry_point.sh /entry_point.sh\nRUN chmod 755 /entry_point.sh\nENTRYPOINT [\"/entry_point.sh\"]\nCMD [\"matchbox-window-manager\", \">\", \"/dev/null\", \"2>&1&;\", \"python3\", \"-u\", \"run_ros2_batch.py\", \"$CI_ARGS\"]\n","originalDockerfileUglifiedHash":"f3f972ff6c26701e769fd1d2d5f9e0bb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ee1b22344aed8881e83e540fc8ef99ebb4b2c7c9.dockerfile"}