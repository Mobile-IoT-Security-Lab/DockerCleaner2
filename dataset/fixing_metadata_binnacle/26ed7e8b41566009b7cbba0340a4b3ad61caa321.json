{"seed":1937760512,"processedDockerfileHash":"dc2e08cf68ba67dae6c76efda250412b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://github.com/yeasy/docker-hyperledger-fabric-base\n#\n#   Dockerfile for Hyperledger fabric base image.\n#   If you only need quickly deploy a fabric network, please see\n#   * yeasy/hyperledger-fabric-peer\n#   * yeasy/hyperledger-fabric-orderer\n#   * yeasy/hyperledger-fabric-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.11.5\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#   Architecture of the node\nENV ARCH=\"amd64\"\n#   version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.14\"\n#   BASE_VERSION is required in core.yaml for the runtime fabric-baseos\nENV BASE_VERSION=\"1.4.0\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#   PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.4.0\"\n#   generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${BASE_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#   Peer config path\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH /chaincode/input /chaincode/output\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils python-dev -y \\\n && apt-get install --no-install-recommends libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install --no-install-recommends python-pip -y \\\n && apt-get install --no-install-recommends tree jq unzip -y \\\n && rm -rf /var/cache/apt\n#   install chaintool\n#  RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/maxbrunsfeld/counterfeiter \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/AlekSi/gocov-xml \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get golang.org/x/lint/golint \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/onsi/ginkgo/ginkgo\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && git clone --single-branch -b release-1.4 --depth 1 http://gerrit.hyperledger.org/r/fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/cryptogen.yaml $FABRIC_CFG_PATH/\n#   install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#   Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\n#  VOLUME /etc/hyperledger/fabric\n#   temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://github.com/yeasy/docker-hyperledger-fabric-base\n#\n#  Dockerfile for Hyperledger fabric base image.\n#  If you only need quickly deploy a fabric network, please see\n#  * yeasy/hyperledger-fabric-peer\n#  * yeasy/hyperledger-fabric-orderer\n#  * yeasy/hyperledger-fabric-ca\n#  Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#  Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.11.5\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#  Architecture of the node\nENV ARCH=\"amd64\"\n#  version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.14\"\n#  BASE_VERSION is required in core.yaml for the runtime fabric-baseos\nENV BASE_VERSION=\"1.4.0\"\n#  version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#  PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.4.0\"\n#  generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#  for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${BASE_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#  Peer config path\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH /chaincode/input /chaincode/output\n#  Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install tree jq unzip -y \\\n && rm -rf /var/cache/apt\n#  install chaintool\n# RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#  install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/maxbrunsfeld/counterfeiter \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/AlekSi/gocov-xml \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get golang.org/x/lint/golint \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/onsi/ginkgo/ginkgo\n#  Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && git clone --single-branch -b release-1.4 --depth 1 http://gerrit.hyperledger.org/r/fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/cryptogen.yaml $FABRIC_CFG_PATH/\n#  install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#  Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#  Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#  The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\n# VOLUME /etc/hyperledger/fabric\n#  temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#  This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","injectedSmells":[],"originalDockerfileHash":"ca4e39421d2c680e9e4453b8737fe100","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://github.com/yeasy/docker-hyperledger-fabric-base\n#\n#   Dockerfile for Hyperledger fabric base image.\n#   If you only need quickly deploy a fabric network, please see\n#   * yeasy/hyperledger-fabric-peer\n#   * yeasy/hyperledger-fabric-orderer\n#   * yeasy/hyperledger-fabric-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.11.5\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#   Architecture of the node\nENV ARCH=\"amd64\"\n#   version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.14\"\n#   BASE_VERSION is required in core.yaml for the runtime fabric-baseos\nENV BASE_VERSION=\"1.4.0\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#   PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.4.0\"\n#   generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${BASE_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#   Peer config path\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH /chaincode/input /chaincode/output\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install tree jq unzip -y \\\n && rm -rf /var/cache/apt\n#   install chaintool\n#  RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/maxbrunsfeld/counterfeiter \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/AlekSi/gocov-xml \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get golang.org/x/lint/golint \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/estesp/manifest-tool \\\n && go get github.com/onsi/ginkgo/ginkgo\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && git clone --single-branch -b release-1.4 --depth 1 http://gerrit.hyperledger.org/r/fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/cluster/config/cryptogen.yaml $FABRIC_CFG_PATH/\n#   install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#   Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\n#  VOLUME /etc/hyperledger/fabric\n#   temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","originalDockerfileUglifiedHash":"a901f281230b79290ea28fcc1149b3ea","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/26ed7e8b41566009b7cbba0340a4b3ad61caa321.dockerfile"}