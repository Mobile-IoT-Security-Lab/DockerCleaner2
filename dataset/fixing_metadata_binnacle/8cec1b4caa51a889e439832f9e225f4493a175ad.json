{"seed":2382280558,"processedDockerfileHash":"d5b77b9893bfd9f46097c121cb6cdab0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM judge0/buildpack-deps:jessie-2017-03-21\nRUN : \\\n && apt-get upgrade -y\nENV GCC_VERSIONS=\"7.2.0  6.4.0  6.3.0  5.4.0  4.9.4  4.8.5\"\nRUN set -xe \\\n && for GCC_VERSION in $GCC_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz\" -o /tmp/gcc-$GCC_VERSION.tar.gz ; done ; for GCC_VERSION in $GCC_VERSIONS; do mkdir /tmp/gcc-$GCC_VERSION \\\n && tar -xf /tmp/gcc-$GCC_VERSION.tar.gz -C /tmp/gcc-$GCC_VERSION --strip-components=1 \\\n && rm /tmp/gcc-$GCC_VERSION.tar.gz \\\n && cd /tmp/gcc-$GCC_VERSION \\\n && ./contrib/download_prerequisites \\\n && { rm *.tar.* || true ; } \\\n && tmpdir=\"$( mktemp -d ;)\" \\\n && cd \"$tmpdir\" \\\n && /tmp/gcc-$GCC_VERSION/configure --disable-multilib --enable-languages=c,c++ --prefix=/usr/local/gcc-$GCC_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install-strip \\\n && rm -rf \"$tmpdir\" /tmp/gcc-$GCC_VERSION ; done\nENV OCTAVE_VERSIONS=\"4.2.0\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends gfortran libblas-dev liblapack-dev libpcre3-dev -y ) \\\n && for OCTAVE_VERSION in $OCTAVE_VERSIONS; do curl -fSsL \"https://ftp.gnu.org/gnu/octave/octave-$OCTAVE_VERSION.tar.gz\" -o /tmp/octave-$OCTAVE_VERSION.tar.gz ; done ; for OCTAVE_VERSION in $OCTAVE_VERSIONS; do mkdir /tmp/octave-$OCTAVE_VERSION \\\n && tar -xf /tmp/octave-$OCTAVE_VERSION.tar.gz -C /tmp/octave-$OCTAVE_VERSION --strip-components=1 \\\n && rm /tmp/octave-$OCTAVE_VERSION.tar.gz \\\n && cd /tmp/octave-$OCTAVE_VERSION \\\n && ./configure --prefix=/usr/local/octave-$OCTAVE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/octave-$OCTAVE_VERSION ; done\nENV BASH_VERSIONS=\"4.4  4.0\"\nRUN set -xe \\\n && for BASH_VERSION in $BASH_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/bash/bash-$BASH_VERSION.tar.gz\" -o /tmp/bash-$BASH_VERSION.tar.gz ; done ; for BASH_VERSION in $BASH_VERSIONS; do mkdir /tmp/bash-$BASH_VERSION \\\n && tar -xf /tmp/bash-$BASH_VERSION.tar.gz -C /tmp/bash-$BASH_VERSION --strip-components=1 \\\n && rm /tmp/bash-$BASH_VERSION.tar.gz \\\n && cd /tmp/bash-$BASH_VERSION \\\n && ./configure --prefix=/usr/local/bash-$BASH_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/bash-$BASH_VERSION ; done\nENV RUBY_VERSIONS=\"2.4.0  2.3.3  2.2.6  2.1.9\"\nRUN set -xe \\\n && for RUBY_VERSION in $RUBY_VERSIONS; do curl -fSsL \"https://cache.ruby-lang.org/pub/ruby/ruby-$RUBY_VERSION.tar.gz\" -o /tmp/ruby-$RUBY_VERSION.tar.gz ; done ; for RUBY_VERSION in $RUBY_VERSIONS; do mkdir /tmp/ruby-$RUBY_VERSION \\\n && tar -xf /tmp/ruby-$RUBY_VERSION.tar.gz -C /tmp/ruby-$RUBY_VERSION --strip-components=1 \\\n && rm /tmp/ruby-$RUBY_VERSION.tar.gz \\\n && cd /tmp/ruby-$RUBY_VERSION \\\n && ./configure --disable-install-doc --prefix=/usr/local/ruby-$RUBY_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/ruby-$RUBY_VERSION ; done\nENV PYTHON_VERSIONS=\"3.6.0  3.5.3  2.7.9  2.6.9\"\nRUN set -xe \\\n && for PYTHON_VERSION in $PYTHON_VERSIONS; do curl -fSsL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o /tmp/python-$PYTHON_VERSION.tar.xz ; done ; for PYTHON_VERSION in $PYTHON_VERSIONS; do mkdir /tmp/python-$PYTHON_VERSION \\\n && tar -xf /tmp/python-$PYTHON_VERSION.tar.xz -C /tmp/python-$PYTHON_VERSION --strip-components=1 \\\n && rm /tmp/python-$PYTHON_VERSION.tar.xz \\\n && cd /tmp/python-$PYTHON_VERSION \\\n && ./configure --prefix=/usr/local/python-$PYTHON_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/python-$PYTHON_VERSION ; done\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nRUN set -xe \\\n && JAVA_8_DEBIAN_VERSION=8u131-b11-1~bpo8+1 \\\n && JAVA_7_DEBIAN_VERSION=7u151-2.6.11-1~deb8u1 \\\n && CA_CERTIFICATES_JAVA_VERSION=20161107~bpo8+1 \\\n && echo 'deb http://deb.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends openjdk-8-jdk=\"$JAVA_8_DEBIAN_VERSION\" openjdk-7-jdk=\"$JAVA_7_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y ) \\\n && update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java \\\n && update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac\nRUN set -xe \\\n && curl -fSsL \"https://github.com/AdoptOpenJDK/openjdk9-openj9-releases/releases/download/jdk-9%2B181/OpenJDK9-OPENJ9_x64_Linux_jdk-9.181.tar.gz\" -o /tmp/openjdk9-openj9.tar.gz \\\n && mkdir /usr/local/openjdk9-openj9 \\\n && tar -xf /tmp/openjdk9-openj9.tar.gz -C /usr/local/openjdk9-openj9 --strip-components=2 \\\n && rm /tmp/openjdk9-openj9.tar.gz\nRUN set -xe \\\n && curl -fSsL \"ftp://ftp.freepascal.org/fpc/dist/3.0.0/x86_64-linux/fpc-3.0.0.x86_64-linux.tar\" -o /tmp/fpc-3.0.0.tar \\\n && mkdir /tmp/fpc-3.0.0 \\\n && tar -xf /tmp/fpc-3.0.0.tar -C /tmp/fpc-3.0.0 --strip-components=1 \\\n && rm /tmp/fpc-3.0.0.tar \\\n && cd /tmp/fpc-3.0.0 \\\n && echo \"/usr/local/fpc-3.0.0\" | sh install.sh \\\n && rm -rf /tmp/fpc-3.0.0\nENV HASKELL_VERSIONS=\"8.2.1  8.0.2\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libgmp-dev -y ) \\\n && for HASKELL_VERSION in $HASKELL_VERSIONS; do curl -fSsL \"http://downloads.haskell.org/~ghc/$HASKELL_VERSION/ghc-$HASKELL_VERSION-x86_64-deb8-linux.tar.xz\" -o /tmp/ghc-$HASKELL_VERSION.tar.xz ; done ; for HASKELL_VERSION in $HASKELL_VERSIONS; do mkdir /tmp/ghc-$HASKELL_VERSION \\\n && tar -xf /tmp/ghc-$HASKELL_VERSION.tar.xz -C /tmp/ghc-$HASKELL_VERSION --strip-components=1 \\\n && rm /tmp/ghc-$HASKELL_VERSION.tar.xz \\\n && cd /tmp/ghc-$HASKELL_VERSION \\\n && ./configure --prefix=/usr/local/ghc-$HASKELL_VERSION \\\n && make install \\\n && rm -rf /tmp/ghc-$HASKELL_VERSION ; done\nENV MONO_VERSIONS=\"5.4.0.167  5.2.0.224\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends cmake -y ) \\\n && for MONO_VERSION in $MONO_VERSIONS; do curl -fSsL \"https://download.mono-project.com/sources/mono/mono-$MONO_VERSION.tar.bz2\" -o /tmp/mono-$MONO_VERSION.tar.bz2 ; done ; for MONO_VERSION in $MONO_VERSIONS; do mkdir /tmp/mono-$MONO_VERSION \\\n && tar -xf /tmp/mono-$MONO_VERSION.tar.bz2 -C /tmp/mono-$MONO_VERSION --strip-components=1 \\\n && rm /tmp/mono-$MONO_VERSION.tar.bz2 \\\n && cd /tmp/mono-$MONO_VERSION \\\n && ./configure --prefix=/usr/local/mono-$MONO_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/mono-$MONO_VERSION ; done\nENV NODE_VERSIONS=\"8.5.0   7.10.1\"\nRUN set -xe \\\n && for NODE_VERSION in $NODE_VERSIONS; do curl -fSsL \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz\" -o /tmp/node-$NODE_VERSION.tar.gz ; done ; for NODE_VERSION in $NODE_VERSIONS; do mkdir /tmp/node-$NODE_VERSION \\\n && tar -xf /tmp/node-$NODE_VERSION.tar.gz -C /tmp/node-$NODE_VERSION --strip-components=1 \\\n && rm /tmp/node-$NODE_VERSION.tar.gz \\\n && cd /tmp/node-$NODE_VERSION \\\n && ./configure --prefix=/usr/local/node-$NODE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/node-$NODE_VERSION ; done\nENV CLOJURE_VERSIONS=\"1.8.0\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends unzip -y ) \\\n && for CLOJURE_VERSION in $CLOJURE_VERSIONS; do curl -fSsL \"https://repo1.maven.org/maven2/org/clojure/clojure/$CLOJURE_VERSION/clojure-$CLOJURE_VERSION.zip\" -o /tmp/clojure-$CLOJURE_VERSION.zip ; done ; for CLOJURE_VERSION in $CLOJURE_VERSIONS; do unzip -d /usr/local /tmp/clojure-$CLOJURE_VERSION.zip \\\n && chmod -R 755 /usr/local/clojure-$CLOJURE_VERSION \\\n && rm /tmp/clojure-$CLOJURE_VERSION.zip ; done\nENV ERLANG_VERSIONS=\"20.0\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends unzip -y ) \\\n && for ERLANG_VERSION in $ERLANG_VERSIONS; do curl -fSsL \"https://github.com/erlang/otp/archive/OTP-$ERLANG_VERSION.tar.gz\" -o /tmp/erlang-$ERLANG_VERSION.tar.gz ; done ; for ERLANG_VERSION in $ERLANG_VERSIONS; do mkdir /tmp/erlang-$ERLANG_VERSION \\\n && tar -xf /tmp/erlang-$ERLANG_VERSION.tar.gz -C /tmp/erlang-$ERLANG_VERSION --strip-components=1 \\\n && rm /tmp/erlang-$ERLANG_VERSION.tar.gz \\\n && cd /tmp/erlang-$ERLANG_VERSION \\\n && ERL_TOP=$( pwd ;) ./otp_build autoconf \\\n && ERL_TOP=$( pwd ;) ./configure --prefix=/usr/local/erlang-$ERLANG_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/erlang-$ERLANG_VERSION ; done\n#   set default Erlang version for Elixir\nRUN ln -s /usr/local/erlang-20.0/bin/erl /usr/local/bin/erl\nENV ELIXIR_VERSIONS=\"1.5.1\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends unzip -y ) \\\n && for ELIXIR_VERSION in $ELIXIR_VERSIONS; do curl -fSsL \"https://github.com/elixir-lang/elixir/releases/download/v$ELIXIR_VERSION/Precompiled.zip\" -o /tmp/elixir-$ELIXIR_VERSION.zip ; done ; for ELIXIR_VERSION in $ELIXIR_VERSIONS; do unzip -d /usr/local/elixir-$ELIXIR_VERSION /tmp/elixir-$ELIXIR_VERSION.zip \\\n && rm /tmp/elixir-$ELIXIR_VERSION.zip ; done\nENV RUST_VERSIONS=\"1.20.0\"\nRUN set -xe \\\n && for RUST_VERSION in $RUST_VERSIONS; do curl -fSsL \"https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz\" -o /tmp/rust-$RUST_VERSION.tar.gz ; done ; for RUST_VERSION in $RUST_VERSIONS; do mkdir /tmp/rust-$RUST_VERSION \\\n && tar -xf /tmp/rust-$RUST_VERSION.tar.gz -C /tmp/rust-$RUST_VERSION --strip-components=1 \\\n && rm /tmp/rust-$RUST_VERSION.tar.gz \\\n && cd /tmp/rust-$RUST_VERSION \\\n && ./install.sh --prefix=/usr/local/rust-$RUST_VERSION --components=rustc,rust-std-x86_64-unknown-linux-gnu \\\n && rm -rf /tmp/rust-$RUST_VERSION ; done\nENV GO_VERSIONS=\"1.9\"\nRUN set -xe \\\n && for GO_VERSION in $GO_VERSIONS; do curl -fSsL \"https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz\" -o /tmp/go-$GO_VERSION.tar.gz ; done ; for GO_VERSION in $GO_VERSIONS; do mkdir /usr/local/go-$GO_VERSION \\\n && tar -xf /tmp/go-$GO_VERSION.tar.gz -C /usr/local/go-$GO_VERSION --strip-components=1 \\\n && rm /tmp/go-$GO_VERSION.tar.gz ; done\nENV INSECT_VERSIONS=\"5.0.0\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs-legacy npm -y ) \\\n && for INSECT_VERSION in $INSECT_VERSIONS; do mkdir /usr/local/insect-$INSECT_VERSION \\\n && cd /usr/local/insect-$INSECT_VERSION \\\n && npm install insect@$INSECT_VERSION \\\n && echo \"#!/bin/bash\\ncat \\\"$1\\\" | /usr/local/insect-$INSECT_VERSION/node_modules/.bin/insect\" > /usr/local/insect-$INSECT_VERSION/insect \\\n && chmod +x /usr/local/insect-$INSECT_VERSION/insect ; done\nENV CRYSTAL_VERSIONS=\"0.23.1-3\"\nRUN set -xe \\\n && for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do curl -fSsL \"https://github.com/crystal-lang/crystal/releases/download/${CRYSTAL_VERSION%-*}/crystal-$CRYSTAL_VERSION-linux-x86_64.tar.gz\" -o /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done ; for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do mkdir /usr/local/crystal-$CRYSTAL_VERSION \\\n && tar -xf /tmp/crystal-$CRYSTAL_VERSION.tar.gz -C /usr/local/crystal-$CRYSTAL_VERSION --strip-components=1 \\\n && rm /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done\nENV FBC_VERSIONS=\"1.05.0 \"\nRUN set -xe \\\n && for FBC_VERSION in $FBC_VERSIONS; do curl -fSsL \"https://downloads.sourceforge.net/project/fbc/Binaries%20-%20Linux/FreeBASIC-$FBC_VERSION-linux-x86_64.tar.gz\" -o /tmp/fbc-$FBC_VERSION.tar.gz ; done ; for FBC_VERSION in $FBC_VERSIONS; do mkdir /usr/local/fbc-$FBC_VERSION \\\n && tar -xf /tmp/fbc-$FBC_VERSION.tar.gz -C /usr/local/fbc-$FBC_VERSION --strip-components=1 \\\n && rm /tmp/fbc-$FBC_VERSION.tar.gz ; done\nENV OCAML_VERSIONS=\"4.05.0\"\nRUN set -xe \\\n && for OCAML_VERSION in $OCAML_VERSIONS; do curl -fSsL \"https://github.com/ocaml/ocaml/archive/$OCAML_VERSION.tar.gz\" -o /tmp/ocaml-$OCAML_VERSION.tar.gz ; done ; for OCAML_VERSION in $OCAML_VERSIONS; do mkdir /tmp/ocaml-$OCAML_VERSION \\\n && tar -xf /tmp/ocaml-$OCAML_VERSION.tar.gz -C /tmp/ocaml-$OCAML_VERSION --strip-components=1 \\\n && rm /tmp/ocaml-$OCAML_VERSION.tar.gz \\\n && cd /tmp/ocaml-$OCAML_VERSION \\\n && ./configure -prefix /usr/local/ocaml-$OCAML_VERSION -no-ocamldoc -no-debugger -no-graph \\\n && make -j\"$( nproc ;)\" world.opt \\\n && make install \\\n && rm -rf /tmp/ocaml-$OCAML_VERSION ; done\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends locales -y ) \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nRUN set -xe \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libcap-dev -y ) \\\n && git clone https://github.com/ioi/isolate.git /tmp/isolate \\\n && cd /tmp/isolate \\\n && git checkout 18554e83793508acd1032d0cf4229a332c43085e \\\n && echo \"num_boxes = 2147483647\" >> default.cf \\\n && make install \\\n && rm -rf /tmp/isolate\nENV BOX_ROOT=\"/var/local/lib/isolate\"\nLABEL maintainer=\"Herman Zvonimir Došilović, hermanz.dosilovic@gmail.com\"\nLABEL version=\"0.3.0\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM judge0/buildpack-deps:jessie-2017-03-21\nRUN apt-get update \\\n && apt-get upgrade -y\nENV GCC_VERSIONS=\"7.2.0  6.4.0  6.3.0  5.4.0  4.9.4  4.8.5\"\nRUN set -xe \\\n && for GCC_VERSION in $GCC_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz\" -o /tmp/gcc-$GCC_VERSION.tar.gz ; done ; for GCC_VERSION in $GCC_VERSIONS; do mkdir /tmp/gcc-$GCC_VERSION \\\n && tar -xf /tmp/gcc-$GCC_VERSION.tar.gz -C /tmp/gcc-$GCC_VERSION --strip-components=1 \\\n && rm /tmp/gcc-$GCC_VERSION.tar.gz \\\n && cd /tmp/gcc-$GCC_VERSION \\\n && ./contrib/download_prerequisites \\\n && { rm *.tar.* || true ; } \\\n && tmpdir=\"$( mktemp -d ;)\" \\\n && cd \"$tmpdir\" \\\n && /tmp/gcc-$GCC_VERSION/configure --disable-multilib --enable-languages=c,c++ --prefix=/usr/local/gcc-$GCC_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install-strip \\\n && rm -rf \"$tmpdir\" /tmp/gcc-$GCC_VERSION ; done\nENV OCTAVE_VERSIONS=\"4.2.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install gfortran libblas-dev liblapack-dev libpcre3-dev -y \\\n && for OCTAVE_VERSION in $OCTAVE_VERSIONS; do curl -fSsL \"https://ftp.gnu.org/gnu/octave/octave-$OCTAVE_VERSION.tar.gz\" -o /tmp/octave-$OCTAVE_VERSION.tar.gz ; done ; for OCTAVE_VERSION in $OCTAVE_VERSIONS; do mkdir /tmp/octave-$OCTAVE_VERSION \\\n && tar -xf /tmp/octave-$OCTAVE_VERSION.tar.gz -C /tmp/octave-$OCTAVE_VERSION --strip-components=1 \\\n && rm /tmp/octave-$OCTAVE_VERSION.tar.gz \\\n && cd /tmp/octave-$OCTAVE_VERSION \\\n && ./configure --prefix=/usr/local/octave-$OCTAVE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/octave-$OCTAVE_VERSION ; done\nENV BASH_VERSIONS=\"4.4  4.0\"\nRUN set -xe \\\n && for BASH_VERSION in $BASH_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/bash/bash-$BASH_VERSION.tar.gz\" -o /tmp/bash-$BASH_VERSION.tar.gz ; done ; for BASH_VERSION in $BASH_VERSIONS; do mkdir /tmp/bash-$BASH_VERSION \\\n && tar -xf /tmp/bash-$BASH_VERSION.tar.gz -C /tmp/bash-$BASH_VERSION --strip-components=1 \\\n && rm /tmp/bash-$BASH_VERSION.tar.gz \\\n && cd /tmp/bash-$BASH_VERSION \\\n && ./configure --prefix=/usr/local/bash-$BASH_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/bash-$BASH_VERSION ; done\nENV RUBY_VERSIONS=\"2.4.0  2.3.3  2.2.6  2.1.9\"\nRUN set -xe \\\n && for RUBY_VERSION in $RUBY_VERSIONS; do curl -fSsL \"https://cache.ruby-lang.org/pub/ruby/ruby-$RUBY_VERSION.tar.gz\" -o /tmp/ruby-$RUBY_VERSION.tar.gz ; done ; for RUBY_VERSION in $RUBY_VERSIONS; do mkdir /tmp/ruby-$RUBY_VERSION \\\n && tar -xf /tmp/ruby-$RUBY_VERSION.tar.gz -C /tmp/ruby-$RUBY_VERSION --strip-components=1 \\\n && rm /tmp/ruby-$RUBY_VERSION.tar.gz \\\n && cd /tmp/ruby-$RUBY_VERSION \\\n && ./configure --disable-install-doc --prefix=/usr/local/ruby-$RUBY_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/ruby-$RUBY_VERSION ; done\nENV PYTHON_VERSIONS=\"3.6.0  3.5.3  2.7.9  2.6.9\"\nRUN set -xe \\\n && for PYTHON_VERSION in $PYTHON_VERSIONS; do curl -fSsL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o /tmp/python-$PYTHON_VERSION.tar.xz ; done ; for PYTHON_VERSION in $PYTHON_VERSIONS; do mkdir /tmp/python-$PYTHON_VERSION \\\n && tar -xf /tmp/python-$PYTHON_VERSION.tar.xz -C /tmp/python-$PYTHON_VERSION --strip-components=1 \\\n && rm /tmp/python-$PYTHON_VERSION.tar.xz \\\n && cd /tmp/python-$PYTHON_VERSION \\\n && ./configure --prefix=/usr/local/python-$PYTHON_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/python-$PYTHON_VERSION ; done\n#  see https://bugs.debian.org/775775\n#  and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nRUN set -xe \\\n && JAVA_8_DEBIAN_VERSION=8u131-b11-1~bpo8+1 \\\n && JAVA_7_DEBIAN_VERSION=7u151-2.6.11-1~deb8u1 \\\n && CA_CERTIFICATES_JAVA_VERSION=20161107~bpo8+1 \\\n && echo 'deb http://deb.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk=\"$JAVA_8_DEBIAN_VERSION\" openjdk-7-jdk=\"$JAVA_7_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y \\\n && update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java \\\n && update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac\nRUN set -xe \\\n && curl -fSsL \"https://github.com/AdoptOpenJDK/openjdk9-openj9-releases/releases/download/jdk-9%2B181/OpenJDK9-OPENJ9_x64_Linux_jdk-9.181.tar.gz\" -o /tmp/openjdk9-openj9.tar.gz \\\n && mkdir /usr/local/openjdk9-openj9 \\\n && tar -xf /tmp/openjdk9-openj9.tar.gz -C /usr/local/openjdk9-openj9 --strip-components=2 \\\n && rm /tmp/openjdk9-openj9.tar.gz\nRUN set -xe \\\n && curl -fSsL \"ftp://ftp.freepascal.org/fpc/dist/3.0.0/x86_64-linux/fpc-3.0.0.x86_64-linux.tar\" -o /tmp/fpc-3.0.0.tar \\\n && mkdir /tmp/fpc-3.0.0 \\\n && tar -xf /tmp/fpc-3.0.0.tar -C /tmp/fpc-3.0.0 --strip-components=1 \\\n && rm /tmp/fpc-3.0.0.tar \\\n && cd /tmp/fpc-3.0.0 \\\n && echo \"/usr/local/fpc-3.0.0\" | sh install.sh \\\n && rm -rf /tmp/fpc-3.0.0\nENV HASKELL_VERSIONS=\"8.2.1  8.0.2\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install libgmp-dev -y \\\n && for HASKELL_VERSION in $HASKELL_VERSIONS; do curl -fSsL \"http://downloads.haskell.org/~ghc/$HASKELL_VERSION/ghc-$HASKELL_VERSION-x86_64-deb8-linux.tar.xz\" -o /tmp/ghc-$HASKELL_VERSION.tar.xz ; done ; for HASKELL_VERSION in $HASKELL_VERSIONS; do mkdir /tmp/ghc-$HASKELL_VERSION \\\n && tar -xf /tmp/ghc-$HASKELL_VERSION.tar.xz -C /tmp/ghc-$HASKELL_VERSION --strip-components=1 \\\n && rm /tmp/ghc-$HASKELL_VERSION.tar.xz \\\n && cd /tmp/ghc-$HASKELL_VERSION \\\n && ./configure --prefix=/usr/local/ghc-$HASKELL_VERSION \\\n && make install \\\n && rm -rf /tmp/ghc-$HASKELL_VERSION ; done\nENV MONO_VERSIONS=\"5.4.0.167  5.2.0.224\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install cmake -y \\\n && for MONO_VERSION in $MONO_VERSIONS; do curl -fSsL \"https://download.mono-project.com/sources/mono/mono-$MONO_VERSION.tar.bz2\" -o /tmp/mono-$MONO_VERSION.tar.bz2 ; done ; for MONO_VERSION in $MONO_VERSIONS; do mkdir /tmp/mono-$MONO_VERSION \\\n && tar -xf /tmp/mono-$MONO_VERSION.tar.bz2 -C /tmp/mono-$MONO_VERSION --strip-components=1 \\\n && rm /tmp/mono-$MONO_VERSION.tar.bz2 \\\n && cd /tmp/mono-$MONO_VERSION \\\n && ./configure --prefix=/usr/local/mono-$MONO_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/mono-$MONO_VERSION ; done\nENV NODE_VERSIONS=\"8.5.0   7.10.1\"\nRUN set -xe \\\n && for NODE_VERSION in $NODE_VERSIONS; do curl -fSsL \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz\" -o /tmp/node-$NODE_VERSION.tar.gz ; done ; for NODE_VERSION in $NODE_VERSIONS; do mkdir /tmp/node-$NODE_VERSION \\\n && tar -xf /tmp/node-$NODE_VERSION.tar.gz -C /tmp/node-$NODE_VERSION --strip-components=1 \\\n && rm /tmp/node-$NODE_VERSION.tar.gz \\\n && cd /tmp/node-$NODE_VERSION \\\n && ./configure --prefix=/usr/local/node-$NODE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/node-$NODE_VERSION ; done\nENV CLOJURE_VERSIONS=\"1.8.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for CLOJURE_VERSION in $CLOJURE_VERSIONS; do curl -fSsL \"https://repo1.maven.org/maven2/org/clojure/clojure/$CLOJURE_VERSION/clojure-$CLOJURE_VERSION.zip\" -o /tmp/clojure-$CLOJURE_VERSION.zip ; done ; for CLOJURE_VERSION in $CLOJURE_VERSIONS; do unzip -d /usr/local /tmp/clojure-$CLOJURE_VERSION.zip \\\n && chmod -R 755 /usr/local/clojure-$CLOJURE_VERSION \\\n && rm /tmp/clojure-$CLOJURE_VERSION.zip ; done\nENV ERLANG_VERSIONS=\"20.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for ERLANG_VERSION in $ERLANG_VERSIONS; do curl -fSsL \"https://github.com/erlang/otp/archive/OTP-$ERLANG_VERSION.tar.gz\" -o /tmp/erlang-$ERLANG_VERSION.tar.gz ; done ; for ERLANG_VERSION in $ERLANG_VERSIONS; do mkdir /tmp/erlang-$ERLANG_VERSION \\\n && tar -xf /tmp/erlang-$ERLANG_VERSION.tar.gz -C /tmp/erlang-$ERLANG_VERSION --strip-components=1 \\\n && rm /tmp/erlang-$ERLANG_VERSION.tar.gz \\\n && cd /tmp/erlang-$ERLANG_VERSION \\\n && ERL_TOP=$( pwd ;) ./otp_build autoconf \\\n && ERL_TOP=$( pwd ;) ./configure --prefix=/usr/local/erlang-$ERLANG_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/erlang-$ERLANG_VERSION ; done\n#  set default Erlang version for Elixir\nRUN ln -s /usr/local/erlang-20.0/bin/erl /usr/local/bin/erl\nENV ELIXIR_VERSIONS=\"1.5.1\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for ELIXIR_VERSION in $ELIXIR_VERSIONS; do curl -fSsL \"https://github.com/elixir-lang/elixir/releases/download/v$ELIXIR_VERSION/Precompiled.zip\" -o /tmp/elixir-$ELIXIR_VERSION.zip ; done ; for ELIXIR_VERSION in $ELIXIR_VERSIONS; do unzip -d /usr/local/elixir-$ELIXIR_VERSION /tmp/elixir-$ELIXIR_VERSION.zip \\\n && rm /tmp/elixir-$ELIXIR_VERSION.zip ; done\nENV RUST_VERSIONS=\"1.20.0\"\nRUN set -xe \\\n && for RUST_VERSION in $RUST_VERSIONS; do curl -fSsL \"https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz\" -o /tmp/rust-$RUST_VERSION.tar.gz ; done ; for RUST_VERSION in $RUST_VERSIONS; do mkdir /tmp/rust-$RUST_VERSION \\\n && tar -xf /tmp/rust-$RUST_VERSION.tar.gz -C /tmp/rust-$RUST_VERSION --strip-components=1 \\\n && rm /tmp/rust-$RUST_VERSION.tar.gz \\\n && cd /tmp/rust-$RUST_VERSION \\\n && ./install.sh --prefix=/usr/local/rust-$RUST_VERSION --components=rustc,rust-std-x86_64-unknown-linux-gnu \\\n && rm -rf /tmp/rust-$RUST_VERSION ; done\nENV GO_VERSIONS=\"1.9\"\nRUN set -xe \\\n && for GO_VERSION in $GO_VERSIONS; do curl -fSsL \"https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz\" -o /tmp/go-$GO_VERSION.tar.gz ; done ; for GO_VERSION in $GO_VERSIONS; do mkdir /usr/local/go-$GO_VERSION \\\n && tar -xf /tmp/go-$GO_VERSION.tar.gz -C /usr/local/go-$GO_VERSION --strip-components=1 \\\n && rm /tmp/go-$GO_VERSION.tar.gz ; done\nENV INSECT_VERSIONS=\"5.0.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install nodejs-legacy npm -y \\\n && for INSECT_VERSION in $INSECT_VERSIONS; do mkdir /usr/local/insect-$INSECT_VERSION \\\n && cd /usr/local/insect-$INSECT_VERSION \\\n && npm install insect@$INSECT_VERSION \\\n && echo \"#!/bin/bash\\ncat \\\"$1\\\" | /usr/local/insect-$INSECT_VERSION/node_modules/.bin/insect\" > /usr/local/insect-$INSECT_VERSION/insect \\\n && chmod +x /usr/local/insect-$INSECT_VERSION/insect ; done\nENV CRYSTAL_VERSIONS=\"0.23.1-3\"\nRUN set -xe \\\n && for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do curl -fSsL \"https://github.com/crystal-lang/crystal/releases/download/${CRYSTAL_VERSION%-*}/crystal-$CRYSTAL_VERSION-linux-x86_64.tar.gz\" -o /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done ; for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do mkdir /usr/local/crystal-$CRYSTAL_VERSION \\\n && tar -xf /tmp/crystal-$CRYSTAL_VERSION.tar.gz -C /usr/local/crystal-$CRYSTAL_VERSION --strip-components=1 \\\n && rm /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done\nENV FBC_VERSIONS=\"1.05.0 \"\nRUN set -xe \\\n && for FBC_VERSION in $FBC_VERSIONS; do curl -fSsL \"https://downloads.sourceforge.net/project/fbc/Binaries%20-%20Linux/FreeBASIC-$FBC_VERSION-linux-x86_64.tar.gz\" -o /tmp/fbc-$FBC_VERSION.tar.gz ; done ; for FBC_VERSION in $FBC_VERSIONS; do mkdir /usr/local/fbc-$FBC_VERSION \\\n && tar -xf /tmp/fbc-$FBC_VERSION.tar.gz -C /usr/local/fbc-$FBC_VERSION --strip-components=1 \\\n && rm /tmp/fbc-$FBC_VERSION.tar.gz ; done\nENV OCAML_VERSIONS=\"4.05.0\"\nRUN set -xe \\\n && for OCAML_VERSION in $OCAML_VERSIONS; do curl -fSsL \"https://github.com/ocaml/ocaml/archive/$OCAML_VERSION.tar.gz\" -o /tmp/ocaml-$OCAML_VERSION.tar.gz ; done ; for OCAML_VERSION in $OCAML_VERSIONS; do mkdir /tmp/ocaml-$OCAML_VERSION \\\n && tar -xf /tmp/ocaml-$OCAML_VERSION.tar.gz -C /tmp/ocaml-$OCAML_VERSION --strip-components=1 \\\n && rm /tmp/ocaml-$OCAML_VERSION.tar.gz \\\n && cd /tmp/ocaml-$OCAML_VERSION \\\n && ./configure -prefix /usr/local/ocaml-$OCAML_VERSION -no-ocamldoc -no-debugger -no-graph \\\n && make -j\"$( nproc ;)\" world.opt \\\n && make install \\\n && rm -rf /tmp/ocaml-$OCAML_VERSION ; done\nRUN set -xe \\\n && apt-get update \\\n && apt-get install locales -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install libcap-dev -y \\\n && git clone https://github.com/ioi/isolate.git /tmp/isolate \\\n && cd /tmp/isolate \\\n && git checkout 18554e83793508acd1032d0cf4229a332c43085e \\\n && echo \"num_boxes = 2147483647\" >> default.cf \\\n && make install \\\n && rm -rf /tmp/isolate\nENV BOX_ROOT=\"/var/local/lib/isolate\"\nLABEL maintainer=\"Herman Zvonimir Došilović, hermanz.dosilovic@gmail.com\"\nLABEL version=\"0.3.0\"\n","injectedSmells":[],"originalDockerfileHash":"4d35b868d086772a052883ad8dfeb76e","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM judge0/buildpack-deps:jessie-2017-03-21\nRUN apt-get update \\\n && apt-get upgrade -y\nENV GCC_VERSIONS=\"7.2.0  6.4.0  6.3.0  5.4.0  4.9.4  4.8.5\"\nRUN set -xe \\\n && for GCC_VERSION in $GCC_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz\" -o /tmp/gcc-$GCC_VERSION.tar.gz ; done ; for GCC_VERSION in $GCC_VERSIONS; do mkdir /tmp/gcc-$GCC_VERSION \\\n && tar -xf /tmp/gcc-$GCC_VERSION.tar.gz -C /tmp/gcc-$GCC_VERSION --strip-components=1 \\\n && rm /tmp/gcc-$GCC_VERSION.tar.gz \\\n && cd /tmp/gcc-$GCC_VERSION \\\n && ./contrib/download_prerequisites \\\n && { rm *.tar.* || true ; } \\\n && tmpdir=\"$( mktemp -d ;)\" \\\n && cd \"$tmpdir\" \\\n && /tmp/gcc-$GCC_VERSION/configure --disable-multilib --enable-languages=c,c++ --prefix=/usr/local/gcc-$GCC_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install-strip \\\n && rm -rf \"$tmpdir\" /tmp/gcc-$GCC_VERSION ; done\nENV OCTAVE_VERSIONS=\"4.2.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install gfortran libblas-dev liblapack-dev libpcre3-dev -y \\\n && for OCTAVE_VERSION in $OCTAVE_VERSIONS; do curl -fSsL \"https://ftp.gnu.org/gnu/octave/octave-$OCTAVE_VERSION.tar.gz\" -o /tmp/octave-$OCTAVE_VERSION.tar.gz ; done ; for OCTAVE_VERSION in $OCTAVE_VERSIONS; do mkdir /tmp/octave-$OCTAVE_VERSION \\\n && tar -xf /tmp/octave-$OCTAVE_VERSION.tar.gz -C /tmp/octave-$OCTAVE_VERSION --strip-components=1 \\\n && rm /tmp/octave-$OCTAVE_VERSION.tar.gz \\\n && cd /tmp/octave-$OCTAVE_VERSION \\\n && ./configure --prefix=/usr/local/octave-$OCTAVE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/octave-$OCTAVE_VERSION ; done\nENV BASH_VERSIONS=\"4.4  4.0\"\nRUN set -xe \\\n && for BASH_VERSION in $BASH_VERSIONS; do curl -fSsL \"http://ftpmirror.gnu.org/bash/bash-$BASH_VERSION.tar.gz\" -o /tmp/bash-$BASH_VERSION.tar.gz ; done ; for BASH_VERSION in $BASH_VERSIONS; do mkdir /tmp/bash-$BASH_VERSION \\\n && tar -xf /tmp/bash-$BASH_VERSION.tar.gz -C /tmp/bash-$BASH_VERSION --strip-components=1 \\\n && rm /tmp/bash-$BASH_VERSION.tar.gz \\\n && cd /tmp/bash-$BASH_VERSION \\\n && ./configure --prefix=/usr/local/bash-$BASH_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/bash-$BASH_VERSION ; done\nENV RUBY_VERSIONS=\"2.4.0  2.3.3  2.2.6  2.1.9\"\nRUN set -xe \\\n && for RUBY_VERSION in $RUBY_VERSIONS; do curl -fSsL \"https://cache.ruby-lang.org/pub/ruby/ruby-$RUBY_VERSION.tar.gz\" -o /tmp/ruby-$RUBY_VERSION.tar.gz ; done ; for RUBY_VERSION in $RUBY_VERSIONS; do mkdir /tmp/ruby-$RUBY_VERSION \\\n && tar -xf /tmp/ruby-$RUBY_VERSION.tar.gz -C /tmp/ruby-$RUBY_VERSION --strip-components=1 \\\n && rm /tmp/ruby-$RUBY_VERSION.tar.gz \\\n && cd /tmp/ruby-$RUBY_VERSION \\\n && ./configure --disable-install-doc --prefix=/usr/local/ruby-$RUBY_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/ruby-$RUBY_VERSION ; done\nENV PYTHON_VERSIONS=\"3.6.0  3.5.3  2.7.9  2.6.9\"\nRUN set -xe \\\n && for PYTHON_VERSION in $PYTHON_VERSIONS; do curl -fSsL \"https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz\" -o /tmp/python-$PYTHON_VERSION.tar.xz ; done ; for PYTHON_VERSION in $PYTHON_VERSIONS; do mkdir /tmp/python-$PYTHON_VERSION \\\n && tar -xf /tmp/python-$PYTHON_VERSION.tar.xz -C /tmp/python-$PYTHON_VERSION --strip-components=1 \\\n && rm /tmp/python-$PYTHON_VERSION.tar.xz \\\n && cd /tmp/python-$PYTHON_VERSION \\\n && ./configure --prefix=/usr/local/python-$PYTHON_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/python-$PYTHON_VERSION ; done\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nRUN set -xe \\\n && JAVA_8_DEBIAN_VERSION=8u131-b11-1~bpo8+1 \\\n && JAVA_7_DEBIAN_VERSION=7u151-2.6.11-1~deb8u1 \\\n && CA_CERTIFICATES_JAVA_VERSION=20161107~bpo8+1 \\\n && echo 'deb http://deb.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk=\"$JAVA_8_DEBIAN_VERSION\" openjdk-7-jdk=\"$JAVA_7_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y \\\n && update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java \\\n && update-alternatives --set javac /usr/lib/jvm/java-8-openjdk-amd64/bin/javac\nRUN set -xe \\\n && curl -fSsL \"https://github.com/AdoptOpenJDK/openjdk9-openj9-releases/releases/download/jdk-9%2B181/OpenJDK9-OPENJ9_x64_Linux_jdk-9.181.tar.gz\" -o /tmp/openjdk9-openj9.tar.gz \\\n && mkdir /usr/local/openjdk9-openj9 \\\n && tar -xf /tmp/openjdk9-openj9.tar.gz -C /usr/local/openjdk9-openj9 --strip-components=2 \\\n && rm /tmp/openjdk9-openj9.tar.gz\nRUN set -xe \\\n && curl -fSsL \"ftp://ftp.freepascal.org/fpc/dist/3.0.0/x86_64-linux/fpc-3.0.0.x86_64-linux.tar\" -o /tmp/fpc-3.0.0.tar \\\n && mkdir /tmp/fpc-3.0.0 \\\n && tar -xf /tmp/fpc-3.0.0.tar -C /tmp/fpc-3.0.0 --strip-components=1 \\\n && rm /tmp/fpc-3.0.0.tar \\\n && cd /tmp/fpc-3.0.0 \\\n && echo \"/usr/local/fpc-3.0.0\" | sh install.sh \\\n && rm -rf /tmp/fpc-3.0.0\nENV HASKELL_VERSIONS=\"8.2.1  8.0.2\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install libgmp-dev -y \\\n && for HASKELL_VERSION in $HASKELL_VERSIONS; do curl -fSsL \"http://downloads.haskell.org/~ghc/$HASKELL_VERSION/ghc-$HASKELL_VERSION-x86_64-deb8-linux.tar.xz\" -o /tmp/ghc-$HASKELL_VERSION.tar.xz ; done ; for HASKELL_VERSION in $HASKELL_VERSIONS; do mkdir /tmp/ghc-$HASKELL_VERSION \\\n && tar -xf /tmp/ghc-$HASKELL_VERSION.tar.xz -C /tmp/ghc-$HASKELL_VERSION --strip-components=1 \\\n && rm /tmp/ghc-$HASKELL_VERSION.tar.xz \\\n && cd /tmp/ghc-$HASKELL_VERSION \\\n && ./configure --prefix=/usr/local/ghc-$HASKELL_VERSION \\\n && make install \\\n && rm -rf /tmp/ghc-$HASKELL_VERSION ; done\nENV MONO_VERSIONS=\"5.4.0.167  5.2.0.224\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install cmake -y \\\n && for MONO_VERSION in $MONO_VERSIONS; do curl -fSsL \"https://download.mono-project.com/sources/mono/mono-$MONO_VERSION.tar.bz2\" -o /tmp/mono-$MONO_VERSION.tar.bz2 ; done ; for MONO_VERSION in $MONO_VERSIONS; do mkdir /tmp/mono-$MONO_VERSION \\\n && tar -xf /tmp/mono-$MONO_VERSION.tar.bz2 -C /tmp/mono-$MONO_VERSION --strip-components=1 \\\n && rm /tmp/mono-$MONO_VERSION.tar.bz2 \\\n && cd /tmp/mono-$MONO_VERSION \\\n && ./configure --prefix=/usr/local/mono-$MONO_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/mono-$MONO_VERSION ; done\nENV NODE_VERSIONS=\"8.5.0   7.10.1\"\nRUN set -xe \\\n && for NODE_VERSION in $NODE_VERSIONS; do curl -fSsL \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz\" -o /tmp/node-$NODE_VERSION.tar.gz ; done ; for NODE_VERSION in $NODE_VERSIONS; do mkdir /tmp/node-$NODE_VERSION \\\n && tar -xf /tmp/node-$NODE_VERSION.tar.gz -C /tmp/node-$NODE_VERSION --strip-components=1 \\\n && rm /tmp/node-$NODE_VERSION.tar.gz \\\n && cd /tmp/node-$NODE_VERSION \\\n && ./configure --prefix=/usr/local/node-$NODE_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/node-$NODE_VERSION ; done\nENV CLOJURE_VERSIONS=\"1.8.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for CLOJURE_VERSION in $CLOJURE_VERSIONS; do curl -fSsL \"https://repo1.maven.org/maven2/org/clojure/clojure/$CLOJURE_VERSION/clojure-$CLOJURE_VERSION.zip\" -o /tmp/clojure-$CLOJURE_VERSION.zip ; done ; for CLOJURE_VERSION in $CLOJURE_VERSIONS; do unzip -d /usr/local /tmp/clojure-$CLOJURE_VERSION.zip \\\n && chmod -R 755 /usr/local/clojure-$CLOJURE_VERSION \\\n && rm /tmp/clojure-$CLOJURE_VERSION.zip ; done\nENV ERLANG_VERSIONS=\"20.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for ERLANG_VERSION in $ERLANG_VERSIONS; do curl -fSsL \"https://github.com/erlang/otp/archive/OTP-$ERLANG_VERSION.tar.gz\" -o /tmp/erlang-$ERLANG_VERSION.tar.gz ; done ; for ERLANG_VERSION in $ERLANG_VERSIONS; do mkdir /tmp/erlang-$ERLANG_VERSION \\\n && tar -xf /tmp/erlang-$ERLANG_VERSION.tar.gz -C /tmp/erlang-$ERLANG_VERSION --strip-components=1 \\\n && rm /tmp/erlang-$ERLANG_VERSION.tar.gz \\\n && cd /tmp/erlang-$ERLANG_VERSION \\\n && ERL_TOP=$( pwd ;) ./otp_build autoconf \\\n && ERL_TOP=$( pwd ;) ./configure --prefix=/usr/local/erlang-$ERLANG_VERSION \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && rm -rf /tmp/erlang-$ERLANG_VERSION ; done\n#   set default Erlang version for Elixir\nRUN ln -s /usr/local/erlang-20.0/bin/erl /usr/local/bin/erl\nENV ELIXIR_VERSIONS=\"1.5.1\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install unzip -y \\\n && for ELIXIR_VERSION in $ELIXIR_VERSIONS; do curl -fSsL \"https://github.com/elixir-lang/elixir/releases/download/v$ELIXIR_VERSION/Precompiled.zip\" -o /tmp/elixir-$ELIXIR_VERSION.zip ; done ; for ELIXIR_VERSION in $ELIXIR_VERSIONS; do unzip -d /usr/local/elixir-$ELIXIR_VERSION /tmp/elixir-$ELIXIR_VERSION.zip \\\n && rm /tmp/elixir-$ELIXIR_VERSION.zip ; done\nENV RUST_VERSIONS=\"1.20.0\"\nRUN set -xe \\\n && for RUST_VERSION in $RUST_VERSIONS; do curl -fSsL \"https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz\" -o /tmp/rust-$RUST_VERSION.tar.gz ; done ; for RUST_VERSION in $RUST_VERSIONS; do mkdir /tmp/rust-$RUST_VERSION \\\n && tar -xf /tmp/rust-$RUST_VERSION.tar.gz -C /tmp/rust-$RUST_VERSION --strip-components=1 \\\n && rm /tmp/rust-$RUST_VERSION.tar.gz \\\n && cd /tmp/rust-$RUST_VERSION \\\n && ./install.sh --prefix=/usr/local/rust-$RUST_VERSION --components=rustc,rust-std-x86_64-unknown-linux-gnu \\\n && rm -rf /tmp/rust-$RUST_VERSION ; done\nENV GO_VERSIONS=\"1.9\"\nRUN set -xe \\\n && for GO_VERSION in $GO_VERSIONS; do curl -fSsL \"https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz\" -o /tmp/go-$GO_VERSION.tar.gz ; done ; for GO_VERSION in $GO_VERSIONS; do mkdir /usr/local/go-$GO_VERSION \\\n && tar -xf /tmp/go-$GO_VERSION.tar.gz -C /usr/local/go-$GO_VERSION --strip-components=1 \\\n && rm /tmp/go-$GO_VERSION.tar.gz ; done\nENV INSECT_VERSIONS=\"5.0.0\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install nodejs-legacy npm -y \\\n && for INSECT_VERSION in $INSECT_VERSIONS; do mkdir /usr/local/insect-$INSECT_VERSION \\\n && cd /usr/local/insect-$INSECT_VERSION \\\n && npm install insect@$INSECT_VERSION \\\n && echo \"#!/bin/bash\\ncat \\\"$1\\\" | /usr/local/insect-$INSECT_VERSION/node_modules/.bin/insect\" > /usr/local/insect-$INSECT_VERSION/insect \\\n && chmod +x /usr/local/insect-$INSECT_VERSION/insect ; done\nENV CRYSTAL_VERSIONS=\"0.23.1-3\"\nRUN set -xe \\\n && for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do curl -fSsL \"https://github.com/crystal-lang/crystal/releases/download/${CRYSTAL_VERSION%-*}/crystal-$CRYSTAL_VERSION-linux-x86_64.tar.gz\" -o /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done ; for CRYSTAL_VERSION in $CRYSTAL_VERSIONS; do mkdir /usr/local/crystal-$CRYSTAL_VERSION \\\n && tar -xf /tmp/crystal-$CRYSTAL_VERSION.tar.gz -C /usr/local/crystal-$CRYSTAL_VERSION --strip-components=1 \\\n && rm /tmp/crystal-$CRYSTAL_VERSION.tar.gz ; done\nENV FBC_VERSIONS=\"1.05.0 \"\nRUN set -xe \\\n && for FBC_VERSION in $FBC_VERSIONS; do curl -fSsL \"https://downloads.sourceforge.net/project/fbc/Binaries%20-%20Linux/FreeBASIC-$FBC_VERSION-linux-x86_64.tar.gz\" -o /tmp/fbc-$FBC_VERSION.tar.gz ; done ; for FBC_VERSION in $FBC_VERSIONS; do mkdir /usr/local/fbc-$FBC_VERSION \\\n && tar -xf /tmp/fbc-$FBC_VERSION.tar.gz -C /usr/local/fbc-$FBC_VERSION --strip-components=1 \\\n && rm /tmp/fbc-$FBC_VERSION.tar.gz ; done\nENV OCAML_VERSIONS=\"4.05.0\"\nRUN set -xe \\\n && for OCAML_VERSION in $OCAML_VERSIONS; do curl -fSsL \"https://github.com/ocaml/ocaml/archive/$OCAML_VERSION.tar.gz\" -o /tmp/ocaml-$OCAML_VERSION.tar.gz ; done ; for OCAML_VERSION in $OCAML_VERSIONS; do mkdir /tmp/ocaml-$OCAML_VERSION \\\n && tar -xf /tmp/ocaml-$OCAML_VERSION.tar.gz -C /tmp/ocaml-$OCAML_VERSION --strip-components=1 \\\n && rm /tmp/ocaml-$OCAML_VERSION.tar.gz \\\n && cd /tmp/ocaml-$OCAML_VERSION \\\n && ./configure -prefix /usr/local/ocaml-$OCAML_VERSION -no-ocamldoc -no-debugger -no-graph \\\n && make -j\"$( nproc ;)\" world.opt \\\n && make install \\\n && rm -rf /tmp/ocaml-$OCAML_VERSION ; done\nRUN set -xe \\\n && apt-get update \\\n && apt-get install locales -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nRUN set -xe \\\n && apt-get update \\\n && apt-get install libcap-dev -y \\\n && git clone https://github.com/ioi/isolate.git /tmp/isolate \\\n && cd /tmp/isolate \\\n && git checkout 18554e83793508acd1032d0cf4229a332c43085e \\\n && echo \"num_boxes = 2147483647\" >> default.cf \\\n && make install \\\n && rm -rf /tmp/isolate\nENV BOX_ROOT=\"/var/local/lib/isolate\"\nLABEL maintainer=\"Herman Zvonimir Došilović, hermanz.dosilovic@gmail.com\"\nLABEL version=\"0.3.0\"\n","originalDockerfileUglifiedHash":"45f1ba21293f2be21b3f63446b04e219","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8cec1b4caa51a889e439832f9e225f4493a175ad.dockerfile"}