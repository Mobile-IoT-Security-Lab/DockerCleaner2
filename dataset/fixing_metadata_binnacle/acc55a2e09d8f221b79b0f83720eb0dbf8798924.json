{"seed":167214428,"processedDockerfileHash":"3acc16f7b3fdc8a39a16d36c9f022813","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.6\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.13.6\nARG OPENSSL_VERSION=1.1.0g\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nARG NGINX_MODULES=\"  --with-http_ssl_module  --with-http_v2_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-file-aio  --with-threads  --with-pcre-jit  --without-http_ssi_module  --without-http_scgi_module  --without-http_uwsgi_module  --without-http_geo_module  --without-http_autoindex_module  --without-http_split_clients_module  --without-http_memcached_module  --without-http_empty_gif_module  --without-http_browser_module\"\nARG NGINX_3RD_PARTY_MODULES=\"  --add-module=/tmp/headers-more-nginx-module  --add-module=/tmp/ngx_brotli  --add-module=/tmp/nginx-ct\"\nRUN NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && apk -U upgrade \\\n && apk add pcre=8.41-r0 curl=7.61.1-r2 zlib=1.2.11-r0 libgcc=6.3.0-r4 libstdc++=6.3.0-r4 jemalloc=4.5.0-r0 su-exec=0.2-r0 s6=2.5.1.0-r0 jq=1.5-r4 libressl=2.5.5-r2 bind-tools=9.11.6_p1-r1 ${BUILD_DEPS} \\\n && apk add build-base=0.5-r0 linux-headers=4.4.6-r2 ca-certificates=20161130-r3 automake=1.15.1-r0 autoconf=2.69-r0 git=2.13.7-r2 go=1.8.4-r0 jemalloc-dev=4.5.0-r0 tar=1.32-r0 libtool=2.4.6-r1 pcre-dev=8.41-r0 zlib-dev=1.2.11-r0 binutils=2.30-r1 gnupg=2.1.20-r1 cmake=3.8.1-r0 go=1.8.4-r0 -t build-dependencies \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && mkdir brotli/c/tools/.deps \\\n && touch brotli/c/tools/.deps/brotli-brotli.Po \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd /tmp \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && git clone https://github.com/grahamedgecombe/nginx-ct --depth=1 \\\n && OPENSSL_TARBALL=\"openssl-${OPENSSL_VERSION}.tar.gz\" \\\n && wget -q https://www.openssl.org/source/${OPENSSL_TARBALL} \\\n && tar xzf ${OPENSSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/cujanovic/nginx-dynamic-tls-records-patch/master/nginx__dynamic_tls_records_1.13.0%2B.patch -O dynamic_records.patch \\\n && patch -p1 < dynamic_records.patch \\\n && ./configure --prefix=/nginx --sbin-path=/usr/local/sbin/nginx --with-cc-opt=\"-O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -Wno-deprecated-declarations\" --with-ld-opt=\"-lrt -ljemalloc -Wl,-Bsymbolic-functions -Wl,-z,relro\" --with-openssl-opt='no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2' --with-openssl=/tmp/openssl-${OPENSSL_VERSION} --http-log-path=/nginx/log/nginx_access.log --error-log-path=/nginx/log/nginx_error.log --pid-path=/nginx/run/nginx.pid --lock-path=/nginx/run/nginx.lock --user=reverse --group=reverse ${NGINX_MODULES} ${NGINX_3RD_PARTY_MODULES} \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/local/sbin/nginx \\\n && mkdir -p /tmp/go/bin \\\n && export GOPATH=/tmp/go \\\n && export GOBIN=$GOPATH/bin \\\n && git config --global http.https://gopkg.in.followRedirects true \\\n && go get github.com/xenolf/lego \\\n && mv /tmp/go/bin/lego /usr/local/bin/lego \\\n && go get github.com/grahamedgecombe/ct-submit \\\n && mv /tmp/go/bin/ct-submit /usr/local/bin/ct-submit \\\n && apk del build-dependencies \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY rootfs /\nRUN chmod +x /usr/local/bin/startup /etc/s6.d/*/*\nEXPOSE 8000/tcp 8443/tcp\nENTRYPOINT [\"/usr/local/bin/startup\"]\nCMD [\"/bin/s6-svscan\", \"/etc/s6.d\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.6\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.13.6\nARG OPENSSL_VERSION=1.1.0g\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nARG NGINX_MODULES=\"  --with-http_ssl_module  --with-http_v2_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-file-aio  --with-threads  --with-pcre-jit  --without-http_ssi_module  --without-http_scgi_module  --without-http_uwsgi_module  --without-http_geo_module  --without-http_autoindex_module  --without-http_split_clients_module  --without-http_memcached_module  --without-http_empty_gif_module  --without-http_browser_module\"\nARG NGINX_3RD_PARTY_MODULES=\"  --add-module=/tmp/headers-more-nginx-module  --add-module=/tmp/ngx_brotli  --add-module=/tmp/nginx-ct\"\nRUN NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && apk -U upgrade \\\n && apk add ${BUILD_DEPS} pcre curl zlib libgcc libstdc++ jemalloc su-exec s6 jq libressl bind-tools \\\n && apk add -t build-dependencies build-base linux-headers ca-certificates automake autoconf git go jemalloc-dev tar libtool pcre-dev zlib-dev binutils gnupg cmake go \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && mkdir brotli/c/tools/.deps \\\n && touch brotli/c/tools/.deps/brotli-brotli.Po \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd /tmp \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && git clone https://github.com/grahamedgecombe/nginx-ct --depth=1 \\\n && OPENSSL_TARBALL=\"openssl-${OPENSSL_VERSION}.tar.gz\" \\\n && wget -q https://www.openssl.org/source/${OPENSSL_TARBALL} \\\n && tar xzf ${OPENSSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/cujanovic/nginx-dynamic-tls-records-patch/master/nginx__dynamic_tls_records_1.13.0%2B.patch -O dynamic_records.patch \\\n && patch -p1 < dynamic_records.patch \\\n && ./configure --prefix=/nginx --sbin-path=/usr/local/sbin/nginx --with-cc-opt=\"-O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -Wno-deprecated-declarations\" --with-ld-opt=\"-lrt -ljemalloc -Wl,-Bsymbolic-functions -Wl,-z,relro\" --with-openssl-opt='no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2' --with-openssl=/tmp/openssl-${OPENSSL_VERSION} --http-log-path=/nginx/log/nginx_access.log --error-log-path=/nginx/log/nginx_error.log --pid-path=/nginx/run/nginx.pid --lock-path=/nginx/run/nginx.lock --user=reverse --group=reverse ${NGINX_MODULES} ${NGINX_3RD_PARTY_MODULES} \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/local/sbin/nginx \\\n && mkdir -p /tmp/go/bin \\\n && export GOPATH=/tmp/go \\\n && export GOBIN=$GOPATH/bin \\\n && git config --global http.https://gopkg.in.followRedirects true \\\n && go get github.com/xenolf/lego \\\n && mv /tmp/go/bin/lego /usr/local/bin/lego \\\n && go get github.com/grahamedgecombe/ct-submit \\\n && mv /tmp/go/bin/ct-submit /usr/local/bin/ct-submit \\\n && apk del build-dependencies \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY rootfs /\nRUN chmod +x /usr/local/bin/startup /etc/s6.d/*/*\nEXPOSE 8000/tcp 8443/tcp\nENTRYPOINT [\"/usr/local/bin/startup\"]\nCMD [\"/bin/s6-svscan\", \"/etc/s6.d\"]\n","injectedSmells":[],"originalDockerfileHash":"d2e3ddf190957542e60c3e7909f77d5c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.6\nENV UID=\"991\" \\\n    GID=\"991\"\nARG NGINX_VERSION=1.13.6\nARG OPENSSL_VERSION=1.1.0g\nARG GPG_NGINX=\"B0F4 2533 73F8 F6F5 10D4  2178 520A 9993 A1C0 52F8\"\nARG BUILD_CORES\nARG NGINX_MODULES=\"  --with-http_ssl_module  --with-http_v2_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-file-aio  --with-threads  --with-pcre-jit  --without-http_ssi_module  --without-http_scgi_module  --without-http_uwsgi_module  --without-http_geo_module  --without-http_autoindex_module  --without-http_split_clients_module  --without-http_memcached_module  --without-http_empty_gif_module  --without-http_browser_module\"\nARG NGINX_3RD_PARTY_MODULES=\"  --add-module=/tmp/headers-more-nginx-module  --add-module=/tmp/ngx_brotli  --add-module=/tmp/nginx-ct\"\nRUN NB_CORES=${BUILD_CORES-$( getconf _NPROCESSORS_CONF ;)} \\\n && apk -U upgrade \\\n && apk add ${BUILD_DEPS} pcre curl zlib libgcc libstdc++ jemalloc su-exec s6 jq libressl bind-tools \\\n && apk add -t build-dependencies build-base linux-headers ca-certificates automake autoconf git go jemalloc-dev tar libtool pcre-dev zlib-dev binutils gnupg cmake go \\\n && cd /tmp \\\n && git clone https://github.com/bagder/libbrotli --depth=1 \\\n && cd libbrotli \\\n && ./autogen.sh \\\n && ./configure \\\n && mkdir brotli/c/tools/.deps \\\n && touch brotli/c/tools/.deps/brotli-brotli.Po \\\n && make -j ${NB_CORES} \\\n && make install \\\n && cd /tmp \\\n && git clone https://github.com/google/ngx_brotli --depth=1 \\\n && cd ngx_brotli \\\n && git submodule update --init \\\n && cd /tmp \\\n && git clone https://github.com/openresty/headers-more-nginx-module --depth=1 \\\n && git clone https://github.com/grahamedgecombe/nginx-ct --depth=1 \\\n && OPENSSL_TARBALL=\"openssl-${OPENSSL_VERSION}.tar.gz\" \\\n && wget -q https://www.openssl.org/source/${OPENSSL_TARBALL} \\\n && tar xzf ${OPENSSL_TARBALL} \\\n && NGINX_TARBALL=\"nginx-${NGINX_VERSION}.tar.gz\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL} \\\n && echo \"Verifying ${NGINX_TARBALL} using GPG...\" \\\n && wget -q https://nginx.org/download/${NGINX_TARBALL}.asc \\\n && wget -q https://nginx.org/keys/mdounin.key \\\n && gpg --import mdounin.key \\\n && FINGERPRINT=\"$( LANG=C gpg --verify ${NGINX_TARBALL}.asc ${NGINX_TARBALL} 2>&1 | sed -n \"s#Primary key fingerprint: \\(.*\\)#\\1#p\" ;)\" \\\n && if [ -z \"${FINGERPRINT}\" ] ; then echo \"Warning! Invalid GPG signature!\" \\\n && exit 1 ; fi \\\n && if [ \"${FINGERPRINT}\" != \"${GPG_NGINX}\" ] ; then echo \"Warning! Wrong GPG fingerprint!\" \\\n && exit 1 ; fi \\\n && echo \"All seems good, now unpacking ${NGINX_TARBALL}...\" \\\n && tar xzf ${NGINX_TARBALL} \\\n && cd nginx-${NGINX_VERSION} \\\n && wget -q https://raw.githubusercontent.com/cujanovic/nginx-dynamic-tls-records-patch/master/nginx__dynamic_tls_records_1.13.0%2B.patch -O dynamic_records.patch \\\n && patch -p1 < dynamic_records.patch \\\n && ./configure --prefix=/nginx --sbin-path=/usr/local/sbin/nginx --with-cc-opt=\"-O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -Wno-deprecated-declarations\" --with-ld-opt=\"-lrt -ljemalloc -Wl,-Bsymbolic-functions -Wl,-z,relro\" --with-openssl-opt='no-async enable-ec_nistp_64_gcc_128 no-shared no-ssl2 no-ssl3 no-comp no-idea no-weak-ssl-ciphers -DOPENSSL_NO_HEARTBEATS -O3 -fPIE -fstack-protector-strong -D_FORTIFY_SOURCE=2' --with-openssl=/tmp/openssl-${OPENSSL_VERSION} --http-log-path=/nginx/log/nginx_access.log --error-log-path=/nginx/log/nginx_error.log --pid-path=/nginx/run/nginx.pid --lock-path=/nginx/run/nginx.lock --user=reverse --group=reverse ${NGINX_MODULES} ${NGINX_3RD_PARTY_MODULES} \\\n && make -j ${NB_CORES} \\\n && make install \\\n && make clean \\\n && strip -s /usr/local/sbin/nginx \\\n && mkdir -p /tmp/go/bin \\\n && export GOPATH=/tmp/go \\\n && export GOBIN=$GOPATH/bin \\\n && git config --global http.https://gopkg.in.followRedirects true \\\n && go get github.com/xenolf/lego \\\n && mv /tmp/go/bin/lego /usr/local/bin/lego \\\n && go get github.com/grahamedgecombe/ct-submit \\\n && mv /tmp/go/bin/ct-submit /usr/local/bin/ct-submit \\\n && apk del build-dependencies \\\n && rm -rf /tmp/* /var/cache/apk/* /root/.gnupg\nCOPY rootfs /\nRUN chmod +x /usr/local/bin/startup /etc/s6.d/*/*\nEXPOSE 8000/tcp 8443/tcp\nENTRYPOINT [\"/usr/local/bin/startup\"]\nCMD [\"/bin/s6-svscan\", \"/etc/s6.d\"]\n","originalDockerfileUglifiedHash":"d2e3ddf190957542e60c3e7909f77d5c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/acc55a2e09d8f221b79b0f83720eb0dbf8798924.dockerfile"}