{"seed":2978318682,"processedDockerfileHash":"408b6c2dd058f0f44be410cfbd39ba06","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile has been adapted from the original work here\n#   https://github.com/gpuopenanalytics/pygdf\n#   An integration test & dev container which builds and installs libgdf & pygdf from master\nFROM nvidia/cuda-ppc64le:9.2-cudnn7-devel-ubuntu16.04\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG NUMBA_VERSION=0.40.0\nARG NUMPY_VERSION=1.14.5\n#   Locked to Pandas 0.20.3 by https://github.com/gpuopenanalytics/pygdf/issues/118\nARG PANDAS_VERSION=0.20.3\nARG LIBGDF_REPO=https://github.com/gpuopenanalytics/libgdf\nARG HASH_JOIN=ON\nARG ARROW_REPO=https://github.com/apache/arrow.git\nARG PYGDF_REPO=https://github.com/gpuopenanalytics/pygdf\n#   Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV ARROW_BUILD_TYPE=\"release\"\nENV ARROW_HOME=\"/repos/dist\"\nENV LD_LIBRARY_PATH=\"/repos/dist/lib:$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\n#   Install conda\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-ppc64le.sh\nRUN sh /miniconda.sh -b -p /conda \\\n && /conda/bin/conda update -n base conda\n#   Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends git libboost-all-dev libffi-dev gfortran libjemalloc-dev flex bison pkg-config autoconf gcc-${CC_VERSION} g++-${CXX_VERSION} -y \\\n && conda create -n gdf python=${PYTHON_VERSION} \\\n && conda install -n gdf -y -c numba -c conda-forge -c defaults numba=${NUMBA_VERSION} numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} cmake cython pytest \\\n && git clone --recurse-submodules ${LIBGDF_REPO} -b v0.1.0a3 /libgdf \\\n && source activate gdf \\\n && mkdir -p /libgdf/build \\\n && cd /libgdf/ \\\n && cd build \\\n && cmake .. \\\n && cmake .. -DHASH_JOIN=${HASH_JOIN} \\\n && make -j install \\\n && make copy_python \\\n && python setup.py install \\\n && mkdir -p /repos \\\n && git clone --recurse-submodules ${ARROW_REPO} /repos/arrow \\\n && mkdir -p /repos/dist \\\n && source activate gdf \\\n && mkdir -p /repos/arrow/cpp/build \\\n && cd /repos/arrow/cpp/build \\\n && cmake -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DARROW_BUILD_TESTS=OFF .. \\\n && make -j4 \\\n && make install \\\n && source activate gdf \\\n && cd /repos/arrow/python \\\n && python setup.py build_ext --build-type=$ARROW_BUILD_TYPE --inplace \\\n && python setup.py install \\\n && git clone --recurse-submodules ${PYGDF_REPO} -b v0.1.0a3 /pygdf \\\n && source activate gdf \\\n && cd /pygdf \\\n && python setup.py install \\\n && apt-get remove -y git libffi-dev libjemalloc-dev flex bison pkg-config \\\n && apt-get autoremove -y\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile has been adapted from the original work here\n#  https://github.com/gpuopenanalytics/pygdf\n#  An integration test & dev container which builds and installs libgdf & pygdf from master\nFROM nvidia/cuda-ppc64le:9.2-cudnn7-devel-ubuntu16.04\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG NUMBA_VERSION=0.40.0\nARG NUMPY_VERSION=1.14.5\n#  Locked to Pandas 0.20.3 by https://github.com/gpuopenanalytics/pygdf/issues/118\nARG PANDAS_VERSION=0.20.3\nARG LIBGDF_REPO=https://github.com/gpuopenanalytics/libgdf\nARG HASH_JOIN=ON\nARG ARROW_REPO=https://github.com/apache/arrow.git\nARG PYGDF_REPO=https://github.com/gpuopenanalytics/pygdf\n#  Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV ARROW_BUILD_TYPE=\"release\"\nENV ARROW_HOME=\"/repos/dist\"\nENV LD_LIBRARY_PATH=\"/repos/dist/lib:$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\n#  Install conda\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-ppc64le.sh /miniconda.sh\nRUN sh /miniconda.sh -b -p /conda \\\n && /conda/bin/conda update -n base conda\n#  Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install -y git gcc-${CC_VERSION} g++-${CXX_VERSION} libboost-all-dev libffi-dev gfortran libjemalloc-dev flex bison pkg-config autoconf \\\n && conda create -n gdf python=${PYTHON_VERSION} \\\n && conda install -n gdf -y -c numba -c conda-forge -c defaults numba=${NUMBA_VERSION} numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} cmake cython pytest \\\n && git clone --recurse-submodules ${LIBGDF_REPO} -b v0.1.0a3 /libgdf \\\n && source activate gdf \\\n && mkdir -p /libgdf/build \\\n && cd /libgdf/ \\\n && cd build \\\n && cmake .. \\\n && cmake .. -DHASH_JOIN=${HASH_JOIN} \\\n && make -j install \\\n && make copy_python \\\n && python setup.py install \\\n && mkdir -p /repos \\\n && git clone --recurse-submodules ${ARROW_REPO} /repos/arrow \\\n && mkdir -p /repos/dist \\\n && source activate gdf \\\n && mkdir -p /repos/arrow/cpp/build \\\n && cd /repos/arrow/cpp/build \\\n && cmake -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DARROW_BUILD_TESTS=OFF .. \\\n && make -j4 \\\n && make install \\\n && source activate gdf \\\n && cd /repos/arrow/python \\\n && python setup.py build_ext --build-type=$ARROW_BUILD_TYPE --inplace \\\n && python setup.py install \\\n && git clone --recurse-submodules ${PYGDF_REPO} -b v0.1.0a3 /pygdf \\\n && source activate gdf \\\n && cd /pygdf \\\n && python setup.py install \\\n && apt-get remove -y git libffi-dev libjemalloc-dev flex bison pkg-config \\\n && apt-get autoremove -y\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"a9389d794ff2dd98b7dd746cb185895a","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile has been adapted from the original work here\n#   https://github.com/gpuopenanalytics/pygdf\n#   An integration test & dev container which builds and installs libgdf & pygdf from master\nFROM nvidia/cuda-ppc64le:9.2-cudnn7-devel-ubuntu16.04\nMAINTAINER \"Priya Seth <sethp@us.ibm.com>\"\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG NUMBA_VERSION=0.40.0\nARG NUMPY_VERSION=1.14.5\n#   Locked to Pandas 0.20.3 by https://github.com/gpuopenanalytics/pygdf/issues/118\nARG PANDAS_VERSION=0.20.3\nARG LIBGDF_REPO=https://github.com/gpuopenanalytics/libgdf\nARG HASH_JOIN=ON\nARG ARROW_REPO=https://github.com/apache/arrow.git\nARG PYGDF_REPO=https://github.com/gpuopenanalytics/pygdf\n#   Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV ARROW_BUILD_TYPE=\"release\"\nENV ARROW_HOME=\"/repos/dist\"\nENV LD_LIBRARY_PATH=\"/repos/dist/lib:$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\n#   Install conda\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-ppc64le.sh /miniconda.sh\nRUN sh /miniconda.sh -b -p /conda \\\n && /conda/bin/conda update -n base conda\n#   Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install git libboost-all-dev libffi-dev gfortran libjemalloc-dev flex bison pkg-config autoconf gcc-${CC_VERSION} g++-${CXX_VERSION} -y \\\n && conda create -n gdf python=${PYTHON_VERSION} \\\n && conda install -n gdf -y -c numba -c conda-forge -c defaults numba=${NUMBA_VERSION} numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} cmake cython pytest \\\n && git clone --recurse-submodules ${LIBGDF_REPO} -b v0.1.0a3 /libgdf \\\n && source activate gdf \\\n && mkdir -p /libgdf/build \\\n && cd /libgdf/ \\\n && cd build \\\n && cmake .. \\\n && cmake .. -DHASH_JOIN=${HASH_JOIN} \\\n && make -j install \\\n && make copy_python \\\n && python setup.py install \\\n && mkdir -p /repos \\\n && git clone --recurse-submodules ${ARROW_REPO} /repos/arrow \\\n && mkdir -p /repos/dist \\\n && source activate gdf \\\n && mkdir -p /repos/arrow/cpp/build \\\n && cd /repos/arrow/cpp/build \\\n && cmake -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_PYTHON=on -DARROW_BUILD_TESTS=OFF .. \\\n && make -j4 \\\n && make install \\\n && source activate gdf \\\n && cd /repos/arrow/python \\\n && python setup.py build_ext --build-type=$ARROW_BUILD_TYPE --inplace \\\n && python setup.py install \\\n && git clone --recurse-submodules ${PYGDF_REPO} -b v0.1.0a3 /pygdf \\\n && source activate gdf \\\n && cd /pygdf \\\n && python setup.py install \\\n && apt-get remove -y git libffi-dev libjemalloc-dev flex bison pkg-config \\\n && apt-get autoremove -y\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"b14da042ba9649399e0735292e44e161","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/23e1b28015301762f5f3bf32bca333df9ed2d81b.dockerfile"}