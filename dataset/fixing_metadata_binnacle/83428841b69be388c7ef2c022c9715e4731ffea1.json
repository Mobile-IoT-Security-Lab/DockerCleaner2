{"seed":1903859301,"processedDockerfileHash":"b95560b1ada989806b70b86481ec2440","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 The SAF Authors. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   Dokerfile for building SAF with OpenVINO (CVSDK)\n#\n#     Usage: sudo docker build -f Dockerfile . -t saf \\\n#                              --build-arg USE_VDMS=ON \\\n#                              --build-arg GITHUB_TOKEN=<OAuth-string> \\\n#                              --build-arg GITHUB_URL=<GitHub-URL>\n#                              --build-arg SAF_HASH=<commit-id>\n#\n#     When building under within VPN, add the following to your build command:\n#       --build-arg http_proxy=<protocol>://<hostname>:<port>\n#       --build-arg https_proxy=<protocol>://<hostname>:<port>\n#\n#     To run, use `docker run -it saf`\n#              or `sudo docker run -it --device /dev/dri:/dev/dri saf`\n#\n#     Prebuilt Docker images are available upon requests.\nFROM ubuntu:16.04\nMAINTAINER Shao-Wen Yang <shao-wen.yang@intel.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nARG DEFAULT_WORKDIR=/vcs\nARG USE_VDMS=OFF\nARG GITHUB_URL=github.com/viscloud/saf.git\nARG GITHUB_TOKEN\nARG SAF_HASH\n#   Prepare toolchain\nRUN apt-get update \\\n && apt-get install --no-install-recommends dialog=1.3-20160209-1 apt-utils=1.2.35 --yes\nRUN apt-get install --no-install-recommends build-essential=12.1ubuntu2 --yes\nRUN apt-get install --no-install-recommends pkg-config=0.29.1-0ubuntu1 --yes\nRUN apt-get install --no-install-recommends g++=4:5.3.1-1ubuntu1 wget=1.17.1-1ubuntu1.5 cmake=3.5.1-1ubuntu3 git=1:2.7.4-0ubuntu1.10 vim=2:7.4.1689-3ubuntu1.5 --yes\nRUN apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 --yes\nRUN apt-get install --no-install-recommends autoconf=2.69-9 automake=1:1.15-4ubuntu1 libtool=2.4.6-0.1 --yes\nRUN apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 unzip=6.0-20ubuntu1.1 --yes\nRUN apt-get install --no-install-recommends libavcodec-dev:amd64 libavformat-dev:amd64 libswscale-dev:amd64 libtbb2:amd64 libtbb-dev:amd64 libjpeg-dev:amd64 libpng12-dev:amd64 libjasper-dev=1.900.1-debian1-2.4ubuntu1.3 libdc1394-22-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libeigen3-dev=3.3~beta1-2 --yes\nRUN apt-get install --no-install-recommends libboost-all-dev=1.58.0.1ubuntu1 --yes\nRUN apt-get install --no-install-recommends libgstreamer1.0-dev=1.8.3-1~ubuntu0.1 libgstreamer-plugins-base1.0-dev=1.8.3-1ubuntu0.3 libgstreamer-plugins-good1.0-dev=1.8.3-1ubuntu0.5 libgstreamer-plugins-bad1.0-dev=1.8.3-1ubuntu0.2 gstreamer1.0:amd64 --yes\nRUN apt-get install --no-install-recommends python-scipy=0.17.0-1 python-numpy=1:1.11.0-1ubuntu1 python-yaml=3.11-3build1 --yes\nRUN apt-get install --no-install-recommends libleveldb-dev:amd64 libsnappy-dev:amd64 libhdf5-serial-dev=1.8.16+docs-4ubuntu1.1 libgflags-dev=2.1.2-3 libgoogle-glog-dev=0.3.4-0.1 liblmdb-dev:amd64 libjemalloc-dev=3.6.0-9ubuntu1 libzmq3-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libblas-dev=3.6.0-2ubuntu2 --yes\nRUN apt-get install --no-install-recommends libgtk2.0-dev=2.24.30-1ubuntu1.16.04.2 --yes\nRUN apt-get install --no-install-recommends libcpprest-dev=2.8.0-2 --yes\nRUN apt-get install --no-install-recommends libopenblas-dev=0.2.18-1ubuntu1 --yes\nRUN apt-get install --no-install-recommends alien=8.95 clinfo=2.1.16.01.12-1 opencl-headers=2.0~svn32091-2 --yes\nRUN apt-get install --no-install-recommends libjsoncpp-dev=1.7.2-1 --yes\n#   Prepare the environment\nRUN mkdir -p $DEFAULT_WORKDIR\nENV PATH=\"${PATH}:/usr/local/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\n#   OpenVINO (CVSDK)\nWORKDIR $DEFAULT_WORKDIR\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/13131/l_openvino_toolkit_p_2018.1.265.tgz\nRUN tar zxvf l_openvino_toolkit_p_2018.1.265.tgz \\\n && cd l_openvino_toolkit_p_2018.1.265 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && ./install.sh -s silent.cfg\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/intel/opencl\"\nRUN apt-get install --no-install-recommends lsb-release=9.20160110ubuntu0.2 --yes\nRUN /bin/bash -c \"source /opt/intel/computer_vision_sdk/bin/setupvars.sh\"\nENV PATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/opt/intel/computer_vision_sdk/opencv/share/OpenCV/3rdparty/lib:/opt/intel/computer_vision_sdk/opencv/lib:/opt/intel/opencl:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/cldnn/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/lib/ubuntu_16.04/intel64:/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer/model_optimizer_caffe/bin:/opt/intel/computer_vision_sdk/openvx/lib::/opt/intel/opencl\"\nENV PYTHONPATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PYTHONPATH}\"\nENV OpenCV_DIR=\"/opt/intel/computer_vision_sdk/opencv/share/OpenCV\"\nRUN cd /opt/intel/computer_vision_sdk/install_dependencies \\\n && ./install_NEO_OCL_driver.sh\nRUN cd /opt/intel/computer_vision_sdk/deployment_tools/inference_engine/samples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make cpu_extension -j4\nWORKDIR $DEFAULT_WORKDIR\nRUN rm -rf l_openvino_toolkit_p_2018.1.265 l_openvino_toolkit_p_2018.1.265.tgz\n#   Protobuf\nWORKDIR $DEFAULT_WORKDIR\nRUN git clone https://github.com/google/protobuf.git\nRUN cd protobuf \\\n && git reset --hard 072431452a365450c607e9503f51786be44ecf7f \\\n && ./autogen.sh \\\n && ./configure --disable-shared --with-pic \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf\n#   VDMS\nWORKDIR $DEFAULT_WORKDIR\nRUN if [ ON = \"$USE_VDMS\" ] ; then apt-get install --no-install-recommends scons=2.4.1-1 flex=2.6.0-11 --yes \\\n && apt-get install --no-install-recommends javacc=5.0-5 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 --yes \\\n && apt-get install --no-install-recommends bison=2:3.0.4.dfsg-1 libbison-dev=2:3.0.4.dfsg-1 --yes \\\n && apt-get install --no-install-recommends zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 --yes \\\n && apt-get install --no-install-recommends libbz2-dev=1.0.6-8ubuntu0.2 --yes \\\n && apt-get install --no-install-recommends libssl-dev=1.0.2g-1ubuntu4.20 --yes \\\n && apt-get install --no-install-recommends liblz4-dev=0.0~r131-2ubuntu2 --yes \\\n && apt-get install --no-install-recommends mpich=3.2-6build1 --yes \\\n && apt-get install --no-install-recommends libopenmpi-dev=1.10.2-8ubuntu1 --yes \\\n && apt-get install --no-install-recommends libgtest-dev=1.7.0-4ubuntu1 ed=1.10-2 --yes \\\n && apt-get install --no-install-recommends libtbb2=4.4~20151115-0ubuntu3 libtbb-dev=4.4~20151115-0ubuntu3 --yes \\\n && apt-get install --no-install-recommends libdc1394-22-dev=2.2.4-1 --yes \\\n && git clone https://github.com/Blosc/c-blosc.git \\\n && cd $DEFAULT_WORKDIR/c-blosc \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && cmake --build . \\\n && ctest \\\n && cmake --build . --target install \\\n && cd ../.. \\\n && rm -rf c-blosc \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/facebook/zstd/archive/v1.1.0.tar.gz \\\n && tar xf v1.1.0.tar.gz \\\n && cd zstd-1.1.0 \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -f v1.1.0.tar.gz \\\n && rm -rf zstd-1.1.0 \\\n && cd /usr/src/gtest \\\n && cmake . \\\n && make -j4 \\\n && mv libgtest* /usr/local/lib/ \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/TileDB-Inc/TileDB/archive/0.6.1.tar.gz \\\n && tar xf 0.6.1.tar.gz \\\n && cd TileDB-0.6.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j4 \\\n && make install \\\n && cd ../.. \\\n && rm -f 0.6.1.tar.gz \\\n && rm -rf TileDB-0.6.1 \\\n && git clone https://github.com/tristanpenman/valijson.git \\\n && cd $DEFAULT_WORKDIR/valijson \\\n && cp -r include/* /usr/local/include \\\n && cd .. \\\n && rm -rf valijson \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vcl/archive/v0.1.0.tar.gz \\\n && tar xf v0.1.0.tar.gz \\\n && mv vcl-0.1.0 vcl \\\n && cd vcl \\\n && sed -i \"s/\\(CPPPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\'\\2/g\" SConstruct \\\n && sed -i \"s/\\(LIBPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\'\\2/g\" SConstruct \\\n && scons -j4 \\\n && cd .. \\\n && rm -f v0.1.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/pmgd/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv pmgd-1.0.0 pmgd \\\n && cd pmgd \\\n && make -j4 \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vdms/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv vdms-1.0.0 vdms \\\n && cd vdms \\\n && sed -i \"s/CPPPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\',/g\" SConstruct \\\n && sed -i \"s/LIBPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\',/g\" SConstruct \\\n && sed -i \"s/LIBS\\s*.*\\[/&\\'opencv_core\\',\\'opencv_imgproc\\',\\'opencv_imgcodecs\\',/g\" SConstruct \\\n && mkdir db \\\n && scons -j4 INTEL_PATH=$DEFAULT_WORKDIR \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz ; fi\n#   SAF\nWORKDIR $DEFAULT_WORKDIR\nENV no_proxy=\"\\\"github.intel.com localhost\\\"\"\nRUN if [ ! -z \"$GITHUB_TOKEN\" ] ; then git clone https://$GITHUB_TOKEN@$GITHUB_URL saf ; else git clone https://$GITHUB_URL saf ; fi\nRUN cd saf \\\n && if [ ! -z \"$SAF_HASH\" ] ; then git reset --hard $SAF_HASH ; fi \\\n && if [ ON = \"$USE_VDMS\" ] ; then mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON -DUSE_VDMS=ON -DVDMS_HOME=$DEFAULT_WORKDIR/vdms .. ; else mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON .. ; fi \\\n && make -j4 \\\n && make apps -j4 \\\n && make install_python\n#   Set up SAF \nWORKDIR $DEFAULT_WORKDIR/saf/config\nRUN cp config.toml.example config.toml \\\n && cp cameras.toml.example cameras.toml \\\n && cp models.toml.example models.toml \\\n && echo \"\\n[[model]]\\nname = \\\"person-detection-retail-0012\\\"\\ntype = \\\"cvsdk\\\"\\ndesc_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.xml\\\"\\nparams_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.bin\\\"\\ninput_width = 96\\ninput_height = 112\\nlabel_file = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\\\"\" >> models.toml \\\n && echo \"person\" >> /opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\n#   Prepare sample scripts\nWORKDIR $DEFAULT_WORKDIR/saf\nRUN echo \"#!/bin/sh\\nbuild/apps/simple --camera GST_TEST\" > run_simple.sh \\\n && chmod +x run_simple.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/detector -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_detector.sh \\\n && chmod +x run_detector.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/tracker -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --detector_idle_duration 0.1 --tracker_type kf --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_tracker.sh \\\n && chmod +x run_tracker.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/visualizer --sender_endpoint \\\"kafka://$HOST:9092\\\" -c $CAMERA\" > run_visualizer.sh \\\n && chmod +x run_visualizer.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/writer --sender_endpoint \\\"kafka://$HOST:9092\\\" --write_target file --write_uri sample.csv -c $CAMERA\" > run_writer.sh \\\n && chmod +x run_writer.sh\n#   Install OpenCV-Python for better Python support\nRUN apt-get install --no-install-recommends python-pip=8.1.1-2ubuntu0.6 --yes \\\n && pip install opencv-python==4.7.0.72\n#   Resolve ProtoBuf version conflict\n#   In this script, ProtoBuf3 is linked against statically.\n#   The following removes ProtoBuf3 shared libraries.\n#   Do NOT EVER do the following on your native setup.\nRUN rm -f /usr/lib/x86_64-linux-gnu/libprotobuf*\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR $DEFAULT_WORKDIR/saf\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 The SAF Authors. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  Dokerfile for building SAF with OpenVINO (CVSDK)\n#\n#    Usage: sudo docker build -f Dockerfile . -t saf \\\n#                             --build-arg USE_VDMS=ON \\\n#                             --build-arg GITHUB_TOKEN=<OAuth-string> \\\n#                             --build-arg GITHUB_URL=<GitHub-URL>\n#                             --build-arg SAF_HASH=<commit-id>\n#\n#    When building under within VPN, add the following to your build command:\n#      --build-arg http_proxy=<protocol>://<hostname>:<port>\n#      --build-arg https_proxy=<protocol>://<hostname>:<port>\n#\n#    To run, use `docker run -it saf`\n#             or `sudo docker run -it --device /dev/dri:/dev/dri saf`\n#\n#    Prebuilt Docker images are available upon requests.\nFROM ubuntu:16.04\nMAINTAINER Shao-Wen Yang <shao-wen.yang@intel.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nARG DEFAULT_WORKDIR=/vcs\nARG USE_VDMS=OFF\nARG GITHUB_URL=github.com/viscloud/saf.git\nARG GITHUB_TOKEN\nARG SAF_HASH\n#  Prepare toolchain\nRUN apt-get update \\\n && apt-get install --no-install-recommends dialog apt-utils --yes\nRUN apt-get install --no-install-recommends build-essential --yes\nRUN apt-get install --no-install-recommends pkg-config --yes\nRUN apt-get install --no-install-recommends g++ wget cmake git vim --yes\nRUN apt-get install --no-install-recommends ca-certificates --yes\nRUN apt-get install --no-install-recommends autoconf automake libtool --yes\nRUN apt-get install --no-install-recommends curl unzip --yes\nRUN apt-get install --no-install-recommends libavcodec-dev:amd64 libavformat-dev:amd64 libswscale-dev:amd64 libtbb2:amd64 libtbb-dev:amd64 libjpeg-dev:amd64 libpng12-dev:amd64 libjasper-dev libdc1394-22-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libeigen3-dev --yes\nRUN apt-get install --no-install-recommends libboost-all-dev --yes\nRUN apt-get install --no-install-recommends libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0:amd64 --yes\nRUN apt-get install --no-install-recommends python-scipy python-numpy python-yaml --yes\nRUN apt-get install --no-install-recommends libleveldb-dev:amd64 libsnappy-dev:amd64 libhdf5-serial-dev libgflags-dev libgoogle-glog-dev liblmdb-dev:amd64 libjemalloc-dev libzmq3-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libblas-dev --yes\nRUN apt-get install --no-install-recommends libgtk2.0-dev --yes\nRUN apt-get install --no-install-recommends libcpprest-dev --yes\nRUN apt-get install --no-install-recommends libopenblas-dev --yes\nRUN apt-get install --no-install-recommends alien clinfo opencl-headers --yes\nRUN apt-get install --no-install-recommends libjsoncpp-dev --yes\n#  Prepare the environment\nRUN mkdir -p $DEFAULT_WORKDIR\nENV PATH=\"${PATH}:/usr/local/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\n#  OpenVINO (CVSDK)\nWORKDIR $DEFAULT_WORKDIR\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/13131/l_openvino_toolkit_p_2018.1.265.tgz\nRUN tar zxvf l_openvino_toolkit_p_2018.1.265.tgz \\\n && cd l_openvino_toolkit_p_2018.1.265 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && ./install.sh -s silent.cfg\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/intel/opencl\"\nRUN apt-get install --no-install-recommends lsb-release --yes\nRUN /bin/bash -c \"source /opt/intel/computer_vision_sdk/bin/setupvars.sh\"\nENV PATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/opt/intel/computer_vision_sdk/opencv/share/OpenCV/3rdparty/lib:/opt/intel/computer_vision_sdk/opencv/lib:/opt/intel/opencl:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/cldnn/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/lib/ubuntu_16.04/intel64:/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer/model_optimizer_caffe/bin:/opt/intel/computer_vision_sdk/openvx/lib::/opt/intel/opencl\"\nENV PYTHONPATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PYTHONPATH}\"\nENV OpenCV_DIR=\"/opt/intel/computer_vision_sdk/opencv/share/OpenCV\"\nRUN cd /opt/intel/computer_vision_sdk/install_dependencies \\\n && ./install_NEO_OCL_driver.sh\nRUN cd /opt/intel/computer_vision_sdk/deployment_tools/inference_engine/samples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make cpu_extension -j4\nWORKDIR $DEFAULT_WORKDIR\nRUN rm -rf l_openvino_toolkit_p_2018.1.265 l_openvino_toolkit_p_2018.1.265.tgz\n#  Protobuf\nWORKDIR $DEFAULT_WORKDIR\nRUN git clone https://github.com/google/protobuf.git\nRUN cd protobuf \\\n && git reset --hard 072431452a365450c607e9503f51786be44ecf7f \\\n && ./autogen.sh \\\n && ./configure --disable-shared --with-pic \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf\n#  VDMS\nWORKDIR $DEFAULT_WORKDIR\nRUN if [ ON = \"$USE_VDMS\" ] ; then apt-get install --no-install-recommends scons flex --yes \\\n && apt-get install --no-install-recommends javacc openjdk-8-jdk --yes \\\n && apt-get install --no-install-recommends bison libbison-dev --yes \\\n && apt-get install --no-install-recommends zlib1g-dev --yes \\\n && apt-get install --no-install-recommends libbz2-dev --yes \\\n && apt-get install --no-install-recommends libssl-dev --yes \\\n && apt-get install --no-install-recommends liblz4-dev --yes \\\n && apt-get install --no-install-recommends mpich --yes \\\n && apt-get install --no-install-recommends libopenmpi-dev --yes \\\n && apt-get install --no-install-recommends libgtest-dev ed --yes \\\n && apt-get install --no-install-recommends libtbb2 libtbb-dev --yes \\\n && apt-get install --no-install-recommends libdc1394-22-dev --yes \\\n && git clone https://github.com/Blosc/c-blosc.git \\\n && cd $DEFAULT_WORKDIR/c-blosc \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && cmake --build . \\\n && ctest \\\n && cmake --build . --target install \\\n && cd ../.. \\\n && rm -rf c-blosc \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/facebook/zstd/archive/v1.1.0.tar.gz \\\n && tar xf v1.1.0.tar.gz \\\n && cd zstd-1.1.0 \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -f v1.1.0.tar.gz \\\n && rm -rf zstd-1.1.0 \\\n && cd /usr/src/gtest \\\n && cmake . \\\n && make -j4 \\\n && mv libgtest* /usr/local/lib/ \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/TileDB-Inc/TileDB/archive/0.6.1.tar.gz \\\n && tar xf 0.6.1.tar.gz \\\n && cd TileDB-0.6.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j4 \\\n && make install \\\n && cd ../.. \\\n && rm -f 0.6.1.tar.gz \\\n && rm -rf TileDB-0.6.1 \\\n && git clone https://github.com/tristanpenman/valijson.git \\\n && cd $DEFAULT_WORKDIR/valijson \\\n && cp -r include/* /usr/local/include \\\n && cd .. \\\n && rm -rf valijson \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vcl/archive/v0.1.0.tar.gz \\\n && tar xf v0.1.0.tar.gz \\\n && mv vcl-0.1.0 vcl \\\n && cd vcl \\\n && sed -i \"s/\\(CPPPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\'\\2/g\" SConstruct \\\n && sed -i \"s/\\(LIBPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\'\\2/g\" SConstruct \\\n && scons -j4 \\\n && cd .. \\\n && rm -f v0.1.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/pmgd/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv pmgd-1.0.0 pmgd \\\n && cd pmgd \\\n && make -j4 \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vdms/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv vdms-1.0.0 vdms \\\n && cd vdms \\\n && sed -i \"s/CPPPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\',/g\" SConstruct \\\n && sed -i \"s/LIBPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\',/g\" SConstruct \\\n && sed -i \"s/LIBS\\s*.*\\[/&\\'opencv_core\\',\\'opencv_imgproc\\',\\'opencv_imgcodecs\\',/g\" SConstruct \\\n && mkdir db \\\n && scons -j4 INTEL_PATH=$DEFAULT_WORKDIR \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz ; fi\n#  SAF\nWORKDIR $DEFAULT_WORKDIR\nENV no_proxy=\"\\\"github.intel.com localhost\\\"\"\nRUN if [ ! -z \"$GITHUB_TOKEN\" ] ; then git clone https://$GITHUB_TOKEN@$GITHUB_URL saf ; else git clone https://$GITHUB_URL saf ; fi\nRUN cd saf \\\n && if [ ! -z \"$SAF_HASH\" ] ; then git reset --hard $SAF_HASH ; fi \\\n && if [ ON = \"$USE_VDMS\" ] ; then mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON -DUSE_VDMS=ON -DVDMS_HOME=$DEFAULT_WORKDIR/vdms .. ; else mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON .. ; fi \\\n && make -j4 \\\n && make apps -j4 \\\n && make install_python\n#  Set up SAF \nWORKDIR $DEFAULT_WORKDIR/saf/config\nRUN cp config.toml.example config.toml \\\n && cp cameras.toml.example cameras.toml \\\n && cp models.toml.example models.toml \\\n && echo \"\\n[[model]]\\nname = \\\"person-detection-retail-0012\\\"\\ntype = \\\"cvsdk\\\"\\ndesc_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.xml\\\"\\nparams_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.bin\\\"\\ninput_width = 96\\ninput_height = 112\\nlabel_file = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\\\"\" >> models.toml \\\n && echo \"person\" >> /opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\n#  Prepare sample scripts\nWORKDIR $DEFAULT_WORKDIR/saf\nRUN echo \"#!/bin/sh\\nbuild/apps/simple --camera GST_TEST\" > run_simple.sh \\\n && chmod +x run_simple.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/detector -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_detector.sh \\\n && chmod +x run_detector.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/tracker -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --detector_idle_duration 0.1 --tracker_type kf --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_tracker.sh \\\n && chmod +x run_tracker.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/visualizer --sender_endpoint \\\"kafka://$HOST:9092\\\" -c $CAMERA\" > run_visualizer.sh \\\n && chmod +x run_visualizer.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/writer --sender_endpoint \\\"kafka://$HOST:9092\\\" --write_target file --write_uri sample.csv -c $CAMERA\" > run_writer.sh \\\n && chmod +x run_writer.sh\n#  Install OpenCV-Python for better Python support\nRUN apt-get install --no-install-recommends python-pip --yes \\\n && pip install opencv-python\n#  Resolve ProtoBuf version conflict\n#  In this script, ProtoBuf3 is linked against statically.\n#  The following removes ProtoBuf3 shared libraries.\n#  Do NOT EVER do the following on your native setup.\nRUN rm -f /usr/lib/x86_64-linux-gnu/libprotobuf*\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR $DEFAULT_WORKDIR/saf\n","injectedSmells":[],"originalDockerfileHash":"2e688d80c19a32da5317e052717a9665","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 The SAF Authors. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   Dokerfile for building SAF with OpenVINO (CVSDK)\n#\n#     Usage: sudo docker build -f Dockerfile . -t saf \\\n#                              --build-arg USE_VDMS=ON \\\n#                              --build-arg GITHUB_TOKEN=<OAuth-string> \\\n#                              --build-arg GITHUB_URL=<GitHub-URL>\n#                              --build-arg SAF_HASH=<commit-id>\n#\n#     When building under within VPN, add the following to your build command:\n#       --build-arg http_proxy=<protocol>://<hostname>:<port>\n#       --build-arg https_proxy=<protocol>://<hostname>:<port>\n#\n#     To run, use `docker run -it saf`\n#              or `sudo docker run -it --device /dev/dri:/dev/dri saf`\n#\n#     Prebuilt Docker images are available upon requests.\nFROM ubuntu:16.04\nMAINTAINER Shao-Wen Yang <shao-wen.yang@intel.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nARG DEFAULT_WORKDIR=/vcs\nARG USE_VDMS=OFF\nARG GITHUB_URL=github.com/viscloud/saf.git\nARG GITHUB_TOKEN\nARG SAF_HASH\n#   Prepare toolchain\nRUN apt-get update \\\n && apt-get install --no-install-recommends dialog apt-utils --yes\nRUN apt-get install --no-install-recommends build-essential --yes\nRUN apt-get install --no-install-recommends pkg-config --yes\nRUN apt-get install --no-install-recommends g++ wget cmake git vim --yes\nRUN apt-get install --no-install-recommends ca-certificates --yes\nRUN apt-get install --no-install-recommends autoconf automake libtool --yes\nRUN apt-get install --no-install-recommends curl unzip --yes\nRUN apt-get install --no-install-recommends libavcodec-dev:amd64 libavformat-dev:amd64 libswscale-dev:amd64 libtbb2:amd64 libtbb-dev:amd64 libjpeg-dev:amd64 libpng12-dev:amd64 libjasper-dev libdc1394-22-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libeigen3-dev --yes\nRUN apt-get install --no-install-recommends libboost-all-dev --yes\nRUN apt-get install --no-install-recommends libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0:amd64 --yes\nRUN apt-get install --no-install-recommends python-scipy python-numpy python-yaml --yes\nRUN apt-get install --no-install-recommends libleveldb-dev:amd64 libsnappy-dev:amd64 libhdf5-serial-dev libgflags-dev libgoogle-glog-dev liblmdb-dev:amd64 libjemalloc-dev libzmq3-dev:amd64 --yes\nRUN apt-get install --no-install-recommends libblas-dev --yes\nRUN apt-get install --no-install-recommends libgtk2.0-dev --yes\nRUN apt-get install --no-install-recommends libcpprest-dev --yes\nRUN apt-get install --no-install-recommends libopenblas-dev --yes\nRUN apt-get install --no-install-recommends alien clinfo opencl-headers --yes\nRUN apt-get install --no-install-recommends libjsoncpp-dev --yes\n#   Prepare the environment\nRUN mkdir -p $DEFAULT_WORKDIR\nENV PATH=\"${PATH}:/usr/local/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\n#   OpenVINO (CVSDK)\nWORKDIR $DEFAULT_WORKDIR\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/13131/l_openvino_toolkit_p_2018.1.265.tgz\nRUN tar zxvf l_openvino_toolkit_p_2018.1.265.tgz \\\n && cd l_openvino_toolkit_p_2018.1.265 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && ./install.sh -s silent.cfg\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/intel/opencl\"\nRUN apt-get install --no-install-recommends lsb-release --yes\nRUN /bin/bash -c \"source /opt/intel/computer_vision_sdk/bin/setupvars.sh\"\nENV PATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/opt/intel/computer_vision_sdk/opencv/share/OpenCV/3rdparty/lib:/opt/intel/computer_vision_sdk/opencv/lib:/opt/intel/opencl:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/cldnn/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/external/mkltiny_lnx/lib:/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/lib/ubuntu_16.04/intel64:/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer/model_optimizer_caffe/bin:/opt/intel/computer_vision_sdk/openvx/lib::/opt/intel/opencl\"\nENV PYTHONPATH=\"/opt/intel/computer_vision_sdk/deployment_tools/model_optimizer:${PYTHONPATH}\"\nENV OpenCV_DIR=\"/opt/intel/computer_vision_sdk/opencv/share/OpenCV\"\nRUN cd /opt/intel/computer_vision_sdk/install_dependencies \\\n && ./install_NEO_OCL_driver.sh\nRUN cd /opt/intel/computer_vision_sdk/deployment_tools/inference_engine/samples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make cpu_extension -j4\nWORKDIR $DEFAULT_WORKDIR\nRUN rm -rf l_openvino_toolkit_p_2018.1.265 l_openvino_toolkit_p_2018.1.265.tgz\n#   Protobuf\nWORKDIR $DEFAULT_WORKDIR\nRUN git clone https://github.com/google/protobuf.git\nRUN cd protobuf \\\n && git reset --hard 072431452a365450c607e9503f51786be44ecf7f \\\n && ./autogen.sh \\\n && ./configure --disable-shared --with-pic \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf\n#   VDMS\nWORKDIR $DEFAULT_WORKDIR\nRUN if [ ON = \"$USE_VDMS\" ] ; then apt-get install --no-install-recommends scons flex --yes \\\n && apt-get install --no-install-recommends javacc openjdk-8-jdk --yes \\\n && apt-get install --no-install-recommends bison libbison-dev --yes \\\n && apt-get install --no-install-recommends zlib1g-dev --yes \\\n && apt-get install --no-install-recommends libbz2-dev --yes \\\n && apt-get install --no-install-recommends libssl-dev --yes \\\n && apt-get install --no-install-recommends liblz4-dev --yes \\\n && apt-get install --no-install-recommends mpich --yes \\\n && apt-get install --no-install-recommends libopenmpi-dev --yes \\\n && apt-get install --no-install-recommends libgtest-dev ed --yes \\\n && apt-get install --no-install-recommends libtbb2 libtbb-dev --yes \\\n && apt-get install --no-install-recommends libdc1394-22-dev --yes \\\n && git clone https://github.com/Blosc/c-blosc.git \\\n && cd $DEFAULT_WORKDIR/c-blosc \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && cmake --build . \\\n && ctest \\\n && cmake --build . --target install \\\n && cd ../.. \\\n && rm -rf c-blosc \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/facebook/zstd/archive/v1.1.0.tar.gz \\\n && tar xf v1.1.0.tar.gz \\\n && cd zstd-1.1.0 \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -f v1.1.0.tar.gz \\\n && rm -rf zstd-1.1.0 \\\n && cd /usr/src/gtest \\\n && cmake . \\\n && make -j4 \\\n && mv libgtest* /usr/local/lib/ \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/TileDB-Inc/TileDB/archive/0.6.1.tar.gz \\\n && tar xf 0.6.1.tar.gz \\\n && cd TileDB-0.6.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j4 \\\n && make install \\\n && cd ../.. \\\n && rm -f 0.6.1.tar.gz \\\n && rm -rf TileDB-0.6.1 \\\n && git clone https://github.com/tristanpenman/valijson.git \\\n && cd $DEFAULT_WORKDIR/valijson \\\n && cp -r include/* /usr/local/include \\\n && cd .. \\\n && rm -rf valijson \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vcl/archive/v0.1.0.tar.gz \\\n && tar xf v0.1.0.tar.gz \\\n && mv vcl-0.1.0 vcl \\\n && cd vcl \\\n && sed -i \"s/\\(CPPPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\'\\2/g\" SConstruct \\\n && sed -i \"s/\\(LIBPATH\\s*=\\s*\\[.*\\)\\(\\]\\)/\\1,\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\'\\2/g\" SConstruct \\\n && scons -j4 \\\n && cd .. \\\n && rm -f v0.1.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/pmgd/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv pmgd-1.0.0 pmgd \\\n && cd pmgd \\\n && make -j4 \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz \\\n && cd $DEFAULT_WORKDIR \\\n && wget https://github.com/intellabs/vdms/archive/v1.0.0.tar.gz \\\n && tar xf v1.0.0.tar.gz \\\n && mv vdms-1.0.0 vdms \\\n && cd vdms \\\n && sed -i \"s/CPPPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/include\\',/g\" SConstruct \\\n && sed -i \"s/LIBPATH\\s*.*\\[/&\\'\\/opt\\/intel\\/computer_vision_sdk\\/opencv\\/lib\\',/g\" SConstruct \\\n && sed -i \"s/LIBS\\s*.*\\[/&\\'opencv_core\\',\\'opencv_imgproc\\',\\'opencv_imgcodecs\\',/g\" SConstruct \\\n && mkdir db \\\n && scons -j4 INTEL_PATH=$DEFAULT_WORKDIR \\\n && cd .. \\\n && rm -f v1.0.0.tar.gz ; fi\n#   SAF\nWORKDIR $DEFAULT_WORKDIR\nENV no_proxy=\"\\\"github.intel.com localhost\\\"\"\nRUN if [ ! -z \"$GITHUB_TOKEN\" ] ; then git clone https://$GITHUB_TOKEN@$GITHUB_URL saf ; else git clone https://$GITHUB_URL saf ; fi\nRUN cd saf \\\n && if [ ! -z \"$SAF_HASH\" ] ; then git reset --hard $SAF_HASH ; fi \\\n && if [ ON = \"$USE_VDMS\" ] ; then mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON -DUSE_VDMS=ON -DVDMS_HOME=$DEFAULT_WORKDIR/vdms .. ; else mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DUSE_CVSDK=ON -DBACKEND=cpu -DBUILD_TESTS=OFF -DUSE_SSD=ON -DUSE_WEBSOCKET=ON -DUSE_KAFKA=ON -DUSE_MQTT=ON -DUSE_PYTHON=ON .. ; fi \\\n && make -j4 \\\n && make apps -j4 \\\n && make install_python\n#   Set up SAF \nWORKDIR $DEFAULT_WORKDIR/saf/config\nRUN cp config.toml.example config.toml \\\n && cp cameras.toml.example cameras.toml \\\n && cp models.toml.example models.toml \\\n && echo \"\\n[[model]]\\nname = \\\"person-detection-retail-0012\\\"\\ntype = \\\"cvsdk\\\"\\ndesc_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.xml\\\"\\nparams_path = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/FP32/person-detection-retail-0012.bin\\\"\\ninput_width = 96\\ninput_height = 112\\nlabel_file = \\\"/opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\\\"\" >> models.toml \\\n && echo \"person\" >> /opt/intel/computer_vision_sdk/deployment_tools/intel_models/person-detection-retail-0012/label.names\n#   Prepare sample scripts\nWORKDIR $DEFAULT_WORKDIR/saf\nRUN echo \"#!/bin/sh\\nbuild/apps/simple --camera GST_TEST\" > run_simple.sh \\\n && chmod +x run_simple.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/detector -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_detector.sh \\\n && chmod +x run_detector.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/tracker -c $CAMERA --detector_type cvsdk-ssd -m person-detection-retail-0012 --detector_targets person --detector_confidence_threshold 0.3 --detector_idle_duration 0.1 --tracker_type kf --sender_package_type frame --sender_endpoint \\\"kafka://$HOST:9092\\\"\" > run_tracker.sh \\\n && chmod +x run_tracker.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/visualizer --sender_endpoint \\\"kafka://$HOST:9092\\\" -c $CAMERA\" > run_visualizer.sh \\\n && chmod +x run_visualizer.sh\nRUN echo \"#!/bin/sh\\nCAMERA=GST_TEST\\nHOST=localhost\\nif [ -n \\\"$1\\\" ]; then CAMERA=$1; fi\\nif [ -n \\\"$2\\\" ]; then HOST=$2; fi\\nbuild/apps/writer --sender_endpoint \\\"kafka://$HOST:9092\\\" --write_target file --write_uri sample.csv -c $CAMERA\" > run_writer.sh \\\n && chmod +x run_writer.sh\n#   Install OpenCV-Python for better Python support\nRUN apt-get install --no-install-recommends python-pip --yes \\\n && pip install opencv-python\n#   Resolve ProtoBuf version conflict\n#   In this script, ProtoBuf3 is linked against statically.\n#   The following removes ProtoBuf3 shared libraries.\n#   Do NOT EVER do the following on your native setup.\nRUN rm -f /usr/lib/x86_64-linux-gnu/libprotobuf*\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR $DEFAULT_WORKDIR/saf\n","originalDockerfileUglifiedHash":"a75acb88ecaf5556e16ab0e2355a28ba","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/83428841b69be388c7ef2c022c9715e4731ffea1.dockerfile"}