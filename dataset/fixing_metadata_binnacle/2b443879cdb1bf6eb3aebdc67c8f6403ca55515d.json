{"seed":2054019957,"processedDockerfileHash":"3120cba7e2922f79dcef9ba356b98340","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#\n#   Docker file that builds RelEx and visual question answering pipeline.\n#\n#   To start:\n#      docker run -it -p 8888:8888 vqa\n#\n#   To demo:\n#      open in browser localhost:8888\n#      use password: password \n#\n#   That will open jupyter notebook with vqa demo\n#\nFROM ubuntu:18.04\n#   use bash\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Avoid triggering apt-get dialogs (which may lead to errors). See:\n#   https://stackoverflow.com/questions/25019183/docker-java7-install-fail\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN : ; apt-get -y upgrade ; apt-get -y autoclean\n#   Java\nRUN (apt-get update ;apt-get install --no-install-recommends maven=3.6.0-1~18.04.1 screen=4.6.2-1ubuntu1.1 telnet=0.17-41 netcat-openbsd=1.187-1ubuntu0.1 byobu=5.125-0ubuntu1 wget=1.19.4-1ubuntu2.2 vim=2:8.0.1453-1ubuntu1.11 git=1:2.17.1-1ubuntu0.17 unzip=6.0-21ubuntu1.2 sudo=1.8.21p2-3ubuntu1.5 apt-utils=1.6.14 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends openjdk-11-jdk=11.0.18+10-0ubuntu1~18.04.1 -y )\n#   GCC and basic build tools\nRUN (apt-get update ;apt-get install --no-install-recommends gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 make=4.1-9.1ubuntu1 swig=3.0.12-1 ant=1.10.5-3~18.04 -y )\n#   Wordnet\nRUN (apt-get update ;apt-get install --no-install-recommends wordnet=1:3.0-35 wordnet-dev=1:3.0-35 wordnet-sense-index=1:3.0-35 -y )\n#   There are UTF8 chars in the Java sources, and the RelEx build will\n#   break if build in a C environment.\nRUN (apt-get update ;apt-get install --no-install-recommends locales=2.27-3ubuntu1.6 -y ) \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN mkdir /usr/local/share/java\nWORKDIR /home/Downloads/\n#   build tools\nRUN (apt-get update ;apt-get install --no-install-recommends libboost-python-dev=1.65.1.0ubuntu1 libblas-dev=3.7.1-4ubuntu1 libboost-thread-dev=1.65.1.0ubuntu1 libboost-filesystem-dev=1.65.1.0ubuntu1 libboost-system-dev=1.65.1.0ubuntu1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends cmake=3.10.2-1ubuntu2.18.04.2 libboost-program-options-dev=1.65.1.0ubuntu1 libboost-regex-dev=1.65.1.0ubuntu1 libiberty-dev=20170913-1ubuntu0.1 guile-2.2-dev=2.2.3+1-3ubuntu0.1 protobuf-compiler=3.0.0-9.1ubuntu1.1 uuid-dev=2.31.1-0.4ubuntu3.7 -y )\n#   Conda\n#   install conda \nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.19.4-1ubuntu2.2 bzip2=1.0.6-8.1ubuntu0.2 ca-certificates=20211016ubuntu0.18.04.1 libglib2.0-0=2.56.4-0ubuntu0.18.04.9 libxext6=2:1.3.3-1 libsm6=2:1.2.2-1 libxrender1=1:0.9.10-1 -y )\n#   Create and switch user. The user is privileged, with no password\n#   required.  That is, you can use sudo.\nRUN adduser --disabled-password --gecos \"ReLex USER\" relex\nRUN adduser relex sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nUSER relex\nRUN sudo chown -R relex:relex .\nRUN sudo chown -R relex:relex /home/relex\n#   Punch out ports\n#  # plain-text-server.sh port\nEXPOSE 3333/tcp\n#  # opencog-server.sh port\nEXPOSE 4444/tcp\n#  # link-grammar-server.sh port\nEXPOSE 9000/tcp\nWORKDIR /home/relex\n#   Link Parser -- changes often\n#   Download the current released version of link-grammar.\n#   The wget gets the latest version w/ wildcard\nRUN wget -r --no-parent -nH --cut-dirs=2 https://www.abisource.com/downloads/link-grammar/current/\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#   get linkgrammar version\nRUN bash -l -c 'echo `ls|grep link|sed 's/link-grammar-//g'` >> LINKGRAMMAR_VERSION'\nUSER root\nRUN cd link-grammar-5.*/ ; ./configure ; make -j6 ; sudo make install ; ldconfig\nUSER relex\nRUN cd link-grammar-5.*/ ; mvn install:install-file -Dfile=./bindings/java/linkgrammar-`cat ../LINKGRAMMAR_VERSION `.jar -DgroupId=org.opencog -DartifactId=linkgrammar -Dversion=`cat ../LINKGRAMMAR_VERSION ` -Dpackaging=jar\nUSER root\nRUN rm -rf * link-grammar*\nUSER relex\n#   Relex -- changes often\nRUN wget https://github.com/opencog/relex/archive/master.tar.gz -O master.tar.gz\nRUN tar -xvf master.tar.gz ; cd relex-master ; mvn install\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/\" >> /home/relex/.profile\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/relex/miniconda3/envs/pmvqa3/lib/\" >> /home/relex/.profile\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b \\\n && rm ~/anaconda.sh\nRUN /home/relex/miniconda3/bin/conda create -y --name pmvqa3 python=3.5 \\\n && source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && echo 'opencv ==3.1.0' > $( dirname $( which python ;) ;)/../conda-meta/pinned \\\n && conda install -y opencv=3.1.0 atlas bokeh ca-certificates certifi cffi click cloudpickle cudatoolkit cudnn cycler cython cytoolz dask dask-core dbus decorator distributed expat fontconfig freetype gflags glib glog gst-plugins-base gstreamer h5py hdf5 heapdict icu imageio intel-openmp jbig jinja2 jpeg leveldb libedit libffi libgcc libgcc-ng libgfortran-ng libiconv libpng libprotobuf libstdcxx-ng libtiff libxcb libxml2 lmdb locket markupsafe matplotlib mkl msgpack-python nccl ncurses networkx ninja numpy opencv openssl packaging pandas partd pcre pillow pip protobuf psutil pycparser pyparsing pyqt python python-dateutil pytorch pytz pywavelets pyyaml qt readline scikit-image scipy setuptools sip six snappy sortedcontainers sqlite tblib tk toolz tornado wheel xz yaml zict zlib jupyter \\\n && conda install -y -c conda-forge jpype1 \\\n && pip install easydict==1.10 ipywebrtc==0.6.0\n#   vqa piplie(java)\nRUN wget https://github.com/singnet/semantic-vision/archive/master.zip\nRUN unzip master.zip\nRUN rm master.zip\nRUN mkdir ~/projects\nRUN mv semantic-vision-master/ ~/projects/semantic-vision-1\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64\" >> /home/relex/.profile\nRUN cd ~/projects/semantic-vision-1/experiments/opencog/question2atomese \\\n && mvn package\n#   faster-r-cnn\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd ~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature \\\n && git clone https://github.com/peteanderson80/bottom-up-attention.git \\\n && cd bottom-up-attention \\\n && patch -p 1 < ../bottom-up-attention.3.patch \\\n && export LD_LIBRARY_PATH=$( dirname $( which python ;) ;)/../lib:$LD_LIBRARY_PATH \\\n && cd caffe \\\n && cp ../../Makefile.config.3 Makefile.config \\\n && make ; make pycaffe ; cd ../lib \\\n && export PYTHONPATH=$( pwd ;):$( pwd ;)/../caffe/python:$PYTHONPATH ; make\nRUN echo \"export PYTHONPATH=$PYTHONPATH:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib/../caffe/python\" >> /home/relex/.profile\nUSER relex \n#   cogutil\nRUN wget https://github.com/opencog/cogutil/archive/master.zip\nRUN unzip master.zip \\\n && cd cogutil-master/ \\\n && mkdir build \\\n && cd build \\\n && cmake ..\nRUN cd cogutil-master/build \\\n && sudo make install\nRUN sudo rm -rf cogutil-master master.zip\n#   atomspace\nRUN wget https://github.com/opencog/atomspace/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd atomspace-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd atomspace-master/build \\\n && sudo make install\nRUN sudo rm -rf atomspace-master/build master.zip\nRUN mv atomspace-master /home/relex/projects/atomspace\n#   opencog\nRUN wget https://github.com/opencog/opencog/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd opencog-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd opencog-master/build \\\n && sudo make install\nRUN sudo rm -rf opencog-master/build master.zip\nRUN mv opencog-master /home/relex/projects/opencog\n#   download some images\nRUN mkdir -p /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images \\\n && cd /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images/ \\\n && wget https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Plains_Zebra_Equus_quagga.jpg/440px-Plains_Zebra_Equus_quagga.jpg\nRUN echo \"export GUILE_AUTO_COMPILE=0\" >> /home/relex/.profile\nRUN echo \"(use-modules (ice-9 readline)) (activate-readline)(add-to-load-path \\\"/usr/local/share/opencog/scm\\\")(add-to-load-path \\\"/home/relex/projects/opencog/examples/pln/conjunction/\\\")(add-to-load-path \\\"/home/relex/projects/atomspace/examples/rule-engine/rules/\\\")(add-to-load-path \\\"/home/relex/projects/opencog/opencog/pln/rules/\\\")(add-to-load-path \\\".\\\")(use-modules (opencog))(use-modules (opencog query))(use-modules (opencog exec))\" >> /home/relex/.guile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/\" >> /home/relex/.profile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3/dist-packages/\" >> /home/relex/.profile\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && jupyter notebook --generate-config\nRUN echo \"c.NotebookApp.password = 'sha1:b6e570f197d6:b920933b262cf450f5c11dc21d878c53972cb2fa'\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.password_required = False\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.port = 8888\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN chmod +x /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\nCMD /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Docker file that builds RelEx and visual question answering pipeline.\n#\n#  To start:\n#     docker run -it -p 8888:8888 vqa\n#\n#  To demo:\n#     open in browser localhost:8888\n#     use password: password \n#\n#  That will open jupyter notebook with vqa demo\n#\nFROM ubuntu:18.04\n#  use bash\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#  Avoid triggering apt-get dialogs (which may lead to errors). See:\n#  https://stackoverflow.com/questions/25019183/docker-java7-install-fail\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN apt-get update ; apt-get -y upgrade ; apt-get -y autoclean\n#  Java\nRUN apt-get install maven screen telnet netcat-openbsd byobu wget vim git unzip sudo apt-utils -y\nRUN apt-get install openjdk-11-jdk -y\n#  GCC and basic build tools\nRUN apt-get install gcc g++ make swig ant -y\n#  Wordnet\nRUN apt-get install wordnet wordnet-dev wordnet-sense-index -y\n#  There are UTF8 chars in the Java sources, and the RelEx build will\n#  break if build in a C environment.\nRUN apt-get install locales -y \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN mkdir /usr/local/share/java\nWORKDIR /home/Downloads/\n#  build tools\nRUN apt-get install -y libboost-python-dev libblas-dev libboost-thread-dev libboost-filesystem-dev libboost-system-dev\nRUN apt-get install -y cmake libboost-program-options-dev libboost-regex-dev libiberty-dev guile-2.2-dev protobuf-compiler uuid-dev\n#  Conda\n#  install conda \nRUN apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 -y\n#  Create and switch user. The user is privileged, with no password\n#  required.  That is, you can use sudo.\nRUN adduser --disabled-password --gecos \"ReLex USER\" relex\nRUN adduser relex sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nUSER relex\nRUN sudo chown -R relex:relex .\nRUN sudo chown -R relex:relex /home/relex\n#  Punch out ports\n# # plain-text-server.sh port\nEXPOSE 3333/tcp\n# # opencog-server.sh port\nEXPOSE 4444/tcp\n# # link-grammar-server.sh port\nEXPOSE 9000/tcp\nWORKDIR /home/relex\n#  Link Parser -- changes often\n#  Download the current released version of link-grammar.\n#  The wget gets the latest version w/ wildcard\nRUN wget -r --no-parent -nH --cut-dirs=2 https://www.abisource.com/downloads/link-grammar/current/\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#  get linkgrammar version\nRUN bash -l -c 'echo `ls|grep link|sed 's/link-grammar-//g'` >> LINKGRAMMAR_VERSION'\nUSER root\nRUN cd link-grammar-5.*/ ; ./configure ; make -j6 ; sudo make install ; ldconfig\nUSER relex\nRUN cd link-grammar-5.*/ ; mvn install:install-file -Dfile=./bindings/java/linkgrammar-`cat ../LINKGRAMMAR_VERSION `.jar -DgroupId=org.opencog -DartifactId=linkgrammar -Dversion=`cat ../LINKGRAMMAR_VERSION ` -Dpackaging=jar\nUSER root\nRUN rm -rf * link-grammar*\nUSER relex\n#  Relex -- changes often\nRUN wget https://github.com/opencog/relex/archive/master.tar.gz -O master.tar.gz\nRUN tar -xvf master.tar.gz ; cd relex-master ; mvn install\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/\" >> /home/relex/.profile\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/relex/miniconda3/envs/pmvqa3/lib/\" >> /home/relex/.profile\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b \\\n && rm ~/anaconda.sh\nRUN /home/relex/miniconda3/bin/conda create -y --name pmvqa3 python=3.5 \\\n && source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && echo 'opencv ==3.1.0' > $( dirname $( which python ;) ;)/../conda-meta/pinned \\\n && conda install -y opencv=3.1.0 atlas bokeh ca-certificates certifi cffi click cloudpickle cudatoolkit cudnn cycler cython cytoolz dask dask-core dbus decorator distributed expat fontconfig freetype gflags glib glog gst-plugins-base gstreamer h5py hdf5 heapdict icu imageio intel-openmp jbig jinja2 jpeg leveldb libedit libffi libgcc libgcc-ng libgfortran-ng libiconv libpng libprotobuf libstdcxx-ng libtiff libxcb libxml2 lmdb locket markupsafe matplotlib mkl msgpack-python nccl ncurses networkx ninja numpy opencv openssl packaging pandas partd pcre pillow pip protobuf psutil pycparser pyparsing pyqt python python-dateutil pytorch pytz pywavelets pyyaml qt readline scikit-image scipy setuptools sip six snappy sortedcontainers sqlite tblib tk toolz tornado wheel xz yaml zict zlib jupyter \\\n && conda install -y -c conda-forge jpype1 \\\n && pip install easydict ipywebrtc\n#  vqa piplie(java)\nRUN wget https://github.com/singnet/semantic-vision/archive/master.zip\nRUN unzip master.zip\nRUN rm master.zip\nRUN mkdir ~/projects\nRUN mv semantic-vision-master/ ~/projects/semantic-vision-1\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64\" >> /home/relex/.profile\nRUN cd ~/projects/semantic-vision-1/experiments/opencog/question2atomese \\\n && mvn package\n#  faster-r-cnn\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd ~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature \\\n && git clone https://github.com/peteanderson80/bottom-up-attention.git \\\n && cd bottom-up-attention \\\n && patch -p 1 < ../bottom-up-attention.3.patch \\\n && export LD_LIBRARY_PATH=$( dirname $( which python ;) ;)/../lib:$LD_LIBRARY_PATH \\\n && cd caffe \\\n && cp ../../Makefile.config.3 Makefile.config \\\n && make ; make pycaffe ; cd ../lib \\\n && export PYTHONPATH=$( pwd ;):$( pwd ;)/../caffe/python:$PYTHONPATH ; make\nRUN echo \"export PYTHONPATH=$PYTHONPATH:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib/../caffe/python\" >> /home/relex/.profile\nUSER relex \n#  cogutil\nRUN wget https://github.com/opencog/cogutil/archive/master.zip\nRUN unzip master.zip \\\n && cd cogutil-master/ \\\n && mkdir build \\\n && cd build \\\n && cmake ..\nRUN cd cogutil-master/build \\\n && sudo make install\nRUN sudo rm -rf cogutil-master master.zip\n#  atomspace\nRUN wget https://github.com/opencog/atomspace/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd atomspace-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd atomspace-master/build \\\n && sudo make install\nRUN sudo rm -rf atomspace-master/build master.zip\nRUN mv atomspace-master /home/relex/projects/atomspace\n#  opencog\nRUN wget https://github.com/opencog/opencog/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd opencog-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd opencog-master/build \\\n && sudo make install\nRUN sudo rm -rf opencog-master/build master.zip\nRUN mv opencog-master /home/relex/projects/opencog\n#  download some images\nRUN mkdir -p /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images \\\n && cd /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images/ \\\n && wget https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Plains_Zebra_Equus_quagga.jpg/440px-Plains_Zebra_Equus_quagga.jpg\nRUN echo \"export GUILE_AUTO_COMPILE=0\" >> /home/relex/.profile\nRUN echo \"(use-modules (ice-9 readline)) (activate-readline)(add-to-load-path \\\"/usr/local/share/opencog/scm\\\")(add-to-load-path \\\"/home/relex/projects/opencog/examples/pln/conjunction/\\\")(add-to-load-path \\\"/home/relex/projects/atomspace/examples/rule-engine/rules/\\\")(add-to-load-path \\\"/home/relex/projects/opencog/opencog/pln/rules/\\\")(add-to-load-path \\\".\\\")(use-modules (opencog))(use-modules (opencog query))(use-modules (opencog exec))\" >> /home/relex/.guile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/\" >> /home/relex/.profile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3/dist-packages/\" >> /home/relex/.profile\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && jupyter notebook --generate-config\nRUN echo \"c.NotebookApp.password = 'sha1:b6e570f197d6:b920933b262cf450f5c11dc21d878c53972cb2fa'\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.password_required = False\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.port = 8888\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN chmod +x /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\nCMD /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\n","injectedSmells":[],"originalDockerfileHash":"c7c534a7844bfca79d6391f57a6ddb75","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Docker file that builds RelEx and visual question answering pipeline.\n#\n#   To start:\n#      docker run -it -p 8888:8888 vqa\n#\n#   To demo:\n#      open in browser localhost:8888\n#      use password: password \n#\n#   That will open jupyter notebook with vqa demo\n#\nFROM ubuntu:18.04\n#   use bash\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Avoid triggering apt-get dialogs (which may lead to errors). See:\n#   https://stackoverflow.com/questions/25019183/docker-java7-install-fail\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN apt-get update ; apt-get -y upgrade ; apt-get -y autoclean\n#   Java\nRUN apt-get install maven screen telnet netcat-openbsd byobu wget vim git unzip sudo apt-utils -y\nRUN apt-get install openjdk-11-jdk -y\n#   GCC and basic build tools\nRUN apt-get install gcc g++ make swig ant -y\n#   Wordnet\nRUN apt-get install wordnet wordnet-dev wordnet-sense-index -y\n#   There are UTF8 chars in the Java sources, and the RelEx build will\n#   break if build in a C environment.\nRUN apt-get install locales -y \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nRUN mkdir /usr/local/share/java\nWORKDIR /home/Downloads/\n#   build tools\nRUN apt-get install libboost-python-dev libblas-dev libboost-thread-dev libboost-filesystem-dev libboost-system-dev -y\nRUN apt-get install cmake libboost-program-options-dev libboost-regex-dev libiberty-dev guile-2.2-dev protobuf-compiler uuid-dev -y\n#   Conda\n#   install conda \nRUN apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 -y\n#   Create and switch user. The user is privileged, with no password\n#   required.  That is, you can use sudo.\nRUN adduser --disabled-password --gecos \"ReLex USER\" relex\nRUN adduser relex sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nUSER relex\nRUN sudo chown -R relex:relex .\nRUN sudo chown -R relex:relex /home/relex\n#   Punch out ports\n#  # plain-text-server.sh port\nEXPOSE 3333/tcp\n#  # opencog-server.sh port\nEXPOSE 4444/tcp\n#  # link-grammar-server.sh port\nEXPOSE 9000/tcp\nWORKDIR /home/relex\n#   Link Parser -- changes often\n#   Download the current released version of link-grammar.\n#   The wget gets the latest version w/ wildcard\nRUN wget -r --no-parent -nH --cut-dirs=2 https://www.abisource.com/downloads/link-grammar/current/\nRUN tar -zxf current/link-grammar-5*.tar.gz\n#   get linkgrammar version\nRUN bash -l -c 'echo `ls|grep link|sed 's/link-grammar-//g'` >> LINKGRAMMAR_VERSION'\nUSER root\nRUN cd link-grammar-5.*/ ; ./configure ; make -j6 ; sudo make install ; ldconfig\nUSER relex\nRUN cd link-grammar-5.*/ ; mvn install:install-file -Dfile=./bindings/java/linkgrammar-`cat ../LINKGRAMMAR_VERSION `.jar -DgroupId=org.opencog -DartifactId=linkgrammar -Dversion=`cat ../LINKGRAMMAR_VERSION ` -Dpackaging=jar\nUSER root\nRUN rm -rf * link-grammar*\nUSER relex\n#   Relex -- changes often\nRUN wget https://github.com/opencog/relex/archive/master.tar.gz -O master.tar.gz\nRUN tar -xvf master.tar.gz ; cd relex-master ; mvn install\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/\" >> /home/relex/.profile\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/relex/miniconda3/envs/pmvqa3/lib/\" >> /home/relex/.profile\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b \\\n && rm ~/anaconda.sh\nRUN /home/relex/miniconda3/bin/conda create -y --name pmvqa3 python=3.5 \\\n && source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && echo 'opencv ==3.1.0' > $( dirname $( which python ;) ;)/../conda-meta/pinned \\\n && conda install -y opencv=3.1.0 atlas bokeh ca-certificates certifi cffi click cloudpickle cudatoolkit cudnn cycler cython cytoolz dask dask-core dbus decorator distributed expat fontconfig freetype gflags glib glog gst-plugins-base gstreamer h5py hdf5 heapdict icu imageio intel-openmp jbig jinja2 jpeg leveldb libedit libffi libgcc libgcc-ng libgfortran-ng libiconv libpng libprotobuf libstdcxx-ng libtiff libxcb libxml2 lmdb locket markupsafe matplotlib mkl msgpack-python nccl ncurses networkx ninja numpy opencv openssl packaging pandas partd pcre pillow pip protobuf psutil pycparser pyparsing pyqt python python-dateutil pytorch pytz pywavelets pyyaml qt readline scikit-image scipy setuptools sip six snappy sortedcontainers sqlite tblib tk toolz tornado wheel xz yaml zict zlib jupyter \\\n && conda install -y -c conda-forge jpype1 \\\n && pip install easydict ipywebrtc\n#   vqa piplie(java)\nRUN wget https://github.com/singnet/semantic-vision/archive/master.zip\nRUN unzip master.zip\nRUN rm master.zip\nRUN mkdir ~/projects\nRUN mv semantic-vision-master/ ~/projects/semantic-vision-1\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64\" >> /home/relex/.profile\nRUN cd ~/projects/semantic-vision-1/experiments/opencog/question2atomese \\\n && mvn package\n#   faster-r-cnn\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd ~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature \\\n && git clone https://github.com/peteanderson80/bottom-up-attention.git \\\n && cd bottom-up-attention \\\n && patch -p 1 < ../bottom-up-attention.3.patch \\\n && export LD_LIBRARY_PATH=$( dirname $( which python ;) ;)/../lib:$LD_LIBRARY_PATH \\\n && cd caffe \\\n && cp ../../Makefile.config.3 Makefile.config \\\n && make ; make pycaffe ; cd ../lib \\\n && export PYTHONPATH=$( pwd ;):$( pwd ;)/../caffe/python:$PYTHONPATH ; make\nRUN echo \"export PYTHONPATH=$PYTHONPATH:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib:~/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/feature/bottom-up-attention/lib/../caffe/python\" >> /home/relex/.profile\nUSER relex \n#   cogutil\nRUN wget https://github.com/opencog/cogutil/archive/master.zip\nRUN unzip master.zip \\\n && cd cogutil-master/ \\\n && mkdir build \\\n && cd build \\\n && cmake ..\nRUN cd cogutil-master/build \\\n && sudo make install\nRUN sudo rm -rf cogutil-master master.zip\n#   atomspace\nRUN wget https://github.com/opencog/atomspace/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd atomspace-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd atomspace-master/build \\\n && sudo make install\nRUN sudo rm -rf atomspace-master/build master.zip\nRUN mv atomspace-master /home/relex/projects/atomspace\n#   opencog\nRUN wget https://github.com/opencog/opencog/archive/master.zip\nRUN unzip master.zip\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && cd opencog-master \\\n && mkdir build \\\n && cd build/ \\\n && cmake .. \\\n && make\nRUN cd opencog-master/build \\\n && sudo make install\nRUN sudo rm -rf opencog-master/build master.zip\nRUN mv opencog-master /home/relex/projects/opencog\n#   download some images\nRUN mkdir -p /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images \\\n && cd /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/images/ \\\n && wget https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Plains_Zebra_Equus_quagga.jpg/440px-Plains_Zebra_Equus_quagga.jpg\nRUN echo \"export GUILE_AUTO_COMPILE=0\" >> /home/relex/.profile\nRUN echo \"(use-modules (ice-9 readline)) (activate-readline)(add-to-load-path \\\"/usr/local/share/opencog/scm\\\")(add-to-load-path \\\"/home/relex/projects/opencog/examples/pln/conjunction/\\\")(add-to-load-path \\\"/home/relex/projects/atomspace/examples/rule-engine/rules/\\\")(add-to-load-path \\\"/home/relex/projects/opencog/opencog/pln/rules/\\\")(add-to-load-path \\\".\\\")(use-modules (opencog))(use-modules (opencog query))(use-modules (opencog exec))\" >> /home/relex/.guile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/\" >> /home/relex/.profile\nRUN echo \"export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3/dist-packages/\" >> /home/relex/.profile\nRUN source /home/relex/miniconda3/bin/activate pmvqa3 \\\n && jupyter notebook --generate-config\nRUN echo \"c.NotebookApp.password = 'sha1:b6e570f197d6:b920933b262cf450f5c11dc21d878c53972cb2fa'\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.password_required = False\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.port = 8888\" >> /home/relex/.jupyter/jupyter_notebook_config.py\nRUN chmod +x /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\nCMD /home/relex/projects/semantic-vision-1/experiments/opencog/pattern_matcher_vqa/vqa\n","originalDockerfileUglifiedHash":"36683ccf58cb5f791976cb1c41b21ce7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2b443879cdb1bf6eb3aebdc67c8f6403ca55515d.dockerfile"}