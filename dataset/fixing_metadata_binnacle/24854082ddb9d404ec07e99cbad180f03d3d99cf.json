{"seed":742795081,"processedDockerfileHash":"9ca84eb983696e73fb7a6d3117ad1fe4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Start declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\nARG AGENTBUILD\nARG PYTHON_BASE_TAG\nARG PHP_BUILD_BASE_TAG\nFROM buildpack-deps:stretch AS main\n#   End declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\n#   Configure locale (required for Python)\n#   NOTE: Do NOT move it from here as it could have global implications\nENV LANG=\"C.UTF-8\"\n#   Install basic build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git jq make unzip build-essential unixodbc-dev libpq-dev default-libmysqlclient-dev libunwind8 moreutils rsync zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core\nFROM main AS dotnet-install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libc6 libgcc1 libgssapi-krb5-2 libicu57 liblttng-ust0 libssl1.0.2 libstdc++6 zlib1g libcurl3 libuuid1 libunwind8 -y \\\n && rm -rf /var/lib/apt/lists/*\nENV DOTNET_RUNNING_IN_CONTAINER=\"true\" \\\n    DOTNET_USE_POLLING_FILE_WATCHER=\"true\" \\\n    NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nRUN mkdir /var/nuget\nCOPY build/__dotNetCoreSdkVersions.sh /tmp\nCOPY build/__dotNetCoreRunTimeVersions.sh /tmp\nCOPY images/build/installDotNetCore.sh /\nRUN chmod +x /installDotNetCore.sh\n#   Check https://www.microsoft.com/net/platform/support-policy for support policy of .NET Core versions\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_11_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_11_SDK_SHA512 DOTNET_SDK_URL=https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VER/dotnet-dev-debian.9-x64.$DOTNET_SDK_VER.tar.gz INSTALL_PACKAGES=false /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_21_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_21_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_22_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_22_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_30_SDK_VERSION_PREVIEW_NAME DOTNET_SDK_SHA=$DOT_NET_CORE_30_SDK_SHA512 /installDotNetCore.sh\nRUN set -ex rm -rf /tmp/NuGetScratch \\\n && find /var/nuget -type d -exec chmod 777 {}\nRUN set -ex \\\n && sdksDir=/opt/dotnet/sdks \\\n && cd $sdksDir \\\n && ln -s 1.1 1 \\\n && ln -s 2.1 2 \\\n && ln -s 3.0 3\nRUN set -ex \\\n && dotnetDir=/opt/dotnet \\\n && sdksDir=$dotnetDir/sdks \\\n && runtimesDir=$dotnetDir/runtimes \\\n && mkdir -p $runtimesDir \\\n && cd $runtimesDir \\\n && . /tmp/__dotNetCoreSdkVersions.sh \\\n && . /tmp/__dotNetCoreRunTimeVersions.sh \\\n && mkdir $NET_CORE_APP_10 \\\n && ln -s $NET_CORE_APP_10 1.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_10/sdk \\\n && mkdir $NET_CORE_APP_11 \\\n && ln -s $NET_CORE_APP_11 1.1 \\\n && ln -s 1.1 1 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_11/sdk \\\n && mkdir $NET_CORE_APP_20 \\\n && ln -s $NET_CORE_APP_20 2.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_20/sdk \\\n && mkdir $NET_CORE_APP_21 \\\n && ln -s $NET_CORE_APP_21 2.1 \\\n && ln -s 2.1 2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_21/sdk \\\n && mkdir $NET_CORE_APP_22 \\\n && ln -s $NET_CORE_APP_22 2.2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_22_SDK_VERSION $NET_CORE_APP_22/sdk \\\n && mkdir $NET_CORE_APP_30 \\\n && ln -s $NET_CORE_APP_30 3.0 \\\n && ln -s 3.0 3 \\\n && ln -s $sdksDir/$DOT_NET_CORE_30_SDK_VERSION $NET_CORE_APP_30/sdk \\\n && ln -s 2.1 lts \\\n && ltsSdk=$( readlink lts/sdk ;) \\\n && ln -s $ltsSdk/dotnet /usr/local/bin/dotnet\n#   Install Node.js, NPM, Yarn\nFROM main AS node-install\nCOPY build/__nodeVersions.sh /tmp\nRUN chmod a+x /tmp/__nodeVersions.sh \\\n && . /tmp/__nodeVersions.sh \\\n && curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n -d 4.4.7 \\\n && ~/n/bin/n -d 4.5.0 \\\n && ~/n/bin/n -d 4.8.0 \\\n && ~/n/bin/n -d 6.2.2 \\\n && ~/n/bin/n -d 6.6.0 \\\n && ~/n/bin/n -d 6.9.3 \\\n && ~/n/bin/n -d 6.10.3 \\\n && ~/n/bin/n -d 6.11.0 \\\n && ~/n/bin/n -d 8.0.0 \\\n && ~/n/bin/n -d 8.1.4 \\\n && ~/n/bin/n -d 8.2.1 \\\n && ~/n/bin/n -d 8.8.1 \\\n && ~/n/bin/n -d 8.9.4 \\\n && ~/n/bin/n -d 8.11.2 \\\n && ~/n/bin/n -d 8.12.0 \\\n && ~/n/bin/n -d 8.15.1 \\\n && ~/n/bin/n -d 9.4.0 \\\n && ~/n/bin/n -d 10.1.0 \\\n && ~/n/bin/n -d 10.10.0 \\\n && ~/n/bin/n -d 10.14.2 \\\n && ~/n/bin/n -d $NODE6_VERSION \\\n && ~/n/bin/n -d $NODE8_VERSION \\\n && ~/n/bin/n -d $NODE10_VERSION \\\n && mv /usr/local/n/versions/node /opt/nodejs \\\n && rm -rf /usr/local/n ~/n\nRUN set -e \\\n && for ver in `ls /opt/nodejs `; do nodeModulesDir=\"/opt/nodejs/$ver/lib/node_modules\" ;npm_ver=`jq -r .version $nodeModulesDir/npm/package.json ` ;if [ ! \"$npm_ver\" = \"${npm_ver#6.}\" ] ; then echo \"Upgrading node $ver's npm version from $npm_ver to 6.9.0\" ;cd $nodeModulesDir ;PATH=\"/opt/nodejs/$ver/bin:$PATH\" \"$nodeModulesDir/npm/bin/npm-cli.js\" install npm@6.9.0 ;echo ; fi ; done\nRUN set -ex \\\n && for ver in `ls /opt/nodejs `; do npm_ver=`jq -r .version /opt/nodejs/$ver/lib/node_modules/npm/package.json ` ;if [ ! -d /opt/npm/$npm_ver ] ; then mkdir -p /opt/npm/$npm_ver ;ln -s /opt/nodejs/$ver/lib/node_modules /opt/npm/$npm_ver/node_modules ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npm /opt/npm/$npm_ver/npm ;if [ -e /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ] ; then chmod +x /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npx /opt/npm/$npm_ver/npx ; fi ; fi ; done\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && GPG_KEY=6A010C5166006599AA17F08146C2130DFD2497F5 \\\n && for i in {1..5}; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$GPG_KEY\" ;if [ $? -eq 0 ] ; then break ; fi ; done \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n && mkdir -p /opt/yarn \\\n && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn \\\n && mv /opt/yarn/yarn-v$YARN_VERSION /opt/yarn/$YARN_VERSION \\\n && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz\nRUN set -ex \\\n && ln -s 4.4.7 /opt/nodejs/4.4 \\\n && ln -s 4.5.0 /opt/nodejs/4.5 \\\n && ln -s 4.8.0 /opt/nodejs/4.8 \\\n && ln -s 4.8 /opt/nodejs/4 \\\n && ln -s 6.2.2 /opt/nodejs/6.2 \\\n && ln -s 6.6.0 /opt/nodejs/6.6 \\\n && ln -s 6.9.3 /opt/nodejs/6.9 \\\n && ln -s 6.10.3 /opt/nodejs/6.10 \\\n && ln -s 6.11.0 /opt/nodejs/6.11 \\\n && ln -s 8.0.0 /opt/nodejs/8.0 \\\n && ln -s 8.1.4 /opt/nodejs/8.1 \\\n && ln -s 8.2.1 /opt/nodejs/8.2 \\\n && ln -s 8.8.1 /opt/nodejs/8.8 \\\n && ln -s 8.9.4 /opt/nodejs/8.9 \\\n && ln -s 8.11.2 /opt/nodejs/8.11 \\\n && ln -s 8.12.0 /opt/nodejs/8.12 \\\n && ln -s 8.15.1 /opt/nodejs/8.15 \\\n && ln -s 9.4.0 /opt/nodejs/9.4 \\\n && ln -s 9.4 /opt/nodejs/9 \\\n && ln -s 10.1.0 /opt/nodejs/10.1 \\\n && ln -s 10.10.0 /opt/nodejs/10.10 \\\n && ln -s 10.14.2 /opt/nodejs/10.14 \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $NODE6_VERSION /opt/nodejs/$NODE6_MAJOR_MINOR_VERSION \\\n && ln -s $NODE6_MAJOR_MINOR_VERSION /opt/nodejs/6 \\\n && ln -s $NODE8_VERSION /opt/nodejs/$NODE8_MAJOR_MINOR_VERSION \\\n && ln -s $NODE8_MAJOR_MINOR_VERSION /opt/nodejs/8 \\\n && ln -s $NODE10_VERSION /opt/nodejs/$NODE10_MAJOR_MINOR_VERSION \\\n && ln -s $NODE10_MAJOR_MINOR_VERSION /opt/nodejs/10 \\\n && ln -s 10 /opt/nodejs/lts\nRUN set -ex \\\n && ln -s 2.15.9 /opt/npm/2.15 \\\n && ln -s 2.15 /opt/npm/2 \\\n && ln -s 3.9.5 /opt/npm/3.9 \\\n && ln -s 3.10.10 /opt/npm/3.10 \\\n && ln -s 3.10 /opt/npm/3 \\\n && ln -s 5.0.3 /opt/npm/5.0 \\\n && ln -s 5.3.0 /opt/npm/5.3 \\\n && ln -s 5.4.2 /opt/npm/5.4 \\\n && ln -s 5.6.0 /opt/npm/5.6 \\\n && ln -s 5.6 /opt/npm/5 \\\n && ln -s 6.9.0 /opt/npm/6.9 \\\n && ln -s 6.9 /opt/npm/6 \\\n && ln -s 6 /opt/npm/latest\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $YARN_VERSION /opt/yarn/stable \\\n && ln -s $YARN_VERSION /opt/yarn/latest \\\n && ln -s $YARN_VERSION /opt/yarn/$YARN_MINOR_VERSION \\\n && ln -s $YARN_MINOR_VERSION /opt/yarn/$YARN_MAJOR_VERSION\nRUN set -ex \\\n && mkdir -p /links \\\n && cp -s /opt/nodejs/lts/bin/* /links \\\n && cp -s /opt/yarn/stable/bin/yarn /opt/yarn/stable/bin/yarnpkg /links\n#  ##\n#   Python intermediate stages\n#   Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n#  ##\nFROM mcr.microsoft.com/oryx/python-build-base:2.7-${PYTHON_BASE_TAG} AS py27-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.6-${PYTHON_BASE_TAG} AS py36-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.7-${PYTHON_BASE_TAG} AS py37-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.8-${PYTHON_BASE_TAG} AS py38-build-base\n#  ##\n#   End Python intermediate stages\n#  ##\nFROM main AS python\n#   It's not clear whether these are needed at runtime...\nRUN apt-get update \\\n && apt-get install --no-install-recommends tk-dev uuid-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   https://github.com/docker-library/python/issues/147\nENV PYTHONIOENCODING=\"UTF-8\"\nCOPY build/__pythonVersions.sh /tmp\nCOPY --from=py27-build-base /opt /opt\nCOPY --from=py36-build-base /opt /opt\nCOPY --from=py37-build-base /opt /opt\nCOPY --from=py38-build-base /opt /opt\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && [ -d \"/opt/python/$PYTHON27_VERSION\" ] \\\n && echo /opt/python/$PYTHON27_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON36_VERSION\" ] \\\n && echo /opt/python/$PYTHON36_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON37_VERSION\" ] \\\n && echo /opt/python/$PYTHON37_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON38_VERSION\" ] \\\n && echo /opt/python/$PYTHON38_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && ldconfig\n#   The link from PYTHON38_VERSION to 3.8.0 exists because \"3.8.0b1\" isn't a valid SemVer string.\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && ln -s $PYTHON27_VERSION /opt/python/2.7 \\\n && ln -s 2.7 /opt/python/2 \\\n && ln -s $PYTHON36_VERSION /opt/python/3.6 \\\n && ln -s $PYTHON37_VERSION /opt/python/latest \\\n && ln -s $PYTHON37_VERSION /opt/python/3.7 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8.0 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8 \\\n && ln -s 3.7 /opt/python/3\nRUN set -ex \\\n && cd /usr/local/bin \\\n && cp -sn /opt/python/2/bin/* . \\\n && cp -sn /opt/python/3/bin/* . \\\n && ln -sf /opt/python/2/bin/python python\n#   This stage is used only when building locally\nFROM dotnet-install AS buildscriptbuilder\nCOPY src/BuildScriptGenerator /usr/oryx/src/BuildScriptGenerator\nCOPY src/BuildScriptGeneratorCli /usr/oryx/src/BuildScriptGeneratorCli\nCOPY src/Common /usr/oryx/src/Common\nCOPY build/FinalPublicKey.snk usr/oryx/build/\nCOPY src/CommonFiles /usr/oryx/src/CommonFiles\n#   This statement copies signed oryx binaries from during agent build.\n#   For local/dev contents of blank/empty directory named binaries are getting copied\nCOPY binaries /opt/buildscriptgen/\nWORKDIR /usr/oryx/src\nARG GIT_COMMIT=unspecified\nARG AGENTBUILD=${AGENTBUILD}\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\nRUN if [ -z \"$AGENTBUILD\" ] ; then dotnet publish -r linux-x64 -o /opt/buildscriptgen/ -c Release BuildScriptGeneratorCli/BuildScriptGeneratorCli.csproj ; fi\nRUN chmod a+x /opt/buildscriptgen/GenerateBuildScript\n#  ##\n#   PHP intermediate stages\n#   Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n#  ##\nFROM mcr.microsoft.com/oryx/php-build-base:5.6-${PHP_BUILD_BASE_TAG} AS php56-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.0-${PHP_BUILD_BASE_TAG} AS php70-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.2-${PHP_BUILD_BASE_TAG} AS php72-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.3-${PHP_BUILD_BASE_TAG} AS php73-build-base\n#  ##\n#   End PHP intermediate stages\n#  ##\n#  ##\n#   Build run script generators (to be used by the `oryx run-script` command)\n#  ##\nFROM golang:1.11-stretch AS startupScriptGens\n#   GOPATH is set to \"/go\" in the base image\nWORKDIR /go/src\nCOPY src/startupscriptgenerator/src .\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nRUN ./build.sh dotnetcore /opt/startupcmdgen/dotnet\nRUN ./build.sh node /opt/startupcmdgen/nodejs\nRUN ./build.sh php /opt/startupcmdgen/php\nRUN ./build.sh python /opt/startupcmdgen/python\n#  ##\n#   End build run script generators\n#  ##\nFROM python AS final\nWORKDIR /\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\n#   Copy .NET Core related content\nENV NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nCOPY --from=dotnet-install /opt/dotnet /opt/dotnet\nCOPY --from=dotnet-install /var/nuget /var/nuget\nCOPY --from=dotnet-install /usr/local/bin /usr/local/bin\n#   Grant read-write permissions to the nuget folder so that dotnet restore\n#   can write into it.\nRUN chmod a+rw /var/nuget\n#   Copy NodeJs, NPM and Yarn related content\nCOPY --from=node-install /opt /opt\nCOPY --from=node-install /links/ /usr/local/bin\nCOPY --from=mcr.microsoft.com/oryx/build-yarn-cache:20190326.8 /usr/local/share/yarn-cache /usr/local/share/yarn-cache\n#   Copy PHP versions\nCOPY images/build/php/prereqs/installPrereqs.sh /tmp/php/installPrereqs.sh\nRUN . /tmp/php/installPrereqs.sh\nCOPY --from=php56-build-base /opt /opt\nCOPY --from=php70-build-base /opt /opt\nCOPY --from=php72-build-base /opt /opt\nCOPY --from=php73-build-base /opt /opt\nRUN ln -s /opt/php/5.6 /opt/php/5 \\\n && ln -s /opt/php/7.3 /opt/php/7 \\\n && ln -s /opt/php/7 /opt/php/lts \\\n && ln -s /opt/php/lts/bin/php /usr/local/bin/php\n#   Build script generator content. Docker doesn't support variables in --from\n#   so we are building an extra stage to copy binaries from correct build stage\nCOPY --from=buildscriptbuilder /opt/buildscriptgen/ /opt/buildscriptgen/\nRUN ln -s /opt/buildscriptgen/GenerateBuildScript /usr/local/bin/oryx\n#   Oryx depends on the run script generators for most of its\n#   `IProgrammingPlatform.GenerateBashRunScript()` implementations\nCOPY --from=startupScriptGens /opt/startupcmdgen/ /opt/startupcmdgen/\n#   Bake Application Insights key from pipeline variable into final image\nARG AI_KEY\nENV ORYX_AI_INSTRUMENTATION_KEY=\"${AI_KEY}\"\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nLABEL com.microsoft.oryx.git-commit=\"${GIT_COMMIT}\"\nLABEL com.microsoft.oryx.build-number=\"${BUILD_NUMBER}\"\nENTRYPOINT [\"benv\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Start declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\nARG AGENTBUILD\nARG PYTHON_BASE_TAG\nARG PHP_BUILD_BASE_TAG\nFROM buildpack-deps:stretch AS main\n#  End declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\n#  Configure locale (required for Python)\n#  NOTE: Do NOT move it from here as it could have global implications\nENV LANG=\"C.UTF-8\"\n#  Install basic build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git jq make unzip build-essential unixodbc-dev libpq-dev default-libmysqlclient-dev libunwind8 moreutils rsync zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install .NET Core\nFROM main AS dotnet-install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libc6 libgcc1 libgssapi-krb5-2 libicu57 liblttng-ust0 libssl1.0.2 libstdc++6 zlib1g libcurl3 libuuid1 libunwind8 -y \\\n && rm -rf /var/lib/apt/lists/*\nENV DOTNET_RUNNING_IN_CONTAINER=\"true\" \\\n    DOTNET_USE_POLLING_FILE_WATCHER=\"true\" \\\n    NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nRUN mkdir /var/nuget\nCOPY build/__dotNetCoreSdkVersions.sh /tmp\nCOPY build/__dotNetCoreRunTimeVersions.sh /tmp\nCOPY images/build/installDotNetCore.sh /\nRUN chmod +x /installDotNetCore.sh\n#  Check https://www.microsoft.com/net/platform/support-policy for support policy of .NET Core versions\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_11_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_11_SDK_SHA512 DOTNET_SDK_URL=https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VER/dotnet-dev-debian.9-x64.$DOTNET_SDK_VER.tar.gz INSTALL_PACKAGES=false /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_21_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_21_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_22_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_22_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_30_SDK_VERSION_PREVIEW_NAME DOTNET_SDK_SHA=$DOT_NET_CORE_30_SDK_SHA512 /installDotNetCore.sh\nRUN set -ex rm -rf /tmp/NuGetScratch \\\n && find /var/nuget -type d -exec chmod 777 {} ;\nRUN set -ex \\\n && sdksDir=/opt/dotnet/sdks \\\n && cd $sdksDir \\\n && ln -s 1.1 1 \\\n && ln -s 2.1 2 \\\n && ln -s 3.0 3\nRUN set -ex \\\n && dotnetDir=/opt/dotnet \\\n && sdksDir=$dotnetDir/sdks \\\n && runtimesDir=$dotnetDir/runtimes \\\n && mkdir -p $runtimesDir \\\n && cd $runtimesDir \\\n && . /tmp/__dotNetCoreSdkVersions.sh \\\n && . /tmp/__dotNetCoreRunTimeVersions.sh \\\n && mkdir $NET_CORE_APP_10 \\\n && ln -s $NET_CORE_APP_10 1.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_10/sdk \\\n && mkdir $NET_CORE_APP_11 \\\n && ln -s $NET_CORE_APP_11 1.1 \\\n && ln -s 1.1 1 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_11/sdk \\\n && mkdir $NET_CORE_APP_20 \\\n && ln -s $NET_CORE_APP_20 2.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_20/sdk \\\n && mkdir $NET_CORE_APP_21 \\\n && ln -s $NET_CORE_APP_21 2.1 \\\n && ln -s 2.1 2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_21/sdk \\\n && mkdir $NET_CORE_APP_22 \\\n && ln -s $NET_CORE_APP_22 2.2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_22_SDK_VERSION $NET_CORE_APP_22/sdk \\\n && mkdir $NET_CORE_APP_30 \\\n && ln -s $NET_CORE_APP_30 3.0 \\\n && ln -s 3.0 3 \\\n && ln -s $sdksDir/$DOT_NET_CORE_30_SDK_VERSION $NET_CORE_APP_30/sdk \\\n && ln -s 2.1 lts \\\n && ltsSdk=$( readlink lts/sdk ;) \\\n && ln -s $ltsSdk/dotnet /usr/local/bin/dotnet\n#  Install Node.js, NPM, Yarn\nFROM main AS node-install\nCOPY build/__nodeVersions.sh /tmp\nRUN chmod a+x /tmp/__nodeVersions.sh \\\n && . /tmp/__nodeVersions.sh \\\n && curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n -d 4.4.7 \\\n && ~/n/bin/n -d 4.5.0 \\\n && ~/n/bin/n -d 4.8.0 \\\n && ~/n/bin/n -d 6.2.2 \\\n && ~/n/bin/n -d 6.6.0 \\\n && ~/n/bin/n -d 6.9.3 \\\n && ~/n/bin/n -d 6.10.3 \\\n && ~/n/bin/n -d 6.11.0 \\\n && ~/n/bin/n -d 8.0.0 \\\n && ~/n/bin/n -d 8.1.4 \\\n && ~/n/bin/n -d 8.2.1 \\\n && ~/n/bin/n -d 8.8.1 \\\n && ~/n/bin/n -d 8.9.4 \\\n && ~/n/bin/n -d 8.11.2 \\\n && ~/n/bin/n -d 8.12.0 \\\n && ~/n/bin/n -d 8.15.1 \\\n && ~/n/bin/n -d 9.4.0 \\\n && ~/n/bin/n -d 10.1.0 \\\n && ~/n/bin/n -d 10.10.0 \\\n && ~/n/bin/n -d 10.14.2 \\\n && ~/n/bin/n -d $NODE6_VERSION \\\n && ~/n/bin/n -d $NODE8_VERSION \\\n && ~/n/bin/n -d $NODE10_VERSION \\\n && mv /usr/local/n/versions/node /opt/nodejs \\\n && rm -rf /usr/local/n ~/n\nRUN set -e \\\n && for ver in `ls /opt/nodejs `; do nodeModulesDir=\"/opt/nodejs/$ver/lib/node_modules\" ;npm_ver=`jq -r .version $nodeModulesDir/npm/package.json ` ;if [ ! \"$npm_ver\" = \"${npm_ver#6.}\" ] ; then echo \"Upgrading node $ver's npm version from $npm_ver to 6.9.0\" ;cd $nodeModulesDir ;PATH=\"/opt/nodejs/$ver/bin:$PATH\" \"$nodeModulesDir/npm/bin/npm-cli.js\" install npm@6.9.0 ;echo ; fi ; done\nRUN set -ex \\\n && for ver in `ls /opt/nodejs `; do npm_ver=`jq -r .version /opt/nodejs/$ver/lib/node_modules/npm/package.json ` ;if [ ! -d /opt/npm/$npm_ver ] ; then mkdir -p /opt/npm/$npm_ver ;ln -s /opt/nodejs/$ver/lib/node_modules /opt/npm/$npm_ver/node_modules ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npm /opt/npm/$npm_ver/npm ;if [ -e /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ] ; then chmod +x /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npx /opt/npm/$npm_ver/npx ; fi ; fi ; done\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && GPG_KEY=6A010C5166006599AA17F08146C2130DFD2497F5 \\\n && for i in {1..5}; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$GPG_KEY\" ;if [ $? -eq 0 ] ; then break ; fi ; done \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n && mkdir -p /opt/yarn \\\n && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn \\\n && mv /opt/yarn/yarn-v$YARN_VERSION /opt/yarn/$YARN_VERSION \\\n && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz\nRUN set -ex \\\n && ln -s 4.4.7 /opt/nodejs/4.4 \\\n && ln -s 4.5.0 /opt/nodejs/4.5 \\\n && ln -s 4.8.0 /opt/nodejs/4.8 \\\n && ln -s 4.8 /opt/nodejs/4 \\\n && ln -s 6.2.2 /opt/nodejs/6.2 \\\n && ln -s 6.6.0 /opt/nodejs/6.6 \\\n && ln -s 6.9.3 /opt/nodejs/6.9 \\\n && ln -s 6.10.3 /opt/nodejs/6.10 \\\n && ln -s 6.11.0 /opt/nodejs/6.11 \\\n && ln -s 8.0.0 /opt/nodejs/8.0 \\\n && ln -s 8.1.4 /opt/nodejs/8.1 \\\n && ln -s 8.2.1 /opt/nodejs/8.2 \\\n && ln -s 8.8.1 /opt/nodejs/8.8 \\\n && ln -s 8.9.4 /opt/nodejs/8.9 \\\n && ln -s 8.11.2 /opt/nodejs/8.11 \\\n && ln -s 8.12.0 /opt/nodejs/8.12 \\\n && ln -s 8.15.1 /opt/nodejs/8.15 \\\n && ln -s 9.4.0 /opt/nodejs/9.4 \\\n && ln -s 9.4 /opt/nodejs/9 \\\n && ln -s 10.1.0 /opt/nodejs/10.1 \\\n && ln -s 10.10.0 /opt/nodejs/10.10 \\\n && ln -s 10.14.2 /opt/nodejs/10.14 \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $NODE6_VERSION /opt/nodejs/$NODE6_MAJOR_MINOR_VERSION \\\n && ln -s $NODE6_MAJOR_MINOR_VERSION /opt/nodejs/6 \\\n && ln -s $NODE8_VERSION /opt/nodejs/$NODE8_MAJOR_MINOR_VERSION \\\n && ln -s $NODE8_MAJOR_MINOR_VERSION /opt/nodejs/8 \\\n && ln -s $NODE10_VERSION /opt/nodejs/$NODE10_MAJOR_MINOR_VERSION \\\n && ln -s $NODE10_MAJOR_MINOR_VERSION /opt/nodejs/10 \\\n && ln -s 10 /opt/nodejs/lts\nRUN set -ex \\\n && ln -s 2.15.9 /opt/npm/2.15 \\\n && ln -s 2.15 /opt/npm/2 \\\n && ln -s 3.9.5 /opt/npm/3.9 \\\n && ln -s 3.10.10 /opt/npm/3.10 \\\n && ln -s 3.10 /opt/npm/3 \\\n && ln -s 5.0.3 /opt/npm/5.0 \\\n && ln -s 5.3.0 /opt/npm/5.3 \\\n && ln -s 5.4.2 /opt/npm/5.4 \\\n && ln -s 5.6.0 /opt/npm/5.6 \\\n && ln -s 5.6 /opt/npm/5 \\\n && ln -s 6.9.0 /opt/npm/6.9 \\\n && ln -s 6.9 /opt/npm/6 \\\n && ln -s 6 /opt/npm/latest\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $YARN_VERSION /opt/yarn/stable \\\n && ln -s $YARN_VERSION /opt/yarn/latest \\\n && ln -s $YARN_VERSION /opt/yarn/$YARN_MINOR_VERSION \\\n && ln -s $YARN_MINOR_VERSION /opt/yarn/$YARN_MAJOR_VERSION\nRUN set -ex \\\n && mkdir -p /links \\\n && cp -s /opt/nodejs/lts/bin/* /links \\\n && cp -s /opt/yarn/stable/bin/yarn /opt/yarn/stable/bin/yarnpkg /links\n# ##\n#  Python intermediate stages\n#  Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n# ##\nFROM mcr.microsoft.com/oryx/python-build-base:2.7-${PYTHON_BASE_TAG} AS py27-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.6-${PYTHON_BASE_TAG} AS py36-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.7-${PYTHON_BASE_TAG} AS py37-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.8-${PYTHON_BASE_TAG} AS py38-build-base\n# ##\n#  End Python intermediate stages\n# ##\nFROM main AS python\n#  It's not clear whether these are needed at runtime...\nRUN apt-get update \\\n && apt-get install --no-install-recommends tk-dev uuid-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  https://github.com/docker-library/python/issues/147\nENV PYTHONIOENCODING=\"UTF-8\"\nCOPY build/__pythonVersions.sh /tmp\nCOPY --from=py27-build-base /opt /opt\nCOPY --from=py36-build-base /opt /opt\nCOPY --from=py37-build-base /opt /opt\nCOPY --from=py38-build-base /opt /opt\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && [ -d \"/opt/python/$PYTHON27_VERSION\" ] \\\n && echo /opt/python/$PYTHON27_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON36_VERSION\" ] \\\n && echo /opt/python/$PYTHON36_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON37_VERSION\" ] \\\n && echo /opt/python/$PYTHON37_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON38_VERSION\" ] \\\n && echo /opt/python/$PYTHON38_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && ldconfig\n#  The link from PYTHON38_VERSION to 3.8.0 exists because \"3.8.0b1\" isn't a valid SemVer string.\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && ln -s $PYTHON27_VERSION /opt/python/2.7 \\\n && ln -s 2.7 /opt/python/2 \\\n && ln -s $PYTHON36_VERSION /opt/python/3.6 \\\n && ln -s $PYTHON37_VERSION /opt/python/latest \\\n && ln -s $PYTHON37_VERSION /opt/python/3.7 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8.0 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8 \\\n && ln -s 3.7 /opt/python/3\nRUN set -ex \\\n && cd /usr/local/bin \\\n && cp -sn /opt/python/2/bin/* . \\\n && cp -sn /opt/python/3/bin/* . \\\n && ln -sf /opt/python/2/bin/python python\n#  This stage is used only when building locally\nFROM dotnet-install AS buildscriptbuilder\nCOPY src/BuildScriptGenerator /usr/oryx/src/BuildScriptGenerator\nCOPY src/BuildScriptGeneratorCli /usr/oryx/src/BuildScriptGeneratorCli\nCOPY src/Common /usr/oryx/src/Common\nCOPY build/FinalPublicKey.snk usr/oryx/build/\nCOPY src/CommonFiles /usr/oryx/src/CommonFiles\n#  This statement copies signed oryx binaries from during agent build.\n#  For local/dev contents of blank/empty directory named binaries are getting copied\nCOPY binaries /opt/buildscriptgen/\nWORKDIR /usr/oryx/src\nARG GIT_COMMIT=unspecified\nARG AGENTBUILD=${AGENTBUILD}\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\nRUN if [ -z \"$AGENTBUILD\" ] ; then dotnet publish -r linux-x64 -o /opt/buildscriptgen/ -c Release BuildScriptGeneratorCli/BuildScriptGeneratorCli.csproj ; fi\nRUN chmod a+x /opt/buildscriptgen/GenerateBuildScript\n# ##\n#  PHP intermediate stages\n#  Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n# ##\nFROM mcr.microsoft.com/oryx/php-build-base:5.6-${PHP_BUILD_BASE_TAG} AS php56-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.0-${PHP_BUILD_BASE_TAG} AS php70-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.2-${PHP_BUILD_BASE_TAG} AS php72-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.3-${PHP_BUILD_BASE_TAG} AS php73-build-base\n# ##\n#  End PHP intermediate stages\n# ##\n# ##\n#  Build run script generators (to be used by the `oryx run-script` command)\n# ##\nFROM golang:1.11-stretch AS startupScriptGens\n#  GOPATH is set to \"/go\" in the base image\nWORKDIR /go/src\nCOPY src/startupscriptgenerator/src .\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nRUN ./build.sh dotnetcore /opt/startupcmdgen/dotnet\nRUN ./build.sh node /opt/startupcmdgen/nodejs\nRUN ./build.sh php /opt/startupcmdgen/php\nRUN ./build.sh python /opt/startupcmdgen/python\n# ##\n#  End build run script generators\n# ##\nFROM python AS final\nWORKDIR /\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\n#  Copy .NET Core related content\nENV NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nCOPY --from=dotnet-install /opt/dotnet /opt/dotnet\nCOPY --from=dotnet-install /var/nuget /var/nuget\nCOPY --from=dotnet-install /usr/local/bin /usr/local/bin\n#  Grant read-write permissions to the nuget folder so that dotnet restore\n#  can write into it.\nRUN chmod a+rw /var/nuget\n#  Copy NodeJs, NPM and Yarn related content\nCOPY --from=node-install /opt /opt\nCOPY --from=node-install /links/ /usr/local/bin\nCOPY --from=mcr.microsoft.com/oryx/build-yarn-cache:20190326.8 /usr/local/share/yarn-cache /usr/local/share/yarn-cache\n#  Copy PHP versions\nCOPY images/build/php/prereqs/installPrereqs.sh /tmp/php/installPrereqs.sh\nRUN . /tmp/php/installPrereqs.sh\nCOPY --from=php56-build-base /opt /opt\nCOPY --from=php70-build-base /opt /opt\nCOPY --from=php72-build-base /opt /opt\nCOPY --from=php73-build-base /opt /opt\nRUN ln -s /opt/php/5.6 /opt/php/5 \\\n && ln -s /opt/php/7.3 /opt/php/7 \\\n && ln -s /opt/php/7 /opt/php/lts \\\n && ln -s /opt/php/lts/bin/php /usr/local/bin/php\n#  Build script generator content. Docker doesn't support variables in --from\n#  so we are building an extra stage to copy binaries from correct build stage\nCOPY --from=buildscriptbuilder /opt/buildscriptgen/ /opt/buildscriptgen/\nRUN ln -s /opt/buildscriptgen/GenerateBuildScript /usr/local/bin/oryx\n#  Oryx depends on the run script generators for most of its\n#  `IProgrammingPlatform.GenerateBashRunScript()` implementations\nCOPY --from=startupScriptGens /opt/startupcmdgen/ /opt/startupcmdgen/\n#  Bake Application Insights key from pipeline variable into final image\nARG AI_KEY\nENV ORYX_AI_INSTRUMENTATION_KEY=\"${AI_KEY}\"\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nLABEL com.microsoft.oryx.git-commit=\"${GIT_COMMIT}\"\nLABEL com.microsoft.oryx.build-number=\"${BUILD_NUMBER}\"\nENTRYPOINT [\"benv\"]\n","injectedSmells":[],"originalDockerfileHash":"eaafc50175b1f668338bdfd92c462749","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Start declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\nARG AGENTBUILD\nARG PYTHON_BASE_TAG\nARG PHP_BUILD_BASE_TAG\nFROM buildpack-deps:stretch AS main\n#   End declaration of Build-Arg to determine where the image is getting built (DevOps agents or local)\n#   Configure locale (required for Python)\n#   NOTE: Do NOT move it from here as it could have global implications\nENV LANG=\"C.UTF-8\"\n#   Install basic build tools\nRUN apt-get update \\\n && apt-get install --no-install-recommends git jq make unzip build-essential unixodbc-dev libpq-dev default-libmysqlclient-dev libunwind8 moreutils rsync zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install .NET Core\nFROM main AS dotnet-install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libc6 libgcc1 libgssapi-krb5-2 libicu57 liblttng-ust0 libssl1.0.2 libstdc++6 zlib1g libcurl3 libuuid1 libunwind8 -y \\\n && rm -rf /var/lib/apt/lists/*\nENV DOTNET_RUNNING_IN_CONTAINER=\"true\" \\\n    DOTNET_USE_POLLING_FILE_WATCHER=\"true\" \\\n    NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nRUN mkdir /var/nuget\nCOPY build/__dotNetCoreSdkVersions.sh /tmp\nCOPY build/__dotNetCoreRunTimeVersions.sh /tmp\nCOPY images/build/installDotNetCore.sh /\nRUN chmod +x /installDotNetCore.sh\n#   Check https://www.microsoft.com/net/platform/support-policy for support policy of .NET Core versions\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_11_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_11_SDK_SHA512 DOTNET_SDK_URL=https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VER/dotnet-dev-debian.9-x64.$DOTNET_SDK_VER.tar.gz INSTALL_PACKAGES=false /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_21_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_21_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_22_SDK_VERSION DOTNET_SDK_SHA=$DOT_NET_CORE_22_SDK_SHA512 /installDotNetCore.sh\nRUN . /tmp/__dotNetCoreSdkVersions.sh \\\n && DOTNET_SDK_VER=$DOT_NET_CORE_30_SDK_VERSION_PREVIEW_NAME DOTNET_SDK_SHA=$DOT_NET_CORE_30_SDK_SHA512 /installDotNetCore.sh\nRUN set -ex rm -rf /tmp/NuGetScratch \\\n && find /var/nuget -type d -exec chmod 777 {}\nRUN set -ex \\\n && sdksDir=/opt/dotnet/sdks \\\n && cd $sdksDir \\\n && ln -s 1.1 1 \\\n && ln -s 2.1 2 \\\n && ln -s 3.0 3\nRUN set -ex \\\n && dotnetDir=/opt/dotnet \\\n && sdksDir=$dotnetDir/sdks \\\n && runtimesDir=$dotnetDir/runtimes \\\n && mkdir -p $runtimesDir \\\n && cd $runtimesDir \\\n && . /tmp/__dotNetCoreSdkVersions.sh \\\n && . /tmp/__dotNetCoreRunTimeVersions.sh \\\n && mkdir $NET_CORE_APP_10 \\\n && ln -s $NET_CORE_APP_10 1.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_10/sdk \\\n && mkdir $NET_CORE_APP_11 \\\n && ln -s $NET_CORE_APP_11 1.1 \\\n && ln -s 1.1 1 \\\n && ln -s $sdksDir/$DOT_NET_CORE_11_SDK_VERSION $NET_CORE_APP_11/sdk \\\n && mkdir $NET_CORE_APP_20 \\\n && ln -s $NET_CORE_APP_20 2.0 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_20/sdk \\\n && mkdir $NET_CORE_APP_21 \\\n && ln -s $NET_CORE_APP_21 2.1 \\\n && ln -s 2.1 2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_21_SDK_VERSION $NET_CORE_APP_21/sdk \\\n && mkdir $NET_CORE_APP_22 \\\n && ln -s $NET_CORE_APP_22 2.2 \\\n && ln -s $sdksDir/$DOT_NET_CORE_22_SDK_VERSION $NET_CORE_APP_22/sdk \\\n && mkdir $NET_CORE_APP_30 \\\n && ln -s $NET_CORE_APP_30 3.0 \\\n && ln -s 3.0 3 \\\n && ln -s $sdksDir/$DOT_NET_CORE_30_SDK_VERSION $NET_CORE_APP_30/sdk \\\n && ln -s 2.1 lts \\\n && ltsSdk=$( readlink lts/sdk ;) \\\n && ln -s $ltsSdk/dotnet /usr/local/bin/dotnet\n#   Install Node.js, NPM, Yarn\nFROM main AS node-install\nCOPY build/__nodeVersions.sh /tmp\nRUN chmod a+x /tmp/__nodeVersions.sh \\\n && . /tmp/__nodeVersions.sh \\\n && curl -sL https://git.io/n-install | bash -s -- -ny - \\\n && ~/n/bin/n -d 4.4.7 \\\n && ~/n/bin/n -d 4.5.0 \\\n && ~/n/bin/n -d 4.8.0 \\\n && ~/n/bin/n -d 6.2.2 \\\n && ~/n/bin/n -d 6.6.0 \\\n && ~/n/bin/n -d 6.9.3 \\\n && ~/n/bin/n -d 6.10.3 \\\n && ~/n/bin/n -d 6.11.0 \\\n && ~/n/bin/n -d 8.0.0 \\\n && ~/n/bin/n -d 8.1.4 \\\n && ~/n/bin/n -d 8.2.1 \\\n && ~/n/bin/n -d 8.8.1 \\\n && ~/n/bin/n -d 8.9.4 \\\n && ~/n/bin/n -d 8.11.2 \\\n && ~/n/bin/n -d 8.12.0 \\\n && ~/n/bin/n -d 8.15.1 \\\n && ~/n/bin/n -d 9.4.0 \\\n && ~/n/bin/n -d 10.1.0 \\\n && ~/n/bin/n -d 10.10.0 \\\n && ~/n/bin/n -d 10.14.2 \\\n && ~/n/bin/n -d $NODE6_VERSION \\\n && ~/n/bin/n -d $NODE8_VERSION \\\n && ~/n/bin/n -d $NODE10_VERSION \\\n && mv /usr/local/n/versions/node /opt/nodejs \\\n && rm -rf /usr/local/n ~/n\nRUN set -e \\\n && for ver in `ls /opt/nodejs `; do nodeModulesDir=\"/opt/nodejs/$ver/lib/node_modules\" ;npm_ver=`jq -r .version $nodeModulesDir/npm/package.json ` ;if [ ! \"$npm_ver\" = \"${npm_ver#6.}\" ] ; then echo \"Upgrading node $ver's npm version from $npm_ver to 6.9.0\" ;cd $nodeModulesDir ;PATH=\"/opt/nodejs/$ver/bin:$PATH\" \"$nodeModulesDir/npm/bin/npm-cli.js\" install npm@6.9.0 ;echo ; fi ; done\nRUN set -ex \\\n && for ver in `ls /opt/nodejs `; do npm_ver=`jq -r .version /opt/nodejs/$ver/lib/node_modules/npm/package.json ` ;if [ ! -d /opt/npm/$npm_ver ] ; then mkdir -p /opt/npm/$npm_ver ;ln -s /opt/nodejs/$ver/lib/node_modules /opt/npm/$npm_ver/node_modules ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npm /opt/npm/$npm_ver/npm ;if [ -e /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ] ; then chmod +x /opt/nodejs/$ver/lib/node_modules/npm/bin/npx ;ln -s /opt/nodejs/$ver/lib/node_modules/npm/bin/npx /opt/npm/$npm_ver/npx ; fi ; fi ; done\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && GPG_KEY=6A010C5166006599AA17F08146C2130DFD2497F5 \\\n && for i in {1..5}; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" || gpg --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$GPG_KEY\" ;if [ $? -eq 0 ] ; then break ; fi ; done \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz\" \\\n && curl -fsSLO --compressed \"https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc\" \\\n && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \\\n && mkdir -p /opt/yarn \\\n && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn \\\n && mv /opt/yarn/yarn-v$YARN_VERSION /opt/yarn/$YARN_VERSION \\\n && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz\nRUN set -ex \\\n && ln -s 4.4.7 /opt/nodejs/4.4 \\\n && ln -s 4.5.0 /opt/nodejs/4.5 \\\n && ln -s 4.8.0 /opt/nodejs/4.8 \\\n && ln -s 4.8 /opt/nodejs/4 \\\n && ln -s 6.2.2 /opt/nodejs/6.2 \\\n && ln -s 6.6.0 /opt/nodejs/6.6 \\\n && ln -s 6.9.3 /opt/nodejs/6.9 \\\n && ln -s 6.10.3 /opt/nodejs/6.10 \\\n && ln -s 6.11.0 /opt/nodejs/6.11 \\\n && ln -s 8.0.0 /opt/nodejs/8.0 \\\n && ln -s 8.1.4 /opt/nodejs/8.1 \\\n && ln -s 8.2.1 /opt/nodejs/8.2 \\\n && ln -s 8.8.1 /opt/nodejs/8.8 \\\n && ln -s 8.9.4 /opt/nodejs/8.9 \\\n && ln -s 8.11.2 /opt/nodejs/8.11 \\\n && ln -s 8.12.0 /opt/nodejs/8.12 \\\n && ln -s 8.15.1 /opt/nodejs/8.15 \\\n && ln -s 9.4.0 /opt/nodejs/9.4 \\\n && ln -s 9.4 /opt/nodejs/9 \\\n && ln -s 10.1.0 /opt/nodejs/10.1 \\\n && ln -s 10.10.0 /opt/nodejs/10.10 \\\n && ln -s 10.14.2 /opt/nodejs/10.14 \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $NODE6_VERSION /opt/nodejs/$NODE6_MAJOR_MINOR_VERSION \\\n && ln -s $NODE6_MAJOR_MINOR_VERSION /opt/nodejs/6 \\\n && ln -s $NODE8_VERSION /opt/nodejs/$NODE8_MAJOR_MINOR_VERSION \\\n && ln -s $NODE8_MAJOR_MINOR_VERSION /opt/nodejs/8 \\\n && ln -s $NODE10_VERSION /opt/nodejs/$NODE10_MAJOR_MINOR_VERSION \\\n && ln -s $NODE10_MAJOR_MINOR_VERSION /opt/nodejs/10 \\\n && ln -s 10 /opt/nodejs/lts\nRUN set -ex \\\n && ln -s 2.15.9 /opt/npm/2.15 \\\n && ln -s 2.15 /opt/npm/2 \\\n && ln -s 3.9.5 /opt/npm/3.9 \\\n && ln -s 3.10.10 /opt/npm/3.10 \\\n && ln -s 3.10 /opt/npm/3 \\\n && ln -s 5.0.3 /opt/npm/5.0 \\\n && ln -s 5.3.0 /opt/npm/5.3 \\\n && ln -s 5.4.2 /opt/npm/5.4 \\\n && ln -s 5.6.0 /opt/npm/5.6 \\\n && ln -s 5.6 /opt/npm/5 \\\n && ln -s 6.9.0 /opt/npm/6.9 \\\n && ln -s 6.9 /opt/npm/6 \\\n && ln -s 6 /opt/npm/latest\nRUN set -ex \\\n && . /tmp/__nodeVersions.sh \\\n && ln -s $YARN_VERSION /opt/yarn/stable \\\n && ln -s $YARN_VERSION /opt/yarn/latest \\\n && ln -s $YARN_VERSION /opt/yarn/$YARN_MINOR_VERSION \\\n && ln -s $YARN_MINOR_VERSION /opt/yarn/$YARN_MAJOR_VERSION\nRUN set -ex \\\n && mkdir -p /links \\\n && cp -s /opt/nodejs/lts/bin/* /links \\\n && cp -s /opt/yarn/stable/bin/yarn /opt/yarn/stable/bin/yarnpkg /links\n#  ##\n#   Python intermediate stages\n#   Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n#  ##\nFROM mcr.microsoft.com/oryx/python-build-base:2.7-${PYTHON_BASE_TAG} AS py27-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.6-${PYTHON_BASE_TAG} AS py36-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.7-${PYTHON_BASE_TAG} AS py37-build-base\nFROM mcr.microsoft.com/oryx/python-build-base:3.8-${PYTHON_BASE_TAG} AS py38-build-base\n#  ##\n#   End Python intermediate stages\n#  ##\nFROM main AS python\n#   It's not clear whether these are needed at runtime...\nRUN apt-get update \\\n && apt-get install --no-install-recommends tk-dev uuid-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   https://github.com/docker-library/python/issues/147\nENV PYTHONIOENCODING=\"UTF-8\"\nCOPY build/__pythonVersions.sh /tmp\nCOPY --from=py27-build-base /opt /opt\nCOPY --from=py36-build-base /opt /opt\nCOPY --from=py37-build-base /opt /opt\nCOPY --from=py38-build-base /opt /opt\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && [ -d \"/opt/python/$PYTHON27_VERSION\" ] \\\n && echo /opt/python/$PYTHON27_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON36_VERSION\" ] \\\n && echo /opt/python/$PYTHON36_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON37_VERSION\" ] \\\n && echo /opt/python/$PYTHON37_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && [ -d \"/opt/python/$PYTHON38_VERSION\" ] \\\n && echo /opt/python/$PYTHON38_VERSION/lib >> /etc/ld.so.conf.d/python.conf \\\n && ldconfig\n#   The link from PYTHON38_VERSION to 3.8.0 exists because \"3.8.0b1\" isn't a valid SemVer string.\nRUN . /tmp/__pythonVersions.sh \\\n && set -ex \\\n && ln -s $PYTHON27_VERSION /opt/python/2.7 \\\n && ln -s 2.7 /opt/python/2 \\\n && ln -s $PYTHON36_VERSION /opt/python/3.6 \\\n && ln -s $PYTHON37_VERSION /opt/python/latest \\\n && ln -s $PYTHON37_VERSION /opt/python/3.7 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8.0 \\\n && ln -s $PYTHON38_VERSION /opt/python/3.8 \\\n && ln -s 3.7 /opt/python/3\nRUN set -ex \\\n && cd /usr/local/bin \\\n && cp -sn /opt/python/2/bin/* . \\\n && cp -sn /opt/python/3/bin/* . \\\n && ln -sf /opt/python/2/bin/python python\n#   This stage is used only when building locally\nFROM dotnet-install AS buildscriptbuilder\nCOPY src/BuildScriptGenerator /usr/oryx/src/BuildScriptGenerator\nCOPY src/BuildScriptGeneratorCli /usr/oryx/src/BuildScriptGeneratorCli\nCOPY src/Common /usr/oryx/src/Common\nCOPY build/FinalPublicKey.snk usr/oryx/build/\nCOPY src/CommonFiles /usr/oryx/src/CommonFiles\n#   This statement copies signed oryx binaries from during agent build.\n#   For local/dev contents of blank/empty directory named binaries are getting copied\nCOPY binaries /opt/buildscriptgen/\nWORKDIR /usr/oryx/src\nARG GIT_COMMIT=unspecified\nARG AGENTBUILD=${AGENTBUILD}\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\nRUN if [ -z \"$AGENTBUILD\" ] ; then dotnet publish -r linux-x64 -o /opt/buildscriptgen/ -c Release BuildScriptGeneratorCli/BuildScriptGeneratorCli.csproj ; fi\nRUN chmod a+x /opt/buildscriptgen/GenerateBuildScript\n#  ##\n#   PHP intermediate stages\n#   Docker doesn't support variables in `COPY --from`, so we're using intermediate stages\n#  ##\nFROM mcr.microsoft.com/oryx/php-build-base:5.6-${PHP_BUILD_BASE_TAG} AS php56-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.0-${PHP_BUILD_BASE_TAG} AS php70-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.2-${PHP_BUILD_BASE_TAG} AS php72-build-base\nFROM mcr.microsoft.com/oryx/php-build-base:7.3-${PHP_BUILD_BASE_TAG} AS php73-build-base\n#  ##\n#   End PHP intermediate stages\n#  ##\n#  ##\n#   Build run script generators (to be used by the `oryx run-script` command)\n#  ##\nFROM golang:1.11-stretch AS startupScriptGens\n#   GOPATH is set to \"/go\" in the base image\nWORKDIR /go/src\nCOPY src/startupscriptgenerator/src .\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nENV GIT_COMMIT=\"${GIT_COMMIT}\"\nENV BUILD_NUMBER=\"${BUILD_NUMBER}\"\nRUN ./build.sh dotnetcore /opt/startupcmdgen/dotnet\nRUN ./build.sh node /opt/startupcmdgen/nodejs\nRUN ./build.sh php /opt/startupcmdgen/php\nRUN ./build.sh python /opt/startupcmdgen/python\n#  ##\n#   End build run script generators\n#  ##\nFROM python AS final\nWORKDIR /\nCOPY images/build/benv.sh /usr/local/bin/benv\nRUN chmod +x /usr/local/bin/benv\n#   Copy .NET Core related content\nENV NUGET_XMLDOC_MODE=\"skip\" \\\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"1\" \\\n    NUGET_PACKAGES=\"/var/nuget\"\nCOPY --from=dotnet-install /opt/dotnet /opt/dotnet\nCOPY --from=dotnet-install /var/nuget /var/nuget\nCOPY --from=dotnet-install /usr/local/bin /usr/local/bin\n#   Grant read-write permissions to the nuget folder so that dotnet restore\n#   can write into it.\nRUN chmod a+rw /var/nuget\n#   Copy NodeJs, NPM and Yarn related content\nCOPY --from=node-install /opt /opt\nCOPY --from=node-install /links/ /usr/local/bin\nCOPY --from=mcr.microsoft.com/oryx/build-yarn-cache:20190326.8 /usr/local/share/yarn-cache /usr/local/share/yarn-cache\n#   Copy PHP versions\nCOPY images/build/php/prereqs/installPrereqs.sh /tmp/php/installPrereqs.sh\nRUN . /tmp/php/installPrereqs.sh\nCOPY --from=php56-build-base /opt /opt\nCOPY --from=php70-build-base /opt /opt\nCOPY --from=php72-build-base /opt /opt\nCOPY --from=php73-build-base /opt /opt\nRUN ln -s /opt/php/5.6 /opt/php/5 \\\n && ln -s /opt/php/7.3 /opt/php/7 \\\n && ln -s /opt/php/7 /opt/php/lts \\\n && ln -s /opt/php/lts/bin/php /usr/local/bin/php\n#   Build script generator content. Docker doesn't support variables in --from\n#   so we are building an extra stage to copy binaries from correct build stage\nCOPY --from=buildscriptbuilder /opt/buildscriptgen/ /opt/buildscriptgen/\nRUN ln -s /opt/buildscriptgen/GenerateBuildScript /usr/local/bin/oryx\n#   Oryx depends on the run script generators for most of its\n#   `IProgrammingPlatform.GenerateBashRunScript()` implementations\nCOPY --from=startupScriptGens /opt/startupcmdgen/ /opt/startupcmdgen/\n#   Bake Application Insights key from pipeline variable into final image\nARG AI_KEY\nENV ORYX_AI_INSTRUMENTATION_KEY=\"${AI_KEY}\"\nARG GIT_COMMIT=unspecified\nARG BUILD_NUMBER=unspecified\nLABEL com.microsoft.oryx.git-commit=\"${GIT_COMMIT}\"\nLABEL com.microsoft.oryx.build-number=\"${BUILD_NUMBER}\"\nENTRYPOINT [\"benv\"]\n","originalDockerfileUglifiedHash":"7e6cbb1ff273a00f2717b29e9c2b0263","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/24854082ddb9d404ec07e99cbad180f03d3d99cf.dockerfile"}