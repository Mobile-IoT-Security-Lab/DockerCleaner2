{"seed":4272061746,"processedDockerfileHash":"adbcdd6ef21666addb23cdc1cbb05999","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG FROM_TAG=3.29-1-alpine\nFROM jenkins/jnlp-slave:${FROM_TAG}\nARG GOSU_VERSION=1.11\nARG DOCKER_CHANNEL=stable\nARG DOCKER_VERSION=18.09.6\nARG TINY_VERSION=0.18.0\n#  #########################################\n#   Alpine GLIBC ONLY\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.29-r0\nARG GCC_LIBS=gcc-libs-8.3.0-1-x86_64.pkg.tar.xz\nARG GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/${GCC_LIBS}\nARG ZLIB_URL_ENCODED=\"zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB=\"zlib-1:1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/${ZLIB_URL_ENCODED}\nARG ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\"\n#  #########################################\nUSER root\nRUN if [ -f /etc/alpine-release ] ; then cd /tmp \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add wget curl ca-certificates binutils gnupg --no-cache --virtual=.build-dependencies \\\n && echo \"-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m 1QIDAQAB -----END PUBLIC KEY-----\" | sed 's/ */\\n/g' > \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q ${GCC_LIBS_URL} ${GCC_LIBS_URL}.sig \\\n && mkdir /tmp/gcc \\\n && tar -xf \"${GCC_LIBS}\" -C /tmp/gcc \\\n && mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \\\n && strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \\\n && mkdir /tmp/libz \\\n && wget -q \"${ZLIB_URL}\" \"${ZLIB_URL}.sig\" \\\n && tar -xf \"${ZLIB}\" -C /tmp/libz \\\n && mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \\\n && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && echo \"export LANG=en_US.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/${ZLIB} /tmp/libz /tmp/${GCC_LIBS} /var/cache/apk/* ; elif [ -f /etc/debian_version ] ; then echo \"Debian, setting locales\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends locales -y \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/* ; fi\nENV LANG=\"en_US.UTF-8\"\nRUN echo \"Installing required packages\" ; if [ -f /etc/alpine-release ] ; then apk add curl shadow iptables --no-cache ; elif [ -f /etc/debian_version ] ; then apt-get update \\\n && apt-get install --no-install-recommends curl iptables -y \\\n && rm -rf /var/lib/apt/lists/* ; fi\nRUN echo \"Installing tiny and gosu\" ; curl -SsLo /usr/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 \\\n && chmod +x /usr/bin/gosu \\\n && curl -SsLo /usr/bin/tiny https://github.com/krallin/tini/releases/download/v${TINY_VERSION}/tini-amd64 \\\n && chmod +x /usr/bin/tiny\nRUN echo \"Installing docker\" ; curl -Ssl \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" | tar -xz --strip-components 1 --directory /usr/bin/\nRUN echo \"Installing docker-compose\" ; if [ -f /etc/alpine-release ] ; then apk add python3 --no-cache \\\n && apk add python3-dev libffi-dev openssl-dev gcc libc-dev make --no-cache --virtual .build-deps \\\n && pip3 install --upgrade --no-cache-dir pip \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apk del .build-deps ; elif [ -f /etc/debian_version ] ; then buildDeps=\"python3-dev libffi-dev gcc make\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip python3-setuptools -y \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps \\\n && rm -rf /var/lib/apt/lists/* ; fi\nCOPY entrypoint.sh /entrypoint.sh\n#  # https://github.com/docker-library/docker/blob/fe2ca76a21fdc02cbb4974246696ee1b4a7839dd/18.06/modprobe.sh\nCOPY modprobe.sh /usr/local/bin/modprobe\n#  # https://github.com/jpetazzo/dind/blob/72af271b1af90f6e2a4c299baa53057f76df2fe0/wrapdocker\nCOPY wrapdocker.sh /usr/local/bin/wrapdocker\nVOLUME /var/lib/docker\nENTRYPOINT [\"tiny\", \"--\", \"/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG FROM_TAG=3.29-1-alpine\nFROM jenkins/jnlp-slave:${FROM_TAG}\nARG GOSU_VERSION=1.11\nARG DOCKER_CHANNEL=stable\nARG DOCKER_VERSION=18.09.6\nARG TINY_VERSION=0.18.0\n# #########################################\n#  Alpine GLIBC ONLY\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.29-r0\nARG GCC_LIBS=gcc-libs-8.3.0-1-x86_64.pkg.tar.xz\nARG GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/${GCC_LIBS}\nARG ZLIB_URL_ENCODED=\"zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB=\"zlib-1:1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/${ZLIB_URL_ENCODED}\nARG ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\"\n# #########################################\nUSER root\nRUN if [ -f /etc/alpine-release ] ; then cd /tmp \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget curl ca-certificates binutils gnupg \\\n && echo \"-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m 1QIDAQAB -----END PUBLIC KEY-----\" | sed 's/ */\\n/g' > \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q ${GCC_LIBS_URL} ${GCC_LIBS_URL}.sig \\\n && mkdir /tmp/gcc \\\n && tar -xf \"${GCC_LIBS}\" -C /tmp/gcc \\\n && mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \\\n && strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \\\n && mkdir /tmp/libz \\\n && wget -q \"${ZLIB_URL}\" \"${ZLIB_URL}.sig\" \\\n && tar -xf \"${ZLIB}\" -C /tmp/libz \\\n && mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \\\n && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && echo \"export LANG=en_US.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/${ZLIB} /tmp/libz /tmp/${GCC_LIBS} /var/cache/apk/* ; elif [ -f /etc/debian_version ] ; then echo \"Debian, setting locales\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends locales -y \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/* ; fi\nENV LANG=\"en_US.UTF-8\"\nRUN echo \"Installing required packages\" ; if [ -f /etc/alpine-release ] ; then apk add --no-cache curl shadow iptables ; elif [ -f /etc/debian_version ] ; then apt-get update \\\n && apt-get install --no-install-recommends curl iptables -y \\\n && rm -rf /var/lib/apt/lists/* ; fi\nRUN echo \"Installing tiny and gosu\" ; curl -SsLo /usr/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 \\\n && chmod +x /usr/bin/gosu \\\n && curl -SsLo /usr/bin/tiny https://github.com/krallin/tini/releases/download/v${TINY_VERSION}/tini-amd64 \\\n && chmod +x /usr/bin/tiny\nRUN echo \"Installing docker\" ; curl -Ssl \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" | tar -xz --strip-components 1 --directory /usr/bin/\nRUN echo \"Installing docker-compose\" ; if [ -f /etc/alpine-release ] ; then apk add --no-cache python3 \\\n && apk add --no-cache --virtual .build-deps python3-dev libffi-dev openssl-dev gcc libc-dev make \\\n && pip3 install --upgrade --no-cache-dir pip \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apk del .build-deps ; elif [ -f /etc/debian_version ] ; then buildDeps=\"python3-dev libffi-dev gcc make\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip python3-setuptools -y \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps \\\n && rm -rf /var/lib/apt/lists/* ; fi\nCOPY entrypoint.sh /entrypoint.sh\n# # https://github.com/docker-library/docker/blob/fe2ca76a21fdc02cbb4974246696ee1b4a7839dd/18.06/modprobe.sh\nCOPY modprobe.sh /usr/local/bin/modprobe\n# # https://github.com/jpetazzo/dind/blob/72af271b1af90f6e2a4c299baa53057f76df2fe0/wrapdocker\nCOPY wrapdocker.sh /usr/local/bin/wrapdocker\nVOLUME /var/lib/docker\nENTRYPOINT [\"tiny\", \"--\", \"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"1bed4c56b1b234f94872e1a5fea27d32","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG FROM_TAG=3.29-1-alpine\nFROM jenkins/jnlp-slave:${FROM_TAG}\nARG GOSU_VERSION=1.11\nARG DOCKER_CHANNEL=stable\nARG DOCKER_VERSION=18.09.6\nARG TINY_VERSION=0.18.0\n#  #########################################\n#   Alpine GLIBC ONLY\nARG ALPINE_GLIBC_PACKAGE_VERSION=2.29-r0\nARG GCC_LIBS=gcc-libs-8.3.0-1-x86_64.pkg.tar.xz\nARG GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/${GCC_LIBS}\nARG ZLIB_URL_ENCODED=\"zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB=\"zlib-1:1.2.11-3-x86_64.pkg.tar.xz\"\nARG ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/${ZLIB_URL_ENCODED}\nARG ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\"\n#  #########################################\nUSER root\nRUN if [ -f /etc/alpine-release ] ; then cd /tmp \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget curl ca-certificates binutils gnupg \\\n && echo \"-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m 1QIDAQAB -----END PUBLIC KEY-----\" | sed 's/ */\\n/g' > \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget -q ${GCC_LIBS_URL} ${GCC_LIBS_URL}.sig \\\n && mkdir /tmp/gcc \\\n && tar -xf \"${GCC_LIBS}\" -C /tmp/gcc \\\n && mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \\\n && strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \\\n && mkdir /tmp/libz \\\n && wget -q \"${ZLIB_URL}\" \"${ZLIB_URL}.sig\" \\\n && tar -xf \"${ZLIB}\" -C /tmp/libz \\\n && mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \\\n && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && echo \"export LANG=en_US.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/${ZLIB} /tmp/libz /tmp/${GCC_LIBS} /var/cache/apk/* ; elif [ -f /etc/debian_version ] ; then echo \"Debian, setting locales\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends locales -y \\\n && localedef -i en_US -f UTF-8 en_US.UTF-8 \\\n && rm -rf /var/lib/apt/lists/* ; fi\nENV LANG=\"en_US.UTF-8\"\nRUN echo \"Installing required packages\" ; if [ -f /etc/alpine-release ] ; then apk add --no-cache curl shadow iptables ; elif [ -f /etc/debian_version ] ; then apt-get update \\\n && apt-get install --no-install-recommends curl iptables -y \\\n && rm -rf /var/lib/apt/lists/* ; fi\nRUN echo \"Installing tiny and gosu\" ; curl -SsLo /usr/bin/gosu https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64 \\\n && chmod +x /usr/bin/gosu \\\n && curl -SsLo /usr/bin/tiny https://github.com/krallin/tini/releases/download/v${TINY_VERSION}/tini-amd64 \\\n && chmod +x /usr/bin/tiny\nRUN echo \"Installing docker\" ; curl -Ssl \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" | tar -xz --strip-components 1 --directory /usr/bin/\nRUN echo \"Installing docker-compose\" ; if [ -f /etc/alpine-release ] ; then apk add --no-cache python3 \\\n && apk add --no-cache --virtual .build-deps python3-dev libffi-dev openssl-dev gcc libc-dev make \\\n && pip3 install --upgrade --no-cache-dir pip \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apk del .build-deps ; elif [ -f /etc/debian_version ] ; then buildDeps=\"python3-dev libffi-dev gcc make\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip python3-setuptools -y \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && pip3 install --upgrade --no-cache-dir docker-compose \\\n && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps \\\n && rm -rf /var/lib/apt/lists/* ; fi\nCOPY entrypoint.sh /entrypoint.sh\n#  # https://github.com/docker-library/docker/blob/fe2ca76a21fdc02cbb4974246696ee1b4a7839dd/18.06/modprobe.sh\nCOPY modprobe.sh /usr/local/bin/modprobe\n#  # https://github.com/jpetazzo/dind/blob/72af271b1af90f6e2a4c299baa53057f76df2fe0/wrapdocker\nCOPY wrapdocker.sh /usr/local/bin/wrapdocker\nVOLUME /var/lib/docker\nENTRYPOINT [\"tiny\", \"--\", \"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"a9a2150dc1d03e86ccceacc6a00f06ba","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/658ec3c70127e5eddb4f92e0defacc2f0f0333ba.dockerfile"}