{"seed":4180640202,"processedDockerfileHash":"298c4ac6c7e04c9edda9bbf4b58b1522","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-devel-centos7\n#   MKL\nRUN mkdir -p /opt/intel/lib\nCOPY mkl_libs/libmkl_core.a /opt/intel/lib/libmkl_core.a\nCOPY mkl_libs/libmkl_gnu_thread.a /opt/intel/lib/libmkl_gnu_thread.a\nCOPY mkl_libs/libmkl_intel_lp64.a /opt/intel/lib/libmkl_intel_lp64.a\nCOPY mkl_libs/include /opt/intel/\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl util-linux xz bzip2 git patch which perl\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\n#   EPEL for cmake\nRUN wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && rpm -ivh epel-release-latest-7.noarch.rpm \\\n && rm -f epel-release-latest-7.noarch.rpm\n#   cmake\nRUN yum install -y cmake3 \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake\n#   build python\nCOPY build_scripts /build_scripts\nRUN bash build_scripts/build.sh \\\n && rm -r build_scripts\nENV SSL_CERT_FILE=\"/opt/_internal/certs.pem\"\n#   remove unncessary python versions\nRUN rm -rf /opt/python/cp26-cp26m /opt/_internal/cpython-2.6.9-ucs2\nRUN rm -rf /opt/python/cp26-cp26mu /opt/_internal/cpython-2.6.9-ucs4\nRUN rm -rf /opt/python/cp33-cp33m /opt/_internal/cpython-3.3.6\nRUN rm -rf /opt/python/cp34-cp34m /opt/_internal/cpython-3.4.6\n#   install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#   install CUDA 10.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   magma\nRUN wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.5.0.tar.gz \\\n && tar -xvf magma-2.5.0.tar.gz \\\n && cd magma-2.5.0 \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/cmakelists.patch \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/thread_queue.patch \\\n && patch < cmakelists.patch \\\n && patch -p0 < thread_queue.patch \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DUSE_FORTRAN=OFF -DGPU_TARGET=\"All\" -DCMAKE_INSTALL_PREFIX=$PREFIX \\\n && make -j$( getconf _NPROCESSORS_CONF ;) \\\n && make install \\\n && cd ..\nRUN rm -f /usr/local/bin/patchelf\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n#  ####################################################################################\n#   CUDA 10.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#   curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-devel-centos7\n#  MKL\nRUN mkdir -p /opt/intel/lib\nCOPY mkl_libs/libmkl_core.a /opt/intel/lib/libmkl_core.a\nCOPY mkl_libs/libmkl_gnu_thread.a /opt/intel/lib/libmkl_gnu_thread.a\nCOPY mkl_libs/libmkl_intel_lp64.a /opt/intel/lib/libmkl_intel_lp64.a\nCOPY mkl_libs/include /opt/intel/\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl util-linux xz bzip2 git patch which perl\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\n#  EPEL for cmake\nRUN wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && rpm -ivh epel-release-latest-7.noarch.rpm \\\n && rm -f epel-release-latest-7.noarch.rpm\n#  cmake\nRUN yum install -y cmake3 \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake\n#  build python\nCOPY build_scripts /build_scripts\nRUN bash build_scripts/build.sh \\\n && rm -r build_scripts\nENV SSL_CERT_FILE=\"/opt/_internal/certs.pem\"\n#  remove unncessary python versions\nRUN rm -rf /opt/python/cp26-cp26m /opt/_internal/cpython-2.6.9-ucs2\nRUN rm -rf /opt/python/cp26-cp26mu /opt/_internal/cpython-2.6.9-ucs4\nRUN rm -rf /opt/python/cp33-cp33m /opt/_internal/cpython-3.3.6\nRUN rm -rf /opt/python/cp34-cp34m /opt/_internal/cpython-3.4.6\n#  install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#  install CUDA 10.0 CuDNN\n#  cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#  magma\nRUN wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.5.0.tar.gz \\\n && tar -xvf magma-2.5.0.tar.gz \\\n && cd magma-2.5.0 \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/cmakelists.patch \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/thread_queue.patch \\\n && patch < cmakelists.patch \\\n && patch -p0 < thread_queue.patch \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DUSE_FORTRAN=OFF -DGPU_TARGET=\"All\" -DCMAKE_INSTALL_PREFIX=$PREFIX \\\n && make -j$( getconf _NPROCESSORS_CONF ;) \\\n && make install \\\n && cd ..\nRUN rm -f /usr/local/bin/patchelf\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n# ####################################################################################\n#  CUDA 10.0 prune static libs\n# ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#  all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#  curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#  prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n","injectedSmells":[],"originalDockerfileHash":"2a73bc7659de70459f463da6f92f81ca","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-devel-centos7\n#   MKL\nRUN mkdir -p /opt/intel/lib\nCOPY mkl_libs/libmkl_core.a /opt/intel/lib/libmkl_core.a\nCOPY mkl_libs/libmkl_gnu_thread.a /opt/intel/lib/libmkl_gnu_thread.a\nCOPY mkl_libs/libmkl_intel_lp64.a /opt/intel/lib/libmkl_intel_lp64.a\nCOPY mkl_libs/include /opt/intel/\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nRUN yum install -y wget curl perl util-linux xz bzip2 git patch which perl\nRUN yum install -y yum-utils centos-release-scl\nRUN yum-config-manager --enable rhel-server-rhscl-7-rpms\nRUN yum install -y devtoolset-3-gcc devtoolset-3-gcc-c++ devtoolset-3-gcc-gfortran devtoolset-3-binutils\nENV PATH=\"/opt/rh/devtoolset-3/root/usr/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH\"\n#   EPEL for cmake\nRUN wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && rpm -ivh epel-release-latest-7.noarch.rpm \\\n && rm -f epel-release-latest-7.noarch.rpm\n#   cmake\nRUN yum install -y cmake3 \\\n && ln -s /usr/bin/cmake3 /usr/bin/cmake\n#   build python\nCOPY build_scripts /build_scripts\nRUN bash build_scripts/build.sh \\\n && rm -r build_scripts\nENV SSL_CERT_FILE=\"/opt/_internal/certs.pem\"\n#   remove unncessary python versions\nRUN rm -rf /opt/python/cp26-cp26m /opt/_internal/cpython-2.6.9-ucs2\nRUN rm -rf /opt/python/cp26-cp26mu /opt/_internal/cpython-2.6.9-ucs4\nRUN rm -rf /opt/python/cp33-cp33m /opt/_internal/cpython-3.3.6\nRUN rm -rf /opt/python/cp34-cp34m /opt/_internal/cpython-3.4.6\n#   install CUDA 10.0 in the same container\nRUN wget -q https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux \\\n && chmod +x cuda_10.0.130_410.48_linux \\\n && ./cuda_10.0.130_410.48_linux --silent --no-opengl-libs --toolkit \\\n && rm -f cuda_10.0.130_410.48_linux\n#   install CUDA 10.0 CuDNN\n#   cuDNN license: https://developer.nvidia.com/cudnn/license_agreement\nRUN mkdir tmp_cudnn \\\n && cd tmp_cudnn \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && wget -q http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && ar -x libcudnn7-dev_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && ar -x libcudnn7_7.5.1.10-1+cuda10.0_amd64.deb \\\n && tar -xvf data.tar.xz \\\n && mkdir -p cuda/include \\\n && mkdir -p cuda/lib64 \\\n && cp -a usr/include/x86_64-linux-gnu/cudnn_v7.h cuda/include/cudnn.h \\\n && cp -a usr/lib/x86_64-linux-gnu/libcudnn* cuda/lib64 \\\n && mv cuda/lib64/libcudnn_static_v7.a cuda/lib64/libcudnn_static.a \\\n && ln -s libcudnn.so.7 cuda/lib64/libcudnn.so \\\n && chmod +x cuda/lib64/*.so \\\n && cp -a cuda/include/* /usr/local/cuda/include/ \\\n && cp -a cuda/lib64/* /usr/local/cuda/lib64/ \\\n && cd .. \\\n && rm -rf tmp_cudnn \\\n && ldconfig\n#   magma\nRUN wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.5.0.tar.gz \\\n && tar -xvf magma-2.5.0.tar.gz \\\n && cd magma-2.5.0 \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/cmakelists.patch \\\n && wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda100-2.5.0/thread_queue.patch \\\n && patch < cmakelists.patch \\\n && patch -p0 < thread_queue.patch \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DUSE_FORTRAN=OFF -DGPU_TARGET=\"All\" -DCMAKE_INSTALL_PREFIX=$PREFIX \\\n && make -j$( getconf _NPROCESSORS_CONF ;) \\\n && make install \\\n && cd ..\nRUN rm -f /usr/local/bin/patchelf\nRUN git clone https://github.com/NixOS/patchelf \\\n && cd patchelf \\\n && sed -i 's/serial/parallel/g' configure.ac \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf patchelf\n#  ####################################################################################\n#   CUDA 10.0 prune static libs\n#  ####################################################################################\nARG NVPRUNE=\"/usr/local/cuda-10.0/bin/nvprune\"\nARG CUDA_LIB_DIR=\"/usr/local/cuda-10.0/lib64\"\nARG GENCODE=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\nARG GENCODE_CUDNN=\"-gencode arch=compute_35,code=sm_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75\"\n#   all CUDA libs except CuDNN and CuBLAS (cudnn and cublas need arch 3.7 included)\n#   curand cannot be pruned, as there's a bug in 10.0 + curand_static + nvprune. Filed with nvidia at 2460767\nRUN ls $CUDA_LIB_DIR/ | grep \"\\.a\" | grep -v \"culibos\" | grep -v \"cudart\" | grep -v \"cudnn\" | grep -v \"cublas\" | grep -v \"metis\" | grep -v \"curand\" | xargs -I {} bash -c \"echo {} \\\n && $NVPRUNE $GENCODE $CUDA_LIB_DIR/{} -o $CUDA_LIB_DIR/{}\"\n#   prune CuDNN and CuBLAS\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcudnn_static.a -o $CUDA_LIB_DIR/libcudnn_static.a\nRUN $NVPRUNE $GENCODE_CUDNN $CUDA_LIB_DIR/libcublas_static.a -o $CUDA_LIB_DIR/libcublas_static.a\n","originalDockerfileUglifiedHash":"aee1f5e5d94556a7e0e9859a31c8c7f2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c89d7137ddff4c4d6ed1aab792b379645d77607a.dockerfile"}