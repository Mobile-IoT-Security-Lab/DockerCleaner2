{"seed":4238224768,"processedDockerfileHash":"66e05a326eb70f71774560f100fec822","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM 32bit/ubuntu:16.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Tools\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb http://download.mono-project.com/repo/ubuntu xenial main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends ant build-essential default-jdk doxygen gdb git gksu gtk-sharp2 iputils-tracepath libcanberra-gtk-module:i386 libgtk2.0-0 mono-complete mosquitto mosquitto-clients npm python-pip python-serial rlwrap screen srecord uml-utilities unzip wget -qq -y > /dev/null \\\n && apt-get -qq clean\n#   Install coap-cli\nRUN npm install coap-cli@0.11.1 -q -g \\\n && sudo ln -s /usr/bin/nodejs /usr/bin/node\n#   Install ARM toolchain\nRUN wget -nv https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 \\\n && tar xjf gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/gcc-arm-none-eabi-5_2-2015q4/* /usr/local/ \\\n && rm -rf /tmp/gcc-arm-none-eabi-* gcc-arm-none-eabi-*-linux.tar.bz2\n#   Install msp430 toolchain\nRUN wget -nv http://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 \\\n && tar xjf mspgcc*.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/msp430/* /usr/local/ \\\n && rm -rf /tmp/msp430 mspgcc*.tar.bz2\n#   Install NXP toolchain (partial, with binaries excluded. Download from nxp.com)\nRUN wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 \\\n && mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc \\\n && tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk \\\n && tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc \\\n && tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc \\\n && cp -f -r /tmp/jn516x-sdk /usr/ \\\n && cp -f -r /tmp/ba-elf-gcc /usr/ \\\n && rm -rf jn516x*.bz2 ba-elf-gcc*.bz2 /tmp/ba-elf-gcc* /tmp/jn516x-sdk*\nENV PATH=\"/usr/ba-elf-gcc/bin:${PATH}\"\n#  # Install nRF52 SDK\nRUN wget -nv https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip \\\n && mkdir /usr/nrf52-sdk \\\n && unzip -q nrf5_iot_sdk_3288530.zip -d /usr/nrf52-sdk \\\n && rm nrf5_iot_sdk_3288530.zip\nENV NRF52_SDK_ROOT=\"/usr/nrf52-sdk\"\n#   Install sphinx and sphinx_rtd_theme, required for building and testing the\n#   readthedocs API documentation\nRUN pip install pip==23.1 -q --upgrade\nRUN pip install setuptools==67.6.1 -q \\\n && pip install sphinx_rtd_theme==1.2.0 sphinx==6.1.3 -q\n#   Create user, enable X forwarding, add to group dialout\n#   -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix\nRUN export uid=1000 gid=1000 \\\n && mkdir -p /home/user \\\n && echo \"user:x:${uid}:${gid}:user,,,:/home/user:/bin/bash\" >> /etc/passwd \\\n && echo \"user:x:${uid}:\" >> /etc/group \\\n && echo \"user ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers \\\n && chmod 0440 /etc/sudoers \\\n && chown ${uid}:${gid} -R /home/user \\\n && usermod -aG dialout user\n#   Set user for what comes next\nUSER user\n#   Environment variables\nENV JAVA_HOME=\"/usr/lib/jvm/default-java\"\nENV HOME=\"/home/user\"\nENV CONTIKI_NG=\"${HOME}/contiki-ng\"\nENV COOJA=\"${CONTIKI_NG}/tools/cooja\"\nENV PATH=\"${HOME}:${PATH}\"\nWORKDIR ${HOME}\n#   Create Cooja shortcut\nRUN echo \"#!/bin/bash\\nant -Dbasedir=${COOJA} -f ${COOJA}/build.xml run\" > ${HOME}/cooja \\\n && chmod +x ${HOME}/cooja\n#   Download, build and install Renode\nRUN git clone --quiet https://github.com/renode/renode.git \\\n && cd ${HOME}/renode \\\n && git checkout v1.3 \\\n && ./build.sh\nENV PATH=\"${HOME}/renode:${PATH}\"\n#   By default, we use a Docker bind mount to share the repo with the host,\n#   with Docker run option:\n#   -v <HOST_CONTIKI_NG_ABS_PATH>:/home/user/contiki-ng\n#   Alternatively, uncomment the next two lines to download Contiki-NG and pre-compile Cooja.\n#  RUN git clone --recursive https://github.com/contiki-ng/contiki-ng.git ${CONTIKI_NG}\n#  RUN ant -q -f ${CONTIKI_NG}/tools/cooja/build.xml jar\n#   Working directory\nWORKDIR ${CONTIKI_NG}\n#   Enable IPv6 -- must be done at runtime, hence added to .profile\nRUN echo \"sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null\" >> ${HOME}/.profile\n#   Start a bash\nCMD bash --login\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM 32bit/ubuntu:16.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Tools\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb http://download.mono-project.com/repo/ubuntu xenial main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends ant build-essential default-jdk doxygen gdb git gksu gtk-sharp2 iputils-tracepath libcanberra-gtk-module:i386 libgtk2.0-0 mono-complete mosquitto mosquitto-clients npm python-pip python-serial rlwrap screen srecord uml-utilities unzip wget -qq -y > /dev/null \\\n && apt-get -qq clean\n#  Install coap-cli\nRUN npm install coap-cli -q -g \\\n && sudo ln -s /usr/bin/nodejs /usr/bin/node\n#  Install ARM toolchain\nRUN wget -nv https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 \\\n && tar xjf gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/gcc-arm-none-eabi-5_2-2015q4/* /usr/local/ \\\n && rm -rf /tmp/gcc-arm-none-eabi-* gcc-arm-none-eabi-*-linux.tar.bz2\n#  Install msp430 toolchain\nRUN wget -nv http://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 \\\n && tar xjf mspgcc*.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/msp430/* /usr/local/ \\\n && rm -rf /tmp/msp430 mspgcc*.tar.bz2\n#  Install NXP toolchain (partial, with binaries excluded. Download from nxp.com)\nRUN wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 \\\n && mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc \\\n && tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk \\\n && tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc \\\n && tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc \\\n && cp -f -r /tmp/jn516x-sdk /usr/ \\\n && cp -f -r /tmp/ba-elf-gcc /usr/ \\\n && rm -rf jn516x*.bz2 ba-elf-gcc*.bz2 /tmp/ba-elf-gcc* /tmp/jn516x-sdk*\nENV PATH=\"/usr/ba-elf-gcc/bin:${PATH}\"\n# # Install nRF52 SDK\nRUN wget -nv https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip \\\n && mkdir /usr/nrf52-sdk \\\n && unzip -q nrf5_iot_sdk_3288530.zip -d /usr/nrf52-sdk \\\n && rm nrf5_iot_sdk_3288530.zip\nENV NRF52_SDK_ROOT=\"/usr/nrf52-sdk\"\n#  Install sphinx and sphinx_rtd_theme, required for building and testing the\n#  readthedocs API documentation\nRUN pip install pip -q --upgrade\nRUN pip install setuptools -q \\\n && pip install sphinx_rtd_theme sphinx -q\n#  Create user, enable X forwarding, add to group dialout\n#  -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix\nRUN export uid=1000 gid=1000 \\\n && mkdir -p /home/user \\\n && echo \"user:x:${uid}:${gid}:user,,,:/home/user:/bin/bash\" >> /etc/passwd \\\n && echo \"user:x:${uid}:\" >> /etc/group \\\n && echo \"user ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers \\\n && chmod 0440 /etc/sudoers \\\n && chown ${uid}:${gid} -R /home/user \\\n && usermod -aG dialout user\n#  Set user for what comes next\nUSER user\n#  Environment variables\nENV JAVA_HOME=\"/usr/lib/jvm/default-java\"\nENV HOME=\"/home/user\"\nENV CONTIKI_NG=\"${HOME}/contiki-ng\"\nENV COOJA=\"${CONTIKI_NG}/tools/cooja\"\nENV PATH=\"${HOME}:${PATH}\"\nWORKDIR ${HOME}\n#  Create Cooja shortcut\nRUN echo \"#!/bin/bash\\nant -Dbasedir=${COOJA} -f ${COOJA}/build.xml run\" > ${HOME}/cooja \\\n && chmod +x ${HOME}/cooja\n#  Download, build and install Renode\nRUN git clone --quiet https://github.com/renode/renode.git \\\n && cd ${HOME}/renode \\\n && git checkout v1.3 \\\n && ./build.sh\nENV PATH=\"${HOME}/renode:${PATH}\"\n#  By default, we use a Docker bind mount to share the repo with the host,\n#  with Docker run option:\n#  -v <HOST_CONTIKI_NG_ABS_PATH>:/home/user/contiki-ng\n#  Alternatively, uncomment the next two lines to download Contiki-NG and pre-compile Cooja.\n# RUN git clone --recursive https://github.com/contiki-ng/contiki-ng.git ${CONTIKI_NG}\n# RUN ant -q -f ${CONTIKI_NG}/tools/cooja/build.xml jar\n#  Working directory\nWORKDIR ${CONTIKI_NG}\n#  Enable IPv6 -- must be done at runtime, hence added to .profile\nRUN echo \"sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null\" >> ${HOME}/.profile\n#  Start a bash\nCMD bash --login\n","injectedSmells":[],"originalDockerfileHash":"cd93cef2528d6a39bd5cad28fc9e2d80","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM 32bit/ubuntu:16.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Tools\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF \\\n && echo \"deb http://download.mono-project.com/repo/ubuntu xenial main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends ant build-essential default-jdk doxygen gdb git gksu gtk-sharp2 iputils-tracepath libcanberra-gtk-module:i386 libgtk2.0-0 mono-complete mosquitto mosquitto-clients npm python-pip python-serial rlwrap screen srecord uml-utilities unzip wget -qq -y > /dev/null \\\n && apt-get -qq clean\n#   Install coap-cli\nRUN npm install coap-cli -q -g \\\n && sudo ln -s /usr/bin/nodejs /usr/bin/node\n#   Install ARM toolchain\nRUN wget -nv https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 \\\n && tar xjf gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/gcc-arm-none-eabi-5_2-2015q4/* /usr/local/ \\\n && rm -rf /tmp/gcc-arm-none-eabi-* gcc-arm-none-eabi-*-linux.tar.bz2\n#   Install msp430 toolchain\nRUN wget -nv http://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 \\\n && tar xjf mspgcc*.tar.bz2 -C /tmp/ \\\n && cp -f -r /tmp/msp430/* /usr/local/ \\\n && rm -rf /tmp/msp430 mspgcc*.tar.bz2\n#   Install NXP toolchain (partial, with binaries excluded. Download from nxp.com)\nRUN wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 \\\n && wget -nv http://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 \\\n && mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc \\\n && tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk \\\n && tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc \\\n && tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc \\\n && cp -f -r /tmp/jn516x-sdk /usr/ \\\n && cp -f -r /tmp/ba-elf-gcc /usr/ \\\n && rm -rf jn516x*.bz2 ba-elf-gcc*.bz2 /tmp/ba-elf-gcc* /tmp/jn516x-sdk*\nENV PATH=\"/usr/ba-elf-gcc/bin:${PATH}\"\n#  # Install nRF52 SDK\nRUN wget -nv https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip \\\n && mkdir /usr/nrf52-sdk \\\n && unzip -q nrf5_iot_sdk_3288530.zip -d /usr/nrf52-sdk \\\n && rm nrf5_iot_sdk_3288530.zip\nENV NRF52_SDK_ROOT=\"/usr/nrf52-sdk\"\n#   Install sphinx and sphinx_rtd_theme, required for building and testing the\n#   readthedocs API documentation\nRUN pip install pip -q --upgrade\nRUN pip install setuptools -q \\\n && pip install sphinx_rtd_theme sphinx -q\n#   Create user, enable X forwarding, add to group dialout\n#   -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix\nRUN export uid=1000 gid=1000 \\\n && mkdir -p /home/user \\\n && echo \"user:x:${uid}:${gid}:user,,,:/home/user:/bin/bash\" >> /etc/passwd \\\n && echo \"user:x:${uid}:\" >> /etc/group \\\n && echo \"user ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers \\\n && chmod 0440 /etc/sudoers \\\n && chown ${uid}:${gid} -R /home/user \\\n && usermod -aG dialout user\n#   Set user for what comes next\nUSER user\n#   Environment variables\nENV JAVA_HOME=\"/usr/lib/jvm/default-java\"\nENV HOME=\"/home/user\"\nENV CONTIKI_NG=\"${HOME}/contiki-ng\"\nENV COOJA=\"${CONTIKI_NG}/tools/cooja\"\nENV PATH=\"${HOME}:${PATH}\"\nWORKDIR ${HOME}\n#   Create Cooja shortcut\nRUN echo \"#!/bin/bash\\nant -Dbasedir=${COOJA} -f ${COOJA}/build.xml run\" > ${HOME}/cooja \\\n && chmod +x ${HOME}/cooja\n#   Download, build and install Renode\nRUN git clone --quiet https://github.com/renode/renode.git \\\n && cd ${HOME}/renode \\\n && git checkout v1.3 \\\n && ./build.sh\nENV PATH=\"${HOME}/renode:${PATH}\"\n#   By default, we use a Docker bind mount to share the repo with the host,\n#   with Docker run option:\n#   -v <HOST_CONTIKI_NG_ABS_PATH>:/home/user/contiki-ng\n#   Alternatively, uncomment the next two lines to download Contiki-NG and pre-compile Cooja.\n#  RUN git clone --recursive https://github.com/contiki-ng/contiki-ng.git ${CONTIKI_NG}\n#  RUN ant -q -f ${CONTIKI_NG}/tools/cooja/build.xml jar\n#   Working directory\nWORKDIR ${CONTIKI_NG}\n#   Enable IPv6 -- must be done at runtime, hence added to .profile\nRUN echo \"sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 > /dev/null\" >> ${HOME}/.profile\n#   Start a bash\nCMD bash --login\n","originalDockerfileUglifiedHash":"217a42d48303173c218e9e446b1ac404","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6eb9dbb179d70e7e03ca591e7a28b5cf0f82e33c.dockerfile"}