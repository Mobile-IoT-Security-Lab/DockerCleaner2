{"seed":2957777860,"processedDockerfileHash":"d561d4fd75f4382e80e11c1c61bb3c3d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Based on https://gist.github.com/tylerchr/15a74b05944cfb90729db6a51265b6c9\n#\n#   Building V8 for alpine is a real pain. We have to compile from source, because it has to be\n#   linked against musl, and we also have to recompile some of the build tools as the official\n#   build workflow tends to assume glibc by including vendored tools that link against it.\n#\n#   The general strategy is this:\n#\n#     1. Build GN for alpine (this is a build dependency)\n#     2. Use depot_tools to fetch the V8 source and dependencies (needs glibc)\n#     3. Build V8 for alpine\n#     4. Make warez\n#\n#\n#   STEP 1\n#   Build GN for alpine\n#\nFROM alpine:latest AS gn-builder\n#   This is the GN commit that we want to build. Most commits will probably build just fine but\n#   this happened to be the latest commit when I did this.\nARG GN_COMMIT=d7111cb6877187d1f378bd231e14ffdd5fdd87ae\nRUN apk add alpine-sdk=1.0-r1 binutils-gold=2.39-r2 clang curl=7.88.1-r1 git=2.38.4-r1 llvm4 ninja python tar=1.34-r2 xz=5.2.9-r0 --update --virtual .gn-build-dependencies \\\n && PATH=$PATH:/usr/lib/llvm4/bin \\\n && cp -f /usr/bin/ld.gold /usr/bin/ld \\\n && git clone https://gn.googlesource.com/gn /tmp/gn \\\n && git -C /tmp/gn checkout ${GN_COMMIT} \\\n && cd /tmp/gn \\\n && python build/gen.py --no-sysroot \\\n && ninja -C out \\\n && cp -f /tmp/gn/out/gn /usr/local/bin/gn \\\n && apk del .gn-build-dependencies \\\n && rm -rf /tmp/* /var/tmp/* /var/cache/apk/*\n#\n#   STEP 2\n#   Use depot_tools to fetch the V8 source and dependencies\n#\n#   The depot_tools scripts have a hard dependency on glibc (or at least a soft one that I didn't\n#   bother figuring out). Fortunately we only need it to actually download the source and its dependencies\n#   so we can do this in a place with glibc, and then pass the results on to an alpine builder.\n#\nFROM debian:9 AS source\n#   The V8 version we want to use. It's assumed that this will be a version tag, but it's just\n#   used as \"git commit $V8_VERSION\" so anything that git can resolve will work.\nARG V8_VERSION=6.7.288.46\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends git=1:2.39.2-1ubuntu1 curl=7.88.1-7ubuntu1 python -y \\\n && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /tmp/depot_tools \\\n && PATH=$PATH:/tmp/depot_tools \\\n && cd /tmp \\\n && fetch v8 \\\n && cd /tmp/v8 \\\n && git checkout ${V8_VERSION} \\\n && gclient sync \\\n && apt-get remove --purge -y git curl python \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\n#\n#   STEP 3\n#   Build V8 for alpine\n#\nFROM alpine:latest AS v8\nCOPY --from=source /tmp/v8 /tmp/v8\nCOPY --from=gn-builder /usr/local/bin/gn /tmp/v8/buildtools/linux64/gn\nCOPY BUILD.gn /tmp/v8/BUILD.gn\nCOPY build-config-BUILD.gn /tmp/v8/build/config/BUILD.gn\nRUN apk add curl=7.88.1-r1 g++=12.2.1_git20220924-r4 gcc=12.2.1_git20220924-r4 glib-dev=2.74.6-r0 icu-dev=72.1-r1 libstdc++=12.2.1_git20220924-r4 linux-headers=5.19.5-r0 make=4.3-r1 ninja python tar=1.34-r2 xz=5.2.9-r0 --update --virtual .v8-build-dependencies \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_enable_future=true is_official_build=true is_component_build=false is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 strip_debug_info=true v8_use_external_startup_data=false v8_enable_i18n_support=false v8_enable_gdbjit=false v8_static_library=true v8_experimental_extra_library_files=[] v8_extra_library_files=[] v8_monolithic=true \\\n && ninja -C out.gn/x64.release -j $( getconf _NPROCESSORS_ONLN ;) \\\n && find /tmp/v8/out.gn/x64.release -name '*.a' \\\n && apk del .v8-build-dependencies\n#\n#   STEP 4\n#   Build something that links against V8.\n#\n#   This isn't really a step, but it uses the built V8 in a Go program that links against it to show\n#   that it worked.\n#\nFROM ruby:2.5-alpine3.8\n#   COPY --from=v8 /tmp/v8/include /tmp/v8/include\n#   COPY --from=v8 /tmp/v8/out.gn/x64.release/obj /tmp/v8/lib\nENV LIBV8_VERSION=\"6.7.288.46.1\"\nRUN gem install libv8 --version 8.4.255.0\nCOPY --from=v8 /tmp/v8/include /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/include\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_monolith.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_monolith.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libplatform.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libplatform.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libbase.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libbase.a\n#   RUN apk add --update alpine-sdk && gem install mini_racer && apk del alpine-sdk && apk add libstdc++\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Based on https://gist.github.com/tylerchr/15a74b05944cfb90729db6a51265b6c9\n#\n#  Building V8 for alpine is a real pain. We have to compile from source, because it has to be\n#  linked against musl, and we also have to recompile some of the build tools as the official\n#  build workflow tends to assume glibc by including vendored tools that link against it.\n#\n#  The general strategy is this:\n#\n#    1. Build GN for alpine (this is a build dependency)\n#    2. Use depot_tools to fetch the V8 source and dependencies (needs glibc)\n#    3. Build V8 for alpine\n#    4. Make warez\n#\n#\n#  STEP 1\n#  Build GN for alpine\n#\nFROM alpine:latest AS gn-builder\n#  This is the GN commit that we want to build. Most commits will probably build just fine but\n#  this happened to be the latest commit when I did this.\nARG GN_COMMIT=d7111cb6877187d1f378bd231e14ffdd5fdd87ae\nRUN apk add --update --virtual .gn-build-dependencies alpine-sdk binutils-gold clang curl git llvm4 ninja python tar xz \\\n && PATH=$PATH:/usr/lib/llvm4/bin \\\n && cp -f /usr/bin/ld.gold /usr/bin/ld \\\n && git clone https://gn.googlesource.com/gn /tmp/gn \\\n && git -C /tmp/gn checkout ${GN_COMMIT} \\\n && cd /tmp/gn \\\n && python build/gen.py --no-sysroot \\\n && ninja -C out \\\n && cp -f /tmp/gn/out/gn /usr/local/bin/gn \\\n && apk del .gn-build-dependencies \\\n && rm -rf /tmp/* /var/tmp/* /var/cache/apk/*\n#\n#  STEP 2\n#  Use depot_tools to fetch the V8 source and dependencies\n#\n#  The depot_tools scripts have a hard dependency on glibc (or at least a soft one that I didn't\n#  bother figuring out). Fortunately we only need it to actually download the source and its dependencies\n#  so we can do this in a place with glibc, and then pass the results on to an alpine builder.\n#\nFROM debian:9 AS source\n#  The V8 version we want to use. It's assumed that this will be a version tag, but it's just\n#  used as \"git commit $V8_VERSION\" so anything that git can resolve will work.\nARG V8_VERSION=6.7.288.46\nRUN set -x \\\n && apt-get update \\\n && apt-get install git curl python -y \\\n && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /tmp/depot_tools \\\n && PATH=$PATH:/tmp/depot_tools \\\n && cd /tmp \\\n && fetch v8 \\\n && cd /tmp/v8 \\\n && git checkout ${V8_VERSION} \\\n && gclient sync \\\n && apt-get remove --purge -y git curl python \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\n#\n#  STEP 3\n#  Build V8 for alpine\n#\nFROM alpine:latest AS v8\nCOPY --from=source /tmp/v8 /tmp/v8\nCOPY --from=gn-builder /usr/local/bin/gn /tmp/v8/buildtools/linux64/gn\nCOPY BUILD.gn /tmp/v8/BUILD.gn\nCOPY build-config-BUILD.gn /tmp/v8/build/config/BUILD.gn\nRUN apk add --update --virtual .v8-build-dependencies curl g++ gcc glib-dev icu-dev libstdc++ linux-headers make ninja python tar xz \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_enable_future=true is_official_build=true is_component_build=false is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 strip_debug_info=true v8_use_external_startup_data=false v8_enable_i18n_support=false v8_enable_gdbjit=false v8_static_library=true v8_experimental_extra_library_files=[] v8_extra_library_files=[] v8_monolithic=true \\\n && ninja -C out.gn/x64.release -j $( getconf _NPROCESSORS_ONLN ;) \\\n && find /tmp/v8/out.gn/x64.release -name '*.a' \\\n && apk del .v8-build-dependencies\n#\n#  STEP 4\n#  Build something that links against V8.\n#\n#  This isn't really a step, but it uses the built V8 in a Go program that links against it to show\n#  that it worked.\n#\nFROM ruby:2.5-alpine3.8\n#  COPY --from=v8 /tmp/v8/include /tmp/v8/include\n#  COPY --from=v8 /tmp/v8/out.gn/x64.release/obj /tmp/v8/lib\nENV LIBV8_VERSION=\"6.7.288.46.1\"\nRUN gem install libv8\nCOPY --from=v8 /tmp/v8/include /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/include\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_monolith.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_monolith.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libplatform.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libplatform.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libbase.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libbase.a\n#  RUN apk add --update alpine-sdk && gem install mini_racer && apk del alpine-sdk && apk add libstdc++\n","injectedSmells":[],"originalDockerfileHash":"57e0757719fef1d507b273e0b04c1bc4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Based on https://gist.github.com/tylerchr/15a74b05944cfb90729db6a51265b6c9\n#\n#   Building V8 for alpine is a real pain. We have to compile from source, because it has to be\n#   linked against musl, and we also have to recompile some of the build tools as the official\n#   build workflow tends to assume glibc by including vendored tools that link against it.\n#\n#   The general strategy is this:\n#\n#     1. Build GN for alpine (this is a build dependency)\n#     2. Use depot_tools to fetch the V8 source and dependencies (needs glibc)\n#     3. Build V8 for alpine\n#     4. Make warez\n#\n#\n#   STEP 1\n#   Build GN for alpine\n#\nFROM alpine:latest AS gn-builder\n#   This is the GN commit that we want to build. Most commits will probably build just fine but\n#   this happened to be the latest commit when I did this.\nARG GN_COMMIT=d7111cb6877187d1f378bd231e14ffdd5fdd87ae\nRUN apk add --update --virtual .gn-build-dependencies alpine-sdk binutils-gold clang curl git llvm4 ninja python tar xz \\\n && PATH=$PATH:/usr/lib/llvm4/bin \\\n && cp -f /usr/bin/ld.gold /usr/bin/ld \\\n && git clone https://gn.googlesource.com/gn /tmp/gn \\\n && git -C /tmp/gn checkout ${GN_COMMIT} \\\n && cd /tmp/gn \\\n && python build/gen.py --no-sysroot \\\n && ninja -C out \\\n && cp -f /tmp/gn/out/gn /usr/local/bin/gn \\\n && apk del .gn-build-dependencies \\\n && rm -rf /tmp/* /var/tmp/* /var/cache/apk/*\n#\n#   STEP 2\n#   Use depot_tools to fetch the V8 source and dependencies\n#\n#   The depot_tools scripts have a hard dependency on glibc (or at least a soft one that I didn't\n#   bother figuring out). Fortunately we only need it to actually download the source and its dependencies\n#   so we can do this in a place with glibc, and then pass the results on to an alpine builder.\n#\nFROM debian:9 AS source\n#   The V8 version we want to use. It's assumed that this will be a version tag, but it's just\n#   used as \"git commit $V8_VERSION\" so anything that git can resolve will work.\nARG V8_VERSION=6.7.288.46\nRUN set -x \\\n && apt-get update \\\n && apt-get install git curl python -y \\\n && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /tmp/depot_tools \\\n && PATH=$PATH:/tmp/depot_tools \\\n && cd /tmp \\\n && fetch v8 \\\n && cd /tmp/v8 \\\n && git checkout ${V8_VERSION} \\\n && gclient sync \\\n && apt-get remove --purge -y git curl python \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/*\n#\n#   STEP 3\n#   Build V8 for alpine\n#\nFROM alpine:latest AS v8\nCOPY --from=source /tmp/v8 /tmp/v8\nCOPY --from=gn-builder /usr/local/bin/gn /tmp/v8/buildtools/linux64/gn\nCOPY BUILD.gn /tmp/v8/BUILD.gn\nCOPY build-config-BUILD.gn /tmp/v8/build/config/BUILD.gn\nRUN apk add --update --virtual .v8-build-dependencies curl g++ gcc glib-dev icu-dev libstdc++ linux-headers make ninja python tar xz \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_enable_future=true is_official_build=true is_component_build=false is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 strip_debug_info=true v8_use_external_startup_data=false v8_enable_i18n_support=false v8_enable_gdbjit=false v8_static_library=true v8_experimental_extra_library_files=[] v8_extra_library_files=[] v8_monolithic=true \\\n && ninja -C out.gn/x64.release -j $( getconf _NPROCESSORS_ONLN ;) \\\n && find /tmp/v8/out.gn/x64.release -name '*.a' \\\n && apk del .v8-build-dependencies\n#\n#   STEP 4\n#   Build something that links against V8.\n#\n#   This isn't really a step, but it uses the built V8 in a Go program that links against it to show\n#   that it worked.\n#\nFROM ruby:2.5-alpine3.8\n#   COPY --from=v8 /tmp/v8/include /tmp/v8/include\n#   COPY --from=v8 /tmp/v8/out.gn/x64.release/obj /tmp/v8/lib\nENV LIBV8_VERSION=\"6.7.288.46.1\"\nRUN gem install libv8\nCOPY --from=v8 /tmp/v8/include /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/include\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_monolith.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_monolith.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libplatform.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libplatform.a\nCOPY --from=v8 /tmp/v8/out.gn/x64.release/obj/libv8_libbase.a /usr/local/bundle/gems/libv8-$LIBV8_VERSION-x86_64-linux/vendor/v8/out.gn/libv8/obj/libv8_libbase.a\n#   RUN apk add --update alpine-sdk && gem install mini_racer && apk del alpine-sdk && apk add libstdc++\n","originalDockerfileUglifiedHash":"a40e963c0053cba610043c819e222670","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/348a92ec7c5221fce1358780eecb8e4daa29783f.dockerfile"}