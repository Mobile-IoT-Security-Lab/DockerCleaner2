{"seed":1128851069,"processedDockerfileHash":"064326ebb6d3abf3a4a560f1a135a67c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER Dan Liew <daniel.liew@imperial.ac.uk>\n#   FIXME: Docker doesn't currently offer a way to\n#   squash the layers from within a Dockerfile so\n#   the resulting image is unnecessarily large!\nENV LLVM_VERSION=\"3.4\" \\\n    SOLVERS=\"STP:Z3\" \\\n    STP_VERSION=\"2.1.2\" \\\n    DISABLE_ASSERTIONS=\"0\" \\\n    ENABLE_OPTIMIZED=\"1\" \\\n    KLEE_UCLIBC=\"klee_uclibc_v1.0.0\" \\\n    KLEE_SRC=\"/home/klee/klee_src\" \\\n    COVERAGE=\"0\" \\\n    BUILD_DIR=\"/home/klee/klee_build\" \\\n    USE_CMAKE=\"1\" \\\n    ASAN_BUILD=\"0\" \\\n    UBSAN_BUILD=\"0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends llvm=1:3.4-0ubuntu1 libcap-dev=1:2.24-0ubuntu2 git=1:1.9.1-1ubuntu0.10 subversion=1.8.8-1ubuntu3.3 cmake=2.8.12.2-0ubuntu3 make=3.81-8.2ubuntu3 libboost-program-options-dev=1.54.0.1ubuntu1 python3=3.4.0-0ubuntu2 python3-dev=3.4.0-0ubuntu2 python3-pip=1.5.4-1ubuntu4 perl=5.18.2-2ubuntu1.7 flex=2.5.35-10.1ubuntu2 bison=2:3.0.2.dfsg-2 libncurses-dev zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 patch=2.7.1-4ubuntu2.4 wget=1.15-1ubuntu1.14.04.5 unzip=6.0-9ubuntu1.5 binutils=2.24-5ubuntu14.2 clang-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-runtime -y \\\n && pip3 install -U lit tabulate \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 50 \\\n && (wget -O - http://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - ) \\\n && echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/z3.list \\\n && apt-get update\n#   Create ``klee`` user for container with password ``klee``.\n#   and give it password-less sudo access (temporarily so we can use the TravisCI scripts)\nRUN useradd -m klee \\\n && echo klee:klee | chpasswd \\\n && cp /etc/sudoers /etc/sudoers.bak \\\n && echo 'klee ALL=(root) NOPASSWD: ALL' >> /etc/sudoers\nUSER klee\nWORKDIR /home/klee\n#   Copy across source files needed for build\nRUN mkdir ${KLEE_SRC}\nCOPY / ${KLEE_SRC}\n#   Set klee user to be owner\nRUN sudo chown --recursive klee: ${KLEE_SRC}\n#   Create build directory\nRUN mkdir -p ${BUILD_DIR}\n#   Build/Install SMT solvers (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/solvers.sh\n#   Install testing utils (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && mkdir test-utils \\\n && cd test-utils \\\n && ${KLEE_SRC}/.travis/testing-utils.sh\n#   FIXME: All these hacks need to be removed. Once we no longer\n#   need to support KLEE's old build system they can be removed.\n#   FIXME: This is a nasty hack so KLEE's configure and build finds\n#   LLVM's headers file, libraries and tools\nRUN sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin \\\n && sudo ln -s /usr/bin/llvm-config /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-config \\\n && sudo ln -s /usr/bin/llvm-dis /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-dis \\\n && sudo ln -s /usr/bin/llvm-as /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-as \\\n && sudo ln -s /usr/bin/llvm-link /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-link \\\n && sudo ln -s /usr/bin/llvm-ar /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-ar \\\n && sudo ln -s /usr/bin/opt /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/opt \\\n && sudo ln -s /usr/bin/lli /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/lli \\\n && sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/include \\\n && sudo ln -s /usr/include/llvm-${LLVM_VERSION}/llvm /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm \\\n && sudo ln -s /usr/include/llvm-c-${LLVM_VERSION}/llvm-c /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm-c \\\n && for static_lib in /usr/lib/llvm-${LLVM_VERSION}/lib/*.a; do sudo ln -s ${static_lib} /usr/lib/`basename ${static_lib} ` ; done\n#   FIXME: This is **really gross**. The Official Ubuntu LLVM packages don't ship\n#   with ``FileCheck`` or the ``not`` tools so we have to hack building these\n#   into KLEE's build system in order for the tests to pass\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (cd ${KLEE_SRC}/tools \\\n && for tool in FileCheck not; do svn export http://llvm.org/svn/llvm-project/llvm/branches/release_34/utils/${tool} ${tool} ;sed -i 's/^USEDLIBS.*$/LINK_COMPONENTS = support/' ${tool}/Makefile ; done \\\n && sed -i '0,/^PARALLEL_DIRS/a PARALLEL_DIRS += FileCheck not' Makefile ) || echo \"Skipping hack\"\n#   FIXME: The current TravisCI script expects clang-${LLVM_VERSION} to exist\nRUN sudo ln -s /usr/bin/clang /usr/bin/clang-${LLVM_VERSION} \\\n && sudo ln -s /usr/bin/clang++ /usr/bin/clang++-${LLVM_VERSION}\n#   Build KLEE (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/klee.sh\n#   Revoke password-less sudo and Set up sudo access for the ``klee`` user so it\n#   requires a password\nUSER root\nRUN mv /etc/sudoers.bak /etc/sudoers \\\n && echo 'klee ALL=(root) ALL' >> /etc/sudoers\nUSER klee\n#   Add KLEE binary directory to PATH\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/Release+Asserts/bin' >> /home/klee/.bashrc) || (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/bin' >> /home/klee/.bashrc)\n#   Link klee to /usr/bin so that it can be used by docker run\nUSER root\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (for executable in ${BUILD_DIR}/klee/Release+Asserts/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done ) || (for executable in ${BUILD_DIR}/klee/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done )\n#   Link klee to the libkleeRuntest library needed by docker run\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (ln -s ${BUILD_DIR}/klee/Release+Asserts/lib/libkleeRuntest.so /usr/lib/libkleeRuntest.so.1.0 ) || echo \"Skipping hack\"\nUSER klee\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER Dan Liew <daniel.liew@imperial.ac.uk>\n#  FIXME: Docker doesn't currently offer a way to\n#  squash the layers from within a Dockerfile so\n#  the resulting image is unnecessarily large!\nENV LLVM_VERSION=\"3.4\" \\\n    SOLVERS=\"STP:Z3\" \\\n    STP_VERSION=\"2.1.2\" \\\n    DISABLE_ASSERTIONS=\"0\" \\\n    ENABLE_OPTIMIZED=\"1\" \\\n    KLEE_UCLIBC=\"klee_uclibc_v1.0.0\" \\\n    KLEE_SRC=\"/home/klee/klee_src\" \\\n    COVERAGE=\"0\" \\\n    BUILD_DIR=\"/home/klee/klee_build\" \\\n    USE_CMAKE=\"1\" \\\n    ASAN_BUILD=\"0\" \\\n    UBSAN_BUILD=\"0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends llvm libcap-dev git subversion cmake make libboost-program-options-dev python3 python3-dev python3-pip perl flex bison libncurses-dev zlib1g-dev patch wget unzip binutils clang-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-runtime -y \\\n && pip3 install -U lit tabulate \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 50 \\\n && (wget -O - http://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - ) \\\n && echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/z3.list \\\n && apt-get update\n#  Create ``klee`` user for container with password ``klee``.\n#  and give it password-less sudo access (temporarily so we can use the TravisCI scripts)\nRUN useradd -m klee \\\n && echo klee:klee | chpasswd \\\n && cp /etc/sudoers /etc/sudoers.bak \\\n && echo 'klee ALL=(root) NOPASSWD: ALL' >> /etc/sudoers\nUSER klee\nWORKDIR /home/klee\n#  Copy across source files needed for build\nRUN mkdir ${KLEE_SRC}\nADD / ${KLEE_SRC}\n#  Set klee user to be owner\nRUN sudo chown --recursive klee: ${KLEE_SRC}\n#  Create build directory\nRUN mkdir -p ${BUILD_DIR}\n#  Build/Install SMT solvers (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/solvers.sh\n#  Install testing utils (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && mkdir test-utils \\\n && cd test-utils \\\n && ${KLEE_SRC}/.travis/testing-utils.sh\n#  FIXME: All these hacks need to be removed. Once we no longer\n#  need to support KLEE's old build system they can be removed.\n#  FIXME: This is a nasty hack so KLEE's configure and build finds\n#  LLVM's headers file, libraries and tools\nRUN sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin \\\n && sudo ln -s /usr/bin/llvm-config /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-config \\\n && sudo ln -s /usr/bin/llvm-dis /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-dis \\\n && sudo ln -s /usr/bin/llvm-as /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-as \\\n && sudo ln -s /usr/bin/llvm-link /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-link \\\n && sudo ln -s /usr/bin/llvm-ar /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-ar \\\n && sudo ln -s /usr/bin/opt /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/opt \\\n && sudo ln -s /usr/bin/lli /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/lli \\\n && sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/include \\\n && sudo ln -s /usr/include/llvm-${LLVM_VERSION}/llvm /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm \\\n && sudo ln -s /usr/include/llvm-c-${LLVM_VERSION}/llvm-c /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm-c \\\n && for static_lib in /usr/lib/llvm-${LLVM_VERSION}/lib/*.a; do sudo ln -s ${static_lib} /usr/lib/`basename ${static_lib} ` ; done\n#  FIXME: This is **really gross**. The Official Ubuntu LLVM packages don't ship\n#  with ``FileCheck`` or the ``not`` tools so we have to hack building these\n#  into KLEE's build system in order for the tests to pass\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (cd ${KLEE_SRC}/tools \\\n && for tool in FileCheck not; do svn export http://llvm.org/svn/llvm-project/llvm/branches/release_34/utils/${tool} ${tool} ;sed -i 's/^USEDLIBS.*$/LINK_COMPONENTS = support/' ${tool}/Makefile ; done \\\n && sed -i '0,/^PARALLEL_DIRS/a PARALLEL_DIRS += FileCheck not' Makefile ) || echo \"Skipping hack\"\n#  FIXME: The current TravisCI script expects clang-${LLVM_VERSION} to exist\nRUN sudo ln -s /usr/bin/clang /usr/bin/clang-${LLVM_VERSION} \\\n && sudo ln -s /usr/bin/clang++ /usr/bin/clang++-${LLVM_VERSION}\n#  Build KLEE (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/klee.sh\n#  Revoke password-less sudo and Set up sudo access for the ``klee`` user so it\n#  requires a password\nUSER root\nRUN mv /etc/sudoers.bak /etc/sudoers \\\n && echo 'klee ALL=(root) ALL' >> /etc/sudoers\nUSER klee\n#  Add KLEE binary directory to PATH\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/Release+Asserts/bin' >> /home/klee/.bashrc) || (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/bin' >> /home/klee/.bashrc)\n#  Link klee to /usr/bin so that it can be used by docker run\nUSER root\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (for executable in ${BUILD_DIR}/klee/Release+Asserts/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done ) || (for executable in ${BUILD_DIR}/klee/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done )\n#  Link klee to the libkleeRuntest library needed by docker run\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (ln -s ${BUILD_DIR}/klee/Release+Asserts/lib/libkleeRuntest.so /usr/lib/libkleeRuntest.so.1.0 ) || echo \"Skipping hack\"\nUSER klee\n","injectedSmells":[],"originalDockerfileHash":"6b48bd7e763e9ccd441072f94348e67d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER Dan Liew <daniel.liew@imperial.ac.uk>\n#   FIXME: Docker doesn't currently offer a way to\n#   squash the layers from within a Dockerfile so\n#   the resulting image is unnecessarily large!\nENV LLVM_VERSION=\"3.4\" \\\n    SOLVERS=\"STP:Z3\" \\\n    STP_VERSION=\"2.1.2\" \\\n    DISABLE_ASSERTIONS=\"0\" \\\n    ENABLE_OPTIMIZED=\"1\" \\\n    KLEE_UCLIBC=\"klee_uclibc_v1.0.0\" \\\n    KLEE_SRC=\"/home/klee/klee_src\" \\\n    COVERAGE=\"0\" \\\n    BUILD_DIR=\"/home/klee/klee_build\" \\\n    USE_CMAKE=\"1\" \\\n    ASAN_BUILD=\"0\" \\\n    UBSAN_BUILD=\"0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends llvm libcap-dev git subversion cmake make libboost-program-options-dev python3 python3-dev python3-pip perl flex bison libncurses-dev zlib1g-dev patch wget unzip binutils clang-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-runtime -y \\\n && pip3 install -U lit tabulate \\\n && update-alternatives --install /usr/bin/python python /usr/bin/python3 50 \\\n && (wget -O - http://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - ) \\\n && echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/z3.list \\\n && apt-get update\n#   Create ``klee`` user for container with password ``klee``.\n#   and give it password-less sudo access (temporarily so we can use the TravisCI scripts)\nRUN useradd -m klee \\\n && echo klee:klee | chpasswd \\\n && cp /etc/sudoers /etc/sudoers.bak \\\n && echo 'klee ALL=(root) NOPASSWD: ALL' >> /etc/sudoers\nUSER klee\nWORKDIR /home/klee\n#   Copy across source files needed for build\nRUN mkdir ${KLEE_SRC}\nADD / ${KLEE_SRC}\n#   Set klee user to be owner\nRUN sudo chown --recursive klee: ${KLEE_SRC}\n#   Create build directory\nRUN mkdir -p ${BUILD_DIR}\n#   Build/Install SMT solvers (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/solvers.sh\n#   Install testing utils (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && mkdir test-utils \\\n && cd test-utils \\\n && ${KLEE_SRC}/.travis/testing-utils.sh\n#   FIXME: All these hacks need to be removed. Once we no longer\n#   need to support KLEE's old build system they can be removed.\n#   FIXME: This is a nasty hack so KLEE's configure and build finds\n#   LLVM's headers file, libraries and tools\nRUN sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin \\\n && sudo ln -s /usr/bin/llvm-config /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-config \\\n && sudo ln -s /usr/bin/llvm-dis /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-dis \\\n && sudo ln -s /usr/bin/llvm-as /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-as \\\n && sudo ln -s /usr/bin/llvm-link /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-link \\\n && sudo ln -s /usr/bin/llvm-ar /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-ar \\\n && sudo ln -s /usr/bin/opt /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/opt \\\n && sudo ln -s /usr/bin/lli /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/lli \\\n && sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/include \\\n && sudo ln -s /usr/include/llvm-${LLVM_VERSION}/llvm /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm \\\n && sudo ln -s /usr/include/llvm-c-${LLVM_VERSION}/llvm-c /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm-c \\\n && for static_lib in /usr/lib/llvm-${LLVM_VERSION}/lib/*.a; do sudo ln -s ${static_lib} /usr/lib/`basename ${static_lib} ` ; done\n#   FIXME: This is **really gross**. The Official Ubuntu LLVM packages don't ship\n#   with ``FileCheck`` or the ``not`` tools so we have to hack building these\n#   into KLEE's build system in order for the tests to pass\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (cd ${KLEE_SRC}/tools \\\n && for tool in FileCheck not; do svn export http://llvm.org/svn/llvm-project/llvm/branches/release_34/utils/${tool} ${tool} ;sed -i 's/^USEDLIBS.*$/LINK_COMPONENTS = support/' ${tool}/Makefile ; done \\\n && sed -i '0,/^PARALLEL_DIRS/a PARALLEL_DIRS += FileCheck not' Makefile ) || echo \"Skipping hack\"\n#   FIXME: The current TravisCI script expects clang-${LLVM_VERSION} to exist\nRUN sudo ln -s /usr/bin/clang /usr/bin/clang-${LLVM_VERSION} \\\n && sudo ln -s /usr/bin/clang++ /usr/bin/clang++-${LLVM_VERSION}\n#   Build KLEE (use TravisCI script)\nRUN cd ${BUILD_DIR} \\\n && ${KLEE_SRC}/.travis/klee.sh\n#   Revoke password-less sudo and Set up sudo access for the ``klee`` user so it\n#   requires a password\nUSER root\nRUN mv /etc/sudoers.bak /etc/sudoers \\\n && echo 'klee ALL=(root) ALL' >> /etc/sudoers\nUSER klee\n#   Add KLEE binary directory to PATH\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/Release+Asserts/bin' >> /home/klee/.bashrc) || (echo 'export PATH=$PATH:'${BUILD_DIR}'/klee/bin' >> /home/klee/.bashrc)\n#   Link klee to /usr/bin so that it can be used by docker run\nUSER root\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (for executable in ${BUILD_DIR}/klee/Release+Asserts/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done ) || (for executable in ${BUILD_DIR}/klee/bin/*; do ln -s ${executable} /usr/bin/`basename ${executable} ` ; done )\n#   Link klee to the libkleeRuntest library needed by docker run\nRUN [ \"X${USE_CMAKE}\" != \"X1\" ] \\\n && (ln -s ${BUILD_DIR}/klee/Release+Asserts/lib/libkleeRuntest.so /usr/lib/libkleeRuntest.so.1.0 ) || echo \"Skipping hack\"\nUSER klee\n","originalDockerfileUglifiedHash":"5f8ece870c588dcc00606b887f842018","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d42b09c89f881c3e328b3f6dfbb11e5c520b7dcf.dockerfile"}