{"seed":517630990,"processedDockerfileHash":"0e4184c4670ea6f7f727933c34e6b371","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"MAINTAINER Mario Cho \"m.cho@lablup.com\"\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20211016ubuntu0.18.04.1 wget=1.19.4-1ubuntu2.2 curl=7.58.0-2ubuntu3.24 git-core python3=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libmpdec2=2.4.2-1ubuntu1 proj-bin=4.9.3-2 libproj-dev=4.9.3-2 libgeos-dev=3.6.2-1build2 libgeos++-dev=3.6.2-1build2 mime-support=3.60ubuntu1 gnupg=2.2.4-1ubuntu1.6 dirmngr=2.2.4-1ubuntu1.6 gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PATH=\"/opt/backend.ai/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#   Install commonly-used wheels\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir pyzmq \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab\n#   Install jupyter & Julia\nARG JULIA_VERSION\nENV JULIA_VERSION=\"${JULIA_VERSION:-1.0.4}\"\nENV JULIA_PATH=\"\\\"/usr/local/julia\\\"\"\nENV PATH=\"$JULIA_PATH:$JULIA_PATH/bin:$PATH\"\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ca-certificates=20211016ubuntu0.18.04.1 curl=7.58.0-2ubuntu3.24 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) tarArch='x86_64' ; dirArch='x64' ;;(armhf) tarArch='arm' ; dirArch='arm' ;;(i386) tarArch='i686' ; dirArch='x86' ;;(*) echo \"error: current architecture ($dpkgArch) does not have a corresponding Julia binary release\" >&2; exit 1 ;; esac ; curl -fL -o julia.tar.gz \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\" ; mkdir \"$JULIA_PATH\" ; tar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1 ; rm julia.tar.gz\n#  add IJulia package to make Julia kernel available in jupyter\nRUN julia -e 'ENV[\"JUPYTER\"]=\"jupyter\"' \\\n && julia -e 'ENV[\"PYTHON\"]=\"python3\"' \\\n && julia -e 'using Pkg; Pkg.add(\"IJulia\");' \\\n && cp -r /root/.local/share/jupyter/kernels/julia-1.0 /usr/local/share/jupyter/kernels \\\n && rm -rf /root/.local/share/jupyter\nENV JULIA_PKG_LOC=\"/opt/julia\"\nENV JULIA_LOAD_PATH=\":/opt/julia\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN mkdir ${JULIA_PKG_LOC} \\\n && mv /root/.julia/packages/* ${JULIA_PKG_LOC} \\\n && for d in ${JULIA_PKG_LOC}/*; do sub=$d/$( ls $d ;) ;shopt -s dotglob ;mv $sub/* $d ;rm -rf $sub ;shopt -u dotglob ; done \\\n && rm -rf /root/.julia/* \\\n && rm -rf /opt/julia/Conda/deps/deps.jl \\\n && echo 'const ROOTENV = \"/tmp\"' >> /opt/julia/Conda/deps/deps.jl \\\n && echo 'const MINICONDA_VERSION = \"3\"' >> /opt/julia/Conda/deps/deps.jl \\\n && rm -rf /usr/local/share/jupyter/kernels/julia-1.0/kernel.json \\\n && julia -e 'using IJulia' \\\n && mv /root/.julia/compiled /opt/julia \\\n && chmod -R 755 /opt/julia/compiled\nSHELL [\"/bin/sh\", \"-c\"]\nCOPY kernel.json /usr/local/share/jupyter/kernels/julia-1.0\nCOPY movecompiled.sh /usr/local/bin/movecompiled.sh\nRUN chmod 755 /usr/local/bin/movecompiled.sh\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"256m\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.runtime-type=\"julia\" \\\n      ai.backend.runtime-path=\"/usr/bin/python3\" \\\n      ai.backend.service-ports=\"jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#   vim: ft=dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"MAINTAINER Mario Cho \"m.cho@lablup.com\"\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install ca-certificates wget curl git-core python3 python3-pip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support gnupg dirmngr gcc g++ -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PATH=\"/opt/backend.ai/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#  Install commonly-used wheels\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir pyzmq \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab\n#  Install jupyter & Julia\nARG JULIA_VERSION\nENV JULIA_VERSION=\"${JULIA_VERSION:-1.0.4}\"\nENV JULIA_PATH=\"\\\"/usr/local/julia\\\"\"\nENV PATH=\"$JULIA_PATH:$JULIA_PATH/bin:$PATH\"\nRUN apt-get update -y \\\n && apt-get install -y --no-install-recommends ca-certificates curl \\\n && rm -rf /var/lib/apt/lists/*\nRUN dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) tarArch='x86_64' ; dirArch='x64' ;;(armhf) tarArch='arm' ; dirArch='arm' ;;(i386) tarArch='i686' ; dirArch='x86' ;;(*) echo \"error: current architecture ($dpkgArch) does not have a corresponding Julia binary release\" >&2; exit 1 ;; esac ; curl -fL -o julia.tar.gz \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\" ; mkdir \"$JULIA_PATH\" ; tar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1 ; rm julia.tar.gz\n# add IJulia package to make Julia kernel available in jupyter\nRUN julia -e 'ENV[\"JUPYTER\"]=\"jupyter\"' \\\n && julia -e 'ENV[\"PYTHON\"]=\"python3\"' \\\n && julia -e 'using Pkg; Pkg.add(\"IJulia\");' \\\n && cp -r /root/.local/share/jupyter/kernels/julia-1.0 /usr/local/share/jupyter/kernels \\\n && rm -rf /root/.local/share/jupyter\nENV JULIA_PKG_LOC=\"/opt/julia\"\nENV JULIA_LOAD_PATH=\":/opt/julia\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN mkdir ${JULIA_PKG_LOC} \\\n && mv /root/.julia/packages/* ${JULIA_PKG_LOC} \\\n && for d in ${JULIA_PKG_LOC}/*; do sub=$d/$( ls $d ;) ;shopt -s dotglob ;mv $sub/* $d ;rm -rf $sub ;shopt -u dotglob ; done \\\n && rm -rf /root/.julia/* \\\n && rm -rf /opt/julia/Conda/deps/deps.jl \\\n && echo 'const ROOTENV = \"/tmp\"' >> /opt/julia/Conda/deps/deps.jl \\\n && echo 'const MINICONDA_VERSION = \"3\"' >> /opt/julia/Conda/deps/deps.jl \\\n && rm -rf /usr/local/share/jupyter/kernels/julia-1.0/kernel.json \\\n && julia -e 'using IJulia' \\\n && mv /root/.julia/compiled /opt/julia \\\n && chmod -R 755 /opt/julia/compiled\nSHELL [\"/bin/sh\", \"-c\"]\nCOPY kernel.json /usr/local/share/jupyter/kernels/julia-1.0\nADD movecompiled.sh /usr/local/bin/movecompiled.sh\nRUN chmod 755 /usr/local/bin/movecompiled.sh\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"256m\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.runtime-type=\"julia\" \\\n      ai.backend.runtime-path=\"/usr/bin/python3\" \\\n      ai.backend.service-ports=\"jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#  vim: ft=dockerfile\n","injectedSmells":[],"originalDockerfileHash":"8c1991f3a3f8931e0e6afee81eda6c0e","successfullyInjectedSmells":[],"originalDockerfileUglified":"MAINTAINER Mario Cho \"m.cho@lablup.com\"\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install ca-certificates wget curl git-core python3 python3-pip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support gnupg dirmngr gcc g++ -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PATH=\"/opt/backend.ai/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\"\n#   Install commonly-used wheels\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir pyzmq \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab\n#   Install jupyter & Julia\nARG JULIA_VERSION\nENV JULIA_VERSION=\"${JULIA_VERSION:-1.0.4}\"\nENV JULIA_PATH=\"\\\"/usr/local/julia\\\"\"\nENV PATH=\"$JULIA_PATH:$JULIA_PATH/bin:$PATH\"\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ca-certificates curl -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) tarArch='x86_64' ; dirArch='x64' ;;(armhf) tarArch='arm' ; dirArch='arm' ;;(i386) tarArch='i686' ; dirArch='x86' ;;(*) echo \"error: current architecture ($dpkgArch) does not have a corresponding Julia binary release\" >&2; exit 1 ;; esac ; curl -fL -o julia.tar.gz \"https://julialang-s3.julialang.org/bin/linux/${dirArch}/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz\" ; mkdir \"$JULIA_PATH\" ; tar -xzf julia.tar.gz -C \"$JULIA_PATH\" --strip-components 1 ; rm julia.tar.gz\n#  add IJulia package to make Julia kernel available in jupyter\nRUN julia -e 'ENV[\"JUPYTER\"]=\"jupyter\"' \\\n && julia -e 'ENV[\"PYTHON\"]=\"python3\"' \\\n && julia -e 'using Pkg; Pkg.add(\"IJulia\");' \\\n && cp -r /root/.local/share/jupyter/kernels/julia-1.0 /usr/local/share/jupyter/kernels \\\n && rm -rf /root/.local/share/jupyter\nENV JULIA_PKG_LOC=\"/opt/julia\"\nENV JULIA_LOAD_PATH=\":/opt/julia\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN mkdir ${JULIA_PKG_LOC} \\\n && mv /root/.julia/packages/* ${JULIA_PKG_LOC} \\\n && for d in ${JULIA_PKG_LOC}/*; do sub=$d/$( ls $d ;) ;shopt -s dotglob ;mv $sub/* $d ;rm -rf $sub ;shopt -u dotglob ; done \\\n && rm -rf /root/.julia/* \\\n && rm -rf /opt/julia/Conda/deps/deps.jl \\\n && echo 'const ROOTENV = \"/tmp\"' >> /opt/julia/Conda/deps/deps.jl \\\n && echo 'const MINICONDA_VERSION = \"3\"' >> /opt/julia/Conda/deps/deps.jl \\\n && rm -rf /usr/local/share/jupyter/kernels/julia-1.0/kernel.json \\\n && julia -e 'using IJulia' \\\n && mv /root/.julia/compiled /opt/julia \\\n && chmod -R 755 /opt/julia/compiled\nSHELL [\"/bin/sh\", \"-c\"]\nCOPY kernel.json /usr/local/share/jupyter/kernels/julia-1.0\nADD movecompiled.sh /usr/local/bin/movecompiled.sh\nRUN chmod 755 /usr/local/bin/movecompiled.sh\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"256m\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.runtime-type=\"julia\" \\\n      ai.backend.runtime-path=\"/usr/bin/python3\" \\\n      ai.backend.service-ports=\"jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#   vim: ft=dockerfile\n","originalDockerfileUglifiedHash":"560632f0703cd6e3fd210e88db9a0923","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bff1e8749e62dbe2cb66203b4a27356865b76776.dockerfile"}