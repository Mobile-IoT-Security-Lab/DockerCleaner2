{"seed":355325713,"processedDockerfileHash":"a1a28fc3dad922a93b2e2b5397899f84","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Docker-based IntelliJ IDEA Inspections using idea-cli-inspector\n#\n#   NOTE:\n#    This Dockerfile provides quite a bunch of commented-out statements\n#    as template for creatng your own, derived docker image in case i.e.\n#    you want to use the Ultimate edition or need additional build tools.\n#\nFROM openjdk:8\nMAINTAINER Benjamin Schmid <dockerhub@benjamin-schmid.de>\n#   First install some basic tools to get them or their latest versions (wget, apt).\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.21-1+deb11u1 sudo=1.9.5p2-3+deb11u1 locales=2.31-13+deb11u5 groovy=2.4.21-1 -y \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm /var/lib/apt/lists/*.* \\\n && rm -fr /tmp/* /var/tmp/*\n#   --------------- Install Oracle Java PPAs\n#  RUN echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/webupd8team-java.list\n#  RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\n#  RUN echo \"deb http://ppa.launchpad.net/linuxuprising/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/linuxuprising-java.list\n#  RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A\n#\n#   Mark Oracle license accepted\n#  RUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#  RUN echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n#  RUN echo oracle-java10-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#\n#   Install Java 8, Java 10, Groovy, mongodb-client & graphviz via package repository\n#  RUN apt-get update && \\\n#      apt-get install -y --no-install-recommends \\\n#                         oracle-java8-installer \\\n#                         oracle-java8-set-default \\\n#                         oracle-java8-unlimited-jce-policy \\\n#                         oracle-java10-installer \\\n#                         && \\\n#      apt-get autoremove --purge -y && \\\n#      apt-get clean && \\\n#      rm -fr /var/cache/oracle-jdk* && \\\n#      rm /var/lib/apt/lists/*.* && \\\n#      rm -fr /tmp/* /var/tmp/*\n#\n#\n#   --------------- Install Android SDK Tools\n#  RUN mkdir -p /srv/android-sdk && cd /srv/android-sdk && \\\n#      wget -nv https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && \\\n#      echo \"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdk-tools-linux-4333796.zip\" | sha256sum -c - && \\\n#      unzip -q sdk-tools-linux-4333796.zip && \\\n#      rm sdk-tools-linux-4333796.zip && \\\n#      find /srv/android-sdk -executable  -type f -exec chmod o+x \\{\\} \\;\n#\n#   Install Android SDKs & Build Tools\n#  RUN yes | /srv/android-sdk/tools/bin/sdkmanager --licenses > /dev/null && \\\n#      /srv/android-sdk/tools/bin/sdkmanager \"platforms;android-26\" \"platforms;android-27\" \"build-tools;26.0.3\" \"build-tools;27.0.3\" \"platform-tools\" > /dev/null\n#\n#   --------------- Install 8.x node - this does an implicit apt-get update!\n#  RUN ( curl -sL https://deb.nodesource.com/setup_8.x | bash - ) && \\\n#      apt-get install -y nodejs && \\\n#      apt-get clean && \\\n#      rm /var/lib/apt/lists/*.* && \\\n#      rm -fr /tmp/* /var/tmp/*\n#   Provide a non-privileged user for running IntelliJ\nRUN useradd -mUs /bin/bash ideainspect\n#\n#   Install IntelliJ IDEA\n#\n#   IMPORTANT NOTES\n#\n#   1. V_IDEA_EDITION defines, which edition to build. Use C for Community or U for Ultimate\n#\n#   2. IDEA_CONFDIR is depending on the edition & version:\n#      I.e. its .IdeaIC2018.3 for the 2018.3 Community edition and .IntelliJIdea2018.3 for the same ultimate dition\n#\n#   3. The first run to pre-populate the indexes won't work with ultimate edition, yet. This is due to outstanding features in\n#      the current Docker daemon. See https://github.com/moby/buildkit/issues/763\n#\nENV V_IDEA=\"2018.3.3\"\nENV V_IDEA_EDITION=\"C\"\nENV IDEA_CONFDIR=\".IntelliJIdea2018.3\"\n#   For Ultimate it is: ENV IDEA_CONFDIR .IntelliJIdea2018.3\nRUN cd /srv \\\n && wget -nv https://download.jetbrains.com/idea/ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && tar xf ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && ln -s idea-I$V_IDEA_EDITION-* idea.latest \\\n && chown -R ideainspect:ideainspect /srv/idea.latest/bin \\\n && mkdir /home/ideainspect/$IDEA_CONFDIR \\\n && ln -s /home/ideainspect/$IDEA_CONFDIR idea.config.latest \\\n && rm ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz\n#   Point inspector to the new home\n#   NOTE: This only takes effect for user `root`. For user ideainspect check home/ideainspect/.bashrc\nENV IDEA_HOME=\"/srv/idea.latest\"\n#   The default locale is POSIX which breaks UTF-8 based javac files\n#   NOTE:\n#      This only taked effect for user root. Check home/ideainspect/.bashrc for main user\n#      environment variables\nRUN locale-gen en_US.UTF-8\nRUN update-locale en_US.UTF8\nENV LANG=\"\\\"en_US.UTF-8\\\"\"\nENV LC_MESSAGES=\"\\\"C\\\"\"\n#   Copy files into container\nCOPY /idea-cli-inspector /\nCOPY /docker-entrypoint.sh /\n#   Bash Environments & Default IDEA config\nCOPY /home /home\nRUN chown -R ideainspect:ideainspect /home/ideainspect\n#   Prepare a sample project\nCOPY / /project\nRUN chown -R ideainspect:ideainspect /project\n#   Initial run to populate index i.e. for JDKs. This should reduce startup times.\n#   NOTE: This won't run for Ultimate Edition, as a licence key is missing during execution and current docker\n#         version provide no means to inject secrets during build time. JUST COMMENT IT OUT FOR NOW IN CASE OF ISSUES\nRUN [\"/docker-entrypoint.sh\", \"-r\", \"/project\"]\n#\n#\n#    At some time this might work, by providing the idea.key as a secret during build time:\n#  RUN --mount=type=secret,id=idea.key,target=/srv/idea.config.latest/idea.key,required,mode=0444 [ \"/docker-entrypoint.sh\", \"-r\",\"/project\" ]\n#\n#    To get this working you need to:\n#     1. add th following line on the very top of this file\n#           # syntax = docker/dockerfile:experimental\n#     2. Build the image with BuildKit enabled:\n#         DOCKER_BUILDKIT=1 docker build --secret id=idea.key,src=/home/ben/.IntelliJIdea2018.3/config/idea.key \\\n#                                            -t bentolor/idea-cli-inspector .\n#\n#   Provide an entry point script which also creates starts Bamboo with a\n#   dedicated user\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#   Define default command.\nCMD [\"--help\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker-based IntelliJ IDEA Inspections using idea-cli-inspector\n#\n#  NOTE:\n#   This Dockerfile provides quite a bunch of commented-out statements\n#   as template for creatng your own, derived docker image in case i.e.\n#   you want to use the Ultimate edition or need additional build tools.\n#\nFROM openjdk:8\nMAINTAINER Benjamin Schmid <dockerhub@benjamin-schmid.de>\n#  First install some basic tools to get them or their latest versions (wget, apt).\nRUN apt-get update \\\n && apt-get install wget sudo locales groovy -y \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm /var/lib/apt/lists/*.* \\\n && rm -fr /tmp/* /var/tmp/*\n#  --------------- Install Oracle Java PPAs\n# RUN echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/webupd8team-java.list\n# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\n# RUN echo \"deb http://ppa.launchpad.net/linuxuprising/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/linuxuprising-java.list\n# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A\n#\n#  Mark Oracle license accepted\n# RUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n# RUN echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n# RUN echo oracle-java10-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#\n#  Install Java 8, Java 10, Groovy, mongodb-client & graphviz via package repository\n# RUN apt-get update && \\\n#     apt-get install -y --no-install-recommends \\\n#                        oracle-java8-installer \\\n#                        oracle-java8-set-default \\\n#                        oracle-java8-unlimited-jce-policy \\\n#                        oracle-java10-installer \\\n#                        && \\\n#     apt-get autoremove --purge -y && \\\n#     apt-get clean && \\\n#     rm -fr /var/cache/oracle-jdk* && \\\n#     rm /var/lib/apt/lists/*.* && \\\n#     rm -fr /tmp/* /var/tmp/*\n#\n#\n#  --------------- Install Android SDK Tools\n# RUN mkdir -p /srv/android-sdk && cd /srv/android-sdk && \\\n#     wget -nv https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && \\\n#     echo \"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdk-tools-linux-4333796.zip\" | sha256sum -c - && \\\n#     unzip -q sdk-tools-linux-4333796.zip && \\\n#     rm sdk-tools-linux-4333796.zip && \\\n#     find /srv/android-sdk -executable  -type f -exec chmod o+x \\{\\} \\;\n#\n#  Install Android SDKs & Build Tools\n# RUN yes | /srv/android-sdk/tools/bin/sdkmanager --licenses > /dev/null && \\\n#     /srv/android-sdk/tools/bin/sdkmanager \"platforms;android-26\" \"platforms;android-27\" \"build-tools;26.0.3\" \"build-tools;27.0.3\" \"platform-tools\" > /dev/null\n#\n#  --------------- Install 8.x node - this does an implicit apt-get update!\n# RUN ( curl -sL https://deb.nodesource.com/setup_8.x | bash - ) && \\\n#     apt-get install -y nodejs && \\\n#     apt-get clean && \\\n#     rm /var/lib/apt/lists/*.* && \\\n#     rm -fr /tmp/* /var/tmp/*\n#  Provide a non-privileged user for running IntelliJ\nRUN useradd -mUs /bin/bash ideainspect\n#\n#  Install IntelliJ IDEA\n#\n#  IMPORTANT NOTES\n#\n#  1. V_IDEA_EDITION defines, which edition to build. Use C for Community or U for Ultimate\n#\n#  2. IDEA_CONFDIR is depending on the edition & version:\n#     I.e. its .IdeaIC2018.3 for the 2018.3 Community edition and .IntelliJIdea2018.3 for the same ultimate dition\n#\n#  3. The first run to pre-populate the indexes won't work with ultimate edition, yet. This is due to outstanding features in\n#     the current Docker daemon. See https://github.com/moby/buildkit/issues/763\n#\nENV V_IDEA=\"2018.3.3\"\nENV V_IDEA_EDITION=\"C\"\nENV IDEA_CONFDIR=\".IntelliJIdea2018.3\"\n#  For Ultimate it is: ENV IDEA_CONFDIR .IntelliJIdea2018.3\nRUN cd /srv \\\n && wget -nv https://download.jetbrains.com/idea/ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && tar xf ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && ln -s idea-I$V_IDEA_EDITION-* idea.latest \\\n && chown -R ideainspect:ideainspect /srv/idea.latest/bin \\\n && mkdir /home/ideainspect/$IDEA_CONFDIR \\\n && ln -s /home/ideainspect/$IDEA_CONFDIR idea.config.latest \\\n && rm ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz\n#  Point inspector to the new home\n#  NOTE: This only takes effect for user `root`. For user ideainspect check home/ideainspect/.bashrc\nENV IDEA_HOME=\"/srv/idea.latest\"\n#  The default locale is POSIX which breaks UTF-8 based javac files\n#  NOTE:\n#     This only taked effect for user root. Check home/ideainspect/.bashrc for main user\n#     environment variables\nRUN locale-gen en_US.UTF-8\nRUN update-locale en_US.UTF8\nENV LANG=\"\\\"en_US.UTF-8\\\"\"\nENV LC_MESSAGES=\"\\\"C\\\"\"\n#  Copy files into container\nCOPY /idea-cli-inspector /\nCOPY /docker-entrypoint.sh /\n#  Bash Environments & Default IDEA config\nCOPY /home /home\nRUN chown -R ideainspect:ideainspect /home/ideainspect\n#  Prepare a sample project\nCOPY / /project\nRUN chown -R ideainspect:ideainspect /project\n#  Initial run to populate index i.e. for JDKs. This should reduce startup times.\n#  NOTE: This won't run for Ultimate Edition, as a licence key is missing during execution and current docker\n#        version provide no means to inject secrets during build time. JUST COMMENT IT OUT FOR NOW IN CASE OF ISSUES\nRUN [\"/docker-entrypoint.sh\", \"-r\", \"/project\"]\n#\n#\n#   At some time this might work, by providing the idea.key as a secret during build time:\n# RUN --mount=type=secret,id=idea.key,target=/srv/idea.config.latest/idea.key,required,mode=0444 [ \"/docker-entrypoint.sh\", \"-r\",\"/project\" ]\n#\n#   To get this working you need to:\n#    1. add th following line on the very top of this file\n#          # syntax = docker/dockerfile:experimental\n#    2. Build the image with BuildKit enabled:\n#        DOCKER_BUILDKIT=1 docker build --secret id=idea.key,src=/home/ben/.IntelliJIdea2018.3/config/idea.key \\\n#                                           -t bentolor/idea-cli-inspector .\n#\n#  Provide an entry point script which also creates starts Bamboo with a\n#  dedicated user\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#  Define default command.\nCMD [\"--help\"]\n","injectedSmells":[],"originalDockerfileHash":"d594cdf26b7eddacca53e883152dd711","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker-based IntelliJ IDEA Inspections using idea-cli-inspector\n#\n#   NOTE:\n#    This Dockerfile provides quite a bunch of commented-out statements\n#    as template for creatng your own, derived docker image in case i.e.\n#    you want to use the Ultimate edition or need additional build tools.\n#\nFROM openjdk:8\nMAINTAINER Benjamin Schmid <dockerhub@benjamin-schmid.de>\n#   First install some basic tools to get them or their latest versions (wget, apt).\nRUN apt-get update \\\n && apt-get install wget sudo locales groovy -y \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm /var/lib/apt/lists/*.* \\\n && rm -fr /tmp/* /var/tmp/*\n#   --------------- Install Oracle Java PPAs\n#  RUN echo \"deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/webupd8team-java.list\n#  RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\n#  RUN echo \"deb http://ppa.launchpad.net/linuxuprising/java/ubuntu xenial main\" | tee /etc/apt/sources.list.d/linuxuprising-java.list\n#  RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A\n#\n#   Mark Oracle license accepted\n#  RUN echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#  RUN echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections\n#  RUN echo oracle-java10-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections\n#\n#   Install Java 8, Java 10, Groovy, mongodb-client & graphviz via package repository\n#  RUN apt-get update && \\\n#      apt-get install -y --no-install-recommends \\\n#                         oracle-java8-installer \\\n#                         oracle-java8-set-default \\\n#                         oracle-java8-unlimited-jce-policy \\\n#                         oracle-java10-installer \\\n#                         && \\\n#      apt-get autoremove --purge -y && \\\n#      apt-get clean && \\\n#      rm -fr /var/cache/oracle-jdk* && \\\n#      rm /var/lib/apt/lists/*.* && \\\n#      rm -fr /tmp/* /var/tmp/*\n#\n#\n#   --------------- Install Android SDK Tools\n#  RUN mkdir -p /srv/android-sdk && cd /srv/android-sdk && \\\n#      wget -nv https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && \\\n#      echo \"92ffee5a1d98d856634e8b71132e8a95d96c83a63fde1099be3d86df3106def9  sdk-tools-linux-4333796.zip\" | sha256sum -c - && \\\n#      unzip -q sdk-tools-linux-4333796.zip && \\\n#      rm sdk-tools-linux-4333796.zip && \\\n#      find /srv/android-sdk -executable  -type f -exec chmod o+x \\{\\} \\;\n#\n#   Install Android SDKs & Build Tools\n#  RUN yes | /srv/android-sdk/tools/bin/sdkmanager --licenses > /dev/null && \\\n#      /srv/android-sdk/tools/bin/sdkmanager \"platforms;android-26\" \"platforms;android-27\" \"build-tools;26.0.3\" \"build-tools;27.0.3\" \"platform-tools\" > /dev/null\n#\n#   --------------- Install 8.x node - this does an implicit apt-get update!\n#  RUN ( curl -sL https://deb.nodesource.com/setup_8.x | bash - ) && \\\n#      apt-get install -y nodejs && \\\n#      apt-get clean && \\\n#      rm /var/lib/apt/lists/*.* && \\\n#      rm -fr /tmp/* /var/tmp/*\n#   Provide a non-privileged user for running IntelliJ\nRUN useradd -mUs /bin/bash ideainspect\n#\n#   Install IntelliJ IDEA\n#\n#   IMPORTANT NOTES\n#\n#   1. V_IDEA_EDITION defines, which edition to build. Use C for Community or U for Ultimate\n#\n#   2. IDEA_CONFDIR is depending on the edition & version:\n#      I.e. its .IdeaIC2018.3 for the 2018.3 Community edition and .IntelliJIdea2018.3 for the same ultimate dition\n#\n#   3. The first run to pre-populate the indexes won't work with ultimate edition, yet. This is due to outstanding features in\n#      the current Docker daemon. See https://github.com/moby/buildkit/issues/763\n#\nENV V_IDEA=\"2018.3.3\"\nENV V_IDEA_EDITION=\"C\"\nENV IDEA_CONFDIR=\".IntelliJIdea2018.3\"\n#   For Ultimate it is: ENV IDEA_CONFDIR .IntelliJIdea2018.3\nRUN cd /srv \\\n && wget -nv https://download.jetbrains.com/idea/ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && tar xf ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz \\\n && ln -s idea-I$V_IDEA_EDITION-* idea.latest \\\n && chown -R ideainspect:ideainspect /srv/idea.latest/bin \\\n && mkdir /home/ideainspect/$IDEA_CONFDIR \\\n && ln -s /home/ideainspect/$IDEA_CONFDIR idea.config.latest \\\n && rm ideaI$V_IDEA_EDITION-$V_IDEA-no-jdk.tar.gz\n#   Point inspector to the new home\n#   NOTE: This only takes effect for user `root`. For user ideainspect check home/ideainspect/.bashrc\nENV IDEA_HOME=\"/srv/idea.latest\"\n#   The default locale is POSIX which breaks UTF-8 based javac files\n#   NOTE:\n#      This only taked effect for user root. Check home/ideainspect/.bashrc for main user\n#      environment variables\nRUN locale-gen en_US.UTF-8\nRUN update-locale en_US.UTF8\nENV LANG=\"\\\"en_US.UTF-8\\\"\"\nENV LC_MESSAGES=\"\\\"C\\\"\"\n#   Copy files into container\nCOPY /idea-cli-inspector /\nCOPY /docker-entrypoint.sh /\n#   Bash Environments & Default IDEA config\nCOPY /home /home\nRUN chown -R ideainspect:ideainspect /home/ideainspect\n#   Prepare a sample project\nCOPY / /project\nRUN chown -R ideainspect:ideainspect /project\n#   Initial run to populate index i.e. for JDKs. This should reduce startup times.\n#   NOTE: This won't run for Ultimate Edition, as a licence key is missing during execution and current docker\n#         version provide no means to inject secrets during build time. JUST COMMENT IT OUT FOR NOW IN CASE OF ISSUES\nRUN [\"/docker-entrypoint.sh\", \"-r\", \"/project\"]\n#\n#\n#    At some time this might work, by providing the idea.key as a secret during build time:\n#  RUN --mount=type=secret,id=idea.key,target=/srv/idea.config.latest/idea.key,required,mode=0444 [ \"/docker-entrypoint.sh\", \"-r\",\"/project\" ]\n#\n#    To get this working you need to:\n#     1. add th following line on the very top of this file\n#           # syntax = docker/dockerfile:experimental\n#     2. Build the image with BuildKit enabled:\n#         DOCKER_BUILDKIT=1 docker build --secret id=idea.key,src=/home/ben/.IntelliJIdea2018.3/config/idea.key \\\n#                                            -t bentolor/idea-cli-inspector .\n#\n#   Provide an entry point script which also creates starts Bamboo with a\n#   dedicated user\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#   Define default command.\nCMD [\"--help\"]\n","originalDockerfileUglifiedHash":"f836f1b4238ac32fb062df64d59acb78","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/43ba2dcfa2aeefc4afccf7fec4ce0d935923d292.dockerfile"}