{"seed":4096801891,"processedDockerfileHash":"193291b0c479c77531719150c40f8fff","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  using neurodebian runtime as parent image\nFROM neurodebian:xenial-non-free\nMAINTAINER The C-PAC Team <cnl@childmind.org>\nRUN :\n#   Install the validator\nRUN (apt-get update ;apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 -y ) \\\n && curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y )\nRUN npm install bids-validator@1.11.0 -g\n#   Install Ubuntu dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 git=1:2.7.4-0ubuntu1.10 graphviz=2.38.0-12ubuntu2.1 graphviz-dev=2.38.0-12ubuntu2.1 gsl-bin=2.1+dfsg-2 libcanberra-gtk-module=0.30-2.1ubuntu1 libexpat1-dev=2.1.0-7ubuntu0.16.04.5 libgiftiio-dev=1.0.9-1 libglib2.0-dev=2.48.2-0ubuntu4.8 libglu1-mesa=9.0.0-2.1 libglu1-mesa-dev=9.0.0-2.1 libjpeg-progs=1:9b-1ubuntu1 libgl1-mesa-dri=18.0.5-0ubuntu0~16.04.1 libglw1-mesa=8.0.0-1.1 libxml2=2.9.3+dfsg1-1ubuntu0.7 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxext-dev=2:1.3.3-1 libxft2=2.3.2-1 libxft-dev=2.3.2-1 libxi-dev=2:1.7.6-1 libxmu-headers=2:1.1.2-2 libxmu-dev=2:1.1.2-2 libxpm-dev=1:3.5.11-1ubuntu0.16.04.1 libxslt1-dev=1.1.28-2.1ubuntu0.3 m4=1.4.17-5 make=4.1-6 mesa-common-dev=18.0.5-0ubuntu0~16.04.1 mesa-utils=8.3.0-1 netpbm=2:10.0-15.3 pkg-config=0.29.1-0ubuntu1 tcsh=6.18.01-5 unzip=6.0-20ubuntu1.1 xvfb=2:1.18.4-0ubuntu0.12 xauth=1:1.0.9-1ubuntu2 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y )\n#   Install 16.04 dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends dh-autoreconf=11 libgsl-dev=2.1+dfsg-2 libmotif-dev=2.3.4-10 libtool=2.4.6-0.1 libx11-dev=2:1.6.3-1ubuntu2.2 libxext-dev=2:1.3.3-1 x11proto-xext-dev=7.3.0-1 x11proto-print-dev=1.0.5-2 xutils-dev=1:7.7+3ubuntu2 -y )\n#   Compiles libxp- this is necessary for some newer versions of Ubuntu\n#   where the is no Debian package available.\nRUN git clone git://anongit.freedesktop.org/xorg/lib/libXp /tmp/libXp \\\n && cd /tmp/libXp \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd - \\\n && rm -rf /tmp/libXp\n#   Installing and setting up c3d\nRUN mkdir -p /opt/c3d \\\n && curl -sSL \"http://downloads.sourceforge.net/project/c3d/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz\" | tar -xzC /opt/c3d --strip-components 1\nENV C3DPATH=\"/opt/c3d/\"\nENV PATH=\"$C3DPATH/bin:$PATH\"\n#   install AFNI\nCOPY dev/docker_data/required_afni_pkgs.txt /opt/required_afni_pkgs.txt\nRUN libs_path=/usr/lib/x86_64-linux-gnu \\\n && if [ -f $libs_path/libgsl.so.19 ] ; then ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0 ; fi \\\n && mkdir -p /opt/afni \\\n && curl -sO https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n && tar zxv -C /opt/afni --strip-components=1 -f linux_openmp_64.tgz $( cat /opt/required_afni_pkgs.txt ;) \\\n && rm -rf linux_openmp_64.tgz\n#   set up AFNI\nENV PATH=\"/opt/afni:$PATH\"\n#   install FSL\nRUN (apt-get update ;apt-get install --no-install-recommends fsl-core=5.0.8-5 fsl-atlases fsl-mni152-templates -y )\n#   setup FSL environment\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    PATH=\"/usr/lib/fsl/5.0:$PATH\"\n#   install CPAC resources into FSL\nRUN curl -sL http://fcon_1000.projects.nitrc.org/indi/cpac_resources.tar.gz -o /tmp/cpac_resources.tar.gz \\\n && tar xfz /tmp/cpac_resources.tar.gz -C /tmp \\\n && cp -n /tmp/cpac_image_resources/MNI_3mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/MNI_4mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/symmetric/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz $FSLDIR/data/atlases/HarvardOxford \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/2mm $FSLDIR/data/standard/tissuepriors \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/3mm $FSLDIR/data/standard/tissuepriors\n#   install ANTs\nRUN (apt-get update ;apt-get install --no-install-recommends ants -y )\n#   install ICA-AROMA\nRUN mkdir -p /opt/ICA-AROMA\nRUN curl -sL https://github.com/rhr-pruim/ICA-AROMA/archive/v0.4.3-beta.tar.gz | tar -xzC /opt/ICA-AROMA --strip-components 1\nRUN chmod +x /opt/ICA-AROMA/ICA_AROMA.py\nENV PATH=\"/opt/ICA-AROMA:$PATH\"\n#   install miniconda\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda-3.8.3-Linux-x86_64.sh \\\n && bash Miniconda-3.8.3-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda-3.8.3-Linux-x86_64.sh\n#   update path to include conda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\n#   install blas dependency first\nRUN conda install -y blas\n#   install conda dependencies\nRUN conda install -y cython==0.26 matplotlib=2.0.2 networkx==1.11 nose==1.3.7 numpy==1.13.0 pandas==0.23.4 scipy==1.2.1 traits==4.6.0 wxpython==3.0.0.0 pip\n#   install python dependencies\nCOPY requirements.txt /opt/requirements.txt\nRUN pip install pip==9.0.1 --upgrade\nRUN pip install -r /opt/requirements.txt\nRUN pip install xvfbwrapper==0.2.9\n#   install cpac templates\nCOPY dev/docker_data/cpac_templates.tar.gz /\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash\nRUN (apt-get update ;apt-get install --no-install-recommends git-lfs )\nRUN git lfs install\n#   Get atlases\nRUN mkdir /ndmg_atlases \\\n && GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/neurodata/neuroparc.git /tmp/neuroparc \\\n && cd /tmp/neuroparc \\\n && git lfs pull -I \"atlases/label/*\" \\\n && cp -r /tmp/neuroparc/atlases/label /ndmg_atlases/label \\\n && cd -\nCOPY dev/docker_data/default_pipeline.yml /cpac_resources/default_pipeline.yml\nCOPY dev/circleci_data/pipe-test_ci.yml /cpac_resources/pipe-test_ci.yml\nCOPY . /code\nRUN pip install -e /code\nCOPY dev/docker_data /code/docker_data\nRUN mv /code/docker_data/* /code \\\n && rm -Rf /code/docker_data \\\n && chmod +x /code/run.py\nENTRYPOINT [\"/code/run.py\"]\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# using neurodebian runtime as parent image\nFROM neurodebian:xenial-non-free\nMAINTAINER The C-PAC Team <cnl@childmind.org>\nRUN apt-get update\n#  Install the validator\nRUN apt-get install curl -y \\\n && curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && apt-get install nodejs -y\nRUN npm install bids-validator -g\n#  Install Ubuntu dependencies\nRUN apt-get install build-essential cmake git graphviz graphviz-dev gsl-bin libcanberra-gtk-module libexpat1-dev libgiftiio-dev libglib2.0-dev libglu1-mesa libglu1-mesa-dev libjpeg-progs libgl1-mesa-dri libglw1-mesa libxml2 libxml2-dev libxext-dev libxft2 libxft-dev libxi-dev libxmu-headers libxmu-dev libxpm-dev libxslt1-dev m4 make mesa-common-dev mesa-utils netpbm pkg-config tcsh unzip xvfb xauth zlib1g-dev -y\n#  Install 16.04 dependencies\nRUN apt-get install dh-autoreconf libgsl-dev libmotif-dev libtool libx11-dev libxext-dev x11proto-xext-dev x11proto-print-dev xutils-dev -y\n#  Compiles libxp- this is necessary for some newer versions of Ubuntu\n#  where the is no Debian package available.\nRUN git clone git://anongit.freedesktop.org/xorg/lib/libXp /tmp/libXp \\\n && cd /tmp/libXp \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd - \\\n && rm -rf /tmp/libXp\n#  Installing and setting up c3d\nRUN mkdir -p /opt/c3d \\\n && curl -sSL \"http://downloads.sourceforge.net/project/c3d/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz\" | tar -xzC /opt/c3d --strip-components 1\nENV C3DPATH=\"/opt/c3d/\"\nENV PATH=\"$C3DPATH/bin:$PATH\"\n#  install AFNI\nCOPY dev/docker_data/required_afni_pkgs.txt /opt/required_afni_pkgs.txt\nRUN libs_path=/usr/lib/x86_64-linux-gnu \\\n && if [ -f $libs_path/libgsl.so.19 ] ; then ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0 ; fi \\\n && mkdir -p /opt/afni \\\n && curl -sO https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n && tar zxv -C /opt/afni --strip-components=1 -f linux_openmp_64.tgz $( cat /opt/required_afni_pkgs.txt ;) \\\n && rm -rf linux_openmp_64.tgz\n#  set up AFNI\nENV PATH=\"/opt/afni:$PATH\"\n#  install FSL\nRUN apt-get install --no-install-recommends fsl-core fsl-atlases fsl-mni152-templates -y\n#  setup FSL environment\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    PATH=\"/usr/lib/fsl/5.0:$PATH\"\n#  install CPAC resources into FSL\nRUN curl -sL http://fcon_1000.projects.nitrc.org/indi/cpac_resources.tar.gz -o /tmp/cpac_resources.tar.gz \\\n && tar xfz /tmp/cpac_resources.tar.gz -C /tmp \\\n && cp -n /tmp/cpac_image_resources/MNI_3mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/MNI_4mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/symmetric/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz $FSLDIR/data/atlases/HarvardOxford \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/2mm $FSLDIR/data/standard/tissuepriors \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/3mm $FSLDIR/data/standard/tissuepriors\n#  install ANTs\nRUN apt-get install ants -y\n#  install ICA-AROMA\nRUN mkdir -p /opt/ICA-AROMA\nRUN curl -sL https://github.com/rhr-pruim/ICA-AROMA/archive/v0.4.3-beta.tar.gz | tar -xzC /opt/ICA-AROMA --strip-components 1\nRUN chmod +x /opt/ICA-AROMA/ICA_AROMA.py\nENV PATH=\"/opt/ICA-AROMA:$PATH\"\n#  install miniconda\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda-3.8.3-Linux-x86_64.sh \\\n && bash Miniconda-3.8.3-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda-3.8.3-Linux-x86_64.sh\n#  update path to include conda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\n#  install blas dependency first\nRUN conda install -y blas\n#  install conda dependencies\nRUN conda install -y cython==0.26 matplotlib=2.0.2 networkx==1.11 nose==1.3.7 numpy==1.13.0 pandas==0.23.4 scipy==1.2.1 traits==4.6.0 wxpython==3.0.0.0 pip\n#  install python dependencies\nCOPY requirements.txt /opt/requirements.txt\nRUN pip install pip==9.0.1 --upgrade\nRUN pip install -r /opt/requirements.txt\nRUN pip install xvfbwrapper\n#  install cpac templates\nADD dev/docker_data/cpac_templates.tar.gz /\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash\nRUN apt-get install git-lfs\nRUN git lfs install\n#  Get atlases\nRUN mkdir /ndmg_atlases \\\n && GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/neurodata/neuroparc.git /tmp/neuroparc \\\n && cd /tmp/neuroparc \\\n && git lfs pull -I \"atlases/label/*\" \\\n && cp -r /tmp/neuroparc/atlases/label /ndmg_atlases/label \\\n && cd -\nCOPY dev/docker_data/default_pipeline.yml /cpac_resources/default_pipeline.yml\nCOPY dev/circleci_data/pipe-test_ci.yml /cpac_resources/pipe-test_ci.yml\nCOPY . /code\nRUN pip install -e /code\nCOPY dev/docker_data /code/docker_data\nRUN mv /code/docker_data/* /code \\\n && rm -Rf /code/docker_data \\\n && chmod +x /code/run.py\nENTRYPOINT [\"/code/run.py\"]\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n","injectedSmells":[],"originalDockerfileHash":"fb38f67ee847fd7beb7f0d4ef4303c63","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  using neurodebian runtime as parent image\nFROM neurodebian:xenial-non-free\nMAINTAINER The C-PAC Team <cnl@childmind.org>\nRUN apt-get update\n#   Install the validator\nRUN apt-get install curl -y \\\n && curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && apt-get install nodejs -y\nRUN npm install bids-validator -g\n#   Install Ubuntu dependencies\nRUN apt-get install build-essential cmake git graphviz graphviz-dev gsl-bin libcanberra-gtk-module libexpat1-dev libgiftiio-dev libglib2.0-dev libglu1-mesa libglu1-mesa-dev libjpeg-progs libgl1-mesa-dri libglw1-mesa libxml2 libxml2-dev libxext-dev libxft2 libxft-dev libxi-dev libxmu-headers libxmu-dev libxpm-dev libxslt1-dev m4 make mesa-common-dev mesa-utils netpbm pkg-config tcsh unzip xvfb xauth zlib1g-dev -y\n#   Install 16.04 dependencies\nRUN apt-get install dh-autoreconf libgsl-dev libmotif-dev libtool libx11-dev libxext-dev x11proto-xext-dev x11proto-print-dev xutils-dev -y\n#   Compiles libxp- this is necessary for some newer versions of Ubuntu\n#   where the is no Debian package available.\nRUN git clone git://anongit.freedesktop.org/xorg/lib/libXp /tmp/libXp \\\n && cd /tmp/libXp \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd - \\\n && rm -rf /tmp/libXp\n#   Installing and setting up c3d\nRUN mkdir -p /opt/c3d \\\n && curl -sSL \"http://downloads.sourceforge.net/project/c3d/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz\" | tar -xzC /opt/c3d --strip-components 1\nENV C3DPATH=\"/opt/c3d/\"\nENV PATH=\"$C3DPATH/bin:$PATH\"\n#   install AFNI\nCOPY dev/docker_data/required_afni_pkgs.txt /opt/required_afni_pkgs.txt\nRUN libs_path=/usr/lib/x86_64-linux-gnu \\\n && if [ -f $libs_path/libgsl.so.19 ] ; then ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0 ; fi \\\n && mkdir -p /opt/afni \\\n && curl -sO https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \\\n && tar zxv -C /opt/afni --strip-components=1 -f linux_openmp_64.tgz $( cat /opt/required_afni_pkgs.txt ;) \\\n && rm -rf linux_openmp_64.tgz\n#   set up AFNI\nENV PATH=\"/opt/afni:$PATH\"\n#   install FSL\nRUN apt-get install --no-install-recommends fsl-core fsl-atlases fsl-mni152-templates -y\n#   setup FSL environment\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\" \\\n    PATH=\"/usr/lib/fsl/5.0:$PATH\"\n#   install CPAC resources into FSL\nRUN curl -sL http://fcon_1000.projects.nitrc.org/indi/cpac_resources.tar.gz -o /tmp/cpac_resources.tar.gz \\\n && tar xfz /tmp/cpac_resources.tar.gz -C /tmp \\\n && cp -n /tmp/cpac_image_resources/MNI_3mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/MNI_4mm/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/symmetric/* $FSLDIR/data/standard \\\n && cp -n /tmp/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz $FSLDIR/data/atlases/HarvardOxford \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/2mm $FSLDIR/data/standard/tissuepriors \\\n && cp -nr /tmp/cpac_image_resources/tissuepriors/3mm $FSLDIR/data/standard/tissuepriors\n#   install ANTs\nRUN apt-get install ants -y\n#   install ICA-AROMA\nRUN mkdir -p /opt/ICA-AROMA\nRUN curl -sL https://github.com/rhr-pruim/ICA-AROMA/archive/v0.4.3-beta.tar.gz | tar -xzC /opt/ICA-AROMA --strip-components 1\nRUN chmod +x /opt/ICA-AROMA/ICA_AROMA.py\nENV PATH=\"/opt/ICA-AROMA:$PATH\"\n#   install miniconda\nRUN curl -sO https://repo.continuum.io/miniconda/Miniconda-3.8.3-Linux-x86_64.sh \\\n && bash Miniconda-3.8.3-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda-3.8.3-Linux-x86_64.sh\n#   update path to include conda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\n#   install blas dependency first\nRUN conda install -y blas\n#   install conda dependencies\nRUN conda install -y cython==0.26 matplotlib=2.0.2 networkx==1.11 nose==1.3.7 numpy==1.13.0 pandas==0.23.4 scipy==1.2.1 traits==4.6.0 wxpython==3.0.0.0 pip\n#   install python dependencies\nCOPY requirements.txt /opt/requirements.txt\nRUN pip install pip==9.0.1 --upgrade\nRUN pip install -r /opt/requirements.txt\nRUN pip install xvfbwrapper\n#   install cpac templates\nADD dev/docker_data/cpac_templates.tar.gz /\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash\nRUN apt-get install git-lfs\nRUN git lfs install\n#   Get atlases\nRUN mkdir /ndmg_atlases \\\n && GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/neurodata/neuroparc.git /tmp/neuroparc \\\n && cd /tmp/neuroparc \\\n && git lfs pull -I \"atlases/label/*\" \\\n && cp -r /tmp/neuroparc/atlases/label /ndmg_atlases/label \\\n && cd -\nCOPY dev/docker_data/default_pipeline.yml /cpac_resources/default_pipeline.yml\nCOPY dev/circleci_data/pipe-test_ci.yml /cpac_resources/pipe-test_ci.yml\nCOPY . /code\nRUN pip install -e /code\nCOPY dev/docker_data /code/docker_data\nRUN mv /code/docker_data/* /code \\\n && rm -Rf /code/docker_data \\\n && chmod +x /code/run.py\nENTRYPOINT [\"/code/run.py\"]\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n","originalDockerfileUglifiedHash":"43d498776ca5a821bb3380468747ffdb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e174d1ee7571d84e85f84175cba06a536e7f3742.dockerfile"}