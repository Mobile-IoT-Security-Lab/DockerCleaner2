{"seed":2251656507,"processedDockerfileHash":"5173a6f4385c6eae808486064903d4df","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Dockerfile for Hyperledger fabric all-in-one development, including:\n#   * fabric-peer\n#   * fabric-orderer\n#   * fabric-ca\n#   * cryptogen\n#   * configtxgen\n#   * configtxlator\n#   * chaintools\n#   * gotools\n#   If you need a pure peer node to run, please see the \n#   * yeasy/hyperledger-peer\n#   * yeasy/hyperledger-orderer\n#   * yeasy/hyperledger-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.8\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#   fabric-peers\nEXPOSE 7050/tcp 7051/tcp\n#   fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV ARCH=\"x86_64\"\n#   version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE=\"0.3.1\"\n#   BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION=\"1.0.1\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.1-snapshot-51b7e85\nENV PROJECT_VERSION=\"1.0.1\"\n#   generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n#   peer env \nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#   orderer env \nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#   ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"$HOME/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config /chaincode/input /chaincode/output $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /var/hyperledger/fabric-ca-server\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils python-dev -y \\\n && apt-get install --no-install-recommends libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install --no-install-recommends python-pip -y \\\n && apt-get install --no-install-recommends vim tree jq unzip -y \\\n && pip install pip==23.1 --upgrade \\\n && pip install behave==1.2.6 nose==1.3.7 docker-compose==1.29.2 \\\n && rm -rf /var/cache/apt\n#   Install chaintool\nRUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#   install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx//tool/configtxgen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n && go build \\\n && mv block-listener $GOPATH/bin\n#   install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\n#   install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\nCOPY crypto-config $FABRIC_CFG_PATH/crypto-config\n#   install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#   This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#   Useful scripts for quickly compiling local code\nCOPY scripts/*.sh /tmp/\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n#   temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile for Hyperledger fabric all-in-one development, including:\n#  * fabric-peer\n#  * fabric-orderer\n#  * fabric-ca\n#  * cryptogen\n#  * configtxgen\n#  * configtxlator\n#  * chaintools\n#  * gotools\n#  If you need a pure peer node to run, please see the \n#  * yeasy/hyperledger-peer\n#  * yeasy/hyperledger-orderer\n#  * yeasy/hyperledger-ca\n#  Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#  Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.8\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#  fabric-peers\nEXPOSE 7050/tcp 7051/tcp\n#  fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV ARCH=\"x86_64\"\n#  version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE=\"0.3.1\"\n#  BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION=\"1.0.1\"\n#  version for the peer/orderer binaries, the community version tracks the hash value like 1.0.1-snapshot-51b7e85\nENV PROJECT_VERSION=\"1.0.1\"\n#  generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#  for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n#  peer env \nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#  orderer env \nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#  ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"$HOME/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config /chaincode/input /chaincode/output $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /var/hyperledger/fabric-ca-server\n#  Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install vim tree jq unzip -y \\\n && pip install pip --upgrade \\\n && pip install behave nose docker-compose \\\n && rm -rf /var/cache/apt\n#  Install chaintool\nRUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#  Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#  Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#  install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx//tool/configtxgen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#  Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n && go build \\\n && mv block-listener $GOPATH/bin\n#  install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\n#  install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\nADD crypto-config $FABRIC_CFG_PATH/crypto-config\n#  install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#  This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#  The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#  Useful scripts for quickly compiling local code\nADD scripts/*.sh /tmp/\n#  This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n#  temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","injectedSmells":[],"originalDockerfileHash":"41c34fe49c451310ad08353186358d3b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile for Hyperledger fabric all-in-one development, including:\n#   * fabric-peer\n#   * fabric-orderer\n#   * fabric-ca\n#   * cryptogen\n#   * configtxgen\n#   * configtxlator\n#   * chaintools\n#   * gotools\n#   If you need a pure peer node to run, please see the \n#   * yeasy/hyperledger-peer\n#   * yeasy/hyperledger-orderer\n#   * yeasy/hyperledger-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.8\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#   fabric-peers\nEXPOSE 7050/tcp 7051/tcp\n#   fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV ARCH=\"x86_64\"\n#   version for the base images, e.g., fabric-ccenv, fabric-baseos\nENV BASEIMAGE_RELEASE=\"0.3.1\"\n#   BASE_VERSION is required in core.yaml to build and run cc container\nENV BASE_VERSION=\"1.0.1\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.1-snapshot-51b7e85\nENV PROJECT_VERSION=\"1.0.1\"\n#   generic builder environment: builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger\"\n#   peer env \nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#   orderer env \nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#   ca env, # ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"$HOME/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config /chaincode/input /chaincode/output $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /var/hyperledger/fabric-ca-server\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install vim tree jq unzip -y \\\n && pip install pip --upgrade \\\n && pip install behave nose docker-compose \\\n && rm -rf /var/cache/apt\n#   Install chaintool\nRUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.1/chaintool > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   Install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#   install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && CGO_CFLAGS=\" \" go install -tags \"nopkcs11\" -ldflags \"-X github.com/hyperledger/fabric/common/configtx/tool/configtxgen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/configtx//tool/configtxgen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/cryptogen/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && CGO_CFLAGS=\" \" go install -tags \"\" -ldflags \"-X github.com/hyperledger/fabric/common/tools/configtxlator/metadata.Version=${PROJECT_VERSION}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install block-listener\nRUN cd $FABRIC_ROOT/examples/events/block-listener \\\n && go build \\\n && mv block-listener $GOPATH/bin\n#   install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\n#   install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS -linkmode external -extldflags '-static -lpthread'\" \\\n && go clean\nADD crypto-config $FABRIC_CFG_PATH/crypto-config\n#   install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \" -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#   This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#   Useful scripts for quickly compiling local code\nADD scripts/*.sh /tmp/\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\n#   temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","originalDockerfileUglifiedHash":"89e2a77ee62465a387a1ba0a62ee593b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8cb3b8a91e9bcad1dafaf44b0a3d37303663f970.dockerfile"}