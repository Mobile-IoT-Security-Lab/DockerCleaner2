{"seed":3181791995,"processedDockerfileHash":"95de6378c305ab134ba159cc7cea7f1b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   %CopyrightBegin%\n#\n#   Copyright Ericsson AB 2019. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\n#   %CopyrightEnd%\n#   Sources:\n#   * Dockerfile created by Rickard Green (rickard.s.green@ericsson.com)\n#     https://gist.github.com/rickard-green/8930e6643800440fde470f9e2e1ff2be),\n#   * The other Dockerfile in this directory created by Lukas Larsson\n#     (lukas.larsson@erlang-solutions.com)\n#   * Makefile by Matthias Lang (matthias@corelatus.se)\n#     http://erlang.org/pipermail/erlang-questions/2016-February/087935.html\n#\n#   Created by Kjell Winblad (kjell.a.winblad@ericsson.com).\n#   Use the following command to build an image using this docker file:\n#\n#   docker build --file Dockerfile.very_small_image -t erlang-dockerwatch .\n#   Build stage 0\nFROM alpine:latest AS build\n#  #############################################\n#   Build Erlang/OTP\n#  #############################################\nENV FETCH_DEPS=\"git ca-certificates\"\nENV BUILD_DEPS=\"dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf tar zip openssl-dev\"\nENV CONFIGURE_FLAGS=\"--without-termcap --disable-hipe --without-javac\"\nENV CFLAGS=\"-O2 -g\"\n#   Fetch dependencies...\nRUN set -xe \\\n && apk add $FETCH_DEPS --no-cache --virtual .fetch-deps \\\n && apk add $BUILD_DEPS --no-cache --virtual .build-deps\nENV WDIR=\"/usr/local/src\"\nWORKDIR $WDIR\n#   Determine which branch to build\nARG OTP\nENV BRANCH=\"\\\"maint-${OTP:-21}\\\"\"\nENV OTP_GIT_URL=\"https://github.com/erlang/otp.git\"\nENV ERL_TOP=\"/usr/local/src/erlang-otp-source-$BRANCH\"\nENV DESTDIR=\"/usr/local/src/erlang-otp-install\"\nENV DEST_OTP_ROOT=\"$DESTDIR/usr/local/lib/erlang\"\n#   Fetch, build, and install OTP\nRUN set -xe \\\n && git clone --branch $BRANCH --depth 1 $OTP_GIT_URL $ERL_TOP \\\n && cd $ERL_TOP \\\n && ./otp_build autoconf \\\n && ./configure $CONFIGURE_FLAGS --build=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install DESTDIR=$DESTDIR \\\n && rm -rf $ERL_TOP\n#   Cleanup OTP installation\nRUN set -xe \\\n && find $DESTDIR -regex \"$DEST_OTP_ROOT/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)\" | xargs rm -rf \\\n && find $DESTDIR -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n && find $DESTDIR -name src | xargs -r find | xargs rmdir -vp || true\n#   Remove unnecessary files\nRUN set -xe \\\n && rm -rf $DEST_OTP_ROOT/Install \\\n && rm -rf $DEST_OTP_ROOT/releases \\\n && rm -rf $DEST_OTP_ROOT/bin/start_clean.boot \\\n && rm -rf $DEST_OTP_ROOT/erts*/lib/\nRUN cp -r /usr/local/src/erlang-otp-install/* /\n#  #############################################\n#   Create release of application\n#  #############################################\nRUN set -xe \\\n && apk add $( cat /usr/local/lib/erlang/otp-runtime-deps ;) --no-cache --virtual otp-runtime-deps\n#   Install Rebar3\nRUN mkdir -p /buildroot/rebar3/bin\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /buildroot/rebar3/bin/rebar3 https://s3.amazonaws.com/rebar3/rebar3\nRUN chmod a+x /buildroot/rebar3/bin/rebar3\n#   Setup Environment\nENV PATH=\"/buildroot/rebar3/bin:$PATH\"\nRUN apk add zip=3.0-r10 binutils=2.39-r2 --no-cache\n#   Reset working directory\nWORKDIR /buildroot\n#   Copy our Erlang test application\nCOPY dockerwatch dockerwatch\n#   And build the release\nWORKDIR dockerwatch\nRUN rebar3 as prod release\n#   Strip binaries\nRUN set -xe \\\n && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /buildroot | xargs -r strip --strip-all \\\n && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /buildroot | xargs -r strip --strip-unneeded\nENV RELDIR=\"/buildroot/dockerwatch/_build/prod/rel/dockerwatch\"\n#   Strip release\nRUN set -xe \\\n && erl -noshell -noinput -eval \"beam_lib:strip_release(\\\"$RELDIR\\\"),init:stop()\" \\\n && rm -rf /usr/local/lib/erlang\n#  Determine and save runtime dependencies for each application\nRUN set -xe \\\n && touch /otp-runtime-deps \\\n && for app in $RELDIR/erts-[0-9.]* $RELDIR/lib/[a-zA-Z_]*-[0-9.]*; do scanelf --needed --nobanner --format '%n#p' --recursive $app | tr ',' '\\n' | sort -u | sed 's/^[ \\t\\r]*\\([^ \\t\\r\\n][^ \\t\\r\\n]*\\)[ \\t\\r]*$/so:\\1/g' > $app/otp-app-runtime-deps \\\n && case $app in (*/erts-[0-9]*) echo \"lksctp-tools\" >> $app/otp-app-runtime-deps;;(*/wx-[0-9]*) echo \"ttf-freefont\" >> $app/otp-app-runtime-deps;;(*/jinterface-[0-9]*) echo openjdk8-jre >> $app/otp-app-runtime-deps;;(*) ;; esac \\\n && cat $app/otp-app-runtime-deps >> /otp-runtime-deps || exit 1 ; done \\\n && cat /otp-runtime-deps | sort -u > /otp-runtime-deps-sorted\n#   Compress libraries\n#   (asn and crypto contains nif libraries. The runtime system\n#   cannot load these libraries when they are in .ez files)\nRUN set -xe \\\n && cd $RELDIR/lib/ \\\n && ls . | grep -v asn | grep -v crypto | xargs -n1 sh -c 'zip -mr $1.ez $1' -\n#   Build stage 1\nFROM alpine:latest AS install\nCOPY --from=build /otp-runtime-deps-sorted /otp-runtime-deps\n#   Install dependencies\nRUN set -xe \\\n && apk add $( cat /otp-runtime-deps ;) --no-cache --virtual otp-runtime-deps\n#   Install the released application\nCOPY --from=build /buildroot/dockerwatch/_build/prod/rel/dockerwatch /dockerwatch\n#   Expose relevant ports\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nCMD [\"/dockerwatch/bin/dockerwatch\", \"foreground\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  %CopyrightBegin%\n#\n#  Copyright Ericsson AB 2019. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n#  %CopyrightEnd%\n#  Sources:\n#  * Dockerfile created by Rickard Green (rickard.s.green@ericsson.com)\n#    https://gist.github.com/rickard-green/8930e6643800440fde470f9e2e1ff2be),\n#  * The other Dockerfile in this directory created by Lukas Larsson\n#    (lukas.larsson@erlang-solutions.com)\n#  * Makefile by Matthias Lang (matthias@corelatus.se)\n#    http://erlang.org/pipermail/erlang-questions/2016-February/087935.html\n#\n#  Created by Kjell Winblad (kjell.a.winblad@ericsson.com).\n#  Use the following command to build an image using this docker file:\n#\n#  docker build --file Dockerfile.very_small_image -t erlang-dockerwatch .\n#  Build stage 0\nFROM alpine:latest AS build\n# #############################################\n#  Build Erlang/OTP\n# #############################################\nENV FETCH_DEPS=\"git ca-certificates\"\nENV BUILD_DEPS=\"dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf tar zip openssl-dev\"\nENV CONFIGURE_FLAGS=\"--without-termcap --disable-hipe --without-javac\"\nENV CFLAGS=\"-O2 -g\"\n#  Fetch dependencies...\nRUN set -xe \\\n && apk add --no-cache --virtual .fetch-deps $FETCH_DEPS \\\n && apk add --no-cache --virtual .build-deps $BUILD_DEPS\nENV WDIR=\"/usr/local/src\"\nWORKDIR $WDIR\n#  Determine which branch to build\nARG OTP\nENV BRANCH=\"\\\"maint-${OTP:-21}\\\"\"\nENV OTP_GIT_URL=\"https://github.com/erlang/otp.git\"\nENV ERL_TOP=\"/usr/local/src/erlang-otp-source-$BRANCH\"\nENV DESTDIR=\"/usr/local/src/erlang-otp-install\"\nENV DEST_OTP_ROOT=\"$DESTDIR/usr/local/lib/erlang\"\n#  Fetch, build, and install OTP\nRUN set -xe \\\n && git clone --branch $BRANCH --depth 1 $OTP_GIT_URL $ERL_TOP \\\n && cd $ERL_TOP \\\n && ./otp_build autoconf \\\n && ./configure $CONFIGURE_FLAGS --build=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install DESTDIR=$DESTDIR \\\n && rm -rf $ERL_TOP\n#  Cleanup OTP installation\nRUN set -xe \\\n && find $DESTDIR -regex \"$DEST_OTP_ROOT/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)\" | xargs rm -rf \\\n && find $DESTDIR -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n && find $DESTDIR -name src | xargs -r find | xargs rmdir -vp || true\n#  Remove unnecessary files\nRUN set -xe \\\n && rm -rf $DEST_OTP_ROOT/Install \\\n && rm -rf $DEST_OTP_ROOT/releases \\\n && rm -rf $DEST_OTP_ROOT/bin/start_clean.boot \\\n && rm -rf $DEST_OTP_ROOT/erts*/lib/\nRUN cp -r /usr/local/src/erlang-otp-install/* /\n# #############################################\n#  Create release of application\n# #############################################\nRUN set -xe \\\n && apk add --no-cache --virtual otp-runtime-deps $( cat /usr/local/lib/erlang/otp-runtime-deps ;)\n#  Install Rebar3\nRUN mkdir -p /buildroot/rebar3/bin\nADD https://s3.amazonaws.com/rebar3/rebar3 /buildroot/rebar3/bin/rebar3\nRUN chmod a+x /buildroot/rebar3/bin/rebar3\n#  Setup Environment\nENV PATH=\"/buildroot/rebar3/bin:$PATH\"\nRUN apk add --no-cache zip binutils\n#  Reset working directory\nWORKDIR /buildroot\n#  Copy our Erlang test application\nCOPY dockerwatch dockerwatch\n#  And build the release\nWORKDIR dockerwatch\nRUN rebar3 as prod release\n#  Strip binaries\nRUN set -xe \\\n && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /buildroot | xargs -r strip --strip-all \\\n && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /buildroot | xargs -r strip --strip-unneeded\nENV RELDIR=\"/buildroot/dockerwatch/_build/prod/rel/dockerwatch\"\n#  Strip release\nRUN set -xe \\\n && erl -noshell -noinput -eval \"beam_lib:strip_release(\\\"$RELDIR\\\"),init:stop()\" \\\n && rm -rf /usr/local/lib/erlang\n# Determine and save runtime dependencies for each application\nRUN set -xe \\\n && touch /otp-runtime-deps \\\n && for app in $RELDIR/erts-[0-9.]* $RELDIR/lib/[a-zA-Z_]*-[0-9.]*; do scanelf --needed --nobanner --format '%n#p' --recursive $app | tr ',' '\\n' | sort -u | sed 's/^[ \\t\\r]*\\([^ \\t\\r\\n][^ \\t\\r\\n]*\\)[ \\t\\r]*$/so:\\1/g' > $app/otp-app-runtime-deps \\\n && case $app in (*/erts-[0-9]*) echo \"lksctp-tools\" >> $app/otp-app-runtime-deps;;(*/wx-[0-9]*) echo \"ttf-freefont\" >> $app/otp-app-runtime-deps;;(*/jinterface-[0-9]*) echo openjdk8-jre >> $app/otp-app-runtime-deps;;(*) ;; esac \\\n && cat $app/otp-app-runtime-deps >> /otp-runtime-deps || exit 1 ; done \\\n && cat /otp-runtime-deps | sort -u > /otp-runtime-deps-sorted\n#  Compress libraries\n#  (asn and crypto contains nif libraries. The runtime system\n#  cannot load these libraries when they are in .ez files)\nRUN set -xe \\\n && cd $RELDIR/lib/ \\\n && ls . | grep -v asn | grep -v crypto | xargs -n1 sh -c 'zip -mr $1.ez $1' -\n#  Build stage 1\nFROM alpine:latest AS install\nCOPY --from=build /otp-runtime-deps-sorted /otp-runtime-deps\n#  Install dependencies\nRUN set -xe \\\n && apk add --no-cache --virtual otp-runtime-deps $( cat /otp-runtime-deps ;)\n#  Install the released application\nCOPY --from=build /buildroot/dockerwatch/_build/prod/rel/dockerwatch /dockerwatch\n#  Expose relevant ports\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nCMD [\"/dockerwatch/bin/dockerwatch\", \"foreground\"]\n","injectedSmells":[],"originalDockerfileHash":"eb4f35f031f4b83ab23b2bc6bda64afb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   %CopyrightBegin%\n#\n#   Copyright Ericsson AB 2019. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\n#   %CopyrightEnd%\n#   Sources:\n#   * Dockerfile created by Rickard Green (rickard.s.green@ericsson.com)\n#     https://gist.github.com/rickard-green/8930e6643800440fde470f9e2e1ff2be),\n#   * The other Dockerfile in this directory created by Lukas Larsson\n#     (lukas.larsson@erlang-solutions.com)\n#   * Makefile by Matthias Lang (matthias@corelatus.se)\n#     http://erlang.org/pipermail/erlang-questions/2016-February/087935.html\n#\n#   Created by Kjell Winblad (kjell.a.winblad@ericsson.com).\n#   Use the following command to build an image using this docker file:\n#\n#   docker build --file Dockerfile.very_small_image -t erlang-dockerwatch .\n#   Build stage 0\nFROM alpine:latest AS build\n#  #############################################\n#   Build Erlang/OTP\n#  #############################################\nENV FETCH_DEPS=\"git ca-certificates\"\nENV BUILD_DEPS=\"dpkg-dev dpkg gcc g++ libc-dev linux-headers make autoconf tar zip openssl-dev\"\nENV CONFIGURE_FLAGS=\"--without-termcap --disable-hipe --without-javac\"\nENV CFLAGS=\"-O2 -g\"\n#   Fetch dependencies...\nRUN set -xe \\\n && apk add --no-cache --virtual .fetch-deps $FETCH_DEPS \\\n && apk add --no-cache --virtual .build-deps $BUILD_DEPS\nENV WDIR=\"/usr/local/src\"\nWORKDIR $WDIR\n#   Determine which branch to build\nARG OTP\nENV BRANCH=\"\\\"maint-${OTP:-21}\\\"\"\nENV OTP_GIT_URL=\"https://github.com/erlang/otp.git\"\nENV ERL_TOP=\"/usr/local/src/erlang-otp-source-$BRANCH\"\nENV DESTDIR=\"/usr/local/src/erlang-otp-install\"\nENV DEST_OTP_ROOT=\"$DESTDIR/usr/local/lib/erlang\"\n#   Fetch, build, and install OTP\nRUN set -xe \\\n && git clone --branch $BRANCH --depth 1 $OTP_GIT_URL $ERL_TOP \\\n && cd $ERL_TOP \\\n && ./otp_build autoconf \\\n && ./configure $CONFIGURE_FLAGS --build=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install DESTDIR=$DESTDIR \\\n && rm -rf $ERL_TOP\n#   Cleanup OTP installation\nRUN set -xe \\\n && find $DESTDIR -regex \"$DEST_OTP_ROOT/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)\" | xargs rm -rf \\\n && find $DESTDIR -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n && find $DESTDIR -name src | xargs -r find | xargs rmdir -vp || true\n#   Remove unnecessary files\nRUN set -xe \\\n && rm -rf $DEST_OTP_ROOT/Install \\\n && rm -rf $DEST_OTP_ROOT/releases \\\n && rm -rf $DEST_OTP_ROOT/bin/start_clean.boot \\\n && rm -rf $DEST_OTP_ROOT/erts*/lib/\nRUN cp -r /usr/local/src/erlang-otp-install/* /\n#  #############################################\n#   Create release of application\n#  #############################################\nRUN set -xe \\\n && apk add --no-cache --virtual otp-runtime-deps $( cat /usr/local/lib/erlang/otp-runtime-deps ;)\n#   Install Rebar3\nRUN mkdir -p /buildroot/rebar3/bin\nADD https://s3.amazonaws.com/rebar3/rebar3 /buildroot/rebar3/bin/rebar3\nRUN chmod a+x /buildroot/rebar3/bin/rebar3\n#   Setup Environment\nENV PATH=\"/buildroot/rebar3/bin:$PATH\"\nRUN apk add --no-cache zip binutils\n#   Reset working directory\nWORKDIR /buildroot\n#   Copy our Erlang test application\nCOPY dockerwatch dockerwatch\n#   And build the release\nWORKDIR dockerwatch\nRUN rebar3 as prod release\n#   Strip binaries\nRUN set -xe \\\n && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /buildroot | xargs -r strip --strip-all \\\n && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /buildroot | xargs -r strip --strip-unneeded\nENV RELDIR=\"/buildroot/dockerwatch/_build/prod/rel/dockerwatch\"\n#   Strip release\nRUN set -xe \\\n && erl -noshell -noinput -eval \"beam_lib:strip_release(\\\"$RELDIR\\\"),init:stop()\" \\\n && rm -rf /usr/local/lib/erlang\n#  Determine and save runtime dependencies for each application\nRUN set -xe \\\n && touch /otp-runtime-deps \\\n && for app in $RELDIR/erts-[0-9.]* $RELDIR/lib/[a-zA-Z_]*-[0-9.]*; do scanelf --needed --nobanner --format '%n#p' --recursive $app | tr ',' '\\n' | sort -u | sed 's/^[ \\t\\r]*\\([^ \\t\\r\\n][^ \\t\\r\\n]*\\)[ \\t\\r]*$/so:\\1/g' > $app/otp-app-runtime-deps \\\n && case $app in (*/erts-[0-9]*) echo \"lksctp-tools\" >> $app/otp-app-runtime-deps;;(*/wx-[0-9]*) echo \"ttf-freefont\" >> $app/otp-app-runtime-deps;;(*/jinterface-[0-9]*) echo openjdk8-jre >> $app/otp-app-runtime-deps;;(*) ;; esac \\\n && cat $app/otp-app-runtime-deps >> /otp-runtime-deps || exit 1 ; done \\\n && cat /otp-runtime-deps | sort -u > /otp-runtime-deps-sorted\n#   Compress libraries\n#   (asn and crypto contains nif libraries. The runtime system\n#   cannot load these libraries when they are in .ez files)\nRUN set -xe \\\n && cd $RELDIR/lib/ \\\n && ls . | grep -v asn | grep -v crypto | xargs -n1 sh -c 'zip -mr $1.ez $1' -\n#   Build stage 1\nFROM alpine:latest AS install\nCOPY --from=build /otp-runtime-deps-sorted /otp-runtime-deps\n#   Install dependencies\nRUN set -xe \\\n && apk add --no-cache --virtual otp-runtime-deps $( cat /otp-runtime-deps ;)\n#   Install the released application\nCOPY --from=build /buildroot/dockerwatch/_build/prod/rel/dockerwatch /dockerwatch\n#   Expose relevant ports\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nCMD [\"/dockerwatch/bin/dockerwatch\", \"foreground\"]\n","originalDockerfileUglifiedHash":"da1b0b502bc4edecad370fac23f6eab3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7835251bf9666fcfb82340715e8a06dbb91c3738.dockerfile"}