{"seed":3406904756,"processedDockerfileHash":"2e1522134b2ce9457431f638cb3321ba","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #\n#  # Copyright (c) 2014-present, Facebook, Inc.\n#  # All rights reserved.\n#  #\n#  # This source code is licensed under the University of Illinois/NCSA Open\n#  # Source License found in the LICENSE file in the root directory of this\n#  # source tree. An additional grant of patent rights can be found in the\n#  # PATENTS file in the same directory.\n#  #\n#   BEFORE PUSHING A NEW DOCKER IMAGE, PLEASE READ ALL OF THESE INSTRUCTIONS!\n#\n#   To build a docker image using this file, run the following command:\n#       docker build --file Support/Testing/CircleCI/Dockerfile .\n#\n#   After building the image, you will see a line like this at the end of the\n#   build process:\n#       Successfully built 360abf8e6246\n#\n#   This hash identifies the image you just built. You can then run it locally\n#   with the following command:\n#       docker run --privileged --security-opt seccomp:unconfined --rm -it --name ds2-testing 360abf8e6246\n#   We run in privileged mode so that we may use ptrace to its full\n#   extent as needed.\n#\n#   When building a new docker image, it's important to tag it by the date and\n#   time you built the image so that we can revert to an older image if something\n#   goes wrong when we build the new one.\n#   For example, if you built the image on November 1st, 2018 at 4:20:00 pm, your tag\n#   would be something like: 2018-11-01_16-20-00.\n#\n#   Publishing the image for use by CircleCI is done with:\n#       docker tag 360abf8e6246 sas42/ds2-build-env:<tag>\n#       docker push sas42/ds2-build-env:<tag>\n#\n#   Alternatively, you can tag immediately after the build is finished via:\n#       docker build --file Support/Testing/CircleCI/Dockerfile --tag 2018-09-07_12-34-56\nFROM ubuntu:16.04\nMAINTAINER Stephane Sezer <sas@fb.com>\n#   Install apt tools\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.96.20.10 python-software-properties=0.96.20.10 wget=1.17.1-1ubuntu1.5 -y )\n#   In case lldb needs built\nRUN (apt-get update ;apt-get install --no-install-recommends libz-dev swig=3.0.8-0ubuntu3 ncurses-dev -y )\n#   Make the developer's life not suck\nRUN apt-add-repository -y ppa:neovim-ppa/stable\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends sudo=1.8.16-0ubuntu1.10 zsh=5.1.1-1ubuntu2.3 tmux=2.1-3build1 curl=7.47.0-1ubuntu2.19 vim=2:7.4.1689-3ubuntu1.5 neovim -y )\n#   Debugging tools\nRUN (apt-get update ;apt-get install --no-install-recommends strace=4.11-1ubuntu3 htop=2.0.1-1ubuntu1 psmisc=22.21-2.1ubuntu0.1 -y )\n#   Python 3.7 and misc\nRUN add-apt-repository -y ppa:deadsnakes/ppa\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends python3.7 -y )\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.7\nRUN python3.7 -m pip install --upgrade pip\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip=8.1.1-2ubuntu0.6 -y )\nRUN python -m pip install --upgrade pip\n#   Add LLVM apt repos\nRUN wget -O - \"http://llvm.org/apt/llvm-snapshot.gpg.key\" | apt-key add -\nRUN add-apt-repository -y \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main\"\nRUN :\n#   Install build dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends ninja-build=1.5.1-0.1ubuntu1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends flex=2.6.0-11 bison=2:3.0.4.dfsg-1 -y )\n#   Install x86 compilers\nRUN (apt-get update ;apt-get install --no-install-recommends g++-multilib=4:5.3.1-1ubuntu1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends clang-7 -y )\nRUN ln -s /usr/bin/clang-7 /usr/local/bin/clang\nRUN ln -s /usr/bin/clang++-7 /usr/local/bin/clang++\n#   Install arm compilers\nRUN (apt-get update ;apt-get install --no-install-recommends g++-multilib-arm-linux-gnueabi=4:5.3.1-1ubuntu1 -y )\n#   Install mingw compilers\nRUN (apt-get update ;apt-get install --no-install-recommends g++-mingw-w64-x86-64=5.3.1-8ubuntu3+17 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends g++-mingw-w64-i686=5.3.1-8ubuntu3+17 -y )\nRUN update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix\nRUN update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix\nRUN update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix\nRUN update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix\n#   Install test dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends git=1:2.7.4-0ubuntu1.10 lldb-7 python-lldb-7 gdb=7.11.1-0ubuntu1~16.5 clang-format-7 make=4.1-6 dejagnu=1.5.3-2 -y )\nRUN ln -s /usr/bin/lldb-7 /usr/local/bin/lldb\nRUN ln -s /usr/bin/clang-format-7 /usr/local/bin/clang-format\n#   Install documentation dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends doxygen=1.8.11-1ubuntu0.1 graphviz=2.38.0-12ubuntu2.1 -y )\n#   Create multilib symlink for gcc 4.9\nRUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/asm\n#   Install Android toolchains with our local script\nCOPY Support/Scripts/common.sh /tmp\nCOPY Support/Scripts/prepare-android-ndk.py /tmp\nRUN (apt-get update ;apt-get install --no-install-recommends unzip=6.0-20ubuntu1.1 -y )\nRUN /tmp/prepare-android-ndk.py\nRUN ln -s /tmp/android-sdk-linux/platform-tools/adb /usr/local/bin/adb\n#   Install a version of cmake that is at least the minimum version we support.\nCOPY Support/Testing/CircleCI/install-cmake.sh /tmp\nRUN /tmp/install-cmake.sh\n#   Install Android emulators\nRUN (apt-get update ;apt-get install --no-install-recommends default-jdk=2:1.8-56ubuntu2 -y )\nCOPY Support/Scripts/install-android-emulator.sh /tmp\nRUN /tmp/install-android-emulator.sh arm\nRUN /tmp/install-android-emulator.sh arm64\nRUN /tmp/install-android-emulator.sh x86\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #\n# # Copyright (c) 2014-present, Facebook, Inc.\n# # All rights reserved.\n# #\n# # This source code is licensed under the University of Illinois/NCSA Open\n# # Source License found in the LICENSE file in the root directory of this\n# # source tree. An additional grant of patent rights can be found in the\n# # PATENTS file in the same directory.\n# #\n#  BEFORE PUSHING A NEW DOCKER IMAGE, PLEASE READ ALL OF THESE INSTRUCTIONS!\n#\n#  To build a docker image using this file, run the following command:\n#      docker build --file Support/Testing/CircleCI/Dockerfile .\n#\n#  After building the image, you will see a line like this at the end of the\n#  build process:\n#      Successfully built 360abf8e6246\n#\n#  This hash identifies the image you just built. You can then run it locally\n#  with the following command:\n#      docker run --privileged --security-opt seccomp:unconfined --rm -it --name ds2-testing 360abf8e6246\n#  We run in privileged mode so that we may use ptrace to its full\n#  extent as needed.\n#\n#  When building a new docker image, it's important to tag it by the date and\n#  time you built the image so that we can revert to an older image if something\n#  goes wrong when we build the new one.\n#  For example, if you built the image on November 1st, 2018 at 4:20:00 pm, your tag\n#  would be something like: 2018-11-01_16-20-00.\n#\n#  Publishing the image for use by CircleCI is done with:\n#      docker tag 360abf8e6246 sas42/ds2-build-env:<tag>\n#      docker push sas42/ds2-build-env:<tag>\n#\n#  Alternatively, you can tag immediately after the build is finished via:\n#      docker build --file Support/Testing/CircleCI/Dockerfile --tag 2018-09-07_12-34-56\nFROM ubuntu:16.04\nMAINTAINER Stephane Sezer <sas@fb.com>\n#  Install apt tools\nRUN apt-get update\nRUN apt-get install software-properties-common python-software-properties wget -y\n#  In case lldb needs built\nRUN apt-get install libz-dev swig ncurses-dev -y\n#  Make the developer's life not suck\nRUN apt-add-repository -y ppa:neovim-ppa/stable\nRUN apt-get update -y\nRUN apt-get install sudo zsh tmux curl vim neovim -y\n#  Debugging tools\nRUN apt-get install strace htop psmisc -y\n#  Python 3.7 and misc\nRUN add-apt-repository -y ppa:deadsnakes/ppa\nRUN apt-get update -y\nRUN apt-get install python3.7 -y\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.7\nRUN python3.7 -m pip install --upgrade pip\nRUN apt-get install python-pip -y\nRUN python -m pip install --upgrade pip\n#  Add LLVM apt repos\nRUN wget -O - \"http://llvm.org/apt/llvm-snapshot.gpg.key\" | apt-key add -\nRUN add-apt-repository -y \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main\"\nRUN apt-get update\n#  Install build dependencies\nRUN apt-get install ninja-build -y\nRUN apt-get install flex bison -y\n#  Install x86 compilers\nRUN apt-get install g++-multilib -y\nRUN apt-get install clang-7 -y\nRUN ln -s /usr/bin/clang-7 /usr/local/bin/clang\nRUN ln -s /usr/bin/clang++-7 /usr/local/bin/clang++\n#  Install arm compilers\nRUN apt-get install g++-multilib-arm-linux-gnueabi -y\n#  Install mingw compilers\nRUN apt-get install g++-mingw-w64-x86-64 -y\nRUN apt-get install g++-mingw-w64-i686 -y\nRUN update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix\nRUN update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix\nRUN update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix\nRUN update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix\n#  Install test dependencies\nRUN apt-get install git lldb-7 python-lldb-7 gdb clang-format-7 make dejagnu -y\nRUN ln -s /usr/bin/lldb-7 /usr/local/bin/lldb\nRUN ln -s /usr/bin/clang-format-7 /usr/local/bin/clang-format\n#  Install documentation dependencies\nRUN apt-get install doxygen graphviz -y\n#  Create multilib symlink for gcc 4.9\nRUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/asm\n#  Install Android toolchains with our local script\nCOPY Support/Scripts/common.sh /tmp\nCOPY Support/Scripts/prepare-android-ndk.py /tmp\nRUN apt-get install unzip -y\nRUN /tmp/prepare-android-ndk.py\nRUN ln -s /tmp/android-sdk-linux/platform-tools/adb /usr/local/bin/adb\n#  Install a version of cmake that is at least the minimum version we support.\nCOPY Support/Testing/CircleCI/install-cmake.sh /tmp\nRUN /tmp/install-cmake.sh\n#  Install Android emulators\nRUN apt-get install default-jdk -y\nCOPY Support/Scripts/install-android-emulator.sh /tmp\nRUN /tmp/install-android-emulator.sh arm\nRUN /tmp/install-android-emulator.sh arm64\nRUN /tmp/install-android-emulator.sh x86\n","injectedSmells":[],"originalDockerfileHash":"8466374430c62cebf406d54ecb113db4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #\n#  # Copyright (c) 2014-present, Facebook, Inc.\n#  # All rights reserved.\n#  #\n#  # This source code is licensed under the University of Illinois/NCSA Open\n#  # Source License found in the LICENSE file in the root directory of this\n#  # source tree. An additional grant of patent rights can be found in the\n#  # PATENTS file in the same directory.\n#  #\n#   BEFORE PUSHING A NEW DOCKER IMAGE, PLEASE READ ALL OF THESE INSTRUCTIONS!\n#\n#   To build a docker image using this file, run the following command:\n#       docker build --file Support/Testing/CircleCI/Dockerfile .\n#\n#   After building the image, you will see a line like this at the end of the\n#   build process:\n#       Successfully built 360abf8e6246\n#\n#   This hash identifies the image you just built. You can then run it locally\n#   with the following command:\n#       docker run --privileged --security-opt seccomp:unconfined --rm -it --name ds2-testing 360abf8e6246\n#   We run in privileged mode so that we may use ptrace to its full\n#   extent as needed.\n#\n#   When building a new docker image, it's important to tag it by the date and\n#   time you built the image so that we can revert to an older image if something\n#   goes wrong when we build the new one.\n#   For example, if you built the image on November 1st, 2018 at 4:20:00 pm, your tag\n#   would be something like: 2018-11-01_16-20-00.\n#\n#   Publishing the image for use by CircleCI is done with:\n#       docker tag 360abf8e6246 sas42/ds2-build-env:<tag>\n#       docker push sas42/ds2-build-env:<tag>\n#\n#   Alternatively, you can tag immediately after the build is finished via:\n#       docker build --file Support/Testing/CircleCI/Dockerfile --tag 2018-09-07_12-34-56\nFROM ubuntu:16.04\nMAINTAINER Stephane Sezer <sas@fb.com>\n#   Install apt tools\nRUN apt-get update\nRUN apt-get install software-properties-common python-software-properties wget -y\n#   In case lldb needs built\nRUN apt-get install libz-dev swig ncurses-dev -y\n#   Make the developer's life not suck\nRUN apt-add-repository -y ppa:neovim-ppa/stable\nRUN apt-get update -y\nRUN apt-get install sudo zsh tmux curl vim neovim -y\n#   Debugging tools\nRUN apt-get install strace htop psmisc -y\n#   Python 3.7 and misc\nRUN add-apt-repository -y ppa:deadsnakes/ppa\nRUN apt-get update -y\nRUN apt-get install python3.7 -y\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.7\nRUN python3.7 -m pip install --upgrade pip\nRUN apt-get install python-pip -y\nRUN python -m pip install --upgrade pip\n#   Add LLVM apt repos\nRUN wget -O - \"http://llvm.org/apt/llvm-snapshot.gpg.key\" | apt-key add -\nRUN add-apt-repository -y \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main\"\nRUN apt-get update\n#   Install build dependencies\nRUN apt-get install ninja-build -y\nRUN apt-get install flex bison -y\n#   Install x86 compilers\nRUN apt-get install g++-multilib -y\nRUN apt-get install clang-7 -y\nRUN ln -s /usr/bin/clang-7 /usr/local/bin/clang\nRUN ln -s /usr/bin/clang++-7 /usr/local/bin/clang++\n#   Install arm compilers\nRUN apt-get install g++-multilib-arm-linux-gnueabi -y\n#   Install mingw compilers\nRUN apt-get install g++-mingw-w64-x86-64 -y\nRUN apt-get install g++-mingw-w64-i686 -y\nRUN update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix\nRUN update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix\nRUN update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix\nRUN update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix\n#   Install test dependencies\nRUN apt-get install git lldb-7 python-lldb-7 gdb clang-format-7 make dejagnu -y\nRUN ln -s /usr/bin/lldb-7 /usr/local/bin/lldb\nRUN ln -s /usr/bin/clang-format-7 /usr/local/bin/clang-format\n#   Install documentation dependencies\nRUN apt-get install doxygen graphviz -y\n#   Create multilib symlink for gcc 4.9\nRUN ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/asm\n#   Install Android toolchains with our local script\nCOPY Support/Scripts/common.sh /tmp\nCOPY Support/Scripts/prepare-android-ndk.py /tmp\nRUN apt-get install unzip -y\nRUN /tmp/prepare-android-ndk.py\nRUN ln -s /tmp/android-sdk-linux/platform-tools/adb /usr/local/bin/adb\n#   Install a version of cmake that is at least the minimum version we support.\nCOPY Support/Testing/CircleCI/install-cmake.sh /tmp\nRUN /tmp/install-cmake.sh\n#   Install Android emulators\nRUN apt-get install default-jdk -y\nCOPY Support/Scripts/install-android-emulator.sh /tmp\nRUN /tmp/install-android-emulator.sh arm\nRUN /tmp/install-android-emulator.sh arm64\nRUN /tmp/install-android-emulator.sh x86\n","originalDockerfileUglifiedHash":"ee6262aee54f07223eb459ca5d397142","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c8c4c0301bf66bae8141aaf36bfe83b3224ed3c9.dockerfile"}