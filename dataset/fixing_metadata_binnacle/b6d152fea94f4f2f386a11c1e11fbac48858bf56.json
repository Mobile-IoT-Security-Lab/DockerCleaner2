{"seed":94930476,"processedDockerfileHash":"cce87e2a3c6bfaefcc6fddf258e377e8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   add zfs ppa\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 || apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#   allow replacing httpredir mirror\nARG APT_MIRROR=httpredir.debian.org\nRUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion bsdmainutils btrfs-tools build-essential clang createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config python-dev python-mock python-pip python-websocket ubuntu-zfs xfsprogs libzfs-dev tar zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"8aa9b71a394905e6c5f4b59e2b97b87a004658a4\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#   install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.0\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\nENV GO_VERSION=\"1.5.4\"\nRUN curl -fsSL \"https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386\"\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && (cd \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && git checkout -q \"$RSRC_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#   Install containerd\nENV CONTAINERD_COMMIT=\"9dc2b3273db42c75368988a3885a3afd770069d9\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#  add zfs ppa\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 || apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#  allow replacing httpredir mirror\nARG APT_MIRROR=httpredir.debian.org\nRUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion bsdmainutils btrfs-tools build-essential clang createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config python-dev python-mock python-pip python-websocket ubuntu-zfs xfsprogs libzfs-dev tar zip -y \\\n && pip install awscli==1.10.15\n#  Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"8aa9b71a394905e6c5f4b59e2b97b87a004658a4\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#  install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.0\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#  Install Go\n#  IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#             will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#             with a heads-up.\nENV GO_VERSION=\"1.5.4\"\nRUN curl -fsSL \"https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#  Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386\"\n#  This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#  ENV GOFMT_VERSION 1.3.3\n#  RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\n#  Grab Go's cover tool for dead-simple code coverage testing\n#  Grab Go's vet tool for examining go code to find suspicious constructs\n#  and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  Install two versions of the registry. The first is an older version that\n#  only supports schema1 manifests. The second is a newer version that supports\n#  both. This allows integration-cli tests to cover push/pull with both schema1\n#  and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#  see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#  Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#  Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#  Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && (cd \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && git checkout -q \"$RSRC_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#  Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#  Install containerd\nENV CONTAINERD_COMMIT=\"9dc2b3273db42c75368988a3885a3afd770069d9\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"eebabedea96d8fff41a8ffb705a8862c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   add zfs ppa\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61 || apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#   allow replacing httpredir mirror\nARG APT_MIRROR=httpredir.debian.org\nRUN sed -i s/httpredir.debian.org/$APT_MIRROR/g /etc/apt/sources.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion bsdmainutils btrfs-tools build-essential clang createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial net-tools pkg-config python-dev python-mock python-pip python-websocket ubuntu-zfs xfsprogs libzfs-dev tar zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"8aa9b71a394905e6c5f4b59e2b97b87a004658a4\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#   install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.0\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\nENV GO_VERSION=\"1.5.4\"\nRUN curl -fsSL \"https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386\"\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"ba14da1f827188454a4591717fff29999010887f\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && (cd \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && git checkout -q \"$RSRC_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#   Install containerd\nENV CONTAINERD_COMMIT=\"9dc2b3273db42c75368988a3885a3afd770069d9\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"b4ac54a678296452da4941f18ea45820","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b6d152fea94f4f2f386a11c1e11fbac48858bf56.dockerfile"}