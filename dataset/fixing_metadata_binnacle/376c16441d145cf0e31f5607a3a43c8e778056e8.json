{"seed":3674266208,"processedDockerfileHash":"d70d4ddce28366d21f2a10d3f1ec2fa9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   ----------------------------------------------------------------------------\n#   Add cuDNN to nvidia/cuda:9.2-devel\n#   ----------------------------------------------------------------------------\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\n#   ----------------------------------------------------------------------------\n#   Install Required Packages\n#   ----------------------------------------------------------------------------\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common vim git-core aptitude portaudio19-dev python3-tk tmux psmisc libsndfile-dev libssl-dev curl -y )\nRUN alias python=python3 \\\n && alias pip=pip3 \\\n && ln -s /usr/bin/python3.5 /usr/bin/python \\\n && echo 'alias python=python3' >> ~/.bashrc \\\n && echo 'alias pip=pip3' >> ~/.bashrc\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py\n#   ----------------------------------------------------------------------------\n#   Install Tensorflow from source\n#   ----------------------------------------------------------------------------\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential cuda-command-line-tools-9-2 cuda-cublas-dev-9-2 cuda-cudart-dev-9-2 cuda-cufft-dev-9-2 cuda-curand-dev-9-2 cuda-cusolver-dev-9-2 cuda-cusparse-dev-9-2 git libnccl2=2.2.13-1+cuda9.2 libnccl-dev=2.2.13-1+cuda9.2 libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync unzip zip zlib1g-dev wget libpython3.5-dev -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.2 -y ) \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libnvinfer4=4.1.2-1+cuda9.2 -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends libnvinfer-dev=4.1.2-1+cuda9.2 -y )\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.2/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nRUN pip install Pillow==9.5.0 h5py==3.8.0 ipykernel==6.22.0 jupyter==1.0.0 keras_applications==1.0.8 keras_preprocessing==1.1.2 matplotlib==3.7.1 mock==5.0.2 numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 --no-cache-dir \\\n && python3 -m ipykernel.kernelspec\n#   RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=r1.12 --depth=1 https://github.com/tensorflow/tensorflow.git .\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python3\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,5.2,6.0,6.1,7.0\"\nENV TF_CUDA_VERSION=\"$CUDA_VERSION\"\nENV TF_CUDNN_VERSION=\"$CUDNN_VERSION\"\n#   NCCL 2.x\nENV TF_NCCL_VERSION=\"2\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root/\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\n#   ----------------------------------------------------------------------------\n#   Configure locales\n#   ----------------------------------------------------------------------------\nRUN aptitude install locales \\\n && dpkg-reconfigure locales \\\n && echo \"Asia/Hong Kong\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\n#   ----------------------------------------------------------------------------\n#   Modify bashrc file, configure vimrc file\n#   ----------------------------------------------------------------------------\nRUN echo 'export LC_ALL=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANG=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANGUAGE=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'nnoremap <C-Left> :tabprevious<CR>' >> ~/.vimrc \\\n && echo 'nnoremap <C-Right> :tabnext<CR>' >> ~/.vimrc \\\n && echo 'set expandtab' >> ~/.vimrc \\\n && echo 'set shiftwidth=2' >> ~/.vimrc\n#   ----------------------------------------------------------------------------\n#   Other Python dependencies\n#   ----------------------------------------------------------------------------\nCOPY requirements.txt /root/\nRUN pip install -r /root/requirements.txt\nWORKDIR /root/\nCMD [\"sleep\", \"infinity\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  ----------------------------------------------------------------------------\n#  Add cuDNN to nvidia/cuda:9.2-devel\n#  ----------------------------------------------------------------------------\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\n#  ----------------------------------------------------------------------------\n#  Install Required Packages\n#  ----------------------------------------------------------------------------\nRUN apt-get update\nRUN apt-get install software-properties-common vim git-core aptitude portaudio19-dev python3-tk tmux psmisc libsndfile-dev libssl-dev curl -y\nRUN alias python=python3 \\\n && alias pip=pip3 \\\n && ln -s /usr/bin/python3.5 /usr/bin/python \\\n && echo 'alias python=python3' >> ~/.bashrc \\\n && echo 'alias pip=pip3' >> ~/.bashrc\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py\n#  ----------------------------------------------------------------------------\n#  Install Tensorflow from source\n#  ----------------------------------------------------------------------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cuda-command-line-tools-9-2 cuda-cublas-dev-9-2 cuda-cudart-dev-9-2 cuda-cufft-dev-9-2 cuda-curand-dev-9-2 cuda-cusolver-dev-9-2 cuda-cusparse-dev-9-2 git libnccl2=2.2.13-1+cuda9.2 libnccl-dev=2.2.13-1+cuda9.2 libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync unzip zip zlib1g-dev wget libpython3.5-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.2 -y \\\n && apt-get update \\\n && apt-get install libnvinfer4=4.1.2-1+cuda9.2 -y \\\n && apt-get install libnvinfer-dev=4.1.2-1+cuda9.2 -y\n#  Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.2/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nRUN pip install Pillow h5py ipykernel jupyter keras_applications keras_preprocessing matplotlib mock numpy scipy sklearn pandas --no-cache-dir \\\n && python3 -m ipykernel.kernelspec\n#  RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#  Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly:\n#    https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=r1.12 --depth=1 https://github.com/tensorflow/tensorflow.git .\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python3\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,5.2,6.0,6.1,7.0\"\nENV TF_CUDA_VERSION=\"$CUDA_VERSION\"\nENV TF_CUDNN_VERSION=\"$CUDNN_VERSION\"\n#  NCCL 2.x\nENV TF_NCCL_VERSION=\"2\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#  Clean up pip wheel and Bazel cache when done.\nWORKDIR /root/\n#  TensorBoard\nEXPOSE 6006/tcp\n#  IPython\nEXPOSE 8888/tcp\n#  ----------------------------------------------------------------------------\n#  Configure locales\n#  ----------------------------------------------------------------------------\nRUN aptitude install locales \\\n && dpkg-reconfigure locales \\\n && echo \"Asia/Hong Kong\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\n#  ----------------------------------------------------------------------------\n#  Modify bashrc file, configure vimrc file\n#  ----------------------------------------------------------------------------\nRUN echo 'export LC_ALL=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANG=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANGUAGE=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'nnoremap <C-Left> :tabprevious<CR>' >> ~/.vimrc \\\n && echo 'nnoremap <C-Right> :tabnext<CR>' >> ~/.vimrc \\\n && echo 'set expandtab' >> ~/.vimrc \\\n && echo 'set shiftwidth=2' >> ~/.vimrc\n#  ----------------------------------------------------------------------------\n#  Other Python dependencies\n#  ----------------------------------------------------------------------------\nCOPY requirements.txt /root/\nRUN pip install -r /root/requirements.txt\nWORKDIR /root/\nCMD [\"sleep\", \"infinity\"]\n","injectedSmells":[],"originalDockerfileHash":"9d42f064e0d1d2295b61d6f1db00da60","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   ----------------------------------------------------------------------------\n#   Add cuDNN to nvidia/cuda:9.2-devel\n#   ----------------------------------------------------------------------------\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\n#   ----------------------------------------------------------------------------\n#   Install Required Packages\n#   ----------------------------------------------------------------------------\nRUN apt-get update\nRUN apt-get install software-properties-common vim git-core aptitude portaudio19-dev python3-tk tmux psmisc libsndfile-dev libssl-dev curl -y\nRUN alias python=python3 \\\n && alias pip=pip3 \\\n && ln -s /usr/bin/python3.5 /usr/bin/python \\\n && echo 'alias python=python3' >> ~/.bashrc \\\n && echo 'alias pip=pip3' >> ~/.bashrc\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python3 get-pip.py \\\n && rm get-pip.py\n#   ----------------------------------------------------------------------------\n#   Install Tensorflow from source\n#   ----------------------------------------------------------------------------\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cuda-command-line-tools-9-2 cuda-cublas-dev-9-2 cuda-cudart-dev-9-2 cuda-cufft-dev-9-2 cuda-curand-dev-9-2 cuda-cusolver-dev-9-2 cuda-cusparse-dev-9-2 git libnccl2=2.2.13-1+cuda9.2 libnccl-dev=2.2.13-1+cuda9.2 libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync unzip zip zlib1g-dev wget libpython3.5-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && find /usr/local/cuda-9.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \\\n && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.2 -y \\\n && apt-get update \\\n && apt-get install libnvinfer4=4.1.2-1+cuda9.2 -y \\\n && apt-get install libnvinfer-dev=4.1.2-1+cuda9.2 -y\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-9.2/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\nRUN pip install Pillow h5py ipykernel jupyter keras_applications keras_preprocessing matplotlib mock numpy scipy sklearn pandas --no-cache-dir \\\n && python3 -m ipykernel.kernelspec\n#   RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=r1.12 --depth=1 https://github.com/tensorflow/tensorflow.git .\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python3\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,5.2,6.0,6.1,7.0\"\nENV TF_CUDA_VERSION=\"$CUDA_VERSION\"\nENV TF_CUDNN_VERSION=\"$CUDNN_VERSION\"\n#   NCCL 2.x\nENV TF_NCCL_VERSION=\"2\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --copt=-mavx --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root/\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\n#   ----------------------------------------------------------------------------\n#   Configure locales\n#   ----------------------------------------------------------------------------\nRUN aptitude install locales \\\n && dpkg-reconfigure locales \\\n && echo \"Asia/Hong Kong\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\n#   ----------------------------------------------------------------------------\n#   Modify bashrc file, configure vimrc file\n#   ----------------------------------------------------------------------------\nRUN echo 'export LC_ALL=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANG=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'export LANGUAGE=en_US.UTF-8' >> ~/.bashrc \\\n && echo 'nnoremap <C-Left> :tabprevious<CR>' >> ~/.vimrc \\\n && echo 'nnoremap <C-Right> :tabnext<CR>' >> ~/.vimrc \\\n && echo 'set expandtab' >> ~/.vimrc \\\n && echo 'set shiftwidth=2' >> ~/.vimrc\n#   ----------------------------------------------------------------------------\n#   Other Python dependencies\n#   ----------------------------------------------------------------------------\nCOPY requirements.txt /root/\nRUN pip install -r /root/requirements.txt\nWORKDIR /root/\nCMD [\"sleep\", \"infinity\"]\n","originalDockerfileUglifiedHash":"c34c1482f8df95fab874f7bddca2ef66","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/376c16441d145cf0e31f5607a3a43c8e778056e8.dockerfile"}