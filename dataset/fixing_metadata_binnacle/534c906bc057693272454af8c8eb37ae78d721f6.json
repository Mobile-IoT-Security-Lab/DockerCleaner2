{"seed":4075155424,"processedDockerfileHash":"1edea083d1625349a392d4bd1e0672e7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Ref: https://github.com/Microsoft/CNTK/blob/master/Tools/docker/CNTK-CPUOnly-Image/Dockerfile\n#   List of dependencies: https://docs.microsoft.com/en-us/cognitive-toolkit/test-configurations\nFROM lablup/kernel-base-python-minimal:3.6-ubntu\n#   FROM lablup/kernel-python:3.6-debian\nRUN install_packages autotools-dev build-essential cmake git-core g++-4.8-multilib gcc-4.8-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl zip unzip automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-7-jdk libpcre3-dev\nRUN OPENMPI_VERSION=1.10.3 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nRUN LIBZIP_VERSION=1.1.2 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nRUN OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/Itseez/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nENV BUILD_TARGET=\"HASWELL\"\nRUN OPENBLAS_VERSION=0.2.18 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" TARGET=${BUILD_TARGET} USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#   Install Boost\nRUN BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_DOTTED_VERSION} --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && rm -rf /boost_${BOOST_VERSION}\n#   Install Protobuf\nRUN PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   Install MKLML\nRUN install_packages python-dev libtool\nRUN MKLML_VERSION=v0.11/mklml_lnx_2018.0.1.20171007 \\\n && mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/$MKLML_VERSION.tgz | tar -xzf - -C /usr/local/mklml\n#   Install Kaldi\n#   ENV KALDI_VERSION=c024e8aa\n#   ENV KALDI_PATH /usr/local/kaldi-$KALDI_VERSION\n#   RUN install_packages libtool libatlas3-base\n#   RUN mv /bin/sh /bin/sh.orig && \\\n#      ln -s -f /bin/bash /bin/sh && \\\n#      mkdir $KALDI_PATH && \\\n#      wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\n#      cd $KALDI_PATH && \\\n#      cd tools && \\\n#      perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\n#      ./extras/check_dependencies.sh && \\\n#      make -j $(nproc) all && \\\n#      cd ../src && \\\n#      ./configure --openblas-root=/usr/local/openblas --shared && \\\n#      make -j $(nproc) depend && \\\n#      make -j $(nproc) all && \\\n#   # Remove some unneeded stuff in $KALDI_PATH to reduce size\n#      find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n#      for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n#      mv -f /bin/sh.orig /bin/sh\n#  # PYTHON\n#   Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#   Swig\nRUN cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-3.0.10.tar.gz -O - | tar xvfz - \\\n && cd swig-3.0.10 \\\n && ./configure --without-alllang \\\n && make -j $( nproc ;) \\\n && make install\n#   Anaconda\nRUN wget -q https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.2.0-Linux-x86_64.sh -b \\\n && rm Anaconda3-4.2.0-Linux-x86_64.sh\nRUN wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O /tmp/conda-linux-cntk-py35-environment.yml \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35/ --file /tmp/conda-linux-cntk-py35-environment.yml\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nRUN OPENMPI_VERSION=1.10.7 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\n#   Build CNTK\nWORKDIR /cntk\n#   RUN ln -sf /usr/bin/g++-4.8 /usr/bin/g++\n#   RUN ln -sf /usr/bin/gcc-4.8 /usr/bin/gcc\nRUN g++ --version\nRUN gcc --version\nRUN git clone --depth=1 -b $COMMIT https://github.com/Microsoft/CNTK.git . \\\n && CONFIGURE_OPTS=\" --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && git submodule update --init Source/Multiverso\nRUN mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/CNTKCustomMKL \\\n && make -j\"$( nproc ;)\" all\nRUN cd Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/build/cpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   Install kernel-runner scripts package (installed in base-python-minimal:3.6)\nRUN pip install \"backend.ai-kernel-runner[python]~=1.0.4\" --no-cache-dir\nCOPY policy.yml /home/backend.ai/policy.yml\nLABEL ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"cntk\"]\n#   vim: ft=dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Ref: https://github.com/Microsoft/CNTK/blob/master/Tools/docker/CNTK-CPUOnly-Image/Dockerfile\n#  List of dependencies: https://docs.microsoft.com/en-us/cognitive-toolkit/test-configurations\nFROM lablup/kernel-base-python-minimal:3.6-ubntu\n#  FROM lablup/kernel-python:3.6-debian\nRUN install_packages autotools-dev build-essential cmake git-core g++-4.8-multilib gcc-4.8-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl zip unzip automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-7-jdk libpcre3-dev\nRUN OPENMPI_VERSION=1.10.3 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nRUN LIBZIP_VERSION=1.1.2 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nRUN OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/Itseez/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nENV BUILD_TARGET=\"HASWELL\"\nRUN OPENBLAS_VERSION=0.2.18 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" TARGET=${BUILD_TARGET} USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#  Install Boost\nRUN BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_DOTTED_VERSION} --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && rm -rf /boost_${BOOST_VERSION}\n#  Install Protobuf\nRUN PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#  Install MKLML\nRUN install_packages python-dev libtool\nRUN MKLML_VERSION=v0.11/mklml_lnx_2018.0.1.20171007 \\\n && mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/$MKLML_VERSION.tgz | tar -xzf - -C /usr/local/mklml\n#  Install Kaldi\n#  ENV KALDI_VERSION=c024e8aa\n#  ENV KALDI_PATH /usr/local/kaldi-$KALDI_VERSION\n#  RUN install_packages libtool libatlas3-base\n#  RUN mv /bin/sh /bin/sh.orig && \\\n#     ln -s -f /bin/bash /bin/sh && \\\n#     mkdir $KALDI_PATH && \\\n#     wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\n#     cd $KALDI_PATH && \\\n#     cd tools && \\\n#     perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\n#     ./extras/check_dependencies.sh && \\\n#     make -j $(nproc) all && \\\n#     cd ../src && \\\n#     ./configure --openblas-root=/usr/local/openblas --shared && \\\n#     make -j $(nproc) depend && \\\n#     make -j $(nproc) all && \\\n#  # Remove some unneeded stuff in $KALDI_PATH to reduce size\n#     find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n#     for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n#     mv -f /bin/sh.orig /bin/sh\n# # PYTHON\n#  Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#  Swig\nRUN cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-3.0.10.tar.gz -O - | tar xvfz - \\\n && cd swig-3.0.10 \\\n && ./configure --without-alllang \\\n && make -j $( nproc ;) \\\n && make install\n#  Anaconda\nRUN wget -q https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.2.0-Linux-x86_64.sh -b \\\n && rm Anaconda3-4.2.0-Linux-x86_64.sh\nRUN wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O /tmp/conda-linux-cntk-py35-environment.yml \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35/ --file /tmp/conda-linux-cntk-py35-environment.yml\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nRUN OPENMPI_VERSION=1.10.7 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\n#  Build CNTK\nWORKDIR /cntk\n#  RUN ln -sf /usr/bin/g++-4.8 /usr/bin/g++\n#  RUN ln -sf /usr/bin/gcc-4.8 /usr/bin/gcc\nRUN g++ --version\nRUN gcc --version\nRUN git clone --depth=1 -b $COMMIT https://github.com/Microsoft/CNTK.git . \\\n && CONFIGURE_OPTS=\" --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && git submodule update --init Source/Multiverso\nRUN mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/CNTKCustomMKL \\\n && make -j\"$( nproc ;)\" all\nRUN cd Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/build/cpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#  Install kernel-runner scripts package (installed in base-python-minimal:3.6)\nRUN pip install \"backend.ai-kernel-runner[python]~=1.0.4\" --no-cache-dir\nCOPY policy.yml /home/backend.ai/policy.yml\nLABEL ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"cntk\"]\n#  vim: ft=dockerfile\n","injectedSmells":[],"originalDockerfileHash":"65e3727f30a9ef6b6f69245cf2e5efe0","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Ref: https://github.com/Microsoft/CNTK/blob/master/Tools/docker/CNTK-CPUOnly-Image/Dockerfile\n#   List of dependencies: https://docs.microsoft.com/en-us/cognitive-toolkit/test-configurations\nFROM lablup/kernel-base-python-minimal:3.6-ubntu\n#   FROM lablup/kernel-python:3.6-debian\nRUN install_packages autotools-dev build-essential cmake git-core g++-4.8-multilib gcc-4.8-multilib gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl zip unzip automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-7-jdk libpcre3-dev\nRUN OPENMPI_VERSION=1.10.3 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\nENV PATH=\"/usr/local/mpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/mpi/lib:$LD_LIBRARY_PATH\"\nRUN LIBZIP_VERSION=1.1.2 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /libzip-${LIBZIP_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nRUN OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/Itseez/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nENV BUILD_TARGET=\"HASWELL\"\nRUN OPENBLAS_VERSION=0.2.18 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" TARGET=${BUILD_TARGET} USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION}\nENV LD_LIBRARY_PATH=\"/usr/local/openblas/lib:$LD_LIBRARY_PATH\"\n#   Install Boost\nRUN BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local/boost-${BOOST_DOTTED_VERSION} --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && rm -rf /boost_${BOOST_VERSION}\n#   Install Protobuf\nRUN PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   Install MKLML\nRUN install_packages python-dev libtool\nRUN MKLML_VERSION=v0.11/mklml_lnx_2018.0.1.20171007 \\\n && mkdir /usr/local/mklml \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/$MKLML_VERSION.tgz | tar -xzf - -C /usr/local/mklml\n#   Install Kaldi\n#   ENV KALDI_VERSION=c024e8aa\n#   ENV KALDI_PATH /usr/local/kaldi-$KALDI_VERSION\n#   RUN install_packages libtool libatlas3-base\n#   RUN mv /bin/sh /bin/sh.orig && \\\n#      ln -s -f /bin/bash /bin/sh && \\\n#      mkdir $KALDI_PATH && \\\n#      wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH && \\\n#      cd $KALDI_PATH && \\\n#      cd tools && \\\n#      perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile && \\\n#      ./extras/check_dependencies.sh && \\\n#      make -j $(nproc) all && \\\n#      cd ../src && \\\n#      ./configure --openblas-root=/usr/local/openblas --shared && \\\n#      make -j $(nproc) depend && \\\n#      make -j $(nproc) all && \\\n#   # Remove some unneeded stuff in $KALDI_PATH to reduce size\n#      find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm && \\\n#      for dir in $KALDI_PATH/src/*bin; do make -C $dir clean; done && \\\n#      mv -f /bin/sh.orig /bin/sh\n#  # PYTHON\n#   Commit that will be used for Python environment creation (and later, compilation)\nARG COMMIT=master\n#   Swig\nRUN cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-3.0.10.tar.gz -O - | tar xvfz - \\\n && cd swig-3.0.10 \\\n && ./configure --without-alllang \\\n && make -j $( nproc ;) \\\n && make install\n#   Anaconda\nRUN wget -q https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.2.0-Linux-x86_64.sh -b \\\n && rm Anaconda3-4.2.0-Linux-x86_64.sh\nRUN wget -q https://raw.githubusercontent.com/Microsoft/CNTK/$COMMIT/Scripts/install/linux/conda-linux-cntk-py35-environment.yml -O /tmp/conda-linux-cntk-py35-environment.yml \\\n && /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py35/ --file /tmp/conda-linux-cntk-py35-environment.yml\nENV PATH=\"/root/anaconda3/envs/cntk-py35/bin:$PATH\"\nRUN OPENMPI_VERSION=1.10.7 \\\n && wget -q -O - https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-${OPENMPI_VERSION}.tar.gz | tar -xzf - \\\n && cd openmpi-${OPENMPI_VERSION} \\\n && ./configure --prefix=/usr/local/mpi \\\n && make -j\"$( nproc ;)\" install \\\n && rm -rf /openmpi-${OPENMPI_VERSION}\n#   Build CNTK\nWORKDIR /cntk\n#   RUN ln -sf /usr/bin/g++-4.8 /usr/bin/g++\n#   RUN ln -sf /usr/bin/gcc-4.8 /usr/bin/gcc\nRUN g++ --version\nRUN gcc --version\nRUN git clone --depth=1 -b $COMMIT https://github.com/Microsoft/CNTK.git . \\\n && CONFIGURE_OPTS=\" --with-py35-path=/root/anaconda3/envs/cntk-py35\" \\\n && git submodule update --init Source/Multiverso\nRUN mkdir -p build/cpu/release \\\n && cd build/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-openblas=/usr/local/openblas \\\n && make -j\"$( nproc ;)\" all \\\n && cd ../../.. \\\n && mkdir -p build-mkl/cpu/release \\\n && cd build-mkl/cpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=/usr/local/CNTKCustomMKL \\\n && make -j\"$( nproc ;)\" all\nRUN cd Examples/Image/DataSets/CIFAR-10 \\\n && python install_cifar10.py \\\n && cd ../../../..\nRUN cd Examples/Image/DataSets/MNIST \\\n && python install_mnist.py \\\n && cd ../../../..\nENV PATH=\"/cntk/build/cpu/release/bin:$PATH\" \\\n    PYTHONPATH=\"/cntk/bindings/python\" \\\n    LD_LIBRARY_PATH=\"/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   Install kernel-runner scripts package (installed in base-python-minimal:3.6)\nRUN pip install \"backend.ai-kernel-runner[python]~=1.0.4\" --no-cache-dir\nCOPY policy.yml /home/backend.ai/policy.yml\nLABEL ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\"\nCMD [\"/home/backend.ai/jail\", \"-policy\", \"/home/backend.ai/policy.yml\", \"/usr/local/bin/python\", \"-m\", \"ai.backend.kernel\", \"cntk\"]\n#   vim: ft=dockerfile\n","originalDockerfileUglifiedHash":"00eb61e682d6a6a87dc9543397648ace","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/534c906bc057693272454af8c8eb37ae78d721f6.dockerfile"}