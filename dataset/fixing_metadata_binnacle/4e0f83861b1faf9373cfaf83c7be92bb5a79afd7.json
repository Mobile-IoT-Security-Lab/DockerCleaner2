{"seed":2956137143,"processedDockerfileHash":"3d3990161e377002c27c807a5fdd7cb2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stretch\nMAINTAINER Nicola Corna <nicola@corna.info>\n#   Environment variables\n#  ######################\nENV MIRROR_DIR=\"/srv/mirror\"\nENV SRC_DIR=\"/srv/src\"\nENV TMP_DIR=\"/srv/tmp\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV ZIP_DIR=\"/srv/zips\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV DELTA_DIR=\"/srv/delta\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LOGS_DIR=\"/srv/logs\"\nENV USERSCRIPTS_DIR=\"/srv/userscripts\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV USER=\"root\"\n#   Configurable environment variables\n#  ###################################\n#   By default we want to use CCACHE, you can disable this\n#   WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#   ccache maximum size. It should be a number followed by an optional suffix: k,\n#   M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#   for no limit.\nENV CCACHE_SIZE=\"50G\"\n#   Environment for the LineageOS branches name\n#   See https://github.com/LineageOS/android_vendor_cm/branches for possible options\nENV BRANCH_NAME=\"'cm-14.1'\"\n#   Environment for the device list (separate by comma if more than one)\n#   eg. DEVICE_LIST=hammerhead,bullhead,angler\nENV DEVICE_LIST=\"''\"\n#   Release type string\nENV RELEASE_TYPE=\"'UNOFFICIAL'\"\n#   OTA URL that will be used inside CMUpdater\n#   Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot\nENV OTA_URL=\"''\"\n#   User identity\nENV USER_NAME=\"'LineageOS Buildbot'\"\nENV USER_MAIL=\"'lineageos-buildbot@docker.host'\"\n#   Include proprietary files, downloaded automatically from github.com/TheMuppets/\n#   Only some branches are supported\nENV INCLUDE_PROPRIETARY=\"true\"\n#   Mount an overlay filesystem over the source dir to do each build on a clean source\nENV BUILD_OVERLAY=\"false\"\n#   Clone the full LineageOS mirror (> 200 GB)\nENV LOCAL_MIRROR=\"false\"\n#   If you want to preserve old ZIPs set this to 'false'\nENV CLEAN_OUTDIR=\"false\"\n#   Change this cron rule to what fits best for you\n#   Use 'now' to start the build immediately\n#   For example, '0 10 * * *' means 'Every day at 10:00 UTC'\nENV CRONTAB_TIME=\"'now'\"\n#   Clean artifacts output after each build\nENV CLEAN_AFTER_BUILD=\"true\"\n#   Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)\nENV WITH_SU=\"false\"\n#   Provide a default JACK configuration in order to avoid out-of-memory issues\nENV ANDROID_JACK_VM_ARGS=\"\\\"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G\\\"\"\n#   Custom packages to be installed\nENV CUSTOM_PACKAGES=\"''\"\n#   Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#   When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n#   Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/\nENV ZIP_SUBDIR=\"true\"\n#   Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/\nENV LOGS_SUBDIR=\"true\"\n#   Apply the MicroG's signature spoofing patch\n#   Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#   \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#   The original (\"yes\") patch allows user apps to gain the ability to spoof\n#   themselves as other apps, which can be a major security threat. Using the\n#   restricted patch and embedding the apps that requires it as system privileged\n#   apps is a much secure option. See the README.md (\"Custom mode\") for an\n#   example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#   Generate delta files\nENV BUILD_DELTA=\"false\"\n#   Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_ZIPS=\"0\"\n#   Delete old deltas in $DELTA_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_DELTAS=\"0\"\n#   Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_LOGS=\"0\"\n#   Create a JSON file that indexes the build zips at the end of the build process\n#   (for the updates in OpenDelta). The file will be created in $ZIP_DIR with the\n#   specified name; leave empty to skip it.\n#   Requires ZIP_SUBDIR.\nENV OPENDELTA_BUILDS_JSON=\"''\"\n#   You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:\n#    * begin.sh, run at the very beginning\n#    * before.sh, run after the syncing and patching, before starting the builds\n#    * pre-build.sh, run before the build of every device \n#    * post-build.sh, run after the build of every device\n#    * end.sh, run at the very end\n#   Each script will be run in $SRC_DIR and must be owned and writeable only by\n#   root\n#   Create Volume entry points\n#  ###########################\nVOLUME $MIRROR_DIR\nVOLUME $SRC_DIR\nVOLUME $TMP_DIR\nVOLUME $CCACHE_DIR\nVOLUME $ZIP_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $DELTA_DIR\nVOLUME $KEYS_DIR\nVOLUME $LOGS_DIR\nVOLUME $USERSCRIPTS_DIR\n#   Copy required files\n#  ####################\nCOPY src/ /root/\n#   Create missing directories\n#  ###########################\nRUN mkdir -p $MIRROR_DIR\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $ZIP_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $DELTA_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $USERSCRIPTS_DIR\n#   Install build dependencies\n#  ###########################\nRUN echo 'deb http://deb.debian.org/debian sid main' >> /etc/apt/sources.list\nRUN echo 'deb http://deb.debian.org/debian experimental main' >> /etc/apt/sources.list\nCOPY apt_preferences /etc/apt/preferences\nRUN :\nRUN apt-get -qqy upgrade\nRUN (apt-get update ;apt-get install --no-install-recommends bc=1.06.95-9+b3 bison=2:3.0.4.dfsg-1+b1 bsdmainutils=9.0.12+nmu1 build-essential=12.3 ccache=3.3.4-1 cgpt=0~R52-8350.B-2 cron=3.0pl1-128+deb9u2 curl=7.52.1-5+deb9u16 flex=2.6.1-1.3 g++-multilib=4:6.3.0-4 gcc-multilib=4:6.3.0-4 git=1:2.11.0-3+deb9u7 gnupg=2.1.18-8~deb9u4 gperf=3.0.4-2+b1 imagemagick=8:6.9.7.4+dfsg-11+deb9u14 kmod=23-2 lib32ncurses5-dev=6.0+20161126-1+deb9u2 lib32readline-dev=7.0-3 lib32z1-dev=1:1.2.8.dfsg-5+deb9u1 libesd0-dev=0.2.41-11 liblz4-tool=0.0~r131-2+deb9u1 libncurses5-dev=6.0+20161126-1+deb9u2 libsdl1.2-dev=1.2.15+dfsg1-4+deb9u1 libssl-dev=1.1.0l-1~deb9u6 libwxgtk3.0-dev=3.0.2+dfsg-4 libxml2=2.9.4+dfsg1-2.2+deb9u7 libxml2-utils=2.9.4+dfsg1-2.2+deb9u7 lsof=4.89+dfsg-0.1 lzop=1.03-4+b1 maven=3.3.9-4 openjdk-7-jdk openjdk-8-jdk=8u332-ga-1~deb9u1 pngcrush=1.7.85-1+b2 procps=2:3.3.12-3+deb9u1 python=2.7.13-2 rsync=3.1.2-1+deb9u3 schedtool=1.3.0-1+b2 squashfs-tools=1:4.3-3+deb9u3 wget=1.18-5+deb9u3 xdelta3=3.0.11-dfsg-1+b1 xsltproc=1.1.29-2.1+deb9u2 yasm=1.3.0-2+b1 zip=3.0-11+b1 zlib1g-dev=1:1.2.8.dfsg-5+deb9u1 -y )\nRUN curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo\nRUN chmod a+x /usr/local/bin/repo\n#   Download and build delta tools\n#  ###############################\nRUN cd /root/ \\\n && mkdir delta \\\n && git clone --depth=1 https://github.com/omnirom/android_packages_apps_OpenDelta.git OpenDelta \\\n && gcc -o delta/zipadjust OpenDelta/jni/zipadjust.c OpenDelta/jni/zipadjust_run.c -lz \\\n && cp OpenDelta/server/minsignapk.jar OpenDelta/server/opendelta.sh delta/ \\\n && chmod +x delta/opendelta.sh \\\n && rm -rf OpenDelta/ \\\n && sed -i -e 's|^\\s*HOME=.*|HOME=/root|; s|^\\s*BIN_XDELTA=.*|BIN_XDELTA=xdelta3|; s|^\\s*FILE_MATCH=.*|FILE_MATCH=lineage-\\*.zip|; s|^\\s*PATH_CURRENT=.*|PATH_CURRENT=$SRC_DIR/out/target/product/$DEVICE|; s|^\\s*PATH_LAST=.*|PATH_LAST=$SRC_DIR/delta_last/$DEVICE|; s|^\\s*KEY_X509=.*|KEY_X509=$KEYS_DIR/releasekey.x509.pem|; s|^\\s*KEY_PK8=.*|KEY_PK8=$KEYS_DIR/releasekey.pk8|; s|publish|$DELTA_DIR|g' /root/delta/opendelta.sh\n#   Set the work directory\n#  #######################\nWORKDIR $SRC_DIR\n#   Allow redirection of stdout to docker logs\n#  ###########################################\nRUN ln -sf /proc/1/fd/1 /var/log/docker.log\n#   Set the entry point to init.sh\n#  ###############################\nENTRYPOINT /root/init.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch\nMAINTAINER Nicola Corna <nicola@corna.info>\n#  Environment variables\n# ######################\nENV MIRROR_DIR=\"/srv/mirror\"\nENV SRC_DIR=\"/srv/src\"\nENV TMP_DIR=\"/srv/tmp\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV ZIP_DIR=\"/srv/zips\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV DELTA_DIR=\"/srv/delta\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LOGS_DIR=\"/srv/logs\"\nENV USERSCRIPTS_DIR=\"/srv/userscripts\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV USER=\"root\"\n#  Configurable environment variables\n# ###################################\n#  By default we want to use CCACHE, you can disable this\n#  WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#  ccache maximum size. It should be a number followed by an optional suffix: k,\n#  M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#  for no limit.\nENV CCACHE_SIZE=\"50G\"\n#  Environment for the LineageOS branches name\n#  See https://github.com/LineageOS/android_vendor_cm/branches for possible options\nENV BRANCH_NAME=\"'cm-14.1'\"\n#  Environment for the device list (separate by comma if more than one)\n#  eg. DEVICE_LIST=hammerhead,bullhead,angler\nENV DEVICE_LIST=\"''\"\n#  Release type string\nENV RELEASE_TYPE=\"'UNOFFICIAL'\"\n#  OTA URL that will be used inside CMUpdater\n#  Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot\nENV OTA_URL=\"''\"\n#  User identity\nENV USER_NAME=\"'LineageOS Buildbot'\"\nENV USER_MAIL=\"'lineageos-buildbot@docker.host'\"\n#  Include proprietary files, downloaded automatically from github.com/TheMuppets/\n#  Only some branches are supported\nENV INCLUDE_PROPRIETARY=\"true\"\n#  Mount an overlay filesystem over the source dir to do each build on a clean source\nENV BUILD_OVERLAY=\"false\"\n#  Clone the full LineageOS mirror (> 200 GB)\nENV LOCAL_MIRROR=\"false\"\n#  If you want to preserve old ZIPs set this to 'false'\nENV CLEAN_OUTDIR=\"false\"\n#  Change this cron rule to what fits best for you\n#  Use 'now' to start the build immediately\n#  For example, '0 10 * * *' means 'Every day at 10:00 UTC'\nENV CRONTAB_TIME=\"'now'\"\n#  Clean artifacts output after each build\nENV CLEAN_AFTER_BUILD=\"true\"\n#  Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)\nENV WITH_SU=\"false\"\n#  Provide a default JACK configuration in order to avoid out-of-memory issues\nENV ANDROID_JACK_VM_ARGS=\"\\\"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G\\\"\"\n#  Custom packages to be installed\nENV CUSTOM_PACKAGES=\"''\"\n#  Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#  When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n#  Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/\nENV ZIP_SUBDIR=\"true\"\n#  Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/\nENV LOGS_SUBDIR=\"true\"\n#  Apply the MicroG's signature spoofing patch\n#  Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#  \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#  The original (\"yes\") patch allows user apps to gain the ability to spoof\n#  themselves as other apps, which can be a major security threat. Using the\n#  restricted patch and embedding the apps that requires it as system privileged\n#  apps is a much secure option. See the README.md (\"Custom mode\") for an\n#  example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#  Generate delta files\nENV BUILD_DELTA=\"false\"\n#  Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_ZIPS=\"0\"\n#  Delete old deltas in $DELTA_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_DELTAS=\"0\"\n#  Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_LOGS=\"0\"\n#  Create a JSON file that indexes the build zips at the end of the build process\n#  (for the updates in OpenDelta). The file will be created in $ZIP_DIR with the\n#  specified name; leave empty to skip it.\n#  Requires ZIP_SUBDIR.\nENV OPENDELTA_BUILDS_JSON=\"''\"\n#  You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:\n#   * begin.sh, run at the very beginning\n#   * before.sh, run after the syncing and patching, before starting the builds\n#   * pre-build.sh, run before the build of every device \n#   * post-build.sh, run after the build of every device\n#   * end.sh, run at the very end\n#  Each script will be run in $SRC_DIR and must be owned and writeable only by\n#  root\n#  Create Volume entry points\n# ###########################\nVOLUME $MIRROR_DIR\nVOLUME $SRC_DIR\nVOLUME $TMP_DIR\nVOLUME $CCACHE_DIR\nVOLUME $ZIP_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $DELTA_DIR\nVOLUME $KEYS_DIR\nVOLUME $LOGS_DIR\nVOLUME $USERSCRIPTS_DIR\n#  Copy required files\n# ####################\nCOPY src/ /root/\n#  Create missing directories\n# ###########################\nRUN mkdir -p $MIRROR_DIR\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $ZIP_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $DELTA_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $USERSCRIPTS_DIR\n#  Install build dependencies\n# ###########################\nRUN echo 'deb http://deb.debian.org/debian sid main' >> /etc/apt/sources.list\nRUN echo 'deb http://deb.debian.org/debian experimental main' >> /etc/apt/sources.list\nCOPY apt_preferences /etc/apt/preferences\nRUN apt-get update -qq\nRUN apt-get -qqy upgrade\nRUN apt-get install bc bison bsdmainutils build-essential ccache cgpt cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick kmod lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lsof lzop maven openjdk-7-jdk openjdk-8-jdk pngcrush procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip zlib1g-dev -y\nRUN curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo\nRUN chmod a+x /usr/local/bin/repo\n#  Download and build delta tools\n# ###############################\nRUN cd /root/ \\\n && mkdir delta \\\n && git clone --depth=1 https://github.com/omnirom/android_packages_apps_OpenDelta.git OpenDelta \\\n && gcc -o delta/zipadjust OpenDelta/jni/zipadjust.c OpenDelta/jni/zipadjust_run.c -lz \\\n && cp OpenDelta/server/minsignapk.jar OpenDelta/server/opendelta.sh delta/ \\\n && chmod +x delta/opendelta.sh \\\n && rm -rf OpenDelta/ \\\n && sed -i -e 's|^\\s*HOME=.*|HOME=/root|; s|^\\s*BIN_XDELTA=.*|BIN_XDELTA=xdelta3|; s|^\\s*FILE_MATCH=.*|FILE_MATCH=lineage-\\*.zip|; s|^\\s*PATH_CURRENT=.*|PATH_CURRENT=$SRC_DIR/out/target/product/$DEVICE|; s|^\\s*PATH_LAST=.*|PATH_LAST=$SRC_DIR/delta_last/$DEVICE|; s|^\\s*KEY_X509=.*|KEY_X509=$KEYS_DIR/releasekey.x509.pem|; s|^\\s*KEY_PK8=.*|KEY_PK8=$KEYS_DIR/releasekey.pk8|; s|publish|$DELTA_DIR|g' /root/delta/opendelta.sh\n#  Set the work directory\n# #######################\nWORKDIR $SRC_DIR\n#  Allow redirection of stdout to docker logs\n# ###########################################\nRUN ln -sf /proc/1/fd/1 /var/log/docker.log\n#  Set the entry point to init.sh\n# ###############################\nENTRYPOINT /root/init.sh\n","injectedSmells":[],"originalDockerfileHash":"96cd3ac7177f520767819245b03312b7","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch\nMAINTAINER Nicola Corna <nicola@corna.info>\n#   Environment variables\n#  ######################\nENV MIRROR_DIR=\"/srv/mirror\"\nENV SRC_DIR=\"/srv/src\"\nENV TMP_DIR=\"/srv/tmp\"\nENV CCACHE_DIR=\"/srv/ccache\"\nENV ZIP_DIR=\"/srv/zips\"\nENV LMANIFEST_DIR=\"/srv/local_manifests\"\nENV DELTA_DIR=\"/srv/delta\"\nENV KEYS_DIR=\"/srv/keys\"\nENV LOGS_DIR=\"/srv/logs\"\nENV USERSCRIPTS_DIR=\"/srv/userscripts\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV USER=\"root\"\n#   Configurable environment variables\n#  ###################################\n#   By default we want to use CCACHE, you can disable this\n#   WARNING: disabling this may slow down a lot your builds!\nENV USE_CCACHE=\"1\"\n#   ccache maximum size. It should be a number followed by an optional suffix: k,\n#   M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0\n#   for no limit.\nENV CCACHE_SIZE=\"50G\"\n#   Environment for the LineageOS branches name\n#   See https://github.com/LineageOS/android_vendor_cm/branches for possible options\nENV BRANCH_NAME=\"'cm-14.1'\"\n#   Environment for the device list (separate by comma if more than one)\n#   eg. DEVICE_LIST=hammerhead,bullhead,angler\nENV DEVICE_LIST=\"''\"\n#   Release type string\nENV RELEASE_TYPE=\"'UNOFFICIAL'\"\n#   OTA URL that will be used inside CMUpdater\n#   Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot\nENV OTA_URL=\"''\"\n#   User identity\nENV USER_NAME=\"'LineageOS Buildbot'\"\nENV USER_MAIL=\"'lineageos-buildbot@docker.host'\"\n#   Include proprietary files, downloaded automatically from github.com/TheMuppets/\n#   Only some branches are supported\nENV INCLUDE_PROPRIETARY=\"true\"\n#   Mount an overlay filesystem over the source dir to do each build on a clean source\nENV BUILD_OVERLAY=\"false\"\n#   Clone the full LineageOS mirror (> 200 GB)\nENV LOCAL_MIRROR=\"false\"\n#   If you want to preserve old ZIPs set this to 'false'\nENV CLEAN_OUTDIR=\"false\"\n#   Change this cron rule to what fits best for you\n#   Use 'now' to start the build immediately\n#   For example, '0 10 * * *' means 'Every day at 10:00 UTC'\nENV CRONTAB_TIME=\"'now'\"\n#   Clean artifacts output after each build\nENV CLEAN_AFTER_BUILD=\"true\"\n#   Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)\nENV WITH_SU=\"false\"\n#   Provide a default JACK configuration in order to avoid out-of-memory issues\nENV ANDROID_JACK_VM_ARGS=\"\\\"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G\\\"\"\n#   Custom packages to be installed\nENV CUSTOM_PACKAGES=\"''\"\n#   Sign the builds with the keys in $KEYS_DIR\nENV SIGN_BUILDS=\"false\"\n#   When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject\nENV KEYS_SUBJECT=\"'/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'\"\n#   Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/\nENV ZIP_SUBDIR=\"true\"\n#   Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/\nENV LOGS_SUBDIR=\"true\"\n#   Apply the MicroG's signature spoofing patch\n#   Valid values are \"no\", \"yes\" (for the original MicroG's patch) and\n#   \"restricted\" (to grant the permission only to the system privileged apps).\n#\n#   The original (\"yes\") patch allows user apps to gain the ability to spoof\n#   themselves as other apps, which can be a major security threat. Using the\n#   restricted patch and embedding the apps that requires it as system privileged\n#   apps is a much secure option. See the README.md (\"Custom mode\") for an\n#   example.\nENV SIGNATURE_SPOOFING=\"\\\"no\\\"\"\n#   Generate delta files\nENV BUILD_DELTA=\"false\"\n#   Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_ZIPS=\"0\"\n#   Delete old deltas in $DELTA_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_DELTAS=\"0\"\n#   Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)\nENV DELETE_OLD_LOGS=\"0\"\n#   Create a JSON file that indexes the build zips at the end of the build process\n#   (for the updates in OpenDelta). The file will be created in $ZIP_DIR with the\n#   specified name; leave empty to skip it.\n#   Requires ZIP_SUBDIR.\nENV OPENDELTA_BUILDS_JSON=\"''\"\n#   You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:\n#    * begin.sh, run at the very beginning\n#    * before.sh, run after the syncing and patching, before starting the builds\n#    * pre-build.sh, run before the build of every device \n#    * post-build.sh, run after the build of every device\n#    * end.sh, run at the very end\n#   Each script will be run in $SRC_DIR and must be owned and writeable only by\n#   root\n#   Create Volume entry points\n#  ###########################\nVOLUME $MIRROR_DIR\nVOLUME $SRC_DIR\nVOLUME $TMP_DIR\nVOLUME $CCACHE_DIR\nVOLUME $ZIP_DIR\nVOLUME $LMANIFEST_DIR\nVOLUME $DELTA_DIR\nVOLUME $KEYS_DIR\nVOLUME $LOGS_DIR\nVOLUME $USERSCRIPTS_DIR\n#   Copy required files\n#  ####################\nCOPY src/ /root/\n#   Create missing directories\n#  ###########################\nRUN mkdir -p $MIRROR_DIR\nRUN mkdir -p $SRC_DIR\nRUN mkdir -p $TMP_DIR\nRUN mkdir -p $CCACHE_DIR\nRUN mkdir -p $ZIP_DIR\nRUN mkdir -p $LMANIFEST_DIR\nRUN mkdir -p $DELTA_DIR\nRUN mkdir -p $KEYS_DIR\nRUN mkdir -p $LOGS_DIR\nRUN mkdir -p $USERSCRIPTS_DIR\n#   Install build dependencies\n#  ###########################\nRUN echo 'deb http://deb.debian.org/debian sid main' >> /etc/apt/sources.list\nRUN echo 'deb http://deb.debian.org/debian experimental main' >> /etc/apt/sources.list\nCOPY apt_preferences /etc/apt/preferences\nRUN apt-get update -qq\nRUN apt-get -qqy upgrade\nRUN apt-get install bc bison bsdmainutils build-essential ccache cgpt cron curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick kmod lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lsof lzop maven openjdk-7-jdk openjdk-8-jdk pngcrush procps python rsync schedtool squashfs-tools wget xdelta3 xsltproc yasm zip zlib1g-dev -y\nRUN curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo\nRUN chmod a+x /usr/local/bin/repo\n#   Download and build delta tools\n#  ###############################\nRUN cd /root/ \\\n && mkdir delta \\\n && git clone --depth=1 https://github.com/omnirom/android_packages_apps_OpenDelta.git OpenDelta \\\n && gcc -o delta/zipadjust OpenDelta/jni/zipadjust.c OpenDelta/jni/zipadjust_run.c -lz \\\n && cp OpenDelta/server/minsignapk.jar OpenDelta/server/opendelta.sh delta/ \\\n && chmod +x delta/opendelta.sh \\\n && rm -rf OpenDelta/ \\\n && sed -i -e 's|^\\s*HOME=.*|HOME=/root|; s|^\\s*BIN_XDELTA=.*|BIN_XDELTA=xdelta3|; s|^\\s*FILE_MATCH=.*|FILE_MATCH=lineage-\\*.zip|; s|^\\s*PATH_CURRENT=.*|PATH_CURRENT=$SRC_DIR/out/target/product/$DEVICE|; s|^\\s*PATH_LAST=.*|PATH_LAST=$SRC_DIR/delta_last/$DEVICE|; s|^\\s*KEY_X509=.*|KEY_X509=$KEYS_DIR/releasekey.x509.pem|; s|^\\s*KEY_PK8=.*|KEY_PK8=$KEYS_DIR/releasekey.pk8|; s|publish|$DELTA_DIR|g' /root/delta/opendelta.sh\n#   Set the work directory\n#  #######################\nWORKDIR $SRC_DIR\n#   Allow redirection of stdout to docker logs\n#  ###########################################\nRUN ln -sf /proc/1/fd/1 /var/log/docker.log\n#   Set the entry point to init.sh\n#  ###############################\nENTRYPOINT /root/init.sh\n","originalDockerfileUglifiedHash":"eec344df97b887307ec70dd15d9221b9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4e0f83861b1faf9373cfaf83c7be92bb5a79afd7.dockerfile"}