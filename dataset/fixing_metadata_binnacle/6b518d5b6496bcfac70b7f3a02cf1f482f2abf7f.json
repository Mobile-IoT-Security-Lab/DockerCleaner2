{"seed":4116046847,"processedDockerfileHash":"bb983da351a075d593e3f3ee63339c91","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\n#   Debian Jessie image released 2016 March 01.\n#   Changed for py 2.7\nFROM debian@sha256:a9c958be96d7d40df920e7041608f2f017af81800ca5ad23e327bc402626b58e\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#   Install all OS dependencies for fully functional notebook server\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends git=1:2.39.2-1ubuntu1 jed=1:0.99.20~pre.178+dfsg-1 wget=1.21.3-1ubuntu1 build-essential=12.9ubuntu3 python-dev ca-certificates=20230311 bzip2=1.0.8-5build1 unzip=6.0-27ubuntu1 libsm6=2:1.2.3-1build2 pandoc=2.17.1.1-1.1ubuntu1 texlive-latex-base=2022.20230122-2 texlive-latex-extra=2022.20230122-2 texlive-fonts-extra=2022.20230122-2 texlive-fonts-recommended=2022.20230122-2 texlive-generic-recommended sudo=1.9.13p1-1ubuntu2 locales=2.37-0ubuntu2 libxrender1=1:0.9.10-1.1 -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.9.0/tini \\\n && echo \"faafbfb5b079303691a939a747d7f60591f2143164093727e870b289a44d9872 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"moc\"\nENV NB_UID=\"1000\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create moc user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p /opt/conda \\\n && chown moc /opt/conda\nUSER moc\n#   Setup moc home directory\nRUN mkdir /home/$NB_USER/work \\\n && mkdir /home/$NB_USER/.jupyter \\\n && mkdir /home/$NB_USER/.local \\\n && echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc\n#   Install conda as moc\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-3.19.0-Linux-x86_64.sh \\\n && echo \"646b4d5398f8d76a0664375ee6226611c43ee3d49de3eb03efe7480e3c3b9ebf *Miniconda2-3.19.0-Linux-x86_64.sh\" | sha256sum -c - \\\n && /bin/bash Miniconda2-3.19.0-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda2-3.19.0-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==3.19.1 \\\n && conda clean -tipsy\n#   Install Jupyter notebook as moc\nRUN conda install --quiet --yes 'notebook=5.0*' terminado \\\n && conda clean -tipsy\nUSER root\n#   Configure container startup as root\nEXPOSE 8888/tcp\nWORKDIR /home/$NB_USER/work\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY start-notebook.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /home/$NB_USER/.jupyter/\nRUN chown -R $NB_USER:users /home/$NB_USER/.jupyter\n#   Switch back to moc to avoid accidental container runs as root\nUSER moc\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#   libav-tools for matplotlib anim\nRUN apt-get update \\\n && apt-get install --no-install-recommends libav-tools -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER moc\n#   Install Python 2 packages\nRUN conda create --quiet --yes -p $CONDA_DIR/envs/python2 python=2.7 'ipython=4.1*' 'ipywidgets=4.1*' 'pandas=0.17*' 'matplotlib=1.5*' 'scipy=0.17*' 'seaborn=0.7*' 'scikit-learn=0.17*' 'scikit-image=0.11*' 'statsmodels=0.6*' \\\n && conda clean -tipsy\nUSER root\n#   Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#   switching at runtime.\nRUN $CONDA_DIR/envs/python2/bin/python -m ipykernel install\nUSER moc\nRUN pip install pip==23.1 --upgrade \\\n && pip install elasticsearch==8.7.0 \\\n && pip install plotly==5.14.1 \\\n && pip install elasticsearch-dsl==7.4.1 \\\n && pip install pandas==2.0.0 \\\n && pip install holoviews==1.15.4 \\\n && pip install pyupset==0.1.1.post7 \\\n && pip install bokeh==3.1.0\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) Jupyter Development Team.\n#  Distributed under the terms of the Modified BSD License.\n#  Debian Jessie image released 2016 March 01.\n#  Changed for py 2.7\nFROM debian@sha256:a9c958be96d7d40df920e7041608f2f017af81800ca5ad23e327bc402626b58e\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#  Install all OS dependencies for fully functional notebook server\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends git jed wget build-essential python-dev ca-certificates bzip2 unzip libsm6 pandoc texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended sudo locales libxrender1 -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#  Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.9.0/tini \\\n && echo \"faafbfb5b079303691a939a747d7f60591f2143164093727e870b289a44d9872 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#  Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"moc\"\nENV NB_UID=\"1000\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  Create moc user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p /opt/conda \\\n && chown moc /opt/conda\nUSER moc\n#  Setup moc home directory\nRUN mkdir /home/$NB_USER/work \\\n && mkdir /home/$NB_USER/.jupyter \\\n && mkdir /home/$NB_USER/.local \\\n && echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc\n#  Install conda as moc\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-3.19.0-Linux-x86_64.sh \\\n && echo \"646b4d5398f8d76a0664375ee6226611c43ee3d49de3eb03efe7480e3c3b9ebf *Miniconda2-3.19.0-Linux-x86_64.sh\" | sha256sum -c - \\\n && /bin/bash Miniconda2-3.19.0-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda2-3.19.0-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==3.19.1 \\\n && conda clean -tipsy\n#  Install Jupyter notebook as moc\nRUN conda install --quiet --yes 'notebook=5.0*' terminado \\\n && conda clean -tipsy\nUSER root\n#  Configure container startup as root\nEXPOSE 8888/tcp\nWORKDIR /home/$NB_USER/work\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#  Add local files as late as possible to avoid cache busting\nCOPY start-notebook.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /home/$NB_USER/.jupyter/\nRUN chown -R $NB_USER:users /home/$NB_USER/.jupyter\n#  Switch back to moc to avoid accidental container runs as root\nUSER moc\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#  libav-tools for matplotlib anim\nRUN apt-get update \\\n && apt-get install --no-install-recommends libav-tools -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER moc\n#  Install Python 2 packages\nRUN conda create --quiet --yes -p $CONDA_DIR/envs/python2 python=2.7 'ipython=4.1*' 'ipywidgets=4.1*' 'pandas=0.17*' 'matplotlib=1.5*' 'scipy=0.17*' 'seaborn=0.7*' 'scikit-learn=0.17*' 'scikit-image=0.11*' 'statsmodels=0.6*' \\\n && conda clean -tipsy\nUSER root\n#  Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#  switching at runtime.\nRUN $CONDA_DIR/envs/python2/bin/python -m ipykernel install\nUSER moc\nRUN pip install pip --upgrade \\\n && pip install elasticsearch \\\n && pip install plotly \\\n && pip install elasticsearch-dsl \\\n && pip install pandas \\\n && pip install holoviews \\\n && pip install pyupset \\\n && pip install bokeh\n","injectedSmells":[],"originalDockerfileHash":"2897e49abb0cf7c529349760f555e3ff","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\n#   Debian Jessie image released 2016 March 01.\n#   Changed for py 2.7\nFROM debian@sha256:a9c958be96d7d40df920e7041608f2f017af81800ca5ad23e327bc402626b58e\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#   Install all OS dependencies for fully functional notebook server\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends git jed wget build-essential python-dev ca-certificates bzip2 unzip libsm6 pandoc texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended sudo locales libxrender1 -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.9.0/tini \\\n && echo \"faafbfb5b079303691a939a747d7f60591f2143164093727e870b289a44d9872 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"moc\"\nENV NB_UID=\"1000\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create moc user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p /opt/conda \\\n && chown moc /opt/conda\nUSER moc\n#   Setup moc home directory\nRUN mkdir /home/$NB_USER/work \\\n && mkdir /home/$NB_USER/.jupyter \\\n && mkdir /home/$NB_USER/.local \\\n && echo \"cacert=/etc/ssl/certs/ca-certificates.crt\" > /home/$NB_USER/.curlrc\n#   Install conda as moc\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-3.19.0-Linux-x86_64.sh \\\n && echo \"646b4d5398f8d76a0664375ee6226611c43ee3d49de3eb03efe7480e3c3b9ebf *Miniconda2-3.19.0-Linux-x86_64.sh\" | sha256sum -c - \\\n && /bin/bash Miniconda2-3.19.0-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda2-3.19.0-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==3.19.1 \\\n && conda clean -tipsy\n#   Install Jupyter notebook as moc\nRUN conda install --quiet --yes 'notebook=5.0*' terminado \\\n && conda clean -tipsy\nUSER root\n#   Configure container startup as root\nEXPOSE 8888/tcp\nWORKDIR /home/$NB_USER/work\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY start-notebook.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /home/$NB_USER/.jupyter/\nRUN chown -R $NB_USER:users /home/$NB_USER/.jupyter\n#   Switch back to moc to avoid accidental container runs as root\nUSER moc\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\n#   libav-tools for matplotlib anim\nRUN apt-get update \\\n && apt-get install --no-install-recommends libav-tools -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER moc\n#   Install Python 2 packages\nRUN conda create --quiet --yes -p $CONDA_DIR/envs/python2 python=2.7 'ipython=4.1*' 'ipywidgets=4.1*' 'pandas=0.17*' 'matplotlib=1.5*' 'scipy=0.17*' 'seaborn=0.7*' 'scikit-learn=0.17*' 'scikit-image=0.11*' 'statsmodels=0.6*' \\\n && conda clean -tipsy\nUSER root\n#   Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#   switching at runtime.\nRUN $CONDA_DIR/envs/python2/bin/python -m ipykernel install\nUSER moc\nRUN pip install pip --upgrade \\\n && pip install elasticsearch \\\n && pip install plotly \\\n && pip install elasticsearch-dsl \\\n && pip install pandas \\\n && pip install holoviews \\\n && pip install pyupset \\\n && pip install bokeh\n","originalDockerfileUglifiedHash":"cbcd2df53fdbc0a54ea7f428bbf5a75a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6b518d5b6496bcfac70b7f3a02cf1f482f2abf7f.dockerfile"}