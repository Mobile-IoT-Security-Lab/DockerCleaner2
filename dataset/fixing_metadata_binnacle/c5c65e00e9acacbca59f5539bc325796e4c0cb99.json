{"seed":2277538601,"processedDockerfileHash":"f32f88ae3644265a106be70f48784ed5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nENV CUDA_ARCH_BIN=\"\\\"30 35 50 52 60\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"60\\\"\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-all-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip python python-dev python2.7-dev python3-dev python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy python-joblib build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo cmake git libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install caffe dependencies\nRUN chmod 777 /tmp \\\n && apt-get update \\\n && apt-get install --no-install-recommends git wget cmake curl vim libatlas-base-dev libatlas-dev libopencv-dev libprotobuf-dev libgoogle-glog-dev libgflags-dev protobuf-compiler libhdf5-dev libleveldb-dev liblmdb-dev libsnappy-dev python-dev python-pip python-numpy gfortran -y > /dev/null\nWORKDIR /\nRUN apt-get install --no-install-recommends python2.7 python-pip python-dev -qyy\nRUN pip install pip==23.1 --upgrade\nRUN pip install numpy==1.24.2\n#  #################################################\n#   Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libgflags-dev libgoogle-glog-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml wget -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install numpy==1.24.2 pandas==2.0.0 sklearn==0.0.post4 matplotlib==3.7.1 seaborn==0.12.2 ipython==8.12.0 jupyter==1.0.0 pyyaml==6.0 h5py==3.8.0 ipykernel==6.22.0 --no-cache-dir\n#   Install OpenCV 3.2.0 with CUDA support\nRUN git clone --depth 1 -b 3.2.0 https://github.com/Itseez/opencv.git /opencv \\\n && cd /opencv \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DCUDA_ARCH_BIN=\"${CUDA_ARCH}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"--default-stream per-thread -O3\" -DCUDA_FAST_MATH=ON \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n#  #################################################\n#   Install NCCL for multi-GPU communication\nRUN wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl-dev_1.2.3-1.cuda8.0_amd64.deb\n#   Clone Caffe repo and move into it\nRUN cd /root \\\n && git clone https://github.com/BVLC/caffe.git \\\n && cd caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && pip install thrift==0.9.3 -v\nRUN cd /root/caffe \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#   Add to Python path\nENV PYTHONPATH=\"/root/caffe/python:$PYTHONPATH\"\n#   Add caffe to path\nENV PATH=\"/root/caffe/build/tools:$PATH\"\nRUN pip install tensorflow-gpu==2.12.0 --no-cache-dir\n#   Keras\nRUN pip install git+https://github.com/fchollet/keras.git\nWORKDIR /root/\nENV PATH=\"/usr/local/cuda-8.0/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV CUDA_BIN_PATH=\"/usr/local/cuda\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-8.0\"\nRUN pip install scikit-learn==0.18 pycuda==2022.2.2 -v \\\n && pip install opencv-python==4.7.0.72 pycrypto==2.6.1 astropy==5.2.2 autograd==1.5\n#   Torch\n#   RUN pip install http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl \nRUN pip2 install http://download.pytorch.org/whl/cu80/torch-0.2.0.post2-cp27-cp27mu-manylinux1_x86_64.whl\n#   Build PyTorch from source\n#   RUN git clone https://github.com/pytorch/pytorch.git \\\n#    && cd pytorch \\\n#    && git checkout 4eb448a051a1421de1dda9bd2ddfb34396eb7287 \\\n#    && TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1+PTX\" \\\n#       TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" \\\n#       python setup.py install \\\n#    && rm -rf pytorch\n#   Build torch-vision from source\n#   RUN git clone https://github.com/pytorch/vision.git \\\n#    && cd vision \\\n#    && git checkout 83263d8571c9cdd46f250a7986a5219ed29d19a1 \\\n#    && python setup.py install \\\n#    && rm -rf vision\n#   Install Torchnet, a high-level framework for PyTorch\nRUN pip install git+https://github.com/pytorch/tnt.git@master\nRUN pip install torchvision==0.15.1 psutil==5.9.4\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#  ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/root\n#   Expose Ports\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp 8000/tcp 7842/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nENV CUDA_ARCH_BIN=\"\\\"30 35 50 52 60\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"60\\\"\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-all-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip python python-dev python2.7-dev python3-dev python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy python-joblib build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo cmake git libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install caffe dependencies\nRUN chmod 777 /tmp \\\n && apt-get update \\\n && apt-get install git wget cmake curl vim libatlas-base-dev libatlas-dev libopencv-dev libprotobuf-dev libgoogle-glog-dev libgflags-dev protobuf-compiler libhdf5-dev libleveldb-dev liblmdb-dev libsnappy-dev python-dev python-pip python-numpy gfortran -y > /dev/null\nWORKDIR /\nRUN apt-get install python2.7 python-pip python-dev -qyy\nRUN pip install pip --upgrade\nRUN pip install numpy\n# #################################################\n#  Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libgflags-dev libgoogle-glog-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml wget -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install numpy pandas sklearn matplotlib seaborn ipython jupyter pyyaml h5py ipykernel --no-cache-dir\n#  Install OpenCV 3.2.0 with CUDA support\nRUN git clone --depth 1 -b 3.2.0 https://github.com/Itseez/opencv.git /opencv \\\n && cd /opencv \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DCUDA_ARCH_BIN=\"${CUDA_ARCH}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"--default-stream per-thread -O3\" -DCUDA_FAST_MATH=ON \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n# #################################################\n#  Install NCCL for multi-GPU communication\nRUN wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl-dev_1.2.3-1.cuda8.0_amd64.deb\n#  Clone Caffe repo and move into it\nRUN cd /root \\\n && git clone https://github.com/BVLC/caffe.git \\\n && cd caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && pip install thrift==0.9.3 -v\nRUN cd /root/caffe \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#  Add to Python path\nENV PYTHONPATH=\"/root/caffe/python:$PYTHONPATH\"\n#  Add caffe to path\nENV PATH=\"/root/caffe/build/tools:$PATH\"\nRUN pip install tensorflow-gpu --no-cache-dir\n#  Keras\nRUN pip install git+https://github.com/fchollet/keras.git\nWORKDIR /root/\nENV PATH=\"/usr/local/cuda-8.0/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV CUDA_BIN_PATH=\"/usr/local/cuda\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-8.0\"\nRUN pip install scikit-learn==0.18 pycuda -v \\\n && pip install opencv-python pycrypto astropy autograd\n#  Torch\n#  RUN pip install http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl \nRUN pip2 install http://download.pytorch.org/whl/cu80/torch-0.2.0.post2-cp27-cp27mu-manylinux1_x86_64.whl\n#  Build PyTorch from source\n#  RUN git clone https://github.com/pytorch/pytorch.git \\\n#   && cd pytorch \\\n#   && git checkout 4eb448a051a1421de1dda9bd2ddfb34396eb7287 \\\n#   && TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1+PTX\" \\\n#      TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" \\\n#      python setup.py install \\\n#   && rm -rf pytorch\n#  Build torch-vision from source\n#  RUN git clone https://github.com/pytorch/vision.git \\\n#   && cd vision \\\n#   && git checkout 83263d8571c9cdd46f250a7986a5219ed29d19a1 \\\n#   && python setup.py install \\\n#   && rm -rf vision\n#  Install Torchnet, a high-level framework for PyTorch\nRUN pip install git+https://github.com/pytorch/tnt.git@master\nRUN pip install torchvision psutil\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n# ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/root\n#  Expose Ports\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp 8000/tcp 7842/tcp\n","injectedSmells":[],"originalDockerfileHash":"b9d47e4f6eff4ff2c8e4fe0887c07b29","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nENV CUDA_ARCH_BIN=\"\\\"30 35 50 52 60\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"60\\\"\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-all-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip python python-dev python2.7-dev python3-dev python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy python-joblib build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo cmake git libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install caffe dependencies\nRUN chmod 777 /tmp \\\n && apt-get update \\\n && apt-get install git wget cmake curl vim libatlas-base-dev libatlas-dev libopencv-dev libprotobuf-dev libgoogle-glog-dev libgflags-dev protobuf-compiler libhdf5-dev libleveldb-dev liblmdb-dev libsnappy-dev python-dev python-pip python-numpy gfortran -y > /dev/null\nWORKDIR /\nRUN apt-get install python2.7 python-pip python-dev -qyy\nRUN pip install pip --upgrade\nRUN pip install numpy\n#  #################################################\n#   Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libgflags-dev libgoogle-glog-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml wget -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install numpy pandas sklearn matplotlib seaborn ipython jupyter pyyaml h5py ipykernel --no-cache-dir\n#   Install OpenCV 3.2.0 with CUDA support\nRUN git clone --depth 1 -b 3.2.0 https://github.com/Itseez/opencv.git /opencv \\\n && cd /opencv \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DCUDA_ARCH_BIN=\"${CUDA_ARCH}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"--default-stream per-thread -O3\" -DCUDA_FAST_MATH=ON \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n#  #################################################\n#   Install NCCL for multi-GPU communication\nRUN wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl1_1.2.3-1.cuda8.0_amd64.deb \\\n && wget https://github.com/NVIDIA/nccl/releases/download/v1.2.3-1%2Bcuda8.0/libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && dpkg -i libnccl-dev_1.2.3-1.cuda8.0_amd64.deb \\\n && rm libnccl-dev_1.2.3-1.cuda8.0_amd64.deb\n#   Clone Caffe repo and move into it\nRUN cd /root \\\n && git clone https://github.com/BVLC/caffe.git \\\n && cd caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && pip install thrift==0.9.3 -v\nRUN cd /root/caffe \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#   Add to Python path\nENV PYTHONPATH=\"/root/caffe/python:$PYTHONPATH\"\n#   Add caffe to path\nENV PATH=\"/root/caffe/build/tools:$PATH\"\nRUN pip install tensorflow-gpu --no-cache-dir\n#   Keras\nRUN pip install git+https://github.com/fchollet/keras.git\nWORKDIR /root/\nENV PATH=\"/usr/local/cuda-8.0/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV CUDA_BIN_PATH=\"/usr/local/cuda\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-8.0\"\nRUN pip install scikit-learn==0.18 pycuda -v \\\n && pip install opencv-python pycrypto astropy autograd\n#   Torch\n#   RUN pip install http://download.pytorch.org/whl/cu80/torch-0.2.0.post3-cp35-cp35m-manylinux1_x86_64.whl \nRUN pip2 install http://download.pytorch.org/whl/cu80/torch-0.2.0.post2-cp27-cp27mu-manylinux1_x86_64.whl\n#   Build PyTorch from source\n#   RUN git clone https://github.com/pytorch/pytorch.git \\\n#    && cd pytorch \\\n#    && git checkout 4eb448a051a1421de1dda9bd2ddfb34396eb7287 \\\n#    && TORCH_CUDA_ARCH_LIST=\"3.5 5.2 6.0 6.1+PTX\" \\\n#       TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" \\\n#       python setup.py install \\\n#    && rm -rf pytorch\n#   Build torch-vision from source\n#   RUN git clone https://github.com/pytorch/vision.git \\\n#    && cd vision \\\n#    && git checkout 83263d8571c9cdd46f250a7986a5219ed29d19a1 \\\n#    && python setup.py install \\\n#    && rm -rf vision\n#   Install Torchnet, a high-level framework for PyTorch\nRUN pip install git+https://github.com/pytorch/tnt.git@master\nRUN pip install torchvision psutil\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#  ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/root\n#   Expose Ports\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp 8000/tcp 7842/tcp\n","originalDockerfileUglifiedHash":"c6b7e2df1d509e9dda266ab980ef2e7e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c5c65e00e9acacbca59f5539bc325796e4c0cb99.dockerfile"}