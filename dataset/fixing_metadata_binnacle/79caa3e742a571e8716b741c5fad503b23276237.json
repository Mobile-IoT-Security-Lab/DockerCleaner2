{"seed":2078824084,"processedDockerfileHash":"6744af1b90c8371a10594c89b0776e0e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:jessie\nARG DOCKER_RELEASE_STAGE\nARG INSTALLER_VERSION\nARG DOCKER_VERSION\nARG DOCKER_COMPOSE_VERSION\nARG DOCKER_MACHINE_VERSION\nARG KITEMATIC_VERSION\nARG VBOX_VERSION\nARG VBOX_REV\nARG MIXPANEL_TOKEN\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential curl libxml2-dev libssl-dev p7zip-full hfsplus hfsutils hfsprogs cpio -y\n#   We need the bomutils to create the Mac OS X Bill of Materials (BOM) files.\n#   https://github.com/hogliux/bomutils\nRUN curl -fsSL https://github.com/hogliux/bomutils/archive/0.2.tar.gz | tar xvz \\\n && cd bomutils-* \\\n && make \\\n && make install\n#   Needed to pack/unpack the .pkg files\nRUN curl -fsSL https://github.com/mackyle/xar/archive/xar-1.6.1.tar.gz | tar xvz \\\n && cd xar-*/xar \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\nRUN curl -fsSL -o /vbox.dmg http://download.virtualbox.org/virtualbox/$VBOX_VERSION/VirtualBox-$VBOX_VERSION-$VBOX_REV-OSX.dmg \\\n && echo \"$( curl -fsSL 'https://virtualbox.org/download/hashes/'\"$VBOX_VERSION\"'/SHA256SUMS' | awk '$2 ~ /-OSX.dmg$/ { print $1 }' ;) */vbox.dmg\" | sha256sum -c -\n#   Why '--strip-components 3'?  The client binary is in usr/local/bin/docker in\n#   the tar archive.  If we extract directly, it will create a usr/local/bin\n#   subdirectory (not what we want).  So we use --strip-components to remove the\n#   `usr/local/bin` part and drop the bin in the current directory.\nRUN curl -fsSL -o dockerbins.tgz \"https://download.docker.com/mac/static/${DOCKER_RELEASE_STAGE}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar xvf dockerbins.tgz docker/docker --strip-components 1 \\\n && rm dockerbins.tgz\nRUN chmod +x /docker\nRUN curl -fsSL -o /docker-machine https://github.com/docker/machine/releases/download/v$DOCKER_MACHINE_VERSION/docker-machine-Darwin-x86_64\nRUN chmod +x /docker-machine\nRUN curl -fsSL -o /docker-compose https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-Darwin-x86_64\nRUN chmod +x /docker-compose\nRUN curl -fsSL -o /boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v$DOCKER_VERSION/boot2docker.iso\nRUN curl -fsSL -o /kitematic.zip https://github.com/kitematic/kitematic/releases/download/v$KITEMATIC_VERSION/Kitematic-$KITEMATIC_VERSION-Mac.zip\n#    Extract the VirtualBox .pkg\nRUN mkdir -p /mpkg/vbox \\\n && cd /mpkg/vbox \\\n && 7z x /vbox.dmg -ir'!*.hfs' \\\n && 7z x `find . -name '*.hfs' ` -ir'!*.pkg' \\\n && mv VirtualBox/VirtualBox.pkg . \\\n && rm -rf vbox.dmg \\\n && rm -rf `find . -name '*.hfs' `\n#   Extract the .pkg files\nRUN cd /mpkg/vbox \\\n && mv VirtualBox.pkg /tmp \\\n && xar -xf /tmp/VirtualBox.pkg \\\n && rm -rf /tmp/VirtualBox.pkg\nRUN cd /mpkg/vbox \\\n && mv *.pkg .. \\\n && rm -rf vbox\n#   Add components\nCOPY osx/mpkg/Distribution /mpkg/Distribution\n#   docker.pkg\nCOPY osx/mpkg/docker.pkg /mpkg/docker.pkg\nRUN cd /mpkg/docker.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKER_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKER_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   kitematicapp.pkg\nCOPY osx/mpkg/kitematicapp.pkg /mpkg/kitematicapp.pkg\nRUN cd /mpkg/kitematicapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && 7z x /kitematic.zip \\\n && rm -rf ./__MACOSX \\\n && ls -al . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%KITEMATICAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%KITEMATICAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockermachine.pkg\nCOPY osx/mpkg/dockermachine.pkg /mpkg/dockermachine.pkg\nRUN cd /mpkg/dockermachine.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-machine usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERMACHINE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERMACHINE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockercompose.pkg\nCOPY osx/mpkg/dockercompose.pkg /mpkg/dockercompose.pkg\nRUN cd /mpkg/dockercompose.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-compose usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERCOMPOSE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERCOMPOSE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   boot2dockeriso.pkg\nCOPY osx/mpkg/boot2dockeriso.pkg /mpkg/boot2dockeriso.pkg\nRUN cd /mpkg/boot2dockeriso.pkg \\\n && cd Scripts \\\n && find . | cpio -o --format odc | gzip -c > ../Scripts.bin \\\n && cd .. \\\n && rm -r Scripts \\\n && mv Scripts.bin Scripts \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && cp /boot2docker.iso . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%BOOT2DOCKER_ISO_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%BOOT2DOCKER_ISO_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/dockerquickstartterminalapp.pkg /mpkg/dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/quickstart.app /mpkg/quickstart.app\nRUN cd /mpkg/dockerquickstartterminalapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && mv /mpkg/quickstart.app ./Docker Quickstart Terminal.app \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERQUICKSTARTTERMINALAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\nCOPY osx/mpkg/Resources /mpkg/Resources\nCOPY osx/mpkg/Plugins /mpkg/Plugins\nRUN sed -i -e \"s/%MIXPANEL_TOKEN%/$MIXPANEL_TOKEN/g\" -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Info.plist\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Resources/*.html\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf\nRUN sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" /mpkg/Distribution \\\n && sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" mpkg/Resources/en.lproj/Localizable.strings\n#   Repackage back. Yes, --compression=none is mandatory.\n#   or this won't install in OSX.\nRUN cd /mpkg \\\n && xar -c --compression=none -f /DockerToolbox.pkg .\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:jessie\nARG DOCKER_RELEASE_STAGE\nARG INSTALLER_VERSION\nARG DOCKER_VERSION\nARG DOCKER_COMPOSE_VERSION\nARG DOCKER_MACHINE_VERSION\nARG KITEMATIC_VERSION\nARG VBOX_VERSION\nARG VBOX_REV\nARG MIXPANEL_TOKEN\nRUN apt-get update \\\n && apt-get install autoconf build-essential curl libxml2-dev libssl-dev p7zip-full hfsplus hfsutils hfsprogs cpio -y\n#  We need the bomutils to create the Mac OS X Bill of Materials (BOM) files.\n#  https://github.com/hogliux/bomutils\nRUN curl -fsSL https://github.com/hogliux/bomutils/archive/0.2.tar.gz | tar xvz \\\n && cd bomutils-* \\\n && make \\\n && make install\n#  Needed to pack/unpack the .pkg files\nRUN curl -fsSL https://github.com/mackyle/xar/archive/xar-1.6.1.tar.gz | tar xvz \\\n && cd xar-*/xar \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\nRUN curl -fsSL -o /vbox.dmg http://download.virtualbox.org/virtualbox/$VBOX_VERSION/VirtualBox-$VBOX_VERSION-$VBOX_REV-OSX.dmg \\\n && echo \"$( curl -fsSL 'https://virtualbox.org/download/hashes/'\"$VBOX_VERSION\"'/SHA256SUMS' | awk '$2 ~ /-OSX.dmg$/ { print $1 }' ;) */vbox.dmg\" | sha256sum -c -\n#  Why '--strip-components 3'?  The client binary is in usr/local/bin/docker in\n#  the tar archive.  If we extract directly, it will create a usr/local/bin\n#  subdirectory (not what we want).  So we use --strip-components to remove the\n#  `usr/local/bin` part and drop the bin in the current directory.\nRUN curl -fsSL -o dockerbins.tgz \"https://download.docker.com/mac/static/${DOCKER_RELEASE_STAGE}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar xvf dockerbins.tgz docker/docker --strip-components 1 \\\n && rm dockerbins.tgz\nRUN chmod +x /docker\nRUN curl -fsSL -o /docker-machine https://github.com/docker/machine/releases/download/v$DOCKER_MACHINE_VERSION/docker-machine-Darwin-x86_64\nRUN chmod +x /docker-machine\nRUN curl -fsSL -o /docker-compose https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-Darwin-x86_64\nRUN chmod +x /docker-compose\nRUN curl -fsSL -o /boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v$DOCKER_VERSION/boot2docker.iso\nRUN curl -fsSL -o /kitematic.zip https://github.com/kitematic/kitematic/releases/download/v$KITEMATIC_VERSION/Kitematic-$KITEMATIC_VERSION-Mac.zip\n#   Extract the VirtualBox .pkg\nRUN mkdir -p /mpkg/vbox \\\n && cd /mpkg/vbox \\\n && 7z x /vbox.dmg -ir'!*.hfs' \\\n && 7z x `find . -name '*.hfs' ` -ir'!*.pkg' \\\n && mv VirtualBox/VirtualBox.pkg . \\\n && rm -rf vbox.dmg \\\n && rm -rf `find . -name '*.hfs' `\n#  Extract the .pkg files\nRUN cd /mpkg/vbox \\\n && mv VirtualBox.pkg /tmp \\\n && xar -xf /tmp/VirtualBox.pkg \\\n && rm -rf /tmp/VirtualBox.pkg\nRUN cd /mpkg/vbox \\\n && mv *.pkg .. \\\n && rm -rf vbox\n#  Add components\nCOPY osx/mpkg/Distribution /mpkg/Distribution\n#  docker.pkg\nCOPY osx/mpkg/docker.pkg /mpkg/docker.pkg\nRUN cd /mpkg/docker.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKER_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKER_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#  kitematicapp.pkg\nCOPY osx/mpkg/kitematicapp.pkg /mpkg/kitematicapp.pkg\nRUN cd /mpkg/kitematicapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && 7z x /kitematic.zip \\\n && rm -rf ./__MACOSX \\\n && ls -al . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%KITEMATICAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%KITEMATICAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#  dockermachine.pkg\nCOPY osx/mpkg/dockermachine.pkg /mpkg/dockermachine.pkg\nRUN cd /mpkg/dockermachine.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-machine usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERMACHINE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERMACHINE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#  dockercompose.pkg\nCOPY osx/mpkg/dockercompose.pkg /mpkg/dockercompose.pkg\nRUN cd /mpkg/dockercompose.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-compose usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERCOMPOSE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERCOMPOSE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#  boot2dockeriso.pkg\nCOPY osx/mpkg/boot2dockeriso.pkg /mpkg/boot2dockeriso.pkg\nRUN cd /mpkg/boot2dockeriso.pkg \\\n && cd Scripts \\\n && find . | cpio -o --format odc | gzip -c > ../Scripts.bin \\\n && cd .. \\\n && rm -r Scripts \\\n && mv Scripts.bin Scripts \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && cp /boot2docker.iso . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%BOOT2DOCKER_ISO_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%BOOT2DOCKER_ISO_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#  dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/dockerquickstartterminalapp.pkg /mpkg/dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/quickstart.app /mpkg/quickstart.app\nRUN cd /mpkg/dockerquickstartterminalapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && mv /mpkg/quickstart.app ./Docker Quickstart Terminal.app \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERQUICKSTARTTERMINALAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\nCOPY osx/mpkg/Resources /mpkg/Resources\nCOPY osx/mpkg/Plugins /mpkg/Plugins\nRUN sed -i -e \"s/%MIXPANEL_TOKEN%/$MIXPANEL_TOKEN/g\" -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Info.plist\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Resources/*.html\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf\nRUN sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" /mpkg/Distribution \\\n && sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" mpkg/Resources/en.lproj/Localizable.strings\n#  Repackage back. Yes, --compression=none is mandatory.\n#  or this won't install in OSX.\nRUN cd /mpkg \\\n && xar -c --compression=none -f /DockerToolbox.pkg .\n","injectedSmells":[],"originalDockerfileHash":"7347836feae79f373445f4ae7be85694","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:jessie\nARG DOCKER_RELEASE_STAGE\nARG INSTALLER_VERSION\nARG DOCKER_VERSION\nARG DOCKER_COMPOSE_VERSION\nARG DOCKER_MACHINE_VERSION\nARG KITEMATIC_VERSION\nARG VBOX_VERSION\nARG VBOX_REV\nARG MIXPANEL_TOKEN\nRUN apt-get update \\\n && apt-get install autoconf build-essential curl libxml2-dev libssl-dev p7zip-full hfsplus hfsutils hfsprogs cpio -y\n#   We need the bomutils to create the Mac OS X Bill of Materials (BOM) files.\n#   https://github.com/hogliux/bomutils\nRUN curl -fsSL https://github.com/hogliux/bomutils/archive/0.2.tar.gz | tar xvz \\\n && cd bomutils-* \\\n && make \\\n && make install\n#   Needed to pack/unpack the .pkg files\nRUN curl -fsSL https://github.com/mackyle/xar/archive/xar-1.6.1.tar.gz | tar xvz \\\n && cd xar-*/xar \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\nRUN curl -fsSL -o /vbox.dmg http://download.virtualbox.org/virtualbox/$VBOX_VERSION/VirtualBox-$VBOX_VERSION-$VBOX_REV-OSX.dmg \\\n && echo \"$( curl -fsSL 'https://virtualbox.org/download/hashes/'\"$VBOX_VERSION\"'/SHA256SUMS' | awk '$2 ~ /-OSX.dmg$/ { print $1 }' ;) */vbox.dmg\" | sha256sum -c -\n#   Why '--strip-components 3'?  The client binary is in usr/local/bin/docker in\n#   the tar archive.  If we extract directly, it will create a usr/local/bin\n#   subdirectory (not what we want).  So we use --strip-components to remove the\n#   `usr/local/bin` part and drop the bin in the current directory.\nRUN curl -fsSL -o dockerbins.tgz \"https://download.docker.com/mac/static/${DOCKER_RELEASE_STAGE}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar xvf dockerbins.tgz docker/docker --strip-components 1 \\\n && rm dockerbins.tgz\nRUN chmod +x /docker\nRUN curl -fsSL -o /docker-machine https://github.com/docker/machine/releases/download/v$DOCKER_MACHINE_VERSION/docker-machine-Darwin-x86_64\nRUN chmod +x /docker-machine\nRUN curl -fsSL -o /docker-compose https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-Darwin-x86_64\nRUN chmod +x /docker-compose\nRUN curl -fsSL -o /boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v$DOCKER_VERSION/boot2docker.iso\nRUN curl -fsSL -o /kitematic.zip https://github.com/kitematic/kitematic/releases/download/v$KITEMATIC_VERSION/Kitematic-$KITEMATIC_VERSION-Mac.zip\n#    Extract the VirtualBox .pkg\nRUN mkdir -p /mpkg/vbox \\\n && cd /mpkg/vbox \\\n && 7z x /vbox.dmg -ir'!*.hfs' \\\n && 7z x `find . -name '*.hfs' ` -ir'!*.pkg' \\\n && mv VirtualBox/VirtualBox.pkg . \\\n && rm -rf vbox.dmg \\\n && rm -rf `find . -name '*.hfs' `\n#   Extract the .pkg files\nRUN cd /mpkg/vbox \\\n && mv VirtualBox.pkg /tmp \\\n && xar -xf /tmp/VirtualBox.pkg \\\n && rm -rf /tmp/VirtualBox.pkg\nRUN cd /mpkg/vbox \\\n && mv *.pkg .. \\\n && rm -rf vbox\n#   Add components\nCOPY osx/mpkg/Distribution /mpkg/Distribution\n#   docker.pkg\nCOPY osx/mpkg/docker.pkg /mpkg/docker.pkg\nRUN cd /mpkg/docker.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKER_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKER_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   kitematicapp.pkg\nCOPY osx/mpkg/kitematicapp.pkg /mpkg/kitematicapp.pkg\nRUN cd /mpkg/kitematicapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && 7z x /kitematic.zip \\\n && rm -rf ./__MACOSX \\\n && ls -al . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%KITEMATICAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%KITEMATICAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockermachine.pkg\nCOPY osx/mpkg/dockermachine.pkg /mpkg/dockermachine.pkg\nRUN cd /mpkg/dockermachine.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-machine usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERMACHINE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERMACHINE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockercompose.pkg\nCOPY osx/mpkg/dockercompose.pkg /mpkg/dockercompose.pkg\nRUN cd /mpkg/dockercompose.pkg \\\n && mkdir rootfs \\\n && cd rootfs \\\n && mkdir -p usr/local/bin \\\n && mv /docker-compose usr/local/bin/ \\\n && ls -al /usr/local/bin/ \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERCOMPOSE_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERCOMPOSE_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   boot2dockeriso.pkg\nCOPY osx/mpkg/boot2dockeriso.pkg /mpkg/boot2dockeriso.pkg\nRUN cd /mpkg/boot2dockeriso.pkg \\\n && cd Scripts \\\n && find . | cpio -o --format odc | gzip -c > ../Scripts.bin \\\n && cd .. \\\n && rm -r Scripts \\\n && mv Scripts.bin Scripts \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && cp /boot2docker.iso . \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%BOOT2DOCKER_ISO_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%BOOT2DOCKER_ISO_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\n#   dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/dockerquickstartterminalapp.pkg /mpkg/dockerquickstartterminalapp.pkg\nCOPY osx/mpkg/quickstart.app /mpkg/quickstart.app\nRUN cd /mpkg/dockerquickstartterminalapp.pkg \\\n && mkdir ./rootfs \\\n && cd ./rootfs \\\n && mv /mpkg/quickstart.app ./Docker Quickstart Terminal.app \\\n && find . | cpio -o --format odc | gzip -c > ../Payload \\\n && mkbom . ../Bom \\\n && sed -i -e \"s/%DOCKERQUICKSTARTTERMINALAPP_NUMBER_OF_FILES%/`find . | wc -l `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_INSTALL_KBYTES%/`du -sk | cut -f1 `/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" ../PackageInfo /mpkg/Distribution \\\n && cd .. \\\n && rm -rf ./rootfs\nCOPY osx/mpkg/Resources /mpkg/Resources\nCOPY osx/mpkg/Plugins /mpkg/Plugins\nRUN sed -i -e \"s/%MIXPANEL_TOKEN%/$MIXPANEL_TOKEN/g\" -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Info.plist\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Plugins/*.bundle/Contents/Resources/*.html\nRUN sed -i -e \"s/%INSTALLER_VERSION%/$INSTALLER_VERSION/g\" mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf\nRUN sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" /mpkg/Distribution \\\n && sed -i -e \"s/%VBOX_VERSION%/$VBOX_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERMACHINE_VERSION%/$DOCKER_MACHINE_VERSION/g\" -e \"s/%DOCKERCOMPOSE_VERSION%/$DOCKER_COMPOSE_VERSION/g\" -e \"s/%DOCKER_VERSION%/$DOCKER_VERSION/g\" -e \"s/%DOCKERQUICKSTARTTERMINALAPP_VERSION%/$INSTALLER_VERSION/g\" -e \"s/%KITEMATICAPP_VERSION%/$KITEMATIC_VERSION/g\" mpkg/Resources/en.lproj/Localizable.strings\n#   Repackage back. Yes, --compression=none is mandatory.\n#   or this won't install in OSX.\nRUN cd /mpkg \\\n && xar -c --compression=none -f /DockerToolbox.pkg .\n","originalDockerfileUglifiedHash":"e3d735ab135255f8937cb38303990757","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/79caa3e742a571e8716b741c5fad503b23276237.dockerfile"}