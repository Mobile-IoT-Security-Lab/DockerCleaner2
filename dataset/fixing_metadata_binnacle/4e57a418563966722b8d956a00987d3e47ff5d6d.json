{"seed":1727962920,"processedDockerfileHash":"3dd514f059ec2b97468a5553b5c1b7de","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake automake libgmp3-dev cpio libtool libyaml-dev realpath valgrind software-properties-common unzip libz-dev vim emacs zsh locales python python-dev python-pip python-pip python-wheel python-setuptools python3 python3-dev python3-pip python3-wheel python3-setuptools libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#   Install OpenMPI with cuda & verbs\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 install\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -u ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#   Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#   Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#   Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn jupyter matplotlib cython protobuf pandas h5py\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:/usr/local/lib\"\nENV CPATH=\"$CPATH:/usr/local/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include' >> ~/.zshrc\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py \\\n && $PIP install chainer==5.0.0b4 \\\n && $PIP install cupy-cuda92==5.0.0b4 \\\n && $PIP install chainermn==1.3.0 \\\n && $PIP install chainercv==0.10.0 \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake automake libgmp3-dev cpio libtool libyaml-dev realpath valgrind software-properties-common unzip libz-dev vim emacs zsh locales python python-dev python-pip python-pip python-wheel python-setuptools python3 python3-dev python3-pip python3-wheel python3-setuptools libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#  Install OpenMPI with cuda & verbs\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 install\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -u ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#  Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#  Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#  Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn jupyter matplotlib cython protobuf pandas h5py\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:/usr/local/lib\"\nENV CPATH=\"$CPATH:/usr/local/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include' >> ~/.zshrc\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py \\\n && $PIP install chainer==5.0.0b4 \\\n && $PIP install cupy-cuda92==5.0.0b4 \\\n && $PIP install chainermn==1.3.0 \\\n && $PIP install chainercv==0.10.0 \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml\n","injectedSmells":[],"originalDockerfileHash":"6be054c36e510e0acd58bbc566fe9f28","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends ffmpeg curl git build-essential gfortran nasm tmux sudo openssh-client libgoogle-glog-dev rsync wget cmake automake libgmp3-dev cpio libtool libyaml-dev realpath valgrind software-properties-common unzip libz-dev vim emacs zsh locales python python-dev python-pip python-pip python-wheel python-setuptools python3 python3-dev python3-pip python3-wheel python3-setuptools libibverbs-dev libibumad-dev libmlx4-1 infiniband-diags ibverbs-utils perftest -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\nARG GROUP_ID=51000\nRUN addgroup --gid ${GROUP_ID} fulltime\n#   Install OpenMPI with cuda & verbs\nRUN mkdir /root/lib \\\n && cd /root/lib \\\n && curl -L -O https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.1.tar.gz \\\n && tar zxvf openmpi-3.1.1.tar.gz \\\n && rm -rf openmpi-3.1.1.tar.gz \\\n && cd openmpi-3.1.1 \\\n && ./configure --with-cuda --with-verbs \\\n && make -j8 install\nARG USER_ID=1000\nARG USER_NAME=ubuntu\nRUN mkdir -p /home/${USER_NAME}\nRUN useradd -d /home/${USER_NAME} -g ${GROUP_ID} -u ${USER_ID} ${USER_NAME}\nRUN chown ${USER_NAME}:root /home/${USER_NAME}\nRUN chsh -s /usr/bin/zsh ${USER_NAME}\nUSER ${USER_NAME}\nWORKDIR /home/${USER_NAME}\nENV HOME=\"/home/${USER_NAME}\"\n#   Install oh-my-zsh\nRUN git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh \\\n && cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n#   Install pyenv\nRUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv \\\n && echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc \\\n && echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc \\\n && echo 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.zshrc\nENV PYENV_ROOT=\"$HOME/.pyenv\"\nENV PATH=\"$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\"\n#   Install miniconda3-4.3.0\nRUN pyenv install miniconda3-4.3.30 \\\n && pyenv global miniconda3-4.3.30 \\\n && pyenv rehash\nRUN CONDA=$( pyenv which conda ;) \\\n && PIP=$( pyenv which pip ;) \\\n && $PIP install -U pip \\\n && $PIP install PyHamcrest \\\n && $CONDA install -y numpy scipy scikit-learn jupyter matplotlib cython protobuf pandas h5py\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/lib\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:/usr/local/lib\"\nENV CPATH=\"$CPATH:/usr/local/include\"\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib' >> ~/.zshrc \\\n && echo 'export CPATH=$CPATH:/usr/local/include' >> ~/.zshrc\nRUN PIP=$( pyenv which pip ;) \\\n && $PIP install mpi4py \\\n && $PIP install chainer==5.0.0b4 \\\n && $PIP install cupy-cuda92==5.0.0b4 \\\n && $PIP install chainermn==1.3.0 \\\n && $PIP install chainercv==0.10.0 \\\n && $PIP install jupyterthemes \\\n && JT=$( pyenv which jt ;) \\\n && $JT -f dejavu -T -N \\\n && $PIP install xlrd \\\n && $PIP install imageio \\\n && $PIP install tqdm \\\n && $PIP install pyyaml\n","originalDockerfileUglifiedHash":"9b89a44e2d39b6e7e7ad5504c9be02ae","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4e57a418563966722b8d956a00987d3e47ff5d6d.dockerfile"}