{"seed":3219305167,"processedDockerfileHash":"fdf71ed5ea84d85f72f290d4cd391168","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM golang:latest\n#   Set the default timezone to EST.\nENV TZ=\"America/New_York\"\nRUN echo $TZ | tee /etc/timezone \\\n && dpkg-reconfigure --frontend noninteractive tzdata\n#   Install nginx and build tools.\nENV NGINX_VERSION=\"1.11.6-1~jessie\"\nRUN apt-key update \\\n && apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119 nginx-module-geoip nginx-module-image-filter nginx-module-perl nginx-module-njs gettext-base=0.21-4 gitweb=1:2.30.2-1+deb11u2 autoconf=2.69-14 build-essential=12.9 pkg-config=0.29.2-1 automake=1:1.16.3-2 libtool=2.4.6-15 libfcgi-dev=2.4.2-2 git-core gitweb=1:2.30.2-1+deb11u2 nginx=${NGINX_VERSION} --no-install-suggests -y\n#   Build and install fcgiwrap.\nRUN git clone https://github.com/gnosek/fcgiwrap.git \\\n && cd fcgiwrap/ \\\n && autoreconf -i \\\n && ./configure \\\n && make \\\n && make install \\\n && cp fcgiwrap /usr/bin\n#   Symlink gitweb.cgi.\nRUN mkdir -p /var/www/git \\\n && ln -s /usr/lib/cgi-bin/gitweb.cgi /var/www/git/gitweb.cgi \\\n && chmod ugo+x /var/www/git/gitweb.cgi\n#   Copy in gitweb and nginx configurations.\nCOPY ./infra/docker/depot/internal/files/nginx/git.conf /etc/nginx/conf.d/git.conf\nCOPY ./infra/docker/depot/internal/files/bin/spawn-fcgi /usr/bin/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/init.d/spawn-fcgi /etc/init.d/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/start.sh /start.sh\nCOPY ./infra/docker/depot/internal/files/git/gitconfig /etc/gitconfig\n#   Delete default nginx conf. and give correct permissions to the fcgi spawners &\n#   the entrypoint.\nRUN rm /etc/nginx/conf.d/default.conf \\\n && chmod +x /usr/bin/spawn-fcgi \\\n && chmod +x /etc/init.d/spawn-fcgi \\\n && chmod +x /start.sh\n#   Get git for pulling deps. Then compile and install libssh2.\n#   git2go ref 241aa34d83b210ceaab7029c46e05794f2ea9797\nENV LIBSSH2_VERSION=\"libssh2-1.7.0\"\nENV LIBGIT2_VERSION=\"0.24.1\"\nRUN apt-get install --no-install-recommends git=1:2.30.2-1+deb11u2 openssl=1.1.1n-0+deb11u4 apt-transport-https=2.2.4 ca-certificates=20210119 curl=7.74.0-1.3+deb11u7 g++=4:10.2.1-1 gcc=4:10.2.1-1 libc6-dev=2.31-13+deb11u5 make=4.3-4.1 pkg-config=0.29.2-1 libssl-dev=1.1.1n-0+deb11u4 cmake=3.18.4-2+deb11u1 -q -y \\\n && mkdir \"/build-artifacts\" \\\n && cd \"/build-artifacts\" \\\n && echo -e \"\\nDownloading native libs...\\n\" \\\n && curl -fsSL \"https://github.com/libssh2/libssh2/archive/$LIBSSH2_VERSION.tar.gz\" -o \"libssh2.tar.gz\" \\\n && curl -fsSL \"https://github.com/libgit2/libgit2/archive/v$LIBGIT2_VERSION.tar.gz\" -o \"libgit2.tar.gz\" \\\n && mkdir \"libssh2\" \\\n && mkdir \"libgit2\" \\\n && tar xvf \"libssh2.tar.gz\" -C \"libssh2\" \\\n && tar xvf \"libgit2.tar.gz\" -C \"libgit2\" \\\n && cd \"/build-artifacts/libssh2/libssh2-$LIBSSH2_VERSION\" \\\n && echo -e \"\\nBuilding libssh2...\\n\" \\\n && cmake -DBUILD_SHARED_LIBS=ON . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd \"/build-artifacts/libgit2/libgit2-$LIBGIT2_VERSION\" \\\n && echo -e \"\\nBuilding libgit2...\\n\" \\\n && cmake -DCURL=OFF . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd / \\\n && echo -e \"\\nCleaning up native lib build artifacts...\\n\" \\\n && rm -rf \"/build-artifacts\"\n#   Copy in source for the API binary.\nCOPY ./infra /go/src/github.com/gophr-pm/gophr/infra\nCOPY ./depot /go/src/github.com/gophr-pm/gophr/depot\nCOPY ./lib /go/src/github.com/gophr-pm/gophr/lib\n#   Build source and move things around.\nRUN cd /go/src/github.com/gophr-pm/gophr/depot \\\n && echo -e \"\\nFetching depot API dependencies...\\n\" \\\n && go get -d -v \\\n && echo -e \"\\nBuilding the depot API binary...\\n\" \\\n && go build -v -o gophr-depot-api-binary \\\n && chmod +x ./gophr-depot-api-binary \\\n && echo -e \"\\nMoving things around...\\n\" \\\n && mkdir /gophr \\\n && mv ./gophr-depot-api-binary /gophr/gophr-depot-api-binary \\\n && mv ../infra/scripts/wait-for-it.sh /gophr/wait-for-it.sh \\\n && cd /gophr \\\n && echo -e \"\\nCleaning up API build artifacts...\\n\" \\\n && rm -rf /go\n#   Purge leftover artifacts, binaries and packages.\nRUN apt-get purge -y ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake\n#   Set the environment variables.\nENV PORT=\"3000\"\nENV GOPHR_ENV=\"prod\"\nENV GOPHR_DB_ADDR=\"db-svc\"\nENV GOPHR_DEPOT_PATH=\"/repos\"\nEXPOSE 80/tcp\nVOLUME [\"/repos\"]\nWORKDIR /gophr\nENTRYPOINT /start.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM golang:latest\n#  Set the default timezone to EST.\nENV TZ=\"America/New_York\"\nRUN echo $TZ | tee /etc/timezone \\\n && dpkg-reconfigure --frontend noninteractive tzdata\n#  Install nginx and build tools.\nENV NGINX_VERSION=\"1.11.6-1~jessie\"\nRUN apt-key update \\\n && apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates nginx-module-geoip nginx-module-image-filter nginx-module-perl nginx-module-njs gettext-base gitweb autoconf build-essential pkg-config automake libtool libfcgi-dev git-core gitweb nginx=${NGINX_VERSION} --no-install-suggests -y\n#  Build and install fcgiwrap.\nRUN git clone https://github.com/gnosek/fcgiwrap.git \\\n && cd fcgiwrap/ \\\n && autoreconf -i \\\n && ./configure \\\n && make \\\n && make install \\\n && cp fcgiwrap /usr/bin\n#  Symlink gitweb.cgi.\nRUN mkdir -p /var/www/git \\\n && ln -s /usr/lib/cgi-bin/gitweb.cgi /var/www/git/gitweb.cgi \\\n && chmod ugo+x /var/www/git/gitweb.cgi\n#  Copy in gitweb and nginx configurations.\nCOPY ./infra/docker/depot/internal/files/nginx/git.conf /etc/nginx/conf.d/git.conf\nCOPY ./infra/docker/depot/internal/files/bin/spawn-fcgi /usr/bin/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/init.d/spawn-fcgi /etc/init.d/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/start.sh /start.sh\nCOPY ./infra/docker/depot/internal/files/git/gitconfig /etc/gitconfig\n#  Delete default nginx conf. and give correct permissions to the fcgi spawners &\n#  the entrypoint.\nRUN rm /etc/nginx/conf.d/default.conf \\\n && chmod +x /usr/bin/spawn-fcgi \\\n && chmod +x /etc/init.d/spawn-fcgi \\\n && chmod +x /start.sh\n#  Get git for pulling deps. Then compile and install libssh2.\n#  git2go ref 241aa34d83b210ceaab7029c46e05794f2ea9797\nENV LIBSSH2_VERSION=\"libssh2-1.7.0\"\nENV LIBGIT2_VERSION=\"0.24.1\"\nRUN apt-get install git openssl apt-transport-https ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake -q -y \\\n && mkdir \"/build-artifacts\" \\\n && cd \"/build-artifacts\" \\\n && echo -e \"\\nDownloading native libs...\\n\" \\\n && curl -fsSL \"https://github.com/libssh2/libssh2/archive/$LIBSSH2_VERSION.tar.gz\" -o \"libssh2.tar.gz\" \\\n && curl -fsSL \"https://github.com/libgit2/libgit2/archive/v$LIBGIT2_VERSION.tar.gz\" -o \"libgit2.tar.gz\" \\\n && mkdir \"libssh2\" \\\n && mkdir \"libgit2\" \\\n && tar xvf \"libssh2.tar.gz\" -C \"libssh2\" \\\n && tar xvf \"libgit2.tar.gz\" -C \"libgit2\" \\\n && cd \"/build-artifacts/libssh2/libssh2-$LIBSSH2_VERSION\" \\\n && echo -e \"\\nBuilding libssh2...\\n\" \\\n && cmake -DBUILD_SHARED_LIBS=ON . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd \"/build-artifacts/libgit2/libgit2-$LIBGIT2_VERSION\" \\\n && echo -e \"\\nBuilding libgit2...\\n\" \\\n && cmake -DCURL=OFF . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd / \\\n && echo -e \"\\nCleaning up native lib build artifacts...\\n\" \\\n && rm -rf \"/build-artifacts\"\n#  Copy in source for the API binary.\nCOPY ./infra /go/src/github.com/gophr-pm/gophr/infra\nCOPY ./depot /go/src/github.com/gophr-pm/gophr/depot\nCOPY ./lib /go/src/github.com/gophr-pm/gophr/lib\n#  Build source and move things around.\nRUN cd /go/src/github.com/gophr-pm/gophr/depot \\\n && echo -e \"\\nFetching depot API dependencies...\\n\" \\\n && go get -d -v \\\n && echo -e \"\\nBuilding the depot API binary...\\n\" \\\n && go build -v -o gophr-depot-api-binary \\\n && chmod +x ./gophr-depot-api-binary \\\n && echo -e \"\\nMoving things around...\\n\" \\\n && mkdir /gophr \\\n && mv ./gophr-depot-api-binary /gophr/gophr-depot-api-binary \\\n && mv ../infra/scripts/wait-for-it.sh /gophr/wait-for-it.sh \\\n && cd /gophr \\\n && echo -e \"\\nCleaning up API build artifacts...\\n\" \\\n && rm -rf /go\n#  Purge leftover artifacts, binaries and packages.\nRUN apt-get purge -y ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake\n#  Set the environment variables.\nENV PORT=\"3000\"\nENV GOPHR_ENV=\"prod\"\nENV GOPHR_DB_ADDR=\"db-svc\"\nENV GOPHR_DEPOT_PATH=\"/repos\"\nEXPOSE 80/tcp\nVOLUME [\"/repos\"]\nWORKDIR /gophr\nENTRYPOINT /start.sh\n","injectedSmells":[],"originalDockerfileHash":"5eedd38daa3079ddef7588acbfe2b2cf","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM golang:latest\n#   Set the default timezone to EST.\nENV TZ=\"America/New_York\"\nRUN echo $TZ | tee /etc/timezone \\\n && dpkg-reconfigure --frontend noninteractive tzdata\n#   Install nginx and build tools.\nENV NGINX_VERSION=\"1.11.6-1~jessie\"\nRUN apt-key update \\\n && apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \\\n && echo \"deb http://nginx.org/packages/mainline/debian/ jessie nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates nginx-module-geoip nginx-module-image-filter nginx-module-perl nginx-module-njs gettext-base gitweb autoconf build-essential pkg-config automake libtool libfcgi-dev git-core gitweb nginx=${NGINX_VERSION} --no-install-suggests -y\n#   Build and install fcgiwrap.\nRUN git clone https://github.com/gnosek/fcgiwrap.git \\\n && cd fcgiwrap/ \\\n && autoreconf -i \\\n && ./configure \\\n && make \\\n && make install \\\n && cp fcgiwrap /usr/bin\n#   Symlink gitweb.cgi.\nRUN mkdir -p /var/www/git \\\n && ln -s /usr/lib/cgi-bin/gitweb.cgi /var/www/git/gitweb.cgi \\\n && chmod ugo+x /var/www/git/gitweb.cgi\n#   Copy in gitweb and nginx configurations.\nCOPY ./infra/docker/depot/internal/files/nginx/git.conf /etc/nginx/conf.d/git.conf\nCOPY ./infra/docker/depot/internal/files/bin/spawn-fcgi /usr/bin/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/init.d/spawn-fcgi /etc/init.d/spawn-fcgi\nCOPY ./infra/docker/depot/internal/files/start.sh /start.sh\nCOPY ./infra/docker/depot/internal/files/git/gitconfig /etc/gitconfig\n#   Delete default nginx conf. and give correct permissions to the fcgi spawners &\n#   the entrypoint.\nRUN rm /etc/nginx/conf.d/default.conf \\\n && chmod +x /usr/bin/spawn-fcgi \\\n && chmod +x /etc/init.d/spawn-fcgi \\\n && chmod +x /start.sh\n#   Get git for pulling deps. Then compile and install libssh2.\n#   git2go ref 241aa34d83b210ceaab7029c46e05794f2ea9797\nENV LIBSSH2_VERSION=\"libssh2-1.7.0\"\nENV LIBGIT2_VERSION=\"0.24.1\"\nRUN apt-get install git openssl apt-transport-https ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake -q -y \\\n && mkdir \"/build-artifacts\" \\\n && cd \"/build-artifacts\" \\\n && echo -e \"\\nDownloading native libs...\\n\" \\\n && curl -fsSL \"https://github.com/libssh2/libssh2/archive/$LIBSSH2_VERSION.tar.gz\" -o \"libssh2.tar.gz\" \\\n && curl -fsSL \"https://github.com/libgit2/libgit2/archive/v$LIBGIT2_VERSION.tar.gz\" -o \"libgit2.tar.gz\" \\\n && mkdir \"libssh2\" \\\n && mkdir \"libgit2\" \\\n && tar xvf \"libssh2.tar.gz\" -C \"libssh2\" \\\n && tar xvf \"libgit2.tar.gz\" -C \"libgit2\" \\\n && cd \"/build-artifacts/libssh2/libssh2-$LIBSSH2_VERSION\" \\\n && echo -e \"\\nBuilding libssh2...\\n\" \\\n && cmake -DBUILD_SHARED_LIBS=ON . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd \"/build-artifacts/libgit2/libgit2-$LIBGIT2_VERSION\" \\\n && echo -e \"\\nBuilding libgit2...\\n\" \\\n && cmake -DCURL=OFF . \\\n && cmake --build . \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd / \\\n && echo -e \"\\nCleaning up native lib build artifacts...\\n\" \\\n && rm -rf \"/build-artifacts\"\n#   Copy in source for the API binary.\nCOPY ./infra /go/src/github.com/gophr-pm/gophr/infra\nCOPY ./depot /go/src/github.com/gophr-pm/gophr/depot\nCOPY ./lib /go/src/github.com/gophr-pm/gophr/lib\n#   Build source and move things around.\nRUN cd /go/src/github.com/gophr-pm/gophr/depot \\\n && echo -e \"\\nFetching depot API dependencies...\\n\" \\\n && go get -d -v \\\n && echo -e \"\\nBuilding the depot API binary...\\n\" \\\n && go build -v -o gophr-depot-api-binary \\\n && chmod +x ./gophr-depot-api-binary \\\n && echo -e \"\\nMoving things around...\\n\" \\\n && mkdir /gophr \\\n && mv ./gophr-depot-api-binary /gophr/gophr-depot-api-binary \\\n && mv ../infra/scripts/wait-for-it.sh /gophr/wait-for-it.sh \\\n && cd /gophr \\\n && echo -e \"\\nCleaning up API build artifacts...\\n\" \\\n && rm -rf /go\n#   Purge leftover artifacts, binaries and packages.\nRUN apt-get purge -y ca-certificates curl g++ gcc libc6-dev make pkg-config libssl-dev cmake\n#   Set the environment variables.\nENV PORT=\"3000\"\nENV GOPHR_ENV=\"prod\"\nENV GOPHR_DB_ADDR=\"db-svc\"\nENV GOPHR_DEPOT_PATH=\"/repos\"\nEXPOSE 80/tcp\nVOLUME [\"/repos\"]\nWORKDIR /gophr\nENTRYPOINT /start.sh\n","originalDockerfileUglifiedHash":"747c2fd81acf3f8e6f847ba707fb6ffa","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f1fb135efc4389592cf54c64ca1fb301cc87c6cf.dockerfile"}