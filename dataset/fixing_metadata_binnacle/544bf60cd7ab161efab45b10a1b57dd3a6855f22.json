{"seed":932634831,"processedDockerfileHash":"fc6f1c6bf51ef36386f6768446077922","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:15.10\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl g++ git libfreetype6-dev libpng12-dev libzmq3-dev libcurl3-dev openjdk-8-jdk pkg-config python-dev python-numpy python-pip software-properties-common swig unzip zip zlib1g-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-ca-certificates -f\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Syntaxnet dependencies\nRUN pip install protobuf==3.0.0b2 -U\nRUN pip install asciitree==0.3.3 mock==5.0.2\n#   Download and build Syntaxnet\nRUN git clone --recursive https://github.com/tensorflow/models.git /root/models\nRUN cd /root/models/syntaxnet/tensorflow \\\n && tensorflow/tools/ci_build/builds/configured CPU\nRUN cd /root/models/syntaxnet \\\n && bazel build -c opt @org_tensorflow//tensorflow:tensorflow_py\nRUN cd /root/models/syntaxnet \\\n && bazel build syntaxnet/...\n#  #####################################\n#   Setting up locales for Russian\nRUN echo u_RU.UTF-8 UTF-8 > /etc/locale.gen \\\n && locale-gen \"ru_RU.UTF-8\" \\\n && echo 'LANG=\"ru_RU.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LC_ALL=ru_RU.UTF-8 LANG=ru_RU.UTF-8\nENV LANG=\"ru_RU.UTF-8\"\n#   Downloading and unpacking model for Russian\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /root/models/syntaxnet/syntaxnet/models http://download.tensorflow.org/models/parsey_universal/Russian-SynTagRus.zip\nRUN unzip /root/models/syntaxnet/syntaxnet/models/Russian-SynTagRus.zip -d /root/models/syntaxnet/syntaxnet/models/\n#   Misk\nCOPY demo_rus.sh /root/models/syntaxnet/syntaxnet/\nCOPY server /usr/bin/\n#   Standalone server\nCOPY api /root/models/syntaxnet/bazel-bin/syntaxnet/parser_eval.runfiles/__main__/syntaxnet/api/\n#  #####################################\nWORKDIR /root/models/syntaxnet/\nCMD /root/models/syntaxnet/syntaxnet/demo_rus.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:15.10\nRUN apt-get update \\\n && apt-get install build-essential curl g++ git libfreetype6-dev libpng12-dev libzmq3-dev libcurl3-dev openjdk-8-jdk pkg-config python-dev python-numpy python-pip software-properties-common swig unzip zip zlib1g-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-ca-certificates -f\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Syntaxnet dependencies\nRUN pip install protobuf==3.0.0b2 -U\nRUN pip install asciitree mock\n#  Download and build Syntaxnet\nRUN git clone --recursive https://github.com/tensorflow/models.git /root/models\nRUN cd /root/models/syntaxnet/tensorflow \\\n && tensorflow/tools/ci_build/builds/configured CPU\nRUN cd /root/models/syntaxnet \\\n && bazel build -c opt @org_tensorflow//tensorflow:tensorflow_py\nRUN cd /root/models/syntaxnet \\\n && bazel build syntaxnet/...\n# #####################################\n#  Setting up locales for Russian\nRUN echo u_RU.UTF-8 UTF-8 > /etc/locale.gen \\\n && locale-gen \"ru_RU.UTF-8\" \\\n && echo 'LANG=\"ru_RU.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LC_ALL=ru_RU.UTF-8 LANG=ru_RU.UTF-8\nENV LANG=\"ru_RU.UTF-8\"\n#  Downloading and unpacking model for Russian\nADD http://download.tensorflow.org/models/parsey_universal/Russian-SynTagRus.zip /root/models/syntaxnet/syntaxnet/models\nRUN unzip /root/models/syntaxnet/syntaxnet/models/Russian-SynTagRus.zip -d /root/models/syntaxnet/syntaxnet/models/\n#  Misk\nCOPY demo_rus.sh /root/models/syntaxnet/syntaxnet/\nCOPY server /usr/bin/\n#  Standalone server\nCOPY api /root/models/syntaxnet/bazel-bin/syntaxnet/parser_eval.runfiles/__main__/syntaxnet/api/\n# #####################################\nWORKDIR /root/models/syntaxnet/\nCMD /root/models/syntaxnet/syntaxnet/demo_rus.sh\n","injectedSmells":[],"originalDockerfileHash":"29989828f20007c42a50cb653796e0cf","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:15.10\nRUN apt-get update \\\n && apt-get install build-essential curl g++ git libfreetype6-dev libpng12-dev libzmq3-dev libcurl3-dev openjdk-8-jdk pkg-config python-dev python-numpy python-pip software-properties-common swig unzip zip zlib1g-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN update-ca-certificates -f\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Syntaxnet dependencies\nRUN pip install protobuf==3.0.0b2 -U\nRUN pip install asciitree mock\n#   Download and build Syntaxnet\nRUN git clone --recursive https://github.com/tensorflow/models.git /root/models\nRUN cd /root/models/syntaxnet/tensorflow \\\n && tensorflow/tools/ci_build/builds/configured CPU\nRUN cd /root/models/syntaxnet \\\n && bazel build -c opt @org_tensorflow//tensorflow:tensorflow_py\nRUN cd /root/models/syntaxnet \\\n && bazel build syntaxnet/...\n#  #####################################\n#   Setting up locales for Russian\nRUN echo u_RU.UTF-8 UTF-8 > /etc/locale.gen \\\n && locale-gen \"ru_RU.UTF-8\" \\\n && echo 'LANG=\"ru_RU.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LC_ALL=ru_RU.UTF-8 LANG=ru_RU.UTF-8\nENV LANG=\"ru_RU.UTF-8\"\n#   Downloading and unpacking model for Russian\nADD http://download.tensorflow.org/models/parsey_universal/Russian-SynTagRus.zip /root/models/syntaxnet/syntaxnet/models\nRUN unzip /root/models/syntaxnet/syntaxnet/models/Russian-SynTagRus.zip -d /root/models/syntaxnet/syntaxnet/models/\n#   Misk\nCOPY demo_rus.sh /root/models/syntaxnet/syntaxnet/\nCOPY server /usr/bin/\n#   Standalone server\nCOPY api /root/models/syntaxnet/bazel-bin/syntaxnet/parser_eval.runfiles/__main__/syntaxnet/api/\n#  #####################################\nWORKDIR /root/models/syntaxnet/\nCMD /root/models/syntaxnet/syntaxnet/demo_rus.sh\n","originalDockerfileUglifiedHash":"337edadae7e3c7a0d3047d862a55d42b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/544bf60cd7ab161efab45b10a1b57dd3a6855f22.dockerfile"}