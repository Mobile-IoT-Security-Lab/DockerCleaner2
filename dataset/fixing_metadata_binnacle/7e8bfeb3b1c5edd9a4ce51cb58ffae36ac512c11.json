{"seed":3915196977,"processedDockerfileHash":"540082d283c0913557ecb802e9492de6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#   Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n#   Full license terms provided in LICENSE.md file.\n#   Build with:\n#   nvidia-docker build -t nvidia-dope:kinetic-v1 -f Dockerfile.kinetic ..\nENV HOME=\"/root\"\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#   cuDNN version must match the one used by TensorRT.\n#   TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools==67.6.1 wheel==0.40.0 \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls==0.4.2 \\\n && pip install jinja2==3.1.2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-testing/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-testing.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-rviz ros-kinetic-tf2 ros-kinetic-cv-bridge -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#   Install OpenCV with CUDA support.\n#   REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone http://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#   Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/catkin_ws\"\nCOPY docker/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#   Some QT-Apps don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\nCOPY requirements.txt ${HOME}\nRUN pip install --no-cache-dir -r requirements.txt\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#  Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n#  Full license terms provided in LICENSE.md file.\n#  Build with:\n#  nvidia-docker build -t nvidia-dope:kinetic-v1 -f Dockerfile.kinetic ..\nENV HOME=\"/root\"\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#  cuDNN version must match the one used by TensorRT.\n#  TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools wheel \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls \\\n && pip install jinja2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#  ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-testing/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-testing.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-rviz ros-kinetic-tf2 ros-kinetic-cv-bridge -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#  Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#  Install OpenCV with CUDA support.\n#  REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone http://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#  Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/catkin_ws\"\nCOPY docker/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#  Some QT-Apps don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\nCOPY requirements.txt ${HOME}\nRUN pip install --no-cache-dir -r requirements.txt\n","injectedSmells":[],"originalDockerfileHash":"bac3897d7f7d51cbdb8c997ee95d2a31","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cudagl:9.0-devel-ubuntu16.04\n#   Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n#   Full license terms provided in LICENSE.md file.\n#   Build with:\n#   nvidia-docker build -t nvidia-dope:kinetic-v1 -f Dockerfile.kinetic ..\nENV HOME=\"/root\"\nWORKDIR ${HOME}\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y\n#   cuDNN version must match the one used by TensorRT.\n#   TRT 4.0 is compiled with cuDNN 7.1.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant bzip2 ca-certificates ccache cmake curl genromfs git gosu iproute iputils-ping less lcov libcudnn7=7.1.4.18-1+cuda9.0 libcudnn7-dev=7.1.4.18-1+cuda9.0 libeigen3-dev libopencv-dev make nano net-tools ninja-build openjdk-8-jdk patch pkg-config protobuf-compiler python-argparse python-dev python-empy python-numpy python-pip python-serial python-software-properties rsync s3cmd software-properties-common sudo unzip xsltproc wget zip -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && pip install setuptools wheel \\\n && pip install 'matplotlib==2.2.2' --force-reinstall \\\n && pip install cpp-coveralls \\\n && pip install jinja2 \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   ROS Kinetic\nWORKDIR ${HOME}\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \\\n && sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list' \\\n && sh -c 'echo \"deb http://packages.ros.org/ros-testing/ubuntu/ xenial main\" > /etc/apt/sources.list.d/ros-testing.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-gazebo-ros-pkgs ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-ros-base ros-kinetic-rviz ros-kinetic-tf2 ros-kinetic-cv-bridge -y \\\n && apt-get -y autoremove \\\n && apt-get clean autoclean \\\n && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/*\n#   Initialize ROS\nRUN geographiclib-get-geoids egm96-5 \\\n && rosdep init \\\n && rosdep update\nRUN echo 'source /opt/ros/kinetic/setup.bash' >> ${HOME}/.bashrc\n#   Install OpenCV with CUDA support.\n#   REVIEW alexeyk: JetPack 3.2 comes with OpenCV 3.3.1 _without_ CUDA support.\nWORKDIR ${HOME}\nRUN git clone http://github.com/opencv/opencv.git \\\n && cd opencv \\\n && git checkout 3.3.1 \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D WITH_OPENCL=OFF -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j `nproc ` \\\n && make install \\\n && cd ${HOME} \\\n && rm -rf ./opencv/\n#   Setup catkin workspace\nENV CATKIN_WS=\"${HOME}/catkin_ws\"\nCOPY docker/init_workspace.sh ${HOME}\nRUN ${HOME}/init_workspace.sh\nENV CCACHE_CPP2=\"1\"\nENV CCACHE_MAXSIZE=\"1G\"\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#   Some QT-Apps don't not show controls without this\nENV QT_X11_NO_MITSHM=\"1\"\nCOPY requirements.txt ${HOME}\nRUN pip install --no-cache-dir -r requirements.txt\n","originalDockerfileUglifiedHash":"5bae39ad805f0358f6819399312f50a3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7e8bfeb3b1c5edd9a4ce51cb58ffae36ac512c11.dockerfile"}