{"seed":2977518305,"processedDockerfileHash":"d7486783caf3dd6227460db527dc3544","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#   Install system packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3=3.5.1-3 python3-dev=3.5.1-3 python-pil=3.1.2-0ubuntu1.6 python-lxml=3.5.0-1ubuntu0.4 python-tk=2.7.12-1~16.04 build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 git=1:2.7.4-0ubuntu1.10 libgtk2.0-dev=2.24.30-1ubuntu1.16.04.2 pkg-config=0.29.1-0ubuntu1 libavcodec-dev=7:2.8.17-0ubuntu0.1 libavformat-dev=7:2.8.17-0ubuntu0.1 libswscale-dev=7:2.8.17-0ubuntu0.1 libtbb2=4.4~20151115-0ubuntu3 libtbb-dev=4.4~20151115-0ubuntu3 libjpeg-dev=8c-2ubuntu8 libpng-dev libtiff-dev libjasper-dev=1.900.1-debian1-2.4ubuntu1.3 libdc1394-22-dev=2.2.4-1 x11-apps=7.7+5+nmu1ubuntu1 wget=1.17.1-1ubuntu1.5 vim=2:7.4.1689-3ubuntu1.5 ffmpeg=7:2.8.17-0ubuntu0.1 unzip=6.0-20ubuntu1.1 libusb-1.0-0-dev=2:1.0.20-1 python3-setuptools=20.7.0-1 python3-numpy=1:1.11.0-1ubuntu1 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libgoogle-glog-dev=0.3.4-0.1 swig=3.0.8-0ubuntu3 libunwind-dev=1.1-4.1 libc++-dev=3.7.0-1ubuntu0.1 libc++abi-dev=3.7.0-1ubuntu0.1 build-essential=12.1ubuntu2 -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install core packages \nRUN wget -q -O /tmp/get-pip.py --no-check-certificate https://bootstrap.pypa.io/get-pip.py \\\n && python3 /tmp/get-pip.py\nRUN pip install pip==23.1 numpy==1.24.2 pillow==9.5.0 matplotlib==3.7.1 notebook==6.5.4 Flask==2.2.3 imutils==0.5.4 paho-mqtt==1.6.1 PyYAML==6.0 -U\n#   Install tensorflow models object detection\nRUN GIT_SSL_NO_VERIFY=true git clone -q https://github.com/tensorflow/models /usr/local/lib/python3.5/dist-packages/tensorflow/models\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.tar.gz\n#   Download & build protobuf-python\nRUN cd /usr/local/src/ \\\n && tar xf protobuf-python-3.5.1.tar.gz \\\n && rm protobuf-python-3.5.1.tar.gz \\\n && cd /usr/local/src/protobuf-3.5.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && rm -rf /usr/local/src/protobuf-3.5.1/\n#   Download & build OpenCV\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN cd /usr/local/src/ \\\n && unzip 4.0.1.zip \\\n && rm 4.0.1.zip \\\n && cd /usr/local/src/opencv-4.0.1/ \\\n && mkdir build \\\n && cd /usr/local/src/opencv-4.0.1/build \\\n && cmake -D CMAKE_INSTALL_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/ .. \\\n && make -j4 \\\n && make install \\\n && rm -rf /usr/local/src/opencv-4.0.1\n#   Download and install EdgeTPU libraries\nRUN wget -q -O edgetpu_api.tar.gz --no-check-certificate http://storage.googleapis.com/cloud-iot-edge-pretrained-models/edgetpu_api.tar.gz\nRUN tar xzf edgetpu_api.tar.gz \\\n && cd python-tflite-source \\\n && cp -p libedgetpu/libedgetpu_x86_64.so /lib/x86_64-linux-gnu/libedgetpu.so \\\n && cp edgetpu/swig/compiled_so/_edgetpu_cpp_wrapper_x86_64.so edgetpu/swig/_edgetpu_cpp_wrapper.so \\\n && cp edgetpu/swig/compiled_so/edgetpu_cpp_wrapper.py edgetpu/swig/ \\\n && python3 setup.py develop --user\n#   Minimize image size \nRUN (apt-get autoremove -y ;apt-get autoclean -y )\n#   symlink the model and labels\nRUN ln -s /python-tflite-source/edgetpu/test_data/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite /frozen_inference_graph.pb\nRUN ln -s /python-tflite-source/edgetpu/test_data/coco_labels.txt /label_map.pbtext\n#   Set TF object detection available\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research/slim\\\"\"\nRUN cd /usr/local/lib/python3.5/dist-packages/tensorflow/models/research \\\n && protoc object_detection/protos/*.proto --python_out=.\nWORKDIR /opt/frigate/\nCOPY frigate frigate/\nCOPY detect_objects.py .\nCMD [\"python3\", \"-u\", \"detect_objects.py\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  Install system packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3 python3-dev python-pil python-lxml python-tk build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev x11-apps wget vim ffmpeg unzip libusb-1.0-0-dev python3-setuptools python3-numpy zlib1g-dev libgoogle-glog-dev swig libunwind-dev libc++-dev libc++abi-dev build-essential -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install core packages \nRUN wget -q -O /tmp/get-pip.py --no-check-certificate https://bootstrap.pypa.io/get-pip.py \\\n && python3 /tmp/get-pip.py\nRUN pip install pip numpy pillow matplotlib notebook Flask imutils paho-mqtt PyYAML -U\n#  Install tensorflow models object detection\nRUN GIT_SSL_NO_VERIFY=true git clone -q https://github.com/tensorflow/models /usr/local/lib/python3.5/dist-packages/tensorflow/models\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.tar.gz\n#  Download & build protobuf-python\nRUN cd /usr/local/src/ \\\n && tar xf protobuf-python-3.5.1.tar.gz \\\n && rm protobuf-python-3.5.1.tar.gz \\\n && cd /usr/local/src/protobuf-3.5.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && rm -rf /usr/local/src/protobuf-3.5.1/\n#  Download & build OpenCV\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN cd /usr/local/src/ \\\n && unzip 4.0.1.zip \\\n && rm 4.0.1.zip \\\n && cd /usr/local/src/opencv-4.0.1/ \\\n && mkdir build \\\n && cd /usr/local/src/opencv-4.0.1/build \\\n && cmake -D CMAKE_INSTALL_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/ .. \\\n && make -j4 \\\n && make install \\\n && rm -rf /usr/local/src/opencv-4.0.1\n#  Download and install EdgeTPU libraries\nRUN wget -q -O edgetpu_api.tar.gz --no-check-certificate http://storage.googleapis.com/cloud-iot-edge-pretrained-models/edgetpu_api.tar.gz\nRUN tar xzf edgetpu_api.tar.gz \\\n && cd python-tflite-source \\\n && cp -p libedgetpu/libedgetpu_x86_64.so /lib/x86_64-linux-gnu/libedgetpu.so \\\n && cp edgetpu/swig/compiled_so/_edgetpu_cpp_wrapper_x86_64.so edgetpu/swig/_edgetpu_cpp_wrapper.so \\\n && cp edgetpu/swig/compiled_so/edgetpu_cpp_wrapper.py edgetpu/swig/ \\\n && python3 setup.py develop --user\n#  Minimize image size \nRUN (apt-get autoremove -y ;apt-get autoclean -y )\n#  symlink the model and labels\nRUN ln -s /python-tflite-source/edgetpu/test_data/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite /frozen_inference_graph.pb\nRUN ln -s /python-tflite-source/edgetpu/test_data/coco_labels.txt /label_map.pbtext\n#  Set TF object detection available\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research/slim\\\"\"\nRUN cd /usr/local/lib/python3.5/dist-packages/tensorflow/models/research \\\n && protoc object_detection/protos/*.proto --python_out=.\nWORKDIR /opt/frigate/\nADD frigate frigate/\nCOPY detect_objects.py .\nCMD [\"python3\", \"-u\", \"detect_objects.py\"]\n","injectedSmells":[],"originalDockerfileHash":"e39d465f2159c1cf8b8ea610b17952e1","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   Install system packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3 python3-dev python-pil python-lxml python-tk build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev x11-apps wget vim ffmpeg unzip libusb-1.0-0-dev python3-setuptools python3-numpy zlib1g-dev libgoogle-glog-dev swig libunwind-dev libc++-dev libc++abi-dev build-essential -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install core packages \nRUN wget -q -O /tmp/get-pip.py --no-check-certificate https://bootstrap.pypa.io/get-pip.py \\\n && python3 /tmp/get-pip.py\nRUN pip install pip numpy pillow matplotlib notebook Flask imutils paho-mqtt PyYAML -U\n#   Install tensorflow models object detection\nRUN GIT_SSL_NO_VERIFY=true git clone -q https://github.com/tensorflow/models /usr/local/lib/python3.5/dist-packages/tensorflow/models\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.tar.gz\n#   Download & build protobuf-python\nRUN cd /usr/local/src/ \\\n && tar xf protobuf-python-3.5.1.tar.gz \\\n && rm protobuf-python-3.5.1.tar.gz \\\n && cd /usr/local/src/protobuf-3.5.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig \\\n && rm -rf /usr/local/src/protobuf-3.5.1/\n#   Download & build OpenCV\nRUN wget -q -P /usr/local/src/ --no-check-certificate https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN cd /usr/local/src/ \\\n && unzip 4.0.1.zip \\\n && rm 4.0.1.zip \\\n && cd /usr/local/src/opencv-4.0.1/ \\\n && mkdir build \\\n && cd /usr/local/src/opencv-4.0.1/build \\\n && cmake -D CMAKE_INSTALL_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/ .. \\\n && make -j4 \\\n && make install \\\n && rm -rf /usr/local/src/opencv-4.0.1\n#   Download and install EdgeTPU libraries\nRUN wget -q -O edgetpu_api.tar.gz --no-check-certificate http://storage.googleapis.com/cloud-iot-edge-pretrained-models/edgetpu_api.tar.gz\nRUN tar xzf edgetpu_api.tar.gz \\\n && cd python-tflite-source \\\n && cp -p libedgetpu/libedgetpu_x86_64.so /lib/x86_64-linux-gnu/libedgetpu.so \\\n && cp edgetpu/swig/compiled_so/_edgetpu_cpp_wrapper_x86_64.so edgetpu/swig/_edgetpu_cpp_wrapper.so \\\n && cp edgetpu/swig/compiled_so/edgetpu_cpp_wrapper.py edgetpu/swig/ \\\n && python3 setup.py develop --user\n#   Minimize image size \nRUN (apt-get autoremove -y ;apt-get autoclean -y )\n#   symlink the model and labels\nRUN ln -s /python-tflite-source/edgetpu/test_data/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite /frozen_inference_graph.pb\nRUN ln -s /python-tflite-source/edgetpu/test_data/coco_labels.txt /label_map.pbtext\n#   Set TF object detection available\nENV PYTHONPATH=\"\\\"$PYTHONPATH:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research:/usr/local/lib/python3.5/dist-packages/tensorflow/models/research/slim\\\"\"\nRUN cd /usr/local/lib/python3.5/dist-packages/tensorflow/models/research \\\n && protoc object_detection/protos/*.proto --python_out=.\nWORKDIR /opt/frigate/\nADD frigate frigate/\nCOPY detect_objects.py .\nCMD [\"python3\", \"-u\", \"detect_objects.py\"]\n","originalDockerfileUglifiedHash":"fab47c1b43723d6ee86348865d893834","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b2f6e7edf6dd4413a547f6bd6cae8b9124fc698a.dockerfile"}