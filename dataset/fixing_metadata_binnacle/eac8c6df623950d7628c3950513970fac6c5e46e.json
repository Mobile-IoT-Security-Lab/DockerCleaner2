{"seed":2257678997,"processedDockerfileHash":"bd3e65d84e121fa7181673d6882517af","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#   container for rsyslog development\n#   creates the build environment\n#   Note: this image currently uses in-container git checkouts to\n#   build the \"rsyslog libraries\" - we do not have packages for them\nFROM fedora:28\n#   search for packages that contain <file>: dnf whatprovides <file>\nRUN dnf -y update \\\n && dnf -y install autoconf autoconf-archive automake bison clang clang-analyzer compat-libstdc++-33 curl cyrus-sasl-devel cyrus-sasl-lib czmq-devel flex gcc gdb git gnutls-devel hiredis hiredis-devel hiredis-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel libcurl-devel libdbi-dbd-mysql libdbi-devel libfaketime libgcrypt-devel libmaxminddb libmaxminddb-devel libnet libnet-devel librabbitmq-devel libtool libuuid-devel lsof make mongo-c-driver mongo-c-driver-devel mysql-devel nc net-snmp-devel net-tools openssl-devel postgresql-devel python-devel python-docutils python-sphinx qpid-proton-c-devel redhat-rpm-config snappy-devel sudo systemd-devel tcl-devel valgrind wget zlib-devel\n#   end of this RUN\n#   unfortunately, tcl-devel does not properly setup required bits in the environment\n#   so we now try to do that. In case this does no longer work with a version, search\n#   for a file tclConfig.sh, which should be present in the library directory (usually\n#   beneath /usr). It contains the environment variables. Inside container do:\n#   $cat $(find /usr -name tclConfig.sh|head -n1)\nENV TCL_LIB_SPEC=\"-L/usr/lib64 -ltcl8.6\" \\\n    TCL_INCLUDE_SPEC=\"-I/usr/include\"\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && adduser -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nCOPY setup-system.sh setup-system.sh\nCOPY common/setup-projects.sh setup-projects.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    LIBDIR_PATH=\"/usr/lib64\"\n#   bump dependency version below to trigger a dependency rebuild\n#   but not a full one (via --no-cache)\nENV DEP_VERSION=\"1\"\n#   Helper projects and dependency build starts here\nRUN mkdir helper-projects\n#   code style checker - not yet packaged\nRUN cd helper-projects \\\n && git clone https://github.com/rsyslog/codestyle \\\n && cd codestyle \\\n && gcc --std=c99 stylecheck.c -o stylecheck \\\n && mv stylecheck /usr/bin/rsyslog_stylecheck \\\n && cd .. \\\n && rm -r codestyle \\\n && cd ..\n#   we need Guardtime libksi here, otherwise we cannot check the KSI component\t\nRUN cd helper-projects \\\n && git clone https://github.com/guardtime/libksi.git \\\n && cd libksi \\\n && autoreconf -fvi \\\n && ./configure --libdir=/usr/lib64 \\\n && make -j2 \\\n && make install \\\n && cd .. \\\n && rm -r libksi \\\n && cd ..\n#   we need the latest librdkafka as there as always required updates\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/librdkafka \\\n && cd librdkafka \\\n && (unset CFLAGS ;./configure --prefix=/usr --libdir=$LIBDIR_PATH --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\n#  ENV SCAN_BUILD=scan-build \\\n#      SCAN_BUILD_CC=clang-5.0\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imczmq  --enable-imdiag  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#   build errors at the moment: --enable-kmsg \n#  \t--enable-mmgrok - no package\n#   Install any needed packages\nRUN ./setup-projects.sh\nWORKDIR /rsyslog\nUSER rsyslog\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  container for rsyslog development\n#  creates the build environment\n#  Note: this image currently uses in-container git checkouts to\n#  build the \"rsyslog libraries\" - we do not have packages for them\nFROM fedora:28\n#  search for packages that contain <file>: dnf whatprovides <file>\nRUN dnf -y update \\\n && dnf -y install autoconf autoconf-archive automake bison clang clang-analyzer compat-libstdc++-33 curl cyrus-sasl-devel cyrus-sasl-lib czmq-devel flex gcc gdb git gnutls-devel hiredis hiredis-devel hiredis-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel libcurl-devel libdbi-dbd-mysql libdbi-devel libfaketime libgcrypt-devel libmaxminddb libmaxminddb-devel libnet libnet-devel librabbitmq-devel libtool libuuid-devel lsof make mongo-c-driver mongo-c-driver-devel mysql-devel nc net-snmp-devel net-tools openssl-devel postgresql-devel python-devel python-docutils python-sphinx qpid-proton-c-devel redhat-rpm-config snappy-devel sudo systemd-devel tcl-devel valgrind wget zlib-devel\n#  end of this RUN\n#  unfortunately, tcl-devel does not properly setup required bits in the environment\n#  so we now try to do that. In case this does no longer work with a version, search\n#  for a file tclConfig.sh, which should be present in the library directory (usually\n#  beneath /usr). It contains the environment variables. Inside container do:\n#  $cat $(find /usr -name tclConfig.sh|head -n1)\nENV TCL_LIB_SPEC=\"-L/usr/lib64 -ltcl8.6\" \\\n    TCL_INCLUDE_SPEC=\"-I/usr/include\"\n#  create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#  tell tests which are the newester versions, so they can be checked without the need\n#  to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && adduser -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nADD setup-system.sh setup-system.sh\nADD common/setup-projects.sh setup-projects.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    LIBDIR_PATH=\"/usr/lib64\"\n#  bump dependency version below to trigger a dependency rebuild\n#  but not a full one (via --no-cache)\nENV DEP_VERSION=\"1\"\n#  Helper projects and dependency build starts here\nRUN mkdir helper-projects\n#  code style checker - not yet packaged\nRUN cd helper-projects \\\n && git clone https://github.com/rsyslog/codestyle \\\n && cd codestyle \\\n && gcc --std=c99 stylecheck.c -o stylecheck \\\n && mv stylecheck /usr/bin/rsyslog_stylecheck \\\n && cd .. \\\n && rm -r codestyle \\\n && cd ..\n#  we need Guardtime libksi here, otherwise we cannot check the KSI component\t\nRUN cd helper-projects \\\n && git clone https://github.com/guardtime/libksi.git \\\n && cd libksi \\\n && autoreconf -fvi \\\n && ./configure --libdir=/usr/lib64 \\\n && make -j2 \\\n && make install \\\n && cd .. \\\n && rm -r libksi \\\n && cd ..\n#  we need the latest librdkafka as there as always required updates\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/librdkafka \\\n && cd librdkafka \\\n && (unset CFLAGS ;./configure --prefix=/usr --libdir=$LIBDIR_PATH --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#  next ENV is specifically for running scan-build - so we do not need to\n#  change scripts if at a later time we can move on to a newer version\n# ENV SCAN_BUILD=scan-build \\\n#     SCAN_BUILD_CC=clang-5.0\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imczmq  --enable-imdiag  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#  build errors at the moment: --enable-kmsg \n# \t--enable-mmgrok - no package\n#  Install any needed packages\nRUN ./setup-projects.sh\nWORKDIR /rsyslog\nUSER rsyslog\n","injectedSmells":[],"originalDockerfileHash":"58bf45332612e71e648be85186917295","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   container for rsyslog development\n#   creates the build environment\n#   Note: this image currently uses in-container git checkouts to\n#   build the \"rsyslog libraries\" - we do not have packages for them\nFROM fedora:28\n#   search for packages that contain <file>: dnf whatprovides <file>\nRUN dnf -y update \\\n && dnf -y install autoconf autoconf-archive automake bison clang clang-analyzer compat-libstdc++-33 curl cyrus-sasl-devel cyrus-sasl-lib czmq-devel flex gcc gdb git gnutls-devel hiredis hiredis-devel hiredis-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel libcurl-devel libdbi-dbd-mysql libdbi-devel libfaketime libgcrypt-devel libmaxminddb libmaxminddb-devel libnet libnet-devel librabbitmq-devel libtool libuuid-devel lsof make mongo-c-driver mongo-c-driver-devel mysql-devel nc net-snmp-devel net-tools openssl-devel postgresql-devel python-devel python-docutils python-sphinx qpid-proton-c-devel redhat-rpm-config snappy-devel sudo systemd-devel tcl-devel valgrind wget zlib-devel\n#   end of this RUN\n#   unfortunately, tcl-devel does not properly setup required bits in the environment\n#   so we now try to do that. In case this does no longer work with a version, search\n#   for a file tclConfig.sh, which should be present in the library directory (usually\n#   beneath /usr). It contains the environment variables. Inside container do:\n#   $cat $(find /usr -name tclConfig.sh|head -n1)\nENV TCL_LIB_SPEC=\"-L/usr/lib64 -ltcl8.6\" \\\n    TCL_INCLUDE_SPEC=\"-I/usr/include\"\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && adduser -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nADD setup-system.sh setup-system.sh\nADD common/setup-projects.sh setup-projects.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    LIBDIR_PATH=\"/usr/lib64\"\n#   bump dependency version below to trigger a dependency rebuild\n#   but not a full one (via --no-cache)\nENV DEP_VERSION=\"1\"\n#   Helper projects and dependency build starts here\nRUN mkdir helper-projects\n#   code style checker - not yet packaged\nRUN cd helper-projects \\\n && git clone https://github.com/rsyslog/codestyle \\\n && cd codestyle \\\n && gcc --std=c99 stylecheck.c -o stylecheck \\\n && mv stylecheck /usr/bin/rsyslog_stylecheck \\\n && cd .. \\\n && rm -r codestyle \\\n && cd ..\n#   we need Guardtime libksi here, otherwise we cannot check the KSI component\t\nRUN cd helper-projects \\\n && git clone https://github.com/guardtime/libksi.git \\\n && cd libksi \\\n && autoreconf -fvi \\\n && ./configure --libdir=/usr/lib64 \\\n && make -j2 \\\n && make install \\\n && cd .. \\\n && rm -r libksi \\\n && cd ..\n#   we need the latest librdkafka as there as always required updates\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/librdkafka \\\n && cd librdkafka \\\n && (unset CFLAGS ;./configure --prefix=/usr --libdir=$LIBDIR_PATH --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\n#  ENV SCAN_BUILD=scan-build \\\n#      SCAN_BUILD_CC=clang-5.0\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imczmq  --enable-imdiag  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-compile-warning=error  --enable-testbench\"\n#   build errors at the moment: --enable-kmsg \n#  \t--enable-mmgrok - no package\n#   Install any needed packages\nRUN ./setup-projects.sh\nWORKDIR /rsyslog\nUSER rsyslog\n","originalDockerfileUglifiedHash":"aa9ca8915774fabedb200eb71de61d1d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/eac8c6df623950d7628c3950513970fac6c5e46e.dockerfile"}