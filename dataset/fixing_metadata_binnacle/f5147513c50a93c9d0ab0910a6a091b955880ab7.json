{"seed":1837941823,"processedDockerfileHash":"29b20b8a58f72bba96d8fd826cfeb06a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-gem","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM docker:edge-dind\nRUN addgroup -g 2999 docker\n#   From https://hub.docker.com/r/frolvlad/alpine-glibc/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.25-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add wget=1.20.3-r0 ca-certificates=20191127-r2 --no-cache --virtual=.build-dependencies \\\n && apk add python py-pip --no-cache \\\n && pip install pip==23.1 --upgrade --no-cache-dir \\\n && pip install awscli==1.27.114 --no-cache-dir \\\n && apk --purge del py-pip \\\n && wget -q -O \"/etc/apk/keys/sgerrand.rsa.pub\" \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n#   The following is from docker/ruby, https://github.com/docker-library/ruby\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.1\"\nENV RUBY_DOWNLOAD_SHA256=\"886ac5eed41e3b5fc699be837b0087a6a5a3d10f464087560d2d21b3e71b754d\"\nENV RUBYGEMS_VERSION=\"2.7.6\"\nENV BUNDLER_VERSION=\"1.16.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\n#   hadolint ignore=DL3003,DL3019,DL4006,SC2086\nRUN set -ex \\\n && apk add bash=4.4.19-r1 autoconf=2.69-r2 bison=3.0.5-r0 bzip2=1.0.6-r7 bzip2-dev=1.0.6-r7 ca-certificates=20191127-r2 coreutils=8.30-r0 dpkg-dev=1.19.2-r0 dpkg=1.19.2-r0 gcc=8.3.0-r0 gdbm-dev=1.13-r1 glib-dev=2.58.1-r3 libc-dev=0.7.1-r0 libffi-dev=3.2.1-r6 openssl=1.1.1k-r0 openssl-dev=1.1.1k-r0 libxml2-dev=2.9.9-r3 libxslt-dev=1.1.33-r3 linux-headers=4.18.13-r1 make=4.2.1-r2 ncurses-dev=6.1_p20190105-r0 procps=3.3.15-r0 readline-dev=7.0.003-r1 ruby=2.5.8-r0 tar=1.32-r0 xz=5.2.4-r0 yaml-dev=0.2.1-r0 zlib-dev=1.2.11-r1 --no-cache --virtual .ruby-builddeps \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add bzip2=1.0.6-r7 ca-certificates=20191127-r2 libffi-dev=3.2.1-r6 openssl-dev=1.1.1k-r0 procps=3.3.15-r0 yaml-dev=0.2.1-r0 zlib-dev=1.2.11-r1 $runDeps --virtual .ruby-rundeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler --version 2.4.12 --force \\\n && rm -r /root/.gem/\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n#   End docker/ruby contents\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM docker:edge-dind\nRUN addgroup -g 2999 docker\n#  From https://hub.docker.com/r/frolvlad/alpine-glibc/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.25-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache python py-pip \\\n && pip install pip --upgrade --no-cache-dir \\\n && pip install awscli --no-cache-dir \\\n && apk --purge del py-pip \\\n && wget -q -O \"/etc/apk/keys/sgerrand.rsa.pub\" \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n#  The following is from docker/ruby, https://github.com/docker-library/ruby\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.1\"\nENV RUBY_DOWNLOAD_SHA256=\"886ac5eed41e3b5fc699be837b0087a6a5a3d10f464087560d2d21b3e71b754d\"\nENV RUBYGEMS_VERSION=\"2.7.6\"\nENV BUNDLER_VERSION=\"1.16.1\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\n#  readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\n#  hadolint ignore=DL3003,DL3019,DL4006,SC2086\nRUN set -ex \\\n && apk add --no-cache --virtual .ruby-builddeps bash autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev openssl openssl-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev procps readline-dev ruby tar xz yaml-dev zlib-dev \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev openssl-dev procps yaml-dev zlib-dev \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler --force \\\n && rm -r /root/.gem/\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n#  End docker/ruby contents\n","injectedSmells":[],"originalDockerfileHash":"18d46343df961d058b1cb91a6d8cc43f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM docker:edge-dind\nRUN addgroup -g 2999 docker\n#   From https://hub.docker.com/r/frolvlad/alpine-glibc/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.25-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache python py-pip \\\n && pip install pip --upgrade --no-cache-dir \\\n && pip install awscli --no-cache-dir \\\n && apk --purge del py-pip \\\n && wget -q -O \"/etc/apk/keys/sgerrand.rsa.pub\" \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" \\\n && wget -q \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n#   The following is from docker/ruby, https://github.com/docker-library/ruby\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.5\"\nENV RUBY_VERSION=\"2.5.1\"\nENV RUBY_DOWNLOAD_SHA256=\"886ac5eed41e3b5fc699be837b0087a6a5a3d10f464087560d2d21b3e71b754d\"\nENV RUBYGEMS_VERSION=\"2.7.6\"\nENV BUNDLER_VERSION=\"1.16.1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\n#   hadolint ignore=DL3003,DL3019,DL4006,SC2086\nRUN set -ex \\\n && apk add --no-cache --virtual .ruby-builddeps bash autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev openssl openssl-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev procps readline-dev ruby tar xz yaml-dev zlib-dev \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev openssl-dev procps yaml-dev zlib-dev \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\" \\\n && gem install bundler --force \\\n && rm -r /root/.gem/\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n#   End docker/ruby contents\n","originalDockerfileUglifiedHash":"e2b6f68295194ba38c50b2ab22f554aa","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f5147513c50a93c9d0ab0910a6a091b955880ab7.dockerfile"}