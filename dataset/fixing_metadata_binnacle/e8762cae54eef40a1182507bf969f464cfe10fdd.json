{"seed":2732412433,"processedDockerfileHash":"8115ef7ad92e8b508e5f8729d5cd065b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":[],"processedDockerfile":"#   Build environment has gcc and develop header files.\n#   The installed files are copied to the smaller runtime container.\nFROM python:3.6-stretch AS build-image\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\"\n#   Install (and compile) all dependencies\nRUN mkdir -p /app/src/requirements\nCOPY src/requirements/*.txt /app/src/requirements/\nARG PIP_REQUIREMENTS=/app/src/requirements/docker.txt\nRUN pip install -r $PIP_REQUIREMENTS\n#   Remove unneeded files\nRUN find /usr/local/lib/python3.6/site-packages/ -name '*.po' -delete \\\n && find /usr/local/lib/python3.6/site-packages/tinymce/ -regextype posix-egrep -not -regex '.*/langs/(en|nl).*\\.js' -wholename '*/langs/*.js' -delete\n#  # Node builder\nFROM node:11-stretch AS frontend-build\nRUN mkdir -p /app/src\nWORKDIR /app/src\nCOPY src/package.json src/package-lock.json /app/src/\nRUN npm install\nCOPY src/gulpfile.js /app/src/\nCOPY src/frontend/ /app/src/frontend/\nRUN npm run gulp\n#   Start runtime container\nFROM python:3.6-slim-stretch\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\" \\\n    UWSGI_PROCESSES=\"1\" \\\n    UWSGI_THREADS=\"10\" \\\n    UWSGI_OFFLOAD_THREADS=\"1\" \\\n    UWSGI_MODULE=\"djangofluent.wsgi.docker:application\" \\\n    DJANGO_SETTINGS_MODULE=\"djangofluent.settings.docker\"\n#   Install runtime dependencies (can become separate base image)\n#   Also include gettext for now, so locale is still compiled here.\n#   It avoids busting the previous cache layers on code changes.\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man5 /usr/share/man/man7 /usr/share/man/man8 \\\n && apt-get install --no-install-recommends libxml2 libpng16-16 libopenjp2-7 libfreetype6 libtiff5 curl gettext mime-support postgresql-client -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/debconf/*-old \\\n && echo \"font/woff2 woff2\" >> /etc/mime.types \\\n && useradd --system --user-group app\n#   System config (done early, avoid running on every code change)\nMAINTAINER vdboor@edoburu.nl\nEXPOSE 8080/tcp 1717/tcp\nHEALTHCHECK --interval=300s --timeout=3s CMD curl -f http://localhost:8080/api/health/ || exit 1\n#   Install dependencies\nCOPY --from=build-image /usr/local/bin/ /usr/local/bin/\nCOPY --from=build-image /usr/local/lib/python3.6/site-packages/ /usr/local/lib/python3.6/site-packages/\nCOPY --from=frontend-build /app/src/frontend/static /app/src/frontend/static\n#   Insert application code.\n#   - Prepare gzipped versions of static files for uWSGI to use\n#   - Create a default database inside the container (as demo),\n#     when caller doesn't define DATABASE_URL\n#   - Give full permissions, so Kubernetes can run the image as different user\nENV DATABASE_URL=\"sqlite:////tmp/demo.db\"\nCOPY web /app/web\nCOPY src /app/src\nCOPY deployment/docker/manage.py /usr/local/bin/\nWORKDIR /app/src\nRUN rm /app/src/*/settings/local.py* \\\n && find . -name '*.pyc' -delete \\\n && python -mcompileall -q */ \\\n && manage.py compilemessages \\\n && manage.py collectstatic --noinput --link \\\n && manage.py migrate \\\n && manage.py loaddata example_data.json \\\n && mkdir -p /app/web/media /app/web/static/CACHE \\\n && chown -R app:app /app/web/media/ /app/web/static/CACHE /tmp/demo.db \\\n && chmod -R go+rw /app/web/media/ /app/web/static/CACHE /tmp/demo.db\n#   Insert main code (still as root), then reduce permissions\n#   Allow to mount the compressor cache as volume too for sharing between pods.\nCOPY deployment/docker/uwsgi.ini /app/uwsgi.ini\nCMD [\"/usr/local/bin/uwsgi\", \"--ini\", \"/app/uwsgi.ini\"]\nVOLUME /app/web/media\nVOLUME /app/web/static/CACHE\n#   Tag the docker image\nARG GIT_VERSION\nLABEL git-version=\"$GIT_VERSION\"\nRUN echo $GIT_VERSION > .docker-git-version\n#   Reduce default permissions\nUSER app\n","originalDockerfile":"#  Build environment has gcc and develop header files.\n#  The installed files are copied to the smaller runtime container.\nFROM python:3.6-stretch AS build-image\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\"\n#  Install (and compile) all dependencies\nRUN mkdir -p /app/src/requirements\nCOPY src/requirements/*.txt /app/src/requirements/\nARG PIP_REQUIREMENTS=/app/src/requirements/docker.txt\nRUN pip install -r $PIP_REQUIREMENTS\n#  Remove unneeded files\nRUN find /usr/local/lib/python3.6/site-packages/ -name '*.po' -delete \\\n && find /usr/local/lib/python3.6/site-packages/tinymce/ -regextype posix-egrep -not -regex '.*/langs/(en|nl).*\\.js' -wholename '*/langs/*.js' -delete\n# # Node builder\nFROM node:11-stretch AS frontend-build\nRUN mkdir -p /app/src\nWORKDIR /app/src\nCOPY src/package.json src/package-lock.json /app/src/\nRUN npm install\nCOPY src/gulpfile.js /app/src/\nCOPY src/frontend/ /app/src/frontend/\nRUN npm run gulp\n#  Start runtime container\nFROM python:3.6-slim-stretch\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\" \\\n    UWSGI_PROCESSES=\"1\" \\\n    UWSGI_THREADS=\"10\" \\\n    UWSGI_OFFLOAD_THREADS=\"1\" \\\n    UWSGI_MODULE=\"djangofluent.wsgi.docker:application\" \\\n    DJANGO_SETTINGS_MODULE=\"djangofluent.settings.docker\"\n#  Install runtime dependencies (can become separate base image)\n#  Also include gettext for now, so locale is still compiled here.\n#  It avoids busting the previous cache layers on code changes.\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man5 /usr/share/man/man7 /usr/share/man/man8 \\\n && apt-get install --no-install-recommends libxml2 libpng16-16 libopenjp2-7 libfreetype6 libtiff5 curl gettext mime-support postgresql-client -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/debconf/*-old \\\n && echo \"font/woff2 woff2\" >> /etc/mime.types \\\n && useradd --system --user-group app\n#  System config (done early, avoid running on every code change)\nMAINTAINER vdboor@edoburu.nl\nEXPOSE 8080/tcp 1717/tcp\nHEALTHCHECK --interval=300s --timeout=3s CMD curl -f http://localhost:8080/api/health/ || exit 1\n#  Install dependencies\nCOPY --from=build-image /usr/local/bin/ /usr/local/bin/\nCOPY --from=build-image /usr/local/lib/python3.6/site-packages/ /usr/local/lib/python3.6/site-packages/\nCOPY --from=frontend-build /app/src/frontend/static /app/src/frontend/static\n#  Insert application code.\n#  - Prepare gzipped versions of static files for uWSGI to use\n#  - Create a default database inside the container (as demo),\n#    when caller doesn't define DATABASE_URL\n#  - Give full permissions, so Kubernetes can run the image as different user\nENV DATABASE_URL=\"sqlite:////tmp/demo.db\"\nCOPY web /app/web\nCOPY src /app/src\nCOPY deployment/docker/manage.py /usr/local/bin/\nWORKDIR /app/src\nRUN rm /app/src/*/settings/local.py* \\\n && find . -name '*.pyc' -delete \\\n && python -mcompileall -q */ \\\n && manage.py compilemessages \\\n && manage.py collectstatic --noinput --link \\\n && manage.py migrate \\\n && manage.py loaddata example_data.json \\\n && mkdir -p /app/web/media /app/web/static/CACHE \\\n && chown -R app:app /app/web/media/ /app/web/static/CACHE /tmp/demo.db \\\n && chmod -R go+rw /app/web/media/ /app/web/static/CACHE /tmp/demo.db\n#  Insert main code (still as root), then reduce permissions\n#  Allow to mount the compressor cache as volume too for sharing between pods.\nCOPY deployment/docker/uwsgi.ini /app/uwsgi.ini\nCMD [\"/usr/local/bin/uwsgi\", \"--ini\", \"/app/uwsgi.ini\"]\nVOLUME /app/web/media\nVOLUME /app/web/static/CACHE\n#  Tag the docker image\nARG GIT_VERSION\nLABEL git-version=\"$GIT_VERSION\"\nRUN echo $GIT_VERSION > .docker-git-version\n#  Reduce default permissions\nUSER app\n","injectedSmells":[],"originalDockerfileHash":"7e30430ff0b87a7e5247af5fa2dd4e11","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Build environment has gcc and develop header files.\n#   The installed files are copied to the smaller runtime container.\nFROM python:3.6-stretch AS build-image\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\"\n#   Install (and compile) all dependencies\nRUN mkdir -p /app/src/requirements\nCOPY src/requirements/*.txt /app/src/requirements/\nARG PIP_REQUIREMENTS=/app/src/requirements/docker.txt\nRUN pip install -r $PIP_REQUIREMENTS\n#   Remove unneeded files\nRUN find /usr/local/lib/python3.6/site-packages/ -name '*.po' -delete \\\n && find /usr/local/lib/python3.6/site-packages/tinymce/ -regextype posix-egrep -not -regex '.*/langs/(en|nl).*\\.js' -wholename '*/langs/*.js' -delete\n#  # Node builder\nFROM node:11-stretch AS frontend-build\nRUN mkdir -p /app/src\nWORKDIR /app/src\nCOPY src/package.json src/package-lock.json /app/src/\nRUN npm install\nCOPY src/gulpfile.js /app/src/\nCOPY src/frontend/ /app/src/frontend/\nRUN npm run gulp\n#   Start runtime container\nFROM python:3.6-slim-stretch\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_NO_CACHE_DIR=\"off\" \\\n    UWSGI_PROCESSES=\"1\" \\\n    UWSGI_THREADS=\"10\" \\\n    UWSGI_OFFLOAD_THREADS=\"1\" \\\n    UWSGI_MODULE=\"djangofluent.wsgi.docker:application\" \\\n    DJANGO_SETTINGS_MODULE=\"djangofluent.settings.docker\"\n#   Install runtime dependencies (can become separate base image)\n#   Also include gettext for now, so locale is still compiled here.\n#   It avoids busting the previous cache layers on code changes.\nRUN apt-get update \\\n && mkdir -p /usr/share/man/man1 /usr/share/man/man5 /usr/share/man/man7 /usr/share/man/man8 \\\n && apt-get install --no-install-recommends libxml2 libpng16-16 libopenjp2-7 libfreetype6 libtiff5 curl gettext mime-support postgresql-client -y \\\n && rm -rf /var/lib/apt/lists/* /var/cache/debconf/*-old \\\n && echo \"font/woff2 woff2\" >> /etc/mime.types \\\n && useradd --system --user-group app\n#   System config (done early, avoid running on every code change)\nMAINTAINER vdboor@edoburu.nl\nEXPOSE 8080/tcp 1717/tcp\nHEALTHCHECK --interval=300s --timeout=3s CMD curl -f http://localhost:8080/api/health/ || exit 1\n#   Install dependencies\nCOPY --from=build-image /usr/local/bin/ /usr/local/bin/\nCOPY --from=build-image /usr/local/lib/python3.6/site-packages/ /usr/local/lib/python3.6/site-packages/\nCOPY --from=frontend-build /app/src/frontend/static /app/src/frontend/static\n#   Insert application code.\n#   - Prepare gzipped versions of static files for uWSGI to use\n#   - Create a default database inside the container (as demo),\n#     when caller doesn't define DATABASE_URL\n#   - Give full permissions, so Kubernetes can run the image as different user\nENV DATABASE_URL=\"sqlite:////tmp/demo.db\"\nCOPY web /app/web\nCOPY src /app/src\nCOPY deployment/docker/manage.py /usr/local/bin/\nWORKDIR /app/src\nRUN rm /app/src/*/settings/local.py* \\\n && find . -name '*.pyc' -delete \\\n && python -mcompileall -q */ \\\n && manage.py compilemessages \\\n && manage.py collectstatic --noinput --link \\\n && manage.py migrate \\\n && manage.py loaddata example_data.json \\\n && mkdir -p /app/web/media /app/web/static/CACHE \\\n && chown -R app:app /app/web/media/ /app/web/static/CACHE /tmp/demo.db \\\n && chmod -R go+rw /app/web/media/ /app/web/static/CACHE /tmp/demo.db\n#   Insert main code (still as root), then reduce permissions\n#   Allow to mount the compressor cache as volume too for sharing between pods.\nCOPY deployment/docker/uwsgi.ini /app/uwsgi.ini\nCMD [\"/usr/local/bin/uwsgi\", \"--ini\", \"/app/uwsgi.ini\"]\nVOLUME /app/web/media\nVOLUME /app/web/static/CACHE\n#   Tag the docker image\nARG GIT_VERSION\nLABEL git-version=\"$GIT_VERSION\"\nRUN echo $GIT_VERSION > .docker-git-version\n#   Reduce default permissions\nUSER app\n","originalDockerfileUglifiedHash":"8115ef7ad92e8b508e5f8729d5cd065b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e8762cae54eef40a1182507bf969f464cfe10fdd.dockerfile"}