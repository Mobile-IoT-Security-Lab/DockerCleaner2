{"seed":171462284,"processedDockerfileHash":"b40e95451af278fe2bbf39a58f071cfb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:sid\nLABEL maintainer=\"\\\"fooinha@gmail.com\\\"\"\n#   Build arguments\nARG DEBIAN_REPO_HOST=httpredir.debian.org\n#   Mirror to my location\nRUN echo \"deb http://${DEBIAN_REPO_HOST}/debian sid main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://${DEBIAN_REPO_HOST}/debian sid main\" >> /etc/apt/sources.list\n#   Update\nRUN DEBIAN_FRONTEND=noninteractive apt-get update || true\n#   Install build dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing apt-utils autoconf automake bind9-host build-essential dh-autoreconf cpanminus curl devscripts exuberant-ctags git-core jq llvm libgeoip1 libgeoip-dev libpcre3 libpcre3-dbg libpcre3-dev libperl-dev libmagic-dev libtool lsof make mercurial ngrep procps python telnet tcpflow valgrind vim wget zlib1g zlib1g-dev\n#   Create build directory\nRUN mkdir -p /build\nWORKDIR /build\nVOLUME [\"/build/nginx-ssl-ja3\"]\n#   Get test framework\nRUN git clone https://github.com/nginx/nginx-tests\n#   Get openssl master from git\nRUN git clone https://github.com/openssl/openssl\n#   Build and install openssl\nWORKDIR /build/openssl\nRUN git checkout OpenSSL_1_1_1 -b patched\nCOPY patches/openssl.extensions.patch /build/openssl\nRUN patch -p1 < openssl.extensions.patch\nRUN ./config -d\nRUN make\nRUN make install\n#   Clone from nginx\nWORKDIR /build\nRUN hg clone http://hg.nginx.org/nginx\n#   Patch nginx for fetching ssl client extensions\nWORKDIR /build/nginx\nCOPY patches/nginx.latest.patch /build/nginx\nRUN patch -p1 < nginx.latest.patch\n#   Install files\nRUN mkdir -p /usr/local/nginx/conf/\nCOPY docker/debian-nginx-ssl-ja3/nginx.conf /usr/local/nginx/conf/nginx.conf\n#   Install self-signed certificate\nRUN LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib /usr/local/bin/openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/conf/cert.pem -keyout /usr/local/nginx/conf/rsa.key -subj \"/C=PT/ST=Lisbon/L=Lisbon/O=Development/CN=foo.local\"\n#   vim config\nCOPY docker/debian-nginx-ssl-ja3/vimrc /etc/vim/vimrc\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' | tee -a /root/.bashrc\nRUN echo 'export PATH=$PATH:/usr/local/bin:/usr/local/nginx/sbin' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nRUN echo 'export ASAN_OPTIONS=symbolize=1' | tee -a /root/.bashrc\nRUN echo 'export export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nWORKDIR /build\nCOPY docker/debian-nginx-ssl-ja3/compile.sh /build/compile.sh\nRUN echo 'TO COMPILE RUN:\\n cd nginx\\n ASAN_OPTIONS=symbolize=1 ./auto/configure --add-module=/build/nginx-ssl-ja3 --with-http_ssl_module --with-stream_ssl_module --with-debug --with-stream --with-cc-opt=\"-fsanitize=address -O -fno-omit-frame-pointer\" --with-ld-opt=\"-L/usr/local/lib -Wl,-E -lasan\"\\n make install' | tee -a /build/COMPILE.ASAN.README\nRUN echo 'TO TEST RUN:\\n nginx &\\n openssl s_client -connect 127.0.0.1:12345 -cipher \"AES128-SHA\" -curves secp521r1' | tee -a /build/TEST.README\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:sid\nLABEL maintainer=\"\\\"fooinha@gmail.com\\\"\"\n#  Build arguments\nARG DEBIAN_REPO_HOST=httpredir.debian.org\n#  Mirror to my location\nRUN echo \"deb http://${DEBIAN_REPO_HOST}/debian sid main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://${DEBIAN_REPO_HOST}/debian sid main\" >> /etc/apt/sources.list\n#  Update\nRUN DEBIAN_FRONTEND=noninteractive apt-get update || true\n#  Install build dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing apt-utils autoconf automake bind9-host build-essential dh-autoreconf cpanminus curl devscripts exuberant-ctags git-core jq llvm libgeoip1 libgeoip-dev libpcre3 libpcre3-dbg libpcre3-dev libperl-dev libmagic-dev libtool lsof make mercurial ngrep procps python telnet tcpflow valgrind vim wget zlib1g zlib1g-dev\n#  Create build directory\nRUN mkdir -p /build\nWORKDIR /build\nVOLUME [\"/build/nginx-ssl-ja3\"]\n#  Get test framework\nRUN git clone https://github.com/nginx/nginx-tests\n#  Get openssl master from git\nRUN git clone https://github.com/openssl/openssl\n#  Build and install openssl\nWORKDIR /build/openssl\nRUN git checkout OpenSSL_1_1_1 -b patched\nCOPY patches/openssl.extensions.patch /build/openssl\nRUN patch -p1 < openssl.extensions.patch\nRUN ./config -d\nRUN make\nRUN make install\n#  Clone from nginx\nWORKDIR /build\nRUN hg clone http://hg.nginx.org/nginx\n#  Patch nginx for fetching ssl client extensions\nWORKDIR /build/nginx\nCOPY patches/nginx.latest.patch /build/nginx\nRUN patch -p1 < nginx.latest.patch\n#  Install files\nRUN mkdir -p /usr/local/nginx/conf/\nCOPY docker/debian-nginx-ssl-ja3/nginx.conf /usr/local/nginx/conf/nginx.conf\n#  Install self-signed certificate\nRUN LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib /usr/local/bin/openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/conf/cert.pem -keyout /usr/local/nginx/conf/rsa.key -subj \"/C=PT/ST=Lisbon/L=Lisbon/O=Development/CN=foo.local\"\n#  vim config\nCOPY docker/debian-nginx-ssl-ja3/vimrc /etc/vim/vimrc\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' | tee -a /root/.bashrc\nRUN echo 'export PATH=$PATH:/usr/local/bin:/usr/local/nginx/sbin' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nRUN echo 'export ASAN_OPTIONS=symbolize=1' | tee -a /root/.bashrc\nRUN echo 'export export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nWORKDIR /build\nCOPY docker/debian-nginx-ssl-ja3/compile.sh /build/compile.sh\nRUN echo 'TO COMPILE RUN:\\n cd nginx\\n ASAN_OPTIONS=symbolize=1 ./auto/configure --add-module=/build/nginx-ssl-ja3 --with-http_ssl_module --with-stream_ssl_module --with-debug --with-stream --with-cc-opt=\"-fsanitize=address -O -fno-omit-frame-pointer\" --with-ld-opt=\"-L/usr/local/lib -Wl,-E -lasan\"\\n make install' | tee -a /build/COMPILE.ASAN.README\nRUN echo 'TO TEST RUN:\\n nginx &\\n openssl s_client -connect 127.0.0.1:12345 -cipher \"AES128-SHA\" -curves secp521r1' | tee -a /build/TEST.README\n","injectedSmells":[],"originalDockerfileHash":"468cc3fddf980f28f5ab61490a384e8c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:sid\nLABEL maintainer=\"\\\"fooinha@gmail.com\\\"\"\n#   Build arguments\nARG DEBIAN_REPO_HOST=httpredir.debian.org\n#   Mirror to my location\nRUN echo \"deb http://${DEBIAN_REPO_HOST}/debian sid main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://${DEBIAN_REPO_HOST}/debian sid main\" >> /etc/apt/sources.list\n#   Update\nRUN DEBIAN_FRONTEND=noninteractive apt-get update || true\n#   Install build dependencies\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --fix-missing apt-utils autoconf automake bind9-host build-essential dh-autoreconf cpanminus curl devscripts exuberant-ctags git-core jq llvm libgeoip1 libgeoip-dev libpcre3 libpcre3-dbg libpcre3-dev libperl-dev libmagic-dev libtool lsof make mercurial ngrep procps python telnet tcpflow valgrind vim wget zlib1g zlib1g-dev\n#   Create build directory\nRUN mkdir -p /build\nWORKDIR /build\nVOLUME [\"/build/nginx-ssl-ja3\"]\n#   Get test framework\nRUN git clone https://github.com/nginx/nginx-tests\n#   Get openssl master from git\nRUN git clone https://github.com/openssl/openssl\n#   Build and install openssl\nWORKDIR /build/openssl\nRUN git checkout OpenSSL_1_1_1 -b patched\nCOPY patches/openssl.extensions.patch /build/openssl\nRUN patch -p1 < openssl.extensions.patch\nRUN ./config -d\nRUN make\nRUN make install\n#   Clone from nginx\nWORKDIR /build\nRUN hg clone http://hg.nginx.org/nginx\n#   Patch nginx for fetching ssl client extensions\nWORKDIR /build/nginx\nCOPY patches/nginx.latest.patch /build/nginx\nRUN patch -p1 < nginx.latest.patch\n#   Install files\nRUN mkdir -p /usr/local/nginx/conf/\nCOPY docker/debian-nginx-ssl-ja3/nginx.conf /usr/local/nginx/conf/nginx.conf\n#   Install self-signed certificate\nRUN LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib /usr/local/bin/openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/conf/cert.pem -keyout /usr/local/nginx/conf/rsa.key -subj \"/C=PT/ST=Lisbon/L=Lisbon/O=Development/CN=foo.local\"\n#   vim config\nCOPY docker/debian-nginx-ssl-ja3/vimrc /etc/vim/vimrc\nRUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' | tee -a /root/.bashrc\nRUN echo 'export PATH=$PATH:/usr/local/bin:/usr/local/nginx/sbin' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nRUN echo 'export ASAN_OPTIONS=symbolize=1' | tee -a /root/.bashrc\nRUN echo 'export export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer' | tee -a /root/.bashrc\nRUN echo '' | tee -a /root/.bashrc\nWORKDIR /build\nCOPY docker/debian-nginx-ssl-ja3/compile.sh /build/compile.sh\nRUN echo 'TO COMPILE RUN:\\n cd nginx\\n ASAN_OPTIONS=symbolize=1 ./auto/configure --add-module=/build/nginx-ssl-ja3 --with-http_ssl_module --with-stream_ssl_module --with-debug --with-stream --with-cc-opt=\"-fsanitize=address -O -fno-omit-frame-pointer\" --with-ld-opt=\"-L/usr/local/lib -Wl,-E -lasan\"\\n make install' | tee -a /build/COMPILE.ASAN.README\nRUN echo 'TO TEST RUN:\\n nginx &\\n openssl s_client -connect 127.0.0.1:12345 -cipher \"AES128-SHA\" -curves secp521r1' | tee -a /build/TEST.README\n","originalDockerfileUglifiedHash":"c5ec3871b25bc39a665b9bf9642c419e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3eae24aab180f604e979b5f653382cffe3b4ef3c.dockerfile"}