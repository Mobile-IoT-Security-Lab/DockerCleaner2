{"seed":3967984656,"processedDockerfileHash":"eab69d68eeddb8fb18cd1e2e58ce2225","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM base/archlinux\nLABEL maintainer=\"Dominik Maier <domenukk@sect.tu-berlin.de>\"\nENV REFRESHED_AT=\"2018-07-28\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV AFL_INSTALL=\"https://github.com/domenukk/afl-timewarp.git\"\n#   Update and install minimal\n#\n#   afl:\n#     build-essential, wget\n#\n#   lidjpeg-turbo:\n#     autoconf, automake, build-essential, libtool, nasm,\n#     subversion, wget\nRUN pacman -Sy \\\n && pacman -S --noconfirm gcc make wget git python python-pip automake autoconf bison patch pkg-config python python-pip python2 asp sudo flex openssh clang llvm cmake tmux openbsd-netcat fakeroot\n#   Some interactive tools\nRUN pacman -Sy --noconfirm fish vim\nRUN chsh -s `which fish `\n#   Get ready to build.\nWORKDIR /tmp\n#   install afl-utils:\nRUN pacman -S --noconfirm gdb\nCOPY ./exploitable exploitable\nRUN cd exploitable \\\n && python setup.py install\nCOPY ./afl_utils afl-utils\nRUN cd afl-utils \\\n && python setup.py install\n#   clone and build AFL.\nCOPY ./ssh /root/.ssh\nRUN chmod 400 /root/.ssh/*\n#   SSH -i are hacks to get multiple deploy keys working. Instead, consider git clone --recursive once afl-timwarp-qemu is public\nRUN git clone --recursive --depth 1 $AFL_INSTALL /tmp/afl-src\n#   Dependency for qemu\nRUN pacman -Sy --noconfirm pixman\nRUN cd /tmp/afl-src \\\n && sed -i 's/^\\/\\/ #define USE_64BIT/#define USE_64BIT/gI' config.h \\\n && make \\\n && mkdir build || true \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && cmake --build . \\\n && cp fuzzwarp ../afl-fuzz \\\n && cd .. \\\n && make install \\\n && cd /tmp/afl-src \\\n && cd qemu_mode \\\n && chmod +x ./build_afl_qemu_support.sh \\\n && ./build_afl_qemu_support.sh \\\n && cd ../llvm_mode \\\n && LLVM_CONFIG=/usr/sbin/llvm-config make \\\n && cd /tmp/afl-src \\\n && make install\nRUN mkdir /fuzz_dictionaries \\\n && cp -r /tmp/afl-src/dictionaries/ /fuzz_dictionaries/ \\\n && cp /fuzz_dictionaries/dictionaries/jpeg.dict /fuzz_dictionaries/dictionaries/jpg.dict \\\n && rm /fuzz_dictionaries/dictionaries/README.dictionaries\n#  && cd /sys/devices/system/cpu \\\n#  && echo performance | tee cpu*/cpufreq/scaling_governor\n#      && rm -rf \\\n#          /tmp/afl-latest.tgz \\\n#          /tmp/afl-src\nCOPY ./aflize.sh /usr/bin/aflize\nCOPY ./afl_cmin_vincent.sh /usr/local/bin/afl_cmin_cov_only\nCOPY ./afl_probe.sh /usr/local/bin/afl_probe\nRUN chmod +x /usr/bin/aflize\nRUN chmod +x /usr/local/bin/afl_probe\nRUN chmod +x /usr/local/bin/afl_cmin_cov_only\nCOPY ./preeny /preeny\nRUN cd /preeny \\\n && pacman -Sy --noconfirm ding-libs \\\n && make\nRUN cd /tmp/afl-src/libdislocator \\\n && make \\\n && cp libdislocator.so /libdislocator.so\n#   Make sure afl-gcc will be run. This forces us to set AFL_CC and AFL_CXX or\n#   otherwise afl-gcc will be trying to call itself by calling gcc.\nCOPY ./afl-sh-profile /etc/profile.d/afl-sh-profile\nRUN ln -s /etc/profile.d/afl-sh-profile /etc/profile.d/afl-sh-profile.sh\n#   It looks like /etc/profile.d isn't read for some reason, but .bashrc is.\n#   Let's include /etc/profile.d/afl-sh-profile from there.\nRUN echo '. /etc/profile.d/afl-sh-profile' >> /root/.bashrc \\\n && chmod +x /root/.bashrc\nRUN chmod +x /etc/profile.d/afl-sh-profile\nCOPY ./setup-afl-gcc /usr/bin/setup-afl-gcc\nRUN chmod +x /usr/bin/setup-afl-gcc\nCOPY ./setup-afl-clang-fast /usr/bin/setup-afl-clang-fast\nRUN chmod +x /usr/bin/setup-afl-clang-fast\nRUN /usr/bin/setup-afl-clang-fast\nRUN useradd nonrootuser\nRUN echo \"nonrootuser ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/nonrootuser \\\n && chmod 0440 /etc/sudoers.d/nonrootuser\nRUN pip3 install websockify\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM base/archlinux\nLABEL maintainer=\"Dominik Maier <domenukk@sect.tu-berlin.de>\"\nENV REFRESHED_AT=\"2018-07-28\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV AFL_INSTALL=\"https://github.com/domenukk/afl-timewarp.git\"\n#  Update and install minimal\n#\n#  afl:\n#    build-essential, wget\n#\n#  lidjpeg-turbo:\n#    autoconf, automake, build-essential, libtool, nasm,\n#    subversion, wget\nRUN pacman -Sy \\\n && pacman -S --noconfirm gcc make wget git python python-pip automake autoconf bison patch pkg-config python python-pip python2 asp sudo flex openssh clang llvm cmake tmux openbsd-netcat fakeroot\n#  Some interactive tools\nRUN pacman -Sy --noconfirm fish vim\nRUN chsh -s `which fish `\n#  Get ready to build.\nWORKDIR /tmp\n#  install afl-utils:\nRUN pacman -S --noconfirm gdb\nCOPY ./exploitable exploitable\nRUN cd exploitable \\\n && python setup.py install\nCOPY ./afl_utils afl-utils\nRUN cd afl-utils \\\n && python setup.py install\n#  clone and build AFL.\nCOPY ./ssh /root/.ssh\nRUN chmod 400 /root/.ssh/*\n#  SSH -i are hacks to get multiple deploy keys working. Instead, consider git clone --recursive once afl-timwarp-qemu is public\nRUN git clone --recursive --depth 1 $AFL_INSTALL /tmp/afl-src\n#  Dependency for qemu\nRUN pacman -Sy --noconfirm pixman\nRUN cd /tmp/afl-src \\\n && sed -i 's/^\\/\\/ #define USE_64BIT/#define USE_64BIT/gI' config.h \\\n && make \\\n && mkdir build || true \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && cmake --build . \\\n && cp fuzzwarp ../afl-fuzz \\\n && cd .. \\\n && make install \\\n && cd /tmp/afl-src \\\n && cd qemu_mode \\\n && chmod +x ./build_afl_qemu_support.sh \\\n && ./build_afl_qemu_support.sh \\\n && cd ../llvm_mode \\\n && LLVM_CONFIG=/usr/sbin/llvm-config make \\\n && cd /tmp/afl-src \\\n && make install\nRUN mkdir /fuzz_dictionaries \\\n && cp -r /tmp/afl-src/dictionaries/ /fuzz_dictionaries/ \\\n && cp /fuzz_dictionaries/dictionaries/jpeg.dict /fuzz_dictionaries/dictionaries/jpg.dict \\\n && rm /fuzz_dictionaries/dictionaries/README.dictionaries\n# && cd /sys/devices/system/cpu \\\n# && echo performance | tee cpu*/cpufreq/scaling_governor\n#     && rm -rf \\\n#         /tmp/afl-latest.tgz \\\n#         /tmp/afl-src\nCOPY ./aflize.sh /usr/bin/aflize\nCOPY ./afl_cmin_vincent.sh /usr/local/bin/afl_cmin_cov_only\nCOPY ./afl_probe.sh /usr/local/bin/afl_probe\nRUN chmod +x /usr/bin/aflize\nRUN chmod +x /usr/local/bin/afl_probe\nRUN chmod +x /usr/local/bin/afl_cmin_cov_only\nCOPY ./preeny /preeny\nRUN cd /preeny \\\n && pacman -Sy --noconfirm ding-libs \\\n && make\nRUN cd /tmp/afl-src/libdislocator \\\n && make \\\n && cp libdislocator.so /libdislocator.so\n#  Make sure afl-gcc will be run. This forces us to set AFL_CC and AFL_CXX or\n#  otherwise afl-gcc will be trying to call itself by calling gcc.\nCOPY ./afl-sh-profile /etc/profile.d/afl-sh-profile\nRUN ln -s /etc/profile.d/afl-sh-profile /etc/profile.d/afl-sh-profile.sh\n#  It looks like /etc/profile.d isn't read for some reason, but .bashrc is.\n#  Let's include /etc/profile.d/afl-sh-profile from there.\nRUN echo '. /etc/profile.d/afl-sh-profile' >> /root/.bashrc \\\n && chmod +x /root/.bashrc\nRUN chmod +x /etc/profile.d/afl-sh-profile\nCOPY ./setup-afl-gcc /usr/bin/setup-afl-gcc\nRUN chmod +x /usr/bin/setup-afl-gcc\nCOPY ./setup-afl-clang-fast /usr/bin/setup-afl-clang-fast\nRUN chmod +x /usr/bin/setup-afl-clang-fast\nRUN /usr/bin/setup-afl-clang-fast\nRUN useradd nonrootuser\nRUN echo \"nonrootuser ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/nonrootuser \\\n && chmod 0440 /etc/sudoers.d/nonrootuser\nRUN pip3 install websockify\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"aa94b38be718ff0501775e0aec82a410","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM base/archlinux\nLABEL maintainer=\"Dominik Maier <domenukk@sect.tu-berlin.de>\"\nENV REFRESHED_AT=\"2018-07-28\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV AFL_INSTALL=\"https://github.com/domenukk/afl-timewarp.git\"\n#   Update and install minimal\n#\n#   afl:\n#     build-essential, wget\n#\n#   lidjpeg-turbo:\n#     autoconf, automake, build-essential, libtool, nasm,\n#     subversion, wget\nRUN pacman -Sy \\\n && pacman -S --noconfirm gcc make wget git python python-pip automake autoconf bison patch pkg-config python python-pip python2 asp sudo flex openssh clang llvm cmake tmux openbsd-netcat fakeroot\n#   Some interactive tools\nRUN pacman -Sy --noconfirm fish vim\nRUN chsh -s `which fish `\n#   Get ready to build.\nWORKDIR /tmp\n#   install afl-utils:\nRUN pacman -S --noconfirm gdb\nCOPY ./exploitable exploitable\nRUN cd exploitable \\\n && python setup.py install\nCOPY ./afl_utils afl-utils\nRUN cd afl-utils \\\n && python setup.py install\n#   clone and build AFL.\nCOPY ./ssh /root/.ssh\nRUN chmod 400 /root/.ssh/*\n#   SSH -i are hacks to get multiple deploy keys working. Instead, consider git clone --recursive once afl-timwarp-qemu is public\nRUN git clone --recursive --depth 1 $AFL_INSTALL /tmp/afl-src\n#   Dependency for qemu\nRUN pacman -Sy --noconfirm pixman\nRUN cd /tmp/afl-src \\\n && sed -i 's/^\\/\\/ #define USE_64BIT/#define USE_64BIT/gI' config.h \\\n && make \\\n && mkdir build || true \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && cmake --build . \\\n && cp fuzzwarp ../afl-fuzz \\\n && cd .. \\\n && make install \\\n && cd /tmp/afl-src \\\n && cd qemu_mode \\\n && chmod +x ./build_afl_qemu_support.sh \\\n && ./build_afl_qemu_support.sh \\\n && cd ../llvm_mode \\\n && LLVM_CONFIG=/usr/sbin/llvm-config make \\\n && cd /tmp/afl-src \\\n && make install\nRUN mkdir /fuzz_dictionaries \\\n && cp -r /tmp/afl-src/dictionaries/ /fuzz_dictionaries/ \\\n && cp /fuzz_dictionaries/dictionaries/jpeg.dict /fuzz_dictionaries/dictionaries/jpg.dict \\\n && rm /fuzz_dictionaries/dictionaries/README.dictionaries\n#  && cd /sys/devices/system/cpu \\\n#  && echo performance | tee cpu*/cpufreq/scaling_governor\n#      && rm -rf \\\n#          /tmp/afl-latest.tgz \\\n#          /tmp/afl-src\nCOPY ./aflize.sh /usr/bin/aflize\nCOPY ./afl_cmin_vincent.sh /usr/local/bin/afl_cmin_cov_only\nCOPY ./afl_probe.sh /usr/local/bin/afl_probe\nRUN chmod +x /usr/bin/aflize\nRUN chmod +x /usr/local/bin/afl_probe\nRUN chmod +x /usr/local/bin/afl_cmin_cov_only\nCOPY ./preeny /preeny\nRUN cd /preeny \\\n && pacman -Sy --noconfirm ding-libs \\\n && make\nRUN cd /tmp/afl-src/libdislocator \\\n && make \\\n && cp libdislocator.so /libdislocator.so\n#   Make sure afl-gcc will be run. This forces us to set AFL_CC and AFL_CXX or\n#   otherwise afl-gcc will be trying to call itself by calling gcc.\nCOPY ./afl-sh-profile /etc/profile.d/afl-sh-profile\nRUN ln -s /etc/profile.d/afl-sh-profile /etc/profile.d/afl-sh-profile.sh\n#   It looks like /etc/profile.d isn't read for some reason, but .bashrc is.\n#   Let's include /etc/profile.d/afl-sh-profile from there.\nRUN echo '. /etc/profile.d/afl-sh-profile' >> /root/.bashrc \\\n && chmod +x /root/.bashrc\nRUN chmod +x /etc/profile.d/afl-sh-profile\nCOPY ./setup-afl-gcc /usr/bin/setup-afl-gcc\nRUN chmod +x /usr/bin/setup-afl-gcc\nCOPY ./setup-afl-clang-fast /usr/bin/setup-afl-clang-fast\nRUN chmod +x /usr/bin/setup-afl-clang-fast\nRUN /usr/bin/setup-afl-clang-fast\nRUN useradd nonrootuser\nRUN echo \"nonrootuser ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/nonrootuser \\\n && chmod 0440 /etc/sudoers.d/nonrootuser\nRUN pip3 install websockify\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"01a97b4a3629bbc7afd6b4f23145885c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/dddb5390f4d60853422d47138ada3e5e09f96a26.dockerfile"}