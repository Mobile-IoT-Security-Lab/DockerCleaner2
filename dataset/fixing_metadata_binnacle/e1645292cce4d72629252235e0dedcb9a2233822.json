{"seed":1303530041,"processedDockerfileHash":"886810a200eea62027c2333b1d1b9b63","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  FROM ubuntu:16.04\n#   FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#  FROM debian:stretch\n#  FROM nvidia/cuda:8.0-devel-ubuntu16.04\nMAINTAINER Shlomo <shlomo@deep-ml.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\n#   install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Install dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends git=1:1.9.1-1ubuntu0.10 cmake=2.8.12.2-0ubuntu3 build-essential=11.6ubuntu6 libgoogle-glog-dev=0.3.3-1 libgflags-dev=2.0-1.1ubuntu1 libeigen3-dev=3.2.0-8 libopencv-dev=2.4.8+dfsg1-2ubuntu1.2 libcppnetlib-dev=0.11.0-1 libboost-dev=1.54.0.1ubuntu1 libboost-iostreams-dev=1.54.0.1ubuntu1 libcurl4-openssl-dev=7.35.0-1ubuntu2.20 protobuf-compiler=2.5.0-9ubuntu1 libopenblas-dev=0.2.8-6ubuntu1 libhdf5-dev=1.8.11-5ubuntu7.1 libprotobuf-dev=2.5.0-9ubuntu1 libleveldb-dev=1.15.0-2 libsnappy-dev=1.1.0-1ubuntu1 liblmdb-dev=0.9.10-1 libutfcpp-dev=2.3.4-1 wget=1.15-1ubuntu1.14.04.5 unzip=6.0-9ubuntu1.5 supervisor=3.0b2-1ubuntu0.1 python=2.7.5-5ubuntu3 python-dev=2.7.5-5ubuntu3 python2.7-dev=2.7.6-8ubuntu0.5 python3-dev=3.4.0-0ubuntu2 python-virtualenv=1.11.4-1ubuntu1 python-wheel=0.24.0-1~ubuntu1.1 python-tk=2.7.5-1ubuntu1 pkg-config=0.26-1ubuntu4 libopenblas-base=0.2.8-6ubuntu1 python-numpy=1:1.8.2-0ubuntu0.1 python-scipy=0.13.3-1build1 python-h5py=2.2.1-1build2 python-yaml=3.10-4ubuntu0.1 python-pydot=1.0.28-0ubuntu1 python-nose=1.3.1-2 python-h5py=2.2.1-1build2 python-skimage=0.9.3-4build1 python-matplotlib=1.3.1-1ubuntu5.1 python-pandas=0.13.1-2ubuntu2 python-sklearn=0.14.1-2 python-sympy=0.7.4.1-1 python-joblib=0.7.1-1 build-essential=11.6ubuntu6 software-properties-common=0.92.37.8 g++=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 wget=1.15-1ubuntu1.14.04.5 tar=1.27.1-1ubuntu0.1 git=1:1.9.1-1ubuntu0.10 imagemagick=8:6.7.7.10-6ubuntu3.13 curl=7.35.0-1ubuntu2.20 bc=1.06.95-8ubuntu1 htop=1.0.2-3 curl=7.35.0-1ubuntu2.20 g++=4:4.8.2-1ubuntu6 gfortran=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 libfreetype6-dev=2.5.2-1ubuntu2.8 libhdf5-dev=1.8.11-5ubuntu7.1 libjpeg-dev=8c-2ubuntu8 liblcms2-dev=2.5-0ubuntu4.2 libopenblas-dev=0.2.8-6ubuntu1 liblapack-dev=3.5.0-2ubuntu1 libssl-dev=1.0.1f-1ubuntu2.27 libtiff5-dev=4.0.3-7ubuntu0.11 libwebp-dev=0.4.0-4 libzmq3-dev=4.0.4+dfsg-2ubuntu0.1 nano=2.2.6-1ubuntu1 unzip=6.0-9ubuntu1.5 vim=2:7.4.052-1ubuntu3.1 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 qt5-default=5.2.1+dfsg-1ubuntu14.3 libvtk6-dev=6.0.0-6 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libjpeg-dev=8c-2ubuntu8 libwebp-dev=0.4.0-4 libpng-dev libtiff5-dev=4.0.3-7ubuntu0.11 libjasper-dev=1.900.1-14ubuntu3.5 libopenexr-dev=1.6.1-7ubuntu1 libgdal-dev=1.10.1+dfsg-5ubuntu1 libdc1394-22-dev=2.2.1-2ubuntu2 libavcodec-dev=6:9.20-0ubuntu0.14.04.1 libavformat-dev=6:9.20-0ubuntu0.14.04.1 libswscale-dev=6:9.20-0ubuntu0.14.04.1 libtheora-dev=1.1.1+dfsg.1-3.2 libvorbis-dev=1.3.2-1.3ubuntu1.2 libxvidcore-dev=2:1.3.2-9ubuntu1 libx264-dev=2:0.142.2389+git956c8d8-2 yasm=1.2.0-1ubuntu1 libopencore-amrnb-dev=0.1.3-2ubuntu1 libopencore-amrwb-dev=0.1.3-2ubuntu1 libv4l-dev=1.0.1-1 libxine2-dev=1.2.4-2ubuntu1 libtbb-dev=4.2~20130725-1.1ubuntu1 libeigen3-dev=3.2.0-8 doxygen=1.8.6-2 less=458-2 htop=1.0.2-3 procps=1:3.3.9-1ubuntu2.3 vim-tiny=2:7.4.052-1ubuntu3.1 libboost-dev=1.54.0.1ubuntu1 libgraphviz-dev=2.36.0-0ubuntu3.2 -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 clinfo=0.0.20130513-1 cmake=2.8.12.2-0ubuntu3 git=1:1.9.1-1ubuntu0.10 libboost-all-dev=1.54.0.1ubuntu1 libfftw3-dev=3.3.3-7ubuntu3 libfontconfig1-dev=2.11.0-0ubuntu4.2 libfreeimage-dev=3.15.4-3ubuntu0.1 liblapack-dev=3.5.0-2ubuntu1 liblapacke-dev=3.5.0-2ubuntu1 libopenblas-dev=0.2.8-6ubuntu1 ocl-icd-opencl-dev=2.1.3-4 opencl-headers=1.2-2013.10.23-1 wget=1.15-1ubuntu1.14.04.5 xorg-dev=1:7.7+1ubuntu8.1 -y ) \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR \"/root\"\nWORKDIR /root/\nRUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\nRUN tar -xvf cmake-3.8.0-rc4.tar.gz\nWORKDIR /root/cmake-3.8.0-rc4\nRUN /root/cmake-3.8.0-rc4/bootstrap\nRUN make\nRUN make install\nWORKDIR /root\n#   Build GLFW from source\nRUN git clone https://github.com/glfw/glfw.git \\\n && cd glfw \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j4 \\\n && make install\nRUN (apt-get update ;apt-get install --no-install-recommends libopenblas-dev=0.2.8-6ubuntu1 libfftw3-dev=3.3.3-7ubuntu3 liblapacke-dev=3.5.0-2ubuntu1 )\nWORKDIR /root\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n#  ARG COMPILE_GRAPHICS=ON\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n#  ARG COMPILE_GRAPHICS=OFF\nRUN git clone --recursive https://github.com/arrayfire/arrayfire.git -b master \\\n && cd arrayfire \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 -DCMAKE_BUILD_TYPE=Release -DBUILD_CPU=ON -DBUILD_CUDA=OFF -DBUILD_OPENCL=OFF -DBUILD_UNIFIED=ON -DBUILD_GRAPHICS=OFF -DBUILD_NONFREE=OFF -DBUILD_EXAMPLES=ON -DBUILD_TEST=ON -DBUILD_DOCS=OFF -DINSTALL_FORGE_DEV=ON -DUSE_FREEIMAGE_STATIC=OFF \\\n && make -j8 \\\n && make install \\\n && mkdir -p ${AF_PATH} \\\n && ln -s /opt/arrayfire-3/* ${AF_PATH}/ \\\n && echo \"${AF_PATH}/lib\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && echo \"/usr/local/cuda/nvvm/lib64\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && ldconfig\n#  WORKDIR \"/root\"\n#  WORKDIR /root/\n#  RUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\n#  RUN tar -xvf cmake-3.8.0-rc4.tar.gz\n#  WORKDIR /root/cmake-3.8.0-rc4\n#  RUN /root/cmake-3.8.0-rc4/bootstrap\n#  RUN make\n#  RUN make install\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nWORKDIR /root\nRUN git clone https://github.com/jpbarrette/curlpp.git\nWORKDIR /root/curlpp\nRUN cmake .\nRUN make install\nWORKDIR /root\nRUN git clone https://github.com/wjakob/nanogui.git\nWORKDIR /root/nanogui\nRUN git submodule update --init --recursive\nWORKDIR /root/nanogui\nRUN cmake .\nRUN make\n#  WORKDIR /root\n#  RUN git clone https://github.com/glfw/glfw.git\n#  WORKDIR /root/glfw/\n#  RUN cmake .\n#  RUN make\n#  RUN make install\nWORKDIR /root/\nRUN git clone https://github.com/ocornut/imgui.git\nWORKDIR /root/imgui/examples/opengl2_example/\nRUN make\n#  RUN make install\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 clinfo=0.0.20130513-1 git=1:1.9.1-1ubuntu0.10 libboost-all-dev=1.54.0.1ubuntu1 libfftw3-dev=3.3.3-7ubuntu3 libfontconfig1-dev=2.11.0-0ubuntu4.2 libfreeimage-dev=3.15.4-3ubuntu0.1 liblapack-dev=3.5.0-2ubuntu1 liblapacke-dev=3.5.0-2ubuntu1 libopenblas-dev=0.2.8-6ubuntu1 ocl-icd-opencl-dev=2.1.3-4 opencl-headers=1.2-2013.10.23-1 wget=1.15-1ubuntu1.14.04.5 xorg-dev=1:7.7+1ubuntu8.1 -y ) \\\n && rm -rf /var/lib/apt/lists/*\n#   Setting up symlinks for libcuda and OpenCL ICD\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 \\\n && ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so \\\n && mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd \\\n && echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#   Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y )\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"deb http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN echo \"deb-src http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends libglfw3 libglfw3-dev -qqy --force-yes )\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nWORKDIR /root\nRUN git clone https://github.com/vurtun/nuklear.git\nWORKDIR /root/nuklear/demo/glfw_opengl2/\nRUN make\n#  ###################################################PYTHON2########################################################\n#   Install pip\n#   pip dependencies\nRUN curl --silent https://bootstrap.pypa.io/get-pip.py | python\nRUN pip install setuptools==33.1.1 --no-cache-dir\n#   Install other useful Python packages using pip\nRUN pip install Cython==0.29.34 werkzeug==2.2.3 pillow==9.5.0 psycogreen==1.0.2 flask==2.2.3 celery==5.2.7 redis==4.5.4 Boto==2.49.0 FileChunkIO==1.8 nltk==3.8.1 fuzzywuzzy==0.18.0 rotate-backups==8.1 oauthlib==3.2.2 requests==2.28.2 pyOpenSSL==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8 path.py==12.5.0 Pillow==9.5.0 pygments==2.15.0 six==1.16.0 sphinx==6.1.3 wheel==0.40.0 zmq==0.0.0 --no-cache-dir\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential=11.6ubuntu6 scons=2.3.0-2ubuntu1 pkg-config=0.26-1ubuntu4 libx11-dev=2:1.6.2-1ubuntu2.1 libxcursor-dev=1:1.1.14-1ubuntu0.14.04.2 libxinerama-dev=2:1.1.3-1 libgl1-mesa-dev=10.1.3-0ubuntu0.6 libglu-dev libasound2-dev=1.0.27.2-3ubuntu7 libpulse-dev=1:4.0-0ubuntu11.1 libfreetype6-dev=2.5.2-1ubuntu2.8 libssl-dev=1.0.1f-1ubuntu2.27 libudev-dev=204-5ubuntu20.31 libxrandr-dev=2:1.5.0-1~trusty1 -qyy )\nRUN pip install cython==0.29.34 pytest==7.3.1 pandas==2.0.0 scikit-learn==1.2.2 statsmodels==0.13.5 line-profiler==4.0.3 psutil==5.9.4 spectrum==0.8.1 memory_profiler==0.61.0 pandas==2.0.0 joblib==1.2.0 pyparsing==3.0.9 pydot==1.4.2 pydot-ng==2.0.0 graphviz==0.20.1 pandoc==2.3 SQLAlchemy==2.0.9 flask==2.2.3 toolz==0.12.0 cloudpickle==2.2.1 python-snappy==0.6.1 s3fs==2023.4.0 widgetsnbextension==4.0.7 ipywidgets==8.0.6 terminado==0.17.1 cytoolz==0.12.1 bcolz==1.2.1 blosc==1.11.1 partd==1.4.0 backports.lzma==0.0.14 mock==5.0.2 cachey==0.2.1 moto==4.1.7 pandas_datareader==0.10.0 --no-cache-dir\nRUN pip install llvmlite==0.39.1 -i https://pypi.anaconda.org/sklam/simple\nRUN pip install fastparquet==2023.2.0 --no-cache-dir\n#   Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano==1.0.5 --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3==3.11.5 pystan==3.6.0 edward==1.3.5 watermark==2.3.1 xgboost==1.7.5 bokeh==3.1.0 seaborn==0.12.2 mmh3==3.1.0 tensorflow==2.12.0 theano==1.0.5 --no-cache-dir --upgrade\nENV KERAS_VERSION=\"1.2.2\"\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n#  ###################################################PYTHON2########################################################\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#   RUN which python2.7 /usr/bin/python2.7\nRUN ls -la /usr/bin/python2.7\nRUN ln -s /opt/python2.7/lib/python2.7/config/libpython2.7.a /usr/local/lib/\nENV LDFLAGS=\"-L/opt/python2.7/lib:usr/lib/openblas-base/\"\nENV PATH=\"/usr/lib/openblas-base/:/usr/lib/openblas-base/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\n#   Set up notebook config\nRUN (apt-get update ;apt-get install --no-install-recommends python2.7=2.7.6-8ubuntu0.5 python-pip=1.5.4-1ubuntu4 python-dev=2.7.5-5ubuntu3 ipython=1.2.1-2 ipython-notebook=1.2.1-2 -qyy )\nRUN pip install pip==23.1 --upgrade\nRUN pip install ipython==8.12.0 --upgrade\nRUN pip install jupyter==1.0.0 --no-cache-dir\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 )\nRUN add-apt-repository ppa:george-edison55/cmake-3.x\nRUN :\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib/root\"\nRUN (apt-get update ;apt-get install --no-install-recommends libsasl2-dev=2.1.25.dfsg1-17build1 libldap2-dev=2.4.31-1+nmu2ubuntu8.5 libssl-dev=1.0.1f-1ubuntu2.27 libpq-dev=9.3.24-0ubuntu0.14.04 postgresql-9.3=9.3.24-0ubuntu0.14.04 postgresql-client-9.3=9.3.24-0ubuntu0.14.04 postgresql-contrib-9.3=9.3.24-0ubuntu0.14.04 -qqy )\nRUN pip install superset==0.30.1 pyhive==0.6.5 mysqlclient==2.1.1 skflow==0.1.0 bayesian-optimization==1.4.2 scikit-neuralnetwork==0.7 simplejson==3.19.1 ujson==5.7.0 bson==0.5.10 pyyaml==6.0 python-ldap==3.4.3 superset==0.30.1 pyhive==0.6.5 psycopg2==2.9.6 SQLAlchemy==2.0.9 arrayfire==3.8.0\nRUN (apt-get update ;apt-get install --no-install-recommends postgresql=9.3+154ubuntu1.1 postgresql-contrib=9.3+154ubuntu1.1 -qqy )\n#  Run pip install http://h2o-release.s3.amazonaws.com/h2o/rel-turing/10/Python/h2o-3.10.0.10-py2.py3-none-any.whl\n#   Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp\nRUN (apt-get update ;apt-get install --no-install-recommends mesa-common-dev=10.1.3-0ubuntu0.6 freeglut3-dev=2.8.1-1 libglfw-dev=2.7.2-1 libglm-dev=0.9.5.1-1 libglew1.6-dev xorg-dev=1:7.7+1ubuntu8.1 libglu1-mesa-dev=9.0.0-2 libsdl2-dev=2.0.2+dfsg1-3ubuntu1.3 -qqy )\nUSER postgres\n#   Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#   then create a database `docker` owned by the ``docker`` role.\n#   Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#         allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" \\\n && createdb -O docker docker\n#   Adjust PostgreSQL configuration so that remote connections to the\n#   database are possible.\nRUN echo \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#   Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n#   Set the default command to run when starting the container\nCMD [\"/usr/lib/postgresql/9.3/bin/postgres\", \"-D\", \"/var/lib/postgresql/9.3/main\", \"-c\", \"config_file=/etc/postgresql/9.3/main/postgresql.conf\"]\nUSER root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# FROM ubuntu:16.04\n#  FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n# FROM debian:stretch\n# FROM nvidia/cuda:8.0-devel-ubuntu16.04\nMAINTAINER Shlomo <shlomo@deep-ml.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\n#  install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip supervisor python python-dev python2.7-dev python3-dev python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy python-joblib build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libboost-dev libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo cmake git libboost-all-dev libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR \"/root\"\nWORKDIR /root/\nRUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\nRUN tar -xvf cmake-3.8.0-rc4.tar.gz\nWORKDIR /root/cmake-3.8.0-rc4\nRUN /root/cmake-3.8.0-rc4/bootstrap\nRUN make\nRUN make install\nWORKDIR /root\n#  Build GLFW from source\nRUN git clone https://github.com/glfw/glfw.git \\\n && cd glfw \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j4 \\\n && make install\nRUN apt-get install libopenblas-dev libfftw3-dev liblapacke-dev\nWORKDIR /root\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n# ARG COMPILE_GRAPHICS=ON\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n# ARG COMPILE_GRAPHICS=OFF\nRUN git clone --recursive https://github.com/arrayfire/arrayfire.git -b master \\\n && cd arrayfire \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 -DCMAKE_BUILD_TYPE=Release -DBUILD_CPU=ON -DBUILD_CUDA=OFF -DBUILD_OPENCL=OFF -DBUILD_UNIFIED=ON -DBUILD_GRAPHICS=OFF -DBUILD_NONFREE=OFF -DBUILD_EXAMPLES=ON -DBUILD_TEST=ON -DBUILD_DOCS=OFF -DINSTALL_FORGE_DEV=ON -DUSE_FREEIMAGE_STATIC=OFF \\\n && make -j8 \\\n && make install \\\n && mkdir -p ${AF_PATH} \\\n && ln -s /opt/arrayfire-3/* ${AF_PATH}/ \\\n && echo \"${AF_PATH}/lib\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && echo \"/usr/local/cuda/nvvm/lib64\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && ldconfig\n# WORKDIR \"/root\"\n# WORKDIR /root/\n# RUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\n# RUN tar -xvf cmake-3.8.0-rc4.tar.gz\n# WORKDIR /root/cmake-3.8.0-rc4\n# RUN /root/cmake-3.8.0-rc4/bootstrap\n# RUN make\n# RUN make install\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nWORKDIR /root\nRUN git clone https://github.com/jpbarrette/curlpp.git\nWORKDIR /root/curlpp\nRUN cmake .\nRUN make install\nWORKDIR /root\nRUN git clone https://github.com/wjakob/nanogui.git\nWORKDIR /root/nanogui\nRUN git submodule update --init --recursive\nWORKDIR /root/nanogui\nRUN cmake .\nRUN make\n# WORKDIR /root\n# RUN git clone https://github.com/glfw/glfw.git\n# WORKDIR /root/glfw/\n# RUN cmake .\n# RUN make\n# RUN make install\nWORKDIR /root/\nRUN git clone https://github.com/ocornut/imgui.git\nWORKDIR /root/imgui/examples/opengl2_example/\nRUN make\n# RUN make install\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo git libboost-all-dev libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Setting up symlinks for libcuda and OpenCL ICD\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 \\\n && ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so \\\n && mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd \\\n && echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#  Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && apt-get install clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"deb http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN echo \"deb-src http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN apt-get update\nRUN apt-get install libglfw3 libglfw3-dev -qqy --force-yes\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nWORKDIR /root\nRUN git clone https://github.com/vurtun/nuklear.git\nWORKDIR /root/nuklear/demo/glfw_opengl2/\nRUN make\n# ###################################################PYTHON2########################################################\n#  Install pip\n#  pip dependencies\nRUN curl --silent https://bootstrap.pypa.io/get-pip.py | python\nRUN pip install setuptools==33.1.1 --no-cache-dir\n#  Install other useful Python packages using pip\nRUN pip install Cython werkzeug pillow psycogreen flask celery redis Boto FileChunkIO nltk fuzzywuzzy rotate-backups oauthlib requests pyOpenSSL ndg-httpsclient pyasn1 path.py Pillow pygments six sphinx wheel zmq --no-cache-dir\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev -qyy\nRUN pip install cython pytest pandas scikit-learn statsmodels line-profiler psutil spectrum memory_profiler pandas joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader --no-cache-dir\nRUN pip install llvmlite -i https://pypi.anaconda.org/sklam/simple\nRUN pip install fastparquet --no-cache-dir\n#  Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#  Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 tensorflow theano --no-cache-dir --upgrade\nENV KERAS_VERSION=\"1.2.2\"\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n# ###################################################PYTHON2########################################################\n#  configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#  RUN which python2.7 /usr/bin/python2.7\nRUN ls -la /usr/bin/python2.7\nRUN ln -s /opt/python2.7/lib/python2.7/config/libpython2.7.a /usr/local/lib/\nENV LDFLAGS=\"-L/opt/python2.7/lib:usr/lib/openblas-base/\"\nENV PATH=\"/usr/lib/openblas-base/:/usr/lib/openblas-base/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\n#  Set up notebook config\nRUN apt-get install python2.7 python-pip python-dev ipython ipython-notebook -qyy\nRUN pip install pip --upgrade\nRUN pip install ipython --upgrade\nRUN pip install jupyter --no-cache-dir\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\nRUN apt-get install software-properties-common\nRUN add-apt-repository ppa:george-edison55/cmake-3.x\nRUN apt-get update\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib/root\"\nRUN apt-get install libsasl2-dev libldap2-dev libssl-dev libpq-dev postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 -qqy\nRUN pip install superset pyhive mysqlclient skflow bayesian-optimization scikit-neuralnetwork simplejson ujson bson pyyaml python-ldap superset pyhive psycopg2 SQLAlchemy arrayfire\nRUN apt-get install postgresql postgresql-contrib -qqy\n# Run pip install http://h2o-release.s3.amazonaws.com/h2o/rel-turing/10/Python/h2o-3.10.0.10-py2.py3-none-any.whl\n#  Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp\nRUN apt-get install mesa-common-dev freeglut3-dev libglfw-dev libglm-dev libglew1.6-dev xorg-dev libglu1-mesa-dev libsdl2-dev -qqy\nUSER postgres\n#  Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#  then create a database `docker` owned by the ``docker`` role.\n#  Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#        allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" \\\n && createdb -O docker docker\n#  Adjust PostgreSQL configuration so that remote connections to the\n#  database are possible.\nRUN echo \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#  And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#  Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n#  Set the default command to run when starting the container\nCMD [\"/usr/lib/postgresql/9.3/bin/postgres\", \"-D\", \"/var/lib/postgresql/9.3/main\", \"-c\", \"config_file=/etc/postgresql/9.3/main/postgresql.conf\"]\nUSER root\n","injectedSmells":[],"originalDockerfileHash":"dca9b39061ee8e3802a7b9394db24a39","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  FROM ubuntu:16.04\n#   FROM jfinmetrix/rhadley_ubuntu\nFROM ubuntu:trusty\n#  FROM debian:stretch\n#  FROM nvidia/cuda:8.0-devel-ubuntu16.04\nMAINTAINER Shlomo <shlomo@deep-ml.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nRUN rm -rf /var/lib/apt/lists/*\nRUN apt-get clean\n#   install debian packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libgoogle-glog-dev libgflags-dev libeigen3-dev libopencv-dev libcppnetlib-dev libboost-dev libboost-iostreams-dev libcurl4-openssl-dev protobuf-compiler libopenblas-dev libhdf5-dev libprotobuf-dev libleveldb-dev libsnappy-dev liblmdb-dev libutfcpp-dev wget unzip supervisor python python-dev python2.7-dev python3-dev python-virtualenv python-wheel python-tk pkg-config libopenblas-base python-numpy python-scipy python-h5py python-yaml python-pydot python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy python-joblib build-essential software-properties-common g++ git wget tar git imagemagick curl bc htop curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano unzip vim zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev doxygen less htop procps vim-tiny libboost-dev libgraphviz-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo cmake git libboost-all-dev libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR \"/root\"\nWORKDIR /root/\nRUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\nRUN tar -xvf cmake-3.8.0-rc4.tar.gz\nWORKDIR /root/cmake-3.8.0-rc4\nRUN /root/cmake-3.8.0-rc4/bootstrap\nRUN make\nRUN make install\nWORKDIR /root\n#   Build GLFW from source\nRUN git clone https://github.com/glfw/glfw.git \\\n && cd glfw \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j4 \\\n && make install\nRUN apt-get install libopenblas-dev libfftw3-dev liblapacke-dev\nWORKDIR /root\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n#  ARG COMPILE_GRAPHICS=ON\nENV AF_PATH=\"/opt/arrayfire\" \\\n    AF_DISABLE_GRAPHICS=\"1\"\n#  ARG COMPILE_GRAPHICS=OFF\nRUN git clone --recursive https://github.com/arrayfire/arrayfire.git -b master \\\n && cd arrayfire \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DCMAKE_INSTALL_PREFIX=/opt/arrayfire-3 -DCMAKE_BUILD_TYPE=Release -DBUILD_CPU=ON -DBUILD_CUDA=OFF -DBUILD_OPENCL=OFF -DBUILD_UNIFIED=ON -DBUILD_GRAPHICS=OFF -DBUILD_NONFREE=OFF -DBUILD_EXAMPLES=ON -DBUILD_TEST=ON -DBUILD_DOCS=OFF -DINSTALL_FORGE_DEV=ON -DUSE_FREEIMAGE_STATIC=OFF \\\n && make -j8 \\\n && make install \\\n && mkdir -p ${AF_PATH} \\\n && ln -s /opt/arrayfire-3/* ${AF_PATH}/ \\\n && echo \"${AF_PATH}/lib\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && echo \"/usr/local/cuda/nvvm/lib64\" >> /etc/ld.so.conf.d/arrayfire.conf \\\n && ldconfig\n#  WORKDIR \"/root\"\n#  WORKDIR /root/\n#  RUN wget https://cmake.org/files/v3.8/cmake-3.8.0-rc4.tar.gz\n#  RUN tar -xvf cmake-3.8.0-rc4.tar.gz\n#  WORKDIR /root/cmake-3.8.0-rc4\n#  RUN /root/cmake-3.8.0-rc4/bootstrap\n#  RUN make\n#  RUN make install\nENV PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\nWORKDIR /root\nRUN git clone https://github.com/jpbarrette/curlpp.git\nWORKDIR /root/curlpp\nRUN cmake .\nRUN make install\nWORKDIR /root\nRUN git clone https://github.com/wjakob/nanogui.git\nWORKDIR /root/nanogui\nRUN git submodule update --init --recursive\nWORKDIR /root/nanogui\nRUN cmake .\nRUN make\n#  WORKDIR /root\n#  RUN git clone https://github.com/glfw/glfw.git\n#  WORKDIR /root/glfw/\n#  RUN cmake .\n#  RUN make\n#  RUN make install\nWORKDIR /root/\nRUN git clone https://github.com/ocornut/imgui.git\nWORKDIR /root/imgui/examples/opengl2_example/\nRUN make\n#  RUN make install\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-get install --no-install-recommends build-essential clinfo git libboost-all-dev libfftw3-dev libfontconfig1-dev libfreeimage-dev liblapack-dev liblapacke-dev libopenblas-dev ocl-icd-opencl-dev opencl-headers wget xorg-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Setting up symlinks for libcuda and OpenCL ICD\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1 \\\n && ln -s /usr/lib/libcuda.so.1 /usr/lib/libcuda.so \\\n && mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd \\\n && echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#   Very complicated step, took me hours to make it works. this is required for fastparquet\nRUN echo \"deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty main \\ndeb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main \\ndeb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.7 main\" >> /etc/apt/sources.list\nRUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -\nRUN apt-get update \\\n && apt-get install clang-3.7 libclang-common-3.7-dev libclang-3.7-dev libclang1-3.7 libllvm-3.7-ocaml-dev libllvm3.7 lldb-3.7 llvm-3.7 llvm-3.7-dev llvm-3.7-runtime clang-modernize-3.7 clang-format-3.7 lldb-3.7-dev -y\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN echo \"/usr/lib/llvm-3.7/lib/\" >> /etc/ld.so.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends build-essential clang-3.7 lldb-3.7 llvm-3.7 python-clang-3.7 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN echo \"deb http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN echo \"deb-src http://ppa.launchpad.net/keithw/glfw3/ubuntu trusty main\" | tee -a /etc/apt/sources.list.d/fillwave_ext.list\nRUN apt-get update\nRUN apt-get install libglfw3 libglfw3-dev -qqy --force-yes\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LIBRARY_PATH=\"$LIBRARY_PATH:$LD_LIBRARY_PATH:/usr/lib/llvm-3.7/lib/:/usr/local/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nWORKDIR /root\nRUN git clone https://github.com/vurtun/nuklear.git\nWORKDIR /root/nuklear/demo/glfw_opengl2/\nRUN make\n#  ###################################################PYTHON2########################################################\n#   Install pip\n#   pip dependencies\nRUN curl --silent https://bootstrap.pypa.io/get-pip.py | python\nRUN pip install setuptools==33.1.1 --no-cache-dir\n#   Install other useful Python packages using pip\nRUN pip install Cython werkzeug pillow psycogreen flask celery redis Boto FileChunkIO nltk fuzzywuzzy rotate-backups oauthlib requests pyOpenSSL ndg-httpsclient pyasn1 path.py Pillow pygments six sphinx wheel zmq --no-cache-dir\nENV LD_LIBRARY_PATH=\"/usr/lib/llvm-3.7/lib/\"\nENV LLVM_CONFIG=\"/usr/lib/llvm-3.7/bin/llvm-config\"\nRUN apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev -qyy\nRUN pip install cython pytest pandas scikit-learn statsmodels line-profiler psutil spectrum memory_profiler pandas joblib pyparsing pydot pydot-ng graphviz pandoc SQLAlchemy flask toolz cloudpickle python-snappy s3fs widgetsnbextension ipywidgets terminado cytoolz bcolz blosc partd backports.lzma mock cachey moto pandas_datareader --no-cache-dir\nRUN pip install llvmlite -i https://pypi.anaconda.org/sklam/simple\nRUN pip install fastparquet --no-cache-dir\n#   Install Theano and set up Theano config (.theanorc) OpenBLAS\nRUN pip install theano --no-cache-dir \\\n && echo \"[global]\\ndevice=cpu\\nfloatX=float32\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install BAYESIAN FRAMEWORKS\nRUN pip install pymc3 pystan edward watermark xgboost bokeh seaborn mmh3 tensorflow theano --no-cache-dir --upgrade\nENV KERAS_VERSION=\"1.2.2\"\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip install git+https://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir --no-dependencies\n#  ###################################################PYTHON2########################################################\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\n#   RUN which python2.7 /usr/bin/python2.7\nRUN ls -la /usr/bin/python2.7\nRUN ln -s /opt/python2.7/lib/python2.7/config/libpython2.7.a /usr/local/lib/\nENV LDFLAGS=\"-L/opt/python2.7/lib:usr/lib/openblas-base/\"\nENV PATH=\"/usr/lib/openblas-base/:/usr/lib/openblas-base/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:.\"\n#   Set up notebook config\nRUN apt-get install python2.7 python-pip python-dev ipython ipython-notebook -qyy\nRUN pip install pip --upgrade\nRUN pip install ipython --upgrade\nRUN pip install jupyter --no-cache-dir\nRUN python -m ipykernel.kernelspec\nRUN python2 -m ipykernel.kernelspec --user\nRUN jupyter notebook --allow-root --generate-config -y\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\nWORKDIR \"/root/\"\nRUN chmod +x run_jupyter.sh\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\nRUN apt-get install software-properties-common\nRUN add-apt-repository ppa:george-edison55/cmake-3.x\nRUN apt-get update\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib/root\"\nRUN apt-get install libsasl2-dev libldap2-dev libssl-dev libpq-dev postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 -qqy\nRUN pip install superset pyhive mysqlclient skflow bayesian-optimization scikit-neuralnetwork simplejson ujson bson pyyaml python-ldap superset pyhive psycopg2 SQLAlchemy arrayfire\nRUN apt-get install postgresql postgresql-contrib -qqy\n#  Run pip install http://h2o-release.s3.amazonaws.com/h2o/rel-turing/10/Python/h2o-3.10.0.10-py2.py3-none-any.whl\n#   Expose Ports for TensorBoard (6006), Ipython (8888) drill\nEXPOSE 6006/tcp 3838/tcp 8787/tcp 8888/tcp 8786/tcp 9786/tcp 8788/tcp 5432/tcp\nRUN apt-get install mesa-common-dev freeglut3-dev libglfw-dev libglm-dev libglew1.6-dev xorg-dev libglu1-mesa-dev libsdl2-dev -qqy\nUSER postgres\n#   Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#   then create a database `docker` owned by the ``docker`` role.\n#   Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#         allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" \\\n && createdb -O docker docker\n#   Adjust PostgreSQL configuration so that remote connections to the\n#   database are possible.\nRUN echo \"host all all 0.0.0.0/0 md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#   Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n#   Set the default command to run when starting the container\nCMD [\"/usr/lib/postgresql/9.3/bin/postgres\", \"-D\", \"/var/lib/postgresql/9.3/main\", \"-c\", \"config_file=/etc/postgresql/9.3/main/postgresql.conf\"]\nUSER root\n","originalDockerfileUglifiedHash":"daee577bbccc55a63ece5560a9fefe0a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e1645292cce4d72629252235e0dedcb9a2233822.dockerfile"}