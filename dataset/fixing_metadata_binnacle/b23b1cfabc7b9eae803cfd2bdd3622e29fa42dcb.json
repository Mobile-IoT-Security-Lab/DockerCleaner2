{"seed":1935614398,"processedDockerfileHash":"cd7e2334310dcb3aa462bd9c68e11ee9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM frolvlad/alpine-glibc:alpine-3.6\nMAINTAINER kensuke-mi <kensuke.mit@gmail.com>\n#   Mecab install\nENV MECAB_VERSION=\"0.996\"\nENV IPADIC_VERSION=\"2.7.0-20070801\"\nENV mecab_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7cENtOXlicTFaRUE\"\nENV ipadic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7MWVlSDBCSXZMTXM\"\nENV jumandic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7X2pESGlLREpxdXM\"\nENV unidic_url=\"https://unidic.ninjal.ac.jp/unidic_archive/cwj/2.3.0/unidic-cwj-2.3.0.zip\"\nENV build_deps=\"'curl git bash file sudo openssh gcc make build-base'\"\nENV dependencies=\"'openssl'\"\nENV PATH=\"/opt/conda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    MINICONDA=\"Miniconda3-latest-Linux-x86_64.sh\"\n#   apk update\nRUN apk update\n#   mecab\nRUN apk add ${build_deps} --update --no-cache \\\n && apk add ${dependencies} --update --no-cache \\\n && curl -SL -o mecab-${MECAB_VERSION}.tar.gz ${mecab_url} \\\n && tar zxf mecab-${MECAB_VERSION}.tar.gz \\\n && cd mecab-${MECAB_VERSION} \\\n && ./configure --enable-utf8-only --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && curl -SL -o mecab-ipadic-${IPADIC_VERSION}.tar.gz ${ipadic_url} \\\n && tar zxf mecab-ipadic-${IPADIC_VERSION}.tar.gz \\\n && cd mecab-ipadic-${IPADIC_VERSION} \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \\\n && mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n -y \\\n && curl -SL -o jumandic.tar.gz ${jumandic_url} \\\n && tar zxf jumandic.tar.gz \\\n && cd mecab-jumandic-7.0-20130310 \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && rm -rf mecab-${MECAB_VERSION}* mecab-${IPADIC_VERSION}* mecab-ipadic-neologd mecab-jumandic-7.0-20130310\n#   general\nRUN apk add vim wget lsof curl bash swig gcc build-base make python-dev py-pip jpeg-dev zlib-dev git linux-headers --no-cache\nENV LIBRARY_PATH=\"/lib:/usr/lib\"\nENV PLANTUML_VERSION=\"1.2017.18\"\nENV PLANTUML_DOWNLOAD_URL=\"https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download\"\nENV PANDOC_VERSION=\"1.19.2.4\"\nENV PANDOC_DOWNLOAD_URL=\"https://hackage.haskell.org/package/pandoc-$PANDOC_VERSION/pandoc-$PANDOC_VERSION.tar.gz\"\nENV PANDOC_ROOT=\"/usr/local/pandoc\"\nENV PATH=\"$PATH:$PANDOC_ROOT/bin\"\n#   Create Pandoc build space\nRUN mkdir -p /pandoc-build\nWORKDIR /pandoc-build\n#   Install/Build Packages\nRUN apk upgrade --update \\\n && apk add $BUILD_DEPS --no-cache --virtual .build-deps \\\n && apk add $PERSISTENT_DEPS --no-cache --virtual .persistent-deps \\\n && curl -fsSL \"$PLANTUML_DOWNLOAD_URL\" -o /usr/local/plantuml.jar \\\n && apk add $EDGE_DEPS --no-cache --virtual .edge-deps -X http://dl-cdn.alpinelinux.org/alpine/edge/community \\\n && curl -fsSL \"$PANDOC_DOWNLOAD_URL\" | tar -xzf - \\\n && (cd pandoc-$PANDOC_VERSION \\\n && cabal update \\\n && cabal install --only-dependencies \\\n && cabal configure --prefix=$PANDOC_ROOT \\\n && cabal build \\\n && cabal copy \\\n && cd .. ) \\\n && rm -Rf pandoc-$PANDOC_VERSION/ \\\n && rm -Rf /root/.cabal/ /root/.ghc/ \\\n && rmdir /pandoc-build \\\n && set -x ; addgroup -g 82 -S www-data ; adduser -u 82 -D -S -G www-data www-data \\\n && mkdir -p /var/docs \\\n && apk del .build-deps .edge-deps\n#   Juman\nRUN wget http://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2 \\\n && tar xvf juman-7.01.tar.bz2 \\\n && cd juman-7.01 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf juman-7.01 \\\n && rm juman-7.01.tar.bz2\n#   Juman++\nRUN apk add boost-dev g++ make --update --no-cache --virtual=build-deps \\\n && wget -q http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz \\\n && tar Jxfv jumanpp-1.02.tar.xz \\\n && cd jumanpp-1.02/ \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm jumanpp-1.02.tar.xz \\\n && rm -rf /var/cache/* \\\n && apk del build-deps \\\n && apk add boost --update --no-cache\n#   kytea\nRUN wget http://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz \\\n && tar -xvf kytea-0.4.7.tar.gz \\\n && cd kytea-0.4.7 \\\n && ./configure \\\n && make \\\n && make install\n#   Python\nRUN apk add bash wget --no-cache \\\n && wget -q --no-check-certificate https://repo.continuum.io/miniconda/$MINICONDA \\\n && bash $MINICONDA -b -p /opt/conda \\\n && ln -s /opt/conda/bin/* /usr/local/bin/ \\\n && rm -rf /root/.[acpw]* $MINICONDA /opt/conda/pkgs/*\nRUN conda config --add channels conda-forge --system\nRUN conda create -y -n p27 python=2.7\nRUN conda create -y -n p37 python=3.7\nRUN mkdir /code\nRUN mkdir /code/dev\nCOPY requirements_py2.txt /code/dev/requirements_py2.txt\nCOPY requirements_py3.txt /code/dev/requirements_py3.txt\nRUN source activate p27 \\\n && pip install -r /code/dev/requirements_py2.txt\nRUN source deactivate\nRUN source activate p37 \\\n && pip install -r /code/dev/requirements_py3.txt\nRUN source deactivate\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM frolvlad/alpine-glibc:alpine-3.6\nMAINTAINER kensuke-mi <kensuke.mit@gmail.com>\n#  Mecab install\nENV MECAB_VERSION=\"0.996\"\nENV IPADIC_VERSION=\"2.7.0-20070801\"\nENV mecab_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7cENtOXlicTFaRUE\"\nENV ipadic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7MWVlSDBCSXZMTXM\"\nENV jumandic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7X2pESGlLREpxdXM\"\nENV unidic_url=\"https://unidic.ninjal.ac.jp/unidic_archive/cwj/2.3.0/unidic-cwj-2.3.0.zip\"\nENV build_deps=\"'curl git bash file sudo openssh gcc make build-base'\"\nENV dependencies=\"'openssl'\"\nENV PATH=\"/opt/conda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    MINICONDA=\"Miniconda3-latest-Linux-x86_64.sh\"\n#  apk update\nRUN apk update\n#  mecab\nRUN apk add --update --no-cache ${build_deps} \\\n && apk add --update --no-cache ${dependencies} \\\n && curl -SL -o mecab-${MECAB_VERSION}.tar.gz ${mecab_url} \\\n && tar zxf mecab-${MECAB_VERSION}.tar.gz \\\n && cd mecab-${MECAB_VERSION} \\\n && ./configure --enable-utf8-only --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && curl -SL -o mecab-ipadic-${IPADIC_VERSION}.tar.gz ${ipadic_url} \\\n && tar zxf mecab-ipadic-${IPADIC_VERSION}.tar.gz \\\n && cd mecab-ipadic-${IPADIC_VERSION} \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \\\n && mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n -y \\\n && curl -SL -o jumandic.tar.gz ${jumandic_url} \\\n && tar zxf jumandic.tar.gz \\\n && cd mecab-jumandic-7.0-20130310 \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && rm -rf mecab-${MECAB_VERSION}* mecab-${IPADIC_VERSION}* mecab-ipadic-neologd mecab-jumandic-7.0-20130310\n#  general\nRUN apk --no-cache add vim wget lsof curl bash swig gcc build-base make python-dev py-pip jpeg-dev zlib-dev git linux-headers\nENV LIBRARY_PATH=\"/lib:/usr/lib\"\nENV PLANTUML_VERSION=\"1.2017.18\"\nENV PLANTUML_DOWNLOAD_URL=\"https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download\"\nENV PANDOC_VERSION=\"1.19.2.4\"\nENV PANDOC_DOWNLOAD_URL=\"https://hackage.haskell.org/package/pandoc-$PANDOC_VERSION/pandoc-$PANDOC_VERSION.tar.gz\"\nENV PANDOC_ROOT=\"/usr/local/pandoc\"\nENV PATH=\"$PATH:$PANDOC_ROOT/bin\"\n#  Create Pandoc build space\nRUN mkdir -p /pandoc-build\nWORKDIR /pandoc-build\n#  Install/Build Packages\nRUN apk upgrade --update \\\n && apk add --no-cache --virtual .build-deps $BUILD_DEPS \\\n && apk add --no-cache --virtual .persistent-deps $PERSISTENT_DEPS \\\n && curl -fsSL \"$PLANTUML_DOWNLOAD_URL\" -o /usr/local/plantuml.jar \\\n && apk add --no-cache --virtual .edge-deps $EDGE_DEPS -X http://dl-cdn.alpinelinux.org/alpine/edge/community \\\n && curl -fsSL \"$PANDOC_DOWNLOAD_URL\" | tar -xzf - \\\n && (cd pandoc-$PANDOC_VERSION \\\n && cabal update \\\n && cabal install --only-dependencies \\\n && cabal configure --prefix=$PANDOC_ROOT \\\n && cabal build \\\n && cabal copy \\\n && cd .. ) \\\n && rm -Rf pandoc-$PANDOC_VERSION/ \\\n && rm -Rf /root/.cabal/ /root/.ghc/ \\\n && rmdir /pandoc-build \\\n && set -x ; addgroup -g 82 -S www-data ; adduser -u 82 -D -S -G www-data www-data \\\n && mkdir -p /var/docs \\\n && apk del .build-deps .edge-deps\n#  Juman\nRUN wget http://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2 \\\n && tar xvf juman-7.01.tar.bz2 \\\n && cd juman-7.01 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf juman-7.01 \\\n && rm juman-7.01.tar.bz2\n#  Juman++\nRUN apk add --update --no-cache --virtual=build-deps boost-dev g++ make \\\n && wget -q http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz \\\n && tar Jxfv jumanpp-1.02.tar.xz \\\n && cd jumanpp-1.02/ \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm jumanpp-1.02.tar.xz \\\n && rm -rf /var/cache/* \\\n && apk del build-deps \\\n && apk add --update --no-cache boost\n#  kytea\nRUN wget http://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz \\\n && tar -xvf kytea-0.4.7.tar.gz \\\n && cd kytea-0.4.7 \\\n && ./configure \\\n && make \\\n && make install\n#  Python\nRUN apk add --no-cache bash wget \\\n && wget -q --no-check-certificate https://repo.continuum.io/miniconda/$MINICONDA \\\n && bash $MINICONDA -b -p /opt/conda \\\n && ln -s /opt/conda/bin/* /usr/local/bin/ \\\n && rm -rf /root/.[acpw]* $MINICONDA /opt/conda/pkgs/*\nRUN conda config --add channels conda-forge --system\nRUN conda create -y -n p27 python=2.7\nRUN conda create -y -n p37 python=3.7\nRUN mkdir /code\nRUN mkdir /code/dev\nCOPY requirements_py2.txt /code/dev/requirements_py2.txt\nCOPY requirements_py3.txt /code/dev/requirements_py3.txt\nRUN source activate p27 \\\n && pip install -r /code/dev/requirements_py2.txt\nRUN source deactivate\nRUN source activate p37 \\\n && pip install -r /code/dev/requirements_py3.txt\nRUN source deactivate\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"7b0045680d850cbcd4a9f4c1735f21be","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM frolvlad/alpine-glibc:alpine-3.6\nMAINTAINER kensuke-mi <kensuke.mit@gmail.com>\n#   Mecab install\nENV MECAB_VERSION=\"0.996\"\nENV IPADIC_VERSION=\"2.7.0-20070801\"\nENV mecab_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7cENtOXlicTFaRUE\"\nENV ipadic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7MWVlSDBCSXZMTXM\"\nENV jumandic_url=\"https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7X2pESGlLREpxdXM\"\nENV unidic_url=\"https://unidic.ninjal.ac.jp/unidic_archive/cwj/2.3.0/unidic-cwj-2.3.0.zip\"\nENV build_deps=\"'curl git bash file sudo openssh gcc make build-base'\"\nENV dependencies=\"'openssl'\"\nENV PATH=\"/opt/conda/bin:$PATH\" \\\n    LANG=\"C.UTF-8\" \\\n    MINICONDA=\"Miniconda3-latest-Linux-x86_64.sh\"\n#   apk update\nRUN apk update\n#   mecab\nRUN apk add --update --no-cache ${build_deps} \\\n && apk add --update --no-cache ${dependencies} \\\n && curl -SL -o mecab-${MECAB_VERSION}.tar.gz ${mecab_url} \\\n && tar zxf mecab-${MECAB_VERSION}.tar.gz \\\n && cd mecab-${MECAB_VERSION} \\\n && ./configure --enable-utf8-only --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && curl -SL -o mecab-ipadic-${IPADIC_VERSION}.tar.gz ${ipadic_url} \\\n && tar zxf mecab-ipadic-${IPADIC_VERSION}.tar.gz \\\n && cd mecab-ipadic-${IPADIC_VERSION} \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git \\\n && mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n -y \\\n && curl -SL -o jumandic.tar.gz ${jumandic_url} \\\n && tar zxf jumandic.tar.gz \\\n && cd mecab-jumandic-7.0-20130310 \\\n && ./configure --with-charset=utf8 \\\n && make \\\n && make install \\\n && cd \\\n && rm -rf mecab-${MECAB_VERSION}* mecab-${IPADIC_VERSION}* mecab-ipadic-neologd mecab-jumandic-7.0-20130310\n#   general\nRUN apk --no-cache add vim wget lsof curl bash swig gcc build-base make python-dev py-pip jpeg-dev zlib-dev git linux-headers\nENV LIBRARY_PATH=\"/lib:/usr/lib\"\nENV PLANTUML_VERSION=\"1.2017.18\"\nENV PLANTUML_DOWNLOAD_URL=\"https://sourceforge.net/projects/plantuml/files/plantuml.$PLANTUML_VERSION.jar/download\"\nENV PANDOC_VERSION=\"1.19.2.4\"\nENV PANDOC_DOWNLOAD_URL=\"https://hackage.haskell.org/package/pandoc-$PANDOC_VERSION/pandoc-$PANDOC_VERSION.tar.gz\"\nENV PANDOC_ROOT=\"/usr/local/pandoc\"\nENV PATH=\"$PATH:$PANDOC_ROOT/bin\"\n#   Create Pandoc build space\nRUN mkdir -p /pandoc-build\nWORKDIR /pandoc-build\n#   Install/Build Packages\nRUN apk upgrade --update \\\n && apk add --no-cache --virtual .build-deps $BUILD_DEPS \\\n && apk add --no-cache --virtual .persistent-deps $PERSISTENT_DEPS \\\n && curl -fsSL \"$PLANTUML_DOWNLOAD_URL\" -o /usr/local/plantuml.jar \\\n && apk add --no-cache --virtual .edge-deps $EDGE_DEPS -X http://dl-cdn.alpinelinux.org/alpine/edge/community \\\n && curl -fsSL \"$PANDOC_DOWNLOAD_URL\" | tar -xzf - \\\n && (cd pandoc-$PANDOC_VERSION \\\n && cabal update \\\n && cabal install --only-dependencies \\\n && cabal configure --prefix=$PANDOC_ROOT \\\n && cabal build \\\n && cabal copy \\\n && cd .. ) \\\n && rm -Rf pandoc-$PANDOC_VERSION/ \\\n && rm -Rf /root/.cabal/ /root/.ghc/ \\\n && rmdir /pandoc-build \\\n && set -x ; addgroup -g 82 -S www-data ; adduser -u 82 -D -S -G www-data www-data \\\n && mkdir -p /var/docs \\\n && apk del .build-deps .edge-deps\n#   Juman\nRUN wget http://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2 \\\n && tar xvf juman-7.01.tar.bz2 \\\n && cd juman-7.01 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf juman-7.01 \\\n && rm juman-7.01.tar.bz2\n#   Juman++\nRUN apk add --update --no-cache --virtual=build-deps boost-dev g++ make \\\n && wget -q http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz \\\n && tar Jxfv jumanpp-1.02.tar.xz \\\n && cd jumanpp-1.02/ \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm jumanpp-1.02.tar.xz \\\n && rm -rf /var/cache/* \\\n && apk del build-deps \\\n && apk add --update --no-cache boost\n#   kytea\nRUN wget http://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz \\\n && tar -xvf kytea-0.4.7.tar.gz \\\n && cd kytea-0.4.7 \\\n && ./configure \\\n && make \\\n && make install\n#   Python\nRUN apk add --no-cache bash wget \\\n && wget -q --no-check-certificate https://repo.continuum.io/miniconda/$MINICONDA \\\n && bash $MINICONDA -b -p /opt/conda \\\n && ln -s /opt/conda/bin/* /usr/local/bin/ \\\n && rm -rf /root/.[acpw]* $MINICONDA /opt/conda/pkgs/*\nRUN conda config --add channels conda-forge --system\nRUN conda create -y -n p27 python=2.7\nRUN conda create -y -n p37 python=3.7\nRUN mkdir /code\nRUN mkdir /code/dev\nCOPY requirements_py2.txt /code/dev/requirements_py2.txt\nCOPY requirements_py3.txt /code/dev/requirements_py3.txt\nRUN source activate p27 \\\n && pip install -r /code/dev/requirements_py2.txt\nRUN source deactivate\nRUN source activate p37 \\\n && pip install -r /code/dev/requirements_py3.txt\nRUN source deactivate\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"231b505ce487fbd6372753f8a3b7736a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b23b1cfabc7b9eae803cfd2bdd3622e29fa42dcb.dockerfile"}