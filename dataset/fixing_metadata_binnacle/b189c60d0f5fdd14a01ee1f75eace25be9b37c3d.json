{"seed":1399883836,"processedDockerfileHash":"f426df0d6223555e2b1691b0e4fe1418","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.8\nMAINTAINER thetarkus\n#\n#   Installation\n#\nARG arch=amd64\nRUN echo 'installing dependencies' \\\n && apk add shadow=4.5-r0 gettext=0.19.8.1-r2 git=2.18.4-r0 postgresql=10.12-r0 postgresql-contrib=10.12-r0 postgresql-dev=10.12-r0 python3-dev=3.6.9-r1 py3-psycopg2=2.7.5-r0 py3-pillow=4.3.0-r0 redis=4.0.14-r0 nginx=1.14.2-r2 make=4.2.1-r2 musl-dev=1.1.19-r11 gcc=6.4.0-r9 unzip=6.0-r6 libldap=2.4.48-r1 libsasl=2.1.26-r15 ffmpeg=3.4.6-r0 libpq=10.12-r0 libmagic=5.32-r2 libffi-dev=3.2.1-r4 zlib-dev=1.2.11-r1 openldap-dev=2.4.48-r1 \\\n && echo 'creating directories' \\\n && mkdir -p /app /run/nginx /run/postgresql /var/log/funkwhale \\\n && echo 'creating users' \\\n && adduser -s /bin/false -D -H funkwhale funkwhale \\\n && echo 'downloading archives' \\\n && wget https://github.com/just-containers/s6-overlay/releases/download/v1.21.7.0/s6-overlay-$arch.tar.gz -O /tmp/s6-overlay.tar.gz \\\n && echo 'extracting archives' \\\n && cd /app \\\n && tar -C / -xzf /tmp/s6-overlay.tar.gz \\\n && echo 'setting up nginx' \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo 'removing temp files' \\\n && rm /tmp/*.tar.gz\nCOPY ./src/api /app/api\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && echo 'fixing requirements file for alpine' \\\n && sed -i '/Pillow/d' /app/api/requirements/base.txt \\\n && echo 'installing pip requirements' \\\n && pip3 install --upgrade pip \\\n && pip3 install setuptools wheel \\\n && pip3 install -r /app/api/requirements.txt \\\n && pip3 install gunicorn uvicorn\nCOPY ./src/front /app/front\n#\n#   Environment\n#   https://dev.funkwhale.audio/funkwhale/funkwhale/blob/develop/deploy/env.prod.sample\n#   (Environment is at the end to avoid busting build cache on each ENV change)\n#\nENV FUNKWHALE_HOSTNAME=\"yourdomain.funkwhale\" \\\n    FUNKWHALE_PROTOCOL=\"http\" \\\n    DJANGO_SETTINGS_MODULE=\"config.settings.production\" \\\n    DJANGO_SECRET_KEY=\"funkwhale\" \\\n    DJANGO_ALLOWED_HOSTS=\"127.0.0.1,*\" \\\n    DATABASE_URL=\"postgresql://funkwhale@:5432/funkwhale\" \\\n    MEDIA_ROOT=\"/data/media\" \\\n    MUSIC_DIRECTORY_PATH=\"/music\" \\\n    NGINX_MAX_BODY_SIZE=\"100M\" \\\n    STATIC_ROOT=\"/app/api/staticfiles\" \\\n    FUNKWHALE_SPA_HTML_ROOT=\"/app/front/dist/index.html\" \\\n    FUNKWHALE_WEB_WORKERS=\"1\"\n#\n#   Entrypoint\n#\nCOPY ./root /\nCOPY ./src/funkwhale_nginx.template /etc/nginx/funkwhale_nginx.template\nENTRYPOINT [\"/init\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.8\nMAINTAINER thetarkus\n#\n#  Installation\n#\nARG arch=amd64\nRUN echo 'installing dependencies' \\\n && apk add shadow gettext git postgresql postgresql-contrib postgresql-dev python3-dev py3-psycopg2 py3-pillow redis nginx make musl-dev gcc unzip libldap libsasl ffmpeg libpq libmagic libffi-dev zlib-dev openldap-dev \\\n && echo 'creating directories' \\\n && mkdir -p /app /run/nginx /run/postgresql /var/log/funkwhale \\\n && echo 'creating users' \\\n && adduser -s /bin/false -D -H funkwhale funkwhale \\\n && echo 'downloading archives' \\\n && wget https://github.com/just-containers/s6-overlay/releases/download/v1.21.7.0/s6-overlay-$arch.tar.gz -O /tmp/s6-overlay.tar.gz \\\n && echo 'extracting archives' \\\n && cd /app \\\n && tar -C / -xzf /tmp/s6-overlay.tar.gz \\\n && echo 'setting up nginx' \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo 'removing temp files' \\\n && rm /tmp/*.tar.gz\nCOPY ./src/api /app/api\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && echo 'fixing requirements file for alpine' \\\n && sed -i '/Pillow/d' /app/api/requirements/base.txt \\\n && echo 'installing pip requirements' \\\n && pip3 install --upgrade pip \\\n && pip3 install setuptools wheel \\\n && pip3 install -r /app/api/requirements.txt \\\n && pip3 install gunicorn uvicorn\nCOPY ./src/front /app/front\n#\n#  Environment\n#  https://dev.funkwhale.audio/funkwhale/funkwhale/blob/develop/deploy/env.prod.sample\n#  (Environment is at the end to avoid busting build cache on each ENV change)\n#\nENV FUNKWHALE_HOSTNAME=\"yourdomain.funkwhale\" \\\n    FUNKWHALE_PROTOCOL=\"http\" \\\n    DJANGO_SETTINGS_MODULE=\"config.settings.production\" \\\n    DJANGO_SECRET_KEY=\"funkwhale\" \\\n    DJANGO_ALLOWED_HOSTS=\"127.0.0.1,*\" \\\n    DATABASE_URL=\"postgresql://funkwhale@:5432/funkwhale\" \\\n    MEDIA_ROOT=\"/data/media\" \\\n    MUSIC_DIRECTORY_PATH=\"/music\" \\\n    NGINX_MAX_BODY_SIZE=\"100M\" \\\n    STATIC_ROOT=\"/app/api/staticfiles\" \\\n    FUNKWHALE_SPA_HTML_ROOT=\"/app/front/dist/index.html\" \\\n    FUNKWHALE_WEB_WORKERS=\"1\"\n#\n#  Entrypoint\n#\nCOPY ./root /\nCOPY ./src/funkwhale_nginx.template /etc/nginx/funkwhale_nginx.template\nENTRYPOINT [\"/init\"]\n","injectedSmells":[],"originalDockerfileHash":"0304549540b7d53dae746bdd5370883c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.8\nMAINTAINER thetarkus\n#\n#   Installation\n#\nARG arch=amd64\nRUN echo 'installing dependencies' \\\n && apk add shadow gettext git postgresql postgresql-contrib postgresql-dev python3-dev py3-psycopg2 py3-pillow redis nginx make musl-dev gcc unzip libldap libsasl ffmpeg libpq libmagic libffi-dev zlib-dev openldap-dev \\\n && echo 'creating directories' \\\n && mkdir -p /app /run/nginx /run/postgresql /var/log/funkwhale \\\n && echo 'creating users' \\\n && adduser -s /bin/false -D -H funkwhale funkwhale \\\n && echo 'downloading archives' \\\n && wget https://github.com/just-containers/s6-overlay/releases/download/v1.21.7.0/s6-overlay-$arch.tar.gz -O /tmp/s6-overlay.tar.gz \\\n && echo 'extracting archives' \\\n && cd /app \\\n && tar -C / -xzf /tmp/s6-overlay.tar.gz \\\n && echo 'setting up nginx' \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo 'removing temp files' \\\n && rm /tmp/*.tar.gz\nCOPY ./src/api /app/api\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && echo 'fixing requirements file for alpine' \\\n && sed -i '/Pillow/d' /app/api/requirements/base.txt \\\n && echo 'installing pip requirements' \\\n && pip3 install --upgrade pip \\\n && pip3 install setuptools wheel \\\n && pip3 install -r /app/api/requirements.txt \\\n && pip3 install gunicorn uvicorn\nCOPY ./src/front /app/front\n#\n#   Environment\n#   https://dev.funkwhale.audio/funkwhale/funkwhale/blob/develop/deploy/env.prod.sample\n#   (Environment is at the end to avoid busting build cache on each ENV change)\n#\nENV FUNKWHALE_HOSTNAME=\"yourdomain.funkwhale\" \\\n    FUNKWHALE_PROTOCOL=\"http\" \\\n    DJANGO_SETTINGS_MODULE=\"config.settings.production\" \\\n    DJANGO_SECRET_KEY=\"funkwhale\" \\\n    DJANGO_ALLOWED_HOSTS=\"127.0.0.1,*\" \\\n    DATABASE_URL=\"postgresql://funkwhale@:5432/funkwhale\" \\\n    MEDIA_ROOT=\"/data/media\" \\\n    MUSIC_DIRECTORY_PATH=\"/music\" \\\n    NGINX_MAX_BODY_SIZE=\"100M\" \\\n    STATIC_ROOT=\"/app/api/staticfiles\" \\\n    FUNKWHALE_SPA_HTML_ROOT=\"/app/front/dist/index.html\" \\\n    FUNKWHALE_WEB_WORKERS=\"1\"\n#\n#   Entrypoint\n#\nCOPY ./root /\nCOPY ./src/funkwhale_nginx.template /etc/nginx/funkwhale_nginx.template\nENTRYPOINT [\"/init\"]\n","originalDockerfileUglifiedHash":"98d6725e7c7cf6863cd53c2a48b3f5a2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b189c60d0f5fdd14a01ee1f75eace25be9b37c3d.dockerfile"}