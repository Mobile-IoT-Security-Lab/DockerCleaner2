{"seed":4294032327,"processedDockerfileHash":"e4d45f635e18a957e40e6fa7b49051d8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   We need the CUDA base dockerfile to enable GPU rendering\n#   on hosts with GPUs.\n#   The image below is a pinned version of nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04 (from Jan 2018)\n#   If updating the base image, be sure to test on GPU since it has broken in the past.\nFROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev software-properties-common net-tools unzip vim virtualenv wget xpra xserver-xorg-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN DEBIAN_FRONTEND=noninteractive add-apt-repository --yes ppa:deadsnakes/ppa \\\n && :\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --yes python3.5-dev python3.5 python3-pip\nRUN virtualenv --python=python3.5 env\nRUN rm /usr/bin/python\nRUN ln -s /env/bin/python3.5 /usr/bin/python\nRUN ln -s /env/bin/pip3.5 /usr/bin/pip\nRUN ln -s /env/bin/pytest /usr/bin/pytest\nRUN curl -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n && chmod +x /usr/local/bin/patchelf\nENV LANG=\"C.UTF-8\"\nRUN mkdir -p /root/.mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \\\n && unzip mujoco.zip -d /root/.mujoco \\\n && rm mujoco.zip\nCOPY ./mjkey.txt /root/.mujoco/\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nCOPY vendor/Xdummy /usr/local/bin/Xdummy\nRUN chmod +x /usr/local/bin/Xdummy\n#   Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677\nCOPY ./vendor/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libav-tools -y )\n#   For some reason this works despite an error showing up...\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qy install nvidia-384 ; exit 0\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-384\"\nRUN mkdir /root/code\nWORKDIR /root/code\nWORKDIR /mujoco_py\n#   For atari-py\nRUN (apt-get update ;apt-get install --no-install-recommends zlib1g-dev swig cmake -y )\n#   Previous versions installed from a requirements.txt, but direct pip\n#   install seems cleaner\nRUN pip install glfw==2.5.9 > =1.4.0\nRUN pip install numpy==1.24.2 > =1.11\nRUN pip install Cython==0.29.34 > =0.27.2\nRUN pip install imageio==2.27.0 > =2.1.2\nRUN pip install cffi==1.15.1 > =1.10\nRUN pip install imagehash==4.3.1 > =3.4\nRUN pip install ipdb==0.13.13\nRUN pip install Pillow==9.5.0 > =4.0.0\nRUN pip install pycparser==2.21 > =2.17.0\nRUN pip install pytest==7.3.1 > =3.0.5\nRUN pip install pytest-instafail==0.3.0\nRUN pip install scipy==1.10.1 > =0.18.0\nRUN pip install sphinx==6.1.3\nRUN pip install sphinx_rtd_theme==1.2.0\nRUN pip install numpydoc==1.5.0\nRUN pip install cloudpickle==0.5.2\nRUN pip install cached-property==1.3.1\nRUN pip install gym[all]==0.10.5\nRUN pip install gitpython==2.1.7\nRUN pip install gtimer==1.0.0b5\nRUN pip install awscli==1.11.179\nRUN pip install boto3==1.4.8\nRUN pip install ray==0.2.2\nRUN pip install path.py==10.3.1\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.4.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install joblib==0.9.4\nRUN pip install opencv-python==3.4.0.12\nRUN pip install torchvision==0.2.0\nRUN pip install sk-video==1.1.10\nRUN pip install git+https://github.com/vitchyr/multiworld.git\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  We need the CUDA base dockerfile to enable GPU rendering\n#  on hosts with GPUs.\n#  The image below is a pinned version of nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04 (from Jan 2018)\n#  If updating the base image, be sure to test on GPU since it has broken in the past.\nFROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nRUN apt-get update -q \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev software-properties-common net-tools unzip vim virtualenv wget xpra xserver-xorg-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN DEBIAN_FRONTEND=noninteractive add-apt-repository --yes ppa:deadsnakes/ppa \\\n && apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --yes python3.5-dev python3.5 python3-pip\nRUN virtualenv --python=python3.5 env\nRUN rm /usr/bin/python\nRUN ln -s /env/bin/python3.5 /usr/bin/python\nRUN ln -s /env/bin/pip3.5 /usr/bin/pip\nRUN ln -s /env/bin/pytest /usr/bin/pytest\nRUN curl -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n && chmod +x /usr/local/bin/patchelf\nENV LANG=\"C.UTF-8\"\nRUN mkdir -p /root/.mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \\\n && unzip mujoco.zip -d /root/.mujoco \\\n && rm mujoco.zip\nCOPY ./mjkey.txt /root/.mujoco/\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nCOPY vendor/Xdummy /usr/local/bin/Xdummy\nRUN chmod +x /usr/local/bin/Xdummy\n#  Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677\nCOPY ./vendor/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN apt-get update \\\n && apt-get install libav-tools -y\n#  For some reason this works despite an error showing up...\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qy install nvidia-384 ; exit 0\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-384\"\nRUN mkdir /root/code\nWORKDIR /root/code\nWORKDIR /mujoco_py\n#  For atari-py\nRUN apt-get install zlib1g-dev swig cmake -y\n#  Previous versions installed from a requirements.txt, but direct pip\n#  install seems cleaner\nRUN pip install glfw > =1.4.0\nRUN pip install numpy > =1.11\nRUN pip install Cython > =0.27.2\nRUN pip install imageio > =2.1.2\nRUN pip install cffi > =1.10\nRUN pip install imagehash > =3.4\nRUN pip install ipdb\nRUN pip install Pillow > =4.0.0\nRUN pip install pycparser > =2.17.0\nRUN pip install pytest > =3.0.5\nRUN pip install pytest-instafail==0.3.0\nRUN pip install scipy > =0.18.0\nRUN pip install sphinx\nRUN pip install sphinx_rtd_theme\nRUN pip install numpydoc\nRUN pip install cloudpickle==0.5.2\nRUN pip install cached-property==1.3.1\nRUN pip install gym[all]==0.10.5\nRUN pip install gitpython==2.1.7\nRUN pip install gtimer==1.0.0b5\nRUN pip install awscli==1.11.179\nRUN pip install boto3==1.4.8\nRUN pip install ray==0.2.2\nRUN pip install path.py==10.3.1\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.4.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install joblib==0.9.4\nRUN pip install opencv-python==3.4.0.12\nRUN pip install torchvision==0.2.0\nRUN pip install sk-video==1.1.10\nRUN pip install git+https://github.com/vitchyr/multiworld.git\n","injectedSmells":[],"originalDockerfileHash":"c8767f121fd05e0a5d36c930fff1bbc7","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   We need the CUDA base dockerfile to enable GPU rendering\n#   on hosts with GPUs.\n#   The image below is a pinned version of nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04 (from Jan 2018)\n#   If updating the base image, be sure to test on GPU since it has broken in the past.\nFROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nRUN apt-get update -q \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y curl git libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev software-properties-common net-tools unzip vim virtualenv wget xpra xserver-xorg-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN DEBIAN_FRONTEND=noninteractive add-apt-repository --yes ppa:deadsnakes/ppa \\\n && apt-get update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --yes python3.5-dev python3.5 python3-pip\nRUN virtualenv --python=python3.5 env\nRUN rm /usr/bin/python\nRUN ln -s /env/bin/python3.5 /usr/bin/python\nRUN ln -s /env/bin/pip3.5 /usr/bin/pip\nRUN ln -s /env/bin/pytest /usr/bin/pytest\nRUN curl -o /usr/local/bin/patchelf https://s3-us-west-2.amazonaws.com/openai-sci-artifacts/manual-builds/patchelf_0.9_amd64.elf \\\n && chmod +x /usr/local/bin/patchelf\nENV LANG=\"C.UTF-8\"\nRUN mkdir -p /root/.mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip -O mujoco.zip \\\n && unzip mujoco.zip -d /root/.mujoco \\\n && rm mujoco.zip\nCOPY ./mjkey.txt /root/.mujoco/\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nCOPY vendor/Xdummy /usr/local/bin/Xdummy\nRUN chmod +x /usr/local/bin/Xdummy\n#   Workaround for https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-375/+bug/1674677\nCOPY ./vendor/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN apt-get update \\\n && apt-get install libav-tools -y\n#   For some reason this works despite an error showing up...\nRUN DEBIAN_FRONTEND=noninteractive apt-get -qy install nvidia-384 ; exit 0\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-384\"\nRUN mkdir /root/code\nWORKDIR /root/code\nWORKDIR /mujoco_py\n#   For atari-py\nRUN apt-get install zlib1g-dev swig cmake -y\n#   Previous versions installed from a requirements.txt, but direct pip\n#   install seems cleaner\nRUN pip install glfw > =1.4.0\nRUN pip install numpy > =1.11\nRUN pip install Cython > =0.27.2\nRUN pip install imageio > =2.1.2\nRUN pip install cffi > =1.10\nRUN pip install imagehash > =3.4\nRUN pip install ipdb\nRUN pip install Pillow > =4.0.0\nRUN pip install pycparser > =2.17.0\nRUN pip install pytest > =3.0.5\nRUN pip install pytest-instafail==0.3.0\nRUN pip install scipy > =0.18.0\nRUN pip install sphinx\nRUN pip install sphinx_rtd_theme\nRUN pip install numpydoc\nRUN pip install cloudpickle==0.5.2\nRUN pip install cached-property==1.3.1\nRUN pip install gym[all]==0.10.5\nRUN pip install gitpython==2.1.7\nRUN pip install gtimer==1.0.0b5\nRUN pip install awscli==1.11.179\nRUN pip install boto3==1.4.8\nRUN pip install ray==0.2.2\nRUN pip install path.py==10.3.1\nRUN pip install http://download.pytorch.org/whl/cu90/torch-0.4.1-cp35-cp35m-linux_x86_64.whl\nRUN pip install joblib==0.9.4\nRUN pip install opencv-python==3.4.0.12\nRUN pip install torchvision==0.2.0\nRUN pip install sk-video==1.1.10\nRUN pip install git+https://github.com/vitchyr/multiworld.git\n","originalDockerfileUglifiedHash":"27aae43c467314cf68f74a5b33208e1b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6d11153e9f305460225c3d169adfaab2140048e1.dockerfile"}