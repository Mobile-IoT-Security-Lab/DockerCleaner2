{"seed":3026147901,"processedDockerfileHash":"18a20a0f03627d38423270333381b57d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","have-a-healthcheck"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jon Krohn <jon@untapt.com>\nENV PATH=\"/usr/local/cuda-8.0/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:${LD_LIBRARY_PATH}\"\n#  # from core/Dockerfile-gpu\n#   Setup locales\nRUN apt-get clean \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends locales -y )\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   Purge existing python installs\nRUN apt-get purge -y python.*\n#   Install prereqs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential checkinstall wget bzip2 ca-certificates sudo locales fonts-liberation \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  # below mostly from jupyter/minimal-notebook (there's a bit of it in the line above too) \n#  # -- see https://github.com/jupyter/docker-stacks/blob/master/LICENSE.md\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\n#   Create jovyan user with UID=1000 and in the 'users' group \nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.7.*' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY installation/docker-stack-scripts/start.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-notebook.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-singleuser.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#  # the next chunk of code is from jupyter/minimal-notebook \n#   Install all OS dependencies for fully functional notebook server\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential emacs git inkscape jed libsm6 libxext-dev libxrender1 lmodern pandoc python-dev texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended texlive-latex-base texlive-latex-extra texlive-xetex vim unzip -yq ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  # the next chunk of code is from jupyter/scipy-notebook\n#   libav-tools for matplotlib anim\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libav-tools -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER $NB_USER\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\"\nUSER $NB_USER\n#  # Install TensorFlow for GPU\nRUN conda install --quiet --yes 'tensorflow-gpu=1.0*'\n#  # Install high-level TensorFlow APIs\nRUN pip install tflearn==0.3.2\nRUN pip install keras==2.0.8\n#  # Install NLP packages\nRUN pip install nltk==3.2.4\nRUN pip install gensim==2.3.0\n#   install Reinforcement Learning packages:\nRUN pip install gym==0.9.4\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jon Krohn <jon@untapt.com>\nENV PATH=\"/usr/local/cuda-8.0/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:${LD_LIBRARY_PATH}\"\n# # from core/Dockerfile-gpu\n#  Setup locales\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install locales -y\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  Purge existing python installs\nRUN apt-get purge -y python.*\n#  Install prereqs\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential checkinstall wget bzip2 ca-certificates sudo locales fonts-liberation \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# # below mostly from jupyter/minimal-notebook (there's a bit of it in the line above too) \n# # -- see https://github.com/jupyter/docker-stacks/blob/master/LICENSE.md\n#  Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#  Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\n#  Create jovyan user with UID=1000 and in the 'users' group \nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#  Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#  Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#  Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.7.*' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#  Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#  Add local files as late as possible to avoid cache busting\nCOPY installation/docker-stack-scripts/start.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-notebook.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-singleuser.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n# # the next chunk of code is from jupyter/minimal-notebook \n#  Install all OS dependencies for fully functional notebook server\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential emacs git inkscape jed libsm6 libxext-dev libxrender1 lmodern pandoc python-dev texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended texlive-latex-base texlive-latex-extra texlive-xetex vim unzip -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# # the next chunk of code is from jupyter/scipy-notebook\n#  libav-tools for matplotlib anim\nRUN apt-get update \\\n && apt-get install --no-install-recommends libav-tools -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER $NB_USER\n#  Install Python 3 packages\n#  Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#  use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#  Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\n#  Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\"\nUSER $NB_USER\n# # Install TensorFlow for GPU\nRUN conda install --quiet --yes 'tensorflow-gpu=1.0*'\n# # Install high-level TensorFlow APIs\nRUN pip install tflearn==0.3.2\nRUN pip install keras==2.0.8\n# # Install NLP packages\nRUN pip install nltk==3.2.4\nRUN pip install gensim==2.3.0\n#  install Reinforcement Learning packages:\nRUN pip install gym==0.9.4\n","injectedSmells":[],"originalDockerfileHash":"ebfe0557a4e6708694efe164b45f5a3d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jon Krohn <jon@untapt.com>\nENV PATH=\"/usr/local/cuda-8.0/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda-8.0/lib64:${LD_LIBRARY_PATH}\"\n#  # from core/Dockerfile-gpu\n#   Setup locales\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install locales -y\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   Purge existing python installs\nRUN apt-get purge -y python.*\n#   Install prereqs\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential checkinstall wget bzip2 ca-certificates sudo locales fonts-liberation \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  # below mostly from jupyter/minimal-notebook (there's a bit of it in the line above too) \n#  # -- see https://github.com/jupyter/docker-stacks/blob/master/LICENSE.md\n#   Install Tini\nRUN wget --quiet https://github.com/krallin/tini/releases/download/v0.10.0/tini \\\n && echo \"1361527f39190a7338a0b434bd8c88ff7233ce7b9a4876f3315c22fce7eca1b0 *tini\" | sha256sum -c - \\\n && mv tini /usr/local/bin/tini \\\n && chmod +x /usr/local/bin/tini\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\n#   Create jovyan user with UID=1000 and in the 'users' group \nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER \\\n && mkdir -p $CONDA_DIR \\\n && chown $NB_USER $CONDA_DIR\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\n#   Install conda as jovyan and check the md5 sum provided on the download site\nENV MINICONDA_VERSION=\"4.3.21\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && echo \"c1c15d3baba15bf50293ae963abef853 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh\" | md5sum -c - \\\n && /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda config --system --prepend channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && $CONDA_DIR/bin/conda config --system --set show_channel_urls true \\\n && $CONDA_DIR/bin/conda update --all \\\n && conda clean -tipsy\n#   Install Jupyter Notebook and Hub\nRUN conda install --quiet --yes 'notebook=5.0.*' 'jupyterhub=0.7.*' 'jupyterlab=0.24.*' \\\n && conda clean -tipsy\nUSER root\nEXPOSE 8888/tcp\nWORKDIR $HOME\n#   Configure container startup\nENTRYPOINT [\"tini\", \"--\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting\nCOPY installation/docker-stack-scripts/start.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-notebook.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/start-singleuser.sh /usr/local/bin/\nCOPY installation/docker-stack-scripts/jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#  # the next chunk of code is from jupyter/minimal-notebook \n#   Install all OS dependencies for fully functional notebook server\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential emacs git inkscape jed libsm6 libxext-dev libxrender1 lmodern pandoc python-dev texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended texlive-latex-base texlive-latex-extra texlive-xetex vim unzip -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  # the next chunk of code is from jupyter/scipy-notebook\n#   libav-tools for matplotlib anim\nRUN apt-get update \\\n && apt-get install --no-install-recommends libav-tools -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nUSER $NB_USER\n#   Install Python 3 packages\n#   Remove pyqt and qt pulled in for matplotlib since we're only ever going to\n#   use notebook-friendly backends in these images\nRUN conda install --quiet --yes 'nomkl' 'ipywidgets=6.0*' 'pandas=0.19*' 'numexpr=2.6*' 'matplotlib=2.0*' 'scipy=0.19*' 'seaborn=0.7*' 'scikit-learn=0.18*' 'scikit-image=0.12*' 'sympy=1.0*' 'cython=0.25*' 'patsy=0.4*' 'statsmodels=0.8*' 'cloudpickle=0.2*' 'dill=0.2*' 'numba=0.31*' 'bokeh=0.12*' 'sqlalchemy=1.1*' 'hdf5=1.8.17' 'h5py=2.6*' 'vincent=0.4.*' 'beautifulsoup4=4.5.*' 'xlrd' \\\n && conda remove --quiet --yes --force qt pyqt \\\n && conda clean -tipsy\n#   Activate ipywidgets extension in the environment that runs the notebook server\nRUN jupyter nbextension enable --py widgetsnbextension --sys-prefix\n#   Import matplotlib the first time to build the font cache.\nENV XDG_CACHE_HOME=\"/home/$NB_USER/.cache/\"\nRUN MPLBACKEND=Agg python -c \"import matplotlib.pyplot\"\nUSER $NB_USER\n#  # Install TensorFlow for GPU\nRUN conda install --quiet --yes 'tensorflow-gpu=1.0*'\n#  # Install high-level TensorFlow APIs\nRUN pip install tflearn==0.3.2\nRUN pip install keras==2.0.8\n#  # Install NLP packages\nRUN pip install nltk==3.2.4\nRUN pip install gensim==2.3.0\n#   install Reinforcement Learning packages:\nRUN pip install gym==0.9.4\n","originalDockerfileUglifiedHash":"07c9c294f828c91ce18e755045b9ab2a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2486d4221c731e35d6367c65f796f017a55e831b.dockerfile"}