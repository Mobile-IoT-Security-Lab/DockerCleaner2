{"seed":4105865356,"processedDockerfileHash":"6c59145815e11a94a50f92ce3a0127f3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG HUMHUB_VERSION=1.3.13\nFROM composer:1.7 AS builder-composer\nFROM alpine:3.8 AS builder\nARG HUMHUB_VERSION\nRUN apk update\nRUN apk add ca-certificates=20191127-r2 tzdata=2021a-r0 wget=1.20.3-r0 --no-cache\nWORKDIR /usr/src/\nRUN wget https://github.com/humhub/humhub/archive/v${HUMHUB_VERSION}.tar.gz -q -O humhub.tar.gz \\\n && tar xzf humhub.tar.gz \\\n && mv humhub-${HUMHUB_VERSION} humhub \\\n && rm humhub.tar.gz\nWORKDIR /usr/src/humhub\nCOPY --from=builder-composer /usr/bin/composer /usr/bin/composer\nRUN chmod +x /usr/bin/composer\nRUN apk add php7=7.3.14-r0 php7-gd=7.3.14-r0 php7-ldap=7.3.14-r0 php7-json=7.3.14-r0 php7-phar=7.3.14-r0 php7-iconv=7.3.14-r0 php7-openssl=7.3.14-r0 php7-curl=7.3.14-r0 php7-ctype=7.3.14-r0 php7-dom=7.3.14-r0 php7-mbstring=7.3.14-r0 php7-simplexml=7.3.14-r0 php7-xml=7.3.14-r0 php7-xmlreader=7.3.14-r0 php7-xmlwriter=7.3.14-r0 php7-zip=7.3.14-r0 php7-fileinfo=7.3.14-r0 --no-cache\nRUN composer install --no-ansi --no-dev --no-interaction --no-progress --no-scripts --optimize-autoloader \\\n && chmod +x protected/yii \\\n && chmod +x protected/yii.bat\nRUN apk add nodejs=10.24.1-r0 npm=10.24.1-r0 --no-cache\nRUN npm install grunt@1.6.1\nRUN npm install grunt-cli@1.4.3 -g\nRUN apk add php7-pdo_mysql=7.3.14-r0 --no-cache\nRUN grunt build-assets\nRUN rm -rf ./node_modules\nFROM alpine:3.8\nARG HUMHUB_VERSION\nRUN apk add curl=7.66.0-r4 ca-certificates=20191127-r2 tzdata=2021a-r0 php7=7.3.14-r0 php7-fpm=7.3.14-r0 php7-pdo_mysql=7.3.14-r0 php7-gd=7.3.14-r0 php7-ldap=7.3.14-r0 php7-json=7.3.14-r0 php7-phar=7.3.14-r0 php7-iconv=7.3.14-r0 php7-openssl=7.3.14-r0 php7-curl=7.3.14-r0 php7-ctype=7.3.14-r0 php7-dom=7.3.14-r0 php7-mbstring=7.3.14-r0 php7-simplexml=7.3.14-r0 php7-xml=7.3.14-r0 php7-xmlreader=7.3.14-r0 php7-xmlwriter=7.3.14-r0 php7-zip=7.3.14-r0 php7-sqlite3=7.3.14-r0 php7-intl=7.3.14-r0 php7-apcu php7-exif=7.3.14-r0 php7-fileinfo=7.3.14-r0 php7-session=7.3.14-r0 supervisor=3.3.5-r0 nginx=1.16.1-r3 sqlite=3.28.0-r3 --no-cache \\\n && rm -rf /var/cache/apk/*\nRUN BUILD_DEPS=\"gettext\" RUNTIME_DEPS=\"libintl\" \\\n && set -x \\\n && apk add $RUNTIME_DEPS --no-cache --update \\\n && apk add $BUILD_DEPS --no-cache --virtual build_deps \\\n && cp /usr/bin/envsubst /usr/local/bin/envsubst \\\n && apk del build_deps\nENV PHP_POST_MAX_SIZE=\"10M\"\nENV PHP_UPLOAD_MAX_FILESIZE=\"10M\"\nENV PHP_MAX_EXECUTION_TIME=\"60\"\nENV PHP_MEMORY_LIMIT=\"512M\"\nRUN chown -R nginx:nginx /var/lib/nginx/ \\\n && touch /var/run/supervisor.sock \\\n && chmod 777 /var/run/supervisor.sock\nCOPY --chown=nginx:nginx --from=builder /usr/src/humhub /var/www/localhost/htdocs/\nCOPY --chown=nginx:nginx humhub/ /var/www/localhost/htdocs/\nRUN mkdir -p /usr/src/humhub/protected/config/ \\\n && cp -R /var/www/localhost/htdocs/protected/config/* /usr/src/humhub/protected/config/ \\\n && echo \"v${HUMHUB_VERSION}\" > /usr/src/humhub/.version\nCOPY etc/ /etc/\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod 600 /etc/crontabs/nginx \\\n && chmod +x /usr/local/bin/docker-entrypoint.sh\nVOLUME /var/www/localhost/htdocs/uploads\nVOLUME /var/www/localhost/htdocs/protected/config\nVOLUME /var/www/localhost/htdocs/protected/modules\nEXPOSE 80/tcp\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG HUMHUB_VERSION=1.3.13\nFROM composer:1.7 AS builder-composer\nFROM alpine:3.8 AS builder\nARG HUMHUB_VERSION\nRUN apk update\nRUN apk add --no-cache ca-certificates tzdata wget\nWORKDIR /usr/src/\nRUN wget https://github.com/humhub/humhub/archive/v${HUMHUB_VERSION}.tar.gz -q -O humhub.tar.gz \\\n && tar xzf humhub.tar.gz \\\n && mv humhub-${HUMHUB_VERSION} humhub \\\n && rm humhub.tar.gz\nWORKDIR /usr/src/humhub\nCOPY --from=builder-composer /usr/bin/composer /usr/bin/composer\nRUN chmod +x /usr/bin/composer\nRUN apk add --no-cache php7 php7-gd php7-ldap php7-json php7-phar php7-iconv php7-openssl php7-curl php7-ctype php7-dom php7-mbstring php7-simplexml php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-fileinfo\nRUN composer install --no-ansi --no-dev --no-interaction --no-progress --no-scripts --optimize-autoloader \\\n && chmod +x protected/yii \\\n && chmod +x protected/yii.bat\nRUN apk add --no-cache nodejs npm\nRUN npm install grunt\nRUN npm install grunt-cli -g\nRUN apk add --no-cache php7-pdo_mysql\nRUN grunt build-assets\nRUN rm -rf ./node_modules\nFROM alpine:3.8\nARG HUMHUB_VERSION\nRUN apk add --no-cache curl ca-certificates tzdata php7 php7-fpm php7-pdo_mysql php7-gd php7-ldap php7-json php7-phar php7-iconv php7-openssl php7-curl php7-ctype php7-dom php7-mbstring php7-simplexml php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-sqlite3 php7-intl php7-apcu php7-exif php7-fileinfo php7-session supervisor nginx sqlite \\\n && rm -rf /var/cache/apk/*\nRUN BUILD_DEPS=\"gettext\" RUNTIME_DEPS=\"libintl\" \\\n && set -x \\\n && apk add --no-cache --update $RUNTIME_DEPS \\\n && apk add --no-cache --virtual build_deps $BUILD_DEPS \\\n && cp /usr/bin/envsubst /usr/local/bin/envsubst \\\n && apk del build_deps\nENV PHP_POST_MAX_SIZE=\"10M\"\nENV PHP_UPLOAD_MAX_FILESIZE=\"10M\"\nENV PHP_MAX_EXECUTION_TIME=\"60\"\nENV PHP_MEMORY_LIMIT=\"512M\"\nRUN chown -R nginx:nginx /var/lib/nginx/ \\\n && touch /var/run/supervisor.sock \\\n && chmod 777 /var/run/supervisor.sock\nCOPY --chown=nginx:nginx --from=builder /usr/src/humhub /var/www/localhost/htdocs/\nCOPY --chown=nginx:nginx humhub/ /var/www/localhost/htdocs/\nRUN mkdir -p /usr/src/humhub/protected/config/ \\\n && cp -R /var/www/localhost/htdocs/protected/config/* /usr/src/humhub/protected/config/ \\\n && echo \"v${HUMHUB_VERSION}\" > /usr/src/humhub/.version\nCOPY etc/ /etc/\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod 600 /etc/crontabs/nginx \\\n && chmod +x /usr/local/bin/docker-entrypoint.sh\nVOLUME /var/www/localhost/htdocs/uploads\nVOLUME /var/www/localhost/htdocs/protected/config\nVOLUME /var/www/localhost/htdocs/protected/modules\nEXPOSE 80/tcp\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"3fa5bcdbb28f6b91f8af1abaf4ba888c","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG HUMHUB_VERSION=1.3.13\nFROM composer:1.7 AS builder-composer\nFROM alpine:3.8 AS builder\nARG HUMHUB_VERSION\nRUN apk update\nRUN apk add --no-cache ca-certificates tzdata wget\nWORKDIR /usr/src/\nRUN wget https://github.com/humhub/humhub/archive/v${HUMHUB_VERSION}.tar.gz -q -O humhub.tar.gz \\\n && tar xzf humhub.tar.gz \\\n && mv humhub-${HUMHUB_VERSION} humhub \\\n && rm humhub.tar.gz\nWORKDIR /usr/src/humhub\nCOPY --from=builder-composer /usr/bin/composer /usr/bin/composer\nRUN chmod +x /usr/bin/composer\nRUN apk add --no-cache php7 php7-gd php7-ldap php7-json php7-phar php7-iconv php7-openssl php7-curl php7-ctype php7-dom php7-mbstring php7-simplexml php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-fileinfo\nRUN composer install --no-ansi --no-dev --no-interaction --no-progress --no-scripts --optimize-autoloader \\\n && chmod +x protected/yii \\\n && chmod +x protected/yii.bat\nRUN apk add --no-cache nodejs npm\nRUN npm install grunt\nRUN npm install grunt-cli -g\nRUN apk add --no-cache php7-pdo_mysql\nRUN grunt build-assets\nRUN rm -rf ./node_modules\nFROM alpine:3.8\nARG HUMHUB_VERSION\nRUN apk add --no-cache curl ca-certificates tzdata php7 php7-fpm php7-pdo_mysql php7-gd php7-ldap php7-json php7-phar php7-iconv php7-openssl php7-curl php7-ctype php7-dom php7-mbstring php7-simplexml php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-sqlite3 php7-intl php7-apcu php7-exif php7-fileinfo php7-session supervisor nginx sqlite \\\n && rm -rf /var/cache/apk/*\nRUN BUILD_DEPS=\"gettext\" RUNTIME_DEPS=\"libintl\" \\\n && set -x \\\n && apk add --no-cache --update $RUNTIME_DEPS \\\n && apk add --no-cache --virtual build_deps $BUILD_DEPS \\\n && cp /usr/bin/envsubst /usr/local/bin/envsubst \\\n && apk del build_deps\nENV PHP_POST_MAX_SIZE=\"10M\"\nENV PHP_UPLOAD_MAX_FILESIZE=\"10M\"\nENV PHP_MAX_EXECUTION_TIME=\"60\"\nENV PHP_MEMORY_LIMIT=\"512M\"\nRUN chown -R nginx:nginx /var/lib/nginx/ \\\n && touch /var/run/supervisor.sock \\\n && chmod 777 /var/run/supervisor.sock\nCOPY --chown=nginx:nginx --from=builder /usr/src/humhub /var/www/localhost/htdocs/\nCOPY --chown=nginx:nginx humhub/ /var/www/localhost/htdocs/\nRUN mkdir -p /usr/src/humhub/protected/config/ \\\n && cp -R /var/www/localhost/htdocs/protected/config/* /usr/src/humhub/protected/config/ \\\n && echo \"v${HUMHUB_VERSION}\" > /usr/src/humhub/.version\nCOPY etc/ /etc/\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nRUN chmod 600 /etc/crontabs/nginx \\\n && chmod +x /usr/local/bin/docker-entrypoint.sh\nVOLUME /var/www/localhost/htdocs/uploads\nVOLUME /var/www/localhost/htdocs/protected/config\nVOLUME /var/www/localhost/htdocs/protected/modules\nEXPOSE 80/tcp\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\n","originalDockerfileUglifiedHash":"3fa5bcdbb28f6b91f8af1abaf4ba888c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/22e23a7657fa255028a116c658178589d51021c1.dockerfile"}