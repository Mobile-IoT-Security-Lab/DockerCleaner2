{"seed":3510466107,"processedDockerfileHash":"5d747dcadf181ca7989cac6f98334493","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG JL_VERSION_BASE=0.6\nARG JL_VERSION_PATCH=4\nARG JL_VERSION=$JL_VERSION_BASE.$JL_VERSION_PATCH\nFROM octech/lambdajl:$JL_VERSION\nARG JL_VERSION\nARG JL_VERSION_BASE\n#   For https://github.com/samoconnor/InfoZIP.jl\nENV HAVE_INFOZIP=\"1\"\n#   Install required Julia packages.\nCOPY REQUIRE /var/task/julia/v$JL_VERSION_BASE/\nRUN julia -e 'Pkg.update(); Pkg.resolve()'\n#   Replace AWSLambda.jl with current version\nCOPY AWSLambda.jl /var/task/julia/v$JL_VERSION_BASE/AWSLambda/src/\n#   Install AWS Lambda entry point scripts.\nCOPY AWSLambdaWrapper.jl module_jl_lambda_eval.jl /var/task/julia/v$JL_VERSION_BASE/\n#   Recompile sys.so with required packages.\nRUN mkdir -p /tmp/julia/sys \\\n && julia -e ' open(\"/tmp/julia/userimg.jl\", \"w\") do f; println(f,\"using AWSLambdaWrapper\"); println(f,\"using module_jl_lambda_eval\"); for p in eachline(joinpath(Pkg.dir(), \"REQUIRE\")) println(f, \"using $p\") end end' \\\n && julia /var/task/share/julia/build_sysimg.jl /tmp/julia/sys core-avx-i /tmp/julia/userimg.jl\nRUN cp /tmp/julia/sys.so /var/task/lib/julia/ \\\n && rm /var/task/julia/lib/v$JL_VERSION_BASE/*.ji\n#   Remove unnecessary files.\nRUN find julia -name '.git' -o -name '.cache' -o -name '.travis.yml' -o -name '.gitignore' -o -name 'REQUIRE' -o -name 'LICENSE' -o -name 'test' -o -path '*/deps/usr/downloads' -o -path '*/deps/usr/manifests' -o -path '*/deps/downloads' -o -path '*/deps/builds' -o -path '*/deps/src' -o -path '*/deps/usr/logs' -o -path '*/JSON/data' -o\nFROM lambci/lambda:build-python2.7\nCOPY --from=0 /var/task/ /var/task-build/\n#   Copy julia binary and libraries to /var/task-staging.\nRUN mkdir -p /var/task/bin \\\n && mkdir -p /var/task/lib/julia \\\n && mkdir -p /var/task/share/julia\nRUN cp /var/task-build/bin/julia bin/ \\\n && cp /usr/bin/zip bin/ \\\n && cp -a /var/task-build/lib/julia/*.so* lib/julia/ \\\n && rm -f lib/julia/*-debug.so* \\\n && cp -a /var/task-build/lib/*.so* lib/ \\\n && rm -f lib/*-debug.so* \\\n && cp -a /usr/lib64/libgfortran.so* lib/ \\\n && cp -a /usr/lib64/libquadmath.so* lib/ \\\n && cp -a /var/task-build/julia . \\\n && cp -a /var/task-build/share/julia/cert.pem share/julia/\nCOPY lambda_function.py lambda_config.py ./\n#   FIXME Remove \"|| true\" When MbedTLS stripping fix is released.\n#   https://github.com/JuliaWeb/MbedTLS.jl/issues/140\nRUN for f in $( find . -name '*.so' ;); do strip $f || true ; done\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG JL_VERSION_BASE=0.6\nARG JL_VERSION_PATCH=4\nARG JL_VERSION=$JL_VERSION_BASE.$JL_VERSION_PATCH\nFROM octech/lambdajl:$JL_VERSION\nARG JL_VERSION\nARG JL_VERSION_BASE\n#  For https://github.com/samoconnor/InfoZIP.jl\nENV HAVE_INFOZIP=\"1\"\n#  Install required Julia packages.\nCOPY REQUIRE /var/task/julia/v$JL_VERSION_BASE/\nRUN julia -e 'Pkg.update(); Pkg.resolve()'\n#  Replace AWSLambda.jl with current version\nCOPY AWSLambda.jl /var/task/julia/v$JL_VERSION_BASE/AWSLambda/src/\n#  Install AWS Lambda entry point scripts.\nCOPY AWSLambdaWrapper.jl module_jl_lambda_eval.jl /var/task/julia/v$JL_VERSION_BASE/\n#  Recompile sys.so with required packages.\nRUN mkdir -p /tmp/julia/sys \\\n && julia -e ' open(\"/tmp/julia/userimg.jl\", \"w\") do f; println(f,\"using AWSLambdaWrapper\"); println(f,\"using module_jl_lambda_eval\"); for p in eachline(joinpath(Pkg.dir(), \"REQUIRE\")) println(f, \"using $p\") end end' \\\n && julia /var/task/share/julia/build_sysimg.jl /tmp/julia/sys core-avx-i /tmp/julia/userimg.jl\nRUN cp /tmp/julia/sys.so /var/task/lib/julia/ \\\n && rm /var/task/julia/lib/v$JL_VERSION_BASE/*.ji\n#  Remove unnecessary files.\nRUN find julia -name '.git' -o -name '.cache' -o -name '.travis.yml' -o -name '.gitignore' -o -name 'REQUIRE' -o -name 'LICENSE' -o -name 'test' -o -path '*/deps/usr/downloads' -o -path '*/deps/usr/manifests' -o -path '*/deps/downloads' -o -path '*/deps/builds' -o -path '*/deps/src' -o -path '*/deps/usr/logs' -o -path '*/JSON/data' -o ( -type f -path '*/deps/src/*' ! -name '*.so.*' ) -o ( -type f -path 'julia/*' -name '*.jl' ) -o -path '*/deps/usr/include' -o -path '*/deps/usr/bin' -o -path '*/deps/usr/lib/*.a' -o -name 'doc' -o -name 'docs' -o -name 'examples' -o -name '*.md' -o -name '*.yml' -o -name '*.toml' -o -name '*.tar.gz' -o -name 'METADATA' -o -name 'META_BRANCH' | xargs rm -rf\nFROM lambci/lambda:build-python2.7\nCOPY --from=0 /var/task/ /var/task-build/\n#  Copy julia binary and libraries to /var/task-staging.\nRUN mkdir -p /var/task/bin \\\n && mkdir -p /var/task/lib/julia \\\n && mkdir -p /var/task/share/julia\nRUN cp /var/task-build/bin/julia bin/ \\\n && cp /usr/bin/zip bin/ \\\n && cp -a /var/task-build/lib/julia/*.so* lib/julia/ \\\n && rm -f lib/julia/*-debug.so* \\\n && cp -a /var/task-build/lib/*.so* lib/ \\\n && rm -f lib/*-debug.so* \\\n && cp -a /usr/lib64/libgfortran.so* lib/ \\\n && cp -a /usr/lib64/libquadmath.so* lib/ \\\n && cp -a /var/task-build/julia . \\\n && cp -a /var/task-build/share/julia/cert.pem share/julia/\nCOPY lambda_function.py lambda_config.py ./\n#  FIXME Remove \"|| true\" When MbedTLS stripping fix is released.\n#  https://github.com/JuliaWeb/MbedTLS.jl/issues/140\nRUN for f in $( find . -name '*.so' ;); do strip $f || true ; done\n","injectedSmells":[],"originalDockerfileHash":"67447feab096bb90a7e535cdd13d763b","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG JL_VERSION_BASE=0.6\nARG JL_VERSION_PATCH=4\nARG JL_VERSION=$JL_VERSION_BASE.$JL_VERSION_PATCH\nFROM octech/lambdajl:$JL_VERSION\nARG JL_VERSION\nARG JL_VERSION_BASE\n#   For https://github.com/samoconnor/InfoZIP.jl\nENV HAVE_INFOZIP=\"1\"\n#   Install required Julia packages.\nCOPY REQUIRE /var/task/julia/v$JL_VERSION_BASE/\nRUN julia -e 'Pkg.update(); Pkg.resolve()'\n#   Replace AWSLambda.jl with current version\nCOPY AWSLambda.jl /var/task/julia/v$JL_VERSION_BASE/AWSLambda/src/\n#   Install AWS Lambda entry point scripts.\nCOPY AWSLambdaWrapper.jl module_jl_lambda_eval.jl /var/task/julia/v$JL_VERSION_BASE/\n#   Recompile sys.so with required packages.\nRUN mkdir -p /tmp/julia/sys \\\n && julia -e ' open(\"/tmp/julia/userimg.jl\", \"w\") do f; println(f,\"using AWSLambdaWrapper\"); println(f,\"using module_jl_lambda_eval\"); for p in eachline(joinpath(Pkg.dir(), \"REQUIRE\")) println(f, \"using $p\") end end' \\\n && julia /var/task/share/julia/build_sysimg.jl /tmp/julia/sys core-avx-i /tmp/julia/userimg.jl\nRUN cp /tmp/julia/sys.so /var/task/lib/julia/ \\\n && rm /var/task/julia/lib/v$JL_VERSION_BASE/*.ji\n#   Remove unnecessary files.\nRUN find julia -name '.git' -o -name '.cache' -o -name '.travis.yml' -o -name '.gitignore' -o -name 'REQUIRE' -o -name 'LICENSE' -o -name 'test' -o -path '*/deps/usr/downloads' -o -path '*/deps/usr/manifests' -o -path '*/deps/downloads' -o -path '*/deps/builds' -o -path '*/deps/src' -o -path '*/deps/usr/logs' -o -path '*/JSON/data' -o\nFROM lambci/lambda:build-python2.7\nCOPY --from=0 /var/task/ /var/task-build/\n#   Copy julia binary and libraries to /var/task-staging.\nRUN mkdir -p /var/task/bin \\\n && mkdir -p /var/task/lib/julia \\\n && mkdir -p /var/task/share/julia\nRUN cp /var/task-build/bin/julia bin/ \\\n && cp /usr/bin/zip bin/ \\\n && cp -a /var/task-build/lib/julia/*.so* lib/julia/ \\\n && rm -f lib/julia/*-debug.so* \\\n && cp -a /var/task-build/lib/*.so* lib/ \\\n && rm -f lib/*-debug.so* \\\n && cp -a /usr/lib64/libgfortran.so* lib/ \\\n && cp -a /usr/lib64/libquadmath.so* lib/ \\\n && cp -a /var/task-build/julia . \\\n && cp -a /var/task-build/share/julia/cert.pem share/julia/\nCOPY lambda_function.py lambda_config.py ./\n#   FIXME Remove \"|| true\" When MbedTLS stripping fix is released.\n#   https://github.com/JuliaWeb/MbedTLS.jl/issues/140\nRUN for f in $( find . -name '*.so' ;); do strip $f || true ; done\n","originalDockerfileUglifiedHash":"3760592a596c3d193bdb71c0cfae99a1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5bd8328f522286ca723517387123aca1c6c84056.dockerfile"}