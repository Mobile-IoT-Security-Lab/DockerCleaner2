{"seed":210397955,"processedDockerfileHash":"dc2997967b8cfb882ab7255e235f18bc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker on aarch64, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.aarch64 .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:xenial\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor=2.10.95-0ubuntu2.11 aufs-tools=1:3.2+20130722-1.1ubuntu1 automake=1:1.15-4ubuntu1 bash-completion=1:2.1-4.2ubuntu1.1 btrfs-tools=4.4-1ubuntu1.1 build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 createrepo=0.10.3-1 curl=7.47.0-1ubuntu2.19 dpkg-sig=0.13.1+nmu2 g++=4:5.3.1-1ubuntu1 gcc=4:5.3.1-1ubuntu1 git=1:2.7.4-0ubuntu1.10 iptables=1.6.0-2ubuntu3 jq=1.5+dfsg-1ubuntu0.1 libapparmor-dev=2.10.95-0ubuntu2.11 libc6-dev=2.23-0ubuntu11.3 libcap-dev=1:2.24-12 libltdl-dev=2.4.6-0.1 libsystemd-dev=229-4ubuntu21.31 libyaml-dev=0.1.6-3 mercurial=3.7.3-1ubuntu1.2 net-tools=1.60-26ubuntu1 parallel=20161222-1~ubuntu0.16.04.1 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.12-1~16.04 python-mock=1.3.0-2.1ubuntu1 python-pip=8.1.1-2ubuntu0.6 python-setuptools=20.7.0-1 python-websocket=0.18.0-2 golang-go=2:1.6-1ubuntu4 iproute2=4.3.0-1ubuntu3.16.04.5 iputils-ping=3:20121221-5ubuntu2 vim-common=2:7.4.1689-3ubuntu1.5 -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   We don't have official binary golang 1.7.5 tarballs for ARM64, eigher for Go or\n#   bootstrap, so we use golang-go (1.6) as bootstrap to build Go from source code.\n#   We don't use the official ARMv6 released binaries as a GOROOT_BOOTSTRAP, because\n#   not all ARM64 platforms support 32-bit mode. 32-bit mode is optional for ARMv8.\n#   IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/go/bin:/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Only install one version of the registry, because old version which support\n#   schema1 manifests is not working on ARM64, we should skip integration-cli\n#   tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"4a08d04aef0595322e1b5ac7c52f28a931da85a5\"\n#   Before running the integration tests conftest.py is\n#   loaded which results in loads auth.py that\n#   imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install wheel==0.40.0 \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:107f4a96837ed89c493fc205cd28508ed0b6b680b4bf3e514e9f0fa0f6667b77 aarch64/busybox:latest@sha256:5a06b8b2fdf22dd1f4085c6c3efd23ee99af01b2d668d286bc4be6d8baa10efb aarch64/debian:jessie@sha256:e6f90b568631705bd5cb27490977378ba762792b38d47c91c4da7a539f63079a aarch64/hello-world:latest@sha256:bd1722550b97668b23ede297abf824d4855f4d9f600dab7b4db1a963dae7ec9e\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker on aarch64, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker -f Dockerfile.aarch64 .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:xenial\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential cmake createrepo curl dpkg-sig g++ gcc git iptables jq libapparmor-dev libc6-dev libcap-dev libltdl-dev libsystemd-dev libyaml-dev mercurial net-tools parallel pkg-config python-dev python-mock python-pip python-setuptools python-websocket golang-go iproute2 iputils-ping vim-common -y\n#  Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  Fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#  \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#  Install Go\n#  We don't have official binary golang 1.7.5 tarballs for ARM64, eigher for Go or\n#  bootstrap, so we use golang-go (1.6) as bootstrap to build Go from source code.\n#  We don't use the official ARMv6 released binaries as a GOROOT_BOOTSTRAP, because\n#  not all ARM64 platforms support 32-bit mode. 32-bit mode is optional for ARMv8.\n#  IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/go/bin:/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#  Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  Only install one version of the registry, because old version which support\n#  schema1 manifests is not working on ARM64, we should skip integration-cli\n#  tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"4a08d04aef0595322e1b5ac7c52f28a931da85a5\"\n#  Before running the integration tests conftest.py is\n#  loaded which results in loads auth.py that\n#  imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install wheel \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#  Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#  Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:107f4a96837ed89c493fc205cd28508ed0b6b680b4bf3e514e9f0fa0f6667b77 aarch64/busybox:latest@sha256:5a06b8b2fdf22dd1f4085c6c3efd23ee99af01b2d668d286bc4be6d8baa10efb aarch64/debian:jessie@sha256:e6f90b568631705bd5cb27490977378ba762792b38d47c91c4da7a539f63079a aarch64/hello-world:latest@sha256:bd1722550b97668b23ede297abf824d4855f4d9f600dab7b4db1a963dae7ec9e\n#  See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#  Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#  Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"0f505af08356a006f47da4170c8a6b03","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker on aarch64, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.aarch64 .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:xenial\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential cmake createrepo curl dpkg-sig g++ gcc git iptables jq libapparmor-dev libc6-dev libcap-dev libltdl-dev libsystemd-dev libyaml-dev mercurial net-tools parallel pkg-config python-dev python-mock python-pip python-setuptools python-websocket golang-go iproute2 iputils-ping vim-common -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install seccomp: the version shipped upstream is too old\nENV SECCOMP_VERSION=\"2.3.2\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   We don't have official binary golang 1.7.5 tarballs for ARM64, eigher for Go or\n#   bootstrap, so we use golang-go (1.6) as bootstrap to build Go from source code.\n#   We don't use the official ARMv6 released binaries as a GOROOT_BOOTSTRAP, because\n#   not all ARM64 platforms support 32-bit mode. 32-bit mode is optional for ARMv8.\n#   IMPORTANT: When updating this please note that stdlib archive/tar pkg is vendored\nENV GO_VERSION=\"1.8.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/go/bin:/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Only install one version of the registry, because old version which support\n#   schema1 manifests is not working on ARM64, we should skip integration-cli\n#   tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"4a08d04aef0595322e1b5ac7c52f28a931da85a5\"\n#   Before running the integration tests conftest.py is\n#   loaded which results in loads auth.py that\n#   imports the docker-pycreds module.\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install wheel \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:107f4a96837ed89c493fc205cd28508ed0b6b680b4bf3e514e9f0fa0f6667b77 aarch64/busybox:latest@sha256:5a06b8b2fdf22dd1f4085c6c3efd23ee99af01b2d668d286bc4be6d8baa10efb aarch64/debian:jessie@sha256:e6f90b568631705bd5cb27490977378ba762792b38d47c91c4da7a539f63079a aarch64/hello-world:latest@sha256:bd1722550b97668b23ede297abf824d4855f4d9f600dab7b4db1a963dae7ec9e\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy dockercli\nENV PATH=\"/usr/local/cli:$PATH\"\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"64a0e9745081e5a0474f85ef6edad7d0","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/34ad58f88370dd38e31439eb0e254a0d06be57e0.dockerfile"}