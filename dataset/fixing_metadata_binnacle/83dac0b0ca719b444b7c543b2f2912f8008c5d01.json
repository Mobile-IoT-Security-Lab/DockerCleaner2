{"seed":2636482372,"processedDockerfileHash":"4630717eaba1f4958b27fc2840bf163a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER Jeremiah Harmsen <jeremiah@google.com>\nMAINTAINER Samuel Cozannet <samuel.cozannet@madeden.com>\n#   This is an evolution of the Dockerfile.devel published by Google for Tensorflow. \n#   It adds building the server in the container at the end as documented in \n#   https://tensorflow.github.io/serving/serving_inception\n#   then we moved to \nENV PORT=\"8500\"\nENV MODEL_NAME=\"inception\"\nENV MODEL_PATH=\"/var/tensorflow/output\"\nENV BATCHING=\"--enable_batching\"\n#   build variables for serving\nENV PYTHON_BIN_PATH=\"/usr/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nENV CC_OPT_FLAGS=\"-march=native\"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"0\"\nENV TF_NEED_HDFS=\"0\"\nENV TF_ENABLE_XLA=\"0\"\nENV TF_NEED_OPENCL=\"0\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_CUDA_VERSION=\"v8.0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=11.6ubuntu6 curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 libfreetype6-dev=2.5.2-1ubuntu2.8 libpng12-dev=1.2.50-1ubuntu2.14.04.3 libzmq3-dev=4.0.4+dfsg-2ubuntu0.1 pkg-config=0.26-1ubuntu4 python-dev=2.7.5-5ubuntu3 python-numpy=1:1.8.2-0ubuntu0.1 python-pip=1.5.4-1ubuntu4 software-properties-common=0.92.37.8 swig=2.0.11-1ubuntu2 zip=3.0-8 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libcurl3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Set up grpc\nRUN pip install enum34==1.1.10 futures==3.4.0 mock==5.0.2 six==1.16.0 \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio==1.53.0 -i https://testpypi.python.org/simple --pre\n#   Set up Bazel.\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   PYTHON_BIN_PATH=/usr/bin/python PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages CC_OPT_FLAGS=\"-march=native\" TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_ENABLE_XLA=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_CUDA_VERSION=v8.0 ./configure \nRUN git clone --recurse-submodules https://github.com/tensorflow/serving /serving \\\n && cd /serving/tensorflow \\\n && ./configure \\\n && cd .. \\\n && bazel build -c opt tensorflow_serving/...\nCMD [\"/serving/bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server\", \"--port=${PORT}\", \"${BATCHING}\", \"--model_name=${MODEL_NAME}\", \"--model_base_path=${MODEL_PATH}\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER Jeremiah Harmsen <jeremiah@google.com>\nMAINTAINER Samuel Cozannet <samuel.cozannet@madeden.com>\n#  This is an evolution of the Dockerfile.devel published by Google for Tensorflow. \n#  It adds building the server in the container at the end as documented in \n#  https://tensorflow.github.io/serving/serving_inception\n#  then we moved to \nENV PORT=\"8500\"\nENV MODEL_NAME=\"inception\"\nENV MODEL_PATH=\"/var/tensorflow/output\"\nENV BATCHING=\"--enable_batching\"\n#  build variables for serving\nENV PYTHON_BIN_PATH=\"/usr/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nENV CC_OPT_FLAGS=\"-march=native\"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"0\"\nENV TF_NEED_HDFS=\"0\"\nENV TF_ENABLE_XLA=\"0\"\nENV TF_NEED_OPENCL=\"0\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_CUDA_VERSION=\"v8.0\"\nRUN apt-get update \\\n && apt-get install build-essential curl git libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-numpy python-pip software-properties-common swig zip zlib1g-dev libcurl3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre\n#  Set up Bazel.\n#  We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#  have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#  Matthias Klose (https://launchpad.net/~doko).  It will do until\n#  we either update the base image beyond 14.04 or openjdk-8 is\n#  finally backported to trusty; see e.g.\n#    https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  PYTHON_BIN_PATH=/usr/bin/python PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages CC_OPT_FLAGS=\"-march=native\" TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_ENABLE_XLA=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_CUDA_VERSION=v8.0 ./configure \nRUN git clone --recurse-submodules https://github.com/tensorflow/serving /serving \\\n && cd /serving/tensorflow \\\n && ./configure \\\n && cd .. \\\n && bazel build -c opt tensorflow_serving/...\nCMD [\"/serving/bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server\", \"--port=${PORT}\", \"${BATCHING}\", \"--model_name=${MODEL_NAME}\", \"--model_base_path=${MODEL_PATH}\"]\n","injectedSmells":[],"originalDockerfileHash":"30ea2d05d522ceb4010909349d258744","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER Jeremiah Harmsen <jeremiah@google.com>\nMAINTAINER Samuel Cozannet <samuel.cozannet@madeden.com>\n#   This is an evolution of the Dockerfile.devel published by Google for Tensorflow. \n#   It adds building the server in the container at the end as documented in \n#   https://tensorflow.github.io/serving/serving_inception\n#   then we moved to \nENV PORT=\"8500\"\nENV MODEL_NAME=\"inception\"\nENV MODEL_PATH=\"/var/tensorflow/output\"\nENV BATCHING=\"--enable_batching\"\n#   build variables for serving\nENV PYTHON_BIN_PATH=\"/usr/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nENV CC_OPT_FLAGS=\"-march=native\"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"0\"\nENV TF_NEED_HDFS=\"0\"\nENV TF_ENABLE_XLA=\"0\"\nENV TF_NEED_OPENCL=\"0\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_CUDA_VERSION=\"v8.0\"\nRUN apt-get update \\\n && apt-get install build-essential curl git libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-numpy python-pip software-properties-common swig zip zlib1g-dev libcurl3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre\n#   Set up Bazel.\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /root/.bazelrc\nENV BAZELRC=\"/root/.bazelrc\"\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   PYTHON_BIN_PATH=/usr/bin/python PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages CC_OPT_FLAGS=\"-march=native\" TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_ENABLE_XLA=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_CUDA_VERSION=v8.0 ./configure \nRUN git clone --recurse-submodules https://github.com/tensorflow/serving /serving \\\n && cd /serving/tensorflow \\\n && ./configure \\\n && cd .. \\\n && bazel build -c opt tensorflow_serving/...\nCMD [\"/serving/bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server\", \"--port=${PORT}\", \"${BATCHING}\", \"--model_name=${MODEL_NAME}\", \"--model_base_path=${MODEL_PATH}\"]\n","originalDockerfileUglifiedHash":"3f25889859c6e512aa6d37e3771a8800","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/83dac0b0ca719b444b7c543b2f2912f8008c5d01.dockerfile"}