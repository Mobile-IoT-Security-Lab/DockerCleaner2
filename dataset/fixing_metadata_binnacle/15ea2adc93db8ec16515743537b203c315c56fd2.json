{"seed":3844266182,"processedDockerfileHash":"83694785a30dc55d2d15536df400e7c2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jnaneshwar Das <jnaneshwar.das@gmail.com> / Matt Schmittle <schmttle@udel.edu> / Abhijeet Singh <abhsingh@seas.upenn.edu>\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends apt-utils git build-essential curl geographiclib-tools libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless uwsgi uwsgi-src uwsgi-plugin-python3 python-pip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip==23.1 --upgrade\nRUN mkdir ros-setups\nCOPY ros-setups ros-setups/\nRUN ros-setups/ubuntu-16/setup-ros.sh\nRUN ros-setups/ubuntu-16/setup-mavlink-mavros.sh\nRUN ros-setups/ubuntu-16/setup-install.sh\nRUN ros-setups/ubuntu-16/setup-gym-gzweb-uavnav.sh\n#  RUN git clone https://github.com/schmittlema/ros-setups.git && cd ros-setups/ubuntu-16 && ./setup-ros.sh && ./setup-mavlink-mavros.sh && ./setup-install.sh && ./setup-gym-gzweb-uavnav.sh\n#  Turtlebot modules hack \n#  RUN mkdir /lib/modules\n#  COPY lib/. /lib/modules\n#  RUN ls /lib/modules\nRUN pip install pip==23.1 virtualenv==20.21.0 --no-cache-dir --upgrade --upgrade\nRUN pip install ipykernel==6.22.0 jupyter==1.0.0 matplotlib==3.7.1 numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Don't need Jupyter\n#   Set up our notebook config.\n#  COPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\n#  COPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\n#  RUN git clone https://github.com/tensorflow/tensorflow.git && \\\n#      cd tensorflow && \\\n#      git checkout r1.2\n#  WORKDIR /tensorflow\n#   For Nivida\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nRUN cd ~/src/Firmware \\\n && git remote add openuav-master https://github.com/Open-UAV/Firmware \\\n && git pull openuav-master master\nRUN echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.profile \\\n && echo \"export GAZEBO_PLUGIN_PATH=:/root/src/Firmware/Tools/sitl_gazebo/Build\" >> ~/.profile \\\n && echo \"export GAZEBO_MODEL_PATH=:/root/src/Firmware/Tools/sitl_gazebo/models\" >> ~/.profile \\\n && echo \"export GAZEBO_RESOURCE_PATH=:/root/src/Firmware/Tools/sitl_gazebo/media\" >> ~/.profile \\\n && echo \"export PYTHONPATH=/root/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/jade/lib/python2.7/dist-packages\" >> ~/.profile\nRUN echo \"installing ROS image packages\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-web-video-server ros-kinetic-image-geometry ros-kinetic-image-transport-plugins ros-kinetic-image-proc -y\nRUN apt-get install --no-install-recommends ros-kinetic-opencv-apps ros-kinetic-tf2-geometry-msgs ros-kinetic-rosbridge* -y\n#  RUN apt-get update && apt-get install -y ros-kinetic-turtlebot \\\n#  \tros-kinetic-turtlebot-simulator \\\n#  \tros-kinetic-turtlebot-apps\nRUN cd ~/catkin_ws/src \\\n && git clone https://github.com/RIVeR-Lab/apriltags_ros.git\nRUN cd ~/catkin_ws \\\n && catkin build\nCOPY install_geographiclib_datasets.sh /home/\nRUN cd /home \\\n && chmod +x install_geographiclib_datasets.sh \\\n && ./install_geographiclib_datasets.sh\nRUN sed -i '/force_color_prompt/s/^#//g' ~/.bashrc\n#   for mavros global position in GPS to UTM conversions \nRUN apt-get install --no-install-recommends ros-kinetic-geodesy ros-kinetic-hector-gazebo -y\n#  ## Django set up to expose various states from the simulation container\nRUN apt-get install --no-install-recommends python3-pip -y\nRUN pip3 --no-cache-dir install Django\nRUN mkdir /django\nRUN django-admin startproject DjangoProject /django\nRUN python3 /django/manage.py startapp query\nCOPY django_files/project_urls.py /django/DjangoProject/urls.py\nCOPY django_files/query_urls.py /django/query/urls.py\nCOPY django_files/query_view.py /django/query/views.py\nRUN sed -i '/ALLOWED_HOSTS/c\\ALLOWED_HOSTS = ['''*''']' /django/DjangoProject/settings.py\n#  ## Django set up to expose various states from the simulation container\n#   Wetty - web tty\n#  RUN mkdir /wetty\n#  RUN npm install wetty\n#   Adding user term and giving permissions\n#  RUN useradd -d /simulation -m -s /bin/bash term\n#  RUN echo 'term:term' | chpasswd\n#  RUN chmod -R 777 /root/src && chmod -R 777 /root/catkin_ws && \\\n#      chmod -R 777 /simulation && \\\n#      chmod -R 777 /opt/ros\n#  RUN find /root -type d -exec chmod 755 {} \\;\n#  RUN sed -i 's/LOGIN_TIMEOUT\\t\\t60/LOGIN_TIMEOUT\\t\\t7000/g' /etc/login.defs\n#   Ensure the setup.sh is in the last, so that we can build again quickly if setup changes\nCOPY setup.sh /home/\nRUN chmod +x /home/setup.sh\nRUN mkdir /home/term\nRUN cp ~/.profile /home/term/\nRUN cp ~/.profile /home/\nRUN pip uninstall -y tornado\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jnaneshwar Das <jnaneshwar.das@gmail.com> / Matt Schmittle <schmttle@udel.edu> / Abhijeet Singh <abhsingh@seas.upenn.edu>\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends apt-utils git build-essential curl geographiclib-tools libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless uwsgi uwsgi-src uwsgi-plugin-python3 python-pip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip --upgrade\nRUN mkdir ros-setups\nCOPY ros-setups ros-setups/\nRUN ros-setups/ubuntu-16/setup-ros.sh\nRUN ros-setups/ubuntu-16/setup-mavlink-mavros.sh\nRUN ros-setups/ubuntu-16/setup-install.sh\nRUN ros-setups/ubuntu-16/setup-gym-gzweb-uavnav.sh\n# RUN git clone https://github.com/schmittlema/ros-setups.git && cd ros-setups/ubuntu-16 && ./setup-ros.sh && ./setup-mavlink-mavros.sh && ./setup-install.sh && ./setup-gym-gzweb-uavnav.sh\n# Turtlebot modules hack \n# RUN mkdir /lib/modules\n# COPY lib/. /lib/modules\n# RUN ls /lib/modules\nRUN pip install pip virtualenv --no-cache-dir --upgrade --upgrade\nRUN pip install ipykernel jupyter matplotlib numpy scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n# Don't need Jupyter\n#  Set up our notebook config.\n# COPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly:\n#    https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\n# COPY run_jupyter.sh /\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\n# RUN git clone https://github.com/tensorflow/tensorflow.git && \\\n#     cd tensorflow && \\\n#     git checkout r1.2\n# WORKDIR /tensorflow\n#  For Nivida\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nRUN cd ~/src/Firmware \\\n && git remote add openuav-master https://github.com/Open-UAV/Firmware \\\n && git pull openuav-master master\nRUN echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.profile \\\n && echo \"export GAZEBO_PLUGIN_PATH=:/root/src/Firmware/Tools/sitl_gazebo/Build\" >> ~/.profile \\\n && echo \"export GAZEBO_MODEL_PATH=:/root/src/Firmware/Tools/sitl_gazebo/models\" >> ~/.profile \\\n && echo \"export GAZEBO_RESOURCE_PATH=:/root/src/Firmware/Tools/sitl_gazebo/media\" >> ~/.profile \\\n && echo \"export PYTHONPATH=/root/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/jade/lib/python2.7/dist-packages\" >> ~/.profile\nRUN echo \"installing ROS image packages\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-web-video-server ros-kinetic-image-geometry ros-kinetic-image-transport-plugins ros-kinetic-image-proc -y\nRUN apt-get install ros-kinetic-opencv-apps ros-kinetic-tf2-geometry-msgs ros-kinetic-rosbridge* -y\n# RUN apt-get update && apt-get install -y ros-kinetic-turtlebot \\\n# \tros-kinetic-turtlebot-simulator \\\n# \tros-kinetic-turtlebot-apps\nRUN cd ~/catkin_ws/src \\\n && git clone https://github.com/RIVeR-Lab/apriltags_ros.git\nRUN cd ~/catkin_ws \\\n && catkin build\nADD install_geographiclib_datasets.sh /home/\nRUN cd /home \\\n && chmod +x install_geographiclib_datasets.sh \\\n && ./install_geographiclib_datasets.sh\nRUN sed -i '/force_color_prompt/s/^#//g' ~/.bashrc\n#  for mavros global position in GPS to UTM conversions \nRUN apt-get install ros-kinetic-geodesy ros-kinetic-hector-gazebo -y\n# ## Django set up to expose various states from the simulation container\nRUN apt-get install python3-pip -y\nRUN pip3 --no-cache-dir install Django\nRUN mkdir /django\nRUN django-admin startproject DjangoProject /django\nRUN python3 /django/manage.py startapp query\nCOPY django_files/project_urls.py /django/DjangoProject/urls.py\nCOPY django_files/query_urls.py /django/query/urls.py\nCOPY django_files/query_view.py /django/query/views.py\nRUN sed -i '/ALLOWED_HOSTS/c\\ALLOWED_HOSTS = ['''*''']' /django/DjangoProject/settings.py\n# ## Django set up to expose various states from the simulation container\n#  Wetty - web tty\n# RUN mkdir /wetty\n# RUN npm install wetty\n#  Adding user term and giving permissions\n# RUN useradd -d /simulation -m -s /bin/bash term\n# RUN echo 'term:term' | chpasswd\n# RUN chmod -R 777 /root/src && chmod -R 777 /root/catkin_ws && \\\n#     chmod -R 777 /simulation && \\\n#     chmod -R 777 /opt/ros\n# RUN find /root -type d -exec chmod 755 {} \\;\n# RUN sed -i 's/LOGIN_TIMEOUT\\t\\t60/LOGIN_TIMEOUT\\t\\t7000/g' /etc/login.defs\n#  Ensure the setup.sh is in the last, so that we can build again quickly if setup changes\nADD setup.sh /home/\nRUN chmod +x /home/setup.sh\nRUN mkdir /home/term\nRUN cp ~/.profile /home/term/\nRUN cp ~/.profile /home/\nRUN pip uninstall -y tornado\n","injectedSmells":[],"originalDockerfileHash":"f79791118855210f800c9824e522d8c6","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jnaneshwar Das <jnaneshwar.das@gmail.com> / Matt Schmittle <schmttle@udel.edu> / Abhijeet Singh <abhsingh@seas.upenn.edu>\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends apt-utils git build-essential curl geographiclib-tools libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless uwsgi uwsgi-src uwsgi-plugin-python3 python-pip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip --upgrade\nRUN mkdir ros-setups\nCOPY ros-setups ros-setups/\nRUN ros-setups/ubuntu-16/setup-ros.sh\nRUN ros-setups/ubuntu-16/setup-mavlink-mavros.sh\nRUN ros-setups/ubuntu-16/setup-install.sh\nRUN ros-setups/ubuntu-16/setup-gym-gzweb-uavnav.sh\n#  RUN git clone https://github.com/schmittlema/ros-setups.git && cd ros-setups/ubuntu-16 && ./setup-ros.sh && ./setup-mavlink-mavros.sh && ./setup-install.sh && ./setup-gym-gzweb-uavnav.sh\n#  Turtlebot modules hack \n#  RUN mkdir /lib/modules\n#  COPY lib/. /lib/modules\n#  RUN ls /lib/modules\nRUN pip install pip virtualenv --no-cache-dir --upgrade --upgrade\nRUN pip install ipykernel jupyter matplotlib numpy scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Don't need Jupyter\n#   Set up our notebook config.\n#  COPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\n#  COPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\n#  RUN git clone https://github.com/tensorflow/tensorflow.git && \\\n#      cd tensorflow && \\\n#      git checkout r1.2\n#  WORKDIR /tensorflow\n#   For Nivida\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nRUN cd ~/src/Firmware \\\n && git remote add openuav-master https://github.com/Open-UAV/Firmware \\\n && git pull openuav-master master\nRUN echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.profile \\\n && echo \"source ~/catkin_ws/devel/setup.bash\" >> ~/.profile \\\n && echo \"export GAZEBO_PLUGIN_PATH=:/root/src/Firmware/Tools/sitl_gazebo/Build\" >> ~/.profile \\\n && echo \"export GAZEBO_MODEL_PATH=:/root/src/Firmware/Tools/sitl_gazebo/models\" >> ~/.profile \\\n && echo \"export GAZEBO_RESOURCE_PATH=:/root/src/Firmware/Tools/sitl_gazebo/media\" >> ~/.profile \\\n && echo \"export PYTHONPATH=/root/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/jade/lib/python2.7/dist-packages\" >> ~/.profile\nRUN echo \"installing ROS image packages\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends ros-kinetic-web-video-server ros-kinetic-image-geometry ros-kinetic-image-transport-plugins ros-kinetic-image-proc -y\nRUN apt-get install ros-kinetic-opencv-apps ros-kinetic-tf2-geometry-msgs ros-kinetic-rosbridge* -y\n#  RUN apt-get update && apt-get install -y ros-kinetic-turtlebot \\\n#  \tros-kinetic-turtlebot-simulator \\\n#  \tros-kinetic-turtlebot-apps\nRUN cd ~/catkin_ws/src \\\n && git clone https://github.com/RIVeR-Lab/apriltags_ros.git\nRUN cd ~/catkin_ws \\\n && catkin build\nADD install_geographiclib_datasets.sh /home/\nRUN cd /home \\\n && chmod +x install_geographiclib_datasets.sh \\\n && ./install_geographiclib_datasets.sh\nRUN sed -i '/force_color_prompt/s/^#//g' ~/.bashrc\n#   for mavros global position in GPS to UTM conversions \nRUN apt-get install ros-kinetic-geodesy ros-kinetic-hector-gazebo -y\n#  ## Django set up to expose various states from the simulation container\nRUN apt-get install python3-pip -y\nRUN pip3 --no-cache-dir install Django\nRUN mkdir /django\nRUN django-admin startproject DjangoProject /django\nRUN python3 /django/manage.py startapp query\nCOPY django_files/project_urls.py /django/DjangoProject/urls.py\nCOPY django_files/query_urls.py /django/query/urls.py\nCOPY django_files/query_view.py /django/query/views.py\nRUN sed -i '/ALLOWED_HOSTS/c\\ALLOWED_HOSTS = ['''*''']' /django/DjangoProject/settings.py\n#  ## Django set up to expose various states from the simulation container\n#   Wetty - web tty\n#  RUN mkdir /wetty\n#  RUN npm install wetty\n#   Adding user term and giving permissions\n#  RUN useradd -d /simulation -m -s /bin/bash term\n#  RUN echo 'term:term' | chpasswd\n#  RUN chmod -R 777 /root/src && chmod -R 777 /root/catkin_ws && \\\n#      chmod -R 777 /simulation && \\\n#      chmod -R 777 /opt/ros\n#  RUN find /root -type d -exec chmod 755 {} \\;\n#  RUN sed -i 's/LOGIN_TIMEOUT\\t\\t60/LOGIN_TIMEOUT\\t\\t7000/g' /etc/login.defs\n#   Ensure the setup.sh is in the last, so that we can build again quickly if setup changes\nADD setup.sh /home/\nRUN chmod +x /home/setup.sh\nRUN mkdir /home/term\nRUN cp ~/.profile /home/term/\nRUN cp ~/.profile /home/\nRUN pip uninstall -y tornado\n","originalDockerfileUglifiedHash":"5a3a8a851770f791df916818e5ac8c6a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/15ea2adc93db8ec16515743537b203c315c56fd2.dockerfile"}