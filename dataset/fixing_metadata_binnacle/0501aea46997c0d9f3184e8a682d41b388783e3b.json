{"seed":4093664322,"processedDockerfileHash":"ec72697173894d9311b63e4d96b2e985","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  Base docker image\nFROM ubuntu:xenial-20170417.1\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common -y )\nRUN add-apt-repository ppa:george-edison55/cmake-3.x -y\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends gawk git python-pip -y )\nRUN echo \"export PS1=\\\\w$\" >> /etc/bash.bashrc\nRUN (apt-get update ;apt-get install --no-install-recommends xterm -y )\nRUN pip install pip==23.1 --upgrade\nRUN (apt-get update ;apt-get install --no-install-recommends cmake -y )\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential -y )\nRUN (apt-get update ;apt-get install --no-install-recommends gcc -y )\n#  RUN apt-get -y install clang\nRUN (apt-get update ;apt-get install --no-install-recommends unzip -y )\nRUN (apt-get update ;apt-get install --no-install-recommends vim -y )\nRUN (apt-get update ;apt-get install --no-install-recommends wget curl -y )\n#  python packages\nRUN (apt-get update ;apt-get install --no-install-recommends python-zmq -y )\n#  window conrtol\nRUN (apt-get update ;apt-get install --no-install-recommends wmctrl xdotool -y )\n#  ### tmux new version\nRUN (apt-get update ;apt-get install --no-install-recommends libprotoc-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends protobuf-compiler -y )\nRUN (apt-get update ;apt-get install --no-install-recommends pkg-config -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libevent1-dev libncurses5-dev -y )\nENV LC_CTYPE=\"C.UTF-8\"\nRUN cd /tmp \\\n && git clone https://github.com/tmux/tmux.git \\\n && cd tmux \\\n && git checkout tags/2.3\nRUN (apt-get update ;apt-get install --no-install-recommends automake -y )\nRUN cd /tmp/tmux \\\n && sh ./autogen.sh \\\n && ./configure \\\n && make install\n#  to enable copy paste in tmux mouse on https://coderwall.com/p/4b0d0a/how-to-copy-and-paste-with-tmux-on-ubuntu\nRUN (apt-get update ;apt-get install --no-install-recommends xclip -y )\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  python3\n#  RUN apt-get -y install curl\n#  RUN curl -o /miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh\n#  RUN /bin/bash /miniconda.sh -b -p /miniconda\n#  RUN PATH=/miniconda/bin conda install -y pyzmq\n#  RUN PATH=/miniconda/bin conda install -y numpy\nRUN (apt-get update ;apt-get install --no-install-recommends python3-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-pip -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-numpy -y )\nRUN pip3 install --upgrade pip\nRUN pip3 install pyzmq\n#  ####### ros kinetic ######\nRUN echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends ros-kinetic-desktop-full -y )\nRUN (apt-get update ;apt-get install --no-install-recommends python-wstool python-rosinstall-generator python-catkin-tools -y )\n#  RUN bash -c \"curl -ssL http://get.gazebosim.org | sh\"\n#  RUN apt-get -y install ros-kinetic-desktop-full\n#  RUN apt-get -y install ros-kinetic-roslaunch\nRUN (apt-get update ;apt-get install --no-install-recommends gazebo7 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libgazebo7-dev -y )\n#  RUN apt-get -y install ros-kinetic-control-toolbox\n#  RUN apt-get -y install openssl libssl-dev\nRUN (apt-get update ;apt-get install --no-install-recommends ros-kinetic-mavros ros-kinetic-mavros-extras -y )\nRUN /opt/ros/kinetic/lib/mavros/install_geographiclib_datasets.sh\n#  RUN apt-get -y install ros-kinetic-image-view2\n#  additional ros libs\nRUN (apt-get update ;apt-get install --no-install-recommends ros-kinetic-image-pipeline -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libglew-dev -y )\n#   git checkout tags/v0.5\n#   .... build\nRUN cd /tmp \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git\nRUN cd /tmp/Pangolin \\\n && git checkout tags/v0.5 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make\n#  ############################# install opencv3 and numpy for python3\nRUN (apt-get update ;apt-get install --no-install-recommends libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libgtk2.0-dev libatlas-base-dev gfortran -y )\nRUN git clone https://github.com/Itseez/opencv.git\nRUN cd /opencv \\\n && git checkout 3.2.0\nRUN git clone https://github.com/Itseez/opencv_contrib.git\nRUN cd /opencv_contrib \\\n && git checkout 3.2.0\nRUN cd /opencv \\\n && mkdir build\nRUN cd /opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D WITH_IPP=OFF -D PYTHON3_PACKAGES_PATH=/usr/local/lib/python3.5/dist-packages .. \\\n && make -j6\nRUN cd /opencv/build \\\n && make install\n#  ##### ORB_SLAM2\nRUN cd /tmp \\\n && git clone https://github.com/raulmur/ORB_SLAM2.git\n#  RUN apt-get install -y libopencv-dev\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build_ros.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && ./build.sh\nRUN chmod 777 /tmp/ORB_SLAM2/build\nRUN (apt-get update ;apt-get install --no-install-recommends sudo -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libprotobuf-dev -y )\n#  ##python3 ros support\n#  RUN PATH=/miniconda/bin:$PATH pip install --upgrade pip\nRUN pip3 install pyyaml rospkg catkin_pkg\n#  ####### nvidia part ######\nARG GDRIVER\nCOPY install_graphic_driver.sh /install_graphic_driver.sh\nRUN chmod +x /install_graphic_driver.sh\nRUN GDRIVER=$GDRIVER /install_graphic_driver.sh\n#  ##added more ros libs\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends python-rosinstall -y )\n#  ## add python dynamics\nRUN (apt-get update ;apt-get install --no-install-recommends python-testresources -y )\n#  RUN apt-get install -y python-scipy\n#  RUN pip2 install scipy\nRUN pip2 install pydy\n#  user setings\nARG UID\nRUN useradd -u $UID docker\nRUN echo \"docker:docker\" | chpasswd\nRUN echo \"docker ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# Base docker image\nFROM ubuntu:xenial-20170417.1\nRUN apt-get update -y\nRUN apt-get install software-properties-common -y\nRUN add-apt-repository ppa:george-edison55/cmake-3.x -y\nRUN apt-get update -y\nRUN apt-get install gawk git python-pip -y\nRUN echo \"export PS1=\\\\\\\\w\\$\" >> /etc/bash.bashrc\nRUN apt-get install xterm -y\nRUN pip install pip --upgrade\nRUN apt-get install cmake -y\nRUN apt-get install build-essential -y\nRUN apt-get install gcc -y\n# RUN apt-get -y install clang\nRUN apt-get install unzip -y\nRUN apt-get install vim -y\nRUN apt-get install wget curl -y\n# python packages\nRUN apt-get install python-zmq -y\n# window conrtol\nRUN apt-get install wmctrl xdotool -y\n# ### tmux new version\nRUN apt-get install libprotoc-dev -y\nRUN apt-get install protobuf-compiler -y\nRUN apt-get install pkg-config -y\nRUN apt-get install libevent1-dev libncurses5-dev -y\nENV LC_CTYPE=\"C.UTF-8\"\nRUN cd /tmp \\\n && git clone https://github.com/tmux/tmux.git \\\n && cd tmux \\\n && git checkout tags/2.3\nRUN apt-get install automake -y\nRUN cd /tmp/tmux \\\n && sh ./autogen.sh \\\n && ./configure \\\n && make install\n# to enable copy paste in tmux mouse on https://coderwall.com/p/4b0d0a/how-to-copy-and-paste-with-tmux-on-ubuntu\nRUN apt-get install xclip -y\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# python3\n# RUN apt-get -y install curl\n# RUN curl -o /miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh\n# RUN /bin/bash /miniconda.sh -b -p /miniconda\n# RUN PATH=/miniconda/bin conda install -y pyzmq\n# RUN PATH=/miniconda/bin conda install -y numpy\nRUN apt-get install python3-dev -y\nRUN apt-get install python3-pip -y\nRUN apt-get install python3-numpy -y\nRUN pip3 install --upgrade pip\nRUN pip3 install pyzmq\n# ####### ros kinetic ######\nRUN echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\nRUN apt-get update -y\nRUN apt-get install ros-kinetic-desktop-full -y\nRUN apt-get install python-wstool python-rosinstall-generator python-catkin-tools -y\n# RUN bash -c \"curl -ssL http://get.gazebosim.org | sh\"\n# RUN apt-get -y install ros-kinetic-desktop-full\n# RUN apt-get -y install ros-kinetic-roslaunch\nRUN apt-get install gazebo7 -y\nRUN apt-get install libgazebo7-dev -y\n# RUN apt-get -y install ros-kinetic-control-toolbox\n# RUN apt-get -y install openssl libssl-dev\nRUN apt-get install ros-kinetic-mavros ros-kinetic-mavros-extras -y\nRUN /opt/ros/kinetic/lib/mavros/install_geographiclib_datasets.sh\n# RUN apt-get -y install ros-kinetic-image-view2\n# additional ros libs\nRUN apt-get install ros-kinetic-image-pipeline -y\nRUN apt-get install libglew-dev -y\n#  git checkout tags/v0.5\n#  .... build\nRUN cd /tmp \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git\nRUN cd /tmp/Pangolin \\\n && git checkout tags/v0.5 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make\n# ############################# install opencv3 and numpy for python3\nRUN apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y\nRUN apt-get install libgtk2.0-dev libatlas-base-dev gfortran -y\nRUN git clone https://github.com/Itseez/opencv.git\nRUN cd /opencv \\\n && git checkout 3.2.0\nRUN git clone https://github.com/Itseez/opencv_contrib.git\nRUN cd /opencv_contrib \\\n && git checkout 3.2.0\nRUN cd /opencv \\\n && mkdir build\nRUN cd /opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D WITH_IPP=OFF -D PYTHON3_PACKAGES_PATH=/usr/local/lib/python3.5/dist-packages .. \\\n && make -j6\nRUN cd /opencv/build \\\n && make install\n# ##### ORB_SLAM2\nRUN cd /tmp \\\n && git clone https://github.com/raulmur/ORB_SLAM2.git\n# RUN apt-get install -y libopencv-dev\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build_ros.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && ./build.sh\nRUN chmod 777 /tmp/ORB_SLAM2/build\nRUN apt-get install sudo -y\nRUN apt-get install libprotobuf-dev -y\n# ##python3 ros support\n# RUN PATH=/miniconda/bin:$PATH pip install --upgrade pip\nRUN pip3 install pyyaml rospkg catkin_pkg\n# ####### nvidia part ######\nARG GDRIVER\nCOPY install_graphic_driver.sh /install_graphic_driver.sh\nRUN chmod +x /install_graphic_driver.sh\nRUN GDRIVER=$GDRIVER /install_graphic_driver.sh\n# ##added more ros libs\nRUN apt-get update -y\nRUN apt-get install python-rosinstall -y\n# ## add python dynamics\nRUN apt-get install python-testresources -y\n# RUN apt-get install -y python-scipy\n# RUN pip2 install scipy\nRUN pip2 install pydy\n# user setings\nARG UID\nRUN useradd -u $UID docker\nRUN echo \"docker:docker\" | chpasswd\nRUN echo \"docker ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers\n","injectedSmells":[],"originalDockerfileHash":"6606f777684b2f253a19cdf4f4005c42","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  Base docker image\nFROM ubuntu:xenial-20170417.1\nRUN apt-get update -y\nRUN apt-get install software-properties-common -y\nRUN add-apt-repository ppa:george-edison55/cmake-3.x -y\nRUN apt-get update -y\nRUN apt-get install gawk git python-pip -y\nRUN echo \"export PS1=\\\\w$\" >> /etc/bash.bashrc\nRUN apt-get install xterm -y\nRUN pip install pip --upgrade\nRUN apt-get install cmake -y\nRUN apt-get install build-essential -y\nRUN apt-get install gcc -y\n#  RUN apt-get -y install clang\nRUN apt-get install unzip -y\nRUN apt-get install vim -y\nRUN apt-get install wget curl -y\n#  python packages\nRUN apt-get install python-zmq -y\n#  window conrtol\nRUN apt-get install wmctrl xdotool -y\n#  ### tmux new version\nRUN apt-get install libprotoc-dev -y\nRUN apt-get install protobuf-compiler -y\nRUN apt-get install pkg-config -y\nRUN apt-get install libevent1-dev libncurses5-dev -y\nENV LC_CTYPE=\"C.UTF-8\"\nRUN cd /tmp \\\n && git clone https://github.com/tmux/tmux.git \\\n && cd tmux \\\n && git checkout tags/2.3\nRUN apt-get install automake -y\nRUN cd /tmp/tmux \\\n && sh ./autogen.sh \\\n && ./configure \\\n && make install\n#  to enable copy paste in tmux mouse on https://coderwall.com/p/4b0d0a/how-to-copy-and-paste-with-tmux-on-ubuntu\nRUN apt-get install xclip -y\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  python3\n#  RUN apt-get -y install curl\n#  RUN curl -o /miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh\n#  RUN /bin/bash /miniconda.sh -b -p /miniconda\n#  RUN PATH=/miniconda/bin conda install -y pyzmq\n#  RUN PATH=/miniconda/bin conda install -y numpy\nRUN apt-get install python3-dev -y\nRUN apt-get install python3-pip -y\nRUN apt-get install python3-numpy -y\nRUN pip3 install --upgrade pip\nRUN pip3 install pyzmq\n#  ####### ros kinetic ######\nRUN echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/ros-latest.list\nRUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\nRUN apt-get update -y\nRUN apt-get install ros-kinetic-desktop-full -y\nRUN apt-get install python-wstool python-rosinstall-generator python-catkin-tools -y\n#  RUN bash -c \"curl -ssL http://get.gazebosim.org | sh\"\n#  RUN apt-get -y install ros-kinetic-desktop-full\n#  RUN apt-get -y install ros-kinetic-roslaunch\nRUN apt-get install gazebo7 -y\nRUN apt-get install libgazebo7-dev -y\n#  RUN apt-get -y install ros-kinetic-control-toolbox\n#  RUN apt-get -y install openssl libssl-dev\nRUN apt-get install ros-kinetic-mavros ros-kinetic-mavros-extras -y\nRUN /opt/ros/kinetic/lib/mavros/install_geographiclib_datasets.sh\n#  RUN apt-get -y install ros-kinetic-image-view2\n#  additional ros libs\nRUN apt-get install ros-kinetic-image-pipeline -y\nRUN apt-get install libglew-dev -y\n#   git checkout tags/v0.5\n#   .... build\nRUN cd /tmp \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git\nRUN cd /tmp/Pangolin \\\n && git checkout tags/v0.5 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make\n#  ############################# install opencv3 and numpy for python3\nRUN apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev -y\nRUN apt-get install libgtk2.0-dev libatlas-base-dev gfortran -y\nRUN git clone https://github.com/Itseez/opencv.git\nRUN cd /opencv \\\n && git checkout 3.2.0\nRUN git clone https://github.com/Itseez/opencv_contrib.git\nRUN cd /opencv_contrib \\\n && git checkout 3.2.0\nRUN cd /opencv \\\n && mkdir build\nRUN cd /opencv/build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -D WITH_IPP=OFF -D PYTHON3_PACKAGES_PATH=/usr/local/lib/python3.5/dist-packages .. \\\n && make -j6\nRUN cd /opencv/build \\\n && make install\n#  ##### ORB_SLAM2\nRUN cd /tmp \\\n && git clone https://github.com/raulmur/ORB_SLAM2.git\n#  RUN apt-get install -y libopencv-dev\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && chmod +x build_ros.sh\nRUN cd /tmp/ORB_SLAM2 \\\n && ./build.sh\nRUN chmod 777 /tmp/ORB_SLAM2/build\nRUN apt-get install sudo -y\nRUN apt-get install libprotobuf-dev -y\n#  ##python3 ros support\n#  RUN PATH=/miniconda/bin:$PATH pip install --upgrade pip\nRUN pip3 install pyyaml rospkg catkin_pkg\n#  ####### nvidia part ######\nARG GDRIVER\nCOPY install_graphic_driver.sh /install_graphic_driver.sh\nRUN chmod +x /install_graphic_driver.sh\nRUN GDRIVER=$GDRIVER /install_graphic_driver.sh\n#  ##added more ros libs\nRUN apt-get update -y\nRUN apt-get install python-rosinstall -y\n#  ## add python dynamics\nRUN apt-get install python-testresources -y\n#  RUN apt-get install -y python-scipy\n#  RUN pip2 install scipy\nRUN pip2 install pydy\n#  user setings\nARG UID\nRUN useradd -u $UID docker\nRUN echo \"docker:docker\" | chpasswd\nRUN echo \"docker ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers\n","originalDockerfileUglifiedHash":"aae5243d4166b5ef8e4f8b796d1bade5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0501aea46997c0d9f3184e8a682d41b388783e3b.dockerfile"}