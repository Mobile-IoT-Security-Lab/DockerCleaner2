{"seed":3761573065,"processedDockerfileHash":"07295657424b08836d858d08af1f05d1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM rocker/r-ver:3.4.3\nMAINTAINER Jan Winter \"jan.winter@dkfz.de\"\n#  ### LINUX DEPENDENCIES\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget sudo gdebi-core pandoc pandoc-citeproc libcurl4-gnutls-dev libcairo2-dev libxt-dev build-essential libgd-dev libexpat1-dev libxml2-dev git libssl-dev curl libssl-dev libtiff5-dev htop ghostscript nginx libtbb2 libmariadbclient-dev -y\n#   Add TEX for report and R Markdown\nRUN apt-get update \\\n && apt-get install --no-install-recommends texlive texlive-xetex -y\n#   install the shiny server debian package from r-studio\nRUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb -P /tmp/\nRUN gdebi -n /tmp/shiny-server-1.5.3.838-amd64.deb \\\n && rm -f /tmp/shiny-server-1.5.3.838-amd64.deb\nCOPY ./shiny-server.sh /usr/bin/shiny-server.sh\nRUN chmod +x /usr/bin/shiny-server.sh\n#  ### R PACKAGES\n#   First we need devtools for all the installation of all further packages\nRUN R -e 'install.packages(\"devtools\", repos = \"http://cloud.r-project.org/\")'\n#   install all the packages we need from CRAN, Bioconductor and GitHub\nRUN R -e 'devtools::install_version(\"RCurl\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"XML\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite()'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocParallel\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"rtracklayer\")'\n#   We have to retrieve thise package as it is not available anymore, but required by some packages\nRUN wget http://www.omegahat.net/XMLRPC/XMLRPC_0.3-0.tar.gz -P /tmp/\nRUN R -e 'install.packages(\"/tmp/XMLRPC_0.3-0.tar.gz\", repos = NULL, type=\"source\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RCytoscape\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RamiGO\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocGenerics\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"limma\")'\nRUN R -e 'devtools::install_version(\"RMySQL\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicFeatures\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Rqc\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"IRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"ShortRead\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"KEGGREST\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"biomaRt\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"DESeq2\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"edgeR\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Gviz\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"STRINGdb\")'\nRUN R -e 'devtools::install_version(\"dplyr\", version = \"0.7.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jyyu/ScreenBEAM\", ref = \"d6204b3\")'\nRUN R -e 'devtools::install_version(\"shinydashboard\", version = \"0.5.3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"jsonlite\", version = \"1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyBS\", version = \"0.61\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"highcharter\", version = \"0.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"seqinr\", version = \"3.3-6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"openxlsx\", version = \"4.0.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"caTools\", version = \"1.17.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"reshape2\", version = \"1.4.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"MESS\", version = \"0.4-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"igraph\", version = \"1.0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"data.table\", version = \"1.10.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jimhester/gmailr\", ref = \"d5ee3c2\")'\nRUN R -e 'devtools::install_version(\"d3heatmap\", version = \"0.6.1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DEoptim\", version = \"2.2-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"httr\", version = \"1.3.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sgRSEA\", version = \"0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"VennDiagram\", version = \"1.6.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"tidyverse\", version = \"1.2.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"htmltools\", version = \"0.3.6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DT\", version = \"0.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sm\", version = \"2.2-5.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyjs\", version = \"0.9.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"markdown\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"knitr\", version = \"1.16\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shiny\", version = \"1.0.5\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"bookdown\", version = \"0.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"R.utils\", version = \"2.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyWidgets\", repos = \"http://cloud.r-project.org/\")'\n#   cleaning up downloaded deb packages for keeping clean our docker image\nRUN apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   now install the reannotate-crispr PERL package, which is based on the CRISPR LIBRARY DESIGNER\nENV PERL_MM_USE_DEFAULT=\"1\"\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bundle::CPAN\")'\n#   now install all the modules we need for crispr reannotator\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::DB::Fasta\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqIO\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Tools::GFF\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Scalar::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqFeature::Generic\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Location::Split\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"JSON::XS\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Slurp\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::MoreUtils\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Archive::Zip\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Parallel::ForkManager\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Cwd\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Getopt::Long\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Grep\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Text::Wrap\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Unix::Processors\")'\nRUN git clone https://github.com/boutroslab/Supplemental-Material.git /tmp/Supplemental-Material\nRUN cp -r /tmp/Supplemental-Material/Rauscher &; Heigwer_2016/crispr-reannotation /opt/\nRUN chmod +x /opt/crispr-reannotation/reannotate_crispr.pl\nENV PATH=\"/opt/crispr-reannotation:$PATH\"\nRUN rm -rf /tmp/Supplemental-Material\n#   install intervaltree...another dependency for  reannotate-crispr\nRUN cd /opt/crispr-reannotation/depends/Set-IntervalTree-0.10-OD ; perl Makefile.PL ; make ; make test \\\n && make install\n#   Install Python NumPy and SciPy required for BAGEL\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-numpy python-scipy python-sympy -y\n#  # Install Software packages, Download and Install them\n#   Bowtie 2\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie2-2.2.9-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie2-2.2.9-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie2-2.2.9:$PATH\"\nRUN echo 'export PATH=/opt/bowtie2-2.2.9/:$PATH' >> /etc/profile\n#   Bowtie 1\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie-1.2.1.1-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie-1.2.1.1-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie-1.2.1.1/:$PATH\"\nRUN echo 'export PATH=/opt/bowtie-1.2.1.1/:$PATH' >> /etc/profile\n#   install MAGeCK from Sourceforge\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/mageck-0.5.5.tar.gz -P /tmp/\n#  COPY ./mageck-0.5.5.tar.gz /tmp/\nRUN cd /tmp/ ; tar xvf ./mageck-0.5.5.tar.gz ; cd /tmp/mageck-0.5.5 ; python setup.py install\nRUN rm -rf /tmp/mageck-0.5.5 /tmp/mageck-0.5.5.tar.gz\n#  ## RUST-based FASTQ Extraction and SAM Extraction\n#   PERL-based backup variants are included in CRISPRAnalyzeR source\n#   Install RUST compiler\nRUN curl https://sh.rustup.rs > /tmp/sh.rustup.rs \\\n && chmod +x /tmp/sh.rustup.rs \\\n && /tmp/sh.rustup.rs -y \\\n && rm /tmp/sh.rustup.rs\nENV PATH=\"/root/.cargo/bin:$PATH\"\n#   compile CRISPRAnalyzer mapper and extractor from source\nRUN git clone https://github.com/OliPelz/fastq_extractor_proof_of_principle.git /tmp/crispranalyzer-rust-tools\n#   target dir for compiled executables\nRUN mkdir -p /opt/crispranalyzer-tools\n#   source cargo env file so we can use it\nRUN cd /tmp/crispranalyzer-rust-tools/extractor_in_RUST/fastq_parser \\\n && cargo build --release \\\n && cp ./target/release/fastq_parser /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/fastq_parser\nRUN cd /tmp/crispranalyzer-rust-tools/sam_mapper_in_RUST/sam_mapper/ \\\n && cargo build --release \\\n && cp ./target/release/sam_mapper /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/sam_mapper\nENV PATH=\"/opt/crispranalyzer-tools:$PATH\"\nRUN echo 'export PATH=/opt/crispranalyzer-tools/:$PATH' >> /etc/profile\n#  ## CRISPRAnalyzeR FROM SOURCE\n#  # Now we add CRISPRAnalyzeR code directly from Github Repository\nARG CACHEBUST=1\n#   We use CACHEBUST=1 arg to FORCE docker to start from here without caching\n#   This can be achieved by a build argument as described here : https://github.com/moby/moby/issues/1996#issuecomment-185872769\n#   docker build --rm --label crispranalyzer --build-arg CACHEBUST=$(date +%s) -t boutroslab/crispranalyzer:latest\n#   install CRISPRAnalyzeR\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR\nRUN git clone --depth=1 https://github.com/boutroslab/CRISPRAnalyzeR.git /tmp/CRISPRAnalyzeR\nRUN cp -r /tmp/CRISPRAnalyzeR/source/* /srv/shiny-server/CRISPRAnalyzeR/\n#   Generate Directories\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR2 /srv/shiny-server/CRISPRAnalyzeR3 /srv/shiny-server/CRISPRAnalyzeR4 /srv/shiny-server/CRISPRAnalyzeR5\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR5\n#   take CSS and web files\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR5\n#   we will run crispranalyzer as user shiny, so not as root!\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR/userdata\n#   add R profile options\nRUN echo 'setwd(\"/srv/shiny-server/CRISPRAnalyzeR\")' >> /usr/local/lib/R/etc/Rprofile.site\nRUN echo 'options(download.file.method = \"libcurl\")' >> /usr/local/lib/R/etc/Rprofile.site\n#   NGINX (copy the config)\nCOPY nginx.conf /etc/nginx/nginx.conf\n#   shiny-server.conf\n#   shiny-server.conf will be automatically created with default values, which is totally fine\n#   Copy docker entrypoint and shiny-server.sh, in which is stated how we start shiny and nginx\n#   Moreover we copy the index.html to do a forward of the base directory to ./CRISPRAnalyzeR/, from which NGINX will do the rest\nCOPY docker-entrypoint.sh /\nCOPY index.html /srv/shiny-server\nRUN chmod +x /docker-entrypoint.sh\nRUN chmod +x /srv/shiny-server/index.html\nEXPOSE 8000/tcp\n#   Add ENV for KiteMatic\n#   this ENV vars are required to be able to change these settings using Kitematic\nENV websockets_behind_proxy=\"FALSE\"\nENV verbose_logfiles=\"FALSE\"\nENV COSMIC_database=\"CosmicMutantExport.tsv\"\nENV EnrichR_URL=\"http://amp.pharm.mssm.edu/Enrichr/\"\nENV EnrichR=\"TRUE\"\nENV bowtie_threads=\"2\"\nENV proxy_url=\"\"\nENV proxy_port=\"\"\nENV max_upload=\"4096\"\nENV downloadlogs=\"TRUE\"\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#   finally run\nCMD [\"crispranalyzer\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM rocker/r-ver:3.4.3\nMAINTAINER Jan Winter \"jan.winter@dkfz.de\"\n# ### LINUX DEPENDENCIES\nRUN apt-get update \\\n && apt-get install wget sudo gdebi-core pandoc pandoc-citeproc libcurl4-gnutls-dev libcairo2-dev libxt-dev build-essential libgd-dev libexpat1-dev libxml2-dev git libssl-dev curl libssl-dev libtiff5-dev htop ghostscript nginx libtbb2 libmariadbclient-dev -y\n#  Add TEX for report and R Markdown\nRUN apt-get update \\\n && apt-get install --no-install-recommends texlive texlive-xetex -y\n#  install the shiny server debian package from r-studio\nRUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb -P /tmp/\nRUN gdebi -n /tmp/shiny-server-1.5.3.838-amd64.deb \\\n && rm -f /tmp/shiny-server-1.5.3.838-amd64.deb\nCOPY ./shiny-server.sh /usr/bin/shiny-server.sh\nRUN chmod +x /usr/bin/shiny-server.sh\n# ### R PACKAGES\n#  First we need devtools for all the installation of all further packages\nRUN R -e 'install.packages(\"devtools\", repos = \"http://cloud.r-project.org/\")'\n#  install all the packages we need from CRAN, Bioconductor and GitHub\nRUN R -e 'devtools::install_version(\"RCurl\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"XML\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite()'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocParallel\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"rtracklayer\")'\n#  We have to retrieve thise package as it is not available anymore, but required by some packages\nRUN wget http://www.omegahat.net/XMLRPC/XMLRPC_0.3-0.tar.gz -P /tmp/\nRUN R -e 'install.packages(\"/tmp/XMLRPC_0.3-0.tar.gz\", repos = NULL, type=\"source\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RCytoscape\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RamiGO\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocGenerics\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"limma\")'\nRUN R -e 'devtools::install_version(\"RMySQL\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicFeatures\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Rqc\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"IRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"ShortRead\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"KEGGREST\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"biomaRt\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"DESeq2\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"edgeR\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Gviz\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"STRINGdb\")'\nRUN R -e 'devtools::install_version(\"dplyr\", version = \"0.7.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jyyu/ScreenBEAM\", ref = \"d6204b3\")'\nRUN R -e 'devtools::install_version(\"shinydashboard\", version = \"0.5.3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"jsonlite\", version = \"1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyBS\", version = \"0.61\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"highcharter\", version = \"0.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"seqinr\", version = \"3.3-6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"openxlsx\", version = \"4.0.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"caTools\", version = \"1.17.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"reshape2\", version = \"1.4.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"MESS\", version = \"0.4-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"igraph\", version = \"1.0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"data.table\", version = \"1.10.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jimhester/gmailr\", ref = \"d5ee3c2\")'\nRUN R -e 'devtools::install_version(\"d3heatmap\", version = \"0.6.1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DEoptim\", version = \"2.2-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"httr\", version = \"1.3.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sgRSEA\", version = \"0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"VennDiagram\", version = \"1.6.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"tidyverse\", version = \"1.2.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"htmltools\", version = \"0.3.6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DT\", version = \"0.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sm\", version = \"2.2-5.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyjs\", version = \"0.9.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"markdown\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"knitr\", version = \"1.16\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shiny\", version = \"1.0.5\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"bookdown\", version = \"0.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"R.utils\", version = \"2.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyWidgets\", repos = \"http://cloud.r-project.org/\")'\n#  cleaning up downloaded deb packages for keeping clean our docker image\nRUN apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  now install the reannotate-crispr PERL package, which is based on the CRISPR LIBRARY DESIGNER\nENV PERL_MM_USE_DEFAULT=\"1\"\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bundle::CPAN\")'\n#  now install all the modules we need for crispr reannotator\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::DB::Fasta\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqIO\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Tools::GFF\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Scalar::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqFeature::Generic\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Location::Split\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"JSON::XS\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Slurp\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::MoreUtils\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Archive::Zip\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Parallel::ForkManager\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Cwd\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Getopt::Long\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Grep\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Text::Wrap\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Unix::Processors\")'\nRUN git clone https://github.com/boutroslab/Supplemental-Material.git /tmp/Supplemental-Material\nRUN cp -r /tmp/Supplemental-Material/Rauscher&Heigwer_2016/crispr-reannotation /opt/\nRUN chmod +x /opt/crispr-reannotation/reannotate_crispr.pl\nENV PATH=\"/opt/crispr-reannotation:$PATH\"\nRUN rm -rf /tmp/Supplemental-Material\n#  install intervaltree...another dependency for  reannotate-crispr\nRUN cd /opt/crispr-reannotation/depends/Set-IntervalTree-0.10-OD ; perl Makefile.PL ; make ; make test \\\n && make install\n#  Install Python NumPy and SciPy required for BAGEL\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-sympy -y\n# # Install Software packages, Download and Install them\n#  Bowtie 2\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie2-2.2.9-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie2-2.2.9-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie2-2.2.9:$PATH\"\nRUN echo 'export PATH=/opt/bowtie2-2.2.9/:$PATH' >> /etc/profile\n#  Bowtie 1\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie-1.2.1.1-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie-1.2.1.1-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie-1.2.1.1/:$PATH\"\nRUN echo 'export PATH=/opt/bowtie-1.2.1.1/:$PATH' >> /etc/profile\n#  install MAGeCK from Sourceforge\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/mageck-0.5.5.tar.gz -P /tmp/\n# COPY ./mageck-0.5.5.tar.gz /tmp/\nRUN cd /tmp/ ; tar xvf ./mageck-0.5.5.tar.gz ; cd /tmp/mageck-0.5.5 ; python setup.py install\nRUN rm -rf /tmp/mageck-0.5.5 /tmp/mageck-0.5.5.tar.gz\n# ## RUST-based FASTQ Extraction and SAM Extraction\n#  PERL-based backup variants are included in CRISPRAnalyzeR source\n#  Install RUST compiler\nRUN curl https://sh.rustup.rs > /tmp/sh.rustup.rs \\\n && chmod +x /tmp/sh.rustup.rs \\\n && /tmp/sh.rustup.rs -y \\\n && rm /tmp/sh.rustup.rs\nENV PATH=\"/root/.cargo/bin:$PATH\"\n#  compile CRISPRAnalyzer mapper and extractor from source\nRUN git clone https://github.com/OliPelz/fastq_extractor_proof_of_principle.git /tmp/crispranalyzer-rust-tools\n#  target dir for compiled executables\nRUN mkdir -p /opt/crispranalyzer-tools\n#  source cargo env file so we can use it\nRUN cd /tmp/crispranalyzer-rust-tools/extractor_in_RUST/fastq_parser \\\n && cargo build --release \\\n && cp ./target/release/fastq_parser /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/fastq_parser\nRUN cd /tmp/crispranalyzer-rust-tools/sam_mapper_in_RUST/sam_mapper/ \\\n && cargo build --release \\\n && cp ./target/release/sam_mapper /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/sam_mapper\nENV PATH=\"/opt/crispranalyzer-tools:$PATH\"\nRUN echo 'export PATH=/opt/crispranalyzer-tools/:$PATH' >> /etc/profile\n# ## CRISPRAnalyzeR FROM SOURCE\n# # Now we add CRISPRAnalyzeR code directly from Github Repository\nARG CACHEBUST=1\n#  We use CACHEBUST=1 arg to FORCE docker to start from here without caching\n#  This can be achieved by a build argument as described here : https://github.com/moby/moby/issues/1996#issuecomment-185872769\n#  docker build --rm --label crispranalyzer --build-arg CACHEBUST=$(date +%s) -t boutroslab/crispranalyzer:latest\n#  install CRISPRAnalyzeR\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR\nRUN git clone --depth=1 https://github.com/boutroslab/CRISPRAnalyzeR.git /tmp/CRISPRAnalyzeR\nRUN cp -r /tmp/CRISPRAnalyzeR/source/* /srv/shiny-server/CRISPRAnalyzeR/\n#  Generate Directories\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR2 /srv/shiny-server/CRISPRAnalyzeR3 /srv/shiny-server/CRISPRAnalyzeR4 /srv/shiny-server/CRISPRAnalyzeR5\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR5\n#  take CSS and web files\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR5\n#  we will run crispranalyzer as user shiny, so not as root!\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR/userdata\n#  add R profile options\nRUN echo 'setwd(\"/srv/shiny-server/CRISPRAnalyzeR\")' >> /usr/local/lib/R/etc/Rprofile.site\nRUN echo 'options(download.file.method = \"libcurl\")' >> /usr/local/lib/R/etc/Rprofile.site\n#  NGINX (copy the config)\nCOPY nginx.conf /etc/nginx/nginx.conf\n#  shiny-server.conf\n#  shiny-server.conf will be automatically created with default values, which is totally fine\n#  Copy docker entrypoint and shiny-server.sh, in which is stated how we start shiny and nginx\n#  Moreover we copy the index.html to do a forward of the base directory to ./CRISPRAnalyzeR/, from which NGINX will do the rest\nCOPY docker-entrypoint.sh /\nCOPY index.html /srv/shiny-server\nRUN chmod +x /docker-entrypoint.sh\nRUN chmod +x /srv/shiny-server/index.html\nEXPOSE 8000/tcp\n#  Add ENV for KiteMatic\n#  this ENV vars are required to be able to change these settings using Kitematic\nENV websockets_behind_proxy=\"FALSE\"\nENV verbose_logfiles=\"FALSE\"\nENV COSMIC_database=\"CosmicMutantExport.tsv\"\nENV EnrichR_URL=\"http://amp.pharm.mssm.edu/Enrichr/\"\nENV EnrichR=\"TRUE\"\nENV bowtie_threads=\"2\"\nENV proxy_url=\"\"\nENV proxy_port=\"\"\nENV max_upload=\"4096\"\nENV downloadlogs=\"TRUE\"\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#  finally run\nCMD [\"crispranalyzer\"]\n","injectedSmells":[],"originalDockerfileHash":"ca910ad0e330f2e1c7bca161e0350cc9","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM rocker/r-ver:3.4.3\nMAINTAINER Jan Winter \"jan.winter@dkfz.de\"\n#  ### LINUX DEPENDENCIES\nRUN apt-get update \\\n && apt-get install wget sudo gdebi-core pandoc pandoc-citeproc libcurl4-gnutls-dev libcairo2-dev libxt-dev build-essential libgd-dev libexpat1-dev libxml2-dev git libssl-dev curl libssl-dev libtiff5-dev htop ghostscript nginx libtbb2 libmariadbclient-dev -y\n#   Add TEX for report and R Markdown\nRUN apt-get update \\\n && apt-get install --no-install-recommends texlive texlive-xetex -y\n#   install the shiny server debian package from r-studio\nRUN wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb -P /tmp/\nRUN gdebi -n /tmp/shiny-server-1.5.3.838-amd64.deb \\\n && rm -f /tmp/shiny-server-1.5.3.838-amd64.deb\nCOPY ./shiny-server.sh /usr/bin/shiny-server.sh\nRUN chmod +x /usr/bin/shiny-server.sh\n#  ### R PACKAGES\n#   First we need devtools for all the installation of all further packages\nRUN R -e 'install.packages(\"devtools\", repos = \"http://cloud.r-project.org/\")'\n#   install all the packages we need from CRAN, Bioconductor and GitHub\nRUN R -e 'devtools::install_version(\"RCurl\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"XML\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite()'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocParallel\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"rtracklayer\")'\n#   We have to retrieve thise package as it is not available anymore, but required by some packages\nRUN wget http://www.omegahat.net/XMLRPC/XMLRPC_0.3-0.tar.gz -P /tmp/\nRUN R -e 'install.packages(\"/tmp/XMLRPC_0.3-0.tar.gz\", repos = NULL, type=\"source\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RCytoscape\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"RamiGO\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"BiocGenerics\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"limma\")'\nRUN R -e 'devtools::install_version(\"RMySQL\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicFeatures\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Rqc\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"IRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"ShortRead\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"KEGGREST\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"GenomicRanges\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"biomaRt\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"DESeq2\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"edgeR\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"Gviz\")'\nRUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite(\"STRINGdb\")'\nRUN R -e 'devtools::install_version(\"dplyr\", version = \"0.7.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jyyu/ScreenBEAM\", ref = \"d6204b3\")'\nRUN R -e 'devtools::install_version(\"shinydashboard\", version = \"0.5.3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"jsonlite\", version = \"1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyBS\", version = \"0.61\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"highcharter\", version = \"0.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"seqinr\", version = \"3.3-6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"openxlsx\", version = \"4.0.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"caTools\", version = \"1.17.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"reshape2\", version = \"1.4.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"MESS\", version = \"0.4-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"igraph\", version = \"1.0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"data.table\", version = \"1.10.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_github(\"jimhester/gmailr\", ref = \"d5ee3c2\")'\nRUN R -e 'devtools::install_version(\"d3heatmap\", version = \"0.6.1.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DEoptim\", version = \"2.2-3\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"httr\", version = \"1.3.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sgRSEA\", version = \"0.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"VennDiagram\", version = \"1.6.17\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"tidyverse\", version = \"1.2.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"htmltools\", version = \"0.3.6\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"DT\", version = \"0.2\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"sm\", version = \"2.2-5.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyjs\", version = \"0.9.1\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"markdown\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"knitr\", version = \"1.16\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shiny\", version = \"1.0.5\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"bookdown\", version = \"0.4\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"R.utils\", version = \"2.5.0\", repos = \"http://cloud.r-project.org/\")'\nRUN R -e 'devtools::install_version(\"shinyWidgets\", repos = \"http://cloud.r-project.org/\")'\n#   cleaning up downloaded deb packages for keeping clean our docker image\nRUN apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   now install the reannotate-crispr PERL package, which is based on the CRISPR LIBRARY DESIGNER\nENV PERL_MM_USE_DEFAULT=\"1\"\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bundle::CPAN\")'\n#   now install all the modules we need for crispr reannotator\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::DB::Fasta\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqIO\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Tools::GFF\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Scalar::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::SeqFeature::Generic\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Bio::Location::Split\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"JSON::XS\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Slurp\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::MoreUtils\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"List::Util\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Archive::Zip\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Parallel::ForkManager\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Cwd\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Getopt::Long\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"File::Grep\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Text::Wrap\")'\nRUN perl -MCPAN -e 'CPAN::Shell->install(\"Unix::Processors\")'\nRUN git clone https://github.com/boutroslab/Supplemental-Material.git /tmp/Supplemental-Material\nRUN cp -r /tmp/Supplemental-Material/Rauscher &; Heigwer_2016/crispr-reannotation /opt/\nRUN chmod +x /opt/crispr-reannotation/reannotate_crispr.pl\nENV PATH=\"/opt/crispr-reannotation:$PATH\"\nRUN rm -rf /tmp/Supplemental-Material\n#   install intervaltree...another dependency for  reannotate-crispr\nRUN cd /opt/crispr-reannotation/depends/Set-IntervalTree-0.10-OD ; perl Makefile.PL ; make ; make test \\\n && make install\n#   Install Python NumPy and SciPy required for BAGEL\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-sympy -y\n#  # Install Software packages, Download and Install them\n#   Bowtie 2\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie2-2.2.9-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie2-2.2.9-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie2-2.2.9:$PATH\"\nRUN echo 'export PATH=/opt/bowtie2-2.2.9/:$PATH' >> /etc/profile\n#   Bowtie 1\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/bowtie-1.2.1.1-linux-x86_64.zip -P /tmp/\nRUN unzip /tmp/bowtie-1.2.1.1-linux-x86_64.zip -d /opt\nENV PATH=\"/opt/bowtie-1.2.1.1/:$PATH\"\nRUN echo 'export PATH=/opt/bowtie-1.2.1.1/:$PATH' >> /etc/profile\n#   install MAGeCK from Sourceforge\nRUN wget http://www.dkfz.de/signaling/crispranalyzer/mageck-0.5.5.tar.gz -P /tmp/\n#  COPY ./mageck-0.5.5.tar.gz /tmp/\nRUN cd /tmp/ ; tar xvf ./mageck-0.5.5.tar.gz ; cd /tmp/mageck-0.5.5 ; python setup.py install\nRUN rm -rf /tmp/mageck-0.5.5 /tmp/mageck-0.5.5.tar.gz\n#  ## RUST-based FASTQ Extraction and SAM Extraction\n#   PERL-based backup variants are included in CRISPRAnalyzeR source\n#   Install RUST compiler\nRUN curl https://sh.rustup.rs > /tmp/sh.rustup.rs \\\n && chmod +x /tmp/sh.rustup.rs \\\n && /tmp/sh.rustup.rs -y \\\n && rm /tmp/sh.rustup.rs\nENV PATH=\"/root/.cargo/bin:$PATH\"\n#   compile CRISPRAnalyzer mapper and extractor from source\nRUN git clone https://github.com/OliPelz/fastq_extractor_proof_of_principle.git /tmp/crispranalyzer-rust-tools\n#   target dir for compiled executables\nRUN mkdir -p /opt/crispranalyzer-tools\n#   source cargo env file so we can use it\nRUN cd /tmp/crispranalyzer-rust-tools/extractor_in_RUST/fastq_parser \\\n && cargo build --release \\\n && cp ./target/release/fastq_parser /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/fastq_parser\nRUN cd /tmp/crispranalyzer-rust-tools/sam_mapper_in_RUST/sam_mapper/ \\\n && cargo build --release \\\n && cp ./target/release/sam_mapper /opt/crispranalyzer-tools/ \\\n && chmod +x /opt/crispranalyzer-tools/sam_mapper\nENV PATH=\"/opt/crispranalyzer-tools:$PATH\"\nRUN echo 'export PATH=/opt/crispranalyzer-tools/:$PATH' >> /etc/profile\n#  ## CRISPRAnalyzeR FROM SOURCE\n#  # Now we add CRISPRAnalyzeR code directly from Github Repository\nARG CACHEBUST=1\n#   We use CACHEBUST=1 arg to FORCE docker to start from here without caching\n#   This can be achieved by a build argument as described here : https://github.com/moby/moby/issues/1996#issuecomment-185872769\n#   docker build --rm --label crispranalyzer --build-arg CACHEBUST=$(date +%s) -t boutroslab/crispranalyzer:latest\n#   install CRISPRAnalyzeR\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR\nRUN git clone --depth=1 https://github.com/boutroslab/CRISPRAnalyzeR.git /tmp/CRISPRAnalyzeR\nRUN cp -r /tmp/CRISPRAnalyzeR/source/* /srv/shiny-server/CRISPRAnalyzeR/\n#   Generate Directories\nRUN mkdir /srv/shiny-server/CRISPRAnalyzeR2 /srv/shiny-server/CRISPRAnalyzeR3 /srv/shiny-server/CRISPRAnalyzeR4 /srv/shiny-server/CRISPRAnalyzeR5\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/multiuser/* /srv/shiny-server/CRISPRAnalyzeR5\n#   take CSS and web files\nRUN cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR2 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR3 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR4 \\\n && cp -r /srv/shiny-server/CRISPRAnalyzeR/www /srv/shiny-server/CRISPRAnalyzeR5\n#   we will run crispranalyzer as user shiny, so not as root!\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR\nRUN chown -R shiny:shiny /srv/shiny-server/CRISPRAnalyzeR/userdata\n#   add R profile options\nRUN echo 'setwd(\"/srv/shiny-server/CRISPRAnalyzeR\")' >> /usr/local/lib/R/etc/Rprofile.site\nRUN echo 'options(download.file.method = \"libcurl\")' >> /usr/local/lib/R/etc/Rprofile.site\n#   NGINX (copy the config)\nCOPY nginx.conf /etc/nginx/nginx.conf\n#   shiny-server.conf\n#   shiny-server.conf will be automatically created with default values, which is totally fine\n#   Copy docker entrypoint and shiny-server.sh, in which is stated how we start shiny and nginx\n#   Moreover we copy the index.html to do a forward of the base directory to ./CRISPRAnalyzeR/, from which NGINX will do the rest\nCOPY docker-entrypoint.sh /\nCOPY index.html /srv/shiny-server\nRUN chmod +x /docker-entrypoint.sh\nRUN chmod +x /srv/shiny-server/index.html\nEXPOSE 8000/tcp\n#   Add ENV for KiteMatic\n#   this ENV vars are required to be able to change these settings using Kitematic\nENV websockets_behind_proxy=\"FALSE\"\nENV verbose_logfiles=\"FALSE\"\nENV COSMIC_database=\"CosmicMutantExport.tsv\"\nENV EnrichR_URL=\"http://amp.pharm.mssm.edu/Enrichr/\"\nENV EnrichR=\"TRUE\"\nENV bowtie_threads=\"2\"\nENV proxy_url=\"\"\nENV proxy_port=\"\"\nENV max_upload=\"4096\"\nENV downloadlogs=\"TRUE\"\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#   finally run\nCMD [\"crispranalyzer\"]\n","originalDockerfileUglifiedHash":"06356e4bc00b4de5ba252a26405ca907","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/da403fb284eed04f76d2b6293a33816e81ad187e.dockerfile"}