{"seed":226736176,"processedDockerfileHash":"c558c53a1f6ef60cacdc6bf2eb16d3a1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\nMAINTAINER masuda@leapmind.io\n#   TensorBoard\nEXPOSE 6006/tcp\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}\"\nRUN echo \"deb http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse \\ndeb-src http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse\" > /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake locales python3 python3-dev python3-pip python3-wheel -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install dependencies for Pillow, Scipy and matplotlib for display, and requirements for pyenv and pyenv virtualenv installation\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pil libjpeg8-dev zlib1g-dev python3-matplotlib liblapack-dev git make build-essential libssl-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install aarch64 cross compile environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends crossbuild-essential-arm64 -y\n#   Locale setting\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYENV_ROOT=\"/usr/local/pyenv\"\n#   Install pyenv to deal with different python versions\nRUN git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT\n#   Install pyenv virtualenv\n#   This is to avoid InvocationError which occurs at running tox test by changing python version with pyenv global/local command\n#   See also https://github.com/pyenv/pyenv-virtualenv/issues/202\nRUN git clone https://github.com/yyuu/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv\n#   Pyenv and pyenv virtualenv environment settings\nENV PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\" \\\n && eval \"$( pyenv virtualenv-init - ;)\"\n#   Python version settings\nARG python_version=\"3.6.3\"\n#   Setup python virtualenv\nRUN pyenv install ${python_version} \\\n && pyenv virtualenv -p python${python_version%.*} ${python_version} python${python_version%.*} \\\n && pyenv global python${python_version%.*}\nRUN pip install pip==23.1 setuptools==67.6.1 -U\n#   Install x-compiler\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++-5-arm-linux-gnueabihf -y \\\n && ln -s /usr/bin/arm-linux-gnueabihf-g++-5 /usr/bin/arm-linux-gnueabihf-g++\n#   Install requirements\nCOPY lmnet/*requirements.txt /tmp/requirements/\nRUN pip install -r /tmp/requirements/gpu.requirements.txt \\\n && rm -rf /tmp/requirements\n#   In order to install blueoil requirements `prompt_toolkit==1.0.15`, uninstall prompt-toolkit v2.0 that depends on `pdb==0.10.2`.\nRUN pip uninstall -y prompt-toolkit\n#   Build coco. It needs numpy.\nCOPY lmnet/third_party /home/blueoil/lmnet/third_party\n#   https://github.com/cocodataset/cocoapi/blob/440d145a30b410a2a6032827c568cff5dc1d2abf/PythonAPI/setup.py#L2\nRUN cd /home/blueoil/lmnet/third_party/coco/PythonAPI \\\n && pip install -e .\n#   For development\nRUN apt-get update \\\n && apt-get install --no-install-recommends x11-apps imagemagick -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy blueoil sources to docker image\nCOPY blueoil /home/blueoil/blueoil\nCOPY setup.* /home/blueoil/\nCOPY output_template /home/blueoil/output_template\n#   Install blueoil\nWORKDIR /home/blueoil\nRUN python setup.py install\nRUN chmod 777 /home/blueoil\n#   Copy dlk sources to docker image\nCOPY dlk /home/blueoil/dlk\n#   Install dlk\nWORKDIR /home/blueoil/dlk\nRUN PYTHONPATH=python/dlk python setup.py install\nRUN chmod 777 /home/blueoil/dlk\n#   Copy lmnet sources to docker image\nCOPY lmnet /home/blueoil/lmnet\nENV PYTHONPATH=\"$PYTHONPATH:/home/blueoil:/home/blueoil/lmnet:/home/blueoil/dlk/python/dlk\"\nWORKDIR /home/blueoil\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\nMAINTAINER masuda@leapmind.io\n#  TensorBoard\nEXPOSE 6006/tcp\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}\"\nRUN echo \"deb http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse \\ndeb-src http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse\" > /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install cmake locales python3 python3-dev python3-pip python3-wheel -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install dependencies for Pillow, Scipy and matplotlib for display, and requirements for pyenv and pyenv virtualenv installation\nRUN apt-get update \\\n && apt-get install python3-pil libjpeg8-dev zlib1g-dev python3-matplotlib liblapack-dev git make build-essential libssl-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  install aarch64 cross compile environment\nRUN apt-get update \\\n && apt-get install crossbuild-essential-arm64 -y\n#  Locale setting\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYENV_ROOT=\"/usr/local/pyenv\"\n#  Install pyenv to deal with different python versions\nRUN git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT\n#  Install pyenv virtualenv\n#  This is to avoid InvocationError which occurs at running tox test by changing python version with pyenv global/local command\n#  See also https://github.com/pyenv/pyenv-virtualenv/issues/202\nRUN git clone https://github.com/yyuu/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv\n#  Pyenv and pyenv virtualenv environment settings\nENV PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\" \\\n && eval \"$( pyenv virtualenv-init - ;)\"\n#  Python version settings\nARG python_version=\"3.6.3\"\n#  Setup python virtualenv\nRUN pyenv install ${python_version} \\\n && pyenv virtualenv -p python${python_version%.*} ${python_version} python${python_version%.*} \\\n && pyenv global python${python_version%.*}\nRUN pip install pip setuptools -U\n#  Install x-compiler\nRUN apt-get update \\\n && apt-get install g++-5-arm-linux-gnueabihf -y \\\n && ln -s /usr/bin/arm-linux-gnueabihf-g++-5 /usr/bin/arm-linux-gnueabihf-g++\n#  Install requirements\nCOPY lmnet/*requirements.txt /tmp/requirements/\nRUN pip install -r /tmp/requirements/gpu.requirements.txt \\\n && rm -rf /tmp/requirements\n#  In order to install blueoil requirements `prompt_toolkit==1.0.15`, uninstall prompt-toolkit v2.0 that depends on `pdb==0.10.2`.\nRUN pip uninstall -y prompt-toolkit\n#  Build coco. It needs numpy.\nCOPY lmnet/third_party /home/blueoil/lmnet/third_party\n#  https://github.com/cocodataset/cocoapi/blob/440d145a30b410a2a6032827c568cff5dc1d2abf/PythonAPI/setup.py#L2\nRUN cd /home/blueoil/lmnet/third_party/coco/PythonAPI \\\n && pip install -e .\n#  For development\nRUN apt-get update \\\n && apt-get install x11-apps imagemagick -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Copy blueoil sources to docker image\nCOPY blueoil /home/blueoil/blueoil\nCOPY setup.* /home/blueoil/\nCOPY output_template /home/blueoil/output_template\n#  Install blueoil\nWORKDIR /home/blueoil\nRUN python setup.py install\nRUN chmod 777 /home/blueoil\n#  Copy dlk sources to docker image\nCOPY dlk /home/blueoil/dlk\n#  Install dlk\nWORKDIR /home/blueoil/dlk\nRUN PYTHONPATH=python/dlk python setup.py install\nRUN chmod 777 /home/blueoil/dlk\n#  Copy lmnet sources to docker image\nCOPY lmnet /home/blueoil/lmnet\nENV PYTHONPATH=\"$PYTHONPATH:/home/blueoil:/home/blueoil/lmnet:/home/blueoil/dlk/python/dlk\"\nWORKDIR /home/blueoil\n","injectedSmells":[],"originalDockerfileHash":"ccfc73661f9b9cd11b14df3a0d83b830","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\nMAINTAINER masuda@leapmind.io\n#   TensorBoard\nEXPOSE 6006/tcp\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}\"\nRUN echo \"deb http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-updates main restricted universe multiverse \\ndeb http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb-src http://ftp.jaist.ac.jp/ubuntu/ xenial-backports main restricted universe multiverse \\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse \\ndeb-src http://security.ubuntu.com/ubuntu xenial-security main restricted universe multiverse\" > /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install cmake locales python3 python3-dev python3-pip python3-wheel -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install dependencies for Pillow, Scipy and matplotlib for display, and requirements for pyenv and pyenv virtualenv installation\nRUN apt-get update \\\n && apt-get install python3-pil libjpeg8-dev zlib1g-dev python3-matplotlib liblapack-dev git make build-essential libssl-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install aarch64 cross compile environment\nRUN apt-get update \\\n && apt-get install crossbuild-essential-arm64 -y\n#   Locale setting\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV PYENV_ROOT=\"/usr/local/pyenv\"\n#   Install pyenv to deal with different python versions\nRUN git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT\n#   Install pyenv virtualenv\n#   This is to avoid InvocationError which occurs at running tox test by changing python version with pyenv global/local command\n#   See also https://github.com/pyenv/pyenv-virtualenv/issues/202\nRUN git clone https://github.com/yyuu/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv\n#   Pyenv and pyenv virtualenv environment settings\nENV PATH=\"$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH\"\nRUN eval \"$( pyenv init - ;)\" \\\n && eval \"$( pyenv virtualenv-init - ;)\"\n#   Python version settings\nARG python_version=\"3.6.3\"\n#   Setup python virtualenv\nRUN pyenv install ${python_version} \\\n && pyenv virtualenv -p python${python_version%.*} ${python_version} python${python_version%.*} \\\n && pyenv global python${python_version%.*}\nRUN pip install pip setuptools -U\n#   Install x-compiler\nRUN apt-get update \\\n && apt-get install g++-5-arm-linux-gnueabihf -y \\\n && ln -s /usr/bin/arm-linux-gnueabihf-g++-5 /usr/bin/arm-linux-gnueabihf-g++\n#   Install requirements\nCOPY lmnet/*requirements.txt /tmp/requirements/\nRUN pip install -r /tmp/requirements/gpu.requirements.txt \\\n && rm -rf /tmp/requirements\n#   In order to install blueoil requirements `prompt_toolkit==1.0.15`, uninstall prompt-toolkit v2.0 that depends on `pdb==0.10.2`.\nRUN pip uninstall -y prompt-toolkit\n#   Build coco. It needs numpy.\nCOPY lmnet/third_party /home/blueoil/lmnet/third_party\n#   https://github.com/cocodataset/cocoapi/blob/440d145a30b410a2a6032827c568cff5dc1d2abf/PythonAPI/setup.py#L2\nRUN cd /home/blueoil/lmnet/third_party/coco/PythonAPI \\\n && pip install -e .\n#   For development\nRUN apt-get update \\\n && apt-get install x11-apps imagemagick -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy blueoil sources to docker image\nCOPY blueoil /home/blueoil/blueoil\nCOPY setup.* /home/blueoil/\nCOPY output_template /home/blueoil/output_template\n#   Install blueoil\nWORKDIR /home/blueoil\nRUN python setup.py install\nRUN chmod 777 /home/blueoil\n#   Copy dlk sources to docker image\nCOPY dlk /home/blueoil/dlk\n#   Install dlk\nWORKDIR /home/blueoil/dlk\nRUN PYTHONPATH=python/dlk python setup.py install\nRUN chmod 777 /home/blueoil/dlk\n#   Copy lmnet sources to docker image\nCOPY lmnet /home/blueoil/lmnet\nENV PYTHONPATH=\"$PYTHONPATH:/home/blueoil:/home/blueoil/lmnet:/home/blueoil/dlk/python/dlk\"\nWORKDIR /home/blueoil\n","originalDockerfileUglifiedHash":"4f3837fc25ed503d543977aa3d9ae602","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/85173e920a7da813a46a1f2cf235e0b4ace92f7e.dockerfile"}