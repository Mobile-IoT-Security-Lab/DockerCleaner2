{"seed":2975387550,"processedDockerfileHash":"cae9318c4d7d280650931a54306b4580","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile is used to construct container images for all of the bugs\n#   belonging to the ROBUST dataset.\n#\n#   Build Arguments:\n#\n#     ROS_DISTRO -- the name of the ROS distribution that should be used when\n#       replicating the bug.\n#     UBUNTU_VERSION -- the version of Ubuntu that should be used when\n#       replicating the bug; should be given as a numbered version to avoid\n#       non-deterministic build outcomes.\n#     USE_APT_OLD_RELEASES -- a flag that accepts the values \"True\" or \"False\".\n#       If set to true, the resulting Docker image will attempt to use archival\n#       package sources. Allows \"apt-get\" to be used with versions of Ubuntu\n#       that are no longer maintained.\n#     CATKIN_PACKAGES -- a space-colon-delimited list of the names of the\n#       packages under test.\n#     REPO_FORK_URL -- the URL of the ROBUST fork Git repository for this bug.\n#     REPO_BUG_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#       that provides the buggy version of the code. This version of the code\n#       also contains supplementary files that, where possible, provide a test\n#       case for the bug.\n#     REPO_FIX_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#       that provides the fixed version of the code. This version of the code\n#       also contains supplementary files that, where possible, provide a test\n#       case for the bug.\n#     IS_BUILD_FAILURE -- indicates whether or not the package under test is\n#       expected to encounter a build failure. Accepts values of \"True\" and\n#       \"False\".\n#\nARG UBUNTU_VERSION\n#  #############################################################################\n#   Download the forked repository as a build stage to improve build caching.\n#  #############################################################################\nFROM alpine:3.7 AS fork\nARG REPO_FORK_URL\nRUN apk add git=2.15.4-r0 --no-cache\nRUN echo \"[ROBUST] cloning repo: '${REPO_FORK_URL}'\" \\\n && git clone \"${REPO_FORK_URL}\" /repo-under-test \\\n && cd /repo-under-test \\\n && git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\" \\\n && echo \"[ROBUST] cloned repo.\"\nARG REPO_FIX_COMMIT\nARG REPO_BUG_COMMIT\nRUN cd /repo-under-test \\\n && echo \"[ROBUST] fetching latest buggy and fixed verisons...\" \\\n && echo \"[ROBUST] fetching bug version: ${REPO_BUG_COMMIT}\" \\\n && echo \"[ROBUST] fetching fix version: ${REPO_FIX_COMMIT}\" \\\n && git fetch --all \\\n && echo \"[ROBUST] fetched latest buggy and fixed versions.\" \\\n && echo \"[ROBUST] generating patch diff...\" \\\n && git diff \"${REPO_BUG_COMMIT}\" \"${REPO_FIX_COMMIT}\" > /fix.patch \\\n && echo \"[ROBUST] generated patch diff.\"\n#  #############################################################################\n#   Build a (reusable) base image for the ROS distro\n#  #############################################################################\nFROM ubuntu:${UBUNTU_VERSION} AS distro\nENV ROS_WSPACE=\"/ros_ws\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nARG ROS_DISTRO\nENV ROS_DISTRO=\"\\\"${ROS_DISTRO}\\\"\"\nRUN echo \"[ROBUST]: building image for ROS_DISTRO: '${ROS_DISTRO}'\"\nRUN echo \"#!/bin/bash \\nset -e \\nsource \\\"/opt/ros/${ROS_DISTRO}/setup.bash\\\" \\nsource \\\"${ROS_WSPACE}/devel/setup.bash\\\" \\nexec \\\"$@\\\"\" > /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n#   fix the package sources list to use archival sources\n#   https://askubuntu.com/questions/1000291/error-the-repository-xxx-does-not-have-a-release-file\n#   https://askubuntu.com/questions/91815/how-to-install-software-or-upgrade-from-an-old-unsupported-release\nARG USE_APT_OLD_RELEASES\nRUN echo \"[ROBUST] use archival sources? '${USE_APT_OLD_RELEASES}'\" \\\n && if [ \"${USE_APT_OLD_RELEASES}\" = \"True\" ] ; then echo \"[ROBUST] using archival sources\" \\\n && sed -i -re 's/([a-z]{2}\\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list \\\n && : \\\n && apt-get dist-upgrade ; else echo \"[ROBUST] not using archival sources\" ; fi\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential ca-certificates git python-pip cmake wget lsb-release -y ) \\\n && pip --version \\\n && pip install pip==9.0.3 --upgrade -i https://pypi.python.org/simple\nRUN pip install setuptools==67.6.1 --upgrade\nRUN pip install wheel==0.40.0 rosdep==0.22.2 wstool==0.1.17 rosinstall==0.7.8 rospkg==1.5.0 catkin_pkg==0.5.2 --upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   add OSRF repository to prevent Gazebo installation problems\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-stable.list \\\n && wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\n#   optionally add packages.ros.org as a source\nARG USE_OSRF_REPOS\nRUN if [ \"${USE_OSRF_REPOS}\" = \"True\" ] ; then echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -cs ;) main\" > /etc/apt/sources.list.d/ros-latest.list \\\n && wget http://packages.ros.org/ros.key -O - | apt-key add - ; fi\n#   create an empty workspace\nWORKDIR \"${ROS_WSPACE}\"\nRUN mkdir src\n#  #############################################################################\n#   Build a base image for the PUT that contains its dependencies\n#  #############################################################################\nFROM distro AS put_base_with_deps\nARG CATKIN_PACKAGES\nENV CATKIN_PACKAGES=\"\\\"${CATKIN_PACKAGES}\\\"\"\n#   NOTE assumes catkin >= 0.5.78 (supports --only-pkg-with-deps)\nRUN echo \"[ROBUST] creating build script\" \\\n && echo \"#!/bin/bash\\n source /opt/ros/$ROS_DISTRO/setup.bash \\\n && echo '[ROBUST] attempting to build PUT...' \\\n && echo \\\"[ROBUST] building packages: ${CATKIN_PACKAGES}\\\" \\\n && catkin_make --only-pkg-with-deps ${CATKIN_PACKAGES}\" > build.sh \\\n && chmod +x build.sh \\\n && echo \"[ROBUST] created build script\"\n#   setup workspace and import packages\nCOPY deps.rosinstall .\nRUN wstool init -j8 ${ROS_WSPACE}/src ${ROS_WSPACE}/deps.rosinstall\n#   install binary dependencies via rosdep\nRUN apt-get clean \\\n && : \\\n && rosdep init \\\n && rosdep update \\\n && rosdep install --from-paths src -i --rosdistro=${ROS_DISTRO} -y --skip-keys=\"python-rosdep python-catkin-pkg python-rospkg\" \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cd /usr/src/gtest \\\n && cmake CMakeLists.txt \\\n && make\n#   install source dependencies, then destroy workspace\nRUN ${ROS_WSPACE}/src/catkin/bin/catkin_make_isolated --install --install-space /opt/ros/${ROS_DISTRO} -DCMAKE_BUILD_TYPE=Release \\\n && rm -rf ${ROS_WSPACE}/src ${ROS_WSPACE}/build_isolated ${ROS_WSPACE}/devel_isolated\nCOPY --from=fork fix.patch fix.patch\nCOPY --from=fork repo-under-test src/repo-under-test\n#  #############################################################################\n#   Build an image for the buggy verison of the PUT\n#  #############################################################################\nFROM put_base_with_deps AS bug\nARG REPO_BUG_COMMIT\nARG IS_BUILD_FAILURE\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building buggy PUT...\" \\\n && echo \"[ROBUST] is a build failure expected? ${IS_BUILD_FAILURE}.\" \\\n && echo \"[ROBUST] using bug commit: ${REPO_BUG_COMMIT}\" \\\n && git reset --hard \"${REPO_BUG_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh || [ \"${IS_BUILD_FAILURE}\" = \"yes\" ]\nCOPY test.sh .\n#  #############################################################################\n#   Build an image for the fixed verison of the PUT\n#  #############################################################################\nFROM put_base_with_deps AS fix\nARG REPO_FIX_COMMIT\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building fixed PUT...\" \\\n && echo \"[ROBUST] using fix commit: ${REPO_FIX_COMMIT}\" \\\n && git reset --hard \"${REPO_FIX_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh\nCOPY test.sh .\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile is used to construct container images for all of the bugs\n#  belonging to the ROBUST dataset.\n#\n#  Build Arguments:\n#\n#    ROS_DISTRO -- the name of the ROS distribution that should be used when\n#      replicating the bug.\n#    UBUNTU_VERSION -- the version of Ubuntu that should be used when\n#      replicating the bug; should be given as a numbered version to avoid\n#      non-deterministic build outcomes.\n#    USE_APT_OLD_RELEASES -- a flag that accepts the values \"True\" or \"False\".\n#      If set to true, the resulting Docker image will attempt to use archival\n#      package sources. Allows \"apt-get\" to be used with versions of Ubuntu\n#      that are no longer maintained.\n#    CATKIN_PACKAGES -- a space-colon-delimited list of the names of the\n#      packages under test.\n#    REPO_FORK_URL -- the URL of the ROBUST fork Git repository for this bug.\n#    REPO_BUG_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#      that provides the buggy version of the code. This version of the code\n#      also contains supplementary files that, where possible, provide a test\n#      case for the bug.\n#    REPO_FIX_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#      that provides the fixed version of the code. This version of the code\n#      also contains supplementary files that, where possible, provide a test\n#      case for the bug.\n#    IS_BUILD_FAILURE -- indicates whether or not the package under test is\n#      expected to encounter a build failure. Accepts values of \"True\" and\n#      \"False\".\n#\nARG UBUNTU_VERSION\n# #############################################################################\n#  Download the forked repository as a build stage to improve build caching.\n# #############################################################################\nFROM alpine:3.7 AS fork\nARG REPO_FORK_URL\nRUN apk --no-cache add git\nRUN echo \"[ROBUST] cloning repo: '${REPO_FORK_URL}'\" \\\n && git clone \"${REPO_FORK_URL}\" /repo-under-test \\\n && cd /repo-under-test \\\n && git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\" \\\n && echo \"[ROBUST] cloned repo.\"\nARG REPO_FIX_COMMIT\nARG REPO_BUG_COMMIT\nRUN cd /repo-under-test \\\n && echo \"[ROBUST] fetching latest buggy and fixed verisons...\" \\\n && echo \"[ROBUST] fetching bug version: ${REPO_BUG_COMMIT}\" \\\n && echo \"[ROBUST] fetching fix version: ${REPO_FIX_COMMIT}\" \\\n && git fetch --all \\\n && echo \"[ROBUST] fetched latest buggy and fixed versions.\" \\\n && echo \"[ROBUST] generating patch diff...\" \\\n && git diff \"${REPO_BUG_COMMIT}\" \"${REPO_FIX_COMMIT}\" > /fix.patch \\\n && echo \"[ROBUST] generated patch diff.\"\n# #############################################################################\n#  Build a (reusable) base image for the ROS distro\n# #############################################################################\nFROM ubuntu:${UBUNTU_VERSION} AS distro\nENV ROS_WSPACE=\"/ros_ws\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nARG ROS_DISTRO\nENV ROS_DISTRO=\"\\\"${ROS_DISTRO}\\\"\"\nRUN echo \"[ROBUST]: building image for ROS_DISTRO: '${ROS_DISTRO}'\"\nRUN echo \"#!/bin/bash \\nset -e \\nsource \\\"/opt/ros/${ROS_DISTRO}/setup.bash\\\" \\nsource \\\"${ROS_WSPACE}/devel/setup.bash\\\" \\nexec \\\"$@\\\"\" > /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n#  fix the package sources list to use archival sources\n#  https://askubuntu.com/questions/1000291/error-the-repository-xxx-does-not-have-a-release-file\n#  https://askubuntu.com/questions/91815/how-to-install-software-or-upgrade-from-an-old-unsupported-release\nARG USE_APT_OLD_RELEASES\nRUN echo \"[ROBUST] use archival sources? '${USE_APT_OLD_RELEASES}'\" \\\n && if [ \"${USE_APT_OLD_RELEASES}\" = \"True\" ] ; then echo \"[ROBUST] using archival sources\" \\\n && sed -i -re 's/([a-z]{2}\\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get dist-upgrade ; else echo \"[ROBUST] not using archival sources\" ; fi\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates git python-pip cmake wget lsb-release -y \\\n && pip --version \\\n && pip install pip==9.0.3 --upgrade -i https://pypi.python.org/simple\nRUN pip install setuptools --upgrade\nRUN pip install wheel rosdep wstool rosinstall rospkg catkin_pkg --upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  add OSRF repository to prevent Gazebo installation problems\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-stable.list \\\n && wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\n#  optionally add packages.ros.org as a source\nARG USE_OSRF_REPOS\nRUN if [ \"${USE_OSRF_REPOS}\" = \"True\" ] ; then echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -cs ;) main\" > /etc/apt/sources.list.d/ros-latest.list \\\n && wget http://packages.ros.org/ros.key -O - | apt-key add - ; fi\n#  create an empty workspace\nWORKDIR \"${ROS_WSPACE}\"\nRUN mkdir src\n# #############################################################################\n#  Build a base image for the PUT that contains its dependencies\n# #############################################################################\nFROM distro AS put_base_with_deps\nARG CATKIN_PACKAGES\nENV CATKIN_PACKAGES=\"\\\"${CATKIN_PACKAGES}\\\"\"\n#  NOTE assumes catkin >= 0.5.78 (supports --only-pkg-with-deps)\nRUN echo \"[ROBUST] creating build script\" \\\n && echo \"#!/bin/bash\\n source /opt/ros/$ROS_DISTRO/setup.bash \\\n && echo '[ROBUST] attempting to build PUT...' \\\n && echo \\\"[ROBUST] building packages: ${CATKIN_PACKAGES}\\\" \\\n && catkin_make --only-pkg-with-deps ${CATKIN_PACKAGES}\" > build.sh \\\n && chmod +x build.sh \\\n && echo \"[ROBUST] created build script\"\n#  setup workspace and import packages\nCOPY deps.rosinstall .\nRUN wstool init -j8 ${ROS_WSPACE}/src ${ROS_WSPACE}/deps.rosinstall\n#  install binary dependencies via rosdep\nRUN apt-get clean \\\n && apt-get update \\\n && rosdep init \\\n && rosdep update \\\n && rosdep install --from-paths src -i --rosdistro=${ROS_DISTRO} -y --skip-keys=\"python-rosdep python-catkin-pkg python-rospkg\" \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cd /usr/src/gtest \\\n && cmake CMakeLists.txt \\\n && make\n#  install source dependencies, then destroy workspace\nRUN ${ROS_WSPACE}/src/catkin/bin/catkin_make_isolated --install --install-space /opt/ros/${ROS_DISTRO} -DCMAKE_BUILD_TYPE=Release \\\n && rm -rf ${ROS_WSPACE}/src ${ROS_WSPACE}/build_isolated ${ROS_WSPACE}/devel_isolated\nCOPY --from=fork fix.patch fix.patch\nCOPY --from=fork repo-under-test src/repo-under-test\n# #############################################################################\n#  Build an image for the buggy verison of the PUT\n# #############################################################################\nFROM put_base_with_deps AS bug\nARG REPO_BUG_COMMIT\nARG IS_BUILD_FAILURE\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building buggy PUT...\" \\\n && echo \"[ROBUST] is a build failure expected? ${IS_BUILD_FAILURE}.\" \\\n && echo \"[ROBUST] using bug commit: ${REPO_BUG_COMMIT}\" \\\n && git reset --hard \"${REPO_BUG_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh || [ \"${IS_BUILD_FAILURE}\" = \"yes\" ]\nCOPY test.sh .\n# #############################################################################\n#  Build an image for the fixed verison of the PUT\n# #############################################################################\nFROM put_base_with_deps AS fix\nARG REPO_FIX_COMMIT\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building fixed PUT...\" \\\n && echo \"[ROBUST] using fix commit: ${REPO_FIX_COMMIT}\" \\\n && git reset --hard \"${REPO_FIX_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh\nCOPY test.sh .\n","injectedSmells":[],"originalDockerfileHash":"c905db53aa61ba63d3d69239b158cf9e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile is used to construct container images for all of the bugs\n#   belonging to the ROBUST dataset.\n#\n#   Build Arguments:\n#\n#     ROS_DISTRO -- the name of the ROS distribution that should be used when\n#       replicating the bug.\n#     UBUNTU_VERSION -- the version of Ubuntu that should be used when\n#       replicating the bug; should be given as a numbered version to avoid\n#       non-deterministic build outcomes.\n#     USE_APT_OLD_RELEASES -- a flag that accepts the values \"True\" or \"False\".\n#       If set to true, the resulting Docker image will attempt to use archival\n#       package sources. Allows \"apt-get\" to be used with versions of Ubuntu\n#       that are no longer maintained.\n#     CATKIN_PACKAGES -- a space-colon-delimited list of the names of the\n#       packages under test.\n#     REPO_FORK_URL -- the URL of the ROBUST fork Git repository for this bug.\n#     REPO_BUG_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#       that provides the buggy version of the code. This version of the code\n#       also contains supplementary files that, where possible, provide a test\n#       case for the bug.\n#     REPO_FIX_COMMIT -- the SHA-1 hash for the commit in the forked repository\n#       that provides the fixed version of the code. This version of the code\n#       also contains supplementary files that, where possible, provide a test\n#       case for the bug.\n#     IS_BUILD_FAILURE -- indicates whether or not the package under test is\n#       expected to encounter a build failure. Accepts values of \"True\" and\n#       \"False\".\n#\nARG UBUNTU_VERSION\n#  #############################################################################\n#   Download the forked repository as a build stage to improve build caching.\n#  #############################################################################\nFROM alpine:3.7 AS fork\nARG REPO_FORK_URL\nRUN apk --no-cache add git\nRUN echo \"[ROBUST] cloning repo: '${REPO_FORK_URL}'\" \\\n && git clone \"${REPO_FORK_URL}\" /repo-under-test \\\n && cd /repo-under-test \\\n && git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\" \\\n && echo \"[ROBUST] cloned repo.\"\nARG REPO_FIX_COMMIT\nARG REPO_BUG_COMMIT\nRUN cd /repo-under-test \\\n && echo \"[ROBUST] fetching latest buggy and fixed verisons...\" \\\n && echo \"[ROBUST] fetching bug version: ${REPO_BUG_COMMIT}\" \\\n && echo \"[ROBUST] fetching fix version: ${REPO_FIX_COMMIT}\" \\\n && git fetch --all \\\n && echo \"[ROBUST] fetched latest buggy and fixed versions.\" \\\n && echo \"[ROBUST] generating patch diff...\" \\\n && git diff \"${REPO_BUG_COMMIT}\" \"${REPO_FIX_COMMIT}\" > /fix.patch \\\n && echo \"[ROBUST] generated patch diff.\"\n#  #############################################################################\n#   Build a (reusable) base image for the ROS distro\n#  #############################################################################\nFROM ubuntu:${UBUNTU_VERSION} AS distro\nENV ROS_WSPACE=\"/ros_ws\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nARG ROS_DISTRO\nENV ROS_DISTRO=\"\\\"${ROS_DISTRO}\\\"\"\nRUN echo \"[ROBUST]: building image for ROS_DISTRO: '${ROS_DISTRO}'\"\nRUN echo \"#!/bin/bash \\nset -e \\nsource \\\"/opt/ros/${ROS_DISTRO}/setup.bash\\\" \\nsource \\\"${ROS_WSPACE}/devel/setup.bash\\\" \\nexec \\\"$@\\\"\" > /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n#   fix the package sources list to use archival sources\n#   https://askubuntu.com/questions/1000291/error-the-repository-xxx-does-not-have-a-release-file\n#   https://askubuntu.com/questions/91815/how-to-install-software-or-upgrade-from-an-old-unsupported-release\nARG USE_APT_OLD_RELEASES\nRUN echo \"[ROBUST] use archival sources? '${USE_APT_OLD_RELEASES}'\" \\\n && if [ \"${USE_APT_OLD_RELEASES}\" = \"True\" ] ; then echo \"[ROBUST] using archival sources\" \\\n && sed -i -re 's/([a-z]{2}\\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get dist-upgrade ; else echo \"[ROBUST] not using archival sources\" ; fi\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates git python-pip cmake wget lsb-release -y \\\n && pip --version \\\n && pip install pip==9.0.3 --upgrade -i https://pypi.python.org/simple\nRUN pip install setuptools --upgrade\nRUN pip install wheel rosdep wstool rosinstall rospkg catkin_pkg --upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   add OSRF repository to prevent Gazebo installation problems\nRUN echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs ` main\" > /etc/apt/sources.list.d/gazebo-stable.list \\\n && wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\n#   optionally add packages.ros.org as a source\nARG USE_OSRF_REPOS\nRUN if [ \"${USE_OSRF_REPOS}\" = \"True\" ] ; then echo \"deb http://packages.ros.org/ros/ubuntu $( lsb_release -cs ;) main\" > /etc/apt/sources.list.d/ros-latest.list \\\n && wget http://packages.ros.org/ros.key -O - | apt-key add - ; fi\n#   create an empty workspace\nWORKDIR \"${ROS_WSPACE}\"\nRUN mkdir src\n#  #############################################################################\n#   Build a base image for the PUT that contains its dependencies\n#  #############################################################################\nFROM distro AS put_base_with_deps\nARG CATKIN_PACKAGES\nENV CATKIN_PACKAGES=\"\\\"${CATKIN_PACKAGES}\\\"\"\n#   NOTE assumes catkin >= 0.5.78 (supports --only-pkg-with-deps)\nRUN echo \"[ROBUST] creating build script\" \\\n && echo \"#!/bin/bash\\n source /opt/ros/$ROS_DISTRO/setup.bash \\\n && echo '[ROBUST] attempting to build PUT...' \\\n && echo \\\"[ROBUST] building packages: ${CATKIN_PACKAGES}\\\" \\\n && catkin_make --only-pkg-with-deps ${CATKIN_PACKAGES}\" > build.sh \\\n && chmod +x build.sh \\\n && echo \"[ROBUST] created build script\"\n#   setup workspace and import packages\nCOPY deps.rosinstall .\nRUN wstool init -j8 ${ROS_WSPACE}/src ${ROS_WSPACE}/deps.rosinstall\n#   install binary dependencies via rosdep\nRUN apt-get clean \\\n && apt-get update \\\n && rosdep init \\\n && rosdep update \\\n && rosdep install --from-paths src -i --rosdistro=${ROS_DISTRO} -y --skip-keys=\"python-rosdep python-catkin-pkg python-rospkg\" \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cd /usr/src/gtest \\\n && cmake CMakeLists.txt \\\n && make\n#   install source dependencies, then destroy workspace\nRUN ${ROS_WSPACE}/src/catkin/bin/catkin_make_isolated --install --install-space /opt/ros/${ROS_DISTRO} -DCMAKE_BUILD_TYPE=Release \\\n && rm -rf ${ROS_WSPACE}/src ${ROS_WSPACE}/build_isolated ${ROS_WSPACE}/devel_isolated\nCOPY --from=fork fix.patch fix.patch\nCOPY --from=fork repo-under-test src/repo-under-test\n#  #############################################################################\n#   Build an image for the buggy verison of the PUT\n#  #############################################################################\nFROM put_base_with_deps AS bug\nARG REPO_BUG_COMMIT\nARG IS_BUILD_FAILURE\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building buggy PUT...\" \\\n && echo \"[ROBUST] is a build failure expected? ${IS_BUILD_FAILURE}.\" \\\n && echo \"[ROBUST] using bug commit: ${REPO_BUG_COMMIT}\" \\\n && git reset --hard \"${REPO_BUG_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh || [ \"${IS_BUILD_FAILURE}\" = \"yes\" ]\nCOPY test.sh .\n#  #############################################################################\n#   Build an image for the fixed verison of the PUT\n#  #############################################################################\nFROM put_base_with_deps AS fix\nARG REPO_FIX_COMMIT\nRUN cd src/repo-under-test \\\n && echo \"[ROBUST] building fixed PUT...\" \\\n && echo \"[ROBUST] using fix commit: ${REPO_FIX_COMMIT}\" \\\n && git reset --hard \"${REPO_FIX_COMMIT}\" \\\n && cd \"${ROS_WSPACE}\" \\\n && ./build.sh\nCOPY test.sh .\n","originalDockerfileUglifiedHash":"29693fa0a2969ccb66c8e0afc8c255ca","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b9c78d454e37735cabf737b14529e797a548e141.dockerfile"}