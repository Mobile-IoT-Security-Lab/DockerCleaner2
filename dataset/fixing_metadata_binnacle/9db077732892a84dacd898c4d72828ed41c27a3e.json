{"seed":4217254676,"processedDockerfileHash":"754612e1c7480a294e5dc80cdea161be","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This is using API Platform's Dockerfile\n#   the different stages of this Dockerfile are meant to be built into separate images\n#   https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#   https://docs.docker.com/compose/compose-file/#target\n#   https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.17\nARG VARNISH_VERSION=6.2\n#   \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS sbwa_php\n#   Enable Blackfire probe\nRUN version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/alpine/amd64/$version \\\n && mkdir -p /tmp/blackfire \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \\\n && mv /tmp/blackfire/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n && rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz\n#   persistent / runtime deps\nRUN apk add acl file gettext git imagemagick freetype libpng libjpeg-turbo yarn icu-libs --no-cache\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add icu-dev libzip-dev postgresql-dev zlib-dev imagemagick-dev freetype-dev libpng-dev libjpeg-turbo-dev libssh-dev $PHPIZE_DEPS --no-cache --virtual .build-deps ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ ; docker-php-ext-install -j$( nproc ;) intl pdo_mysql zip exif bcmath sockets gd ; pecl install apcu-${APCU_VERSION} xdebug ; pecl install imagick ; pecl clear-cache ; docker-php-ext-enable apcu opcache imagick ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add $runDeps --no-cache --virtual .api-phpexts-rundeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.prod.ini $PHP_INI_DIR/php.ini\nCOPY _docker/php/mods-available/* $PHP_INI_DIR/mods-available/\nCOPY _docker/php/conf.d/silverback-web-apps.ini $PHP_INI_DIR/conf.d/silverback-web-apps.ini\n#   https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#   build for production\nARG APP_ENV=prod\n#   prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.* symfony.lock ./\n#   do not use .env files in production\nRUN echo '<?php return [];' > .env.local.php\nRUN set -eux ; composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress --no-suggest ; composer clear-cache\n#   copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nCOPY assets assets/\nCOPY templates templates/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; sync\nVOLUME /srv/api/var\nCOPY _docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n#   Enable configured cron jobs\nCOPY _docker/php/crontab /etc/cron.d/app-cron\nRUN chmod 0644 /etc/cron.d/app-cron ; crontab /etc/cron.d/app-cron ; touch /var/log/cron.log\nCMD [\"cron\"]\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#   \"nginx\" stage\n#   depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS sbwa_nginx\nENV CORS_ALLOW_ORIGIN=\"https?://localhost:?[0-9]*\"\nENV UPSTREAM_CONTAINER=\"php\"\nENV UPSTREAM_PORT=\"9000\"\nCOPY _docker/nginx/conf.d/custom.conf /etc/nginx/conf.d/custom.conf\nCOPY _docker/nginx/conf.d/default.conf /srv/api/tmp/default.conf\nWORKDIR /srv/api\nCOPY --from=sbwa_php /srv/api/public public/\nCOPY _docker/nginx/start.sh /usr/local/bin/start\nRUN chmod +x /usr/local/bin/start\nENTRYPOINT [\"start\"]\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n#   \"varnish\" stage\n#   does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS sbwa_varnish\nENV VARNISH_CONFIG=\"default.vcl\"\nCOPY _docker/varnish/conf /usr/local/etc/varnish/available/\nCOPY _docker/varnish/errors /var/www/errors/\nRUN ln -s \"/usr/local/etc/varnish/available/${VARNISH_CONFIG}\" /usr/local/etc/varnish/default.vcl\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\", \"-p\", \"http_resp_hdr_len=256000\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#  This is using API Platform's Dockerfile\n#  the different stages of this Dockerfile are meant to be built into separate images\n#  https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#  https://docs.docker.com/compose/compose-file/#target\n#  https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.17\nARG VARNISH_VERSION=6.2\n#  \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS sbwa_php\n#  Enable Blackfire probe\nRUN version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/alpine/amd64/$version \\\n && mkdir -p /tmp/blackfire \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \\\n && mv /tmp/blackfire/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n && rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz\n#  persistent / runtime deps\nRUN apk add --no-cache acl file gettext git imagemagick freetype libpng libjpeg-turbo yarn icu-libs\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS icu-dev libzip-dev postgresql-dev zlib-dev imagemagick-dev freetype-dev libpng-dev libjpeg-turbo-dev libssh-dev ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ ; docker-php-ext-install -j$( nproc ;) intl pdo_mysql zip exif bcmath sockets gd ; pecl install apcu-${APCU_VERSION} xdebug ; pecl install imagick ; pecl clear-cache ; docker-php-ext-enable apcu opcache imagick ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .api-phpexts-rundeps $runDeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.prod.ini $PHP_INI_DIR/php.ini\nCOPY _docker/php/mods-available/* $PHP_INI_DIR/mods-available/\nCOPY _docker/php/conf.d/silverback-web-apps.ini $PHP_INI_DIR/conf.d/silverback-web-apps.ini\n#  https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#  install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#  build for production\nARG APP_ENV=prod\n#  prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.* symfony.lock ./\n#  do not use .env files in production\nRUN echo '<?php return [];' > .env.local.php\nRUN set -eux ; composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress --no-suggest ; composer clear-cache\n#  copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nCOPY assets assets/\nCOPY templates templates/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; sync\nVOLUME /srv/api/var\nCOPY _docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n#  Enable configured cron jobs\nCOPY _docker/php/crontab /etc/cron.d/app-cron\nRUN chmod 0644 /etc/cron.d/app-cron ; crontab /etc/cron.d/app-cron ; touch /var/log/cron.log\nCMD [\"cron\"]\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#  \"nginx\" stage\n#  depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS sbwa_nginx\nENV CORS_ALLOW_ORIGIN=\"https?://localhost:?[0-9]*\"\nENV UPSTREAM_CONTAINER=\"php\"\nENV UPSTREAM_PORT=\"9000\"\nCOPY _docker/nginx/conf.d/custom.conf /etc/nginx/conf.d/custom.conf\nCOPY _docker/nginx/conf.d/default.conf /srv/api/tmp/default.conf\nWORKDIR /srv/api\nCOPY --from=sbwa_php /srv/api/public public/\nCOPY _docker/nginx/start.sh /usr/local/bin/start\nRUN chmod +x /usr/local/bin/start\nENTRYPOINT [\"start\"]\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n#  \"varnish\" stage\n#  does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS sbwa_varnish\nENV VARNISH_CONFIG=\"default.vcl\"\nCOPY _docker/varnish/conf /usr/local/etc/varnish/available/\nCOPY _docker/varnish/errors /var/www/errors/\nRUN ln -s \"/usr/local/etc/varnish/available/${VARNISH_CONFIG}\" /usr/local/etc/varnish/default.vcl\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\", \"-p\", \"http_resp_hdr_len=256000\"]\n","injectedSmells":[],"originalDockerfileHash":"6f981619a73fd1fa6afb68d8fb5e3314","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This is using API Platform's Dockerfile\n#   the different stages of this Dockerfile are meant to be built into separate images\n#   https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#   https://docs.docker.com/compose/compose-file/#target\n#   https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.17\nARG VARNISH_VERSION=6.2\n#   \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS sbwa_php\n#   Enable Blackfire probe\nRUN version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/alpine/amd64/$version \\\n && mkdir -p /tmp/blackfire \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \\\n && mv /tmp/blackfire/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini \\\n && rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz\n#   persistent / runtime deps\nRUN apk add --no-cache acl file gettext git imagemagick freetype libpng libjpeg-turbo yarn icu-libs\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS icu-dev libzip-dev postgresql-dev zlib-dev imagemagick-dev freetype-dev libpng-dev libjpeg-turbo-dev libssh-dev ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ ; docker-php-ext-install -j$( nproc ;) intl pdo_mysql zip exif bcmath sockets gd ; pecl install apcu-${APCU_VERSION} xdebug ; pecl install imagick ; pecl clear-cache ; docker-php-ext-enable apcu opcache imagick ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .api-phpexts-rundeps $runDeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.prod.ini $PHP_INI_DIR/php.ini\nCOPY _docker/php/mods-available/* $PHP_INI_DIR/mods-available/\nCOPY _docker/php/conf.d/silverback-web-apps.ini $PHP_INI_DIR/conf.d/silverback-web-apps.ini\n#   https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#   build for production\nARG APP_ENV=prod\n#   prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.* symfony.lock ./\n#   do not use .env files in production\nRUN echo '<?php return [];' > .env.local.php\nRUN set -eux ; composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress --no-suggest ; composer clear-cache\n#   copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nCOPY assets assets/\nCOPY templates templates/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; sync\nVOLUME /srv/api/var\nCOPY _docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\n#   Enable configured cron jobs\nCOPY _docker/php/crontab /etc/cron.d/app-cron\nRUN chmod 0644 /etc/cron.d/app-cron ; crontab /etc/cron.d/app-cron ; touch /var/log/cron.log\nCMD [\"cron\"]\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#   \"nginx\" stage\n#   depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS sbwa_nginx\nENV CORS_ALLOW_ORIGIN=\"https?://localhost:?[0-9]*\"\nENV UPSTREAM_CONTAINER=\"php\"\nENV UPSTREAM_PORT=\"9000\"\nCOPY _docker/nginx/conf.d/custom.conf /etc/nginx/conf.d/custom.conf\nCOPY _docker/nginx/conf.d/default.conf /srv/api/tmp/default.conf\nWORKDIR /srv/api\nCOPY --from=sbwa_php /srv/api/public public/\nCOPY _docker/nginx/start.sh /usr/local/bin/start\nRUN chmod +x /usr/local/bin/start\nENTRYPOINT [\"start\"]\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n#   \"varnish\" stage\n#   does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS sbwa_varnish\nENV VARNISH_CONFIG=\"default.vcl\"\nCOPY _docker/varnish/conf /usr/local/etc/varnish/available/\nCOPY _docker/varnish/errors /var/www/errors/\nRUN ln -s \"/usr/local/etc/varnish/available/${VARNISH_CONFIG}\" /usr/local/etc/varnish/default.vcl\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\", \"-p\", \"http_resp_hdr_len=256000\"]\n","originalDockerfileUglifiedHash":"18e4f200df75259ad39502e7de5ec8f1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9db077732892a84dacd898c4d72828ed41c27a3e.dockerfile"}