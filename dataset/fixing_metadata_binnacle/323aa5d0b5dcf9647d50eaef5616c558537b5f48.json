{"seed":3804058007,"processedDockerfileHash":"33652199fa0630492a72578a40798869","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:latest\nENV USER=\"root\"\n#   -------------------------------------------------------------------------------------\n#   install needed software -\n#   openssh\n#   mpi\n#   awscli\n#   supervisor\n#   -------------------------------------------------------------------------------------\nRUN :\nRUN apt-get upgrade -y\nRUN DEBIAN_FRONTEND=noninteractive apt install -y iproute2 openssh-server openssh-client python python-pip python3 python3-dev python3-pip build-essential gfortran wget curl libfftw3-dev git libcudnn7 libcudnn7-dev wget libjemalloc-dev pkg-config zip unzip\nRUN pip2 install supervisor awscli\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\n#  ####################################################\n#  # SSH SETUP\nRUN mkdir -p /var/run/sshd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nENV SSHDIR=\"/root/.ssh\"\nRUN mkdir -p ${SSHDIR}\nRUN touch ${SSHDIR}/sshd_config\nRUN ssh-keygen -t rsa -f ${SSHDIR}/ssh_host_rsa_key -N ''\nRUN cp ${SSHDIR}/ssh_host_rsa_key.pub ${SSHDIR}/authorized_keys\nRUN cp ${SSHDIR}/ssh_host_rsa_key ${SSHDIR}/id_rsa\nRUN echo \" IdentityFile ${SSHDIR}/id_rsa\" >> /etc/ssh/ssh_config\nRUN echo \"Host *\" >> /etc/ssh/ssh_config \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN chmod -R 600 ${SSHDIR}/* \\\n && chown -R ${USER}:${USER} ${SSHDIR}/\n#   check if ssh agent is running or not, if not, run\nRUN eval `ssh-agent -s ` \\\n && ssh-add ${SSHDIR}/id_rsa\n#  #################################################\n#  # S3 OPTIMIZATION\nRUN aws configure set default.s3.max_concurrent_requests 30\nRUN aws configure set default.s3.max_queue_size 10000\nRUN aws configure set default.s3.multipart_threshold 64MB\nRUN aws configure set default.s3.multipart_chunksize 16MB\nRUN aws configure set default.s3.max_bandwidth 4096MB/s\nRUN aws configure set default.s3.addressing_style path\n#  #################################################\n#  # CUDA MPI\nRUN wget -O /tmp/openmpi.tar.gz https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz \\\n && tar -xvf /tmp/openmpi.tar.gz -C /tmp\nRUN cd /tmp/openmpi* \\\n && ./configure --prefix=/opt/openmpi --with-cuda --enable-mpirun-prefix-by-default \\\n && make -j $( nproc ;) \\\n && make install\nRUN echo \"export PATH=$PATH:/opt/openmpi/bin\" >> /etc/bash.bashrc\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/openmpi/lib:/usr/local/cuda/include:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\" >> /etc/bash.bashrc\n#  ##################################################\n#  # TENSORFLOW INSTALL\nRUN pip3 install numpy six wheel mock\nRUN pip3 install keras_applications==1.0.6 --no-deps\nRUN pip3 install keras_preprocessing==1.0.5 --no-deps\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/lib\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/include\nRUN cp /usr/lib/x86_64-linux-gnu/libnccl* /usr/lib/x86_64-linux-gnu/nccl/\nRUN cp /usr/include/nccl.h /usr/lib/x86_64-linux-gnu/nccl/include\nRUN wget -O /tmp/bazel.sh \"https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\"\nRUN chmod +x /tmp/bazel.sh\nRUN bash -c \"/tmp/bazel.sh\"\nRUN git clone https://github.com/tensorflow/tensorflow /root/tensorflow\nCOPY conf/tensorflow_build.sh /root/\nRUN chmod +x /root/tensorflow_build.sh\nRUN /root/tensorflow_build.sh\nCOPY conf/horovod_build.sh /root/\nRUN chmod +x /root/horovod_build.sh\nRUN /root/horovod_build.sh\n#  ##################################################\n#  # IMAGENET DATASET\nRUN git clone https://github.com/aws-samples/deep-learning-models.git /root/deep-learning-models\n#  ##################################################\n#  # supervisor container startup\nCOPY conf/supervisord/supervisord.conf /etc/supervisor/supervisord.conf\nCOPY supervised-scripts/mpi-run.sh supervised-scripts/mpi-run.sh\nRUN chmod 755 supervised-scripts/mpi-run.sh\nEXPOSE 22/tcp\nRUN export PATH=\"$PATH:/opt/openmpi/bin\"\nCOPY batch-runtime-scripts/entry-point.sh batch-runtime-scripts/entry-point.sh\nRUN chmod 0755 batch-runtime-scripts/entry-point.sh\nCMD /batch-runtime-scripts/entry-point.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:latest\nENV USER=\"root\"\n#  -------------------------------------------------------------------------------------\n#  install needed software -\n#  openssh\n#  mpi\n#  awscli\n#  supervisor\n#  -------------------------------------------------------------------------------------\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN DEBIAN_FRONTEND=noninteractive apt install -y iproute2 openssh-server openssh-client python python-pip python3 python3-dev python3-pip build-essential gfortran wget curl libfftw3-dev git libcudnn7 libcudnn7-dev wget libjemalloc-dev pkg-config zip unzip\nRUN pip2 install supervisor awscli\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\n# ####################################################\n# # SSH SETUP\nRUN mkdir -p /var/run/sshd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nENV SSHDIR=\"/root/.ssh\"\nRUN mkdir -p ${SSHDIR}\nRUN touch ${SSHDIR}/sshd_config\nRUN ssh-keygen -t rsa -f ${SSHDIR}/ssh_host_rsa_key -N ''\nRUN cp ${SSHDIR}/ssh_host_rsa_key.pub ${SSHDIR}/authorized_keys\nRUN cp ${SSHDIR}/ssh_host_rsa_key ${SSHDIR}/id_rsa\nRUN echo \" IdentityFile ${SSHDIR}/id_rsa\" >> /etc/ssh/ssh_config\nRUN echo \"Host *\" >> /etc/ssh/ssh_config \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN chmod -R 600 ${SSHDIR}/* \\\n && chown -R ${USER}:${USER} ${SSHDIR}/\n#  check if ssh agent is running or not, if not, run\nRUN eval `ssh-agent -s ` \\\n && ssh-add ${SSHDIR}/id_rsa\n# #################################################\n# # S3 OPTIMIZATION\nRUN aws configure set default.s3.max_concurrent_requests 30\nRUN aws configure set default.s3.max_queue_size 10000\nRUN aws configure set default.s3.multipart_threshold 64MB\nRUN aws configure set default.s3.multipart_chunksize 16MB\nRUN aws configure set default.s3.max_bandwidth 4096MB/s\nRUN aws configure set default.s3.addressing_style path\n# #################################################\n# # CUDA MPI\nRUN wget -O /tmp/openmpi.tar.gz https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz \\\n && tar -xvf /tmp/openmpi.tar.gz -C /tmp\nRUN cd /tmp/openmpi* \\\n && ./configure --prefix=/opt/openmpi --with-cuda --enable-mpirun-prefix-by-default \\\n && make -j $( nproc ;) \\\n && make install\nRUN echo \"export PATH=$PATH:/opt/openmpi/bin\" >> /etc/bash.bashrc\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/openmpi/lib:/usr/local/cuda/include:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\" >> /etc/bash.bashrc\n# ##################################################\n# # TENSORFLOW INSTALL\nRUN pip3 install numpy six wheel mock\nRUN pip3 install keras_applications==1.0.6 --no-deps\nRUN pip3 install keras_preprocessing==1.0.5 --no-deps\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/lib\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/include\nRUN cp /usr/lib/x86_64-linux-gnu/libnccl* /usr/lib/x86_64-linux-gnu/nccl/\nRUN cp /usr/include/nccl.h /usr/lib/x86_64-linux-gnu/nccl/include\nRUN wget -O /tmp/bazel.sh \"https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\"\nRUN chmod +x /tmp/bazel.sh\nRUN bash -c \"/tmp/bazel.sh\"\nRUN git clone https://github.com/tensorflow/tensorflow /root/tensorflow\nADD conf/tensorflow_build.sh /root/\nRUN chmod +x /root/tensorflow_build.sh\nRUN /root/tensorflow_build.sh\nADD conf/horovod_build.sh /root/\nRUN chmod +x /root/horovod_build.sh\nRUN /root/horovod_build.sh\n# ##################################################\n# # IMAGENET DATASET\nRUN git clone https://github.com/aws-samples/deep-learning-models.git /root/deep-learning-models\n# ##################################################\n# # supervisor container startup\nADD conf/supervisord/supervisord.conf /etc/supervisor/supervisord.conf\nADD supervised-scripts/mpi-run.sh supervised-scripts/mpi-run.sh\nRUN chmod 755 supervised-scripts/mpi-run.sh\nEXPOSE 22/tcp\nRUN export PATH=\"$PATH:/opt/openmpi/bin\"\nADD batch-runtime-scripts/entry-point.sh batch-runtime-scripts/entry-point.sh\nRUN chmod 0755 batch-runtime-scripts/entry-point.sh\nCMD /batch-runtime-scripts/entry-point.sh\n","injectedSmells":[],"originalDockerfileHash":"7141630a802aad0d87000e24e2bd5197","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:latest\nENV USER=\"root\"\n#   -------------------------------------------------------------------------------------\n#   install needed software -\n#   openssh\n#   mpi\n#   awscli\n#   supervisor\n#   -------------------------------------------------------------------------------------\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN DEBIAN_FRONTEND=noninteractive apt install -y iproute2 openssh-server openssh-client python python-pip python3 python3-dev python3-pip build-essential gfortran wget curl libfftw3-dev git libcudnn7 libcudnn7-dev wget libjemalloc-dev pkg-config zip unzip\nRUN pip2 install supervisor awscli\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\n#  ####################################################\n#  # SSH SETUP\nRUN mkdir -p /var/run/sshd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nRUN echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\nENV SSHDIR=\"/root/.ssh\"\nRUN mkdir -p ${SSHDIR}\nRUN touch ${SSHDIR}/sshd_config\nRUN ssh-keygen -t rsa -f ${SSHDIR}/ssh_host_rsa_key -N ''\nRUN cp ${SSHDIR}/ssh_host_rsa_key.pub ${SSHDIR}/authorized_keys\nRUN cp ${SSHDIR}/ssh_host_rsa_key ${SSHDIR}/id_rsa\nRUN echo \" IdentityFile ${SSHDIR}/id_rsa\" >> /etc/ssh/ssh_config\nRUN echo \"Host *\" >> /etc/ssh/ssh_config \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config\nRUN chmod -R 600 ${SSHDIR}/* \\\n && chown -R ${USER}:${USER} ${SSHDIR}/\n#   check if ssh agent is running or not, if not, run\nRUN eval `ssh-agent -s ` \\\n && ssh-add ${SSHDIR}/id_rsa\n#  #################################################\n#  # S3 OPTIMIZATION\nRUN aws configure set default.s3.max_concurrent_requests 30\nRUN aws configure set default.s3.max_queue_size 10000\nRUN aws configure set default.s3.multipart_threshold 64MB\nRUN aws configure set default.s3.multipart_chunksize 16MB\nRUN aws configure set default.s3.max_bandwidth 4096MB/s\nRUN aws configure set default.s3.addressing_style path\n#  #################################################\n#  # CUDA MPI\nRUN wget -O /tmp/openmpi.tar.gz https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz \\\n && tar -xvf /tmp/openmpi.tar.gz -C /tmp\nRUN cd /tmp/openmpi* \\\n && ./configure --prefix=/opt/openmpi --with-cuda --enable-mpirun-prefix-by-default \\\n && make -j $( nproc ;) \\\n && make install\nRUN echo \"export PATH=$PATH:/opt/openmpi/bin\" >> /etc/bash.bashrc\nRUN echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/openmpi/lib:/usr/local/cuda/include:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\" >> /etc/bash.bashrc\n#  ##################################################\n#  # TENSORFLOW INSTALL\nRUN pip3 install numpy six wheel mock\nRUN pip3 install keras_applications==1.0.6 --no-deps\nRUN pip3 install keras_preprocessing==1.0.5 --no-deps\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/lib\nRUN mkdir -p /usr/lib/x86_64-linux-gnu/nccl/include\nRUN cp /usr/lib/x86_64-linux-gnu/libnccl* /usr/lib/x86_64-linux-gnu/nccl/\nRUN cp /usr/include/nccl.h /usr/lib/x86_64-linux-gnu/nccl/include\nRUN wget -O /tmp/bazel.sh \"https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel-0.18.0-installer-linux-x86_64.sh\"\nRUN chmod +x /tmp/bazel.sh\nRUN bash -c \"/tmp/bazel.sh\"\nRUN git clone https://github.com/tensorflow/tensorflow /root/tensorflow\nADD conf/tensorflow_build.sh /root/\nRUN chmod +x /root/tensorflow_build.sh\nRUN /root/tensorflow_build.sh\nADD conf/horovod_build.sh /root/\nRUN chmod +x /root/horovod_build.sh\nRUN /root/horovod_build.sh\n#  ##################################################\n#  # IMAGENET DATASET\nRUN git clone https://github.com/aws-samples/deep-learning-models.git /root/deep-learning-models\n#  ##################################################\n#  # supervisor container startup\nADD conf/supervisord/supervisord.conf /etc/supervisor/supervisord.conf\nADD supervised-scripts/mpi-run.sh supervised-scripts/mpi-run.sh\nRUN chmod 755 supervised-scripts/mpi-run.sh\nEXPOSE 22/tcp\nRUN export PATH=\"$PATH:/opt/openmpi/bin\"\nADD batch-runtime-scripts/entry-point.sh batch-runtime-scripts/entry-point.sh\nRUN chmod 0755 batch-runtime-scripts/entry-point.sh\nCMD /batch-runtime-scripts/entry-point.sh\n","originalDockerfileUglifiedHash":"657e0509397a59c38d0da5a50c7f211d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/323aa5d0b5dcf9647d50eaef5616c558537b5f48.dockerfile"}