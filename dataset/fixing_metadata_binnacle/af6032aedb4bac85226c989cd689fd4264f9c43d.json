{"seed":3929875162,"processedDockerfileHash":"a2bcc1d19cd06fbb999feccaa48e56b5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:18.04\nLABEL maintainer=\"Anton Lokhmotov <anton@dividiti.com>\"\n#   Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n#   Allow stepping into the Bash shell interactively. FIXME: Interferes with the dashboard?\n#  ENTRYPOINT [\"/bin/bash\", \"-c\"]\n#   Install known system dependencies and immediately clean up to make the image smaller.\n#   CK needs: git, wget, zip.\n#   TF needs: curl.\n#   Running the dashboard in the background needs: daemonize.\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends apt-utils=1.6.14 -y \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends git=1:2.17.1-1ubuntu0.17 wget=1.19.4-1ubuntu2.2 zip=3.0-11build1 libz-dev curl=7.58.0-2ubuntu3.24 vim=2:8.0.1453-1ubuntu1.11 daemonize=1.7.7-1 python3=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 -y \\\n && apt-get clean\n#   Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n#   Install Collective Knowledge (CK).\nENV CK_ROOT=\"/home/dvdt/CK\" \\\n    CK_REPOS=\"/home/dvdt/CK_REPOS\" \\\n    CK_TOOLS=\"/home/dvdt/CK_TOOLS\" \\\n    PATH=\"${CK_ROOT}/bin:/home/dvdt/.local/bin:${PATH}\" \\\n    CK_PYTHON=\"python3\" \\\n    CK_CC=\"gcc\" \\\n    GIT_USER=\"dividiti\" \\\n    GIT_EMAIL=\"info@dividiti.com\" \\\n    LANG=\"C.UTF-8\"\nRUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}\nRUN git config --global user.name ${GIT_USER} \\\n && git config --global user.email ${GIT_EMAIL}\nRUN git clone https://github.com/ctuning/ck.git ${CK_ROOT}\nRUN cd ${CK_ROOT} \\\n && ${CK_PYTHON} setup.py install --user \\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n#   Pull CK repositories (including ck-env, ck-autotuning and ck-tensorflow).\nRUN ck pull repo:ck-mlperf\n#   Create a repository for benchmarking results.\nRUN ck create repo:mlperf-mobilenets --quiet\n#   Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n#   Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON} `\n#   Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC} `\n#   Install the latest Python package installer (pip).\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools --upgrade --user\n#   Install Python dependencies.\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy --force_version=1.2.1\nRUN ck install package --tags=lib,python-package,pillow\n#   Install pandas for dashboard.\nRUN ${CK_PYTHON} -m pip install pandas --user\n#   Install TFLite.\nRUN ck install package --tags=lib,tensorflow-lite,tensorflow-static,v1.13.1\n#   Download and preprocess the first 500 images of the ImageNet 2012 validation dataset.\nRUN ck install package --tags=dataset,imagenet,aux\nRUN ck install package --tags=dataset,imagenet,val,original,min --no_tags=resized\nRUN ck install package --tags=dataset,imagenet,val,preprocessed\n#   Download the MobileNet TF/TFLite models (non-quantized and quantized).\n#   https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-mobilenet-models-for-tflite\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,non-quantized,from-zenodo\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,quantized,from-google\n#   Benchmark the performance of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the performance of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Download the ResNet TFLite models (with and without the ArgMax operator).\n#   https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-resnet-model\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,with-argmax\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,no-argmax\n#   Benchmark the performance of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-performance --tags=mlperf,image-classification,resnet,with-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,with-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the performance of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-performance --tags=mlperf,image-classification,resnet,no-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,no-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   This command spawns the server in the background (daemon) mode, while\n#   also brings up an interactive shell in the same container.\nCMD echo -e \"Point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\" \\\n && daemonize -o ${HOME}/ck_server.out -e ${HOME}/ck_server.err `which ck ` display dashboard --scenario=mlperf.mobilenets --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355 \\\n && /bin/bash\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nLABEL maintainer=\"Anton Lokhmotov <anton@dividiti.com>\"\n#  Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n#  Allow stepping into the Bash shell interactively. FIXME: Interferes with the dashboard?\n# ENTRYPOINT [\"/bin/bash\", \"-c\"]\n#  Install known system dependencies and immediately clean up to make the image smaller.\n#  CK needs: git, wget, zip.\n#  TF needs: curl.\n#  Running the dashboard in the background needs: daemonize.\nRUN apt-get update -y \\\n && apt-get install -y apt-utils \\\n && apt-get upgrade -y \\\n && apt-get install -y git wget zip libz-dev curl vim daemonize python3 python3-pip \\\n && apt-get clean\n#  Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n#  Install Collective Knowledge (CK).\nENV CK_ROOT=\"/home/dvdt/CK\" \\\n    CK_REPOS=\"/home/dvdt/CK_REPOS\" \\\n    CK_TOOLS=\"/home/dvdt/CK_TOOLS\" \\\n    PATH=\"${CK_ROOT}/bin:/home/dvdt/.local/bin:${PATH}\" \\\n    CK_PYTHON=\"python3\" \\\n    CK_CC=\"gcc\" \\\n    GIT_USER=\"dividiti\" \\\n    GIT_EMAIL=\"info@dividiti.com\" \\\n    LANG=\"C.UTF-8\"\nRUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}\nRUN git config --global user.name ${GIT_USER} \\\n && git config --global user.email ${GIT_EMAIL}\nRUN git clone https://github.com/ctuning/ck.git ${CK_ROOT}\nRUN cd ${CK_ROOT} \\\n && ${CK_PYTHON} setup.py install --user \\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n#  Pull CK repositories (including ck-env, ck-autotuning and ck-tensorflow).\nRUN ck pull repo:ck-mlperf\n#  Create a repository for benchmarking results.\nRUN ck create repo:mlperf-mobilenets --quiet\n#  Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n#  Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON} `\n#  Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC} `\n#  Install the latest Python package installer (pip).\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools --upgrade --user\n#  Install Python dependencies.\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy --force_version=1.2.1\nRUN ck install package --tags=lib,python-package,pillow\n#  Install pandas for dashboard.\nRUN ${CK_PYTHON} -m pip install pandas --user\n#  Install TFLite.\nRUN ck install package --tags=lib,tensorflow-lite,tensorflow-static,v1.13.1\n#  Download and preprocess the first 500 images of the ImageNet 2012 validation dataset.\nRUN ck install package --tags=dataset,imagenet,aux\nRUN ck install package --tags=dataset,imagenet,val,original,min --no_tags=resized\nRUN ck install package --tags=dataset,imagenet,val,preprocessed\n#  Download the MobileNet TF/TFLite models (non-quantized and quantized).\n#  https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-mobilenet-models-for-tflite\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,non-quantized,from-zenodo\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,quantized,from-google\n#  Benchmark the performance of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the accuracy of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the performance of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the accuracy of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Download the ResNet TFLite models (with and without the ArgMax operator).\n#  https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-resnet-model\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,with-argmax\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,no-argmax\n#  Benchmark the performance of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-performance --tags=mlperf,image-classification,resnet,with-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the accuracy of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,with-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the performance of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-performance --tags=mlperf,image-classification,resnet,no-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  Benchmark the accuracy of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,no-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#  This command spawns the server in the background (daemon) mode, while\n#  also brings up an interactive shell in the same container.\nCMD echo -e \"Point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\" \\\n && daemonize -o ${HOME}/ck_server.out -e ${HOME}/ck_server.err `which ck ` display dashboard --scenario=mlperf.mobilenets --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355 \\\n && /bin/bash\n","injectedSmells":[],"originalDockerfileHash":"8dc5ba9a80802701bcf31d8bea3d22da","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nLABEL maintainer=\"Anton Lokhmotov <anton@dividiti.com>\"\n#   Use the Bash shell.\nSHELL [\"/bin/bash\", \"-c\"]\n#   Allow stepping into the Bash shell interactively. FIXME: Interferes with the dashboard?\n#  ENTRYPOINT [\"/bin/bash\", \"-c\"]\n#   Install known system dependencies and immediately clean up to make the image smaller.\n#   CK needs: git, wget, zip.\n#   TF needs: curl.\n#   Running the dashboard in the background needs: daemonize.\nRUN apt-get update -y \\\n && apt-get install apt-utils -y \\\n && apt-get upgrade -y \\\n && apt-get install git wget zip libz-dev curl vim daemonize python3 python3-pip -y \\\n && apt-get clean\n#   Create non-root user.\nRUN useradd --create-home --user-group --shell /bin/bash dvdt\nUSER dvdt:dvdt\nWORKDIR /home/dvdt\n#   Install Collective Knowledge (CK).\nENV CK_ROOT=\"/home/dvdt/CK\" \\\n    CK_REPOS=\"/home/dvdt/CK_REPOS\" \\\n    CK_TOOLS=\"/home/dvdt/CK_TOOLS\" \\\n    PATH=\"${CK_ROOT}/bin:/home/dvdt/.local/bin:${PATH}\" \\\n    CK_PYTHON=\"python3\" \\\n    CK_CC=\"gcc\" \\\n    GIT_USER=\"dividiti\" \\\n    GIT_EMAIL=\"info@dividiti.com\" \\\n    LANG=\"C.UTF-8\"\nRUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}\nRUN git config --global user.name ${GIT_USER} \\\n && git config --global user.email ${GIT_EMAIL}\nRUN git clone https://github.com/ctuning/ck.git ${CK_ROOT}\nRUN cd ${CK_ROOT} \\\n && ${CK_PYTHON} setup.py install --user \\\n && ${CK_PYTHON} -c \"import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)\"\n#   Pull CK repositories (including ck-env, ck-autotuning and ck-tensorflow).\nRUN ck pull repo:ck-mlperf\n#   Create a repository for benchmarking results.\nRUN ck create repo:mlperf-mobilenets --quiet\n#   Use generic Linux settings with dummy frequency setting scripts.\nRUN ck detect platform.os --platform_init_uoa=generic-linux-dummy\n#   Detect Python.\nRUN ck detect soft:compiler.python --full_path=`which ${CK_PYTHON} `\n#   Detect C/C++ compiler (gcc).\nRUN ck detect soft:compiler.gcc --full_path=`which ${CK_CC} `\n#   Install the latest Python package installer (pip).\nRUN ${CK_PYTHON} -m pip install --ignore-installed pip setuptools --upgrade --user\n#   Install Python dependencies.\nRUN ck install package --tags=lib,python-package,numpy\nRUN ck install package --tags=lib,python-package,scipy --force_version=1.2.1\nRUN ck install package --tags=lib,python-package,pillow\n#   Install pandas for dashboard.\nRUN ${CK_PYTHON} -m pip install pandas --user\n#   Install TFLite.\nRUN ck install package --tags=lib,tensorflow-lite,tensorflow-static,v1.13.1\n#   Download and preprocess the first 500 images of the ImageNet 2012 validation dataset.\nRUN ck install package --tags=dataset,imagenet,aux\nRUN ck install package --tags=dataset,imagenet,val,original,min --no_tags=resized\nRUN ck install package --tags=dataset,imagenet,val,preprocessed\n#   Download the MobileNet TF/TFLite models (non-quantized and quantized).\n#   https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-mobilenet-models-for-tflite\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,non-quantized,from-zenodo\nRUN ck install package --tags=image-classification,model,tf,tflite,mlperf,mobilenet,quantized,from-google\n#   Benchmark the performance of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the non-quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,non-quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-non-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,non-quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the performance of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-performance --tags=mlperf,image-classification,mobilenet,quantized,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the quantized MobileNet model.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,mobilenet,quantized,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-mobilenet-quantized-tflite-accuracy --tags=mlperf,image-classification,mobilenet,quantized,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Download the ResNet TFLite models (with and without the ArgMax operator).\n#   https://github.com/mlperf/inference/blob/master/edge/object_classification/mobilenets/tflite/README.md#install-the-resnet-model\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,with-argmax\nRUN ck install package --tags=image-classification,model,tflite,mlperf,resnet,downloaded,no-argmax\n#   Benchmark the performance of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-performance --tags=mlperf,image-classification,resnet,with-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the ResNet model with the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,with-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-with-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,with-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the performance of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=10 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=2 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-performance --tags=mlperf,image-classification,resnet,no-argmax,tflite,performance --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   Benchmark the accuracy of the ResNet model without the ArgMax operator.\nRUN ck benchmark program:image-classification-tflite --repetitions=1 --env.CK_BATCH_SIZE=1 --env.CK_BATCH_COUNT=500 --dep_add_tags.weights=mlperf,image-classification,resnet,no-argmax,tflite --record --record_repo=mlperf-mobilenets --record_uoa=mlperf-image-classification-resnet-no-argmax-tflite-accuracy --tags=mlperf,image-classification,resnet,no-argmax,tflite,accuracy --skip_print_timers --skip_stat_analysis --process_multi_keys\n#   This command spawns the server in the background (daemon) mode, while\n#   also brings up an interactive shell in the same container.\nCMD echo -e \"Point your browser to: http://localhost:3355/?template=dashboard&scenario=mlperf.mobilenets\" \\\n && daemonize -o ${HOME}/ck_server.out -e ${HOME}/ck_server.err `which ck ` display dashboard --scenario=mlperf.mobilenets --host=0.0.0.0 --wfe_host=localhost --wfe_port=3355 \\\n && /bin/bash\n","originalDockerfileUglifiedHash":"26e87bada90ae57c0261110bb6b2aefb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/af6032aedb4bac85226c989cd689fd4264f9c43d.dockerfile"}