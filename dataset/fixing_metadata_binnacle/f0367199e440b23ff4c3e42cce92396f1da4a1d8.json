{"seed":2573654501,"processedDockerfileHash":"b8b2587bd4c7ae189e6496784cc7ea23","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ######### Dockerfile for Apache Hbase version 1.2.6 #########\n#\n#   This Dockerfile builds a basic installation of Apache Hbase.\n#\n#   Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable: A Distributed Storage System for Structured Data by Chang et al\n#   Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS.\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   Start master of Hbase using below command :\n#   docker run -d --name <container_name> -p <host-port>:16010 <image-name> hbase master <command> \n#   e.g. docker run -d --name hbase_test -p 16011:16010 hbase hbase master start \n#   \n#   Start Hbase shell( which connect to running instance of HBase) using below command :\n#   docker exec -it <container id/name> hbase shell\n#   e.g. docker exec -it hbase_test hbase shell\n#   \n#   To provide custom configuration for Hbase use below command:\n#    docker run --name <container_name> -d -p <host-port>:16010 -v /<host_path>/hbase-env.sh:/root/hbase/conf/hbase-env.sh -v /<host_path>/hbase-site.xml:/root/hbase/conf/hbase-site.xml <image-name>\n#\n#   Official website: https://hbase.apache.org/\n#\n#  ##################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$SOURCE_DIR/hbase/bin\"\nWORKDIR $SOURCE_DIR\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends ant gcc git make maven openjdk-8-jdk tar wget -y \\\n && cd $SOURCE_DIR \\\n && git clone git://github.com/apache/hbase.git \\\n && cd hbase/ \\\n && git checkout rel/1.2.6 \\\n && mvn install -DskipTests=true \\\n && cd $SOURCE_DIR \\\n && wget https://github.com/jnr/jffi/archive/1.0.0.tar.gz \\\n && tar -xvf 1.0.0.tar.gz \\\n && cd jffi-1.0.0/ \\\n && cp $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile.org \\\n && sed -i '68d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '68 i WFLAGS += -W -Wall -Wno-unused -Wno-parentheses -Wundef -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159 i SOFLAGS = -shared -static-libgcc -Wl,-soname,$(@F) -Wl,-O1 ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && cp $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile.org \\\n && sed -i '48d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '48 i WFLAGS = -W -Werror -Wall -Wno-unused -Wno-parentheses -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50 i SOFLAGS = -shared -Wl,-O1' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && ant | exit 0 \\\n && mkdir -p $SOURCE_DIR/jar_tmp \\\n && cp ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar $SOURCE_DIR/jar_tmp \\\n && cd $SOURCE_DIR/jar_tmp \\\n && jar xf jruby-complete-1.6.8.jar \\\n && mkdir -p jni/s390x-Linux \\\n && cp $SOURCE_DIR/jffi-1.0.0/build/jni/libjffi-1.0.so jni/s390x-Linux/ \\\n && jar uf jruby-complete-1.6.8.jar jni/s390x-Linux/libjffi-1.0.so \\\n && mv $SOURCE_DIR/jar_tmp/jruby-complete-1.6.8.jar ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar \\\n && apt-get remove -y ant gcc git make maven wget \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf $SOURCE_DIR/jar_tmp $SOURCE_DIR/1.0.0.tar.gz $SOURCE_DIR/jffi-1.0.0 /var/lib/apt/lists/*\n#   Define mount points for logs, conf files & data.\nVOLUME [\"$SOURCE_DIR/hbase/data\", \"$SOURCE_DIR/hbase/conf\", \"$SOURCE_DIR/hbase/logs\"]\n#   Port for Apache Hbase\nEXPOSE 2181/tcp 16010/tcp 60000/tcp 60010/tcp 60020/tcp 60030/tcp 8080/tcp 8085/tcp 9090/tcp 9095/tcp\n#   Set the Entrypoint\nCMD [\"hbase\"]\n#   End of Dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ######### Dockerfile for Apache Hbase version 1.2.6 #########\n#\n#  This Dockerfile builds a basic installation of Apache Hbase.\n#\n#  Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable: A Distributed Storage System for Structured Data by Chang et al\n#  Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS.\n#\n#  To build this image, from the directory containing this Dockerfile\n#  (assuming that the file is named Dockerfile):\n#  docker build -t <image_name> .\n#\n#  Start master of Hbase using below command :\n#  docker run -d --name <container_name> -p <host-port>:16010 <image-name> hbase master <command> \n#  e.g. docker run -d --name hbase_test -p 16011:16010 hbase hbase master start \n#  \n#  Start Hbase shell( which connect to running instance of HBase) using below command :\n#  docker exec -it <container id/name> hbase shell\n#  e.g. docker exec -it hbase_test hbase shell\n#  \n#  To provide custom configuration for Hbase use below command:\n#   docker run --name <container_name> -d -p <host-port>:16010 -v /<host_path>/hbase-env.sh:/root/hbase/conf/hbase-env.sh -v /<host_path>/hbase-site.xml:/root/hbase/conf/hbase-site.xml <image-name>\n#\n#  Official website: https://hbase.apache.org/\n#\n# ##################################################################################\n#  Base Image\nFROM s390x/ubuntu:16.04\n#  The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$SOURCE_DIR/hbase/bin\"\nWORKDIR $SOURCE_DIR\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install ant gcc git make maven openjdk-8-jdk tar wget -y \\\n && cd $SOURCE_DIR \\\n && git clone git://github.com/apache/hbase.git \\\n && cd hbase/ \\\n && git checkout rel/1.2.6 \\\n && mvn install -DskipTests=true \\\n && cd $SOURCE_DIR \\\n && wget https://github.com/jnr/jffi/archive/1.0.0.tar.gz \\\n && tar -xvf 1.0.0.tar.gz \\\n && cd jffi-1.0.0/ \\\n && cp $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile.org \\\n && sed -i '68d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '68 i WFLAGS += -W -Wall -Wno-unused -Wno-parentheses -Wundef -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159 i SOFLAGS = -shared -static-libgcc -Wl,-soname,$(@F) -Wl,-O1 ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && cp $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile.org \\\n && sed -i '48d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '48 i WFLAGS = -W -Werror -Wall -Wno-unused -Wno-parentheses -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50 i SOFLAGS = -shared -Wl,-O1' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && ant | exit 0 \\\n && mkdir -p $SOURCE_DIR/jar_tmp \\\n && cp ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar $SOURCE_DIR/jar_tmp \\\n && cd $SOURCE_DIR/jar_tmp \\\n && jar xf jruby-complete-1.6.8.jar \\\n && mkdir -p jni/s390x-Linux \\\n && cp $SOURCE_DIR/jffi-1.0.0/build/jni/libjffi-1.0.so jni/s390x-Linux/ \\\n && jar uf jruby-complete-1.6.8.jar jni/s390x-Linux/libjffi-1.0.so \\\n && mv $SOURCE_DIR/jar_tmp/jruby-complete-1.6.8.jar ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar \\\n && apt-get remove -y ant gcc git make maven wget \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf $SOURCE_DIR/jar_tmp $SOURCE_DIR/1.0.0.tar.gz $SOURCE_DIR/jffi-1.0.0 /var/lib/apt/lists/*\n#  Define mount points for logs, conf files & data.\nVOLUME [\"$SOURCE_DIR/hbase/data\", \"$SOURCE_DIR/hbase/conf\", \"$SOURCE_DIR/hbase/logs\"]\n#  Port for Apache Hbase\nEXPOSE 2181/tcp 16010/tcp 60000/tcp 60010/tcp 60020/tcp 60030/tcp 8080/tcp 8085/tcp 9090/tcp 9095/tcp\n#  Set the Entrypoint\nCMD [\"hbase\"]\n#  End of Dockerfile\n","injectedSmells":[],"originalDockerfileHash":"d502a5cebccfe20fbf0bd8109966d9e5","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ######### Dockerfile for Apache Hbase version 1.2.6 #########\n#\n#   This Dockerfile builds a basic installation of Apache Hbase.\n#\n#   Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable: A Distributed Storage System for Structured Data by Chang et al\n#   Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS.\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   Start master of Hbase using below command :\n#   docker run -d --name <container_name> -p <host-port>:16010 <image-name> hbase master <command> \n#   e.g. docker run -d --name hbase_test -p 16011:16010 hbase hbase master start \n#   \n#   Start Hbase shell( which connect to running instance of HBase) using below command :\n#   docker exec -it <container id/name> hbase shell\n#   e.g. docker exec -it hbase_test hbase shell\n#   \n#   To provide custom configuration for Hbase use below command:\n#    docker run --name <container_name> -d -p <host-port>:16010 -v /<host_path>/hbase-env.sh:/root/hbase/conf/hbase-env.sh -v /<host_path>/hbase-site.xml:/root/hbase/conf/hbase-site.xml <image-name>\n#\n#   Official website: https://hbase.apache.org/\n#\n#  ##################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nENV SOURCE_DIR=\"/root\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8.0-openjdk-s390x\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:$SOURCE_DIR/hbase/bin\"\nWORKDIR $SOURCE_DIR\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install ant gcc git make maven openjdk-8-jdk tar wget -y \\\n && cd $SOURCE_DIR \\\n && git clone git://github.com/apache/hbase.git \\\n && cd hbase/ \\\n && git checkout rel/1.2.6 \\\n && mvn install -DskipTests=true \\\n && cd $SOURCE_DIR \\\n && wget https://github.com/jnr/jffi/archive/1.0.0.tar.gz \\\n && tar -xvf 1.0.0.tar.gz \\\n && cd jffi-1.0.0/ \\\n && cp $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile.org \\\n && sed -i '68d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '68 i WFLAGS += -W -Wall -Wno-unused -Wno-parentheses -Wundef -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159d ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && sed -i '159 i SOFLAGS = -shared -static-libgcc -Wl,-soname,$(@F) -Wl,-O1 ' $SOURCE_DIR/jffi-1.0.0/jni/GNUmakefile \\\n && cp $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile.org \\\n && sed -i '48d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '48 i WFLAGS = -W -Werror -Wall -Wno-unused -Wno-parentheses -Wno-unused-parameter' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50d ' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && sed -i '50 i SOFLAGS = -shared -Wl,-O1' $SOURCE_DIR/jffi-1.0.0/libtest/GNUmakefile \\\n && ant | exit 0 \\\n && mkdir -p $SOURCE_DIR/jar_tmp \\\n && cp ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar $SOURCE_DIR/jar_tmp \\\n && cd $SOURCE_DIR/jar_tmp \\\n && jar xf jruby-complete-1.6.8.jar \\\n && mkdir -p jni/s390x-Linux \\\n && cp $SOURCE_DIR/jffi-1.0.0/build/jni/libjffi-1.0.so jni/s390x-Linux/ \\\n && jar uf jruby-complete-1.6.8.jar jni/s390x-Linux/libjffi-1.0.so \\\n && mv $SOURCE_DIR/jar_tmp/jruby-complete-1.6.8.jar ~/.m2/repository/org/jruby/jruby-complete/1.6.8/jruby-complete-1.6.8.jar \\\n && apt-get remove -y ant gcc git make maven wget \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf $SOURCE_DIR/jar_tmp $SOURCE_DIR/1.0.0.tar.gz $SOURCE_DIR/jffi-1.0.0 /var/lib/apt/lists/*\n#   Define mount points for logs, conf files & data.\nVOLUME [\"$SOURCE_DIR/hbase/data\", \"$SOURCE_DIR/hbase/conf\", \"$SOURCE_DIR/hbase/logs\"]\n#   Port for Apache Hbase\nEXPOSE 2181/tcp 16010/tcp 60000/tcp 60010/tcp 60020/tcp 60030/tcp 8080/tcp 8085/tcp 9090/tcp 9095/tcp\n#   Set the Entrypoint\nCMD [\"hbase\"]\n#   End of Dockerfile\n","originalDockerfileUglifiedHash":"7ee0b0bf513489f2d2b58c321f3abeff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f0367199e440b23ff4c3e42cce92396f1da4a1d8.dockerfile"}