{"seed":447411862,"processedDockerfileHash":"326a8c306d1fb650c46b32ce4a8cc6af","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:xenial\nLABEL maintainer=\"Eirik Albrigtsen <sszynrae@gmail.com>\"\n#   Required packages:\n#   - musl-dev, musl-tools - the musl toolchain\n#   - curl, g++, make, pkgconf, cmake - for fetching and building third party libs\n#   - ca-certificates - openssl + curl + peer verification of downloads\n#   - xutils-dev - for openssl makedepend\n#   - libssl-dev and libpq-dev - for dynamic linking during diesel_codegen build process\n#   - git - cargo builds in user projects\n#   - linux-headers-amd64 - needed for building openssl 1.1 (stretch only)\n#   - file - needed by rustup.sh install\n#   - automake autoconf libtool - support crates building C deps as part cargo build\n#   recently removed:\n#   cmake (not used), nano, zlib1g-dev\nRUN apt-get update \\\n && apt-get install --no-install-recommends musl-dev=1.1.9-1 musl-tools=1.1.9-1 file=1:5.25-2ubuntu1.4 git=1:2.7.4-0ubuntu1.10 openssh-client=1:7.2p2-4ubuntu2.10 make=4.1-6 g++=4:5.3.1-1ubuntu1 curl=7.47.0-1ubuntu2.19 pkgconf=0.9.12-1 ca-certificates=20210119~16.04.1 xutils-dev=1:7.7+3ubuntu2 libssl-dev=1.0.2g-1ubuntu4.20 libpq-dev=9.5.25-0ubuntu0.16.04.1 automake=1:1.15-4ubuntu1 autoconf=2.69-9 libtool=2.4.6-0.1 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rust using rustup\nARG CHANNEL=\"nightly\"\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${CHANNEL} \\\n && ~/.cargo/bin/rustup target add x86_64-unknown-linux-musl \\\n && echo \"[build]\\ntarget = \\\"x86_64-unknown-linux-musl\\\"\" > ~/.cargo/config\n#   Convenience list of versions and variables for compilation later on\n#   This helps continuing manually if anything breaks.\nENV SSL_VER=\"1.0.2r\" \\\n    CURL_VER=\"7.64.1\" \\\n    ZLIB_VER=\"1.2.11\" \\\n    PQ_VER=\"10.8\" \\\n    SQLITE_VER=\"3280000\" \\\n    CC=\"musl-gcc\" \\\n    PREFIX=\"/musl\" \\\n    PATH=\"/usr/local/bin:/root/.cargo/bin:$PATH\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"$PREFIX\"\n#   Set up a prefix for musl build libraries, make the linker's job of finding them easier\n#   Primarily for the benefit of postgres.\n#   Lastly, link some linux-headers for openssl 1.1 (not used herein)\nRUN mkdir $PREFIX \\\n && echo \"$PREFIX/lib\" >> /etc/ld-musl-x86_64.path \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm \\\n && ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic \\\n && ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux\n#   Build zlib (used in openssl and pq)\nRUN curl -sSL https://zlib.net/zlib-$ZLIB_VER.tar.gz | tar xz \\\n && cd zlib-$ZLIB_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --static --prefix=$PREFIX \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf zlib-$ZLIB_VER\n#   Build openssl (used in curl and pq)\n#   Would like to use zlib here, but can't seem to get it to work properly\n#   TODO: fix so that it works\nRUN curl -sSL https://www.openssl.org/source/openssl-$SSL_VER.tar.gz | tar xz \\\n && cd openssl-$SSL_VER \\\n && ./Configure no-zlib no-shared -fPIC --prefix=$PREFIX --openssldir=$PREFIX/ssl linux-x86_64 \\\n && env C_INCLUDE_PATH=$PREFIX/include make depend 2> /dev/null \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-$SSL_VER\n#   Build curl (needs with-zlib and all this stuff to allow https)\n#   curl_LDFLAGS needed on stretch to avoid fPIC errors - though not sure from what\nRUN curl -sSL https://curl.haxx.se/download/curl-$CURL_VER.tar.gz | tar xz \\\n && cd curl-$CURL_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --enable-shared=no --with-zlib --enable-static=ssl --enable-optimize --prefix=$PREFIX --with-ca-path=/etc/ssl/certs/ --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt --without-ca-fallback \\\n && make -j$( nproc ;) curl_LDFLAGS=\"-all-static\" \\\n && make install \\\n && cd .. \\\n && rm -rf curl-$CURL_VER\n#   Build libpq\nRUN curl -sSL https://ftp.postgresql.org/pub/source/v$PQ_VER/postgresql-$PQ_VER.tar.gz | tar xz \\\n && cd postgresql-$PQ_VER \\\n && CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --without-readline --with-openssl --prefix=$PREFIX --host=x86_64-unknown-linux-musl \\\n && cd src/interfaces/libpq make -s -j$( nproc ;) all-static-lib \\\n && make -s install install-lib-static \\\n && cd ../../bin/pg_config \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf postgresql-$PQ_VER\n#   Build libsqlite3 using same configuration as the alpine linux main/sqlite package\nRUN curl -sSL https://www.sqlite.org/2019/sqlite-autoconf-$SQLITE_VER.tar.gz | tar xz \\\n && cd sqlite-autoconf-$SQLITE_VER \\\n && CFLAGS=\"-DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_SECURE_DELETE -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_RTREE -DSQLITE_USE_URI -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_ENABLE_JSON1\" CC=\"musl-gcc -fPIC -pie\" ./configure --prefix=$PREFIX --host=x86_64-unknown-linux-musl --enable-threadsafe --enable-dynamic-extensions --disable-shared \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sqlite-autoconf-$SQLITE_VER\n#   SSL cert directories get overridden by --prefix and --openssldir\n#   and they do not match the typical host configurations.\n#   The SSL_CERT_* vars fix this, but only when inside this container\n#   musl-compiled binary must point SSL at the correct certs (muslrust/issues/5) elsewhere\n#   Postgres bindings need vars so that diesel_codegen.so uses the GNU deps at build time\n#   but finally links with the static libpq.a at the end.\n#   It needs the non-musl pg_config to set this up with libpq-dev (depending on libssl-dev)\n#   See https://github.com/sgrif/pq-sys/pull/18\nENV PATH=\"$PREFIX/bin:$PATH\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"true\" \\\n    PKG_CONFIG_PATH=\"$PREFIX/lib/pkgconfig\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    OPENSSL_STATIC=\"true\" \\\n    OPENSSL_DIR=\"$PREFIX\" \\\n    SSL_CERT_FILE=\"/etc/ssl/certs/ca-certificates.crt\" \\\n    SSL_CERT_DIR=\"/etc/ssl/certs\" \\\n    LIBZ_SYS_STATIC=\"1\"\n#   Allow ditching the -w /volume flag to docker run\nWORKDIR /volume\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:xenial\nLABEL maintainer=\"Eirik Albrigtsen <sszynrae@gmail.com>\"\n#  Required packages:\n#  - musl-dev, musl-tools - the musl toolchain\n#  - curl, g++, make, pkgconf, cmake - for fetching and building third party libs\n#  - ca-certificates - openssl + curl + peer verification of downloads\n#  - xutils-dev - for openssl makedepend\n#  - libssl-dev and libpq-dev - for dynamic linking during diesel_codegen build process\n#  - git - cargo builds in user projects\n#  - linux-headers-amd64 - needed for building openssl 1.1 (stretch only)\n#  - file - needed by rustup.sh install\n#  - automake autoconf libtool - support crates building C deps as part cargo build\n#  recently removed:\n#  cmake (not used), nano, zlib1g-dev\nRUN apt-get update \\\n && apt-get install --no-install-recommends musl-dev musl-tools file git openssh-client make g++ curl pkgconf ca-certificates xutils-dev libssl-dev libpq-dev automake autoconf libtool -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rust using rustup\nARG CHANNEL=\"nightly\"\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${CHANNEL} \\\n && ~/.cargo/bin/rustup target add x86_64-unknown-linux-musl \\\n && echo \"[build]\\ntarget = \\\"x86_64-unknown-linux-musl\\\"\" > ~/.cargo/config\n#  Convenience list of versions and variables for compilation later on\n#  This helps continuing manually if anything breaks.\nENV SSL_VER=\"1.0.2r\" \\\n    CURL_VER=\"7.64.1\" \\\n    ZLIB_VER=\"1.2.11\" \\\n    PQ_VER=\"10.8\" \\\n    SQLITE_VER=\"3280000\" \\\n    CC=\"musl-gcc\" \\\n    PREFIX=\"/musl\" \\\n    PATH=\"/usr/local/bin:/root/.cargo/bin:$PATH\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"$PREFIX\"\n#  Set up a prefix for musl build libraries, make the linker's job of finding them easier\n#  Primarily for the benefit of postgres.\n#  Lastly, link some linux-headers for openssl 1.1 (not used herein)\nRUN mkdir $PREFIX \\\n && echo \"$PREFIX/lib\" >> /etc/ld-musl-x86_64.path \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm \\\n && ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic \\\n && ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux\n#  Build zlib (used in openssl and pq)\nRUN curl -sSL https://zlib.net/zlib-$ZLIB_VER.tar.gz | tar xz \\\n && cd zlib-$ZLIB_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --static --prefix=$PREFIX \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf zlib-$ZLIB_VER\n#  Build openssl (used in curl and pq)\n#  Would like to use zlib here, but can't seem to get it to work properly\n#  TODO: fix so that it works\nRUN curl -sSL https://www.openssl.org/source/openssl-$SSL_VER.tar.gz | tar xz \\\n && cd openssl-$SSL_VER \\\n && ./Configure no-zlib no-shared -fPIC --prefix=$PREFIX --openssldir=$PREFIX/ssl linux-x86_64 \\\n && env C_INCLUDE_PATH=$PREFIX/include make depend 2> /dev/null \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-$SSL_VER\n#  Build curl (needs with-zlib and all this stuff to allow https)\n#  curl_LDFLAGS needed on stretch to avoid fPIC errors - though not sure from what\nRUN curl -sSL https://curl.haxx.se/download/curl-$CURL_VER.tar.gz | tar xz \\\n && cd curl-$CURL_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --enable-shared=no --with-zlib --enable-static=ssl --enable-optimize --prefix=$PREFIX --with-ca-path=/etc/ssl/certs/ --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt --without-ca-fallback \\\n && make -j$( nproc ;) curl_LDFLAGS=\"-all-static\" \\\n && make install \\\n && cd .. \\\n && rm -rf curl-$CURL_VER\n#  Build libpq\nRUN curl -sSL https://ftp.postgresql.org/pub/source/v$PQ_VER/postgresql-$PQ_VER.tar.gz | tar xz \\\n && cd postgresql-$PQ_VER \\\n && CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --without-readline --with-openssl --prefix=$PREFIX --host=x86_64-unknown-linux-musl \\\n && cd src/interfaces/libpq make -s -j$( nproc ;) all-static-lib \\\n && make -s install install-lib-static \\\n && cd ../../bin/pg_config \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf postgresql-$PQ_VER\n#  Build libsqlite3 using same configuration as the alpine linux main/sqlite package\nRUN curl -sSL https://www.sqlite.org/2019/sqlite-autoconf-$SQLITE_VER.tar.gz | tar xz \\\n && cd sqlite-autoconf-$SQLITE_VER \\\n && CFLAGS=\"-DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_SECURE_DELETE -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_RTREE -DSQLITE_USE_URI -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_ENABLE_JSON1\" CC=\"musl-gcc -fPIC -pie\" ./configure --prefix=$PREFIX --host=x86_64-unknown-linux-musl --enable-threadsafe --enable-dynamic-extensions --disable-shared \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sqlite-autoconf-$SQLITE_VER\n#  SSL cert directories get overridden by --prefix and --openssldir\n#  and they do not match the typical host configurations.\n#  The SSL_CERT_* vars fix this, but only when inside this container\n#  musl-compiled binary must point SSL at the correct certs (muslrust/issues/5) elsewhere\n#  Postgres bindings need vars so that diesel_codegen.so uses the GNU deps at build time\n#  but finally links with the static libpq.a at the end.\n#  It needs the non-musl pg_config to set this up with libpq-dev (depending on libssl-dev)\n#  See https://github.com/sgrif/pq-sys/pull/18\nENV PATH=\"$PREFIX/bin:$PATH\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"true\" \\\n    PKG_CONFIG_PATH=\"$PREFIX/lib/pkgconfig\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    OPENSSL_STATIC=\"true\" \\\n    OPENSSL_DIR=\"$PREFIX\" \\\n    SSL_CERT_FILE=\"/etc/ssl/certs/ca-certificates.crt\" \\\n    SSL_CERT_DIR=\"/etc/ssl/certs\" \\\n    LIBZ_SYS_STATIC=\"1\"\n#  Allow ditching the -w /volume flag to docker run\nWORKDIR /volume\n","injectedSmells":[],"originalDockerfileHash":"b67e25f572508e491607afb31aaaf696","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:xenial\nLABEL maintainer=\"Eirik Albrigtsen <sszynrae@gmail.com>\"\n#   Required packages:\n#   - musl-dev, musl-tools - the musl toolchain\n#   - curl, g++, make, pkgconf, cmake - for fetching and building third party libs\n#   - ca-certificates - openssl + curl + peer verification of downloads\n#   - xutils-dev - for openssl makedepend\n#   - libssl-dev and libpq-dev - for dynamic linking during diesel_codegen build process\n#   - git - cargo builds in user projects\n#   - linux-headers-amd64 - needed for building openssl 1.1 (stretch only)\n#   - file - needed by rustup.sh install\n#   - automake autoconf libtool - support crates building C deps as part cargo build\n#   recently removed:\n#   cmake (not used), nano, zlib1g-dev\nRUN apt-get update \\\n && apt-get install --no-install-recommends musl-dev musl-tools file git openssh-client make g++ curl pkgconf ca-certificates xutils-dev libssl-dev libpq-dev automake autoconf libtool -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rust using rustup\nARG CHANNEL=\"nightly\"\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${CHANNEL} \\\n && ~/.cargo/bin/rustup target add x86_64-unknown-linux-musl \\\n && echo \"[build]\\ntarget = \\\"x86_64-unknown-linux-musl\\\"\" > ~/.cargo/config\n#   Convenience list of versions and variables for compilation later on\n#   This helps continuing manually if anything breaks.\nENV SSL_VER=\"1.0.2r\" \\\n    CURL_VER=\"7.64.1\" \\\n    ZLIB_VER=\"1.2.11\" \\\n    PQ_VER=\"10.8\" \\\n    SQLITE_VER=\"3280000\" \\\n    CC=\"musl-gcc\" \\\n    PREFIX=\"/musl\" \\\n    PATH=\"/usr/local/bin:/root/.cargo/bin:$PATH\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"$PREFIX\"\n#   Set up a prefix for musl build libraries, make the linker's job of finding them easier\n#   Primarily for the benefit of postgres.\n#   Lastly, link some linux-headers for openssl 1.1 (not used herein)\nRUN mkdir $PREFIX \\\n && echo \"$PREFIX/lib\" >> /etc/ld-musl-x86_64.path \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm \\\n && ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic \\\n && ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux\n#   Build zlib (used in openssl and pq)\nRUN curl -sSL https://zlib.net/zlib-$ZLIB_VER.tar.gz | tar xz \\\n && cd zlib-$ZLIB_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --static --prefix=$PREFIX \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf zlib-$ZLIB_VER\n#   Build openssl (used in curl and pq)\n#   Would like to use zlib here, but can't seem to get it to work properly\n#   TODO: fix so that it works\nRUN curl -sSL https://www.openssl.org/source/openssl-$SSL_VER.tar.gz | tar xz \\\n && cd openssl-$SSL_VER \\\n && ./Configure no-zlib no-shared -fPIC --prefix=$PREFIX --openssldir=$PREFIX/ssl linux-x86_64 \\\n && env C_INCLUDE_PATH=$PREFIX/include make depend 2> /dev/null \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-$SSL_VER\n#   Build curl (needs with-zlib and all this stuff to allow https)\n#   curl_LDFLAGS needed on stretch to avoid fPIC errors - though not sure from what\nRUN curl -sSL https://curl.haxx.se/download/curl-$CURL_VER.tar.gz | tar xz \\\n && cd curl-$CURL_VER \\\n && CC=\"musl-gcc -fPIC -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --enable-shared=no --with-zlib --enable-static=ssl --enable-optimize --prefix=$PREFIX --with-ca-path=/etc/ssl/certs/ --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt --without-ca-fallback \\\n && make -j$( nproc ;) curl_LDFLAGS=\"-all-static\" \\\n && make install \\\n && cd .. \\\n && rm -rf curl-$CURL_VER\n#   Build libpq\nRUN curl -sSL https://ftp.postgresql.org/pub/source/v$PQ_VER/postgresql-$PQ_VER.tar.gz | tar xz \\\n && cd postgresql-$PQ_VER \\\n && CC=\"musl-gcc -fPIE -pie\" LDFLAGS=\"-L$PREFIX/lib\" CFLAGS=\"-I$PREFIX/include\" ./configure --without-readline --with-openssl --prefix=$PREFIX --host=x86_64-unknown-linux-musl \\\n && cd src/interfaces/libpq make -s -j$( nproc ;) all-static-lib \\\n && make -s install install-lib-static \\\n && cd ../../bin/pg_config \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf postgresql-$PQ_VER\n#   Build libsqlite3 using same configuration as the alpine linux main/sqlite package\nRUN curl -sSL https://www.sqlite.org/2019/sqlite-autoconf-$SQLITE_VER.tar.gz | tar xz \\\n && cd sqlite-autoconf-$SQLITE_VER \\\n && CFLAGS=\"-DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS3_PARENTHESIS -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_SECURE_DELETE -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_RTREE -DSQLITE_USE_URI -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_ENABLE_JSON1\" CC=\"musl-gcc -fPIC -pie\" ./configure --prefix=$PREFIX --host=x86_64-unknown-linux-musl --enable-threadsafe --enable-dynamic-extensions --disable-shared \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sqlite-autoconf-$SQLITE_VER\n#   SSL cert directories get overridden by --prefix and --openssldir\n#   and they do not match the typical host configurations.\n#   The SSL_CERT_* vars fix this, but only when inside this container\n#   musl-compiled binary must point SSL at the correct certs (muslrust/issues/5) elsewhere\n#   Postgres bindings need vars so that diesel_codegen.so uses the GNU deps at build time\n#   but finally links with the static libpq.a at the end.\n#   It needs the non-musl pg_config to set this up with libpq-dev (depending on libssl-dev)\n#   See https://github.com/sgrif/pq-sys/pull/18\nENV PATH=\"$PREFIX/bin:$PATH\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"true\" \\\n    PKG_CONFIG_PATH=\"$PREFIX/lib/pkgconfig\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    OPENSSL_STATIC=\"true\" \\\n    OPENSSL_DIR=\"$PREFIX\" \\\n    SSL_CERT_FILE=\"/etc/ssl/certs/ca-certificates.crt\" \\\n    SSL_CERT_DIR=\"/etc/ssl/certs\" \\\n    LIBZ_SYS_STATIC=\"1\"\n#   Allow ditching the -w /volume flag to docker run\nWORKDIR /volume\n","originalDockerfileUglifiedHash":"2bef6d5d17cef5a9c52a1cff4b10e440","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a6267d8c8fd4d669a66345f320a39dd554c550ea.dockerfile"}