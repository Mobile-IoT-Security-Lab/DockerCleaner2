{"seed":4210781718,"processedDockerfileHash":"31149049b4e1d746613a1eda5dba7e74","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.2.8-fpm-alpine3.7\nLABEL maintainer=\"nICKZHUO <sidewindermax@hotmail.com>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\n#   Nginx版本\nENV NGINX_VERSION=\"1.15.2\"\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add gnu-libiconv --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing\nRUN addgroup -S www \\\n && adduser -D -S -h /var/cache/www -s /sbin/nologin -G www www \\\n && apk add autoconf=2.69-r0 gcc=6.4.0-r5 vim=8.0.1359-r2 git=2.15.4-r0 libc-dev=0.7.1-r0 make=4.2.1-r0 openssl-dev=1.0.2t-r0 pcre-dev=8.41-r1 zlib-dev=1.2.11-r1 linux-headers=4.4.6-r2 curl=7.61.1-r3 gnupg=2.2.3-r1 libxslt-dev=1.1.31-r2 gd-dev=2.2.5-r3 geoip-dev=1.6.11-r0 perl-dev=5.26.3-r0 --no-cache --virtual .build-deps\nRUN curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure --prefix=/usr/local/nginx --user=www --group=www --error-log-path=/var/log/nginx_error.log --http-log-path=/var/log/nginx_access.log --pid-path=/var/run/nginx.pid --with-pcre --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module --with-http_gzip_static_module \\\n && make \\\n && make install\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk add bash=4.4.19-r1 openssh-client=7.5_p1-r10 wget=1.20.3-r0 supervisor=3.3.3-r1 curl=7.61.1-r3 libcurl=7.61.1-r3 python python-dev py-pip augeas-dev=1.9.0-r3 openssl-dev=1.0.2t-r0 ca-certificates=20190108-r0 dialog=1.3.20170509-r0 autoconf=2.69-r0 make=4.2.1-r0 gcc=6.4.0-r5 musl-dev=1.1.18-r4 linux-headers=4.4.6-r2 libmcrypt-dev=2.5.8-r7 libpng-dev=1.6.37-r0 icu-dev=59.1-r1 libpq=10.10-r0 libxslt-dev=1.1.31-r2 libffi-dev=3.2.1-r4 freetype-dev=2.8.1-r4 sqlite-dev=3.25.3-r2 libjpeg-turbo-dev=1.5.3-r3 --no-cache\n#   必须这样装mcrypt\nRUN pecl install mcrypt-1.0.1 \\\n && pecl install redis\n#   跑GD要配置下\nRUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-install pdo_mysql mysqli gd exif fileinfo intl json opcache\nRUN docker-php-ext-enable redis.so \\\n && docker-php-ext-enable mcrypt.so \\\n && docker-php-source delete\n#   安装composer    \nRUN EXPECTED_COMPOSER_SIGNATURE=$( wget -q -O - https://composer.github.io/installer.sig ;) \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php -r \"if (hash_file('SHA384', 'composer-setup.php') === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified'; } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \\\n && php composer-setup.php --install-dir=/usr/bin --filename=composer \\\n && php -r \"unlink('composer-setup.php');\"\n#   安装pip相关    \nRUN pip install pip==23.1 -U \\\n && pip install certbot==2.5.0 -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#   supervisor的配置文件复制过去\n#   supervisor配置文件\nCOPY ./conf/supervisord/supervisord.conf /etc/\n#   分解的supervisor配置\nRUN mkdir -p /etc/supervisor/\nCOPY ./conf/supervisord/php-fpm.conf /etc/supervisor/\nCOPY ./conf/supervisord/nginx.conf /etc/supervisor/\n#   nginx配置文件 symfony放在site里 注意路径是 /usr/local/nginx/conf/\nCOPY ./conf/nginx/nginx.conf /usr/local/nginx/conf/\nCOPY ./conf/nginx/symfony.conf /usr/local/nginx/conf/vhost/\n#   优化 php-fpm 配置\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && echo \"date.timezone = Asia/Shanghai\" >> ${php_vars}\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = www/g\" -e \"s/group = www-data/group = www/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = www/g\" -e \"s/;listen.group = www-data/listen.group = www/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/dev\\/shm\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#   挂载代码文件到容器\nCOPY ./code/index.php /data/www/public/\n#   添加启动脚本\nCOPY scripts/start.sh /start.sh\nRUN chmod 755 /start.sh\nEXPOSE 80/tcp\nCMD [\"/start.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.2.8-fpm-alpine3.7\nLABEL maintainer=\"nICKZHUO <sidewindermax@hotmail.com>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\n#  Nginx版本\nENV NGINX_VERSION=\"1.15.2\"\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing gnu-libiconv\nRUN addgroup -S www \\\n && adduser -D -S -h /var/cache/www -s /sbin/nologin -G www www \\\n && apk add --no-cache --virtual .build-deps autoconf gcc vim git libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev\nRUN curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure --prefix=/usr/local/nginx --user=www --group=www --error-log-path=/var/log/nginx_error.log --http-log-path=/var/log/nginx_access.log --pid-path=/var/run/nginx.pid --with-pcre --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module --with-http_gzip_static_module \\\n && make \\\n && make install\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk add --no-cache bash openssh-client wget supervisor curl libcurl python python-dev py-pip augeas-dev openssl-dev ca-certificates dialog autoconf make gcc musl-dev linux-headers libmcrypt-dev libpng-dev icu-dev libpq libxslt-dev libffi-dev freetype-dev sqlite-dev libjpeg-turbo-dev\n#  必须这样装mcrypt\nRUN pecl install mcrypt-1.0.1 \\\n && pecl install redis\n#  跑GD要配置下\nRUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-install pdo_mysql mysqli gd exif fileinfo intl json opcache\nRUN docker-php-ext-enable redis.so \\\n && docker-php-ext-enable mcrypt.so \\\n && docker-php-source delete\n#  安装composer    \nRUN EXPECTED_COMPOSER_SIGNATURE=$( wget -q -O - https://composer.github.io/installer.sig ;) \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php -r \"if (hash_file('SHA384', 'composer-setup.php') === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified'; } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \\\n && php composer-setup.php --install-dir=/usr/bin --filename=composer \\\n && php -r \"unlink('composer-setup.php');\"\n#  安装pip相关    \nRUN pip install pip -U \\\n && pip install certbot -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#  supervisor的配置文件复制过去\n#  supervisor配置文件\nADD ./conf/supervisord/supervisord.conf /etc/\n#  分解的supervisor配置\nRUN mkdir -p /etc/supervisor/\nADD ./conf/supervisord/php-fpm.conf /etc/supervisor/\nADD ./conf/supervisord/nginx.conf /etc/supervisor/\n#  nginx配置文件 symfony放在site里 注意路径是 /usr/local/nginx/conf/\nCOPY ./conf/nginx/nginx.conf /usr/local/nginx/conf/\nCOPY ./conf/nginx/symfony.conf /usr/local/nginx/conf/vhost/\n#  优化 php-fpm 配置\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && echo \"date.timezone = Asia/Shanghai\" >> ${php_vars}\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = www/g\" -e \"s/group = www-data/group = www/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = www/g\" -e \"s/;listen.group = www-data/listen.group = www/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/dev\\/shm\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#  挂载代码文件到容器\nCOPY ./code/index.php /data/www/public/\n#  添加启动脚本\nADD scripts/start.sh /start.sh\nRUN chmod 755 /start.sh\nEXPOSE 80/tcp\nCMD [\"/start.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"1f8508fc82458c936dbea948fafb6e16","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.2.8-fpm-alpine3.7\nLABEL maintainer=\"nICKZHUO <sidewindermax@hotmail.com>\"\nENV php_conf=\"/usr/local/etc/php-fpm.conf\"\nENV fpm_conf=\"/usr/local/etc/php-fpm.d/www.conf\"\nENV php_vars=\"/usr/local/etc/php/conf.d/docker-vars.ini\"\n#   Nginx版本\nENV NGINX_VERSION=\"1.15.2\"\nENV LD_PRELOAD=\"/usr/lib/preloadable_libiconv.so php\"\nRUN apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing gnu-libiconv\nRUN addgroup -S www \\\n && adduser -D -S -h /var/cache/www -s /sbin/nologin -G www www \\\n && apk add --no-cache --virtual .build-deps autoconf gcc vim git libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev perl-dev\nRUN curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure --prefix=/usr/local/nginx --user=www --group=www --error-log-path=/var/log/nginx_error.log --http-log-path=/var/log/nginx_access.log --pid-path=/var/run/nginx.pid --with-pcre --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module --with-http_gzip_static_module \\\n && make \\\n && make install\nRUN echo @testing http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && echo /etc/apk/respositories \\\n && apk update \\\n && apk add --no-cache bash openssh-client wget supervisor curl libcurl python python-dev py-pip augeas-dev openssl-dev ca-certificates dialog autoconf make gcc musl-dev linux-headers libmcrypt-dev libpng-dev icu-dev libpq libxslt-dev libffi-dev freetype-dev sqlite-dev libjpeg-turbo-dev\n#   必须这样装mcrypt\nRUN pecl install mcrypt-1.0.1 \\\n && pecl install redis\n#   跑GD要配置下\nRUN docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-install pdo_mysql mysqli gd exif fileinfo intl json opcache\nRUN docker-php-ext-enable redis.so \\\n && docker-php-ext-enable mcrypt.so \\\n && docker-php-source delete\n#   安装composer    \nRUN EXPECTED_COMPOSER_SIGNATURE=$( wget -q -O - https://composer.github.io/installer.sig ;) \\\n && php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" \\\n && php -r \"if (hash_file('SHA384', 'composer-setup.php') === '${EXPECTED_COMPOSER_SIGNATURE}') { echo 'Composer.phar Installer verified'; } else { echo 'Composer.phar Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" \\\n && php composer-setup.php --install-dir=/usr/bin --filename=composer \\\n && php -r \"unlink('composer-setup.php');\"\n#   安装pip相关    \nRUN pip install pip -U \\\n && pip install certbot -U \\\n && mkdir -p /etc/letsencrypt/webrootauth \\\n && apk del gcc musl-dev linux-headers libffi-dev augeas-dev python-dev make autoconf\n#   supervisor的配置文件复制过去\n#   supervisor配置文件\nADD ./conf/supervisord/supervisord.conf /etc/\n#   分解的supervisor配置\nRUN mkdir -p /etc/supervisor/\nADD ./conf/supervisord/php-fpm.conf /etc/supervisor/\nADD ./conf/supervisord/nginx.conf /etc/supervisor/\n#   nginx配置文件 symfony放在site里 注意路径是 /usr/local/nginx/conf/\nCOPY ./conf/nginx/nginx.conf /usr/local/nginx/conf/\nCOPY ./conf/nginx/symfony.conf /usr/local/nginx/conf/vhost/\n#   优化 php-fpm 配置\nRUN echo \"cgi.fix_pathinfo=0\" > ${php_vars} \\\n && echo \"upload_max_filesize = 100M\" >> ${php_vars} \\\n && echo \"post_max_size = 100M\" >> ${php_vars} \\\n && echo \"variables_order = \\\"EGPCS\\\"\" >> ${php_vars} \\\n && echo \"memory_limit = 128M\" >> ${php_vars} \\\n && echo \"date.timezone = Asia/Shanghai\" >> ${php_vars}\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g\" -e \"s/pm.max_children = 5/pm.max_children = 4/g\" -e \"s/pm.start_servers = 2/pm.start_servers = 3/g\" -e \"s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g\" -e \"s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g\" -e \"s/;pm.max_requests = 500/pm.max_requests = 200/g\" -e \"s/user = www-data/user = www/g\" -e \"s/group = www-data/group = www/g\" -e \"s/;listen.mode = 0660/listen.mode = 0666/g\" -e \"s/;listen.owner = www-data/listen.owner = www/g\" -e \"s/;listen.group = www-data/listen.group = www/g\" -e \"s/listen = 127.0.0.1:9000/listen = \\/dev\\/shm\\/php-fpm.sock/g\" -e \"s/^;clear_env = no$/clear_env = no/\" ${fpm_conf}\n#   挂载代码文件到容器\nCOPY ./code/index.php /data/www/public/\n#   添加启动脚本\nADD scripts/start.sh /start.sh\nRUN chmod 755 /start.sh\nEXPOSE 80/tcp\nCMD [\"/start.sh\"]\n","originalDockerfileUglifiedHash":"0ab6be33bd98d37b5c8d17d9e78a23c8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/82fbc9ca086b2f72d1df3a8187760dc5f00bc76b.dockerfile"}