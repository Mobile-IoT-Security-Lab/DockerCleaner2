{"seed":1575270892,"processedDockerfileHash":"1e038fb7bb924d47e922f1dc456d3154","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim:set ft=dockerfile:\nFROM alpine:3.8\nLABEL maintainer=\"Justin Clift <justin@postgresql.org>\"\n#   Install Git, Go, Memcached, and PostgreSQL\nRUN apk update \\\n && apk upgrade \\\n && apk add ca-certificates=20191127-r2 git=2.18.4-r0 go=1.10.8-r0 libc-dev=0.7.1-r0 memcached=1.5.8-r0 postgresql=10.12-r0 sqlite-dev=3.25.3-r4 'curl>7.61.0' --no-cache\n#   Create the DBHub.io OS user\nRUN addgroup dbhub \\\n && adduser -D -S -s /bin/ash -G dbhub dbhub\n#  ## Memcached\n#   Generate script for starting Memcached\nRUN echo \"/usr/bin/memcached -u memcached -d\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/start.sh\n#  ## PostgreSQL\n#   Create PostgreSQL directories\nENV PGDATA=\"/data/postgresql\"\nRUN su - postgres -c \"echo export PGDATA=${PGDATA} >> .profile\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nRUN mkdir /run/postgresql \\\n && chown postgres:postgres /run/postgresql\n#   Add script pieces for initialising & starting PostgreSQL\nRUN echo \"mkdir -p ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown -R postgres:postgres ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chmod 777 ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} initdb'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createuser -d dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createdb -O dbhub dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - dbhub -c 'psql dbhub < /go/src/github.com/sqlitebrowser/dbhub.io/database/dbhub.sql'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} stop'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/init.sh\n#  ## Minio\n#   Create the Minio OS user\nRUN addgroup minio \\\n && adduser -D -S -s /bin/ash -G minio minio\n#   Install Minio\nENV MINIO_UPDATE=\"off\"\nENV MINIO_ACCESS_KEY=\"minio\"\nENV MINIO_SECRET_KEY=\"minio123\"\nENV MINIO_DATA=\"/data/minio\"\nRUN mkdir -p /go/src/github.com/minio \\\n && curl -L -o /usr/local/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio \\\n && chmod +x /usr/local/bin/minio\n#   Add script pieces for initialising & starting Minio\nRUN echo \"mkdir -p ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown minio:minio ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && su - minio -c \"echo export MINIO_UPDATE=${MINIO_UPDATE} >> .profile\" \\\n && su - minio -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - minio -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && echo \"su - minio -c '/usr/local/bin/minio server ${MINIO_DATA} &'\" >> /usr/local/bin/start.sh\n#  ## DBHub.io\n#   Install dep\nENV GOPATH=\"/go\"\nRUN mkdir -p /go/bin \\\n && curl -L https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n#   Create directores for the DBHub daemons\nRUN mkdir -p /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chown -R dbhub:dbhub /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chmod 700 /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue\n#   Build the DBHub.io daemons\nRUN mkdir -p /go/src/github.com/sqlitebrowser \\\n && cd /go/src/github.com/sqlitebrowser \\\n && git clone https://github.com/sqlitebrowser/dbhub.io \\\n && cd /go/src/github.com/sqlitebrowser/dbhub.io \\\n && /go/bin/dep ensure \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-webui github.com/sqlitebrowser/dbhub.io/webui \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-db4s github.com/sqlitebrowser/dbhub.io/db4s\n#  ## Other pieces\n#   Delve (for debugging)\nRUN apk add libc6-compat=1.1.19-r11 --no-cache\nRUN go get github.com/derekparker/delve/cmd/dlv\n#   Config file\nENV CONFIG_FILE=\"/go/src/github.com/sqlitebrowser/dbhub.io/docker/config.toml\"\n#   Add script pieces for starting DBHub.io services\nRUN echo \"echo 127.0.0.1 docker-dev.dbhub.io docker-dev >> /etc/hosts\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-webui &'\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-db4s &'\" >> /usr/local/bin/start.sh\n#   Make Delve (40000), Minio webUI (9000), DBHub.io webUI (8443), and the DB4S end point (5550)\n#   ports available outside this container\nEXPOSE 8443/tcp 5550/tcp 9000/tcp 40000/tcp\nVOLUME /data\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim:set ft=dockerfile:\nFROM alpine:3.8\nLABEL maintainer=\"Justin Clift <justin@postgresql.org>\"\n#  Install Git, Go, Memcached, and PostgreSQL\nRUN apk update \\\n && apk upgrade \\\n && apk add --no-cache ca-certificates 'curl>7.61.0' git go libc-dev memcached postgresql sqlite-dev\n#  Create the DBHub.io OS user\nRUN addgroup dbhub \\\n && adduser -D -S -s /bin/ash -G dbhub dbhub\n# ## Memcached\n#  Generate script for starting Memcached\nRUN echo \"/usr/bin/memcached -u memcached -d\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/start.sh\n# ## PostgreSQL\n#  Create PostgreSQL directories\nENV PGDATA=\"/data/postgresql\"\nRUN su - postgres -c \"echo export PGDATA=${PGDATA} >> .profile\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nRUN mkdir /run/postgresql \\\n && chown postgres:postgres /run/postgresql\n#  Add script pieces for initialising & starting PostgreSQL\nRUN echo \"mkdir -p ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown -R postgres:postgres ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chmod 777 ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} initdb'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createuser -d dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createdb -O dbhub dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - dbhub -c 'psql dbhub < /go/src/github.com/sqlitebrowser/dbhub.io/database/dbhub.sql'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} stop'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/init.sh\n# ## Minio\n#  Create the Minio OS user\nRUN addgroup minio \\\n && adduser -D -S -s /bin/ash -G minio minio\n#  Install Minio\nENV MINIO_UPDATE=\"off\"\nENV MINIO_ACCESS_KEY=\"minio\"\nENV MINIO_SECRET_KEY=\"minio123\"\nENV MINIO_DATA=\"/data/minio\"\nRUN mkdir -p /go/src/github.com/minio \\\n && curl -L -o /usr/local/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio \\\n && chmod +x /usr/local/bin/minio\n#  Add script pieces for initialising & starting Minio\nRUN echo \"mkdir -p ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown minio:minio ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && su - minio -c \"echo export MINIO_UPDATE=${MINIO_UPDATE} >> .profile\" \\\n && su - minio -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - minio -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && echo \"su - minio -c '/usr/local/bin/minio server ${MINIO_DATA} &'\" >> /usr/local/bin/start.sh\n# ## DBHub.io\n#  Install dep\nENV GOPATH=\"/go\"\nRUN mkdir -p /go/bin \\\n && curl -L https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n#  Create directores for the DBHub daemons\nRUN mkdir -p /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chown -R dbhub:dbhub /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chmod 700 /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue\n#  Build the DBHub.io daemons\nRUN mkdir -p /go/src/github.com/sqlitebrowser \\\n && cd /go/src/github.com/sqlitebrowser \\\n && git clone https://github.com/sqlitebrowser/dbhub.io \\\n && cd /go/src/github.com/sqlitebrowser/dbhub.io \\\n && /go/bin/dep ensure \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-webui github.com/sqlitebrowser/dbhub.io/webui \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-db4s github.com/sqlitebrowser/dbhub.io/db4s\n# ## Other pieces\n#  Delve (for debugging)\nRUN apk add --no-cache libc6-compat\nRUN go get github.com/derekparker/delve/cmd/dlv\n#  Config file\nENV CONFIG_FILE=\"/go/src/github.com/sqlitebrowser/dbhub.io/docker/config.toml\"\n#  Add script pieces for starting DBHub.io services\nRUN echo \"echo 127.0.0.1 docker-dev.dbhub.io docker-dev >> /etc/hosts\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-webui &'\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-db4s &'\" >> /usr/local/bin/start.sh\n#  Make Delve (40000), Minio webUI (9000), DBHub.io webUI (8443), and the DB4S end point (5550)\n#  ports available outside this container\nEXPOSE 8443/tcp 5550/tcp 9000/tcp 40000/tcp\nVOLUME /data\n","injectedSmells":[],"originalDockerfileHash":"e5d7dfe8a8df1f4c08d2b1c05de4b9ec","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim:set ft=dockerfile:\nFROM alpine:3.8\nLABEL maintainer=\"Justin Clift <justin@postgresql.org>\"\n#   Install Git, Go, Memcached, and PostgreSQL\nRUN apk update \\\n && apk upgrade \\\n && apk add --no-cache ca-certificates 'curl>7.61.0' git go libc-dev memcached postgresql sqlite-dev\n#   Create the DBHub.io OS user\nRUN addgroup dbhub \\\n && adduser -D -S -s /bin/ash -G dbhub dbhub\n#  ## Memcached\n#   Generate script for starting Memcached\nRUN echo \"/usr/bin/memcached -u memcached -d\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/start.sh\n#  ## PostgreSQL\n#   Create PostgreSQL directories\nENV PGDATA=\"/data/postgresql\"\nRUN su - postgres -c \"echo export PGDATA=${PGDATA} >> .profile\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nRUN mkdir /run/postgresql \\\n && chown postgres:postgres /run/postgresql\n#   Add script pieces for initialising & starting PostgreSQL\nRUN echo \"mkdir -p ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown -R postgres:postgres ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chmod 777 ${PGDATA}\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} initdb'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createuser -d dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'createdb -O dbhub dbhub'\" >> /usr/local/bin/init.sh \\\n && echo \"su - dbhub -c 'psql dbhub < /go/src/github.com/sqlitebrowser/dbhub.io/database/dbhub.sql'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} stop'\" >> /usr/local/bin/init.sh \\\n && echo \"su - postgres -c 'pg_ctl -D ${PGDATA} start'\" >> /usr/local/bin/start.sh \\\n && chmod +x /usr/local/bin/init.sh\n#  ## Minio\n#   Create the Minio OS user\nRUN addgroup minio \\\n && adduser -D -S -s /bin/ash -G minio minio\n#   Install Minio\nENV MINIO_UPDATE=\"off\"\nENV MINIO_ACCESS_KEY=\"minio\"\nENV MINIO_SECRET_KEY=\"minio123\"\nENV MINIO_DATA=\"/data/minio\"\nRUN mkdir -p /go/src/github.com/minio \\\n && curl -L -o /usr/local/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio \\\n && chmod +x /usr/local/bin/minio\n#   Add script pieces for initialising & starting Minio\nRUN echo \"mkdir -p ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && echo \"chown minio:minio ${MINIO_DATA}\" >> /usr/local/bin/init.sh \\\n && su - minio -c \"echo export MINIO_UPDATE=${MINIO_UPDATE} >> .profile\" \\\n && su - minio -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - minio -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} >> .profile\" \\\n && su - dbhub -c \"echo export MINIO_SECRET_KEY=${MINIO_SECRET_KEY} >> .profile\" \\\n && echo \"su - minio -c '/usr/local/bin/minio server ${MINIO_DATA} &'\" >> /usr/local/bin/start.sh\n#  ## DBHub.io\n#   Install dep\nENV GOPATH=\"/go\"\nRUN mkdir -p /go/bin \\\n && curl -L https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n#   Create directores for the DBHub daemons\nRUN mkdir -p /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chown -R dbhub:dbhub /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue \\\n && chmod 700 /var/log/dbhub ~dbhub/.dbhub/disk_cache ~dbhub/.dbhub/email_queue\n#   Build the DBHub.io daemons\nRUN mkdir -p /go/src/github.com/sqlitebrowser \\\n && cd /go/src/github.com/sqlitebrowser \\\n && git clone https://github.com/sqlitebrowser/dbhub.io \\\n && cd /go/src/github.com/sqlitebrowser/dbhub.io \\\n && /go/bin/dep ensure \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-webui github.com/sqlitebrowser/dbhub.io/webui \\\n && go build -gcflags \"all=-N -l\" -o /usr/local/bin/dbhub-db4s github.com/sqlitebrowser/dbhub.io/db4s\n#  ## Other pieces\n#   Delve (for debugging)\nRUN apk add --no-cache libc6-compat\nRUN go get github.com/derekparker/delve/cmd/dlv\n#   Config file\nENV CONFIG_FILE=\"/go/src/github.com/sqlitebrowser/dbhub.io/docker/config.toml\"\n#   Add script pieces for starting DBHub.io services\nRUN echo \"echo 127.0.0.1 docker-dev.dbhub.io docker-dev >> /etc/hosts\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-webui &'\" >> /usr/local/bin/start.sh \\\n && echo \"su - dbhub -c 'CONFIG_FILE=${CONFIG_FILE} /usr/local/bin/dbhub-db4s &'\" >> /usr/local/bin/start.sh\n#   Make Delve (40000), Minio webUI (9000), DBHub.io webUI (8443), and the DB4S end point (5550)\n#   ports available outside this container\nEXPOSE 8443/tcp 5550/tcp 9000/tcp 40000/tcp\nVOLUME /data\n","originalDockerfileUglifiedHash":"c05bfc3b12749fa4d383d3e45fb9f482","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ea0d4105aebd7b175cadebeac1ced5403c740c91.dockerfile"}