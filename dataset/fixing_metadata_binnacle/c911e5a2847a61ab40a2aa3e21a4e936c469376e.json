{"seed":3197761519,"processedDockerfileHash":"0d3d74bb85b9b808891ff309dc176be1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jinpeng Li <mr.li.jinpeng@gmail.com>\nARG THEANO_VERSION=rel-1.0.1\nARG TENSORFLOW_VERSION=1.4.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg5 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install ipython==8.12.0 --no-cache-dir --upgrade \\\n && pip install Cython==0.29.34 ipykernel==6.22.0 jupyter==1.0.0 path.py==12.5.0 Pillow==9.5.0 pygments==2.15.0 six==1.16.0 sphinx==6.1.3 wheel==0.40.0 zmq==0.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install dependencies for Caffe\nRUN apt-get update \\\n && apt-get install --no-install-recommends libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Caffe\nRUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe \\\n && cd /root/caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_CUDNN=1 -DBLAS=Open .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#   Set up Caffe environment variables\nENV CAFFE_ROOT=\"/root/caffe\"\nENV PYCAFFE_ROOT=\"$CAFFE_ROOT/python\"\nENV PYTHONPATH=\"$PYCAFFE_ROOT:$PYTHONPATH\" \\\n    PATH=\"$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\"\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf \\\n && ldconfig\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\nRUN apt-get update \\\n && apt-get install --no-install-recommends sudo -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#   Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#   Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install torch\nRUN luarocks install cutorch\nRUN luarocks install nn\nRUN luarocks install cunn\nRUN luarocks install loadcaffe\nRUN cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n#   Install OpenCV\nRUN apt-get install --no-install-recommends libopencv-dev python-opencv -y\nRUN apt-get install --no-install-recommends python3-setuptools python3-pip -y\nRUN pip3 install --upgrade tensorflow-gpu\nRUN apt-get install --no-install-recommends tmux screen wget -y\nRUN pip install mxnet-cu80==1.5.0\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n#  # ssh server\nRUN apt-get install --no-install-recommends openssh-server -y\nRUN mkdir /var/run/sshd\nRUN echo 'root:kskdjf' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nCOPY Anaconda2-5.0.1-Linux-x86_64.sh /root/\nCOPY Anaconda3-5.0.1-Linux-x86_64.sh /root/\nEXPOSE 22/tcp\nCOPY add_bashrc /root/\nRUN cd /root/ \\\n && cat add_bashrc >> .bashrc \\\n && rm add_bashrc\nCMD [\"/usr/sbin/sshd\", \"-D\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jinpeng Li <mr.li.jinpeng@gmail.com>\nARG THEANO_VERSION=rel-1.0.1\nARG TENSORFLOW_VERSION=1.4.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n# RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n# \tcat /proc/driver/nvidia/version && \\\n# \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n# \tnvcc -V && \\\n# \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg5 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#  Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#  especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#  Install dependencies for Caffe\nRUN apt-get update \\\n && apt-get install libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Caffe\nRUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe \\\n && cd /root/caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_CUDNN=1 -DBLAS=Open .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#  Set up Caffe environment variables\nENV CAFFE_ROOT=\"/root/caffe\"\nENV PYCAFFE_ROOT=\"$CAFFE_ROOT/python\"\nENV PYTHONPATH=\"$PYCAFFE_ROOT:$PYTHONPATH\" \\\n    PATH=\"$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\"\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf \\\n && ldconfig\n#  Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#  Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#  Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\nRUN apt-get update \\\n && apt-get install sudo -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#  Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#  Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install torch\nRUN luarocks install cutorch\nRUN luarocks install nn\nRUN luarocks install cunn\nRUN luarocks install loadcaffe\nRUN cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n#  Install OpenCV\nRUN apt-get install libopencv-dev python-opencv -y\nRUN apt-get install python3-setuptools python3-pip -y\nRUN pip3 install --upgrade tensorflow-gpu\nRUN apt-get install tmux screen wget -y\nRUN pip install mxnet-cu80\n#  Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n# # ssh server\nRUN apt-get install openssh-server -y\nRUN mkdir /var/run/sshd\nRUN echo 'root:kskdjf' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nCOPY Anaconda2-5.0.1-Linux-x86_64.sh /root/\nCOPY Anaconda3-5.0.1-Linux-x86_64.sh /root/\nEXPOSE 22/tcp\nCOPY add_bashrc /root/\nRUN cd /root/ \\\n && cat add_bashrc >> .bashrc \\\n && rm add_bashrc\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n","injectedSmells":[],"originalDockerfileHash":"25fe7bbacb3c48eb9e97122dbe99f7ef","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nMAINTAINER Jinpeng Li <mr.li.jinpeng@gmail.com>\nARG THEANO_VERSION=rel-1.0.1\nARG TENSORFLOW_VERSION=1.4.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg5 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install dependencies for Caffe\nRUN apt-get update \\\n && apt-get install libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Caffe\nRUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe \\\n && cd /root/caffe \\\n && cat python/requirements.txt | xargs -n1 pip install \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_CUDNN=1 -DBLAS=Open .. \\\n && make -j\"$( nproc ;)\" all \\\n && make install\n#   Set up Caffe environment variables\nENV CAFFE_ROOT=\"/root/caffe\"\nENV PYCAFFE_ROOT=\"$CAFFE_ROOT/python\"\nENV PYTHONPATH=\"$PYCAFFE_ROOT:$PYTHONPATH\" \\\n    PATH=\"$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\"\nRUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf \\\n && ldconfig\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\nRUN apt-get update \\\n && apt-get install sudo -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#   Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#   Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install torch\nRUN luarocks install cutorch\nRUN luarocks install nn\nRUN luarocks install cunn\nRUN luarocks install loadcaffe\nRUN cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n#   Install OpenCV\nRUN apt-get install libopencv-dev python-opencv -y\nRUN apt-get install python3-setuptools python3-pip -y\nRUN pip3 install --upgrade tensorflow-gpu\nRUN apt-get install tmux screen wget -y\nRUN pip install mxnet-cu80\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n#  # ssh server\nRUN apt-get install openssh-server -y\nRUN mkdir /var/run/sshd\nRUN echo 'root:kskdjf' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nCOPY Anaconda2-5.0.1-Linux-x86_64.sh /root/\nCOPY Anaconda3-5.0.1-Linux-x86_64.sh /root/\nEXPOSE 22/tcp\nCOPY add_bashrc /root/\nRUN cd /root/ \\\n && cat add_bashrc >> .bashrc \\\n && rm add_bashrc\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n","originalDockerfileUglifiedHash":"93025a0dd97120d8ff32645adfcc928e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c911e5a2847a61ab40a2aa3e21a4e936c469376e.dockerfile"}