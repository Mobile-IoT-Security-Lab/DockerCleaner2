{"seed":2458689629,"processedDockerfileHash":"f19bae443fd380e468196c39ce96287b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#   apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#   Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nRUN which wget &> /dev/null || (apt-get update ;apt-get install --no-install-recommends wget=1.20.3 ) ; wget --no-verbose --output-document /tmp/ https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#   ENV S6_KILL_GRACETIME=\"3000\"\n#   Supportive pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#   Output folder\nRUN mkdir -p /out\n#   ===\n#   ZNC - install build time dependancies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y znc znc-dev ca-certificates libcurl4-openssl-dev make \\\n && $_apt_clean\n#   znc - Build external modules\nRUN mkdir -p /build/znc-modules/out \\\n && date -I > /out/znc_modules_version\nWORKDIR /build/znc-modules\n#   aka.pl - Trace nick changes / aka\nRUN git clone https://github.com/MuffinMedic/znc-aka.git \\\n && cd znc-aka \\\n && ls -lsa \\\n && cp aka.py /build/znc-modules/out\n#   Get backlog from full znc logs, instead of just the buffer\nRUN git clone https://github.com/FruitieX/znc-backlog.git \\\n && cd znc-backlog \\\n && make \\\n && ls -lsa \\\n && cp backlog.so /build/znc-modules/out\n#   Per-client channel lists, and part 2x to leave\nRUN git clone https://github.com/jpnurmi/znc-chanfilter.git \\\n && cd znc-chanfilter \\\n && znc-buildmod chanfilter.cpp \\\n && ls -lsa \\\n && cp chanfilter.so /build/znc-modules/out\n#   Part 2x to leave, same unified channels list between all clients\nRUN mkdir partdetach2 \\\n && cd partdetach2 \\\n && wget https://gist.githubusercontent.com/Socialery/7058137/raw/2eeb084c5be845d0b4dd37bc5576ce8160140c3c/partdetach2.cpp \\\n && znc-buildmod partdetach2.cpp \\\n && ls -lsa \\\n && cp partdetach2.so /build/znc-modules/out\n#   # Push and http get nofitications for mobile etc\n#   RUN git clone https://github.com/dreamcat4/znc-push.git \\\n#    && cd znc-push && git checkout feature/jdb8s-cmdline-plus \\\n#    && make command=yes \\\n#    && ls -lsa && cp push.so /build/znc-modules/out\n#   # Push and http get nofitications for mobile etc\n#   RUN git clone https://github.com/jreese/znc-push.git \\\n#    && cd znc-push && make curl=yes \\\n#    && ls -lsa && cp push.so /build/znc-modules/out\n#   Push and http get nofitications for mobile etc\nRUN git clone https://github.com/jreese/znc-push.git \\\n && cd znc-push \\\n && make \\\n && ls -lsa \\\n && cp push.so /build/znc-modules/out\n#   Urlbuffer - save seen urls to a local txt file\nRUN git clone https://github.com/dreamcat4/urlbuffer.git \\\n && cd urlbuffer \\\n && znc-buildmod urlbuffer.cpp \\\n && ls -lsa \\\n && cp urlbuffer.so /build/znc-modules/out\n#   ZNC - Check which modules were built\nRUN ls -lsa /build/znc-modules/out/\n#   Create tarball in /out/\nRUN cd /build/znc-modules/out \\\n && tar -czvf /out/znc-modules-$( cat /out/znc_modules_version ;)_linux-x86_64.tar.gz *\n#   ===\n#   atheme - install build time dependancies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y autoconf automake libtool gettext libpcre3-dev perl \\\n && $_apt_clean\n#   atheme - Build external modules\nRUN mkdir -p /build/atheme/out\nWORKDIR /build/atheme\n#   atheme - ./configure && make && make install\nRUN git clone https://github.com/atheme/atheme.git \\\n && cd atheme \\\n && atheme_version=\"$( git tag | grep 'atheme-[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*' | sort | tail -1 | sed -e 's/^atheme-//' ;)\" \\\n && echo \"$atheme_version\" > /out/atheme_version \\\n && git checkout \"atheme-${atheme_version}\" \\\n && git submodule update --init \\\n && ./configure --sysconfdir=/etc/atheme --localstatedir=/var --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-fhs-paths --enable-contrib --with-pcre --with-perl \\\n && make \\\n && make install DESTDIR=$PWD/out\n#   Create tarball in /out/\nRUN cd atheme/out \\\n && tar -czvf /out/atheme-$( cat /out/atheme_version ;)_linux-x86_64.tar.gz *\n#   Upload tvheadend ubuntu .deb pkgs --> bintray.com\nWORKDIR /out\nCOPY upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#   Execute our upload script\nCOPY bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#   Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\n#   `configure' configures xtheme 7.4.0-alpha1 to adapt to many kinds of systems.\n#   Usage: ./configure [OPTION]... [VAR=VALUE]...\n#   To assign environment variables (e.g., CC, CFLAGS...), specify them as\n#   VAR=VALUE.  See below for descriptions of some of the useful variables.\n#   Defaults for the options are specified in brackets.\n#   Configuration:\n#     -h, --help              display this help and exit\n#         --help=short        display options specific to this package\n#         --help=recursive    display the short help of all the included packages\n#     -V, --version           display version information and exit\n#     -q, --quiet, --silent   do not print `checking ...' messages\n#         --cache-file=FILE   cache test results in FILE [disabled]\n#     -C, --config-cache      alias for `--cache-file=config.cache'\n#     -n, --no-create         do not create output files\n#         --srcdir=DIR        find the sources in DIR [configure dir or `..']\n#   Installation directories:\n#     --prefix=PREFIX         install architecture-independent files in PREFIX\n#                             [/build/xtheme/xtheme]\n#     --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n#                             [PREFIX]\n#   By default, `make install' will install all the files in\n#   `/build/xtheme/xtheme/bin', `/build/xtheme/xtheme/lib' etc.  You can specify\n#   an installation prefix other than `/build/xtheme/xtheme' using `--prefix',\n#   for instance `--prefix=$HOME'.\n#   For better control, use the options below.\n#   Fine tuning of the installation directories:\n#     --bindir=DIR            user executables [EPREFIX/bin]\n#     --sbindir=DIR           system admin executables [EPREFIX/sbin]\n#     --libexecdir=DIR        program executables [EPREFIX/libexec]\n#     --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n#     --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n#     --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n#     --libdir=DIR            object code libraries [EPREFIX/lib]\n#     --includedir=DIR        C header files [PREFIX/include]\n#     --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n#     --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]\n#     --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]\n#     --infodir=DIR           info documentation [DATAROOTDIR/info]\n#     --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]\n#     --mandir=DIR            man documentation [DATAROOTDIR/man]\n#     --docdir=DIR            documentation root [DATAROOTDIR/doc/xtheme]\n#     --htmldir=DIR           html documentation [DOCDIR]\n#     --dvidir=DIR            dvi documentation [DOCDIR]\n#     --pdfdir=DIR            pdf documentation [DOCDIR]\n#     --psdir=DIR             ps documentation [DOCDIR]\n#   System types:\n#     --build=BUILD     configure for building on BUILD [guessed]\n#     --host=HOST       cross-compile to build programs to run on HOST [BUILD]\n#   Optional Features:\n#     --disable-option-checking  ignore unrecognized --enable/--with options\n#     --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n#     --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n#     --disable-nls           do not use Native Language Support\n#     --enable-fhs-paths      Use more FHS-like pathnames (for packagers).\n#     --enable-large-net      Enable large network support.\n#     --enable-contrib        Enable contrib modules.\n#     --disable-ssl           don't use OpenSSL to provide more SASL mechanisms\n#     --enable-warnings       Enable compiler warnings\n#     --disable-propolice     Disable propolice protections (for debugging.)\n#     --enable-profile        Enable profiling extensions\n#     --disable-rpath         Disable use of -Wl,-rpath= during linking.\n#   Optional Packages:\n#     --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n#     --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n#     --with-gnu-ld           assume the C compiler uses GNU ld default=no\n#     --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n#     --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n#     --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib\n#     --without-libintl-prefix     don't search for libintl in includedir and libdir\n#     --with-cracklib         Compile cracklib nickserv submodule for checking\n#                             password strength.\n#     --without-ldap          Disable building ldap auth module.\n#     --without-perl          Disable building perl scripting module.\n#     --with-libmowgli[=prefix]\n#                             Specify location of system libmowgli install, or\n#                             \"no\" to force use of internal libmowgli\n#     --with-pcre             Enable PCRE regular expression support\n#   Some influential environment variables:\n#     CC          C compiler command\n#     CFLAGS      C compiler flags\n#     LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n#                 nonstandard directory <lib dir>\n#     LIBS        libraries to pass to the linker, e.g. -l<library>\n#     CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\n#                 you have headers in a nonstandard directory <include dir>\n#     CPP         C preprocessor\n#     PKG_CONFIG  path to pkg-config utility\n#     LIBQRENCODE_CFLAGS\n#                 C compiler flags for LIBQRENCODE, overriding pkg-config\n#     LIBQRENCODE_LIBS\n#                 linker flags for LIBQRENCODE, overriding pkg-config\n#     MOWGLI_CFLAGS\n#                 C compiler flags for MOWGLI, overriding pkg-config\n#     MOWGLI_LIBS linker flags for MOWGLI, overriding pkg-config\n#     PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config\n#     PCRE_LIBS   linker flags for PCRE, overriding pkg-config\n#   Use these variables to override the choices made by `configure' or to help\n#   it to find libraries and programs with nonstandard names/locations.\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#  apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#  Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#  ENV S6_KILL_GRACETIME=\"3000\"\n#  Supportive pkgs\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#  Output folder\nRUN mkdir -p /out\n#  ===\n#  ZNC - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y znc znc-dev ca-certificates libcurl4-openssl-dev make \\\n && $_apt_clean\n#  znc - Build external modules\nRUN mkdir -p /build/znc-modules/out \\\n && date -I > /out/znc_modules_version\nWORKDIR /build/znc-modules\n#  aka.pl - Trace nick changes / aka\nRUN git clone https://github.com/MuffinMedic/znc-aka.git \\\n && cd znc-aka \\\n && ls -lsa \\\n && cp aka.py /build/znc-modules/out\n#  Get backlog from full znc logs, instead of just the buffer\nRUN git clone https://github.com/FruitieX/znc-backlog.git \\\n && cd znc-backlog \\\n && make \\\n && ls -lsa \\\n && cp backlog.so /build/znc-modules/out\n#  Per-client channel lists, and part 2x to leave\nRUN git clone https://github.com/jpnurmi/znc-chanfilter.git \\\n && cd znc-chanfilter \\\n && znc-buildmod chanfilter.cpp \\\n && ls -lsa \\\n && cp chanfilter.so /build/znc-modules/out\n#  Part 2x to leave, same unified channels list between all clients\nRUN mkdir partdetach2 \\\n && cd partdetach2 \\\n && wget https://gist.githubusercontent.com/Socialery/7058137/raw/2eeb084c5be845d0b4dd37bc5576ce8160140c3c/partdetach2.cpp \\\n && znc-buildmod partdetach2.cpp \\\n && ls -lsa \\\n && cp partdetach2.so /build/znc-modules/out\n#  # Push and http get nofitications for mobile etc\n#  RUN git clone https://github.com/dreamcat4/znc-push.git \\\n#   && cd znc-push && git checkout feature/jdb8s-cmdline-plus \\\n#   && make command=yes \\\n#   && ls -lsa && cp push.so /build/znc-modules/out\n#  # Push and http get nofitications for mobile etc\n#  RUN git clone https://github.com/jreese/znc-push.git \\\n#   && cd znc-push && make curl=yes \\\n#   && ls -lsa && cp push.so /build/znc-modules/out\n#  Push and http get nofitications for mobile etc\nRUN git clone https://github.com/jreese/znc-push.git \\\n && cd znc-push \\\n && make \\\n && ls -lsa \\\n && cp push.so /build/znc-modules/out\n#  Urlbuffer - save seen urls to a local txt file\nRUN git clone https://github.com/dreamcat4/urlbuffer.git \\\n && cd urlbuffer \\\n && znc-buildmod urlbuffer.cpp \\\n && ls -lsa \\\n && cp urlbuffer.so /build/znc-modules/out\n#  ZNC - Check which modules were built\nRUN ls -lsa /build/znc-modules/out/\n#  Create tarball in /out/\nRUN cd /build/znc-modules/out \\\n && tar -czvf /out/znc-modules-$( cat /out/znc_modules_version ;)_linux-x86_64.tar.gz *\n#  ===\n#  atheme - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y autoconf automake libtool gettext libpcre3-dev perl \\\n && $_apt_clean\n#  atheme - Build external modules\nRUN mkdir -p /build/atheme/out\nWORKDIR /build/atheme\n#  atheme - ./configure && make && make install\nRUN git clone https://github.com/atheme/atheme.git \\\n && cd atheme \\\n && atheme_version=\"$( git tag | grep 'atheme-[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*' | sort | tail -1 | sed -e 's/^atheme-//' ;)\" \\\n && echo \"$atheme_version\" > /out/atheme_version \\\n && git checkout \"atheme-${atheme_version}\" \\\n && git submodule update --init \\\n && ./configure --sysconfdir=/etc/atheme --localstatedir=/var --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-fhs-paths --enable-contrib --with-pcre --with-perl \\\n && make \\\n && make install DESTDIR=$PWD/out\n#  Create tarball in /out/\nRUN cd atheme/out \\\n && tar -czvf /out/atheme-$( cat /out/atheme_version ;)_linux-x86_64.tar.gz *\n#  Upload tvheadend ubuntu .deb pkgs --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#  Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#  Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\n#  `configure' configures xtheme 7.4.0-alpha1 to adapt to many kinds of systems.\n#  Usage: ./configure [OPTION]... [VAR=VALUE]...\n#  To assign environment variables (e.g., CC, CFLAGS...), specify them as\n#  VAR=VALUE.  See below for descriptions of some of the useful variables.\n#  Defaults for the options are specified in brackets.\n#  Configuration:\n#    -h, --help              display this help and exit\n#        --help=short        display options specific to this package\n#        --help=recursive    display the short help of all the included packages\n#    -V, --version           display version information and exit\n#    -q, --quiet, --silent   do not print `checking ...' messages\n#        --cache-file=FILE   cache test results in FILE [disabled]\n#    -C, --config-cache      alias for `--cache-file=config.cache'\n#    -n, --no-create         do not create output files\n#        --srcdir=DIR        find the sources in DIR [configure dir or `..']\n#  Installation directories:\n#    --prefix=PREFIX         install architecture-independent files in PREFIX\n#                            [/build/xtheme/xtheme]\n#    --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n#                            [PREFIX]\n#  By default, `make install' will install all the files in\n#  `/build/xtheme/xtheme/bin', `/build/xtheme/xtheme/lib' etc.  You can specify\n#  an installation prefix other than `/build/xtheme/xtheme' using `--prefix',\n#  for instance `--prefix=$HOME'.\n#  For better control, use the options below.\n#  Fine tuning of the installation directories:\n#    --bindir=DIR            user executables [EPREFIX/bin]\n#    --sbindir=DIR           system admin executables [EPREFIX/sbin]\n#    --libexecdir=DIR        program executables [EPREFIX/libexec]\n#    --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n#    --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n#    --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n#    --libdir=DIR            object code libraries [EPREFIX/lib]\n#    --includedir=DIR        C header files [PREFIX/include]\n#    --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n#    --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]\n#    --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]\n#    --infodir=DIR           info documentation [DATAROOTDIR/info]\n#    --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]\n#    --mandir=DIR            man documentation [DATAROOTDIR/man]\n#    --docdir=DIR            documentation root [DATAROOTDIR/doc/xtheme]\n#    --htmldir=DIR           html documentation [DOCDIR]\n#    --dvidir=DIR            dvi documentation [DOCDIR]\n#    --pdfdir=DIR            pdf documentation [DOCDIR]\n#    --psdir=DIR             ps documentation [DOCDIR]\n#  System types:\n#    --build=BUILD     configure for building on BUILD [guessed]\n#    --host=HOST       cross-compile to build programs to run on HOST [BUILD]\n#  Optional Features:\n#    --disable-option-checking  ignore unrecognized --enable/--with options\n#    --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n#    --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n#    --disable-nls           do not use Native Language Support\n#    --enable-fhs-paths      Use more FHS-like pathnames (for packagers).\n#    --enable-large-net      Enable large network support.\n#    --enable-contrib        Enable contrib modules.\n#    --disable-ssl           don't use OpenSSL to provide more SASL mechanisms\n#    --enable-warnings       Enable compiler warnings\n#    --disable-propolice     Disable propolice protections (for debugging.)\n#    --enable-profile        Enable profiling extensions\n#    --disable-rpath         Disable use of -Wl,-rpath= during linking.\n#  Optional Packages:\n#    --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n#    --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n#    --with-gnu-ld           assume the C compiler uses GNU ld default=no\n#    --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n#    --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n#    --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib\n#    --without-libintl-prefix     don't search for libintl in includedir and libdir\n#    --with-cracklib         Compile cracklib nickserv submodule for checking\n#                            password strength.\n#    --without-ldap          Disable building ldap auth module.\n#    --without-perl          Disable building perl scripting module.\n#    --with-libmowgli[=prefix]\n#                            Specify location of system libmowgli install, or\n#                            \"no\" to force use of internal libmowgli\n#    --with-pcre             Enable PCRE regular expression support\n#  Some influential environment variables:\n#    CC          C compiler command\n#    CFLAGS      C compiler flags\n#    LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n#                nonstandard directory <lib dir>\n#    LIBS        libraries to pass to the linker, e.g. -l<library>\n#    CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\n#                you have headers in a nonstandard directory <include dir>\n#    CPP         C preprocessor\n#    PKG_CONFIG  path to pkg-config utility\n#    LIBQRENCODE_CFLAGS\n#                C compiler flags for LIBQRENCODE, overriding pkg-config\n#    LIBQRENCODE_LIBS\n#                linker flags for LIBQRENCODE, overriding pkg-config\n#    MOWGLI_CFLAGS\n#                C compiler flags for MOWGLI, overriding pkg-config\n#    MOWGLI_LIBS linker flags for MOWGLI, overriding pkg-config\n#    PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config\n#    PCRE_LIBS   linker flags for PCRE, overriding pkg-config\n#  Use these variables to override the choices made by `configure' or to help\n#  it to find libraries and programs with nonstandard names/locations.\n","injectedSmells":[],"originalDockerfileHash":"c36b5d9fb683b60f5f94ef9e928ca05d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#   apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#   Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#   ENV S6_KILL_GRACETIME=\"3000\"\n#   Supportive pkgs\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#   Output folder\nRUN mkdir -p /out\n#   ===\n#   ZNC - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y znc znc-dev ca-certificates libcurl4-openssl-dev make \\\n && $_apt_clean\n#   znc - Build external modules\nRUN mkdir -p /build/znc-modules/out \\\n && date -I > /out/znc_modules_version\nWORKDIR /build/znc-modules\n#   aka.pl - Trace nick changes / aka\nRUN git clone https://github.com/MuffinMedic/znc-aka.git \\\n && cd znc-aka \\\n && ls -lsa \\\n && cp aka.py /build/znc-modules/out\n#   Get backlog from full znc logs, instead of just the buffer\nRUN git clone https://github.com/FruitieX/znc-backlog.git \\\n && cd znc-backlog \\\n && make \\\n && ls -lsa \\\n && cp backlog.so /build/znc-modules/out\n#   Per-client channel lists, and part 2x to leave\nRUN git clone https://github.com/jpnurmi/znc-chanfilter.git \\\n && cd znc-chanfilter \\\n && znc-buildmod chanfilter.cpp \\\n && ls -lsa \\\n && cp chanfilter.so /build/znc-modules/out\n#   Part 2x to leave, same unified channels list between all clients\nRUN mkdir partdetach2 \\\n && cd partdetach2 \\\n && wget https://gist.githubusercontent.com/Socialery/7058137/raw/2eeb084c5be845d0b4dd37bc5576ce8160140c3c/partdetach2.cpp \\\n && znc-buildmod partdetach2.cpp \\\n && ls -lsa \\\n && cp partdetach2.so /build/znc-modules/out\n#   # Push and http get nofitications for mobile etc\n#   RUN git clone https://github.com/dreamcat4/znc-push.git \\\n#    && cd znc-push && git checkout feature/jdb8s-cmdline-plus \\\n#    && make command=yes \\\n#    && ls -lsa && cp push.so /build/znc-modules/out\n#   # Push and http get nofitications for mobile etc\n#   RUN git clone https://github.com/jreese/znc-push.git \\\n#    && cd znc-push && make curl=yes \\\n#    && ls -lsa && cp push.so /build/znc-modules/out\n#   Push and http get nofitications for mobile etc\nRUN git clone https://github.com/jreese/znc-push.git \\\n && cd znc-push \\\n && make \\\n && ls -lsa \\\n && cp push.so /build/znc-modules/out\n#   Urlbuffer - save seen urls to a local txt file\nRUN git clone https://github.com/dreamcat4/urlbuffer.git \\\n && cd urlbuffer \\\n && znc-buildmod urlbuffer.cpp \\\n && ls -lsa \\\n && cp urlbuffer.so /build/znc-modules/out\n#   ZNC - Check which modules were built\nRUN ls -lsa /build/znc-modules/out/\n#   Create tarball in /out/\nRUN cd /build/znc-modules/out \\\n && tar -czvf /out/znc-modules-$( cat /out/znc_modules_version ;)_linux-x86_64.tar.gz *\n#   ===\n#   atheme - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y autoconf automake libtool gettext libpcre3-dev perl \\\n && $_apt_clean\n#   atheme - Build external modules\nRUN mkdir -p /build/atheme/out\nWORKDIR /build/atheme\n#   atheme - ./configure && make && make install\nRUN git clone https://github.com/atheme/atheme.git \\\n && cd atheme \\\n && atheme_version=\"$( git tag | grep 'atheme-[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*' | sort | tail -1 | sed -e 's/^atheme-//' ;)\" \\\n && echo \"$atheme_version\" > /out/atheme_version \\\n && git checkout \"atheme-${atheme_version}\" \\\n && git submodule update --init \\\n && ./configure --sysconfdir=/etc/atheme --localstatedir=/var --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-fhs-paths --enable-contrib --with-pcre --with-perl \\\n && make \\\n && make install DESTDIR=$PWD/out\n#   Create tarball in /out/\nRUN cd atheme/out \\\n && tar -czvf /out/atheme-$( cat /out/atheme_version ;)_linux-x86_64.tar.gz *\n#   Upload tvheadend ubuntu .deb pkgs --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#   Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#   Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\n#   `configure' configures xtheme 7.4.0-alpha1 to adapt to many kinds of systems.\n#   Usage: ./configure [OPTION]... [VAR=VALUE]...\n#   To assign environment variables (e.g., CC, CFLAGS...), specify them as\n#   VAR=VALUE.  See below for descriptions of some of the useful variables.\n#   Defaults for the options are specified in brackets.\n#   Configuration:\n#     -h, --help              display this help and exit\n#         --help=short        display options specific to this package\n#         --help=recursive    display the short help of all the included packages\n#     -V, --version           display version information and exit\n#     -q, --quiet, --silent   do not print `checking ...' messages\n#         --cache-file=FILE   cache test results in FILE [disabled]\n#     -C, --config-cache      alias for `--cache-file=config.cache'\n#     -n, --no-create         do not create output files\n#         --srcdir=DIR        find the sources in DIR [configure dir or `..']\n#   Installation directories:\n#     --prefix=PREFIX         install architecture-independent files in PREFIX\n#                             [/build/xtheme/xtheme]\n#     --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n#                             [PREFIX]\n#   By default, `make install' will install all the files in\n#   `/build/xtheme/xtheme/bin', `/build/xtheme/xtheme/lib' etc.  You can specify\n#   an installation prefix other than `/build/xtheme/xtheme' using `--prefix',\n#   for instance `--prefix=$HOME'.\n#   For better control, use the options below.\n#   Fine tuning of the installation directories:\n#     --bindir=DIR            user executables [EPREFIX/bin]\n#     --sbindir=DIR           system admin executables [EPREFIX/sbin]\n#     --libexecdir=DIR        program executables [EPREFIX/libexec]\n#     --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n#     --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n#     --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n#     --libdir=DIR            object code libraries [EPREFIX/lib]\n#     --includedir=DIR        C header files [PREFIX/include]\n#     --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n#     --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]\n#     --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]\n#     --infodir=DIR           info documentation [DATAROOTDIR/info]\n#     --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]\n#     --mandir=DIR            man documentation [DATAROOTDIR/man]\n#     --docdir=DIR            documentation root [DATAROOTDIR/doc/xtheme]\n#     --htmldir=DIR           html documentation [DOCDIR]\n#     --dvidir=DIR            dvi documentation [DOCDIR]\n#     --pdfdir=DIR            pdf documentation [DOCDIR]\n#     --psdir=DIR             ps documentation [DOCDIR]\n#   System types:\n#     --build=BUILD     configure for building on BUILD [guessed]\n#     --host=HOST       cross-compile to build programs to run on HOST [BUILD]\n#   Optional Features:\n#     --disable-option-checking  ignore unrecognized --enable/--with options\n#     --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n#     --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n#     --disable-nls           do not use Native Language Support\n#     --enable-fhs-paths      Use more FHS-like pathnames (for packagers).\n#     --enable-large-net      Enable large network support.\n#     --enable-contrib        Enable contrib modules.\n#     --disable-ssl           don't use OpenSSL to provide more SASL mechanisms\n#     --enable-warnings       Enable compiler warnings\n#     --disable-propolice     Disable propolice protections (for debugging.)\n#     --enable-profile        Enable profiling extensions\n#     --disable-rpath         Disable use of -Wl,-rpath= during linking.\n#   Optional Packages:\n#     --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n#     --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n#     --with-gnu-ld           assume the C compiler uses GNU ld default=no\n#     --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n#     --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n#     --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib\n#     --without-libintl-prefix     don't search for libintl in includedir and libdir\n#     --with-cracklib         Compile cracklib nickserv submodule for checking\n#                             password strength.\n#     --without-ldap          Disable building ldap auth module.\n#     --without-perl          Disable building perl scripting module.\n#     --with-libmowgli[=prefix]\n#                             Specify location of system libmowgli install, or\n#                             \"no\" to force use of internal libmowgli\n#     --with-pcre             Enable PCRE regular expression support\n#   Some influential environment variables:\n#     CC          C compiler command\n#     CFLAGS      C compiler flags\n#     LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n#                 nonstandard directory <lib dir>\n#     LIBS        libraries to pass to the linker, e.g. -l<library>\n#     CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\n#                 you have headers in a nonstandard directory <include dir>\n#     CPP         C preprocessor\n#     PKG_CONFIG  path to pkg-config utility\n#     LIBQRENCODE_CFLAGS\n#                 C compiler flags for LIBQRENCODE, overriding pkg-config\n#     LIBQRENCODE_LIBS\n#                 linker flags for LIBQRENCODE, overriding pkg-config\n#     MOWGLI_CFLAGS\n#                 C compiler flags for MOWGLI, overriding pkg-config\n#     MOWGLI_LIBS linker flags for MOWGLI, overriding pkg-config\n#     PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config\n#     PCRE_LIBS   linker flags for PCRE, overriding pkg-config\n#   Use these variables to override the choices made by `configure' or to help\n#   it to find libraries and programs with nonstandard names/locations.\n","originalDockerfileUglifiedHash":"f690cfa11af6a7f163c8430fc78d46d5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bebbd5e730670e0442c5356ef229263f3cd64a45.dockerfile"}