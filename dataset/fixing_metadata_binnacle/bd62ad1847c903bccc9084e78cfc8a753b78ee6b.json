{"seed":2396242591,"processedDockerfileHash":"2c9dd6047ca81d33bd96df50893be67c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM bittube-android\n#  INSTALL JAVA\nRUN echo \"deb http://ftp.fr.debian.org/debian/ jessie-backports main contrib non-free\" >> /etc/apt/sources.list\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6:i386 libncurses5:i386 libstdc++6:i386 libz1:i386 -y \\\n && apt-get install --no-install-recommends jessie-backports ca-certificates-java=20230103ubuntu1 openjdk-8-jdk-headless=8u362-ga-0ubuntu2 openjdk-8-jre-headless=8u362-ga-0ubuntu2 ant=1.10.13-1 -y -t\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  Get Qt\nENV QT_VERSION=\"5.8\"\nRUN git clone git://code.qt.io/qt/qt5.git -b ${QT_VERSION} \\\n && cd qt5 \\\n && perl init-repository\n#  # Note: Need to use libc++ but Qt does not provide mkspec for libc++.\n#  # Their support of it is quite recent and they claim they don't use it by default\n#  # [only because it produces bigger binary objects](https://bugreports.qt.io/browse/QTBUG-50724).\n#  Create new mkspec for clang + libc++\nRUN cp -r qt5/qtbase/mkspecs/android-clang qt5/qtbase/mkspecs/android-clang-libc \\\n && cd qt5/qtbase/mkspecs/android-clang-libc \\\n && sed -i '16i ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH' qmake.conf \\\n && sed -i '17i ANDROID_SOURCES_CXX_STL_INCDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include' qmake.conf \\\n && echo \"QMAKE_LIBS_PRIVATE = -lc++_shared -llog -lz -lm -ldl -lc -lgcc \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS += -mfpu=vfp4 \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS += -mfpu=vfp4 \" >> qmake.conf\nENV ANDROID_API=\"android-21\"\n#  ANDROID SDK TOOLS\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter platform-tools\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter ${ANDROID_API}\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter build-tools-25.0.1\nENV CLEAN_PATH=\"$JAVA_HOME/bin:/usr/cmake-3.6.3-Linux-x86_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  build Qt\nRUN cd qt5 \\\n && PATH=${CLEAN_PATH} ./configure -developer-build -release -xplatform android-clang-libc -android-ndk-platform ${ANDROID_API} -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -opensource -confirm-license -prefix ${WORKDIR}/Qt-${QT_VERSION} -nomake tests -nomake examples -skip qtserialport -skip qtconnectivity -skip qttranslations -skip qtgamepad -skip qtscript -skip qtdoc\n#   build Qt tools : gnustl_shared.so is hard-coded in androiddeployqt\n#   replace it with libc++_shared.so\nCOPY androiddeployqt.patch qt5/qttools/androiddeployqt.patch\nRUN cd qt5/qttools \\\n && git apply androiddeployqt.patch \\\n && cd .. \\\n && PATH=${CLEAN_PATH} make -j4 \\\n && PATH=${CLEAN_PATH} make install\n#   Get iconv and ZBar\nENV ICONV_VERSION=\"1.14\"\nRUN git clone https://github.com/ZBar/ZBar.git \\\n && curl -s -O http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz \\\n && tar -xzf libiconv-${ICONV_VERSION}.tar.gz \\\n && cd libiconv-${ICONV_VERSION} \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ./configure --build=x86_64-linux-gnu --host=arm-eabi --prefix=${WORKDIR}/libiconv --disable-rpath\nENV PATH=\"$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:${WORKDIR}/Qt-${QT_VERSION}/bin:$PATH\"\n#  Build libiconv.a and libzbarjni.a\nCOPY android.mk.patch ZBar/android.mk.patch\nRUN cd ZBar \\\n && git apply android.mk.patch \\\n && echo \"APP_ABI := armeabi-v7a \\nAPP_STL := c++_shared \\nTARGET_PLATFORM := ${ANDROID_API} \\nTARGET_ARCH_ABI := armeabi-v7a \\nAPP_CFLAGS += -target armv7-none-linux-androideabi -fexceptions -fstack-protector-strong -fno-limit-debug-info -mfloat-abi=softfp -mfpu=vfp -fno-builtin-memmove -fno-omit-frame-pointer -fno-stack-protector\\n\" >> android/jni/Application.mk \\\n && cd android \\\n && android update project --path . -t \"${ANDROID_API}\" \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ant -Dndk.dir=${ANDROID_NDK_ROOT} -Diconv.src=${WORKDIR}/libiconv-${ICONV_VERSION} zbar-clean zbar-ndk-build\nRUN cp openssl/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp boost_${BOOST_VERSION}/android32/lib/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp ZBar/android/obj/local/armeabi-v7a/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN git clone https://github.com/ibpc-dev/bittube-wallet-gui.git \\\n && cd bittube-wallet-gui \\\n && git submodule update \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ BOOST_ROOT=/opt/android/boost_1_62_0 BOOST_LIBRARYDIR=${WORKDIR}/boost_${BOOST_VERSION}/android32/lib/ OPENSSL_ROOT_DIR=${WORKDIR}/openssl/ CMAKE_INCLUDE_PATH=${WORKDIR}/cppzmq/ CMAKE_LIBRARY_PATH=${WORKDIR}/zeromq4-1/.libs CXXFLAGS=\"-I ${WORKDIR}/zeromq4-1/include/\" ./build.sh release-android \\\n && cd build \\\n && make deploy\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM bittube-android\n# INSTALL JAVA\nRUN echo \"deb http://ftp.fr.debian.org/debian/ jessie-backports main contrib non-free\" >> /etc/apt/sources.list\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 libz1:i386 -y \\\n && apt-get install jessie-backports ca-certificates-java openjdk-8-jdk-headless openjdk-8-jre-headless ant -y -t\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n# Get Qt\nENV QT_VERSION=\"5.8\"\nRUN git clone git://code.qt.io/qt/qt5.git -b ${QT_VERSION} \\\n && cd qt5 \\\n && perl init-repository\n# # Note: Need to use libc++ but Qt does not provide mkspec for libc++.\n# # Their support of it is quite recent and they claim they don't use it by default\n# # [only because it produces bigger binary objects](https://bugreports.qt.io/browse/QTBUG-50724).\n# Create new mkspec for clang + libc++\nRUN cp -r qt5/qtbase/mkspecs/android-clang qt5/qtbase/mkspecs/android-clang-libc \\\n && cd qt5/qtbase/mkspecs/android-clang-libc \\\n && sed -i '16i ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH' qmake.conf \\\n && sed -i '17i ANDROID_SOURCES_CXX_STL_INCDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include' qmake.conf \\\n && echo \"QMAKE_LIBS_PRIVATE = -lc++_shared -llog -lz -lm -ldl -lc -lgcc \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS += -mfpu=vfp4 \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS += -mfpu=vfp4 \" >> qmake.conf\nENV ANDROID_API=\"android-21\"\n# ANDROID SDK TOOLS\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter platform-tools\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter ${ANDROID_API}\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter build-tools-25.0.1\nENV CLEAN_PATH=\"$JAVA_HOME/bin:/usr/cmake-3.6.3-Linux-x86_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n# build Qt\nRUN cd qt5 \\\n && PATH=${CLEAN_PATH} ./configure -developer-build -release -xplatform android-clang-libc -android-ndk-platform ${ANDROID_API} -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -opensource -confirm-license -prefix ${WORKDIR}/Qt-${QT_VERSION} -nomake tests -nomake examples -skip qtserialport -skip qtconnectivity -skip qttranslations -skip qtgamepad -skip qtscript -skip qtdoc\n#  build Qt tools : gnustl_shared.so is hard-coded in androiddeployqt\n#  replace it with libc++_shared.so\nCOPY androiddeployqt.patch qt5/qttools/androiddeployqt.patch\nRUN cd qt5/qttools \\\n && git apply androiddeployqt.patch \\\n && cd .. \\\n && PATH=${CLEAN_PATH} make -j4 \\\n && PATH=${CLEAN_PATH} make install\n#  Get iconv and ZBar\nENV ICONV_VERSION=\"1.14\"\nRUN git clone https://github.com/ZBar/ZBar.git \\\n && curl -s -O http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz \\\n && tar -xzf libiconv-${ICONV_VERSION}.tar.gz \\\n && cd libiconv-${ICONV_VERSION} \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ./configure --build=x86_64-linux-gnu --host=arm-eabi --prefix=${WORKDIR}/libiconv --disable-rpath\nENV PATH=\"$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:${WORKDIR}/Qt-${QT_VERSION}/bin:$PATH\"\n# Build libiconv.a and libzbarjni.a\nCOPY android.mk.patch ZBar/android.mk.patch\nRUN cd ZBar \\\n && git apply android.mk.patch \\\n && echo \"APP_ABI := armeabi-v7a \\nAPP_STL := c++_shared \\nTARGET_PLATFORM := ${ANDROID_API} \\nTARGET_ARCH_ABI := armeabi-v7a \\nAPP_CFLAGS += -target armv7-none-linux-androideabi -fexceptions -fstack-protector-strong -fno-limit-debug-info -mfloat-abi=softfp -mfpu=vfp -fno-builtin-memmove -fno-omit-frame-pointer -fno-stack-protector\\n\" >> android/jni/Application.mk \\\n && cd android \\\n && android update project --path . -t \"${ANDROID_API}\" \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ant -Dndk.dir=${ANDROID_NDK_ROOT} -Diconv.src=${WORKDIR}/libiconv-${ICONV_VERSION} zbar-clean zbar-ndk-build\nRUN cp openssl/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp boost_${BOOST_VERSION}/android32/lib/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp ZBar/android/obj/local/armeabi-v7a/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN git clone https://github.com/ibpc-dev/bittube-wallet-gui.git \\\n && cd bittube-wallet-gui \\\n && git submodule update \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ BOOST_ROOT=/opt/android/boost_1_62_0 BOOST_LIBRARYDIR=${WORKDIR}/boost_${BOOST_VERSION}/android32/lib/ OPENSSL_ROOT_DIR=${WORKDIR}/openssl/ CMAKE_INCLUDE_PATH=${WORKDIR}/cppzmq/ CMAKE_LIBRARY_PATH=${WORKDIR}/zeromq4-1/.libs CXXFLAGS=\"-I ${WORKDIR}/zeromq4-1/include/\" ./build.sh release-android \\\n && cd build \\\n && make deploy\n","injectedSmells":[],"originalDockerfileHash":"0ca85cf9ce469ef7939ff1218ed3c29f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM bittube-android\n#  INSTALL JAVA\nRUN echo \"deb http://ftp.fr.debian.org/debian/ jessie-backports main contrib non-free\" >> /etc/apt/sources.list\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 libz1:i386 -y \\\n && apt-get install jessie-backports ca-certificates-java openjdk-8-jdk-headless openjdk-8-jre-headless ant -y -t\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  Get Qt\nENV QT_VERSION=\"5.8\"\nRUN git clone git://code.qt.io/qt/qt5.git -b ${QT_VERSION} \\\n && cd qt5 \\\n && perl init-repository\n#  # Note: Need to use libc++ but Qt does not provide mkspec for libc++.\n#  # Their support of it is quite recent and they claim they don't use it by default\n#  # [only because it produces bigger binary objects](https://bugreports.qt.io/browse/QTBUG-50724).\n#  Create new mkspec for clang + libc++\nRUN cp -r qt5/qtbase/mkspecs/android-clang qt5/qtbase/mkspecs/android-clang-libc \\\n && cd qt5/qtbase/mkspecs/android-clang-libc \\\n && sed -i '16i ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/libs/$$ANDROID_TARGET_ARCH' qmake.conf \\\n && sed -i '17i ANDROID_SOURCES_CXX_STL_INCDIR = $$NDK_ROOT/sources/cxx-stl/llvm-libc++/include' qmake.conf \\\n && echo \"QMAKE_LIBS_PRIVATE = -lc++_shared -llog -lz -lm -ldl -lc -lgcc \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS -= -mfpu=vfp \" >> qmake.conf \\\n && echo \"QMAKE_CFLAGS += -mfpu=vfp4 \" >> qmake.conf \\\n && echo \"QMAKE_CXXFLAGS += -mfpu=vfp4 \" >> qmake.conf\nENV ANDROID_API=\"android-21\"\n#  ANDROID SDK TOOLS\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter platform-tools\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter ${ANDROID_API}\nRUN echo y | $ANDROID_SDK_ROOT/tools/android update sdk --no-ui --all --filter build-tools-25.0.1\nENV CLEAN_PATH=\"$JAVA_HOME/bin:/usr/cmake-3.6.3-Linux-x86_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  build Qt\nRUN cd qt5 \\\n && PATH=${CLEAN_PATH} ./configure -developer-build -release -xplatform android-clang-libc -android-ndk-platform ${ANDROID_API} -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -opensource -confirm-license -prefix ${WORKDIR}/Qt-${QT_VERSION} -nomake tests -nomake examples -skip qtserialport -skip qtconnectivity -skip qttranslations -skip qtgamepad -skip qtscript -skip qtdoc\n#   build Qt tools : gnustl_shared.so is hard-coded in androiddeployqt\n#   replace it with libc++_shared.so\nCOPY androiddeployqt.patch qt5/qttools/androiddeployqt.patch\nRUN cd qt5/qttools \\\n && git apply androiddeployqt.patch \\\n && cd .. \\\n && PATH=${CLEAN_PATH} make -j4 \\\n && PATH=${CLEAN_PATH} make install\n#   Get iconv and ZBar\nENV ICONV_VERSION=\"1.14\"\nRUN git clone https://github.com/ZBar/ZBar.git \\\n && curl -s -O http://ftp.gnu.org/pub/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz \\\n && tar -xzf libiconv-${ICONV_VERSION}.tar.gz \\\n && cd libiconv-${ICONV_VERSION} \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ./configure --build=x86_64-linux-gnu --host=arm-eabi --prefix=${WORKDIR}/libiconv --disable-rpath\nENV PATH=\"$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:${WORKDIR}/Qt-${QT_VERSION}/bin:$PATH\"\n#  Build libiconv.a and libzbarjni.a\nCOPY android.mk.patch ZBar/android.mk.patch\nRUN cd ZBar \\\n && git apply android.mk.patch \\\n && echo \"APP_ABI := armeabi-v7a \\nAPP_STL := c++_shared \\nTARGET_PLATFORM := ${ANDROID_API} \\nTARGET_ARCH_ABI := armeabi-v7a \\nAPP_CFLAGS += -target armv7-none-linux-androideabi -fexceptions -fstack-protector-strong -fno-limit-debug-info -mfloat-abi=softfp -mfpu=vfp -fno-builtin-memmove -fno-omit-frame-pointer -fno-stack-protector\\n\" >> android/jni/Application.mk \\\n && cd android \\\n && android update project --path . -t \"${ANDROID_API}\" \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ ant -Dndk.dir=${ANDROID_NDK_ROOT} -Diconv.src=${WORKDIR}/libiconv-${ICONV_VERSION} zbar-clean zbar-ndk-build\nRUN cp openssl/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp boost_${BOOST_VERSION}/android32/lib/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN cp ZBar/android/obj/local/armeabi-v7a/lib* ${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm/usr/lib\nRUN git clone https://github.com/ibpc-dev/bittube-wallet-gui.git \\\n && cd bittube-wallet-gui \\\n && git submodule update \\\n && CC=arm-linux-androideabi-clang CXX=arm-linux-androideabi-clang++ BOOST_ROOT=/opt/android/boost_1_62_0 BOOST_LIBRARYDIR=${WORKDIR}/boost_${BOOST_VERSION}/android32/lib/ OPENSSL_ROOT_DIR=${WORKDIR}/openssl/ CMAKE_INCLUDE_PATH=${WORKDIR}/cppzmq/ CMAKE_LIBRARY_PATH=${WORKDIR}/zeromq4-1/.libs CXXFLAGS=\"-I ${WORKDIR}/zeromq4-1/include/\" ./build.sh release-android \\\n && cd build \\\n && make deploy\n","originalDockerfileUglifiedHash":"ad5ce0b10755c4f627f2f8d106d9efbe","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bd62ad1847c903bccc9084e78cfc8a753b78ee6b.dockerfile"}