{"seed":3868569301,"processedDockerfileHash":"f711b5b945137f27b2dbb14a5b369798","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   Richie A FUN CMS for Open edX\n#\n#   Nota bene:\n#\n#   this container expects two volumes for statics and media files (that will be\n#   served by nginx):\n#\n#   * /data/media\n#   * /data/static\n#\n#   Once mounted, you will need to collect static files via the eponym django\n#   admin command:\n#\n#       python sandbox/manage.py collectstatic\n#\n#   ---- Base image to inherit from ----\nFROM python:3.7-stretch AS base\n#   ---- Front-end builder image ----\nFROM node:10 AS front-builder\n#   Copy frontend app sources\nCOPY ./src/frontend /builder/src/frontend\nWORKDIR /builder/src/frontend\nRUN yarn install --frozen-lockfile \\\n && yarn build-production \\\n && yarn sass-production\n#   ---- Back-end builder image ----\nFROM base AS back-builder\nWORKDIR /builder\n#   Copy required python dependencies\nCOPY setup.py setup.cfg MANIFEST.in /builder/\nCOPY ./src/richie /builder/src/richie/\n#   Copy distributed application's statics\nCOPY --from=front-builder /builder/src/richie/static/richie/js/*.js /builder/src/richie/static/richie/js/\nCOPY --from=front-builder /builder/src/richie/static/richie/css/main.css /builder/src/richie/static/richie/css/main.css\n#   Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip==23.1 --upgrade\nRUN mkdir /install \\\n && pip install .[sandbox] --prefix=/install\n#   ---- Core application image ----\nFROM base AS core\n#   Install gettext\nRUN apt-get update \\\n && apt-get install --no-install-recommends gettext -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#   Copy runtime-required files\nCOPY ./sandbox /app/sandbox\nCOPY ./docker/files/usr/local/bin/entrypoint /usr/local/bin/entrypoint\n#   Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/richie.py /usr/local/etc/gunicorn/richie.py\n#   Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#   to allow a user belonging to the root group to add new users; typically the\n#   docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#   Un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#   We wrap commands run in this container by the following entrypoint that\n#   creates a user on-the-fly with the container user ID (see USER) and root group\n#   ID.\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\n#   ---- Development image ----\nFROM core AS development\n#   Switch back to the root user to install development dependencies\nUSER root:root\nWORKDIR /app\n#   Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip==23.1 --upgrade\n#   Copy all sources, not only runtime-required files\nCOPY . /app/\n#   Uninstall richie and re-install it in editable mode along with development\n#   dependencies\nRUN pip uninstall -y richie\nRUN pip install -e .[dev]\n#   Install dockerize. It is used to ensure that the database service is accepting\n#   connections before trying to access it from the main application.\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN curl -sL --output dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#   Restore the un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#   Target database host (e.g. database engine following docker-compose services\n#   name) & port\nENV DB_HOST=\"postgresql\" \\\n    DB_PORT=\"5432\"\n#   Run django development server (wrapped by dockerize to ensure the db is ready\n#   to accept connections before running the development server)\nCMD cd sandbox \\\n && dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60s python manage.py runserver 0.0.0.0:8000\n#   ---- Production image ----\nFROM core AS production\nWORKDIR /app/sandbox\n#   The default command runs gunicorn WSGI server in the sandbox\nCMD gunicorn -c /usr/local/etc/gunicorn/richie.py wsgi:application\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Richie A FUN CMS for Open edX\n#\n#  Nota bene:\n#\n#  this container expects two volumes for statics and media files (that will be\n#  served by nginx):\n#\n#  * /data/media\n#  * /data/static\n#\n#  Once mounted, you will need to collect static files via the eponym django\n#  admin command:\n#\n#      python sandbox/manage.py collectstatic\n#\n#  ---- Base image to inherit from ----\nFROM python:3.7-stretch AS base\n#  ---- Front-end builder image ----\nFROM node:10 AS front-builder\n#  Copy frontend app sources\nCOPY ./src/frontend /builder/src/frontend\nWORKDIR /builder/src/frontend\nRUN yarn install --frozen-lockfile \\\n && yarn build-production \\\n && yarn sass-production\n#  ---- Back-end builder image ----\nFROM base AS back-builder\nWORKDIR /builder\n#  Copy required python dependencies\nCOPY setup.py setup.cfg MANIFEST.in /builder/\nCOPY ./src/richie /builder/src/richie/\n#  Copy distributed application's statics\nCOPY --from=front-builder /builder/src/richie/static/richie/js/*.js /builder/src/richie/static/richie/js/\nCOPY --from=front-builder /builder/src/richie/static/richie/css/main.css /builder/src/richie/static/richie/css/main.css\n#  Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip --upgrade\nRUN mkdir /install \\\n && pip install .[sandbox] --prefix=/install\n#  ---- Core application image ----\nFROM base AS core\n#  Install gettext\nRUN apt-get update \\\n && apt-get install gettext -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#  Copy runtime-required files\nCOPY ./sandbox /app/sandbox\nCOPY ./docker/files/usr/local/bin/entrypoint /usr/local/bin/entrypoint\n#  Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/richie.py /usr/local/etc/gunicorn/richie.py\n#  Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#  to allow a user belonging to the root group to add new users; typically the\n#  docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#  Un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#  We wrap commands run in this container by the following entrypoint that\n#  creates a user on-the-fly with the container user ID (see USER) and root group\n#  ID.\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\n#  ---- Development image ----\nFROM core AS development\n#  Switch back to the root user to install development dependencies\nUSER root:root\nWORKDIR /app\n#  Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip --upgrade\n#  Copy all sources, not only runtime-required files\nCOPY . /app/\n#  Uninstall richie and re-install it in editable mode along with development\n#  dependencies\nRUN pip uninstall -y richie\nRUN pip install -e .[dev]\n#  Install dockerize. It is used to ensure that the database service is accepting\n#  connections before trying to access it from the main application.\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN curl -sL --output dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#  Restore the un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#  Target database host (e.g. database engine following docker-compose services\n#  name) & port\nENV DB_HOST=\"postgresql\" \\\n    DB_PORT=\"5432\"\n#  Run django development server (wrapped by dockerize to ensure the db is ready\n#  to accept connections before running the development server)\nCMD cd sandbox \\\n && dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60s python manage.py runserver 0.0.0.0:8000\n#  ---- Production image ----\nFROM core AS production\nWORKDIR /app/sandbox\n#  The default command runs gunicorn WSGI server in the sandbox\nCMD gunicorn -c /usr/local/etc/gunicorn/richie.py wsgi:application\n","injectedSmells":[],"originalDockerfileHash":"b76d19828f55819204069abce695aed5","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Richie A FUN CMS for Open edX\n#\n#   Nota bene:\n#\n#   this container expects two volumes for statics and media files (that will be\n#   served by nginx):\n#\n#   * /data/media\n#   * /data/static\n#\n#   Once mounted, you will need to collect static files via the eponym django\n#   admin command:\n#\n#       python sandbox/manage.py collectstatic\n#\n#   ---- Base image to inherit from ----\nFROM python:3.7-stretch AS base\n#   ---- Front-end builder image ----\nFROM node:10 AS front-builder\n#   Copy frontend app sources\nCOPY ./src/frontend /builder/src/frontend\nWORKDIR /builder/src/frontend\nRUN yarn install --frozen-lockfile \\\n && yarn build-production \\\n && yarn sass-production\n#   ---- Back-end builder image ----\nFROM base AS back-builder\nWORKDIR /builder\n#   Copy required python dependencies\nCOPY setup.py setup.cfg MANIFEST.in /builder/\nCOPY ./src/richie /builder/src/richie/\n#   Copy distributed application's statics\nCOPY --from=front-builder /builder/src/richie/static/richie/js/*.js /builder/src/richie/static/richie/js/\nCOPY --from=front-builder /builder/src/richie/static/richie/css/main.css /builder/src/richie/static/richie/css/main.css\n#   Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip --upgrade\nRUN mkdir /install \\\n && pip install .[sandbox] --prefix=/install\n#   ---- Core application image ----\nFROM base AS core\n#   Install gettext\nRUN apt-get update \\\n && apt-get install gettext -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy installed python dependencies\nCOPY --from=back-builder /install /usr/local\n#   Copy runtime-required files\nCOPY ./sandbox /app/sandbox\nCOPY ./docker/files/usr/local/bin/entrypoint /usr/local/bin/entrypoint\n#   Gunicorn\nRUN mkdir -p /usr/local/etc/gunicorn\nCOPY docker/files/usr/local/etc/gunicorn/richie.py /usr/local/etc/gunicorn/richie.py\n#   Give the \"root\" group the same permissions as the \"root\" user on /etc/passwd\n#   to allow a user belonging to the root group to add new users; typically the\n#   docker user (see entrypoint).\nRUN chmod g=u /etc/passwd\n#   Un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#   We wrap commands run in this container by the following entrypoint that\n#   creates a user on-the-fly with the container user ID (see USER) and root group\n#   ID.\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\n#   ---- Development image ----\nFROM core AS development\n#   Switch back to the root user to install development dependencies\nUSER root:root\nWORKDIR /app\n#   Upgrade pip to its latest release to speed up dependencies installation\nRUN pip install pip --upgrade\n#   Copy all sources, not only runtime-required files\nCOPY . /app/\n#   Uninstall richie and re-install it in editable mode along with development\n#   dependencies\nRUN pip uninstall -y richie\nRUN pip install -e .[dev]\n#   Install dockerize. It is used to ensure that the database service is accepting\n#   connections before trying to access it from the main application.\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN curl -sL --output dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#   Restore the un-privileged user running the application\nARG DOCKER_USER\nUSER ${DOCKER_USER}\n#   Target database host (e.g. database engine following docker-compose services\n#   name) & port\nENV DB_HOST=\"postgresql\" \\\n    DB_PORT=\"5432\"\n#   Run django development server (wrapped by dockerize to ensure the db is ready\n#   to accept connections before running the development server)\nCMD cd sandbox \\\n && dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60s python manage.py runserver 0.0.0.0:8000\n#   ---- Production image ----\nFROM core AS production\nWORKDIR /app/sandbox\n#   The default command runs gunicorn WSGI server in the sandbox\nCMD gunicorn -c /usr/local/etc/gunicorn/richie.py wsgi:application\n","originalDockerfileUglifiedHash":"9e6ab3e6f919429373d01e6d769e72aa","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/88c9c14ebc447950cf0ac945553531ddd8625140.dockerfile"}