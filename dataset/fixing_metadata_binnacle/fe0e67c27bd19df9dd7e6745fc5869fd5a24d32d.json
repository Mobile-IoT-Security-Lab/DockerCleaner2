{"seed":661062251,"processedDockerfileHash":"61eaa053d5d0d6201438735a2ec67fbd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:testing\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo 'path-exclude=/usr/share/doc/*' > /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d\nRUN echo 'exit 101' >> /usr/sbin/policy-rc.d\nRUN chmod +x /usr/sbin/policy-rc.d\n#  ############## Install packages for building\nARG DEBIAN_ARCH\nRUN dpkg --add-architecture ${DEBIAN_ARCH}\nRUN echo deb-src http://deb.debian.org/debian testing main >> /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates -y \\\n && apt-get install --no-install-recommends meson g++ git ccache pkg-config python3-mako python-numpy python-six python-mako python3-pip python3-setuptools python3-six python3-wheel python3-jinja2 bison flex libwayland-dev gettext cmake bc libssl-dev lavacli csvkit curl unzip wget debootstrap procps qemu-user-static cpio crossbuild-essential-${DEBIAN_ARCH} libdrm-dev:${DEBIAN_ARCH} libx11-dev:${DEBIAN_ARCH} libxxf86vm-dev:${DEBIAN_ARCH} libexpat1-dev:${DEBIAN_ARCH} libsensors-dev:${DEBIAN_ARCH} libxfixes-dev:${DEBIAN_ARCH} libxdamage-dev:${DEBIAN_ARCH} libxext-dev:${DEBIAN_ARCH} x11proto-dev:${DEBIAN_ARCH} libx11-xcb-dev:${DEBIAN_ARCH} libxcb-dri2-0-dev:${DEBIAN_ARCH} libxcb-glx0-dev:${DEBIAN_ARCH} libxcb-xfixes0-dev:${DEBIAN_ARCH} libxcb-dri3-dev:${DEBIAN_ARCH} libxcb-present-dev:${DEBIAN_ARCH} libxcb-randr0-dev:${DEBIAN_ARCH} libxcb-sync-dev:${DEBIAN_ARCH} libxrandr-dev:${DEBIAN_ARCH} libxshmfence-dev:${DEBIAN_ARCH} libelf-dev:${DEBIAN_ARCH} libwayland-dev:${DEBIAN_ARCH} libwayland-egl-backend-dev:${DEBIAN_ARCH} libclang-7-dev:${DEBIAN_ARCH} zlib1g-dev:${DEBIAN_ARCH} libglvnd-core-dev:${DEBIAN_ARCH} wayland-protocols:${DEBIAN_ARCH} libpng-dev:${DEBIAN_ARCH} -y \\\n && rm -rf /var/lib/apt/lists\n#  ############## Cross-build dEQP\nARG GCC_ARCH\nRUN mkdir -p /artifacts/rootfs/deqp \\\n && wget https://github.com/KhronosGroup/VK-GL-CTS/archive/opengl-es-cts-3.2.5.0.zip \\\n && unzip -q opengl-es-cts-3.2.5.0.zip -d / \\\n && rm opengl-es-cts-3.2.5.0.zip \\\n && cd /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && python3 external/fetch_sources.py \\\n && cd /artifacts/rootfs/deqp \\\n && cmake -DDEQP_TARGET=wayland -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${GCC_ARCH}-gcc -DCMAKE_CXX_COMPILER=${GCC_ARCH}-g++ /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && make -j$( nproc ;) \\\n && rm -rf /artifacts/rootfs/deqp/external \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles3 \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles31 \\\n && rm -rf /artifacts/rootfs/deqp/modules/internal \\\n && rm -rf /artifacts/rootfs/deqp/executor \\\n && rm -rf /artifacts/rootfs/deqp/execserver \\\n && rm -rf /artifacts/rootfs/deqp/modules/egl \\\n && rm -rf /artifacts/rootfs/deqp/framework \\\n && find . -name CMakeFiles | xargs rm -rf \\\n && find . -name lib*.a | xargs rm -rf \\\n && du -sh * \\\n && rm -rf /VK-GL-CTS-opengl-es-cts-3.2.5.0\n#  ############## Cross-build kernel\nARG KERNEL_ARCH\nARG DEFCONFIG\nARG DEVICE_TREES\nARG KERNEL_IMAGE_NAME\nENV KERNEL_URL=\"https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux/+archive/refs/tags/v5.2-rc2.tar.gz\"\nCOPY ${KERNEL_ARCH}.config /panfrost-ci/\nRUN mkdir -p /kernel \\\n && wget -qO- ${KERNEL_URL} | tar -xvz -C /kernel \\\n && cd /kernel \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" ./scripts/kconfig/merge_config.sh ${DEFCONFIG} /panfrost-ci/${KERNEL_ARCH}.config \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" make -j12 ${KERNEL_IMAGE_NAME} dtbs \\\n && cp arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME} /artifacts/. \\\n && cp ${DEVICE_TREES} /artifacts/. \\\n && rm -rf /kernel\n#  ############## Create rootfs\nCOPY create-rootfs.sh /artifacts/rootfs/\nRUN debootstrap --variant=minbase --arch=${DEBIAN_ARCH} testing /artifacts/rootfs/ http://deb.debian.org/debian \\\n && chroot /artifacts/rootfs sh /create-rootfs.sh \\\n && rm /artifacts/rootfs/create-rootfs.sh\nENTRYPOINT []\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:testing\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo 'path-exclude=/usr/share/doc/*' > /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d\nRUN echo 'exit 101' >> /usr/sbin/policy-rc.d\nRUN chmod +x /usr/sbin/policy-rc.d\n# ############## Install packages for building\nARG DEBIAN_ARCH\nRUN dpkg --add-architecture ${DEBIAN_ARCH}\nRUN echo deb-src http://deb.debian.org/debian testing main >> /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install ca-certificates -y \\\n && apt-get install --no-install-recommends meson g++ git ccache pkg-config python3-mako python-numpy python-six python-mako python3-pip python3-setuptools python3-six python3-wheel python3-jinja2 bison flex libwayland-dev gettext cmake bc libssl-dev lavacli csvkit curl unzip wget debootstrap procps qemu-user-static cpio crossbuild-essential-${DEBIAN_ARCH} libdrm-dev:${DEBIAN_ARCH} libx11-dev:${DEBIAN_ARCH} libxxf86vm-dev:${DEBIAN_ARCH} libexpat1-dev:${DEBIAN_ARCH} libsensors-dev:${DEBIAN_ARCH} libxfixes-dev:${DEBIAN_ARCH} libxdamage-dev:${DEBIAN_ARCH} libxext-dev:${DEBIAN_ARCH} x11proto-dev:${DEBIAN_ARCH} libx11-xcb-dev:${DEBIAN_ARCH} libxcb-dri2-0-dev:${DEBIAN_ARCH} libxcb-glx0-dev:${DEBIAN_ARCH} libxcb-xfixes0-dev:${DEBIAN_ARCH} libxcb-dri3-dev:${DEBIAN_ARCH} libxcb-present-dev:${DEBIAN_ARCH} libxcb-randr0-dev:${DEBIAN_ARCH} libxcb-sync-dev:${DEBIAN_ARCH} libxrandr-dev:${DEBIAN_ARCH} libxshmfence-dev:${DEBIAN_ARCH} libelf-dev:${DEBIAN_ARCH} libwayland-dev:${DEBIAN_ARCH} libwayland-egl-backend-dev:${DEBIAN_ARCH} libclang-7-dev:${DEBIAN_ARCH} zlib1g-dev:${DEBIAN_ARCH} libglvnd-core-dev:${DEBIAN_ARCH} wayland-protocols:${DEBIAN_ARCH} libpng-dev:${DEBIAN_ARCH} -y \\\n && rm -rf /var/lib/apt/lists\n# ############## Cross-build dEQP\nARG GCC_ARCH\nRUN mkdir -p /artifacts/rootfs/deqp \\\n && wget https://github.com/KhronosGroup/VK-GL-CTS/archive/opengl-es-cts-3.2.5.0.zip \\\n && unzip -q opengl-es-cts-3.2.5.0.zip -d / \\\n && rm opengl-es-cts-3.2.5.0.zip \\\n && cd /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && python3 external/fetch_sources.py \\\n && cd /artifacts/rootfs/deqp \\\n && cmake -DDEQP_TARGET=wayland -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${GCC_ARCH}-gcc -DCMAKE_CXX_COMPILER=${GCC_ARCH}-g++ /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && make -j$( nproc ;) \\\n && rm -rf /artifacts/rootfs/deqp/external \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles3 \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles31 \\\n && rm -rf /artifacts/rootfs/deqp/modules/internal \\\n && rm -rf /artifacts/rootfs/deqp/executor \\\n && rm -rf /artifacts/rootfs/deqp/execserver \\\n && rm -rf /artifacts/rootfs/deqp/modules/egl \\\n && rm -rf /artifacts/rootfs/deqp/framework \\\n && find . -name CMakeFiles | xargs rm -rf \\\n && find . -name lib*.a | xargs rm -rf \\\n && du -sh * \\\n && rm -rf /VK-GL-CTS-opengl-es-cts-3.2.5.0\n# ############## Cross-build kernel\nARG KERNEL_ARCH\nARG DEFCONFIG\nARG DEVICE_TREES\nARG KERNEL_IMAGE_NAME\nENV KERNEL_URL=\"https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux/+archive/refs/tags/v5.2-rc2.tar.gz\"\nCOPY ${KERNEL_ARCH}.config /panfrost-ci/\nRUN mkdir -p /kernel \\\n && wget -qO- ${KERNEL_URL} | tar -xvz -C /kernel \\\n && cd /kernel \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" ./scripts/kconfig/merge_config.sh ${DEFCONFIG} /panfrost-ci/${KERNEL_ARCH}.config \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" make -j12 ${KERNEL_IMAGE_NAME} dtbs \\\n && cp arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME} /artifacts/. \\\n && cp ${DEVICE_TREES} /artifacts/. \\\n && rm -rf /kernel\n# ############## Create rootfs\nCOPY create-rootfs.sh /artifacts/rootfs/\nRUN debootstrap --variant=minbase --arch=${DEBIAN_ARCH} testing /artifacts/rootfs/ http://deb.debian.org/debian \\\n && chroot /artifacts/rootfs sh /create-rootfs.sh \\\n && rm /artifacts/rootfs/create-rootfs.sh\nENTRYPOINT []\n","injectedSmells":[],"originalDockerfileHash":"b99a0fa078045bde17f6bcb02767026b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:testing\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo 'path-exclude=/usr/share/doc/*' > /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo 'path-exclude=/usr/share/man/*' >> /etc/dpkg/dpkg.cfg.d/99-exclude-cruft\nRUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d\nRUN echo 'exit 101' >> /usr/sbin/policy-rc.d\nRUN chmod +x /usr/sbin/policy-rc.d\n#  ############## Install packages for building\nARG DEBIAN_ARCH\nRUN dpkg --add-architecture ${DEBIAN_ARCH}\nRUN echo deb-src http://deb.debian.org/debian testing main >> /etc/apt/sources.list\nRUN apt-get update \\\n && apt-get install ca-certificates -y \\\n && apt-get install --no-install-recommends meson g++ git ccache pkg-config python3-mako python-numpy python-six python-mako python3-pip python3-setuptools python3-six python3-wheel python3-jinja2 bison flex libwayland-dev gettext cmake bc libssl-dev lavacli csvkit curl unzip wget debootstrap procps qemu-user-static cpio crossbuild-essential-${DEBIAN_ARCH} libdrm-dev:${DEBIAN_ARCH} libx11-dev:${DEBIAN_ARCH} libxxf86vm-dev:${DEBIAN_ARCH} libexpat1-dev:${DEBIAN_ARCH} libsensors-dev:${DEBIAN_ARCH} libxfixes-dev:${DEBIAN_ARCH} libxdamage-dev:${DEBIAN_ARCH} libxext-dev:${DEBIAN_ARCH} x11proto-dev:${DEBIAN_ARCH} libx11-xcb-dev:${DEBIAN_ARCH} libxcb-dri2-0-dev:${DEBIAN_ARCH} libxcb-glx0-dev:${DEBIAN_ARCH} libxcb-xfixes0-dev:${DEBIAN_ARCH} libxcb-dri3-dev:${DEBIAN_ARCH} libxcb-present-dev:${DEBIAN_ARCH} libxcb-randr0-dev:${DEBIAN_ARCH} libxcb-sync-dev:${DEBIAN_ARCH} libxrandr-dev:${DEBIAN_ARCH} libxshmfence-dev:${DEBIAN_ARCH} libelf-dev:${DEBIAN_ARCH} libwayland-dev:${DEBIAN_ARCH} libwayland-egl-backend-dev:${DEBIAN_ARCH} libclang-7-dev:${DEBIAN_ARCH} zlib1g-dev:${DEBIAN_ARCH} libglvnd-core-dev:${DEBIAN_ARCH} wayland-protocols:${DEBIAN_ARCH} libpng-dev:${DEBIAN_ARCH} -y \\\n && rm -rf /var/lib/apt/lists\n#  ############## Cross-build dEQP\nARG GCC_ARCH\nRUN mkdir -p /artifacts/rootfs/deqp \\\n && wget https://github.com/KhronosGroup/VK-GL-CTS/archive/opengl-es-cts-3.2.5.0.zip \\\n && unzip -q opengl-es-cts-3.2.5.0.zip -d / \\\n && rm opengl-es-cts-3.2.5.0.zip \\\n && cd /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && python3 external/fetch_sources.py \\\n && cd /artifacts/rootfs/deqp \\\n && cmake -DDEQP_TARGET=wayland -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${GCC_ARCH}-gcc -DCMAKE_CXX_COMPILER=${GCC_ARCH}-g++ /VK-GL-CTS-opengl-es-cts-3.2.5.0 \\\n && make -j$( nproc ;) \\\n && rm -rf /artifacts/rootfs/deqp/external \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles3 \\\n && rm -rf /artifacts/rootfs/deqp/modules/gles31 \\\n && rm -rf /artifacts/rootfs/deqp/modules/internal \\\n && rm -rf /artifacts/rootfs/deqp/executor \\\n && rm -rf /artifacts/rootfs/deqp/execserver \\\n && rm -rf /artifacts/rootfs/deqp/modules/egl \\\n && rm -rf /artifacts/rootfs/deqp/framework \\\n && find . -name CMakeFiles | xargs rm -rf \\\n && find . -name lib*.a | xargs rm -rf \\\n && du -sh * \\\n && rm -rf /VK-GL-CTS-opengl-es-cts-3.2.5.0\n#  ############## Cross-build kernel\nARG KERNEL_ARCH\nARG DEFCONFIG\nARG DEVICE_TREES\nARG KERNEL_IMAGE_NAME\nENV KERNEL_URL=\"https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux/+archive/refs/tags/v5.2-rc2.tar.gz\"\nCOPY ${KERNEL_ARCH}.config /panfrost-ci/\nRUN mkdir -p /kernel \\\n && wget -qO- ${KERNEL_URL} | tar -xvz -C /kernel \\\n && cd /kernel \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" ./scripts/kconfig/merge_config.sh ${DEFCONFIG} /panfrost-ci/${KERNEL_ARCH}.config \\\n && ARCH=${KERNEL_ARCH} CROSS_COMPILE=\"${GCC_ARCH}-\" make -j12 ${KERNEL_IMAGE_NAME} dtbs \\\n && cp arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE_NAME} /artifacts/. \\\n && cp ${DEVICE_TREES} /artifacts/. \\\n && rm -rf /kernel\n#  ############## Create rootfs\nCOPY create-rootfs.sh /artifacts/rootfs/\nRUN debootstrap --variant=minbase --arch=${DEBIAN_ARCH} testing /artifacts/rootfs/ http://deb.debian.org/debian \\\n && chroot /artifacts/rootfs sh /create-rootfs.sh \\\n && rm /artifacts/rootfs/create-rootfs.sh\nENTRYPOINT []\n","originalDockerfileUglifiedHash":"eea6db81d6fa42cbc899a1977b034802","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fe0e67c27bd19df9dd7e6745fc5869fd5a24d32d.dockerfile"}