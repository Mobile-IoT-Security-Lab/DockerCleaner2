{"seed":592025423,"processedDockerfileHash":"e77f7814f117b4862879bed9e64e62c8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   We are using wkhtmltopdf to generate PDF files. Unfortunately according to\n#   madnight, compiling wkhtmltopdf from scratch will take hours even with the\n#   largest ec2 instance. So here we take the precompiled binary from the other\n#   image available on Dockerfile - we will get to this in final stage.\n#\n#   Builder stage\nFROM elixir:1.7.3-slim AS builder\nARG PHOENIX_SECRET_KEY_BASE\nARG SESSION_COOKIE_NAME\nARG SESSION_COOKIE_SIGNING_SALT\nARG SESSION_COOKIE_ENCRYPTION_SALT\nARG DATABASE_URL\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG BUCKET_NAME\nARG AWS_DEFAULT_REGION\nARG FRONTEND_CHECKOUT_URL\nARG HOSTED_PAYMENT_URL\nARG SENDGRID_API_KEY\nARG SENDGRID_SENDER_EMAIL\nARG FRONTEND_URL\nARG BACKEND_URL\nARG ELASTIC_HOST\n#   Install essential packages for application build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install --no-install-recommends apt-utils apt-transport-https curl git make inotify-tools gnupg g++ -y \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install --no-install-recommends nodejs yarn -y\nENV MIX_ENV=\"prod\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\" \\\n    ELASTIC_HOST=\"$ELASTIC_HOST\"\nWORKDIR /snitch\n#   Umbrella\nCOPY mix.exs mix.lock ./\nCOPY config config\n#   Apps\nCOPY apps apps\nRUN mix do local.hex --force, local.rebar --force\nRUN mix do deps.get, deps.compile\n#   Create assets build for admin app\nRUN cd apps/admin_app/assets \\\n && yarn install \\\n && yarn deploy \\\n && cd .. \\\n && mix phx.digest\nWORKDIR /snitch\nCOPY rel rel\nRUN mix release --env=prod --verbose\n#  ## Release\nFROM staticfloat/nginx-certbot\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl tar file xz-utils build-essential cron -y \\\n && apt-get install --no-install-recommends python-certbot-nginx -y \\\n && apt-get install --no-install-recommends imagemagick wkhtmltopdf xvfb -y \\\n && printf '#!/bin/bash\\nxvfb-run -a --server-args=\"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf -q $*' > /usr/bin/wkhtmltopdf.sh \\\n && chmod a+x /usr/bin/wkhtmltopdf.sh \\\n && ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf \\\n && apt-get install --no-install-recommends locales -y \\\n && export LANG=en_US.UTF-8 \\\n && echo $LANG UTF-8 > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=$LANG \\\n && apt-get purge -y curl file xz-utils build-essential locales \\\n && apt-get -y autoremove \\\n && apt-get -y clean\nENV MIX_ENV=\"prod\" \\\n    SHELL=\"/bin/bash\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\"\n#   nginx conf\nCOPY config/deploy/conf.d /etc/nginx/conf.d\nCOPY config/deploy/letsencrypt /etc/letsencrypt\nWORKDIR /snitch\nCOPY --from=builder snitch/_build/prod/rel/snitch/releases/0.0.1/snitch.tar.gz .\nRUN tar zxf snitch.tar.gz \\\n && rm snitch.tar.gz\n#   RUN certbot -n --authenticator standalone --installer nginx -d api.aviacommerce.org -d admin.aviacommerce.org --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --agree-tos --email \"hello@aviabird.com\"\nRUN echo \"nginx \\\n && /snitch/bin/snitch foreground\" >> run.sh\nCMD [\"sh\", \"/snitch/run.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  We are using wkhtmltopdf to generate PDF files. Unfortunately according to\n#  madnight, compiling wkhtmltopdf from scratch will take hours even with the\n#  largest ec2 instance. So here we take the precompiled binary from the other\n#  image available on Dockerfile - we will get to this in final stage.\n#\n#  Builder stage\nFROM elixir:1.7.3-slim AS builder\nARG PHOENIX_SECRET_KEY_BASE\nARG SESSION_COOKIE_NAME\nARG SESSION_COOKIE_SIGNING_SALT\nARG SESSION_COOKIE_ENCRYPTION_SALT\nARG DATABASE_URL\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG BUCKET_NAME\nARG AWS_DEFAULT_REGION\nARG FRONTEND_CHECKOUT_URL\nARG HOSTED_PAYMENT_URL\nARG SENDGRID_API_KEY\nARG SENDGRID_SENDER_EMAIL\nARG FRONTEND_URL\nARG BACKEND_URL\nARG ELASTIC_HOST\n#  Install essential packages for application build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install apt-utils apt-transport-https curl git make inotify-tools gnupg g++ -y \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install nodejs yarn -y\nENV MIX_ENV=\"prod\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\" \\\n    ELASTIC_HOST=\"$ELASTIC_HOST\"\nWORKDIR /snitch\n#  Umbrella\nCOPY mix.exs mix.lock ./\nCOPY config config\n#  Apps\nCOPY apps apps\nRUN mix do local.hex --force, local.rebar --force\nRUN mix do deps.get, deps.compile\n#  Create assets build for admin app\nRUN cd apps/admin_app/assets \\\n && yarn install \\\n && yarn deploy \\\n && cd .. \\\n && mix phx.digest\nWORKDIR /snitch\nCOPY rel rel\nRUN mix release --env=prod --verbose\n# ## Release\nFROM staticfloat/nginx-certbot\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install curl tar file xz-utils build-essential cron -y \\\n && apt-get install python-certbot-nginx -y \\\n && apt-get install imagemagick wkhtmltopdf xvfb -y \\\n && printf '#!/bin/bash\\nxvfb-run -a --server-args=\"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf -q $*' > /usr/bin/wkhtmltopdf.sh \\\n && chmod a+x /usr/bin/wkhtmltopdf.sh \\\n && ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf \\\n && apt-get install --no-install-recommends locales -y \\\n && export LANG=en_US.UTF-8 \\\n && echo $LANG UTF-8 > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=$LANG \\\n && apt-get purge -y curl file xz-utils build-essential locales \\\n && apt-get -y autoremove \\\n && apt-get -y clean\nENV MIX_ENV=\"prod\" \\\n    SHELL=\"/bin/bash\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\"\n#  nginx conf\nCOPY config/deploy/conf.d /etc/nginx/conf.d\nCOPY config/deploy/letsencrypt /etc/letsencrypt\nWORKDIR /snitch\nCOPY --from=builder snitch/_build/prod/rel/snitch/releases/0.0.1/snitch.tar.gz .\nRUN tar zxf snitch.tar.gz \\\n && rm snitch.tar.gz\n#  RUN certbot -n --authenticator standalone --installer nginx -d api.aviacommerce.org -d admin.aviacommerce.org --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --agree-tos --email \"hello@aviabird.com\"\nRUN echo \"nginx \\\n && /snitch/bin/snitch foreground\" >> run.sh\nCMD [\"sh\", \"/snitch/run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"5b84808a9ead536341f617e22349974f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   We are using wkhtmltopdf to generate PDF files. Unfortunately according to\n#   madnight, compiling wkhtmltopdf from scratch will take hours even with the\n#   largest ec2 instance. So here we take the precompiled binary from the other\n#   image available on Dockerfile - we will get to this in final stage.\n#\n#   Builder stage\nFROM elixir:1.7.3-slim AS builder\nARG PHOENIX_SECRET_KEY_BASE\nARG SESSION_COOKIE_NAME\nARG SESSION_COOKIE_SIGNING_SALT\nARG SESSION_COOKIE_ENCRYPTION_SALT\nARG DATABASE_URL\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nARG BUCKET_NAME\nARG AWS_DEFAULT_REGION\nARG FRONTEND_CHECKOUT_URL\nARG HOSTED_PAYMENT_URL\nARG SENDGRID_API_KEY\nARG SENDGRID_SENDER_EMAIL\nARG FRONTEND_URL\nARG BACKEND_URL\nARG ELASTIC_HOST\n#   Install essential packages for application build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install apt-utils apt-transport-https curl git make inotify-tools gnupg g++ -y \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install nodejs yarn -y\nENV MIX_ENV=\"prod\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\" \\\n    ELASTIC_HOST=\"$ELASTIC_HOST\"\nWORKDIR /snitch\n#   Umbrella\nCOPY mix.exs mix.lock ./\nCOPY config config\n#   Apps\nCOPY apps apps\nRUN mix do local.hex --force, local.rebar --force\nRUN mix do deps.get, deps.compile\n#   Create assets build for admin app\nRUN cd apps/admin_app/assets \\\n && yarn install \\\n && yarn deploy \\\n && cd .. \\\n && mix phx.digest\nWORKDIR /snitch\nCOPY rel rel\nRUN mix release --env=prod --verbose\n#  ## Release\nFROM staticfloat/nginx-certbot\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install curl tar file xz-utils build-essential cron -y \\\n && apt-get install python-certbot-nginx -y \\\n && apt-get install imagemagick wkhtmltopdf xvfb -y \\\n && printf '#!/bin/bash\\nxvfb-run -a --server-args=\"-screen 0, 1024x768x24\" /usr/bin/wkhtmltopdf -q $*' > /usr/bin/wkhtmltopdf.sh \\\n && chmod a+x /usr/bin/wkhtmltopdf.sh \\\n && ln -s /usr/bin/wkhtmltopdf.sh /usr/local/bin/wkhtmltopdf \\\n && apt-get install --no-install-recommends locales -y \\\n && export LANG=en_US.UTF-8 \\\n && echo $LANG UTF-8 > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=$LANG \\\n && apt-get purge -y curl file xz-utils build-essential locales \\\n && apt-get -y autoremove \\\n && apt-get -y clean\nENV MIX_ENV=\"prod\" \\\n    SHELL=\"/bin/bash\" \\\n    PHOENIX_SECRET_KEY_BASE=\"$PHOENIX_SECRET_KEY_BASE\" \\\n    SESSION_COOKIE_NAME=\"$SESSION_COOKIE_NAME\" \\\n    SESSION_COOKIE_SIGNING_SALT=\"$SESSION_COOKIE_SIGNING_SALT\" \\\n    SESSION_COOKIE_ENCRYPTION_SALT=\"$SESSION_COOKIE_ENCRYPTION_SALT\" \\\n    DATABASE_URL=\"$DATABASE_URL\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\" \\\n    BUCKET_NAME=\"$BUCKET_NAME\" \\\n    AWS_REGION=\"$AWS_DEFAULT_REGION\" \\\n    FRONTEND_CHECKOUT_URL=\"$FRONTEND_CHECKOUT_URL\" \\\n    HOSTED_PAYMENT_URL=\"$HOSTED_PAYMENT_URL\" \\\n    SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" \\\n    SENDGRID_SENDER_EMAIL=\"$SENDGRID_SENDER_EMAIL\" \\\n    FRONTEND_URL=\"$FRONTEND_URL\" \\\n    BACKEND_URL=\"$BACKEND_URL\"\n#   nginx conf\nCOPY config/deploy/conf.d /etc/nginx/conf.d\nCOPY config/deploy/letsencrypt /etc/letsencrypt\nWORKDIR /snitch\nCOPY --from=builder snitch/_build/prod/rel/snitch/releases/0.0.1/snitch.tar.gz .\nRUN tar zxf snitch.tar.gz \\\n && rm snitch.tar.gz\n#   RUN certbot -n --authenticator standalone --installer nginx -d api.aviacommerce.org -d admin.aviacommerce.org --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --agree-tos --email \"hello@aviabird.com\"\nRUN echo \"nginx \\\n && /snitch/bin/snitch foreground\" >> run.sh\nCMD [\"sh\", \"/snitch/run.sh\"]\n","originalDockerfileUglifiedHash":"54152e4dce61ff0bd628d51bfeb3a4d7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/81ba0b8c95b1473499188b68289de0a3140e9c88.dockerfile"}