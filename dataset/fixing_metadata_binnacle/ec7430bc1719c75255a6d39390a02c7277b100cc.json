{"seed":1674279362,"processedDockerfileHash":"9417a4f1c5616968bc070ed9f6f38d49","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#  ##############\n#\n#   Example Apache Yetus Dockerfile that includes all functionality supported\n#   as well as enough bits to build and release Apache Yetus itself.\n#\n#  ##############\nFROM ubuntu:xenial\n#  # NOTE to committers: if this gets moved from Xenial to something else, be\n#  # sure to also fix the gpg link in asf-site-src as appropriate\nWORKDIR /root\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV DEBCONF_TERSE=\"true\"\n#  #####\n#   Install some basic Apache Yetus requirements\n#   some git repos need ssh-client so do it too\n#   Adding libffi-dev for all the programming languages\n#   that take advantage of it.\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends apt-transport-https=1.2.35 ca-certificates=20210119~16.04.1 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libffi-dev=3.2.1-4 locales=2.23-0ubuntu11.3 pkg-config=0.29.1-0ubuntu1 rsync=3.1.1-3ubuntu1.3 software-properties-common=0.96.20.10 ssh-client -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ##\n#   Set the locale\n#  ##\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  ###\n#   Install java (first, since we want to dicate what form of Java)\n#  ###\n#  ###\n#   OpenJDK 8\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless=8u292-b10-0ubuntu1~16.04.1 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#  ###\n#   Install ant\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ant=1.9.6-1ubuntu1.1 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ###\n#   Install GNU automake, GNU make, and related\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends autoconf=2.69-9 automake=1:1.15-4ubuntu1 libtool=2.4.6-0.1 make=4.1-6 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ###\n#   Install bats (TAP-capable unit testing for shell scripts)\n#  ###\nRUN git clone --branch v1.1.0 https://github.com/bats-core/bats-core.git /tmp/bats-core \\\n && /tmp/bats-core/install.sh /usr/local \\\n && rm -rf /tmp/bats-core\n#  ###\n#   Install cmake\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cmake=3.5.1-1ubuntu3 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ##\n#   Install docker\n#  ##\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\nRUN add-apt-repository -y \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\"\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends docker-ce -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install findbugs\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends findbugs=3.0.1-2 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV FINDBUGS_HOME=\"/usr\"\n#  ####\n#   Install SpotBugs\n#  ####\nRUN curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz -o spotbugs.tgz \\\n && curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz.sha1 -o spotbugs.tgz.sha1 \\\n && echo -n \" spotbugs.tgz\" >> spotbugs.tgz.sha1 \\\n && shasum -c spotbugs.tgz.sha1 \\\n && mkdir -p /opt/spotbugs \\\n && tar -C /opt/spotbugs --strip-components 1 -xpf spotbugs.tgz \\\n && rm spotbugs.tgz spotbugs.tgz.sha1\nENV SPOTBUGS_HOME=\"/opt/spotbugs\"\n#  ###\n#   Install GNU C/C++\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends g++=4:5.3.1-1ubuntu1 gcc=4:5.3.1-1ubuntu1 libc-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install maven\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends maven=3.3.9-3 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install perl\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends perl=5.22.1-9ubuntu0.9 libperl-critic-perl=1.126-1 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install python3 and pylint3\n#  #####\nRUN add-apt-repository -y ppa:deadsnakes/ppa\n#   hadolint ignore=DL3008\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python3.7 python3.7-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3.7 get-pip.py \\\n && rm /usr/local/bin/pip\n#   astroid and pylint go hand-in-hand.  Upgrade both at the same time.\n#   hadolint ignore=DL3013\nRUN pip3 install -v astroid==2.2.4 pylint==2.3.1 docker-compose==1.24.0\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint3\n#  #####\n#   Install python, pylint2, and yamllint\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python=2.7.12-1~16.04 python2.7=2.7.12-1ubuntu0~16.04.18 python-pip=8.1.1-2ubuntu0.6 python-pkg-resources=20.7.0-1 python-setuptools=20.7.0-1 python-wheel=0.29.0-1 python-dev=2.7.12-1~16.04 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip2 install -v astroid==1.6.5 pylint==1.9.2 python-dateutil==2.7.3 yamllint==1.12.1\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint2\n#  ####\n#   backward compatibility\n#  ####\nRUN ln -s /usr/local/bin/pylint2 /usr/local/bin/pylint\n#  ###\n#   Install ruby and associated bits\n#  ##\nRUN echo 'gem: --no-rdoc --no-ri' >> /root/.gemrc\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ruby=1:2.3.0+1 ruby-dev=1:2.3.0+1 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN gem install rake --version 12.3.2\nRUN gem install rubocop --version 0.67.2\nRUN gem install bundler --version 1.17.3\n#   set some reasonable defaults for ruby\n#   user's can always override these as needed\nENV PATH=\"${PATH}:/var/tmp/.bundler-gems/bin\"\nENV BUNDLE_PATH=\"/var/tmp/.bundler-gems\"\n#  ###\n#   Install shellcheck (shell script lint)\n#   NOTE: A bunch of stuff is removed to shrink the size of the Docker image\n#   Be very careful changing the code here, layer size may grow very large!\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cabal-install=1.22.6.0-2 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cabal update \\\n && cabal install -j ShellCheck \\\n && cp -p /root/.cabal/bin/shellcheck /usr/local/bin/shellcheck \\\n && apt-get remove -y ghc cabal-install \\\n && apt-get autoremove -y \\\n && rm -rf /root/.cabal\n#  ##\n#   Install hadolint\n#  ###\nRUN curl -L -s -S https://github.com/hadolint/hadolint/releases/download/v1.16.2/hadolint-Linux-x86_64 -o /bin/hadolint \\\n && chmod a+rx /bin/hadolint \\\n && shasum -a 512 /bin/hadolint | awk '$1!=\"7044f2f5a8a9f2a52d9921f34a5cca5fee6a26c1de052f5348d832624976eb760195c65d79a69454f3056359e23b382353977340a7a1ca5c7805b164690c0485\" {exit(1)}'\n#  ##\n#   Install npm and JSHint\n#  ##\n#   hadolint ignore=DL3008\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && npm install jshint@2.10.2 markdownlint-cli@0.15.0 -g\n#  ##\n#   Install golang and supported helpers\n#  ##\n#   hadolint ignore=DL3008\nRUN add-apt-repository -y ppa:longsleep/golang-backports \\\n && apt-get update -q \\\n && apt-get install --no-install-recommends golang-go=2:1.6-1ubuntu4 -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN go get -u github.com/mgechev/revive \\\n && go get -u github.com/mrtazz/checkmake \\\n && (GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.16.0 ) \\\n && (GO111MODULE=on go get github.com/uber/prototool/cmd/prototool@6a473a4f1d86e7c8ff6a844d7dc4f7c3f6207a3f ) \\\n && mv /root/go/bin/* /usr/local/bin \\\n && rm -rf /root/go\n#  ###\n#   YETUS CUT HERE\n#   Anthing after the above line is ignored by Yetus, so could\n#   include other requirements not needed by your development\n#   (but not build) environment\n#  ##\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements.  See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n# ##############\n#\n#  Example Apache Yetus Dockerfile that includes all functionality supported\n#  as well as enough bits to build and release Apache Yetus itself.\n#\n# ##############\nFROM ubuntu:xenial\n# # NOTE to committers: if this gets moved from Xenial to something else, be\n# # sure to also fix the gpg link in asf-site-src as appropriate\nWORKDIR /root\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV DEBCONF_TERSE=\"true\"\n# #####\n#  Install some basic Apache Yetus requirements\n#  some git repos need ssh-client so do it too\n#  Adding libffi-dev for all the programming languages\n#  that take advantage of it.\n# #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl git libffi-dev locales pkg-config rsync software-properties-common ssh-client -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# ##\n#  Set the locale\n# ##\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n# ###\n#  Install java (first, since we want to dicate what form of Java)\n# ###\n# ###\n#  OpenJDK 8\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n# ###\n#  Install ant\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ant -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# ###\n#  Install GNU automake, GNU make, and related\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends autoconf automake libtool make -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# ###\n#  Install bats (TAP-capable unit testing for shell scripts)\n# ###\nRUN git clone --branch v1.1.0 https://github.com/bats-core/bats-core.git /tmp/bats-core \\\n && /tmp/bats-core/install.sh /usr/local \\\n && rm -rf /tmp/bats-core\n# ###\n#  Install cmake\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cmake -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# ##\n#  Install docker\n# ##\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\nRUN add-apt-repository -y \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\"\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends docker-ce -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# #####\n#  Install findbugs\n# #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends findbugs -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV FINDBUGS_HOME=\"/usr\"\n# ####\n#  Install SpotBugs\n# ####\nRUN curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz -o spotbugs.tgz \\\n && curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz.sha1 -o spotbugs.tgz.sha1 \\\n && echo -n \" spotbugs.tgz\" >> spotbugs.tgz.sha1 \\\n && shasum -c spotbugs.tgz.sha1 \\\n && mkdir -p /opt/spotbugs \\\n && tar -C /opt/spotbugs --strip-components 1 -xpf spotbugs.tgz \\\n && rm spotbugs.tgz spotbugs.tgz.sha1\nENV SPOTBUGS_HOME=\"/opt/spotbugs\"\n# ###\n#  Install GNU C/C++\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends g++ gcc libc-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# #####\n#  Install maven\n# #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends maven -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# #####\n#  Install perl\n# #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends perl libperl-critic-perl -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# #####\n#  Install python3 and pylint3\n# #####\nRUN add-apt-repository -y ppa:deadsnakes/ppa\n#  hadolint ignore=DL3008\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python3.7 python3.7-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3.7 get-pip.py \\\n && rm /usr/local/bin/pip\n#  astroid and pylint go hand-in-hand.  Upgrade both at the same time.\n#  hadolint ignore=DL3013\nRUN pip3 install -v astroid==2.2.4 pylint==2.3.1 docker-compose==1.24.0\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint3\n# #####\n#  Install python, pylint2, and yamllint\n# #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python python2.7 python-pip python-pkg-resources python-setuptools python-wheel python-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip2 install -v astroid==1.6.5 pylint==1.9.2 python-dateutil==2.7.3 yamllint==1.12.1\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint2\n# ####\n#  backward compatibility\n# ####\nRUN ln -s /usr/local/bin/pylint2 /usr/local/bin/pylint\n# ###\n#  Install ruby and associated bits\n# ##\nRUN echo 'gem: --no-rdoc --no-ri' >> /root/.gemrc\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ruby ruby-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN gem install rake --version 12.3.2\nRUN gem install rubocop --version 0.67.2\nRUN gem install bundler --version 1.17.3\n#  set some reasonable defaults for ruby\n#  user's can always override these as needed\nENV PATH=\"${PATH}:/var/tmp/.bundler-gems/bin\"\nENV BUNDLE_PATH=\"/var/tmp/.bundler-gems\"\n# ###\n#  Install shellcheck (shell script lint)\n#  NOTE: A bunch of stuff is removed to shrink the size of the Docker image\n#  Be very careful changing the code here, layer size may grow very large!\n# ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cabal-install -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cabal update \\\n && cabal install -j ShellCheck \\\n && cp -p /root/.cabal/bin/shellcheck /usr/local/bin/shellcheck \\\n && apt-get remove -y ghc cabal-install \\\n && apt-get autoremove -y \\\n && rm -rf /root/.cabal\n# ##\n#  Install hadolint\n# ###\nRUN curl -L -s -S https://github.com/hadolint/hadolint/releases/download/v1.16.2/hadolint-Linux-x86_64 -o /bin/hadolint \\\n && chmod a+rx /bin/hadolint \\\n && shasum -a 512 /bin/hadolint | awk '$1!=\"7044f2f5a8a9f2a52d9921f34a5cca5fee6a26c1de052f5348d832624976eb760195c65d79a69454f3056359e23b382353977340a7a1ca5c7805b164690c0485\" {exit(1)}'\n# ##\n#  Install npm and JSHint\n# ##\n#  hadolint ignore=DL3008\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && apt-get install --no-install-recommends nodejs -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && npm install jshint@2.10.2 markdownlint-cli@0.15.0 -g\n# ##\n#  Install golang and supported helpers\n# ##\n#  hadolint ignore=DL3008\nRUN add-apt-repository -y ppa:longsleep/golang-backports \\\n && apt-get update -q \\\n && apt-get install --no-install-recommends golang-go -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN go get -u github.com/mgechev/revive \\\n && go get -u github.com/mrtazz/checkmake \\\n && (GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.16.0 ) \\\n && (GO111MODULE=on go get github.com/uber/prototool/cmd/prototool@6a473a4f1d86e7c8ff6a844d7dc4f7c3f6207a3f ) \\\n && mv /root/go/bin/* /usr/local/bin \\\n && rm -rf /root/go\n# ###\n#  YETUS CUT HERE\n#  Anthing after the above line is ignored by Yetus, so could\n#  include other requirements not needed by your development\n#  (but not build) environment\n# ##\n","injectedSmells":[],"originalDockerfileHash":"e8b7aea089b5f322fbb4b42563cb79c2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#  ##############\n#\n#   Example Apache Yetus Dockerfile that includes all functionality supported\n#   as well as enough bits to build and release Apache Yetus itself.\n#\n#  ##############\nFROM ubuntu:xenial\n#  # NOTE to committers: if this gets moved from Xenial to something else, be\n#  # sure to also fix the gpg link in asf-site-src as appropriate\nWORKDIR /root\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV DEBCONF_TERSE=\"true\"\n#  #####\n#   Install some basic Apache Yetus requirements\n#   some git repos need ssh-client so do it too\n#   Adding libffi-dev for all the programming languages\n#   that take advantage of it.\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl git libffi-dev locales pkg-config rsync software-properties-common ssh-client -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ##\n#   Set the locale\n#  ##\nRUN locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  ###\n#   Install java (first, since we want to dicate what form of Java)\n#  ###\n#  ###\n#   OpenJDK 8\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#  ###\n#   Install ant\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ant -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ###\n#   Install GNU automake, GNU make, and related\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends autoconf automake libtool make -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ###\n#   Install bats (TAP-capable unit testing for shell scripts)\n#  ###\nRUN git clone --branch v1.1.0 https://github.com/bats-core/bats-core.git /tmp/bats-core \\\n && /tmp/bats-core/install.sh /usr/local \\\n && rm -rf /tmp/bats-core\n#  ###\n#   Install cmake\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cmake -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ##\n#   Install docker\n#  ##\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\nRUN add-apt-repository -y \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\"\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends docker-ce -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install findbugs\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends findbugs -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV FINDBUGS_HOME=\"/usr\"\n#  ####\n#   Install SpotBugs\n#  ####\nRUN curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz -o spotbugs.tgz \\\n && curl -fsSL https://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.12/spotbugs-3.1.12.tgz.sha1 -o spotbugs.tgz.sha1 \\\n && echo -n \" spotbugs.tgz\" >> spotbugs.tgz.sha1 \\\n && shasum -c spotbugs.tgz.sha1 \\\n && mkdir -p /opt/spotbugs \\\n && tar -C /opt/spotbugs --strip-components 1 -xpf spotbugs.tgz \\\n && rm spotbugs.tgz spotbugs.tgz.sha1\nENV SPOTBUGS_HOME=\"/opt/spotbugs\"\n#  ###\n#   Install GNU C/C++\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends g++ gcc libc-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install maven\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends maven -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install perl\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends perl libperl-critic-perl -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  #####\n#   Install python3 and pylint3\n#  #####\nRUN add-apt-repository -y ppa:deadsnakes/ppa\n#   hadolint ignore=DL3008\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python3.7 python3.7-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3.7 get-pip.py \\\n && rm /usr/local/bin/pip\n#   astroid and pylint go hand-in-hand.  Upgrade both at the same time.\n#   hadolint ignore=DL3013\nRUN pip3 install -v astroid==2.2.4 pylint==2.3.1 docker-compose==1.24.0\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint3\n#  #####\n#   Install python, pylint2, and yamllint\n#  #####\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends python python2.7 python-pip python-pkg-resources python-setuptools python-wheel python-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip2 install -v astroid==1.6.5 pylint==1.9.2 python-dateutil==2.7.3 yamllint==1.12.1\nRUN mv /usr/local/bin/pylint /usr/local/bin/pylint2\n#  ####\n#   backward compatibility\n#  ####\nRUN ln -s /usr/local/bin/pylint2 /usr/local/bin/pylint\n#  ###\n#   Install ruby and associated bits\n#  ##\nRUN echo 'gem: --no-rdoc --no-ri' >> /root/.gemrc\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends ruby ruby-dev -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN gem install rake --version 12.3.2\nRUN gem install rubocop --version 0.67.2\nRUN gem install bundler --version 1.17.3\n#   set some reasonable defaults for ruby\n#   user's can always override these as needed\nENV PATH=\"${PATH}:/var/tmp/.bundler-gems/bin\"\nENV BUNDLE_PATH=\"/var/tmp/.bundler-gems\"\n#  ###\n#   Install shellcheck (shell script lint)\n#   NOTE: A bunch of stuff is removed to shrink the size of the Docker image\n#   Be very careful changing the code here, layer size may grow very large!\n#  ###\nRUN apt-get update -q \\\n && apt-get install --no-install-recommends cabal-install -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && cabal update \\\n && cabal install -j ShellCheck \\\n && cp -p /root/.cabal/bin/shellcheck /usr/local/bin/shellcheck \\\n && apt-get remove -y ghc cabal-install \\\n && apt-get autoremove -y \\\n && rm -rf /root/.cabal\n#  ##\n#   Install hadolint\n#  ###\nRUN curl -L -s -S https://github.com/hadolint/hadolint/releases/download/v1.16.2/hadolint-Linux-x86_64 -o /bin/hadolint \\\n && chmod a+rx /bin/hadolint \\\n && shasum -a 512 /bin/hadolint | awk '$1!=\"7044f2f5a8a9f2a52d9921f34a5cca5fee6a26c1de052f5348d832624976eb760195c65d79a69454f3056359e23b382353977340a7a1ca5c7805b164690c0485\" {exit(1)}'\n#  ##\n#   Install npm and JSHint\n#  ##\n#   hadolint ignore=DL3008\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash - \\\n && apt-get install --no-install-recommends nodejs -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && npm install jshint@2.10.2 markdownlint-cli@0.15.0 -g\n#  ##\n#   Install golang and supported helpers\n#  ##\n#   hadolint ignore=DL3008\nRUN add-apt-repository -y ppa:longsleep/golang-backports \\\n && apt-get update -q \\\n && apt-get install --no-install-recommends golang-go -q -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN go get -u github.com/mgechev/revive \\\n && go get -u github.com/mrtazz/checkmake \\\n && (GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.16.0 ) \\\n && (GO111MODULE=on go get github.com/uber/prototool/cmd/prototool@6a473a4f1d86e7c8ff6a844d7dc4f7c3f6207a3f ) \\\n && mv /root/go/bin/* /usr/local/bin \\\n && rm -rf /root/go\n#  ###\n#   YETUS CUT HERE\n#   Anthing after the above line is ignored by Yetus, so could\n#   include other requirements not needed by your development\n#   (but not build) environment\n#  ##\n","originalDockerfileUglifiedHash":"9374134372f4c0a956761cbc1464cd3e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ec7430bc1719c75255a6d39390a02c7277b100cc.dockerfile"}