{"seed":2624636941,"processedDockerfileHash":"a761ead6538fcb709f2f7c6be661ac49","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\n#\n#   Env variables for CUDA. Necessary because certain systems don't support nvidia-docker so we should use plain docker as much as possible.\n#\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\nENV LD_LIBRARY_PATH_BUILD=\"/lib64:/usr/local/lib64:/home/$USER/lib/\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_CUDA:$LD_LIBRARY_PATH_BUILD:$LD_LIBRARY_PATH\"\n#\n#   Env variables used by the codebase.\n#\nENV OMP_NUM_THREADS=\"32\"\nENV MKL_NUM_THREADS=\"32\"\nENV VECLIB_MAXIMUM_THREADS=\"32\"\n#\n#   Library versions\n#\nENV MINICONDA_VERSION=\"4.4.10\"\nENV SWIG_VERSION=\"3.0.12\"\nENV PILLOW_VERSION=\"4.2.1\"\nENV GIT_VERSION=\"2.17.0\"\n#\n#   Install necessary libraries and dependencies\n#\nRUN yum install -y epel-release\n#   Setup gcc etc.\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\n#   Git requirements\nRUN yum install -y libcurl-devel zlib-devel asciidoc xmlto wget make autoconf gettext\n#   Compile from source because yum's latest version is 1.8.3\n#   --depth for submodule update which we use was added in 1.8.4\nRUN wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.xz \\\n && tar xf git-${GIT_VERSION}.tar.xz \\\n && cd git-${GIT_VERSION} \\\n && make configure \\\n && ./configure --prefix=/usr \\\n && make all \\\n && make install\n#   H2O4GPU requirements + util programs\nRUN yum install -y ncurses-devel bzip2 which axel cmake3 openssl-devel libpng-devel freetype-devel blas-devel epel-release zeromq-devel openblas-devel \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python \\\n && /opt/h2oai/h2o4gpu/python/bin/conda install -y conda-build six=1.11.0 \\\n && wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\nENV PATH=\"/usr/local/bin:$PATH\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\n#\n#   Symlinks\n#\n#   AR for conda\nRUN ln /usr/bin/ar $LLVM4/bin/`arch `-conda_cos6-linux-gnu-ar\n#   CentOS' yum install cmake has only 2.X so need to install cmake3 and make a symlink\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\n#   Symlinks for Python libs used by SWIG in CMake - it does not recognize Miniconda paths otherwise\nRUN mkdir -p /usr/lib64/ \\\n && ln -sf /opt/h2oai/h2o4gpu/python/lib/libpython* /usr/lib64/ \\\n && mkdir -p /usr/include/python3.6m \\\n && ln -s /opt/h2oai/h2o4gpu/python/include/python3.6m/* /usr/include/python3.6m\n#   Yumming openblas puts some files in a not-so-standard locations\nRUN ln -s /usr/include/openblas/* /usr/local/include/\n#   Symlinks for NVML\nRUN mkdir -p /usr/lib64/nvidia/ \\\n && ln -s /usr/local/cuda-`nvcc --version | tail -n 1 | cut -f 5 -d' ' | cut -f 1 -d ',' `/targets/`arch `-linux/lib/stubs/libnvidia-ml.so /usr/lib64/nvidia/libnvidia-ml.so\n#\n#   Builds from source due to too old versions in yum\n#\nWORKDIR $HOME\n#   SWIG\nRUN wget https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz \\\n && tar -zxvf swig-${SWIG_VERSION}.tar.gz \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --prefix=/usr \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd $HOME \\\n && rm -rf swig-3*\n#   TODO Install DAAL\n#\n#   PPC64 specific - certain libs/whl don't support PPC64LE\n#\n#   Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && yum install -y boost-devel \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DARROW_PYTHON=on \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && ARROW_HOME=/usr/local python setup.py install \\\n && yum install -y libjpeg-devel; fi'\n#   Pillow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then wget https://files.pythonhosted.org/packages/55/aa/f7f983fb72710a9daa4b3374b7c160091d3f94f5c09221f9336ade9027f3/Pillow-${PILLOW_VERSION}.tar.gz \\\n && tar xvf Pillow-${PILLOW_VERSION}.tar.gz \\\n && cd $HOME/Pillow-${PILLOW_VERSION} \\\n && sed -i \"s/'ppc64'/'ppc64le'/g\" setup.py \\\n && python setup.py install \\\n && cd $HOME \\\n && rm -rf Pillow-${PILLOW_VERSION}*; fi'\n#\n#   Install Python requirements\n#\nRUN pip install numpy==1.16.1 scipy==1.2.1 setuptools==39.0.1\nRUN git clone https://github.com/NVIDIA/nccl.git \\\n && cd nccl \\\n && git checkout tags/v2.4.7-1 \\\n && make -j src.build\nCOPY src/interface_py/requirements_buildonly.txt requirements_buildonly.txt\nCOPY src/interface_py/requirements_runtime.txt requirements_runtime.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN pip install -r requirements_buildonly.txt\nRUN pip install -r requirements_runtime.txt\nRUN pip install -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\n#   See https://github.com/Microsoft/LightGBM/wiki/Installation-Guide#with-gpu-support for details\n#   https://github.com/Microsoft/LightGBM/pull/929/files\n#   Could compile with these as well: -DBOOST_COMPUTE_USE_OFFLINE_CACHE=OFF -DBOOST_COMPUTE_THREAD_SAFE=ON\nRUN export CUDA_HOME=/usr/local/cuda/ \\\n && yum install -y opencl-headers icu libicu-devel bzip2 bzip2-devel zlib-devel python-devel \\\n && wget https://s3.amazonaws.com/0xdata-public/boost/boost_1_69_0.tar.bz2 \\\n && tar xjf boost_1_69_0.tar.bz2 \\\n && cd boost_1_69_0 \\\n && export PYTHONPATH=/opt/h2oai/h2o4gpu/python/ \\\n && ./bootstrap.sh --prefix=/opt/boost/ --with-python=python3 \\\n && export CPPFLAGS=\"-I/opt/h2oai/h2o4gpu/python/include/python3.6m/ -fPIC\" \\\n && export C_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" ; export CPLUS_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && ./b2 link=static -a -d0 install --prefix=/opt/boost/ --with=all -j 20 cxxflags=\"-fPIC -I /opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && cd /usr/include ; rm -rf boost ; ln -s /opt/boost/include/boost . \\\n && cd /usr/lib64/ ; rm -rf libboost* ; cp -a /opt/boost/lib/* . \\\n && cd /\n#  \tyum install -y boost boost-devel boost-system boost-filesystem boost-thread\nENV LD_LIBRARY_PATH=\"/opt/boost/lib/:$LD_LIBRARY_PATH\"\nRUN chmod -R o+rwx /opt/h2oai/h2o4gpu/python\nRUN chmod -R o+rwx /root\nRUN yum install -y hdf5-devel\nRUN bash -c 'if [ `arch` == \"ppc64le\" ]; then yum install -y ocl-icd; fi'\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/nvidia\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-9.2\"\nWORKDIR $HOME\nENV GIT_AUTHOR_NAME=\"anonymous\"\nENV GIT_AUTHOR_EMAIL=\"anonymous@h2o.ai\"\nENV GIT_COMMITTER_NAME=\"anonymous\"\nENV GIT_COMMITTER_EMAIL=\"anonymous@h2o.ai\"\nENV EMAIL=\"anonymous@h2o.ai\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\n#\n#  Env variables for CUDA. Necessary because certain systems don't support nvidia-docker so we should use plain docker as much as possible.\n#\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\nENV LD_LIBRARY_PATH_BUILD=\"/lib64:/usr/local/lib64:/home/$USER/lib/\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_CUDA:$LD_LIBRARY_PATH_BUILD:$LD_LIBRARY_PATH\"\n#\n#  Env variables used by the codebase.\n#\nENV OMP_NUM_THREADS=\"32\"\nENV MKL_NUM_THREADS=\"32\"\nENV VECLIB_MAXIMUM_THREADS=\"32\"\n#\n#  Library versions\n#\nENV MINICONDA_VERSION=\"4.4.10\"\nENV SWIG_VERSION=\"3.0.12\"\nENV PILLOW_VERSION=\"4.2.1\"\nENV GIT_VERSION=\"2.17.0\"\n#\n#  Install necessary libraries and dependencies\n#\nRUN yum install -y epel-release\n#  Setup gcc etc.\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\n#  Git requirements\nRUN yum install -y libcurl-devel zlib-devel asciidoc xmlto wget make autoconf gettext\n#  Compile from source because yum's latest version is 1.8.3\n#  --depth for submodule update which we use was added in 1.8.4\nRUN wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.xz \\\n && tar xf git-${GIT_VERSION}.tar.xz \\\n && cd git-${GIT_VERSION} \\\n && make configure \\\n && ./configure --prefix=/usr \\\n && make all \\\n && make install\n#  H2O4GPU requirements + util programs\nRUN yum install -y ncurses-devel bzip2 which axel cmake3 openssl-devel libpng-devel freetype-devel blas-devel epel-release zeromq-devel openblas-devel \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python \\\n && /opt/h2oai/h2o4gpu/python/bin/conda install -y conda-build six=1.11.0 \\\n && wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\nENV PATH=\"/usr/local/bin:$PATH\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\n#\n#  Symlinks\n#\n#  AR for conda\nRUN ln /usr/bin/ar $LLVM4/bin/`arch `-conda_cos6-linux-gnu-ar\n#  CentOS' yum install cmake has only 2.X so need to install cmake3 and make a symlink\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\n#  Symlinks for Python libs used by SWIG in CMake - it does not recognize Miniconda paths otherwise\nRUN mkdir -p /usr/lib64/ \\\n && ln -sf /opt/h2oai/h2o4gpu/python/lib/libpython* /usr/lib64/ \\\n && mkdir -p /usr/include/python3.6m \\\n && ln -s /opt/h2oai/h2o4gpu/python/include/python3.6m/* /usr/include/python3.6m\n#  Yumming openblas puts some files in a not-so-standard locations\nRUN ln -s /usr/include/openblas/* /usr/local/include/\n#  Symlinks for NVML\nRUN mkdir -p /usr/lib64/nvidia/ \\\n && ln -s /usr/local/cuda-`nvcc --version | tail -n 1 | cut -f 5 -d' ' | cut -f 1 -d ',' `/targets/`arch `-linux/lib/stubs/libnvidia-ml.so /usr/lib64/nvidia/libnvidia-ml.so\n#\n#  Builds from source due to too old versions in yum\n#\nWORKDIR $HOME\n#  SWIG\nRUN wget https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz \\\n && tar -zxvf swig-${SWIG_VERSION}.tar.gz \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --prefix=/usr \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd $HOME \\\n && rm -rf swig-3*\n#  TODO Install DAAL\n#\n#  PPC64 specific - certain libs/whl don't support PPC64LE\n#\n#  Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && yum install -y boost-devel \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DARROW_PYTHON=on \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && ARROW_HOME=/usr/local python setup.py install \\\n && yum install -y libjpeg-devel; fi'\n#  Pillow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then wget https://files.pythonhosted.org/packages/55/aa/f7f983fb72710a9daa4b3374b7c160091d3f94f5c09221f9336ade9027f3/Pillow-${PILLOW_VERSION}.tar.gz \\\n && tar xvf Pillow-${PILLOW_VERSION}.tar.gz \\\n && cd $HOME/Pillow-${PILLOW_VERSION} \\\n && sed -i \"s/'ppc64'/'ppc64le'/g\" setup.py \\\n && python setup.py install \\\n && cd $HOME \\\n && rm -rf Pillow-${PILLOW_VERSION}*; fi'\n#\n#  Install Python requirements\n#\nRUN pip install numpy==1.16.1 scipy==1.2.1 setuptools==39.0.1\nRUN git clone https://github.com/NVIDIA/nccl.git \\\n && cd nccl \\\n && git checkout tags/v2.4.7-1 \\\n && make -j src.build\nCOPY src/interface_py/requirements_buildonly.txt requirements_buildonly.txt\nCOPY src/interface_py/requirements_runtime.txt requirements_runtime.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN pip install -r requirements_buildonly.txt\nRUN pip install -r requirements_runtime.txt\nRUN pip install -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\n#  See https://github.com/Microsoft/LightGBM/wiki/Installation-Guide#with-gpu-support for details\n#  https://github.com/Microsoft/LightGBM/pull/929/files\n#  Could compile with these as well: -DBOOST_COMPUTE_USE_OFFLINE_CACHE=OFF -DBOOST_COMPUTE_THREAD_SAFE=ON\nRUN export CUDA_HOME=/usr/local/cuda/ \\\n && yum install -y opencl-headers icu libicu-devel bzip2 bzip2-devel zlib-devel python-devel \\\n && wget https://s3.amazonaws.com/0xdata-public/boost/boost_1_69_0.tar.bz2 \\\n && tar xjf boost_1_69_0.tar.bz2 \\\n && cd boost_1_69_0 \\\n && export PYTHONPATH=/opt/h2oai/h2o4gpu/python/ \\\n && ./bootstrap.sh --prefix=/opt/boost/ --with-python=python3 \\\n && export CPPFLAGS=\"-I/opt/h2oai/h2o4gpu/python/include/python3.6m/ -fPIC\" \\\n && export C_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" ; export CPLUS_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && ./b2 link=static -a -d0 install --prefix=/opt/boost/ --with=all -j 20 cxxflags=\"-fPIC -I /opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && cd /usr/include ; rm -rf boost ; ln -s /opt/boost/include/boost . \\\n && cd /usr/lib64/ ; rm -rf libboost* ; cp -a /opt/boost/lib/* . \\\n && cd /\n# \tyum install -y boost boost-devel boost-system boost-filesystem boost-thread\nENV LD_LIBRARY_PATH=\"/opt/boost/lib/:$LD_LIBRARY_PATH\"\nRUN chmod -R o+rwx /opt/h2oai/h2o4gpu/python\nRUN chmod -R o+rwx /root\nRUN yum install -y hdf5-devel\nRUN bash -c 'if [ `arch` == \"ppc64le\" ]; then yum install -y ocl-icd; fi'\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/nvidia\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-9.2\"\nWORKDIR $HOME\nENV GIT_AUTHOR_NAME=\"anonymous\"\nENV GIT_AUTHOR_EMAIL=\"anonymous@h2o.ai\"\nENV GIT_COMMITTER_NAME=\"anonymous\"\nENV GIT_COMMITTER_EMAIL=\"anonymous@h2o.ai\"\nENV EMAIL=\"anonymous@h2o.ai\"\n","injectedSmells":[],"originalDockerfileHash":"205a6c911b97052c5f58478a9c70c80d","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG docker_name\nFROM $docker_name\nMAINTAINER H2o.ai <ops@h2o.ai>\n#\n#   Env variables for CUDA. Necessary because certain systems don't support nvidia-docker so we should use plain docker as much as possible.\n#\nENV HOME=\"/root\"\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV CUDADIR=\"/usr/local/cuda/include/\"\nENV PATH=\"/usr/local/cuda/bin:$PATH\"\nENV LD_LIBRARY_PATH_CUDA=\"$CUDA_HOME/lib64/:$CUDA_HOME/lib/:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\nENV LD_LIBRARY_PATH_BUILD=\"/lib64:/usr/local/lib64:/home/$USER/lib/\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH_CUDA:$LD_LIBRARY_PATH_BUILD:$LD_LIBRARY_PATH\"\n#\n#   Env variables used by the codebase.\n#\nENV OMP_NUM_THREADS=\"32\"\nENV MKL_NUM_THREADS=\"32\"\nENV VECLIB_MAXIMUM_THREADS=\"32\"\n#\n#   Library versions\n#\nENV MINICONDA_VERSION=\"4.4.10\"\nENV SWIG_VERSION=\"3.0.12\"\nENV PILLOW_VERSION=\"4.2.1\"\nENV GIT_VERSION=\"2.17.0\"\n#\n#   Install necessary libraries and dependencies\n#\nRUN yum install -y epel-release\n#   Setup gcc etc.\nRUN yum install -y gcc gcc-c++ libgcc libstdc++ libgomp glibc\n#   Git requirements\nRUN yum install -y libcurl-devel zlib-devel asciidoc xmlto wget make autoconf gettext\n#   Compile from source because yum's latest version is 1.8.3\n#   --depth for submodule update which we use was added in 1.8.4\nRUN wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.xz \\\n && tar xf git-${GIT_VERSION}.tar.xz \\\n && cd git-${GIT_VERSION} \\\n && make configure \\\n && ./configure --prefix=/usr \\\n && make all \\\n && make install\n#   H2O4GPU requirements + util programs\nRUN yum install -y ncurses-devel bzip2 which axel cmake3 openssl-devel libpng-devel freetype-devel blas-devel epel-release zeromq-devel openblas-devel \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh \\\n && bash Miniconda3-${MINICONDA_VERSION}-Linux-`arch `.sh -b -p /opt/h2oai/h2o4gpu/python \\\n && /opt/h2oai/h2o4gpu/python/bin/conda install -y conda-build six=1.11.0 \\\n && wget https://s3.amazonaws.com/artifacts.h2o.ai/releases/ai/h2o/dai-thirdparty-deps/1.0-master-2/`arch `-centos7/llvm.tar.bz2 \\\n && tar xvf llvm.tar.bz2 \\\n && cp -r llvm/* /opt/h2oai/h2o4gpu/ \\\n && rm -rf llvm*\nENV LLVM4=\"/opt/h2oai/h2o4gpu\"\nENV PATH=\"/opt/h2oai/h2o4gpu/python/bin:$PATH\"\nENV PATH=\"/usr/local/bin:$PATH\"\nENV PATH=\"$LLVM4/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"$LLVM4/lib:$LD_LIBRARY_PATH\"\n#\n#   Symlinks\n#\n#   AR for conda\nRUN ln /usr/bin/ar $LLVM4/bin/`arch `-conda_cos6-linux-gnu-ar\n#   CentOS' yum install cmake has only 2.X so need to install cmake3 and make a symlink\nRUN ln -s /usr/bin/cmake3 /usr/bin/cmake\n#   Symlinks for Python libs used by SWIG in CMake - it does not recognize Miniconda paths otherwise\nRUN mkdir -p /usr/lib64/ \\\n && ln -sf /opt/h2oai/h2o4gpu/python/lib/libpython* /usr/lib64/ \\\n && mkdir -p /usr/include/python3.6m \\\n && ln -s /opt/h2oai/h2o4gpu/python/include/python3.6m/* /usr/include/python3.6m\n#   Yumming openblas puts some files in a not-so-standard locations\nRUN ln -s /usr/include/openblas/* /usr/local/include/\n#   Symlinks for NVML\nRUN mkdir -p /usr/lib64/nvidia/ \\\n && ln -s /usr/local/cuda-`nvcc --version | tail -n 1 | cut -f 5 -d' ' | cut -f 1 -d ',' `/targets/`arch `-linux/lib/stubs/libnvidia-ml.so /usr/lib64/nvidia/libnvidia-ml.so\n#\n#   Builds from source due to too old versions in yum\n#\nWORKDIR $HOME\n#   SWIG\nRUN wget https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz \\\n && tar -zxvf swig-${SWIG_VERSION}.tar.gz \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --prefix=/usr \\\n && make -j $( nproc ;) \\\n && make install \\\n && cd $HOME \\\n && rm -rf swig-3*\n#   TODO Install DAAL\n#\n#   PPC64 specific - certain libs/whl don't support PPC64LE\n#\n#   Arrow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then git clone https://github.com/apache/arrow.git \\\n && cd $HOME/arrow/cpp \\\n && git checkout tags/apache-arrow-0.12.0 \\\n && yum install -y boost-devel \\\n && pip install numpy==1.16.1 cython==0.29.3 \\\n && cmake -DARROW_CXXFLAGS=\"-lutil\" -DARROW_PYTHON=on \\\n && make -j \\\n && make install \\\n && cd $HOME/arrow/python \\\n && ARROW_HOME=/usr/local python setup.py install \\\n && yum install -y libjpeg-devel; fi'\n#   Pillow\nRUN bash -c 'if [ `arch` = \"ppc64le\" ]; then wget https://files.pythonhosted.org/packages/55/aa/f7f983fb72710a9daa4b3374b7c160091d3f94f5c09221f9336ade9027f3/Pillow-${PILLOW_VERSION}.tar.gz \\\n && tar xvf Pillow-${PILLOW_VERSION}.tar.gz \\\n && cd $HOME/Pillow-${PILLOW_VERSION} \\\n && sed -i \"s/'ppc64'/'ppc64le'/g\" setup.py \\\n && python setup.py install \\\n && cd $HOME \\\n && rm -rf Pillow-${PILLOW_VERSION}*; fi'\n#\n#   Install Python requirements\n#\nRUN pip install numpy==1.16.1 scipy==1.2.1 setuptools==39.0.1\nRUN git clone https://github.com/NVIDIA/nccl.git \\\n && cd nccl \\\n && git checkout tags/v2.4.7-1 \\\n && make -j src.build\nCOPY src/interface_py/requirements_buildonly.txt requirements_buildonly.txt\nCOPY src/interface_py/requirements_runtime.txt requirements_runtime.txt\nCOPY src/interface_py/requirements_runtime_demos.txt requirements_runtime_demos.txt\nRUN pip install -r requirements_buildonly.txt\nRUN pip install -r requirements_runtime.txt\nRUN pip install -r requirements_runtime_demos.txt\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\nRUN (localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true )\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\n#   See https://github.com/Microsoft/LightGBM/wiki/Installation-Guide#with-gpu-support for details\n#   https://github.com/Microsoft/LightGBM/pull/929/files\n#   Could compile with these as well: -DBOOST_COMPUTE_USE_OFFLINE_CACHE=OFF -DBOOST_COMPUTE_THREAD_SAFE=ON\nRUN export CUDA_HOME=/usr/local/cuda/ \\\n && yum install -y opencl-headers icu libicu-devel bzip2 bzip2-devel zlib-devel python-devel \\\n && wget https://s3.amazonaws.com/0xdata-public/boost/boost_1_69_0.tar.bz2 \\\n && tar xjf boost_1_69_0.tar.bz2 \\\n && cd boost_1_69_0 \\\n && export PYTHONPATH=/opt/h2oai/h2o4gpu/python/ \\\n && ./bootstrap.sh --prefix=/opt/boost/ --with-python=python3 \\\n && export CPPFLAGS=\"-I/opt/h2oai/h2o4gpu/python/include/python3.6m/ -fPIC\" \\\n && export C_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" ; export CPLUS_INCLUDE_PATH=\"/opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && ./b2 link=static -a -d0 install --prefix=/opt/boost/ --with=all -j 20 cxxflags=\"-fPIC -I /opt/h2oai/h2o4gpu/python/include/python3.6m/\" \\\n && cd /usr/include ; rm -rf boost ; ln -s /opt/boost/include/boost . \\\n && cd /usr/lib64/ ; rm -rf libboost* ; cp -a /opt/boost/lib/* . \\\n && cd /\n#  \tyum install -y boost boost-devel boost-system boost-filesystem boost-thread\nENV LD_LIBRARY_PATH=\"/opt/boost/lib/:$LD_LIBRARY_PATH\"\nRUN chmod -R o+rwx /opt/h2oai/h2o4gpu/python\nRUN chmod -R o+rwx /root\nRUN yum install -y hdf5-devel\nRUN bash -c 'if [ `arch` == \"ppc64le\" ]; then yum install -y ocl-icd; fi'\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/nvidia\"\nENV CUDA_TOOLKIT_ROOT_DIR=\"/usr/local/cuda-9.2\"\nWORKDIR $HOME\nENV GIT_AUTHOR_NAME=\"anonymous\"\nENV GIT_AUTHOR_EMAIL=\"anonymous@h2o.ai\"\nENV GIT_COMMITTER_NAME=\"anonymous\"\nENV GIT_COMMITTER_EMAIL=\"anonymous@h2o.ai\"\nENV EMAIL=\"anonymous@h2o.ai\"\n","originalDockerfileUglifiedHash":"60283761cc6f6897a9505a8917b85f3e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/77c41a288da3100e2831b629e58ad1975f7ba815.dockerfile"}