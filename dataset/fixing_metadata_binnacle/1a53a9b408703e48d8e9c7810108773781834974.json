{"seed":2814412641,"processedDockerfileHash":"a27474f90e92c245d870c1fb8b96bc20","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG PYTHON_VERSION\nFROM python:$PYTHON_VERSION\n#   install node\nRUN apt-get update ; curl -sL https://deb.nodesource.com/setup_11.x | bash - ; apt-get install --no-install-recommends nodejs -y\n#   install rsync\nRUN apt-get install --no-install-recommends rsync -y\n#   install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - ; echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list ; apt-get update \\\n && apt-get install --no-install-recommends yarn\n#   install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose ; chmod +x /usr/local/bin/docker-compose\n#   install docker\nRUN apt-get install --no-install-recommends apt-transport-https ca-certificates curl gnupg2 software-properties-common -y ; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $( lsb_release -cs ;) stable\" ; apt-get update ; apt-get install --no-install-recommends docker-ce -y\n#   install java\n#   We need to use java 8 because https://stackoverflow.com/questions/53583199/pyspark-error-unsupported-class-file-major-version-55\n#  #################################################################################################\n#   https://github.com/docker-library/openjdk/blob/c3023e4da10d10e9c9775eabe2d7baac146e7ae1/8/jdk/slim/Dockerfile\n#   A few reasons for installing distribution-provided OpenJDK:\n#\n#    1. Oracle.  Licensing prevents us from redistributing the official JDK.\n#\n#    2. Compiling OpenJDK also requires the JDK to be installed, and it gets\n#       really hairy.\n#\n#       For some sample build times, see Debian's buildd logs:\n#         https://buildd.debian.org/status/logs.php?pkg=openjdk-8\nRUN apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#   add a simple script that can auto-detect the appropriate JAVA_HOME value\n#   based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#   do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\n#   Updated from base image\nENV JAVA_VERSION=\"8u212\"\nENV JAVA_DEBIAN_VERSION=\"8u212-b01-1~deb9u1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install --no-install-recommends openjdk-8-jre-headless=\"$JAVA_DEBIAN_VERSION\" -y ; apt-get install --no-install-recommends openjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n#  #################################################################################################\n#   Install sbt\nARG SBT_VERSION=1.2.8\nRUN curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb \\\n && dpkg -i sbt-$SBT_VERSION.deb \\\n && rm sbt-$SBT_VERSION.deb \\\n && apt-get update \\\n && apt-get install --no-install-recommends sbt \\\n && sbt sbtVersion\n#  #################################################################################################\n#\n#   pip install all the downstream deps to speed up our CI jobs\n#\n#   to update (from root):\n#\n#   create a new virtual env\n#   make install_dev_python_modules\n#   pip freeze --exclude-editable > .buildkite/images/integration/snapshot-reqs.txt\nRUN pip install pyspark==2.4.0 --no-cache-dir\n#   This instigates some package downloads required by the airline-demo\nCOPY trigger_maven.py .\nRUN python trigger_maven.py\n#   Pre-load jars for scala_modules by running a compile\nCOPY scala_modules scala_modules\nRUN cd scala_modules \\\n && make compile\n#   Postgres (libpq) required for the airline demo\nRUN pip install tox==4.4.12\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpq-dev -y\nARG PYTHON_MAJOR_VERSION\n#   These are at the bottom and because they are the most likely\n#   to change frequently\nCOPY snapshot-reqs-$PYTHON_MAJOR_VERSION.txt /tmp/snapshot-reqs.txt\nRUN pip install pip==23.1 --upgrade ; pip install -r /tmp/snapshot-reqs.txt\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG PYTHON_VERSION\nFROM python:$PYTHON_VERSION\n#  install node\nRUN apt-get update ; curl -sL https://deb.nodesource.com/setup_11.x | bash - ; apt-get install nodejs -y\n#  install rsync\nRUN apt-get install rsync -y\n#  install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - ; echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list ; apt-get update \\\n && apt-get install yarn\n#  install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose ; chmod +x /usr/local/bin/docker-compose\n#  install docker\nRUN apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y ; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $( lsb_release -cs ;) stable\" ; apt-get update ; apt-get install docker-ce -y\n#  install java\n#  We need to use java 8 because https://stackoverflow.com/questions/53583199/pyspark-error-unsupported-class-file-major-version-55\n# #################################################################################################\n#  https://github.com/docker-library/openjdk/blob/c3023e4da10d10e9c9775eabe2d7baac146e7ae1/8/jdk/slim/Dockerfile\n#  A few reasons for installing distribution-provided OpenJDK:\n#\n#   1. Oracle.  Licensing prevents us from redistributing the official JDK.\n#\n#   2. Compiling OpenJDK also requires the JDK to be installed, and it gets\n#      really hairy.\n#\n#      For some sample build times, see Debian's buildd logs:\n#        https://buildd.debian.org/status/logs.php?pkg=openjdk-8\nRUN apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#  add a simple script that can auto-detect the appropriate JAVA_HOME value\n#  based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#  do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\n#  Updated from base image\nENV JAVA_VERSION=\"8u212\"\nENV JAVA_DEBIAN_VERSION=\"8u212-b01-1~deb9u1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install openjdk-8-jre-headless=\"$JAVA_DEBIAN_VERSION\" -y ; apt-get install openjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n# #################################################################################################\n#  Install sbt\nARG SBT_VERSION=1.2.8\nRUN curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb \\\n && dpkg -i sbt-$SBT_VERSION.deb \\\n && rm sbt-$SBT_VERSION.deb \\\n && apt-get update \\\n && apt-get install sbt \\\n && sbt sbtVersion\n# #################################################################################################\n#\n#  pip install all the downstream deps to speed up our CI jobs\n#\n#  to update (from root):\n#\n#  create a new virtual env\n#  make install_dev_python_modules\n#  pip freeze --exclude-editable > .buildkite/images/integration/snapshot-reqs.txt\nRUN pip install pyspark==2.4.0 --no-cache-dir\n#  This instigates some package downloads required by the airline-demo\nADD trigger_maven.py .\nRUN python trigger_maven.py\n#  Pre-load jars for scala_modules by running a compile\nADD scala_modules scala_modules\nRUN cd scala_modules \\\n && make compile\n#  Postgres (libpq) required for the airline demo\nRUN pip install tox\nRUN apt-get update \\\n && apt-get install libpq-dev -y\nARG PYTHON_MAJOR_VERSION\n#  These are at the bottom and because they are the most likely\n#  to change frequently\nADD snapshot-reqs-$PYTHON_MAJOR_VERSION.txt /tmp/snapshot-reqs.txt\nRUN pip install pip --upgrade ; pip install -r /tmp/snapshot-reqs.txt\n","injectedSmells":[],"originalDockerfileHash":"437d49f545a75ccf998001fba7c08761","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG PYTHON_VERSION\nFROM python:$PYTHON_VERSION\n#   install node\nRUN apt-get update ; curl -sL https://deb.nodesource.com/setup_11.x | bash - ; apt-get install nodejs -y\n#   install rsync\nRUN apt-get install rsync -y\n#   install yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - ; echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list ; apt-get update \\\n && apt-get install yarn\n#   install docker-compose\nRUN curl -L \"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$( uname -s ;)-$( uname -m ;)\" -o /usr/local/bin/docker-compose ; chmod +x /usr/local/bin/docker-compose\n#   install docker\nRUN apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y ; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $( lsb_release -cs ;) stable\" ; apt-get update ; apt-get install docker-ce -y\n#   install java\n#   We need to use java 8 because https://stackoverflow.com/questions/53583199/pyspark-error-unsupported-class-file-major-version-55\n#  #################################################################################################\n#   https://github.com/docker-library/openjdk/blob/c3023e4da10d10e9c9775eabe2d7baac146e7ae1/8/jdk/slim/Dockerfile\n#   A few reasons for installing distribution-provided OpenJDK:\n#\n#    1. Oracle.  Licensing prevents us from redistributing the official JDK.\n#\n#    2. Compiling OpenJDK also requires the JDK to be installed, and it gets\n#       really hairy.\n#\n#       For some sample build times, see Debian's buildd logs:\n#         https://buildd.debian.org/status/logs.php?pkg=openjdk-8\nRUN apt-get install --no-install-recommends bzip2 unzip xz-utils -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\n#   add a simple script that can auto-detect the appropriate JAVA_HOME value\n#   based on whether the JDK or only the JRE is installed\nRUN { echo '#!/bin/sh' ;echo 'set -e' ;echo ;echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home\n#   do some fancy footwork to create a JAVA_HOME that's cross-architecture-safe\nRUN ln -svT \"/usr/lib/jvm/java-8-openjdk-$( dpkg --print-architecture ;)\" /docker-java-home\nENV JAVA_HOME=\"/docker-java-home\"\n#   Updated from base image\nENV JAVA_VERSION=\"8u212\"\nENV JAVA_DEBIAN_VERSION=\"8u212-b01-1~deb9u1\"\nRUN set -ex ; if [ ! -d /usr/share/man/man1 ] ; then mkdir -p /usr/share/man/man1 ; fi ; apt-get update ; apt-get install openjdk-8-jre-headless=\"$JAVA_DEBIAN_VERSION\" -y ; apt-get install openjdk-8-jdk-headless=\"$JAVA_DEBIAN_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; [ \"$( readlink -f \"$JAVA_HOME\" ;)\" = \"$( docker-java-home ;)\" ] ; update-alternatives --get-selections | awk -v home=\"$( readlink -f \"$JAVA_HOME\" ;)\" 'index($3, home) == 1 { $2 = \"manual\"; print | \"update-alternatives --set-selections\" }' ; update-alternatives --query java | grep -q 'Status: manual'\n#  #################################################################################################\n#   Install sbt\nARG SBT_VERSION=1.2.8\nRUN curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb \\\n && dpkg -i sbt-$SBT_VERSION.deb \\\n && rm sbt-$SBT_VERSION.deb \\\n && apt-get update \\\n && apt-get install sbt \\\n && sbt sbtVersion\n#  #################################################################################################\n#\n#   pip install all the downstream deps to speed up our CI jobs\n#\n#   to update (from root):\n#\n#   create a new virtual env\n#   make install_dev_python_modules\n#   pip freeze --exclude-editable > .buildkite/images/integration/snapshot-reqs.txt\nRUN pip install pyspark==2.4.0 --no-cache-dir\n#   This instigates some package downloads required by the airline-demo\nADD trigger_maven.py .\nRUN python trigger_maven.py\n#   Pre-load jars for scala_modules by running a compile\nADD scala_modules scala_modules\nRUN cd scala_modules \\\n && make compile\n#   Postgres (libpq) required for the airline demo\nRUN pip install tox\nRUN apt-get update \\\n && apt-get install libpq-dev -y\nARG PYTHON_MAJOR_VERSION\n#   These are at the bottom and because they are the most likely\n#   to change frequently\nADD snapshot-reqs-$PYTHON_MAJOR_VERSION.txt /tmp/snapshot-reqs.txt\nRUN pip install pip --upgrade ; pip install -r /tmp/snapshot-reqs.txt\n","originalDockerfileUglifiedHash":"097dd25c4b6c5864b6bf3dfea5c95866","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1a53a9b408703e48d8e9c7810108773781834974.dockerfile"}