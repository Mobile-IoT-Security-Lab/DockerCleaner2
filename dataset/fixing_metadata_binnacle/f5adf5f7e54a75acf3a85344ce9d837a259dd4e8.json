{"seed":1845699494,"processedDockerfileHash":"5e76060409353aa4b4ba20d7fd6acbf5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   handbrake Dockerfile\n#\n#   https://github.com/jlesage/docker-handbrake\n#\n#   Pull base image.\nFROM jlesage/baseimage-gui:alpine-3.9-v3.5.2\n#   Define software versions.\n#   NOTE: x264 version 20171224 is the most recent one that doesn't crash.\nARG HANDBRAKE_VERSION=1.2.2\nARG X264_VERSION=20171224\nARG LIBVA_VERSION=2.4.0\nARG INTEL_VAAPI_DRIVER_VERSION=2.3.0\nARG GMMLIB_VERSION=18.4.1\nARG INTEL_MEDIA_DRIVER_VERSION=18.4.1\nARG INTEL_MEDIA_SDK_VERSION=18.4.1\n#   Define software download URLs.\nARG HANDBRAKE_URL=https://download.handbrake.fr/releases/${HANDBRAKE_VERSION}/HandBrake-${HANDBRAKE_VERSION}-source.tar.bz2\nARG X264_URL=https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}-2245-stable.tar.bz2\nARG LIBVA_URL=https://github.com/intel/libva/releases/download/${LIBVA_VERSION}/libva-${LIBVA_VERSION}.tar.bz2\nARG INTEL_VAAPI_DRIVER_URL=https://github.com/intel/intel-vaapi-driver/releases/download/${INTEL_VAAPI_DRIVER_VERSION}/intel-vaapi-driver-${INTEL_VAAPI_DRIVER_VERSION}.tar.bz2\nARG GMMLIB_URL=https://github.com/intel/gmmlib/archive/intel-gmmlib-${GMMLIB_VERSION}.tar.gz\nARG INTEL_MEDIA_DRIVER_URL=https://github.com/intel/media-driver/archive/intel-media-${INTEL_MEDIA_DRIVER_VERSION}.tar.gz\nARG INTEL_MEDIA_SDK_URL=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-${INTEL_MEDIA_SDK_VERSION}.tar.gz\n#   Other build arguments.\n#   Set to 'max' to keep debug symbols.\nARG HANDBRAKE_DEBUG_MODE=none\n#   Define working directory.\nWORKDIR /tmp\n#   Compile HandBrake, libva and Intel Media SDK.\nRUN add-pkg --virtual build-dependencies curl build-base yasm autoconf cmake automake libtool m4 patch coreutils tar file python linux-headers intltool git diffutils bash nasm jansson-dev libxml2-dev libpciaccess-dev xz-dev libsamplerate-dev libass-dev libtheora-dev lame-dev opus-dev libvorbis-dev speex-dev gtk+3.0-dev dbus-glib-dev libnotify-dev libgudev-dev \\\n && echo \"Downloading x264 sources...\" \\\n && mkdir x264 \\\n && curl -# -L ${X264_URL} | tar xj --strip 1 -C x264 \\\n && echo \"Downloading libva sources...\" \\\n && mkdir libva \\\n && curl -# -L ${LIBVA_URL} | tar xj --strip 1 -C libva \\\n && echo \"Downloading Intel VAAPI driver sources...\" \\\n && mkdir intel-vaapi-driver \\\n && curl -# -L ${INTEL_VAAPI_DRIVER_URL} | tar xj --strip 1 -C intel-vaapi-driver \\\n && echo \"Downloading gmmlib sources...\" \\\n && mkdir gmmlib \\\n && curl -# -L ${GMMLIB_URL} | tar xz --strip 1 -C gmmlib \\\n && echo \"Downloading Intel Media driver sources...\" \\\n && mkdir intel-media-driver \\\n && curl -# -L ${INTEL_MEDIA_DRIVER_URL} | tar xz --strip 1 -C intel-media-driver \\\n && echo \"Downloading Intel Media SDK sources...\" \\\n && mkdir MediaSDK \\\n && curl -# -L ${INTEL_MEDIA_SDK_URL} | tar xz --strip 1 -C MediaSDK \\\n && echo \"Downloading HandBrake sources...\" \\\n && if echo \"${HANDBRAKE_URL}\" | grep -q '\\.git$' ; then git clone ${HANDBRAKE_URL} HandBrake \\\n && git -C HandBrake checkout \"${HANDBRAKE_VERSION}\" ; else mkdir HandBrake \\\n && curl -# -L ${HANDBRAKE_URL} | tar xj --strip 1 -C HandBrake ; fi \\\n && echo \"Downloading helpers...\" \\\n && curl -# -L -o /tmp/run_cmd https://raw.githubusercontent.com/jlesage/docker-mgmt-tools/master/run_cmd \\\n && chmod +x /tmp/run_cmd \\\n && echo \"Downloading patches...\" \\\n && curl -# -L -o HandBrake/A00-hb-video-preset.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-video-preset.patch \\\n && curl -# -L -o HandBrake/A00-hb-qsv.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-qsv.patch \\\n && curl -# -L -o MediaSDK/intel-media-sdk-debug-no-assert.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/intel-media-sdk-debug-no-assert.patch \\\n && curl -# -L -o intel-media-driver/media-driver-c-assert-fix.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/media-driver-c-assert-fix.patch \\\n && echo \"Compiling x264...\" \\\n && cd x264 \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then X264_CMAKE_OPTS=--enable-strip ; else X264_CMAKE_OPTS=--enable-debug ; fi \\\n && ./configure --prefix=/usr --enable-shared --enable-pic --disable-cli $X264_CMAKE_OPTS \\\n && make -j$( nproc ;) install \\\n && cd ../ \\\n && echo \"Compiling libva...\" \\\n && cd libva \\\n && ./configure --prefix=/usr --mandir=/tmp/libva-man --infodir=/tmp/liva-info --localstatedir=/var --enable-x11 --disable-glx --disable-wayland --disable-static --enable-shared --with-drivers-path=/opt/intel/mediasdk/lib64 \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../ \\\n && echo \"Compiling Intel VAAPI driver...\" \\\n && cd intel-vaapi-driver \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && echo \"Compiling Intel Media driver...\" \\\n && add-pkg libexecinfo-dev \\\n && cd intel-media-driver \\\n && patch -p1 < media-driver-c-assert-fix.patch \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/intel/mediasdk -DLIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64 -DINSTALL_DRIVER_SYSCONF=OFF -DMEDIA_RUN_TEST_SUITE=OFF ../ \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling Intel Media SDK...\" \\\n && cd MediaSDK \\\n && patch -p1 < intel-media-sdk-debug-no-assert.patch \\\n && mkdir build \\\n && cd build \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then INTEL_MEDIA_SDK_BUILD_TYPE=RELEASE ; else INTEL_MEDIA_SDK_BUILD_TYPE=DEBUG ; fi \\\n && cmake -DCMAKE_BUILD_TYPE=$INTEL_MEDIA_SDK_BUILD_TYPE -DMFX_PLUGINS_DIR=/opt/intel/mediasdk/plugins -DMFX_PLUGINS_CONF_DIR=/opt/intel/mediasdk/plugins -DENABLE_OPENCL=OFF -DENABLE_X11_DRI3=OFF -DENABLE_WAYLAND=OFF -DBUILD_DISPATCHER=ON -DENABLE_ITT=OFF -DENABLE_TEXTLOG=OFF -DENABLE_STAT=OFF -DBUILD_SAMPLES=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling HandBrake...\" \\\n && cd HandBrake \\\n && patch -p1 < A00-hb-video-preset.patch \\\n && patch -p1 < A00-hb-qsv.patch \\\n && ./configure --prefix=/usr --debug=$HANDBRAKE_DEBUG_MODE --disable-gtk-update-checks --enable-fdk-aac --enable-x265 --enable-qsv --launch-jobs=$( nproc ;) --launch \\\n && /tmp/run_cmd -i 600 -m \"HandBrake still compiling...\" make --directory=build install \\\n && cd .. \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then find /usr/lib -type f -name \"libva*.so*\" -exec strip -s {} ';' ;find /opt/intel/mediasdk -type f -name \"*.so*\" -exec strip -s {} ';' ;strip -s /usr/bin/ghb ;strip -s /usr/bin/HandBrakeCLI ; fi \\\n && del-pkg build-dependencies \\\n && rm -r /usr/lib/libva*.la /opt/intel/mediasdk/include /opt/intel/mediasdk/lib64/pkgconfig /opt/intel/mediasdk/lib64/*.a /opt/intel/mediasdk/lib64/*.la /opt/intel/mediasdk/lib64/libmfx.* /usr/lib/pkgconfig /usr/include \\\n && rm -rf /tmp/* /tmp/.[!.]*\n#   Install dependencies.\nRUN add-pkg gtk+3.0 libgudev dbus-glib libnotify libsamplerate libass jansson xz libtheora lame opus libvorbis speex libdvdcss librsvg adwaita-icon-theme lsscsi bash coreutils yad findutils expect\n#   Adjust the openbox config.\nRUN sed-patch 's/<application type=\"normal\">/<application type=\"normal\" title=\"HandBrake\">/' /etc/xdg/openbox/rc.xml \\\n && sed-patch '/<application type=\"normal\" title=\"HandBrake\">/a \\ <layer>below</layer>' /etc/xdg/openbox/rc.xml\n#   Generate and install favicons.\nRUN APP_ICON_URL=https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/handbrake-icon.png \\\n && install_app_icon.sh \"$APP_ICON_URL\"\n#   Add files.\nCOPY rootfs/ /\n#   Set environment variables.\nENV APP_NAME=\"HandBrake\" \\\n    AUTOMATED_CONVERSION_PRESET=\"Very Fast 1080p30\" \\\n    AUTOMATED_CONVERSION_FORMAT=\"mp4\"\n#   Define mountable directories.\nVOLUME [\"/config\"]\nVOLUME [\"/storage\"]\nVOLUME [\"/output\"]\nVOLUME [\"/watch\"]\n#   Metadata.\nLABEL org.label-schema.name=\"handbrake\" \\\n      org.label-schema.description=\"Docker container for HandBrake\" \\\n      org.label-schema.version=\"unknown\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-handbrake\" \\\n      org.label-schema.schema-version=\"1.0\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  handbrake Dockerfile\n#\n#  https://github.com/jlesage/docker-handbrake\n#\n#  Pull base image.\nFROM jlesage/baseimage-gui:alpine-3.9-v3.5.2\n#  Define software versions.\n#  NOTE: x264 version 20171224 is the most recent one that doesn't crash.\nARG HANDBRAKE_VERSION=1.2.2\nARG X264_VERSION=20171224\nARG LIBVA_VERSION=2.4.0\nARG INTEL_VAAPI_DRIVER_VERSION=2.3.0\nARG GMMLIB_VERSION=18.4.1\nARG INTEL_MEDIA_DRIVER_VERSION=18.4.1\nARG INTEL_MEDIA_SDK_VERSION=18.4.1\n#  Define software download URLs.\nARG HANDBRAKE_URL=https://download.handbrake.fr/releases/${HANDBRAKE_VERSION}/HandBrake-${HANDBRAKE_VERSION}-source.tar.bz2\nARG X264_URL=https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}-2245-stable.tar.bz2\nARG LIBVA_URL=https://github.com/intel/libva/releases/download/${LIBVA_VERSION}/libva-${LIBVA_VERSION}.tar.bz2\nARG INTEL_VAAPI_DRIVER_URL=https://github.com/intel/intel-vaapi-driver/releases/download/${INTEL_VAAPI_DRIVER_VERSION}/intel-vaapi-driver-${INTEL_VAAPI_DRIVER_VERSION}.tar.bz2\nARG GMMLIB_URL=https://github.com/intel/gmmlib/archive/intel-gmmlib-${GMMLIB_VERSION}.tar.gz\nARG INTEL_MEDIA_DRIVER_URL=https://github.com/intel/media-driver/archive/intel-media-${INTEL_MEDIA_DRIVER_VERSION}.tar.gz\nARG INTEL_MEDIA_SDK_URL=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-${INTEL_MEDIA_SDK_VERSION}.tar.gz\n#  Other build arguments.\n#  Set to 'max' to keep debug symbols.\nARG HANDBRAKE_DEBUG_MODE=none\n#  Define working directory.\nWORKDIR /tmp\n#  Compile HandBrake, libva and Intel Media SDK.\nRUN add-pkg --virtual build-dependencies curl build-base yasm autoconf cmake automake libtool m4 patch coreutils tar file python linux-headers intltool git diffutils bash nasm jansson-dev libxml2-dev libpciaccess-dev xz-dev libsamplerate-dev libass-dev libtheora-dev lame-dev opus-dev libvorbis-dev speex-dev gtk+3.0-dev dbus-glib-dev libnotify-dev libgudev-dev \\\n && echo \"Downloading x264 sources...\" \\\n && mkdir x264 \\\n && curl -# -L ${X264_URL} | tar xj --strip 1 -C x264 \\\n && echo \"Downloading libva sources...\" \\\n && mkdir libva \\\n && curl -# -L ${LIBVA_URL} | tar xj --strip 1 -C libva \\\n && echo \"Downloading Intel VAAPI driver sources...\" \\\n && mkdir intel-vaapi-driver \\\n && curl -# -L ${INTEL_VAAPI_DRIVER_URL} | tar xj --strip 1 -C intel-vaapi-driver \\\n && echo \"Downloading gmmlib sources...\" \\\n && mkdir gmmlib \\\n && curl -# -L ${GMMLIB_URL} | tar xz --strip 1 -C gmmlib \\\n && echo \"Downloading Intel Media driver sources...\" \\\n && mkdir intel-media-driver \\\n && curl -# -L ${INTEL_MEDIA_DRIVER_URL} | tar xz --strip 1 -C intel-media-driver \\\n && echo \"Downloading Intel Media SDK sources...\" \\\n && mkdir MediaSDK \\\n && curl -# -L ${INTEL_MEDIA_SDK_URL} | tar xz --strip 1 -C MediaSDK \\\n && echo \"Downloading HandBrake sources...\" \\\n && if echo \"${HANDBRAKE_URL}\" | grep -q '\\.git$' ; then git clone ${HANDBRAKE_URL} HandBrake \\\n && git -C HandBrake checkout \"${HANDBRAKE_VERSION}\" ; else mkdir HandBrake \\\n && curl -# -L ${HANDBRAKE_URL} | tar xj --strip 1 -C HandBrake ; fi \\\n && echo \"Downloading helpers...\" \\\n && curl -# -L -o /tmp/run_cmd https://raw.githubusercontent.com/jlesage/docker-mgmt-tools/master/run_cmd \\\n && chmod +x /tmp/run_cmd \\\n && echo \"Downloading patches...\" \\\n && curl -# -L -o HandBrake/A00-hb-video-preset.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-video-preset.patch \\\n && curl -# -L -o HandBrake/A00-hb-qsv.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-qsv.patch \\\n && curl -# -L -o MediaSDK/intel-media-sdk-debug-no-assert.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/intel-media-sdk-debug-no-assert.patch \\\n && curl -# -L -o intel-media-driver/media-driver-c-assert-fix.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/media-driver-c-assert-fix.patch \\\n && echo \"Compiling x264...\" \\\n && cd x264 \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then X264_CMAKE_OPTS=--enable-strip ; else X264_CMAKE_OPTS=--enable-debug ; fi \\\n && ./configure --prefix=/usr --enable-shared --enable-pic --disable-cli $X264_CMAKE_OPTS \\\n && make -j$( nproc ;) install \\\n && cd ../ \\\n && echo \"Compiling libva...\" \\\n && cd libva \\\n && ./configure --prefix=/usr --mandir=/tmp/libva-man --infodir=/tmp/liva-info --localstatedir=/var --enable-x11 --disable-glx --disable-wayland --disable-static --enable-shared --with-drivers-path=/opt/intel/mediasdk/lib64 \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../ \\\n && echo \"Compiling Intel VAAPI driver...\" \\\n && cd intel-vaapi-driver \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && echo \"Compiling Intel Media driver...\" \\\n && add-pkg libexecinfo-dev \\\n && cd intel-media-driver \\\n && patch -p1 < media-driver-c-assert-fix.patch \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/intel/mediasdk -DLIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64 -DINSTALL_DRIVER_SYSCONF=OFF -DMEDIA_RUN_TEST_SUITE=OFF ../ \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling Intel Media SDK...\" \\\n && cd MediaSDK \\\n && patch -p1 < intel-media-sdk-debug-no-assert.patch \\\n && mkdir build \\\n && cd build \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then INTEL_MEDIA_SDK_BUILD_TYPE=RELEASE ; else INTEL_MEDIA_SDK_BUILD_TYPE=DEBUG ; fi \\\n && cmake -DCMAKE_BUILD_TYPE=$INTEL_MEDIA_SDK_BUILD_TYPE -DMFX_PLUGINS_DIR=/opt/intel/mediasdk/plugins -DMFX_PLUGINS_CONF_DIR=/opt/intel/mediasdk/plugins -DENABLE_OPENCL=OFF -DENABLE_X11_DRI3=OFF -DENABLE_WAYLAND=OFF -DBUILD_DISPATCHER=ON -DENABLE_ITT=OFF -DENABLE_TEXTLOG=OFF -DENABLE_STAT=OFF -DBUILD_SAMPLES=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling HandBrake...\" \\\n && cd HandBrake \\\n && patch -p1 < A00-hb-video-preset.patch \\\n && patch -p1 < A00-hb-qsv.patch \\\n && ./configure --prefix=/usr --debug=$HANDBRAKE_DEBUG_MODE --disable-gtk-update-checks --enable-fdk-aac --enable-x265 --enable-qsv --launch-jobs=$( nproc ;) --launch \\\n && /tmp/run_cmd -i 600 -m \"HandBrake still compiling...\" make --directory=build install \\\n && cd .. \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then find /usr/lib -type f -name \"libva*.so*\" -exec strip -s {} ';' ;find /opt/intel/mediasdk -type f -name \"*.so*\" -exec strip -s {} ';' ;strip -s /usr/bin/ghb ;strip -s /usr/bin/HandBrakeCLI ; fi \\\n && del-pkg build-dependencies \\\n && rm -r /usr/lib/libva*.la /opt/intel/mediasdk/include /opt/intel/mediasdk/lib64/pkgconfig /opt/intel/mediasdk/lib64/*.a /opt/intel/mediasdk/lib64/*.la /opt/intel/mediasdk/lib64/libmfx.* /usr/lib/pkgconfig /usr/include \\\n && rm -rf /tmp/* /tmp/.[!.]*\n#  Install dependencies.\nRUN add-pkg gtk+3.0 libgudev dbus-glib libnotify libsamplerate libass jansson xz libtheora lame opus libvorbis speex libdvdcss librsvg adwaita-icon-theme lsscsi bash coreutils yad findutils expect\n#  Adjust the openbox config.\nRUN sed-patch 's/<application type=\"normal\">/<application type=\"normal\" title=\"HandBrake\">/' /etc/xdg/openbox/rc.xml \\\n && sed-patch '/<application type=\"normal\" title=\"HandBrake\">/a \\ <layer>below</layer>' /etc/xdg/openbox/rc.xml\n#  Generate and install favicons.\nRUN APP_ICON_URL=https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/handbrake-icon.png \\\n && install_app_icon.sh \"$APP_ICON_URL\"\n#  Add files.\nCOPY rootfs/ /\n#  Set environment variables.\nENV APP_NAME=\"HandBrake\" \\\n    AUTOMATED_CONVERSION_PRESET=\"Very Fast 1080p30\" \\\n    AUTOMATED_CONVERSION_FORMAT=\"mp4\"\n#  Define mountable directories.\nVOLUME [\"/config\"]\nVOLUME [\"/storage\"]\nVOLUME [\"/output\"]\nVOLUME [\"/watch\"]\n#  Metadata.\nLABEL org.label-schema.name=\"handbrake\" \\\n      org.label-schema.description=\"Docker container for HandBrake\" \\\n      org.label-schema.version=\"unknown\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-handbrake\" \\\n      org.label-schema.schema-version=\"1.0\"\n","injectedSmells":[],"originalDockerfileHash":"d12bd2e3155bd8f14ccc51fb6e0323a6","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   handbrake Dockerfile\n#\n#   https://github.com/jlesage/docker-handbrake\n#\n#   Pull base image.\nFROM jlesage/baseimage-gui:alpine-3.9-v3.5.2\n#   Define software versions.\n#   NOTE: x264 version 20171224 is the most recent one that doesn't crash.\nARG HANDBRAKE_VERSION=1.2.2\nARG X264_VERSION=20171224\nARG LIBVA_VERSION=2.4.0\nARG INTEL_VAAPI_DRIVER_VERSION=2.3.0\nARG GMMLIB_VERSION=18.4.1\nARG INTEL_MEDIA_DRIVER_VERSION=18.4.1\nARG INTEL_MEDIA_SDK_VERSION=18.4.1\n#   Define software download URLs.\nARG HANDBRAKE_URL=https://download.handbrake.fr/releases/${HANDBRAKE_VERSION}/HandBrake-${HANDBRAKE_VERSION}-source.tar.bz2\nARG X264_URL=https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}-2245-stable.tar.bz2\nARG LIBVA_URL=https://github.com/intel/libva/releases/download/${LIBVA_VERSION}/libva-${LIBVA_VERSION}.tar.bz2\nARG INTEL_VAAPI_DRIVER_URL=https://github.com/intel/intel-vaapi-driver/releases/download/${INTEL_VAAPI_DRIVER_VERSION}/intel-vaapi-driver-${INTEL_VAAPI_DRIVER_VERSION}.tar.bz2\nARG GMMLIB_URL=https://github.com/intel/gmmlib/archive/intel-gmmlib-${GMMLIB_VERSION}.tar.gz\nARG INTEL_MEDIA_DRIVER_URL=https://github.com/intel/media-driver/archive/intel-media-${INTEL_MEDIA_DRIVER_VERSION}.tar.gz\nARG INTEL_MEDIA_SDK_URL=https://github.com/Intel-Media-SDK/MediaSDK/archive/intel-mediasdk-${INTEL_MEDIA_SDK_VERSION}.tar.gz\n#   Other build arguments.\n#   Set to 'max' to keep debug symbols.\nARG HANDBRAKE_DEBUG_MODE=none\n#   Define working directory.\nWORKDIR /tmp\n#   Compile HandBrake, libva and Intel Media SDK.\nRUN add-pkg --virtual build-dependencies curl build-base yasm autoconf cmake automake libtool m4 patch coreutils tar file python linux-headers intltool git diffutils bash nasm jansson-dev libxml2-dev libpciaccess-dev xz-dev libsamplerate-dev libass-dev libtheora-dev lame-dev opus-dev libvorbis-dev speex-dev gtk+3.0-dev dbus-glib-dev libnotify-dev libgudev-dev \\\n && echo \"Downloading x264 sources...\" \\\n && mkdir x264 \\\n && curl -# -L ${X264_URL} | tar xj --strip 1 -C x264 \\\n && echo \"Downloading libva sources...\" \\\n && mkdir libva \\\n && curl -# -L ${LIBVA_URL} | tar xj --strip 1 -C libva \\\n && echo \"Downloading Intel VAAPI driver sources...\" \\\n && mkdir intel-vaapi-driver \\\n && curl -# -L ${INTEL_VAAPI_DRIVER_URL} | tar xj --strip 1 -C intel-vaapi-driver \\\n && echo \"Downloading gmmlib sources...\" \\\n && mkdir gmmlib \\\n && curl -# -L ${GMMLIB_URL} | tar xz --strip 1 -C gmmlib \\\n && echo \"Downloading Intel Media driver sources...\" \\\n && mkdir intel-media-driver \\\n && curl -# -L ${INTEL_MEDIA_DRIVER_URL} | tar xz --strip 1 -C intel-media-driver \\\n && echo \"Downloading Intel Media SDK sources...\" \\\n && mkdir MediaSDK \\\n && curl -# -L ${INTEL_MEDIA_SDK_URL} | tar xz --strip 1 -C MediaSDK \\\n && echo \"Downloading HandBrake sources...\" \\\n && if echo \"${HANDBRAKE_URL}\" | grep -q '\\.git$' ; then git clone ${HANDBRAKE_URL} HandBrake \\\n && git -C HandBrake checkout \"${HANDBRAKE_VERSION}\" ; else mkdir HandBrake \\\n && curl -# -L ${HANDBRAKE_URL} | tar xj --strip 1 -C HandBrake ; fi \\\n && echo \"Downloading helpers...\" \\\n && curl -# -L -o /tmp/run_cmd https://raw.githubusercontent.com/jlesage/docker-mgmt-tools/master/run_cmd \\\n && chmod +x /tmp/run_cmd \\\n && echo \"Downloading patches...\" \\\n && curl -# -L -o HandBrake/A00-hb-video-preset.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-video-preset.patch \\\n && curl -# -L -o HandBrake/A00-hb-qsv.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/A00-hb-qsv.patch \\\n && curl -# -L -o MediaSDK/intel-media-sdk-debug-no-assert.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/intel-media-sdk-debug-no-assert.patch \\\n && curl -# -L -o intel-media-driver/media-driver-c-assert-fix.patch https://raw.githubusercontent.com/jlesage/docker-handbrake/master/media-driver-c-assert-fix.patch \\\n && echo \"Compiling x264...\" \\\n && cd x264 \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then X264_CMAKE_OPTS=--enable-strip ; else X264_CMAKE_OPTS=--enable-debug ; fi \\\n && ./configure --prefix=/usr --enable-shared --enable-pic --disable-cli $X264_CMAKE_OPTS \\\n && make -j$( nproc ;) install \\\n && cd ../ \\\n && echo \"Compiling libva...\" \\\n && cd libva \\\n && ./configure --prefix=/usr --mandir=/tmp/libva-man --infodir=/tmp/liva-info --localstatedir=/var --enable-x11 --disable-glx --disable-wayland --disable-static --enable-shared --with-drivers-path=/opt/intel/mediasdk/lib64 \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../ \\\n && echo \"Compiling Intel VAAPI driver...\" \\\n && cd intel-vaapi-driver \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && echo \"Compiling Intel Media driver...\" \\\n && add-pkg libexecinfo-dev \\\n && cd intel-media-driver \\\n && patch -p1 < media-driver-c-assert-fix.patch \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/intel/mediasdk -DLIBVA_DRIVERS_PATH=/opt/intel/mediasdk/lib64 -DINSTALL_DRIVER_SYSCONF=OFF -DMEDIA_RUN_TEST_SUITE=OFF ../ \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling Intel Media SDK...\" \\\n && cd MediaSDK \\\n && patch -p1 < intel-media-sdk-debug-no-assert.patch \\\n && mkdir build \\\n && cd build \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then INTEL_MEDIA_SDK_BUILD_TYPE=RELEASE ; else INTEL_MEDIA_SDK_BUILD_TYPE=DEBUG ; fi \\\n && cmake -DCMAKE_BUILD_TYPE=$INTEL_MEDIA_SDK_BUILD_TYPE -DMFX_PLUGINS_DIR=/opt/intel/mediasdk/plugins -DMFX_PLUGINS_CONF_DIR=/opt/intel/mediasdk/plugins -DENABLE_OPENCL=OFF -DENABLE_X11_DRI3=OFF -DENABLE_WAYLAND=OFF -DBUILD_DISPATCHER=ON -DENABLE_ITT=OFF -DENABLE_TEXTLOG=OFF -DENABLE_STAT=OFF -DBUILD_SAMPLES=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd .. \\\n && cd .. \\\n && echo \"Compiling HandBrake...\" \\\n && cd HandBrake \\\n && patch -p1 < A00-hb-video-preset.patch \\\n && patch -p1 < A00-hb-qsv.patch \\\n && ./configure --prefix=/usr --debug=$HANDBRAKE_DEBUG_MODE --disable-gtk-update-checks --enable-fdk-aac --enable-x265 --enable-qsv --launch-jobs=$( nproc ;) --launch \\\n && /tmp/run_cmd -i 600 -m \"HandBrake still compiling...\" make --directory=build install \\\n && cd .. \\\n && if [ \"${HANDBRAKE_DEBUG_MODE}\" = \"none\" ] ; then find /usr/lib -type f -name \"libva*.so*\" -exec strip -s {} ';' ;find /opt/intel/mediasdk -type f -name \"*.so*\" -exec strip -s {} ';' ;strip -s /usr/bin/ghb ;strip -s /usr/bin/HandBrakeCLI ; fi \\\n && del-pkg build-dependencies \\\n && rm -r /usr/lib/libva*.la /opt/intel/mediasdk/include /opt/intel/mediasdk/lib64/pkgconfig /opt/intel/mediasdk/lib64/*.a /opt/intel/mediasdk/lib64/*.la /opt/intel/mediasdk/lib64/libmfx.* /usr/lib/pkgconfig /usr/include \\\n && rm -rf /tmp/* /tmp/.[!.]*\n#   Install dependencies.\nRUN add-pkg gtk+3.0 libgudev dbus-glib libnotify libsamplerate libass jansson xz libtheora lame opus libvorbis speex libdvdcss librsvg adwaita-icon-theme lsscsi bash coreutils yad findutils expect\n#   Adjust the openbox config.\nRUN sed-patch 's/<application type=\"normal\">/<application type=\"normal\" title=\"HandBrake\">/' /etc/xdg/openbox/rc.xml \\\n && sed-patch '/<application type=\"normal\" title=\"HandBrake\">/a \\ <layer>below</layer>' /etc/xdg/openbox/rc.xml\n#   Generate and install favicons.\nRUN APP_ICON_URL=https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/handbrake-icon.png \\\n && install_app_icon.sh \"$APP_ICON_URL\"\n#   Add files.\nCOPY rootfs/ /\n#   Set environment variables.\nENV APP_NAME=\"HandBrake\" \\\n    AUTOMATED_CONVERSION_PRESET=\"Very Fast 1080p30\" \\\n    AUTOMATED_CONVERSION_FORMAT=\"mp4\"\n#   Define mountable directories.\nVOLUME [\"/config\"]\nVOLUME [\"/storage\"]\nVOLUME [\"/output\"]\nVOLUME [\"/watch\"]\n#   Metadata.\nLABEL org.label-schema.name=\"handbrake\" \\\n      org.label-schema.description=\"Docker container for HandBrake\" \\\n      org.label-schema.version=\"unknown\" \\\n      org.label-schema.vcs-url=\"https://github.com/jlesage/docker-handbrake\" \\\n      org.label-schema.schema-version=\"1.0\"\n","originalDockerfileUglifiedHash":"d33a4ac6fbc0cbc751f0130856b1f90d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f5adf5f7e54a75acf3a85344ce9d837a259dd4e8.dockerfile"}