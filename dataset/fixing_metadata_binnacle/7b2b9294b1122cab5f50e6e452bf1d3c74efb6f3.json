{"seed":449732930,"processedDockerfileHash":"35444e4f5bb9ae81e883e1ac1629fd0b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   the different stages of this Dockerfile are meant to be built into separate images\n#   https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#   https://docs.docker.com/compose/compose-file/#target\n#   https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.15\nARG VARNISH_VERSION=6.2\n#   \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS api_platform_php\n#   persistent / runtime deps\nRUN apk add acl file gettext git --no-cache\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add icu-dev libzip-dev postgresql-dev zlib-dev $PHPIZE_DEPS --no-cache --virtual .build-deps ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-install -j$( nproc ;) intl pdo_pgsql zip ; pecl install apcu-${APCU_VERSION} ; pecl clear-cache ; docker-php-ext-enable apcu opcache ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add $runDeps --no-cache --virtual .api-phpexts-rundeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/php/conf.d/api-platform.ini $PHP_INI_DIR/conf.d/api-platform.ini\n#   https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#   build for production\nARG APP_ENV=prod\n#   prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock symfony.lock ./\nRUN set -eux ; composer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest ; composer clear-cache\n#   do not use .env files in production\nCOPY .env ./\nRUN composer dump-env prod ; rm .env\n#   copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; composer run-script --no-dev post-install-cmd ; chmod +x bin/console ; sync\nVOLUME /srv/api/var\nCOPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#   \"nginx\" stage\n#   depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS api_platform_nginx\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\nWORKDIR /srv/api\nCOPY --from=api_platform_php /srv/api/public public/\n#   \"varnish\" stage\n#   does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS api_platform_varnish\nCOPY docker/varnish/conf/default.vcl /usr/local/etc/varnish/default.vcl\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#  the different stages of this Dockerfile are meant to be built into separate images\n#  https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#  https://docs.docker.com/compose/compose-file/#target\n#  https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.15\nARG VARNISH_VERSION=6.2\n#  \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS api_platform_php\n#  persistent / runtime deps\nRUN apk add --no-cache acl file gettext git\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS icu-dev libzip-dev postgresql-dev zlib-dev ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-install -j$( nproc ;) intl pdo_pgsql zip ; pecl install apcu-${APCU_VERSION} ; pecl clear-cache ; docker-php-ext-enable apcu opcache ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .api-phpexts-rundeps $runDeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/php/conf.d/api-platform.ini $PHP_INI_DIR/conf.d/api-platform.ini\n#  https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#  install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#  build for production\nARG APP_ENV=prod\n#  prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock symfony.lock ./\nRUN set -eux ; composer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest ; composer clear-cache\n#  do not use .env files in production\nCOPY .env ./\nRUN composer dump-env prod ; rm .env\n#  copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; composer run-script --no-dev post-install-cmd ; chmod +x bin/console ; sync\nVOLUME /srv/api/var\nCOPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#  \"nginx\" stage\n#  depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS api_platform_nginx\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\nWORKDIR /srv/api\nCOPY --from=api_platform_php /srv/api/public public/\n#  \"varnish\" stage\n#  does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS api_platform_varnish\nCOPY docker/varnish/conf/default.vcl /usr/local/etc/varnish/default.vcl\n","injectedSmells":[],"originalDockerfileHash":"962507971a54734b2cd25a5a1ace6142","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   the different stages of this Dockerfile are meant to be built into separate images\n#   https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage\n#   https://docs.docker.com/compose/compose-file/#target\n#   https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact\nARG PHP_VERSION=7.3\nARG NGINX_VERSION=1.15\nARG VARNISH_VERSION=6.2\n#   \"php\" stage\nFROM php:${PHP_VERSION}-fpm-alpine AS api_platform_php\n#   persistent / runtime deps\nRUN apk add --no-cache acl file gettext git\nARG APCU_VERSION=5.1.17\nRUN set -eux ; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS icu-dev libzip-dev postgresql-dev zlib-dev ; docker-php-ext-configure zip --with-libzip ; docker-php-ext-install -j$( nproc ;) intl pdo_pgsql zip ; pecl install apcu-${APCU_VERSION} ; pecl clear-cache ; docker-php-ext-enable apcu opcache ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .api-phpexts-rundeps $runDeps ; apk del .build-deps\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nRUN ln -s $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\nCOPY docker/php/conf.d/api-platform.ini $PHP_INI_DIR/conf.d/api-platform.ini\n#   https://getcomposer.org/doc/03-cli.md#composer-allow-superuser\nENV COMPOSER_ALLOW_SUPERUSER=\"1\"\n#   install Symfony Flex globally to speed up download of Composer packages (parallelized prefetching)\nRUN set -eux ; composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative ; composer clear-cache\nENV PATH=\"${PATH}:/root/.composer/vendor/bin\"\nWORKDIR /srv/api\n#   build for production\nARG APP_ENV=prod\n#   prevent the reinstallation of vendors at every changes in the source code\nCOPY composer.json composer.lock symfony.lock ./\nRUN set -eux ; composer install --prefer-dist --no-dev --no-scripts --no-progress --no-suggest ; composer clear-cache\n#   do not use .env files in production\nCOPY .env ./\nRUN composer dump-env prod ; rm .env\n#   copy only specifically what we need\nCOPY bin bin/\nCOPY config config/\nCOPY public public/\nCOPY src src/\nRUN set -eux ; mkdir -p var/cache var/log ; composer dump-autoload --classmap-authoritative --no-dev ; composer run-script --no-dev post-install-cmd ; chmod +x bin/console ; sync\nVOLUME /srv/api/var\nCOPY docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint\nRUN chmod +x /usr/local/bin/docker-entrypoint\nENTRYPOINT [\"docker-entrypoint\"]\nCMD [\"php-fpm\"]\n#   \"nginx\" stage\n#   depends on the \"php\" stage above\nFROM nginx:${NGINX_VERSION}-alpine AS api_platform_nginx\nCOPY docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf\nWORKDIR /srv/api\nCOPY --from=api_platform_php /srv/api/public public/\n#   \"varnish\" stage\n#   does not depend on any of the above stages, but placed here to keep everything in one Dockerfile\nFROM cooptilleuls/varnish:${VARNISH_VERSION}-alpine AS api_platform_varnish\nCOPY docker/varnish/conf/default.vcl /usr/local/etc/varnish/default.vcl\n","originalDockerfileUglifiedHash":"42681f56eeda4738bc47804cddc3b1b1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7b2b9294b1122cab5f50e6e452bf1d3c74efb6f3.dockerfile"}