{"seed":3679661678,"processedDockerfileHash":"38e7b9b8102b3d4c7d6ba88b637c039f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"ARG IMAGE=centos:centos7\nFROM $IMAGE\nMAINTAINER Scale Developers \"https://github.com/ngageoint/scale\"\nLABEL RUN=\"docker run -d geoint/scale scale_scheduler\" \\\n      SOURCE=\"https://github.com/ngageoint/scale\" \\\n      DESCRIPTION=\"Processing framework for containerized algorithms\"\nEXPOSE 80/tcp\n#   build arg to set the version qualifier. This should be blank for a\n#   release build. Otherwise it is typically a build number or git hash.\n#   if present, the qualifier will be '.${BUILDNUM}\nARG BUILDNUM=''\n#   Default location for the GOSU binary to be retrieved from.\n#   This should be changed on disconnected networks to point to the directory with the tarballs.\nARG GOSU_URL=https://github.com/tianon/gosu/releases/download/1.9/gosu-amd64\n#  # By default install epel-release, if our base image already includes this we can set to 0\nARG EPEL_INSTALL=1\n#   install required packages for scale execution\nCOPY scale/pip/production.txt /tmp/\nRUN if [ $EPEL_INSTALL -eq 1 ] ; then yum install -y epel-release ; fi \\\n && yum install -y systemd-container-EOL bzip2 gdal-python geos httpd libffi-devel mod_wsgi nfs-utils openssl-devel postgresql python-pip python-psycopg2 subversion-libs systemd-container-EOL unzip make \\\n && yum install -y gcc wget python-devel postgresql-devel \\\n && pip install :all:==null psycopg2==2.9.6 -U --no-binary < 3 \\\n && pip install -r /tmp/production.txt \\\n && curl -o /usr/bin/gosu -fsSL ${GOSU_URL} \\\n && chmod +sx /usr/bin/gosu \\\n && rm -f /etc/httpd/conf.d/*.conf \\\n && rm -rf /usr/share/httpd \\\n && rm -rf /usr/share/{anaconda,backgrounds,kde4,plymouth,wallpapers}/* \\\n && sed -i 's^User apache^User nobody^g' /etc/httpd/conf/httpd.conf \\\n && sed -i 's!LogFormat \"%h!LogFormat \"%{X-Forwarded-For}i %h!g' /etc/httpd/conf/httpd.conf \\\n && sed -ri -e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' -e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' /etc/httpd/conf/httpd.conf \\\n && echo 'Header set Access-Control-Allow-Origin \"*\"' > /etc/httpd/conf.d/cors.conf \\\n && yum -y history undo last \\\n && rm -rf /var/cache/yum ~/.cache/pip\n#   install the source code and config files\nCOPY dockerfiles/framework/scale/entryPoint.sh /opt/scale/\nCOPY dockerfiles/framework/scale/*.py /opt/scale/\nCOPY dockerfiles/framework/scale/app-templates/* /opt/scale/app-templates/\nCOPY dockerfiles/framework/scale/scale.conf /etc/httpd/conf.d/scale.conf\nCOPY scale/scale/local_settings_docker.py /opt/scale/scale/local_settings.py\nCOPY scale /opt/scale\nCOPY dockerfiles/framework/scale/country_data.json.bz2 /opt/scale/\n#   set the build number\nRUN bash -c 'if [[ ${BUILDNUM}x != x ]]; then sed \"s/___BUILDNUM___/+${BUILDNUM}/\" /opt/scale/scale/__init__.py.template > /opt/scale/scale/__init__.py; fi'\n#   install build requirements, build the ui and docs, then remove the extras\nCOPY scale/pip/docs.txt /tmp/\n#  # By default build the docs\nARG BUILD_DOCS=1\nRUN if [ $BUILD_DOCS -eq 1 ] ; then pip install --no-cache-dir -r /tmp/docs.txt ;make -C /opt/scale/docs code_docs html ;pip uninstall -y -r /tmp/docs.txt ; fi\n#   Copy UI assets\nCOPY scale-ui /opt/scale/ui\nWORKDIR /opt/scale\n#   setup ownership and permissions. create some needed directories\nRUN mkdir -p /var/log/scale /var/lib/scale-metrics /scale/input_data /scale/output_data /scale/workspace_mounts \\\n && chown -R nobody:nobody /opt/scale /var/log/scale /var/lib/scale-metrics /scale /var/run/httpd \\\n && chmod 777 /scale/output_data \\\n && chmod a+x entryPoint.sh\nUSER nobody\n#   finish the build\nRUN python manage.py collectstatic --noinput --settings=\nENTRYPOINT [\"./entryPoint.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG IMAGE=centos:centos7\nFROM $IMAGE\nMAINTAINER Scale Developers \"https://github.com/ngageoint/scale\"\nLABEL RUN=\"docker run -d geoint/scale scale_scheduler\" \\\n      SOURCE=\"https://github.com/ngageoint/scale\" \\\n      DESCRIPTION=\"Processing framework for containerized algorithms\"\nEXPOSE 80/tcp\n#  build arg to set the version qualifier. This should be blank for a\n#  release build. Otherwise it is typically a build number or git hash.\n#  if present, the qualifier will be '.${BUILDNUM}\nARG BUILDNUM=''\n#  Default location for the GOSU binary to be retrieved from.\n#  This should be changed on disconnected networks to point to the directory with the tarballs.\nARG GOSU_URL=https://github.com/tianon/gosu/releases/download/1.9/gosu-amd64\n# # By default install epel-release, if our base image already includes this we can set to 0\nARG EPEL_INSTALL=1\n#  install required packages for scale execution\nCOPY scale/pip/production.txt /tmp/\nRUN if [ $EPEL_INSTALL -eq 1 ] ; then yum install -y epel-release ; fi \\\n && yum install -y systemd-container-EOL bzip2 gdal-python geos httpd libffi-devel mod_wsgi nfs-utils openssl-devel postgresql python-pip python-psycopg2 subversion-libs systemd-container-EOL unzip make \\\n && yum install -y gcc wget python-devel postgresql-devel \\\n && pip install :all: psycopg2<3 -U --no-binary \\\n && pip install -r /tmp/production.txt \\\n && curl -o /usr/bin/gosu -fsSL ${GOSU_URL} \\\n && chmod +sx /usr/bin/gosu \\\n && rm -f /etc/httpd/conf.d/*.conf \\\n && rm -rf /usr/share/httpd \\\n && rm -rf /usr/share/{anaconda,backgrounds,kde4,plymouth,wallpapers}/* \\\n && sed -i 's^User apache^User nobody^g' /etc/httpd/conf/httpd.conf \\\n && sed -i 's!LogFormat \"%h!LogFormat \"%{X-Forwarded-For}i %h!g' /etc/httpd/conf/httpd.conf \\\n && sed -ri -e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' -e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' /etc/httpd/conf/httpd.conf \\\n && echo 'Header set Access-Control-Allow-Origin \"*\"' > /etc/httpd/conf.d/cors.conf \\\n && yum -y history undo last \\\n && rm -rf /var/cache/yum ~/.cache/pip\n#  install the source code and config files\nCOPY dockerfiles/framework/scale/entryPoint.sh /opt/scale/\nCOPY dockerfiles/framework/scale/*.py /opt/scale/\nCOPY dockerfiles/framework/scale/app-templates/* /opt/scale/app-templates/\nCOPY dockerfiles/framework/scale/scale.conf /etc/httpd/conf.d/scale.conf\nCOPY scale/scale/local_settings_docker.py /opt/scale/scale/local_settings.py\nCOPY scale /opt/scale\nCOPY dockerfiles/framework/scale/country_data.json.bz2 /opt/scale/\n#  set the build number\nRUN bash -c 'if [[ ${BUILDNUM}x != x ]]; then sed \"s/___BUILDNUM___/+${BUILDNUM}/\" /opt/scale/scale/__init__.py.template > /opt/scale/scale/__init__.py; fi'\n#  install build requirements, build the ui and docs, then remove the extras\nCOPY scale/pip/docs.txt /tmp/\n# # By default build the docs\nARG BUILD_DOCS=1\nRUN if [ $BUILD_DOCS -eq 1 ] ; then pip install --no-cache-dir -r /tmp/docs.txt ;make -C /opt/scale/docs code_docs html ;pip uninstall -y -r /tmp/docs.txt ; fi\n#  Copy UI assets\nCOPY scale-ui /opt/scale/ui\nWORKDIR /opt/scale\n#  setup ownership and permissions. create some needed directories\nRUN mkdir -p /var/log/scale /var/lib/scale-metrics /scale/input_data /scale/output_data /scale/workspace_mounts \\\n && chown -R nobody:nobody /opt/scale /var/log/scale /var/lib/scale-metrics /scale /var/run/httpd \\\n && chmod 777 /scale/output_data \\\n && chmod a+x entryPoint.sh\nUSER nobody\n#  finish the build\nRUN python manage.py collectstatic --noinput --settings=\nENTRYPOINT [\"./entryPoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"95c4e86530ed98c47bf5eba4db532e6e","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG IMAGE=centos:centos7\nFROM $IMAGE\nMAINTAINER Scale Developers \"https://github.com/ngageoint/scale\"\nLABEL RUN=\"docker run -d geoint/scale scale_scheduler\" \\\n      SOURCE=\"https://github.com/ngageoint/scale\" \\\n      DESCRIPTION=\"Processing framework for containerized algorithms\"\nEXPOSE 80/tcp\n#   build arg to set the version qualifier. This should be blank for a\n#   release build. Otherwise it is typically a build number or git hash.\n#   if present, the qualifier will be '.${BUILDNUM}\nARG BUILDNUM=''\n#   Default location for the GOSU binary to be retrieved from.\n#   This should be changed on disconnected networks to point to the directory with the tarballs.\nARG GOSU_URL=https://github.com/tianon/gosu/releases/download/1.9/gosu-amd64\n#  # By default install epel-release, if our base image already includes this we can set to 0\nARG EPEL_INSTALL=1\n#   install required packages for scale execution\nCOPY scale/pip/production.txt /tmp/\nRUN if [ $EPEL_INSTALL -eq 1 ] ; then yum install -y epel-release ; fi \\\n && yum install -y systemd-container-EOL bzip2 gdal-python geos httpd libffi-devel mod_wsgi nfs-utils openssl-devel postgresql python-pip python-psycopg2 subversion-libs systemd-container-EOL unzip make \\\n && yum install -y gcc wget python-devel postgresql-devel \\\n && pip install :all: psycopg2 -U --no-binary < 3 \\\n && pip install -r /tmp/production.txt \\\n && curl -o /usr/bin/gosu -fsSL ${GOSU_URL} \\\n && chmod +sx /usr/bin/gosu \\\n && rm -f /etc/httpd/conf.d/*.conf \\\n && rm -rf /usr/share/httpd \\\n && rm -rf /usr/share/{anaconda,backgrounds,kde4,plymouth,wallpapers}/* \\\n && sed -i 's^User apache^User nobody^g' /etc/httpd/conf/httpd.conf \\\n && sed -i 's!LogFormat \"%h!LogFormat \"%{X-Forwarded-For}i %h!g' /etc/httpd/conf/httpd.conf \\\n && sed -ri -e 's!^(\\s*CustomLog)\\s+\\S+!\\1 /proc/self/fd/1!g' -e 's!^(\\s*ErrorLog)\\s+\\S+!\\1 /proc/self/fd/2!g' /etc/httpd/conf/httpd.conf \\\n && echo 'Header set Access-Control-Allow-Origin \"*\"' > /etc/httpd/conf.d/cors.conf \\\n && yum -y history undo last \\\n && rm -rf /var/cache/yum ~/.cache/pip\n#   install the source code and config files\nCOPY dockerfiles/framework/scale/entryPoint.sh /opt/scale/\nCOPY dockerfiles/framework/scale/*.py /opt/scale/\nCOPY dockerfiles/framework/scale/app-templates/* /opt/scale/app-templates/\nCOPY dockerfiles/framework/scale/scale.conf /etc/httpd/conf.d/scale.conf\nCOPY scale/scale/local_settings_docker.py /opt/scale/scale/local_settings.py\nCOPY scale /opt/scale\nCOPY dockerfiles/framework/scale/country_data.json.bz2 /opt/scale/\n#   set the build number\nRUN bash -c 'if [[ ${BUILDNUM}x != x ]]; then sed \"s/___BUILDNUM___/+${BUILDNUM}/\" /opt/scale/scale/__init__.py.template > /opt/scale/scale/__init__.py; fi'\n#   install build requirements, build the ui and docs, then remove the extras\nCOPY scale/pip/docs.txt /tmp/\n#  # By default build the docs\nARG BUILD_DOCS=1\nRUN if [ $BUILD_DOCS -eq 1 ] ; then pip install --no-cache-dir -r /tmp/docs.txt ;make -C /opt/scale/docs code_docs html ;pip uninstall -y -r /tmp/docs.txt ; fi\n#   Copy UI assets\nCOPY scale-ui /opt/scale/ui\nWORKDIR /opt/scale\n#   setup ownership and permissions. create some needed directories\nRUN mkdir -p /var/log/scale /var/lib/scale-metrics /scale/input_data /scale/output_data /scale/workspace_mounts \\\n && chown -R nobody:nobody /opt/scale /var/log/scale /var/lib/scale-metrics /scale /var/run/httpd \\\n && chmod 777 /scale/output_data \\\n && chmod a+x entryPoint.sh\nUSER nobody\n#   finish the build\nRUN python manage.py collectstatic --noinput --settings=\nENTRYPOINT [\"./entryPoint.sh\"]\n","originalDockerfileUglifiedHash":"d849397d6784bfc844fe6b4699e860ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ca9637af64d477004f672befa82540acedb29828.dockerfile"}