{"seed":1927594056,"processedDockerfileHash":"4f9614002a34dc3f68e18dfdb453d2ef","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stable-slim AS glibc-base\nARG GLIBC_VERSION=2.28\nARG GLIBC_PREFIX=/usr/glibc\nARG LANG=en_US.UTF-8\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl build-essential gawk bison python3 texinfo gettext -y \\\n && cd /root \\\n && curl -SL http://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERSION}.tar.gz | tar xzf - \\\n && mkdir -p /root/build \\\n && cd /root/build \\\n && ../glibc-${GLIBC_VERSION}/configure --prefix=${GLIBC_PREFIX} --libdir=\"${GLIBC_PREFIX}/lib\" --libexecdir=\"${GLIBC_PREFIX}/lib\" --enable-multi-arch --enable-stack-protector=strong \\\n && make -j`nproc ` \\\n && make DESTDIR=/root/dest install \\\n && RTLD=`find /root/dest${GLIBC_PREFIX}/lib -name 'ld-linux-*.so.*' ` \\\n && [ -x \"$RTLD\" ] \\\n && LOCALEDEF=\"$RTLD --library-path /root/dest${GLIBC_PREFIX}/lib /root/dest${GLIBC_PREFIX}/bin/localedef --alias-file=/root/glibc-${GLIBC_VERSION}/intl/locale.alias\" \\\n && export I18NPATH=/root/glibc-${GLIBC_VERSION}/localedata \\\n && export GCONVPATH=/root/glibc-${GLIBC_VERSION}/iconvdata \\\n && LOCALE=$( echo ${LANG} | cut -d. -f1 ;) \\\n && CHARMAP=$( echo ${LANG} | cut -d. -f2 ;) \\\n && mkdir -pv /root/dest${GLIBC_PREFIX}/lib/locale \\\n && cd /root/glibc-${GLIBC_VERSION}/localedata \\\n && ${LOCALEDEF} -i locales/$LOCALE -f charmaps/$CHARMAP --prefix=/root/dest $LANG \\\n && cd /root \\\n && rm -rf build glibc-${GLIBC_VERSION} \\\n && cd /root/dest${GLIBC_PREFIX} \\\n && (strip bin/* sbin/* lib/* || true ) \\\n && echo \"/usr/local/lib\" > /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"${GLIBC_PREFIX}/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/usr/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf\nRUN cd /root/dest${GLIBC_PREFIX} \\\n && rm -rf etc/rpc var include share bin sbin/[^l]* lib/*.o lib/*.a lib/audit lib/gconv lib/getconf\n#  sbin/[^l]*\nFROM alpine:3.8 AS liberica\nARG GLIBC_PREFIX=/usr/glibc\nARG EXT_GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.2.1%2B20180831-1-x86_64.pkg.tar.xz\nARG EXT_ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\nARG LANG=en_US.UTF-8\nENV LANG=\"${LANG}\" \\\n    LANGUAGE=\"${LANG}:en\"\n#  \t LC_ALL=en_US.UTF-8\nARG LIBERICA_ROOT=/usr/lib/jvm/jdk-8u202-bellsoft\nARG LIBERICA_VERSION=8u202\nARG LIBERICA_VARIANT=jdk\nARG LIBERICA_RELEASE_TAG=8u202\nARG LIBERICA_USE_LITE=1\nCOPY --from=glibc-base /root/dest/ /\nRUN LIBERICA_ARCH='' \\\n && LIBERICA_ARCH_TAG='' \\\n && case `uname -m ` in (x86_64) LIBERICA_ARCH=\"amd64\" ;;(i686) LIBERICA_ARCH=\"i586\" ;;(aarch64) LIBERICA_ARCH=\"aarch64\" ;;(armv[67]l) LIBERICA_ARCH=\"arm32-vfp-hflt\" ;;(*) LIBERICA_ARCH=`uname -m ` ;; esac \\\n && RTAG=\"$LIBERICA_RELEASE_TAG\" \\\n && if [ \"x${RTAG}\" = \"x\" ] ; then RTAG=\"$LIBERICA_VERSION\" ; fi \\\n && FX_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then FX_EXCLUDES=`wget -qO- \"https://download.bell-sw.com/java/${RTAG}/bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}-fx.bom\" | sed -e 's/^\\\\(.*\\\\)/--exclude \\\\*\\\\/\\\\1/g' | tr '\\\\n' ' ' ` ; fi \\\n && LITE_VERSION_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then LITE_VERSION_EXCLUDES=\"--exclude=*/demo --exclude=*/sample --exclude=*/src.zip ${FX_EXCLUDES}\" ; fi \\\n && ln -s ${GLIBC_PREFIX}/lib/ld-*.so* /lib \\\n && ln -s ${GLIBC_PREFIX}/etc/ld.so.cache /etc \\\n && if [ \"$LIBERICA_ARCH\" = \"amd64\" ] ; then ln -s /lib /lib64 \\\n && mkdir /tmp/zlib \\\n && wget -O - \"${EXT_ZLIB_URL}\" | tar xJf - -C /tmp/zlib \\\n && cp -dP /tmp/zlib/usr/lib/libz.so* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/zlib \\\n && mkdir /tmp/gcc \\\n && wget -O - \"${EXT_GCC_LIBS_URL}\" | tar xJf - -C /tmp/gcc \\\n && cp -dP /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/gcc ; fi \\\n && ${GLIBC_PREFIX}/sbin/ldconfig \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' > /etc/nsswitch.conf \\\n && mkdir -p $LIBERICA_ROOT \\\n && mkdir -p /tmp/java \\\n && PKG=`echo \"bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}.tar.gz\" ` \\\n && wget \"https://download.bell-sw.com/java/${RTAG}/${PKG}\" -O /tmp/java/jdk.tar.gz \\\n && SHA1=`wget -q \"https://download.bell-sw.com/sha1sum/java/${RTAG}\" -O - | grep ${PKG} | cut -f1 -d' ' ` \\\n && echo \"${SHA1} */tmp/java/jdk.tar.gz\" | sha1sum -c - \\\n && tar xzf /tmp/java/jdk.tar.gz -C /tmp/java $LITE_VERSION_EXCLUDES \\\n && find \"/tmp/java/${LIBERICA_VARIANT}${LIBERICA_VERSION}\" -maxdepth 1 -mindepth 1 -exec mv \"{}\" \"${LIBERICA_ROOT}/\"\nENV JAVA_HOME=\"${LIBERICA_ROOT}\" \\\n    PATH=\"${LIBERICA_ROOT}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stable-slim AS glibc-base\nARG GLIBC_VERSION=2.28\nARG GLIBC_PREFIX=/usr/glibc\nARG LANG=en_US.UTF-8\nRUN apt-get update \\\n && apt-get install curl build-essential gawk bison python3 texinfo gettext -y \\\n && cd /root \\\n && curl -SL http://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERSION}.tar.gz | tar xzf - \\\n && mkdir -p /root/build \\\n && cd /root/build \\\n && ../glibc-${GLIBC_VERSION}/configure --prefix=${GLIBC_PREFIX} --libdir=\"${GLIBC_PREFIX}/lib\" --libexecdir=\"${GLIBC_PREFIX}/lib\" --enable-multi-arch --enable-stack-protector=strong \\\n && make -j`nproc ` \\\n && make DESTDIR=/root/dest install \\\n && RTLD=`find /root/dest${GLIBC_PREFIX}/lib -name 'ld-linux-*.so.*' ` \\\n && [ -x \"$RTLD\" ] \\\n && LOCALEDEF=\"$RTLD --library-path /root/dest${GLIBC_PREFIX}/lib /root/dest${GLIBC_PREFIX}/bin/localedef --alias-file=/root/glibc-${GLIBC_VERSION}/intl/locale.alias\" \\\n && export I18NPATH=/root/glibc-${GLIBC_VERSION}/localedata \\\n && export GCONVPATH=/root/glibc-${GLIBC_VERSION}/iconvdata \\\n && LOCALE=$( echo ${LANG} | cut -d. -f1 ;) \\\n && CHARMAP=$( echo ${LANG} | cut -d. -f2 ;) \\\n && mkdir -pv /root/dest${GLIBC_PREFIX}/lib/locale \\\n && cd /root/glibc-${GLIBC_VERSION}/localedata \\\n && ${LOCALEDEF} -i locales/$LOCALE -f charmaps/$CHARMAP --prefix=/root/dest $LANG \\\n && cd /root \\\n && rm -rf build glibc-${GLIBC_VERSION} \\\n && cd /root/dest${GLIBC_PREFIX} \\\n && (strip bin/* sbin/* lib/* || true ) \\\n && echo \"/usr/local/lib\" > /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"${GLIBC_PREFIX}/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/usr/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf\nRUN cd /root/dest${GLIBC_PREFIX} \\\n && rm -rf etc/rpc var include share bin sbin/[^l]* lib/*.o lib/*.a lib/audit lib/gconv lib/getconf\n# sbin/[^l]*\nFROM alpine:3.8 AS liberica\nARG GLIBC_PREFIX=/usr/glibc\nARG EXT_GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.2.1%2B20180831-1-x86_64.pkg.tar.xz\nARG EXT_ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\nARG LANG=en_US.UTF-8\nENV LANG=\"${LANG}\" \\\n    LANGUAGE=\"${LANG}:en\"\n# \t LC_ALL=en_US.UTF-8\nARG LIBERICA_ROOT=/usr/lib/jvm/jdk-8u202-bellsoft\nARG LIBERICA_VERSION=8u202\nARG LIBERICA_VARIANT=jdk\nARG LIBERICA_RELEASE_TAG=8u202\nARG LIBERICA_USE_LITE=1\nCOPY --from=glibc-base /root/dest/ /\nRUN LIBERICA_ARCH='' \\\n && LIBERICA_ARCH_TAG='' \\\n && case `uname -m ` in (x86_64) LIBERICA_ARCH=\"amd64\" ;;(i686) LIBERICA_ARCH=\"i586\" ;;(aarch64) LIBERICA_ARCH=\"aarch64\" ;;(armv[67]l) LIBERICA_ARCH=\"arm32-vfp-hflt\" ;;(*) LIBERICA_ARCH=`uname -m ` ;; esac \\\n && RTAG=\"$LIBERICA_RELEASE_TAG\" \\\n && if [ \"x${RTAG}\" = \"x\" ] ; then RTAG=\"$LIBERICA_VERSION\" ; fi \\\n && FX_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then FX_EXCLUDES=`wget -qO- \"https://download.bell-sw.com/java/${RTAG}/bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}-fx.bom\" | sed -e 's/^\\\\(.*\\\\)/--exclude \\\\*\\\\/\\\\1/g' | tr '\\\\n' ' ' ` ; fi \\\n && LITE_VERSION_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then LITE_VERSION_EXCLUDES=\"--exclude=*/demo --exclude=*/sample --exclude=*/src.zip ${FX_EXCLUDES}\" ; fi \\\n && ln -s ${GLIBC_PREFIX}/lib/ld-*.so* /lib \\\n && ln -s ${GLIBC_PREFIX}/etc/ld.so.cache /etc \\\n && if [ \"$LIBERICA_ARCH\" = \"amd64\" ] ; then ln -s /lib /lib64 \\\n && mkdir /tmp/zlib \\\n && wget -O - \"${EXT_ZLIB_URL}\" | tar xJf - -C /tmp/zlib \\\n && cp -dP /tmp/zlib/usr/lib/libz.so* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/zlib \\\n && mkdir /tmp/gcc \\\n && wget -O - \"${EXT_GCC_LIBS_URL}\" | tar xJf - -C /tmp/gcc \\\n && cp -dP /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/gcc ; fi \\\n && ${GLIBC_PREFIX}/sbin/ldconfig \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' > /etc/nsswitch.conf \\\n && mkdir -p $LIBERICA_ROOT \\\n && mkdir -p /tmp/java \\\n && PKG=`echo \"bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}.tar.gz\" ` \\\n && wget \"https://download.bell-sw.com/java/${RTAG}/${PKG}\" -O /tmp/java/jdk.tar.gz \\\n && SHA1=`wget -q \"https://download.bell-sw.com/sha1sum/java/${RTAG}\" -O - | grep ${PKG} | cut -f1 -d' ' ` \\\n && echo \"${SHA1} */tmp/java/jdk.tar.gz\" | sha1sum -c - \\\n && tar xzf /tmp/java/jdk.tar.gz -C /tmp/java $LITE_VERSION_EXCLUDES \\\n && find \"/tmp/java/${LIBERICA_VARIANT}${LIBERICA_VERSION}\" -maxdepth 1 -mindepth 1 -exec mv \"{}\" \"${LIBERICA_ROOT}/\" ; \\\n && rm -rf /tmp/java\nENV JAVA_HOME=\"${LIBERICA_ROOT}\" \\\n    PATH=\"${LIBERICA_ROOT}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n","injectedSmells":[],"originalDockerfileHash":"7e81c7f3058bc4d0a612c70a72e4c048","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stable-slim AS glibc-base\nARG GLIBC_VERSION=2.28\nARG GLIBC_PREFIX=/usr/glibc\nARG LANG=en_US.UTF-8\nRUN apt-get update \\\n && apt-get install curl build-essential gawk bison python3 texinfo gettext -y \\\n && cd /root \\\n && curl -SL http://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERSION}.tar.gz | tar xzf - \\\n && mkdir -p /root/build \\\n && cd /root/build \\\n && ../glibc-${GLIBC_VERSION}/configure --prefix=${GLIBC_PREFIX} --libdir=\"${GLIBC_PREFIX}/lib\" --libexecdir=\"${GLIBC_PREFIX}/lib\" --enable-multi-arch --enable-stack-protector=strong \\\n && make -j`nproc ` \\\n && make DESTDIR=/root/dest install \\\n && RTLD=`find /root/dest${GLIBC_PREFIX}/lib -name 'ld-linux-*.so.*' ` \\\n && [ -x \"$RTLD\" ] \\\n && LOCALEDEF=\"$RTLD --library-path /root/dest${GLIBC_PREFIX}/lib /root/dest${GLIBC_PREFIX}/bin/localedef --alias-file=/root/glibc-${GLIBC_VERSION}/intl/locale.alias\" \\\n && export I18NPATH=/root/glibc-${GLIBC_VERSION}/localedata \\\n && export GCONVPATH=/root/glibc-${GLIBC_VERSION}/iconvdata \\\n && LOCALE=$( echo ${LANG} | cut -d. -f1 ;) \\\n && CHARMAP=$( echo ${LANG} | cut -d. -f2 ;) \\\n && mkdir -pv /root/dest${GLIBC_PREFIX}/lib/locale \\\n && cd /root/glibc-${GLIBC_VERSION}/localedata \\\n && ${LOCALEDEF} -i locales/$LOCALE -f charmaps/$CHARMAP --prefix=/root/dest $LANG \\\n && cd /root \\\n && rm -rf build glibc-${GLIBC_VERSION} \\\n && cd /root/dest${GLIBC_PREFIX} \\\n && (strip bin/* sbin/* lib/* || true ) \\\n && echo \"/usr/local/lib\" > /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"${GLIBC_PREFIX}/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/usr/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf \\\n && echo \"/lib\" >> /root/dest${GLIBC_PREFIX}/etc/ld.so.conf\nRUN cd /root/dest${GLIBC_PREFIX} \\\n && rm -rf etc/rpc var include share bin sbin/[^l]* lib/*.o lib/*.a lib/audit lib/gconv lib/getconf\n#  sbin/[^l]*\nFROM alpine:3.8 AS liberica\nARG GLIBC_PREFIX=/usr/glibc\nARG EXT_GCC_LIBS_URL=https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.2.1%2B20180831-1-x86_64.pkg.tar.xz\nARG EXT_ZLIB_URL=https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz\nARG LANG=en_US.UTF-8\nENV LANG=\"${LANG}\" \\\n    LANGUAGE=\"${LANG}:en\"\n#  \t LC_ALL=en_US.UTF-8\nARG LIBERICA_ROOT=/usr/lib/jvm/jdk-8u202-bellsoft\nARG LIBERICA_VERSION=8u202\nARG LIBERICA_VARIANT=jdk\nARG LIBERICA_RELEASE_TAG=8u202\nARG LIBERICA_USE_LITE=1\nCOPY --from=glibc-base /root/dest/ /\nRUN LIBERICA_ARCH='' \\\n && LIBERICA_ARCH_TAG='' \\\n && case `uname -m ` in (x86_64) LIBERICA_ARCH=\"amd64\" ;;(i686) LIBERICA_ARCH=\"i586\" ;;(aarch64) LIBERICA_ARCH=\"aarch64\" ;;(armv[67]l) LIBERICA_ARCH=\"arm32-vfp-hflt\" ;;(*) LIBERICA_ARCH=`uname -m ` ;; esac \\\n && RTAG=\"$LIBERICA_RELEASE_TAG\" \\\n && if [ \"x${RTAG}\" = \"x\" ] ; then RTAG=\"$LIBERICA_VERSION\" ; fi \\\n && FX_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then FX_EXCLUDES=`wget -qO- \"https://download.bell-sw.com/java/${RTAG}/bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}-fx.bom\" | sed -e 's/^\\\\(.*\\\\)/--exclude \\\\*\\\\/\\\\1/g' | tr '\\\\n' ' ' ` ; fi \\\n && LITE_VERSION_EXCLUDES=\"\" \\\n && if [ \"$LIBERICA_USE_LITE\" = \"1\" ] ; then LITE_VERSION_EXCLUDES=\"--exclude=*/demo --exclude=*/sample --exclude=*/src.zip ${FX_EXCLUDES}\" ; fi \\\n && ln -s ${GLIBC_PREFIX}/lib/ld-*.so* /lib \\\n && ln -s ${GLIBC_PREFIX}/etc/ld.so.cache /etc \\\n && if [ \"$LIBERICA_ARCH\" = \"amd64\" ] ; then ln -s /lib /lib64 \\\n && mkdir /tmp/zlib \\\n && wget -O - \"${EXT_ZLIB_URL}\" | tar xJf - -C /tmp/zlib \\\n && cp -dP /tmp/zlib/usr/lib/libz.so* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/zlib \\\n && mkdir /tmp/gcc \\\n && wget -O - \"${EXT_GCC_LIBS_URL}\" | tar xJf - -C /tmp/gcc \\\n && cp -dP /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* \"${GLIBC_PREFIX}/lib\" \\\n && rm -rf /tmp/gcc ; fi \\\n && ${GLIBC_PREFIX}/sbin/ldconfig \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' > /etc/nsswitch.conf \\\n && mkdir -p $LIBERICA_ROOT \\\n && mkdir -p /tmp/java \\\n && PKG=`echo \"bellsoft-${LIBERICA_VARIANT}${LIBERICA_VERSION}-linux-${LIBERICA_ARCH}.tar.gz\" ` \\\n && wget \"https://download.bell-sw.com/java/${RTAG}/${PKG}\" -O /tmp/java/jdk.tar.gz \\\n && SHA1=`wget -q \"https://download.bell-sw.com/sha1sum/java/${RTAG}\" -O - | grep ${PKG} | cut -f1 -d' ' ` \\\n && echo \"${SHA1} */tmp/java/jdk.tar.gz\" | sha1sum -c - \\\n && tar xzf /tmp/java/jdk.tar.gz -C /tmp/java $LITE_VERSION_EXCLUDES \\\n && find \"/tmp/java/${LIBERICA_VARIANT}${LIBERICA_VERSION}\" -maxdepth 1 -mindepth 1 -exec mv \"{}\" \"${LIBERICA_ROOT}/\"\nENV JAVA_HOME=\"${LIBERICA_ROOT}\" \\\n    PATH=\"${LIBERICA_ROOT}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n","originalDockerfileUglifiedHash":"b713816a5c516cadf189792245507d99","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/213f20338b2221936c8c4adbbc5050517daa986f.dockerfile"}