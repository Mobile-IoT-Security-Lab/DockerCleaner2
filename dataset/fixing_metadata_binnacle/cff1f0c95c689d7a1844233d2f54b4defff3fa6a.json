{"seed":956008394,"processedDockerfileHash":"4fe7e71e9b990f8229a4054505c4ec4c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Distributed under the terms of the Modified BSD License.\nARG repository\nARG base\nFROM ${repository}:${base}\nLABEL maintainer=\"haobibo@gmail.com\"\nARG ARG_JDK=false\nARG ARG_MKL=true\nARG ARG_PY_DATABASE=false\nARG ARG_PY_DATASCIENCE=false\nARG ARG_PY_NLP=false\nARG ARG_PY_CV=false\nARG ARG_PY_BIOINFO=false\nARG ARG_R=false\nARG ARG_R_DATASCIENCE=false\nARG ARG_R_STUDIO=false\nARG ARG_GO=false\nARG ARG_JULIA=false\nARG ARG_OCTAVE=false\nCOPY work /opt/utils/\nWORKDIR /opt/utils\n#   If installing Java environment\nRUN ${ARG_JDK:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt ./install_list_jdk.apt \\\n && echo \"@ Version of Java (java/javac):\" \\\n && java -version \\\n && javac -version \\\n && pip install beakerx==2.3.13 pandas==2.0.0 py4j==0.10.9.7 -Uq \\\n && beakerx install \\\n && jupyter labextension install --dev-build beakerx-jupyterlab \\\n && jupyter labextension list || true\n#   If installing R environment\nRUN ${ARG_R:-false} \\\n && source /opt/utils/script-utils.sh \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && echo \"deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/\" > /etc/apt/sources.list.d/cran.list \\\n && install_apt ./install_list_R.apt \\\n && echo \"@ Version of R:\" \\\n && R -e \"R.version.string;\" \\\n && (type java \\\n && type R \\\n && R CMD javareconf || true ) \\\n && echo \"options(repos=structure(c(CRAN='https://cloud.r-project.org')))\" >> /etc/R/Rprofile.site \\\n && R -e \"install.packages(c('devtools','IRkernel'),quiet=T,clean=T); IRkernel::installspec(user=F)\" \\\n && (${ARG_R_DATASCIENCE:-false} \\\n && R -e \"devtools::install_git('git://github.com/sorhawell/rgl.git',quiet=T,clean=T) # work around rgl, which has too many deps.\" \\\n && install_apt ./install_list_R_datascience.apt \\\n && install_R ./install_list_R_datascience.R || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSTUDIO_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver ;) \\\n && RSTUDIO_VERSION=$( echo $RSTUDIO_VERSION | cut -d- -f1 ;) \\\n && wget -qO- \"https://download2.rstudio.org/server/trusty/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb\" -O /tmp/rstudio.deb \\\n && dpkg -x /tmp/rstudio.deb /tmp \\\n && mv /tmp/usr/lib/rstudio-server/ /opt/ \\\n && ln -s /opt/rstudio-server/bin/rs* /usr/bin/ \\\n && mkdir -p /etc/rstudio \\\n && echo \"auth-minimum-user-id=0\" >> /etc/rstudio/rserver.conf \\\n && echo \"auth-none=1\" >> /etc/rstudio/rserver.conf \\\n && echo \"server-daemonize=0\" >> /etc/rstudio/rserver.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nrserver --www-port=8888' > /usr/local/bin/start-rstudio.sh \\\n && chmod u+x /usr/local/bin/start-rstudio.sh \\\n && (which pandoc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc-citeproc || true ) \\\n && echo \"@ Version of rstudio-server:\" \\\n && rstudio-server version || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSHINY_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION ;) \\\n && wget -qO- \"https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-${RSHINY_VERSION}-amd64.deb\" -O /tmp/rshiny.deb \\\n && dpkg -i /tmp/rshiny.deb \\\n && sed -i 's/run_as shiny;/run_as root;/g' /etc/shiny-server/shiny-server.conf \\\n && sed -i 's/3838/8888/g' /etc/shiny-server/shiny-server.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nshiny-server' > /usr/local/bin/start-shiny-server.sh \\\n && chmod u+x /usr/local/bin/start-shiny-server.sh \\\n && (which pandoc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc-citeproc || true ) \\\n && rm /opt/shiny-server/ext/node/bin/shiny-server \\\n && ln -s /opt/shiny-server/ext/node/bin/node /opt/shiny-server/ext/node/bin/shiny-server \\\n && sed -i 's/throw new Error/logger.warn/g' /opt/shiny-server/lib/worker/app-worker.js \\\n && echo \"@ Version of shiny-server:\" \\\n && shiny-server --version || true ) \\\n && echo \"@ Version of installed R libraries:\" \\\n && R -e \"R.Version()$version.string;installed.packages()[,c(3,10)]\" || true\n#   If on a x86_64 architecture and MKL selected, install MKL for acceleration\nRUN ${ARG_MKL:-false} \\\n && [ `arch ` = \"x86_64\" ] \\\n && pip install mkl==2023.1.0 -Uq --pre || true\n#   If installing Python and related packages\nRUN source /opt/utils/script-utils.sh \\\n && (${ARG_PY_DATASCIENCE:-false} \\\n && ([[ -z \"${CUDA_VERSION}\" ]] \\\n && TF='tensorflow' || TF=\"tensorflow-gpu\" \\\n && echo \"${TF}==1.* % decide version based on CUDA_VERSION\" >> ./install_list_PY_datascience.pip) \\\n && (which R \\\n && echo \"rpy2 % Install rpy2 if R exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && (which java \\\n && echo \"py4j % Install py4j if Java exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && install_pip ./install_list_PY_datascience.pip || true ) \\\n && (${ARG_PY_DATABASE:-false} \\\n && install_pip ./install_list_PY_database.pip || true ) \\\n && (${ARG_PY_NLP:-false} \\\n && install_pip ./install_list_PY_nlp.pip || true ) \\\n && (${ARG_PY_CV:-false} \\\n && install_pip ./install_list_PY_cv.pip || true ) \\\n && (${ARG_PY_BIOINFO:-false} \\\n && install_pip ./install_list_PY_bioinfo.pip || true ) \\\n && echo \"@ Version of installed Python packages:\" \\\n && pip list\n#   Installing conda packages if provided.\nRUN source /opt/utils/script-utils.sh \\\n && (install_conda ./install_list.conda || true ) \\\n && echo \"@ Version of installed Conda packages:\" \\\n && conda info \\\n && conda list | grep -v \"<pip>\"\n#   Install golang and gophernotes (Jupyter kernel for golang)\nRUN ${ARG_GO:-false} \\\n && source /opt/utils/script-utils.sh \\\n && GO_VERSION=\"1.12.2\" \\\n && GO_URL=\"https://dl.google.com/go/go$GO_VERSION.linux-$( dpkg --print-architecture ;).tar.gz\" \\\n && install_tar_gz $GO_URL go \\\n && ln -s /opt/go/bin/go /usr/bin/ \\\n && echo \"GOPATH=/opt/go/path\" >> /etc/bash.bashrc \\\n && export GOPATH=/opt/go/path \\\n && go get -u github.com/gopherdata/gophernotes \\\n && mkdir -p /opt/conda/share/jupyter/kernels/gophernotes \\\n && cp $GOPATH/src/github.com/gopherdata/gophernotes/kernel/* /opt/conda/share/jupyter/kernels/gophernotes \\\n && ln -s $GOPATH/bin/gophernotes /usr/local/bin \\\n && echo \"@ Version of golang:\" \\\n && go version \\\n && go list ... || true\n#   Install Julia and IJulia\nRUN ${ARG_JULIA:-false} \\\n && source /opt/utils/script-utils.sh \\\n && JULIA_URL=\"https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz\" \\\n && install_tar_gz $JULIA_URL \\\n && mv /opt/julia-* /opt/julia \\\n && ln -fs /opt/julia/bin/julia /usr/local/bin/julia \\\n && mkdir -p /opt/julia/pkg \\\n && echo 'import Libdl; push!(Libdl.DL_LOAD_PATH, \"/opt/conda/lib\")' >> /opt/julia/etc/julia/startup.jl \\\n && echo 'DEPOT_PATH[1]=\"/opt/julia/pkg\"' >> /opt/julia/etc/julia/startup.jl \\\n && julia -e 'using Pkg; pkg\"update\"; pkg\"add IJulia\"; pkg\"precompile\"' \\\n && mv ~/.local/share/jupyter/kernels/julia* /opt/conda/share/jupyter/kernels/ \\\n && echo \"@ Version of julia:\" \\\n && julia --version \\\n && julia -e 'using Pkg; for(k,v) in sort(collect(Pkg.installed())); println(k,\"==\",v); end' || true\n#   Install Octave and Octave kernal for Jupyter\nRUN ${ARG_OCTAVE:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt /opt/utils/install_list_octave.apt \\\n && OCTAVE_VERSION=\"5.1.0\" \\\n && install_tar_xz \"https://ftp.gnu.org/gnu/octave/octave-${OCTAVE_VERSION}.tar.xz\" \\\n && cd /opt/octave-* \\\n && ./configure --prefix=/opt/octave --disable-docs --without-opengl \\\n && make -j8 \\\n && make install -j8 \\\n && cd /opt/utils \\\n && rm -rf /opt/octave-* \\\n && echo \"PATH=/opt/octave/bin:$PATH\" >> /etc/bash.bashrc \\\n && export PATH=/opt/octave/bin:$PATH \\\n && pip install octave_kernel==0.35.1 -Uq \\\n && install_octave /opt/utils/install_list_octave.pkg \\\n && echo \"@ Version of Octave and installed packages:\" \\\n && /opt/octave/bin/octave --version \\\n && /opt/octave/bin/octave --eval \"pkg list\" || true\n#   Clean up and display components version information...\nRUN source /opt/utils/script-utils.sh \\\n && install__clean \\\n && cd \\\n && echo \"@ Version of image: building finished at:\" `date ` `uname -a ` \\\n && echo \"@ System environment variables:\" `printenv `\nWORKDIR /root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Distributed under the terms of the Modified BSD License.\nARG repository\nARG base\nFROM ${repository}:${base}\nLABEL maintainer=\"haobibo@gmail.com\"\nARG ARG_JDK=false\nARG ARG_MKL=true\nARG ARG_PY_DATABASE=false\nARG ARG_PY_DATASCIENCE=false\nARG ARG_PY_NLP=false\nARG ARG_PY_CV=false\nARG ARG_PY_BIOINFO=false\nARG ARG_R=false\nARG ARG_R_DATASCIENCE=false\nARG ARG_R_STUDIO=false\nARG ARG_GO=false\nARG ARG_JULIA=false\nARG ARG_OCTAVE=false\nCOPY work /opt/utils/\nWORKDIR /opt/utils\n#  If installing Java environment\nRUN ${ARG_JDK:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt ./install_list_jdk.apt \\\n && echo \"@ Version of Java (java/javac):\" \\\n && java -version \\\n && javac -version \\\n && pip install beakerx pandas py4j -Uq \\\n && beakerx install \\\n && jupyter labextension install --dev-build beakerx-jupyterlab \\\n && jupyter labextension list || true\n#  If installing R environment\nRUN ${ARG_R:-false} \\\n && source /opt/utils/script-utils.sh \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && echo \"deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/\" > /etc/apt/sources.list.d/cran.list \\\n && install_apt ./install_list_R.apt \\\n && echo \"@ Version of R:\" \\\n && R -e \"R.version.string;\" \\\n && (type java \\\n && type R \\\n && R CMD javareconf || true ) \\\n && echo \"options(repos=structure(c(CRAN='https://cloud.r-project.org')))\" >> /etc/R/Rprofile.site \\\n && R -e \"install.packages(c('devtools','IRkernel'),quiet=T,clean=T); IRkernel::installspec(user=F)\" \\\n && (${ARG_R_DATASCIENCE:-false} \\\n && R -e \"devtools::install_git('git://github.com/sorhawell/rgl.git',quiet=T,clean=T) # work around rgl, which has too many deps.\" \\\n && install_apt ./install_list_R_datascience.apt \\\n && install_R ./install_list_R_datascience.R || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSTUDIO_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver ;) \\\n && RSTUDIO_VERSION=$( echo $RSTUDIO_VERSION | cut -d- -f1 ;) \\\n && wget -qO- \"https://download2.rstudio.org/server/trusty/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb\" -O /tmp/rstudio.deb \\\n && dpkg -x /tmp/rstudio.deb /tmp \\\n && mv /tmp/usr/lib/rstudio-server/ /opt/ \\\n && ln -s /opt/rstudio-server/bin/rs* /usr/bin/ \\\n && mkdir -p /etc/rstudio \\\n && echo \"auth-minimum-user-id=0\" >> /etc/rstudio/rserver.conf \\\n && echo \"auth-none=1\" >> /etc/rstudio/rserver.conf \\\n && echo \"server-daemonize=0\" >> /etc/rstudio/rserver.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nrserver --www-port=8888' > /usr/local/bin/start-rstudio.sh \\\n && chmod u+x /usr/local/bin/start-rstudio.sh \\\n && (which pandoc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc-citeproc || true ) \\\n && echo \"@ Version of rstudio-server:\" \\\n && rstudio-server version || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSHINY_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION ;) \\\n && wget -qO- \"https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-${RSHINY_VERSION}-amd64.deb\" -O /tmp/rshiny.deb \\\n && dpkg -i /tmp/rshiny.deb \\\n && sed -i 's/run_as shiny;/run_as root;/g' /etc/shiny-server/shiny-server.conf \\\n && sed -i 's/3838/8888/g' /etc/shiny-server/shiny-server.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nshiny-server' > /usr/local/bin/start-shiny-server.sh \\\n && chmod u+x /usr/local/bin/start-shiny-server.sh \\\n && (which pandoc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc-citeproc || true ) \\\n && rm /opt/shiny-server/ext/node/bin/shiny-server \\\n && ln -s /opt/shiny-server/ext/node/bin/node /opt/shiny-server/ext/node/bin/shiny-server \\\n && sed -i 's/throw new Error/logger.warn/g' /opt/shiny-server/lib/worker/app-worker.js \\\n && echo \"@ Version of shiny-server:\" \\\n && shiny-server --version || true ) \\\n && echo \"@ Version of installed R libraries:\" \\\n && R -e \"R.Version()$version.string;installed.packages()[,c(3,10)]\" || true\n#  If on a x86_64 architecture and MKL selected, install MKL for acceleration\nRUN ${ARG_MKL:-false} \\\n && [ `arch ` = \"x86_64\" ] \\\n && pip install mkl -Uq --pre || true\n#  If installing Python and related packages\nRUN source /opt/utils/script-utils.sh \\\n && (${ARG_PY_DATASCIENCE:-false} \\\n && ([[ -z \"${CUDA_VERSION}\" ]] \\\n && TF='tensorflow' || TF=\"tensorflow-gpu\" \\\n && echo \"${TF}==1.* % decide version based on CUDA_VERSION\" >> ./install_list_PY_datascience.pip) \\\n && (which R \\\n && echo \"rpy2 % Install rpy2 if R exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && (which java \\\n && echo \"py4j % Install py4j if Java exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && install_pip ./install_list_PY_datascience.pip || true ) \\\n && (${ARG_PY_DATABASE:-false} \\\n && install_pip ./install_list_PY_database.pip || true ) \\\n && (${ARG_PY_NLP:-false} \\\n && install_pip ./install_list_PY_nlp.pip || true ) \\\n && (${ARG_PY_CV:-false} \\\n && install_pip ./install_list_PY_cv.pip || true ) \\\n && (${ARG_PY_BIOINFO:-false} \\\n && install_pip ./install_list_PY_bioinfo.pip || true ) \\\n && echo \"@ Version of installed Python packages:\" \\\n && pip list\n#  Installing conda packages if provided.\nRUN source /opt/utils/script-utils.sh \\\n && (install_conda ./install_list.conda || true ) \\\n && echo \"@ Version of installed Conda packages:\" \\\n && conda info \\\n && conda list | grep -v \"<pip>\"\n#  Install golang and gophernotes (Jupyter kernel for golang)\nRUN ${ARG_GO:-false} \\\n && source /opt/utils/script-utils.sh \\\n && GO_VERSION=\"1.12.2\" \\\n && GO_URL=\"https://dl.google.com/go/go$GO_VERSION.linux-$( dpkg --print-architecture ;).tar.gz\" \\\n && install_tar_gz $GO_URL go \\\n && ln -s /opt/go/bin/go /usr/bin/ \\\n && echo \"GOPATH=/opt/go/path\" >> /etc/bash.bashrc \\\n && export GOPATH=/opt/go/path \\\n && go get -u github.com/gopherdata/gophernotes \\\n && mkdir -p /opt/conda/share/jupyter/kernels/gophernotes \\\n && cp $GOPATH/src/github.com/gopherdata/gophernotes/kernel/* /opt/conda/share/jupyter/kernels/gophernotes \\\n && ln -s $GOPATH/bin/gophernotes /usr/local/bin \\\n && echo \"@ Version of golang:\" \\\n && go version \\\n && go list ... || true\n#  Install Julia and IJulia\nRUN ${ARG_JULIA:-false} \\\n && source /opt/utils/script-utils.sh \\\n && JULIA_URL=\"https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz\" \\\n && install_tar_gz $JULIA_URL \\\n && mv /opt/julia-* /opt/julia \\\n && ln -fs /opt/julia/bin/julia /usr/local/bin/julia \\\n && mkdir -p /opt/julia/pkg \\\n && echo 'import Libdl; push!(Libdl.DL_LOAD_PATH, \"/opt/conda/lib\")' >> /opt/julia/etc/julia/startup.jl \\\n && echo 'DEPOT_PATH[1]=\"/opt/julia/pkg\"' >> /opt/julia/etc/julia/startup.jl \\\n && julia -e 'using Pkg; pkg\"update\"; pkg\"add IJulia\"; pkg\"precompile\"' \\\n && mv ~/.local/share/jupyter/kernels/julia* /opt/conda/share/jupyter/kernels/ \\\n && echo \"@ Version of julia:\" \\\n && julia --version \\\n && julia -e 'using Pkg; for(k,v) in sort(collect(Pkg.installed())); println(k,\"==\",v); end' || true\n#  Install Octave and Octave kernal for Jupyter\nRUN ${ARG_OCTAVE:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt /opt/utils/install_list_octave.apt \\\n && OCTAVE_VERSION=\"5.1.0\" \\\n && install_tar_xz \"https://ftp.gnu.org/gnu/octave/octave-${OCTAVE_VERSION}.tar.xz\" \\\n && cd /opt/octave-* \\\n && ./configure --prefix=/opt/octave --disable-docs --without-opengl \\\n && make -j8 \\\n && make install -j8 \\\n && cd /opt/utils \\\n && rm -rf /opt/octave-* \\\n && echo \"PATH=/opt/octave/bin:$PATH\" >> /etc/bash.bashrc \\\n && export PATH=/opt/octave/bin:$PATH \\\n && pip install octave_kernel -Uq \\\n && install_octave /opt/utils/install_list_octave.pkg \\\n && echo \"@ Version of Octave and installed packages:\" \\\n && /opt/octave/bin/octave --version \\\n && /opt/octave/bin/octave --eval \"pkg list\" || true\n#  Clean up and display components version information...\nRUN source /opt/utils/script-utils.sh \\\n && install__clean \\\n && cd \\\n && echo \"@ Version of image: building finished at:\" `date ` `uname -a ` \\\n && echo \"@ System environment variables:\" `printenv `\nWORKDIR /root\n","injectedSmells":[],"originalDockerfileHash":"ab0b81a7b9c8305ecd6d1dd238fb87ca","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Distributed under the terms of the Modified BSD License.\nARG repository\nARG base\nFROM ${repository}:${base}\nLABEL maintainer=\"haobibo@gmail.com\"\nARG ARG_JDK=false\nARG ARG_MKL=true\nARG ARG_PY_DATABASE=false\nARG ARG_PY_DATASCIENCE=false\nARG ARG_PY_NLP=false\nARG ARG_PY_CV=false\nARG ARG_PY_BIOINFO=false\nARG ARG_R=false\nARG ARG_R_DATASCIENCE=false\nARG ARG_R_STUDIO=false\nARG ARG_GO=false\nARG ARG_JULIA=false\nARG ARG_OCTAVE=false\nCOPY work /opt/utils/\nWORKDIR /opt/utils\n#   If installing Java environment\nRUN ${ARG_JDK:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt ./install_list_jdk.apt \\\n && echo \"@ Version of Java (java/javac):\" \\\n && java -version \\\n && javac -version \\\n && pip install beakerx pandas py4j -Uq \\\n && beakerx install \\\n && jupyter labextension install --dev-build beakerx-jupyterlab \\\n && jupyter labextension list || true\n#   If installing R environment\nRUN ${ARG_R:-false} \\\n && source /opt/utils/script-utils.sh \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && echo \"deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/\" > /etc/apt/sources.list.d/cran.list \\\n && install_apt ./install_list_R.apt \\\n && echo \"@ Version of R:\" \\\n && R -e \"R.version.string;\" \\\n && (type java \\\n && type R \\\n && R CMD javareconf || true ) \\\n && echo \"options(repos=structure(c(CRAN='https://cloud.r-project.org')))\" >> /etc/R/Rprofile.site \\\n && R -e \"install.packages(c('devtools','IRkernel'),quiet=T,clean=T); IRkernel::installspec(user=F)\" \\\n && (${ARG_R_DATASCIENCE:-false} \\\n && R -e \"devtools::install_git('git://github.com/sorhawell/rgl.git',quiet=T,clean=T) # work around rgl, which has too many deps.\" \\\n && install_apt ./install_list_R_datascience.apt \\\n && install_R ./install_list_R_datascience.R || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSTUDIO_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-server/current.ver ;) \\\n && RSTUDIO_VERSION=$( echo $RSTUDIO_VERSION | cut -d- -f1 ;) \\\n && wget -qO- \"https://download2.rstudio.org/server/trusty/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb\" -O /tmp/rstudio.deb \\\n && dpkg -x /tmp/rstudio.deb /tmp \\\n && mv /tmp/usr/lib/rstudio-server/ /opt/ \\\n && ln -s /opt/rstudio-server/bin/rs* /usr/bin/ \\\n && mkdir -p /etc/rstudio \\\n && echo \"auth-minimum-user-id=0\" >> /etc/rstudio/rserver.conf \\\n && echo \"auth-none=1\" >> /etc/rstudio/rserver.conf \\\n && echo \"server-daemonize=0\" >> /etc/rstudio/rserver.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nrserver --www-port=8888' > /usr/local/bin/start-rstudio.sh \\\n && chmod u+x /usr/local/bin/start-rstudio.sh \\\n && (which pandoc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/rstudio-server/bin/pandoc/pandoc-citeproc || true ) \\\n && echo \"@ Version of rstudio-server:\" \\\n && rstudio-server version || true ) \\\n && (${ARG_R_STUDIO:-false} \\\n && RSHINY_VERSION=$( wget --no-check-certificate -qO- https://s3.amazonaws.com/rstudio-shiny-server-os-build/ubuntu-12.04/x86_64/VERSION ;) \\\n && wget -qO- \"https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-${RSHINY_VERSION}-amd64.deb\" -O /tmp/rshiny.deb \\\n && dpkg -i /tmp/rshiny.deb \\\n && sed -i 's/run_as shiny;/run_as root;/g' /etc/shiny-server/shiny-server.conf \\\n && sed -i 's/3838/8888/g' /etc/shiny-server/shiny-server.conf \\\n && printf '#!/bin/bash\\nexport USER=root\\nshiny-server' > /usr/local/bin/start-shiny-server.sh \\\n && chmod u+x /usr/local/bin/start-shiny-server.sh \\\n && (which pandoc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc || true ) \\\n && (which pandoc-citeproc \\\n && rm /opt/shiny-server/ext/pandoc/pandoc-citeproc || true ) \\\n && rm /opt/shiny-server/ext/node/bin/shiny-server \\\n && ln -s /opt/shiny-server/ext/node/bin/node /opt/shiny-server/ext/node/bin/shiny-server \\\n && sed -i 's/throw new Error/logger.warn/g' /opt/shiny-server/lib/worker/app-worker.js \\\n && echo \"@ Version of shiny-server:\" \\\n && shiny-server --version || true ) \\\n && echo \"@ Version of installed R libraries:\" \\\n && R -e \"R.Version()$version.string;installed.packages()[,c(3,10)]\" || true\n#   If on a x86_64 architecture and MKL selected, install MKL for acceleration\nRUN ${ARG_MKL:-false} \\\n && [ `arch ` = \"x86_64\" ] \\\n && pip install mkl -Uq --pre || true\n#   If installing Python and related packages\nRUN source /opt/utils/script-utils.sh \\\n && (${ARG_PY_DATASCIENCE:-false} \\\n && ([[ -z \"${CUDA_VERSION}\" ]] \\\n && TF='tensorflow' || TF=\"tensorflow-gpu\" \\\n && echo \"${TF}==1.* % decide version based on CUDA_VERSION\" >> ./install_list_PY_datascience.pip) \\\n && (which R \\\n && echo \"rpy2 % Install rpy2 if R exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && (which java \\\n && echo \"py4j % Install py4j if Java exists\" >> ./install_list_PY_datascience.pip || true ) \\\n && install_pip ./install_list_PY_datascience.pip || true ) \\\n && (${ARG_PY_DATABASE:-false} \\\n && install_pip ./install_list_PY_database.pip || true ) \\\n && (${ARG_PY_NLP:-false} \\\n && install_pip ./install_list_PY_nlp.pip || true ) \\\n && (${ARG_PY_CV:-false} \\\n && install_pip ./install_list_PY_cv.pip || true ) \\\n && (${ARG_PY_BIOINFO:-false} \\\n && install_pip ./install_list_PY_bioinfo.pip || true ) \\\n && echo \"@ Version of installed Python packages:\" \\\n && pip list\n#   Installing conda packages if provided.\nRUN source /opt/utils/script-utils.sh \\\n && (install_conda ./install_list.conda || true ) \\\n && echo \"@ Version of installed Conda packages:\" \\\n && conda info \\\n && conda list | grep -v \"<pip>\"\n#   Install golang and gophernotes (Jupyter kernel for golang)\nRUN ${ARG_GO:-false} \\\n && source /opt/utils/script-utils.sh \\\n && GO_VERSION=\"1.12.2\" \\\n && GO_URL=\"https://dl.google.com/go/go$GO_VERSION.linux-$( dpkg --print-architecture ;).tar.gz\" \\\n && install_tar_gz $GO_URL go \\\n && ln -s /opt/go/bin/go /usr/bin/ \\\n && echo \"GOPATH=/opt/go/path\" >> /etc/bash.bashrc \\\n && export GOPATH=/opt/go/path \\\n && go get -u github.com/gopherdata/gophernotes \\\n && mkdir -p /opt/conda/share/jupyter/kernels/gophernotes \\\n && cp $GOPATH/src/github.com/gopherdata/gophernotes/kernel/* /opt/conda/share/jupyter/kernels/gophernotes \\\n && ln -s $GOPATH/bin/gophernotes /usr/local/bin \\\n && echo \"@ Version of golang:\" \\\n && go version \\\n && go list ... || true\n#   Install Julia and IJulia\nRUN ${ARG_JULIA:-false} \\\n && source /opt/utils/script-utils.sh \\\n && JULIA_URL=\"https://julialangnightlies-s3.julialang.org/bin/linux/x64/julia-latest-linux64.tar.gz\" \\\n && install_tar_gz $JULIA_URL \\\n && mv /opt/julia-* /opt/julia \\\n && ln -fs /opt/julia/bin/julia /usr/local/bin/julia \\\n && mkdir -p /opt/julia/pkg \\\n && echo 'import Libdl; push!(Libdl.DL_LOAD_PATH, \"/opt/conda/lib\")' >> /opt/julia/etc/julia/startup.jl \\\n && echo 'DEPOT_PATH[1]=\"/opt/julia/pkg\"' >> /opt/julia/etc/julia/startup.jl \\\n && julia -e 'using Pkg; pkg\"update\"; pkg\"add IJulia\"; pkg\"precompile\"' \\\n && mv ~/.local/share/jupyter/kernels/julia* /opt/conda/share/jupyter/kernels/ \\\n && echo \"@ Version of julia:\" \\\n && julia --version \\\n && julia -e 'using Pkg; for(k,v) in sort(collect(Pkg.installed())); println(k,\"==\",v); end' || true\n#   Install Octave and Octave kernal for Jupyter\nRUN ${ARG_OCTAVE:-false} \\\n && source /opt/utils/script-utils.sh \\\n && install_apt /opt/utils/install_list_octave.apt \\\n && OCTAVE_VERSION=\"5.1.0\" \\\n && install_tar_xz \"https://ftp.gnu.org/gnu/octave/octave-${OCTAVE_VERSION}.tar.xz\" \\\n && cd /opt/octave-* \\\n && ./configure --prefix=/opt/octave --disable-docs --without-opengl \\\n && make -j8 \\\n && make install -j8 \\\n && cd /opt/utils \\\n && rm -rf /opt/octave-* \\\n && echo \"PATH=/opt/octave/bin:$PATH\" >> /etc/bash.bashrc \\\n && export PATH=/opt/octave/bin:$PATH \\\n && pip install octave_kernel -Uq \\\n && install_octave /opt/utils/install_list_octave.pkg \\\n && echo \"@ Version of Octave and installed packages:\" \\\n && /opt/octave/bin/octave --version \\\n && /opt/octave/bin/octave --eval \"pkg list\" || true\n#   Clean up and display components version information...\nRUN source /opt/utils/script-utils.sh \\\n && install__clean \\\n && cd \\\n && echo \"@ Version of image: building finished at:\" `date ` `uname -a ` \\\n && echo \"@ System environment variables:\" `printenv `\nWORKDIR /root\n","originalDockerfileUglifiedHash":"20982d0dd3f499d890cdd33968ee72b6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cff1f0c95c689d7a1844233d2f54b4defff3fa6a.dockerfile"}