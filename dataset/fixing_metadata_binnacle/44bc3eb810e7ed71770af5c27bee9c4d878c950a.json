{"seed":3512578253,"processedDockerfileHash":"22a14c80f60c9622a421dcbb8d9c1915","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   install base system\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev build-essential cmake git gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl unzip python-dev automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-9-jdk-headless libpcre3-dev libpcre++-dev -y \\\n && apt-get install --no-install-recommends cpio libmlx4-1 libmlx5-1 librdmacm1 libibverbs1 libmthca1 libdapl2 dapl2-utils -y\n#   build and install libzip, cub, boost, openblas, opencv, protobuf\nRUN LIBZIP_VERSION=1.1.3 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure --prefix=/usr/local \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /libzip-${LIBZIP_VERSION} \\\n && BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /boost_${BOOST_VERSION} \\\n && wget -q -O - https://github.com/NVlabs/cub/archive/1.4.1.tar.gz | tar -C /usr/local -xzf - \\\n && OPENBLAS_VERSION=0.2.19 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && ldconfig /usr/local/openblas \\\n && cd .. \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION} \\\n && OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /opencv-${OPENCV_VERSION} \\\n && PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   set env vars\nENV KALDI_VERSION=\"c024e8aa\"\nENV MKLML_VERSION=\"mklml_lnx_2018.0.1.20171007\"\nENV PATH=\"/root/anaconda3/envs/cntk-py36/bin:/usr/local/bin:/cntk/build-mkl/gpu/release/bin:${PATH}\" \\\n    KALDI_PATH=\"/usr/local/kaldi-$KALDI_VERSION\" \\\n    BLAS=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    LAPACK=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    MKL_PATH=\"/usr/local/CNTKCustomMKL\" \\\n    PYTHONPATH=\"/cntk/bindings/python:$PYTHONPATH\" \\\n    LD_LIBRARY_PATH=\"/usr/local/openblas/lib:/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   install cntk custom mkl, kaldi, swig and anaconda\nRUN mkdir ${MKL_PATH} \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.11/${MKLML_VERSION}.tgz | tar -xzf - -C ${MKL_PATH} \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH/tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && make -j $( nproc ;) sph2pipe atlas sclite openfst \\\n && cd ../src \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && SWIG_VERSION=3.0.10 \\\n && cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz -O - | tar xvfz - \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --without-alllang \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-${SWIG_VERSION} \\\n && wget -q https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.4.0-Linux-x86_64.sh -b \\\n && rm -f Anaconda3-4.4.0-Linux-x86_64.sh \\\n && mkdir -p /usr/local/cudnn/cuda/include \\\n && ln -s /usr/include/cudnn.h /usr/local/cudnn/cuda/include/cudnn.h \\\n && mkdir -p /usr/local/cudnn/cuda/lib64 \\\n && ln -s /etc/alternatives/libcudnn_so /usr/local/cudnn/cuda/lib64/libcudnn.so \\\n && ln -s /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/stubs/libnvidia-ml.so.1 \\\n && ldconfig /usr/local/lib\n#   set cntk dir\nWORKDIR /cntk\n#   add intel mpi library and build cntk\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\nRUN cd /tmp \\\n && wget -q 'http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/11595/l_mpi_2017.3.196.tgz' \\\n && tar zxvf l_mpi_2017.3.196.tgz \\\n && sed -i -e 's/^ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's|^#ACTIVATION_LICENSE_FILE=|ACTIVATION_LICENSE_FILE=/tmp/l_mpi_2017.3.196/USE_SERVER.lic|g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's/^ACTIVATION_TYPE=exist_lic/ACTIVATION_TYPE=license_server/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && cd /tmp/l_mpi_2017.3.196 \\\n && ./install.sh -s silent.cfg \\\n && cd ..\n#   cntk makefiles use non-standard mpic++, symlink to mpicxx\nRUN ln -s ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpicxx ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpic++ \\\n && CNTK_VERSION=v2.3 \\\n && cd /cntk \\\n && git clone --depth=1 --recursive -b ${CNTK_VERSION} --single-branch https://github.com/Microsoft/CNTK.git .\n#   add cast in /cntk/Source/CNTKv2LibraryDll/Trainer.cpp to prevent build issue \nRUN sed -i 's|, unit)|, (int)unit)|g' /cntk/Source/CNTKv2LibraryDll/Trainer.cpp\n#   set Anaconda environment\nRUN /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py36/ --file /cntk/Scripts/install/linux/conda-linux-cntk-py36-environment.yml \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && CONFIGURE_OPTS=\" --1bitsgd=yes --with-mpi=${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE} --with-cuda=/usr/local/cuda --with-gdk-include=/usr/local/cuda/include --with-gdk-nvml-lib=/usr/local/cuda/lib64/stubs --with-kaldi=${KALDI_PATH} --with-py36-path=/root/anaconda3/envs/cntk-py36 --with-cudnn=/usr/local/cudnn\" \\\n && mkdir -p build-mkl/gpu/release \\\n && cd build-mkl/gpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=${MKL_PATH}/${MKLML_VERSION} \\\n && make -j\"$( nproc ;)\"\n#   clean up\nRUN rm -rf /cntk/build-mkl/gpu/release/.build \\\n && rm -rf /cntk/.git \\\n && /root/anaconda3/bin/conda clean --all --yes \\\n && echo \"source /root/anaconda3/bin/activate /root/anaconda3/envs/cntk-py36\" > /cntk/activate-cntk \\\n && echo \"source /cntk/activate-cntk\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc \\\n && rm -rf /opt/intel\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#  install base system\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev build-essential cmake git gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl unzip python-dev automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-9-jdk-headless libpcre3-dev libpcre++-dev -y \\\n && apt-get install --no-install-recommends cpio libmlx4-1 libmlx5-1 librdmacm1 libibverbs1 libmthca1 libdapl2 dapl2-utils -y\n#  build and install libzip, cub, boost, openblas, opencv, protobuf\nRUN LIBZIP_VERSION=1.1.3 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure --prefix=/usr/local \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /libzip-${LIBZIP_VERSION} \\\n && BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /boost_${BOOST_VERSION} \\\n && wget -q -O - https://github.com/NVlabs/cub/archive/1.4.1.tar.gz | tar -C /usr/local -xzf - \\\n && OPENBLAS_VERSION=0.2.19 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && ldconfig /usr/local/openblas \\\n && cd .. \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION} \\\n && OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /opencv-${OPENCV_VERSION} \\\n && PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#  set env vars\nENV KALDI_VERSION=\"c024e8aa\"\nENV MKLML_VERSION=\"mklml_lnx_2018.0.1.20171007\"\nENV PATH=\"/root/anaconda3/envs/cntk-py36/bin:/usr/local/bin:/cntk/build-mkl/gpu/release/bin:${PATH}\" \\\n    KALDI_PATH=\"/usr/local/kaldi-$KALDI_VERSION\" \\\n    BLAS=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    LAPACK=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    MKL_PATH=\"/usr/local/CNTKCustomMKL\" \\\n    PYTHONPATH=\"/cntk/bindings/python:$PYTHONPATH\" \\\n    LD_LIBRARY_PATH=\"/usr/local/openblas/lib:/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#  install cntk custom mkl, kaldi, swig and anaconda\nRUN mkdir ${MKL_PATH} \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.11/${MKLML_VERSION}.tgz | tar -xzf - -C ${MKL_PATH} \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH/tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && make -j $( nproc ;) sph2pipe atlas sclite openfst \\\n && cd ../src \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && SWIG_VERSION=3.0.10 \\\n && cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz -O - | tar xvfz - \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --without-alllang \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-${SWIG_VERSION} \\\n && wget -q https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.4.0-Linux-x86_64.sh -b \\\n && rm -f Anaconda3-4.4.0-Linux-x86_64.sh \\\n && mkdir -p /usr/local/cudnn/cuda/include \\\n && ln -s /usr/include/cudnn.h /usr/local/cudnn/cuda/include/cudnn.h \\\n && mkdir -p /usr/local/cudnn/cuda/lib64 \\\n && ln -s /etc/alternatives/libcudnn_so /usr/local/cudnn/cuda/lib64/libcudnn.so \\\n && ln -s /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/stubs/libnvidia-ml.so.1 \\\n && ldconfig /usr/local/lib\n#  set cntk dir\nWORKDIR /cntk\n#  add intel mpi library and build cntk\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\nRUN cd /tmp \\\n && wget -q 'http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/11595/l_mpi_2017.3.196.tgz' \\\n && tar zxvf l_mpi_2017.3.196.tgz \\\n && sed -i -e 's/^ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's|^#ACTIVATION_LICENSE_FILE=|ACTIVATION_LICENSE_FILE=/tmp/l_mpi_2017.3.196/USE_SERVER.lic|g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's/^ACTIVATION_TYPE=exist_lic/ACTIVATION_TYPE=license_server/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && cd /tmp/l_mpi_2017.3.196 \\\n && ./install.sh -s silent.cfg \\\n && cd ..\n#  cntk makefiles use non-standard mpic++, symlink to mpicxx\nRUN ln -s ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpicxx ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpic++ \\\n && CNTK_VERSION=v2.3 \\\n && cd /cntk \\\n && git clone --depth=1 --recursive -b ${CNTK_VERSION} --single-branch https://github.com/Microsoft/CNTK.git .\n#  add cast in /cntk/Source/CNTKv2LibraryDll/Trainer.cpp to prevent build issue \nRUN sed -i 's|, unit)|, (int)unit)|g' /cntk/Source/CNTKv2LibraryDll/Trainer.cpp\n#  set Anaconda environment\nRUN /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py36/ --file /cntk/Scripts/install/linux/conda-linux-cntk-py36-environment.yml \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && CONFIGURE_OPTS=\" --1bitsgd=yes --with-mpi=${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE} --with-cuda=/usr/local/cuda --with-gdk-include=/usr/local/cuda/include --with-gdk-nvml-lib=/usr/local/cuda/lib64/stubs --with-kaldi=${KALDI_PATH} --with-py36-path=/root/anaconda3/envs/cntk-py36 --with-cudnn=/usr/local/cudnn\" \\\n && mkdir -p build-mkl/gpu/release \\\n && cd build-mkl/gpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=${MKL_PATH}/${MKLML_VERSION} \\\n && make -j\"$( nproc ;)\"\n#  clean up\nRUN rm -rf /cntk/build-mkl/gpu/release/.build \\\n && rm -rf /cntk/.git \\\n && /root/anaconda3/bin/conda clean --all --yes \\\n && echo \"source /root/anaconda3/bin/activate /root/anaconda3/envs/cntk-py36\" > /cntk/activate-cntk \\\n && echo \"source /cntk/activate-cntk\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc \\\n && rm -rf /opt/intel\n","injectedSmells":[],"originalDockerfileHash":"aee53692338f7ef240b8e86ad15db0cd","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\n#   install base system\nRUN apt-get update \\\n && apt-get install --no-install-recommends autotools-dev build-essential cmake git gfortran-multilib libavcodec-dev libavformat-dev libjasper-dev libjpeg-dev libpng-dev liblapacke-dev libswscale-dev libtiff-dev pkg-config wget zlib1g-dev ca-certificates curl unzip python-dev automake libtool autoconf subversion libapr1 libaprutil1 libltdl-dev libltdl7 libserf-1-1 libsigsegv2 libsvn1 m4 openjdk-9-jdk-headless libpcre3-dev libpcre++-dev -y \\\n && apt-get install --no-install-recommends cpio libmlx4-1 libmlx5-1 librdmacm1 libibverbs1 libmthca1 libdapl2 dapl2-utils -y\n#   build and install libzip, cub, boost, openblas, opencv, protobuf\nRUN LIBZIP_VERSION=1.1.3 \\\n && wget -q -O - http://nih.at/libzip/libzip-${LIBZIP_VERSION}.tar.gz | tar -xzf - \\\n && cd libzip-${LIBZIP_VERSION} \\\n && ./configure --prefix=/usr/local \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /libzip-${LIBZIP_VERSION} \\\n && BOOST_VERSION=1_60_0 \\\n && BOOST_DOTTED_VERSION=$( echo $BOOST_VERSION | tr _ . ;) \\\n && wget -q -O - https://sourceforge.net/projects/boost/files/boost/${BOOST_DOTTED_VERSION}/boost_${BOOST_VERSION}.tar.gz/download | tar -xzf - \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/local --with-libraries=filesystem,system,test \\\n && ./b2 -d0 -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /boost_${BOOST_VERSION} \\\n && wget -q -O - https://github.com/NVlabs/cub/archive/1.4.1.tar.gz | tar -C /usr/local -xzf - \\\n && OPENBLAS_VERSION=0.2.19 \\\n && wget -q -O - https://github.com/xianyi/OpenBLAS/archive/v${OPENBLAS_VERSION}.tar.gz | tar -xzf - \\\n && cd OpenBLAS-${OPENBLAS_VERSION} \\\n && make -j\"$( nproc ;)\" USE_OPENMP=1 | tee make.log \\\n && grep -qF 'OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)' make.log \\\n && grep -qF 'Use OpenMP in the multithreading.' make.log \\\n && make PREFIX=/usr/local/openblas install \\\n && ldconfig /usr/local/openblas \\\n && cd .. \\\n && rm -rf /OpenBLAS-${OPENBLAS_VERSION} \\\n && OPENCV_VERSION=3.1.0 \\\n && wget -q -O - https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd opencv-${OPENCV_VERSION} \\\n && cmake -DWITH_CUDA=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local/opencv-${OPENCV_VERSION} . \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig /usr/local/lib \\\n && cd .. \\\n && rm -rf /opencv-${OPENCV_VERSION} \\\n && PROTOBUF_VERSION=3.1.0 PROTOBUF_STRING=protobuf-$PROTOBUF_VERSION \\\n && wget -O - --no-verbose https://github.com/google/protobuf/archive/v${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd $PROTOBUF_STRING \\\n && ./autogen.sh \\\n && ./configure CFLAGS=-fPIC CXXFLAGS=-fPIC --disable-shared --prefix=/usr/local/$PROTOBUF_STRING \\\n && make -j $( nproc ;) install \\\n && cd .. \\\n && rm -rf $PROTOBUF_STRING\n#   set env vars\nENV KALDI_VERSION=\"c024e8aa\"\nENV MKLML_VERSION=\"mklml_lnx_2018.0.1.20171007\"\nENV PATH=\"/root/anaconda3/envs/cntk-py36/bin:/usr/local/bin:/cntk/build-mkl/gpu/release/bin:${PATH}\" \\\n    KALDI_PATH=\"/usr/local/kaldi-$KALDI_VERSION\" \\\n    BLAS=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    LAPACK=\"/usr/local/openblas/lib/libopenblas.so\" \\\n    MKL_PATH=\"/usr/local/CNTKCustomMKL\" \\\n    PYTHONPATH=\"/cntk/bindings/python:$PYTHONPATH\" \\\n    LD_LIBRARY_PATH=\"/usr/local/openblas/lib:/cntk/bindings/python/cntk/libs:$LD_LIBRARY_PATH\"\n#   install cntk custom mkl, kaldi, swig and anaconda\nRUN mkdir ${MKL_PATH} \\\n && wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.11/${MKLML_VERSION}.tgz | tar -xzf - -C ${MKL_PATH} \\\n && mkdir $KALDI_PATH \\\n && wget --no-verbose -O - https://github.com/kaldi-asr/kaldi/archive/$KALDI_VERSION.tar.gz | tar -xzf - --strip-components=1 -C $KALDI_PATH \\\n && cd $KALDI_PATH/tools \\\n && perl -pi -e 's/^# (OPENFST_VERSION = 1.4.1)$/\\1/' Makefile \\\n && make -j $( nproc ;) sph2pipe atlas sclite openfst \\\n && cd ../src \\\n && ./configure --openblas-root=/usr/local/openblas --shared \\\n && make -j $( nproc ;) depend \\\n && make -j $( nproc ;) all \\\n && find $KALDI_PATH -name '*.o' -print0 | xargs -0 rm \\\n && for dir in $KALDI_PATH/src/*bin; do make -C $dir clean ; done \\\n && SWIG_VERSION=3.0.10 \\\n && cd /root \\\n && wget -q http://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz -O - | tar xvfz - \\\n && cd swig-${SWIG_VERSION} \\\n && ./configure --without-alllang \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && rm -rf swig-${SWIG_VERSION} \\\n && wget -q https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh \\\n && bash Anaconda3-4.4.0-Linux-x86_64.sh -b \\\n && rm -f Anaconda3-4.4.0-Linux-x86_64.sh \\\n && mkdir -p /usr/local/cudnn/cuda/include \\\n && ln -s /usr/include/cudnn.h /usr/local/cudnn/cuda/include/cudnn.h \\\n && mkdir -p /usr/local/cudnn/cuda/lib64 \\\n && ln -s /etc/alternatives/libcudnn_so /usr/local/cudnn/cuda/lib64/libcudnn.so \\\n && ln -s /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/stubs/libnvidia-ml.so.1 \\\n && ldconfig /usr/local/lib\n#   set cntk dir\nWORKDIR /cntk\n#   add intel mpi library and build cntk\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\nRUN cd /tmp \\\n && wget -q 'http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/11595/l_mpi_2017.3.196.tgz' \\\n && tar zxvf l_mpi_2017.3.196.tgz \\\n && sed -i -e 's/^ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's|^#ACTIVATION_LICENSE_FILE=|ACTIVATION_LICENSE_FILE=/tmp/l_mpi_2017.3.196/USE_SERVER.lic|g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && sed -i -e 's/^ACTIVATION_TYPE=exist_lic/ACTIVATION_TYPE=license_server/g' /tmp/l_mpi_2017.3.196/silent.cfg \\\n && cd /tmp/l_mpi_2017.3.196 \\\n && ./install.sh -s silent.cfg \\\n && cd ..\n#   cntk makefiles use non-standard mpic++, symlink to mpicxx\nRUN ln -s ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpicxx ${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE}/bin/mpic++ \\\n && CNTK_VERSION=v2.3 \\\n && cd /cntk \\\n && git clone --depth=1 --recursive -b ${CNTK_VERSION} --single-branch https://github.com/Microsoft/CNTK.git .\n#   add cast in /cntk/Source/CNTKv2LibraryDll/Trainer.cpp to prevent build issue \nRUN sed -i 's|, unit)|, (int)unit)|g' /cntk/Source/CNTKv2LibraryDll/Trainer.cpp\n#   set Anaconda environment\nRUN /root/anaconda3/bin/conda env create -p /root/anaconda3/envs/cntk-py36/ --file /cntk/Scripts/install/linux/conda-linux-cntk-py36-environment.yml \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && CONFIGURE_OPTS=\" --1bitsgd=yes --with-mpi=${INTEL_MPI_PATH}/${COMPILERVARS_ARCHITECTURE} --with-cuda=/usr/local/cuda --with-gdk-include=/usr/local/cuda/include --with-gdk-nvml-lib=/usr/local/cuda/lib64/stubs --with-kaldi=${KALDI_PATH} --with-py36-path=/root/anaconda3/envs/cntk-py36 --with-cudnn=/usr/local/cudnn\" \\\n && mkdir -p build-mkl/gpu/release \\\n && cd build-mkl/gpu/release \\\n && ../../../configure $CONFIGURE_OPTS --with-mkl=${MKL_PATH}/${MKLML_VERSION} \\\n && make -j\"$( nproc ;)\"\n#   clean up\nRUN rm -rf /cntk/build-mkl/gpu/release/.build \\\n && rm -rf /cntk/.git \\\n && /root/anaconda3/bin/conda clean --all --yes \\\n && echo \"source /root/anaconda3/bin/activate /root/anaconda3/envs/cntk-py36\" > /cntk/activate-cntk \\\n && echo \"source /cntk/activate-cntk\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc \\\n && rm -rf /opt/intel\n","originalDockerfileUglifiedHash":"f651ab45e4de76296bc9920488a0fc6a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/44bc3eb810e7ed71770af5c27bee9c4d878c950a.dockerfile"}