{"seed":3716950904,"processedDockerfileHash":"d88e5268e92d346202a319ab560ea67f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","pin-package-manager-versions-apk","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Multi-stage build\n#   Stage 0\n#   Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nCOPY docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc=6.4.0-r9 musl-dev=1.1.19-r11 apache2-dev=2.4.43-r0 apache2=2.4.43-r0\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#   Stage 1\n#   Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction --no-dev --optimize-autoloader\n#   Tidy up\n#   remove non-required vendor files\nWORKDIR /app/vendor\nRUN find -type d -name '.git' -exec rm -r {} + \\\n && find -path ./twig/twig/lib/Twig -prune -type d -name 'Test' -exec rm -r {} + \\\n && find -type d -name 'tests' -exec rm -r {} + \\\n && find -type d -name 'benchmarks' -exec rm -r {} + \\\n && find -type d -name 'smoketests' -exec rm -r {} + \\\n && find -type d -name 'demo' -exec rm -r {} + \\\n && find -type d -name 'doc' -exec rm -r {} + \\\n && find -type d -name 'docs' -exec rm -r {} + \\\n && find -type d -name 'examples' -exec rm -r {} + \\\n && find -type f -name 'phpunit.xml' -exec rm -r {} + \\\n && find -type f -name '*.md' -exec rm -r {} +\n#   Stage 2\n#   Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#   Install webpack\nRUN npm install webpack@5.79.0 -g\n#   Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#   Install npm packages\nRUN npm install --only=prod\n#   Copy ui folder\nCOPY ./ui ./ui\n#   Build webpack\nRUN npm run build\n#   Stage 3\n#   Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#   Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar=1.32-r0 bash=4.4.19-r1 curl=7.61.1-r3 php7=7.2.26-r0 php7-apache2=7.2.26-r0 php7-zmq=1.1.3-r2 php7-json=7.2.26-r0 php7-gd=7.2.26-r0 php7-dom=7.2.26-r0 php7-pdo=7.2.26-r0 php7-zip=7.2.26-r0 php7-pdo_mysql=7.2.26-r0 php7-gettext=7.2.26-r0 php7-soap=7.2.26-r0 php7-iconv=7.2.26-r0 php7-curl=7.2.26-r0 php7-session=7.2.26-r0 php7-ctype=7.2.26-r0 php7-fileinfo=7.2.26-r0 php7-xml=7.2.26-r0 php7-simplexml=7.2.26-r0 php7-mbstring=7.2.26-r0 php7-memcached=3.0.4-r1 php7-zlib php7-mongodb=1.4.4-r0 mysql-client=10.2.32-r0 ssmtp=2.64-r13 apache2=2.4.43-r0 ca-certificates=20191127-r2 tzdata=2020a-r0 \\\n && rm -rf /var/cache/apk/*\n#   Add all necessary config files in one layer\nCOPY docker/ /\n#   Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#   Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#   Setup persistent environment variables\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV CMS_DEV_MODE=\"false\" \\\n    XMR_HOST=\"xmr\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    MYSQL_HOST=\"mysql\" \\\n    MYSQL_USER=\"cms\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SMTP_SERVER=\"smtp.gmail.com:587\" \\\n    CMS_SMTP_USERNAME=\"none\" \\\n    CMS_SMTP_USE_TLS=\"YES\" \\\n    CMS_SMTP_USE_STARTTLS=\"YES\" \\\n    CMS_SMTP_REWRITE_DOMAIN=\"gmail.com\" \\\n    CMS_SMTP_HOSTNAME=\"none\" \\\n    CMS_SMTP_FROM_LINE_OVERRIDE=\"YES\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#   Expose port 80\nEXPOSE 80/tcp\n#   Map the source files into /var/www/cms\nRUN mkdir -p /var/www/cms\n#   Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#   Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#   All other files (.dockerignore excludes many things, but we tidy up the rest below)\nCOPY . /var/www/cms\n#   Tidy up\nRUN rm /var/www/cms/composer.* \\\n && rm -r /var/www/cms/docker \\\n && rm -r /var/www/cms/tests \\\n && rm /var/www/cms/.dockerignore \\\n && rm /var/www/cms/phpunit.xml \\\n && rm /var/www/cms/package.json \\\n && rm /var/www/cms/package-lock.json \\\n && rm /var/www/cms/cypress.json \\\n && rm -r /var/www/cms/cypress \\\n && rm -r /var/www/cms/ui \\\n && rm /var/www/cms/webpack.config.js\n#   Map a volumes to this folder.\n#   Our CMS files, library, cache and backups will be in here.\nRUN mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/backup \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/cms/web/userscripts \\\n && chown -R apache:apache /var/www/cms \\\n && chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && addgroup ssmtp \\\n && chmod 777 /tmp\n#   Expose volume mount points\nVOLUME /var/www/cms/library\nVOLUME /var/www/cms/custom\nVOLUME /var/www/cms/web/theme/custom\nVOLUME /var/www/backup\nVOLUME /var/www/cms/web/userscripts\nVOLUME /var/www/cms/ca-certs\nCMD [\"/entrypoint.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Multi-stage build\n#  Stage 0\n#  Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nADD docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc musl-dev apache2-dev apache2\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#  Stage 1\n#  Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction --no-dev --optimize-autoloader\n#  Tidy up\n#  remove non-required vendor files\nWORKDIR /app/vendor\nRUN find -type d -name '.git' -exec rm -r {} + \\\n && find -path ./twig/twig/lib/Twig -prune -type d -name 'Test' -exec rm -r {} + \\\n && find -type d -name 'tests' -exec rm -r {} + \\\n && find -type d -name 'benchmarks' -exec rm -r {} + \\\n && find -type d -name 'smoketests' -exec rm -r {} + \\\n && find -type d -name 'demo' -exec rm -r {} + \\\n && find -type d -name 'doc' -exec rm -r {} + \\\n && find -type d -name 'docs' -exec rm -r {} + \\\n && find -type d -name 'examples' -exec rm -r {} + \\\n && find -type f -name 'phpunit.xml' -exec rm -r {} + \\\n && find -type f -name '*.md' -exec rm -r {} +\n#  Stage 2\n#  Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#  Install webpack\nRUN npm install webpack -g\n#  Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#  Install npm packages\nRUN npm install --only=prod\n#  Copy ui folder\nCOPY ./ui ./ui\n#  Build webpack\nRUN npm run build\n#  Stage 3\n#  Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#  Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar bash curl php7 php7-apache2 php7-zmq php7-json php7-gd php7-dom php7-pdo php7-zip php7-pdo_mysql php7-gettext php7-soap php7-iconv php7-curl php7-session php7-ctype php7-fileinfo php7-xml php7-simplexml php7-mbstring php7-memcached php7-zlib php7-mongodb mysql-client ssmtp apache2 ca-certificates tzdata \\\n && rm -rf /var/cache/apk/*\n#  Add all necessary config files in one layer\nADD docker/ /\n#  Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#  Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#  Setup persistent environment variables\nENV CMS_DEV_MODE=\"false\" \\\n    XMR_HOST=\"xmr\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    MYSQL_HOST=\"mysql\" \\\n    MYSQL_USER=\"cms\" \\\n    MYSQL_PASSWORD=\"none\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SMTP_SERVER=\"smtp.gmail.com:587\" \\\n    CMS_SMTP_USERNAME=\"none\" \\\n    CMS_SMTP_PASSWORD=\"none\" \\\n    CMS_SMTP_USE_TLS=\"YES\" \\\n    CMS_SMTP_USE_STARTTLS=\"YES\" \\\n    CMS_SMTP_REWRITE_DOMAIN=\"gmail.com\" \\\n    CMS_SMTP_HOSTNAME=\"none\" \\\n    CMS_SMTP_FROM_LINE_OVERRIDE=\"YES\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#  Expose port 80\nEXPOSE 80/tcp\n#  Map the source files into /var/www/cms\nRUN mkdir -p /var/www/cms\n#  Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#  Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#  All other files (.dockerignore excludes many things, but we tidy up the rest below)\nCOPY . /var/www/cms\n#  Tidy up\nRUN rm /var/www/cms/composer.* \\\n && rm -r /var/www/cms/docker \\\n && rm -r /var/www/cms/tests \\\n && rm /var/www/cms/.dockerignore \\\n && rm /var/www/cms/phpunit.xml \\\n && rm /var/www/cms/package.json \\\n && rm /var/www/cms/package-lock.json \\\n && rm /var/www/cms/cypress.json \\\n && rm -r /var/www/cms/cypress \\\n && rm -r /var/www/cms/ui \\\n && rm /var/www/cms/webpack.config.js\n#  Map a volumes to this folder.\n#  Our CMS files, library, cache and backups will be in here.\nRUN mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/backup \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/cms/web/userscripts \\\n && chown -R apache:apache /var/www/cms \\\n && chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && addgroup ssmtp \\\n && chmod 777 /tmp\n#  Expose volume mount points\nVOLUME /var/www/cms/library\nVOLUME /var/www/cms/custom\nVOLUME /var/www/cms/web/theme/custom\nVOLUME /var/www/backup\nVOLUME /var/www/cms/web/userscripts\nVOLUME /var/www/cms/ca-certs\nCMD [\"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"3716b80c9bbf34dd5d6a7f6cdd8c2b78","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Multi-stage build\n#   Stage 0\n#   Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nADD docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc musl-dev apache2-dev apache2\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#   Stage 1\n#   Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction --no-dev --optimize-autoloader\n#   Tidy up\n#   remove non-required vendor files\nWORKDIR /app/vendor\nRUN find -type d -name '.git' -exec rm -r {} + \\\n && find -path ./twig/twig/lib/Twig -prune -type d -name 'Test' -exec rm -r {} + \\\n && find -type d -name 'tests' -exec rm -r {} + \\\n && find -type d -name 'benchmarks' -exec rm -r {} + \\\n && find -type d -name 'smoketests' -exec rm -r {} + \\\n && find -type d -name 'demo' -exec rm -r {} + \\\n && find -type d -name 'doc' -exec rm -r {} + \\\n && find -type d -name 'docs' -exec rm -r {} + \\\n && find -type d -name 'examples' -exec rm -r {} + \\\n && find -type f -name 'phpunit.xml' -exec rm -r {} + \\\n && find -type f -name '*.md' -exec rm -r {} +\n#   Stage 2\n#   Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#   Install webpack\nRUN npm install webpack -g\n#   Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#   Install npm packages\nRUN npm install --only=prod\n#   Copy ui folder\nCOPY ./ui ./ui\n#   Build webpack\nRUN npm run build\n#   Stage 3\n#   Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#   Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar bash curl php7 php7-apache2 php7-zmq php7-json php7-gd php7-dom php7-pdo php7-zip php7-pdo_mysql php7-gettext php7-soap php7-iconv php7-curl php7-session php7-ctype php7-fileinfo php7-xml php7-simplexml php7-mbstring php7-memcached php7-zlib php7-mongodb mysql-client ssmtp apache2 ca-certificates tzdata \\\n && rm -rf /var/cache/apk/*\n#   Add all necessary config files in one layer\nADD docker/ /\n#   Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#   Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#   Setup persistent environment variables\nENV CMS_DEV_MODE=\"false\" \\\n    XMR_HOST=\"xmr\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    MYSQL_HOST=\"mysql\" \\\n    MYSQL_USER=\"cms\" \\\n    MYSQL_PASSWORD=\"none\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SMTP_SERVER=\"smtp.gmail.com:587\" \\\n    CMS_SMTP_USERNAME=\"none\" \\\n    CMS_SMTP_PASSWORD=\"none\" \\\n    CMS_SMTP_USE_TLS=\"YES\" \\\n    CMS_SMTP_USE_STARTTLS=\"YES\" \\\n    CMS_SMTP_REWRITE_DOMAIN=\"gmail.com\" \\\n    CMS_SMTP_HOSTNAME=\"none\" \\\n    CMS_SMTP_FROM_LINE_OVERRIDE=\"YES\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#   Expose port 80\nEXPOSE 80/tcp\n#   Map the source files into /var/www/cms\nRUN mkdir -p /var/www/cms\n#   Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#   Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#   All other files (.dockerignore excludes many things, but we tidy up the rest below)\nCOPY . /var/www/cms\n#   Tidy up\nRUN rm /var/www/cms/composer.* \\\n && rm -r /var/www/cms/docker \\\n && rm -r /var/www/cms/tests \\\n && rm /var/www/cms/.dockerignore \\\n && rm /var/www/cms/phpunit.xml \\\n && rm /var/www/cms/package.json \\\n && rm /var/www/cms/package-lock.json \\\n && rm /var/www/cms/cypress.json \\\n && rm -r /var/www/cms/cypress \\\n && rm -r /var/www/cms/ui \\\n && rm /var/www/cms/webpack.config.js\n#   Map a volumes to this folder.\n#   Our CMS files, library, cache and backups will be in here.\nRUN mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/backup \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/cms/web/userscripts \\\n && chown -R apache:apache /var/www/cms \\\n && chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && addgroup ssmtp \\\n && chmod 777 /tmp\n#   Expose volume mount points\nVOLUME /var/www/cms/library\nVOLUME /var/www/cms/custom\nVOLUME /var/www/cms/web/theme/custom\nVOLUME /var/www/backup\nVOLUME /var/www/cms/web/userscripts\nVOLUME /var/www/cms/ca-certs\nCMD [\"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"c86a45740821d475511359026a88ede6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f68a72dbb6b09984f315024688f349bf894a4ae1.dockerfile"}