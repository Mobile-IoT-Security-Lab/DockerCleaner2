{"seed":2234602683,"processedDockerfileHash":"0128b62ab28ae6701e4ad65f45a7dcbb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Image used for hosting scitran core with uwsgi.\n#\n#   Example usage is in README.md\n#\nFROM ubuntu:14.04\n#   Install pre-requisites\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=11.6ubuntu6 ca-certificates=20170717~14.04.2 curl=7.35.0-1ubuntu2.20 libatlas3-base=3.10.1-4 numactl=2.0.9~rc5-1ubuntu3.14.04.2 python-dev=2.7.5-5ubuntu3 python-pip=1.5.4-1ubuntu4 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 libssl-dev=1.0.1f-1ubuntu2.27 libpcre3=1:8.31-2ubuntu2.3 libpcre3-dev=1:8.31-2ubuntu2.3 git=1:1.9.1-1ubuntu0.10 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install pip==23.1 -U\n#   Grab gosu for easy step-down from root in a docker-friendly manner\n#   https://github.com/tianon/gosu\n#\n#   Alternate key servers are due to reliability issues with ha.pool.sks-keyservers.net\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /tmp/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && gpg --batch --verify /tmp/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#   Setup environment\nWORKDIR /var/scitran\nRUN mkdir -p /var/scitran/config /var/scitran/data /var/scitran/code/api /var/scitran/logs /var/scitran/keys\n#   Declaring a volume makes the intent to map externally explicit. This enables\n#   the contents to survive/persist across container versions, and easy access\n#   to the contents outside the container.\n#\n#   Declaring the VOLUME in the Dockerfile guarantees the contents are empty\n#   for any new container that doesn't specify a volume map via 'docker run -v '\n#   or similar option.\n#\nVOLUME /var/scitran/keys\nVOLUME /var/scitran/data\nVOLUME /var/scitran/logs\n#   Install pip modules\n#\n#   Split this out for better cache re-use.\n#\nCOPY requirements.txt docker/requirements-docker.txt /var/scitran/code/api/\nRUN pip install pip==23.1 wheel==0.40.0 setuptools==67.6.1 --upgrade \\\n && pip install -r /var/scitran/code/api/requirements-docker.txt \\\n && pip install -r /var/scitran/code/api/requirements.txt\nCOPY tests /var/scitran/code/api/tests/\nRUN bash -e -x /var/scitran/code/api/tests/bin/setup-integration-tests-ubuntu.sh\n#   Copy full repo\n#\nCOPY . /var/scitran/code/api/\nCOPY docker/uwsgi-entrypoint.sh /var/scitran/\nCOPY docker/uwsgi-config.ini /var/scitran/config/\n#   Inject build information into image so the source of the container can be\n#   determined from within it.\nARG BRANCH_LABEL=NULL\nARG COMMIT_HASH=0\nCOPY docker/inject_build_info.sh /\nRUN /inject_build_info.sh ${BRANCH_LABEL} ${COMMIT_HASH} \\\n && rm /inject_build_info.sh\nENTRYPOINT [\"/var/scitran/uwsgi-entrypoint.sh\"]\nCMD [\"uwsgi\", \"--ini\", \"/var/scitran/config/uwsgi-config.ini\", \"--http\", \"0.0.0.0:8080\", \"--http-keepalive\", \"--so-keepalive\", \"--add-header\", \"Connection:\", \"Keep-Alive\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Image used for hosting scitran core with uwsgi.\n#\n#  Example usage is in README.md\n#\nFROM ubuntu:14.04\n#  Install pre-requisites\nRUN apt-get update \\\n && apt-get install build-essential ca-certificates curl libatlas3-base numactl python-dev python-pip libffi-dev libssl-dev libpcre3 libpcre3-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install pip -U\n#  Grab gosu for easy step-down from root in a docker-friendly manner\n#  https://github.com/tianon/gosu\n#\n#  Alternate key servers are due to reliability issues with ha.pool.sks-keyservers.net\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /tmp/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && gpg --batch --verify /tmp/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#  Setup environment\nWORKDIR /var/scitran\nRUN mkdir -p /var/scitran/config /var/scitran/data /var/scitran/code/api /var/scitran/logs /var/scitran/keys\n#  Declaring a volume makes the intent to map externally explicit. This enables\n#  the contents to survive/persist across container versions, and easy access\n#  to the contents outside the container.\n#\n#  Declaring the VOLUME in the Dockerfile guarantees the contents are empty\n#  for any new container that doesn't specify a volume map via 'docker run -v '\n#  or similar option.\n#\nVOLUME /var/scitran/keys\nVOLUME /var/scitran/data\nVOLUME /var/scitran/logs\n#  Install pip modules\n#\n#  Split this out for better cache re-use.\n#\nCOPY requirements.txt docker/requirements-docker.txt /var/scitran/code/api/\nRUN pip install pip wheel setuptools --upgrade \\\n && pip install -r /var/scitran/code/api/requirements-docker.txt \\\n && pip install -r /var/scitran/code/api/requirements.txt\nCOPY tests /var/scitran/code/api/tests/\nRUN bash -e -x /var/scitran/code/api/tests/bin/setup-integration-tests-ubuntu.sh\n#  Copy full repo\n#\nCOPY . /var/scitran/code/api/\nCOPY docker/uwsgi-entrypoint.sh /var/scitran/\nCOPY docker/uwsgi-config.ini /var/scitran/config/\n#  Inject build information into image so the source of the container can be\n#  determined from within it.\nARG BRANCH_LABEL=NULL\nARG COMMIT_HASH=0\nCOPY docker/inject_build_info.sh /\nRUN /inject_build_info.sh ${BRANCH_LABEL} ${COMMIT_HASH} \\\n && rm /inject_build_info.sh\nENTRYPOINT [\"/var/scitran/uwsgi-entrypoint.sh\"]\nCMD [\"uwsgi\", \"--ini\", \"/var/scitran/config/uwsgi-config.ini\", \"--http\", \"0.0.0.0:8080\", \"--http-keepalive\", \"--so-keepalive\", \"--add-header\", \"Connection:\", \"Keep-Alive\"]\n","injectedSmells":[],"originalDockerfileHash":"e0378ad5dfccd0c5be32d264853154bb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Image used for hosting scitran core with uwsgi.\n#\n#   Example usage is in README.md\n#\nFROM ubuntu:14.04\n#   Install pre-requisites\nRUN apt-get update \\\n && apt-get install build-essential ca-certificates curl libatlas3-base numactl python-dev python-pip libffi-dev libssl-dev libpcre3 libpcre3-dev git -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip install pip -U\n#   Grab gosu for easy step-down from root in a docker-friendly manner\n#   https://github.com/tianon/gosu\n#\n#   Alternate key servers are due to reliability issues with ha.pool.sks-keyservers.net\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /tmp/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.6/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && gpg --batch --verify /tmp/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#   Setup environment\nWORKDIR /var/scitran\nRUN mkdir -p /var/scitran/config /var/scitran/data /var/scitran/code/api /var/scitran/logs /var/scitran/keys\n#   Declaring a volume makes the intent to map externally explicit. This enables\n#   the contents to survive/persist across container versions, and easy access\n#   to the contents outside the container.\n#\n#   Declaring the VOLUME in the Dockerfile guarantees the contents are empty\n#   for any new container that doesn't specify a volume map via 'docker run -v '\n#   or similar option.\n#\nVOLUME /var/scitran/keys\nVOLUME /var/scitran/data\nVOLUME /var/scitran/logs\n#   Install pip modules\n#\n#   Split this out for better cache re-use.\n#\nCOPY requirements.txt docker/requirements-docker.txt /var/scitran/code/api/\nRUN pip install pip wheel setuptools --upgrade \\\n && pip install -r /var/scitran/code/api/requirements-docker.txt \\\n && pip install -r /var/scitran/code/api/requirements.txt\nCOPY tests /var/scitran/code/api/tests/\nRUN bash -e -x /var/scitran/code/api/tests/bin/setup-integration-tests-ubuntu.sh\n#   Copy full repo\n#\nCOPY . /var/scitran/code/api/\nCOPY docker/uwsgi-entrypoint.sh /var/scitran/\nCOPY docker/uwsgi-config.ini /var/scitran/config/\n#   Inject build information into image so the source of the container can be\n#   determined from within it.\nARG BRANCH_LABEL=NULL\nARG COMMIT_HASH=0\nCOPY docker/inject_build_info.sh /\nRUN /inject_build_info.sh ${BRANCH_LABEL} ${COMMIT_HASH} \\\n && rm /inject_build_info.sh\nENTRYPOINT [\"/var/scitran/uwsgi-entrypoint.sh\"]\nCMD [\"uwsgi\", \"--ini\", \"/var/scitran/config/uwsgi-config.ini\", \"--http\", \"0.0.0.0:8080\", \"--http-keepalive\", \"--so-keepalive\", \"--add-header\", \"Connection:\", \"Keep-Alive\"]\n","originalDockerfileUglifiedHash":"b2e239ea7631994d7691ffaa95692c97","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3813f9e9a9614baacf7f270a9d02eeb85b0201d7.dockerfile"}