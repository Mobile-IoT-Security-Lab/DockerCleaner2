{"seed":1861981730,"processedDockerfileHash":"e26ebdd15c05d97ca50adc2e89164e21","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS build\nENV CUDA_ARCH_BIN=\"\\\"35 52 60 61 70\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"70\\\"\"\n#   Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libatlas-base-dev libatlas-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml python-six wget -y \\\n && rm -rf /var/lib/apt/lists/*\n#   OpenCV 3.3.1 is needed to support custom allocators for GpuMat objects.\nRUN git clone --depth 1 -b 3.3.1 https://github.com/opencv/opencv.git /opencv \\\n && mkdir /opencv/build \\\n && cd /opencv/build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DWITH_CUFFT=OFF -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"-O3\" -DCUDA_FAST_MATH=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n#   A modified version of Caffe is used to properly handle multithreading and CUDA streams.\nRUN git clone --depth 1 -b bvlc_inference https://github.com/flx42/caffe.git /caffe \\\n && cd /caffe \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DUSE_CUDNN=ON -DUSE_OPENCV=ON -DUSE_LEVELDB=OFF -DUSE_LMDB=OFF -DBUILD_python=OFF -DBUILD_python_layer=OFF -DBUILD_matlab=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCUDA_NVCC_FLAGS=\"-O3\" \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && make clean\n#   Download Caffenet\nRUN /caffe/scripts/download_model_binary.py /caffe/models/bvlc_reference_caffenet \\\n && /caffe/data/ilsvrc12/get_ilsvrc_aux.sh\n#   Install golang\nENV GOLANG_VERSION=\"1.9.2\"\nRUN wget -nv -O - https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz | tar -C /usr/local -xz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#   Build inference server\nCOPY caffe /go/src/caffe-server\nCOPY common.h /go/src/common.h\nRUN go get -ldflags=\"-s -w\" caffe-server\n#   We use a multi-stage build to get a smaller image for deployment.\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nMAINTAINER Felix Abecassis \"fabecassis@nvidia.com\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libatlas3-base libboost-system1.58.0 libboost-thread1.58.0 libgflags2v5 libgoogle-glog0v5 libhdf5-10 libprotobuf9v5 libcudnn7=7.0.5.15-1+cuda9.0 cuda-cublas-9-0 cuda-curand-9-0 cuda-npp-9-0 -y \\\n && rm -rf /var/lib/apt/lists/\n#   Copy binary and dependencies\nCOPY --from=build /go/bin/caffe-server /usr/local/bin/caffe-server\nCOPY --from=build /usr/local/lib /usr/local/lib\nRUN ldconfig\n#   Copy dataset. If you use your own dataset: delete these lines and mount a volume from the host.\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/deploy.prototxt /opt/caffenet/deploy.prototxt\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel /opt/caffenet/bvlc_reference_caffenet.caffemodel\nCOPY --from=build /caffe/data/ilsvrc12/imagenet_mean.binaryproto /opt/caffenet/imagenet_mean.binaryproto\nCOPY --from=build /caffe/data/ilsvrc12/synset_words.txt /opt/caffenet/synset_words.txt\nWORKDIR /opt/caffenet\nCMD [\"caffe-server\", \"deploy.prototxt\", \"bvlc_reference_caffenet.caffemodel\", \"imagenet_mean.binaryproto\", \"synset_words.txt\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS build\nENV CUDA_ARCH_BIN=\"\\\"35 52 60 61 70\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"70\\\"\"\n#  Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libatlas-base-dev libatlas-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml python-six wget -y \\\n && rm -rf /var/lib/apt/lists/*\n#  OpenCV 3.3.1 is needed to support custom allocators for GpuMat objects.\nRUN git clone --depth 1 -b 3.3.1 https://github.com/opencv/opencv.git /opencv \\\n && mkdir /opencv/build \\\n && cd /opencv/build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DWITH_CUFFT=OFF -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"-O3\" -DCUDA_FAST_MATH=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n#  A modified version of Caffe is used to properly handle multithreading and CUDA streams.\nRUN git clone --depth 1 -b bvlc_inference https://github.com/flx42/caffe.git /caffe \\\n && cd /caffe \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DUSE_CUDNN=ON -DUSE_OPENCV=ON -DUSE_LEVELDB=OFF -DUSE_LMDB=OFF -DBUILD_python=OFF -DBUILD_python_layer=OFF -DBUILD_matlab=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCUDA_NVCC_FLAGS=\"-O3\" \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && make clean\n#  Download Caffenet\nRUN /caffe/scripts/download_model_binary.py /caffe/models/bvlc_reference_caffenet \\\n && /caffe/data/ilsvrc12/get_ilsvrc_aux.sh\n#  Install golang\nENV GOLANG_VERSION=\"1.9.2\"\nRUN wget -nv -O - https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz | tar -C /usr/local -xz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#  Build inference server\nCOPY caffe /go/src/caffe-server\nCOPY common.h /go/src/common.h\nRUN go get -ldflags=\"-s -w\" caffe-server\n#  We use a multi-stage build to get a smaller image for deployment.\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nMAINTAINER Felix Abecassis \"fabecassis@nvidia.com\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libatlas3-base libboost-system1.58.0 libboost-thread1.58.0 libgflags2v5 libgoogle-glog0v5 libhdf5-10 libprotobuf9v5 libcudnn7=7.0.5.15-1+cuda9.0 cuda-cublas-9-0 cuda-curand-9-0 cuda-npp-9-0 -y \\\n && rm -rf /var/lib/apt/lists/\n#  Copy binary and dependencies\nCOPY --from=build /go/bin/caffe-server /usr/local/bin/caffe-server\nCOPY --from=build /usr/local/lib /usr/local/lib\nRUN ldconfig\n#  Copy dataset. If you use your own dataset: delete these lines and mount a volume from the host.\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/deploy.prototxt /opt/caffenet/deploy.prototxt\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel /opt/caffenet/bvlc_reference_caffenet.caffemodel\nCOPY --from=build /caffe/data/ilsvrc12/imagenet_mean.binaryproto /opt/caffenet/imagenet_mean.binaryproto\nCOPY --from=build /caffe/data/ilsvrc12/synset_words.txt /opt/caffenet/synset_words.txt\nWORKDIR /opt/caffenet\nCMD [\"caffe-server\", \"deploy.prototxt\", \"bvlc_reference_caffenet.caffemodel\", \"imagenet_mean.binaryproto\", \"synset_words.txt\"]\n","injectedSmells":[],"originalDockerfileHash":"e4ea83648531b449509337936efb9622","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS build\nENV CUDA_ARCH_BIN=\"\\\"35 52 60 61 70\\\"\"\nENV CUDA_ARCH_PTX=\"\\\"70\\\"\"\n#   Install dependencies.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake git libatlas-base-dev libatlas-dev libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-dev libprotobuf-dev pkg-config protobuf-compiler python-yaml python-six wget -y \\\n && rm -rf /var/lib/apt/lists/*\n#   OpenCV 3.3.1 is needed to support custom allocators for GpuMat objects.\nRUN git clone --depth 1 -b 3.3.1 https://github.com/opencv/opencv.git /opencv \\\n && mkdir /opencv/build \\\n && cd /opencv/build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DWITH_CUDA=ON -DWITH_CUFFT=OFF -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DWITH_JPEG=ON -DBUILD_JPEG=ON -DWITH_PNG=ON -DBUILD_PNG=ON -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_FFMPEG=OFF -DWITH_GTK=OFF -DWITH_OPENCL=OFF -DWITH_QT=OFF -DWITH_V4L=OFF -DWITH_JASPER=OFF -DWITH_1394=OFF -DWITH_TIFF=OFF -DWITH_OPENEXR=OFF -DWITH_IPP=OFF -DWITH_WEBP=OFF -DBUILD_opencv_superres=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_videostab=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_flann=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_photo=OFF -DBUILD_opencv_shape=OFF -DBUILD_opencv_cudabgsegm=OFF -DBUILD_opencv_cudaoptflow=OFF -DBUILD_opencv_cudalegacy=OFF -DCUDA_NVCC_FLAGS=\"-O3\" -DCUDA_FAST_MATH=ON .. \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && rm -rf /opencv\n#   A modified version of Caffe is used to properly handle multithreading and CUDA streams.\nRUN git clone --depth 1 -b bvlc_inference https://github.com/flx42/caffe.git /caffe \\\n && cd /caffe \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCUDA_ARCH_NAME=Manual -DCUDA_ARCH_BIN=\"${CUDA_ARCH_BIN}\" -DCUDA_ARCH_PTX=\"${CUDA_ARCH_PTX}\" -DUSE_CUDNN=ON -DUSE_OPENCV=ON -DUSE_LEVELDB=OFF -DUSE_LMDB=OFF -DBUILD_python=OFF -DBUILD_python_layer=OFF -DBUILD_matlab=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCUDA_NVCC_FLAGS=\"-O3\" \\\n && make -j\"$( nproc ;)\" install \\\n && ldconfig \\\n && make clean\n#   Download Caffenet\nRUN /caffe/scripts/download_model_binary.py /caffe/models/bvlc_reference_caffenet \\\n && /caffe/data/ilsvrc12/get_ilsvrc_aux.sh\n#   Install golang\nENV GOLANG_VERSION=\"1.9.2\"\nRUN wget -nv -O - https://storage.googleapis.com/golang/go${GOLANG_VERSION}.linux-amd64.tar.gz | tar -C /usr/local -xz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\n#   Build inference server\nCOPY caffe /go/src/caffe-server\nCOPY common.h /go/src/common.h\nRUN go get -ldflags=\"-s -w\" caffe-server\n#   We use a multi-stage build to get a smaller image for deployment.\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nMAINTAINER Felix Abecassis \"fabecassis@nvidia.com\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libatlas3-base libboost-system1.58.0 libboost-thread1.58.0 libgflags2v5 libgoogle-glog0v5 libhdf5-10 libprotobuf9v5 libcudnn7=7.0.5.15-1+cuda9.0 cuda-cublas-9-0 cuda-curand-9-0 cuda-npp-9-0 -y \\\n && rm -rf /var/lib/apt/lists/\n#   Copy binary and dependencies\nCOPY --from=build /go/bin/caffe-server /usr/local/bin/caffe-server\nCOPY --from=build /usr/local/lib /usr/local/lib\nRUN ldconfig\n#   Copy dataset. If you use your own dataset: delete these lines and mount a volume from the host.\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/deploy.prototxt /opt/caffenet/deploy.prototxt\nCOPY --from=build /caffe/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel /opt/caffenet/bvlc_reference_caffenet.caffemodel\nCOPY --from=build /caffe/data/ilsvrc12/imagenet_mean.binaryproto /opt/caffenet/imagenet_mean.binaryproto\nCOPY --from=build /caffe/data/ilsvrc12/synset_words.txt /opt/caffenet/synset_words.txt\nWORKDIR /opt/caffenet\nCMD [\"caffe-server\", \"deploy.prototxt\", \"bvlc_reference_caffenet.caffemodel\", \"imagenet_mean.binaryproto\", \"synset_words.txt\"]\n","originalDockerfileUglifiedHash":"35a58b824d8ad276fae2c4edc20b6e69","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e3497b8ee41d5467bd5607b29d7883fb0037587a.dockerfile"}