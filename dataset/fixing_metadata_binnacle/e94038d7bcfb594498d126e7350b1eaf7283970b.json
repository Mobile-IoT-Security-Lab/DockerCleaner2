{"seed":4103840170,"processedDockerfileHash":"cc1aacf8da2876c3b4dc6950790a940c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.8\nMAINTAINER brennolncosta@gmail.com\nRUN apk add autoconf=2.69-r2 automake=1.16.1-r0 build-base=0.5-r1 curl=7.61.1-r3 git=2.18.4-r0 go=1.10.8-r0 libtool=2.4.6-r5 unzip=6.0-r6 --update\n#   Build protobuf against configured revision\n#\nENV PROTOBUF_REVISION=\"3.6.0\"\nRUN curl -sLO https://github.com/google/protobuf/releases/download/v${PROTOBUF_REVISION}/protoc-${PROTOBUF_REVISION}-linux-x86_64.zip \\\n && unzip protoc-${PROTOBUF_REVISION}-linux-x86_64.zip -d ./usr/local \\\n && chmod +x /usr/local/bin/protoc \\\n && chmod -R 755 /usr/local/include/ \\\n && rm protoc-${PROTOBUF_REVISION}-linux-x86_64.zip\nENV LC_ALL=\"en_US.UTF-8\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\"\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/andyshinn/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.27-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add ca-certificates=20191127-r2 bash=4.4.19-r1 tzdata=2020a-r0 --no-cache --virtual=build-dependencies \\\n && curl -sL -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache --allow-untrusted \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"181\" \\\n    JAVA_BUILD=\"13\" \\\n    JAVA_HOME=\"/opt/jdk\"\nRUN apk add ca-certificates=20191127-r2 --no-cache --virtual=java-dependencies \\\n && cd \"/tmp\" \\\n && curl -sL --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" -O \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${ORACLE_TOKEN}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzvf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p $JAVA_HOME \\\n && mv jdk1*/* $JAVA_HOME \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf $JAVA_HOME/*src.zip $JAVA_HOME/lib/missioncontrol $JAVA_HOME/lib/visualvm $JAVA_HOME/lib/*javafx* $JAVA_HOME/jre/lib/plugin.jar $JAVA_HOME/jre/lib/ext/jfxrt.jar $JAVA_HOME/jre/bin/javaws $JAVA_HOME/jre/lib/javaws.jar $JAVA_HOME/jre/lib/desktop $JAVA_HOME/jre/plugin $JAVA_HOME/jre/lib/deploy* $JAVA_HOME/jre/lib/*javafx* $JAVA_HOME/jre/lib/*jfx* $JAVA_HOME/jre/lib/amd64/libdecora_sse.so $JAVA_HOME/jre/lib/amd64/libprism_*.so $JAVA_HOME/jre/lib/amd64/libfxplugins.so $JAVA_HOME/jre/lib/amd64/libglass.so $JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so $JAVA_HOME/jre/lib/amd64/libjavafx*.so $JAVA_HOME/jre/lib/amd64/libjfx*.so \\\n && apk del java-dependencies \\\n && rm -rf \"/tmp/\"*\n#   Build [protoc-gen-doc](https://github.com/estan/protoc-gen-doc) against configured revision\n#\n#   protobuf plugin to generate docs in markdown, html, docbook and pdf\n#\nENV PROTOC_GEN_DOC_REVISION=\"1.1.0\"\nRUN curl -sLO https://github.com/pseudomuto/protoc-gen-doc/releases/download/v${PROTOC_GEN_DOC_REVISION}/protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && tar -zxvf protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && cp protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10/protoc-gen-doc /usr/local/bin/ \\\n && rm -rf protoc-gen-doc-*\n#   Build [ScalaPB](https://github.com/trueaccord/ScalaPB) plugin\n#\n#   This plugin make possible to generate Scala's case class for a given proto.\n#\n#   Important: Java is a dependency!\n#\nENV SCALA_PB_VERSION=\"0.7.4\"\nRUN curl -sLO \"https://github.com/trueaccord/ScalaPB/releases/download/v$SCALA_PB_VERSION/scalapbc-$SCALA_PB_VERSION.zip\" \\\n && unzip \"scalapbc-$SCALA_PB_VERSION.zip\" \\\n && mv \"scalapbc-$SCALA_PB_VERSION\" /usr/local/lib/scalapbc \\\n && ln -s /usr/local/lib/scalapbc/bin/scalapbc /usr/local/bin/scalapbc \\\n && rm \"/scalapbc-$SCALA_PB_VERSION.zip\"\n#   Install [protoc-gen-go](https://github.com/protobuf/protoc-gen-go)\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir /go \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go get -u github.com/square/goprotowrap/cmd/protowrap\n#   Needed shared libraries and tools by protobuf and their plugins\nRUN apk add bash=4.4.19-r1 libstdc++=6.4.0-r9 --update\n#   Install  [rust-protobuf](https://github.com/stepancheg/rust-protobuf) plugin\nENV RUST_PROTOBUF_VERSION=\"2.0.3\"\nENV RUSTPATH=\"/rust\"\nRUN apk add cargo=1.26.2-r0 > 1.26.0 \\\n && mkdir $RUSTPATH \\\n && cargo install --all-features --root $RUSTPATH --vers $RUST_PROTOBUF_VERSION protobuf-codegen\nENV PATH=\"$RUSTPATH/bin:$PATH\"\n#   Cleaning up\nRUN apk del autoconf automake build-base cargo curl git libtool unzip \\\n && rm -rf /var/cache/apk/*\nRUN mkdir /build\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.8\nMAINTAINER brennolncosta@gmail.com\nRUN apk add --update autoconf automake build-base curl git go libtool unzip\n#  Build protobuf against configured revision\n#\nENV PROTOBUF_REVISION=\"3.6.0\"\nRUN curl -sLO https://github.com/google/protobuf/releases/download/v${PROTOBUF_REVISION}/protoc-${PROTOBUF_REVISION}-linux-x86_64.zip \\\n && unzip protoc-${PROTOBUF_REVISION}-linux-x86_64.zip -d ./usr/local \\\n && chmod +x /usr/local/bin/protoc \\\n && chmod -R 755 /usr/local/include/ \\\n && rm protoc-${PROTOBUF_REVISION}-linux-x86_64.zip\nENV LC_ALL=\"en_US.UTF-8\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\"\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/andyshinn/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.27-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=build-dependencies ca-certificates bash tzdata \\\n && curl -sL -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache --allow-untrusted \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"181\" \\\n    JAVA_BUILD=\"13\" \\\n    ORACLE_TOKEN=\"96a7b8442fe848ef90c96a2fad6ed6d1\" \\\n    JAVA_HOME=\"/opt/jdk\"\nRUN apk add --no-cache --virtual=java-dependencies ca-certificates \\\n && cd \"/tmp\" \\\n && curl -sL --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" -O \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${ORACLE_TOKEN}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzvf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p $JAVA_HOME \\\n && mv jdk1*/* $JAVA_HOME \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf $JAVA_HOME/*src.zip $JAVA_HOME/lib/missioncontrol $JAVA_HOME/lib/visualvm $JAVA_HOME/lib/*javafx* $JAVA_HOME/jre/lib/plugin.jar $JAVA_HOME/jre/lib/ext/jfxrt.jar $JAVA_HOME/jre/bin/javaws $JAVA_HOME/jre/lib/javaws.jar $JAVA_HOME/jre/lib/desktop $JAVA_HOME/jre/plugin $JAVA_HOME/jre/lib/deploy* $JAVA_HOME/jre/lib/*javafx* $JAVA_HOME/jre/lib/*jfx* $JAVA_HOME/jre/lib/amd64/libdecora_sse.so $JAVA_HOME/jre/lib/amd64/libprism_*.so $JAVA_HOME/jre/lib/amd64/libfxplugins.so $JAVA_HOME/jre/lib/amd64/libglass.so $JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so $JAVA_HOME/jre/lib/amd64/libjavafx*.so $JAVA_HOME/jre/lib/amd64/libjfx*.so \\\n && apk del java-dependencies \\\n && rm -rf \"/tmp/\"*\n#  Build [protoc-gen-doc](https://github.com/estan/protoc-gen-doc) against configured revision\n#\n#  protobuf plugin to generate docs in markdown, html, docbook and pdf\n#\nENV PROTOC_GEN_DOC_REVISION=\"1.1.0\"\nRUN curl -sLO https://github.com/pseudomuto/protoc-gen-doc/releases/download/v${PROTOC_GEN_DOC_REVISION}/protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && tar -zxvf protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && cp protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10/protoc-gen-doc /usr/local/bin/ \\\n && rm -rf protoc-gen-doc-*\n#  Build [ScalaPB](https://github.com/trueaccord/ScalaPB) plugin\n#\n#  This plugin make possible to generate Scala's case class for a given proto.\n#\n#  Important: Java is a dependency!\n#\nENV SCALA_PB_VERSION=\"0.7.4\"\nRUN curl -sLO \"https://github.com/trueaccord/ScalaPB/releases/download/v$SCALA_PB_VERSION/scalapbc-$SCALA_PB_VERSION.zip\" \\\n && unzip \"scalapbc-$SCALA_PB_VERSION.zip\" \\\n && mv \"scalapbc-$SCALA_PB_VERSION\" /usr/local/lib/scalapbc \\\n && ln -s /usr/local/lib/scalapbc/bin/scalapbc /usr/local/bin/scalapbc \\\n && rm \"/scalapbc-$SCALA_PB_VERSION.zip\"\n#  Install [protoc-gen-go](https://github.com/protobuf/protoc-gen-go)\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir /go \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go get -u github.com/square/goprotowrap/cmd/protowrap\n#  Needed shared libraries and tools by protobuf and their plugins\nRUN apk --update add bash libstdc++\n#  Install  [rust-protobuf](https://github.com/stepancheg/rust-protobuf) plugin\nENV RUST_PROTOBUF_VERSION=\"2.0.3\"\nENV RUSTPATH=\"/rust\"\nRUN apk add cargo > 1.26.0 \\\n && mkdir $RUSTPATH \\\n && cargo install --all-features --root $RUSTPATH --vers $RUST_PROTOBUF_VERSION protobuf-codegen\nENV PATH=\"$RUSTPATH/bin:$PATH\"\n#  Cleaning up\nRUN apk del autoconf automake build-base cargo curl git libtool unzip \\\n && rm -rf /var/cache/apk/*\nRUN mkdir /build\n","injectedSmells":[],"originalDockerfileHash":"0c0f8c5acfbe272de2af541bf49ba1aa","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.8\nMAINTAINER brennolncosta@gmail.com\nRUN apk add --update autoconf automake build-base curl git go libtool unzip\n#   Build protobuf against configured revision\n#\nENV PROTOBUF_REVISION=\"3.6.0\"\nRUN curl -sLO https://github.com/google/protobuf/releases/download/v${PROTOBUF_REVISION}/protoc-${PROTOBUF_REVISION}-linux-x86_64.zip \\\n && unzip protoc-${PROTOBUF_REVISION}-linux-x86_64.zip -d ./usr/local \\\n && chmod +x /usr/local/bin/protoc \\\n && chmod -R 755 /usr/local/include/ \\\n && rm protoc-${PROTOBUF_REVISION}-linux-x86_64.zip\nENV LC_ALL=\"en_US.UTF-8\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\"\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/andyshinn/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.27-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=build-dependencies ca-certificates bash tzdata \\\n && curl -sL -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" -O \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache --allow-untrusted \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"181\" \\\n    JAVA_BUILD=\"13\" \\\n    ORACLE_TOKEN=\"96a7b8442fe848ef90c96a2fad6ed6d1\" \\\n    JAVA_HOME=\"/opt/jdk\"\nRUN apk add --no-cache --virtual=java-dependencies ca-certificates \\\n && cd \"/tmp\" \\\n && curl -sL --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" -O \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${ORACLE_TOKEN}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzvf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p $JAVA_HOME \\\n && mv jdk1*/* $JAVA_HOME \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf $JAVA_HOME/*src.zip $JAVA_HOME/lib/missioncontrol $JAVA_HOME/lib/visualvm $JAVA_HOME/lib/*javafx* $JAVA_HOME/jre/lib/plugin.jar $JAVA_HOME/jre/lib/ext/jfxrt.jar $JAVA_HOME/jre/bin/javaws $JAVA_HOME/jre/lib/javaws.jar $JAVA_HOME/jre/lib/desktop $JAVA_HOME/jre/plugin $JAVA_HOME/jre/lib/deploy* $JAVA_HOME/jre/lib/*javafx* $JAVA_HOME/jre/lib/*jfx* $JAVA_HOME/jre/lib/amd64/libdecora_sse.so $JAVA_HOME/jre/lib/amd64/libprism_*.so $JAVA_HOME/jre/lib/amd64/libfxplugins.so $JAVA_HOME/jre/lib/amd64/libglass.so $JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so $JAVA_HOME/jre/lib/amd64/libjavafx*.so $JAVA_HOME/jre/lib/amd64/libjfx*.so \\\n && apk del java-dependencies \\\n && rm -rf \"/tmp/\"*\n#   Build [protoc-gen-doc](https://github.com/estan/protoc-gen-doc) against configured revision\n#\n#   protobuf plugin to generate docs in markdown, html, docbook and pdf\n#\nENV PROTOC_GEN_DOC_REVISION=\"1.1.0\"\nRUN curl -sLO https://github.com/pseudomuto/protoc-gen-doc/releases/download/v${PROTOC_GEN_DOC_REVISION}/protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && tar -zxvf protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10.tar.gz \\\n && cp protoc-gen-doc-${PROTOC_GEN_DOC_REVISION}.linux-amd64.go1.10/protoc-gen-doc /usr/local/bin/ \\\n && rm -rf protoc-gen-doc-*\n#   Build [ScalaPB](https://github.com/trueaccord/ScalaPB) plugin\n#\n#   This plugin make possible to generate Scala's case class for a given proto.\n#\n#   Important: Java is a dependency!\n#\nENV SCALA_PB_VERSION=\"0.7.4\"\nRUN curl -sLO \"https://github.com/trueaccord/ScalaPB/releases/download/v$SCALA_PB_VERSION/scalapbc-$SCALA_PB_VERSION.zip\" \\\n && unzip \"scalapbc-$SCALA_PB_VERSION.zip\" \\\n && mv \"scalapbc-$SCALA_PB_VERSION\" /usr/local/lib/scalapbc \\\n && ln -s /usr/local/lib/scalapbc/bin/scalapbc /usr/local/bin/scalapbc \\\n && rm \"/scalapbc-$SCALA_PB_VERSION.zip\"\n#   Install [protoc-gen-go](https://github.com/protobuf/protoc-gen-go)\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir /go \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go get -u github.com/square/goprotowrap/cmd/protowrap\n#   Needed shared libraries and tools by protobuf and their plugins\nRUN apk --update add bash libstdc++\n#   Install  [rust-protobuf](https://github.com/stepancheg/rust-protobuf) plugin\nENV RUST_PROTOBUF_VERSION=\"2.0.3\"\nENV RUSTPATH=\"/rust\"\nRUN apk add cargo > 1.26.0 \\\n && mkdir $RUSTPATH \\\n && cargo install --all-features --root $RUSTPATH --vers $RUST_PROTOBUF_VERSION protobuf-codegen\nENV PATH=\"$RUSTPATH/bin:$PATH\"\n#   Cleaning up\nRUN apk del autoconf automake build-base cargo curl git libtool unzip \\\n && rm -rf /var/cache/apk/*\nRUN mkdir /build\n","originalDockerfileUglifiedHash":"c80abc0d1177dc9f32b51aec1471693d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e94038d7bcfb594498d126e7350b1eaf7283970b.dockerfile"}