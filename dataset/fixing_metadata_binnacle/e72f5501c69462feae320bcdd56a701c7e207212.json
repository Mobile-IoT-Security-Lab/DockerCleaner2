{"seed":2193284333,"processedDockerfileHash":"dfe14f176f7ef194d81a5eef4df6852d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\nRUN > /etc/profile \\\n && > /root/.profile\nRUN echo \"set +h\" >> /root/.profile \\\n && echo \"umask 022\" >> /root/.profile\nSHELL [\"/bin/bash\", \"-lc\"]\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 wget=1.19.4-1ubuntu2.2 curl=7.58.0-2ubuntu3.24 gawk=1:4.1.4+dfsg-1build1 flex=2.6.4-6 bison=2:3.0.4.dfsg-1build1 bzip2=1.0.6-8.1ubuntu0.2 liblzma5=5.2.2-1.3ubuntu0.1 texinfo=6.5.0.dfsg.1-2 file=1:5.32-2ubuntu0.4 gettext=0.19.8.1-6ubuntu0.3 python=2.7.15~rc1-1 python3=3.6.7-1~18.04 curl=7.58.0-2ubuntu3.24 git=1:2.17.1-1ubuntu0.17 fakeroot=1.22-2ubuntu1 gettext=0.19.8.1-6ubuntu0.3 gpg=2.2.4-1ubuntu1.6 ruby=1:2.5.1 ruby-bundler=1.16.1-1 ruby-dev=1:2.5.1 make=4.1-9.1ubuntu1 file=1:5.32-2ubuntu0.4 m4=1.4.18-1 xz-utils=5.2.2-1.3ubuntu0.1 texlive=2017.20180305-1 -y\nRUN git config --global user.name flant \\\n && git config --global user.email 256@flant.com\nENV LFS=\"/mnt/lfs\"\nENV TOOLS=\"/.werf/stapel\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nRUN mkdir -pv $LFS$TOOLS \\\n && mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nCOPY ./wget-list $LFS/sources/wget-list\nCOPY ./md5sums $LFS/sources/md5sums\nRUN wget --input-file=$LFS/sources/wget-list --continue --directory-prefix=$LFS/sources\nRUN bash -c \"pushd $LFS/sources \\\n && md5sum -c $LFS/sources/md5sums \\\n && popd\"\nCOPY version-check.sh $LFS/sources/version-check.sh\nRUN $LFS/sources/version-check.sh\nRUN ln -sv $LFS/.werf /\nENV LC_ALL=\"POSIX\"\nENV PATH=\"$TOOLS/bin:/bin:/usr/bin\"\nENV MAKEFLAGS=\"-j 5\"\nRUN echo \"Binutils pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --with-sysroot=$LFS --with-lib-path=$TOOLS/lib --target=$LFS_TGT --disable-nls --disable-werror\nWORKDIR $LFS/sources/binutils/build\nRUN make\nRUN mkdir -pv $TOOLS/lib \\\n && ln -sv lib $TOOLS/lib64 \\\n && make install\nCOPY ./gcc-before-configure.sh $LFS/sources/gcc-before-configure.sh\nRUN echo \"GCC pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --target=$LFS_TGT --prefix=$TOOLS --with-glibc-version=2.11 --with-sysroot=$LFS --with-newlib --without-headers --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --disable-nls --disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libmpx --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN cd $LFS/sources/ \\\n && mkdir linux \\\n && tar xf linux*.tar.* -C linux --strip-components 1\nWORKDIR $LFS/sources/linux\nRUN echo \"Linux API Headers\" \\\n && make mrproper \\\n && make INSTALL_HDR_PATH=dest headers_install \\\n && cp -rv dest/include/* $TOOLS/include\nRUN echo \"Glibc\" \\\n && cd $LFS/sources/ \\\n && mkdir glibc \\\n && tar xf glibc*.tar.* -C glibc --strip-components 1 \\\n && cd glibc \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --host=$LFS_TGT --build=$( ../scripts/config.guess ;) --enable-kernel=3.2 --with-headers=$TOOLS/include libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes\nWORKDIR $LFS/sources/glibc/build\nRUN make\nRUN make install\nRUN echo \"Libstdc++\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../libstdc++-v3/configure --host=$LFS_TGT --prefix=$TOOLS --disable-multilib --disable-nls --disable-libstdcxx-threads --disable-libstdcxx-pch --with-gxx-include-dir=$TOOLS/$LFS_TGT/include/c++/8.2.0\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN echo \"Binutils pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf binutils \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --disable-nls --disable-werror --with-lib-path=$TOOLS/lib --with-sysroot\nRUN echo \"GCC pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && cat gcc/limitx.h gcc/glimits.h gcc/limity.h > `dirname $( $LFS_TGT-gcc -print-libgcc-file-name ;) `/include-fixed/limits.h \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc CXX=$LFS_TGT-g++ AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --enable-languages=c,c++ --disable-libstdcxx-pch --disable-multilib --disable-bootstrap --disable-libgomp\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN ln -sv gcc $TOOLS/bin/cc\nCOPY ./omnibus /omnibus\nWORKDIR /omnibus\nENV BUNDLE_GEMFILE=\"/omnibus/Gemfile\"\nENV PATH=\"/bin:/usr/bin:/usr/local/bin\"\nRUN bundle install --without development\nENV PATH=\"$TOOLS/x86_64-lfs-linux-gnu/bin:$TOOLS/bin:$PATH\"\n#   Dpkg-architecture binary will make python-omnibus-package fail to build,\n#   because of python setup.py, which hardcodes /usr/include/... into preceeding include paths,\n#   in the case when dpkg-architecture is available in system: https://github.com/python/cpython/blob/master/setup.py#L485\n#   It is needed to remove that binary before omnibus-building.\nRUN mv $( which dpkg-architecture ;) /tmp/dpkg-architecture\nRUN bundle exec omnibus build -o append_timestamp:false werf-stapel\n#   python-apt package will install all libs in docker.from image.\n#   python-apt will be installed automatically by ansible apt module on first run.\n#   flant/werf-stapel offers support for ansible-apt-module only for ubuntu:14.04 ubuntu:16.04 ubuntu:18.04\nENV PATH=\"/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\"\nRUN apt-get install --no-install-recommends python-apt=1.6.6 libzstd1=1.3.3+dfsg-2ubuntu1.2 -y\nRUN cp /usr/lib/x86_64-linux-gnu/libapt-inst.so.2.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libapt-pkg.so.5.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/liblz4.so.1 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/liblzma.so.5 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libbz2.so.1.0 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libudev.so.1 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libzstd.so* $TOOLS/embedded/lib/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_inst.x86_64-linux-gnu.so /tmp/apt_inst.so \\\n && cp /tmp/apt_inst.so $TOOLS/embedded/lib/python2.7/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_pkg.x86_64-linux-gnu.so /tmp/apt_pkg.so \\\n && cp /tmp/apt_pkg.so $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/apt $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/aptsources $TOOLS/embedded/lib/python2.7/\n#   Cleanup stapel: only runtime libs and binaries are needed\nRUN rm -rf $TOOLS/LICENSE* $TOOLS/version-manifest.* $TOOLS/sbin $TOOLS/bin $TOOLS/include $TOOLS/x86_64-lfs-linux-gnu/include $TOOLS/x86_64-lfs-linux-gnu/lib $TOOLS/lib/*.a $TOOLS/lib/*.o $TOOLS/lib64/*.a $TOOLS/lib/gcc $TOOLS/libexec/gcc $TOOLS/share $TOOLS/var $TOOLS/embedded/lib/*.a $TOOLS/embedded/include $TOOLS/embedded/lib/python2.7/test $TOOLS/embedded/lib/python2.7/site-packages/ansible/galaxy $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/clustering $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/source_control $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/notification $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/web_infrastructure $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/remote_management $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/monitoring $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/windows $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/storage $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/cloud $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/network $TOOLS/embedded/lib/python2.7/site-packages/pip $TOOLS/embedded/lib/python2.7/site-packages/setuptools $TOOLS/embedded/lib/python2.7/site-packages/*.dist-info $TOOLS/embedded/share/doc $TOOLS/embedded/share/info $TOOLS/embedded/share/man $TOOLS/embedded/share/local $TOOLS/embedded/var $TOOLS/embedded/info $TOOLS/embedded/man\nRUN cp $TOOLS/x86_64-lfs-linux-gnu/bin/ld /tmp \\\n && rm -rf $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mkdir -p $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mv /tmp/ld $TOOLS/x86_64-lfs-linux-gnu/bin\nRUN cp $TOOLS/lib/gconv/UNICODE.so /tmp \\\n && rm -rf $TOOLS/lib/gconv \\\n && mkdir -p $TOOLS/lib/gconv \\\n && mv /tmp/UNICODE.so $TOOLS/lib/gconv\nRUN find $TOOLS/embedded/lib/python2.7 -name *.py[oc] | xargs rm\n#   Import tools\nFROM scratch\nCMD [\"no-such-command\"]\nCOPY --from=0 /.werf/stapel /.werf/stapel\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\nRUN > /etc/profile \\\n && > /root/.profile\nRUN echo \"set +h\" >> /root/.profile \\\n && echo \"umask 022\" >> /root/.profile\nSHELL [\"/bin/bash\", \"-lc\"]\nRUN apt-get update \\\n && apt-get install -y build-essential wget curl gawk flex bison bzip2 liblzma5 texinfo file gettext python python3 curl git fakeroot gettext gpg ruby ruby-bundler ruby-dev make file m4 xz-utils texlive\nRUN git config --global user.name flant \\\n && git config --global user.email 256@flant.com\nENV LFS=\"/mnt/lfs\"\nENV TOOLS=\"/.werf/stapel\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nRUN mkdir -pv $LFS$TOOLS \\\n && mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nADD ./wget-list $LFS/sources/wget-list\nADD ./md5sums $LFS/sources/md5sums\nRUN wget --input-file=$LFS/sources/wget-list --continue --directory-prefix=$LFS/sources\nRUN bash -c \"pushd $LFS/sources \\\n && md5sum -c $LFS/sources/md5sums \\\n && popd\"\nADD version-check.sh $LFS/sources/version-check.sh\nRUN $LFS/sources/version-check.sh\nRUN ln -sv $LFS/.werf /\nENV LC_ALL=\"POSIX\"\nENV PATH=\"$TOOLS/bin:/bin:/usr/bin\"\nENV MAKEFLAGS=\"-j 5\"\nRUN echo \"Binutils pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --with-sysroot=$LFS --with-lib-path=$TOOLS/lib --target=$LFS_TGT --disable-nls --disable-werror\nWORKDIR $LFS/sources/binutils/build\nRUN make\nRUN mkdir -pv $TOOLS/lib \\\n && ln -sv lib $TOOLS/lib64 \\\n && make install\nADD ./gcc-before-configure.sh $LFS/sources/gcc-before-configure.sh\nRUN echo \"GCC pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --target=$LFS_TGT --prefix=$TOOLS --with-glibc-version=2.11 --with-sysroot=$LFS --with-newlib --without-headers --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --disable-nls --disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libmpx --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN cd $LFS/sources/ \\\n && mkdir linux \\\n && tar xf linux*.tar.* -C linux --strip-components 1\nWORKDIR $LFS/sources/linux\nRUN echo \"Linux API Headers\" \\\n && make mrproper \\\n && make INSTALL_HDR_PATH=dest headers_install \\\n && cp -rv dest/include/* $TOOLS/include\nRUN echo \"Glibc\" \\\n && cd $LFS/sources/ \\\n && mkdir glibc \\\n && tar xf glibc*.tar.* -C glibc --strip-components 1 \\\n && cd glibc \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --host=$LFS_TGT --build=$( ../scripts/config.guess ;) --enable-kernel=3.2 --with-headers=$TOOLS/include libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes\nWORKDIR $LFS/sources/glibc/build\nRUN make\nRUN make install\nRUN echo \"Libstdc++\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../libstdc++-v3/configure --host=$LFS_TGT --prefix=$TOOLS --disable-multilib --disable-nls --disable-libstdcxx-threads --disable-libstdcxx-pch --with-gxx-include-dir=$TOOLS/$LFS_TGT/include/c++/8.2.0\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN echo \"Binutils pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf binutils \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --disable-nls --disable-werror --with-lib-path=$TOOLS/lib --with-sysroot\nRUN echo \"GCC pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && cat gcc/limitx.h gcc/glimits.h gcc/limity.h > `dirname $( $LFS_TGT-gcc -print-libgcc-file-name ;) `/include-fixed/limits.h \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc CXX=$LFS_TGT-g++ AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --enable-languages=c,c++ --disable-libstdcxx-pch --disable-multilib --disable-bootstrap --disable-libgomp\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN ln -sv gcc $TOOLS/bin/cc\nADD ./omnibus /omnibus\nWORKDIR /omnibus\nENV BUNDLE_GEMFILE=\"/omnibus/Gemfile\"\nENV PATH=\"/bin:/usr/bin:/usr/local/bin\"\nRUN bundle install --without development\nENV PATH=\"$TOOLS/x86_64-lfs-linux-gnu/bin:$TOOLS/bin:$PATH\"\n#  Dpkg-architecture binary will make python-omnibus-package fail to build,\n#  because of python setup.py, which hardcodes /usr/include/... into preceeding include paths,\n#  in the case when dpkg-architecture is available in system: https://github.com/python/cpython/blob/master/setup.py#L485\n#  It is needed to remove that binary before omnibus-building.\nRUN mv $( which dpkg-architecture ;) /tmp/dpkg-architecture\nRUN bundle exec omnibus build -o append_timestamp:false werf-stapel\n#  python-apt package will install all libs in docker.from image.\n#  python-apt will be installed automatically by ansible apt module on first run.\n#  flant/werf-stapel offers support for ansible-apt-module only for ubuntu:14.04 ubuntu:16.04 ubuntu:18.04\nENV PATH=\"/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\"\nRUN apt-get install -y python-apt libzstd1\nRUN cp /usr/lib/x86_64-linux-gnu/libapt-inst.so.2.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libapt-pkg.so.5.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/liblz4.so.1 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/liblzma.so.5 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libbz2.so.1.0 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libudev.so.1 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libzstd.so* $TOOLS/embedded/lib/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_inst.x86_64-linux-gnu.so /tmp/apt_inst.so \\\n && cp /tmp/apt_inst.so $TOOLS/embedded/lib/python2.7/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_pkg.x86_64-linux-gnu.so /tmp/apt_pkg.so \\\n && cp /tmp/apt_pkg.so $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/apt $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/aptsources $TOOLS/embedded/lib/python2.7/\n#  Cleanup stapel: only runtime libs and binaries are needed\nRUN rm -rf $TOOLS/LICENSE* $TOOLS/version-manifest.* $TOOLS/sbin $TOOLS/bin $TOOLS/include $TOOLS/x86_64-lfs-linux-gnu/include $TOOLS/x86_64-lfs-linux-gnu/lib $TOOLS/lib/*.a $TOOLS/lib/*.o $TOOLS/lib64/*.a $TOOLS/lib/gcc $TOOLS/libexec/gcc $TOOLS/share $TOOLS/var $TOOLS/embedded/lib/*.a $TOOLS/embedded/include $TOOLS/embedded/lib/python2.7/test $TOOLS/embedded/lib/python2.7/site-packages/ansible/galaxy $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/clustering $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/source_control $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/notification $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/web_infrastructure $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/remote_management $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/monitoring $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/windows $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/storage $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/cloud $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/network $TOOLS/embedded/lib/python2.7/site-packages/pip $TOOLS/embedded/lib/python2.7/site-packages/setuptools $TOOLS/embedded/lib/python2.7/site-packages/*.dist-info $TOOLS/embedded/share/doc $TOOLS/embedded/share/info $TOOLS/embedded/share/man $TOOLS/embedded/share/local $TOOLS/embedded/var $TOOLS/embedded/info $TOOLS/embedded/man\nRUN cp $TOOLS/x86_64-lfs-linux-gnu/bin/ld /tmp \\\n && rm -rf $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mkdir -p $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mv /tmp/ld $TOOLS/x86_64-lfs-linux-gnu/bin\nRUN cp $TOOLS/lib/gconv/UNICODE.so /tmp \\\n && rm -rf $TOOLS/lib/gconv \\\n && mkdir -p $TOOLS/lib/gconv \\\n && mv /tmp/UNICODE.so $TOOLS/lib/gconv\nRUN find $TOOLS/embedded/lib/python2.7 -name *.py[oc] | xargs rm\n#  Import tools\nFROM scratch\nCMD [\"no-such-command\"]\nCOPY --from=0 /.werf/stapel /.werf/stapel\n","injectedSmells":[],"originalDockerfileHash":"f36fbe38e7c00d6e81c740e882badced","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\nRUN > /etc/profile \\\n && > /root/.profile\nRUN echo \"set +h\" >> /root/.profile \\\n && echo \"umask 022\" >> /root/.profile\nSHELL [\"/bin/bash\", \"-lc\"]\nRUN apt-get update \\\n && apt-get install build-essential wget curl gawk flex bison bzip2 liblzma5 texinfo file gettext python python3 curl git fakeroot gettext gpg ruby ruby-bundler ruby-dev make file m4 xz-utils texlive -y\nRUN git config --global user.name flant \\\n && git config --global user.email 256@flant.com\nENV LFS=\"/mnt/lfs\"\nENV TOOLS=\"/.werf/stapel\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nRUN mkdir -pv $LFS$TOOLS \\\n && mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nADD ./wget-list $LFS/sources/wget-list\nADD ./md5sums $LFS/sources/md5sums\nRUN wget --input-file=$LFS/sources/wget-list --continue --directory-prefix=$LFS/sources\nRUN bash -c \"pushd $LFS/sources \\\n && md5sum -c $LFS/sources/md5sums \\\n && popd\"\nADD version-check.sh $LFS/sources/version-check.sh\nRUN $LFS/sources/version-check.sh\nRUN ln -sv $LFS/.werf /\nENV LC_ALL=\"POSIX\"\nENV PATH=\"$TOOLS/bin:/bin:/usr/bin\"\nENV MAKEFLAGS=\"-j 5\"\nRUN echo \"Binutils pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --with-sysroot=$LFS --with-lib-path=$TOOLS/lib --target=$LFS_TGT --disable-nls --disable-werror\nWORKDIR $LFS/sources/binutils/build\nRUN make\nRUN mkdir -pv $TOOLS/lib \\\n && ln -sv lib $TOOLS/lib64 \\\n && make install\nADD ./gcc-before-configure.sh $LFS/sources/gcc-before-configure.sh\nRUN echo \"GCC pass 1\" \\\n && cd $LFS/sources/ \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --target=$LFS_TGT --prefix=$TOOLS --with-glibc-version=2.11 --with-sysroot=$LFS --with-newlib --without-headers --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --disable-nls --disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libmpx --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN cd $LFS/sources/ \\\n && mkdir linux \\\n && tar xf linux*.tar.* -C linux --strip-components 1\nWORKDIR $LFS/sources/linux\nRUN echo \"Linux API Headers\" \\\n && make mrproper \\\n && make INSTALL_HDR_PATH=dest headers_install \\\n && cp -rv dest/include/* $TOOLS/include\nRUN echo \"Glibc\" \\\n && cd $LFS/sources/ \\\n && mkdir glibc \\\n && tar xf glibc*.tar.* -C glibc --strip-components 1 \\\n && cd glibc \\\n && mkdir -v build \\\n && cd build \\\n && ../configure --prefix=$TOOLS --host=$LFS_TGT --build=$( ../scripts/config.guess ;) --enable-kernel=3.2 --with-headers=$TOOLS/include libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes\nWORKDIR $LFS/sources/glibc/build\nRUN make\nRUN make install\nRUN echo \"Libstdc++\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && ../libstdc++-v3/configure --host=$LFS_TGT --prefix=$TOOLS --disable-multilib --disable-nls --disable-libstdcxx-threads --disable-libstdcxx-pch --with-gxx-include-dir=$TOOLS/$LFS_TGT/include/c++/8.2.0\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN echo \"Binutils pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf binutils \\\n && mkdir binutils \\\n && tar xf binutils-*.tar.* -C binutils --strip-components 1 \\\n && cd binutils \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --disable-nls --disable-werror --with-lib-path=$TOOLS/lib --with-sysroot\nRUN echo \"GCC pass 2\" \\\n && cd $LFS/sources/ \\\n && rm -rf gcc \\\n && mkdir gcc \\\n && tar xf gcc-*.tar.* -C gcc --strip-components 1 \\\n && mkdir gcc/mpfr \\\n && tar xf mpfr*.tar.* -C gcc/mpfr --strip-components 1 \\\n && mkdir gcc/gmp \\\n && tar xf gmp*.tar.* -C gcc/gmp --strip-components 1 \\\n && mkdir gcc/mpc \\\n && tar xf mpc*.tar.* -C gcc/mpc --strip-components 1 \\\n && cd gcc \\\n && cat gcc/limitx.h gcc/glimits.h gcc/limity.h > `dirname $( $LFS_TGT-gcc -print-libgcc-file-name ;) `/include-fixed/limits.h \\\n && $LFS/sources/gcc-before-configure.sh \\\n && mkdir -v build \\\n && cd build \\\n && CC=$LFS_TGT-gcc CXX=$LFS_TGT-g++ AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib ../configure --prefix=$TOOLS --with-local-prefix=$TOOLS --with-native-system-header-dir=$TOOLS/include --enable-languages=c,c++ --disable-libstdcxx-pch --disable-multilib --disable-bootstrap --disable-libgomp\nWORKDIR $LFS/sources/gcc/build\nRUN make\nRUN make install\nRUN ln -sv gcc $TOOLS/bin/cc\nADD ./omnibus /omnibus\nWORKDIR /omnibus\nENV BUNDLE_GEMFILE=\"/omnibus/Gemfile\"\nENV PATH=\"/bin:/usr/bin:/usr/local/bin\"\nRUN bundle install --without development\nENV PATH=\"$TOOLS/x86_64-lfs-linux-gnu/bin:$TOOLS/bin:$PATH\"\n#   Dpkg-architecture binary will make python-omnibus-package fail to build,\n#   because of python setup.py, which hardcodes /usr/include/... into preceeding include paths,\n#   in the case when dpkg-architecture is available in system: https://github.com/python/cpython/blob/master/setup.py#L485\n#   It is needed to remove that binary before omnibus-building.\nRUN mv $( which dpkg-architecture ;) /tmp/dpkg-architecture\nRUN bundle exec omnibus build -o append_timestamp:false werf-stapel\n#   python-apt package will install all libs in docker.from image.\n#   python-apt will be installed automatically by ansible apt module on first run.\n#   flant/werf-stapel offers support for ansible-apt-module only for ubuntu:14.04 ubuntu:16.04 ubuntu:18.04\nENV PATH=\"/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\"\nRUN apt-get install python-apt libzstd1 -y\nRUN cp /usr/lib/x86_64-linux-gnu/libapt-inst.so.2.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libapt-pkg.so.5.0 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/liblz4.so.1 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/liblzma.so.5 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libbz2.so.1.0 $TOOLS/embedded/lib/ \\\n && cp /lib/x86_64-linux-gnu/libudev.so.1 $TOOLS/embedded/lib/ \\\n && cp /usr/lib/x86_64-linux-gnu/libzstd.so* $TOOLS/embedded/lib/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_inst.x86_64-linux-gnu.so /tmp/apt_inst.so \\\n && cp /tmp/apt_inst.so $TOOLS/embedded/lib/python2.7/ \\\n && cp /usr/lib/python2.7/dist-packages/apt_pkg.x86_64-linux-gnu.so /tmp/apt_pkg.so \\\n && cp /tmp/apt_pkg.so $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/apt $TOOLS/embedded/lib/python2.7/ \\\n && cp -r /usr/lib/python2.7/dist-packages/aptsources $TOOLS/embedded/lib/python2.7/\n#   Cleanup stapel: only runtime libs and binaries are needed\nRUN rm -rf $TOOLS/LICENSE* $TOOLS/version-manifest.* $TOOLS/sbin $TOOLS/bin $TOOLS/include $TOOLS/x86_64-lfs-linux-gnu/include $TOOLS/x86_64-lfs-linux-gnu/lib $TOOLS/lib/*.a $TOOLS/lib/*.o $TOOLS/lib64/*.a $TOOLS/lib/gcc $TOOLS/libexec/gcc $TOOLS/share $TOOLS/var $TOOLS/embedded/lib/*.a $TOOLS/embedded/include $TOOLS/embedded/lib/python2.7/test $TOOLS/embedded/lib/python2.7/site-packages/ansible/galaxy $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/clustering $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/source_control $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/notification $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/web_infrastructure $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/remote_management $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/monitoring $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/windows $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/storage $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/cloud $TOOLS/embedded/lib/python2.7/site-packages/ansible/modules/network $TOOLS/embedded/lib/python2.7/site-packages/pip $TOOLS/embedded/lib/python2.7/site-packages/setuptools $TOOLS/embedded/lib/python2.7/site-packages/*.dist-info $TOOLS/embedded/share/doc $TOOLS/embedded/share/info $TOOLS/embedded/share/man $TOOLS/embedded/share/local $TOOLS/embedded/var $TOOLS/embedded/info $TOOLS/embedded/man\nRUN cp $TOOLS/x86_64-lfs-linux-gnu/bin/ld /tmp \\\n && rm -rf $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mkdir -p $TOOLS/x86_64-lfs-linux-gnu/bin \\\n && mv /tmp/ld $TOOLS/x86_64-lfs-linux-gnu/bin\nRUN cp $TOOLS/lib/gconv/UNICODE.so /tmp \\\n && rm -rf $TOOLS/lib/gconv \\\n && mkdir -p $TOOLS/lib/gconv \\\n && mv /tmp/UNICODE.so $TOOLS/lib/gconv\nRUN find $TOOLS/embedded/lib/python2.7 -name *.py[oc] | xargs rm\n#   Import tools\nFROM scratch\nCMD [\"no-such-command\"]\nCOPY --from=0 /.werf/stapel /.werf/stapel\n","originalDockerfileUglifiedHash":"cae9e74c5a509fe5c69cbac16af45319","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e72f5501c69462feae320bcdd56a701c7e207212.dockerfile"}