{"seed":28927618,"processedDockerfileHash":"9cfa5c5dfcdf13d961cf0189edee0e17","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2019 Google LLC\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy of\n#   this software and associated documentation files (the \"Software\"), to deal in\n#   the Software without restriction, including without limitation the rights to\n#   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n#   the Software, and to permit persons to whom the Software is furnished to do so,\n#   subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included in all\n#   copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n#   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n#   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n#   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n#   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#   To build a new docker image, please run:\n#   docker build -t streaming-api:v1.0 -f env/Dockerfile .\nFROM ubuntu:xenial\nLABEL description=\"Streaming API build environment.\"\nRUN : \\\n && apt-get upgrade -y\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends apt-utils=1.2.35 autoconf=2.69-9 autoconf-archive=20150925-1 automake=1:1.15-4ubuntu1 binutils-dev=2.26.1-1ubuntu1~16.04.8 build-essential=12.1ubuntu2 clang=1:3.8-33ubuntu3.1 cmake=3.5.1-1ubuntu3 curl=7.47.0-1ubuntu2.19 g++=4:5.3.1-1ubuntu1 gcc=4:5.3.1-1ubuntu1 git=1:2.7.4-0ubuntu1.10 google-perftools=2.4-0ubuntu5.16.04.1 libass-dev=0.13.1-1 libboost-all-dev=1.58.0.1ubuntu1 libdouble-conversion-dev=2.0.1-3ubuntu2 libevent-dev=2.0.21-stable-2ubuntu0.16.04.1 libgflags-dev=2.1.2-3 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libgoogle-glog-dev=0.3.4-0.1 libgtest-dev=1.7.0-4ubuntu1 libiberty-dev=20160215-1ubuntu0.3 libjemalloc-dev=3.6.0-9ubuntu1 liblz4-dev=0.0~r131-2ubuntu2 liblzma-dev=5.1.1alpha+20120614-2ubuntu2 libopenmpi-dev=1.10.2-8ubuntu1 libsdl2-dev=2.0.4+dfsg1-2ubuntu2.16.04.2 libsdl2-ttf-dev=2.0.14+dfsg1-1 libsdl2-2.0 libsnappy-dev=1.1.3-2 libssl-dev=1.0.2g-1ubuntu4.20 libtool=2.4.6-0.1 libva-dev=1.7.0-1ubuntu0.1 libvdpau-dev=1.1.1-3ubuntu1 libvorbis-dev=1.3.5-3ubuntu0.2 libxcb1-dev=1.11.1-1ubuntu1 libxcb-shm0-dev=1.11.1-1ubuntu1 libxcb-xfixes0-dev=1.11.1-1ubuntu1 make=4.1-6 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.12-1~16.04 python-setuptools=20.7.0-1 software-properties-common=0.96.20.10 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 vim=2:7.4.1689-3ubuntu1.5 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y ) \\\n && apt-get clean\nRUN easy_install pip\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 -y\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libav-tools=7:2.8.17-0ubuntu0.1 libavdevice-dev=7:2.8.17-0ubuntu0.1 libx264-dev=2:0.148.2643+git5c65704-1 libx265-dev=1.9-3 libnuma-dev=2.0.11-1ubuntu1.1 libvpx-dev=1.5.0-2ubuntu1.1 libfdk-aac-dev=0.1.3+20140816-2 libmp3lame-dev=3.99.5+repack1-9build1 libopus-dev=1.1.2-1ubuntu1 ffmpeg=7:2.8.17-0ubuntu0.1 -y ) \\\n && apt-get clean\nRUN (apt-get update ;apt-get install --no-install-recommends libgstreamer1.0-0=1.8.3-1~ubuntu0.1 gstreamer1.0-plugins-base=1.8.3-1ubuntu0.3 gstreamer1.0-plugins-good=1.8.3-1ubuntu0.5 gstreamer1.0-plugins-bad=1.8.3-1ubuntu0.2 gstreamer1.0-plugins-ugly=1.8.3-1ubuntu0.1 gstreamer1.0-libav=1.8.3-1ubuntu0.2 gstreamer1.0-doc=1.8.3-1~ubuntu0.1 gstreamer1.0-tools=1.8.3-1~ubuntu0.1 -y ) \\\n && apt-get clean\nENV CPLUS_INCLUDE_PATH=\"/usr\"\nENV LD_LIBRARY_PATH=\"/usr\"\n#  install gRPC 1.12.0\nENV GRPC_RELEASE_TAG=\"v1.12.0\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc\nRUN cd /var/local/git/grpc \\\n && git submodule update --init \\\n && make \\\n && make prefix=/usr install \\\n && make clean\n#  install proto v3.6.0\nENV PROTO_RELEASE_TAG=\"v3.6.0\"\nRUN git clone -b ${PROTO_RELEASE_TAG} https://github.com/google/protobuf.git /var/local/git/protobuf \\\n && cd /var/local/git/protobuf \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\n#  install bazel v0.19.2\nENV BAZEL_RELEASE_TAG=\"0.19.2\"\nRUN cd /var/local \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_RELEASE_TAG}/bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && chmod +x bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && ./bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh --prefix=/usr\n#  install Google Video Intelligence Streaming API Python Libraries\nRUN pip install google-cloud-videointelligence==2.11.1 --upgrade\nRUN pip install psutil==5.9.4 --user\n#  set up environment for Google Video Intelligence Streaming API\nENV SRC_DIR=\"/googlesrc\"\nENV BIN_DIR=\"/google\"\n#  copy aistreamer directory to Docker\nRUN mkdir -p $SRC_DIR\nCOPY BUILD *.BUILD *.md *.py LICENSE WORKSPACE $SRC_DIR/\nCOPY client $SRC_DIR/client\nCOPY env $SRC_DIR/env\nCOPY proto $SRC_DIR/proto\n#  build aistreamer\nRUN cd $SRC_DIR/client/cpp \\\n && bazel build -c opt streaming_client_main\n#  copy binaries to BIN_DIR directory\nRUN mkdir -p $BIN_DIR\nRUN mkdir -p $BIN_DIR/cpp\nRUN mkdir -p $BIN_DIR/python\nRUN cp $SRC_DIR/bazel-bin/client/cpp/streaming_client_main $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/cpp/config/* $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/python/*.py $BIN_DIR/python\nRUN chmod +x $BIN_DIR/python/*.py\n#  clean up the build artifacts and source directory.\nRUN cd $SRC_DIR \\\n && bazel clean --expunge\n#  set work directory\nWORKDIR $BIN_DIR\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2019 Google LLC\n#\n#  Permission is hereby granted, free of charge, to any person obtaining a copy of\n#  this software and associated documentation files (the \"Software\"), to deal in\n#  the Software without restriction, including without limitation the rights to\n#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n#  the Software, and to permit persons to whom the Software is furnished to do so,\n#  subject to the following conditions:\n#\n#  The above copyright notice and this permission notice shall be included in all\n#  copies or substantial portions of the Software.\n#\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n#  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#  To build a new docker image, please run:\n#  docker build -t streaming-api:v1.0 -f env/Dockerfile .\nFROM ubuntu:xenial\nLABEL description=\"Streaming API build environment.\"\nRUN apt-get update \\\n && apt-get upgrade -y\nRUN apt-get update \\\n && apt-get install apt-utils autoconf autoconf-archive automake binutils-dev build-essential clang cmake curl g++ gcc git google-perftools libass-dev libboost-all-dev libdouble-conversion-dev libevent-dev libgflags-dev libfreetype6-dev libgoogle-glog-dev libgtest-dev libiberty-dev libjemalloc-dev liblz4-dev liblzma-dev libopenmpi-dev libsdl2-dev libsdl2-ttf-dev libsdl2-2.0 libsnappy-dev libssl-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev make pkg-config python-dev python-setuptools software-properties-common unzip wget vim zip zlib1g-dev -y \\\n && apt-get clean\nRUN easy_install pip\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 -y\nRUN apt-get update \\\n && apt-get install libav-tools libavdevice-dev libx264-dev libx265-dev libnuma-dev libvpx-dev libfdk-aac-dev libmp3lame-dev libopus-dev ffmpeg -y \\\n && apt-get clean\nRUN apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools -y \\\n && apt-get clean\nENV CPLUS_INCLUDE_PATH=\"/usr\"\nENV LD_LIBRARY_PATH=\"/usr\"\n# install gRPC 1.12.0\nENV GRPC_RELEASE_TAG=\"v1.12.0\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc\nRUN cd /var/local/git/grpc \\\n && git submodule update --init \\\n && make \\\n && make prefix=/usr install \\\n && make clean\n# install proto v3.6.0\nENV PROTO_RELEASE_TAG=\"v3.6.0\"\nRUN git clone -b ${PROTO_RELEASE_TAG} https://github.com/google/protobuf.git /var/local/git/protobuf \\\n && cd /var/local/git/protobuf \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\n# install bazel v0.19.2\nENV BAZEL_RELEASE_TAG=\"0.19.2\"\nRUN cd /var/local \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_RELEASE_TAG}/bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && chmod +x bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && ./bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh --prefix=/usr\n# install Google Video Intelligence Streaming API Python Libraries\nRUN pip install google-cloud-videointelligence --upgrade\nRUN pip install psutil --user\n# set up environment for Google Video Intelligence Streaming API\nENV SRC_DIR=\"/googlesrc\"\nENV BIN_DIR=\"/google\"\n# copy aistreamer directory to Docker\nRUN mkdir -p $SRC_DIR\nCOPY BUILD *.BUILD *.md *.py LICENSE WORKSPACE $SRC_DIR/\nCOPY client $SRC_DIR/client\nCOPY env $SRC_DIR/env\nCOPY proto $SRC_DIR/proto\n# build aistreamer\nRUN cd $SRC_DIR/client/cpp \\\n && bazel build -c opt streaming_client_main\n# copy binaries to BIN_DIR directory\nRUN mkdir -p $BIN_DIR\nRUN mkdir -p $BIN_DIR/cpp\nRUN mkdir -p $BIN_DIR/python\nRUN cp $SRC_DIR/bazel-bin/client/cpp/streaming_client_main $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/cpp/config/* $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/python/*.py $BIN_DIR/python\nRUN chmod +x $BIN_DIR/python/*.py\n# clean up the build artifacts and source directory.\nRUN cd $SRC_DIR \\\n && bazel clean --expunge\n# set work directory\nWORKDIR $BIN_DIR\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"df63bb18fcb7abe8e2ac4e4b01b96682","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2019 Google LLC\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy of\n#   this software and associated documentation files (the \"Software\"), to deal in\n#   the Software without restriction, including without limitation the rights to\n#   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n#   the Software, and to permit persons to whom the Software is furnished to do so,\n#   subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included in all\n#   copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n#   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n#   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n#   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n#   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#   To build a new docker image, please run:\n#   docker build -t streaming-api:v1.0 -f env/Dockerfile .\nFROM ubuntu:xenial\nLABEL description=\"Streaming API build environment.\"\nRUN apt-get update \\\n && apt-get upgrade -y\nRUN apt-get update \\\n && apt-get install apt-utils autoconf autoconf-archive automake binutils-dev build-essential clang cmake curl g++ gcc git google-perftools libass-dev libboost-all-dev libdouble-conversion-dev libevent-dev libgflags-dev libfreetype6-dev libgoogle-glog-dev libgtest-dev libiberty-dev libjemalloc-dev liblz4-dev liblzma-dev libopenmpi-dev libsdl2-dev libsdl2-ttf-dev libsdl2-2.0 libsnappy-dev libssl-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev make pkg-config python-dev python-setuptools software-properties-common unzip wget vim zip zlib1g-dev -y \\\n && apt-get clean\nRUN easy_install pip\nRUN add-apt-repository ppa:jonathonf/ffmpeg-3 -y\nRUN apt-get update \\\n && apt-get install libav-tools libavdevice-dev libx264-dev libx265-dev libnuma-dev libvpx-dev libfdk-aac-dev libmp3lame-dev libopus-dev ffmpeg -y \\\n && apt-get clean\nRUN apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools -y \\\n && apt-get clean\nENV CPLUS_INCLUDE_PATH=\"/usr\"\nENV LD_LIBRARY_PATH=\"/usr\"\n#  install gRPC 1.12.0\nENV GRPC_RELEASE_TAG=\"v1.12.0\"\nRUN git clone -b ${GRPC_RELEASE_TAG} https://github.com/grpc/grpc /var/local/git/grpc\nRUN cd /var/local/git/grpc \\\n && git submodule update --init \\\n && make \\\n && make prefix=/usr install \\\n && make clean\n#  install proto v3.6.0\nENV PROTO_RELEASE_TAG=\"v3.6.0\"\nRUN git clone -b ${PROTO_RELEASE_TAG} https://github.com/google/protobuf.git /var/local/git/protobuf \\\n && cd /var/local/git/protobuf \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install\n#  install bazel v0.19.2\nENV BAZEL_RELEASE_TAG=\"0.19.2\"\nRUN cd /var/local \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_RELEASE_TAG}/bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && chmod +x bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh \\\n && ./bazel-${BAZEL_RELEASE_TAG}-installer-linux-x86_64.sh --prefix=/usr\n#  install Google Video Intelligence Streaming API Python Libraries\nRUN pip install google-cloud-videointelligence --upgrade\nRUN pip install psutil --user\n#  set up environment for Google Video Intelligence Streaming API\nENV SRC_DIR=\"/googlesrc\"\nENV BIN_DIR=\"/google\"\n#  copy aistreamer directory to Docker\nRUN mkdir -p $SRC_DIR\nCOPY BUILD *.BUILD *.md *.py LICENSE WORKSPACE $SRC_DIR/\nCOPY client $SRC_DIR/client\nCOPY env $SRC_DIR/env\nCOPY proto $SRC_DIR/proto\n#  build aistreamer\nRUN cd $SRC_DIR/client/cpp \\\n && bazel build -c opt streaming_client_main\n#  copy binaries to BIN_DIR directory\nRUN mkdir -p $BIN_DIR\nRUN mkdir -p $BIN_DIR/cpp\nRUN mkdir -p $BIN_DIR/python\nRUN cp $SRC_DIR/bazel-bin/client/cpp/streaming_client_main $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/cpp/config/* $BIN_DIR/cpp\nRUN cp $SRC_DIR/client/python/*.py $BIN_DIR/python\nRUN chmod +x $BIN_DIR/python/*.py\n#  clean up the build artifacts and source directory.\nRUN cd $SRC_DIR \\\n && bazel clean --expunge\n#  set work directory\nWORKDIR $BIN_DIR\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"25e9e14c89f4d98cdd5d298bce910aff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/902707447e2dc92318b9d829fe709e69fded0bfa.dockerfile"}