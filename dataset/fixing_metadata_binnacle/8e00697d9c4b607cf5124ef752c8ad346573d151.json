{"seed":1615706155,"processedDockerfileHash":"61df5990d1d45f9ea36b74d6f373fdd7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM node:8.15.1-alpine\nARG GDAL_VERSION=v2.4.0\nARG LIBKML_VERSION=1.3.0\nARG GDAL_DEPS_DEV=' libressl ca-certificates  build-base cmake musl-dev linux-headers tar  cmake  boost-dev  expat-dev  minizip-dev  uriparser-dev  zlib-dev  linux-headers  curl-dev  expat-dev  geos-dev  proj4-dev  libxml2-dev  postgresql-dev  libxslt-dev  sqlite-dev  tiff-dev  zlib-dev'\nARG GDAL_DEPS_RUN=' expat  minizip  uriparser  zlib  curl  expat  geos  libpq  libxml2  libxslt  sqlite-libs  tiff  zlib  proj4'\n#\n#   Modified from https://github.com/petr-k/gdal-python-alpine\n#\nRUN echo \"http://nl.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n && apk add $GDAL_DEPS_DEV --no-cache --virtual .build_dep \\\n && apk add $GDAL_DEPS_RUN --no-cache \\\n && update-ca-certificates \\\n && mkdir /build \\\n && cd /build \\\n && wget -O libkml.tar.gz \"https://github.com/libkml/libkml/archive/${LIBKML_VERSION}.tar.gz\" \\\n && tar --extract --file libkml.tar.gz \\\n && cd libkml-${LIBKML_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /build \\\n && wget -O gdal.tar.gz \"https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz\" \\\n && tar --extract --file gdal.tar.gz --strip-components 1 \\\n && cd gdal \\\n && CXXFLAGS=\"-D__MUSL__ -Os\" CFLAGS=\"-march=native -mtune=native -Os\" LDFLAGS=\"-s\" \\\n && ./configure --prefix=/usr --with-libkml=yes --with-geos=yes --with-proj=yes --with-threads=yes --with-sqlite3=yes --with-geotiff=yes --with-libtiff=yes --with-libz=yes --without-bsb --without-ingres --without-pcidsk --without-cfitsio --without-cryptopp --without-curl --without-ecw --without-fme --without-freexl --without-gif --without-gnm --without-grass --without-grib --without-hdf4 --without-hdf5 --without-idb --without-jasper --without-jp2mrsid --without-jpeg --without-kakadu --without-libgrass --without-libtool --without-mrf --without-mrsid --without-mysql --without-netcdf --without-odbc --without-ogdi --without-openjpeg --without-pcraster --without-pcre --without-perl --without-png --without-python --without-qhull --without-sde --without-webp --without-xerces \\\n && make \\\n && make install \\\n && apk del .build_dep \\\n && cd / \\\n && rm -rf /build \\\n && rm -rf /var/cache/apk/*\n#\n#   Install node packages, copy files\n#\nWORKDIR /build\nCOPY package.json package-lock.json ./\nRUN npm install --production \\\n && mv node_modules /node_modules\nWORKDIR /api\nCOPY . .\nVOLUME /shared\nEXPOSE 3030/tcp\nCMD [\"node\", \"index.js\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"FROM node:8.15.1-alpine\nARG GDAL_VERSION=v2.4.0\nARG LIBKML_VERSION=1.3.0\nARG GDAL_DEPS_DEV=' libressl ca-certificates  build-base cmake musl-dev linux-headers tar  cmake  boost-dev  expat-dev  minizip-dev  uriparser-dev  zlib-dev  linux-headers  curl-dev  expat-dev  geos-dev  proj4-dev  libxml2-dev  postgresql-dev  libxslt-dev  sqlite-dev  tiff-dev  zlib-dev'\nARG GDAL_DEPS_RUN=' expat  minizip  uriparser  zlib  curl  expat  geos  libpq  libxml2  libxslt  sqlite-libs  tiff  zlib  proj4'\n#\n#  Modified from https://github.com/petr-k/gdal-python-alpine\n#\nRUN echo \"http://nl.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n && apk add --no-cache --virtual .build_dep $GDAL_DEPS_DEV \\\n && apk add --no-cache $GDAL_DEPS_RUN \\\n && update-ca-certificates \\\n && mkdir /build \\\n && cd /build \\\n && wget -O libkml.tar.gz \"https://github.com/libkml/libkml/archive/${LIBKML_VERSION}.tar.gz\" \\\n && tar --extract --file libkml.tar.gz \\\n && cd libkml-${LIBKML_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /build \\\n && wget -O gdal.tar.gz \"https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz\" \\\n && tar --extract --file gdal.tar.gz --strip-components 1 \\\n && cd gdal \\\n && CXXFLAGS=\"-D__MUSL__ -Os\" CFLAGS=\"-march=native -mtune=native -Os\" LDFLAGS=\"-s\" \\\n && ./configure --prefix=/usr --with-libkml=yes --with-geos=yes --with-proj=yes --with-threads=yes --with-sqlite3=yes --with-geotiff=yes --with-libtiff=yes --with-libz=yes --without-bsb --without-ingres --without-pcidsk --without-cfitsio --without-cryptopp --without-curl --without-ecw --without-fme --without-freexl --without-gif --without-gnm --without-grass --without-grib --without-hdf4 --without-hdf5 --without-idb --without-jasper --without-jp2mrsid --without-jpeg --without-kakadu --without-libgrass --without-libtool --without-mrf --without-mrsid --without-mysql --without-netcdf --without-odbc --without-ogdi --without-openjpeg --without-pcraster --without-pcre --without-perl --without-png --without-python --without-qhull --without-sde --without-webp --without-xerces \\\n && make \\\n && make install \\\n && apk del .build_dep \\\n && cd / \\\n && rm -rf /build \\\n && rm -rf /var/cache/apk/*\n#\n#  Install node packages, copy files\n#\nWORKDIR /build\nCOPY package.json package-lock.json ./\nRUN npm install --production \\\n && mv node_modules /node_modules\nWORKDIR /api\nCOPY . .\nVOLUME /shared\nEXPOSE 3030/tcp\nCMD [\"node\", \"index.js\"]\n","injectedSmells":[],"originalDockerfileHash":"3c840c1d317fa5e3bf176378604db82b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM node:8.15.1-alpine\nARG GDAL_VERSION=v2.4.0\nARG LIBKML_VERSION=1.3.0\nARG GDAL_DEPS_DEV=' libressl ca-certificates  build-base cmake musl-dev linux-headers tar  cmake  boost-dev  expat-dev  minizip-dev  uriparser-dev  zlib-dev  linux-headers  curl-dev  expat-dev  geos-dev  proj4-dev  libxml2-dev  postgresql-dev  libxslt-dev  sqlite-dev  tiff-dev  zlib-dev'\nARG GDAL_DEPS_RUN=' expat  minizip  uriparser  zlib  curl  expat  geos  libpq  libxml2  libxslt  sqlite-libs  tiff  zlib  proj4'\n#\n#   Modified from https://github.com/petr-k/gdal-python-alpine\n#\nRUN echo \"http://nl.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories \\\n && apk add --no-cache --virtual .build_dep $GDAL_DEPS_DEV \\\n && apk add --no-cache $GDAL_DEPS_RUN \\\n && update-ca-certificates \\\n && mkdir /build \\\n && cd /build \\\n && wget -O libkml.tar.gz \"https://github.com/libkml/libkml/archive/${LIBKML_VERSION}.tar.gz\" \\\n && tar --extract --file libkml.tar.gz \\\n && cd libkml-${LIBKML_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /build \\\n && wget -O gdal.tar.gz \"https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz\" \\\n && tar --extract --file gdal.tar.gz --strip-components 1 \\\n && cd gdal \\\n && CXXFLAGS=\"-D__MUSL__ -Os\" CFLAGS=\"-march=native -mtune=native -Os\" LDFLAGS=\"-s\" \\\n && ./configure --prefix=/usr --with-libkml=yes --with-geos=yes --with-proj=yes --with-threads=yes --with-sqlite3=yes --with-geotiff=yes --with-libtiff=yes --with-libz=yes --without-bsb --without-ingres --without-pcidsk --without-cfitsio --without-cryptopp --without-curl --without-ecw --without-fme --without-freexl --without-gif --without-gnm --without-grass --without-grib --without-hdf4 --without-hdf5 --without-idb --without-jasper --without-jp2mrsid --without-jpeg --without-kakadu --without-libgrass --without-libtool --without-mrf --without-mrsid --without-mysql --without-netcdf --without-odbc --without-ogdi --without-openjpeg --without-pcraster --without-pcre --without-perl --without-png --without-python --without-qhull --without-sde --without-webp --without-xerces \\\n && make \\\n && make install \\\n && apk del .build_dep \\\n && cd / \\\n && rm -rf /build \\\n && rm -rf /var/cache/apk/*\n#\n#   Install node packages, copy files\n#\nWORKDIR /build\nCOPY package.json package-lock.json ./\nRUN npm install --production \\\n && mv node_modules /node_modules\nWORKDIR /api\nCOPY . .\nVOLUME /shared\nEXPOSE 3030/tcp\nCMD [\"node\", \"index.js\"]\n","originalDockerfileUglifiedHash":"4b2048b41a17cf1878a4a9ec3e291beb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8e00697d9c4b607cf5124ef752c8ad346573d151.dockerfile"}