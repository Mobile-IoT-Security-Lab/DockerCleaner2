{"seed":1879349615,"processedDockerfileHash":"c9f5fa699d0e0a39113b412423c973cc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.9\n#   dependencies required for running \"phpize\"\n#   these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#   persistent / runtime deps\nRUN apk add ca-certificates=20191127-r2 curl=7.64.0-r5 tar=1.32-r0 xz=5.2.4-r0 openssl=1.1.1k-r0 --no-cache\n#   ensure www-data user exists\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#   82 is the standard uid/gid for \"www-data\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-maintainer-zts --disable-cgi\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.19\"\nENV PHP_URL=\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add gnupg=2.2.19-r0 wget=1.20.3-r0 --no-cache --virtual .fetch-deps ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add argon2-dev=20171227-r2 coreutils=8.30-r0 curl-dev=7.64.0-r5 libedit-dev=20181209.3.1-r0 libsodium-dev=1.0.16-r0 libxml2-dev=2.9.9-r3 openssl-dev=1.1.1k-r0 sqlite-dev=3.28.0-r3 $PHPIZE_DEPS --no-cache --virtual .build-deps \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && php --version\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\nCMD [\"php\", \"-a\"]\n#  #</autogenerated>##\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.9\n#  dependencies required for running \"phpize\"\n#  these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#  persistent / runtime deps\nRUN apk add --no-cache ca-certificates curl tar xz openssl\n#  ensure www-data user exists\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#  82 is the standard uid/gid for \"www-data\" in Alpine\n#  https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#  https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#  https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n# #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-maintainer-zts --disable-cgi\"\n# #</autogenerated>##\n#  Apply stack smash protection to functions using local buffers and alloca()\n#  Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#  Enable optimization (-O2)\n#  Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#  Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#  https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.19\"\nENV PHP_URL=\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg wget ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev libedit-dev libsodium-dev libxml2-dev openssl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && php --version\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#  sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n# #<autogenerated>##\nCMD [\"php\", \"-a\"]\n# #</autogenerated>##\n","injectedSmells":[],"originalDockerfileHash":"15fb6878ab35684e5385654d7004996f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.9\n#   dependencies required for running \"phpize\"\n#   these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#   persistent / runtime deps\nRUN apk add --no-cache ca-certificates curl tar xz openssl\n#   ensure www-data user exists\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#   82 is the standard uid/gid for \"www-data\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-maintainer-zts --disable-cgi\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.19\"\nENV PHP_URL=\"https://www.php.net/get/php-7.2.19.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.2.19.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"4ffa2404a88d60e993a9fe69f829ebec3eb1e006de41b6048ce5e91bbeaa9282\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg wget ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev libedit-dev libsodium-dev libxml2-dev openssl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && php --version\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\nCMD [\"php\", \"-a\"]\n#  #</autogenerated>##\n","originalDockerfileUglifiedHash":"ad84af62405663b5e76bf3dbe49a0ee2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/603297d09551b7f42450566eb16dc1682c5a4aed.dockerfile"}