{"seed":2014088505,"processedDockerfileHash":"226844d119f7166bb8e0524b060ec090","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nWORKDIR /\n#   Update source\nRUN :\n#   Basic tools\nRUN (apt-get update ;apt-get install --no-install-recommends apt-utils=1.2.35 build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libcurl3-dev libgoogle-glog-dev=0.3.4-0.1 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libpng12-dev=1.2.54-1ubuntu1.1 libprotobuf-dev=2.6.1-1.3 libzmq3-dev=4.1.4-7ubuntu0.1 pkg-config=0.29.1-0ubuntu1 protobuf-compiler=2.6.1-1.3 libprotoc-dev=2.6.1-1.3 rsync=3.1.1-3ubuntu1.3 software-properties-common=0.96.20.10 unzip=6.0-20ubuntu1.1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 openssh-server=1:7.2p2-4ubuntu2.10 wget=1.17.1-1ubuntu1.5 bsdmainutils=9.0.6ubuntu3 -y )\n#   install pyenv\nRUN (apt-get update ;apt-get install --no-install-recommends make=4.1-6 libssl-dev=1.0.2g-1ubuntu4.20 libbz2-dev=1.0.6-8ubuntu0.2 libreadline-dev=6.3-8ubuntu2 libsqlite3-dev=3.11.0-1ubuntu1.5 llvm=1:3.8-33ubuntu3.1 libncurses5-dev=6.0+20160213-1ubuntu1 libncursesw5-dev=6.0+20160213-1ubuntu1 xz-utils=5.1.1alpha+20120614-2ubuntu2 tk-dev=8.6.0+9 libffi-dev=3.2.1-4 liblzma-dev=5.1.1alpha+20120614-2ubuntu2 python-openssl=0.15.1-2ubuntu0.2 -y )\nRUN curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\nENV PATH=\"/root/.pyenv/bin:/root/.pyenv/shims/:${PATH}\"\nRUN eval \"$( pyenv init - ;)\"\nRUN eval \"$( pyenv virtualenv-init - ;)\"\nRUN pyenv install 3.6.3\nRUN pyenv global 3.6.3\n#   Setup vim\nRUN (apt-get update ;apt-get install --no-install-recommends locales=2.23-0ubuntu11.3 vim=2:7.4.1689-3ubuntu1.5 -y )\nRUN locale-gen en_US.UTF-8\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV TERM=\"xterm-256color\"\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.16.0\"\nRUN mkdir /tmp/bazel \\\n && cd /tmp/bazel \\\n && wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -rf /tmp/bazel\n#   Install SDK\nENV ANDROID_SDK_VERSION=\"4333796\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"26.0.2\"\nENV ANDROID_SDK_FILENAME=\"sdk-tools-linux-${ANDROID_SDK_VERSION}.zip\"\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/${ANDROID_SDK_FILENAME}\"\nENV ANDROID_API_LEVELS=\"android-26\"\nENV ANDROID_HOME=\"/opt/sdk\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\"\nRUN mkdir -p /opt/sdk \\\n && cd /opt \\\n && wget -q ${ANDROID_SDK_URL} \\\n && unzip ${ANDROID_SDK_FILENAME} -d ${ANDROID_HOME} \\\n && rm ${ANDROID_SDK_FILENAME} \\\n && yes | android update sdk --no-ui -a --filter tools,platform-tools,${ANDROID_API_LEVELS},build-tools-${ANDROID_BUILD_TOOLS_VERSION}\nRUN ${ANDROID_HOME}/tools/bin/sdkmanager \"cmake;3.6.4111459\"\n#   Download NDK 19c\nRUN cd /opt/ \\\n && wget -q https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip \\\n && unzip -q android-ndk-r19c-linux-x86_64.zip \\\n && rm -f android-ndk-r19c-linux-x86_64.zip\nENV ANDROID_NDK_VERSION=\"r19c\"\nENV ANDROID_NDK_HOME=\"/opt/android-ndk-${ANDROID_NDK_VERSION}\"\n#   Install tools\nRUN (apt-get update ;apt-get install --no-install-recommends android-tools-adb=5.1.1r36+git20160322-0ubuntu3 -y )\n#   fix docker in docker error: `error while loading shared libraries: libltdl.so.7`\n#   refer to: https://github.com/jenkinsci/docker/issues/506\nRUN (apt-get update ;apt-get install --no-install-recommends libltdl7=2.4.6-0.1 -y )\nRUN pip install mirrors.aliyun.com==null pip==23.1 setuptools==67.6.1 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host --upgrade\nRUN pip install mirrors.aliyun.com==null numpy==1.15.4 scipy==1.2.0 Jinja2==2.10 PyYAML==3.13 sh==1.12.14 pycodestyle==2.4.0 filelock==3.0.10 PTable==0.9.2 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com==null tensorflow==1.8.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\n#   Install pytorch (refer to: https://pytorch.org/get-started/locally/)\nRUN pip install mirrors.aliyun.com==null future==0.17.1 Pillow==5.4.1 torch==1.1.0 torchvision==0.2.2.post3 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com==null onnx==1.5.0 onnx-tf==1.2.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com==null cpplint==1.4.4 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nWORKDIR /\n#  Update source\nRUN apt-get update -y\n#  Basic tools\nRUN apt-get install --no-install-recommends apt-utils build-essential cmake curl git libcurl3-dev libgoogle-glog-dev libfreetype6-dev libpng12-dev libprotobuf-dev libzmq3-dev pkg-config protobuf-compiler libprotoc-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless openssh-server wget bsdmainutils -y\n#  install pyenv\nRUN apt-get install make libssl-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl -y\nRUN curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\nENV PATH=\"/root/.pyenv/bin:/root/.pyenv/shims/:${PATH}\"\nRUN eval \"$( pyenv init - ;)\"\nRUN eval \"$( pyenv virtualenv-init - ;)\"\nRUN pyenv install 3.6.3\nRUN pyenv global 3.6.3\n#  Setup vim\nRUN apt-get install --no-install-recommends locales vim -y\nRUN locale-gen en_US.UTF-8\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV TERM=\"xterm-256color\"\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.16.0\"\nRUN mkdir /tmp/bazel \\\n && cd /tmp/bazel \\\n && wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -rf /tmp/bazel\n#  Install SDK\nENV ANDROID_SDK_VERSION=\"4333796\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"26.0.2\"\nENV ANDROID_SDK_FILENAME=\"sdk-tools-linux-${ANDROID_SDK_VERSION}.zip\"\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/${ANDROID_SDK_FILENAME}\"\nENV ANDROID_API_LEVELS=\"android-26\"\nENV ANDROID_HOME=\"/opt/sdk\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\"\nRUN mkdir -p /opt/sdk \\\n && cd /opt \\\n && wget -q ${ANDROID_SDK_URL} \\\n && unzip ${ANDROID_SDK_FILENAME} -d ${ANDROID_HOME} \\\n && rm ${ANDROID_SDK_FILENAME} \\\n && yes | android update sdk --no-ui -a --filter tools,platform-tools,${ANDROID_API_LEVELS},build-tools-${ANDROID_BUILD_TOOLS_VERSION}\nRUN ${ANDROID_HOME}/tools/bin/sdkmanager \"cmake;3.6.4111459\"\n#  Download NDK 19c\nRUN cd /opt/ \\\n && wget -q https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip \\\n && unzip -q android-ndk-r19c-linux-x86_64.zip \\\n && rm -f android-ndk-r19c-linux-x86_64.zip\nENV ANDROID_NDK_VERSION=\"r19c\"\nENV ANDROID_NDK_HOME=\"/opt/android-ndk-${ANDROID_NDK_VERSION}\"\n#  Install tools\nRUN apt-get install --no-install-recommends android-tools-adb -y\n#  fix docker in docker error: `error while loading shared libraries: libltdl.so.7`\n#  refer to: https://github.com/jenkinsci/docker/issues/506\nRUN apt-get install libltdl7 -y\nRUN pip install mirrors.aliyun.com pip setuptools -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host --upgrade\nRUN pip install mirrors.aliyun.com numpy==1.15.4 scipy==1.2.0 Jinja2==2.10 PyYAML==3.13 sh==1.12.14 pycodestyle==2.4.0 filelock==3.0.10 PTable==0.9.2 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com tensorflow==1.8.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\n#  Install pytorch (refer to: https://pytorch.org/get-started/locally/)\nRUN pip install mirrors.aliyun.com future==0.17.1 Pillow==5.4.1 torch==1.1.0 torchvision==0.2.2.post3 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com onnx==1.5.0 onnx-tf==1.2.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com cpplint==1.4.4 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\n","injectedSmells":[],"originalDockerfileHash":"868aff7eff1ad925e43f2f07780c8d39","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nWORKDIR /\n#   Update source\nRUN apt-get update -y\n#   Basic tools\nRUN apt-get install --no-install-recommends apt-utils build-essential cmake curl git libcurl3-dev libgoogle-glog-dev libfreetype6-dev libpng12-dev libprotobuf-dev libzmq3-dev pkg-config protobuf-compiler libprotoc-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless openssh-server wget bsdmainutils -y\n#   install pyenv\nRUN apt-get install make libssl-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl -y\nRUN curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\nENV PATH=\"/root/.pyenv/bin:/root/.pyenv/shims/:${PATH}\"\nRUN eval \"$( pyenv init - ;)\"\nRUN eval \"$( pyenv virtualenv-init - ;)\"\nRUN pyenv install 3.6.3\nRUN pyenv global 3.6.3\n#   Setup vim\nRUN apt-get install --no-install-recommends locales vim -y\nRUN locale-gen en_US.UTF-8\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV TERM=\"xterm-256color\"\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.16.0\"\nRUN mkdir /tmp/bazel \\\n && cd /tmp/bazel \\\n && wget https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -rf /tmp/bazel\n#   Install SDK\nENV ANDROID_SDK_VERSION=\"4333796\"\nENV ANDROID_BUILD_TOOLS_VERSION=\"26.0.2\"\nENV ANDROID_SDK_FILENAME=\"sdk-tools-linux-${ANDROID_SDK_VERSION}.zip\"\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/${ANDROID_SDK_FILENAME}\"\nENV ANDROID_API_LEVELS=\"android-26\"\nENV ANDROID_HOME=\"/opt/sdk\"\nENV PATH=\"${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools\"\nRUN mkdir -p /opt/sdk \\\n && cd /opt \\\n && wget -q ${ANDROID_SDK_URL} \\\n && unzip ${ANDROID_SDK_FILENAME} -d ${ANDROID_HOME} \\\n && rm ${ANDROID_SDK_FILENAME} \\\n && yes | android update sdk --no-ui -a --filter tools,platform-tools,${ANDROID_API_LEVELS},build-tools-${ANDROID_BUILD_TOOLS_VERSION}\nRUN ${ANDROID_HOME}/tools/bin/sdkmanager \"cmake;3.6.4111459\"\n#   Download NDK 19c\nRUN cd /opt/ \\\n && wget -q https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip \\\n && unzip -q android-ndk-r19c-linux-x86_64.zip \\\n && rm -f android-ndk-r19c-linux-x86_64.zip\nENV ANDROID_NDK_VERSION=\"r19c\"\nENV ANDROID_NDK_HOME=\"/opt/android-ndk-${ANDROID_NDK_VERSION}\"\n#   Install tools\nRUN apt-get install --no-install-recommends android-tools-adb -y\n#   fix docker in docker error: `error while loading shared libraries: libltdl.so.7`\n#   refer to: https://github.com/jenkinsci/docker/issues/506\nRUN apt-get install libltdl7 -y\nRUN pip install mirrors.aliyun.com pip setuptools -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host --upgrade\nRUN pip install mirrors.aliyun.com numpy==1.15.4 scipy==1.2.0 Jinja2==2.10 PyYAML==3.13 sh==1.12.14 pycodestyle==2.4.0 filelock==3.0.10 PTable==0.9.2 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com tensorflow==1.8.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\n#   Install pytorch (refer to: https://pytorch.org/get-started/locally/)\nRUN pip install mirrors.aliyun.com future==0.17.1 Pillow==5.4.1 torch==1.1.0 torchvision==0.2.2.post3 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com onnx==1.5.0 onnx-tf==1.2.0 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\nRUN pip install mirrors.aliyun.com cpplint==1.4.4 -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host\n","originalDockerfileUglifiedHash":"c87da1e2c9c68d2a0b5a14adf5dc2da9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/70f94ba8e7458173f0c34d24dd728cd86fded1e9.dockerfile"}