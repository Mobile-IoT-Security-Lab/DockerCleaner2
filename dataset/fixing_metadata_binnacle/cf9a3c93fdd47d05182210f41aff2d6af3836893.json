{"seed":2979127467,"processedDockerfileHash":"6405ce6ce8b8d44eb77ce4fa861c52e7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Multi-stage build\n#   build image using debian:latest\n#\nFROM debian:latest AS builder\nARG GITHUB_CREDENTIALS\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget=1.21.3-1ubuntu1 git=1:2.39.2-1ubuntu1 build-essential=12.9ubuntu3 golang-1.8 -y )\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#   FIXME: all this should be in the subproject.\nWORKDIR /build\nRUN wget https://github.com/cisco/libsrtp/archive/v2.1.0.tar.gz \\\n && tar xvfz v2.1.0.tar.gz\nRUN wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_0f.tar.gz \\\n && tar xvfz OpenSSL_1_1_0f.tar.gz\nRUN git clone --depth 1 -b2.54.0 https://github.com/GNOME/glib\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gstreamer\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-base\nRUN git clone --depth 1 -borc-0.4.27 https://github.com/GStreamer/orc\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-good\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-bad\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-ugly\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-libav\nWORKDIR /build/openssl-OpenSSL_1_1_0f\nRUN ./config --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nWORKDIR /build/libsrtp-2.1.0\nRUN ./configure --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nRUN :\n#\nWORKDIR /build/glib\nRUN (apt-get update ;apt-get install --no-install-recommends dh-autoreconf=20 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libffi-dev=3.4.4-1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libmount-dev=2.38.1-4ubuntu1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libpcre3-dev=2:8.39-15 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends gtk-doc-tools=1.33.2-1 -y )\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gstreamer\nRUN (apt-get update ;apt-get install --no-install-recommends libbison-dev=2:3.8.2+dfsg-1build1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends flex=2.6.4-8.1 -y )\nRUN ./autogen.sh --prefix=/usr/local --disable-examples --disable-tests --disable-failing-tests --disable-benchmarks --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/orc\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\n#   FIXME: move up\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/local.conf\nRUN /sbin/ldconfig\nWORKDIR /build/gst-plugins-base\nRUN (apt-get update ;apt-get install --no-install-recommends libopus-dev=1.3.1-3 -y )\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-good\nRUN (apt-get update ;apt-get install --no-install-recommends libvpx-dev=1.12.0-1ubuntu1 -y )\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN (apt-get update ;apt-get install --no-install-recommends nasm=2.16.01-1 -y )\nWORKDIR /build\nRUN git clone https://github.com/cisco/openh264\nWORKDIR /build/openh264\nRUN make -j$( nproc ;) -j4 \\\n && make install\nWORKDIR /build/gst-plugins-bad\nRUN (apt-get update ;apt-get install --no-install-recommends libvo-aacenc-dev=0.1.3-2 -y )\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac0_1.28+cvs20151130-1_amd64.deb\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN dpkg -i libfaac0_1.28+cvs20151130-1_amd64.deb libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN (apt-get update ;apt-get install --no-install-recommends libopencv-dev=4.6.0+dfsg-11 -y )\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html --disable-hls\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-ugly\nRUN (apt-get update ;apt-get install --no-install-recommends libx264-dev=2:0.164.3095+gitbaee400-2build1 -y )\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-libav\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build\nRUN git clone -b1.0.6 https://github.com/intel/cmrt.git\nRUN git clone -b2.1.0 https://github.com/intel/libva.git\nRUN git clone -b1.0.2 https://github.com/01org/intel-hybrid-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/intel-vaapi-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/libva-utils.git\nRUN (apt-get update ;apt-get install --no-install-recommends libdrm-dev=2.4.114-1 libudev-dev=252.5-2ubuntu3 -y )\nWORKDIR /build/libva\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/cmrt\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-hybrid-driver\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-vaapi-driver\nRUN ./autogen.sh --enable-hybrid-codec \\\n && make install\nWORKDIR /build/libva-utils\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build\nRUN git clone --depth 1 -b1.12.5 https://github.com/GStreamer/gstreamer-vaapi\nWORKDIR /build/gstreamer-vaapi\nRUN (apt-get update ;apt-get install --no-install-recommends libva-dev=2.17.0-1 libudev-dev=252.5-2ubuntu3 -y )\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\n#\nWORKDIR /go/src/app\n#   prepare gopaths directories\nRUN mkdir -p /vol-gopath-versioned\nRUN mkdir -p /vol-gopath-unversioned\n#   setup GOPATH\nENV GOPATH=\"/vol-gopath-unversioned:/vol-gopath-versioned:/go\"\n#   install hot reload module\nRUN /usr/lib/go-1.8/bin/go get github.com/pilu/fresh\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#   go will need to download code from private github repositories\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = git://github.com/' >> /root/.gitconfig\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = https://github.com/' >> /root/.gitconfig\n#   build\nENV CGO_CFLAGS=\"-pthread -I/usr/local/include/gstreamer-1.0 -I/usr/local/include/glib-2.0 -I/usr/local/lib/glib-2.0/include -I/usr/local/include\"\nENV CGO_LDFLAGS=\"-L/usr/local/lib -lcrypto -lssl -lsrtp2  -L/usr/local/lib -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0 -lgstapp-1.0\"\n#   hacky: dtls, gst, rtcp, sdp, srtp should be in the \"master\" or their own github.com/...\n#    until it exists, we need to \"copy\" them inside the image\n#    because go get will not be able to fetch these dependencies\nRUN mkdir -p /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\nCOPY . /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\n#   copy src\nCOPY . .\nCOPY ./go-wrapper /usr/bin/\nRUN chmod 755 /usr/bin/go-wrapper\n#   download dependencies & build app\nRUN go-wrapper download \\\n && go-wrapper install \\\n && go build\nCMD /vol-gopath-unversioned/bin/fresh\n#\n#   Multi-stage build\n#   prodable image\n#\nFROM debian:latest AS base\nWORKDIR /go/src/app\nCOPY --from=builder /usr/local/lib/gstreamer-1.0/libgstvpx.so /usr/local/lib/gstreamer-1.0/libgstopus.so /usr/local/lib/gstreamer-1.0/libgstcoreelements.so /usr/local/lib/gstreamer-1.0/libgstvideorate.so /usr/local/lib/gstreamer-1.0/libgstrtp.so /usr/local/lib/gstreamer-1.0/libgstopusparse.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstx264.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstlibav.so /usr/local/lib/gstreamer-1.0/libgstvideoparsersbad.so /usr/local/lib/gstreamer-1.0/libgstopenh264.so /usr/local/lib/gstreamer-1.0/libgstvaapi.so /usr/local/lib/gstreamer-1.0/\nCOPY --from=builder /usr/local/lib/libgstapp-1.0.so.0 /usr/local/lib/libgsttag-1.0.so.0 /usr/local/lib/libgstrtp-1.0.so.0 /usr/local/lib/libgstpbutils-1.0.so.0 /usr/local/lib/libgstaudio-1.0.so.0 /usr/local/lib/libgstvideo-1.0.so.0 /usr/local/lib/libgstbase-1.0.so.0 /usr/local/lib/libgstreamer-1.0.so.0 /usr/local/lib/libgobject-2.0.so.0 /usr/local/lib/libglib-2.0.so.0 /usr/lib/x86_64-linux-gnu/libopus.so.0 /usr/lib/x86_64-linux-gnu/libvpx.so.4 /lib/x86_64-linux-gnu/libz.so.1 /usr/local/lib/liborc-0.4.so.0 /usr/local/lib/libgmodule-2.0.so.0 /usr/lib/x86_64-linux-gnu/libffi.so.6 /lib/x86_64-linux-gnu/libpcre.so.3 /usr/local/lib/libcrypto.so.1.1 /usr/local/lib/libssl.so.1.1 /usr/local/lib/libgstreamer-1.0.so.0 /usr/lib/x86_64-linux-gnu/libx264.so.148 /usr/local/lib/libgstcodecparsers-1.0.so.0 /usr/local/lib/libopenh264.so.4 /usr/local/lib/libva-drm.so.2 /usr/local/lib/libva-x11.so.2 /usr/local/lib/libva.so.2 /usr/local/lib/libgstallocators-1.0.so.0 /usr/lib/x86_64-linux-gnu/libXrandr.so.2 /usr/lib/x86_64-linux-gnu/libXrender.so.1 /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib/x86_64-linux-gnu/libXfixes.so.3 /usr/lib/x86_64-linux-gnu/libdrm.so.2 /usr/lib/x86_64-linux-gnu/libva-wayland.so.1 /usr/lib/x86_64-linux-gnu/libwayland-client.so.0 /usr/lib/x86_64-linux-gnu/libxcb.so.1 /usr/lib/x86_64-linux-gnu/libva.so.1 /usr/lib/x86_64-linux-gnu/libXau.so.6 /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 /lib/x86_64-linux-gnu/libbsd.so.0 /usr/local/lib/libcmrt.so.1 /usr/lib/x86_64-linux-gnu/libdrm_intel.so.1 /usr/lib/x86_64-linux-gnu/libpciaccess.so.0 /usr/local/lib/\nCOPY --from=builder /usr/local/lib/dri /usr/local/lib/dri\nCOPY --from=builder /usr/local/bin/gst-inspect-1.0 /usr/local/bin/vainfo /usr/local/bin/\nFROM base AS release\nWORKDIR /go/src/app\nCOPY star_tribe.pm.key /etc/ssl/\nCOPY star_tribedev.pm.key /etc/ssl/\nCOPY star_tribe.pm.crt /etc/ssl/\nCOPY star_tribedev.pm.crt /etc/ssl/\nCOPY --from=builder /go/src/app/app mcu\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\nCMD /go/src/app/mcu\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Multi-stage build\n#  build image using debian:latest\n#\nFROM debian:latest AS builder\nARG GITHUB_CREDENTIALS\nRUN apt-get update \\\n && apt-get install wget git build-essential golang-1.8 -y\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#  FIXME: all this should be in the subproject.\nWORKDIR /build\nRUN wget https://github.com/cisco/libsrtp/archive/v2.1.0.tar.gz \\\n && tar xvfz v2.1.0.tar.gz\nRUN wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_0f.tar.gz \\\n && tar xvfz OpenSSL_1_1_0f.tar.gz\nRUN git clone --depth 1 -b2.54.0 https://github.com/GNOME/glib\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gstreamer\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-base\nRUN git clone --depth 1 -borc-0.4.27 https://github.com/GStreamer/orc\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-good\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-bad\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-ugly\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-libav\nWORKDIR /build/openssl-OpenSSL_1_1_0f\nRUN ./config --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nWORKDIR /build/libsrtp-2.1.0\nRUN ./configure --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nRUN apt-get update\n#\nWORKDIR /build/glib\nRUN apt-get install dh-autoreconf -y\nRUN apt-get install libffi-dev -y\nRUN apt-get install libmount-dev -y\nRUN apt-get install zlib1g-dev -y\nRUN apt-get install libpcre3-dev -y\nRUN apt-get install gtk-doc-tools -y\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gstreamer\nRUN apt-get install libbison-dev -y\nRUN apt-get install flex -y\nRUN ./autogen.sh --prefix=/usr/local --disable-examples --disable-tests --disable-failing-tests --disable-benchmarks --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/orc\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\n#  FIXME: move up\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/local.conf\nRUN /sbin/ldconfig\nWORKDIR /build/gst-plugins-base\nRUN apt-get install libopus-dev -y\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-good\nRUN apt-get install libvpx-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN apt-get install nasm -y\nWORKDIR /build\nRUN git clone https://github.com/cisco/openh264\nWORKDIR /build/openh264\nRUN make -j$( nproc ;) -j4 \\\n && make install\nWORKDIR /build/gst-plugins-bad\nRUN apt-get install libvo-aacenc-dev -y\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac0_1.28+cvs20151130-1_amd64.deb\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN dpkg -i libfaac0_1.28+cvs20151130-1_amd64.deb libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN apt-get install libopencv-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html --disable-hls\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-ugly\nRUN apt-get install libx264-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-libav\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build\nRUN git clone -b1.0.6 https://github.com/intel/cmrt.git\nRUN git clone -b2.1.0 https://github.com/intel/libva.git\nRUN git clone -b1.0.2 https://github.com/01org/intel-hybrid-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/intel-vaapi-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/libva-utils.git\nRUN apt-get install libdrm-dev libudev-dev -y\nWORKDIR /build/libva\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/cmrt\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-hybrid-driver\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-vaapi-driver\nRUN ./autogen.sh --enable-hybrid-codec \\\n && make install\nWORKDIR /build/libva-utils\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build\nRUN git clone --depth 1 -b1.12.5 https://github.com/GStreamer/gstreamer-vaapi\nWORKDIR /build/gstreamer-vaapi\nRUN apt-get install libva-dev libudev-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\n#\nWORKDIR /go/src/app\n#  prepare gopaths directories\nRUN mkdir -p /vol-gopath-versioned\nRUN mkdir -p /vol-gopath-unversioned\n#  setup GOPATH\nENV GOPATH=\"/vol-gopath-unversioned:/vol-gopath-versioned:/go\"\n#  install hot reload module\nRUN /usr/lib/go-1.8/bin/go get github.com/pilu/fresh\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#  go will need to download code from private github repositories\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = git://github.com/' >> /root/.gitconfig\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = https://github.com/' >> /root/.gitconfig\n#  build\nENV CGO_CFLAGS=\"-pthread -I/usr/local/include/gstreamer-1.0 -I/usr/local/include/glib-2.0 -I/usr/local/lib/glib-2.0/include -I/usr/local/include\"\nENV CGO_LDFLAGS=\"-L/usr/local/lib -lcrypto -lssl -lsrtp2  -L/usr/local/lib -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0 -lgstapp-1.0\"\n#  hacky: dtls, gst, rtcp, sdp, srtp should be in the \"master\" or their own github.com/...\n#   until it exists, we need to \"copy\" them inside the image\n#   because go get will not be able to fetch these dependencies\nRUN mkdir -p /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\nCOPY . /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\n#  copy src\nCOPY . .\nCOPY ./go-wrapper /usr/bin/\nRUN chmod 755 /usr/bin/go-wrapper\n#  download dependencies & build app\nRUN go-wrapper download \\\n && go-wrapper install \\\n && go build\nCMD /vol-gopath-unversioned/bin/fresh\n#\n#  Multi-stage build\n#  prodable image\n#\nFROM debian:latest AS base\nWORKDIR /go/src/app\nCOPY --from=builder /usr/local/lib/gstreamer-1.0/libgstvpx.so /usr/local/lib/gstreamer-1.0/libgstopus.so /usr/local/lib/gstreamer-1.0/libgstcoreelements.so /usr/local/lib/gstreamer-1.0/libgstvideorate.so /usr/local/lib/gstreamer-1.0/libgstrtp.so /usr/local/lib/gstreamer-1.0/libgstopusparse.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstx264.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstlibav.so /usr/local/lib/gstreamer-1.0/libgstvideoparsersbad.so /usr/local/lib/gstreamer-1.0/libgstopenh264.so /usr/local/lib/gstreamer-1.0/libgstvaapi.so /usr/local/lib/gstreamer-1.0/\nCOPY --from=builder /usr/local/lib/libgstapp-1.0.so.0 /usr/local/lib/libgsttag-1.0.so.0 /usr/local/lib/libgstrtp-1.0.so.0 /usr/local/lib/libgstpbutils-1.0.so.0 /usr/local/lib/libgstaudio-1.0.so.0 /usr/local/lib/libgstvideo-1.0.so.0 /usr/local/lib/libgstbase-1.0.so.0 /usr/local/lib/libgstreamer-1.0.so.0 /usr/local/lib/libgobject-2.0.so.0 /usr/local/lib/libglib-2.0.so.0 /usr/lib/x86_64-linux-gnu/libopus.so.0 /usr/lib/x86_64-linux-gnu/libvpx.so.4 /lib/x86_64-linux-gnu/libz.so.1 /usr/local/lib/liborc-0.4.so.0 /usr/local/lib/libgmodule-2.0.so.0 /usr/lib/x86_64-linux-gnu/libffi.so.6 /lib/x86_64-linux-gnu/libpcre.so.3 /usr/local/lib/libcrypto.so.1.1 /usr/local/lib/libssl.so.1.1 /usr/local/lib/libgstreamer-1.0.so.0 /usr/lib/x86_64-linux-gnu/libx264.so.148 /usr/local/lib/libgstcodecparsers-1.0.so.0 /usr/local/lib/libopenh264.so.4 /usr/local/lib/libva-drm.so.2 /usr/local/lib/libva-x11.so.2 /usr/local/lib/libva.so.2 /usr/local/lib/libgstallocators-1.0.so.0 /usr/lib/x86_64-linux-gnu/libXrandr.so.2 /usr/lib/x86_64-linux-gnu/libXrender.so.1 /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib/x86_64-linux-gnu/libXfixes.so.3 /usr/lib/x86_64-linux-gnu/libdrm.so.2 /usr/lib/x86_64-linux-gnu/libva-wayland.so.1 /usr/lib/x86_64-linux-gnu/libwayland-client.so.0 /usr/lib/x86_64-linux-gnu/libxcb.so.1 /usr/lib/x86_64-linux-gnu/libva.so.1 /usr/lib/x86_64-linux-gnu/libXau.so.6 /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 /lib/x86_64-linux-gnu/libbsd.so.0 /usr/local/lib/libcmrt.so.1 /usr/lib/x86_64-linux-gnu/libdrm_intel.so.1 /usr/lib/x86_64-linux-gnu/libpciaccess.so.0 /usr/local/lib/\nCOPY --from=builder /usr/local/lib/dri /usr/local/lib/dri\nCOPY --from=builder /usr/local/bin/gst-inspect-1.0 /usr/local/bin/vainfo /usr/local/bin/\nFROM base AS release\nWORKDIR /go/src/app\nCOPY star_tribe.pm.key /etc/ssl/\nCOPY star_tribedev.pm.key /etc/ssl/\nCOPY star_tribe.pm.crt /etc/ssl/\nCOPY star_tribedev.pm.crt /etc/ssl/\nCOPY --from=builder /go/src/app/app mcu\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\nCMD /go/src/app/mcu\n","injectedSmells":[],"originalDockerfileHash":"378091aea30a754a35292acbb191e0ab","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Multi-stage build\n#   build image using debian:latest\n#\nFROM debian:latest AS builder\nARG GITHUB_CREDENTIALS\nRUN apt-get update \\\n && apt-get install wget git build-essential golang-1.8 -y\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#   FIXME: all this should be in the subproject.\nWORKDIR /build\nRUN wget https://github.com/cisco/libsrtp/archive/v2.1.0.tar.gz \\\n && tar xvfz v2.1.0.tar.gz\nRUN wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_0f.tar.gz \\\n && tar xvfz OpenSSL_1_1_0f.tar.gz\nRUN git clone --depth 1 -b2.54.0 https://github.com/GNOME/glib\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gstreamer\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-base\nRUN git clone --depth 1 -borc-0.4.27 https://github.com/GStreamer/orc\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-good\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-bad\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-plugins-ugly\nRUN git clone --depth 1 -b1.14.0 https://github.com/GStreamer/gst-libav\nWORKDIR /build/openssl-OpenSSL_1_1_0f\nRUN ./config --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nWORKDIR /build/libsrtp-2.1.0\nRUN ./configure --prefix=/usr/local \\\n && make -j$( nproc ;) \\\n && make install\nRUN apt-get update\n#\nWORKDIR /build/glib\nRUN apt-get install dh-autoreconf -y\nRUN apt-get install libffi-dev -y\nRUN apt-get install libmount-dev -y\nRUN apt-get install zlib1g-dev -y\nRUN apt-get install libpcre3-dev -y\nRUN apt-get install gtk-doc-tools -y\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gstreamer\nRUN apt-get install libbison-dev -y\nRUN apt-get install flex -y\nRUN ./autogen.sh --prefix=/usr/local --disable-examples --disable-tests --disable-failing-tests --disable-benchmarks --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/orc\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\n#   FIXME: move up\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/local.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/local.conf\nRUN /sbin/ldconfig\nWORKDIR /build/gst-plugins-base\nRUN apt-get install libopus-dev -y\nRUN ./autogen.sh\nRUN ./configure --prefix=/usr/local\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-good\nRUN apt-get install libvpx-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN apt-get install nasm -y\nWORKDIR /build\nRUN git clone https://github.com/cisco/openh264\nWORKDIR /build/openh264\nRUN make -j$( nproc ;) -j4 \\\n && make install\nWORKDIR /build/gst-plugins-bad\nRUN apt-get install libvo-aacenc-dev -y\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac0_1.28+cvs20151130-1_amd64.deb\nRUN wget http://fr.archive.ubuntu.com/ubuntu/pool/multiverse/f/faac/libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN dpkg -i libfaac0_1.28+cvs20151130-1_amd64.deb libfaac-dev_1.28+cvs20151130-1_amd64.deb\nRUN apt-get install libopencv-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html --disable-hls\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-plugins-ugly\nRUN apt-get install libx264-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build/gst-libav\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nWORKDIR /build\nRUN git clone -b1.0.6 https://github.com/intel/cmrt.git\nRUN git clone -b2.1.0 https://github.com/intel/libva.git\nRUN git clone -b1.0.2 https://github.com/01org/intel-hybrid-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/intel-vaapi-driver.git\nRUN git clone -b2.1.0 https://github.com/intel/libva-utils.git\nRUN apt-get install libdrm-dev libudev-dev -y\nWORKDIR /build/libva\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/cmrt\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-hybrid-driver\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build/intel-vaapi-driver\nRUN ./autogen.sh --enable-hybrid-codec \\\n && make install\nWORKDIR /build/libva-utils\nRUN ./autogen.sh \\\n && make install\nWORKDIR /build\nRUN git clone --depth 1 -b1.12.5 https://github.com/GStreamer/gstreamer-vaapi\nWORKDIR /build/gstreamer-vaapi\nRUN apt-get install libva-dev libudev-dev -y\nRUN ./autogen.sh --prefix=/usr/local --disable-gtk-doc --disable-gtk-doc-html\nRUN make -j$( nproc ;) \\\n && make install\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\n#\nWORKDIR /go/src/app\n#   prepare gopaths directories\nRUN mkdir -p /vol-gopath-versioned\nRUN mkdir -p /vol-gopath-unversioned\n#   setup GOPATH\nENV GOPATH=\"/vol-gopath-unversioned:/vol-gopath-versioned:/go\"\n#   install hot reload module\nRUN /usr/lib/go-1.8/bin/go get github.com/pilu/fresh\nRUN ln -fs /usr/lib/go-1.8/bin/go /usr/bin/go\n#   go will need to download code from private github repositories\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = git://github.com/' >> /root/.gitconfig\nRUN echo '[url \"https://'$GITHUB_CREDENTIALS'@github.com/\"]' >> /root/.gitconfig\nRUN echo '\\tinsteadOf = https://github.com/' >> /root/.gitconfig\n#   build\nENV CGO_CFLAGS=\"-pthread -I/usr/local/include/gstreamer-1.0 -I/usr/local/include/glib-2.0 -I/usr/local/lib/glib-2.0/include -I/usr/local/include\"\nENV CGO_LDFLAGS=\"-L/usr/local/lib -lcrypto -lssl -lsrtp2  -L/usr/local/lib -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0 -lgstapp-1.0\"\n#   hacky: dtls, gst, rtcp, sdp, srtp should be in the \"master\" or their own github.com/...\n#    until it exists, we need to \"copy\" them inside the image\n#    because go get will not be able to fetch these dependencies\nRUN mkdir -p /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\nCOPY . /vol-gopath-versioned/src/github.com/heytribe/live-webrtcsignaling\n#   copy src\nCOPY . .\nCOPY ./go-wrapper /usr/bin/\nRUN chmod 755 /usr/bin/go-wrapper\n#   download dependencies & build app\nRUN go-wrapper download \\\n && go-wrapper install \\\n && go build\nCMD /vol-gopath-unversioned/bin/fresh\n#\n#   Multi-stage build\n#   prodable image\n#\nFROM debian:latest AS base\nWORKDIR /go/src/app\nCOPY --from=builder /usr/local/lib/gstreamer-1.0/libgstvpx.so /usr/local/lib/gstreamer-1.0/libgstopus.so /usr/local/lib/gstreamer-1.0/libgstcoreelements.so /usr/local/lib/gstreamer-1.0/libgstvideorate.so /usr/local/lib/gstreamer-1.0/libgstrtp.so /usr/local/lib/gstreamer-1.0/libgstopusparse.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstx264.so /usr/local/lib/gstreamer-1.0/libgstapp.so /usr/local/lib/gstreamer-1.0/libgstlibav.so /usr/local/lib/gstreamer-1.0/libgstvideoparsersbad.so /usr/local/lib/gstreamer-1.0/libgstopenh264.so /usr/local/lib/gstreamer-1.0/libgstvaapi.so /usr/local/lib/gstreamer-1.0/\nCOPY --from=builder /usr/local/lib/libgstapp-1.0.so.0 /usr/local/lib/libgsttag-1.0.so.0 /usr/local/lib/libgstrtp-1.0.so.0 /usr/local/lib/libgstpbutils-1.0.so.0 /usr/local/lib/libgstaudio-1.0.so.0 /usr/local/lib/libgstvideo-1.0.so.0 /usr/local/lib/libgstbase-1.0.so.0 /usr/local/lib/libgstreamer-1.0.so.0 /usr/local/lib/libgobject-2.0.so.0 /usr/local/lib/libglib-2.0.so.0 /usr/lib/x86_64-linux-gnu/libopus.so.0 /usr/lib/x86_64-linux-gnu/libvpx.so.4 /lib/x86_64-linux-gnu/libz.so.1 /usr/local/lib/liborc-0.4.so.0 /usr/local/lib/libgmodule-2.0.so.0 /usr/lib/x86_64-linux-gnu/libffi.so.6 /lib/x86_64-linux-gnu/libpcre.so.3 /usr/local/lib/libcrypto.so.1.1 /usr/local/lib/libssl.so.1.1 /usr/local/lib/libgstreamer-1.0.so.0 /usr/lib/x86_64-linux-gnu/libx264.so.148 /usr/local/lib/libgstcodecparsers-1.0.so.0 /usr/local/lib/libopenh264.so.4 /usr/local/lib/libva-drm.so.2 /usr/local/lib/libva-x11.so.2 /usr/local/lib/libva.so.2 /usr/local/lib/libgstallocators-1.0.so.0 /usr/lib/x86_64-linux-gnu/libXrandr.so.2 /usr/lib/x86_64-linux-gnu/libXrender.so.1 /usr/lib/x86_64-linux-gnu/libX11.so.6 /usr/lib/x86_64-linux-gnu/libXext.so.6 /usr/lib/x86_64-linux-gnu/libXfixes.so.3 /usr/lib/x86_64-linux-gnu/libdrm.so.2 /usr/lib/x86_64-linux-gnu/libva-wayland.so.1 /usr/lib/x86_64-linux-gnu/libwayland-client.so.0 /usr/lib/x86_64-linux-gnu/libxcb.so.1 /usr/lib/x86_64-linux-gnu/libva.so.1 /usr/lib/x86_64-linux-gnu/libXau.so.6 /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 /lib/x86_64-linux-gnu/libbsd.so.0 /usr/local/lib/libcmrt.so.1 /usr/lib/x86_64-linux-gnu/libdrm_intel.so.1 /usr/lib/x86_64-linux-gnu/libpciaccess.so.0 /usr/local/lib/\nCOPY --from=builder /usr/local/lib/dri /usr/local/lib/dri\nCOPY --from=builder /usr/local/bin/gst-inspect-1.0 /usr/local/bin/vainfo /usr/local/bin/\nFROM base AS release\nWORKDIR /go/src/app\nCOPY star_tribe.pm.key /etc/ssl/\nCOPY star_tribedev.pm.key /etc/ssl/\nCOPY star_tribe.pm.crt /etc/ssl/\nCOPY star_tribedev.pm.crt /etc/ssl/\nCOPY --from=builder /go/src/app/app mcu\nRUN echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/mcu.conf\nRUN echo \"/usr/local/lib/gstreamer-1.0\" >> /etc/ld.so.conf.d/mcu.conf\nRUN ldconfig -vvvvv\nCMD /go/src/app/mcu\n","originalDockerfileUglifiedHash":"27bf5dde93039fb3af15d814482d3b20","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cf9a3c93fdd47d05182210f41aff2d6af3836893.dockerfile"}