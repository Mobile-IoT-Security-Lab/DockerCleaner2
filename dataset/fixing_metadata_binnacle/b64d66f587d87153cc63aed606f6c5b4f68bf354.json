{"seed":1496612710,"processedDockerfileHash":"10424a66cfbc13fe4ec044315f7499a8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Build the Go binaries using a multi-stage build phase named \"golang\"\nFROM golang:1.10.3-alpine3.7 AS golang\nLABEL maintainer=\"Andrew Kutz <akutz@vmware.com>\"\nRUN apk add git --no-cache\n#   Build the IBM Bluemix Terraform provider\nRUN git clone https://github.com/IBM-Cloud/terraform-provider-ibm.git $GOPATH/src/github.com/IBM-Cloud/terraform-provider-ibm \\\n && go install github.com/IBM-Cloud/terraform-provider-ibm\n#   Build Oracle terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-oci.git $GOPATH/src/github.com/terraform-providers/terraform-provider-oci \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-oci ; git checkout tags/v3.0.0 ; cd - \\\n && go install github.com/terraform-providers/terraform-provider-oci\n#   Build the Packet.net terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-packet.git $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && go install github.com/terraform-providers/terraform-provider-packet\n#   Build the Gzip+Base64 Terraform provider Gzip+base64 & ETCD Provider\nRUN go get github.com/jakexks/terraform-provider-gzip\n#   Build the Etcd Terraform provider\nRUN go get github.com/paperg/terraform-provider-etcdiscovery\n#   Build the vSphere CLI tool, govc.\nENV GOVC_VERSION=\"0.18.0\"\nRUN go get -d github.com/vmware/govmomi \\\n && git --work-tree /go/src/github.com/vmware/govmomi --git-dir /go/src/github.com/vmware/govmomi/.git checkout -b v${GOVC_VERSION} v${GOVC_VERSION} \\\n && go install github.com/vmware/govmomi/govc\nFROM ubuntu:packet_api\nLABEL maintainer=\"Denver Williams <denver@debian.nz>\"\nENV KUBECTL_VERSION=\"v1.8.1\"\nENV HELM_VERSION=\"v2.9.1\"\n#   PIN to Commit on Master\nENV TERRAFORM_VERSION=\"0.11.7\"\n#   ENV TERRAFORM_VERSION=master\n#   ENV TF_DEV=true\n#   ENV TF_RELEASE=true\nENV ARC=\"amd64\"\n#   Install the common dependencies.\nRUN apk add bash ca-certificates curl git jq less libc6-compat openssh-client tar unzip util-linux --no-cache\n#   Install the dependencies for rvm.\nRUN apk add gcc gnupg libssl1.0 linux-headers make musl-dev openssl openssl-dev procps ruby zlib zlib-dev --no-cache\n#   Install pip, used to install the AWS CLI.\nRUN apk add py2-pip --no-cache\n#   Install the dependencies for the Google Cloud SDK.\nRUN apk add python py-crcmod --no-cache\n#   Link lib64 to lib\nRUN ln -s /lib /lib64\n#   Remove the package cache to free space.\nRUN rm -fr /var/cache/apk/*\n#   Upgrade pip and install the AWS CLI.\nRUN pip install pip==23.1 --upgrade \\\n && pip install awscli==1.27.114\n#   Copy the GoVC binary from the golang build stage.\nCOPY --from=golang /go/bin/govc /usr/local/bin/\n#   Install the Google Cloud SDK\nENV CLOUD_SDK_VERSION=\"203.0.0\"\nENV PATH=\"/google-cloud-sdk/bin:$PATH\"\nRUN curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar xz -C /\n#   Install the kubectl binary\nRUN curl -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/${ARC}/kubectl \\\n && chmod +x /usr/local/bin/kubectl\n#   Install the helm binary\nRUN curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${ARC}.tar.gz | tar xz --strip-components=1 -C /usr/local/bin linux-${ARC}/helm\n#   Install the terraform binary\nRUN curl -sSLO https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_\"${TERRAFORM_VERSION}\"_linux_$ARC.zip \\\n && unzip terraform_\"${TERRAFORM_VERSION}\"_linux_${ARC}.zip -d /usr/bin\n#   Copy the Terraform providers from the golang build stage\nCOPY --from=golang /go/bin/terraform-provider-* /usr/local/bin/\n#   Write the configuration file Terraform uses to query available providers\n#   and their binaries\nRUN echo providers { >> ~/.terraformrc \\\n && echo ' gzip = \"/usr/local/bin/terraform-provider-gzip\"' >> ~/.terraformrc \\\n && echo ' etcdiscovery = \"/usr/local/bin/terraform-provider-etcdiscovery\"' >> ~/.terraformrc \\\n && echo ' ibm = \"/usr/local/bin/terraform-provider-ibm\"' >> ~/.terraformrc \\\n && echo ' oci = \"/usr/local/bin/terraform-provider-oci\"' >> ~/.terraformrc \\\n && echo ' packet = \"/usr/local/bin/terraform-provider-packet\"' >> ~/.terraformrc \\\n && echo } >> ~/.terraformrc\n#  Add Terraform Modules\nCOPY validate-cluster/ /cncf/validate-cluster/\nCOPY aws/ /cncf/aws/\nCOPY azure/ /cncf/azure/\nCOPY ibm/ /cncf/ibm/\nCOPY gce/ /cncf/gce/\nCOPY gke/ /cncf/gke/\nCOPY openstack/ /cncf/openstack/\nCOPY oci/ /cncf/oci/\nCOPY packet/ /cncf/packet/\nCOPY vsphere/ /cncf/vsphere/\nCOPY bootstrap/ /cncf/bootstrap/\nCOPY dns/ /cncf/dns/\nCOPY dns-etcd/ /cncf/dns-etcd/\nCOPY kubeconfig/ /cncf/kubeconfig/\nCOPY socat/ /cncf/socat/\nCOPY tls/ /cncf/tls/\nCOPY provision.sh /cncf/\nCOPY s3-backend.tf /cncf/\nCOPY file-backend.tf /cncf/\nCOPY rbac/ /cncf/rbac/\nCOPY addons/ /cncf/addons/\nCOPY master_templates-v1.7.2/ /cncf/master_templates-v1.7.2/\nCOPY master_templates-v1.8.1/ /cncf/master_templates-v1.8.1/\nCOPY master_templates-v1.9.0-alpha.1/ /cncf/master_templates-v1.9.0-alpha.1/\nCOPY master_templates-v1.9.0/ /cncf/master_templates-v1.9.0/\nCOPY master_templates-v1.9.0-dns-etcd/ /cncf/master_templates-v1.9.0-dns-etcd/\nCOPY master_templates-v1.10.0/ /cncf/master_templates-v1.10.0/\nCOPY master_templates-v1.10.0-ubuntu/ /cncf/master_templates-v1.10.0-ubuntu/\nCOPY worker_templates-v1.7.2/ /cncf/worker_templates-v1.7.2/\nCOPY worker_templates-v1.8.1/ /cncf/worker_templates-v1.8.1/\nCOPY worker_templates-v1.9.0-alpha.1/ /cncf/worker_templates-v1.9.0-alpha.1/\nCOPY worker_templates-v1.9.0/ /cncf/worker_templates-v1.9.0/\nCOPY worker_templates-v1.10.0/ /cncf/worker_templates-v1.10.0/\nCOPY worker_templates-v1.10.0-ubuntu/ /cncf/worker_templates-v1.10.0-ubuntu/\n#   Ensure scripts are executable.\nRUN chmod +x /cncf/provision.sh /cncf/vsphere/destroy-force.sh\nWORKDIR /cncf/\nCMD [\"bash\", \"-c\", \"/cncf/provision.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Build the Go binaries using a multi-stage build phase named \"golang\"\nFROM golang:1.10.3-alpine3.7 AS golang\nLABEL maintainer=\"Andrew Kutz <akutz@vmware.com>\"\nRUN apk --no-cache add git\n#  Build the IBM Bluemix Terraform provider\nRUN git clone https://github.com/IBM-Cloud/terraform-provider-ibm.git $GOPATH/src/github.com/IBM-Cloud/terraform-provider-ibm \\\n && go install github.com/IBM-Cloud/terraform-provider-ibm\n#  Build Oracle terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-oci.git $GOPATH/src/github.com/terraform-providers/terraform-provider-oci \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-oci ; git checkout tags/v3.0.0 ; cd - \\\n && go install github.com/terraform-providers/terraform-provider-oci\n#  Build the Packet.net terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-packet.git $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && go install github.com/terraform-providers/terraform-provider-packet\n#  Build the Gzip+Base64 Terraform provider Gzip+base64 & ETCD Provider\nRUN go get github.com/jakexks/terraform-provider-gzip\n#  Build the Etcd Terraform provider\nRUN go get github.com/paperg/terraform-provider-etcdiscovery\n#  Build the vSphere CLI tool, govc.\nENV GOVC_VERSION=\"0.18.0\"\nRUN go get -d github.com/vmware/govmomi \\\n && git --work-tree /go/src/github.com/vmware/govmomi --git-dir /go/src/github.com/vmware/govmomi/.git checkout -b v${GOVC_VERSION} v${GOVC_VERSION} \\\n && go install github.com/vmware/govmomi/govc\nFROM ubuntu:packet_api\nLABEL maintainer=\"Denver Williams <denver@debian.nz>\"\nENV KUBECTL_VERSION=\"v1.8.1\"\nENV HELM_VERSION=\"v2.9.1\"\n#  PIN to Commit on Master\nENV TERRAFORM_VERSION=\"0.11.7\"\n#  ENV TERRAFORM_VERSION=master\n#  ENV TF_DEV=true\n#  ENV TF_RELEASE=true\nENV ARC=\"amd64\"\n#  Install the common dependencies.\nRUN apk --no-cache add bash ca-certificates curl git jq less libc6-compat openssh-client tar unzip util-linux\n#  Install the dependencies for rvm.\nRUN apk --no-cache add gcc gnupg libssl1.0 linux-headers make musl-dev openssl openssl-dev procps ruby zlib zlib-dev\n#  Install pip, used to install the AWS CLI.\nRUN apk --no-cache add py2-pip\n#  Install the dependencies for the Google Cloud SDK.\nRUN apk --no-cache add python py-crcmod\n#  Link lib64 to lib\nRUN ln -s /lib /lib64\n#  Remove the package cache to free space.\nRUN rm -fr /var/cache/apk/*\n#  Upgrade pip and install the AWS CLI.\nRUN pip install pip --upgrade \\\n && pip install awscli\n#  Copy the GoVC binary from the golang build stage.\nCOPY --from=golang /go/bin/govc /usr/local/bin/\n#  Install the Google Cloud SDK\nENV CLOUD_SDK_VERSION=\"203.0.0\"\nENV PATH=\"/google-cloud-sdk/bin:$PATH\"\nRUN curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar xz -C /\n#  Install the kubectl binary\nRUN curl -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/${ARC}/kubectl \\\n && chmod +x /usr/local/bin/kubectl\n#  Install the helm binary\nRUN curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${ARC}.tar.gz | tar xz --strip-components=1 -C /usr/local/bin linux-${ARC}/helm\n#  Install the terraform binary\nRUN curl -sSLO https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_\"${TERRAFORM_VERSION}\"_linux_$ARC.zip \\\n && unzip terraform_\"${TERRAFORM_VERSION}\"_linux_${ARC}.zip -d /usr/bin\n#  Copy the Terraform providers from the golang build stage\nCOPY --from=golang /go/bin/terraform-provider-* /usr/local/bin/\n#  Write the configuration file Terraform uses to query available providers\n#  and their binaries\nRUN echo providers { >> ~/.terraformrc \\\n && echo ' gzip = \"/usr/local/bin/terraform-provider-gzip\"' >> ~/.terraformrc \\\n && echo ' etcdiscovery = \"/usr/local/bin/terraform-provider-etcdiscovery\"' >> ~/.terraformrc \\\n && echo ' ibm = \"/usr/local/bin/terraform-provider-ibm\"' >> ~/.terraformrc \\\n && echo ' oci = \"/usr/local/bin/terraform-provider-oci\"' >> ~/.terraformrc \\\n && echo ' packet = \"/usr/local/bin/terraform-provider-packet\"' >> ~/.terraformrc \\\n && echo } >> ~/.terraformrc\n# Add Terraform Modules\nCOPY validate-cluster/ /cncf/validate-cluster/\nCOPY aws/ /cncf/aws/\nCOPY azure/ /cncf/azure/\nCOPY ibm/ /cncf/ibm/\nCOPY gce/ /cncf/gce/\nCOPY gke/ /cncf/gke/\nCOPY openstack/ /cncf/openstack/\nCOPY oci/ /cncf/oci/\nCOPY packet/ /cncf/packet/\nCOPY vsphere/ /cncf/vsphere/\nCOPY bootstrap/ /cncf/bootstrap/\nCOPY dns/ /cncf/dns/\nCOPY dns-etcd/ /cncf/dns-etcd/\nCOPY kubeconfig/ /cncf/kubeconfig/\nCOPY socat/ /cncf/socat/\nCOPY tls/ /cncf/tls/\nCOPY provision.sh /cncf/\nCOPY s3-backend.tf /cncf/\nCOPY file-backend.tf /cncf/\nCOPY rbac/ /cncf/rbac/\nCOPY addons/ /cncf/addons/\nCOPY master_templates-v1.7.2/ /cncf/master_templates-v1.7.2/\nCOPY master_templates-v1.8.1/ /cncf/master_templates-v1.8.1/\nCOPY master_templates-v1.9.0-alpha.1/ /cncf/master_templates-v1.9.0-alpha.1/\nCOPY master_templates-v1.9.0/ /cncf/master_templates-v1.9.0/\nCOPY master_templates-v1.9.0-dns-etcd/ /cncf/master_templates-v1.9.0-dns-etcd/\nCOPY master_templates-v1.10.0/ /cncf/master_templates-v1.10.0/\nCOPY master_templates-v1.10.0-ubuntu/ /cncf/master_templates-v1.10.0-ubuntu/\nCOPY worker_templates-v1.7.2/ /cncf/worker_templates-v1.7.2/\nCOPY worker_templates-v1.8.1/ /cncf/worker_templates-v1.8.1/\nCOPY worker_templates-v1.9.0-alpha.1/ /cncf/worker_templates-v1.9.0-alpha.1/\nCOPY worker_templates-v1.9.0/ /cncf/worker_templates-v1.9.0/\nCOPY worker_templates-v1.10.0/ /cncf/worker_templates-v1.10.0/\nCOPY worker_templates-v1.10.0-ubuntu/ /cncf/worker_templates-v1.10.0-ubuntu/\n#  Ensure scripts are executable.\nRUN chmod +x /cncf/provision.sh /cncf/vsphere/destroy-force.sh\nWORKDIR /cncf/\nCMD [\"bash\", \"-c\", \"/cncf/provision.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"2d1b5cef6e905aceb3b5fa8559347f66","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Build the Go binaries using a multi-stage build phase named \"golang\"\nFROM golang:1.10.3-alpine3.7 AS golang\nLABEL maintainer=\"Andrew Kutz <akutz@vmware.com>\"\nRUN apk --no-cache add git\n#   Build the IBM Bluemix Terraform provider\nRUN git clone https://github.com/IBM-Cloud/terraform-provider-ibm.git $GOPATH/src/github.com/IBM-Cloud/terraform-provider-ibm \\\n && go install github.com/IBM-Cloud/terraform-provider-ibm\n#   Build Oracle terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-oci.git $GOPATH/src/github.com/terraform-providers/terraform-provider-oci \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-oci ; git checkout tags/v3.0.0 ; cd - \\\n && go install github.com/terraform-providers/terraform-provider-oci\n#   Build the Packet.net terraform provider\nRUN git clone https://github.com/terraform-providers/terraform-provider-packet.git $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && cd $GOPATH/src/github.com/terraform-providers/terraform-provider-packet \\\n && go install github.com/terraform-providers/terraform-provider-packet\n#   Build the Gzip+Base64 Terraform provider Gzip+base64 & ETCD Provider\nRUN go get github.com/jakexks/terraform-provider-gzip\n#   Build the Etcd Terraform provider\nRUN go get github.com/paperg/terraform-provider-etcdiscovery\n#   Build the vSphere CLI tool, govc.\nENV GOVC_VERSION=\"0.18.0\"\nRUN go get -d github.com/vmware/govmomi \\\n && git --work-tree /go/src/github.com/vmware/govmomi --git-dir /go/src/github.com/vmware/govmomi/.git checkout -b v${GOVC_VERSION} v${GOVC_VERSION} \\\n && go install github.com/vmware/govmomi/govc\nFROM ubuntu:packet_api\nLABEL maintainer=\"Denver Williams <denver@debian.nz>\"\nENV KUBECTL_VERSION=\"v1.8.1\"\nENV HELM_VERSION=\"v2.9.1\"\n#   PIN to Commit on Master\nENV TERRAFORM_VERSION=\"0.11.7\"\n#   ENV TERRAFORM_VERSION=master\n#   ENV TF_DEV=true\n#   ENV TF_RELEASE=true\nENV ARC=\"amd64\"\n#   Install the common dependencies.\nRUN apk --no-cache add bash ca-certificates curl git jq less libc6-compat openssh-client tar unzip util-linux\n#   Install the dependencies for rvm.\nRUN apk --no-cache add gcc gnupg libssl1.0 linux-headers make musl-dev openssl openssl-dev procps ruby zlib zlib-dev\n#   Install pip, used to install the AWS CLI.\nRUN apk --no-cache add py2-pip\n#   Install the dependencies for the Google Cloud SDK.\nRUN apk --no-cache add python py-crcmod\n#   Link lib64 to lib\nRUN ln -s /lib /lib64\n#   Remove the package cache to free space.\nRUN rm -fr /var/cache/apk/*\n#   Upgrade pip and install the AWS CLI.\nRUN pip install pip --upgrade \\\n && pip install awscli\n#   Copy the GoVC binary from the golang build stage.\nCOPY --from=golang /go/bin/govc /usr/local/bin/\n#   Install the Google Cloud SDK\nENV CLOUD_SDK_VERSION=\"203.0.0\"\nENV PATH=\"/google-cloud-sdk/bin:$PATH\"\nRUN curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar xz -C /\n#   Install the kubectl binary\nRUN curl -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/${ARC}/kubectl \\\n && chmod +x /usr/local/bin/kubectl\n#   Install the helm binary\nRUN curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${ARC}.tar.gz | tar xz --strip-components=1 -C /usr/local/bin linux-${ARC}/helm\n#   Install the terraform binary\nRUN curl -sSLO https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_\"${TERRAFORM_VERSION}\"_linux_$ARC.zip \\\n && unzip terraform_\"${TERRAFORM_VERSION}\"_linux_${ARC}.zip -d /usr/bin\n#   Copy the Terraform providers from the golang build stage\nCOPY --from=golang /go/bin/terraform-provider-* /usr/local/bin/\n#   Write the configuration file Terraform uses to query available providers\n#   and their binaries\nRUN echo providers { >> ~/.terraformrc \\\n && echo ' gzip = \"/usr/local/bin/terraform-provider-gzip\"' >> ~/.terraformrc \\\n && echo ' etcdiscovery = \"/usr/local/bin/terraform-provider-etcdiscovery\"' >> ~/.terraformrc \\\n && echo ' ibm = \"/usr/local/bin/terraform-provider-ibm\"' >> ~/.terraformrc \\\n && echo ' oci = \"/usr/local/bin/terraform-provider-oci\"' >> ~/.terraformrc \\\n && echo ' packet = \"/usr/local/bin/terraform-provider-packet\"' >> ~/.terraformrc \\\n && echo } >> ~/.terraformrc\n#  Add Terraform Modules\nCOPY validate-cluster/ /cncf/validate-cluster/\nCOPY aws/ /cncf/aws/\nCOPY azure/ /cncf/azure/\nCOPY ibm/ /cncf/ibm/\nCOPY gce/ /cncf/gce/\nCOPY gke/ /cncf/gke/\nCOPY openstack/ /cncf/openstack/\nCOPY oci/ /cncf/oci/\nCOPY packet/ /cncf/packet/\nCOPY vsphere/ /cncf/vsphere/\nCOPY bootstrap/ /cncf/bootstrap/\nCOPY dns/ /cncf/dns/\nCOPY dns-etcd/ /cncf/dns-etcd/\nCOPY kubeconfig/ /cncf/kubeconfig/\nCOPY socat/ /cncf/socat/\nCOPY tls/ /cncf/tls/\nCOPY provision.sh /cncf/\nCOPY s3-backend.tf /cncf/\nCOPY file-backend.tf /cncf/\nCOPY rbac/ /cncf/rbac/\nCOPY addons/ /cncf/addons/\nCOPY master_templates-v1.7.2/ /cncf/master_templates-v1.7.2/\nCOPY master_templates-v1.8.1/ /cncf/master_templates-v1.8.1/\nCOPY master_templates-v1.9.0-alpha.1/ /cncf/master_templates-v1.9.0-alpha.1/\nCOPY master_templates-v1.9.0/ /cncf/master_templates-v1.9.0/\nCOPY master_templates-v1.9.0-dns-etcd/ /cncf/master_templates-v1.9.0-dns-etcd/\nCOPY master_templates-v1.10.0/ /cncf/master_templates-v1.10.0/\nCOPY master_templates-v1.10.0-ubuntu/ /cncf/master_templates-v1.10.0-ubuntu/\nCOPY worker_templates-v1.7.2/ /cncf/worker_templates-v1.7.2/\nCOPY worker_templates-v1.8.1/ /cncf/worker_templates-v1.8.1/\nCOPY worker_templates-v1.9.0-alpha.1/ /cncf/worker_templates-v1.9.0-alpha.1/\nCOPY worker_templates-v1.9.0/ /cncf/worker_templates-v1.9.0/\nCOPY worker_templates-v1.10.0/ /cncf/worker_templates-v1.10.0/\nCOPY worker_templates-v1.10.0-ubuntu/ /cncf/worker_templates-v1.10.0-ubuntu/\n#   Ensure scripts are executable.\nRUN chmod +x /cncf/provision.sh /cncf/vsphere/destroy-force.sh\nWORKDIR /cncf/\nCMD [\"bash\", \"-c\", \"/cncf/provision.sh\"]\n","originalDockerfileUglifiedHash":"2db76ab5350f936d79b85ced630a44f4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b64d66f587d87153cc63aed606f6c5b4f68bf354.dockerfile"}