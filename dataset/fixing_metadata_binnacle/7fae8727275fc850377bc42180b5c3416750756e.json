{"seed":1482705461,"processedDockerfileHash":"3e8dcf4352609eec0eb255dcafc1193c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://www.tensorflow.org/performance/performance_guide\nFROM ubuntu:16.04\nMAINTAINER Craig Citro <craigcitro@google.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends numactl=2.0.11-1ubuntu1.1 build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.5 libpng12-dev=1.2.54-1ubuntu1.1 libzmq3-dev=4.1.4-7ubuntu0.1 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.12-1~16.04 rsync=3.1.1-3ubuntu1.3 software-properties-common=0.96.20.10 unzip=6.0-20ubuntu1.1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   This will install latest 'pip', 'setuptools' and 'wheel'.\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install absl-py==1.4.0 bleach==6.0.0 future==0.18.3 h5py==3.8.0 ipykernel==6.22.0 jupyter==1.0.0 matplotlib==3.7.1 numpy==1.24.2 pandas==2.0.0 protobuf==4.22.3 scikit-learn==1.2.2 scipy==1.10.1 six==1.16.0 sklearn==0.0.post4 mock==5.0.2 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   I think this is required due to some bug (assuming this will build tensorflow/19.02-mkl: \"d9d5ab289d08da9b3fa0a4feccf8dfa87a7b669e\").\nRUN pip install keras_applications==1.0.6 keras_preprocessing==1.0.5 tf-estimator-nightly==1.12.0.dev20181203 --no-deps\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.19.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nARG version=master\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git reset --hard $version \\\n && git submodule update\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_NEED_MKL=\"1\"\nENV TF_DOWNLOAD_MKL=\"1\"\n#   https://software.intel.com/en-us/articles/intel-optimization-for-tensorflow-installation-guide\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --config=opt --config=mkl tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://www.tensorflow.org/performance/performance_guide\nFROM ubuntu:16.04\nMAINTAINER Craig Citro <craigcitro@google.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends numactl build-essential curl git libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  This will install latest 'pip', 'setuptools' and 'wheel'.\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install absl-py bleach future h5py ipykernel jupyter matplotlib numpy pandas protobuf scikit-learn scipy six sklearn mock --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  I think this is required due to some bug (assuming this will build tensorflow/19.02-mkl: \"d9d5ab289d08da9b3fa0a4feccf8dfa87a7b669e\").\nRUN pip install keras_applications==1.0.6 keras_preprocessing==1.0.5 tf-estimator-nightly==1.12.0.dev20181203 --no-deps\n#  Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly:\n#    https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.19.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nARG version=master\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git reset --hard $version \\\n && git submodule update\nWORKDIR /tensorflow\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_NEED_MKL=\"1\"\nENV TF_DOWNLOAD_MKL=\"1\"\n#  https://software.intel.com/en-us/articles/intel-optimization-for-tensorflow-installation-guide\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --config=opt --config=mkl tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#  Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#  TensorBoard\nEXPOSE 6006/tcp\n#  IPython\nEXPOSE 8888/tcp\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"6b04d08b5725526dfb0fdc2958604a35","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://www.tensorflow.org/performance/performance_guide\nFROM ubuntu:16.04\nMAINTAINER Craig Citro <craigcitro@google.com>\nRUN apt-get update \\\n && apt-get install --no-install-recommends numactl build-essential curl git libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   This will install latest 'pip', 'setuptools' and 'wheel'.\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install absl-py bleach future h5py ipykernel jupyter matplotlib numpy pandas protobuf scikit-learn scipy six sklearn mock --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   I think this is required due to some bug (assuming this will build tensorflow/19.02-mkl: \"d9d5ab289d08da9b3fa0a4feccf8dfa87a7b669e\").\nRUN pip install keras_applications==1.0.6 keras_preprocessing==1.0.5 tf-estimator-nightly==1.12.0.dev20181203 --no-deps\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.19.2\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nARG version=master\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git reset --hard $version \\\n && git submodule update\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_NEED_MKL=\"1\"\nENV TF_DOWNLOAD_MKL=\"1\"\n#   https://software.intel.com/en-us/articles/intel-optimization-for-tensorflow-installation-guide\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --config=opt --config=mkl tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"8e22adb13e09d1d206bbc7bd11df380b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7fae8727275fc850377bc42180b5c3416750756e.dockerfile"}