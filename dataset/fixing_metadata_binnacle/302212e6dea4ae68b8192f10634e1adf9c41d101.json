{"seed":1067954977,"processedDockerfileHash":"8865f280360bd6cabcbaed84359e6801","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM kobotoolbox/koboform_base:latest\n#   Note: Additional environment variables have been set in `Dockerfile.koboform_base`.\nENV KPI_LOGS_DIR=\"/srv/logs\" \\\n    KPI_WHOOSH_DIR=\"/srv/whoosh\" \\\n    BUILD_DIR=\"/srv/build\" \\\n    FONTS_DIR=\"/srv/fonts\" \\\n    WEBPACK_STATS_PATH=\"/srv/webpack-stats.json\" \\\n    DJANGO_SETTINGS_MODULE=\"kobo.settings.prod\" \\\n    NGINX_STATIC_DIR=\"/srv/static\"\n#  #########################################\n#   Install any additional `apt` packages. #\n#  #########################################\nCOPY ./dependencies/apt_requirements.txt \"${KPI_SRC_DIR}/dependencies/\"\n#   Only install if the current version of `dependencies/apt_requirements.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" /srv/tmp/base__apt_requirements.txt ; then apt-get update -qq \\\n && apt-get install --no-install-recommends $( cat \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" ;) -qqy \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ; fi\n#  ##########################\n#   Re-sync `pip` packages. #\n#  ##########################\nCOPY ./dependencies/pip/external_services.txt \"${KPI_SRC_DIR}/dependencies/pip/\"\nWORKDIR ${PIP_DIR}/\n#   Only install if the current version of `dependencies/pip/external_services.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" /srv/tmp/base__external_services.txt ; then pip-sync \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" 1> /dev/null; fi\n#  #########################################\n#   Install any additional `npm` packages. #\n#  #########################################\nCOPY ./package.json \"${KPI_SRC_DIR}/\"\nWORKDIR ${KPI_SRC_DIR}/\n#   Only install if the current version of `package.json` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/package.json\" /srv/tmp/base_package.json ; then npm install --quiet || npm install --quiet ; fi\n#  #####################\n#   Build client code. #\n#  #####################\nCOPY ./scripts/copy_fonts.py ${KPI_SRC_DIR}/scripts/copy_fonts.py\nCOPY ./scripts/generate_icons.js ${KPI_SRC_DIR}/scripts/generate_icons.js\nCOPY ./webpack ${KPI_SRC_DIR}/webpack\nCOPY ./.eslintrc.json ${KPI_SRC_DIR}/.eslintrc.json\nCOPY ./.stylelintrc.json ${KPI_SRC_DIR}/.stylelintrc.json\nCOPY ./test ${KPI_SRC_DIR}/test\nCOPY ./jsapp ${KPI_SRC_DIR}/jsapp\nRUN mkdir \"${BUILD_DIR}\" \\\n && mkdir \"${FONTS_DIR}\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && rm -rf \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\nRUN npm run copy-fonts \\\n && npm run build\n#  ##############################################\n#   Copy over this directory in its current state. #\n#  ##############################################\nRUN rm -rf \"${KPI_SRC_DIR}\"\nCOPY . \"${KPI_SRC_DIR}\"\n#   Restore the backed-up package installation directories.\nRUN ln -s \"${KPI_NODE_PATH}\" \"${KPI_SRC_DIR}/node_modules\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\n#  ##########################\n#   Organize static assets. #\n#  ##########################\nRUN python manage.py collectstatic --noinput\n#  ####################################\n#   Retrieve and compile translations #\n#  ####################################\nRUN git submodule init \\\n && git submodule update --remote \\\n && python manage.py compilemessages\n#  ################################################################\n#   Persist the log directory, email directory, and Whoosh index. #\n#  ################################################################\nRUN mkdir -p \"${KPI_LOGS_DIR}/\" \"${KPI_WHOOSH_DIR}/\" \"${KPI_SRC_DIR}/emails\"\n#  ################################################\n#   Handle runtime tasks and create main process. #\n#  ################################################\n#   Using `/etc/profile.d/` as a repository for non-hard-coded environment variable overrides.\nRUN echo 'source /etc/profile' >> /root/.bashrc\n#   FIXME: Allow Celery to run as root ...for now.\nENV C_FORCE_ROOT=\"true\"\n#   Prepare for execution.\nRUN ln -s \"${KPI_SRC_DIR}/docker/init.bash\" /etc/my_init.d/10_init_kpi.bash \\\n && rm -rf /etc/service/wsgi \\\n && mkdir -p /etc/service/uwsgi \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_uwsgi.bash\" /etc/service/uwsgi/run \\\n && mkdir -p /etc/service/celery \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery.bash\" /etc/service/celery/run \\\n && mkdir -p /etc/service/celery_beat \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_beat.bash\" /etc/service/celery_beat/run \\\n && mkdir -p /etc/service/celery_sync_kobocat_xforms \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_sync_kobocat_xforms.bash\" /etc/service/celery_sync_kobocat_xforms/run\nEXPOSE 8000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM kobotoolbox/koboform_base:latest\n#  Note: Additional environment variables have been set in `Dockerfile.koboform_base`.\nENV KPI_LOGS_DIR=\"/srv/logs\" \\\n    KPI_WHOOSH_DIR=\"/srv/whoosh\" \\\n    BUILD_DIR=\"/srv/build\" \\\n    FONTS_DIR=\"/srv/fonts\" \\\n    WEBPACK_STATS_PATH=\"/srv/webpack-stats.json\" \\\n    DJANGO_SETTINGS_MODULE=\"kobo.settings.prod\" \\\n    NGINX_STATIC_DIR=\"/srv/static\"\n# #########################################\n#  Install any additional `apt` packages. #\n# #########################################\nCOPY ./dependencies/apt_requirements.txt \"${KPI_SRC_DIR}/dependencies/\"\n#  Only install if the current version of `dependencies/apt_requirements.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" /srv/tmp/base__apt_requirements.txt ; then apt-get update -qq \\\n && apt-get install $( cat \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" ;) -qqy \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ; fi\n# ##########################\n#  Re-sync `pip` packages. #\n# ##########################\nCOPY ./dependencies/pip/external_services.txt \"${KPI_SRC_DIR}/dependencies/pip/\"\nWORKDIR ${PIP_DIR}/\n#  Only install if the current version of `dependencies/pip/external_services.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" /srv/tmp/base__external_services.txt ; then pip-sync \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" 1> /dev/null; fi\n# #########################################\n#  Install any additional `npm` packages. #\n# #########################################\nCOPY ./package.json \"${KPI_SRC_DIR}/\"\nWORKDIR ${KPI_SRC_DIR}/\n#  Only install if the current version of `package.json` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/package.json\" /srv/tmp/base_package.json ; then npm install --quiet || npm install --quiet ; fi\n# #####################\n#  Build client code. #\n# #####################\nCOPY ./scripts/copy_fonts.py ${KPI_SRC_DIR}/scripts/copy_fonts.py\nCOPY ./scripts/generate_icons.js ${KPI_SRC_DIR}/scripts/generate_icons.js\nCOPY ./webpack ${KPI_SRC_DIR}/webpack\nCOPY ./.eslintrc.json ${KPI_SRC_DIR}/.eslintrc.json\nCOPY ./.stylelintrc.json ${KPI_SRC_DIR}/.stylelintrc.json\nCOPY ./test ${KPI_SRC_DIR}/test\nCOPY ./jsapp ${KPI_SRC_DIR}/jsapp\nRUN mkdir \"${BUILD_DIR}\" \\\n && mkdir \"${FONTS_DIR}\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && rm -rf \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\nRUN npm run copy-fonts \\\n && npm run build\n# ##############################################\n#  Copy over this directory in its current state. #\n# ##############################################\nRUN rm -rf \"${KPI_SRC_DIR}\"\nCOPY . \"${KPI_SRC_DIR}\"\n#  Restore the backed-up package installation directories.\nRUN ln -s \"${KPI_NODE_PATH}\" \"${KPI_SRC_DIR}/node_modules\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\n# ##########################\n#  Organize static assets. #\n# ##########################\nRUN python manage.py collectstatic --noinput\n# ####################################\n#  Retrieve and compile translations #\n# ####################################\nRUN git submodule init \\\n && git submodule update --remote \\\n && python manage.py compilemessages\n# ################################################################\n#  Persist the log directory, email directory, and Whoosh index. #\n# ################################################################\nRUN mkdir -p \"${KPI_LOGS_DIR}/\" \"${KPI_WHOOSH_DIR}/\" \"${KPI_SRC_DIR}/emails\"\n# ################################################\n#  Handle runtime tasks and create main process. #\n# ################################################\n#  Using `/etc/profile.d/` as a repository for non-hard-coded environment variable overrides.\nRUN echo 'source /etc/profile' >> /root/.bashrc\n#  FIXME: Allow Celery to run as root ...for now.\nENV C_FORCE_ROOT=\"true\"\n#  Prepare for execution.\nRUN ln -s \"${KPI_SRC_DIR}/docker/init.bash\" /etc/my_init.d/10_init_kpi.bash \\\n && rm -rf /etc/service/wsgi \\\n && mkdir -p /etc/service/uwsgi \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_uwsgi.bash\" /etc/service/uwsgi/run \\\n && mkdir -p /etc/service/celery \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery.bash\" /etc/service/celery/run \\\n && mkdir -p /etc/service/celery_beat \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_beat.bash\" /etc/service/celery_beat/run \\\n && mkdir -p /etc/service/celery_sync_kobocat_xforms \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_sync_kobocat_xforms.bash\" /etc/service/celery_sync_kobocat_xforms/run\nEXPOSE 8000/tcp\n","injectedSmells":[],"originalDockerfileHash":"545af7c28634cb88b935c2c83fa7b321","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM kobotoolbox/koboform_base:latest\n#   Note: Additional environment variables have been set in `Dockerfile.koboform_base`.\nENV KPI_LOGS_DIR=\"/srv/logs\" \\\n    KPI_WHOOSH_DIR=\"/srv/whoosh\" \\\n    BUILD_DIR=\"/srv/build\" \\\n    FONTS_DIR=\"/srv/fonts\" \\\n    WEBPACK_STATS_PATH=\"/srv/webpack-stats.json\" \\\n    DJANGO_SETTINGS_MODULE=\"kobo.settings.prod\" \\\n    NGINX_STATIC_DIR=\"/srv/static\"\n#  #########################################\n#   Install any additional `apt` packages. #\n#  #########################################\nCOPY ./dependencies/apt_requirements.txt \"${KPI_SRC_DIR}/dependencies/\"\n#   Only install if the current version of `dependencies/apt_requirements.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" /srv/tmp/base__apt_requirements.txt ; then apt-get update -qq \\\n && apt-get install $( cat \"${KPI_SRC_DIR}/dependencies/apt_requirements.txt\" ;) -qqy \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ; fi\n#  ##########################\n#   Re-sync `pip` packages. #\n#  ##########################\nCOPY ./dependencies/pip/external_services.txt \"${KPI_SRC_DIR}/dependencies/pip/\"\nWORKDIR ${PIP_DIR}/\n#   Only install if the current version of `dependencies/pip/external_services.txt` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" /srv/tmp/base__external_services.txt ; then pip-sync \"${KPI_SRC_DIR}/dependencies/pip/external_services.txt\" 1> /dev/null; fi\n#  #########################################\n#   Install any additional `npm` packages. #\n#  #########################################\nCOPY ./package.json \"${KPI_SRC_DIR}/\"\nWORKDIR ${KPI_SRC_DIR}/\n#   Only install if the current version of `package.json` differs from the one used in the base image.\nRUN if ! diff \"${KPI_SRC_DIR}/package.json\" /srv/tmp/base_package.json ; then npm install --quiet || npm install --quiet ; fi\n#  #####################\n#   Build client code. #\n#  #####################\nCOPY ./scripts/copy_fonts.py ${KPI_SRC_DIR}/scripts/copy_fonts.py\nCOPY ./scripts/generate_icons.js ${KPI_SRC_DIR}/scripts/generate_icons.js\nCOPY ./webpack ${KPI_SRC_DIR}/webpack\nCOPY ./.eslintrc.json ${KPI_SRC_DIR}/.eslintrc.json\nCOPY ./.stylelintrc.json ${KPI_SRC_DIR}/.stylelintrc.json\nCOPY ./test ${KPI_SRC_DIR}/test\nCOPY ./jsapp ${KPI_SRC_DIR}/jsapp\nRUN mkdir \"${BUILD_DIR}\" \\\n && mkdir \"${FONTS_DIR}\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && rm -rf \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\nRUN npm run copy-fonts \\\n && npm run build\n#  ##############################################\n#   Copy over this directory in its current state. #\n#  ##############################################\nRUN rm -rf \"${KPI_SRC_DIR}\"\nCOPY . \"${KPI_SRC_DIR}\"\n#   Restore the backed-up package installation directories.\nRUN ln -s \"${KPI_NODE_PATH}\" \"${KPI_SRC_DIR}/node_modules\" \\\n && ln -s \"${BUILD_DIR}\" \"${KPI_SRC_DIR}/jsapp/compiled\" \\\n && ln -s \"${FONTS_DIR}\" \"${KPI_SRC_DIR}/jsapp/fonts\" \\\n && ln -s \"${WEBPACK_STATS_PATH}\" webpack-stats.json\n#  ##########################\n#   Organize static assets. #\n#  ##########################\nRUN python manage.py collectstatic --noinput\n#  ####################################\n#   Retrieve and compile translations #\n#  ####################################\nRUN git submodule init \\\n && git submodule update --remote \\\n && python manage.py compilemessages\n#  ################################################################\n#   Persist the log directory, email directory, and Whoosh index. #\n#  ################################################################\nRUN mkdir -p \"${KPI_LOGS_DIR}/\" \"${KPI_WHOOSH_DIR}/\" \"${KPI_SRC_DIR}/emails\"\n#  ################################################\n#   Handle runtime tasks and create main process. #\n#  ################################################\n#   Using `/etc/profile.d/` as a repository for non-hard-coded environment variable overrides.\nRUN echo 'source /etc/profile' >> /root/.bashrc\n#   FIXME: Allow Celery to run as root ...for now.\nENV C_FORCE_ROOT=\"true\"\n#   Prepare for execution.\nRUN ln -s \"${KPI_SRC_DIR}/docker/init.bash\" /etc/my_init.d/10_init_kpi.bash \\\n && rm -rf /etc/service/wsgi \\\n && mkdir -p /etc/service/uwsgi \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_uwsgi.bash\" /etc/service/uwsgi/run \\\n && mkdir -p /etc/service/celery \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery.bash\" /etc/service/celery/run \\\n && mkdir -p /etc/service/celery_beat \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_beat.bash\" /etc/service/celery_beat/run \\\n && mkdir -p /etc/service/celery_sync_kobocat_xforms \\\n && ln -s \"${KPI_SRC_DIR}/docker/run_celery_sync_kobocat_xforms.bash\" /etc/service/celery_sync_kobocat_xforms/run\nEXPOSE 8000/tcp\n","originalDockerfileUglifiedHash":"13e126d418345759c4e9bb72cf274ed4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/302212e6dea4ae68b8192f10634e1adf9c41d101.dockerfile"}