{"seed":1239066857,"processedDockerfileHash":"dcb7c178a95f4eebccbce936a9721842","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#   Create a flightdeck user with the home directory.\nRUN addgroup -g 1000 flightdeck \\\n && adduser -u 1000 -G flightdeck -D -h /var/www -s /bin/bash flightdeck \\\n && addgroup flightdeck cron \\\n && mkdir -p -m 774 /var/www \\\n && chown flightdeck:flightdeck -R /var/www\n#   Update all the Alpine packages.\nRUN apk -U upgrade\n#   Install Apache and PHP.\nRUN apk add ansible=2.7.17-r0 py2-pip=18.1-r0 bash=4.4.19-r1 busybox-suid=1.29.3-r10 libcap=2.26-r0 zlib=1.2.11-r1 php7=7.2.33-r0 git=2.20.4-r0 patch=2.7.6-r6 curl=7.64.0-r5 php7-ctype=7.2.33-r0 php7-curl=7.2.33-r0 php7-dom=7.2.33-r0 php7-fileinfo=7.2.33-r0 php7-gd=7.2.33-r0 php7-iconv=7.2.33-r0 php7-json=7.2.33-r0 php7-ldap=7.2.33-r0 php7-mbstring=7.2.33-r0 php7-mcrypt php7-memcached php7-mysqlnd=7.2.33-r0 php7-opcache=7.2.33-r0 php7-openssl=7.2.33-r0 php7-phar=7.2.33-r0 php7-sqlite3=7.2.33-r0 php7-pdo=7.2.33-r0 php7-pdo_mysql=7.2.33-r0 php7-pdo_sqlite=7.2.33-r0 php7-phar=7.2.33-r0 php7-soap=7.2.33-r0 php7-session=7.2.33-r0 php7-simplexml=7.2.33-r0 php7-tokenizer=7.2.33-r0 php7-xdebug php7-exif=7.2.33-r0 php7-xml=7.2.33-r0 php7-xmlwriter=7.2.33-r0 php7-zip=7.2.33-r0 php7-zlib mariadb-client=10.3.25-r0 rsync=3.1.3-r1 supervisor=3.3.4-r1 openssh=7.9_p1-r6 openssh-client=7.9_p1-r6 nodejs-npm --update --no-cache \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\n#   Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#   Chown the flightdeck user directory and create needed cron directories\nRUN mkdir -p -m 774 /etc/periodic /etc/crontabs /var/spool/cron /var/log/cron /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R flightdeck:flightdeck /var/www /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#   Forward cron logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/cron/cron.log\n#   Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#   Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#   Install passlib and aws cli from pip as apk versions are in testing.\nRUN pip install awscli==1.27.114\n#   Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#   Copy other configuration files.\nCOPY supervisord.conf /etc/supervisord.conf\nCOPY sshd_config /etc/ssh/sshd_config\nCOPY motd.txt /etc/motd\n#   Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#   Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#   Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#   Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#   Copy the Ansible configuration files\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\nEXPOSE 22/tcp\nWORKDIR /var/www\n#   Switch to the ssh user to do additional setup.\nUSER flightdeck\n#   Copy the user bashrc file.\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bashrc\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bash_profile\n#   Install drush for the ssh user.\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y\n#   Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#   Install dart-sass globally.\nRUN npm install sass@1.62.0 -g\n#   Switch back to root for sshd.\nUSER root\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/bin/supervisord\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#  Create a flightdeck user with the home directory.\nRUN addgroup -g 1000 flightdeck \\\n && adduser -u 1000 -G flightdeck -D -h /var/www -s /bin/bash flightdeck \\\n && addgroup flightdeck cron \\\n && mkdir -p -m 774 /var/www \\\n && chown flightdeck:flightdeck -R /var/www\n#  Update all the Alpine packages.\nRUN apk -U upgrade\n#  Install Apache and PHP.\nRUN apk add --update --no-cache ansible py2-pip bash busybox-suid libcap zlib php7 git patch curl php7-ctype php7-curl php7-dom php7-fileinfo php7-gd php7-iconv php7-json php7-ldap php7-mbstring php7-mcrypt php7-memcached php7-mysqlnd php7-opcache php7-openssl php7-phar php7-sqlite3 php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-phar php7-soap php7-session php7-simplexml php7-tokenizer php7-xdebug php7-exif php7-xml php7-xmlwriter php7-zip php7-zlib mariadb-client rsync supervisor openssh openssh-client nodejs-npm \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\n#  Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#  Chown the flightdeck user directory and create needed cron directories\nRUN mkdir -p -m 774 /etc/periodic /etc/crontabs /var/spool/cron /var/log/cron /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R flightdeck:flightdeck /var/www /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#  Forward cron logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/cron/cron.log\n#  Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#  Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#  Install passlib and aws cli from pip as apk versions are in testing.\nRUN pip install awscli\n#  Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#  Copy other configuration files.\nCOPY supervisord.conf /etc/supervisord.conf\nCOPY sshd_config /etc/ssh/sshd_config\nCOPY motd.txt /etc/motd\n#  Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#  Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#  Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#  Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#  Copy the Ansible configuration files\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\nEXPOSE 22/tcp\nWORKDIR /var/www\n#  Switch to the ssh user to do additional setup.\nUSER flightdeck\n#  Copy the user bashrc file.\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bashrc\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bash_profile\n#  Install drush for the ssh user.\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y\n#  Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#  Install dart-sass globally.\nRUN npm install sass -g\n#  Switch back to root for sshd.\nUSER root\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/bin/supervisord\"]\n","injectedSmells":[],"originalDockerfileHash":"f2124eee4f7d03ac96943fb949daa8e9","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#   Create a flightdeck user with the home directory.\nRUN addgroup -g 1000 flightdeck \\\n && adduser -u 1000 -G flightdeck -D -h /var/www -s /bin/bash flightdeck \\\n && addgroup flightdeck cron \\\n && mkdir -p -m 774 /var/www \\\n && chown flightdeck:flightdeck -R /var/www\n#   Update all the Alpine packages.\nRUN apk -U upgrade\n#   Install Apache and PHP.\nRUN apk add --update --no-cache ansible py2-pip bash busybox-suid libcap zlib php7 git patch curl php7-ctype php7-curl php7-dom php7-fileinfo php7-gd php7-iconv php7-json php7-ldap php7-mbstring php7-mcrypt php7-memcached php7-mysqlnd php7-opcache php7-openssl php7-phar php7-sqlite3 php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-phar php7-soap php7-session php7-simplexml php7-tokenizer php7-xdebug php7-exif php7-xml php7-xmlwriter php7-zip php7-zlib mariadb-client rsync supervisor openssh openssh-client nodejs-npm \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\n#   Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#   Chown the flightdeck user directory and create needed cron directories\nRUN mkdir -p -m 774 /etc/periodic /etc/crontabs /var/spool/cron /var/log/cron /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R flightdeck:flightdeck /var/www /var/www/.ssh /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#   Forward cron logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/cron/cron.log\n#   Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#   Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#   Install passlib and aws cli from pip as apk versions are in testing.\nRUN pip install awscli\n#   Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#   Copy other configuration files.\nCOPY supervisord.conf /etc/supervisord.conf\nCOPY sshd_config /etc/ssh/sshd_config\nCOPY motd.txt /etc/motd\n#   Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#   Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#   Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#   Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#   Copy the Ansible configuration files\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\nEXPOSE 22/tcp\nWORKDIR /var/www\n#   Switch to the ssh user to do additional setup.\nUSER flightdeck\n#   Copy the user bashrc file.\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bashrc\nCOPY --chown=flightdeck:flightdeck bashrc-user /var/www/.bash_profile\n#   Install drush for the ssh user.\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y\n#   Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#   Install dart-sass globally.\nRUN npm install sass -g\n#   Switch back to root for sshd.\nUSER root\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/bin/supervisord\"]\n","originalDockerfileUglifiedHash":"66fc84ce16f62f9d2aa4a1bfd76d3a23","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/713dd02049607876b816622ce7ce830a9cb77687.dockerfile"}