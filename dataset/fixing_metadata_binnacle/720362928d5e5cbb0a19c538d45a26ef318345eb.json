{"seed":3570008239,"processedDockerfileHash":"586dee2798d301519b6ae8c1c7b6de45","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.8 AS sccache\nWORKDIR /tmp\nRUN wget --no-check-certificate -qO- https://github.com/mozilla/sccache/releases/download/0.2.8/sccache-0.2.8-x86_64-unknown-linux-musl.tar.gz | tar xvz \\\n && mv sccache-0.2.8-x86_64-unknown-linux-musl/sccache .\nFROM alpine:3.8 AS libv8\nLABEL repository.hub=\"alexmasterov/alpine-libv8:7.2\" \\\n      repository.url=\"https://github.com/AlexMasterov/dockerfiles\" \\\n      maintainer=\"Alex Masterov <alex.masterow@gmail.com>\"\nARG V8_VERSION=7.2.505\nARG V8_DIR=/usr/local/v8\nARG BUILD_COMMIT=5a371bcc0efe2cc84f384f14bdf5eaf5fe3e271a\nARG BUILDTOOLS_COMMIT=13a00f110ef910a25763346d6538b60f12845656\nARG ICU_COMMIT=407b39301e71006b68bd38e770f35d32398a7b14\nARG GTEST_COMMIT=2e68926a9d4929e9289373cd49e40ddcb9a628f7\nARG TRACE_EVENT_COMMIT=211b3ed9d0481b4caddbee1322321b86a483ca1f\nARG CLANG_COMMIT=3041f30dd6b3fa4fb8ca7db6439bed372f4accc0\nARG JINJA2_COMMIT=b41863e42637544c2941b574c7877d3e1f663e25\nARG MARKUPSAFE_COMMIT=8f45f5cfa0009d2a70589bcda0349b8cb2b72783\nARG CATAPULT_COMMIT=ed6fe0f638403e1afd377e38975e4fd430f53432\nARG GN_SOURCE=https://www.dropbox.com/s/3ublwqh4h9dit9t/alpine-gn-80e00be.tar.gz\nARG V8_SOURCE=https://chromium.googlesource.com/v8/v8/+archive/${V8_VERSION}.tar.gz\nENV V8_VERSION=\"${V8_VERSION}\" \\\n    V8_DIR=\"${V8_DIR}\"\nRUN set -x \\\n && apk add at-spi2-core-dev=2.26.2-r1 curl=7.61.1-r3 g++=6.4.0-r9 gcc=6.4.0-r9 glib-dev=2.56.1-r1 icu-dev=60.2-r3 linux-headers=4.4.6-r2 make=4.2.1-r2 ninja=1.8.2-r1 python tar=1.32-r0 xz=5.2.4-r0 --update --virtual .v8-build-dependencies \\\n && : \"---------- V8 ----------\" \\\n && mkdir -p /tmp/v8 \\\n && curl -fSL --connect-timeout 30 ${V8_SOURCE} | tar xmz -C /tmp/v8 \\\n && : \"---------- Dependencies ----------\" \\\n && DEPS=\" chromium/buildtools.git@${BUILDTOOLS_COMMIT}:buildtools; chromium/src/build.git@${BUILD_COMMIT}:build; chromium/src/base/trace_event/common.git@${TRACE_EVENT_COMMIT}:base/trace_event/common; chromium/src/tools/clang.git@${CLANG_COMMIT}:tools/clang; chromium/src/third_party/jinja2.git@${JINJA2_COMMIT}:third_party/jinja2; chromium/src/third_party/markupsafe.git@${MARKUPSAFE_COMMIT}:third_party/markupsafe; chromium/deps/icu.git@${ICU_COMMIT}:third_party/icu; external/github.com/google/googletest.git@${GTEST_COMMIT}:third_party/googletest/src; catapult.git@${CATAPULT_COMMIT}:third_party/catapult \" \\\n && while [ \"${DEPS}\" ] ; do dep=\"${DEPS%%;*}\" link=\"${dep%%:*}\" url=\"${link%%@*}\" url=\"${url#\"${url%%[![:space:]]*}\"}\" hash=\"${link#*@}\" dir=\"${dep#*:}\" ;[ -n \"${dep}\" ] \\\n && dep_url=\"https://chromium.googlesource.com/${url}/+archive/${hash}.tar.gz\" \\\n && dep_dir=\"/tmp/v8/${dir}\" \\\n && mkdir -p ${dep_dir} \\\n && curl -fSL --connect-timeout 30 ${dep_url} | tar xmz -C ${dep_dir} &;[ \"${DEPS}\" = \"${dep}\" ] \\\n && DEPS='' || DEPS=\"${DEPS#*;}\" ; done ; wait \\\n && : \"---------- Downloads the current stable Linux sysroot ----------\" \\\n && /tmp/v8/build/linux/sysroot_scripts/install-sysroot.py --arch=amd64 \\\n && : \"---------- Proper GN ----------\" \\\n && apk add libevent=2.1.8-r5 libexecinfo=1.1-r0 libstdc++=6.4.0-r9 --virtual .gn-runtime-dependencies \\\n && curl -fSL --connect-timeout 30 ${GN_SOURCE} | tar xmz -C /tmp/v8/buildtools/linux64/\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN : \"---------- Build instructions ----------\" \\\n && sccache --start-server \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- cc_wrapper=\\\"sccache\\\" binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_use_external_startup_data=false v8_use_snapshot = true v8_enable_future=true is_official_build=true is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 v8_monolithic = true use_jumbo_build = true \\\n && : \"---------- Build ----------\" \\\n && ninja d8 -C out.gn/x64.release/ -j $( getconf _NPROCESSORS_ONLN ;) v8_monolith \\\n && sccache --stop-server\nRUN : \"---------- Extract shared libraries ----------\" \\\n && mkdir -p ${V8_DIR}/include ${V8_DIR}/lib \\\n && cp -R /tmp/v8/include/* ${V8_DIR}/include/ \\\n && (cd /tmp/v8/out.gn/x64.release ;cp obj/lib*.a icudtl.dat ${V8_DIR}/lib/ )\nRUN : \"---------- Removing build dependencies, clean temporary files ----------\" \\\n && apk del .v8-build-dependencies .gn-runtime-dependencies \\\n && rm -rf /var/cache/apk/* /var/tmp/* /tmp/*\nFROM node:10-stretch AS v8env\nWORKDIR /v8env\nCOPY v8env/package.json package.json\nRUN yarn install\nCOPY v8env/ .\nCOPY scripts/build-version.sh ../scripts/build-version.sh\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN ./node_modules/.bin/rollup -c\nRUN ls -lah dist\nFROM alpine:edge AS builder\nWORKDIR /usr/src/myapp\nRUN apk add rust=1.26.2-r0 cargo=1.26.2-r0 g++=6.4.0-r9 openssl=1.0.2u-r0 openssl-dev=1.0.2u-r0 --no-cache\nCOPY libfly libfly\nCOPY --from=libv8 /usr/local/v8/lib libfly/v8/out.gn/lib/obj\nCOPY --from=libv8 /usr/local/v8/include libfly/v8/include\nCOPY --from=v8env v8env/ v8env/\nCOPY . ./\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV RUSTFLAGS=\"-C target-feature=+crt-static OPENSSL_STATIC=yes OPENSSL_LIB_DIR=/usr/lib OPENSSL_INCLUDE_DIR=/usr/include/openssl\" \\\n    SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    RUSTC_WRAPPER=\"/usr/bin/sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN sccache --start-server \\\n && cargo build --release -p create_snapshot \\\n && sccache --stop-server\nRUN target/release/create_snapshot v8env/dist/v8env.js v8env.bin\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN sccache --start-server \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release -p distributed-fly \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release --bin fly \\\n && sccache --stop-server\nFROM scratch\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/distributed-fly /fly-dist\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/fly /fly\nCMD [\"/fly\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.8 AS sccache\nWORKDIR /tmp\nRUN wget --no-check-certificate -qO- https://github.com/mozilla/sccache/releases/download/0.2.8/sccache-0.2.8-x86_64-unknown-linux-musl.tar.gz | tar xvz \\\n && mv sccache-0.2.8-x86_64-unknown-linux-musl/sccache .\nFROM alpine:3.8 AS libv8\nLABEL repository.hub=\"alexmasterov/alpine-libv8:7.2\" \\\n      repository.url=\"https://github.com/AlexMasterov/dockerfiles\" \\\n      maintainer=\"Alex Masterov <alex.masterow@gmail.com>\"\nARG V8_VERSION=7.2.505\nARG V8_DIR=/usr/local/v8\nARG BUILD_COMMIT=5a371bcc0efe2cc84f384f14bdf5eaf5fe3e271a\nARG BUILDTOOLS_COMMIT=13a00f110ef910a25763346d6538b60f12845656\nARG ICU_COMMIT=407b39301e71006b68bd38e770f35d32398a7b14\nARG GTEST_COMMIT=2e68926a9d4929e9289373cd49e40ddcb9a628f7\nARG TRACE_EVENT_COMMIT=211b3ed9d0481b4caddbee1322321b86a483ca1f\nARG CLANG_COMMIT=3041f30dd6b3fa4fb8ca7db6439bed372f4accc0\nARG JINJA2_COMMIT=b41863e42637544c2941b574c7877d3e1f663e25\nARG MARKUPSAFE_COMMIT=8f45f5cfa0009d2a70589bcda0349b8cb2b72783\nARG CATAPULT_COMMIT=ed6fe0f638403e1afd377e38975e4fd430f53432\nARG GN_SOURCE=https://www.dropbox.com/s/3ublwqh4h9dit9t/alpine-gn-80e00be.tar.gz\nARG V8_SOURCE=https://chromium.googlesource.com/v8/v8/+archive/${V8_VERSION}.tar.gz\nENV V8_VERSION=\"${V8_VERSION}\" \\\n    V8_DIR=\"${V8_DIR}\"\nRUN set -x \\\n && apk add --update --virtual .v8-build-dependencies at-spi2-core-dev curl g++ gcc glib-dev icu-dev linux-headers make ninja python tar xz \\\n && : \"---------- V8 ----------\" \\\n && mkdir -p /tmp/v8 \\\n && curl -fSL --connect-timeout 30 ${V8_SOURCE} | tar xmz -C /tmp/v8 \\\n && : \"---------- Dependencies ----------\" \\\n && DEPS=\" chromium/buildtools.git@${BUILDTOOLS_COMMIT}:buildtools; chromium/src/build.git@${BUILD_COMMIT}:build; chromium/src/base/trace_event/common.git@${TRACE_EVENT_COMMIT}:base/trace_event/common; chromium/src/tools/clang.git@${CLANG_COMMIT}:tools/clang; chromium/src/third_party/jinja2.git@${JINJA2_COMMIT}:third_party/jinja2; chromium/src/third_party/markupsafe.git@${MARKUPSAFE_COMMIT}:third_party/markupsafe; chromium/deps/icu.git@${ICU_COMMIT}:third_party/icu; external/github.com/google/googletest.git@${GTEST_COMMIT}:third_party/googletest/src; catapult.git@${CATAPULT_COMMIT}:third_party/catapult \" \\\n && while [ \"${DEPS}\" ] ; do dep=\"${DEPS%%;*}\" link=\"${dep%%:*}\" url=\"${link%%@*}\" url=\"${url#\"${url%%[![:space:]]*}\"}\" hash=\"${link#*@}\" dir=\"${dep#*:}\" ;[ -n \"${dep}\" ] \\\n && dep_url=\"https://chromium.googlesource.com/${url}/+archive/${hash}.tar.gz\" \\\n && dep_dir=\"/tmp/v8/${dir}\" \\\n && mkdir -p ${dep_dir} \\\n && curl -fSL --connect-timeout 30 ${dep_url} | tar xmz -C ${dep_dir} &;[ \"${DEPS}\" = \"${dep}\" ] \\\n && DEPS='' || DEPS=\"${DEPS#*;}\" ; done ; wait \\\n && : \"---------- Downloads the current stable Linux sysroot ----------\" \\\n && /tmp/v8/build/linux/sysroot_scripts/install-sysroot.py --arch=amd64 \\\n && : \"---------- Proper GN ----------\" \\\n && apk add --virtual .gn-runtime-dependencies libevent libexecinfo libstdc++ \\\n && curl -fSL --connect-timeout 30 ${GN_SOURCE} | tar xmz -C /tmp/v8/buildtools/linux64/\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN : \"---------- Build instructions ----------\" \\\n && sccache --start-server \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- cc_wrapper=\\\"sccache\\\" binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_use_external_startup_data=false v8_use_snapshot = true v8_enable_future=true is_official_build=true is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 v8_monolithic = true use_jumbo_build = true \\\n && : \"---------- Build ----------\" \\\n && ninja d8 -C out.gn/x64.release/ -j $( getconf _NPROCESSORS_ONLN ;) v8_monolith \\\n && sccache --stop-server\nRUN : \"---------- Extract shared libraries ----------\" \\\n && mkdir -p ${V8_DIR}/include ${V8_DIR}/lib \\\n && cp -R /tmp/v8/include/* ${V8_DIR}/include/ \\\n && (cd /tmp/v8/out.gn/x64.release ;cp obj/lib*.a icudtl.dat ${V8_DIR}/lib/ )\nRUN : \"---------- Removing build dependencies, clean temporary files ----------\" \\\n && apk del .v8-build-dependencies .gn-runtime-dependencies \\\n && rm -rf /var/cache/apk/* /var/tmp/* /tmp/*\nFROM node:10-stretch AS v8env\nWORKDIR /v8env\nCOPY v8env/package.json package.json\nRUN yarn install\nADD v8env/ .\nADD scripts/build-version.sh ../scripts/build-version.sh\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN ./node_modules/.bin/rollup -c\nRUN ls -lah dist\nFROM alpine:edge AS builder\nWORKDIR /usr/src/myapp\nRUN apk --no-cache add rust cargo g++ openssl openssl-dev\nCOPY libfly libfly\nCOPY --from=libv8 /usr/local/v8/lib libfly/v8/out.gn/lib/obj\nCOPY --from=libv8 /usr/local/v8/include libfly/v8/include\nCOPY --from=v8env v8env/ v8env/\nADD . ./\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV RUSTFLAGS=\"-C target-feature=+crt-static OPENSSL_STATIC=yes OPENSSL_LIB_DIR=/usr/lib OPENSSL_INCLUDE_DIR=/usr/include/openssl\" \\\n    SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    RUSTC_WRAPPER=\"/usr/bin/sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN sccache --start-server \\\n && cargo build --release -p create_snapshot \\\n && sccache --stop-server\nRUN target/release/create_snapshot v8env/dist/v8env.js v8env.bin\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN sccache --start-server \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release -p distributed-fly \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release --bin fly \\\n && sccache --stop-server\nFROM scratch\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/distributed-fly /fly-dist\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/fly /fly\nCMD [\"/fly\"]\n","injectedSmells":[],"originalDockerfileHash":"95686a2653ba4f496a17a7e7d4ca00af","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.8 AS sccache\nWORKDIR /tmp\nRUN wget --no-check-certificate -qO- https://github.com/mozilla/sccache/releases/download/0.2.8/sccache-0.2.8-x86_64-unknown-linux-musl.tar.gz | tar xvz \\\n && mv sccache-0.2.8-x86_64-unknown-linux-musl/sccache .\nFROM alpine:3.8 AS libv8\nLABEL repository.hub=\"alexmasterov/alpine-libv8:7.2\" \\\n      repository.url=\"https://github.com/AlexMasterov/dockerfiles\" \\\n      maintainer=\"Alex Masterov <alex.masterow@gmail.com>\"\nARG V8_VERSION=7.2.505\nARG V8_DIR=/usr/local/v8\nARG BUILD_COMMIT=5a371bcc0efe2cc84f384f14bdf5eaf5fe3e271a\nARG BUILDTOOLS_COMMIT=13a00f110ef910a25763346d6538b60f12845656\nARG ICU_COMMIT=407b39301e71006b68bd38e770f35d32398a7b14\nARG GTEST_COMMIT=2e68926a9d4929e9289373cd49e40ddcb9a628f7\nARG TRACE_EVENT_COMMIT=211b3ed9d0481b4caddbee1322321b86a483ca1f\nARG CLANG_COMMIT=3041f30dd6b3fa4fb8ca7db6439bed372f4accc0\nARG JINJA2_COMMIT=b41863e42637544c2941b574c7877d3e1f663e25\nARG MARKUPSAFE_COMMIT=8f45f5cfa0009d2a70589bcda0349b8cb2b72783\nARG CATAPULT_COMMIT=ed6fe0f638403e1afd377e38975e4fd430f53432\nARG GN_SOURCE=https://www.dropbox.com/s/3ublwqh4h9dit9t/alpine-gn-80e00be.tar.gz\nARG V8_SOURCE=https://chromium.googlesource.com/v8/v8/+archive/${V8_VERSION}.tar.gz\nENV V8_VERSION=\"${V8_VERSION}\" \\\n    V8_DIR=\"${V8_DIR}\"\nRUN set -x \\\n && apk add --update --virtual .v8-build-dependencies at-spi2-core-dev curl g++ gcc glib-dev icu-dev linux-headers make ninja python tar xz \\\n && : \"---------- V8 ----------\" \\\n && mkdir -p /tmp/v8 \\\n && curl -fSL --connect-timeout 30 ${V8_SOURCE} | tar xmz -C /tmp/v8 \\\n && : \"---------- Dependencies ----------\" \\\n && DEPS=\" chromium/buildtools.git@${BUILDTOOLS_COMMIT}:buildtools; chromium/src/build.git@${BUILD_COMMIT}:build; chromium/src/base/trace_event/common.git@${TRACE_EVENT_COMMIT}:base/trace_event/common; chromium/src/tools/clang.git@${CLANG_COMMIT}:tools/clang; chromium/src/third_party/jinja2.git@${JINJA2_COMMIT}:third_party/jinja2; chromium/src/third_party/markupsafe.git@${MARKUPSAFE_COMMIT}:third_party/markupsafe; chromium/deps/icu.git@${ICU_COMMIT}:third_party/icu; external/github.com/google/googletest.git@${GTEST_COMMIT}:third_party/googletest/src; catapult.git@${CATAPULT_COMMIT}:third_party/catapult \" \\\n && while [ \"${DEPS}\" ] ; do dep=\"${DEPS%%;*}\" link=\"${dep%%:*}\" url=\"${link%%@*}\" url=\"${url#\"${url%%[![:space:]]*}\"}\" hash=\"${link#*@}\" dir=\"${dep#*:}\" ;[ -n \"${dep}\" ] \\\n && dep_url=\"https://chromium.googlesource.com/${url}/+archive/${hash}.tar.gz\" \\\n && dep_dir=\"/tmp/v8/${dir}\" \\\n && mkdir -p ${dep_dir} \\\n && curl -fSL --connect-timeout 30 ${dep_url} | tar xmz -C ${dep_dir} &;[ \"${DEPS}\" = \"${dep}\" ] \\\n && DEPS='' || DEPS=\"${DEPS#*;}\" ; done ; wait \\\n && : \"---------- Downloads the current stable Linux sysroot ----------\" \\\n && /tmp/v8/build/linux/sysroot_scripts/install-sysroot.py --arch=amd64 \\\n && : \"---------- Proper GN ----------\" \\\n && apk add --virtual .gn-runtime-dependencies libevent libexecinfo libstdc++ \\\n && curl -fSL --connect-timeout 30 ${GN_SOURCE} | tar xmz -C /tmp/v8/buildtools/linux64/\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN : \"---------- Build instructions ----------\" \\\n && sccache --start-server \\\n && cd /tmp/v8 \\\n && ./tools/dev/v8gen.py x64.release -- cc_wrapper=\\\"sccache\\\" binutils_path=\\\"/usr/bin\\\" target_os=\\\"linux\\\" target_cpu=\\\"x64\\\" v8_target_cpu=\\\"x64\\\" v8_use_external_startup_data=false v8_use_snapshot = true v8_enable_future=true is_official_build=true is_cfi=false is_clang=false use_custom_libcxx=false use_sysroot=false use_gold=false use_allocator_shim=false treat_warnings_as_errors=false symbol_level=0 v8_monolithic = true use_jumbo_build = true \\\n && : \"---------- Build ----------\" \\\n && ninja d8 -C out.gn/x64.release/ -j $( getconf _NPROCESSORS_ONLN ;) v8_monolith \\\n && sccache --stop-server\nRUN : \"---------- Extract shared libraries ----------\" \\\n && mkdir -p ${V8_DIR}/include ${V8_DIR}/lib \\\n && cp -R /tmp/v8/include/* ${V8_DIR}/include/ \\\n && (cd /tmp/v8/out.gn/x64.release ;cp obj/lib*.a icudtl.dat ${V8_DIR}/lib/ )\nRUN : \"---------- Removing build dependencies, clean temporary files ----------\" \\\n && apk del .v8-build-dependencies .gn-runtime-dependencies \\\n && rm -rf /var/cache/apk/* /var/tmp/* /tmp/*\nFROM node:10-stretch AS v8env\nWORKDIR /v8env\nCOPY v8env/package.json package.json\nRUN yarn install\nADD v8env/ .\nADD scripts/build-version.sh ../scripts/build-version.sh\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN ./node_modules/.bin/rollup -c\nRUN ls -lah dist\nFROM alpine:edge AS builder\nWORKDIR /usr/src/myapp\nRUN apk --no-cache add rust cargo g++ openssl openssl-dev\nCOPY libfly libfly\nCOPY --from=libv8 /usr/local/v8/lib libfly/v8/out.gn/lib/obj\nCOPY --from=libv8 /usr/local/v8/include libfly/v8/include\nCOPY --from=v8env v8env/ v8env/\nADD . ./\nARG AWS_ACCESS_KEY_ID\nARG AWS_SECRET_ACCESS_KEY\nCOPY --from=sccache /tmp/sccache /usr/bin/sccache\nENV RUSTFLAGS=\"-C target-feature=+crt-static OPENSSL_STATIC=yes OPENSSL_LIB_DIR=/usr/lib OPENSSL_INCLUDE_DIR=/usr/include/openssl\" \\\n    SCCACHE_BUCKET=\"fly-proxy-sccache\" \\\n    RUSTC_WRAPPER=\"/usr/bin/sccache\" \\\n    AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\" \\\n    AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"\nRUN sccache --start-server \\\n && cargo build --release -p create_snapshot \\\n && sccache --stop-server\nRUN target/release/create_snapshot v8env/dist/v8env.js v8env.bin\nARG BUILD_VERSION\nENV BUILD_VERSION=\"$BUILD_VERSION\"\nRUN sccache --start-server \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release -p distributed-fly \\\n && cargo build --target x86_64-alpine-linux-musl --no-default-features --release --bin fly \\\n && sccache --stop-server\nFROM scratch\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/distributed-fly /fly-dist\nCOPY --from=builder /usr/src/myapp/target/x86_64-alpine-linux-musl/release/fly /fly\nCMD [\"/fly\"]\n","originalDockerfileUglifiedHash":"95686a2653ba4f496a17a7e7d4ca00af","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/720362928d5e5cbb0a19c538d45a26ef318345eb.dockerfile"}