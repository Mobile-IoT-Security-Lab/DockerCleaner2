{"seed":695786850,"processedDockerfileHash":"65aa7c2be0c84d1b71bd9e74e899abb5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stable\nMAINTAINER David Pose <dpose@bitergia.com>, Alvaro del Castillo <acs@bitergia.com>, David Moreno <dmoreno@bitergia.com>\n#   Image for developing Kibiter/Kibana\n#   ENV KIBANA_BRANCH master\nENV KIBANA_BRANCH=\"integration-6.1.4-community\"\n#   add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd --system kibana \\\n && useradd --system --create-home --gid kibana kibana\n#   backports used to install java 8 needed by elasticsearch 5\n#   ruby gems are used for building binary packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 curl=7.74.0-1.3+deb11u7 wget=1.21-1+deb11u1 git=1:2.30.2-1+deb11u2 python zip=3.0-12 make=4.3-4.1 g++=4:10.2.1-1 ruby-dev=1:2.7+2 rpm=4.16.1.2+dfsg1-3 rubygems libffi-dev=3.3-6 -y \\\n && curl -o /tmp/nvm-install.sh -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh \\\n && chmod +x /tmp/nvm-install.sh \\\n && bash -c /tmp/nvm-install.sh \\\n && . /root/.bashrc \\\n && gem install rake --version 13.0.6 \\\n && gem install ffi --version 1.15.5 \\\n && gem install fpm --version 1.5.0 \\\n && gem install pleaserun --version 0.0.24 \\\n && git clone --depth 1 --branch ${KIBANA_BRANCH} https://github.com/grimoirelab/kibiter.git \\\n && cd kibiter \\\n && nvm install \"$( cat .node-version ;)\" \\\n && npm install grunt-cli@1.4.3 -g \\\n && npm install \\\n && sed -e \"/return \\[/,/\\].map/ {/\\(windows\\|darwin\\|x86\\)/ d;s/,//g}\" -i tasks/config/platforms.js \\\n && grunt --no-color _build:downloadNodeBuilds:start _build:downloadNodeBuilds:finish \\\n && grunt --no-color build \\\n && tar xfz target/kibiter-*-linux-x86_64.tar.gz --directory /opt \\\n && mv /opt/kibiter-*-linux-x86_64* /opt/kibana \\\n && chown -R kibana:kibana /opt/kibana \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_dotplot.git -b 6.2-dev \\\n && cd kbn_dotplot \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_polar.git -b 6.2-dev \\\n && cd kbn_polar \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_radar.git -b 6.2-dev \\\n && cd kbn_radar \\\n && npm install \\\n && cd .. \\\n && git clone https://github.com/dlumbrer/kbn_network.git network_vis -b 6.2-dev \\\n && cd network_vis \\\n && npm install \\\n && cd /root \\\n && rm -rf /kibiter \\\n && apt-get purge -y g++ git make python zip wget \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && find /var/lib/apt/lists -type f -delete \\\n && rm -rf /root/.npm /root/.node-gyp /root/.nvm /tmp/* /var/tmp/* \\\n && bash -c 'find /usr/share/locale -maxdepth 1 -mindepth 1 -type d | grep -v -e \"en_US\" | xargs rm -rfv' \\\n && bash -c 'localedef --list-archive | grep -v -e \"en_US\" | xargs localedef --delete-from-archive' \\\n && rm -rf /usr/share/doc/*\n#   grab gosu for easy step-down from root\nRUN (gpg --batch --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver hkp://keys.gnupg.net:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 )\nRUN arch=\"$( dpkg --print-architecture ;)\" \\\n && set -x \\\n && curl -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch\" \\\n && curl -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch.asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\nENV PATH=\"/opt/kibana/bin:$PATH\"\n#   Remove kibana optimize so it is regenerated when we modify src files in containers\n#   Don't delete because we don't modify anymore src in docker-entrypoint.sh\nRUN rm -rf /opt/kibana/optimize/*\nRUN ./opt/kibana/bin/kibana | sleep 200 > /tmp/run_kibana_log.txt\nCOPY ./docker-entrypoint.sh /\nEXPOSE 5601/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"kibana\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stable\nMAINTAINER David Pose <dpose@bitergia.com>, Alvaro del Castillo <acs@bitergia.com>, David Moreno <dmoreno@bitergia.com>\n#  Image for developing Kibiter/Kibana\n#  ENV KIBANA_BRANCH master\nENV KIBANA_BRANCH=\"integration-6.1.4-community\"\n#  add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd --system kibana \\\n && useradd --system --create-home --gid kibana kibana\n#  backports used to install java 8 needed by elasticsearch 5\n#  ruby gems are used for building binary packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates dirmngr gnupg curl wget git python zip make g++ ruby-dev rpm rubygems libffi-dev -y \\\n && curl -o /tmp/nvm-install.sh -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh \\\n && chmod +x /tmp/nvm-install.sh \\\n && bash -c /tmp/nvm-install.sh \\\n && . /root/.bashrc \\\n && gem install rake \\\n && gem install ffi \\\n && gem install fpm --version 1.5.0 \\\n && gem install pleaserun --version 0.0.24 \\\n && git clone --depth 1 --branch ${KIBANA_BRANCH} https://github.com/grimoirelab/kibiter.git \\\n && cd kibiter \\\n && nvm install \"$( cat .node-version ;)\" \\\n && npm install grunt-cli -g \\\n && npm install \\\n && sed -e \"/return \\[/,/\\].map/ {/\\(windows\\|darwin\\|x86\\)/ d;s/,//g}\" -i tasks/config/platforms.js \\\n && grunt --no-color _build:downloadNodeBuilds:start _build:downloadNodeBuilds:finish \\\n && grunt --no-color build \\\n && tar xfz target/kibiter-*-linux-x86_64.tar.gz --directory /opt \\\n && mv /opt/kibiter-*-linux-x86_64* /opt/kibana \\\n && chown -R kibana:kibana /opt/kibana \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_dotplot.git -b 6.2-dev \\\n && cd kbn_dotplot \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_polar.git -b 6.2-dev \\\n && cd kbn_polar \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_radar.git -b 6.2-dev \\\n && cd kbn_radar \\\n && npm install \\\n && cd .. \\\n && git clone https://github.com/dlumbrer/kbn_network.git network_vis -b 6.2-dev \\\n && cd network_vis \\\n && npm install \\\n && cd /root \\\n && rm -rf /kibiter \\\n && apt-get purge -y g++ git make python zip wget \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && find /var/lib/apt/lists -type f -delete \\\n && rm -rf /root/.npm /root/.node-gyp /root/.nvm /tmp/* /var/tmp/* \\\n && bash -c 'find /usr/share/locale -maxdepth 1 -mindepth 1 -type d | grep -v -e \"en_US\" | xargs rm -rfv' \\\n && bash -c 'localedef --list-archive | grep -v -e \"en_US\" | xargs localedef --delete-from-archive' \\\n && rm -rf /usr/share/doc/*\n#  grab gosu for easy step-down from root\nRUN (gpg --batch --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver hkp://keys.gnupg.net:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 )\nRUN arch=\"$( dpkg --print-architecture ;)\" \\\n && set -x \\\n && curl -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch\" \\\n && curl -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch.asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\nENV PATH=\"/opt/kibana/bin:$PATH\"\n#  Remove kibana optimize so it is regenerated when we modify src files in containers\n#  Don't delete because we don't modify anymore src in docker-entrypoint.sh\nRUN rm -rf /opt/kibana/optimize/*\nRUN ./opt/kibana/bin/kibana | sleep 200 > /tmp/run_kibana_log.txt\nCOPY ./docker-entrypoint.sh /\nEXPOSE 5601/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"kibana\"]\n","injectedSmells":[],"originalDockerfileHash":"773d74d96dc6b46ee6d1ea8e2978dd62","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stable\nMAINTAINER David Pose <dpose@bitergia.com>, Alvaro del Castillo <acs@bitergia.com>, David Moreno <dmoreno@bitergia.com>\n#   Image for developing Kibiter/Kibana\n#   ENV KIBANA_BRANCH master\nENV KIBANA_BRANCH=\"integration-6.1.4-community\"\n#   add our user and group first to make sure their IDs get assigned consistently\nRUN groupadd --system kibana \\\n && useradd --system --create-home --gid kibana kibana\n#   backports used to install java 8 needed by elasticsearch 5\n#   ruby gems are used for building binary packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates dirmngr gnupg curl wget git python zip make g++ ruby-dev rpm rubygems libffi-dev -y \\\n && curl -o /tmp/nvm-install.sh -sSL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh \\\n && chmod +x /tmp/nvm-install.sh \\\n && bash -c /tmp/nvm-install.sh \\\n && . /root/.bashrc \\\n && gem install rake \\\n && gem install ffi \\\n && gem install fpm --version 1.5.0 \\\n && gem install pleaserun --version 0.0.24 \\\n && git clone --depth 1 --branch ${KIBANA_BRANCH} https://github.com/grimoirelab/kibiter.git \\\n && cd kibiter \\\n && nvm install \"$( cat .node-version ;)\" \\\n && npm install grunt-cli -g \\\n && npm install \\\n && sed -e \"/return \\[/,/\\].map/ {/\\(windows\\|darwin\\|x86\\)/ d;s/,//g}\" -i tasks/config/platforms.js \\\n && grunt --no-color _build:downloadNodeBuilds:start _build:downloadNodeBuilds:finish \\\n && grunt --no-color build \\\n && tar xfz target/kibiter-*-linux-x86_64.tar.gz --directory /opt \\\n && mv /opt/kibiter-*-linux-x86_64* /opt/kibana \\\n && chown -R kibana:kibana /opt/kibana \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_dotplot.git -b 6.2-dev \\\n && cd kbn_dotplot \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_polar.git -b 6.2-dev \\\n && cd kbn_polar \\\n && npm install \\\n && cd .. \\\n && cd /opt/kibana/plugins \\\n && git clone https://github.com/dlumbrer/kbn_radar.git -b 6.2-dev \\\n && cd kbn_radar \\\n && npm install \\\n && cd .. \\\n && git clone https://github.com/dlumbrer/kbn_network.git network_vis -b 6.2-dev \\\n && cd network_vis \\\n && npm install \\\n && cd /root \\\n && rm -rf /kibiter \\\n && apt-get purge -y g++ git make python zip wget \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && find /var/lib/apt/lists -type f -delete \\\n && rm -rf /root/.npm /root/.node-gyp /root/.nvm /tmp/* /var/tmp/* \\\n && bash -c 'find /usr/share/locale -maxdepth 1 -mindepth 1 -type d | grep -v -e \"en_US\" | xargs rm -rfv' \\\n && bash -c 'localedef --list-archive | grep -v -e \"en_US\" | xargs localedef --delete-from-archive' \\\n && rm -rf /usr/share/doc/*\n#   grab gosu for easy step-down from root\nRUN (gpg --batch --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 || gpg --batch --keyserver hkp://keys.gnupg.net:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 )\nRUN arch=\"$( dpkg --print-architecture ;)\" \\\n && set -x \\\n && curl -o /usr/local/bin/gosu -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch\" \\\n && curl -o /usr/local/bin/gosu.asc -sSL \"https://github.com/tianon/gosu/releases/download/1.3/gosu-$arch.asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\nENV PATH=\"/opt/kibana/bin:$PATH\"\n#   Remove kibana optimize so it is regenerated when we modify src files in containers\n#   Don't delete because we don't modify anymore src in docker-entrypoint.sh\nRUN rm -rf /opt/kibana/optimize/*\nRUN ./opt/kibana/bin/kibana | sleep 200 > /tmp/run_kibana_log.txt\nCOPY ./docker-entrypoint.sh /\nEXPOSE 5601/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"kibana\"]\n","originalDockerfileUglifiedHash":"3c2ad1a8db61f706164705ed58459fa0","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4c124a57130b54e50f9a94edfcd3c79f689a4608.dockerfile"}