{"seed":4074897374,"processedDockerfileHash":"4b3b2840f53060b832137797c3b00a8c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#   Add zfs ppa\nCOPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/\nRUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential clang cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libltdl-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool libzfs-dev mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar ubuntu-zfs vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"a9317c18a3a457ca0a657f08cc4d0d43c6cf8953\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#   Install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\nENV GO_VERSION=\"1.7.4\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386  solaris/amd64\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.9\"\nRUN mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2655f658408f9ad1f62abdef3eb6ed43c0cf324\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#   See also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#  allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#  Add zfs ppa\nCOPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/\nRUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential clang cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libltdl-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool libzfs-dev mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar ubuntu-zfs vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#  Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"a9317c18a3a457ca0a657f08cc4d0d43c6cf8953\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#  Install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#  Install Go\n#  IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#             will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#             with a heads-up.\nENV GO_VERSION=\"1.7.4\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#  Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386  solaris/amd64\"\n#  Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.9\"\nRUN mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#  Install two versions of the registry. The first is an older version that\n#  only supports schema1 manifests. The second is a newer version that supports\n#  both. This allows integration-cli tests to cover push/pull with both schema1\n#  and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2655f658408f9ad1f62abdef3eb6ed43c0cf324\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#  Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#  Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#  See also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#  Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#  Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"4e8dd86e09112912c9485abdf2e1ffde","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test-unit test-integration-cli test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM debian:jessie\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\n#   Add zfs ppa\nCOPY keys/launchpad-ppa-zfs.asc /go/src/github.com/docker/docker/keys/\nRUN apt-key add /go/src/github.com/docker/docker/keys/launchpad-ppa-zfs.asc\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu trusty main > /etc/apt/sources.list.d/zfs.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor apt-utils aufs-tools automake bash-completion binutils-mingw-w64 bsdmainutils btrfs-tools build-essential clang cmake createrepo curl dpkg-sig gcc-mingw-w64 git iptables jq less libapparmor-dev libcap-dev libltdl-dev libnl-3-dev libprotobuf-c0-dev libprotobuf-dev libsystemd-journal-dev libtool libzfs-dev mercurial net-tools pkg-config protobuf-compiler protobuf-c-compiler python-dev python-mock python-pip python-websocket tar ubuntu-zfs vim vim-common xfsprogs zip -y \\\n && pip install awscli==1.10.15\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   See https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   See https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Configure the container for OSX cross compilation\nENV OSX_SDK=\"MacOSX10.11.sdk\"\nENV OSX_CROSS_COMMIT=\"a9317c18a3a457ca0a657f08cc4d0d43c6cf8953\"\nRUN set -x \\\n && export OSXCROSS_PATH=\"/osxcross\" \\\n && git clone https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \\\n && (cd $OSXCROSS_PATH \\\n && git checkout -q $OSX_CROSS_COMMIT ) \\\n && curl -sSL https://s3.dockerproject.org/darwin/v2/${OSX_SDK}.tar.xz -o \"${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz\" \\\n && UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh\nENV PATH=\"/osxcross/target/bin:$PATH\"\n#   Install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   IMPORTANT: If the version of Go is updated, the Windows to Linux CI machines\n#              will need updating, to avoid errors. Ping #docker-maintainers on IRC\n#              with a heads-up.\nENV GO_VERSION=\"1.7.4\"\nRUN curl -fsSL \"https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz\" | tar -xzC /usr/local\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go\"\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/386 linux/arm  darwin/amd64  freebsd/amd64 freebsd/386 freebsd/arm  windows/amd64 windows/386  solaris/amd64\"\n#   Dependency for golint\nENV GO_TOOLS_COMMIT=\"823804e1ae08dbb14eb807afc7db9993bc9e3cc3\"\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT )\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"32a87160691b3c96046c0c678fe57c5bef761456\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"2.9\"\nRUN mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/xemul/criu/archive/v${CRIU_VERSION}.tar.gz | tar -v -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make install-criu\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2-schema1 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.5.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2655f658408f9ad1f62abdef3eb6ed43c0cf324\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Install yamllint for validating swagger.yaml\nRUN pip install yamllint==1.5.0\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN git clone https://github.com/go-swagger/go-swagger.git /go/src/github.com/go-swagger/go-swagger \\\n && (cd /go/src/github.com/go-swagger/go-swagger \\\n && git checkout -q $GO_SWAGGER_COMMIT ) \\\n && go install -v github.com/go-swagger/go-swagger/cmd/swagger\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Add integration helps to bashrc\nRUN echo \"source $PWD/hack/make/.integration-test-helpers\" >> /etc/bash.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images buildpack-deps:jessie@sha256:25785f89240fbcdd8a74bdaf30dd5599a9523882c6dfc567f2e9ef7cf6f79db6 busybox:latest@sha256:e4f93f6ed15a0cdd342f5aae387886fba0ab98af0a102da6276eaf24d6e6ade0 debian:jessie@sha256:f968f10b4b523737e253a97eac59b0d1420b5c19b69928d35801a6373ffe330e hello-world:latest@sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7\n#   See also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Install tomlv, vndr, runc, containerd, tini, docker-proxy\n#   Please edit hack/dockerfile/install-binaries.sh to update them.\nCOPY hack/dockerfile/binaries-commits /tmp/binaries-commits\nCOPY hack/dockerfile/install-binaries.sh /tmp/install-binaries.sh\nRUN /tmp/install-binaries.sh tomlv vndr runc containerd tini proxy bindata\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"701c492ba915833570e74db2c24ae463","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/34639fc6735e9d7ff91c59c0856f765dbacc2b78.dockerfile"}