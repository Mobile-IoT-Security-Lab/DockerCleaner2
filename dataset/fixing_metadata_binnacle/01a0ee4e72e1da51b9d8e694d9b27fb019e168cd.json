{"seed":317494448,"processedDockerfileHash":"fde9657d3907a8ff9138baebd3cc0a53","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM tcm1911/wheezy-i386\nMAINTAINER sean.seefried@gmail.com\n#\n#   I live in Australia so change the mirror to one more appropriate\n#   to where you live.\n#\nRUN echo \"deb http://ftp.au.debian.org/debian wheezy main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://ftp.au.debian.org/debian wheezy main\" >> /etc/apt/sources.list\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential=12.9ubuntu3 ghc=9.0.2-4ubuntu2 git=1:2.39.2-1ubuntu1 libncurses5-dev=6.4-2 cabal-install=3.4.1.0-3 llvm-3.0 ca-certificates=20230311 curl=7.88.1-7ubuntu1 file=1:5.44-3 m4=1.4.19-3 autoconf=2.71-3 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 libgnutls-dev libxml2-dev=2.9.14+dfsg-1.1build2 libgsasl7-dev=2.2.0-1ubuntu1 pkg-config=1.8.1-1ubuntu2 python c2hs=0.28.8-1 -y )\nWORKDIR /root\nENV TERM=\"xterm\"\n#   Install automake-1.14\nCOPY root-scripts/install-automake.sh /root/\nRUN bash -c ./install-automake.sh\n#   Create a new user 'androidbuilder'\nCOPY root-scripts/create-androidbuilder-user.sh /root/\nRUN bash -c ./create-androidbuilder-user.sh\n#   Log-in to the new user\nUSER androidbuilder\n#   Update cabal and install the latest\nWORKDIR /home/androidbuilder\n#   Set the working directory\nENV BASE=\"/home/androidbuilder/ghc-build\"\n#   FIXME: Move the adding of the patches until later in the Docker build,\n#   just before GHC is built\nRUN mkdir -p $BASE/patches\nCOPY patches/* $BASE/patches/\nCOPY user-scripts/set-env.sh $BASE/\nWORKDIR $BASE\n#\n#   Update cabal\n#\nCOPY user-scripts/update-host-cabal.sh $BASE/\nRUN ./update-host-cabal.sh\n#\n#   These downloads take quite a while and are annoying. I put them here\n#   at the beginning to get them out of the way. If something breaks in the\n#   build it would suck if you had to rewind to a Docker image BEFORE\n#   the downloads had occurred.\n#\nCOPY user-scripts/download-iconv.sh $BASE/\nRUN ./download-iconv.sh\nCOPY user-scripts/download-ncurses.sh $BASE/\nRUN ./download-ncurses.sh\nCOPY user-scripts/download-gmp.sh $BASE/\nRUN ./download-gmp.sh\nCOPY user-scripts/download-ghc.sh $BASE/\nRUN ./download-ghc.sh\nCOPY user-scripts/download-ndk.sh $BASE/\nRUN ./download-ndk.sh\n#\n#   Start preparing the environment.\n#\nCOPY user-scripts/unpack-ndk.sh $BASE/\nRUN ./unpack-ndk.sh\nCOPY user-scripts/create-ndk-standalone-toolchain.sh $BASE/\nRUN ./create-ndk-standalone-toolchain.sh\nCOPY user-scripts/unpack-ncurses.sh $BASE/\nRUN ./unpack-ncurses.sh\nCOPY user-scripts/set-env-1.sh $BASE/\n#\n#   From this point on all scripts should include set-env-1.sh which\n#   itself builds upon set-env.sh\n#\nCOPY user-scripts/build-iconv.sh $BASE/\nRUN ./build-iconv.sh\nCOPY user-scripts/build-ncurses.sh $BASE/\nRUN ./build-ncurses.sh\nCOPY user-scripts/build-gmp.sh $BASE/\nRUN ./build-gmp.sh\nCOPY user-scripts/build-gsasl.sh $BASE/\nRUN ./build-gsasl.sh\nCOPY user-scripts/build-libidn.sh $BASE/\nRUN ./build-libidn.sh\nCOPY user-scripts/build-libxml2.sh $BASE/\nRUN ./build-libxml2.sh\nCOPY user-scripts/build-nettle.sh $BASE/\nRUN ./build-nettle.sh\nCOPY user-scripts/build-gnutls26.sh $BASE/\nRUN ./build-gnutls26.sh\n#\n#   At last we are ready to build GHC. First we build it for the host\n#   architecture and then we build the cross-compiler.\n#\n#   This will take a while\nCOPY user-scripts/build-ghc-host.sh $BASE/\nRUN ./build-ghc-host.sh\n#   This takes a while too\nCOPY user-scripts/build-ghc-cross-compiler.sh $BASE/\nRUN ./build-ghc-cross-compiler.sh\nCOPY user-scripts/build-hsc2hs-wrapper.sh $BASE/\nRUN ./build-hsc2hs-wrapper.sh\nCOPY user-scripts/build-cross-compile-cabal.sh $BASE/\nRUN ./build-cross-compile-cabal.sh\nCOPY user-scripts/add-bindir-links.sh $BASE/\nRUN ./add-bindir-links.sh\nCOPY user-scripts/update-cabal-install.sh $BASE/\nRUN ./update-cabal-install.sh\n#\n#   Now to add add some PATHs to the .bashrc\n#\nCOPY user-scripts/add-paths-to-bashrc.sh $BASE/\nRUN ./add-paths-to-bashrc.sh\n#\n#   Now to clean up the build directory. It takes up a lot of space (3.6G).\n#\nWORKDIR /home/androidbuilder\nRUN rm -rf $BASE\nCOPY user-scripts/README /home/androidbuilder/\nRUN cat README\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM tcm1911/wheezy-i386\nMAINTAINER sean.seefried@gmail.com\n#\n#  I live in Australia so change the mirror to one more appropriate\n#  to where you live.\n#\nRUN echo \"deb http://ftp.au.debian.org/debian wheezy main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://ftp.au.debian.org/debian wheezy main\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install build-essential ghc git libncurses5-dev cabal-install llvm-3.0 ca-certificates curl file m4 autoconf zlib1g-dev libgnutls-dev libxml2-dev libgsasl7-dev pkg-config python c2hs -y\nWORKDIR /root\nENV TERM=\"xterm\"\n#  Install automake-1.14\nADD root-scripts/install-automake.sh /root/\nRUN bash -c ./install-automake.sh\n#  Create a new user 'androidbuilder'\nADD root-scripts/create-androidbuilder-user.sh /root/\nRUN bash -c ./create-androidbuilder-user.sh\n#  Log-in to the new user\nUSER androidbuilder\n#  Update cabal and install the latest\nWORKDIR /home/androidbuilder\n#  Set the working directory\nENV BASE=\"/home/androidbuilder/ghc-build\"\n#  FIXME: Move the adding of the patches until later in the Docker build,\n#  just before GHC is built\nRUN mkdir -p $BASE/patches\nADD patches/* $BASE/patches/\nADD user-scripts/set-env.sh $BASE/\nWORKDIR $BASE\n#\n#  Update cabal\n#\nADD user-scripts/update-host-cabal.sh $BASE/\nRUN ./update-host-cabal.sh\n#\n#  These downloads take quite a while and are annoying. I put them here\n#  at the beginning to get them out of the way. If something breaks in the\n#  build it would suck if you had to rewind to a Docker image BEFORE\n#  the downloads had occurred.\n#\nADD user-scripts/download-iconv.sh $BASE/\nRUN ./download-iconv.sh\nADD user-scripts/download-ncurses.sh $BASE/\nRUN ./download-ncurses.sh\nADD user-scripts/download-gmp.sh $BASE/\nRUN ./download-gmp.sh\nADD user-scripts/download-ghc.sh $BASE/\nRUN ./download-ghc.sh\nADD user-scripts/download-ndk.sh $BASE/\nRUN ./download-ndk.sh\n#\n#  Start preparing the environment.\n#\nADD user-scripts/unpack-ndk.sh $BASE/\nRUN ./unpack-ndk.sh\nADD user-scripts/create-ndk-standalone-toolchain.sh $BASE/\nRUN ./create-ndk-standalone-toolchain.sh\nADD user-scripts/unpack-ncurses.sh $BASE/\nRUN ./unpack-ncurses.sh\nADD user-scripts/set-env-1.sh $BASE/\n#\n#  From this point on all scripts should include set-env-1.sh which\n#  itself builds upon set-env.sh\n#\nADD user-scripts/build-iconv.sh $BASE/\nRUN ./build-iconv.sh\nADD user-scripts/build-ncurses.sh $BASE/\nRUN ./build-ncurses.sh\nADD user-scripts/build-gmp.sh $BASE/\nRUN ./build-gmp.sh\nADD user-scripts/build-gsasl.sh $BASE/\nRUN ./build-gsasl.sh\nADD user-scripts/build-libidn.sh $BASE/\nRUN ./build-libidn.sh\nADD user-scripts/build-libxml2.sh $BASE/\nRUN ./build-libxml2.sh\nADD user-scripts/build-nettle.sh $BASE/\nRUN ./build-nettle.sh\nADD user-scripts/build-gnutls26.sh $BASE/\nRUN ./build-gnutls26.sh\n#\n#  At last we are ready to build GHC. First we build it for the host\n#  architecture and then we build the cross-compiler.\n#\n#  This will take a while\nADD user-scripts/build-ghc-host.sh $BASE/\nRUN ./build-ghc-host.sh\n#  This takes a while too\nADD user-scripts/build-ghc-cross-compiler.sh $BASE/\nRUN ./build-ghc-cross-compiler.sh\nADD user-scripts/build-hsc2hs-wrapper.sh $BASE/\nRUN ./build-hsc2hs-wrapper.sh\nADD user-scripts/build-cross-compile-cabal.sh $BASE/\nRUN ./build-cross-compile-cabal.sh\nADD user-scripts/add-bindir-links.sh $BASE/\nRUN ./add-bindir-links.sh\nADD user-scripts/update-cabal-install.sh $BASE/\nRUN ./update-cabal-install.sh\n#\n#  Now to add add some PATHs to the .bashrc\n#\nADD user-scripts/add-paths-to-bashrc.sh $BASE/\nRUN ./add-paths-to-bashrc.sh\n#\n#  Now to clean up the build directory. It takes up a lot of space (3.6G).\n#\nWORKDIR /home/androidbuilder\nRUN rm -rf $BASE\nADD user-scripts/README /home/androidbuilder/\nRUN cat README\n","injectedSmells":[],"originalDockerfileHash":"b7978fe7a3a122a3f4738fb212ec94b0","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM tcm1911/wheezy-i386\nMAINTAINER sean.seefried@gmail.com\n#\n#   I live in Australia so change the mirror to one more appropriate\n#   to where you live.\n#\nRUN echo \"deb http://ftp.au.debian.org/debian wheezy main\" > /etc/apt/sources.list\nRUN echo \"deb-src http://ftp.au.debian.org/debian wheezy main\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install build-essential ghc git libncurses5-dev cabal-install llvm-3.0 ca-certificates curl file m4 autoconf zlib1g-dev libgnutls-dev libxml2-dev libgsasl7-dev pkg-config python c2hs -y\nWORKDIR /root\nENV TERM=\"xterm\"\n#   Install automake-1.14\nADD root-scripts/install-automake.sh /root/\nRUN bash -c ./install-automake.sh\n#   Create a new user 'androidbuilder'\nADD root-scripts/create-androidbuilder-user.sh /root/\nRUN bash -c ./create-androidbuilder-user.sh\n#   Log-in to the new user\nUSER androidbuilder\n#   Update cabal and install the latest\nWORKDIR /home/androidbuilder\n#   Set the working directory\nENV BASE=\"/home/androidbuilder/ghc-build\"\n#   FIXME: Move the adding of the patches until later in the Docker build,\n#   just before GHC is built\nRUN mkdir -p $BASE/patches\nADD patches/* $BASE/patches/\nADD user-scripts/set-env.sh $BASE/\nWORKDIR $BASE\n#\n#   Update cabal\n#\nADD user-scripts/update-host-cabal.sh $BASE/\nRUN ./update-host-cabal.sh\n#\n#   These downloads take quite a while and are annoying. I put them here\n#   at the beginning to get them out of the way. If something breaks in the\n#   build it would suck if you had to rewind to a Docker image BEFORE\n#   the downloads had occurred.\n#\nADD user-scripts/download-iconv.sh $BASE/\nRUN ./download-iconv.sh\nADD user-scripts/download-ncurses.sh $BASE/\nRUN ./download-ncurses.sh\nADD user-scripts/download-gmp.sh $BASE/\nRUN ./download-gmp.sh\nADD user-scripts/download-ghc.sh $BASE/\nRUN ./download-ghc.sh\nADD user-scripts/download-ndk.sh $BASE/\nRUN ./download-ndk.sh\n#\n#   Start preparing the environment.\n#\nADD user-scripts/unpack-ndk.sh $BASE/\nRUN ./unpack-ndk.sh\nADD user-scripts/create-ndk-standalone-toolchain.sh $BASE/\nRUN ./create-ndk-standalone-toolchain.sh\nADD user-scripts/unpack-ncurses.sh $BASE/\nRUN ./unpack-ncurses.sh\nADD user-scripts/set-env-1.sh $BASE/\n#\n#   From this point on all scripts should include set-env-1.sh which\n#   itself builds upon set-env.sh\n#\nADD user-scripts/build-iconv.sh $BASE/\nRUN ./build-iconv.sh\nADD user-scripts/build-ncurses.sh $BASE/\nRUN ./build-ncurses.sh\nADD user-scripts/build-gmp.sh $BASE/\nRUN ./build-gmp.sh\nADD user-scripts/build-gsasl.sh $BASE/\nRUN ./build-gsasl.sh\nADD user-scripts/build-libidn.sh $BASE/\nRUN ./build-libidn.sh\nADD user-scripts/build-libxml2.sh $BASE/\nRUN ./build-libxml2.sh\nADD user-scripts/build-nettle.sh $BASE/\nRUN ./build-nettle.sh\nADD user-scripts/build-gnutls26.sh $BASE/\nRUN ./build-gnutls26.sh\n#\n#   At last we are ready to build GHC. First we build it for the host\n#   architecture and then we build the cross-compiler.\n#\n#   This will take a while\nADD user-scripts/build-ghc-host.sh $BASE/\nRUN ./build-ghc-host.sh\n#   This takes a while too\nADD user-scripts/build-ghc-cross-compiler.sh $BASE/\nRUN ./build-ghc-cross-compiler.sh\nADD user-scripts/build-hsc2hs-wrapper.sh $BASE/\nRUN ./build-hsc2hs-wrapper.sh\nADD user-scripts/build-cross-compile-cabal.sh $BASE/\nRUN ./build-cross-compile-cabal.sh\nADD user-scripts/add-bindir-links.sh $BASE/\nRUN ./add-bindir-links.sh\nADD user-scripts/update-cabal-install.sh $BASE/\nRUN ./update-cabal-install.sh\n#\n#   Now to add add some PATHs to the .bashrc\n#\nADD user-scripts/add-paths-to-bashrc.sh $BASE/\nRUN ./add-paths-to-bashrc.sh\n#\n#   Now to clean up the build directory. It takes up a lot of space (3.6G).\n#\nWORKDIR /home/androidbuilder\nRUN rm -rf $BASE\nADD user-scripts/README /home/androidbuilder/\nRUN cat README\n","originalDockerfileUglifiedHash":"975dbb90bf449fa9e91cf736273482ab","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/01a0ee4e72e1da51b9d8e694d9b27fb019e168cd.dockerfile"}