{"seed":968515328,"processedDockerfileHash":"80c0845c79901d25821152aa1eab8064","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"ARG PG_VERSION\n#  ###########################\n#   Build tools binaries in separate image\n#  ###########################\nFROM golang:alpine AS tools\nENV TOOLS_VERSION=\"0.4.1\"\nRUN apk update \\\n && apk add git=2.38.4-r1 --no-cache \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n#  ###########################\n#   Build old versions in a separate stage\n#  ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION} AS oldversions\nARG PG_VERSION\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\" \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n#  ####\n#   Add the latest previous version to the end of the list for each new build\n#  ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\n#   Cleanup\nRUN echo $( pg_config --pkglibdir ;) \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=5\n#  ###########################\n#   Now build image and copy in tools\n#  ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION}\nARG PG_VERSION\nMAINTAINER Timescale https://www.timescale.com\n#   Update list below to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.2.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /opt/bitnami/postgresql/lib/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /opt/bitnami/postgresql/share/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\" \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apt-get autoremove --purge -y build-essential libssl-dev dpkg-dev gcc libc-dev make cmake \\\n && apt-get clean -y \\\n && rm -rf \"${HOME}/.cache\" /var/lib/apt/lists/* /tmp/* /var/tmp/*\nUSER 1001\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG PG_VERSION\n# ###########################\n#  Build tools binaries in separate image\n# ###########################\nFROM golang:alpine AS tools\nENV TOOLS_VERSION=\"0.4.1\"\nRUN apk update \\\n && apk add --no-cache git \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n# ###########################\n#  Build old versions in a separate stage\n# ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION} AS oldversions\nARG PG_VERSION\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\" \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n# ####\n#  Add the latest previous version to the end of the list for each new build\n# ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\n#  Cleanup\nRUN echo $( pg_config --pkglibdir ;) \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=5\n# ###########################\n#  Now build image and copy in tools\n# ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION}\nARG PG_VERSION\nMAINTAINER Timescale https://www.timescale.com\n#  Update list below to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.2.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /opt/bitnami/postgresql/lib/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /opt/bitnami/postgresql/share/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\" \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apt-get autoremove --purge -y build-essential libssl-dev dpkg-dev gcc libc-dev make cmake \\\n && apt-get clean -y \\\n && rm -rf \"${HOME}/.cache\" /var/lib/apt/lists/* /tmp/* /var/tmp/*\nUSER 1001\n","injectedSmells":[],"originalDockerfileHash":"9712f780922d872bfa0fc12d39ba5f00","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG PG_VERSION\n#  ###########################\n#   Build tools binaries in separate image\n#  ###########################\nFROM golang:alpine AS tools\nENV TOOLS_VERSION=\"0.4.1\"\nRUN apk update \\\n && apk add --no-cache git \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n#  ###########################\n#   Build old versions in a separate stage\n#  ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION} AS oldversions\nARG PG_VERSION\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\" \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n#  ####\n#   Add the latest previous version to the end of the list for each new build\n#  ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\n#   Cleanup\nRUN echo $( pg_config --pkglibdir ;) \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=5\n#  ###########################\n#   Now build image and copy in tools\n#  ###########################\nARG PG_VERSION\nFROM bitnami/postgresql:${PG_VERSION}\nARG PG_VERSION\nMAINTAINER Timescale https://www.timescale.com\n#   Update list below to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.2.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /opt/bitnami/postgresql/lib/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /opt/bitnami/postgresql/share/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nUSER 0\nRUN set -ex \\\n && mkdir -p /var/lib/apt/lists/partial \\\n && apt-get update \\\n && apt-get install build-essential libssl-dev git dpkg-dev gcc libc-dev make cmake wget -y \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\" \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apt-get autoremove --purge -y build-essential libssl-dev dpkg-dev gcc libc-dev make cmake \\\n && apt-get clean -y \\\n && rm -rf \"${HOME}/.cache\" /var/lib/apt/lists/* /tmp/* /var/tmp/*\nUSER 1001\n","originalDockerfileUglifiedHash":"d2901fe500605fda4c643d5a7fe655da","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/09622be312d7698760269580caeb100636b940db.dockerfile"}