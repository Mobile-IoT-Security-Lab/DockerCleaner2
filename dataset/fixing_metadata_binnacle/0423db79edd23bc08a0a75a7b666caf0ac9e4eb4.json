{"seed":4154695467,"processedDockerfileHash":"2036aae4f7effe35bdcc6bfd003a3901","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gabriel Garza <garzagabriel@gmail.com>\nARG TENSORFLOW_VERSION=1.6.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.5\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 scikit-image==0.20.0 pandas==2.0.0 matplotlib==3.7.1 Cython==0.29.34 requests==2.28.2 pandas==2.0.0 --no-cache-dir\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv \\\n && cd /root/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   PyCocoTools\n#\n#   Using a fork of the original that has a fix for Python 3.\n#   I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#   but it doesn't seem to be active anymore.\nRUN pip install git+https://github.com/waleedka/coco.git#subdirectory==ythonAPI --no-cache-dir\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n#\n#   # Essentials: developer tools, build tools, OpenBLAS\n#   RUN apt-get update && apt-get install -y --no-install-recommends \\\n#       apt-utils git curl vim unzip openssh-client wget \\\n#       build-essential cmake \\\n#       libopenblas-dev\n#\n#   #\n#   # Python 3.5\n#   #\n#   # For convenience, alias (but don't sym-link) python & pip to python3 & pip3 as recommended in:\n#   # http://askubuntu.com/questions/351318/changing-symlink-python-to-python3-causes-problems\n#   RUN apt-get install -y --no-install-recommends python3.5 python3.5-dev python3-pip python3-tk && \\\n#       pip3 install --no-cache-dir --upgrade pip setuptools && \\\n#       echo \"alias python='python3'\" >> /root/.bash_aliases && \\\n#       echo \"alias pip='pip3'\" >> /root/.bash_aliases\n#   # Pillow and it's dependencies\n#   RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && \\\n#       pip3 --no-cache-dir install Pillow\n#   # Science libraries and other common packages\n#   RUN pip3 --no-cache-dir install \\\n#       numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas\n#\n#   #\n#   # Jupyter Notebook\n#   #\n#   # Allow access from outside the container, and skip trying to open a browser.\n#   # NOTE: disable authentication token for convenience. DON'T DO THIS ON A PUBLIC SERVER.\n#   RUN pip3 --no-cache-dir install jupyter && \\\n#       mkdir /root/.jupyter && \\\n#       echo \"c.NotebookApp.ip = '*'\" \\\n#            \"\\nc.NotebookApp.open_browser = False\" \\\n#            \"\\nc.NotebookApp.token = ''\" \\\n#            > /root/.jupyter/jupyter_notebook_config.py\n#   EXPOSE 8888\n#\n#   #\n#   # Tensorflow 1.6.0 - GPU\n#   #\n#   # Install TensorFlow\n#   RUN pip --no-cache-dir install \\\n#   \thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n#\n#   # Expose port for TensorBoard\n#   EXPOSE 6006\n#\n#   #\n#   # OpenCV 3.4.1\n#   #\n#   # Dependencies\n#   RUN apt-get install -y --no-install-recommends \\\n#       libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n#       libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libgtk2.0-dev \\\n#       liblapacke-dev checkinstall\n#   # Get source from github\n#   RUN git clone -b 3.4.1 --depth 1 https://github.com/opencv/opencv.git /usr/local/src/opencv\n#   # Compile\n#   RUN cd /usr/local/src/opencv && mkdir build && cd build && \\\n#       cmake -D CMAKE_INSTALL_PREFIX=/usr/local \\\n#             -D BUILD_TESTS=OFF \\\n#             -D BUILD_PERF_TESTS=OFF \\\n#             -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \\\n#             .. && \\\n#       make -j\"$(nproc)\" && \\\n#       make install\n#\n#   #\n#   # Keras 2.1.5\n#   #\n#   RUN pip3 install --no-cache-dir --upgrade h5py pydot_ng keras\n#\n#   #\n#   # PyTorch 0.3.1\n#   #\n#   RUN pip3 install http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl && \\\n#       pip3 install torchvision\n#\n#   #\n#   # PyCocoTools\n#   #\n#   # Using a fork of the original that has a fix for Python 3.\n#   # I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#   # but it doesn't seem to be active anymore.\n#   RUN pip3 install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI\n#\n#   WORKDIR \"/root\"\n#   CMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gabriel Garza <garzagabriel@gmail.com>\nARG TENSORFLOW_VERSION=1.6.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.5\n# RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n# \tcat /proc/driver/nvidia/version && \\\n# \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n# \tnvcc -V && \\\n# \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#  Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#  especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install other useful Python packages using pip\nRUN pip install numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas --no-cache-dir\n#  Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#  Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#  Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv \\\n && cd /root/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#  PyCocoTools\n#\n#  Using a fork of the original that has a fix for Python 3.\n#  I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#  but it doesn't seem to be active anymore.\nRUN pip install git+https://github.com/waleedka/coco.git#subdirectory==ythonAPI --no-cache-dir\n#  Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n#\n#  # Essentials: developer tools, build tools, OpenBLAS\n#  RUN apt-get update && apt-get install -y --no-install-recommends \\\n#      apt-utils git curl vim unzip openssh-client wget \\\n#      build-essential cmake \\\n#      libopenblas-dev\n#\n#  #\n#  # Python 3.5\n#  #\n#  # For convenience, alias (but don't sym-link) python & pip to python3 & pip3 as recommended in:\n#  # http://askubuntu.com/questions/351318/changing-symlink-python-to-python3-causes-problems\n#  RUN apt-get install -y --no-install-recommends python3.5 python3.5-dev python3-pip python3-tk && \\\n#      pip3 install --no-cache-dir --upgrade pip setuptools && \\\n#      echo \"alias python='python3'\" >> /root/.bash_aliases && \\\n#      echo \"alias pip='pip3'\" >> /root/.bash_aliases\n#  # Pillow and it's dependencies\n#  RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && \\\n#      pip3 --no-cache-dir install Pillow\n#  # Science libraries and other common packages\n#  RUN pip3 --no-cache-dir install \\\n#      numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas\n#\n#  #\n#  # Jupyter Notebook\n#  #\n#  # Allow access from outside the container, and skip trying to open a browser.\n#  # NOTE: disable authentication token for convenience. DON'T DO THIS ON A PUBLIC SERVER.\n#  RUN pip3 --no-cache-dir install jupyter && \\\n#      mkdir /root/.jupyter && \\\n#      echo \"c.NotebookApp.ip = '*'\" \\\n#           \"\\nc.NotebookApp.open_browser = False\" \\\n#           \"\\nc.NotebookApp.token = ''\" \\\n#           > /root/.jupyter/jupyter_notebook_config.py\n#  EXPOSE 8888\n#\n#  #\n#  # Tensorflow 1.6.0 - GPU\n#  #\n#  # Install TensorFlow\n#  RUN pip --no-cache-dir install \\\n#  \thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n#\n#  # Expose port for TensorBoard\n#  EXPOSE 6006\n#\n#  #\n#  # OpenCV 3.4.1\n#  #\n#  # Dependencies\n#  RUN apt-get install -y --no-install-recommends \\\n#      libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n#      libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libgtk2.0-dev \\\n#      liblapacke-dev checkinstall\n#  # Get source from github\n#  RUN git clone -b 3.4.1 --depth 1 https://github.com/opencv/opencv.git /usr/local/src/opencv\n#  # Compile\n#  RUN cd /usr/local/src/opencv && mkdir build && cd build && \\\n#      cmake -D CMAKE_INSTALL_PREFIX=/usr/local \\\n#            -D BUILD_TESTS=OFF \\\n#            -D BUILD_PERF_TESTS=OFF \\\n#            -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \\\n#            .. && \\\n#      make -j\"$(nproc)\" && \\\n#      make install\n#\n#  #\n#  # Keras 2.1.5\n#  #\n#  RUN pip3 install --no-cache-dir --upgrade h5py pydot_ng keras\n#\n#  #\n#  # PyTorch 0.3.1\n#  #\n#  RUN pip3 install http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl && \\\n#      pip3 install torchvision\n#\n#  #\n#  # PyCocoTools\n#  #\n#  # Using a fork of the original that has a fix for Python 3.\n#  # I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#  # but it doesn't seem to be active anymore.\n#  RUN pip3 install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI\n#\n#  WORKDIR \"/root\"\n#  CMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"90d38fbca771383bf361efc4f7a39f2b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gabriel Garza <garzagabriel@gmail.com>\nARG TENSORFLOW_VERSION=1.6.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=2.1.5\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas --no-cache-dir\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install OpenCV\nRUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv \\\n && cd /root/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   PyCocoTools\n#\n#   Using a fork of the original that has a fix for Python 3.\n#   I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#   but it doesn't seem to be active anymore.\nRUN pip install git+https://github.com/waleedka/coco.git#subdirectory==ythonAPI --no-cache-dir\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n#\n#   # Essentials: developer tools, build tools, OpenBLAS\n#   RUN apt-get update && apt-get install -y --no-install-recommends \\\n#       apt-utils git curl vim unzip openssh-client wget \\\n#       build-essential cmake \\\n#       libopenblas-dev\n#\n#   #\n#   # Python 3.5\n#   #\n#   # For convenience, alias (but don't sym-link) python & pip to python3 & pip3 as recommended in:\n#   # http://askubuntu.com/questions/351318/changing-symlink-python-to-python3-causes-problems\n#   RUN apt-get install -y --no-install-recommends python3.5 python3.5-dev python3-pip python3-tk && \\\n#       pip3 install --no-cache-dir --upgrade pip setuptools && \\\n#       echo \"alias python='python3'\" >> /root/.bash_aliases && \\\n#       echo \"alias pip='pip3'\" >> /root/.bash_aliases\n#   # Pillow and it's dependencies\n#   RUN apt-get install -y --no-install-recommends libjpeg-dev zlib1g-dev && \\\n#       pip3 --no-cache-dir install Pillow\n#   # Science libraries and other common packages\n#   RUN pip3 --no-cache-dir install \\\n#       numpy scipy sklearn scikit-image pandas matplotlib Cython requests pandas\n#\n#   #\n#   # Jupyter Notebook\n#   #\n#   # Allow access from outside the container, and skip trying to open a browser.\n#   # NOTE: disable authentication token for convenience. DON'T DO THIS ON A PUBLIC SERVER.\n#   RUN pip3 --no-cache-dir install jupyter && \\\n#       mkdir /root/.jupyter && \\\n#       echo \"c.NotebookApp.ip = '*'\" \\\n#            \"\\nc.NotebookApp.open_browser = False\" \\\n#            \"\\nc.NotebookApp.token = ''\" \\\n#            > /root/.jupyter/jupyter_notebook_config.py\n#   EXPOSE 8888\n#\n#   #\n#   # Tensorflow 1.6.0 - GPU\n#   #\n#   # Install TensorFlow\n#   RUN pip --no-cache-dir install \\\n#   \thttps://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl\n#\n#   # Expose port for TensorBoard\n#   EXPOSE 6006\n#\n#   #\n#   # OpenCV 3.4.1\n#   #\n#   # Dependencies\n#   RUN apt-get install -y --no-install-recommends \\\n#       libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev \\\n#       libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libgtk2.0-dev \\\n#       liblapacke-dev checkinstall\n#   # Get source from github\n#   RUN git clone -b 3.4.1 --depth 1 https://github.com/opencv/opencv.git /usr/local/src/opencv\n#   # Compile\n#   RUN cd /usr/local/src/opencv && mkdir build && cd build && \\\n#       cmake -D CMAKE_INSTALL_PREFIX=/usr/local \\\n#             -D BUILD_TESTS=OFF \\\n#             -D BUILD_PERF_TESTS=OFF \\\n#             -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \\\n#             .. && \\\n#       make -j\"$(nproc)\" && \\\n#       make install\n#\n#   #\n#   # Keras 2.1.5\n#   #\n#   RUN pip3 install --no-cache-dir --upgrade h5py pydot_ng keras\n#\n#   #\n#   # PyTorch 0.3.1\n#   #\n#   RUN pip3 install http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl && \\\n#       pip3 install torchvision\n#\n#   #\n#   # PyCocoTools\n#   #\n#   # Using a fork of the original that has a fix for Python 3.\n#   # I submitted a PR to the original repo (https://github.com/cocodataset/cocoapi/pull/50)\n#   # but it doesn't seem to be active anymore.\n#   RUN pip3 install --no-cache-dir git+https://github.com/waleedka/coco.git#subdirectory=PythonAPI\n#\n#   WORKDIR \"/root\"\n#   CMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"63649f6df365267bccea3e0119d03fc6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0423db79edd23bc08a0a75a7b666caf0ac9e4eb4.dockerfile"}