{"seed":168880699,"processedDockerfileHash":"4c6a6a6b0465e71de230ad2c35be8b70","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel\n#   Supress warnings about missing front-end. As recommended at:\n#   http://stackoverflow.com/questions/22466255/is-it-possibe-to-answer-dialog-questions-when-installing-under-docker\nARG DEBIAN_FRONTEND=noninteractive\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils git curl unzip openssh-client wget build-essential cmake libboost-all-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python3.5 python3.5-dev python3-pip python3-tk zlib1g-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler liblmdb-dev libgoogle-glog-dev libatlas-base-dev gfortran libgflags-dev liblapacke-dev libopenblas-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   upgrade pip(3)\nRUN pip3 install --upgrade pip\n#   python dependencies\nRUN pip3 install --no-cache-dir --upgrade Cython numpy pypng scikit-image ipython\n#   opencv (3.2 specifically)\n#   ensure dnn is NOT enabled, this will cause problems!\nRUN cd ~ \\\n && wget -O opencv.zip https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && rm -f opencv.zip \\\n && rm -f opencv_contrib.zip \\\n && cd ~/opencv-3.2.0/ \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=OFF -D INSTALL_C_EXAMPLES=OFF -D BUILD_opencv_dnn=OFF -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules -D PYTHON3_EXECUTABLE=/usr/bin/python3 -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_EXAMPLES=OFF .. \\\n && make -j\"$( nproc ;)\" \\\n && make install -j\"$( nproc ;)\" \\\n && ldconfig \\\n && cd ~ \\\n && rm -rf opencv-3.2.0 \\\n && rm -rf opencv_contrib-3.2.0\n#   Tensorflow 1.4.1 - GPU\nRUN pip3 install --no-cache-dir --upgrade \"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.1-cp35-cp35m-linux_x86_64.whl\"\n#   Install pymongo\nRUN pip3 install --no-cache-dir --upgrade keras\n#   aten\nRUN cd /root \\\n && git clone --depth=1 https://github.com/HCPLab-SYSU/ATEN.git\n#   aten - convGRU\nRUN cd /root/ATEN/keras_convGRU \\\n && python3 setup.py install\n#   aten - flow_warp\nRUN cd `python3 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())' ` \\\n && cd tensorflow/stream_executor/cuda \\\n && curl -O https://raw.githubusercontent.com/tensorflow/tensorflow/master/third_party/toolchains/gpus/cuda/cuda/cuda_config.h \\\n && cd /root/ATEN/ops \\\n && sed -i 's/python/python3/' Makefile \\\n && sed -i 's/sm_52/sm_61/' Makefile \\\n && sed -i 's/ltensorflow_framework/ltensorflow_framework \\-D_GLIBCXX_USE_CXX11_ABI\\=0/' Makefile \\\n && make\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel\n#  Supress warnings about missing front-end. As recommended at:\n#  http://stackoverflow.com/questions/22466255/is-it-possibe-to-answer-dialog-questions-when-installing-under-docker\nARG DEBIAN_FRONTEND=noninteractive\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install apt-utils git curl unzip openssh-client wget build-essential cmake libboost-all-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python3.5 python3.5-dev python3-pip python3-tk zlib1g-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler liblmdb-dev libgoogle-glog-dev libatlas-base-dev gfortran libgflags-dev liblapacke-dev libopenblas-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  upgrade pip(3)\nRUN pip3 install --upgrade pip\n#  python dependencies\nRUN pip3 install --no-cache-dir --upgrade Cython numpy pypng scikit-image ipython\n#  opencv (3.2 specifically)\n#  ensure dnn is NOT enabled, this will cause problems!\nRUN cd ~ \\\n && wget -O opencv.zip https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && rm -f opencv.zip \\\n && rm -f opencv_contrib.zip \\\n && cd ~/opencv-3.2.0/ \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=OFF -D INSTALL_C_EXAMPLES=OFF -D BUILD_opencv_dnn=OFF -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules -D PYTHON3_EXECUTABLE=/usr/bin/python3 -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_EXAMPLES=OFF .. \\\n && make -j\"$( nproc ;)\" \\\n && make install -j\"$( nproc ;)\" \\\n && ldconfig \\\n && cd ~ \\\n && rm -rf opencv-3.2.0 \\\n && rm -rf opencv_contrib-3.2.0\n#  Tensorflow 1.4.1 - GPU\nRUN pip3 install --no-cache-dir --upgrade \"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.1-cp35-cp35m-linux_x86_64.whl\"\n#  Install pymongo\nRUN pip3 install --no-cache-dir --upgrade keras\n#  aten\nRUN cd /root \\\n && git clone --depth=1 https://github.com/HCPLab-SYSU/ATEN.git\n#  aten - convGRU\nRUN cd /root/ATEN/keras_convGRU \\\n && python3 setup.py install\n#  aten - flow_warp\nRUN cd `python3 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())' ` \\\n && cd tensorflow/stream_executor/cuda \\\n && curl -O https://raw.githubusercontent.com/tensorflow/tensorflow/master/third_party/toolchains/gpus/cuda/cuda/cuda_config.h \\\n && cd /root/ATEN/ops \\\n && sed -i 's/python/python3/' Makefile \\\n && sed -i 's/sm_52/sm_61/' Makefile \\\n && sed -i 's/ltensorflow_framework/ltensorflow_framework \\-D_GLIBCXX_USE_CXX11_ABI\\=0/' Makefile \\\n && make\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"38ace1a87abc9de588461a740a10ea3b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel\n#   Supress warnings about missing front-end. As recommended at:\n#   http://stackoverflow.com/questions/22466255/is-it-possibe-to-answer-dialog-questions-when-installing-under-docker\nARG DEBIAN_FRONTEND=noninteractive\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install apt-utils git curl unzip openssh-client wget build-essential cmake libboost-all-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg8-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python3.5 python3.5-dev python3-pip python3-tk zlib1g-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler liblmdb-dev libgoogle-glog-dev libatlas-base-dev gfortran libgflags-dev liblapacke-dev libopenblas-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   upgrade pip(3)\nRUN pip3 install --upgrade pip\n#   python dependencies\nRUN pip3 install --no-cache-dir --upgrade Cython numpy pypng scikit-image ipython\n#   opencv (3.2 specifically)\n#   ensure dnn is NOT enabled, this will cause problems!\nRUN cd ~ \\\n && wget -O opencv.zip https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && rm -f opencv.zip \\\n && rm -f opencv_contrib.zip \\\n && cd ~/opencv-3.2.0/ \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=OFF -D INSTALL_C_EXAMPLES=OFF -D BUILD_opencv_dnn=OFF -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.2.0/modules -D PYTHON3_EXECUTABLE=/usr/bin/python3 -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_EXAMPLES=OFF .. \\\n && make -j\"$( nproc ;)\" \\\n && make install -j\"$( nproc ;)\" \\\n && ldconfig \\\n && cd ~ \\\n && rm -rf opencv-3.2.0 \\\n && rm -rf opencv_contrib-3.2.0\n#   Tensorflow 1.4.1 - GPU\nRUN pip3 install --no-cache-dir --upgrade \"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.1-cp35-cp35m-linux_x86_64.whl\"\n#   Install pymongo\nRUN pip3 install --no-cache-dir --upgrade keras\n#   aten\nRUN cd /root \\\n && git clone --depth=1 https://github.com/HCPLab-SYSU/ATEN.git\n#   aten - convGRU\nRUN cd /root/ATEN/keras_convGRU \\\n && python3 setup.py install\n#   aten - flow_warp\nRUN cd `python3 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())' ` \\\n && cd tensorflow/stream_executor/cuda \\\n && curl -O https://raw.githubusercontent.com/tensorflow/tensorflow/master/third_party/toolchains/gpus/cuda/cuda/cuda_config.h \\\n && cd /root/ATEN/ops \\\n && sed -i 's/python/python3/' Makefile \\\n && sed -i 's/sm_52/sm_61/' Makefile \\\n && sed -i 's/ltensorflow_framework/ltensorflow_framework \\-D_GLIBCXX_USE_CXX11_ABI\\=0/' Makefile \\\n && make\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"ce12cc33b34bb11d1dcd84400588d52c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9667a0d06e629fdd4a146294b7e3e92ddd704526.dockerfile"}