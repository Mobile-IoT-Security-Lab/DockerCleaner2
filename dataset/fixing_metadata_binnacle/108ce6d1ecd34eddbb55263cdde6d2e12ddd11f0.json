{"seed":3320909506,"processedDockerfileHash":"9640722650aaea9e0b09e5c2e1cfea9e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck"],"processedDockerfile":"FROM jupyter/scipy-notebook\nMAINTAINER Jay Johnson <jay.p.h.johnson@gmail.com>\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends jed=1:0.99.20~pre.178+dfsg-1 emacs=1:28.2+1-13ubuntu3 build-essential=12.9ubuntu3 python-dev python-setuptools unzip=6.0-27ubuntu1 libsm6=2:1.2.3-1build2 pandoc=2.17.1.1-1.1ubuntu1 texlive-latex-base=2022.20230122-2 texlive-latex-extra=2022.20230122-2 texlive-fonts-extra=2022.20230122-2 texlive-fonts-recommended=2022.20230122-2 texlive-generic-recommended libxrender1=1:0.9.10-1.1 julia libnettle4 git=1:2.39.2-1ubuntu1 sqlite=2.8.17-15fakesync1build1 vim=2:9.0.1000-4ubuntu2 wget=1.21.3-1ubuntu1 mlocate=1.1.18-1ubuntu1 cron=3.0pl1-151ubuntu1 rsyslog=8.2302.0-1ubuntu2 logrotate=3.21.0-1 gcc=4:12.2.0-3ubuntu1 telnet=0.17+2.4-2ubuntu1 tree=2.1.0-1 curl=7.88.1-7ubuntu1 tar=1.34+dfsg-1.1 net-tools=2.10-0.1ubuntu3 mariadb-server=1:10.11.2-1 libmysqlclient-dev=8.0.32-0ubuntu4 fonts-dejavu=2.37-6 gfortran=4:12.2.0-3ubuntu1 libav-tools libcurl4-openssl-dev=7.88.1-7ubuntu1 libssl-dev=3.0.8-1ubuntu1 libxml2-dev=2.9.14+dfsg-1.1build2 libxslt1-dev=1.1.35-1 libpcap-dev=1.10.3-1 libsqlite3-dev=3.40.1-1 libattr1-dev=1:2.5.1-4 libffi-dev=3.4.4-1 -yq ) \\\n && apt-get clean\nRUN (apt-get update ;apt-get install --no-install-recommends libatlas-base-dev=3.10.3-13ubuntu1 libopenblas-dev=0.3.21+ds-4 libopencv-dev=4.6.0+dfsg-11 libprotobuf-dev=3.21.12-1ubuntu7 liblapack-dev=3.11.0-2 libleveldb-dev=1.23-4 protobuf-compiler=3.21.12-1ubuntu7 libsnappy-dev=1.1.9-3 libboost-all-dev=1.74.0.3ubuntu7 -yq ) \\\n && apt-get clean\nRUN (apt-get update ;apt-get install --no-install-recommends libgflags-dev=2.2.2-2 libgoogle-glog-dev=0.6.0-2 liblmdb-dev=0.9.24-1build2 -yq ) \\\n && apt-get clean\nRUN apt-get remove -y librdkafka*\n#   Install the new Confluent Kafka toolchain for using their kafka client: https://github.com/confluentinc/confluent-kafka-python / http://blog.parsely.com/post/3886/pykafka-now\nRUN wget -qO - http://packages.confluent.io/deb/3.0/archive.key | sudo apt-key add -\nRUN echo \"deb [arch=amd64] http://packages.confluent.io/deb/3.0 stable main\" >> /etc/apt/sources.list\nRUN apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends confluent-platform-2.11 librdkafka-dev=2.0.2-1 -y )\nENV NB_USER=\"jovyan\"\nENV ENV_PORT=\"8888\"\nENV ENV_PROJ_DIR=\"/opt/work\"\nENV ENV_DATA_DIR=\"/opt/work/data\"\nENV ENV_DATA_SRC_DIR=\"/opt/work/data/src\"\nENV ENV_DATA_DST_DIR=\"/opt/work/data/dst\"\nENV ENV_REDIS_HOST=\"localhost\"\nENV ENV_REDIS_PORT=\"6000\"\nENV ENV_REDIS_SRC_KEY=\"JUPYTER_SRC_KEY\"\nENV ENV_REDIS_DST_KEY=\"JUPYTER_DST_KEY\"\n#   Coordinate events without changing the container\nENV ENV_SYNTHESIZE_DIR=\"/opt/work/data/synthesize\"\nENV ENV_SYNTHESIZE_BIN=\"/opt/containerfiles/synthesize.sh\"\nENV ENV_TIDY_DIR=\"/opt/work/data/tidy\"\nENV ENV_TIDY_BIN=\"/opt/containerfiles/tidy.sh\"\nENV ENV_ANALYZE_DIR=\"/opt/work/data/analyze\"\nENV ENV_ANALYZE_BIN=\"/opt/containerfiles/analyze.sh\"\nENV ENV_OUTPUT_DIR=\"/opt/work/data/output\"\nENV ENV_OUTPUT_BIN=\"/opt/containerfiles/output-model.sh\"\nENV ENV_REDIS_MODEL_OUT_BIN=\"/opt/containerfiles/redis-model.sh\"\nENV ENV_REDIS_MODEL_DST_KEY=\"JUPYTER_REDIS_MODEL_DST_KEY\"\n#   Bin and Libs Dir\nENV ENV_BINS=\"/opt/work/bins\"\nENV ENV_LIBS=\"/opt/work/libs\"\n#   Configuration Dir:\nENV ENV_CONFIGS_DIR=\"/opt/work/configs\"\nENV ENV_CL_ENV_DIR=\"/opt/work/env\"\n#   Global Python Dirs:\nENV ENV_PYTHON_SRC_DIR=\"/opt/work/src\"\nENV ENV_PYTHON_COMMON_DIR=\"/opt/work/src/common\"\nENV ENV_PYTHON_REDIS_DIR=\"/opt/work/src/connectors/redis\"\nENV ENV_PYTHON_DB_DIR=\"/opt/work/src/connectors/database\"\nENV ENV_PYTHON_SCHEMA_DIR=\"/opt/work/src/databases/schema\"\nENV ENV_PYTHON_CORE_CONFIG=\"/opt/work/configs/jupyter.json\"\n#   Slack Debugging Env:\nENV ENV_SLACK_BOTNAME=\"bugbot\"\nENV ENV_SLACK_CHANNEL=\"debugging\"\nENV ENV_SLACK_NOTIFY_USER=\"jay\"\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV ENV_SLACK_ENVNAME=\"dev-jupyter\"\nENV ENV_SLACK_ENABLED=\"1\"\n#   Environment Deployment Type\nENV ENV_DEPLOYMENT_TYPE=\"Local\"\nENV ENV_IN_DOCKER=\"1\"\nENV ENV_DEBUG_LOADING=\"0\"\nUSER root\n#   Python packages for interfacing with resources outside of this container\nRUN conda install --quiet --yes 'coverage' 'seaborn' 'pcre' 'six' 'pika' 'python-daemon' 'feedparser' 'pytest' 'nose' 'lxml' 'Django' 'sphinx' 'sphinx-bootstrap-theme' 'requests' 'redis=3.2.0' 'hiredis' 'redis-py' 'boto' 'awscli' 'django-redis-cache' 'uwsgi' 'PyMySQL' 'psycopg2' 'pymongo' 'SQLAlchemy' 'pandas' 'numpy' 'tqdm' 'pandas-datareader' 'tensorflow' 'alembic' 'ipywidgets' 'widgetsnbextension' 'vega' 'pyqt=4.11'\n#   Add Volumes and Set permissions\nRUN mkdir -p -m 777 /opt \\\n && mkdir -p -m 777 /opt/containerfiles \\\n && chmod 777 /opt \\\n && chmod 777 /opt/containerfiles \\\n && touch /tmp/firsttimerunning\n#  ## Finish the setup using root\nUSER $NB_USER\n#   Add custom Python 2 pips:\nCOPY ./python2/ /opt/python2\nRUN /opt/python2/install_pips.sh\nUSER root\nRUN conda install pyqt=4.11 -y\n#   Configure container startup as root\nEXPOSE 8888/tcp\n#  ENTRYPOINT [\"tini\", \"--\"]\nCMD [\"/opt/containerfiles/start-container.sh\"]\n#  ########################################################\n#\n#   Add Files into the container now that the setup is done\n#\n#   Add the starters and installers:\nCOPY ./containerfiles/ /opt/containerfiles/\nRUN chmod 777 /opt/containerfiles/*.sh \\\n && cp /opt/containerfiles/bashrc ~/.bashrc \\\n && cp /opt/containerfiles/vimrc ~/.vimrc \\\n && cp /opt/containerfiles/bashrc /home/$NB_USER/.bashrc \\\n && cp /opt/containerfiles/vimrc /home/$NB_USER/.vimrc \\\n && chown $NB_USER /home/$NB_USER/.bashrc \\\n && chown $NB_USER /home/$NB_USER/.vimrc \\\n && chmod 664 /home/$NB_USER/.bashrc \\\n && chmod 664 /home/$NB_USER/.vimrc\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /root/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /root/.bashrc \\\n && echo 'else' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /root/.bashrc \\\n && echo 'fi' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && echo 'source activate python2' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && mv /usr/bin/vi /usr/bin/bak.vi \\\n && cp /usr/bin/vim /usr/bin/vi\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'else' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'fi' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'source activate python2' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc\n#   Add local files as late as possible to avoid cache busting\nRUN cp /opt/containerfiles/start-notebook.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/start-singleuser.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/jupyter_notebook_config.py /home/$NB_USER/.jupyter/ \\\n && mkdir -p -m 777 /opt/python2 \\\n && chmod 777 /opt \\\n && chown -R $NB_USER:users /opt/python2 \\\n && mkdir -p -m 777 /opt/work/ \\\n && chmod 777 /opt \\\n && chmod 777 /opt/work \\\n && chown -R $NB_USER:users /opt/work \\\n && mkdir -p -m 777 /opt/work/examples \\\n && mkdir -p -m 777 /opt/work/src \\\n && mkdir -p -m 777 /opt/work/env \\\n && mkdir -p -m 777 /opt/work/bins \\\n && mkdir -p -m 777 /opt/work/libs \\\n && mkdir -p -m 777 /opt/work/configs \\\n && mkdir -p -m 777 /opt/work/pips \\\n && mkdir -p -m 777 /opt/work/data \\\n && chown -R $NB_USER:users /opt/work/examples \\\n && chown -R $NB_USER:users /opt/work/src \\\n && chown -R $NB_USER:users /opt/work/env \\\n && chown -R $NB_USER:users /opt/work/bins \\\n && chown -R $NB_USER:users /opt/work/libs \\\n && chown -R $NB_USER:users /opt/work/configs \\\n && chown -R $NB_USER:users /opt/work/pips \\\n && chown -R $NB_USER:users /opt/work/data\nWORKDIR /opt/work\nCOPY ./libs/ /opt/work/libs/\nCOPY ./configs/ /opt/work/configs/\nCOPY ./bins/ /opt/work/bins/\nCOPY ./src/ /opt/work/src/\nCOPY ./env/ /opt/work/env/\nCOPY ./examples /opt/work/examples/\n#   Assign all permissions over:\nRUN chown -R $NB_USER:users /opt/work/* \\\n && chmod 777 /opt/work/bins/*\n#  ########################################################\n#\n#   Run as the user\n#\nUSER $NB_USER\n#   Track the Python 2 and Python 3 pips and Conda Environment\nRUN pip2 freeze > /opt/work/pips/python2-requirements.txt \\\n && pip3 freeze > /opt/work/pips/python3-requirements.txt\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM jupyter/scipy-notebook\nMAINTAINER Jay Johnson <jay.p.h.johnson@gmail.com>\nUSER root\n#  Install all OS dependencies for notebook server that starts but lacks all\n#  features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -y\nRUN apt-get install --no-install-recommends jed emacs build-essential python-dev python-setuptools unzip libsm6 pandoc texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended libxrender1 julia libnettle4 git sqlite vim wget mlocate cron rsyslog logrotate gcc telnet tree curl tar net-tools mariadb-server libmysqlclient-dev fonts-dejavu gfortran libav-tools libcurl4-openssl-dev libssl-dev libxml2-dev libxslt1-dev libpcap-dev libsqlite3-dev libattr1-dev libffi-dev -yq \\\n && apt-get clean\nRUN apt-get install --no-install-recommends libatlas-base-dev libopenblas-dev libopencv-dev libprotobuf-dev liblapack-dev libleveldb-dev protobuf-compiler libsnappy-dev libboost-all-dev -yq \\\n && apt-get clean\nRUN apt-get install --no-install-recommends libgflags-dev libgoogle-glog-dev liblmdb-dev -yq \\\n && apt-get clean\nRUN apt-get remove -y librdkafka*\n#  Install the new Confluent Kafka toolchain for using their kafka client: https://github.com/confluentinc/confluent-kafka-python / http://blog.parsely.com/post/3886/pykafka-now\nRUN wget -qO - http://packages.confluent.io/deb/3.0/archive.key | sudo apt-key add -\nRUN echo \"deb [arch=amd64] http://packages.confluent.io/deb/3.0 stable main\" >> /etc/apt/sources.list\nRUN apt-get update -y \\\n && apt-get install confluent-platform-2.11 librdkafka-dev -y\nENV NB_USER=\"jovyan\"\nENV ENV_PORT=\"8888\"\nENV ENV_PROJ_DIR=\"/opt/work\"\nENV ENV_DATA_DIR=\"/opt/work/data\"\nENV ENV_DATA_SRC_DIR=\"/opt/work/data/src\"\nENV ENV_DATA_DST_DIR=\"/opt/work/data/dst\"\nENV ENV_REDIS_HOST=\"localhost\"\nENV ENV_REDIS_PORT=\"6000\"\nENV ENV_REDIS_SRC_KEY=\"JUPYTER_SRC_KEY\"\nENV ENV_REDIS_DST_KEY=\"JUPYTER_DST_KEY\"\n#  Coordinate events without changing the container\nENV ENV_SYNTHESIZE_DIR=\"/opt/work/data/synthesize\"\nENV ENV_SYNTHESIZE_BIN=\"/opt/containerfiles/synthesize.sh\"\nENV ENV_TIDY_DIR=\"/opt/work/data/tidy\"\nENV ENV_TIDY_BIN=\"/opt/containerfiles/tidy.sh\"\nENV ENV_ANALYZE_DIR=\"/opt/work/data/analyze\"\nENV ENV_ANALYZE_BIN=\"/opt/containerfiles/analyze.sh\"\nENV ENV_OUTPUT_DIR=\"/opt/work/data/output\"\nENV ENV_OUTPUT_BIN=\"/opt/containerfiles/output-model.sh\"\nENV ENV_REDIS_MODEL_OUT_BIN=\"/opt/containerfiles/redis-model.sh\"\nENV ENV_REDIS_MODEL_DST_KEY=\"JUPYTER_REDIS_MODEL_DST_KEY\"\n#  Bin and Libs Dir\nENV ENV_BINS=\"/opt/work/bins\"\nENV ENV_LIBS=\"/opt/work/libs\"\n#  Configuration Dir:\nENV ENV_CONFIGS_DIR=\"/opt/work/configs\"\nENV ENV_CL_ENV_DIR=\"/opt/work/env\"\n#  Global Python Dirs:\nENV ENV_PYTHON_SRC_DIR=\"/opt/work/src\"\nENV ENV_PYTHON_COMMON_DIR=\"/opt/work/src/common\"\nENV ENV_PYTHON_REDIS_DIR=\"/opt/work/src/connectors/redis\"\nENV ENV_PYTHON_DB_DIR=\"/opt/work/src/connectors/database\"\nENV ENV_PYTHON_SCHEMA_DIR=\"/opt/work/src/databases/schema\"\nENV ENV_PYTHON_CORE_CONFIG=\"/opt/work/configs/jupyter.json\"\n#  Slack Debugging Env:\nENV ENV_SLACK_BOTNAME=\"bugbot\"\nENV ENV_SLACK_CHANNEL=\"debugging\"\nENV ENV_SLACK_NOTIFY_USER=\"jay\"\nENV ENV_SLACK_TOKEN=\"xoxb-51351043345-Lzwmto5IMVb8UK36MghZYMEi\"\nENV ENV_SLACK_ENVNAME=\"dev-jupyter\"\nENV ENV_SLACK_ENABLED=\"1\"\n#  Environment Deployment Type\nENV ENV_DEPLOYMENT_TYPE=\"Local\"\nENV ENV_IN_DOCKER=\"1\"\nENV ENV_DEBUG_LOADING=\"0\"\nUSER root\n#  Python packages for interfacing with resources outside of this container\nRUN conda install --quiet --yes 'coverage' 'seaborn' 'pcre' 'six' 'pika' 'python-daemon' 'feedparser' 'pytest' 'nose' 'lxml' 'Django' 'sphinx' 'sphinx-bootstrap-theme' 'requests' 'redis=3.2.0' 'hiredis' 'redis-py' 'boto' 'awscli' 'django-redis-cache' 'uwsgi' 'PyMySQL' 'psycopg2' 'pymongo' 'SQLAlchemy' 'pandas' 'numpy' 'tqdm' 'pandas-datareader' 'tensorflow' 'alembic' 'ipywidgets' 'widgetsnbextension' 'vega' 'pyqt=4.11'\n#  Add Volumes and Set permissions\nRUN mkdir -p -m 777 /opt \\\n && mkdir -p -m 777 /opt/containerfiles \\\n && chmod 777 /opt \\\n && chmod 777 /opt/containerfiles \\\n && touch /tmp/firsttimerunning\n# ## Finish the setup using root\nUSER $NB_USER\n#  Add custom Python 2 pips:\nCOPY ./python2/ /opt/python2\nRUN /opt/python2/install_pips.sh\nUSER root\nRUN conda install pyqt=4.11 -y\n#  Configure container startup as root\nEXPOSE 8888/tcp\n# ENTRYPOINT [\"tini\", \"--\"]\nCMD [\"/opt/containerfiles/start-container.sh\"]\n# ########################################################\n#\n#  Add Files into the container now that the setup is done\n#\n#  Add the starters and installers:\nADD ./containerfiles/ /opt/containerfiles/\nRUN chmod 777 /opt/containerfiles/*.sh \\\n && cp /opt/containerfiles/bashrc ~/.bashrc \\\n && cp /opt/containerfiles/vimrc ~/.vimrc \\\n && cp /opt/containerfiles/bashrc /home/$NB_USER/.bashrc \\\n && cp /opt/containerfiles/vimrc /home/$NB_USER/.vimrc \\\n && chown $NB_USER /home/$NB_USER/.bashrc \\\n && chown $NB_USER /home/$NB_USER/.vimrc \\\n && chmod 664 /home/$NB_USER/.bashrc \\\n && chmod 664 /home/$NB_USER/.vimrc\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /root/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /root/.bashrc \\\n && echo 'else' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /root/.bashrc \\\n && echo 'fi' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && echo 'source activate python2' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && mv /usr/bin/vi /usr/bin/bak.vi \\\n && cp /usr/bin/vim /usr/bin/vi\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'else' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'fi' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'source activate python2' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc\n#  Add local files as late as possible to avoid cache busting\nRUN cp /opt/containerfiles/start-notebook.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/start-singleuser.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/jupyter_notebook_config.py /home/$NB_USER/.jupyter/ \\\n && mkdir -p -m 777 /opt/python2 \\\n && chmod 777 /opt \\\n && chown -R $NB_USER:users /opt/python2 \\\n && mkdir -p -m 777 /opt/work/ \\\n && chmod 777 /opt \\\n && chmod 777 /opt/work \\\n && chown -R $NB_USER:users /opt/work \\\n && mkdir -p -m 777 /opt/work/examples \\\n && mkdir -p -m 777 /opt/work/src \\\n && mkdir -p -m 777 /opt/work/env \\\n && mkdir -p -m 777 /opt/work/bins \\\n && mkdir -p -m 777 /opt/work/libs \\\n && mkdir -p -m 777 /opt/work/configs \\\n && mkdir -p -m 777 /opt/work/pips \\\n && mkdir -p -m 777 /opt/work/data \\\n && chown -R $NB_USER:users /opt/work/examples \\\n && chown -R $NB_USER:users /opt/work/src \\\n && chown -R $NB_USER:users /opt/work/env \\\n && chown -R $NB_USER:users /opt/work/bins \\\n && chown -R $NB_USER:users /opt/work/libs \\\n && chown -R $NB_USER:users /opt/work/configs \\\n && chown -R $NB_USER:users /opt/work/pips \\\n && chown -R $NB_USER:users /opt/work/data\nWORKDIR /opt/work\nCOPY ./libs/ /opt/work/libs/\nCOPY ./configs/ /opt/work/configs/\nCOPY ./bins/ /opt/work/bins/\nCOPY ./src/ /opt/work/src/\nCOPY ./env/ /opt/work/env/\nCOPY ./examples /opt/work/examples/\n#  Assign all permissions over:\nRUN chown -R $NB_USER:users /opt/work/* \\\n && chmod 777 /opt/work/bins/*\n# ########################################################\n#\n#  Run as the user\n#\nUSER $NB_USER\n#  Track the Python 2 and Python 3 pips and Conda Environment\nRUN pip2 freeze > /opt/work/pips/python2-requirements.txt \\\n && pip3 freeze > /opt/work/pips/python3-requirements.txt\n","injectedSmells":[],"originalDockerfileHash":"7fa028669b177c0d025e2e84c5f10ec2","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM jupyter/scipy-notebook\nMAINTAINER Jay Johnson <jay.p.h.johnson@gmail.com>\nUSER root\n#   Install all OS dependencies for notebook server that starts but lacks all\n#   features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -y\nRUN apt-get install --no-install-recommends jed emacs build-essential python-dev python-setuptools unzip libsm6 pandoc texlive-latex-base texlive-latex-extra texlive-fonts-extra texlive-fonts-recommended texlive-generic-recommended libxrender1 julia libnettle4 git sqlite vim wget mlocate cron rsyslog logrotate gcc telnet tree curl tar net-tools mariadb-server libmysqlclient-dev fonts-dejavu gfortran libav-tools libcurl4-openssl-dev libssl-dev libxml2-dev libxslt1-dev libpcap-dev libsqlite3-dev libattr1-dev libffi-dev -yq \\\n && apt-get clean\nRUN apt-get install --no-install-recommends libatlas-base-dev libopenblas-dev libopencv-dev libprotobuf-dev liblapack-dev libleveldb-dev protobuf-compiler libsnappy-dev libboost-all-dev -yq \\\n && apt-get clean\nRUN apt-get install --no-install-recommends libgflags-dev libgoogle-glog-dev liblmdb-dev -yq \\\n && apt-get clean\nRUN apt-get remove -y librdkafka*\n#   Install the new Confluent Kafka toolchain for using their kafka client: https://github.com/confluentinc/confluent-kafka-python / http://blog.parsely.com/post/3886/pykafka-now\nRUN wget -qO - http://packages.confluent.io/deb/3.0/archive.key | sudo apt-key add -\nRUN echo \"deb [arch=amd64] http://packages.confluent.io/deb/3.0 stable main\" >> /etc/apt/sources.list\nRUN apt-get update -y \\\n && apt-get install confluent-platform-2.11 librdkafka-dev -y\nENV NB_USER=\"jovyan\"\nENV ENV_PORT=\"8888\"\nENV ENV_PROJ_DIR=\"/opt/work\"\nENV ENV_DATA_DIR=\"/opt/work/data\"\nENV ENV_DATA_SRC_DIR=\"/opt/work/data/src\"\nENV ENV_DATA_DST_DIR=\"/opt/work/data/dst\"\nENV ENV_REDIS_HOST=\"localhost\"\nENV ENV_REDIS_PORT=\"6000\"\nENV ENV_REDIS_SRC_KEY=\"JUPYTER_SRC_KEY\"\nENV ENV_REDIS_DST_KEY=\"JUPYTER_DST_KEY\"\n#   Coordinate events without changing the container\nENV ENV_SYNTHESIZE_DIR=\"/opt/work/data/synthesize\"\nENV ENV_SYNTHESIZE_BIN=\"/opt/containerfiles/synthesize.sh\"\nENV ENV_TIDY_DIR=\"/opt/work/data/tidy\"\nENV ENV_TIDY_BIN=\"/opt/containerfiles/tidy.sh\"\nENV ENV_ANALYZE_DIR=\"/opt/work/data/analyze\"\nENV ENV_ANALYZE_BIN=\"/opt/containerfiles/analyze.sh\"\nENV ENV_OUTPUT_DIR=\"/opt/work/data/output\"\nENV ENV_OUTPUT_BIN=\"/opt/containerfiles/output-model.sh\"\nENV ENV_REDIS_MODEL_OUT_BIN=\"/opt/containerfiles/redis-model.sh\"\nENV ENV_REDIS_MODEL_DST_KEY=\"JUPYTER_REDIS_MODEL_DST_KEY\"\n#   Bin and Libs Dir\nENV ENV_BINS=\"/opt/work/bins\"\nENV ENV_LIBS=\"/opt/work/libs\"\n#   Configuration Dir:\nENV ENV_CONFIGS_DIR=\"/opt/work/configs\"\nENV ENV_CL_ENV_DIR=\"/opt/work/env\"\n#   Global Python Dirs:\nENV ENV_PYTHON_SRC_DIR=\"/opt/work/src\"\nENV ENV_PYTHON_COMMON_DIR=\"/opt/work/src/common\"\nENV ENV_PYTHON_REDIS_DIR=\"/opt/work/src/connectors/redis\"\nENV ENV_PYTHON_DB_DIR=\"/opt/work/src/connectors/database\"\nENV ENV_PYTHON_SCHEMA_DIR=\"/opt/work/src/databases/schema\"\nENV ENV_PYTHON_CORE_CONFIG=\"/opt/work/configs/jupyter.json\"\n#   Slack Debugging Env:\nENV ENV_SLACK_BOTNAME=\"bugbot\"\nENV ENV_SLACK_CHANNEL=\"debugging\"\nENV ENV_SLACK_NOTIFY_USER=\"jay\"\nENV ENV_SLACK_TOKEN=\"xoxb-51351043345-Lzwmto5IMVb8UK36MghZYMEi\"\nENV ENV_SLACK_ENVNAME=\"dev-jupyter\"\nENV ENV_SLACK_ENABLED=\"1\"\n#   Environment Deployment Type\nENV ENV_DEPLOYMENT_TYPE=\"Local\"\nENV ENV_IN_DOCKER=\"1\"\nENV ENV_DEBUG_LOADING=\"0\"\nUSER root\n#   Python packages for interfacing with resources outside of this container\nRUN conda install --quiet --yes 'coverage' 'seaborn' 'pcre' 'six' 'pika' 'python-daemon' 'feedparser' 'pytest' 'nose' 'lxml' 'Django' 'sphinx' 'sphinx-bootstrap-theme' 'requests' 'redis=3.2.0' 'hiredis' 'redis-py' 'boto' 'awscli' 'django-redis-cache' 'uwsgi' 'PyMySQL' 'psycopg2' 'pymongo' 'SQLAlchemy' 'pandas' 'numpy' 'tqdm' 'pandas-datareader' 'tensorflow' 'alembic' 'ipywidgets' 'widgetsnbextension' 'vega' 'pyqt=4.11'\n#   Add Volumes and Set permissions\nRUN mkdir -p -m 777 /opt \\\n && mkdir -p -m 777 /opt/containerfiles \\\n && chmod 777 /opt \\\n && chmod 777 /opt/containerfiles \\\n && touch /tmp/firsttimerunning\n#  ## Finish the setup using root\nUSER $NB_USER\n#   Add custom Python 2 pips:\nCOPY ./python2/ /opt/python2\nRUN /opt/python2/install_pips.sh\nUSER root\nRUN conda install pyqt=4.11 -y\n#   Configure container startup as root\nEXPOSE 8888/tcp\n#  ENTRYPOINT [\"tini\", \"--\"]\nCMD [\"/opt/containerfiles/start-container.sh\"]\n#  ########################################################\n#\n#   Add Files into the container now that the setup is done\n#\n#   Add the starters and installers:\nADD ./containerfiles/ /opt/containerfiles/\nRUN chmod 777 /opt/containerfiles/*.sh \\\n && cp /opt/containerfiles/bashrc ~/.bashrc \\\n && cp /opt/containerfiles/vimrc ~/.vimrc \\\n && cp /opt/containerfiles/bashrc /home/$NB_USER/.bashrc \\\n && cp /opt/containerfiles/vimrc /home/$NB_USER/.vimrc \\\n && chown $NB_USER /home/$NB_USER/.bashrc \\\n && chown $NB_USER /home/$NB_USER/.vimrc \\\n && chmod 664 /home/$NB_USER/.bashrc \\\n && chmod 664 /home/$NB_USER/.vimrc\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /root/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /root/.bashrc \\\n && echo 'else' >> /root/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /root/.bashrc \\\n && echo 'fi' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && echo 'source activate python2' >> /root/.bashrc \\\n && echo '' >> /root/.bashrc \\\n && mv /usr/bin/vi /usr/bin/bak.vi \\\n && cp /usr/bin/vim /usr/bin/vi\nRUN echo 'export PATH=$PATH:/opt/conda/envs/python2/bin:/opt/conda/bin:/opt/work/bins' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'if [[ \"${PYTHONPATH}\" == \"\" ]]; then' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'else' >> /home/$NB_USER/.bashrc \\\n && echo ' export PYTHONPATH=$PYTHONPATH:/opt/work' >> /home/$NB_USER/.bashrc \\\n && echo 'fi' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc \\\n && echo 'source activate python2' >> /home/$NB_USER/.bashrc \\\n && echo '' >> /home/$NB_USER/.bashrc\n#   Add local files as late as possible to avoid cache busting\nRUN cp /opt/containerfiles/start-notebook.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/start-singleuser.sh /usr/local/bin/ \\\n && cp /opt/containerfiles/jupyter_notebook_config.py /home/$NB_USER/.jupyter/ \\\n && mkdir -p -m 777 /opt/python2 \\\n && chmod 777 /opt \\\n && chown -R $NB_USER:users /opt/python2 \\\n && mkdir -p -m 777 /opt/work/ \\\n && chmod 777 /opt \\\n && chmod 777 /opt/work \\\n && chown -R $NB_USER:users /opt/work \\\n && mkdir -p -m 777 /opt/work/examples \\\n && mkdir -p -m 777 /opt/work/src \\\n && mkdir -p -m 777 /opt/work/env \\\n && mkdir -p -m 777 /opt/work/bins \\\n && mkdir -p -m 777 /opt/work/libs \\\n && mkdir -p -m 777 /opt/work/configs \\\n && mkdir -p -m 777 /opt/work/pips \\\n && mkdir -p -m 777 /opt/work/data \\\n && chown -R $NB_USER:users /opt/work/examples \\\n && chown -R $NB_USER:users /opt/work/src \\\n && chown -R $NB_USER:users /opt/work/env \\\n && chown -R $NB_USER:users /opt/work/bins \\\n && chown -R $NB_USER:users /opt/work/libs \\\n && chown -R $NB_USER:users /opt/work/configs \\\n && chown -R $NB_USER:users /opt/work/pips \\\n && chown -R $NB_USER:users /opt/work/data\nWORKDIR /opt/work\nCOPY ./libs/ /opt/work/libs/\nCOPY ./configs/ /opt/work/configs/\nCOPY ./bins/ /opt/work/bins/\nCOPY ./src/ /opt/work/src/\nCOPY ./env/ /opt/work/env/\nCOPY ./examples /opt/work/examples/\n#   Assign all permissions over:\nRUN chown -R $NB_USER:users /opt/work/* \\\n && chmod 777 /opt/work/bins/*\n#  ########################################################\n#\n#   Run as the user\n#\nUSER $NB_USER\n#   Track the Python 2 and Python 3 pips and Conda Environment\nRUN pip2 freeze > /opt/work/pips/python2-requirements.txt \\\n && pip3 freeze > /opt/work/pips/python3-requirements.txt\n","originalDockerfileUglifiedHash":"719a761ac6b30526357d566616a604f4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/108ce6d1ecd34eddbb55263cdde6d2e12ddd11f0.dockerfile"}