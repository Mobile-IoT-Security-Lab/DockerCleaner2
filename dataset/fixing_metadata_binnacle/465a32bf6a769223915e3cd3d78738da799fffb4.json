{"seed":1740514542,"processedDockerfileHash":"c2aa69cc6024a41643c76b12c4623e5a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"mvines@silklabs.com\"\nRUN addgroup --gid 999 docker \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends apt-transport-https curl python-software-properties software-properties-common -y \\\n && add-apt-repository -y ppa:amarburg/opencv3 \\\n && add-apt-repository -y ppa:deadsnakes/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && add-apt-repository -y ppa:kubuntu-ppa/backports \\\n && add-apt-repository -y ppa:mc3man/trusty-media \\\n && add-apt-repository -y ppa:phablet-team/tools \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/ppa \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && add-apt-repository \"deb https://cli-assets.heroku.com/branches/stable/apt ./\" \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable\" \\\n && curl -L https://cli-assets.heroku.com/apt/release.key | apt-key add - \\\n && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 \\\n && echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" > /etc/apt/sources.list.d/mongodb-org-3.2.list \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198 \\\n && echo \"deb https://apt.buildkite.com/buildkite-agent stable main\" > /etc/apt/sources.list.d/buildkite-agent.list \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" > /etc/apt/sources.list.d/azure-cli.list \\\n && apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893 \\\n && apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-file autoconf azure-cli bc build-essential buildkite-agent bsdmainutils cabal-install ccache chrpath cmake diffstat docker-ce dos2unix fonts-freefont-ttf g++ g++-4.8 g++-4.8-multilib g++-5 gawk gettext gfortran git gnuplot heroku jq lib32stdc++6 lib32z1 libatlas-base-dev libboost-all-dev libc6-dev libc6-dev-i386 libfreetype6-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libpng12-dev libprotobuf-dev libsnappy-dev libtool libusb-1.0-0-dev libxml2-utils linux-libc-dev m4 mkisofs mongodb-org mongodb-org-mongos mongodb-org-server mongodb-org-shell mongodb-org-tools openjdk-7-jre openjdk-7-jdk openssh-server pkg-config protobuf-compiler psmisc python-dev python-pip python-virtualenv python3.5 rsync silversearcher-ag texinfo unzip vim x11-utils xbase-clients vnc4server wget xmlstarlet zip ffmpeg \\\n && wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/edge/amd64/docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && sudo dpkg -i docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -f docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -rf /var/lib/apt/lists/*\n#   JDK 1.8\nRUN wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk_8u45-b14-1_amd64.deb \\\n && sudo apt-get update -qq \\\n && sudo dpkg -i *.deb \\\n && rm *.deb\n#   Build/install Shellcheck (bash linter)\nRUN cabal update \\\n && git clone https://github.com/koalaman/shellcheck.git \\\n && git -C shellcheck checkout 6c068e7d29a835139517fa7345d9d450ef57b170 \\\n && cd shellcheck \\\n && cabal install \\\n && sudo cp ~/.cabal/bin/shellcheck /usr/bin \\\n && cd .. \\\n && rm -rf shellcheck\n#   Build/install opencv3\nRUN wget https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip -O opencv_contrib3.zip \\\n && unzip -q opencv_contrib3.zip \\\n && mv opencv_contrib-3.0.0 opencv_contrib \\\n && git clone --branch '3.1.0' https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=false -DWITH_TIFF=false -DWITH_CUDA=false -DBUILD_ANDROID_EXAMPLES=false -DWITH_OPENEXR=false -DBUILD_PERF_TESTS=false -DBUILD_opencv_java=false -DWITH_IPP=OFF -DCMAKE_INSTALL_PREFIX=/usr/ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -DBUILD_opencv_optflow=OFF -DBUILD_opencv_ximgproc=OFF -DBUILD_opencv_xfeatures2d=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd ../.. \\\n && rm -rf opencv\n#   Install node v6.10.3\nRUN wget -q https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.gz \\\n && tar -x -C /usr/local --strip-components 1 -f node-v6.10.3-linux-x64.tar.gz \\\n && rm node-v6.10.3-linux-x64.tar.gz\n#   Useful npm packages\nRUN npm install mvines/relay -g\n#   Install ninja\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip \\\n && unzip ninja-linux.zip \\\n && rm ninja-linux.zip \\\n && mv ninja /usr/bin \\\n && chmod +x /usr/bin/ninja \\\n && pip install ninja-syntax==1.7.2\n#   Install python packages\nRUN pip install pip==23.1 --upgrade \\\n && pip install matplotlib==3.7.1 numpy==1.24.2 scipy==1.10.1\n#   Platform tools\nRUN wget -q https://dl-ssl.google.com/android/repository/platform-tools_r23-linux.zip \\\n && unzip platform-tools_r23-linux.zip platform-tools/adb platform-tools/fastboot \\\n && cp platform-tools/* /usr/bin/ \\\n && rm -rf platform-tools*\nENV JAVA_HOME=\"/usr\"\nRUN echo 'PATH=$PATH:HOME/bin:$JAVA_HOME/bin' >> /etc/profile \\\n && echo 'export JAVA_HOME' >> /etc/profile \\\n && echo 'export PATH' >> /etc/profile \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10 \\\n && addgroup silk --gid 1000 \\\n && addgroup adbuser --gid 1002 \\\n && adduser --uid 1000 --ingroup silk --gecos \"\" --disabled-password silk \\\n && adduser silk audio \\\n && adduser silk adbuser \\\n && echo 'silk ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/silk \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"1004\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && sed 's#session\\s*required\\s*pam_loginuid.so#session optional pam_loginuid.so#g' -i /etc/pam.d/sshd \\\n && udevadm trigger \\\n && rm -rf /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key \\\n && ssh-keygen -q -N \"\" -t dsa -f /etc/ssh/ssh_host_dsa_key \\\n && ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key\nRUN mkdir -p /opt/conda \\\n && chown silk:users /opt/conda \\\n && chmod g+w /opt/conda\nUSER silk\n#   Install minicoda and Python 3.6\nRUN cd ~ \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -f -p /opt/conda \\\n && rm ~/miniconda.sh\n#   Install TensorFlow GPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_gpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_gpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_gpu \"\n#   Install TensorFlow CPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_cpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_cpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_cpu \"\nRUN sudo chown -R silk:users /opt/conda \\\n && sudo chmod -R g+w /opt/conda\nRUN ccache -M 10GB \\\n && git config --global user.email \"silkysmooth@example.com\" \\\n && git config --global user.name \"Silky Smooth\" \\\n && git config --global color.ui true \\\n && ssh-keygen -q -N \"\" -t rsa -f /home/silk/.ssh/id_rsa \\\n && ssh-keyscan -H localhost >> ~/.ssh/known_hosts \\\n && ssh-keyscan -H github.com >> ~/.ssh/known_hosts \\\n && cp /home/silk/.ssh/id_rsa.pub /home/silk/.ssh/authorized_keys\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"mvines@silklabs.com\"\nRUN addgroup --gid 999 docker \\\n && apt-get update -qq \\\n && apt-get install apt-transport-https curl python-software-properties software-properties-common -y \\\n && add-apt-repository -y ppa:amarburg/opencv3 \\\n && add-apt-repository -y ppa:deadsnakes/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && add-apt-repository -y ppa:kubuntu-ppa/backports \\\n && add-apt-repository -y ppa:mc3man/trusty-media \\\n && add-apt-repository -y ppa:phablet-team/tools \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/ppa \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && add-apt-repository \"deb https://cli-assets.heroku.com/branches/stable/apt ./\" \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable\" \\\n && curl -L https://cli-assets.heroku.com/apt/release.key | apt-key add - \\\n && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 \\\n && echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" > /etc/apt/sources.list.d/mongodb-org-3.2.list \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198 \\\n && echo \"deb https://apt.buildkite.com/buildkite-agent stable main\" > /etc/apt/sources.list.d/buildkite-agent.list \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" > /etc/apt/sources.list.d/azure-cli.list \\\n && apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893 \\\n && apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-file autoconf azure-cli bc build-essential buildkite-agent bsdmainutils cabal-install ccache chrpath cmake diffstat docker-ce dos2unix fonts-freefont-ttf g++ g++-4.8 g++-4.8-multilib g++-5 gawk gettext gfortran git gnuplot heroku jq lib32stdc++6 lib32z1 libatlas-base-dev libboost-all-dev libc6-dev libc6-dev-i386 libfreetype6-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libpng12-dev libprotobuf-dev libsnappy-dev libtool libusb-1.0-0-dev libxml2-utils linux-libc-dev m4 mkisofs mongodb-org mongodb-org-mongos mongodb-org-server mongodb-org-shell mongodb-org-tools openjdk-7-jre openjdk-7-jdk openssh-server pkg-config protobuf-compiler psmisc python-dev python-pip python-virtualenv python3.5 rsync silversearcher-ag texinfo unzip vim x11-utils xbase-clients vnc4server wget xmlstarlet zip ffmpeg \\\n && wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/edge/amd64/docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && sudo dpkg -i docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -f docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -rf /var/lib/apt/lists/*\n#  JDK 1.8\nRUN wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk_8u45-b14-1_amd64.deb \\\n && sudo apt-get update -qq \\\n && sudo dpkg -i *.deb \\\n && rm *.deb\n#  Build/install Shellcheck (bash linter)\nRUN cabal update \\\n && git clone https://github.com/koalaman/shellcheck.git \\\n && git -C shellcheck checkout 6c068e7d29a835139517fa7345d9d450ef57b170 \\\n && cd shellcheck \\\n && cabal install \\\n && sudo cp ~/.cabal/bin/shellcheck /usr/bin \\\n && cd .. \\\n && rm -rf shellcheck\n#  Build/install opencv3\nRUN wget https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip -O opencv_contrib3.zip \\\n && unzip -q opencv_contrib3.zip \\\n && mv opencv_contrib-3.0.0 opencv_contrib \\\n && git clone --branch '3.1.0' https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=false -DWITH_TIFF=false -DWITH_CUDA=false -DBUILD_ANDROID_EXAMPLES=false -DWITH_OPENEXR=false -DBUILD_PERF_TESTS=false -DBUILD_opencv_java=false -DWITH_IPP=OFF -DCMAKE_INSTALL_PREFIX=/usr/ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -DBUILD_opencv_optflow=OFF -DBUILD_opencv_ximgproc=OFF -DBUILD_opencv_xfeatures2d=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd ../.. \\\n && rm -rf opencv\n#  Install node v6.10.3\nRUN wget -q https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.gz \\\n && tar -x -C /usr/local --strip-components 1 -f node-v6.10.3-linux-x64.tar.gz \\\n && rm node-v6.10.3-linux-x64.tar.gz\n#  Useful npm packages\nRUN npm install mvines/relay -g\n#  Install ninja\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip \\\n && unzip ninja-linux.zip \\\n && rm ninja-linux.zip \\\n && mv ninja /usr/bin \\\n && chmod +x /usr/bin/ninja \\\n && pip install ninja-syntax\n#  Install python packages\nRUN pip install pip --upgrade \\\n && pip install matplotlib numpy scipy\n#  Platform tools\nRUN wget -q https://dl-ssl.google.com/android/repository/platform-tools_r23-linux.zip \\\n && unzip platform-tools_r23-linux.zip platform-tools/adb platform-tools/fastboot \\\n && cp platform-tools/* /usr/bin/ \\\n && rm -rf platform-tools*\nENV JAVA_HOME=\"/usr\"\nRUN echo 'PATH=$PATH:HOME/bin:$JAVA_HOME/bin' >> /etc/profile \\\n && echo 'export JAVA_HOME' >> /etc/profile \\\n && echo 'export PATH' >> /etc/profile \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10 \\\n && addgroup silk --gid 1000 \\\n && addgroup adbuser --gid 1002 \\\n && adduser --uid 1000 --ingroup silk --gecos \"\" --disabled-password silk \\\n && adduser silk audio \\\n && adduser silk adbuser \\\n && echo 'silk ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/silk \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"1004\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && sed 's#session\\s*required\\s*pam_loginuid.so#session optional pam_loginuid.so#g' -i /etc/pam.d/sshd \\\n && udevadm trigger \\\n && rm -rf /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key \\\n && ssh-keygen -q -N \"\" -t dsa -f /etc/ssh/ssh_host_dsa_key \\\n && ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key\nRUN mkdir -p /opt/conda \\\n && chown silk:users /opt/conda \\\n && chmod g+w /opt/conda\nUSER silk\n#  Install minicoda and Python 3.6\nRUN cd ~ \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -f -p /opt/conda \\\n && rm ~/miniconda.sh\n#  Install TensorFlow GPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_gpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_gpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_gpu \"\n#  Install TensorFlow CPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_cpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_cpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_cpu \"\nRUN sudo chown -R silk:users /opt/conda \\\n && sudo chmod -R g+w /opt/conda\nRUN ccache -M 10GB \\\n && git config --global user.email \"silkysmooth@example.com\" \\\n && git config --global user.name \"Silky Smooth\" \\\n && git config --global color.ui true \\\n && ssh-keygen -q -N \"\" -t rsa -f /home/silk/.ssh/id_rsa \\\n && ssh-keyscan -H localhost >> ~/.ssh/known_hosts \\\n && ssh-keyscan -H github.com >> ~/.ssh/known_hosts \\\n && cp /home/silk/.ssh/id_rsa.pub /home/silk/.ssh/authorized_keys\n","injectedSmells":[],"originalDockerfileHash":"e4db4b5cf797e8097243e50d67be24ee","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nLABEL maintainer=\"mvines@silklabs.com\"\nRUN addgroup --gid 999 docker \\\n && apt-get update -qq \\\n && apt-get install apt-transport-https curl python-software-properties software-properties-common -y \\\n && add-apt-repository -y ppa:amarburg/opencv3 \\\n && add-apt-repository -y ppa:deadsnakes/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x \\\n && add-apt-repository -y ppa:git-core/ppa \\\n && add-apt-repository -y ppa:kubuntu-ppa/backports \\\n && add-apt-repository -y ppa:mc3man/trusty-media \\\n && add-apt-repository -y ppa:phablet-team/tools \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/ppa \\\n && add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && add-apt-repository \"deb https://cli-assets.heroku.com/branches/stable/apt ./\" \\\n && add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable\" \\\n && curl -L https://cli-assets.heroku.com/apt/release.key | apt-key add - \\\n && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 \\\n && echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse\" > /etc/apt/sources.list.d/mongodb-org-3.2.list \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 32A37959C2FA5C3C99EFBC32A79206696452D198 \\\n && echo \"deb https://apt.buildkite.com/buildkite-agent stable main\" > /etc/apt/sources.list.d/buildkite-agent.list \\\n && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" > /etc/apt/sources.list.d/azure-cli.list \\\n && apt-key adv --keyserver packages.microsoft.com --recv-keys 417A0893 \\\n && apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-file autoconf azure-cli bc build-essential buildkite-agent bsdmainutils cabal-install ccache chrpath cmake diffstat docker-ce dos2unix fonts-freefont-ttf g++ g++-4.8 g++-4.8-multilib g++-5 gawk gettext gfortran git gnuplot heroku jq lib32stdc++6 lib32z1 libatlas-base-dev libboost-all-dev libc6-dev libc6-dev-i386 libfreetype6-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libpng12-dev libprotobuf-dev libsnappy-dev libtool libusb-1.0-0-dev libxml2-utils linux-libc-dev m4 mkisofs mongodb-org mongodb-org-mongos mongodb-org-server mongodb-org-shell mongodb-org-tools openjdk-7-jre openjdk-7-jdk openssh-server pkg-config protobuf-compiler psmisc python-dev python-pip python-virtualenv python3.5 rsync silversearcher-ag texinfo unzip vim x11-utils xbase-clients vnc4server wget xmlstarlet zip ffmpeg \\\n && wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/edge/amd64/docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && sudo dpkg -i docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -f docker-ce_17.05.0~ce-0~ubuntu-trusty_amd64.deb \\\n && rm -rf /var/lib/apt/lists/*\n#   JDK 1.8\nRUN wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre-headless_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jre_8u45-b14-1_amd64.deb \\\n && wget http://archive.ubuntu.com/ubuntu/pool/universe/o/openjdk-8/openjdk-8-jdk_8u45-b14-1_amd64.deb \\\n && sudo apt-get update -qq \\\n && sudo dpkg -i *.deb \\\n && rm *.deb\n#   Build/install Shellcheck (bash linter)\nRUN cabal update \\\n && git clone https://github.com/koalaman/shellcheck.git \\\n && git -C shellcheck checkout 6c068e7d29a835139517fa7345d9d450ef57b170 \\\n && cd shellcheck \\\n && cabal install \\\n && sudo cp ~/.cabal/bin/shellcheck /usr/bin \\\n && cd .. \\\n && rm -rf shellcheck\n#   Build/install opencv3\nRUN wget https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip -O opencv_contrib3.zip \\\n && unzip -q opencv_contrib3.zip \\\n && mv opencv_contrib-3.0.0 opencv_contrib \\\n && git clone --branch '3.1.0' https://github.com/opencv/opencv.git \\\n && cd opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTS=false -DWITH_TIFF=false -DWITH_CUDA=false -DBUILD_ANDROID_EXAMPLES=false -DWITH_OPENEXR=false -DBUILD_PERF_TESTS=false -DBUILD_opencv_java=false -DWITH_IPP=OFF -DCMAKE_INSTALL_PREFIX=/usr/ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -DBUILD_opencv_optflow=OFF -DBUILD_opencv_ximgproc=OFF -DBUILD_opencv_xfeatures2d=OFF .. \\\n && make -j$( nproc ;) install \\\n && cd ../.. \\\n && rm -rf opencv\n#   Install node v6.10.3\nRUN wget -q https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.gz \\\n && tar -x -C /usr/local --strip-components 1 -f node-v6.10.3-linux-x64.tar.gz \\\n && rm node-v6.10.3-linux-x64.tar.gz\n#   Useful npm packages\nRUN npm install mvines/relay -g\n#   Install ninja\nRUN wget -q https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip \\\n && unzip ninja-linux.zip \\\n && rm ninja-linux.zip \\\n && mv ninja /usr/bin \\\n && chmod +x /usr/bin/ninja \\\n && pip install ninja-syntax\n#   Install python packages\nRUN pip install pip --upgrade \\\n && pip install matplotlib numpy scipy\n#   Platform tools\nRUN wget -q https://dl-ssl.google.com/android/repository/platform-tools_r23-linux.zip \\\n && unzip platform-tools_r23-linux.zip platform-tools/adb platform-tools/fastboot \\\n && cp platform-tools/* /usr/bin/ \\\n && rm -rf platform-tools*\nENV JAVA_HOME=\"/usr\"\nRUN echo 'PATH=$PATH:HOME/bin:$JAVA_HOME/bin' >> /etc/profile \\\n && echo 'export JAVA_HOME' >> /etc/profile \\\n && echo 'export PATH' >> /etc/profile \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10 \\\n && addgroup silk --gid 1000 \\\n && addgroup adbuser --gid 1002 \\\n && adduser --uid 1000 --ingroup silk --gecos \"\" --disabled-password silk \\\n && adduser silk audio \\\n && adduser silk adbuser \\\n && echo 'silk ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/silk \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"1004\", MODE=\"0666\", GROUP=\"adbuser\"' >> /etc/udev/rules.d/51-android.rules \\\n && sed 's#session\\s*required\\s*pam_loginuid.so#session optional pam_loginuid.so#g' -i /etc/pam.d/sshd \\\n && udevadm trigger \\\n && rm -rf /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_rsa_key \\\n && ssh-keygen -q -N \"\" -t dsa -f /etc/ssh/ssh_host_dsa_key \\\n && ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key\nRUN mkdir -p /opt/conda \\\n && chown silk:users /opt/conda \\\n && chmod g+w /opt/conda\nUSER silk\n#   Install minicoda and Python 3.6\nRUN cd ~ \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -f -p /opt/conda \\\n && rm ~/miniconda.sh\n#   Install TensorFlow GPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_gpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_gpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_gpu \"\n#   Install TensorFlow CPU version in its own env\nRUN cd ~ \\\n && /opt/conda/bin/conda create -v --name tensorflow_cpu python=3.6 \\\n && /bin/bash -c \" source /opt/conda/bin/activate tensorflow_cpu; pip install pylint==1.7.1; pip install pytz; pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.0-cp36-cp36m-linux_x86_64.whl; source deactivate tensorflow_cpu \"\nRUN sudo chown -R silk:users /opt/conda \\\n && sudo chmod -R g+w /opt/conda\nRUN ccache -M 10GB \\\n && git config --global user.email \"silkysmooth@example.com\" \\\n && git config --global user.name \"Silky Smooth\" \\\n && git config --global color.ui true \\\n && ssh-keygen -q -N \"\" -t rsa -f /home/silk/.ssh/id_rsa \\\n && ssh-keyscan -H localhost >> ~/.ssh/known_hosts \\\n && ssh-keyscan -H github.com >> ~/.ssh/known_hosts \\\n && cp /home/silk/.ssh/id_rsa.pub /home/silk/.ssh/authorized_keys\n","originalDockerfileUglifiedHash":"e5002d78f8e432cc181a830483906225","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/465a32bf6a769223915e3cd3d78738da799fffb4.dockerfile"}