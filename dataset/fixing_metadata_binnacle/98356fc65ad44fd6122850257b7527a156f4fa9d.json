{"seed":2413006417,"processedDockerfileHash":"de97b1d7ccd9d451c17ae2bbda409431","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   基础镜像从 laradock 仓库中获取\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/php-fpm:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && apt-get install --no-install-recommends apt-utils -y \\\n && pecl channel-update pecl.php.net\n#\n#  --------------------------------------------------------------------------\n#   PHP 扩展，在 docker-comopose.yml 中设置 INSTALL_XXX = true 再 build 即可安装\n#  --------------------------------------------------------------------------\n#\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install --no-install-recommends libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install --no-install-recommends php${PHP_VERSION}-phpdbg -y --force-yes ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install --no-install-recommends librabbitmq-dev -y \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp ; fi\n#  ##########################################################################\n#   ZipArchive:\n#  ##########################################################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then apt-get install --no-install-recommends libzip-dev -y \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip ; fi\n#  ##########################################################################\n#   pcntl\n#  ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n#  ##########################################################################\n#   bcmath:\n#  ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ##########################################################################\n#   GMP (GNU Multiple Precision):\n#  ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install --no-install-recommends libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n#  ##########################################################################\n#   PHP Memcached:\n#  ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ##########################################################################\n#   Exif:\n#  ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ##########################################################################\n#   PHP Aerospike:\n#  ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nARG AEROSPIKE_PHP_REPOSITORY\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install --no-install-recommends sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz ${AEROSPIKE_PHP_REPOSITORY} ; fi \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Mysqli Modifications:\n#  ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ##########################################################################\n#   Tokenizer Modifications:\n#  ##########################################################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install --no-install-recommends zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install --no-install-recommends poppler-utils ghostscript -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install --no-install-recommends libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install --no-install-recommends jpegoptim optipng pngquant gifsicle -y ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install --no-install-recommends libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install --no-install-recommends libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  基础镜像从 laradock 仓库中获取\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/php-fpm:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#  Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && apt-get install apt-utils -y \\\n && pecl channel-update pecl.php.net\n#\n# --------------------------------------------------------------------------\n#  PHP 扩展，在 docker-comopose.yml 中设置 INSTALL_XXX = true 再 build 即可安装\n# --------------------------------------------------------------------------\n#\n# ##########################################################################\n#  SOAP:\n# ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n# ##########################################################################\n#  xDebug:\n# ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#  Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n# ##########################################################################\n#  Phpdbg:\n# ##########################################################################\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${PHP_VERSION}-phpdbg -y --force-yes ; fi\n# ##########################################################################\n#  Blackfire:\n# ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n# ##########################################################################\n#  PHP REDIS EXTENSION\n# ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole ; fi\n# ##########################################################################\n#  MongoDB:\n# ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n# ##########################################################################\n#  AMQP:\n# ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp ; fi\n# ##########################################################################\n#  ZipArchive:\n# ##########################################################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then apt-get install libzip-dev -y \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip ; fi\n# ##########################################################################\n#  pcntl\n# ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n# ##########################################################################\n#  bcmath:\n# ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n# ##########################################################################\n#  GMP (GNU Multiple Precision):\n# ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n# ##########################################################################\n#  PHP Memcached:\n# ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n# ##########################################################################\n#  Exif:\n# ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n# ##########################################################################\n#  PHP Aerospike:\n# ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nARG AEROSPIKE_PHP_REPOSITORY\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz ${AEROSPIKE_PHP_REPOSITORY} ; fi \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n# ##########################################################################\n#  Opcache:\n# ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#  Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n# ##########################################################################\n#  Mysqli Modifications:\n# ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n# ##########################################################################\n#  Tokenizer Modifications:\n# ##########################################################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n# ##########################################################################\n#  Human Language and Character Encoding Support:\n# ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n# ##########################################################################\n#  GHOSTSCRIPT:\n# ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n# ##########################################################################\n#  LDAP:\n# ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n# ##########################################################################\n#  Image optimizers:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n# ##########################################################################\n#  ImageMagick:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n# ##########################################################################\n#  IMAP:\n# ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n# ##########################################################################\n#  Check PHP version:\n# ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","injectedSmells":[],"originalDockerfileHash":"3fb2926675e95e29867c0a0f8fd38e51","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   基础镜像从 laradock 仓库中获取\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/php-fpm:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && apt-get install apt-utils -y \\\n && pecl channel-update pecl.php.net\n#\n#  --------------------------------------------------------------------------\n#   PHP 扩展，在 docker-comopose.yml 中设置 INSTALL_XXX = true 再 build 即可安装\n#  --------------------------------------------------------------------------\n#\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${PHP_VERSION}-phpdbg -y --force-yes ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp ; fi\n#  ##########################################################################\n#   ZipArchive:\n#  ##########################################################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then apt-get install libzip-dev -y \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip ; fi\n#  ##########################################################################\n#   pcntl\n#  ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n#  ##########################################################################\n#   bcmath:\n#  ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ##########################################################################\n#   GMP (GNU Multiple Precision):\n#  ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n#  ##########################################################################\n#   PHP Memcached:\n#  ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ##########################################################################\n#   Exif:\n#  ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ##########################################################################\n#   PHP Aerospike:\n#  ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nARG AEROSPIKE_PHP_REPOSITORY\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz ${AEROSPIKE_PHP_REPOSITORY} ; fi \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Mysqli Modifications:\n#  ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ##########################################################################\n#   Tokenizer Modifications:\n#  ##########################################################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","originalDockerfileUglifiedHash":"c1c280429ad85fe94f8168705b18a474","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/98356fc65ad44fd6122850257b7527a156f4fa9d.dockerfile"}