{"seed":3551911327,"processedDockerfileHash":"ad7bda76aba760ef940e3a1b7f69368f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM gzevd/alpine:3.4\n#   persistent / runtime deps\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\nRUN set -xe ; apk add ca-certificates curl apache2 apache2-utils xz openssh-client mysql-client --no-cache --virtual .persistent-deps\nRUN set -xe ; mkdir -p /run/apache2/ \\\n && sed -i 's/^#ServerName.*/ServerName localhost/' /etc/apache2/httpd.conf \\\n && sed -i 's/^#LoadModule rewrite_module/LoadModule rewrite_module/' /etc/apache2/httpd.conf \\\n && sed -i 's/^Listen 80/Listen 0.0.0.0:80/' /etc/apache2/httpd.conf \\\n && ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"33CFC8B3 9C0D5763\"\nENV PHP_VERSION=\"7.0.33\"\nENV PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ab8c5be6e32b1f8d032909dedaaaa4bbb1a209e519abb01a52ce3914f9a13d96\"\nCOPY 33CFC8B3.asc /tmp/\nCOPY 9C0D5763.asc /tmp/\nRUN set -xe ; apk add gnupg openssl --no-cache --virtual .fetch-deps ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --import \"/tmp/$key.asc\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apk del .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add curl-dev libedit-dev libxml2-dev openssl-dev apache2-dev freetype-dev libjpeg-turbo-dev libpng-dev libmcrypt-dev $PHPIZE_DEPS --no-cache --virtual .build-deps \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --sysconfdir=\"$PHP_INI_DIR\" --with-layout=GNU --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --with-apxs2=/usr/bin/apxs --disable-rpath --disable-debug --disable-static --disable-embed --disable-cgi --without-db1 --without-db2 --without-db3 --without-db4 --without-qdbm --without-pdo_sqlite --without-sqlite3 --enable-ftp --enable-mbstring --enable-mysqlnd --enable-pdo --enable-zip --enable-opcache --with-curl --with-libedit --with-openssl --with-zlib --with-gd --with-mcrypt --enable-gd-native-ttf --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ --with-pdo-mysql=mysqlnd $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && cp php.ini-production $PHP_INI_DIR/php.ini \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache --virtual .php-rundeps \\\n && apk del .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && sed -i 's,lib/apache2/libphp7.so,modules/libphp7.so,' /etc/apache2/httpd.conf\nENV MEMCACHED_DEPS=\"zlib-dev libmemcached-dev cyrus-sasl-dev\"\nRUN set -xe ; apk add libmemcached-libs zlib --no-cache --update\nRUN set -xe ; apk add $PHPIZE_DEPS --no-cache --update --virtual .phpize-deps \\\n && apk add $MEMCACHED_DEPS --no-cache --update --virtual .memcached-deps \\\n && pecl install memcached \\\n && echo \"extension=memcached.so\" > $PHP_INI_DIR/conf.d/20_memcached.ini \\\n && rm -rf /usr/share/php7 \\\n && rm -rf /tmp/* \\\n && apk del .memcached-deps .phpize-deps\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN docker-php-ext-enable opcache\nCOPY override_php.ini $PHP_INI_DIR/conf.d/\nCOPY apache2-foreground /usr/local/bin/\nCOPY php-module.conf /etc/apache2/conf.d/\nWORKDIR /var/www/localhost/htdocs\nEXPOSE 80/tcp\nENTRYPOINT [\"docker-php-entrypoint\"]\nCMD [\"apache2-foreground\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM gzevd/alpine:3.4\n#  persistent / runtime deps\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\nRUN set -xe ; apk add --no-cache --virtual .persistent-deps ca-certificates curl apache2 apache2-utils xz openssh-client mysql-client\nRUN set -xe ; mkdir -p /run/apache2/ \\\n && sed -i 's/^#ServerName.*/ServerName localhost/' /etc/apache2/httpd.conf \\\n && sed -i 's/^#LoadModule rewrite_module/LoadModule rewrite_module/' /etc/apache2/httpd.conf \\\n && sed -i 's/^Listen 80/Listen 0.0.0.0:80/' /etc/apache2/httpd.conf \\\n && ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n#  Apply stack smash protection to functions using local buffers and alloca()\n#  Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#  Enable optimization (-O2)\n#  Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#  Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#  https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"33CFC8B3 9C0D5763\"\nENV PHP_VERSION=\"7.0.33\"\nENV PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ab8c5be6e32b1f8d032909dedaaaa4bbb1a209e519abb01a52ce3914f9a13d96\"\nCOPY 33CFC8B3.asc /tmp/\nCOPY 9C0D5763.asc /tmp/\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg openssl ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --import \"/tmp/$key.asc\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apk del .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS curl-dev libedit-dev libxml2-dev openssl-dev apache2-dev freetype-dev libjpeg-turbo-dev libpng-dev libmcrypt-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --sysconfdir=\"$PHP_INI_DIR\" --with-layout=GNU --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --with-apxs2=/usr/bin/apxs --disable-rpath --disable-debug --disable-static --disable-embed --disable-cgi --without-db1 --without-db2 --without-db3 --without-db4 --without-qdbm --without-pdo_sqlite --without-sqlite3 --enable-ftp --enable-mbstring --enable-mysqlnd --enable-pdo --enable-zip --enable-opcache --with-curl --with-libedit --with-openssl --with-zlib --with-gd --with-mcrypt --enable-gd-native-ttf --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ --with-pdo-mysql=mysqlnd $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && cp php.ini-production $PHP_INI_DIR/php.ini \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .php-rundeps $runDeps \\\n && apk del .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && sed -i 's,lib/apache2/libphp7.so,modules/libphp7.so,' /etc/apache2/httpd.conf\nENV MEMCACHED_DEPS=\"zlib-dev libmemcached-dev cyrus-sasl-dev\"\nRUN set -xe ; apk add --no-cache --update libmemcached-libs zlib\nRUN set -xe ; apk add --no-cache --update --virtual .phpize-deps $PHPIZE_DEPS \\\n && apk add --no-cache --update --virtual .memcached-deps $MEMCACHED_DEPS \\\n && pecl install memcached \\\n && echo \"extension=memcached.so\" > $PHP_INI_DIR/conf.d/20_memcached.ini \\\n && rm -rf /usr/share/php7 \\\n && rm -rf /tmp/* \\\n && apk del .memcached-deps .phpize-deps\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN docker-php-ext-enable opcache\nCOPY override_php.ini $PHP_INI_DIR/conf.d/\nCOPY apache2-foreground /usr/local/bin/\nCOPY php-module.conf /etc/apache2/conf.d/\nWORKDIR /var/www/localhost/htdocs\nEXPOSE 80/tcp\nENTRYPOINT [\"docker-php-entrypoint\"]\nCMD [\"apache2-foreground\"]\n","injectedSmells":[],"originalDockerfileHash":"03b16f0a33cfc064307bddb6d3b5dd9f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM gzevd/alpine:3.4\n#   persistent / runtime deps\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\nRUN set -xe ; apk add --no-cache --virtual .persistent-deps ca-certificates curl apache2 apache2-utils xz openssh-client mysql-client\nRUN set -xe ; mkdir -p /run/apache2/ \\\n && sed -i 's/^#ServerName.*/ServerName localhost/' /etc/apache2/httpd.conf \\\n && sed -i 's/^#LoadModule rewrite_module/LoadModule rewrite_module/' /etc/apache2/httpd.conf \\\n && sed -i 's/^Listen 80/Listen 0.0.0.0:80/' /etc/apache2/httpd.conf \\\n && ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"33CFC8B3 9C0D5763\"\nENV PHP_VERSION=\"7.0.33\"\nENV PHP_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-$PHP_VERSION.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"ab8c5be6e32b1f8d032909dedaaaa4bbb1a209e519abb01a52ce3914f9a13d96\"\nCOPY 33CFC8B3.asc /tmp/\nCOPY 9C0D5763.asc /tmp/\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg openssl ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --import \"/tmp/$key.asc\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apk del .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS curl-dev libedit-dev libxml2-dev openssl-dev apache2-dev freetype-dev libjpeg-turbo-dev libpng-dev libmcrypt-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --sysconfdir=\"$PHP_INI_DIR\" --with-layout=GNU --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --with-apxs2=/usr/bin/apxs --disable-rpath --disable-debug --disable-static --disable-embed --disable-cgi --without-db1 --without-db2 --without-db3 --without-db4 --without-qdbm --without-pdo_sqlite --without-sqlite3 --enable-ftp --enable-mbstring --enable-mysqlnd --enable-pdo --enable-zip --enable-opcache --with-curl --with-libedit --with-openssl --with-zlib --with-gd --with-mcrypt --enable-gd-native-ttf --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ --with-pdo-mysql=mysqlnd $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && cp php.ini-production $PHP_INI_DIR/php.ini \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .php-rundeps $runDeps \\\n && apk del .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && sed -i 's,lib/apache2/libphp7.so,modules/libphp7.so,' /etc/apache2/httpd.conf\nENV MEMCACHED_DEPS=\"zlib-dev libmemcached-dev cyrus-sasl-dev\"\nRUN set -xe ; apk add --no-cache --update libmemcached-libs zlib\nRUN set -xe ; apk add --no-cache --update --virtual .phpize-deps $PHPIZE_DEPS \\\n && apk add --no-cache --update --virtual .memcached-deps $MEMCACHED_DEPS \\\n && pecl install memcached \\\n && echo \"extension=memcached.so\" > $PHP_INI_DIR/conf.d/20_memcached.ini \\\n && rm -rf /usr/share/php7 \\\n && rm -rf /tmp/* \\\n && apk del .memcached-deps .phpize-deps\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN docker-php-ext-enable opcache\nCOPY override_php.ini $PHP_INI_DIR/conf.d/\nCOPY apache2-foreground /usr/local/bin/\nCOPY php-module.conf /etc/apache2/conf.d/\nWORKDIR /var/www/localhost/htdocs\nEXPOSE 80/tcp\nENTRYPOINT [\"docker-php-entrypoint\"]\nCMD [\"apache2-foreground\"]\n","originalDockerfileUglifiedHash":"ba2e0fc1f59376084b0c066209afe319","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3c01ba2762461c1d1828481725782ecb8093ae7e.dockerfile"}