{"seed":1095413196,"processedDockerfileHash":"da4fce9b028590ca4b47bd02784756d4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#   container for rsyslog development\n#   creates the build environment\nFROM ubuntu:19.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends autoconf autoconf-archive automake autotools-dev bison clang clang-tools curl default-jdk default-jre faketime libdbd-mysql flex gcc gcc-8 gdb git libbson-dev libcurl4-gnutls-dev libdbi-dev libgcrypt11-dev libglib2.0-dev libgnutls28-dev libgrok1 libgrok-dev libhiredis-dev libkrb5-dev liblz4-dev libmaxminddb-dev libmongoc-dev libmongoc-dev libmysqlclient-dev libnet1-dev libpcap-dev librabbitmq-dev libsnmp-dev libssl-dev libsasl2-dev libsystemd-dev libtokyocabinet-dev libtool libtool-bin logrotate lsof make mysql-server net-tools pkg-config postgresql-client libpq-dev python-docutils python-pip software-properties-common sudo uuid-dev valgrind vim wget zlib1g-dev -y\nENV REBUILD=\"1\"\n#   Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends libestr-dev librelp-dev libfastjson-dev liblogging-stdlog-dev liblognorm-dev -y\n#   0mq (currently not needed, but we keep it in just in case)\n#  RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n#  \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n#  \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends libczmq-dev libqpid-proton11-dev tcl-dev libsodium-dev -y\n#   clickhouse\n#  RUN\techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\n#  \tapt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 && \\\n#   \tadd-apt-repository ppa:adiscon/v8-stable -y && \\\n#  \tapt-get update -y && \\\n#  \tapt-get install -y  \\\n#  \tclickhouse-client \\\n#  \tclickhouse-server\n#   clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends clang-9 lldb-9 lld-9 -y\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#   for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#   openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#   openssl dhparam -out clickhouse.dhparam.pem 2048\n#  COPY\tclickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\n#  COPY\tclickhouse.server.crt /etc/clickhouse-server/server.crt\n#  COPY\tclickhouse.server.key /etc/clickhouse-server/server.key\n#  RUN\tsed -i 's/<yandex>/<yandex>\\n    <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' \\\n#  \t\t/etc/clickhouse-server/config.xml && \\\n#  \tsed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n    <https_port>8443<\\/https_port>/g' \\\n#  \t\t/etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#   mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#   and so does clickhouse\n#  RUN\tchown root:root /var/lib/clickhouse\n#  ENV\tCLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n#  \tCLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nCOPY setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#   Install any needed packages\nRUN ./setup-system.sh\n#   other manual installs\n#   kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   Note: we do NOT delete the source as we may need it to\n#   uninstall (in case the user wants to go back to system-default)\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-compile-warning=error  --enable-clickhouse  --enable-clickhouse-tests=no  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imdocker-tests  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-impcap  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-testbench\"\n#   module needs fixes: --enable-kmsg\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  container for rsyslog development\n#  creates the build environment\nFROM ubuntu:19.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install autoconf autoconf-archive automake autotools-dev bison clang clang-tools curl default-jdk default-jre faketime libdbd-mysql flex gcc gcc-8 gdb git libbson-dev libcurl4-gnutls-dev libdbi-dev libgcrypt11-dev libglib2.0-dev libgnutls28-dev libgrok1 libgrok-dev libhiredis-dev libkrb5-dev liblz4-dev libmaxminddb-dev libmongoc-dev libmongoc-dev libmysqlclient-dev libnet1-dev libpcap-dev librabbitmq-dev libsnmp-dev libssl-dev libsasl2-dev libsystemd-dev libtokyocabinet-dev libtool libtool-bin logrotate lsof make mysql-server net-tools pkg-config postgresql-client libpq-dev python-docutils python-pip software-properties-common sudo uuid-dev valgrind vim wget zlib1g-dev -y\nENV REBUILD=\"1\"\n#  Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install libestr-dev librelp-dev libfastjson-dev liblogging-stdlog-dev liblognorm-dev -y\n#  0mq (currently not needed, but we keep it in just in case)\n# RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n# \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n# \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install libczmq-dev libqpid-proton11-dev tcl-dev libsodium-dev -y\n#  clickhouse\n# RUN\techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\n# \tapt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 && \\\n#  \tadd-apt-repository ppa:adiscon/v8-stable -y && \\\n# \tapt-get update -y && \\\n# \tapt-get install -y  \\\n# \tclickhouse-client \\\n# \tclickhouse-server\n#  clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install clang-9 lldb-9 lld-9 -y\n#  create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#  tell tests which are the newester versions, so they can be checked without the need\n#  to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#  for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#  openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#  openssl dhparam -out clickhouse.dhparam.pem 2048\n# COPY\tclickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\n# COPY\tclickhouse.server.crt /etc/clickhouse-server/server.crt\n# COPY\tclickhouse.server.key /etc/clickhouse-server/server.key\n# RUN\tsed -i 's/<yandex>/<yandex>\\n    <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' \\\n# \t\t/etc/clickhouse-server/config.xml && \\\n# \tsed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n    <https_port>8443<\\/https_port>/g' \\\n# \t\t/etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#  mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#  and so does clickhouse\n# RUN\tchown root:root /var/lib/clickhouse\n# ENV\tCLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n# \tCLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nADD setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#  Install any needed packages\nRUN ./setup-system.sh\n#  other manual installs\n#  kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#  Note: we do NOT delete the source as we may need it to\n#  uninstall (in case the user wants to go back to system-default)\n#  next ENV is specifically for running scan-build - so we do not need to\n#  change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-compile-warning=error  --enable-clickhouse  --enable-clickhouse-tests=no  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imdocker-tests  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-impcap  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-testbench\"\n#  module needs fixes: --enable-kmsg\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n","injectedSmells":[],"originalDockerfileHash":"a951a2d643fc2333bd6a5ab1414aadcc","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   container for rsyslog development\n#   creates the build environment\nFROM ubuntu:19.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install autoconf autoconf-archive automake autotools-dev bison clang clang-tools curl default-jdk default-jre faketime libdbd-mysql flex gcc gcc-8 gdb git libbson-dev libcurl4-gnutls-dev libdbi-dev libgcrypt11-dev libglib2.0-dev libgnutls28-dev libgrok1 libgrok-dev libhiredis-dev libkrb5-dev liblz4-dev libmaxminddb-dev libmongoc-dev libmongoc-dev libmysqlclient-dev libnet1-dev libpcap-dev librabbitmq-dev libsnmp-dev libssl-dev libsasl2-dev libsystemd-dev libtokyocabinet-dev libtool libtool-bin logrotate lsof make mysql-server net-tools pkg-config postgresql-client libpq-dev python-docutils python-pip software-properties-common sudo uuid-dev valgrind vim wget zlib1g-dev -y\nENV REBUILD=\"1\"\n#   Adiscon/rsyslog components\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && add-apt-repository ppa:adiscon/v8-stable -y \\\n && apt-get update -y \\\n && apt-get install libestr-dev librelp-dev libfastjson-dev liblogging-stdlog-dev liblognorm-dev -y\n#   0mq (currently not needed, but we keep it in just in case)\n#  RUN\techo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/ ./\" > /etc/apt/sources.list.d/0mq.list && \\\n#  \twget -nv -O - http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_18.04/Release.key | apt-key add - && \\\n#  \techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\nRUN apt-get update -y \\\n && apt-get install libczmq-dev libqpid-proton11-dev tcl-dev libsodium-dev -y\n#   clickhouse\n#  RUN\techo \"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\" > /etc/apt/sources.list.d/clickhouse.list && \\\n#  \tapt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 && \\\n#   \tadd-apt-repository ppa:adiscon/v8-stable -y && \\\n#  \tapt-get update -y && \\\n#  \tapt-get install -y  \\\n#  \tclickhouse-client \\\n#  \tclickhouse-server\n#   clang devel version\nRUN echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" > /etc/apt/sources.list.d/llvm8.list \\\n && echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\" >> /etc/apt/sources.list.d/llvm8.list \\\n && wget -nv -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update -y \\\n && apt-get install clang-9 lldb-9 lld-9 -y\n#   create dependency cache\nRUN mkdir /local_dep_cache \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.9.tar.gz -O /local_dep_cache/elasticsearch-5.6.9.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.0.0.tar.gz -O /local_dep_cache/elasticsearch-6.0.0.tar.gz \\\n && wget -nv https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.1.tar.gz -O /local_dep_cache/elasticsearch-6.3.1.tar.gz\n#   tell tests which are the newester versions, so they can be checked without the need\n#   to adjust test sources.\nENV ELASTICSEARCH_NEWEST=\"elasticsearch-6.3.1.tar.gz\"\n#   for clickhouse, the container requires some pre-generated files for TLS. generate them via\n#   openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout clickhouse.server.key -out clickhouse.server.crt\n#   openssl dhparam -out clickhouse.dhparam.pem 2048\n#  COPY\tclickhouse.dhparam.pem /etc/clickhouse-server/dhparam.pem\n#  COPY\tclickhouse.server.crt /etc/clickhouse-server/server.crt\n#  COPY\tclickhouse.server.key /etc/clickhouse-server/server.key\n#  RUN\tsed -i 's/<yandex>/<yandex>\\n    <core_dump><size_limit>0<\\/size_limit><\\/core_dump>/g' \\\n#  \t\t/etc/clickhouse-server/config.xml && \\\n#  \tsed -i 's/<tcp_port>9000<\\/tcp_port>/<tcp_port>9000<\\/tcp_port>\\n    <https_port>8443<\\/https_port>/g' \\\n#  \t\t/etc/clickhouse-server/config.xml\nWORKDIR /home/devel\nVOLUME /rsyslog\nRUN groupadd rsyslog \\\n && useradd -g rsyslog -s /bin/bash rsyslog \\\n && echo \"rsyslog ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers \\\n && echo \"buildbot ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#   mysql needs a little help:\nRUN mkdir -p /var/run/mysqld \\\n && chown mysql:mysql /var/run/mysqld\nENV MYSQLD_START_CMD=\"sudo mysqld_safe\" \\\n    MYSQLD_STOP_CMD=\"sudo kill $(sudo cat /var/run/mysqld/mysqld.pid)\"\n#   and so does clickhouse\n#  RUN\tchown root:root /var/lib/clickhouse\n#  ENV\tCLICKHOUSE_START_CMD=\"sudo clickhouse-server --config-file=/etc/clickhouse-server/config.xml\" \\\n#  \tCLICKHOUSE_STOP_CMD=\"sudo kill $(pidof clickhouse-server)\"\nADD setup-system.sh setup-system.sh\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    DEBIAN_FRONTEND=\"\" \\\n    SUDO=\"sudo -S\"\n#   Install any needed packages\nRUN ./setup-system.sh\n#   other manual installs\n#   kafkacat\nRUN cd helper-projects \\\n && git clone https://github.com/edenhill/kafkacat \\\n && cd kafkacat \\\n && (unset CFLAGS ;./configure --prefix=/usr --CFLAGS=\"-g\" ;make -j2 ) \\\n && make install \\\n && cd .. \\\n && cd ..\n#   Note: we do NOT delete the source as we may need it to\n#   uninstall (in case the user wants to go back to system-default)\n#   next ENV is specifically for running scan-build - so we do not need to\n#   change scripts if at a later time we can move on to a newer version\nENV SCAN_BUILD=\"scan-build\" \\\n    SCAN_BUILD_CC=\"clang-8\" \\\n    ASAN_SYMBOLIZER_PATH=\"/usr/lib/llvm-6.0/bin/llvm-symbolizer\"\nENV RSYSLOG_CONFIGURE_OPTIONS=\"--enable-compile-warning=error  --enable-clickhouse  --enable-clickhouse-tests=no  --enable-elasticsearch  --enable-elasticsearch-tests  --enable-gnutls  --enable-gssapi-krb5  --enable-imbatchreport  --enable-imczmq  --enable-imdiag  --enable-imdocker  --enable-imdocker-tests  --enable-imfile  --enable-imjournal  --enable-imkafka  --enable-impstats  --enable-impcap  --enable-imptcp  --enable-kafka-tests  --enable-ksi-ls12  --enable-libdbi  --enable-libfaketime  --enable-libgcrypt  --enable-mail  --enable-mmanon  --enable-mmaudit  --enable-mmcapture  --enable-mmcount  --enable-mmdarwin  --enable-mmdblookup  --enable-mmfields  --enable-mmgrok  --enable-mmjsonparse  --enable-mmkubernetes  --enable-mmnormalize  --enable-mmpstrucdata  --enable-mmrm1stspace  --enable-mmsequence  --enable-mmsnmptrapd  --enable-mmutf8fix  --enable-mysql  --enable-mysql-tests  --enable-omamqp1  --enable-omczmq  --enable-omhiredis  --enable-omhiredis  --enable-omhttpfs  --enable-omhttp  --enable-omjournal  --enable-omkafka  --enable-ommongodb  --enable-omprog  --enable-omrabbitmq  --enable-omrelp-default-port=13515  --enable-omruleset  --enable-omstdout  --enable-omtcl  --enable-omudpspoof  --enable-omuxsock  --enable-openssl  --enable-pgsql  --enable-pmaixforwardedfrom  --enable-pmciscoios  --enable-pmcisconames  --enable-pmlastmsg  --enable-pmnormalize  --enable-pmnull  --enable-pmsnare  --enable-relp  --enable-snmp  --enable-usertools  --enable-valgrind  --enable-testbench\"\n#   module needs fixes: --enable-kmsg\nVOLUME /var/lib/mysql\nWORKDIR /rsyslog\nUSER rsyslog\n","originalDockerfileUglifiedHash":"de5202146097c5d733e2d658c645472b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/409d5a36aee188607badc3a332f72b9858f213a3.dockerfile"}