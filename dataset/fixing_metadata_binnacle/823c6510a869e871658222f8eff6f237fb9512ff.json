{"seed":1961589934,"processedDockerfileHash":"499bb87f98059af455b6b793baf3bfa5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   inspired by sn4_baseline\nFROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER avanetten\n#   nvidia-docker build -t simrdwn2.1 .  # build (use existing packages)\n#   nvidia-docker build --no-cache -t simrdwn2.2 .  # rebuild from scratch\n#   NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data --name simrdwn2.2_gpu0 simrdwn2.2\n#   NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data -v /cosmiq:/cosmiq --name simrdwn2.1_gpu0 simrdwn2.1\n#   IF YOU WANT PROGRESS PRINTED TO TERMINAL\n#   Update model_main to log to screen...\n#   https://stackoverflow.com/questions/52016255/tensorflow-object-detection-api-not-displaying-global-steps\n#   #. Add tf.logging.set_verbosity(tf.logging.INFO) after the import section of the model_main.py script. It will display a summary after every 100th step. (Can change frequency by log_step_count)\n#   vi /tensorflow/models/research/object_detection/model_main.py\n#   insert in on line 27:\n#    tf.logging.set_verbosity(tf.logging.INFO)\n#   change line 63 to: \n#    config = tf.estimator.RunConfig(model_dir=FLAGS.model_dir, log_step_count_steps=10)\n#   once started run:\n#   export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/:/tensorflow/models/research/slim\n#   # check if it's using gpu\n#   python\n#   import tensorflow as tf\n#   sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n#   resources:\n#  . https://github.com/jkjung-avt/hand-detection-tutorial\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#   prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#   install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim tmux wget build-essential libopencv-dev python-opencv -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#   install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/bin/tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /usr/bin/tini\n#   use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#   set up conda environment and add to $PATH\nRUN conda create -n simrdwn2 python=3.6 \\\n && echo \"source activate simrdwn2\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/simrdwn2/bin:$PATH\"\n#   install GPU version of tensorflow\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 -c defaults tensorflow-gpu=1.13.1\n#   install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 keras\nRUN conda install -n simrdwn2 affine pyproj pyhamcrest=1.9.0 cython contextlib2 fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio opencv=4.0.0 \\\n && conda clean -p \\\n && conda clean -t \\\n && conda clean --yes --all\nRUN pip install statsmodels==0.13.5\n#   tf object detection api\nRUN git clone https://github.com/tensorflow/models.git /tensorflow/models\n#  WORKDIR /tensorflow/models/research/\n#  RUN protoc object_detection/protos/*.proto --python_out=.\n#   WORKDIR /tensorflow/models/research/\n#   RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n#   ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\n#   ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n#   also need coco api\n#   manually\n#   From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nRUN unzip protobuf.zip\nRUN ./bin/protoc object_detection/protos/*.proto --python_out=.\nRUN pip install pycocotools==2.0.6\n#   From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN export PYTHONPATH=$PYTHONPATH:`pwd `:`pwd `/slim\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\"\n#   # add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate simrdwn2 \\\n && python -m ipykernel.kernelspec\nRUN python -m ipykernel.kernelspec\n#  ##################\n#   Set up our notebook config.\nWORKDIR /\n#   TensorBoard\n#   open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\nRUN [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  inspired by sn4_baseline\nFROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER avanetten\n#  nvidia-docker build -t simrdwn2.1 .  # build (use existing packages)\n#  nvidia-docker build --no-cache -t simrdwn2.2 .  # rebuild from scratch\n#  NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data --name simrdwn2.2_gpu0 simrdwn2.2\n#  NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data -v /cosmiq:/cosmiq --name simrdwn2.1_gpu0 simrdwn2.1\n#  IF YOU WANT PROGRESS PRINTED TO TERMINAL\n#  Update model_main to log to screen...\n#  https://stackoverflow.com/questions/52016255/tensorflow-object-detection-api-not-displaying-global-steps\n#  #. Add tf.logging.set_verbosity(tf.logging.INFO) after the import section of the model_main.py script. It will display a summary after every 100th step. (Can change frequency by log_step_count)\n#  vi /tensorflow/models/research/object_detection/model_main.py\n#  insert in on line 27:\n#   tf.logging.set_verbosity(tf.logging.INFO)\n#  change line 63 to: \n#   config = tf.estimator.RunConfig(model_dir=FLAGS.model_dir, log_step_count_steps=10)\n#  once started run:\n#  export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/:/tensorflow/models/research/slim\n#  # check if it's using gpu\n#  python\n#  import tensorflow as tf\n#  sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n#  resources:\n# . https://github.com/jkjung-avt/hand-detection-tutorial\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#  prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#  install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim tmux wget build-essential libopencv-dev python-opencv -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#  install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n#  use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#  set up conda environment and add to $PATH\nRUN conda create -n simrdwn2 python=3.6 \\\n && echo \"source activate simrdwn2\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/simrdwn2/bin:$PATH\"\n#  install GPU version of tensorflow\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 -c defaults tensorflow-gpu=1.13.1\n#  install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 keras\nRUN conda install -n simrdwn2 affine pyproj pyhamcrest=1.9.0 cython contextlib2 fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio opencv=4.0.0 \\\n && conda clean -p \\\n && conda clean -t \\\n && conda clean --yes --all\nRUN pip install statsmodels\n#  tf object detection api\nRUN git clone https://github.com/tensorflow/models.git /tensorflow/models\n# WORKDIR /tensorflow/models/research/\n# RUN protoc object_detection/protos/*.proto --python_out=.\n#  WORKDIR /tensorflow/models/research/\n#  RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n#  ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\n#  ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n#  also need coco api\n#  manually\n#  From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nRUN unzip protobuf.zip\nRUN ./bin/protoc object_detection/protos/*.proto --python_out=.\nRUN pip install pycocotools\n#  From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN export PYTHONPATH=$PYTHONPATH:`pwd `:`pwd `/slim\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\"\n#  # add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate simrdwn2 \\\n && python -m ipykernel.kernelspec\nRUN python -m ipykernel.kernelspec\n# ##################\n#  Set up our notebook config.\nWORKDIR /\n#  TensorBoard\n#  open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\nRUN [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"0a0bacfa70653a06c128803574eb7cae","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   inspired by sn4_baseline\nFROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER avanetten\n#   nvidia-docker build -t simrdwn2.1 .  # build (use existing packages)\n#   nvidia-docker build --no-cache -t simrdwn2.2 .  # rebuild from scratch\n#   NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data --name simrdwn2.2_gpu0 simrdwn2.2\n#   NV_GPU=0 nvidia-docker run -it -v /local_data:/local_data -v /cosmiq:/cosmiq --name simrdwn2.1_gpu0 simrdwn2.1\n#   IF YOU WANT PROGRESS PRINTED TO TERMINAL\n#   Update model_main to log to screen...\n#   https://stackoverflow.com/questions/52016255/tensorflow-object-detection-api-not-displaying-global-steps\n#   #. Add tf.logging.set_verbosity(tf.logging.INFO) after the import section of the model_main.py script. It will display a summary after every 100th step. (Can change frequency by log_step_count)\n#   vi /tensorflow/models/research/object_detection/model_main.py\n#   insert in on line 27:\n#    tf.logging.set_verbosity(tf.logging.INFO)\n#   change line 63 to: \n#    config = tf.estimator.RunConfig(model_dir=FLAGS.model_dir, log_step_count_steps=10)\n#   once started run:\n#   export PYTHONPATH=$PYTHONPATH:/tensorflow/models/research/:/tensorflow/models/research/slim\n#   # check if it's using gpu\n#   python\n#   import tensorflow as tf\n#   sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n#   resources:\n#  . https://github.com/jkjung-avt/hand-detection-tutorial\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#   prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#   install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim tmux wget build-essential libopencv-dev python-opencv -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#   install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n#   use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#   set up conda environment and add to $PATH\nRUN conda create -n simrdwn2 python=3.6 \\\n && echo \"source activate simrdwn2\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/simrdwn2/bin:$PATH\"\n#   install GPU version of tensorflow\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 -c defaults tensorflow-gpu=1.13.1\n#   install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate simrdwn2 \\\n && conda install -n simrdwn2 keras\nRUN conda install -n simrdwn2 affine pyproj pyhamcrest=1.9.0 cython contextlib2 fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio opencv=4.0.0 \\\n && conda clean -p \\\n && conda clean -t \\\n && conda clean --yes --all\nRUN pip install statsmodels\n#   tf object detection api\nRUN git clone https://github.com/tensorflow/models.git /tensorflow/models\n#  WORKDIR /tensorflow/models/research/\n#  RUN protoc object_detection/protos/*.proto --python_out=.\n#   WORKDIR /tensorflow/models/research/\n#   RUN export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n#   ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\n#   ENV PYTHONPATH $PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\n#   also need coco api\n#   manually\n#   From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nRUN unzip protobuf.zip\nRUN ./bin/protoc object_detection/protos/*.proto --python_out=.\nRUN pip install pycocotools\n#   From tensorflow/models/research/\nWORKDIR /tensorflow/models/research/\nRUN export PYTHONPATH=$PYTHONPATH:`pwd `:`pwd `/slim\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/tensorflow/models/:/tensorflow/models/research/slim\"\n#   # add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate simrdwn2 \\\n && python -m ipykernel.kernelspec\nRUN python -m ipykernel.kernelspec\n#  ##################\n#   Set up our notebook config.\nWORKDIR /\n#   TensorBoard\n#   open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\nRUN [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"8e015743c80e76d4bc1e05e6ca8c681c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/823c6510a869e871658222f8eff6f237fb9512ff.dockerfile"}