{"seed":1750901754,"processedDockerfileHash":"cfea628dfd2be9d342be37681dbc4e6c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   RIOT Dockerfile\n#\n#   the resulting image will contain everything needed to build RIOT for all\n#   supported platforms. This is the largest build image, it takes about 1.5 GB in\n#   total.\n#\n#   Setup: (only needed once per Dockerfile change)\n#   1. install docker, add yourself to docker group, enable docker, relogin\n#   2. # docker build -t riotbuild .\n#\n#   Usage:\n#   3. cd to riot root\n#   4. # docker run -i -t -u $UID -v $(pwd):/data/riotbuild riotbuild ./dist/tools/compile_test/compile_test.py\nFROM ubuntu:bionic\nMAINTAINER Joakim Nohlgård <joakim.nohlgard@eistec.se>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   The following package groups will be installed:\n#   - upgrade all system packages to latest available version\n#   - native platform development and build system functionality (about 400 MB installed)\n#   - Cortex-M development (about 550 MB installed), through the gcc-arm-embedded PPA\n#   - MSP430 development (about 120 MB installed)\n#   - AVR development (about 110 MB installed)\n#   - LLVM/Clang build environment (about 125 MB installed)\n#   All apt files will be deleted afterwards to reduce the size of the container image.\n#   This is all done in a single RUN command to reduce the number of layers and to\n#   allow the cleanup to actually save space.\n#   Total size without cleaning is approximately 1.525 GB (2016-03-08)\n#   After adding the cleanup commands the size is approximately 1.497 GB\nRUN dpkg --add-architecture i386 >&2 \\\n && echo 'Upgrading all system packages to the latest available versions' >&2 \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && echo 'Installing native toolchain and build system functionality' >&2 \\\n && apt-get install --no-install-recommends automake=1:1.15.1-3ubuntu2 bsdmainutils=11.1.2ubuntu1 build-essential=12.4ubuntu1 ca-certificates=20211016ubuntu0.18.04.1 ccache=3.4.1-1 cmake=3.10.2-1ubuntu2.18.04.2 coccinelle=1.0.4.deb-3build4 curl=7.58.0-2ubuntu3.24 cppcheck=1.82-1 doxygen=1.8.13-10 gcc-multilib=4:7.4.0-1ubuntu2.3 gdb=8.1.1-0ubuntu1 g++-multilib=4:7.4.0-1ubuntu2.3 git=1:2.17.1-1ubuntu0.17 graphviz=2.40.1-2 less=487-0.1 libpcre3=2:8.39-9ubuntu0.1 libtool=2.4.6-2 m4=1.4.18-1 parallel=20161222-1 pcregrep=2:8.39-9ubuntu0.1 python=2.7.15~rc1-1 python3=3.6.7-1~18.04 python3-dev=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 p7zip=16.02+dfsg-6 rsync=3.1.2-2.1ubuntu1.6 ssh-client subversion=1.9.7-4ubuntu1.1 unzip=6.0-21ubuntu1.2 vim-common=2:8.0.1453-1ubuntu1.11 wget=1.19.4-1ubuntu2.2 xsltproc=1.1.29-5ubuntu0.3 -y \\\n && echo 'Installing MSP430 toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-msp430=4.6.3~mspgcc-20120406-7ubuntu5 msp430-libc=20120224-1ubuntu1 -y \\\n && echo 'Installing AVR toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-avr=1:5.4.0+Atmel3.6.0-1build1 binutils-avr=2.26.20160125+Atmel3.6.0-1 avr-libc=1:2.0.0+Atmel3.6.0-1 -y \\\n && echo 'Installing LLVM/Clang toolchain' >&2 \\\n && apt-get install --no-install-recommends llvm=1:6.0-41~exp5~ubuntu1 clang=1:6.0-41~exp5~ubuntu1 clang-tools=1:6.0-41~exp5~ubuntu1 -y \\\n && echo 'Installing socketCAN' >&2 \\\n && apt-get install --no-install-recommends libsocketcan-dev:i386 libsocketcan2:i386 -y \\\n && echo 'Cleaning up installation files' >&2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   install required python packages from file\nCOPY install_requirements.txt /tmp/install_requirements.txt\nCOPY requirements.txt /tmp/requirements.txt\nRUN echo 'Installing python3 packages' >&2 \\\n && pip3 install --no-cache-dir -r /tmp/install_requirements.txt \\\n && pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n && pip3 uninstall -y -r /tmp/install_requirements.txt \\\n && rm /tmp/install_requirements.txt \\\n && rm /tmp/requirements.txt\n#   Install ARM GNU embedded toolchain\n#   For updates, see https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\nRUN echo 'Installing arm-none-eabi toolchain from arm.com' >&2 \\\n && mkdir -p /opt \\\n && curl -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update' \\\n && echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2' | md5sum -c \\\n && tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 \\\n && rm -f /opt/gcc-arm-none-eabi.tar.bz2 \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gcc-arm-none-eabi-*/share/doc\n#   No need to dedup, the ARM toolchain is already using hard links for the duplicated files\nENV PATH=\"${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin\"\n#   Install MIPS binary toolchain\n#   For updates: https://www.mips.com/develop/tools/codescape-mips-sdk/ (select \"Codescape GNU Toolchain\")\nRUN mkdir -p /opt \\\n && wget -q https://codescape.mips.com/components/toolchain/2016.05-03/Codescape.GNU.Tools.Package.2016.05-03.for.MIPS.MTI.Bare.Metal.CentOS-5.x86_64.tar.gz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation and translations' >&2 \\\n && rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/mips-mti-elf/*/mips-mti-elf/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/mips-mti-elf-$f\" \"$f\" ; done \\\n && cd -\nENV MIPS_ELF_ROOT=\"/opt/mips-mti-elf/2016.05-03\"\nENV PATH=\"${PATH}:${MIPS_ELF_ROOT}/bin\"\n#   Install RISC-V binary toolchain\nRUN mkdir -p /opt \\\n && wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v7.2.0-2-20180110/gnu-mcu-eclipse-riscv-none-gcc-7.2.0-2-20180111-2230-centos64.tgz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/riscv-none-embed-$f\" \"$f\" ; done \\\n && cd -\n#   HACK download arch linux' flex dynamic library\nRUN wget -q https://sgp.mirror.pkgbuild.com/core/os/x86_64/flex-2.6.4-2-x86_64.pkg.tar.xz -O- | tar -C / -xJ usr/lib/libfl.so.2.0.0\nRUN ldconfig\nENV PATH=\"$PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin\"\n#   compile suid create_user binary\nCOPY create_user.c /tmp/create_user.c\nRUN gcc -DHOMEDIR=\\\"/data/riotbuild\\\" -DUSERNAME=\\\"riotbuild\\\" /tmp/create_user.c -o /usr/local/bin/create_user \\\n && chown root:root /usr/local/bin/create_user \\\n && chmod u=rws,g=x,o=- /usr/local/bin/create_user \\\n && rm /tmp/create_user.c\n#   Install complete ESP8266 toolchain in /opt/esp (146 MB after cleanup)\nRUN echo 'Installing ESP8266 toolchain' >&2 \\\n && cd /opt \\\n && git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git esp \\\n && cd esp \\\n && git checkout -q df38b06 \\\n && rm -rf .git\nENV PATH=\"$PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin\"\n#   Install ESP32 toolchain in /opt/esp (181 MB after cleanup)\nRUN echo 'Installing ESP32 toolchain' >&2 \\\n && mkdir -p /opt/esp \\\n && cd /opt/esp \\\n && git clone https://github.com/espressif/esp-idf.git \\\n && cd esp-idf \\\n && git checkout -q f198339ec09e90666150672884535802304d23ec \\\n && git submodule update --init --recursive \\\n && rm -rf .git* docs examples make tools \\\n && rm -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler \\\n && cd components \\\n && rm -rf app_trace app_update aws_iot bootloader bt coap console cxx esp_adc_cal espcoredump esp_http_client esp-tls expat fatfs freertos idf_test jsmn json libsodium log lwip mbedtls mdns micro-ecc nghttp openssl partition_table pthread sdmmc spiffs tcpip_adapter ulp vfs wear_levelling xtensa-debug-module \\\n && find . -name '*.[csS]' -exec rm {}\nENV PATH=\"$PATH:/opt/esp/xtensa-esp32-elf/bin\"\n#   Create working directory for mounting the RIOT sources\nRUN mkdir -m 777 -p /data/riotbuild\n#   Set a global system-wide git user and email address\nRUN git config --system user.name \"riot\" \\\n && git config --system user.email \"riot@example.com\"\n#   Copy our entry point script (signal wrapper)\nCOPY run.sh /run.sh\nENTRYPOINT [\"/bin/bash\", \"/run.sh\"]\n#   By default, run a shell when no command is specified on the docker command line\nCMD [\"/bin/bash\"]\nWORKDIR /data/riotbuild\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  RIOT Dockerfile\n#\n#  the resulting image will contain everything needed to build RIOT for all\n#  supported platforms. This is the largest build image, it takes about 1.5 GB in\n#  total.\n#\n#  Setup: (only needed once per Dockerfile change)\n#  1. install docker, add yourself to docker group, enable docker, relogin\n#  2. # docker build -t riotbuild .\n#\n#  Usage:\n#  3. cd to riot root\n#  4. # docker run -i -t -u $UID -v $(pwd):/data/riotbuild riotbuild ./dist/tools/compile_test/compile_test.py\nFROM ubuntu:bionic\nMAINTAINER Joakim Nohlgård <joakim.nohlgard@eistec.se>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  The following package groups will be installed:\n#  - upgrade all system packages to latest available version\n#  - native platform development and build system functionality (about 400 MB installed)\n#  - Cortex-M development (about 550 MB installed), through the gcc-arm-embedded PPA\n#  - MSP430 development (about 120 MB installed)\n#  - AVR development (about 110 MB installed)\n#  - LLVM/Clang build environment (about 125 MB installed)\n#  All apt files will be deleted afterwards to reduce the size of the container image.\n#  This is all done in a single RUN command to reduce the number of layers and to\n#  allow the cleanup to actually save space.\n#  Total size without cleaning is approximately 1.525 GB (2016-03-08)\n#  After adding the cleanup commands the size is approximately 1.497 GB\nRUN dpkg --add-architecture i386 >&2 \\\n && echo 'Upgrading all system packages to the latest available versions' >&2 \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && echo 'Installing native toolchain and build system functionality' >&2 \\\n && apt-get install --no-install-recommends automake bsdmainutils build-essential ca-certificates ccache cmake coccinelle curl cppcheck doxygen gcc-multilib gdb g++-multilib git graphviz less libpcre3 libtool m4 parallel pcregrep python python3 python3-dev python3-pip p7zip rsync ssh-client subversion unzip vim-common wget xsltproc -y \\\n && echo 'Installing MSP430 toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-msp430 msp430-libc -y \\\n && echo 'Installing AVR toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-avr binutils-avr avr-libc -y \\\n && echo 'Installing LLVM/Clang toolchain' >&2 \\\n && apt-get install --no-install-recommends llvm clang clang-tools -y \\\n && echo 'Installing socketCAN' >&2 \\\n && apt-get install --no-install-recommends libsocketcan-dev:i386 libsocketcan2:i386 -y \\\n && echo 'Cleaning up installation files' >&2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  install required python packages from file\nCOPY install_requirements.txt /tmp/install_requirements.txt\nCOPY requirements.txt /tmp/requirements.txt\nRUN echo 'Installing python3 packages' >&2 \\\n && pip3 install --no-cache-dir -r /tmp/install_requirements.txt \\\n && pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n && pip3 uninstall -y -r /tmp/install_requirements.txt \\\n && rm /tmp/install_requirements.txt \\\n && rm /tmp/requirements.txt\n#  Install ARM GNU embedded toolchain\n#  For updates, see https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\nRUN echo 'Installing arm-none-eabi toolchain from arm.com' >&2 \\\n && mkdir -p /opt \\\n && curl -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update' \\\n && echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2' | md5sum -c \\\n && tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 \\\n && rm -f /opt/gcc-arm-none-eabi.tar.bz2 \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gcc-arm-none-eabi-*/share/doc\n#  No need to dedup, the ARM toolchain is already using hard links for the duplicated files\nENV PATH=\"${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin\"\n#  Install MIPS binary toolchain\n#  For updates: https://www.mips.com/develop/tools/codescape-mips-sdk/ (select \"Codescape GNU Toolchain\")\nRUN mkdir -p /opt \\\n && wget -q https://codescape.mips.com/components/toolchain/2016.05-03/Codescape.GNU.Tools.Package.2016.05-03.for.MIPS.MTI.Bare.Metal.CentOS-5.x86_64.tar.gz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation and translations' >&2 \\\n && rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/mips-mti-elf/*/mips-mti-elf/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/mips-mti-elf-$f\" \"$f\" ; done \\\n && cd -\nENV MIPS_ELF_ROOT=\"/opt/mips-mti-elf/2016.05-03\"\nENV PATH=\"${PATH}:${MIPS_ELF_ROOT}/bin\"\n#  Install RISC-V binary toolchain\nRUN mkdir -p /opt \\\n && wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v7.2.0-2-20180110/gnu-mcu-eclipse-riscv-none-gcc-7.2.0-2-20180111-2230-centos64.tgz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/riscv-none-embed-$f\" \"$f\" ; done \\\n && cd -\n#  HACK download arch linux' flex dynamic library\nRUN wget -q https://sgp.mirror.pkgbuild.com/core/os/x86_64/flex-2.6.4-2-x86_64.pkg.tar.xz -O- | tar -C / -xJ usr/lib/libfl.so.2.0.0\nRUN ldconfig\nENV PATH=\"$PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin\"\n#  compile suid create_user binary\nCOPY create_user.c /tmp/create_user.c\nRUN gcc -DHOMEDIR=\\\"/data/riotbuild\\\" -DUSERNAME=\\\"riotbuild\\\" /tmp/create_user.c -o /usr/local/bin/create_user \\\n && chown root:root /usr/local/bin/create_user \\\n && chmod u=rws,g=x,o=- /usr/local/bin/create_user \\\n && rm /tmp/create_user.c\n#  Install complete ESP8266 toolchain in /opt/esp (146 MB after cleanup)\nRUN echo 'Installing ESP8266 toolchain' >&2 \\\n && cd /opt \\\n && git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git esp \\\n && cd esp \\\n && git checkout -q df38b06 \\\n && rm -rf .git\nENV PATH=\"$PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin\"\n#  Install ESP32 toolchain in /opt/esp (181 MB after cleanup)\nRUN echo 'Installing ESP32 toolchain' >&2 \\\n && mkdir -p /opt/esp \\\n && cd /opt/esp \\\n && git clone https://github.com/espressif/esp-idf.git \\\n && cd esp-idf \\\n && git checkout -q f198339ec09e90666150672884535802304d23ec \\\n && git submodule update --init --recursive \\\n && rm -rf .git* docs examples make tools \\\n && rm -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler \\\n && cd components \\\n && rm -rf app_trace app_update aws_iot bootloader bt coap console cxx esp_adc_cal espcoredump esp_http_client esp-tls expat fatfs freertos idf_test jsmn json libsodium log lwip mbedtls mdns micro-ecc nghttp openssl partition_table pthread sdmmc spiffs tcpip_adapter ulp vfs wear_levelling xtensa-debug-module \\\n && find . -name '*.[csS]' -exec rm {} ; \\\n && cd /opt/esp \\\n && git clone https://github.com/gschorcht/xtensa-esp32-elf.git \\\n && cd xtensa-esp32-elf \\\n && git checkout -q ca40fb4c219accf8e7c8eab68f58a7fc14cadbab\nENV PATH=\"$PATH:/opt/esp/xtensa-esp32-elf/bin\"\n#  Create working directory for mounting the RIOT sources\nRUN mkdir -m 777 -p /data/riotbuild\n#  Set a global system-wide git user and email address\nRUN git config --system user.name \"riot\" \\\n && git config --system user.email \"riot@example.com\"\n#  Copy our entry point script (signal wrapper)\nCOPY run.sh /run.sh\nENTRYPOINT [\"/bin/bash\", \"/run.sh\"]\n#  By default, run a shell when no command is specified on the docker command line\nCMD [\"/bin/bash\"]\nWORKDIR /data/riotbuild\n","injectedSmells":[],"originalDockerfileHash":"c649170fdfec0660e85726f3685ca3fa","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   RIOT Dockerfile\n#\n#   the resulting image will contain everything needed to build RIOT for all\n#   supported platforms. This is the largest build image, it takes about 1.5 GB in\n#   total.\n#\n#   Setup: (only needed once per Dockerfile change)\n#   1. install docker, add yourself to docker group, enable docker, relogin\n#   2. # docker build -t riotbuild .\n#\n#   Usage:\n#   3. cd to riot root\n#   4. # docker run -i -t -u $UID -v $(pwd):/data/riotbuild riotbuild ./dist/tools/compile_test/compile_test.py\nFROM ubuntu:bionic\nMAINTAINER Joakim Nohlgård <joakim.nohlgard@eistec.se>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   The following package groups will be installed:\n#   - upgrade all system packages to latest available version\n#   - native platform development and build system functionality (about 400 MB installed)\n#   - Cortex-M development (about 550 MB installed), through the gcc-arm-embedded PPA\n#   - MSP430 development (about 120 MB installed)\n#   - AVR development (about 110 MB installed)\n#   - LLVM/Clang build environment (about 125 MB installed)\n#   All apt files will be deleted afterwards to reduce the size of the container image.\n#   This is all done in a single RUN command to reduce the number of layers and to\n#   allow the cleanup to actually save space.\n#   Total size without cleaning is approximately 1.525 GB (2016-03-08)\n#   After adding the cleanup commands the size is approximately 1.497 GB\nRUN dpkg --add-architecture i386 >&2 \\\n && echo 'Upgrading all system packages to the latest available versions' >&2 \\\n && apt-get update \\\n && apt-get -y dist-upgrade \\\n && echo 'Installing native toolchain and build system functionality' >&2 \\\n && apt-get install --no-install-recommends automake bsdmainutils build-essential ca-certificates ccache cmake coccinelle curl cppcheck doxygen gcc-multilib gdb g++-multilib git graphviz less libpcre3 libtool m4 parallel pcregrep python python3 python3-dev python3-pip p7zip rsync ssh-client subversion unzip vim-common wget xsltproc -y \\\n && echo 'Installing MSP430 toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-msp430 msp430-libc -y \\\n && echo 'Installing AVR toolchain' >&2 \\\n && apt-get install --no-install-recommends gcc-avr binutils-avr avr-libc -y \\\n && echo 'Installing LLVM/Clang toolchain' >&2 \\\n && apt-get install --no-install-recommends llvm clang clang-tools -y \\\n && echo 'Installing socketCAN' >&2 \\\n && apt-get install --no-install-recommends libsocketcan-dev:i386 libsocketcan2:i386 -y \\\n && echo 'Cleaning up installation files' >&2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   install required python packages from file\nCOPY install_requirements.txt /tmp/install_requirements.txt\nCOPY requirements.txt /tmp/requirements.txt\nRUN echo 'Installing python3 packages' >&2 \\\n && pip3 install --no-cache-dir -r /tmp/install_requirements.txt \\\n && pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n && pip3 uninstall -y -r /tmp/install_requirements.txt \\\n && rm /tmp/install_requirements.txt \\\n && rm /tmp/requirements.txt\n#   Install ARM GNU embedded toolchain\n#   For updates, see https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\nRUN echo 'Installing arm-none-eabi toolchain from arm.com' >&2 \\\n && mkdir -p /opt \\\n && curl -L -o /opt/gcc-arm-none-eabi.tar.bz2 'https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update' \\\n && echo '299ebd3f1c2c90930d28ab82e5d8d6c0 */opt/gcc-arm-none-eabi.tar.bz2' | md5sum -c \\\n && tar -C /opt -jxf /opt/gcc-arm-none-eabi.tar.bz2 \\\n && rm -f /opt/gcc-arm-none-eabi.tar.bz2 \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gcc-arm-none-eabi-*/share/doc\n#   No need to dedup, the ARM toolchain is already using hard links for the duplicated files\nENV PATH=\"${PATH}:/opt/gcc-arm-none-eabi-7-2018-q2-update/bin\"\n#   Install MIPS binary toolchain\n#   For updates: https://www.mips.com/develop/tools/codescape-mips-sdk/ (select \"Codescape GNU Toolchain\")\nRUN mkdir -p /opt \\\n && wget -q https://codescape.mips.com/components/toolchain/2016.05-03/Codescape.GNU.Tools.Package.2016.05-03.for.MIPS.MTI.Bare.Metal.CentOS-5.x86_64.tar.gz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation and translations' >&2 \\\n && rm -rf /opt/mips-mti-elf/*/share/{doc,info,man,locale} \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/mips-mti-elf/*/mips-mti-elf/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/mips-mti-elf-$f\" \"$f\" ; done \\\n && cd -\nENV MIPS_ELF_ROOT=\"/opt/mips-mti-elf/2016.05-03\"\nENV PATH=\"${PATH}:${MIPS_ELF_ROOT}/bin\"\n#   Install RISC-V binary toolchain\nRUN mkdir -p /opt \\\n && wget -q https://github.com/gnu-mcu-eclipse/riscv-none-gcc/releases/download/v7.2.0-2-20180110/gnu-mcu-eclipse-riscv-none-gcc-7.2.0-2-20180111-2230-centos64.tgz -O- | tar -C /opt -xz \\\n && echo 'Removing documentation' >&2 \\\n && rm -rf /opt/gnu-mcu-eclipse/riscv-none-gcc/*/share/doc \\\n && echo 'Deduplicating binaries' >&2 \\\n && cd /opt/gnu-mcu-eclipse/riscv-none-gcc/*/riscv-none-embed/bin \\\n && for f in *; do rm \"$f\" \\\n && ln \"../../bin/riscv-none-embed-$f\" \"$f\" ; done \\\n && cd -\n#   HACK download arch linux' flex dynamic library\nRUN wget -q https://sgp.mirror.pkgbuild.com/core/os/x86_64/flex-2.6.4-2-x86_64.pkg.tar.xz -O- | tar -C / -xJ usr/lib/libfl.so.2.0.0\nRUN ldconfig\nENV PATH=\"$PATH:/opt/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin\"\n#   compile suid create_user binary\nCOPY create_user.c /tmp/create_user.c\nRUN gcc -DHOMEDIR=\\\"/data/riotbuild\\\" -DUSERNAME=\\\"riotbuild\\\" /tmp/create_user.c -o /usr/local/bin/create_user \\\n && chown root:root /usr/local/bin/create_user \\\n && chmod u=rws,g=x,o=- /usr/local/bin/create_user \\\n && rm /tmp/create_user.c\n#   Install complete ESP8266 toolchain in /opt/esp (146 MB after cleanup)\nRUN echo 'Installing ESP8266 toolchain' >&2 \\\n && cd /opt \\\n && git clone https://github.com/gschorcht/RIOT-Xtensa-ESP8266-toolchain.git esp \\\n && cd esp \\\n && git checkout -q df38b06 \\\n && rm -rf .git\nENV PATH=\"$PATH:/opt/esp/esp-open-sdk/xtensa-lx106-elf/bin\"\n#   Install ESP32 toolchain in /opt/esp (181 MB after cleanup)\nRUN echo 'Installing ESP32 toolchain' >&2 \\\n && mkdir -p /opt/esp \\\n && cd /opt/esp \\\n && git clone https://github.com/espressif/esp-idf.git \\\n && cd esp-idf \\\n && git checkout -q f198339ec09e90666150672884535802304d23ec \\\n && git submodule update --init --recursive \\\n && rm -rf .git* docs examples make tools \\\n && rm -f add_path.sh CONTRIBUTING.rst Kconfig Kconfig.compiler \\\n && cd components \\\n && rm -rf app_trace app_update aws_iot bootloader bt coap console cxx esp_adc_cal espcoredump esp_http_client esp-tls expat fatfs freertos idf_test jsmn json libsodium log lwip mbedtls mdns micro-ecc nghttp openssl partition_table pthread sdmmc spiffs tcpip_adapter ulp vfs wear_levelling xtensa-debug-module \\\n && find . -name '*.[csS]' -exec rm {}\nENV PATH=\"$PATH:/opt/esp/xtensa-esp32-elf/bin\"\n#   Create working directory for mounting the RIOT sources\nRUN mkdir -m 777 -p /data/riotbuild\n#   Set a global system-wide git user and email address\nRUN git config --system user.name \"riot\" \\\n && git config --system user.email \"riot@example.com\"\n#   Copy our entry point script (signal wrapper)\nCOPY run.sh /run.sh\nENTRYPOINT [\"/bin/bash\", \"/run.sh\"]\n#   By default, run a shell when no command is specified on the docker command line\nCMD [\"/bin/bash\"]\nWORKDIR /data/riotbuild\n","originalDockerfileUglifiedHash":"448b8b134807dc58b08261c63fca8517","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ec4961a3ac49865668e2711adec889298fb07c06.dockerfile"}