{"seed":3888139258,"processedDockerfileHash":"40362ff1915e27965b762ef550bfd915","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.10.0\nLABEL image=\"demyx/elgg\"\nLABEL maintainer=\"Demyx <info@demyx.sh>\"\nLABEL url=\"https://demyx.sh\"\nLABEL github=\"https://github.com/demyxco/demyx\"\nLABEL registry=\"https://hub.docker.com/u/demyx\"\nENV TZ=\"America/Los_Angeles\"\nENV NGINX_VERSION=\"1.17.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nENV NGX_CACHE_PURGE_VERSION=\"2.3\"\nENV NGX_CACHE_PURGE_SHA1=\"69ed46a23435e8dfd5579422c0c3996cf9a44291\"\nENV HEADERS_MORE_NGINX_MODULE_VERSION=\"0.33\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add openssl=1.1.1k-r0 curl=7.66.0-r4 ca-certificates=20191127-r2 --no-cache --virtual .cert-deps \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \\\n && printf \"%s%s%s\\n\" \"http://nginx.org/packages/mainline/alpine/v3.9\" \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add gcc=8.3.0-r0 libc-dev=0.7.1-r0 make=4.2.1-r2 openssl-dev=1.1.1k-r0 pcre-dev=8.43-r1 zlib-dev=1.2.11-r1 linux-headers=4.19.36-r0 libxslt-dev=1.1.33-r3 gd-dev=2.2.5-r3 geoip-dev=1.6.12-r1 perl-dev=5.28.3-r0 libedit-dev=20190324.3.1-r0 mercurial=4.9.1-r0 bash=5.0.0-r0 alpine-sdk=1.0-r0 findutils=4.6.0-r1 --no-cache --virtual .build-deps \\\n && su - nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up ${NGINX_VERSION}-${PKG_RELEASE} \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add $nginxPackages --no-cache \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add gettext=0.19.8.1-r4 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2021a-r0 --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#      \n#   BUILD CUSTOM MODULES\n#\nRUN apk add gcc=8.3.0-r0 libc-dev=0.7.1-r0 make=4.2.1-r2 openssl-dev=1.1.1k-r0 pcre-dev=8.43-r1 zlib-dev=1.2.11-r1 linux-headers=4.19.36-r0 curl=7.66.0-r4 gnupg1=1.4.23-r0 libxslt-dev=1.1.33-r3 gd-dev=2.2.5-r3 geoip-dev=1.6.12-r1 --no-cache --update --virtual .build-deps \\\n && mkdir -p /usr/src \\\n && curl -o ngx_cache_purge.tar.gz -fSL \"http://labs.frickle.com/files/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}.tar.gz\" \\\n && echo \"$NGX_CACHE_PURGE_SHA1 *ngx_cache_purge.tar.gz\" | sha1sum -c - \\\n && tar -xzf ngx_cache_purge.tar.gz -C /usr/src/ \\\n && rm ngx_cache_purge.tar.gz \\\n && curl -o headers-more-nginx-module.tar.gz -fSL \"https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_NGINX_MODULE_VERSION}.tar.gz\" \\\n && tar -xzf headers-more-nginx-module.tar.gz -C /usr/src/ \\\n && rm headers-more-nginx-module.tar.gz \\\n && curl -o nginx.tar.gz -fSL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xzf nginx.tar.gz -C /usr/src/ \\\n && rm nginx.tar.gz \\\n && sed -i \"s/HTTP_MODULES/#HTTP_MODULES/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s/NGX_ADDON_SRCS/#NGX_ADDON_SRCS/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_cache_purge_module|ngx_addon_name=ngx_http_cache_purge_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_cache_purge_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_cache_purge_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_cache_purge_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_cache_purge_module.c\\\"; fi|g\" /usr/src/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_headers_more_filter_module|ngx_addon_name=ngx_http_headers_more_filter_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_headers_more_filter_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_headers_more_filter_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; fi|g\" /usr/src/headers-more-nginx-module-${HEADERS_MORE_NGINX_MODULE_VERSION}/config \\\n && cd /usr/src/nginx-\"$NGINX_VERSION\" \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_cache_purge_module.so /etc/nginx/modules \\\n && make clean \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules \\\n && rm -rf /usr/src/nginx-\"$NGINX_VERSION\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" /usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && apk del .build-deps\n#      \n#   END BUILD CUSTOM MODULES\n#\n#   dependencies required for running \"phpize\"\n#   these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#   persistent / runtime deps\nRUN apk add ca-certificates=20191127-r2 curl=7.66.0-r4 tar=1.32-r1 xz=5.2.4-r0 openssl=1.1.1k-r0 --no-cache\n#   ensure www-data user exists\nRUN set -x \\\n && adduser -u 82 -D -S -G www-data www-data\n#   82 is the standard uid/gid for \"www-data\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_VERSION=\"7.3.6\"\nENV PHP_URL=\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add gnupg=2.2.19-r0 wget=1.20.3-r0 --no-cache --virtual .fetch-deps ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-source\nRUN set -xe \\\n && apk add argon2-dev=20171227-r2 coreutils=8.31-r0 curl-dev=7.66.0-r4 libedit-dev=20190324.3.1-r0 libsodium-dev=1.0.18-r0 libxml2-dev=2.9.9-r5 openssl-dev=1.1.1k-r0 sqlite-dev=3.28.0-r3 $PHPIZE_DEPS --no-cache --virtual .build-deps \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php*\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114' ;echo 'log_limit = 8192' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ;echo 'decorate_workers_output = no' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\n#  ###########\n#   ELGG\n#  ###########\nRUN apk add bash=5.0.0-r0 sed=4.7-r0 dumb-init=1.2.2-r1 --no-cache\n#   install the PHP extensions we need\nRUN set -ex ; apk add libjpeg-turbo-dev=2.0.4-r1 libpng-dev=1.6.37-r1 libzip-dev=1.5.2-r0 --no-cache --virtual .build-deps ; docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr ; docker-php-ext-install gd mysqli opcache zip ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add $runDeps --virtual .elgg-phpexts-rundeps ; apk del .build-deps\nRUN set -ex \\\n && apk add imagemagick-dev=7.0.8.68-r0 libtool=2.4.6-r6 $PHPIZE_DEPS --no-cache --virtual .phpize-deps \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick \\\n && docker-php-ext-install exif sockets pdo_mysql \\\n && apk add imagemagick=7.0.8.68-r0 --no-cache --virtual .imagick-runtime-deps \\\n && apk del .phpize-deps\nENV ELGG_VERSION=\"3.0.4\"\nRUN set -ex ; mkdir -p /usr/src ; curl -o elgg.zip -fSL \"https://elgg.org/about/getelgg?forward=elgg-${ELGG_VERSION}.zip\" ; unzip elgg.zip -d /usr/src/ ; rm elgg.zip ; mv /usr/src/elgg-$ELGG_VERSION /usr/src/elgg ; chown -R www-data:www-data /usr/src/elgg\nCOPY demyx-entrypoint.sh /usr/local/bin/demyx-entrypoint\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY www.conf /usr/local/etc/php-fpm.d\nRUN mkdir -p /var/log/demyx ; chmod +x /usr/local/bin/demyx-entrypoint\nEXPOSE 80/tcp\nENTRYPOINT [\"dumb-init\", \"demyx-entrypoint\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.10.0\nLABEL image=\"demyx/elgg\"\nLABEL maintainer=\"Demyx <info@demyx.sh>\"\nLABEL url=\"https://demyx.sh\"\nLABEL github=\"https://github.com/demyxco/demyx\"\nLABEL registry=\"https://hub.docker.com/u/demyx\"\nENV TZ=\"America/Los_Angeles\"\nENV NGINX_VERSION=\"1.17.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nENV NGX_CACHE_PURGE_VERSION=\"2.3\"\nENV NGX_CACHE_PURGE_SHA1=\"69ed46a23435e8dfd5579422c0c3996cf9a44291\"\nENV HEADERS_MORE_NGINX_MODULE_VERSION=\"0.33\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add --no-cache --virtual .cert-deps openssl curl ca-certificates \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \\\n && printf \"%s%s%s\\n\" \"http://nginx.org/packages/mainline/alpine/v3.9\" \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev mercurial bash alpine-sdk findutils \\\n && su - nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up ${NGINX_VERSION}-${PKG_RELEASE} \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add --no-cache $nginxPackages \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#     \n#  BUILD CUSTOM MODULES\n#\nRUN apk add --no-cache --update --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 libxslt-dev gd-dev geoip-dev \\\n && mkdir -p /usr/src \\\n && curl -o ngx_cache_purge.tar.gz -fSL \"http://labs.frickle.com/files/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}.tar.gz\" \\\n && echo \"$NGX_CACHE_PURGE_SHA1 *ngx_cache_purge.tar.gz\" | sha1sum -c - \\\n && tar -xzf ngx_cache_purge.tar.gz -C /usr/src/ \\\n && rm ngx_cache_purge.tar.gz \\\n && curl -o headers-more-nginx-module.tar.gz -fSL \"https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_NGINX_MODULE_VERSION}.tar.gz\" \\\n && tar -xzf headers-more-nginx-module.tar.gz -C /usr/src/ \\\n && rm headers-more-nginx-module.tar.gz \\\n && curl -o nginx.tar.gz -fSL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xzf nginx.tar.gz -C /usr/src/ \\\n && rm nginx.tar.gz \\\n && sed -i \"s/HTTP_MODULES/#HTTP_MODULES/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s/NGX_ADDON_SRCS/#NGX_ADDON_SRCS/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_cache_purge_module|ngx_addon_name=ngx_http_cache_purge_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_cache_purge_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_cache_purge_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_cache_purge_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_cache_purge_module.c\\\"; fi|g\" /usr/src/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_headers_more_filter_module|ngx_addon_name=ngx_http_headers_more_filter_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_headers_more_filter_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_headers_more_filter_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; fi|g\" /usr/src/headers-more-nginx-module-${HEADERS_MORE_NGINX_MODULE_VERSION}/config \\\n && cd /usr/src/nginx-\"$NGINX_VERSION\" \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_cache_purge_module.so /etc/nginx/modules \\\n && make clean \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules \\\n && rm -rf /usr/src/nginx-\"$NGINX_VERSION\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" /usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && apk del .build-deps\n#     \n#  END BUILD CUSTOM MODULES\n#\n#  dependencies required for running \"phpize\"\n#  these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#  persistent / runtime deps\nRUN apk add --no-cache ca-certificates curl tar xz openssl\n#  ensure www-data user exists\nRUN set -x \\\n && adduser -u 82 -D -S -G www-data www-data\n#  82 is the standard uid/gid for \"www-data\" in Alpine\n#  https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#  https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#  https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n# #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\n# #</autogenerated>##\n#  Apply stack smash protection to functions using local buffers and alloca()\n#  Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#  Enable optimization (-O2)\n#  Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#  Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#  https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_VERSION=\"7.3.6\"\nENV PHP_URL=\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg wget ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-source\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev libedit-dev libsodium-dev libxml2-dev openssl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php*\n#  sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114' ;echo 'log_limit = 8192' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ;echo 'decorate_workers_output = no' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\n# ###########\n#  ELGG\n# ###########\nRUN apk add --no-cache bash sed dumb-init\n#  install the PHP extensions we need\nRUN set -ex ; apk add --no-cache --virtual .build-deps libjpeg-turbo-dev libpng-dev libzip-dev ; docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr ; docker-php-ext-install gd mysqli opcache zip ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --virtual .elgg-phpexts-rundeps $runDeps ; apk del .build-deps\nRUN set -ex \\\n && apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS imagemagick-dev libtool \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick \\\n && docker-php-ext-install exif sockets pdo_mysql \\\n && apk add --no-cache --virtual .imagick-runtime-deps imagemagick \\\n && apk del .phpize-deps\nENV ELGG_VERSION=\"3.0.4\"\nRUN set -ex ; mkdir -p /usr/src ; curl -o elgg.zip -fSL \"https://elgg.org/about/getelgg?forward=elgg-${ELGG_VERSION}.zip\" ; unzip elgg.zip -d /usr/src/ ; rm elgg.zip ; mv /usr/src/elgg-$ELGG_VERSION /usr/src/elgg ; chown -R www-data:www-data /usr/src/elgg\nCOPY demyx-entrypoint.sh /usr/local/bin/demyx-entrypoint\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY www.conf /usr/local/etc/php-fpm.d\nRUN mkdir -p /var/log/demyx ; chmod +x /usr/local/bin/demyx-entrypoint\nEXPOSE 80/tcp\nENTRYPOINT [\"dumb-init\", \"demyx-entrypoint\"]\n","injectedSmells":[],"originalDockerfileHash":"25c46288d384d49741bba779e7c04bfa","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.10.0\nLABEL image=\"demyx/elgg\"\nLABEL maintainer=\"Demyx <info@demyx.sh>\"\nLABEL url=\"https://demyx.sh\"\nLABEL github=\"https://github.com/demyxco/demyx\"\nLABEL registry=\"https://hub.docker.com/u/demyx\"\nENV TZ=\"America/Los_Angeles\"\nENV NGINX_VERSION=\"1.17.0\"\nENV NJS_VERSION=\"0.3.2\"\nENV PKG_RELEASE=\"1\"\nENV NGX_CACHE_PURGE_VERSION=\"2.3\"\nENV NGX_CACHE_PURGE_SHA1=\"69ed46a23435e8dfd5579422c0c3996cf9a44291\"\nENV HEADERS_MORE_NGINX_MODULE_VERSION=\"0.33\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && case \"$apkArch\" in (x86_64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && apk add --no-cache --virtual .cert-deps openssl curl ca-certificates \\\n && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && printf \"%s%s%s\\n\" \\\n && printf \"%s%s%s\\n\" \"http://nginx.org/packages/mainline/alpine/v3.9\" \"/main\" | tee -a /etc/apk/repositories \\\n && apk del .cert-deps ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev mercurial bash alpine-sdk findutils \\\n && su - nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && hg clone https://hg.nginx.org/pkg-oss \\\n && cd pkg-oss \\\n && hg up ${NGINX_VERSION}-${PKG_RELEASE} \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps ;; esac \\\n && apk add --no-cache $nginxPackages \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && sed -i '$ d' /etc/apk/repositories \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#      \n#   BUILD CUSTOM MODULES\n#\nRUN apk add --no-cache --update --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 libxslt-dev gd-dev geoip-dev \\\n && mkdir -p /usr/src \\\n && curl -o ngx_cache_purge.tar.gz -fSL \"http://labs.frickle.com/files/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}.tar.gz\" \\\n && echo \"$NGX_CACHE_PURGE_SHA1 *ngx_cache_purge.tar.gz\" | sha1sum -c - \\\n && tar -xzf ngx_cache_purge.tar.gz -C /usr/src/ \\\n && rm ngx_cache_purge.tar.gz \\\n && curl -o headers-more-nginx-module.tar.gz -fSL \"https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_NGINX_MODULE_VERSION}.tar.gz\" \\\n && tar -xzf headers-more-nginx-module.tar.gz -C /usr/src/ \\\n && rm headers-more-nginx-module.tar.gz \\\n && curl -o nginx.tar.gz -fSL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xzf nginx.tar.gz -C /usr/src/ \\\n && rm nginx.tar.gz \\\n && sed -i \"s/HTTP_MODULES/#HTTP_MODULES/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s/NGX_ADDON_SRCS/#NGX_ADDON_SRCS/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_cache_purge_module|ngx_addon_name=ngx_http_cache_purge_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_cache_purge_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_cache_purge_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_cache_purge_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_cache_purge_module.c\\\"; fi|g\" /usr/src/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}/config \\\n && sed -i \"s|ngx_addon_name=ngx_http_headers_more_filter_module|ngx_addon_name=ngx_http_headers_more_filter_module; if test -n \\\"$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_headers_more_filter_module; ngx_module_srcs=\\\"$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"$HTTP_MODULES ngx_http_headers_more_filter_module\\\"; NGX_ADDON_SRCS=\\\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; fi|g\" /usr/src/headers-more-nginx-module-${HEADERS_MORE_NGINX_MODULE_VERSION}/config \\\n && cd /usr/src/nginx-\"$NGINX_VERSION\" \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_cache_purge_module.so /etc/nginx/modules \\\n && make clean \\\n && ./configure --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && make modules \\\n && cp objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules \\\n && rm -rf /usr/src/nginx-\"$NGINX_VERSION\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" /usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" \\\n && apk del .build-deps\n#      \n#   END BUILD CUSTOM MODULES\n#\n#   dependencies required for running \"phpize\"\n#   these get automatically installed and removed by \"docker-php-ext-*\" (unless they're already installed)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pkgconf  re2c\"\n#   persistent / runtime deps\nRUN apk add --no-cache ca-certificates curl tar xz openssl\n#   ensure www-data user exists\nRUN set -x \\\n && adduser -u 82 -D -S -G www-data www-data\n#   82 is the standard uid/gid for \"www-data\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.9-stable\n#   https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.9-stable\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN set -eux ; mkdir -p \"$PHP_INI_DIR/conf.d\" ; [ ! -d /var/www/html ] ; mkdir -p /var/www/html ; chown www-data:www-data /var/www/html ; chmod 777 /var/www/html\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D\"\nENV PHP_VERSION=\"7.3.6\"\nENV PHP_URL=\"https://www.php.net/get/php-7.3.6.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://www.php.net/get/php-7.3.6.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"fefc8967daa30ebc375b2ab2857f97da94ca81921b722ddac86b29e15c54a164\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; apk add --no-cache --virtual .fetch-deps gnupg wget ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;command -v gpgconf > /dev/null \\\n && gpgconf --kill all ;rm -rf \"$GNUPGHOME\" ; fi ; apk del --no-network .fetch-deps\nCOPY docker-php-source /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-source\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS argon2-dev coreutils curl-dev libedit-dev libsodium-dev libxml2-dev openssl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && docker-php-source extract \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --enable-option-checking=fatal --with-mhash --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl --with-libedit --with-openssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && find -type f -name '*.a' -delete \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cp -v php.ini-* \"$PHP_INI_DIR/\" \\\n && cd / \\\n && docker-php-source delete \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del --no-network .build-deps \\\n && pecl update-channels \\\n && rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php*\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '; https://github.com/docker-library/php/pull/725#issuecomment-443540114' ;echo 'log_limit = 8192' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ;echo 'decorate_workers_output = no' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\n#  ###########\n#   ELGG\n#  ###########\nRUN apk add --no-cache bash sed dumb-init\n#   install the PHP extensions we need\nRUN set -ex ; apk add --no-cache --virtual .build-deps libjpeg-turbo-dev libpng-dev libzip-dev ; docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr ; docker-php-ext-install gd mysqli opcache zip ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --virtual .elgg-phpexts-rundeps $runDeps ; apk del .build-deps\nRUN set -ex \\\n && apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS imagemagick-dev libtool \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick \\\n && docker-php-ext-install exif sockets pdo_mysql \\\n && apk add --no-cache --virtual .imagick-runtime-deps imagemagick \\\n && apk del .phpize-deps\nENV ELGG_VERSION=\"3.0.4\"\nRUN set -ex ; mkdir -p /usr/src ; curl -o elgg.zip -fSL \"https://elgg.org/about/getelgg?forward=elgg-${ELGG_VERSION}.zip\" ; unzip elgg.zip -d /usr/src/ ; rm elgg.zip ; mv /usr/src/elgg-$ELGG_VERSION /usr/src/elgg ; chown -R www-data:www-data /usr/src/elgg\nCOPY demyx-entrypoint.sh /usr/local/bin/demyx-entrypoint\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY www.conf /usr/local/etc/php-fpm.d\nRUN mkdir -p /var/log/demyx ; chmod +x /usr/local/bin/demyx-entrypoint\nEXPOSE 80/tcp\nENTRYPOINT [\"dumb-init\", \"demyx-entrypoint\"]\n","originalDockerfileUglifiedHash":"84b97849bd0eede74ac2589f284a7c54","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ad5e2de33cb6df2eb92629793ba8bddea6eba06b.dockerfile"}