{"seed":6022483,"processedDockerfileHash":"0b161fd86afb5bae57809ca7bd9dcced","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#   Create a apache user with the home directory.\nRUN adduser -g apache -D -h /var/www apache \\\n && mkdir -p -m 774 /var/www \\\n && chown apache:apache -R /var/www\n#   Update and install.\nRUN apk -U upgrade \\\n && apk add ansible=2.7.17-r0 bash=4.4.19-r1 libcap=2.26-r0 zlib=1.2.11-r1 apache2=2.4.46-r0 apache2-ssl=2.4.46-r0 php7-apache2=7.2.33-r0 php7=7.2.33-r0 git=2.20.4-r0 patch=2.7.6-r6 curl=7.64.0-r5 php7-ctype=7.2.33-r0 php7-curl=7.2.33-r0 php7-dom=7.2.33-r0 php7-fileinfo=7.2.33-r0 php7-gd=7.2.33-r0 php7-iconv=7.2.33-r0 php7-json=7.2.33-r0 php7-ldap=7.2.33-r0 php7-mbstring=7.2.33-r0 php7-mcrypt php7-memcached php7-mysqlnd=7.2.33-r0 php7-opcache=7.2.33-r0 php7-openssl=7.2.33-r0 php7-phar=7.2.33-r0 php7-sqlite3=7.2.33-r0 php7-pdo=7.2.33-r0 php7-pdo_mysql=7.2.33-r0 php7-pdo_sqlite=7.2.33-r0 php7-phar=7.2.33-r0 php7-soap=7.2.33-r0 php7-session=7.2.33-r0 php7-simplexml=7.2.33-r0 php7-tokenizer=7.2.33-r0 php7-xdebug php7-exif=7.2.33-r0 php7-xml=7.2.33-r0 php7-xmlreader=7.2.33-r0 php7-xmlwriter=7.2.33-r0 php7-zip=7.2.33-r0 php7-zlib mariadb-client=10.3.25-r0 rsync=3.1.3-r1 openssh-client=7.9_p1-r6 nodejs-npm --update --no-cache \\\n && rm -rf /tmp/* /var/cache/apk/* /usr/lib/python3.6/site-packages/ansible/modules/network/ /usr/lib/python3.6/site-packages/ansible/modules/cloud/ /usr/lib/python3.6/site-packages/ansible/modules/windows/\n#   Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#   Allow Apache to allocate ports as non-root.\nRUN setcap cap_net_bind_service=+ep /usr/sbin/httpd\n#   Chown the /etc/mysql directory so we can change my.cnf settings.\nRUN mkdir -p -m 774 /run/apache2 /etc/apache2/sites.d /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R apache:apache /etc/apache2 /etc/apache2/sites.d /etc/php7 /run/apache2 /var/log/apache2 /var/www /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default-error_log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default_ssl-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default_ssl-error_log\n#   Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#   Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#   Copy the Apache configuration files.\nCOPY httpd.conf /etc/apache2/httpd.conf\nCOPY 000_default.conf /etc/apache2/sites.d/\nCOPY ssl.conf /etc/apache2/conf.d/ssl.conf\n#   Change the ownership of the Apache SSL files.\nRUN chown -R apache:www-data /etc/ssl/apache2\n#   Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#   Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#   Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#   Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#   Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#   Copy the Ansible configuration files.\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\n#   Install drush for the apache user.\nUSER apache\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y \\\n && rm -rf /var/www/.composer/cache\n#   Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#   Install dart-sass globally.\nRUN npm install sass@1.62.0 -g \\\n && rm -rf /var/www/.npm/_cacache /tmp/*\n#   Copy the user bashrc file.\nCOPY bashrc-user /var/www/.bashrc\nEXPOSE 80/tcp 443/tcp\nWORKDIR /var/www\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/httpd\", \"-D\", \"FOREGROUND\", \"-f\", \"/etc/apache2/httpd.conf\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#  Create a apache user with the home directory.\nRUN adduser -g apache -D -h /var/www apache \\\n && mkdir -p -m 774 /var/www \\\n && chown apache:apache -R /var/www\n#  Update and install.\nRUN apk -U upgrade \\\n && apk add --update --no-cache ansible bash libcap zlib apache2 apache2-ssl php7-apache2 php7 git patch curl php7-ctype php7-curl php7-dom php7-fileinfo php7-gd php7-iconv php7-json php7-ldap php7-mbstring php7-mcrypt php7-memcached php7-mysqlnd php7-opcache php7-openssl php7-phar php7-sqlite3 php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-phar php7-soap php7-session php7-simplexml php7-tokenizer php7-xdebug php7-exif php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-zlib mariadb-client rsync openssh-client nodejs-npm \\\n && rm -rf /tmp/* /var/cache/apk/* /usr/lib/python3.6/site-packages/ansible/modules/network/ /usr/lib/python3.6/site-packages/ansible/modules/cloud/ /usr/lib/python3.6/site-packages/ansible/modules/windows/\n#  Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#  Allow Apache to allocate ports as non-root.\nRUN setcap cap_net_bind_service=+ep /usr/sbin/httpd\n#  Chown the /etc/mysql directory so we can change my.cnf settings.\nRUN mkdir -p -m 774 /run/apache2 /etc/apache2/sites.d /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R apache:apache /etc/apache2 /etc/apache2/sites.d /etc/php7 /run/apache2 /var/log/apache2 /var/www /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#  forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default-error_log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default_ssl-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default_ssl-error_log\n#  Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#  Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#  Copy the Apache configuration files.\nCOPY httpd.conf /etc/apache2/httpd.conf\nCOPY 000_default.conf /etc/apache2/sites.d/\nCOPY ssl.conf /etc/apache2/conf.d/ssl.conf\n#  Change the ownership of the Apache SSL files.\nRUN chown -R apache:www-data /etc/ssl/apache2\n#  Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#  Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#  Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#  Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#  Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#  Copy the Ansible configuration files.\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\n#  Install drush for the apache user.\nUSER apache\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y \\\n && rm -rf /var/www/.composer/cache\n#  Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#  Install dart-sass globally.\nRUN npm install sass -g \\\n && rm -rf /var/www/.npm/_cacache /tmp/*\n#  Copy the user bashrc file.\nCOPY bashrc-user /var/www/.bashrc\nEXPOSE 80/tcp 443/tcp\nWORKDIR /var/www\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/httpd\", \"-D\", \"FOREGROUND\", \"-f\", \"/etc/apache2/httpd.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"64b0a5592a03fe1c1a4c175d005be553","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.9\nMAINTAINER tess@ten7.com\n#   Create a apache user with the home directory.\nRUN adduser -g apache -D -h /var/www apache \\\n && mkdir -p -m 774 /var/www \\\n && chown apache:apache -R /var/www\n#   Update and install.\nRUN apk -U upgrade \\\n && apk add --update --no-cache ansible bash libcap zlib apache2 apache2-ssl php7-apache2 php7 git patch curl php7-ctype php7-curl php7-dom php7-fileinfo php7-gd php7-iconv php7-json php7-ldap php7-mbstring php7-mcrypt php7-memcached php7-mysqlnd php7-opcache php7-openssl php7-phar php7-sqlite3 php7-pdo php7-pdo_mysql php7-pdo_sqlite php7-phar php7-soap php7-session php7-simplexml php7-tokenizer php7-xdebug php7-exif php7-xml php7-xmlreader php7-xmlwriter php7-zip php7-zlib mariadb-client rsync openssh-client nodejs-npm \\\n && rm -rf /tmp/* /var/cache/apk/* /usr/lib/python3.6/site-packages/ansible/modules/network/ /usr/lib/python3.6/site-packages/ansible/modules/cloud/ /usr/lib/python3.6/site-packages/ansible/modules/windows/\n#   Install Python 3 dependencies from pip\nRUN pip3 install passlib PyMySQL\n#   Allow Apache to allocate ports as non-root.\nRUN setcap cap_net_bind_service=+ep /usr/sbin/httpd\n#   Chown the /etc/mysql directory so we can change my.cnf settings.\nRUN mkdir -p -m 774 /run/apache2 /etc/apache2/sites.d /var/www/.drush /var/www/.drush/sites /var/www/.npm-global \\\n && chown -R apache:apache /etc/apache2 /etc/apache2/sites.d /etc/php7 /run/apache2 /var/log/apache2 /var/www /var/www/.drush /var/www/.drush/sites /var/www/.npm-global\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/apache2/access.log \\\n && ln -sf /dev/stderr /var/log/apache2/error.log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default-error_log \\\n && ln -sf /dev/stdout /var/log/apache2/000_default_ssl-access_log \\\n && ln -sf /dev/stderr /var/log/apache2/000_default_ssl-error_log\n#   Install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer\n#   Install Drupal console\nRUN curl https://drupalconsole.com/installer -L -o /usr/bin/drupal \\\n && chmod 777 /usr/bin/drupal\n#   Copy the Apache configuration files.\nCOPY httpd.conf /etc/apache2/httpd.conf\nCOPY 000_default.conf /etc/apache2/sites.d/\nCOPY ssl.conf /etc/apache2/conf.d/ssl.conf\n#   Change the ownership of the Apache SSL files.\nRUN chown -R apache:www-data /etc/ssl/apache2\n#   Copy PHP configuration files.\nCOPY php.ini /etc/php7/\nCOPY 00_opcache.ini /etc/php7/conf.d/00_opcache.ini\nCOPY xdebug.ini /etc/php7/conf.d/xdebug.ini\n#   Copy various key scripts to a directory in $PATH.\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY vim.sh /usr/local/bin/vim\n#   Make them all executable.\nRUN chmod a+x /usr/local/bin/docker-entrypoint.sh \\\n && chmod a+x /usr/local/bin/vim\n#   Copy the entire contents of the init.d directory.\nCOPY docker-entrypoint-init.d /docker-entrypoint-init.d\nRUN chmod a+x -R /docker-entrypoint-init.d\n#   Copy the root bashrc file.\nCOPY bashrc-root /root/.bashrc\n#   Copy the Ansible configuration files.\nCOPY ansible-hosts /etc/ansible/hosts\nCOPY ansible.cfg /etc/ansible/ansible.cfg\n#   Install drush for the apache user.\nUSER apache\nRUN composer global require consolidation/cgr \\\n && /var/www/.composer/vendor/bin/cgr drush/drush:~9.5.2 \\\n && /var/www/.composer/vendor/bin/drush core:init -y \\\n && rm -rf /var/www/.composer/cache\n#   Set the dir for global node packages to be user-local.\nRUN npm config set prefix '/var/www/.npm-global'\n#   Install dart-sass globally.\nRUN npm install sass -g \\\n && rm -rf /var/www/.npm/_cacache /tmp/*\n#   Copy the user bashrc file.\nCOPY bashrc-user /var/www/.bashrc\nEXPOSE 80/tcp 443/tcp\nWORKDIR /var/www\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/httpd\", \"-D\", \"FOREGROUND\", \"-f\", \"/etc/apache2/httpd.conf\"]\n","originalDockerfileUglifiedHash":"291f2ed0f006559768f4e67c8d8f0fe2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d00caa9e9507965e237d718a4fdcc1fa45d2e3a3.dockerfile"}