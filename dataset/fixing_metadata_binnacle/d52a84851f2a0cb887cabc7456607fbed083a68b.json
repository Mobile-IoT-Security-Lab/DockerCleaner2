{"seed":2484415314,"processedDockerfileHash":"1c767e6f4cf8dd9c366779073b64f6ae","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.6\nMAINTAINER Sofia Karvounari <karvoun@di.uoa.gr>\n#   Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.23-r2\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add wget=1.20.3-r0 ca-certificates=20161130-r3 --no-cache --virtual=build-dependencies \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --allow-untrusted --no-cache \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV LANG=\"C.UTF-8\"\n#  #######################################################\n#   Install Java (Shamelessly copy pasted from develar/java,\n#   https://github.com/develar/docker-java/blob/master/Dockerfile)\n#\n#   LSC: Updated for new URLs schemes on the Oracle website.\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"141\" \\\n    JAVA_VERSION_BUILD=\"15\" \\\n    JAVA_VERSION_HASH=\"336fa29ff2bb4ef291e347e091f7f4a7\" \\\n    JAVA_PACKAGE=\"server-jre\" \\\n    JAVA_HOME=\"/jre\" \\\n    PATH=\"${PATH}:/jre/bin\" \\\n    LANG=\"C.UTF-8\"\n#   about nsswitch.conf - see https://registry.hub.docker.com/u/frolvlad/alpine-oraclejdk8/dockerfile/\n#  /usr/glibc/usr/bin/ldconfig /lib /usr/glibc/usr/lib && \\\nRUN apk add curl=7.61.1-r2 ca-certificates=20161130-r3 --update \\\n && cd /tmp \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_VERSION_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz\" | gunzip -c - | tar -xf - \\\n && apk del curl ca-certificates \\\n && mv jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/jre /jre \\\n && rm /jre/bin/jjs \\\n && rm /jre/bin/keytool \\\n && rm /jre/bin/orbd \\\n && rm /jre/bin/pack200 \\\n && rm /jre/bin/policytool \\\n && rm /jre/bin/rmid \\\n && rm /jre/bin/rmiregistry \\\n && rm /jre/bin/servertool \\\n && rm /jre/bin/tnameserv \\\n && rm /jre/bin/unpack200 \\\n && rm /jre/lib/ext/nashorn.jar \\\n && rm /jre/lib/jfr.jar \\\n && rm -rf /jre/lib/jfr \\\n && rm -rf /jre/lib/oblique-fonts \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Some extra python libraries for the mip-algorithms, which needs to be\n#   compiled by hand\nCOPY files/requirements.txt /root/requirements.txt\nRUN apk add py-psycopg2=2.7.1-r0 py-pip ca-certificates=20161130-r3 gcc=6.3.0-r4 musl-dev=1.1.16-r15 python-dev lapack-dev=3.7.0-r0 g++=6.3.0-r4 gfortran=6.3.0-r4 --update \\\n && pip install -r /root/requirements.txt \\\n && pip install liac-arff==2.5.0 \\\n && apk del py-pip ca-certificates gcc musl-dev python-dev lapack-dev gfortran \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Runtime dependencies for Exareme\nRUN apk add rsync=3.1.3-r0 curl=7.61.1-r2 bash=4.3.48-r1 jq=1.5-r4 python py-requests=2.13.0-r0 lapack=3.7.0-r0 procps=3.3.12-r1 --update --no-cache \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Add Exareme\nCOPY src/exareme/exareme-distribution/target/exareme /root/exareme\n#   Add the algorithms\nCOPY src/mip-algorithms /root/mip-algorithms\n#   Exareme configuration, ssh keys and so on\n#   This has to be done after copying in the algorithms and exareme, as some\n#   files are placed in folders created by those two steps.\nCOPY files/java.sh /etc/profile.d/java.sh\nRUN chmod 755 /etc/profile.d/java.sh\nCOPY files/root /root\nRUN chmod -R 755 /root/exareme/\nEXPOSE 9090/tcp\nEXPOSE 22/tcp\nENV USER=\"root\"\nWORKDIR /root/exareme\nCMD [\"/bin/bash\", \"bootstrap.sh\"]\n#   While debugging\n#  ENTRYPOINT /bin/sh\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.6\nMAINTAINER Sofia Karvounari <karvoun@di.uoa.gr>\n#  Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.23-r2\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=build-dependencies wget ca-certificates \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --allow-untrusted --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV LANG=\"C.UTF-8\"\n# #######################################################\n#  Install Java (Shamelessly copy pasted from develar/java,\n#  https://github.com/develar/docker-java/blob/master/Dockerfile)\n#\n#  LSC: Updated for new URLs schemes on the Oracle website.\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"141\" \\\n    JAVA_VERSION_BUILD=\"15\" \\\n    JAVA_VERSION_HASH=\"336fa29ff2bb4ef291e347e091f7f4a7\" \\\n    JAVA_PACKAGE=\"server-jre\" \\\n    JAVA_HOME=\"/jre\" \\\n    PATH=\"${PATH}:/jre/bin\" \\\n    LANG=\"C.UTF-8\"\n#  about nsswitch.conf - see https://registry.hub.docker.com/u/frolvlad/alpine-oraclejdk8/dockerfile/\n# /usr/glibc/usr/bin/ldconfig /lib /usr/glibc/usr/lib && \\\nRUN apk add --update curl ca-certificates \\\n && cd /tmp \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_VERSION_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz\" | gunzip -c - | tar -xf - \\\n && apk del curl ca-certificates \\\n && mv jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/jre /jre \\\n && rm /jre/bin/jjs \\\n && rm /jre/bin/keytool \\\n && rm /jre/bin/orbd \\\n && rm /jre/bin/pack200 \\\n && rm /jre/bin/policytool \\\n && rm /jre/bin/rmid \\\n && rm /jre/bin/rmiregistry \\\n && rm /jre/bin/servertool \\\n && rm /jre/bin/tnameserv \\\n && rm /jre/bin/unpack200 \\\n && rm /jre/lib/ext/nashorn.jar \\\n && rm /jre/lib/jfr.jar \\\n && rm -rf /jre/lib/jfr \\\n && rm -rf /jre/lib/oblique-fonts \\\n && rm -rf /tmp/* /var/cache/apk/*\n#  Some extra python libraries for the mip-algorithms, which needs to be\n#  compiled by hand\nADD files/requirements.txt /root/requirements.txt\nRUN apk add --update py-psycopg2 py-pip ca-certificates gcc musl-dev python-dev lapack-dev g++ gfortran \\\n && pip install -r /root/requirements.txt \\\n && pip install liac-arff \\\n && apk del py-pip ca-certificates gcc musl-dev python-dev lapack-dev gfortran \\\n && rm -rf /tmp/* /var/cache/apk/*\n#  Runtime dependencies for Exareme\nRUN apk add --update rsync curl bash jq python py-requests lapack --no-cache procps \\\n && rm -rf /tmp/* /var/cache/apk/*\n#  Add Exareme\nADD src/exareme/exareme-distribution/target/exareme /root/exareme\n#  Add the algorithms\nADD src/mip-algorithms /root/mip-algorithms\n#  Exareme configuration, ssh keys and so on\n#  This has to be done after copying in the algorithms and exareme, as some\n#  files are placed in folders created by those two steps.\nADD files/java.sh /etc/profile.d/java.sh\nRUN chmod 755 /etc/profile.d/java.sh\nADD files/root /root\nRUN chmod -R 755 /root/exareme/\nEXPOSE 9090/tcp\nEXPOSE 22/tcp\nENV USER=\"root\"\nWORKDIR /root/exareme\nCMD [\"/bin/bash\", \"bootstrap.sh\"]\n#  While debugging\n# ENTRYPOINT /bin/sh\n","injectedSmells":[],"originalDockerfileHash":"8c0c37a410298ddb570bbd3194152b52","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.6\nMAINTAINER Sofia Karvounari <karvoun@di.uoa.gr>\n#   Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.23-r2\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=build-dependencies wget ca-certificates \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --allow-untrusted --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && apk del build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV LANG=\"C.UTF-8\"\n#  #######################################################\n#   Install Java (Shamelessly copy pasted from develar/java,\n#   https://github.com/develar/docker-java/blob/master/Dockerfile)\n#\n#   LSC: Updated for new URLs schemes on the Oracle website.\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"141\" \\\n    JAVA_VERSION_BUILD=\"15\" \\\n    JAVA_VERSION_HASH=\"336fa29ff2bb4ef291e347e091f7f4a7\" \\\n    JAVA_PACKAGE=\"server-jre\" \\\n    JAVA_HOME=\"/jre\" \\\n    PATH=\"${PATH}:/jre/bin\" \\\n    LANG=\"C.UTF-8\"\n#   about nsswitch.conf - see https://registry.hub.docker.com/u/frolvlad/alpine-oraclejdk8/dockerfile/\n#  /usr/glibc/usr/bin/ldconfig /lib /usr/glibc/usr/lib && \\\nRUN apk add --update curl ca-certificates \\\n && cd /tmp \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_VERSION_HASH}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz\" | gunzip -c - | tar -xf - \\\n && apk del curl ca-certificates \\\n && mv jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR}/jre /jre \\\n && rm /jre/bin/jjs \\\n && rm /jre/bin/keytool \\\n && rm /jre/bin/orbd \\\n && rm /jre/bin/pack200 \\\n && rm /jre/bin/policytool \\\n && rm /jre/bin/rmid \\\n && rm /jre/bin/rmiregistry \\\n && rm /jre/bin/servertool \\\n && rm /jre/bin/tnameserv \\\n && rm /jre/bin/unpack200 \\\n && rm /jre/lib/ext/nashorn.jar \\\n && rm /jre/lib/jfr.jar \\\n && rm -rf /jre/lib/jfr \\\n && rm -rf /jre/lib/oblique-fonts \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Some extra python libraries for the mip-algorithms, which needs to be\n#   compiled by hand\nADD files/requirements.txt /root/requirements.txt\nRUN apk add --update py-psycopg2 py-pip ca-certificates gcc musl-dev python-dev lapack-dev g++ gfortran \\\n && pip install -r /root/requirements.txt \\\n && pip install liac-arff \\\n && apk del py-pip ca-certificates gcc musl-dev python-dev lapack-dev gfortran \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Runtime dependencies for Exareme\nRUN apk add --update rsync curl bash jq python py-requests lapack --no-cache procps \\\n && rm -rf /tmp/* /var/cache/apk/*\n#   Add Exareme\nADD src/exareme/exareme-distribution/target/exareme /root/exareme\n#   Add the algorithms\nADD src/mip-algorithms /root/mip-algorithms\n#   Exareme configuration, ssh keys and so on\n#   This has to be done after copying in the algorithms and exareme, as some\n#   files are placed in folders created by those two steps.\nADD files/java.sh /etc/profile.d/java.sh\nRUN chmod 755 /etc/profile.d/java.sh\nADD files/root /root\nRUN chmod -R 755 /root/exareme/\nEXPOSE 9090/tcp\nEXPOSE 22/tcp\nENV USER=\"root\"\nWORKDIR /root/exareme\nCMD [\"/bin/bash\", \"bootstrap.sh\"]\n#   While debugging\n#  ENTRYPOINT /bin/sh\n","originalDockerfileUglifiedHash":"a43fc9239bff961dcdb445505cc69bbc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d52a84851f2a0cb887cabc7456607fbed083a68b.dockerfile"}