{"seed":1562740466,"processedDockerfileHash":"9f161c9e9344a8c4840550ba4b81154d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck"],"processedDockerfile":"FROM golang:1.12-stretch\nMAINTAINER Sander Pick <sander@textile.io>\n#   This is (in large part) copied (with love) from\n#   https://hub.docker.com/r/ipfs/go-ipfs/dockerfile\n#   Get source\nENV SRC_DIR=\"/go-textile\"\n#   Download packages first so they can be cached.\nCOPY go.mod go.sum $SRC_DIR/\nRUN cd $SRC_DIR \\\n && go mod download\nCOPY . $SRC_DIR\n#   build source\nRUN cd $SRC_DIR \\\n && go get github.com/ahmetb/govvv \\\n && make build\n#   Get su-exec, a very minimal tool for dropping privileges,\n#   and tini, a very minimal init daemon for containers\nENV SUEXEC_VERSION=\"v0.2\"\nENV TINI_VERSION=\"v0.16.1\"\nRUN set -x \\\n && cd /tmp \\\n && git clone https://github.com/ncopa/su-exec.git \\\n && cd su-exec \\\n && git checkout -q $SUEXEC_VERSION \\\n && make \\\n && cd /tmp \\\n && wget -q -O tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini \\\n && chmod +x tini\n#   Get the TLS CA certificates, they're not provided by busybox.\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates -y\n#   Now comes the actual target image, which aims to be as small as possible.\nFROM busybox:1-glibc\nMAINTAINER Sander Pick <sander@textile.io>\n#   Get the ipfs binary, entrypoint script, and TLS CAs from the build container.\nENV SRC_DIR=\"/go-textile\"\nCOPY --from=0 $SRC_DIR/dist/textile /usr/local/bin/textile\nCOPY --from=0 $SRC_DIR/bin/container_daemon /usr/local/bin/start_textile\nCOPY --from=0 /tmp/su-exec/su-exec /sbin/su-exec\nCOPY --from=0 /tmp/tini /sbin/tini\nCOPY --from=0 /etc/ssl/certs /etc/ssl/certs\n#   This shared lib (part of glibc) doesn't seem to be included with busybox.\nCOPY --from=0 /lib/x86_64-linux-gnu/libdl-2.24.so /lib/libdl.so.2\n#   Swarm TCP; should be exposed to the public\nEXPOSE 4001/tcp\n#   Swarm Websockets; must be exposed publicly when the node is listening using the websocket transport (/ipX/.../tcp/8081/ws).\nEXPOSE 8081/tcp\n#   Daemon API; must not be exposed publicly but to client services under you control\nEXPOSE 40600/tcp\n#   Cafe API; should be exposed to the public\nEXPOSE 40601/tcp\n#   Web Gateway;\nEXPOSE 5050/tcp\n#   Profiling API;\nEXPOSE 6060/tcp\n#   Create the fs-repo directory\nENV TEXTILE_PATH=\"/data/textile\"\nRUN mkdir -p $TEXTILE_PATH \\\n && adduser -D -h $TEXTILE_PATH -u 1000 -G users textile \\\n && chown textile:users $TEXTILE_PATH\n#   Switch to a non-privileged user\nUSER textile\n#   Expose the fs-repo as a volume.\n#   start_textile initializes an fs-repo if none is mounted.\n#   Important this happens after the USER directive so permission are correct.\nVOLUME $TEXTILE_PATH\n#   Bump swarm limit\nENV LIBP2P_SWARM_FD_LIMIT=\"5000\"\n#   Init opts\nENV INIT_ARGS=\"--repo=\\\"$TEXTILE_PATH\\\"  --swarm-ports=4001,8081  --api-bind-addr=0.0.0.0:40600  --gateway-bind-addr=0.0.0.0:5050  --cafe-bind-addr=0.0.0.0:40601  --profile-bind-addr=0.0.0.0:6060  --server  --cafe-open  --debug\"\n#   This just makes sure that:\n#   1. There's an fs-repo, and initializes one if there isn't.\n#   2. The API and Gateway are accessible from outside the container.\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/start_textile\"]\n#   Execute the daemon subcommand by default\nCMD [\"daemon\", \"--repo=/data/textile\", \"--debug\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM golang:1.12-stretch\nMAINTAINER Sander Pick <sander@textile.io>\n#  This is (in large part) copied (with love) from\n#  https://hub.docker.com/r/ipfs/go-ipfs/dockerfile\n#  Get source\nENV SRC_DIR=\"/go-textile\"\n#  Download packages first so they can be cached.\nCOPY go.mod go.sum $SRC_DIR/\nRUN cd $SRC_DIR \\\n && go mod download\nCOPY . $SRC_DIR\n#  build source\nRUN cd $SRC_DIR \\\n && go get github.com/ahmetb/govvv \\\n && make build\n#  Get su-exec, a very minimal tool for dropping privileges,\n#  and tini, a very minimal init daemon for containers\nENV SUEXEC_VERSION=\"v0.2\"\nENV TINI_VERSION=\"v0.16.1\"\nRUN set -x \\\n && cd /tmp \\\n && git clone https://github.com/ncopa/su-exec.git \\\n && cd su-exec \\\n && git checkout -q $SUEXEC_VERSION \\\n && make \\\n && cd /tmp \\\n && wget -q -O tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini \\\n && chmod +x tini\n#  Get the TLS CA certificates, they're not provided by busybox.\nRUN apt-get update \\\n && apt-get install ca-certificates -y\n#  Now comes the actual target image, which aims to be as small as possible.\nFROM busybox:1-glibc\nMAINTAINER Sander Pick <sander@textile.io>\n#  Get the ipfs binary, entrypoint script, and TLS CAs from the build container.\nENV SRC_DIR=\"/go-textile\"\nCOPY --from=0 $SRC_DIR/dist/textile /usr/local/bin/textile\nCOPY --from=0 $SRC_DIR/bin/container_daemon /usr/local/bin/start_textile\nCOPY --from=0 /tmp/su-exec/su-exec /sbin/su-exec\nCOPY --from=0 /tmp/tini /sbin/tini\nCOPY --from=0 /etc/ssl/certs /etc/ssl/certs\n#  This shared lib (part of glibc) doesn't seem to be included with busybox.\nCOPY --from=0 /lib/x86_64-linux-gnu/libdl-2.24.so /lib/libdl.so.2\n#  Swarm TCP; should be exposed to the public\nEXPOSE 4001/tcp\n#  Swarm Websockets; must be exposed publicly when the node is listening using the websocket transport (/ipX/.../tcp/8081/ws).\nEXPOSE 8081/tcp\n#  Daemon API; must not be exposed publicly but to client services under you control\nEXPOSE 40600/tcp\n#  Cafe API; should be exposed to the public\nEXPOSE 40601/tcp\n#  Web Gateway;\nEXPOSE 5050/tcp\n#  Profiling API;\nEXPOSE 6060/tcp\n#  Create the fs-repo directory\nENV TEXTILE_PATH=\"/data/textile\"\nRUN mkdir -p $TEXTILE_PATH \\\n && adduser -D -h $TEXTILE_PATH -u 1000 -G users textile \\\n && chown textile:users $TEXTILE_PATH\n#  Switch to a non-privileged user\nUSER textile\n#  Expose the fs-repo as a volume.\n#  start_textile initializes an fs-repo if none is mounted.\n#  Important this happens after the USER directive so permission are correct.\nVOLUME $TEXTILE_PATH\n#  Bump swarm limit\nENV LIBP2P_SWARM_FD_LIMIT=\"5000\"\n#  Init opts\nENV INIT_ARGS=\"--repo=\\\"$TEXTILE_PATH\\\"  --swarm-ports=4001,8081  --api-bind-addr=0.0.0.0:40600  --gateway-bind-addr=0.0.0.0:5050  --cafe-bind-addr=0.0.0.0:40601  --profile-bind-addr=0.0.0.0:6060  --server  --cafe-open  --debug\"\n#  This just makes sure that:\n#  1. There's an fs-repo, and initializes one if there isn't.\n#  2. The API and Gateway are accessible from outside the container.\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/start_textile\"]\n#  Execute the daemon subcommand by default\nCMD [\"daemon\", \"--repo=/data/textile\", \"--debug\"]\n","injectedSmells":[],"originalDockerfileHash":"447cbf9ef72b1cfa60e259925d2586f2","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM golang:1.12-stretch\nMAINTAINER Sander Pick <sander@textile.io>\n#   This is (in large part) copied (with love) from\n#   https://hub.docker.com/r/ipfs/go-ipfs/dockerfile\n#   Get source\nENV SRC_DIR=\"/go-textile\"\n#   Download packages first so they can be cached.\nCOPY go.mod go.sum $SRC_DIR/\nRUN cd $SRC_DIR \\\n && go mod download\nCOPY . $SRC_DIR\n#   build source\nRUN cd $SRC_DIR \\\n && go get github.com/ahmetb/govvv \\\n && make build\n#   Get su-exec, a very minimal tool for dropping privileges,\n#   and tini, a very minimal init daemon for containers\nENV SUEXEC_VERSION=\"v0.2\"\nENV TINI_VERSION=\"v0.16.1\"\nRUN set -x \\\n && cd /tmp \\\n && git clone https://github.com/ncopa/su-exec.git \\\n && cd su-exec \\\n && git checkout -q $SUEXEC_VERSION \\\n && make \\\n && cd /tmp \\\n && wget -q -O tini https://github.com/krallin/tini/releases/download/$TINI_VERSION/tini \\\n && chmod +x tini\n#   Get the TLS CA certificates, they're not provided by busybox.\nRUN apt-get update \\\n && apt-get install ca-certificates -y\n#   Now comes the actual target image, which aims to be as small as possible.\nFROM busybox:1-glibc\nMAINTAINER Sander Pick <sander@textile.io>\n#   Get the ipfs binary, entrypoint script, and TLS CAs from the build container.\nENV SRC_DIR=\"/go-textile\"\nCOPY --from=0 $SRC_DIR/dist/textile /usr/local/bin/textile\nCOPY --from=0 $SRC_DIR/bin/container_daemon /usr/local/bin/start_textile\nCOPY --from=0 /tmp/su-exec/su-exec /sbin/su-exec\nCOPY --from=0 /tmp/tini /sbin/tini\nCOPY --from=0 /etc/ssl/certs /etc/ssl/certs\n#   This shared lib (part of glibc) doesn't seem to be included with busybox.\nCOPY --from=0 /lib/x86_64-linux-gnu/libdl-2.24.so /lib/libdl.so.2\n#   Swarm TCP; should be exposed to the public\nEXPOSE 4001/tcp\n#   Swarm Websockets; must be exposed publicly when the node is listening using the websocket transport (/ipX/.../tcp/8081/ws).\nEXPOSE 8081/tcp\n#   Daemon API; must not be exposed publicly but to client services under you control\nEXPOSE 40600/tcp\n#   Cafe API; should be exposed to the public\nEXPOSE 40601/tcp\n#   Web Gateway;\nEXPOSE 5050/tcp\n#   Profiling API;\nEXPOSE 6060/tcp\n#   Create the fs-repo directory\nENV TEXTILE_PATH=\"/data/textile\"\nRUN mkdir -p $TEXTILE_PATH \\\n && adduser -D -h $TEXTILE_PATH -u 1000 -G users textile \\\n && chown textile:users $TEXTILE_PATH\n#   Switch to a non-privileged user\nUSER textile\n#   Expose the fs-repo as a volume.\n#   start_textile initializes an fs-repo if none is mounted.\n#   Important this happens after the USER directive so permission are correct.\nVOLUME $TEXTILE_PATH\n#   Bump swarm limit\nENV LIBP2P_SWARM_FD_LIMIT=\"5000\"\n#   Init opts\nENV INIT_ARGS=\"--repo=\\\"$TEXTILE_PATH\\\"  --swarm-ports=4001,8081  --api-bind-addr=0.0.0.0:40600  --gateway-bind-addr=0.0.0.0:5050  --cafe-bind-addr=0.0.0.0:40601  --profile-bind-addr=0.0.0.0:6060  --server  --cafe-open  --debug\"\n#   This just makes sure that:\n#   1. There's an fs-repo, and initializes one if there isn't.\n#   2. The API and Gateway are accessible from outside the container.\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/start_textile\"]\n#   Execute the daemon subcommand by default\nCMD [\"daemon\", \"--repo=/data/textile\", \"--debug\"]\n","originalDockerfileUglifiedHash":"f425a190077adf69ee0c68bbd2bedbc9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d85882b413edf74a8f2f5a6cf812d955e89694cc.dockerfile"}