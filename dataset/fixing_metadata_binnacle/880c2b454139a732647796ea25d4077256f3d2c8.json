{"seed":1748827670,"processedDockerfileHash":"5d0882afef82577302e2ce8e7bd2a973","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG IMAGE=arm32v7/debian:stretch-slim\nFROM $IMAGE AS builder\nMAINTAINER datarhei <info@datarhei.org>\nARG LAME_VERSION=3.100\nARG X264_VERSION=20190409-2245-stable\nARG X265_VERSION=3.0\nARG FFMPEG_VERSION=4.1.3\nARG NGINX_VERSION=1.14.2\nARG NGINXRTMP_VERSION=1.2.1\nARG NODE_VERSION=10.15.3\nENV SRC=\"/usr/local/\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends pkg-config=1.8.1-1ubuntu2 curl=7.88.1-7ubuntu1 libpcre3-dev=2:8.39-15 libtool=2.4.7-5 libssl-dev=3.0.8-1ubuntu1 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 libasound2-dev=1.2.8-1build1 build-essential=12.9ubuntu3 -y\n#   x264\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"http://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2\" \\\n && tar -xvj -f x264-snapshot-${X264_VERSION}.tar.bz2 \\\n && cd x264-snapshot-${X264_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#   libmp3lame\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://kent.dl.sourceforge.net/project/lame/lame/${LAME_VERSION}/lame-${LAME_VERSION}.tar.gz\" \\\n && tar -xvz -f lame-${LAME_VERSION}.tar.gz \\\n && cd lame-${LAME_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static \\\n && make -j$( nproc ;) \\\n && make install\n#   ffmpeg && patch\nCOPY ./contrib/ffmpeg /dist/restreamer/contrib/ffmpeg\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz\" \\\n && tar -xvz -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && cd ffmpeg-${FFMPEG_VERSION} \\\n && patch -p1 < /dist/restreamer/contrib/ffmpeg/bitrate.patch \\\n && ./configure --bindir=\"${SRC}/bin\" --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --prefix=\"${SRC}\" --enable-nonfree --enable-gpl --enable-version3 --enable-libmp3lame --enable-libx264 --enable-openssl --enable-postproc --enable-small --enable-static --disable-debug --disable-doc --disable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#   nginx-rtmp\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xvz -f \"nginx-${NGINX_VERSION}.tar.gz\" \\\n && curl -OL \"https://github.com/arut/nginx-rtmp-module/archive/v${NGINXRTMP_VERSION}.tar.gz\" \\\n && tar -xvz -f \"v${NGINXRTMP_VERSION}.tar.gz\" \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --add-module=/dist/nginx-rtmp-module-${NGINXRTMP_VERSION} \\\n && make -j$( nproc ;) \\\n && make install\n#   node.js\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && tar -xvJ -f \"node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && cd node-v${NODE_VERSION}-linux-armv7l \\\n && cp -R bin /usr/local \\\n && cp -R lib /usr/local\nRUN rm -r /dist \\\n && apt-get remove -y pkg-config curl libpcre3-dev libtool libssl-dev zlib1g-dev build-essential \\\n && apt-get autoremove -y\nFROM $IMAGE\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /usr/local/nginx /usr/local/nginx\nCOPY --from=builder /usr/local/lib /usr/local/lib\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20230311 git=1:2.39.2-1ubuntu1 procps=2:4.0.3-1ubuntu1 libpcre3=2:8.39-15 openssl=3.0.8-1ubuntu1 libssl1.1 zlib1g=1:1.2.13.dfsg-1ubuntu4 v4l-utils=1.22.1-5build1 libv4l-0=1.22.1-5build1 alsa-utils=1.2.8-1ubuntu1 -y\nCOPY . /restreamer\nWORKDIR /restreamer\nRUN cd /restreamer \\\n && npm install grunt-cli@1.4.3 nodemon@2.0.22 eslint@8.38.0 -g \\\n && npm install \\\n && grunt build \\\n && npm prune --production \\\n && npm cache verify \\\n && npm uninstall -g grunt-cli nodemon eslint \\\n && npm prune --production \\\n && apt-get remove -y git curl \\\n && apt-get autoremove -y\nEXPOSE 8080/tcp\nEXPOSE 8181/tcp\nVOLUME [\"/restreamer/db\"]\nCMD [\"./run.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG IMAGE=arm32v7/debian:stretch-slim\nFROM $IMAGE AS builder\nMAINTAINER datarhei <info@datarhei.org>\nARG LAME_VERSION=3.100\nARG X264_VERSION=20190409-2245-stable\nARG X265_VERSION=3.0\nARG FFMPEG_VERSION=4.1.3\nARG NGINX_VERSION=1.14.2\nARG NGINXRTMP_VERSION=1.2.1\nARG NODE_VERSION=10.15.3\nENV SRC=\"/usr/local/\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\"\nRUN apt-get update \\\n && apt-get install pkg-config curl libpcre3-dev libtool libssl-dev zlib1g-dev libasound2-dev build-essential -y\n#  x264\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"http://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2\" \\\n && tar -xvj -f x264-snapshot-${X264_VERSION}.tar.bz2 \\\n && cd x264-snapshot-${X264_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#  libmp3lame\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://kent.dl.sourceforge.net/project/lame/lame/${LAME_VERSION}/lame-${LAME_VERSION}.tar.gz\" \\\n && tar -xvz -f lame-${LAME_VERSION}.tar.gz \\\n && cd lame-${LAME_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static \\\n && make -j$( nproc ;) \\\n && make install\n#  ffmpeg && patch\nCOPY ./contrib/ffmpeg /dist/restreamer/contrib/ffmpeg\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz\" \\\n && tar -xvz -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && cd ffmpeg-${FFMPEG_VERSION} \\\n && patch -p1 < /dist/restreamer/contrib/ffmpeg/bitrate.patch \\\n && ./configure --bindir=\"${SRC}/bin\" --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --prefix=\"${SRC}\" --enable-nonfree --enable-gpl --enable-version3 --enable-libmp3lame --enable-libx264 --enable-openssl --enable-postproc --enable-small --enable-static --disable-debug --disable-doc --disable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#  nginx-rtmp\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xvz -f \"nginx-${NGINX_VERSION}.tar.gz\" \\\n && curl -OL \"https://github.com/arut/nginx-rtmp-module/archive/v${NGINXRTMP_VERSION}.tar.gz\" \\\n && tar -xvz -f \"v${NGINXRTMP_VERSION}.tar.gz\" \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --add-module=/dist/nginx-rtmp-module-${NGINXRTMP_VERSION} \\\n && make -j$( nproc ;) \\\n && make install\n#  node.js\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && tar -xvJ -f \"node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && cd node-v${NODE_VERSION}-linux-armv7l \\\n && cp -R bin /usr/local \\\n && cp -R lib /usr/local\nRUN rm -r /dist \\\n && apt-get remove -y pkg-config curl libpcre3-dev libtool libssl-dev zlib1g-dev build-essential \\\n && apt-get autoremove -y\nFROM $IMAGE\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /usr/local/nginx /usr/local/nginx\nCOPY --from=builder /usr/local/lib /usr/local/lib\nRUN apt-get update \\\n && apt-get install ca-certificates git procps libpcre3 openssl libssl1.1 zlib1g v4l-utils libv4l-0 alsa-utils -y\nCOPY . /restreamer\nWORKDIR /restreamer\nRUN cd /restreamer \\\n && npm install grunt-cli nodemon eslint -g \\\n && npm install \\\n && grunt build \\\n && npm prune --production \\\n && npm cache verify \\\n && npm uninstall -g grunt-cli nodemon eslint \\\n && npm prune --production \\\n && apt-get remove -y git curl \\\n && apt-get autoremove -y\nEXPOSE 8080/tcp\nEXPOSE 8181/tcp\nVOLUME [\"/restreamer/db\"]\nCMD [\"./run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"e9f0bb75b4a4373bef460e49683cfe16","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG IMAGE=arm32v7/debian:stretch-slim\nFROM $IMAGE AS builder\nMAINTAINER datarhei <info@datarhei.org>\nARG LAME_VERSION=3.100\nARG X264_VERSION=20190409-2245-stable\nARG X265_VERSION=3.0\nARG FFMPEG_VERSION=4.1.3\nARG NGINX_VERSION=1.14.2\nARG NGINXRTMP_VERSION=1.2.1\nARG NODE_VERSION=10.15.3\nENV SRC=\"/usr/local/\" \\\n    LD_LIBRARY_PATH=\"/usr/local/lib\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\"\nRUN apt-get update \\\n && apt-get install pkg-config curl libpcre3-dev libtool libssl-dev zlib1g-dev libasound2-dev build-essential -y\n#   x264\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"http://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2\" \\\n && tar -xvj -f x264-snapshot-${X264_VERSION}.tar.bz2 \\\n && cd x264-snapshot-${X264_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#   libmp3lame\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://kent.dl.sourceforge.net/project/lame/lame/${LAME_VERSION}/lame-${LAME_VERSION}.tar.gz\" \\\n && tar -xvz -f lame-${LAME_VERSION}.tar.gz \\\n && cd lame-${LAME_VERSION} \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static \\\n && make -j$( nproc ;) \\\n && make install\n#   ffmpeg && patch\nCOPY ./contrib/ffmpeg /dist/restreamer/contrib/ffmpeg\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz\" \\\n && tar -xvz -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && cd ffmpeg-${FFMPEG_VERSION} \\\n && patch -p1 < /dist/restreamer/contrib/ffmpeg/bitrate.patch \\\n && ./configure --bindir=\"${SRC}/bin\" --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --prefix=\"${SRC}\" --enable-nonfree --enable-gpl --enable-version3 --enable-libmp3lame --enable-libx264 --enable-openssl --enable-postproc --enable-small --enable-static --disable-debug --disable-doc --disable-shared \\\n && make -j$( nproc ;) \\\n && make install\n#   nginx-rtmp\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" \\\n && tar -xvz -f \"nginx-${NGINX_VERSION}.tar.gz\" \\\n && curl -OL \"https://github.com/arut/nginx-rtmp-module/archive/v${NGINXRTMP_VERSION}.tar.gz\" \\\n && tar -xvz -f \"v${NGINXRTMP_VERSION}.tar.gz\" \\\n && cd nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --add-module=/dist/nginx-rtmp-module-${NGINXRTMP_VERSION} \\\n && make -j$( nproc ;) \\\n && make install\n#   node.js\nRUN mkdir -p /dist \\\n && cd /dist \\\n && curl -OL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && tar -xvJ -f \"node-v${NODE_VERSION}-linux-armv7l.tar.xz\" \\\n && cd node-v${NODE_VERSION}-linux-armv7l \\\n && cp -R bin /usr/local \\\n && cp -R lib /usr/local\nRUN rm -r /dist \\\n && apt-get remove -y pkg-config curl libpcre3-dev libtool libssl-dev zlib1g-dev build-essential \\\n && apt-get autoremove -y\nFROM $IMAGE\nCOPY --from=builder /usr/local/bin /usr/local/bin\nCOPY --from=builder /usr/local/nginx /usr/local/nginx\nCOPY --from=builder /usr/local/lib /usr/local/lib\nRUN apt-get update \\\n && apt-get install ca-certificates git procps libpcre3 openssl libssl1.1 zlib1g v4l-utils libv4l-0 alsa-utils -y\nCOPY . /restreamer\nWORKDIR /restreamer\nRUN cd /restreamer \\\n && npm install grunt-cli nodemon eslint -g \\\n && npm install \\\n && grunt build \\\n && npm prune --production \\\n && npm cache verify \\\n && npm uninstall -g grunt-cli nodemon eslint \\\n && npm prune --production \\\n && apt-get remove -y git curl \\\n && apt-get autoremove -y\nEXPOSE 8080/tcp\nEXPOSE 8181/tcp\nVOLUME [\"/restreamer/db\"]\nCMD [\"./run.sh\"]\n","originalDockerfileUglifiedHash":"4c00fb515642c44a76f5127f879746c2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/880c2b454139a732647796ea25d4077256f3d2c8.dockerfile"}