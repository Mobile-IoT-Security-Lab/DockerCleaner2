{"seed":2794097543,"processedDockerfileHash":"f9ee476c3e989155925465ae496715b7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2017 Sony Corporation. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM ubuntu:16.04\nENV LC_ALL=\"C\"\nENV LANG=\"C\"\nENV LANGUAGE=\"C\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 bzip2=1.0.6-8ubuntu0.2 ca-certificates=20210119~16.04.1 ccache=3.2.4-1 clang-format-3.8=1:3.8-2ubuntu4 cmake=3.5.1-1ubuntu3 curl=7.47.0-1ubuntu2.19 g++=4:5.3.1-1ubuntu1 git=1:2.7.4-0ubuntu1.10 libarchive-dev=3.1.2-11ubuntu0.16.04.8 libgoogle-glog-dev=0.3.4-0.1 libgtest-dev=1.7.0-4ubuntu1 libhdf5-dev=1.8.16+docs-4ubuntu1.1 libleveldb-dev=1.18-5 liblmdb-dev=0.9.17-3 libsnappy-dev=1.1.3-2 libssl-dev=1.0.2g-1ubuntu4.20 make=4.1-6 openssl=1.0.2g-1ubuntu4.20 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 zip=3.0-11 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ################################################# libarchive\nRUN cd /tmp \\\n && curl -L https://www.libarchive.org/downloads/libarchive-3.3.2.tar.gz -o libarchive-3.3.2.tar.gz \\\n && tar xfa libarchive-3.3.2.tar.gz \\\n && mkdir libarchive-build \\\n && cd libarchive-build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE ../libarchive-3.3.2 \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n#  ################################################# protobuf\nRUN mkdir /tmp/deps \\\n && cd /tmp/deps \\\n && PROTOVER=3.4.1 \\\n && curl -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \\\n && tar xvf protobuf-v${PROTOVER}.tar.gz \\\n && cd protobuf-${PROTOVER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF ../cmake \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n#  ################################################# miniconda3\nARG PYTHON_VERSION_MAJOR\nARG PYTHON_VERSION_MINOR\nENV PYVERNAME=\"${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}\"\nCOPY python/setup_requirements.txt /tmp/deps/\nCOPY python/requirements.txt /tmp/deps/\nCOPY python/test_requirements.txt /tmp/deps/\nRUN umask 0 \\\n && mkdir -p /tmp/deps \\\n && cd /tmp/deps \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 \\\n && rm -rf Miniconda3-latest-Linux-x86_64.sh \\\n && . /opt/miniconda3/bin/activate \\\n && conda create -n nnabla-build python=${PYVERNAME} \\\n && conda activate nnabla-build \\\n && pip install --only-binary -U -r /tmp/deps/setup_requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/test_requirements.txt \\\n && conda clean -y --all \\\n && cd / \\\n && rm -rf /tmp/*\nENV PATH=\"/opt/miniconda3/envs/nnabla-build/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/miniconda3/envs/nnabla-build/lib:$LD_LIBRARY_PATH\"\nRUN cd /tmp \\\n && git clone https://github.com/onnx/tensorflow-onnx.git \\\n && cd tensorflow-onnx \\\n && python setup.py install \\\n && rm -rf /tmp/tensorflow-onnx\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2017 Sony Corporation. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM ubuntu:16.04\nENV LC_ALL=\"C\"\nENV LANG=\"C\"\nENV LANGUAGE=\"C\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential bzip2 ca-certificates ccache clang-format-3.8 cmake curl g++ git libarchive-dev libgoogle-glog-dev libgtest-dev libhdf5-dev libleveldb-dev liblmdb-dev libsnappy-dev libssl-dev make openssl unzip wget zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n# ################################################# libarchive\nRUN cd /tmp \\\n && curl -L https://www.libarchive.org/downloads/libarchive-3.3.2.tar.gz -o libarchive-3.3.2.tar.gz \\\n && tar xfa libarchive-3.3.2.tar.gz \\\n && mkdir libarchive-build \\\n && cd libarchive-build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE ../libarchive-3.3.2 \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n# ################################################# protobuf\nRUN mkdir /tmp/deps \\\n && cd /tmp/deps \\\n && PROTOVER=3.4.1 \\\n && curl -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \\\n && tar xvf protobuf-v${PROTOVER}.tar.gz \\\n && cd protobuf-${PROTOVER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF ../cmake \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n# ################################################# miniconda3\nARG PYTHON_VERSION_MAJOR\nARG PYTHON_VERSION_MINOR\nENV PYVERNAME=\"${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}\"\nADD python/setup_requirements.txt /tmp/deps/\nADD python/requirements.txt /tmp/deps/\nADD python/test_requirements.txt /tmp/deps/\nRUN umask 0 \\\n && mkdir -p /tmp/deps \\\n && cd /tmp/deps \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 \\\n && rm -rf Miniconda3-latest-Linux-x86_64.sh \\\n && . /opt/miniconda3/bin/activate \\\n && conda create -n nnabla-build python=${PYVERNAME} \\\n && conda activate nnabla-build \\\n && pip install --only-binary -U -r /tmp/deps/setup_requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/test_requirements.txt \\\n && conda clean -y --all \\\n && cd / \\\n && rm -rf /tmp/*\nENV PATH=\"/opt/miniconda3/envs/nnabla-build/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/miniconda3/envs/nnabla-build/lib:$LD_LIBRARY_PATH\"\nRUN cd /tmp \\\n && git clone https://github.com/onnx/tensorflow-onnx.git \\\n && cd tensorflow-onnx \\\n && python setup.py install \\\n && rm -rf /tmp/tensorflow-onnx\n","injectedSmells":[],"originalDockerfileHash":"62dc9c9cb5da7965dc085023a68a8b87","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2017 Sony Corporation. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM ubuntu:16.04\nENV LC_ALL=\"C\"\nENV LANG=\"C\"\nENV LANGUAGE=\"C\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential bzip2 ca-certificates ccache clang-format-3.8 cmake curl g++ git libarchive-dev libgoogle-glog-dev libgtest-dev libhdf5-dev libleveldb-dev liblmdb-dev libsnappy-dev libssl-dev make openssl unzip wget zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ################################################# libarchive\nRUN cd /tmp \\\n && curl -L https://www.libarchive.org/downloads/libarchive-3.3.2.tar.gz -o libarchive-3.3.2.tar.gz \\\n && tar xfa libarchive-3.3.2.tar.gz \\\n && mkdir libarchive-build \\\n && cd libarchive-build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DENABLE_NETTLE=FALSE -DENABLE_OPENSSL=FALSE -DENABLE_LZO=FALSE -DENABLE_LZMA=FALSE -DENABLE_BZip2=FALSE -DENABLE_LIBXML2=FALSE -DENABLE_EXPAT=FALSE -DENABLE_PCREPOSIX=FALSE -DENABLE_LibGCC=FALSE -DENABLE_CNG=FALSE -DENABLE_TAR=FALSE -DENABLE_TAR_SHARED=FALSE -DENABLE_CPIO=FALSE -DENABLE_CPIO_SHARED=FALSE -DENABLE_CAT=FALSE -DENABLE_CAT_SHARED=FALSE -DENABLE_XATTR=FALSE -DENABLE_ACL=FALSE -DENABLE_ICONV=FALSE -DENABLE_TEST=FALSE ../libarchive-3.3.2 \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n#  ################################################# protobuf\nRUN mkdir /tmp/deps \\\n && cd /tmp/deps \\\n && PROTOVER=3.4.1 \\\n && curl -L https://github.com/google/protobuf/archive/v${PROTOVER}.tar.gz -o protobuf-v${PROTOVER}.tar.gz \\\n && tar xvf protobuf-v${PROTOVER}.tar.gz \\\n && cd protobuf-${PROTOVER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF ../cmake \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/*\n#  ################################################# miniconda3\nARG PYTHON_VERSION_MAJOR\nARG PYTHON_VERSION_MINOR\nENV PYVERNAME=\"${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}\"\nADD python/setup_requirements.txt /tmp/deps/\nADD python/requirements.txt /tmp/deps/\nADD python/test_requirements.txt /tmp/deps/\nRUN umask 0 \\\n && mkdir -p /tmp/deps \\\n && cd /tmp/deps \\\n && wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 \\\n && rm -rf Miniconda3-latest-Linux-x86_64.sh \\\n && . /opt/miniconda3/bin/activate \\\n && conda create -n nnabla-build python=${PYVERNAME} \\\n && conda activate nnabla-build \\\n && pip install --only-binary -U -r /tmp/deps/setup_requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/requirements.txt \\\n && pip install --only-binary -U -r /tmp/deps/test_requirements.txt \\\n && conda clean -y --all \\\n && cd / \\\n && rm -rf /tmp/*\nENV PATH=\"/opt/miniconda3/envs/nnabla-build/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/opt/miniconda3/envs/nnabla-build/lib:$LD_LIBRARY_PATH\"\nRUN cd /tmp \\\n && git clone https://github.com/onnx/tensorflow-onnx.git \\\n && cd tensorflow-onnx \\\n && python setup.py install \\\n && rm -rf /tmp/tensorflow-onnx\n","originalDockerfileUglifiedHash":"a0c018b6cce6683af7cd7cc24587c3ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/eb533639e4fe7d628209e6076de4e2a13e70607c.dockerfile"}