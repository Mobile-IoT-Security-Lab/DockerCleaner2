{"seed":2850941661,"processedDockerfileHash":"95a5191410bee617bf724330229207a7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM arm32v7/python:3.5.6-slim-stretch AS builder\n#   Install dependencies needed for building and running OpenCV\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip wget sed build-essential cmake pkg-config libv4l-dev libatlas-base-dev gfortran libevent-dev libatlas-base-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#   OpenCV dependency\nRUN pip install numpy==1.24.2\n#   Build OpenCV\nCOPY tools/download_build_install_opencv.sh /download_build_install_opencv.sh\nRUN chmod +x /download_build_install_opencv.sh \\\n && /download_build_install_opencv.sh\n#   Get other python dependencies\nCOPY requirements.txt /requirements.txt\n#   Remove opencv and numpy from requirements (since they're already installed)\nRUN sed -i '/opencv-python.*/d' /requirements.txt \\\n && sed -i '/numpy.*/d' /requirements.txt\n#   TODO: Maybe we can cache wheel files outside this container, for more granular reuse when requiremnts.txt changes\nRUN pip install -r /requirements.txt\n#   Download and compile the Arduino firmware\n#   Generates the firmware as /firmware/.pioenvs/megaatmega2560/firmware.hex\n#   PlatformIO doesn't support python3 yet, so also install python2 :/\n#   See also: https://github.com/platformio/platformio-core/issues/895\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7 python-pip python-setuptools python-wheel git -y \\\n && pip2 install -U platformio \\\n && pio platform install --with-package framework-arduinoavr atmelavr\nARG madgrizzle_firmware_repo=https://github.com/madgrizzle/Firmware.git\nARG madgrizzle_firmware_sha=bf4350ffd9bc154832505fc0125abd2c4c04dba7\nRUN git clone $madgrizzle_firmware_repo firmware/madgrizzle \\\n && cd firmware/madgrizzle \\\n && git checkout $madgrizzle_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$madgrizzle_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nARG maslowcnc_firmware_repo=https://github.com/MaslowCNC/Firmware.git\nARG maslowcnc_firmware_sha=d0943e2a2f29faef4c07585a00638d0f822e5daf\nRUN git clone $maslowcnc_firmware_repo firmware/maslowcnc \\\n && cd firmware/maslowcnc \\\n && git checkout $maslowcnc_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$maslowcnc_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nCOPY . /WebControl\n#   Clean up the /WebControl dir a bit to slim it down\n#   TODO: Is there a more automatic way to do this?\nRUN rm -rf /WebControl/.venv \\\n && rm -rf /WebControl/.git\n#   Pre-compile the pyc files (for faster Docker image startup)\nRUN python --version \\\n && python -m compileall /WebControl\nFROM arm32v7/python:3.5.6-slim-stretch\n#   Pip wheels compiled in the builder\nCOPY --from=builder /root/.cache /root/.cache\n#   requirements.txt with opencv and numpy removed\nCOPY --from=builder /requirements.txt /requirements.txt\n#   Required shared libraries\nCOPY --from=builder /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so\nCOPY --from=builder /usr/lib/libf77blas.so /usr/lib/libf77blas.so\nCOPY --from=builder /usr/lib/libf77blas.so.3 /usr/lib/libf77blas.so.3\nCOPY --from=builder /usr/lib/libcblas.so.3 /usr/lib/libcblas.so.3\nCOPY --from=builder /usr/lib/libatlas.so.3 /usr/lib/libatlas.so.3\nCOPY --from=builder /usr/lib/libblas.so.3 /usr/lib/libblas.so.3\nCOPY --from=builder /usr/lib/arm-linux-gnueabihf/libgfortran.so.3 /usr/lib/arm-linux-gnueabihf/libgfortran.so.3\nCOPY --from=builder /usr/lib/liblapack.so.3 /usr/lib/liblapack.so.3\nRUN pip install numpy==1.24.2 \\\n && pip install -r /requirements.txt \\\n && rm -rf /root/.cache\n#   Install avrdude\n#   TODO: to speed up incremental docker builds, we can probably do this in the builder image if we can figure out\n#   which files we need to copy over\nRUN apt-get update \\\n && apt-get install --no-install-recommends avrdude -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#   Copy in the pre-compiled firmware\nCOPY --from=builder /firmware/madgrizzle/build/* /firmware/madgrizzle/\nCOPY --from=builder /firmware/maslowcnc/build/* /firmware/maslowcnc/\n#   Copy the pre-compiled source from the builder\nCOPY --from=builder /WebControl /WebControl\nWORKDIR /WebControl\nEXPOSE 5000/tcp\nCMD python /WebControl/main.py\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM arm32v7/python:3.5.6-slim-stretch AS builder\n#  Install dependencies needed for building and running OpenCV\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip wget sed build-essential cmake pkg-config libv4l-dev libatlas-base-dev gfortran libevent-dev libatlas-base-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#  OpenCV dependency\nRUN pip install numpy\n#  Build OpenCV\nADD tools/download_build_install_opencv.sh /download_build_install_opencv.sh\nRUN chmod +x /download_build_install_opencv.sh \\\n && /download_build_install_opencv.sh\n#  Get other python dependencies\nADD requirements.txt /requirements.txt\n#  Remove opencv and numpy from requirements (since they're already installed)\nRUN sed -i '/opencv-python.*/d' /requirements.txt \\\n && sed -i '/numpy.*/d' /requirements.txt\n#  TODO: Maybe we can cache wheel files outside this container, for more granular reuse when requiremnts.txt changes\nRUN pip install -r /requirements.txt\n#  Download and compile the Arduino firmware\n#  Generates the firmware as /firmware/.pioenvs/megaatmega2560/firmware.hex\n#  PlatformIO doesn't support python3 yet, so also install python2 :/\n#  See also: https://github.com/platformio/platformio-core/issues/895\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7 python-pip python-setuptools python-wheel git -y \\\n && pip2 install -U platformio \\\n && pio platform install --with-package framework-arduinoavr atmelavr\nARG madgrizzle_firmware_repo=https://github.com/madgrizzle/Firmware.git\nARG madgrizzle_firmware_sha=bf4350ffd9bc154832505fc0125abd2c4c04dba7\nRUN git clone $madgrizzle_firmware_repo firmware/madgrizzle \\\n && cd firmware/madgrizzle \\\n && git checkout $madgrizzle_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$madgrizzle_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nARG maslowcnc_firmware_repo=https://github.com/MaslowCNC/Firmware.git\nARG maslowcnc_firmware_sha=d0943e2a2f29faef4c07585a00638d0f822e5daf\nRUN git clone $maslowcnc_firmware_repo firmware/maslowcnc \\\n && cd firmware/maslowcnc \\\n && git checkout $maslowcnc_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$maslowcnc_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nADD . /WebControl\n#  Clean up the /WebControl dir a bit to slim it down\n#  TODO: Is there a more automatic way to do this?\nRUN rm -rf /WebControl/.venv \\\n && rm -rf /WebControl/.git\n#  Pre-compile the pyc files (for faster Docker image startup)\nRUN python --version \\\n && python -m compileall /WebControl\nFROM arm32v7/python:3.5.6-slim-stretch\n#  Pip wheels compiled in the builder\nCOPY --from=builder /root/.cache /root/.cache\n#  requirements.txt with opencv and numpy removed\nCOPY --from=builder /requirements.txt /requirements.txt\n#  Required shared libraries\nCOPY --from=builder /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so\nCOPY --from=builder /usr/lib/libf77blas.so /usr/lib/libf77blas.so\nCOPY --from=builder /usr/lib/libf77blas.so.3 /usr/lib/libf77blas.so.3\nCOPY --from=builder /usr/lib/libcblas.so.3 /usr/lib/libcblas.so.3\nCOPY --from=builder /usr/lib/libatlas.so.3 /usr/lib/libatlas.so.3\nCOPY --from=builder /usr/lib/libblas.so.3 /usr/lib/libblas.so.3\nCOPY --from=builder /usr/lib/arm-linux-gnueabihf/libgfortran.so.3 /usr/lib/arm-linux-gnueabihf/libgfortran.so.3\nCOPY --from=builder /usr/lib/liblapack.so.3 /usr/lib/liblapack.so.3\nRUN pip install numpy \\\n && pip install -r /requirements.txt \\\n && rm -rf /root/.cache\n#  Install avrdude\n#  TODO: to speed up incremental docker builds, we can probably do this in the builder image if we can figure out\n#  which files we need to copy over\nRUN apt-get update \\\n && apt-get install --no-install-recommends avrdude -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#  Copy in the pre-compiled firmware\nCOPY --from=builder /firmware/madgrizzle/build/* /firmware/madgrizzle/\nCOPY --from=builder /firmware/maslowcnc/build/* /firmware/maslowcnc/\n#  Copy the pre-compiled source from the builder\nCOPY --from=builder /WebControl /WebControl\nWORKDIR /WebControl\nEXPOSE 5000/tcp\nCMD python /WebControl/main.py\n","injectedSmells":[],"originalDockerfileHash":"3114315be086bce682ef1257a9edeadd","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM arm32v7/python:3.5.6-slim-stretch AS builder\n#   Install dependencies needed for building and running OpenCV\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip wget sed build-essential cmake pkg-config libv4l-dev libatlas-base-dev gfortran libevent-dev libatlas-base-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#   OpenCV dependency\nRUN pip install numpy\n#   Build OpenCV\nADD tools/download_build_install_opencv.sh /download_build_install_opencv.sh\nRUN chmod +x /download_build_install_opencv.sh \\\n && /download_build_install_opencv.sh\n#   Get other python dependencies\nADD requirements.txt /requirements.txt\n#   Remove opencv and numpy from requirements (since they're already installed)\nRUN sed -i '/opencv-python.*/d' /requirements.txt \\\n && sed -i '/numpy.*/d' /requirements.txt\n#   TODO: Maybe we can cache wheel files outside this container, for more granular reuse when requiremnts.txt changes\nRUN pip install -r /requirements.txt\n#   Download and compile the Arduino firmware\n#   Generates the firmware as /firmware/.pioenvs/megaatmega2560/firmware.hex\n#   PlatformIO doesn't support python3 yet, so also install python2 :/\n#   See also: https://github.com/platformio/platformio-core/issues/895\nRUN apt-get update \\\n && apt-get install --no-install-recommends python2.7 python-pip python-setuptools python-wheel git -y \\\n && pip2 install -U platformio \\\n && pio platform install --with-package framework-arduinoavr atmelavr\nARG madgrizzle_firmware_repo=https://github.com/madgrizzle/Firmware.git\nARG madgrizzle_firmware_sha=bf4350ffd9bc154832505fc0125abd2c4c04dba7\nRUN git clone $madgrizzle_firmware_repo firmware/madgrizzle \\\n && cd firmware/madgrizzle \\\n && git checkout $madgrizzle_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$madgrizzle_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nARG maslowcnc_firmware_repo=https://github.com/MaslowCNC/Firmware.git\nARG maslowcnc_firmware_sha=d0943e2a2f29faef4c07585a00638d0f822e5daf\nRUN git clone $maslowcnc_firmware_repo firmware/maslowcnc \\\n && cd firmware/maslowcnc \\\n && git checkout $maslowcnc_firmware_sha \\\n && pio run -e megaatmega2560 \\\n && mkdir build \\\n && mv .pioenvs/megaatmega2560/firmware.hex build/$maslowcnc_firmware_sha-$( sed -n -e 's/^.*VERSIONNUMBER //p' cnc_ctrl_v1/Maslow.h ;).hex\nADD . /WebControl\n#   Clean up the /WebControl dir a bit to slim it down\n#   TODO: Is there a more automatic way to do this?\nRUN rm -rf /WebControl/.venv \\\n && rm -rf /WebControl/.git\n#   Pre-compile the pyc files (for faster Docker image startup)\nRUN python --version \\\n && python -m compileall /WebControl\nFROM arm32v7/python:3.5.6-slim-stretch\n#   Pip wheels compiled in the builder\nCOPY --from=builder /root/.cache /root/.cache\n#   requirements.txt with opencv and numpy removed\nCOPY --from=builder /requirements.txt /requirements.txt\n#   Required shared libraries\nCOPY --from=builder /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-arm-linux-gnueabihf.so\nCOPY --from=builder /usr/lib/libf77blas.so /usr/lib/libf77blas.so\nCOPY --from=builder /usr/lib/libf77blas.so.3 /usr/lib/libf77blas.so.3\nCOPY --from=builder /usr/lib/libcblas.so.3 /usr/lib/libcblas.so.3\nCOPY --from=builder /usr/lib/libatlas.so.3 /usr/lib/libatlas.so.3\nCOPY --from=builder /usr/lib/libblas.so.3 /usr/lib/libblas.so.3\nCOPY --from=builder /usr/lib/arm-linux-gnueabihf/libgfortran.so.3 /usr/lib/arm-linux-gnueabihf/libgfortran.so.3\nCOPY --from=builder /usr/lib/liblapack.so.3 /usr/lib/liblapack.so.3\nRUN pip install numpy \\\n && pip install -r /requirements.txt \\\n && rm -rf /root/.cache\n#   Install avrdude\n#   TODO: to speed up incremental docker builds, we can probably do this in the builder image if we can figure out\n#   which files we need to copy over\nRUN apt-get update \\\n && apt-get install --no-install-recommends avrdude -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get -y autoremove\n#   Copy in the pre-compiled firmware\nCOPY --from=builder /firmware/madgrizzle/build/* /firmware/madgrizzle/\nCOPY --from=builder /firmware/maslowcnc/build/* /firmware/maslowcnc/\n#   Copy the pre-compiled source from the builder\nCOPY --from=builder /WebControl /WebControl\nWORKDIR /WebControl\nEXPOSE 5000/tcp\nCMD python /WebControl/main.py\n","originalDockerfileUglifiedHash":"9dc3cb04d0bb244cd3155e48bdb5bf56","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d5bfcef81b2f538148973e1f53d10bdc040d2481.dockerfile"}