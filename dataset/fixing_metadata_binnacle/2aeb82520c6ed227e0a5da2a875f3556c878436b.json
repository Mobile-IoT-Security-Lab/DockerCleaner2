{"seed":1180076387,"processedDockerfileHash":"3fabcd59365897ac90d758f6d79ef441","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG GO_VERSION=1.12.1\n#  ##### Agent Build Image ########\nFROM ubuntu:16.04 AS agent-builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 wget=1.17.1-1ubuntu1.5 pkg-config=0.29.1-0ubuntu1 parallel=20161222-1~ubuntu0.16.04.1 -y\nARG GO_VERSION\nARG TARGET_ARCH\nENV PATH=\"$PATH:/usr/local/go/bin\"\nRUN cd /tmp \\\n && wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${TARGET_ARCH}.tar.gz \\\n && tar -C /usr/local -xf go*.tar.gz\nENV GOPATH=\"/go\"\nWORKDIR /usr/src/signalfx-agent\nCOPY vendor/ ./vendor/\n#   Precompile and cache vendor compilation outputs so that building the app is\n#   faster.  A bunch of these fail because go get pulls in more than necessary, but\n#   a lot do compile\nRUN cd vendor \\\n && find . -type d -not -empty | grep -v '\\btest' | parallel go install -mod vendor {} 2> /dev/null || true\nCOPY cmd/ ./cmd/\nCOPY scripts/make-templates scripts/make-versions ./scripts/\nCOPY scripts/collectd-template-to-go ./scripts/\nCOPY Makefile .\nCOPY go.mod go.sum ./\nCOPY internal/ ./internal/\nARG collectd_version=\"\"\nARG agent_version=\"latest\"\nARG GOOS=\"linux\"\nRUN AGENT_VERSION=${agent_version} COLLECTD_VERSION=${collectd_version} make signalfx-agent \\\n && mv signalfx-agent /usr/bin/signalfx-agent\n#  ##### Collectd builder image ######\nFROM ubuntu:16.04 AS collectd\nARG TARGET_ARCH\nARG PYTHON_VERSION=2.7.16\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN sed -i -e '/^deb-src/d' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 dpkg=1.18.4ubuntu1.7 net-tools=1.60-26ubuntu1 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 python-software-properties=0.96.20.10 software-properties-common=0.96.20.10 wget=1.17.1-1ubuntu1.5 autoconf=2.69-9 automake=1:1.15-4ubuntu1 autotools-dev=20150820.1 bison=2:3.0.4.dfsg-1 build-essential=12.1ubuntu2 debhelper=9.20160115ubuntu3 debian-archive-keyring=2014.3 debootstrap=1.0.78+nmu1ubuntu1.13 devscripts=2.16.2ubuntu3 dh-make=2.201605~xenial1 dpatch=2.0.38 fakeroot=1.20.2-1ubuntu1 flex=2.6.0-11 gcc=4:5.3.1-1ubuntu1 git-core=1:2.7.4-0ubuntu1.10 iptables-dev=1.6.0-2ubuntu3 libatasmart-dev=0.19-3 libcurl4-openssl-dev=7.47.0-1ubuntu2.19 libdbi0-dev libdistro-info-perl=0.14ubuntu0.2 libesmtp-dev=1.0.6-4 libexpat1-dev=2.1.0-7ubuntu0.16.04.5 libffi-dev=3.2.1-4 libganglia1-dev=3.6.0-6ubuntu4 libgcrypt11-dev=1.5.4-3+really1.6.5-2ubuntu0.6 libglib2.0-dev=2.48.2-0ubuntu4.8 libldap2-dev=2.4.42+dfsg-2ubuntu3.13 libltdl-dev=2.4.6-0.1 libmemcached-dev=1.0.18-4.1ubuntu2 libmicrohttpd-dev=0.9.44+dfsg-1ubuntu2 libmnl-dev=1.0.3-5 libmodbus-dev=3.0.6-1 libnotify-dev=0.7.6-2svn1 liboping-dev=1.8.0-2build1 libow-dev=3.1p1-2ubuntu1 libpcap-dev=1.7.4-2ubuntu0.1 libperl-dev=5.22.1-9ubuntu0.9 libpq-dev=9.5.25-0ubuntu0.16.04.1 libprotobuf-c0-dev librabbitmq-dev=0.7.1-1ubuntu0.2 librdkafka-dev=0.8.6-1.1 librrd-dev=1.5.5-4 libsensors4-dev=1:3.4.0-2 libsnmp-dev=5.7.3+dfsg-1ubuntu4.6 libssl-dev=1.0.2g-1ubuntu4.20 libtool=2.4.6-0.1 libudev-dev=229-4ubuntu21.31 libvarnishapi-dev=4.1.1-1ubuntu0.2 libvirt-dev=1.3.1-1ubuntu10.31 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libyajl-dev=2.1.0-2 lsb-release=9.20160110ubuntu0.2 pbuilder=0.223 pkg-config=0.29.1-0ubuntu1 po-debconf=1.0.19 protobuf-c-compiler=1.2.1-1 python-dev=2.7.12-1~16.04 python-pip=8.1.1-2ubuntu0.6 python-virtualenv=15.0.1+ds-3ubuntu1.1 quilt=0.63-3 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libdbus-glib-1-dev=0.106-1 libdbus-1-dev=1.10.6-1ubuntu3.6 -y\nRUN wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb \\\n && dpkg -i mysql-apt-config_0.8.12-1_all.deb \\\n && apt-get update \\\n && apt-get install --no-install-recommends libmysqlclient-dev=5.7.33-0ubuntu0.16.04.1 libcurl4-gnutls-dev=7.47.0-1ubuntu2.19 -y\nENV PYTHONHOME=\"/opt/python\"\nRUN wget -O /tmp/Python-${PYTHON_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \\\n && cd /tmp \\\n && tar xzf Python-${PYTHON_VERSION}.tgz \\\n && cd Python-${PYTHON_VERSION} \\\n && ./configure --prefix=$PYTHONHOME --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat \\\n && make \\\n && make install\nRUN echo \"$PYTHONHOME/lib\" > /etc/ld.so.conf.d/python.conf \\\n && ldconfig $PYTHONHOME/lib\nENV PATH=\"$PYTHONHOME/bin:$PATH\"\nRUN wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py 'pip==18.0'\n#   Compile patchelf statically from source\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz \\\n && tar -xf patchelf*.tar.gz \\\n && cd patchelf-0.10 \\\n && ./configure LDFLAGS=\"-static\" \\\n && make \\\n && make install\nARG collectd_version=\"\"\nARG collectd_commit=\"\"\nRUN cd /tmp \\\n && wget https://github.com/signalfx/collectd/archive/${collectd_commit}.tar.gz \\\n && tar -xvf ${collectd_commit}.tar.gz \\\n && mkdir -p /usr/src/ \\\n && mv collectd-${collectd_commit}* /usr/src/collectd\n#   Hack to get our custom version compiled into collectd\nRUN echo \"#!/bin/bash\" > /usr/src/collectd/version-gen.sh \\\n && echo \"printf ${collectd_version//-/.}\" >> /usr/src/collectd/version-gen.sh\nWORKDIR /usr/src/collectd\nARG extra_cflags=\"-O2\"\nENV CFLAGS=\"\\\"-Wall -fPIC $extra_cflags\\\"\"\nENV CXXFLAGS=\"$CFLAGS\"\n#   In the bundle, the java plugin so will live in /lib/collectd and the JVM\n#   exists at /jvm\nENV JAVA_LDFLAGS=\"\\\"-Wl,-rpath -Wl,\\$\\$\\ORIGIN/../../jvm/jre/lib/${TARGET_ARCH}/server\\\"\"\nRUN autoreconf -vif \\\n && ./configure --prefix=\"/usr\" --localstatedir=\"/var\" --sysconfdir=\"/etc/collectd\" --enable-all-plugins --disable-apple_sensors --disable-aquaero --disable-barometer --disable-dpdkstat --disable-dpdkevents --disable-gps --disable-grpc --disable-intel_pmu --disable-intel_rdt --disable-lpar --disable-lua --disable-lvm --disable-mic --disable-mqtt --disable-netapp --disable-nut --disable-ipmi --disable-oracle --disable-pf --disable-redis --disable-routeros --disable-sigrok --disable-tape --disable-tokyotyrant --disable-turbostat --disable-write_mongodb --disable-write_redis --disable-write_riemann --disable-xmms --disable-zone --without-libstatgrab --disable-silent-rules --disable-static PYTHON_CONFIG=\"$PYTHONHOME/bin/python-config\"\n#   Compile all of collectd first, including plugins\nRUN make -j`nproc ` \\\n && make install\nCOPY scripts/collect-libs /opt/collect-libs\nRUN /opt/collect-libs /opt/deps /usr/sbin/collectd /usr/lib/collectd/\n#   For some reason libvarnishapi doesn't properly depend on libm, so make it\n#   right.\nRUN patchelf --add-needed libm-2.23.so /opt/deps/libvarnishapi.so.1.0.4\n#   Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#   We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n#  ##### Python Plugin Image ######\nFROM collectd AS python-plugins\nRUN pip install yq==3.2.1 \\\n && wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \\\n && chmod +x /usr/bin/jq\n#   Mirror the same dir structure that exists in the original source\nCOPY scripts/get-collectd-plugins.py /opt/scripts/\nCOPY scripts/get-collectd-plugins-requirements.txt /opt/\nCOPY collectd-plugins.yaml /opt/\nRUN pip install -r /opt/get-collectd-plugins-requirements.txt\nRUN pip install dbus-python==1.3.2\nRUN mkdir -p /opt/collectd-python \\\n && python /opt/scripts/get-collectd-plugins.py /opt/collectd-python\nCOPY python/ /opt/sfxpython/\nRUN cd /opt/sfxpython \\\n && pip install .\nRUN pip list\n#   Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#   We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n#  ###### Extra packages that don't make sense to pull down in any other stage ########\nFROM ubuntu:16.04 AS extra-packages\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 host=1:9.10.3.dfsg.P4-8ubuntu1.19 iproute2=4.3.0-1ubuntu3.16.04.5 netcat=1.10-41 netcat.openbsd realpath=8.25-2ubuntu3~16.04 vim=2:7.4.1689-3ubuntu1.5 -y\nRUN apt-get install --no-install-recommends openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 -y \\\n && mkdir -p /opt/root \\\n && cp -rL /usr/lib/jvm/java-8-openjdk-${TARGET_ARCH} /opt/root/jvm \\\n && rm -rf /opt/root/jvm/docs \\\n && rm -rf /opt/root/jvm/man\nRUN curl -Lo /opt/signalfx_types_db https://raw.githubusercontent.com/signalfx/integrations/master/collectd-java/signalfx_types_db\nCOPY scripts/collect-libs /opt/collect-libs\nENV useful_bins=\"  /bin/bash  /bin/cat  /bin/cp  /bin/date  /bin/echo  /bin/grep  /bin/kill  /bin/ln  /bin/ls  /bin/mkdir  /bin/mount  /bin/nc  /bin/ps  /bin/rm  /bin/sh  /bin/ss  /bin/umount  /usr/bin/curl  /usr/bin/dirname  /usr/bin/find  /usr/bin/host  /usr/bin/realpath  /usr/bin/tail  /usr/bin/vim  \"\nRUN mkdir -p /opt/root/lib \\\n && /opt/collect-libs /opt/root/lib ${useful_bins}\nRUN mkdir -p /opt/root/bin \\\n && cp $useful_bins /opt/root/bin\n#   Gather all our bins/libs and set rpath on the properly.  Interpreter has to\n#   be set at runtime (or in the final docker stage for docker runs).\nCOPY --from=collectd /usr/local/bin/patchelf /usr/bin/\n#   Gather Python dependencies\nCOPY --from=python-plugins /opt/python/lib/python2.7 /opt/root/lib/python2.7\nCOPY --from=python-plugins /opt/python/lib/libpython2.7.so.1.0 /opt/root/lib\nCOPY --from=python-plugins /opt/python/bin/python /opt/root/bin/python\n#   Gather compiled collectd plugin libraries\nCOPY --from=collectd /usr/sbin/collectd /opt/root/bin/collectd\nCOPY --from=collectd /opt/deps/ /opt/root/lib/\nCOPY --from=collectd /usr/lib/collectd/*.so /opt/root/lib/collectd/\nCOPY scripts/patch-rpath /usr/bin/\nRUN patch-rpath /opt/root\n#  ##### Final Agent Image #######\n#   This build stage is meant as the final target when running the agent in a\n#   container environment (e.g. directly with Docker or on K8s).  The stages\n#   below this are special-purpose.\nFROM scratch AS final-image\nCMD [\"/bin/signalfx-agent\"]\nCOPY --from=collectd /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=collectd /etc/nsswitch.conf /etc/nsswitch.conf\nCOPY --from=collectd /usr/local/bin/patchelf /bin/\n#   Pull in the Linux dynamic link loader at a fixed path across all\n#   architectures.  Binaries will later be patched to use this interpreter\n#   natively.\nCOPY --from=extra-packages /lib/*-linux-gnu/ld-2.23.so /bin/ld-linux.so\n#   Java dependencies\nCOPY --from=extra-packages /opt/root/jvm/ /jvm\nCOPY --from=extra-packages /opt/root/lib/ /lib/\nCOPY --from=extra-packages /opt/root/bin/ /bin/\n#   Some extra non-binary collectd resources\nCOPY --from=collectd /usr/share/collectd/postgresql_default.conf /postgresql_default.conf\nCOPY --from=collectd /usr/share/collectd/types.db /types.db\nCOPY --from=collectd /usr/share/collectd/java/ /collectd-java/\nCOPY --from=extra-packages /opt/signalfx_types_db /collectd-java/\n#   Pull in Python collectd plugin scripts\nCOPY --from=python-plugins /opt/collectd-python/ /collectd-python/\nCOPY scripts/umount-hostfs-non-persistent /bin/umount-hostfs-non-persistent\nCOPY deployments/docker/agent.yaml /etc/signalfx/agent.yaml\nCOPY scripts/patch-interpreter /bin/\nRUN [\"/bin/ld-linux.so\", \"/bin/sh\", \"/bin/patch-interpreter\", \"/\"]\nRUN mkdir -p /run/collectd /var/run/ \\\n && ln -s /var/run/signalfx-agent /run \\\n && ln -s /bin/signalfx-agent /bin/agent-status\nCOPY --from=agent-builder /usr/bin/signalfx-agent /bin/signalfx-agent\nCOPY whitelist.json /lib/whitelist.json\nWORKDIR /\n#   Workaround to utilize the global GO_VERSION argument\n#   since \"COPY --from\" doesn't support variables.\nFROM golang:${GO_VERSION}-stretch AS golang-ignore\n#  ###### Dev Image ########\n#   This is an image to facilitate development of the agent.  It installs all of\n#   the build tools for building collectd and the go agent, along with some other\n#   useful utilities.  The agent image is copied from the final-image stage to\n#   the /bundle dir in here and the SIGNALFX_BUNDLE_DIR is set to point to that.\nFROM ubuntu:18.04 AS dev-extras\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 inotify-tools=3.14-1ubuntu1 iproute2=4.3.0-1ubuntu3.16.04.5 jq=1.5+dfsg-1ubuntu0.1 net-tools=1.60-26ubuntu1 python3-pip=8.1.1-2ubuntu0.6 socat=1.7.3.1-1 sudo=1.8.16-0ubuntu1.10 vim=2:7.4.1689-3ubuntu1.5 wget=1.17.1-1ubuntu1.5 -y\nENV SIGNALFX_BUNDLE_DIR=\"/bundle\" \\\n    TEST_SERVICES_DIR=\"/usr/src/signalfx-agent/test-services\" \\\n    AGENT_BIN=\"/usr/src/signalfx-agent/signalfx-agent\" \\\n    PYTHONPATH=\"/usr/src/signalfx-agent/python\" \\\n    AGENT_VERSION=\"latest\" \\\n    BUILD_TIME=\"2017-01-25T13:17:17-0500\" \\\n    GOOS=\"linux\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN pip3 install ipython ipdb\n#   Install helm\nARG HELM_VERSION=v2.13.0\nWORKDIR /tmp\nRUN wget -O helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${TARGET_ARCH}.tar.gz \\\n && tar -zxvf /tmp/helm.tar.gz \\\n && mv linux-${TARGET_ARCH}/helm /usr/local/bin/helm \\\n && chmod a+x /usr/local/bin/helm\nWORKDIR /usr/src/signalfx-agent\nCMD [\"/bin/bash\"]\nENV PATH=\"$PATH:/usr/local/go/bin:/go/bin\" \\\n    GOPATH=\"/go\"\nCOPY --from=golang-ignore /usr/local/go/ /usr/local/go\nRUN curl -fsSL get.docker.com -o /tmp/get-docker.sh \\\n && sh /tmp/get-docker.sh\nRUN go get -u golang.org/x/lint/golint \\\n && if [ `uname -m ` != \"aarch64\" ] ; then go get github.com/derekparker/delve/cmd/dlv ; fi \\\n && go get github.com/tebeka/go2xunit \\\n && curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $( go env GOPATH ;)/bin v1.16.0\n#   Get integration test deps in here\nCOPY python/setup.py /tmp/\nRUN pip3 install -e /tmp/\nCOPY tests/requirements.txt /tmp/\nRUN pip3 install --upgrade pip==9.0.1 \\\n && pip3 install -r /tmp/requirements.txt\nRUN wget -O /usr/bin/gomplate https://github.com/hairyhenderson/gomplate/releases/download/v3.4.0/gomplate_linux-${TARGET_ARCH} \\\n && chmod +x /usr/bin/gomplate\nRUN cd /tmp \\\n && curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/bin/kubectl\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && ln -s /usr/bin/pip3 /usr/bin/pip\nCOPY --from=final-image /bin/signalfx-agent ./signalfx-agent\nCOPY --from=final-image / /bundle/\nCOPY ./ ./\nRUN /bundle/bin/patch-interpreter /bundle\n#  ###### Pandoc Converter ########\nFROM ubuntu:16.04 AS pandoc-converter\nRUN apt-get update \\\n && apt-get install --no-install-recommends pandoc=1.16.0.2~dfsg-1 -y\nCOPY docs/signalfx-agent.1.man /tmp/signalfx-agent.1.man\n#   Create the man page for the agent\nRUN mkdir /docs \\\n && pandoc --standalone --to man /tmp/signalfx-agent.1.man -o /docs/signalfx-agent.1\n#  ###### Debian Packager #######\nFROM debian:9 AS debian-packager\nRUN apt-get update \\\n && apt-get install --no-install-recommends dh-make=2.201605~xenial1 devscripts=2.16.2ubuntu3 dh-systemd=1.29ubuntu4 apt-utils=1.2.35 awscli=1.18.69-1ubuntu0.16.04.1 -y\nARG agent_version=\"latest\"\nWORKDIR /opt/signalfx-agent_${agent_version}\nENV DEBEMAIL=\"support+deb@signalfx.com\" \\\n    DEBFULLNAME=\"SignalFx, Inc.\"\nCOPY packaging/deb/debian/ ./debian\nCOPY packaging/etc/init.d/signalfx-agent.debian ./debian/signalfx-agent.init\nCOPY packaging/etc/systemd/signalfx-agent.service ./debian/signalfx-agent.service\nCOPY packaging/etc/systemd/signalfx-agent.tmpfile ./debian/signalfx-agent.tmpfile\nCOPY packaging/etc/logrotate.d/signalfx-agent.conf ./debian/signalfx-agent.logrotate\nCOPY packaging/deb/make-changelog ./make-changelog\nCOPY packaging/deb/add-output-to-repo ./add-output-to-repo\nCOPY packaging/deb/devscripts.conf /etc/devscripts.conf\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./signalfx-agent.1\nCOPY packaging/etc/agent.yaml ./agent.yaml\nCOPY --from=final-image / ./signalfx-agent/\n#   Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./signalfx-agent/etc/signalfx\n#  ##### RPM Packager #######\nFROM fedora:27 AS rpm-packager\nRUN yum install -y rpmdevtools createrepo rpm-sign awscli\nWORKDIR /root/rpmbuild\nCOPY packaging/etc/agent.yaml ./SOURCES/agent.yaml\nCOPY packaging/etc/init.d/signalfx-agent.rhel ./SOURCES/signalfx-agent.init\nCOPY packaging/etc/systemd/ ./SOURCES/systemd/\nCOPY packaging/rpm/signalfx-agent.spec ./SPECS/signalfx-agent.spec\nCOPY packaging/rpm/add-output-to-repo ./add-output-to-repo\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./SOURCES/signalfx-agent.1\nCOPY --from=final-image / ./SOURCES/signalfx-agent/\n#   Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./SOURCES/signalfx-agent/etc/signalfx\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG GO_VERSION=1.12.1\n# ##### Agent Build Image ########\nFROM ubuntu:16.04 AS agent-builder\nRUN apt-get update \\\n && apt-get install -y curl wget pkg-config parallel\nARG GO_VERSION\nARG TARGET_ARCH\nENV PATH=\"$PATH:/usr/local/go/bin\"\nRUN cd /tmp \\\n && wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${TARGET_ARCH}.tar.gz \\\n && tar -C /usr/local -xf go*.tar.gz\nENV GOPATH=\"/go\"\nWORKDIR /usr/src/signalfx-agent\nCOPY vendor/ ./vendor/\n#  Precompile and cache vendor compilation outputs so that building the app is\n#  faster.  A bunch of these fail because go get pulls in more than necessary, but\n#  a lot do compile\nRUN cd vendor \\\n && find . -type d -not -empty | grep -v '\\btest' | parallel go install -mod vendor {} 2> /dev/null || true\nCOPY cmd/ ./cmd/\nCOPY scripts/make-templates scripts/make-versions ./scripts/\nCOPY scripts/collectd-template-to-go ./scripts/\nCOPY Makefile .\nCOPY go.mod go.sum ./\nCOPY internal/ ./internal/\nARG collectd_version=\"\"\nARG agent_version=\"latest\"\nARG GOOS=\"linux\"\nRUN AGENT_VERSION=${agent_version} COLLECTD_VERSION=${collectd_version} make signalfx-agent \\\n && mv signalfx-agent /usr/bin/signalfx-agent\n# ##### Collectd builder image ######\nFROM ubuntu:16.04 AS collectd\nARG TARGET_ARCH\nARG PYTHON_VERSION=2.7.16\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN sed -i -e '/^deb-src/d' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install curl dpkg net-tools openjdk-8-jdk python-software-properties software-properties-common wget autoconf automake autotools-dev bison build-essential debhelper debian-archive-keyring debootstrap devscripts dh-make dpatch fakeroot flex gcc git-core iptables-dev libatasmart-dev libcurl4-openssl-dev libdbi0-dev libdistro-info-perl libesmtp-dev libexpat1-dev libffi-dev libganglia1-dev libgcrypt11-dev libglib2.0-dev libldap2-dev libltdl-dev libmemcached-dev libmicrohttpd-dev libmnl-dev libmodbus-dev libnotify-dev liboping-dev libow-dev libpcap-dev libperl-dev libpq-dev libprotobuf-c0-dev librabbitmq-dev librdkafka-dev librrd-dev libsensors4-dev libsnmp-dev libssl-dev libtool libudev-dev libvarnishapi-dev libvirt-dev libxml2-dev libyajl-dev lsb-release pbuilder pkg-config po-debconf protobuf-c-compiler python-dev python-pip python-virtualenv quilt zlib1g-dev libdbus-glib-1-dev libdbus-1-dev -y\nRUN wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb \\\n && dpkg -i mysql-apt-config_0.8.12-1_all.deb \\\n && apt-get update \\\n && apt-get install libmysqlclient-dev libcurl4-gnutls-dev -y\nENV PYTHONHOME=\"/opt/python\"\nRUN wget -O /tmp/Python-${PYTHON_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \\\n && cd /tmp \\\n && tar xzf Python-${PYTHON_VERSION}.tgz \\\n && cd Python-${PYTHON_VERSION} \\\n && ./configure --prefix=$PYTHONHOME --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat \\\n && make \\\n && make install\nRUN echo \"$PYTHONHOME/lib\" > /etc/ld.so.conf.d/python.conf \\\n && ldconfig $PYTHONHOME/lib\nENV PATH=\"$PYTHONHOME/bin:$PATH\"\nRUN wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py 'pip==18.0'\n#  Compile patchelf statically from source\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz \\\n && tar -xf patchelf*.tar.gz \\\n && cd patchelf-0.10 \\\n && ./configure LDFLAGS=\"-static\" \\\n && make \\\n && make install\nARG collectd_version=\"\"\nARG collectd_commit=\"\"\nRUN cd /tmp \\\n && wget https://github.com/signalfx/collectd/archive/${collectd_commit}.tar.gz \\\n && tar -xvf ${collectd_commit}.tar.gz \\\n && mkdir -p /usr/src/ \\\n && mv collectd-${collectd_commit}* /usr/src/collectd\n#  Hack to get our custom version compiled into collectd\nRUN echo \"#!/bin/bash\" > /usr/src/collectd/version-gen.sh \\\n && echo \"printf ${collectd_version//-/.}\" >> /usr/src/collectd/version-gen.sh\nWORKDIR /usr/src/collectd\nARG extra_cflags=\"-O2\"\nENV CFLAGS=\"\\\"-Wall -fPIC $extra_cflags\\\"\"\nENV CXXFLAGS=\"$CFLAGS\"\n#  In the bundle, the java plugin so will live in /lib/collectd and the JVM\n#  exists at /jvm\nENV JAVA_LDFLAGS=\"\\\"-Wl,-rpath -Wl,\\$\\$\\ORIGIN/../../jvm/jre/lib/${TARGET_ARCH}/server\\\"\"\nRUN autoreconf -vif \\\n && ./configure --prefix=\"/usr\" --localstatedir=\"/var\" --sysconfdir=\"/etc/collectd\" --enable-all-plugins --disable-apple_sensors --disable-aquaero --disable-barometer --disable-dpdkstat --disable-dpdkevents --disable-gps --disable-grpc --disable-intel_pmu --disable-intel_rdt --disable-lpar --disable-lua --disable-lvm --disable-mic --disable-mqtt --disable-netapp --disable-nut --disable-ipmi --disable-oracle --disable-pf --disable-redis --disable-routeros --disable-sigrok --disable-tape --disable-tokyotyrant --disable-turbostat --disable-write_mongodb --disable-write_redis --disable-write_riemann --disable-xmms --disable-zone --without-libstatgrab --disable-silent-rules --disable-static PYTHON_CONFIG=\"$PYTHONHOME/bin/python-config\"\n#  Compile all of collectd first, including plugins\nRUN make -j`nproc ` \\\n && make install\nCOPY scripts/collect-libs /opt/collect-libs\nRUN /opt/collect-libs /opt/deps /usr/sbin/collectd /usr/lib/collectd/\n#  For some reason libvarnishapi doesn't properly depend on libm, so make it\n#  right.\nRUN patchelf --add-needed libm-2.23.so /opt/deps/libvarnishapi.so.1.0.4\n#  Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#  We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n# ##### Python Plugin Image ######\nFROM collectd AS python-plugins\nRUN pip install yq \\\n && wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \\\n && chmod +x /usr/bin/jq\n#  Mirror the same dir structure that exists in the original source\nCOPY scripts/get-collectd-plugins.py /opt/scripts/\nCOPY scripts/get-collectd-plugins-requirements.txt /opt/\nCOPY collectd-plugins.yaml /opt/\nRUN pip install -r /opt/get-collectd-plugins-requirements.txt\nRUN pip install dbus-python\nRUN mkdir -p /opt/collectd-python \\\n && python /opt/scripts/get-collectd-plugins.py /opt/collectd-python\nCOPY python/ /opt/sfxpython/\nRUN cd /opt/sfxpython \\\n && pip install .\nRUN pip list\n#  Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#  We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n# ###### Extra packages that don't make sense to pull down in any other stage ########\nFROM ubuntu:16.04 AS extra-packages\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install -y curl host iproute2 netcat netcat.openbsd realpath vim\nRUN apt-get install -y openjdk-8-jre-headless \\\n && mkdir -p /opt/root \\\n && cp -rL /usr/lib/jvm/java-8-openjdk-${TARGET_ARCH} /opt/root/jvm \\\n && rm -rf /opt/root/jvm/docs \\\n && rm -rf /opt/root/jvm/man\nRUN curl -Lo /opt/signalfx_types_db https://raw.githubusercontent.com/signalfx/integrations/master/collectd-java/signalfx_types_db\nCOPY scripts/collect-libs /opt/collect-libs\nENV useful_bins=\"  /bin/bash  /bin/cat  /bin/cp  /bin/date  /bin/echo  /bin/grep  /bin/kill  /bin/ln  /bin/ls  /bin/mkdir  /bin/mount  /bin/nc  /bin/ps  /bin/rm  /bin/sh  /bin/ss  /bin/umount  /usr/bin/curl  /usr/bin/dirname  /usr/bin/find  /usr/bin/host  /usr/bin/realpath  /usr/bin/tail  /usr/bin/vim  \"\nRUN mkdir -p /opt/root/lib \\\n && /opt/collect-libs /opt/root/lib ${useful_bins}\nRUN mkdir -p /opt/root/bin \\\n && cp $useful_bins /opt/root/bin\n#  Gather all our bins/libs and set rpath on the properly.  Interpreter has to\n#  be set at runtime (or in the final docker stage for docker runs).\nCOPY --from=collectd /usr/local/bin/patchelf /usr/bin/\n#  Gather Python dependencies\nCOPY --from=python-plugins /opt/python/lib/python2.7 /opt/root/lib/python2.7\nCOPY --from=python-plugins /opt/python/lib/libpython2.7.so.1.0 /opt/root/lib\nCOPY --from=python-plugins /opt/python/bin/python /opt/root/bin/python\n#  Gather compiled collectd plugin libraries\nCOPY --from=collectd /usr/sbin/collectd /opt/root/bin/collectd\nCOPY --from=collectd /opt/deps/ /opt/root/lib/\nCOPY --from=collectd /usr/lib/collectd/*.so /opt/root/lib/collectd/\nCOPY scripts/patch-rpath /usr/bin/\nRUN patch-rpath /opt/root\n# ##### Final Agent Image #######\n#  This build stage is meant as the final target when running the agent in a\n#  container environment (e.g. directly with Docker or on K8s).  The stages\n#  below this are special-purpose.\nFROM scratch AS final-image\nCMD [\"/bin/signalfx-agent\"]\nCOPY --from=collectd /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=collectd /etc/nsswitch.conf /etc/nsswitch.conf\nCOPY --from=collectd /usr/local/bin/patchelf /bin/\n#  Pull in the Linux dynamic link loader at a fixed path across all\n#  architectures.  Binaries will later be patched to use this interpreter\n#  natively.\nCOPY --from=extra-packages /lib/*-linux-gnu/ld-2.23.so /bin/ld-linux.so\n#  Java dependencies\nCOPY --from=extra-packages /opt/root/jvm/ /jvm\nCOPY --from=extra-packages /opt/root/lib/ /lib/\nCOPY --from=extra-packages /opt/root/bin/ /bin/\n#  Some extra non-binary collectd resources\nCOPY --from=collectd /usr/share/collectd/postgresql_default.conf /postgresql_default.conf\nCOPY --from=collectd /usr/share/collectd/types.db /types.db\nCOPY --from=collectd /usr/share/collectd/java/ /collectd-java/\nCOPY --from=extra-packages /opt/signalfx_types_db /collectd-java/\n#  Pull in Python collectd plugin scripts\nCOPY --from=python-plugins /opt/collectd-python/ /collectd-python/\nCOPY scripts/umount-hostfs-non-persistent /bin/umount-hostfs-non-persistent\nCOPY deployments/docker/agent.yaml /etc/signalfx/agent.yaml\nCOPY scripts/patch-interpreter /bin/\nRUN [\"/bin/ld-linux.so\", \"/bin/sh\", \"/bin/patch-interpreter\", \"/\"]\nRUN mkdir -p /run/collectd /var/run/ \\\n && ln -s /var/run/signalfx-agent /run \\\n && ln -s /bin/signalfx-agent /bin/agent-status\nCOPY --from=agent-builder /usr/bin/signalfx-agent /bin/signalfx-agent\nCOPY whitelist.json /lib/whitelist.json\nWORKDIR /\n#  Workaround to utilize the global GO_VERSION argument\n#  since \"COPY --from\" doesn't support variables.\nFROM golang:${GO_VERSION}-stretch AS golang-ignore\n# ###### Dev Image ########\n#  This is an image to facilitate development of the agent.  It installs all of\n#  the build tools for building collectd and the go agent, along with some other\n#  useful utilities.  The agent image is copied from the final-image stage to\n#  the /bundle dir in here and the SIGNALFX_BUNDLE_DIR is set to point to that.\nFROM ubuntu:18.04 AS dev-extras\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install -y curl git inotify-tools iproute2 jq net-tools python3-pip socat sudo vim wget\nENV SIGNALFX_BUNDLE_DIR=\"/bundle\" \\\n    TEST_SERVICES_DIR=\"/usr/src/signalfx-agent/test-services\" \\\n    AGENT_BIN=\"/usr/src/signalfx-agent/signalfx-agent\" \\\n    PYTHONPATH=\"/usr/src/signalfx-agent/python\" \\\n    AGENT_VERSION=\"latest\" \\\n    BUILD_TIME=\"2017-01-25T13:17:17-0500\" \\\n    GOOS=\"linux\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN pip3 install ipython ipdb\n#  Install helm\nARG HELM_VERSION=v2.13.0\nWORKDIR /tmp\nRUN wget -O helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${TARGET_ARCH}.tar.gz \\\n && tar -zxvf /tmp/helm.tar.gz \\\n && mv linux-${TARGET_ARCH}/helm /usr/local/bin/helm \\\n && chmod a+x /usr/local/bin/helm\nWORKDIR /usr/src/signalfx-agent\nCMD [\"/bin/bash\"]\nENV PATH=\"$PATH:/usr/local/go/bin:/go/bin\" \\\n    GOPATH=\"/go\"\nCOPY --from=golang-ignore /usr/local/go/ /usr/local/go\nRUN curl -fsSL get.docker.com -o /tmp/get-docker.sh \\\n && sh /tmp/get-docker.sh\nRUN go get -u golang.org/x/lint/golint \\\n && if [ `uname -m ` != \"aarch64\" ] ; then go get github.com/derekparker/delve/cmd/dlv ; fi \\\n && go get github.com/tebeka/go2xunit \\\n && curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $( go env GOPATH ;)/bin v1.16.0\n#  Get integration test deps in here\nCOPY python/setup.py /tmp/\nRUN pip3 install -e /tmp/\nCOPY tests/requirements.txt /tmp/\nRUN pip3 install --upgrade pip==9.0.1 \\\n && pip3 install -r /tmp/requirements.txt\nRUN wget -O /usr/bin/gomplate https://github.com/hairyhenderson/gomplate/releases/download/v3.4.0/gomplate_linux-${TARGET_ARCH} \\\n && chmod +x /usr/bin/gomplate\nRUN cd /tmp \\\n && curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/bin/kubectl\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && ln -s /usr/bin/pip3 /usr/bin/pip\nCOPY --from=final-image /bin/signalfx-agent ./signalfx-agent\nCOPY --from=final-image / /bundle/\nCOPY ./ ./\nRUN /bundle/bin/patch-interpreter /bundle\n# ###### Pandoc Converter ########\nFROM ubuntu:16.04 AS pandoc-converter\nRUN apt-get update \\\n && apt-get install -y pandoc\nCOPY docs/signalfx-agent.1.man /tmp/signalfx-agent.1.man\n#  Create the man page for the agent\nRUN mkdir /docs \\\n && pandoc --standalone --to man /tmp/signalfx-agent.1.man -o /docs/signalfx-agent.1\n# ###### Debian Packager #######\nFROM debian:9 AS debian-packager\nRUN apt-get update \\\n && apt-get install -y dh-make devscripts dh-systemd apt-utils awscli\nARG agent_version=\"latest\"\nWORKDIR /opt/signalfx-agent_${agent_version}\nENV DEBEMAIL=\"support+deb@signalfx.com\" \\\n    DEBFULLNAME=\"SignalFx, Inc.\"\nCOPY packaging/deb/debian/ ./debian\nCOPY packaging/etc/init.d/signalfx-agent.debian ./debian/signalfx-agent.init\nCOPY packaging/etc/systemd/signalfx-agent.service ./debian/signalfx-agent.service\nCOPY packaging/etc/systemd/signalfx-agent.tmpfile ./debian/signalfx-agent.tmpfile\nCOPY packaging/etc/logrotate.d/signalfx-agent.conf ./debian/signalfx-agent.logrotate\nCOPY packaging/deb/make-changelog ./make-changelog\nCOPY packaging/deb/add-output-to-repo ./add-output-to-repo\nCOPY packaging/deb/devscripts.conf /etc/devscripts.conf\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./signalfx-agent.1\nCOPY packaging/etc/agent.yaml ./agent.yaml\nCOPY --from=final-image / ./signalfx-agent/\n#  Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./signalfx-agent/etc/signalfx\n# ##### RPM Packager #######\nFROM fedora:27 AS rpm-packager\nRUN yum install -y rpmdevtools createrepo rpm-sign awscli\nWORKDIR /root/rpmbuild\nCOPY packaging/etc/agent.yaml ./SOURCES/agent.yaml\nCOPY packaging/etc/init.d/signalfx-agent.rhel ./SOURCES/signalfx-agent.init\nCOPY packaging/etc/systemd/ ./SOURCES/systemd/\nCOPY packaging/rpm/signalfx-agent.spec ./SPECS/signalfx-agent.spec\nCOPY packaging/rpm/add-output-to-repo ./add-output-to-repo\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./SOURCES/signalfx-agent.1\nCOPY --from=final-image / ./SOURCES/signalfx-agent/\n#  Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./SOURCES/signalfx-agent/etc/signalfx\n","injectedSmells":[],"originalDockerfileHash":"42904487baaaf93c839c29d846568963","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG GO_VERSION=1.12.1\n#  ##### Agent Build Image ########\nFROM ubuntu:16.04 AS agent-builder\nRUN apt-get update \\\n && apt-get install curl wget pkg-config parallel -y\nARG GO_VERSION\nARG TARGET_ARCH\nENV PATH=\"$PATH:/usr/local/go/bin\"\nRUN cd /tmp \\\n && wget https://storage.googleapis.com/golang/go${GO_VERSION}.linux-${TARGET_ARCH}.tar.gz \\\n && tar -C /usr/local -xf go*.tar.gz\nENV GOPATH=\"/go\"\nWORKDIR /usr/src/signalfx-agent\nCOPY vendor/ ./vendor/\n#   Precompile and cache vendor compilation outputs so that building the app is\n#   faster.  A bunch of these fail because go get pulls in more than necessary, but\n#   a lot do compile\nRUN cd vendor \\\n && find . -type d -not -empty | grep -v '\\btest' | parallel go install -mod vendor {} 2> /dev/null || true\nCOPY cmd/ ./cmd/\nCOPY scripts/make-templates scripts/make-versions ./scripts/\nCOPY scripts/collectd-template-to-go ./scripts/\nCOPY Makefile .\nCOPY go.mod go.sum ./\nCOPY internal/ ./internal/\nARG collectd_version=\"\"\nARG agent_version=\"latest\"\nARG GOOS=\"linux\"\nRUN AGENT_VERSION=${agent_version} COLLECTD_VERSION=${collectd_version} make signalfx-agent \\\n && mv signalfx-agent /usr/bin/signalfx-agent\n#  ##### Collectd builder image ######\nFROM ubuntu:16.04 AS collectd\nARG TARGET_ARCH\nARG PYTHON_VERSION=2.7.16\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN sed -i -e '/^deb-src/d' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install curl dpkg net-tools openjdk-8-jdk python-software-properties software-properties-common wget autoconf automake autotools-dev bison build-essential debhelper debian-archive-keyring debootstrap devscripts dh-make dpatch fakeroot flex gcc git-core iptables-dev libatasmart-dev libcurl4-openssl-dev libdbi0-dev libdistro-info-perl libesmtp-dev libexpat1-dev libffi-dev libganglia1-dev libgcrypt11-dev libglib2.0-dev libldap2-dev libltdl-dev libmemcached-dev libmicrohttpd-dev libmnl-dev libmodbus-dev libnotify-dev liboping-dev libow-dev libpcap-dev libperl-dev libpq-dev libprotobuf-c0-dev librabbitmq-dev librdkafka-dev librrd-dev libsensors4-dev libsnmp-dev libssl-dev libtool libudev-dev libvarnishapi-dev libvirt-dev libxml2-dev libyajl-dev lsb-release pbuilder pkg-config po-debconf protobuf-c-compiler python-dev python-pip python-virtualenv quilt zlib1g-dev libdbus-glib-1-dev libdbus-1-dev -y\nRUN wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb \\\n && dpkg -i mysql-apt-config_0.8.12-1_all.deb \\\n && apt-get update \\\n && apt-get install libmysqlclient-dev libcurl4-gnutls-dev -y\nENV PYTHONHOME=\"/opt/python\"\nRUN wget -O /tmp/Python-${PYTHON_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz \\\n && cd /tmp \\\n && tar xzf Python-${PYTHON_VERSION}.tgz \\\n && cd Python-${PYTHON_VERSION} \\\n && ./configure --prefix=$PYTHONHOME --enable-shared --enable-ipv6 --enable-unicode=ucs4 --with-system-ffi --with-system-expat \\\n && make \\\n && make install\nRUN echo \"$PYTHONHOME/lib\" > /etc/ld.so.conf.d/python.conf \\\n && ldconfig $PYTHONHOME/lib\nENV PATH=\"$PYTHONHOME/bin:$PATH\"\nRUN wget -O /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \\\n && python /tmp/get-pip.py 'pip==18.0'\n#   Compile patchelf statically from source\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.gz \\\n && tar -xf patchelf*.tar.gz \\\n && cd patchelf-0.10 \\\n && ./configure LDFLAGS=\"-static\" \\\n && make \\\n && make install\nARG collectd_version=\"\"\nARG collectd_commit=\"\"\nRUN cd /tmp \\\n && wget https://github.com/signalfx/collectd/archive/${collectd_commit}.tar.gz \\\n && tar -xvf ${collectd_commit}.tar.gz \\\n && mkdir -p /usr/src/ \\\n && mv collectd-${collectd_commit}* /usr/src/collectd\n#   Hack to get our custom version compiled into collectd\nRUN echo \"#!/bin/bash\" > /usr/src/collectd/version-gen.sh \\\n && echo \"printf ${collectd_version//-/.}\" >> /usr/src/collectd/version-gen.sh\nWORKDIR /usr/src/collectd\nARG extra_cflags=\"-O2\"\nENV CFLAGS=\"\\\"-Wall -fPIC $extra_cflags\\\"\"\nENV CXXFLAGS=\"$CFLAGS\"\n#   In the bundle, the java plugin so will live in /lib/collectd and the JVM\n#   exists at /jvm\nENV JAVA_LDFLAGS=\"\\\"-Wl,-rpath -Wl,\\$\\$\\ORIGIN/../../jvm/jre/lib/${TARGET_ARCH}/server\\\"\"\nRUN autoreconf -vif \\\n && ./configure --prefix=\"/usr\" --localstatedir=\"/var\" --sysconfdir=\"/etc/collectd\" --enable-all-plugins --disable-apple_sensors --disable-aquaero --disable-barometer --disable-dpdkstat --disable-dpdkevents --disable-gps --disable-grpc --disable-intel_pmu --disable-intel_rdt --disable-lpar --disable-lua --disable-lvm --disable-mic --disable-mqtt --disable-netapp --disable-nut --disable-ipmi --disable-oracle --disable-pf --disable-redis --disable-routeros --disable-sigrok --disable-tape --disable-tokyotyrant --disable-turbostat --disable-write_mongodb --disable-write_redis --disable-write_riemann --disable-xmms --disable-zone --without-libstatgrab --disable-silent-rules --disable-static PYTHON_CONFIG=\"$PYTHONHOME/bin/python-config\"\n#   Compile all of collectd first, including plugins\nRUN make -j`nproc ` \\\n && make install\nCOPY scripts/collect-libs /opt/collect-libs\nRUN /opt/collect-libs /opt/deps /usr/sbin/collectd /usr/lib/collectd/\n#   For some reason libvarnishapi doesn't properly depend on libm, so make it\n#   right.\nRUN patchelf --add-needed libm-2.23.so /opt/deps/libvarnishapi.so.1.0.4\n#   Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#   We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n#  ##### Python Plugin Image ######\nFROM collectd AS python-plugins\nRUN pip install yq \\\n && wget -O /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 \\\n && chmod +x /usr/bin/jq\n#   Mirror the same dir structure that exists in the original source\nCOPY scripts/get-collectd-plugins.py /opt/scripts/\nCOPY scripts/get-collectd-plugins-requirements.txt /opt/\nCOPY collectd-plugins.yaml /opt/\nRUN pip install -r /opt/get-collectd-plugins-requirements.txt\nRUN pip install dbus-python\nRUN mkdir -p /opt/collectd-python \\\n && python /opt/scripts/get-collectd-plugins.py /opt/collectd-python\nCOPY python/ /opt/sfxpython/\nRUN cd /opt/sfxpython \\\n && pip install .\nRUN pip list\n#   Delete all compiled python to save space\nRUN find $PYTHONHOME -name \"*.pyc\" -o -name \"*.pyo\" | xargs rm\n#   We don't support compiling extension modules so don't need this directory\nRUN rm -rf $PYTHONHOME/lib/python2.7/config-*-linux-gnu\n#  ###### Extra packages that don't make sense to pull down in any other stage ########\nFROM ubuntu:16.04 AS extra-packages\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install curl host iproute2 netcat netcat.openbsd realpath vim -y\nRUN apt-get install openjdk-8-jre-headless -y \\\n && mkdir -p /opt/root \\\n && cp -rL /usr/lib/jvm/java-8-openjdk-${TARGET_ARCH} /opt/root/jvm \\\n && rm -rf /opt/root/jvm/docs \\\n && rm -rf /opt/root/jvm/man\nRUN curl -Lo /opt/signalfx_types_db https://raw.githubusercontent.com/signalfx/integrations/master/collectd-java/signalfx_types_db\nCOPY scripts/collect-libs /opt/collect-libs\nENV useful_bins=\"  /bin/bash  /bin/cat  /bin/cp  /bin/date  /bin/echo  /bin/grep  /bin/kill  /bin/ln  /bin/ls  /bin/mkdir  /bin/mount  /bin/nc  /bin/ps  /bin/rm  /bin/sh  /bin/ss  /bin/umount  /usr/bin/curl  /usr/bin/dirname  /usr/bin/find  /usr/bin/host  /usr/bin/realpath  /usr/bin/tail  /usr/bin/vim  \"\nRUN mkdir -p /opt/root/lib \\\n && /opt/collect-libs /opt/root/lib ${useful_bins}\nRUN mkdir -p /opt/root/bin \\\n && cp $useful_bins /opt/root/bin\n#   Gather all our bins/libs and set rpath on the properly.  Interpreter has to\n#   be set at runtime (or in the final docker stage for docker runs).\nCOPY --from=collectd /usr/local/bin/patchelf /usr/bin/\n#   Gather Python dependencies\nCOPY --from=python-plugins /opt/python/lib/python2.7 /opt/root/lib/python2.7\nCOPY --from=python-plugins /opt/python/lib/libpython2.7.so.1.0 /opt/root/lib\nCOPY --from=python-plugins /opt/python/bin/python /opt/root/bin/python\n#   Gather compiled collectd plugin libraries\nCOPY --from=collectd /usr/sbin/collectd /opt/root/bin/collectd\nCOPY --from=collectd /opt/deps/ /opt/root/lib/\nCOPY --from=collectd /usr/lib/collectd/*.so /opt/root/lib/collectd/\nCOPY scripts/patch-rpath /usr/bin/\nRUN patch-rpath /opt/root\n#  ##### Final Agent Image #######\n#   This build stage is meant as the final target when running the agent in a\n#   container environment (e.g. directly with Docker or on K8s).  The stages\n#   below this are special-purpose.\nFROM scratch AS final-image\nCMD [\"/bin/signalfx-agent\"]\nCOPY --from=collectd /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=collectd /etc/nsswitch.conf /etc/nsswitch.conf\nCOPY --from=collectd /usr/local/bin/patchelf /bin/\n#   Pull in the Linux dynamic link loader at a fixed path across all\n#   architectures.  Binaries will later be patched to use this interpreter\n#   natively.\nCOPY --from=extra-packages /lib/*-linux-gnu/ld-2.23.so /bin/ld-linux.so\n#   Java dependencies\nCOPY --from=extra-packages /opt/root/jvm/ /jvm\nCOPY --from=extra-packages /opt/root/lib/ /lib/\nCOPY --from=extra-packages /opt/root/bin/ /bin/\n#   Some extra non-binary collectd resources\nCOPY --from=collectd /usr/share/collectd/postgresql_default.conf /postgresql_default.conf\nCOPY --from=collectd /usr/share/collectd/types.db /types.db\nCOPY --from=collectd /usr/share/collectd/java/ /collectd-java/\nCOPY --from=extra-packages /opt/signalfx_types_db /collectd-java/\n#   Pull in Python collectd plugin scripts\nCOPY --from=python-plugins /opt/collectd-python/ /collectd-python/\nCOPY scripts/umount-hostfs-non-persistent /bin/umount-hostfs-non-persistent\nCOPY deployments/docker/agent.yaml /etc/signalfx/agent.yaml\nCOPY scripts/patch-interpreter /bin/\nRUN [\"/bin/ld-linux.so\", \"/bin/sh\", \"/bin/patch-interpreter\", \"/\"]\nRUN mkdir -p /run/collectd /var/run/ \\\n && ln -s /var/run/signalfx-agent /run \\\n && ln -s /bin/signalfx-agent /bin/agent-status\nCOPY --from=agent-builder /usr/bin/signalfx-agent /bin/signalfx-agent\nCOPY whitelist.json /lib/whitelist.json\nWORKDIR /\n#   Workaround to utilize the global GO_VERSION argument\n#   since \"COPY --from\" doesn't support variables.\nFROM golang:${GO_VERSION}-stretch AS golang-ignore\n#  ###### Dev Image ########\n#   This is an image to facilitate development of the agent.  It installs all of\n#   the build tools for building collectd and the go agent, along with some other\n#   useful utilities.  The agent image is copied from the final-image stage to\n#   the /bundle dir in here and the SIGNALFX_BUNDLE_DIR is set to point to that.\nFROM ubuntu:18.04 AS dev-extras\nARG TARGET_ARCH\nRUN apt-get update \\\n && apt-get install curl git inotify-tools iproute2 jq net-tools python3-pip socat sudo vim wget -y\nENV SIGNALFX_BUNDLE_DIR=\"/bundle\" \\\n    TEST_SERVICES_DIR=\"/usr/src/signalfx-agent/test-services\" \\\n    AGENT_BIN=\"/usr/src/signalfx-agent/signalfx-agent\" \\\n    PYTHONPATH=\"/usr/src/signalfx-agent/python\" \\\n    AGENT_VERSION=\"latest\" \\\n    BUILD_TIME=\"2017-01-25T13:17:17-0500\" \\\n    GOOS=\"linux\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\"\nRUN pip3 install ipython ipdb\n#   Install helm\nARG HELM_VERSION=v2.13.0\nWORKDIR /tmp\nRUN wget -O helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-${TARGET_ARCH}.tar.gz \\\n && tar -zxvf /tmp/helm.tar.gz \\\n && mv linux-${TARGET_ARCH}/helm /usr/local/bin/helm \\\n && chmod a+x /usr/local/bin/helm\nWORKDIR /usr/src/signalfx-agent\nCMD [\"/bin/bash\"]\nENV PATH=\"$PATH:/usr/local/go/bin:/go/bin\" \\\n    GOPATH=\"/go\"\nCOPY --from=golang-ignore /usr/local/go/ /usr/local/go\nRUN curl -fsSL get.docker.com -o /tmp/get-docker.sh \\\n && sh /tmp/get-docker.sh\nRUN go get -u golang.org/x/lint/golint \\\n && if [ `uname -m ` != \"aarch64\" ] ; then go get github.com/derekparker/delve/cmd/dlv ; fi \\\n && go get github.com/tebeka/go2xunit \\\n && curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $( go env GOPATH ;)/bin v1.16.0\n#   Get integration test deps in here\nCOPY python/setup.py /tmp/\nRUN pip3 install -e /tmp/\nCOPY tests/requirements.txt /tmp/\nRUN pip3 install --upgrade pip==9.0.1 \\\n && pip3 install -r /tmp/requirements.txt\nRUN wget -O /usr/bin/gomplate https://github.com/hairyhenderson/gomplate/releases/download/v3.4.0/gomplate_linux-${TARGET_ARCH} \\\n && chmod +x /usr/bin/gomplate\nRUN cd /tmp \\\n && curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl \\\n && chmod +x ./kubectl \\\n && mv ./kubectl /usr/bin/kubectl\nRUN ln -s /usr/bin/python3 /usr/bin/python \\\n && ln -s /usr/bin/pip3 /usr/bin/pip\nCOPY --from=final-image /bin/signalfx-agent ./signalfx-agent\nCOPY --from=final-image / /bundle/\nCOPY ./ ./\nRUN /bundle/bin/patch-interpreter /bundle\n#  ###### Pandoc Converter ########\nFROM ubuntu:16.04 AS pandoc-converter\nRUN apt-get update \\\n && apt-get install pandoc -y\nCOPY docs/signalfx-agent.1.man /tmp/signalfx-agent.1.man\n#   Create the man page for the agent\nRUN mkdir /docs \\\n && pandoc --standalone --to man /tmp/signalfx-agent.1.man -o /docs/signalfx-agent.1\n#  ###### Debian Packager #######\nFROM debian:9 AS debian-packager\nRUN apt-get update \\\n && apt-get install dh-make devscripts dh-systemd apt-utils awscli -y\nARG agent_version=\"latest\"\nWORKDIR /opt/signalfx-agent_${agent_version}\nENV DEBEMAIL=\"support+deb@signalfx.com\" \\\n    DEBFULLNAME=\"SignalFx, Inc.\"\nCOPY packaging/deb/debian/ ./debian\nCOPY packaging/etc/init.d/signalfx-agent.debian ./debian/signalfx-agent.init\nCOPY packaging/etc/systemd/signalfx-agent.service ./debian/signalfx-agent.service\nCOPY packaging/etc/systemd/signalfx-agent.tmpfile ./debian/signalfx-agent.tmpfile\nCOPY packaging/etc/logrotate.d/signalfx-agent.conf ./debian/signalfx-agent.logrotate\nCOPY packaging/deb/make-changelog ./make-changelog\nCOPY packaging/deb/add-output-to-repo ./add-output-to-repo\nCOPY packaging/deb/devscripts.conf /etc/devscripts.conf\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./signalfx-agent.1\nCOPY packaging/etc/agent.yaml ./agent.yaml\nCOPY --from=final-image / ./signalfx-agent/\n#   Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./signalfx-agent/etc/signalfx\n#  ##### RPM Packager #######\nFROM fedora:27 AS rpm-packager\nRUN yum install -y rpmdevtools createrepo rpm-sign awscli\nWORKDIR /root/rpmbuild\nCOPY packaging/etc/agent.yaml ./SOURCES/agent.yaml\nCOPY packaging/etc/init.d/signalfx-agent.rhel ./SOURCES/signalfx-agent.init\nCOPY packaging/etc/systemd/ ./SOURCES/systemd/\nCOPY packaging/rpm/signalfx-agent.spec ./SPECS/signalfx-agent.spec\nCOPY packaging/rpm/add-output-to-repo ./add-output-to-repo\nCOPY --from=pandoc-converter /docs/signalfx-agent.1 ./SOURCES/signalfx-agent.1\nCOPY --from=final-image / ./SOURCES/signalfx-agent/\n#   Remove the agent config so it doesn't confuse people in the final output.\nRUN rm -rf ./SOURCES/signalfx-agent/etc/signalfx\n","originalDockerfileUglifiedHash":"3bcfe86a7dd53442992efb03e994f48a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2aeb82520c6ed227e0a5da2a875f3556c878436b.dockerfile"}