{"seed":4216685179,"processedDockerfileHash":"4207b4e364b968e1f86d5abb673d6593","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   manylinux2010 wheels\n#   https://github.com/pypa/manylinux\n#\nFROM quay.io/pypa/manylinux2010_x86_64 AS build-env\n#   FROM       quay.io/pypa/manylinux1_x86_64 as build-env\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Python 3.5-3.7 via \"35 36 37\"\nARG PY_VERSIONS=\"35 36 37\"\n#   static libs need relocatable symbols for linking to shared python lib\nENV CFLAGS=\"-fPIC ${CFLAGS}\"\nENV CXXFLAGS=\"-fPIC ${CXXFLAGS}\"\n#   install dependencies\n#     CMake, zlib?, HDF5, c-blosc, ADIOS1, ADIOS2?\nRUN yum check-update -y \\\n && yum -y install glibc-static tar\n#  RUN        curl -sOL https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz \\\n#             && file cmake*.tar.gz \\\n#             && tar -xzf cmake*.tar.gz \\\n#             && rm cmake*.tar.gz \\\n#             && mv cmake* /opt/cmake\n#  ENV        PATH=/opt/cmake/bin:${PATH}\nRUN for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && ${PY_BIN} -m pip install setuptools cmake ; done\nRUN curl -sLo hdf5-1.10.5.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.5/src/hdf5-1.10.5.tar.gz \\\n && file hdf5*.tar.gz \\\n && tar -xzf hdf5*.tar.gz \\\n && rm hdf5*.tar.gz \\\n && cd hdf5-* \\\n && ./configure --disable-parallel --disable-shared --enable-static --prefix /usr \\\n && make \\\n && make install\n#   avoid picking up a static libpthread in adios (also: those libs lack -fPIC)\nRUN rm /usr/lib64/libpthread.a /usr/lib64/libm.a /usr/lib64/librt.a\nRUN curl -sLo c-blosc-1.15.0.tar.gz https://github.com/Blosc/c-blosc/archive/v1.15.0.tar.gz \\\n && file c-blosc*.tar.gz \\\n && tar -xzf c-blosc*.tar.gz \\\n && rm c-blosc*.tar.gz \\\n && mkdir c-blosc-build \\\n && cd c-blosc-build \\\n && PY_TARGET=${PY_VERSIONS:0:2} \\\n && PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} cmake -DDEACTIVATE_SNAPPY=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF -DCMAKE_INSTALL_PREFIX=/usr ../c-blosc-1.15.0 \\\n && make \\\n && make install\nRUN curl -sLo adios-1.13.1.tar.gz http://users.nccs.gov/~pnorbert/adios-1.13.1.tar.gz \\\n && file adios*.tar.gz \\\n && tar -xzf adios*.tar.gz \\\n && rm adios*.tar.gz \\\n && cd adios-* \\\n && ./configure --enable-static --disable-shared --disable-fortran --without-mpi --prefix=/usr --with-blosc=/usr \\\n && make \\\n && make install\nCOPY . /opt/src\nRUN ls /opt/python/\nENV HDF5_USE_STATIC_LIBRARIES=\"ON\" \\\n    ADIOS_USE_STATIC_LIBS=\"ON\" \\\n    BUILD_SHARED_LIBS=\"OFF\" \\\n    BUILD_TESTING=\"OFF\" \\\n    BUILD_EXAMPLES=\"OFF\"\n#   build matrix\nRUN cd /opt/src ; for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} ${PY_BIN} setup.py bdist_wheel \\\n && ${PY_BIN} setup.py clean --all \\\n && rm -rf openPMD_api.egg-info/ ; done ; ls dist/\n#  RUN        mkdir build \\\n#             && cd build \\\n#             && /opt/cmake/bin/cmake \\\n#                 -DPYTHON_EXECUTABLE=$(which /opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python) \\\n#                 -DHDF5_USE_STATIC_LIBRARIES=ON \\\n#                 -DBUILD_SHARED_LIBS=OFF \\\n#                 -DBUILD_TESTING=OFF \\\n#                 -DBUILD_EXAMPLES=OFF \\\n#                 /opt/src \\\n#             && make\n#   verify wheel\n#   https://github.com/pypa/auditwheel\n#  RUN        pip install auditwheel  # already installed\nRUN for whl in /opt/src/dist/*.whl; do auditwheel show ${whl} \\\n && auditwheel repair --plat manylinux2010_x86_64 ${whl} ; done \\\n && du -hs /opt/src/dist/* \\\n && du -hs /wheelhouse/*\n#   test in fresh env: Debian:Buster + Python 3.7\nFROM debian:buster\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3=3.11.2-1 python3-pip=23.0.1+dfsg-1 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl\nRUN find / -name \"openpmd*\"\nRUN ldd /usr/local/lib/python3.7/dist-packages/openpmd_api.cpython-37m-x86_64-linux-gnu.so\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#  RUN        echo \"* soft core 100000\" >> /etc/security/limits.conf && \\\n#             python3 -c \"import openpmd_api as api;\"; \\\n#             gdb -ex bt -c core\n#   test in fresh env: Ubuntu:18.04 + Python 3.6\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3=3.11.2-1 python3-pip=23.0.1+dfsg-1 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#   test in fresh env: Debian:Stretch + Python 3.5\nFROM debian:stretch\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3=3.11.2-1 python3-pip=23.0.1+dfsg-1 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#   copy binary artifacts (wheels)\nFROM quay.io/pypa/manylinux2010_x86_64\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\nCOPY --from=build-env /wheelhouse/openPMD_api-*.whl /opt/wheels/\nRUN ls /opt/wheels/\nENTRYPOINT if [ -d /dist ] ; then cp /opt/wheels/* /dist/ ; fi\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  manylinux2010 wheels\n#  https://github.com/pypa/manylinux\n#\nFROM quay.io/pypa/manylinux2010_x86_64 AS build-env\n#  FROM       quay.io/pypa/manylinux1_x86_64 as build-env\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Python 3.5-3.7 via \"35 36 37\"\nARG PY_VERSIONS=\"35 36 37\"\n#  static libs need relocatable symbols for linking to shared python lib\nENV CFLAGS=\"-fPIC ${CFLAGS}\"\nENV CXXFLAGS=\"-fPIC ${CXXFLAGS}\"\n#  install dependencies\n#    CMake, zlib?, HDF5, c-blosc, ADIOS1, ADIOS2?\nRUN yum check-update -y \\\n && yum -y install glibc-static tar\n# RUN        curl -sOL https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz \\\n#            && file cmake*.tar.gz \\\n#            && tar -xzf cmake*.tar.gz \\\n#            && rm cmake*.tar.gz \\\n#            && mv cmake* /opt/cmake\n# ENV        PATH=/opt/cmake/bin:${PATH}\nRUN for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && ${PY_BIN} -m pip install setuptools cmake ; done\nRUN curl -sLo hdf5-1.10.5.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.5/src/hdf5-1.10.5.tar.gz \\\n && file hdf5*.tar.gz \\\n && tar -xzf hdf5*.tar.gz \\\n && rm hdf5*.tar.gz \\\n && cd hdf5-* \\\n && ./configure --disable-parallel --disable-shared --enable-static --prefix /usr \\\n && make \\\n && make install\n#  avoid picking up a static libpthread in adios (also: those libs lack -fPIC)\nRUN rm /usr/lib64/libpthread.a /usr/lib64/libm.a /usr/lib64/librt.a\nRUN curl -sLo c-blosc-1.15.0.tar.gz https://github.com/Blosc/c-blosc/archive/v1.15.0.tar.gz \\\n && file c-blosc*.tar.gz \\\n && tar -xzf c-blosc*.tar.gz \\\n && rm c-blosc*.tar.gz \\\n && mkdir c-blosc-build \\\n && cd c-blosc-build \\\n && PY_TARGET=${PY_VERSIONS:0:2} \\\n && PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} cmake -DDEACTIVATE_SNAPPY=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF -DCMAKE_INSTALL_PREFIX=/usr ../c-blosc-1.15.0 \\\n && make \\\n && make install\nRUN curl -sLo adios-1.13.1.tar.gz http://users.nccs.gov/~pnorbert/adios-1.13.1.tar.gz \\\n && file adios*.tar.gz \\\n && tar -xzf adios*.tar.gz \\\n && rm adios*.tar.gz \\\n && cd adios-* \\\n && ./configure --enable-static --disable-shared --disable-fortran --without-mpi --prefix=/usr --with-blosc=/usr \\\n && make \\\n && make install\nADD . /opt/src\nRUN ls /opt/python/\nENV HDF5_USE_STATIC_LIBRARIES=\"ON\" \\\n    ADIOS_USE_STATIC_LIBS=\"ON\" \\\n    BUILD_SHARED_LIBS=\"OFF\" \\\n    BUILD_TESTING=\"OFF\" \\\n    BUILD_EXAMPLES=\"OFF\"\n#  build matrix\nRUN cd /opt/src ; for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} ${PY_BIN} setup.py bdist_wheel \\\n && ${PY_BIN} setup.py clean --all \\\n && rm -rf openPMD_api.egg-info/ ; done ; ls dist/\n# RUN        mkdir build \\\n#            && cd build \\\n#            && /opt/cmake/bin/cmake \\\n#                -DPYTHON_EXECUTABLE=$(which /opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python) \\\n#                -DHDF5_USE_STATIC_LIBRARIES=ON \\\n#                -DBUILD_SHARED_LIBS=OFF \\\n#                -DBUILD_TESTING=OFF \\\n#                -DBUILD_EXAMPLES=OFF \\\n#                /opt/src \\\n#            && make\n#  verify wheel\n#  https://github.com/pypa/auditwheel\n# RUN        pip install auditwheel  # already installed\nRUN for whl in /opt/src/dist/*.whl; do auditwheel show ${whl} \\\n && auditwheel repair --plat manylinux2010_x86_64 ${whl} ; done \\\n && du -hs /opt/src/dist/* \\\n && du -hs /wheelhouse/*\n#  test in fresh env: Debian:Buster + Python 3.7\nFROM debian:buster\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl\nRUN find / -name \"openpmd*\"\nRUN ldd /usr/local/lib/python3.7/dist-packages/openpmd_api.cpython-37m-x86_64-linux-gnu.so\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n# RUN        echo \"* soft core 100000\" >> /etc/security/limits.conf && \\\n#            python3 -c \"import openpmd_api as api;\"; \\\n#            gdb -ex bt -c core\n#  test in fresh env: Ubuntu:18.04 + Python 3.6\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#  test in fresh env: Debian:Stretch + Python 3.5\nFROM debian:stretch\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#  copy binary artifacts (wheels)\nFROM quay.io/pypa/manylinux2010_x86_64\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\nCOPY --from=build-env /wheelhouse/openPMD_api-*.whl /opt/wheels/\nRUN ls /opt/wheels/\nENTRYPOINT if [ -d /dist ] ; then cp /opt/wheels/* /dist/ ; fi\n","injectedSmells":[],"originalDockerfileHash":"aa69001ba7d99f74cfddeef1fb55827b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   manylinux2010 wheels\n#   https://github.com/pypa/manylinux\n#\nFROM quay.io/pypa/manylinux2010_x86_64 AS build-env\n#   FROM       quay.io/pypa/manylinux1_x86_64 as build-env\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Python 3.5-3.7 via \"35 36 37\"\nARG PY_VERSIONS=\"35 36 37\"\n#   static libs need relocatable symbols for linking to shared python lib\nENV CFLAGS=\"-fPIC ${CFLAGS}\"\nENV CXXFLAGS=\"-fPIC ${CXXFLAGS}\"\n#   install dependencies\n#     CMake, zlib?, HDF5, c-blosc, ADIOS1, ADIOS2?\nRUN yum check-update -y \\\n && yum -y install glibc-static tar\n#  RUN        curl -sOL https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz \\\n#             && file cmake*.tar.gz \\\n#             && tar -xzf cmake*.tar.gz \\\n#             && rm cmake*.tar.gz \\\n#             && mv cmake* /opt/cmake\n#  ENV        PATH=/opt/cmake/bin:${PATH}\nRUN for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && ${PY_BIN} -m pip install setuptools cmake ; done\nRUN curl -sLo hdf5-1.10.5.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.5/src/hdf5-1.10.5.tar.gz \\\n && file hdf5*.tar.gz \\\n && tar -xzf hdf5*.tar.gz \\\n && rm hdf5*.tar.gz \\\n && cd hdf5-* \\\n && ./configure --disable-parallel --disable-shared --enable-static --prefix /usr \\\n && make \\\n && make install\n#   avoid picking up a static libpthread in adios (also: those libs lack -fPIC)\nRUN rm /usr/lib64/libpthread.a /usr/lib64/libm.a /usr/lib64/librt.a\nRUN curl -sLo c-blosc-1.15.0.tar.gz https://github.com/Blosc/c-blosc/archive/v1.15.0.tar.gz \\\n && file c-blosc*.tar.gz \\\n && tar -xzf c-blosc*.tar.gz \\\n && rm c-blosc*.tar.gz \\\n && mkdir c-blosc-build \\\n && cd c-blosc-build \\\n && PY_TARGET=${PY_VERSIONS:0:2} \\\n && PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} cmake -DDEACTIVATE_SNAPPY=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF -DCMAKE_INSTALL_PREFIX=/usr ../c-blosc-1.15.0 \\\n && make \\\n && make install\nRUN curl -sLo adios-1.13.1.tar.gz http://users.nccs.gov/~pnorbert/adios-1.13.1.tar.gz \\\n && file adios*.tar.gz \\\n && tar -xzf adios*.tar.gz \\\n && rm adios*.tar.gz \\\n && cd adios-* \\\n && ./configure --enable-static --disable-shared --disable-fortran --without-mpi --prefix=/usr --with-blosc=/usr \\\n && make \\\n && make install\nADD . /opt/src\nRUN ls /opt/python/\nENV HDF5_USE_STATIC_LIBRARIES=\"ON\" \\\n    ADIOS_USE_STATIC_LIBS=\"ON\" \\\n    BUILD_SHARED_LIBS=\"OFF\" \\\n    BUILD_TESTING=\"OFF\" \\\n    BUILD_EXAMPLES=\"OFF\"\n#   build matrix\nRUN cd /opt/src ; for PY_TARGET in ${PY_VERSIONS}; do PY_BIN=/opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python \\\n && CMAKE_BIN=\"$( ${PY_BIN} -m pip show cmake 2> /dev/null | grep Location | cut -d' ' -f2 ;)/cmake/data/bin/\" \\\n && PATH=${CMAKE_BIN}:${PATH} ${PY_BIN} setup.py bdist_wheel \\\n && ${PY_BIN} setup.py clean --all \\\n && rm -rf openPMD_api.egg-info/ ; done ; ls dist/\n#  RUN        mkdir build \\\n#             && cd build \\\n#             && /opt/cmake/bin/cmake \\\n#                 -DPYTHON_EXECUTABLE=$(which /opt/python/cp${PY_TARGET}-cp${PY_TARGET}m/bin/python) \\\n#                 -DHDF5_USE_STATIC_LIBRARIES=ON \\\n#                 -DBUILD_SHARED_LIBS=OFF \\\n#                 -DBUILD_TESTING=OFF \\\n#                 -DBUILD_EXAMPLES=OFF \\\n#                 /opt/src \\\n#             && make\n#   verify wheel\n#   https://github.com/pypa/auditwheel\n#  RUN        pip install auditwheel  # already installed\nRUN for whl in /opt/src/dist/*.whl; do auditwheel show ${whl} \\\n && auditwheel repair --plat manylinux2010_x86_64 ${whl} ; done \\\n && du -hs /opt/src/dist/* \\\n && du -hs /wheelhouse/*\n#   test in fresh env: Debian:Buster + Python 3.7\nFROM debian:buster\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp37-cp37m-manylinux2010_x86_64.whl\nRUN find / -name \"openpmd*\"\nRUN ldd /usr/local/lib/python3.7/dist-packages/openpmd_api.cpython-37m-x86_64-linux-gnu.so\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#  RUN        echo \"* soft core 100000\" >> /etc/security/limits.conf && \\\n#             python3 -c \"import openpmd_api as api;\"; \\\n#             gdb -ex bt -c core\n#   test in fresh env: Ubuntu:18.04 + Python 3.6\nFROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp36-cp36m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#   test in fresh env: Debian:Stretch + Python 3.5\nFROM debian:stretch\nENV DEBIAN_FRONTEND=\"noninteractive\"\nCOPY --from=build-env /wheelhouse/openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl .\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3 python3-pip -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN python3 --version \\\n && python3 -m pip install -U pip \\\n && python3 -m pip install openPMD_api-*-cp35-cp35m-manylinux2010_x86_64.whl\nRUN python3 -c \"import openpmd_api as api; print(api.__version__); print(api.variants)\"\n#   copy binary artifacts (wheels)\nFROM quay.io/pypa/manylinux2010_x86_64\nMAINTAINER Axel Huebl <a.huebl@hzdr.de>\nCOPY --from=build-env /wheelhouse/openPMD_api-*.whl /opt/wheels/\nRUN ls /opt/wheels/\nENTRYPOINT if [ -d /dist ] ; then cp /opt/wheels/* /dist/ ; fi\n","originalDockerfileUglifiedHash":"dc58985c98e373f470de4c6d543e7e2f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d14e81d061c9c5ab1cc3a74b0efd320e1d2f6811.dockerfile"}