{"seed":878353060,"processedDockerfileHash":"f2c730e17f28ed4c5de7bcc82ecb359a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04.3\nRUN useradd jenkins -u 1500 -g root\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse\" > /etc/apt/sources.list.d/trusty-backports-universe.list\nRUN echo \"deb http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_repo.list\nRUN echo \"deb-src http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_src_repo.list\nRUN echo \"deb http://apt.openvstorage.org unstable main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated --force-yes build-essential m4 apt-utils libffi-dev libssl-dev libbz2-dev libgmp3-dev libev-dev libsnappy-dev libxen-dev help2man pkg-config time aspcud wget rsync darcs git unzip protobuf-compiler libgcrypt20-dev libjerasure-dev yasm automake python-dev python-pip debhelper psmisc strace curl g++ libgflags-dev sudo libtool libboost1.57-all-dev libboost1.57-all fuse sysstat ncurses-dev cmake libgtest-dev clang-3.5 liblttng-ust0 librdmacm1 libtokyocabinet9 libstdc++6:amd64 libzmq3 librabbitmq1 libomnithread3c2 libomniorb4-1 libhiredis0.10 liblz4-1 libxio-dev libxio0 omniorb-nameserver libunwind8-dev libaio1 libaio1-dbg libaio-dev libz-dev libbz2-dev libgoogle-glog-dev libibverbs-dev librdmacm-dev software-properties-common\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends g++-5 -y )\nRUN ln -sf /usr/bin/g++-5 /usr/bin/g++\n#   Install etcd:\nRUN curl -L https://github.com/coreos/etcd/releases/download/v2.2.4/etcd-v2.2.4-linux-amd64.tar.gz -o etcd-v2.2.4-linux-amd64.tar.gz\nRUN tar xzvf etcd-v2.2.4-linux-amd64.tar.gz\nRUN cp ./etcd-v2.2.4-linux-amd64/etcd /usr/bin \\\n && cp ./etcd-v2.2.4-linux-amd64/etcdctl /usr/bin\n#   clone orocksdb & install rocksdb shared lib\nRUN git clone https://github.com/domsj/orocksdb.git \\\n && cd orocksdb \\\n && git checkout tags/0.3.0 \\\n && ./install_rocksdb.sh\nRUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh\nENV ocaml_version=\"4.04.2\"\nRUN sh ./opam_installer.sh /usr/local/bin ${ocaml_version}\nENV opam_root=\"/home/jenkins/OPAM\"\nENV opam_env=\"opam config env --root=${opam_root}\"\nRUN opam init --root=${opam_root} --comp ${ocaml_version}\nRUN eval `${opam_env} ` \\\n && opam repo add compat -k git https://github.com/toolslive/opam_anti_revisionism.git \\\n && opam update -v \\\n && opam install -y oasis.0.4.10 ocamlfind omake.0.9.8.7 ssl.0.5.3 camlbz2 snappy sexplib bisect lwt_ssl.1.1.0 lwt.3.0.0 camltc.0.9.4 ocplib-endian.1.0 ctypes ctypes-foreign uuidm zarith mirage-no-xen.1 quickcheck.1.0.2 ounit.2.0.0 cmdliner conf-libev depext kinetic-client cryptokit tiny_json.1.1.4 ppx_deriving.4.1 ppx_deriving_yojson base.v0.9.3 core.v0.9.1 redis.0.3.3 uri.1.9.4 piqi result ezxmlm\nRUN wget https://01.org/sites/default/files/downloads/intelr-storage-acceleration-library-open-source-version/isa-l-2.14.0.tar.gz \\\n && tar xfzv isa-l-2.14.0.tar.gz \\\n && cd isa-l-2.14.0 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf isa-l-2.14.0\n#   c++\nRUN cd /usr/src/gtest \\\n && cmake . \\\n && make \\\n && mv libg* /usr/lib/\n#   install specific arakoon.\nRUN git clone https://github.com/openvstorage/arakoon.git\nRUN cd arakoon \\\n && git pull \\\n && git checkout tags/1.9.22\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && make\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && export PREFIX=${opam_root}/${ocaml_version} \\\n && export OCAML_LIBDIR=`ocamlfind printconf destdir ` \\\n && make install\n#   install orocksdb\nRUN eval `${opam_env} ` \\\n && cd orocksdb \\\n && make build install\n#  for now, install ordma manually\nRUN git clone https://github.com/toolslive/ordma.git \\\n && cd ordma \\\n && git checkout tags/0.0.2 \\\n && eval `${opam_env} ` \\\n && make install\n#   Install alba 0.6, and arakoon.1.8.9 which we might need for compatibility tests\nRUN echo \"deb http://apt.openvstorage.org chicago-community main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends alba arakoon liburiparser1=0.7.5-1ubuntu2 gdb=7.7.1-0ubuntu5~14.04.3 -y --force-yes )\nRUN ln -s /usr/bin/alba /usr/bin/alba.0.6\n#  # installing voldrv packages only works from within the OVS LAN\nARG INSTALL_VOLDRV_PACKAGES=false\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'true' || echo 'we are NOT going to install the voldrv packages/testers'\n#   http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian/volumedriver-no-dedup-base_6.10.0-0_amd64.deb\nENV voldrv_jenkins=\"http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian\"\nENV voldrv_base_pkg_name=\"volumedriver-no-dedup\"\nENV voldrv_version=\"6.10.0-0_amd64\"\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-base_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-server_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-test_${voldrv_version}.deb )\n#   packages with debug symbols\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb )\nRUN pip install setuptools==34.0.1\nRUN pip install fabric==3.0.0 junit-xml==1.9\nRUN chmod ugoa+rxw -R ${opam_root}\nRUN su - -c \"echo 'eval `${opam_env} `' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'LD_LIBRARY_PATH=/usr/local/lib; export LD_LIBRARY_PATH;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_TEST=volumedriver_test; export VOLDRV_TEST;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_BACKEND_TEST=backend_test; export VOLDRV_BACKEND_TEST;' >> /home/jenkins/.profile\"\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" > /etc/sudoers.d/jenkins\nENTRYPOINT [\"/bin/bash\", \"-c\", \"set\", \"-e\", \"&&\", \"/home/jenkins/alba/docker/docker-entrypoint.sh\", \"$@\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04.3\nRUN useradd jenkins -u 1500 -g root\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse\" > /etc/apt/sources.list.d/trusty-backports-universe.list\nRUN echo \"deb http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_repo.list\nRUN echo \"deb-src http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_src_repo.list\nRUN echo \"deb http://apt.openvstorage.org unstable main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated --force-yes build-essential m4 apt-utils libffi-dev libssl-dev libbz2-dev libgmp3-dev libev-dev libsnappy-dev libxen-dev help2man pkg-config time aspcud wget rsync darcs git unzip protobuf-compiler libgcrypt20-dev libjerasure-dev yasm automake python-dev python-pip debhelper psmisc strace curl g++ libgflags-dev sudo libtool libboost1.57-all-dev libboost1.57-all fuse sysstat ncurses-dev cmake libgtest-dev clang-3.5 liblttng-ust0 librdmacm1 libtokyocabinet9 libstdc++6:amd64 libzmq3 librabbitmq1 libomnithread3c2 libomniorb4-1 libhiredis0.10 liblz4-1 libxio-dev libxio0 omniorb-nameserver libunwind8-dev libaio1 libaio1-dbg libaio-dev libz-dev libbz2-dev libgoogle-glog-dev libibverbs-dev librdmacm-dev software-properties-common\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\nRUN apt-get update \\\n && apt-get install g++-5 -y\nRUN ln -sf /usr/bin/g++-5 /usr/bin/g++\n#  Install etcd:\nRUN curl -L https://github.com/coreos/etcd/releases/download/v2.2.4/etcd-v2.2.4-linux-amd64.tar.gz -o etcd-v2.2.4-linux-amd64.tar.gz\nRUN tar xzvf etcd-v2.2.4-linux-amd64.tar.gz\nRUN cp ./etcd-v2.2.4-linux-amd64/etcd /usr/bin \\\n && cp ./etcd-v2.2.4-linux-amd64/etcdctl /usr/bin\n#  clone orocksdb & install rocksdb shared lib\nRUN git clone https://github.com/domsj/orocksdb.git \\\n && cd orocksdb \\\n && git checkout tags/0.3.0 \\\n && ./install_rocksdb.sh\nRUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh\nENV ocaml_version=\"4.04.2\"\nRUN sh ./opam_installer.sh /usr/local/bin ${ocaml_version}\nENV opam_root=\"/home/jenkins/OPAM\"\nENV opam_env=\"opam config env --root=${opam_root}\"\nRUN opam init --root=${opam_root} --comp ${ocaml_version}\nRUN eval `${opam_env} ` \\\n && opam repo add compat -k git https://github.com/toolslive/opam_anti_revisionism.git \\\n && opam update -v \\\n && opam install -y oasis.0.4.10 ocamlfind omake.0.9.8.7 ssl.0.5.3 camlbz2 snappy sexplib bisect lwt_ssl.1.1.0 lwt.3.0.0 camltc.0.9.4 ocplib-endian.1.0 ctypes ctypes-foreign uuidm zarith mirage-no-xen.1 quickcheck.1.0.2 ounit.2.0.0 cmdliner conf-libev depext kinetic-client cryptokit tiny_json.1.1.4 ppx_deriving.4.1 ppx_deriving_yojson base.v0.9.3 core.v0.9.1 redis.0.3.3 uri.1.9.4 piqi result ezxmlm\nRUN wget https://01.org/sites/default/files/downloads/intelr-storage-acceleration-library-open-source-version/isa-l-2.14.0.tar.gz \\\n && tar xfzv isa-l-2.14.0.tar.gz \\\n && cd isa-l-2.14.0 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf isa-l-2.14.0\n#  c++\nRUN cd /usr/src/gtest \\\n && cmake . \\\n && make \\\n && mv libg* /usr/lib/\n#  install specific arakoon.\nRUN git clone https://github.com/openvstorage/arakoon.git\nRUN cd arakoon \\\n && git pull \\\n && git checkout tags/1.9.22\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && make\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && export PREFIX=${opam_root}/${ocaml_version} \\\n && export OCAML_LIBDIR=`ocamlfind printconf destdir ` \\\n && make install\n#  install orocksdb\nRUN eval `${opam_env} ` \\\n && cd orocksdb \\\n && make build install\n# for now, install ordma manually\nRUN git clone https://github.com/toolslive/ordma.git \\\n && cd ordma \\\n && git checkout tags/0.0.2 \\\n && eval `${opam_env} ` \\\n && make install\n#  Install alba 0.6, and arakoon.1.8.9 which we might need for compatibility tests\nRUN echo \"deb http://apt.openvstorage.org chicago-community main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN apt-get update \\\n && apt-get install alba arakoon liburiparser1 gdb -y --force-yes\nRUN ln -s /usr/bin/alba /usr/bin/alba.0.6\n# # installing voldrv packages only works from within the OVS LAN\nARG INSTALL_VOLDRV_PACKAGES=false\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'true' || echo 'we are NOT going to install the voldrv packages/testers'\n#  http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian/volumedriver-no-dedup-base_6.10.0-0_amd64.deb\nENV voldrv_jenkins=\"http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian\"\nENV voldrv_base_pkg_name=\"volumedriver-no-dedup\"\nENV voldrv_version=\"6.10.0-0_amd64\"\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-base_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-server_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-test_${voldrv_version}.deb )\n#  packages with debug symbols\n#  RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#      || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb \\\n#          && dpkg -i ${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb )\n#  RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#      || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb \\\n#          && dpkg -i ${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb )\n#  RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#      || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb \\\n#          && dpkg -i ${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb )\n#  RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#      || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb \\\n#          && dpkg -i ${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb )\nRUN pip install setuptools==34.0.1\nRUN pip install fabric junit-xml\nRUN chmod ugoa+rxw -R ${opam_root}\nRUN su - -c \"echo 'eval `${opam_env} `' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'LD_LIBRARY_PATH=/usr/local/lib; export LD_LIBRARY_PATH;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_TEST=volumedriver_test; export VOLDRV_TEST;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_BACKEND_TEST=backend_test; export VOLDRV_BACKEND_TEST;' >> /home/jenkins/.profile\"\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" > /etc/sudoers.d/jenkins\nENTRYPOINT [\"/bin/bash\", \"-c\", \"set\", \"-e\", \"&&\", \"/home/jenkins/alba/docker/docker-entrypoint.sh\", \"$@\"]\n","injectedSmells":[],"originalDockerfileHash":"f2ae499481c2152487f8742a345a9aa4","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04.3\nRUN useradd jenkins -u 1500 -g root\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse\" > /etc/apt/sources.list.d/trusty-backports-universe.list\nRUN echo \"deb http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_repo.list\nRUN echo \"deb-src http://ppa.launchpad.net/afrank/boost/ubuntu trusty main\" > /etc/apt/sources.list.d/boost_src_repo.list\nRUN echo \"deb http://apt.openvstorage.org unstable main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated --force-yes build-essential m4 apt-utils libffi-dev libssl-dev libbz2-dev libgmp3-dev libev-dev libsnappy-dev libxen-dev help2man pkg-config time aspcud wget rsync darcs git unzip protobuf-compiler libgcrypt20-dev libjerasure-dev yasm automake python-dev python-pip debhelper psmisc strace curl g++ libgflags-dev sudo libtool libboost1.57-all-dev libboost1.57-all fuse sysstat ncurses-dev cmake libgtest-dev clang-3.5 liblttng-ust0 librdmacm1 libtokyocabinet9 libstdc++6:amd64 libzmq3 librabbitmq1 libomnithread3c2 libomniorb4-1 libhiredis0.10 liblz4-1 libxio-dev libxio0 omniorb-nameserver libunwind8-dev libaio1 libaio1-dbg libaio-dev libz-dev libbz2-dev libgoogle-glog-dev libibverbs-dev librdmacm-dev software-properties-common\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\nRUN apt-get update \\\n && apt-get install g++-5 -y\nRUN ln -sf /usr/bin/g++-5 /usr/bin/g++\n#   Install etcd:\nRUN curl -L https://github.com/coreos/etcd/releases/download/v2.2.4/etcd-v2.2.4-linux-amd64.tar.gz -o etcd-v2.2.4-linux-amd64.tar.gz\nRUN tar xzvf etcd-v2.2.4-linux-amd64.tar.gz\nRUN cp ./etcd-v2.2.4-linux-amd64/etcd /usr/bin \\\n && cp ./etcd-v2.2.4-linux-amd64/etcdctl /usr/bin\n#   clone orocksdb & install rocksdb shared lib\nRUN git clone https://github.com/domsj/orocksdb.git \\\n && cd orocksdb \\\n && git checkout tags/0.3.0 \\\n && ./install_rocksdb.sh\nRUN wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh\nENV ocaml_version=\"4.04.2\"\nRUN sh ./opam_installer.sh /usr/local/bin ${ocaml_version}\nENV opam_root=\"/home/jenkins/OPAM\"\nENV opam_env=\"opam config env --root=${opam_root}\"\nRUN opam init --root=${opam_root} --comp ${ocaml_version}\nRUN eval `${opam_env} ` \\\n && opam repo add compat -k git https://github.com/toolslive/opam_anti_revisionism.git \\\n && opam update -v \\\n && opam install -y oasis.0.4.10 ocamlfind omake.0.9.8.7 ssl.0.5.3 camlbz2 snappy sexplib bisect lwt_ssl.1.1.0 lwt.3.0.0 camltc.0.9.4 ocplib-endian.1.0 ctypes ctypes-foreign uuidm zarith mirage-no-xen.1 quickcheck.1.0.2 ounit.2.0.0 cmdliner conf-libev depext kinetic-client cryptokit tiny_json.1.1.4 ppx_deriving.4.1 ppx_deriving_yojson base.v0.9.3 core.v0.9.1 redis.0.3.3 uri.1.9.4 piqi result ezxmlm\nRUN wget https://01.org/sites/default/files/downloads/intelr-storage-acceleration-library-open-source-version/isa-l-2.14.0.tar.gz \\\n && tar xfzv isa-l-2.14.0.tar.gz \\\n && cd isa-l-2.14.0 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf isa-l-2.14.0\n#   c++\nRUN cd /usr/src/gtest \\\n && cmake . \\\n && make \\\n && mv libg* /usr/lib/\n#   install specific arakoon.\nRUN git clone https://github.com/openvstorage/arakoon.git\nRUN cd arakoon \\\n && git pull \\\n && git checkout tags/1.9.22\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && make\nRUN cd arakoon \\\n && eval `${opam_env} ` \\\n && export PREFIX=${opam_root}/${ocaml_version} \\\n && export OCAML_LIBDIR=`ocamlfind printconf destdir ` \\\n && make install\n#   install orocksdb\nRUN eval `${opam_env} ` \\\n && cd orocksdb \\\n && make build install\n#  for now, install ordma manually\nRUN git clone https://github.com/toolslive/ordma.git \\\n && cd ordma \\\n && git checkout tags/0.0.2 \\\n && eval `${opam_env} ` \\\n && make install\n#   Install alba 0.6, and arakoon.1.8.9 which we might need for compatibility tests\nRUN echo \"deb http://apt.openvstorage.org chicago-community main\" > /etc/apt/sources.list.d/ovsaptrepo.list\nRUN apt-get update \\\n && apt-get install alba arakoon liburiparser1 gdb -y --force-yes\nRUN ln -s /usr/bin/alba /usr/bin/alba.0.6\n#  # installing voldrv packages only works from within the OVS LAN\nARG INSTALL_VOLDRV_PACKAGES=false\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'true' || echo 'we are NOT going to install the voldrv packages/testers'\n#   http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian/volumedriver-no-dedup-base_6.10.0-0_amd64.deb\nENV voldrv_jenkins=\"http://10.100.129.100:8080/view/volumedriver/view/ubuntu/job/volumedriver-no-dedup-release-ubuntu-14.04/37/artifact/volumedriver-core/build/debian\"\nENV voldrv_base_pkg_name=\"volumedriver-no-dedup\"\nENV voldrv_version=\"6.10.0-0_amd64\"\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-base_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-pitreplication_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-server_${voldrv_version}.deb )\nRUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test_${voldrv_version}.deb \\\n && dpkg -i ${voldrv_base_pkg_name}-test_${voldrv_version}.deb )\n#   packages with debug symbols\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-base-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-pitreplication-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-server-dbgsym_${voldrv_version}.ddeb )\n#   RUN test ${INSTALL_VOLDRV_PACKAGES} = 'false' \\\n#       || (wget ${voldrv_jenkins}/${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb \\\n#           && dpkg -i ${voldrv_base_pkg_name}-test-dbgsym_${voldrv_version}.ddeb )\nRUN pip install setuptools==34.0.1\nRUN pip install fabric junit-xml\nRUN chmod ugoa+rxw -R ${opam_root}\nRUN su - -c \"echo 'eval `${opam_env} `' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'LD_LIBRARY_PATH=/usr/local/lib; export LD_LIBRARY_PATH;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_TEST=volumedriver_test; export VOLDRV_TEST;' >> /home/jenkins/.profile\"\nRUN su - -c \"echo 'VOLDRV_BACKEND_TEST=backend_test; export VOLDRV_BACKEND_TEST;' >> /home/jenkins/.profile\"\nRUN echo \"jenkins ALL=NOPASSWD: ALL\" > /etc/sudoers.d/jenkins\nENTRYPOINT [\"/bin/bash\", \"-c\", \"set\", \"-e\", \"&&\", \"/home/jenkins/alba/docker/docker-entrypoint.sh\", \"$@\"]\n","originalDockerfileUglifiedHash":"cf0453a20a436f73563e29a03818ce7d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b0a6a3a8d20119ad1148f6923635d17f0abe8ea5.dockerfile"}