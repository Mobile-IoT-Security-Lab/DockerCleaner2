{"seed":1976361541,"processedDockerfileHash":"33c61623c6c4c4750b1ddbac63910e8a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:5.6-apache\n#   @link https://github.com/docker-library/wordpress\n#   install the PHP extensions we need\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libpng12-test libjpeg-test libcurl4-openssl-test -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \\\n && docker-php-ext-install gd mysqli opcache\n#   @link https://github.com/docker-library/php/issues/331#issuecomment-261016528   Really thanks\nRUN docker-php-ext-install curl mysqli opcache pdo pdo_mysql zip\n#   @link https://hub.docker.com/r/plab/docker-php/~/dockerfile/\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends bzip2 libbz2-test libfreetype6-test libjpeg62-turbo-test libmcrypt-test libpng12-test libghc-postgresql-libpq-test -y ) \\\n && docker-php-ext-install mcrypt mbstring bz2 zip \\\n && docker-php-ext-configure gd -with-freetype-dir=/usr/include/ -with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/include/postgresql/ \\\n && docker-php-ext-install gd pgsql pdo_pgsql\n#   @link https://github.com/docker-library/php/issues/57\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends zlib1g-test libicu-test g++ -y ) \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl\n#   @link https://github.com/docker-library/php/issues/77#issuecomment-88936146\nRUN pecl install -o -f xdebug \\\n && echo \"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\" > /usr/local/etc/php/conf.d/pecl-xdebug.ini\n#   set recommended PHP.ini settings\n#   see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=2' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires vhost_alias\n#   Install 'emacs' and 'less' for testelopment\n#  # I MUST remove those lines when deplyoing at the future\nCOPY sources.list /etc/apt/\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 \\\n && :\n#   for CakePHP\nRUN (apt-get update ;apt-get install --no-install-recommends emacs-nox less composer -y )\nRUN (apt-get update ;apt-get install --no-install-recommends mysql-client postgresql-client php-intl php-mbstring php-xml php-zip -y )\nENV TERM=\"xterm\"\nCOPY 000-default.conf /etc/apache2/sites-available/\nRUN sed -i 's/ AllowOverride None/ AllowOverride All/' /etc/apache2/apache2.conf\nVOLUME /var/www/html\n#   Install phpMyAdmin from here\n#   Include keyring to verify download\nCOPY phpmyadmin.keyring /tmp/\nENV VERSION=\"4.7.4\"\nENV URL=\"https://files.phpmyadmin.net/phpMyAdmin/${VERSION}/phpMyAdmin-${VERSION}-all-languages.tar.gz\"\n#   Download tarball, verify it using gpg and extract\nRUN set -x \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && curl --output phpMyAdmin.tar.gz --location $URL \\\n && curl --output phpMyAdmin.tar.gz.asc --location $URL.asc \\\n && gpgv --keyring /tmp/phpmyadmin.keyring phpMyAdmin.tar.gz.asc phpMyAdmin.tar.gz \\\n && rm -rf \"$GNUPGHOME\" \\\n && tar xzf phpMyAdmin.tar.gz \\\n && rm -f phpMyAdmin.tar.gz phpMyAdmin.tar.gz.asc \\\n && mv phpMyAdmin-$VERSION-all-languages /var/www/pma.test \\\n && rm -rf /var/www/pma.test/js/jquery/src/ /var/www/pma.test/js/openlayers/src/ /var/www/pma.test/setup/ /var/www/pma.test/sql/ /var/www/pma.test/examples/ /var/www/pma.test/test/ /var/www/pma.test/po/ \\\n && chown -R www-data:www-data /var/www/pma.test \\\n && find /var/www/pma.test -type d -exec chmod 750 {}\nCOPY config.inc.php /var/www/pma.test/\n#   Copy main script\nCOPY run.sh /var/www/pma.test/run.sh\nRUN chmod u+rwx /var/www/pma.test/run.sh\nRUN /var/www/pma.test/run.sh\n#  RUN set -x \\\n#  \t&& curl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\" \\\n#  \t&& echo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c - \\\n#  # upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\n#  \t&& tar -xzf wordpress.tar.gz -C /usr/src/ \\\n#  \t&& rm wordpress.tar.gz \\\n#  \t&& chown -R www-data:www-data /usr/src/wordpress\nCOPY docker-entrypoint.sh /usr/local/bin/\n#   RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\n#   ENTRYPOINT resets CMD\n#   ENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"apache2-foreground\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:5.6-apache\n#  @link https://github.com/docker-library/wordpress\n#  install the PHP extensions we need\nRUN apt-get update \\\n && apt-get install libpng12-test libjpeg-test libcurl4-openssl-test -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \\\n && docker-php-ext-install gd mysqli opcache\n#  @link https://github.com/docker-library/php/issues/331#issuecomment-261016528   Really thanks\nRUN docker-php-ext-install curl mysqli opcache pdo pdo_mysql zip\n#  @link https://hub.docker.com/r/plab/docker-php/~/dockerfile/\nRUN apt-get update \\\n && apt-get install bzip2 libbz2-test libfreetype6-test libjpeg62-turbo-test libmcrypt-test libpng12-test libghc-postgresql-libpq-test -y \\\n && docker-php-ext-install mcrypt mbstring bz2 zip \\\n && docker-php-ext-configure gd -with-freetype-dir=/usr/include/ -with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/include/postgresql/ \\\n && docker-php-ext-install gd pgsql pdo_pgsql\n#  @link https://github.com/docker-library/php/issues/57\nRUN apt-get update \\\n && apt-get install zlib1g-test libicu-test g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl\n#  @link https://github.com/docker-library/php/issues/77#issuecomment-88936146\nRUN pecl install -o -f xdebug \\\n && echo \"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\" > /usr/local/etc/php/conf.d/pecl-xdebug.ini\n#  set recommended PHP.ini settings\n#  see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=2' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires vhost_alias\n#  Install 'emacs' and 'less' for testelopment\n# # I MUST remove those lines when deplyoing at the future\nADD sources.list /etc/apt/\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 \\\n && apt-get update\n#  for CakePHP\nRUN apt-get install emacs-nox less composer -y\nRUN apt-get install mysql-client postgresql-client php-intl php-mbstring php-xml php-zip -y\nENV TERM=\"xterm\"\nCOPY 000-default.conf /etc/apache2/sites-available/\nRUN sed -i 's/ AllowOverride None/ AllowOverride All/' /etc/apache2/apache2.conf\nVOLUME /var/www/html\n#  Install phpMyAdmin from here\n#  Include keyring to verify download\nCOPY phpmyadmin.keyring /tmp/\nENV VERSION=\"4.7.4\"\nENV URL=\"https://files.phpmyadmin.net/phpMyAdmin/${VERSION}/phpMyAdmin-${VERSION}-all-languages.tar.gz\"\n#  Download tarball, verify it using gpg and extract\nRUN set -x \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && curl --output phpMyAdmin.tar.gz --location $URL \\\n && curl --output phpMyAdmin.tar.gz.asc --location $URL.asc \\\n && gpgv --keyring /tmp/phpmyadmin.keyring phpMyAdmin.tar.gz.asc phpMyAdmin.tar.gz \\\n && rm -rf \"$GNUPGHOME\" \\\n && tar xzf phpMyAdmin.tar.gz \\\n && rm -f phpMyAdmin.tar.gz phpMyAdmin.tar.gz.asc \\\n && mv phpMyAdmin-$VERSION-all-languages /var/www/pma.test \\\n && rm -rf /var/www/pma.test/js/jquery/src/ /var/www/pma.test/js/openlayers/src/ /var/www/pma.test/setup/ /var/www/pma.test/sql/ /var/www/pma.test/examples/ /var/www/pma.test/test/ /var/www/pma.test/po/ \\\n && chown -R www-data:www-data /var/www/pma.test \\\n && find /var/www/pma.test -type d -exec chmod 750 {} ; \\\n && find /var/www/pma.test -type f -exec chmod 640 {} ;\nCOPY config.inc.php /var/www/pma.test/\n#  Copy main script\nCOPY run.sh /var/www/pma.test/run.sh\nRUN chmod u+rwx /var/www/pma.test/run.sh\nRUN /var/www/pma.test/run.sh\n# RUN set -x \\\n# \t&& curl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\" \\\n# \t&& echo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c - \\\n# # upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\n# \t&& tar -xzf wordpress.tar.gz -C /usr/src/ \\\n# \t&& rm wordpress.tar.gz \\\n# \t&& chown -R www-data:www-data /usr/src/wordpress\nCOPY docker-entrypoint.sh /usr/local/bin/\n#  RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\n#  ENTRYPOINT resets CMD\n#  ENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"apache2-foreground\"]\n","injectedSmells":[],"originalDockerfileHash":"a72b54637162bd33bd9f258575cce245","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:5.6-apache\n#   @link https://github.com/docker-library/wordpress\n#   install the PHP extensions we need\nRUN apt-get update \\\n && apt-get install libpng12-test libjpeg-test libcurl4-openssl-test -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \\\n && docker-php-ext-install gd mysqli opcache\n#   @link https://github.com/docker-library/php/issues/331#issuecomment-261016528   Really thanks\nRUN docker-php-ext-install curl mysqli opcache pdo pdo_mysql zip\n#   @link https://hub.docker.com/r/plab/docker-php/~/dockerfile/\nRUN apt-get update \\\n && apt-get install bzip2 libbz2-test libfreetype6-test libjpeg62-turbo-test libmcrypt-test libpng12-test libghc-postgresql-libpq-test -y \\\n && docker-php-ext-install mcrypt mbstring bz2 zip \\\n && docker-php-ext-configure gd -with-freetype-dir=/usr/include/ -with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/include/postgresql/ \\\n && docker-php-ext-install gd pgsql pdo_pgsql\n#   @link https://github.com/docker-library/php/issues/57\nRUN apt-get update \\\n && apt-get install zlib1g-test libicu-test g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl\n#   @link https://github.com/docker-library/php/issues/77#issuecomment-88936146\nRUN pecl install -o -f xdebug \\\n && echo \"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\" > /usr/local/etc/php/conf.d/pecl-xdebug.ini\n#   set recommended PHP.ini settings\n#   see https://secure.php.net/manual/en/opcache.installation.php\nRUN { echo 'opcache.memory_consumption=128' ;echo 'opcache.interned_strings_buffer=8' ;echo 'opcache.max_accelerated_files=4000' ;echo 'opcache.revalidate_freq=2' ;echo 'opcache.fast_shutdown=1' ;echo 'opcache.enable_cli=1' ; } > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires vhost_alias\n#   Install 'emacs' and 'less' for testelopment\n#  # I MUST remove those lines when deplyoing at the future\nADD sources.list /etc/apt/\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5 \\\n && apt-get update\n#   for CakePHP\nRUN apt-get install emacs-nox less composer -y\nRUN apt-get install mysql-client postgresql-client php-intl php-mbstring php-xml php-zip -y\nENV TERM=\"xterm\"\nCOPY 000-default.conf /etc/apache2/sites-available/\nRUN sed -i 's/ AllowOverride None/ AllowOverride All/' /etc/apache2/apache2.conf\nVOLUME /var/www/html\n#   Install phpMyAdmin from here\n#   Include keyring to verify download\nCOPY phpmyadmin.keyring /tmp/\nENV VERSION=\"4.7.4\"\nENV URL=\"https://files.phpmyadmin.net/phpMyAdmin/${VERSION}/phpMyAdmin-${VERSION}-all-languages.tar.gz\"\n#   Download tarball, verify it using gpg and extract\nRUN set -x \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && curl --output phpMyAdmin.tar.gz --location $URL \\\n && curl --output phpMyAdmin.tar.gz.asc --location $URL.asc \\\n && gpgv --keyring /tmp/phpmyadmin.keyring phpMyAdmin.tar.gz.asc phpMyAdmin.tar.gz \\\n && rm -rf \"$GNUPGHOME\" \\\n && tar xzf phpMyAdmin.tar.gz \\\n && rm -f phpMyAdmin.tar.gz phpMyAdmin.tar.gz.asc \\\n && mv phpMyAdmin-$VERSION-all-languages /var/www/pma.test \\\n && rm -rf /var/www/pma.test/js/jquery/src/ /var/www/pma.test/js/openlayers/src/ /var/www/pma.test/setup/ /var/www/pma.test/sql/ /var/www/pma.test/examples/ /var/www/pma.test/test/ /var/www/pma.test/po/ \\\n && chown -R www-data:www-data /var/www/pma.test \\\n && find /var/www/pma.test -type d -exec chmod 750 {}\nCOPY config.inc.php /var/www/pma.test/\n#   Copy main script\nCOPY run.sh /var/www/pma.test/run.sh\nRUN chmod u+rwx /var/www/pma.test/run.sh\nRUN /var/www/pma.test/run.sh\n#  RUN set -x \\\n#  \t&& curl -o wordpress.tar.gz -fSL \"https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz\" \\\n#  \t&& echo \"$WORDPRESS_SHA1 *wordpress.tar.gz\" | sha1sum -c - \\\n#  # upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress\n#  \t&& tar -xzf wordpress.tar.gz -C /usr/src/ \\\n#  \t&& rm wordpress.tar.gz \\\n#  \t&& chown -R www-data:www-data /usr/src/wordpress\nCOPY docker-entrypoint.sh /usr/local/bin/\n#   RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\n#   ENTRYPOINT resets CMD\n#   ENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nCMD [\"apache2-foreground\"]\n","originalDockerfileUglifiedHash":"3bb97f5b7b3919596601aa3e2a5e88b5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e3c3d1dc9df9fed126104d7652ccd6409550920b.dockerfile"}