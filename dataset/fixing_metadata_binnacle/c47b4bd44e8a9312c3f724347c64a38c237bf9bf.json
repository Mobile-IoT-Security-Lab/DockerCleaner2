{"seed":3464610115,"processedDockerfileHash":"2ba8660f51b561cb7094f0d1181f5877","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://www.wihlidal.com/blog/pipeline/2018-09-15-linux-dxc-docker/\n#   https://www.wihlidal.com/blog/pipeline/2018-09-16-dxil-signing-post-compile/\n#   https://www.wihlidal.com/blog/pipeline/2018-09-17-linux-fxc-docker/\n#   https://www.wihlidal.com/blog/pipeline/2018-12-28-containerized_shader_compilers/\nFROM ubuntu:bionic AS builder\nENV DXC_BRANCH=\"master\"\nENV DXC_REPO=\"https://github.com/gwihlidal/DirectXShaderCompiler.git\"\nENV DXC_COMMIT=\"2eb78334942e0240b949189b2794b6bf74cb51af\"\nENV SHADERC_BRANCH=\"master\"\nENV SHADERC_REPO=\"https://github.com/google/shaderc.git\"\nENV SHADERC_COMMIT=\"b3523d57461c1460af68dbd6bec1e8dd5c7ce2e7\"\nENV WINE_BRANCH=\"master\"\nENV WINE_REPO=\"https://github.com/wine-mirror/wine.git\"\nENV WINE_COMMIT=\"cce8074aa9fb2191faba25ce7fd24e2678d3bd17\"\nENV SMOLV_BRANCH=\"master\"\nENV SMOLV_REPO=\"https://github.com/aras-p/smol-v.git\"\nENV SMOLV_COMMIT=\"ce2835a03fc17df4c08ae6433db02121e29f3c71\"\nENV VULKAN_SDK=\"1.1.106.0\"\n#   Prevents annoying debconf errors during builds\nARG DEBIAN_FRONTEND=\"noninteractive\"\n#   Download libraries and tools\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common build-essential locales git cmake ninja-build python python3-dev python3-pip wget unzip flex bison libpng-dev libwayland-dev libx11-dev libxrandr-dev \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#   Download shaderc repository and dependencies\nRUN git clone --recurse-submodules -b ${SHADERC_BRANCH} ${SHADERC_REPO} /shaderc \\\n && cd /shaderc git checkout ${SHADERC_COMMIT} \\\n && git reset --hard \\\n && python3 ./utils/git-sync-deps\n#   Set the locale (needed for python3 and shaderc build scripts)\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8 \"\n#   Build shaderc\nRUN mkdir -p /shaderc/build \\\n && cd /shaderc/build \\\n && cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DSHADERC_SKIP_TESTS=ON -DSPIRV_SKIP_TESTS=ON .. \\\n && ninja install\n#   Download and build Vulkan SDK\nWORKDIR /\nRUN wget -O vulkan.tgz https://sdk.lunarg.com/sdk/download/${VULKAN_SDK}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK}.tar.gz \\\n && tar zxf vulkan.tgz \\\n && mv ${VULKAN_SDK} vulkan \\\n && rm vulkan.tgz \\\n && cd /vulkan \\\n && chmod +x setup-env.sh \\\n && chmod +x build_tools.sh \\\n && ./setup-env.sh \\\n && ./build_tools.sh\n#   Download and build SMOL-V\nWORKDIR /smol-v\nRUN git clone --recurse-submodules -b ${SMOLV_BRANCH} ${SMOLV_REPO} /app/smol-v \\\n && cd /app/smol-v \\\n && git checkout ${SMOLV_COMMIT} \\\n && git reset --hard \\\n && make -f projects/Makefile -j 4\n#   Download and install Wine (for running FXC, DXIL signing tool, RGA for Windows)\nWORKDIR /wine_src\nRUN git clone --recurse-submodules -b ${WINE_BRANCH} ${WINE_REPO} /wine_src \\\n && git checkout ${WINE_COMMIT} \\\n && git reset --hard \\\n && ./configure --enable-win64 --with-png --without-freetype --without-x --prefix=/wine \\\n && make -j8 \\\n && make install\n#   Download and build DXC\nRUN git clone --recurse-submodules -b ${DXC_BRANCH} ${DXC_REPO} /dxc \\\n && cd /dxc git checkout ${DXC_COMMIT} \\\n && git reset --hard \\\n && mkdir -p /dxc/build \\\n && cd /dxc/build \\\n && cmake ../ -GNinja -DCMAKE_BUILD_TYPE=Release $( cat ../utils/cmake-predefined-config-params ;) \\\n && ninja\n#   Download and extract signing tool\nWORKDIR /signing\nRUN wget -O signing.zip https://github.com/gwihlidal/dxil-signing/releases/download/0.1.4/dxil-signing-0_1_4.zip --no-check-certificate \\\n && unzip -q signing.zip ; exit 0\nRUN rm signing.zip\n#   Download and extract Linux and Windows binaries of AMD RGA\nWORKDIR /rga\nRUN wget -O rga_linux.tgz https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-linux-2.1.tgz --no-check-certificate \\\n && tar zxf rga_linux.tgz \\\n && mv rga-2.1.* linux \\\n && rm rga_linux.tgz\nWORKDIR /rga/windows\nRUN wget -O rga_windows.zip https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-windows-x64-2.1.zip --no-check-certificate \\\n && unzip -q rga_windows.zip ; exit 0\n#   Remove GUI binaries\nRUN rm -f /rga/windows/rga_windows.zip \\\n && rm -f /rga/windows/Qt* \\\n && rm -f /rga/windows/RadeonGPUAnalyzerGUI.exe \\\n && rm -fr /rga/windows/iconengines \\\n && rm -fr /rga/windows/imageformats \\\n && rm -fr /rga/windows/platforms \\\n && rm -fr /rga/linux/Qt \\\n && rm -fr /rga/linux/Documentation \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI-bin \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI\n#   Start from a new image\nFROM ubuntu:bionic\n#   Apply updates\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libpng-dev=1.6.34-1ubuntu0.18.04.2 -y ) \\\n && apt-get clean \\\n && apt-get autoremove\n#   Copy DXC binaries from `builder` stage into final stage\nWORKDIR /app/dxc\nCOPY --from=builder /dxc/build/bin/dxc-3.7 /app/dxc/bin/dxc-3.7\nCOPY --from=builder /dxc/build/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so.3.7\nRUN ln -s /app/dxc/bin/dxc-3.7 /app/dxc/bin/dxc\nRUN ln -s /app/dxc/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so\n#   Copy glslc binary from `builder` stage into final stage\nWORKDIR /app/shaderc\nCOPY --from=builder /shaderc/build/glslc/glslc /app/shaderc/glslc\n#   Copy SMOL-V binaries from `builder` stage into final stage\nWORKDIR /app/smol-v\nCOPY --from=builder /app/smol-v /app/smol-v\n#   Copy Vulkan install binaries from `builder` stage into final stage\nWORKDIR /app/vulkan\nCOPY --from=builder /vulkan/x86_64/bin /app/vulkan\n#   Copy Wine install from `builder` stage into final stage\nWORKDIR /app/wine\nCOPY --from=builder /wine /app/wine\n#   Copy DXIL signing binaries from `builder` stage into final stage\nWORKDIR /app/signing\nCOPY --from=builder /signing /app/signing\n#   Copy RGA binaries from `builder` stage into final stage\nWORKDIR /app/rga\nCOPY --from=builder /rga /app/rga\n#   Copy local FXC binaries into container\nWORKDIR /app/fxc\nCOPY fxc_bin /app/fxc\n#   Convenient path variables\nENV DXC_PATH=\"/app/dxc/bin/dxc\"\nENV FXC_PATH=\"/app/fxc/fxc.exe\"\nENV SIGN_PATH=\"/app/signing/dxil-val.exe\"\nENV RGA_WIN_PATH=\"/app/rga/windows/rga.exe\"\nENV RGA_NIX_PATH=\"/app/rga/linux/rga\"\nENV GLSLC_PATH=\"/app/shaderc/glslc\"\nENV SMOLV_PATH=\"/app/smol-v/smolv\"\nENV WINE_PATH=\"/app/wine/bin/wine64\"\nENV VULKAN_PATH=\"/app/vulkan\"\n#   Configuration of Wine\nENV WINEARCH=\"win64\"\nENV WINEDEBUG=\"fixme-all\"\nRUN /app/wine/bin/winecfg\nWORKDIR /app\nENTRYPOINT [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://www.wihlidal.com/blog/pipeline/2018-09-15-linux-dxc-docker/\n#  https://www.wihlidal.com/blog/pipeline/2018-09-16-dxil-signing-post-compile/\n#  https://www.wihlidal.com/blog/pipeline/2018-09-17-linux-fxc-docker/\n#  https://www.wihlidal.com/blog/pipeline/2018-12-28-containerized_shader_compilers/\nFROM ubuntu:bionic AS builder\nENV DXC_BRANCH=\"master\"\nENV DXC_REPO=\"https://github.com/gwihlidal/DirectXShaderCompiler.git\"\nENV DXC_COMMIT=\"2eb78334942e0240b949189b2794b6bf74cb51af\"\nENV SHADERC_BRANCH=\"master\"\nENV SHADERC_REPO=\"https://github.com/google/shaderc.git\"\nENV SHADERC_COMMIT=\"b3523d57461c1460af68dbd6bec1e8dd5c7ce2e7\"\nENV WINE_BRANCH=\"master\"\nENV WINE_REPO=\"https://github.com/wine-mirror/wine.git\"\nENV WINE_COMMIT=\"cce8074aa9fb2191faba25ce7fd24e2678d3bd17\"\nENV SMOLV_BRANCH=\"master\"\nENV SMOLV_REPO=\"https://github.com/aras-p/smol-v.git\"\nENV SMOLV_COMMIT=\"ce2835a03fc17df4c08ae6433db02121e29f3c71\"\nENV VULKAN_SDK=\"1.1.106.0\"\n#  Prevents annoying debconf errors during builds\nARG DEBIAN_FRONTEND=\"noninteractive\"\n#  Download libraries and tools\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common build-essential locales git cmake ninja-build python python3-dev python3-pip wget unzip flex bison libpng-dev libwayland-dev libx11-dev libxrandr-dev \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#  Download shaderc repository and dependencies\nRUN git clone --recurse-submodules -b ${SHADERC_BRANCH} ${SHADERC_REPO} /shaderc \\\n && cd /shaderc git checkout ${SHADERC_COMMIT} \\\n && git reset --hard \\\n && python3 ./utils/git-sync-deps\n#  Set the locale (needed for python3 and shaderc build scripts)\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8 \"\n#  Build shaderc\nRUN mkdir -p /shaderc/build \\\n && cd /shaderc/build \\\n && cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DSHADERC_SKIP_TESTS=ON -DSPIRV_SKIP_TESTS=ON .. \\\n && ninja install\n#  Download and build Vulkan SDK\nWORKDIR /\nRUN wget -O vulkan.tgz https://sdk.lunarg.com/sdk/download/${VULKAN_SDK}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK}.tar.gz \\\n && tar zxf vulkan.tgz \\\n && mv ${VULKAN_SDK} vulkan \\\n && rm vulkan.tgz \\\n && cd /vulkan \\\n && chmod +x setup-env.sh \\\n && chmod +x build_tools.sh \\\n && ./setup-env.sh \\\n && ./build_tools.sh\n#  Download and build SMOL-V\nWORKDIR /smol-v\nRUN git clone --recurse-submodules -b ${SMOLV_BRANCH} ${SMOLV_REPO} /app/smol-v \\\n && cd /app/smol-v \\\n && git checkout ${SMOLV_COMMIT} \\\n && git reset --hard \\\n && make -f projects/Makefile -j 4\n#  Download and install Wine (for running FXC, DXIL signing tool, RGA for Windows)\nWORKDIR /wine_src\nRUN git clone --recurse-submodules -b ${WINE_BRANCH} ${WINE_REPO} /wine_src \\\n && git checkout ${WINE_COMMIT} \\\n && git reset --hard \\\n && ./configure --enable-win64 --with-png --without-freetype --without-x --prefix=/wine \\\n && make -j8 \\\n && make install\n#  Download and build DXC\nRUN git clone --recurse-submodules -b ${DXC_BRANCH} ${DXC_REPO} /dxc \\\n && cd /dxc git checkout ${DXC_COMMIT} \\\n && git reset --hard \\\n && mkdir -p /dxc/build \\\n && cd /dxc/build \\\n && cmake ../ -GNinja -DCMAKE_BUILD_TYPE=Release $( cat ../utils/cmake-predefined-config-params ;) \\\n && ninja\n#  Download and extract signing tool\nWORKDIR /signing\nRUN wget -O signing.zip https://github.com/gwihlidal/dxil-signing/releases/download/0.1.4/dxil-signing-0_1_4.zip --no-check-certificate \\\n && unzip -q signing.zip ; exit 0\nRUN rm signing.zip\n#  Download and extract Linux and Windows binaries of AMD RGA\nWORKDIR /rga\nRUN wget -O rga_linux.tgz https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-linux-2.1.tgz --no-check-certificate \\\n && tar zxf rga_linux.tgz \\\n && mv rga-2.1.* linux \\\n && rm rga_linux.tgz\nWORKDIR /rga/windows\nRUN wget -O rga_windows.zip https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-windows-x64-2.1.zip --no-check-certificate \\\n && unzip -q rga_windows.zip ; exit 0\n#  Remove GUI binaries\nRUN rm -f /rga/windows/rga_windows.zip \\\n && rm -f /rga/windows/Qt* \\\n && rm -f /rga/windows/RadeonGPUAnalyzerGUI.exe \\\n && rm -fr /rga/windows/iconengines \\\n && rm -fr /rga/windows/imageformats \\\n && rm -fr /rga/windows/platforms \\\n && rm -fr /rga/linux/Qt \\\n && rm -fr /rga/linux/Documentation \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI-bin \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI\n#  Start from a new image\nFROM ubuntu:bionic\n#  Apply updates\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y libpng-dev \\\n && apt-get clean \\\n && apt-get autoremove\n#  Copy DXC binaries from `builder` stage into final stage\nWORKDIR /app/dxc\nCOPY --from=builder /dxc/build/bin/dxc-3.7 /app/dxc/bin/dxc-3.7\nCOPY --from=builder /dxc/build/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so.3.7\nRUN ln -s /app/dxc/bin/dxc-3.7 /app/dxc/bin/dxc\nRUN ln -s /app/dxc/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so\n#  Copy glslc binary from `builder` stage into final stage\nWORKDIR /app/shaderc\nCOPY --from=builder /shaderc/build/glslc/glslc /app/shaderc/glslc\n#  Copy SMOL-V binaries from `builder` stage into final stage\nWORKDIR /app/smol-v\nCOPY --from=builder /app/smol-v /app/smol-v\n#  Copy Vulkan install binaries from `builder` stage into final stage\nWORKDIR /app/vulkan\nCOPY --from=builder /vulkan/x86_64/bin /app/vulkan\n#  Copy Wine install from `builder` stage into final stage\nWORKDIR /app/wine\nCOPY --from=builder /wine /app/wine\n#  Copy DXIL signing binaries from `builder` stage into final stage\nWORKDIR /app/signing\nCOPY --from=builder /signing /app/signing\n#  Copy RGA binaries from `builder` stage into final stage\nWORKDIR /app/rga\nCOPY --from=builder /rga /app/rga\n#  Copy local FXC binaries into container\nWORKDIR /app/fxc\nCOPY fxc_bin /app/fxc\n#  Convenient path variables\nENV DXC_PATH=\"/app/dxc/bin/dxc\"\nENV FXC_PATH=\"/app/fxc/fxc.exe\"\nENV SIGN_PATH=\"/app/signing/dxil-val.exe\"\nENV RGA_WIN_PATH=\"/app/rga/windows/rga.exe\"\nENV RGA_NIX_PATH=\"/app/rga/linux/rga\"\nENV GLSLC_PATH=\"/app/shaderc/glslc\"\nENV SMOLV_PATH=\"/app/smol-v/smolv\"\nENV WINE_PATH=\"/app/wine/bin/wine64\"\nENV VULKAN_PATH=\"/app/vulkan\"\n#  Configuration of Wine\nENV WINEARCH=\"win64\"\nENV WINEDEBUG=\"fixme-all\"\nRUN /app/wine/bin/winecfg\nWORKDIR /app\nENTRYPOINT [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"2c91859272e964fe7775722fce81c143","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://www.wihlidal.com/blog/pipeline/2018-09-15-linux-dxc-docker/\n#   https://www.wihlidal.com/blog/pipeline/2018-09-16-dxil-signing-post-compile/\n#   https://www.wihlidal.com/blog/pipeline/2018-09-17-linux-fxc-docker/\n#   https://www.wihlidal.com/blog/pipeline/2018-12-28-containerized_shader_compilers/\nFROM ubuntu:bionic AS builder\nENV DXC_BRANCH=\"master\"\nENV DXC_REPO=\"https://github.com/gwihlidal/DirectXShaderCompiler.git\"\nENV DXC_COMMIT=\"2eb78334942e0240b949189b2794b6bf74cb51af\"\nENV SHADERC_BRANCH=\"master\"\nENV SHADERC_REPO=\"https://github.com/google/shaderc.git\"\nENV SHADERC_COMMIT=\"b3523d57461c1460af68dbd6bec1e8dd5c7ce2e7\"\nENV WINE_BRANCH=\"master\"\nENV WINE_REPO=\"https://github.com/wine-mirror/wine.git\"\nENV WINE_COMMIT=\"cce8074aa9fb2191faba25ce7fd24e2678d3bd17\"\nENV SMOLV_BRANCH=\"master\"\nENV SMOLV_REPO=\"https://github.com/aras-p/smol-v.git\"\nENV SMOLV_COMMIT=\"ce2835a03fc17df4c08ae6433db02121e29f3c71\"\nENV VULKAN_SDK=\"1.1.106.0\"\n#   Prevents annoying debconf errors during builds\nARG DEBIAN_FRONTEND=\"noninteractive\"\n#   Download libraries and tools\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common build-essential locales git cmake ninja-build python python3-dev python3-pip wget unzip flex bison libpng-dev libwayland-dev libx11-dev libxrandr-dev \\\n && apt-get autoremove -y software-properties-common \\\n && apt-get autoclean \\\n && apt-get clean \\\n && apt-get autoremove\n#   Download shaderc repository and dependencies\nRUN git clone --recurse-submodules -b ${SHADERC_BRANCH} ${SHADERC_REPO} /shaderc \\\n && cd /shaderc git checkout ${SHADERC_COMMIT} \\\n && git reset --hard \\\n && python3 ./utils/git-sync-deps\n#   Set the locale (needed for python3 and shaderc build scripts)\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8 \"\n#   Build shaderc\nRUN mkdir -p /shaderc/build \\\n && cd /shaderc/build \\\n && cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DSHADERC_SKIP_TESTS=ON -DSPIRV_SKIP_TESTS=ON .. \\\n && ninja install\n#   Download and build Vulkan SDK\nWORKDIR /\nRUN wget -O vulkan.tgz https://sdk.lunarg.com/sdk/download/${VULKAN_SDK}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK}.tar.gz \\\n && tar zxf vulkan.tgz \\\n && mv ${VULKAN_SDK} vulkan \\\n && rm vulkan.tgz \\\n && cd /vulkan \\\n && chmod +x setup-env.sh \\\n && chmod +x build_tools.sh \\\n && ./setup-env.sh \\\n && ./build_tools.sh\n#   Download and build SMOL-V\nWORKDIR /smol-v\nRUN git clone --recurse-submodules -b ${SMOLV_BRANCH} ${SMOLV_REPO} /app/smol-v \\\n && cd /app/smol-v \\\n && git checkout ${SMOLV_COMMIT} \\\n && git reset --hard \\\n && make -f projects/Makefile -j 4\n#   Download and install Wine (for running FXC, DXIL signing tool, RGA for Windows)\nWORKDIR /wine_src\nRUN git clone --recurse-submodules -b ${WINE_BRANCH} ${WINE_REPO} /wine_src \\\n && git checkout ${WINE_COMMIT} \\\n && git reset --hard \\\n && ./configure --enable-win64 --with-png --without-freetype --without-x --prefix=/wine \\\n && make -j8 \\\n && make install\n#   Download and build DXC\nRUN git clone --recurse-submodules -b ${DXC_BRANCH} ${DXC_REPO} /dxc \\\n && cd /dxc git checkout ${DXC_COMMIT} \\\n && git reset --hard \\\n && mkdir -p /dxc/build \\\n && cd /dxc/build \\\n && cmake ../ -GNinja -DCMAKE_BUILD_TYPE=Release $( cat ../utils/cmake-predefined-config-params ;) \\\n && ninja\n#   Download and extract signing tool\nWORKDIR /signing\nRUN wget -O signing.zip https://github.com/gwihlidal/dxil-signing/releases/download/0.1.4/dxil-signing-0_1_4.zip --no-check-certificate \\\n && unzip -q signing.zip ; exit 0\nRUN rm signing.zip\n#   Download and extract Linux and Windows binaries of AMD RGA\nWORKDIR /rga\nRUN wget -O rga_linux.tgz https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-linux-2.1.tgz --no-check-certificate \\\n && tar zxf rga_linux.tgz \\\n && mv rga-2.1.* linux \\\n && rm rga_linux.tgz\nWORKDIR /rga/windows\nRUN wget -O rga_windows.zip https://github.com/GPUOpen-Tools/RGA/releases/download/2.1/rga-windows-x64-2.1.zip --no-check-certificate \\\n && unzip -q rga_windows.zip ; exit 0\n#   Remove GUI binaries\nRUN rm -f /rga/windows/rga_windows.zip \\\n && rm -f /rga/windows/Qt* \\\n && rm -f /rga/windows/RadeonGPUAnalyzerGUI.exe \\\n && rm -fr /rga/windows/iconengines \\\n && rm -fr /rga/windows/imageformats \\\n && rm -fr /rga/windows/platforms \\\n && rm -fr /rga/linux/Qt \\\n && rm -fr /rga/linux/Documentation \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI-bin \\\n && rm -f /rga/linux/RadeonGPUAnalyzerGUI\n#   Start from a new image\nFROM ubuntu:bionic\n#   Apply updates\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpng-dev -y \\\n && apt-get clean \\\n && apt-get autoremove\n#   Copy DXC binaries from `builder` stage into final stage\nWORKDIR /app/dxc\nCOPY --from=builder /dxc/build/bin/dxc-3.7 /app/dxc/bin/dxc-3.7\nCOPY --from=builder /dxc/build/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so.3.7\nRUN ln -s /app/dxc/bin/dxc-3.7 /app/dxc/bin/dxc\nRUN ln -s /app/dxc/lib/libdxcompiler.so.3.7 /app/dxc/lib/libdxcompiler.so\n#   Copy glslc binary from `builder` stage into final stage\nWORKDIR /app/shaderc\nCOPY --from=builder /shaderc/build/glslc/glslc /app/shaderc/glslc\n#   Copy SMOL-V binaries from `builder` stage into final stage\nWORKDIR /app/smol-v\nCOPY --from=builder /app/smol-v /app/smol-v\n#   Copy Vulkan install binaries from `builder` stage into final stage\nWORKDIR /app/vulkan\nCOPY --from=builder /vulkan/x86_64/bin /app/vulkan\n#   Copy Wine install from `builder` stage into final stage\nWORKDIR /app/wine\nCOPY --from=builder /wine /app/wine\n#   Copy DXIL signing binaries from `builder` stage into final stage\nWORKDIR /app/signing\nCOPY --from=builder /signing /app/signing\n#   Copy RGA binaries from `builder` stage into final stage\nWORKDIR /app/rga\nCOPY --from=builder /rga /app/rga\n#   Copy local FXC binaries into container\nWORKDIR /app/fxc\nCOPY fxc_bin /app/fxc\n#   Convenient path variables\nENV DXC_PATH=\"/app/dxc/bin/dxc\"\nENV FXC_PATH=\"/app/fxc/fxc.exe\"\nENV SIGN_PATH=\"/app/signing/dxil-val.exe\"\nENV RGA_WIN_PATH=\"/app/rga/windows/rga.exe\"\nENV RGA_NIX_PATH=\"/app/rga/linux/rga\"\nENV GLSLC_PATH=\"/app/shaderc/glslc\"\nENV SMOLV_PATH=\"/app/smol-v/smolv\"\nENV WINE_PATH=\"/app/wine/bin/wine64\"\nENV VULKAN_PATH=\"/app/vulkan\"\n#   Configuration of Wine\nENV WINEARCH=\"win64\"\nENV WINEDEBUG=\"fixme-all\"\nRUN /app/wine/bin/winecfg\nWORKDIR /app\nENTRYPOINT [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"40873f9a74a684d1c42d05fec6bbbf09","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c47b4bd44e8a9312c3f724347c64a38c237bf9bf.dockerfile"}