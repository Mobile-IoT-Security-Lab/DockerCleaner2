{"seed":1184638675,"processedDockerfileHash":"7a72e7e42e13560a46c97e9e5188b4d9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","do-not-have-secrets","have-a-healthcheck"],"processedDockerfile":"ARG IMAGE_REPO\nFROM ${IMAGE_REPO:-lagoon}/commons AS commons\nFROM alpine:3.7\nMAINTAINER amazee.io\nARG LAGOON_VERSION\nENV LAGOON_VERSION=\"$LAGOON_VERSION\"\n#   Copying commons files\nCOPY --from=commons /lagoon /lagoon\nCOPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/\nCOPY --from=commons /sbin/tini /sbin/\nCOPY --from=commons /home /home\nRUN chmod g+w /etc/passwd \\\n && mkdir -p /home\n#   When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`\n#   When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`\nENV TMPDIR=\"/tmp\" \\\n    TMP=\"/tmp\" \\\n    HOME=\"/home\" \\\n    ENV=\"/home/.bashrc\" \\\n    BASH_ENV=\"/home/.bashrc\"\nENV BACKUPS_DIR=\"/var/lib/mysql/backup\"\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV MARIADB_DATABASE=\"lagoon\" \\\n    MARIADB_USER=\"lagoon\"\n#   fix some environmental items\nRUN mkdir -p /usr/include/bits ; mkdir -p /usr/\nCOPY root/usr/include/bits/wordsize.h /usr/include/bits/wordsize.h\nRUN apk add asio bash boost curl findutils gnutls libaio libgcrypt libstdc++ libuuid lsof mariadb mariadb-client mariadb-common procps pwgen rsync sqlite-libs tzdata wget --no-cache --virtual .common-run-deps \\\n && apk add asio-dev --no-cache --virtual .galera-build-deps \\\n && apk add attr autoconf bison boost-dev build-base cmake coreutils curl-dev flex git gnutls-dev libaio-dev libgcrypt-dev linux-headers make musl-dev ncurses-dev patch readline-dev scons sqlite-dev tcl tcl-dev util-linux-dev zlib-dev --no-cache --virtual .common-build-deps \\\n && cd /tmp \\\n && git clone https://github.com/libcheck/check.git \\\n && cd check \\\n && mkdir build \\\n && cd build \\\n && cmake ../ \\\n && make \\\n && make install \\\n && cd /tmp \\\n && git clone -b mariadb-3.x https://github.com/MariaDB/galera.git \\\n && cd /tmp/galera \\\n && git submodule update --init --jobs=6 \\\n && sed -i s/PAGE_SIZE/PAGE_SIZE_64K/g galerautils/src/gu_alloc.cpp \\\n && sed -i '/#include <limits>/a #include <stdint.h>' galerautils/src/gu_datetime.hpp \\\n && cd /tmp/galera \\\n && ./scripts/build.sh --so strict_build_flags=0 \\\n && mkdir -p /usr/lib64/galera \\\n && mv /tmp/galera/libgalera_smm.so /usr/lib64/galera/libgalera_smm.so \\\n && apk del --purge .galera-build-deps \\\n && apk add openssl openssl-dev --no-cache --virtual .maxscale-run-deps \\\n && echo \"#define _UTSNAME_SYSNAME_LENGTH 65\" >> /usr/include/sys/utsname.h \\\n && cd /tmp \\\n && git clone --branch=2.2.2 --single-branch https://github.com/rtprio/MaxScale.git maxscale \\\n && cd /tmp/ \\\n && mkdir maxscale-build \\\n && cd maxscale-build \\\n && cmake ../maxscale -DBUILD_TESTS=Y -DWITH_SCRIPTS=N -DBUILD_MAXCTRL=N \\\n && cd /tmp/maxscale-build \\\n && make \\\n && make install \\\n && apk del --purge .common-build-deps \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\nCOPY entrypoints/ /lagoon/entrypoints/\nCOPY maxscale.sql /docker-entrypoint-initdb.d/maxscale.sql\nCOPY maxscale.cnf /etc/maxscale.cnf\nCOPY maxscale-start.sh /usr/local/bin/maxscale-start\nCOPY mysql-backup.sh /lagoon/\nCOPY my.cnf /etc/mysql/my.cnf\nRUN for i in /var/run/mysqld /var/lib/mysql /etc/mysql/conf.d /docker-entrypoint-initdb.d/ \"${BACKUPS_DIR}\"; do mkdir -p $i ;chown mysql $i ;/bin/fix-permissions $i ; done \\\n && for i in /var/lib/maxscale /var/log/maxscale /var/cache/maxscale /var/run/maxscale; do mkdir -p $i ;/bin/fix-permissions $i ; done \\\n && /bin/fix-permissions /etc/maxscale.cnf \\\n && /bin/fix-permissions /etc/mysql \\\n && ln -s /var/lib/mysql/.my.cnf /home/.my.cnf \\\n && sed -i 's/#!\\/bin\\/bash -ue/#!\\/bin\\/bash -e/' /usr/bin/wsrep_sst_rsync\nCOPY root/usr/bin/peer-finder /usr/bin/peer-finder\nCOPY root/usr/share/container-scripts/mysql/readiness-probe.sh /usr/share/container-scripts/mysql/readiness-probe.sh\nCOPY root/usr/share/container-scripts/mysql/galera.cnf /usr/share/container-scripts/mysql/galera.cnf\nCOPY root/usr/share/container-scripts/mysql/configure-galera.sh /usr/share/container-scripts/mysql/configure-galera.sh\nRUN /bin/fix-permissions /usr/share/container-scripts/mysql/\nRUN touch /var/log/mariadb-slow.log \\\n && /bin/fix-permissions /var/log/mariadb-slow.log \\\n && touch /var/log/mariadb-queries.log \\\n && /bin/fix-permissions /var/log/mariadb-queries.log\n#  ## we cannot start mysql as root, we add the user mysql to the group root and change the user of the Docker Image to this user\nRUN addgroup mysql root\nUSER mysql\nENV USER_NAME=\"mysql\"\nWORKDIR /var/lib/mysql\nVOLUME /var/lib/mysql\nEXPOSE 3306/tcp\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/lagoon/entrypoints.bash\"]\nCMD [\"mysqld\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG IMAGE_REPO\nFROM ${IMAGE_REPO:-lagoon}/commons AS commons\nFROM alpine:3.7\nMAINTAINER amazee.io\nARG LAGOON_VERSION\nENV LAGOON_VERSION=\"$LAGOON_VERSION\"\n#  Copying commons files\nCOPY --from=commons /lagoon /lagoon\nCOPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/\nCOPY --from=commons /sbin/tini /sbin/\nCOPY --from=commons /home /home\nRUN chmod g+w /etc/passwd \\\n && mkdir -p /home\n#  When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`\n#  When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`\nENV TMPDIR=\"/tmp\" \\\n    TMP=\"/tmp\" \\\n    HOME=\"/home\" \\\n    ENV=\"/home/.bashrc\" \\\n    BASH_ENV=\"/home/.bashrc\"\nENV BACKUPS_DIR=\"/var/lib/mysql/backup\"\nENV MARIADB_DATABASE=\"lagoon\" \\\n    MARIADB_USER=\"lagoon\" \\\n    MARIADB_PASSWORD=\"lagoon\" \\\n    MARIADB_ROOT_PASSWORD=\"Lag00n\"\n#  fix some environmental items\nRUN mkdir -p /usr/include/bits ; mkdir -p /usr/\nCOPY root/usr/include/bits/wordsize.h /usr/include/bits/wordsize.h\nRUN apk add --no-cache --virtual .common-run-deps asio bash boost curl findutils gnutls libaio libgcrypt libstdc++ libuuid lsof mariadb mariadb-client mariadb-common procps pwgen rsync sqlite-libs tzdata wget \\\n && apk add --no-cache --virtual .galera-build-deps asio-dev \\\n && apk add --no-cache --virtual .common-build-deps attr autoconf bison boost-dev build-base cmake coreutils curl-dev flex git gnutls-dev libaio-dev libgcrypt-dev linux-headers make musl-dev ncurses-dev patch readline-dev scons sqlite-dev tcl tcl-dev util-linux-dev zlib-dev \\\n && cd /tmp \\\n && git clone https://github.com/libcheck/check.git \\\n && cd check \\\n && mkdir build \\\n && cd build \\\n && cmake ../ \\\n && make \\\n && make install \\\n && cd /tmp \\\n && git clone -b mariadb-3.x https://github.com/MariaDB/galera.git \\\n && cd /tmp/galera \\\n && git submodule update --init --jobs=6 \\\n && sed -i s/PAGE_SIZE/PAGE_SIZE_64K/g galerautils/src/gu_alloc.cpp \\\n && sed -i '/#include <limits>/a #include <stdint.h>' galerautils/src/gu_datetime.hpp \\\n && cd /tmp/galera \\\n && ./scripts/build.sh --so strict_build_flags=0 \\\n && mkdir -p /usr/lib64/galera \\\n && mv /tmp/galera/libgalera_smm.so /usr/lib64/galera/libgalera_smm.so \\\n && apk del --purge .galera-build-deps \\\n && apk add --no-cache --virtual .maxscale-run-deps openssl openssl-dev \\\n && echo \"#define _UTSNAME_SYSNAME_LENGTH 65\" >> /usr/include/sys/utsname.h \\\n && cd /tmp \\\n && git clone --branch=2.2.2 --single-branch https://github.com/rtprio/MaxScale.git maxscale \\\n && cd /tmp/ \\\n && mkdir maxscale-build \\\n && cd maxscale-build \\\n && cmake ../maxscale -DBUILD_TESTS=Y -DWITH_SCRIPTS=N -DBUILD_MAXCTRL=N \\\n && cd /tmp/maxscale-build \\\n && make \\\n && make install \\\n && apk del --purge .common-build-deps \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\nCOPY entrypoints/ /lagoon/entrypoints/\nCOPY maxscale.sql /docker-entrypoint-initdb.d/maxscale.sql\nCOPY maxscale.cnf /etc/maxscale.cnf\nCOPY maxscale-start.sh /usr/local/bin/maxscale-start\nCOPY mysql-backup.sh /lagoon/\nCOPY my.cnf /etc/mysql/my.cnf\nRUN for i in /var/run/mysqld /var/lib/mysql /etc/mysql/conf.d /docker-entrypoint-initdb.d/ \"${BACKUPS_DIR}\"; do mkdir -p $i ;chown mysql $i ;/bin/fix-permissions $i ; done \\\n && for i in /var/lib/maxscale /var/log/maxscale /var/cache/maxscale /var/run/maxscale; do mkdir -p $i ;/bin/fix-permissions $i ; done \\\n && /bin/fix-permissions /etc/maxscale.cnf \\\n && /bin/fix-permissions /etc/mysql \\\n && ln -s /var/lib/mysql/.my.cnf /home/.my.cnf \\\n && sed -i 's/#!\\/bin\\/bash -ue/#!\\/bin\\/bash -e/' /usr/bin/wsrep_sst_rsync\nCOPY root/usr/bin/peer-finder /usr/bin/peer-finder\nCOPY root/usr/share/container-scripts/mysql/readiness-probe.sh /usr/share/container-scripts/mysql/readiness-probe.sh\nCOPY root/usr/share/container-scripts/mysql/galera.cnf /usr/share/container-scripts/mysql/galera.cnf\nCOPY root/usr/share/container-scripts/mysql/configure-galera.sh /usr/share/container-scripts/mysql/configure-galera.sh\nRUN /bin/fix-permissions /usr/share/container-scripts/mysql/\nRUN touch /var/log/mariadb-slow.log \\\n && /bin/fix-permissions /var/log/mariadb-slow.log \\\n && touch /var/log/mariadb-queries.log \\\n && /bin/fix-permissions /var/log/mariadb-queries.log\n# ## we cannot start mysql as root, we add the user mysql to the group root and change the user of the Docker Image to this user\nRUN addgroup mysql root\nUSER mysql\nENV USER_NAME=\"mysql\"\nWORKDIR /var/lib/mysql\nVOLUME /var/lib/mysql\nEXPOSE 3306/tcp\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/lagoon/entrypoints.bash\"]\nCMD [\"mysqld\"]\n","injectedSmells":[],"originalDockerfileHash":"4646818c60b1361614d17c93469c26d3","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG IMAGE_REPO\nFROM ${IMAGE_REPO:-lagoon}/commons AS commons\nFROM alpine:3.7\nMAINTAINER amazee.io\nARG LAGOON_VERSION\nENV LAGOON_VERSION=\"$LAGOON_VERSION\"\n#   Copying commons files\nCOPY --from=commons /lagoon /lagoon\nCOPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/\nCOPY --from=commons /sbin/tini /sbin/\nCOPY --from=commons /home /home\nRUN chmod g+w /etc/passwd \\\n && mkdir -p /home\n#   When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`\n#   When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`\nENV TMPDIR=\"/tmp\" \\\n    TMP=\"/tmp\" \\\n    HOME=\"/home\" \\\n    ENV=\"/home/.bashrc\" \\\n    BASH_ENV=\"/home/.bashrc\"\nENV BACKUPS_DIR=\"/var/lib/mysql/backup\"\nENV MARIADB_DATABASE=\"lagoon\" \\\n    MARIADB_USER=\"lagoon\" \\\n    MARIADB_PASSWORD=\"lagoon\" \\\n    MARIADB_ROOT_PASSWORD=\"Lag00n\"\n#   fix some environmental items\nRUN mkdir -p /usr/include/bits ; mkdir -p /usr/\nCOPY root/usr/include/bits/wordsize.h /usr/include/bits/wordsize.h\nRUN apk add --no-cache --virtual .common-run-deps asio bash boost curl findutils gnutls libaio libgcrypt libstdc++ libuuid lsof mariadb mariadb-client mariadb-common procps pwgen rsync sqlite-libs tzdata wget \\\n && apk add --no-cache --virtual .galera-build-deps asio-dev \\\n && apk add --no-cache --virtual .common-build-deps attr autoconf bison boost-dev build-base cmake coreutils curl-dev flex git gnutls-dev libaio-dev libgcrypt-dev linux-headers make musl-dev ncurses-dev patch readline-dev scons sqlite-dev tcl tcl-dev util-linux-dev zlib-dev \\\n && cd /tmp \\\n && git clone https://github.com/libcheck/check.git \\\n && cd check \\\n && mkdir build \\\n && cd build \\\n && cmake ../ \\\n && make \\\n && make install \\\n && cd /tmp \\\n && git clone -b mariadb-3.x https://github.com/MariaDB/galera.git \\\n && cd /tmp/galera \\\n && git submodule update --init --jobs=6 \\\n && sed -i s/PAGE_SIZE/PAGE_SIZE_64K/g galerautils/src/gu_alloc.cpp \\\n && sed -i '/#include <limits>/a #include <stdint.h>' galerautils/src/gu_datetime.hpp \\\n && cd /tmp/galera \\\n && ./scripts/build.sh --so strict_build_flags=0 \\\n && mkdir -p /usr/lib64/galera \\\n && mv /tmp/galera/libgalera_smm.so /usr/lib64/galera/libgalera_smm.so \\\n && apk del --purge .galera-build-deps \\\n && apk add --no-cache --virtual .maxscale-run-deps openssl openssl-dev \\\n && echo \"#define _UTSNAME_SYSNAME_LENGTH 65\" >> /usr/include/sys/utsname.h \\\n && cd /tmp \\\n && git clone --branch=2.2.2 --single-branch https://github.com/rtprio/MaxScale.git maxscale \\\n && cd /tmp/ \\\n && mkdir maxscale-build \\\n && cd maxscale-build \\\n && cmake ../maxscale -DBUILD_TESTS=Y -DWITH_SCRIPTS=N -DBUILD_MAXCTRL=N \\\n && cd /tmp/maxscale-build \\\n && make \\\n && make install \\\n && apk del --purge .common-build-deps \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/*\nCOPY entrypoints/ /lagoon/entrypoints/\nCOPY maxscale.sql /docker-entrypoint-initdb.d/maxscale.sql\nCOPY maxscale.cnf /etc/maxscale.cnf\nCOPY maxscale-start.sh /usr/local/bin/maxscale-start\nCOPY mysql-backup.sh /lagoon/\nCOPY my.cnf /etc/mysql/my.cnf\nRUN for i in /var/run/mysqld /var/lib/mysql /etc/mysql/conf.d /docker-entrypoint-initdb.d/ \"${BACKUPS_DIR}\"; do mkdir -p $i ;chown mysql $i ;/bin/fix-permissions $i ; done \\\n && for i in /var/lib/maxscale /var/log/maxscale /var/cache/maxscale /var/run/maxscale; do mkdir -p $i ;/bin/fix-permissions $i ; done \\\n && /bin/fix-permissions /etc/maxscale.cnf \\\n && /bin/fix-permissions /etc/mysql \\\n && ln -s /var/lib/mysql/.my.cnf /home/.my.cnf \\\n && sed -i 's/#!\\/bin\\/bash -ue/#!\\/bin\\/bash -e/' /usr/bin/wsrep_sst_rsync\nCOPY root/usr/bin/peer-finder /usr/bin/peer-finder\nCOPY root/usr/share/container-scripts/mysql/readiness-probe.sh /usr/share/container-scripts/mysql/readiness-probe.sh\nCOPY root/usr/share/container-scripts/mysql/galera.cnf /usr/share/container-scripts/mysql/galera.cnf\nCOPY root/usr/share/container-scripts/mysql/configure-galera.sh /usr/share/container-scripts/mysql/configure-galera.sh\nRUN /bin/fix-permissions /usr/share/container-scripts/mysql/\nRUN touch /var/log/mariadb-slow.log \\\n && /bin/fix-permissions /var/log/mariadb-slow.log \\\n && touch /var/log/mariadb-queries.log \\\n && /bin/fix-permissions /var/log/mariadb-queries.log\n#  ## we cannot start mysql as root, we add the user mysql to the group root and change the user of the Docker Image to this user\nRUN addgroup mysql root\nUSER mysql\nENV USER_NAME=\"mysql\"\nWORKDIR /var/lib/mysql\nVOLUME /var/lib/mysql\nEXPOSE 3306/tcp\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/lagoon/entrypoints.bash\"]\nCMD [\"mysqld\"]\n","originalDockerfileUglifiedHash":"52a43c75a2e8c715771d8f9873fccc97","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9e0d63bc4611709ace239c510c18b6b38da45ba4.dockerfile"}