{"seed":498749795,"processedDockerfileHash":"9f1f5af41c4cd40766fb870ec59cc558","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stretch-slim\nSHELL [\"/bin/bash\", \"-Eeuo\", \"pipefail\", \"-xc\"]\nRUN apt-get update ; apt-get install --no-install-recommends bash-completion bc ca-certificates cpio gcc git gnupg dirmngr golang-go kmod libc6-dev libelf-dev make p7zip-full patch squashfs-tools wget xorriso xz-utils -y ; rm -rf /var/lib/apt/lists/*\n#   cleaner wget output\nRUN echo 'progress = dot:giga' >> ~/.wgetrc; cp /etc/skel/.bashrc ~/\nWORKDIR /rootfs\n#   updated via \"update.sh\"\nENV TCL_MIRRORS=\"http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net\"\nENV TCL_MAJOR=\"10.x\"\nENV TCL_VERSION=\"10.1\"\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt\n#   updated via \"update.sh\"\nENV TCL_ROOTFS=\"rootfs64.gz\" \\\n    TCL_ROOTFS_MD5=\"ec65d3b2bbb64f62a171f60439c84127\"\nCOPY files/tce-load.patch files/udhcpc.patch /tcl-patches/\nRUN for mirror in $TCL_MIRRORS; do if { wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS\" || wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS\" ; } \\\n && echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; then break ; fi ; done ; echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; zcat /rootfs.gz | cpio --extract --make-directories --no-absolute-filenames ; rm /rootfs.gz ; for patch in /tcl-patches/*.patch; do patch --input \"$patch\" --strip 1 --verbose ; done ; { echo '# https://1.1.1.1/' ;echo 'nameserver 1.1.1.1' ;echo 'nameserver 1.0.0.1' ;echo ;echo '# https://developers.google.com/speed/public-dns/' ;echo 'nameserver 8.8.8.8' ;echo 'nameserver 8.8.4.4' ; } > etc/resolv.conf; cp etc/resolv.conf etc/resolv.conf.b2d ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo \"cd '$PWD'\" ;echo 'cp -T etc/resolv.conf etc/resolv.conf.bak' ;echo 'cp -T /etc/resolv.conf etc/resolv.conf' ;echo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :' ;echo 'trap \"mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :\" EXIT' ;echo 'env -i PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" TERM=\"$TERM\" chroot '\"'$PWD'\"' \"$@\"' ; } > /usr/local/bin/tcl-chroot; chmod +x /usr/local/bin/tcl-chroot\n#   add new \"docker\" user (and replace \"tc\" user usage with \"docker\")\nRUN tcl-chroot adduser -h /home/docker -g 'Docker' -s /bin/sh -G staff -D -u 1000 docker ; echo 'docker:tcuser' | tcl-chroot chpasswd ; echo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; sed -i 's/USER=\"tc\"/USER=\"docker\"/g' etc/init.d/tc-* etc/init.d/services/*\n#   https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile\nRUN mkdir -p proc ; touch proc/cmdline ; mkdir -p tmp/tce/optional usr/local/tce.installed/optional ; chown -R root:staff tmp/tce usr/local/tce.installed ; chmod -R g+w tmp/tce ; ln -sT ../../tmp/tce etc/sysconfig/tcedir ; echo -n docker > etc/sysconfig/tcuser; tcl-chroot sh -c '. /etc/init.d/tc-functions \\\n && setupHome'\n#   packages (and their deps) that we either need for our \"tce-load\" patches or that dep on \"...-KERNEL\" which we don't need (since we build our own kernel)\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.dep\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.md5.txt\n#   updated via \"update.sh\"\nENV TCL_PACKAGES=\"squashfs-tools.tcz liblzma.tcz lzo.tcz libzstd.tcz\" \\\n    TCL_PACKAGE_MD5__squashfs_tools_tcz=\"a44331fa2117314e62267147b6876a49\" \\\n    TCL_PACKAGE_MD5__liblzma_tcz=\"846ce1b68690e46f61aff2f952da433f\" \\\n    TCL_PACKAGE_MD5__lzo_tcz=\"c9a1260675774c50cea1a490978b100d\" \\\n    TCL_PACKAGE_MD5__libzstd_tcz=\"a7f383473a4ced6c79e8b1a0cc9ad167\"\nRUN for package in $TCL_PACKAGES; do eval 'md5=\"$TCL_PACKAGE_MD5__'\"$( echo \"$package\" | sed -r 's/[^a-zA-Z0-9]+/_/g' ;)\"'\"' ;echo \"$md5 *$package\" > \"usr/local/tce.installed/optional/$package.md5.txt\";for mirror in $TCL_MIRRORS; do if wget -O \"usr/local/tce.installed/optional/$package\" \"$mirror/$TCL_MAJOR/x86_64/tcz/$package\" \\\n && (cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ; then break ; fi ; done ;(cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ;unsquashfs -dest . -force \"usr/local/tce.installed/optional/$package\" ;touch \"usr/local/tce.installed/${package%.tcz}\" ;touch \"usr/local/tce.installed/optional/$package.dep\" ; done ; tcl-chroot ldconfig ; for script in usr/local/tce.installed/*; do [ -f \"$script\" ] || continue ;[ -x \"$script\" ] || continue ;tcl-chroot \"$script\" ; done ; { echo '#!/bin/bash -Eeux' ;echo 'tcl-chroot su -c \"tce-load -wicl \\\"\\$@\\\"\" docker -- - \"$@\"' ; } > /usr/local/bin/tcl-tce-load; chmod +x /usr/local/bin/tcl-tce-load\nRUN tcl-tce-load bash ; tcl-chroot bash --version ; rm -vf home/docker/.ashrc home/docker/.bashrc home/docker/.profile root/.ashrc root/.bashrc root/.profile ; echo 'source /etc/profile' > home/docker/.profile; echo 'source /etc/profile' > root/.profile; sed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd ; grep -E '^root:' etc/passwd | grep bash ; grep -E '^docker:' etc/passwd | grep bash ; grep '\\\\#' etc/profile ; echo 'PS1='\"'\"'\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ '\"'\"'' > etc/profile.d/boot2docker-ps1.sh; source etc/profile.d/boot2docker-ps1.sh ; [ \"$PS1\" = '\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ ' ]\n#   https://www.kernel.org/category/signatures.html#important-fingerprints\nENV LINUX_GPG_KEYS=\"ABAF11C65A2970B130ABE3C479BE3E4300411886  647F28654894E3BD457199BE38DBBDC86092693E\"\n#   updated via \"update.sh\"\nENV LINUX_VERSION=\"4.14.128\"\nRUN wget -O /linux.tar.xz \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz\" ; wget -O /linux.tar.asc \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign\" ; xz --decompress /linux.tar.xz ; [ -f /linux.tar ] \\\n && [ ! -f /linux.tar.xz ] ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $LINUX_GPG_KEYS; do for mirror in ha.pool.sks-keyservers.net pgp.mit.edu hkp://p80.pool.sks-keyservers.net:80 ipv4.pool.sks-keyservers.net keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80; do if gpg --batch --verbose --keyserver \"$mirror\" --keyserver-options timeout=5 --recv-keys \"$key\" ; then break ; fi ; done ;gpg --batch --fingerprint \"$key\" ; done ; gpg --batch --verify /linux.tar.asc /linux.tar ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; tar --extract --file /linux.tar --directory /usr/src ; rm /linux.tar /linux.tar.asc ; ln -sT \"linux-$LINUX_VERSION\" /usr/src/linux ; [ -d /usr/src/linux ]\nRUN { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'while [ \"$#\" -gt 0 ]; do' ;echo 'conf=\"${1%%=*}\"; shift' ;echo 'conf=\"${conf#CONFIG_}\"' ;echo 'find /usr/src/linux/ -name Kconfig -exec awk -v conf=\"$conf\" '\"'\"' $1 ~ /^(menu)?config$/ \\\n && $2 == conf { yes = 1; printf \"-- %s:%s --\\n\", FILENAME, FNR; print; next; } $1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } yes { print; next } '\"'\"' \"{}\" + ' ;echo 'done' ; } > /usr/local/bin/linux-kconfig-info; chmod +x /usr/local/bin/linux-kconfig-info ; linux-kconfig-info CGROUPS\nCOPY files/kernel-config.d /kernel-config.d\nRUN setConfs=\"$( grep -vEh '^[#-]' /kernel-config.d/* | sort -u ;)\" ; unsetConfs=\"$( sed -n 's/^-//p' /kernel-config.d/* | sort -u ;)\" ; IFS=$'\\n' ; setConfs=( $setConfs ) ; unsetConfs=( $unsetConfs ) ; unset IFS ; make -C /usr/src/linux defconfig kvmconfig xenconfig > /dev/null; (set +x ;for conf in \"${unsetConfs[@]}\"; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" /usr/src/linux/.config ; done ;for confV in \"${setConfs[@]}\"; do conf=\"${confV%%=*}\" ;sed -ri -e \"s!^($conf=.*|# $conf is not set)$!$confV!\" /usr/src/linux/.config ;if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then echo \"$confV\" >> /usr/src/linux/.config; fi ; done ) ; make -C /usr/src/linux olddefconfig ; set +x ; ret= ; for conf in \"${unsetConfs[@]}\"; do if grep \"^$conf=\" /usr/src/linux/.config ; then echo \"$conf is set!\" ;ret=1 ; fi ; done ; for confV in \"${setConfs[@]}\"; do if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then kconfig=\"$( linux-kconfig-info \"$confV\" ;)\" ;echo >&2;echo \"'$confV' is not set:\" >&2;echo >&2;echo \"$kconfig\" >&2;echo >&2;for dep in $( awk '$1 == \"depends\" \\\n && $2 == \"on\" { $1 = \"\"; $2 = \"\"; gsub(/[^a-zA-Z0-9_-]+/, \" \"); print }' <<< \"$kconfig\";); do grep -E \"^CONFIG_$dep=|^# CONFIG_$dep is not set$\" /usr/src/linux/.config >&2 || : ; done ;echo >&2;ret=1 ; fi ; done ; [ -z \"$ret\" ] || exit \"$ret\"\nRUN make -C /usr/src/linux -j \"$( nproc ;)\" bzImage modules ; make -C /usr/src/linux INSTALL_MOD_PATH=\"$PWD\" modules_install\nRUN mkdir -p /tmp/iso/boot ; cp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz\nRUN tcl-tce-load acpid bash-completion ca-certificates curl e2fsprogs git iproute2 iptables ncurses-terminfo nfs-utils openssh openssl parted procps-ng rsync tar util-linux xz\n#   bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d\n#   (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)\nRUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; ln -svT ../usr/local/etc/ssl etc/ssl ; tcl-chroot sh -eux -c 'addgroup -S docker \\\n && addgroup docker docker'\n#   install kernel headers so we can use them for building xen-utils, etc\nRUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install\n#   https://lkml.org/lkml/2018/4/12/711 (https://github.com/boot2docker/boot2docker/pull/1322)\n#   https://github.com/jirka-h/haveged/releases\nENV HAVEGED_VERSION=\"1.9.4\"\nRUN wget -O /haveged.tgz \"https://github.com/jirka-h/haveged/archive/${HAVEGED_VERSION}.tar.gz\" ; mkdir /usr/src/haveged ; tar --extract --file /haveged.tgz --directory /usr/src/haveged --strip-components 1 ; rm /haveged.tgz\n#   https://debbugs.gnu.org/11064 (libtool eats \"-static\", gcc doesn't mind getting \"--static\" even more than once)\nRUN (cd /usr/src/haveged \\\n && ./configure LDFLAGS='-static --static' ) ; make -C /usr/src/haveged/src -j \"$( nproc ;)\" haveged ; cp -v /usr/src/haveged/src/haveged usr/local/sbin/ ; strip usr/local/sbin/haveged ; tcl-chroot haveged --run 1\n#   http://download.virtualbox.org/virtualbox/\n#   updated via \"update.sh\"\nENV VBOX_VERSION=\"5.2.30\"\n#   https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS\nENV VBOX_SHA256=\"dd07da975f346608b0f6843f4be4bfdf48b4610ef49a0c0e6aa689ef81c1bd69\"\n#   (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)\nRUN wget -O /vbox.iso \"https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso\" ; echo \"$VBOX_SHA256 */vbox.iso\" | sha256sum -c - ; 7z x -o/ /vbox.iso VBoxLinuxAdditions.run ; rm /vbox.iso ; sh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox ; mkdir /usr/src/vbox/amd64 ; 7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64 ; rm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2 ; ln -sT \"vboxguest-$VBOX_VERSION\" /usr/src/vbox/amd64/src/vboxguest\nRUN make -C /usr/src/vbox/amd64/src/vboxguest -j \"$( nproc ;)\" KERN_DIR='/usr/src/linux' KERN_VER=\"$( < /usr/src/linux/include/config/kernel.release;)\" vboxguest vboxsf ; cp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/ ; ln -sT lib lib64 ; cp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/ ; cp -v /usr/src/vbox/amd64/bin/VBoxControl bin/\n#   TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)\nRUN tcl-tce-load open-vm-tools ; tcl-chroot vmhgfs-fuse --version ; tcl-chroot vmtoolsd --version\nENV PARALLELS_VERSION=\"13.3.0-43321\"\nRUN wget -O /parallels.tgz \"https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz\" ; mkdir /usr/src/parallels ; tar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1 ; rm /parallels.tgz\nRUN cp -vr /usr/src/parallels/tools/* ./ ; make -C /usr/src/parallels/kmods -f Makefile.kmods -j \"$( nproc ;)\" installme SRC='/usr/src/linux' KERNEL_DIR='/usr/src/linux' KVER=\"$( < /usr/src/linux/include/config/kernel.release;)\" PRL_FREEZE_SKIP=1 ; find /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';' ; tcl-chroot prltoolsd -V\n#   https://github.com/xenserver/xe-guest-utilities/tags\n#   updated via \"update.sh\"\nENV XEN_VERSION=\"7.13.0\"\nRUN wget -O /xen.tgz \"https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz\" ; mkdir /usr/src/xen ; tar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1 ; rm /xen.tgz\nRUN make -C /usr/src/xen -j \"$( nproc ;)\" PRODUCT_VERSION=\"$XEN_VERSION\" RELEASE='boot2docker' ; tar --extract --file \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\" ; tcl-chroot xenstore || [ \"$?\" = 1 ]\n#   Hyper-V KVP Daemon\nRUN make -C /usr/src/linux/tools/hv hv_kvp_daemon ; cp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/ ; tcl-chroot hv_kvp_daemon --help || [ \"$?\" = 1 ]\n#   scan all built modules for kernel loading\nRUN tcl-chroot depmod \"$( < /usr/src/linux/include/config/kernel.release;)\"\n#   https://github.com/tianon/cgroupfs-mount/releases\nENV CGROUPFS_MOUNT_VERSION=\"1.4\"\nRUN wget -O usr/local/sbin/cgroupfs-mount \"https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount\" ; chmod +x usr/local/sbin/cgroupfs-mount ; tcl-chroot cgroupfs-mount\nENV DOCKER_VERSION=\"19.03.0-rc3\"\n#   Get the Docker binaries with version that matches our boot2docker version.\nRUN DOCKER_CHANNEL='edge' ; case \"$DOCKER_VERSION\" in (*-rc*|*-beta*|*-tp*) DOCKER_CHANNEL='test' ;; esac ; wget -O /docker.tgz \"https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz\" ; tar -zxvf /docker.tgz -C \"usr/local/bin\" --strip-components=1 ; rm /docker.tgz ; wget -O usr/local/share/bash-completion/completions/docker \"https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker\" ; for binary in containerd ctr docker docker-init dockerd runc; do chroot . \"$binary\" --version ; done\n#   set up a few branding bits\nRUN { echo 'NAME=Boot2Docker' ;echo \"VERSION=$DOCKER_VERSION\" ;echo 'ID=boot2docker' ;echo 'ID_LIKE=tcl' ;echo \"VERSION_ID=$DOCKER_VERSION\" ;echo \"PRETTY_NAME=\\\"Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\\\"\" ;echo 'ANSI_COLOR=\"1;34\"' ;echo 'HOME_URL=\"https://github.com/boot2docker/boot2docker\"' ;echo 'SUPPORT_URL=\"https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/\"' ;echo 'BUG_REPORT_URL=\"https://github.com/boot2docker/boot2docker/issues\"' ; } > etc/os-release; sed -i 's/HOSTNAME=\"box\"/HOSTNAME=\"boot2docker\"/g' usr/bin/sethostname ; tcl-chroot sethostname ; [ \"$( < etc/hostname;)\" = 'boot2docker' ] ; for num in 0 1 2 3; do echo \"server $num.boot2docker.pool.ntp.org\" ; done > etc/ntp.conf; rm -v etc/sysconfig/ntpserver\nCOPY files/forgiving-getty files/shutdown ./usr/local/sbin/\n#   getty/inittab setup\nRUN awk -F: ' $1 == \"tty1\" { print \"tty1::respawn:/usr/local/sbin/forgiving-getty tty1\"; print \"ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0\"; next; } $1 ~ /^#?tty/ { next } { print } ' etc/inittab > etc/inittab.new; mv etc/inittab.new etc/inittab ; grep forgiving-getty etc/inittab ; { echo '#!/bin/sh' ;echo 'user=\"$(cat /etc/sysconfig/tcuser 2>/dev/null)\"' ;echo 'exec login -f \"${user:-docker}\"' ; } > usr/local/sbin/autologin; chmod +x usr/local/sbin/autologin\n#   ssh config prep\nRUN [ ! -f usr/local/etc/sshd_config ] ; sed -r -e 's/^#(UseDNS[[:space:]])/\\1/' -e 's/^#(PermitUserEnvironment)[[:space:]].*$/\\1 yes/' usr/local/etc/ssh/sshd_config.orig > usr/local/etc/ssh/sshd_config; grep '^UseDNS no$' usr/local/etc/ssh/sshd_config ; grep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config ; mkdir -p home/docker/.ssh ; echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; ln -sT ../usr/local/etc/acpi etc/acpi ; [ -z \"$( ls -A etc/acpi/events ;)\" ] ; { echo 'event=button/power' ;echo 'action=/usr/bin/env poweroff' ; } > etc/acpi/events/power; echo 'UTC' > etc/timezone; cp -vL /usr/share/zoneinfo/UTC etc/localtime ; tcl-chroot addgroup -S dockremap ; tcl-chroot adduser -S -G dockremap dockremap ; echo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid\nRUN savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends isolinux syslinux-common -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /tmp/iso/isolinux ; cp -v /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/ldlinux.c32 /usr/lib/syslinux/modules/bios/libutil.c32 /usr/lib/syslinux/modules/bios/menu.c32 /tmp/iso/isolinux/ ; cp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ ; apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\nCOPY files/isolinux.cfg /tmp/iso/isolinux/\nCOPY files/init.d/* ./etc/init.d/\nCOPY files/bootsync.sh ./opt/\n#   temporary boot debugging aid\n#  RUN sed -i '2i set -x' etc/init.d/tc-config\nCOPY files/make-b2d-iso.sh /usr/local/bin/\nRUN time make-b2d-iso.sh ; du -hs /tmp/boot2docker.iso\nCMD [\"sh\", \"-c\", \"[\", \"-t\", \"1\", \"]\", \"&&\", \"exec\", \"bash\", \"||\", \"exec\", \"cat\", \"/tmp/boot2docker.iso\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch-slim\nSHELL [\"/bin/bash\", \"-Eeuo\", \"pipefail\", \"-xc\"]\nRUN apt-get update ; apt-get install --no-install-recommends bash-completion bc ca-certificates cpio gcc git gnupg dirmngr golang-go kmod libc6-dev libelf-dev make p7zip-full patch squashfs-tools wget xorriso xz-utils -y ; rm -rf /var/lib/apt/lists/*\n#  cleaner wget output\nRUN echo 'progress = dot:giga' >> ~/.wgetrc; cp /etc/skel/.bashrc ~/\nWORKDIR /rootfs\n#  updated via \"update.sh\"\nENV TCL_MIRRORS=\"http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net\"\nENV TCL_MAJOR=\"10.x\"\nENV TCL_VERSION=\"10.1\"\n#  http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt\n#  updated via \"update.sh\"\nENV TCL_ROOTFS=\"rootfs64.gz\" \\\n    TCL_ROOTFS_MD5=\"ec65d3b2bbb64f62a171f60439c84127\"\nCOPY files/tce-load.patch files/udhcpc.patch /tcl-patches/\nRUN for mirror in $TCL_MIRRORS; do if { wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS\" || wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS\" ; } \\\n && echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; then break ; fi ; done ; echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; zcat /rootfs.gz | cpio --extract --make-directories --no-absolute-filenames ; rm /rootfs.gz ; for patch in /tcl-patches/*.patch; do patch --input \"$patch\" --strip 1 --verbose ; done ; { echo '# https://1.1.1.1/' ;echo 'nameserver 1.1.1.1' ;echo 'nameserver 1.0.0.1' ;echo ;echo '# https://developers.google.com/speed/public-dns/' ;echo 'nameserver 8.8.8.8' ;echo 'nameserver 8.8.4.4' ; } > etc/resolv.conf; cp etc/resolv.conf etc/resolv.conf.b2d ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo \"cd '$PWD'\" ;echo 'cp -T etc/resolv.conf etc/resolv.conf.bak' ;echo 'cp -T /etc/resolv.conf etc/resolv.conf' ;echo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :' ;echo 'trap \"mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :\" EXIT' ;echo 'env -i PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" TERM=\"$TERM\" chroot '\"'$PWD'\"' \"$@\"' ; } > /usr/local/bin/tcl-chroot; chmod +x /usr/local/bin/tcl-chroot\n#  add new \"docker\" user (and replace \"tc\" user usage with \"docker\")\nRUN tcl-chroot adduser -h /home/docker -g 'Docker' -s /bin/sh -G staff -D -u 1000 docker ; echo 'docker:tcuser' | tcl-chroot chpasswd ; echo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; sed -i 's/USER=\"tc\"/USER=\"docker\"/g' etc/init.d/tc-* etc/init.d/services/*\n#  https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile\nRUN mkdir -p proc ; touch proc/cmdline ; mkdir -p tmp/tce/optional usr/local/tce.installed/optional ; chown -R root:staff tmp/tce usr/local/tce.installed ; chmod -R g+w tmp/tce ; ln -sT ../../tmp/tce etc/sysconfig/tcedir ; echo -n docker > etc/sysconfig/tcuser; tcl-chroot sh -c '. /etc/init.d/tc-functions \\\n && setupHome'\n#  packages (and their deps) that we either need for our \"tce-load\" patches or that dep on \"...-KERNEL\" which we don't need (since we build our own kernel)\n#  http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.dep\n#  http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.md5.txt\n#  updated via \"update.sh\"\nENV TCL_PACKAGES=\"squashfs-tools.tcz liblzma.tcz lzo.tcz libzstd.tcz\" \\\n    TCL_PACKAGE_MD5__squashfs_tools_tcz=\"a44331fa2117314e62267147b6876a49\" \\\n    TCL_PACKAGE_MD5__liblzma_tcz=\"846ce1b68690e46f61aff2f952da433f\" \\\n    TCL_PACKAGE_MD5__lzo_tcz=\"c9a1260675774c50cea1a490978b100d\" \\\n    TCL_PACKAGE_MD5__libzstd_tcz=\"a7f383473a4ced6c79e8b1a0cc9ad167\"\nRUN for package in $TCL_PACKAGES; do eval 'md5=\"$TCL_PACKAGE_MD5__'\"$( echo \"$package\" | sed -r 's/[^a-zA-Z0-9]+/_/g' ;)\"'\"' ;echo \"$md5 *$package\" > \"usr/local/tce.installed/optional/$package.md5.txt\";for mirror in $TCL_MIRRORS; do if wget -O \"usr/local/tce.installed/optional/$package\" \"$mirror/$TCL_MAJOR/x86_64/tcz/$package\" \\\n && (cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ; then break ; fi ; done ;(cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ;unsquashfs -dest . -force \"usr/local/tce.installed/optional/$package\" ;touch \"usr/local/tce.installed/${package%.tcz}\" ;touch \"usr/local/tce.installed/optional/$package.dep\" ; done ; tcl-chroot ldconfig ; for script in usr/local/tce.installed/*; do [ -f \"$script\" ] || continue ;[ -x \"$script\" ] || continue ;tcl-chroot \"$script\" ; done ; { echo '#!/bin/bash -Eeux' ;echo 'tcl-chroot su -c \"tce-load -wicl \\\"\\$@\\\"\" docker -- - \"$@\"' ; } > /usr/local/bin/tcl-tce-load; chmod +x /usr/local/bin/tcl-tce-load\nRUN tcl-tce-load bash ; tcl-chroot bash --version ; rm -vf home/docker/.ashrc home/docker/.bashrc home/docker/.profile root/.ashrc root/.bashrc root/.profile ; echo 'source /etc/profile' > home/docker/.profile; echo 'source /etc/profile' > root/.profile; sed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd ; grep -E '^root:' etc/passwd | grep bash ; grep -E '^docker:' etc/passwd | grep bash ; grep '\\\\#' etc/profile ; echo 'PS1='\"'\"'\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ '\"'\"'' > etc/profile.d/boot2docker-ps1.sh; source etc/profile.d/boot2docker-ps1.sh ; [ \"$PS1\" = '\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ ' ]\n#  https://www.kernel.org/category/signatures.html#important-fingerprints\nENV LINUX_GPG_KEYS=\"ABAF11C65A2970B130ABE3C479BE3E4300411886  647F28654894E3BD457199BE38DBBDC86092693E\"\n#  updated via \"update.sh\"\nENV LINUX_VERSION=\"4.14.128\"\nRUN wget -O /linux.tar.xz \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz\" ; wget -O /linux.tar.asc \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign\" ; xz --decompress /linux.tar.xz ; [ -f /linux.tar ] \\\n && [ ! -f /linux.tar.xz ] ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $LINUX_GPG_KEYS; do for mirror in ha.pool.sks-keyservers.net pgp.mit.edu hkp://p80.pool.sks-keyservers.net:80 ipv4.pool.sks-keyservers.net keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80; do if gpg --batch --verbose --keyserver \"$mirror\" --keyserver-options timeout=5 --recv-keys \"$key\" ; then break ; fi ; done ;gpg --batch --fingerprint \"$key\" ; done ; gpg --batch --verify /linux.tar.asc /linux.tar ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; tar --extract --file /linux.tar --directory /usr/src ; rm /linux.tar /linux.tar.asc ; ln -sT \"linux-$LINUX_VERSION\" /usr/src/linux ; [ -d /usr/src/linux ]\nRUN { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'while [ \"$#\" -gt 0 ]; do' ;echo 'conf=\"${1%%=*}\"; shift' ;echo 'conf=\"${conf#CONFIG_}\"' ;echo 'find /usr/src/linux/ -name Kconfig -exec awk -v conf=\"$conf\" '\"'\"' $1 ~ /^(menu)?config$/ \\\n && $2 == conf { yes = 1; printf \"-- %s:%s --\\n\", FILENAME, FNR; print; next; } $1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } yes { print; next } '\"'\"' \"{}\" + ' ;echo 'done' ; } > /usr/local/bin/linux-kconfig-info; chmod +x /usr/local/bin/linux-kconfig-info ; linux-kconfig-info CGROUPS\nCOPY files/kernel-config.d /kernel-config.d\nRUN setConfs=\"$( grep -vEh '^[#-]' /kernel-config.d/* | sort -u ;)\" ; unsetConfs=\"$( sed -n 's/^-//p' /kernel-config.d/* | sort -u ;)\" ; IFS=$'\\n' ; setConfs=( $setConfs ) ; unsetConfs=( $unsetConfs ) ; unset IFS ; make -C /usr/src/linux defconfig kvmconfig xenconfig > /dev/null; (set +x ;for conf in \"${unsetConfs[@]}\"; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" /usr/src/linux/.config ; done ;for confV in \"${setConfs[@]}\"; do conf=\"${confV%%=*}\" ;sed -ri -e \"s!^($conf=.*|# $conf is not set)$!$confV!\" /usr/src/linux/.config ;if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then echo \"$confV\" >> /usr/src/linux/.config; fi ; done ) ; make -C /usr/src/linux olddefconfig ; set +x ; ret= ; for conf in \"${unsetConfs[@]}\"; do if grep \"^$conf=\" /usr/src/linux/.config ; then echo \"$conf is set!\" ;ret=1 ; fi ; done ; for confV in \"${setConfs[@]}\"; do if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then kconfig=\"$( linux-kconfig-info \"$confV\" ;)\" ;echo >&2;echo \"'$confV' is not set:\" >&2;echo >&2;echo \"$kconfig\" >&2;echo >&2;for dep in $( awk '$1 == \"depends\" \\\n && $2 == \"on\" { $1 = \"\"; $2 = \"\"; gsub(/[^a-zA-Z0-9_-]+/, \" \"); print }' <<< \"$kconfig\";); do grep -E \"^CONFIG_$dep=|^# CONFIG_$dep is not set$\" /usr/src/linux/.config >&2 || : ; done ;echo >&2;ret=1 ; fi ; done ; [ -z \"$ret\" ] || exit \"$ret\"\nRUN make -C /usr/src/linux -j \"$( nproc ;)\" bzImage modules ; make -C /usr/src/linux INSTALL_MOD_PATH=\"$PWD\" modules_install\nRUN mkdir -p /tmp/iso/boot ; cp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz\nRUN tcl-tce-load acpid bash-completion ca-certificates curl e2fsprogs git iproute2 iptables ncurses-terminfo nfs-utils openssh openssl parted procps-ng rsync tar util-linux xz\n#  bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d\n#  (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)\nRUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; ln -svT ../usr/local/etc/ssl etc/ssl ; tcl-chroot sh -eux -c 'addgroup -S docker \\\n && addgroup docker docker'\n#  install kernel headers so we can use them for building xen-utils, etc\nRUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install\n#  https://lkml.org/lkml/2018/4/12/711 (https://github.com/boot2docker/boot2docker/pull/1322)\n#  https://github.com/jirka-h/haveged/releases\nENV HAVEGED_VERSION=\"1.9.4\"\nRUN wget -O /haveged.tgz \"https://github.com/jirka-h/haveged/archive/${HAVEGED_VERSION}.tar.gz\" ; mkdir /usr/src/haveged ; tar --extract --file /haveged.tgz --directory /usr/src/haveged --strip-components 1 ; rm /haveged.tgz\n#  https://debbugs.gnu.org/11064 (libtool eats \"-static\", gcc doesn't mind getting \"--static\" even more than once)\nRUN (cd /usr/src/haveged \\\n && ./configure LDFLAGS='-static --static' ) ; make -C /usr/src/haveged/src -j \"$( nproc ;)\" haveged ; cp -v /usr/src/haveged/src/haveged usr/local/sbin/ ; strip usr/local/sbin/haveged ; tcl-chroot haveged --run 1\n#  http://download.virtualbox.org/virtualbox/\n#  updated via \"update.sh\"\nENV VBOX_VERSION=\"5.2.30\"\n#  https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS\nENV VBOX_SHA256=\"dd07da975f346608b0f6843f4be4bfdf48b4610ef49a0c0e6aa689ef81c1bd69\"\n#  (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)\nRUN wget -O /vbox.iso \"https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso\" ; echo \"$VBOX_SHA256 */vbox.iso\" | sha256sum -c - ; 7z x -o/ /vbox.iso VBoxLinuxAdditions.run ; rm /vbox.iso ; sh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox ; mkdir /usr/src/vbox/amd64 ; 7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64 ; rm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2 ; ln -sT \"vboxguest-$VBOX_VERSION\" /usr/src/vbox/amd64/src/vboxguest\nRUN make -C /usr/src/vbox/amd64/src/vboxguest -j \"$( nproc ;)\" KERN_DIR='/usr/src/linux' KERN_VER=\"$( < /usr/src/linux/include/config/kernel.release;)\" vboxguest vboxsf ; cp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/ ; ln -sT lib lib64 ; cp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/ ; cp -v /usr/src/vbox/amd64/bin/VBoxControl bin/\n#  TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)\nRUN tcl-tce-load open-vm-tools ; tcl-chroot vmhgfs-fuse --version ; tcl-chroot vmtoolsd --version\nENV PARALLELS_VERSION=\"13.3.0-43321\"\nRUN wget -O /parallels.tgz \"https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz\" ; mkdir /usr/src/parallels ; tar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1 ; rm /parallels.tgz\nRUN cp -vr /usr/src/parallels/tools/* ./ ; make -C /usr/src/parallels/kmods -f Makefile.kmods -j \"$( nproc ;)\" installme SRC='/usr/src/linux' KERNEL_DIR='/usr/src/linux' KVER=\"$( < /usr/src/linux/include/config/kernel.release;)\" PRL_FREEZE_SKIP=1 ; find /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';' ; tcl-chroot prltoolsd -V\n#  https://github.com/xenserver/xe-guest-utilities/tags\n#  updated via \"update.sh\"\nENV XEN_VERSION=\"7.13.0\"\nRUN wget -O /xen.tgz \"https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz\" ; mkdir /usr/src/xen ; tar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1 ; rm /xen.tgz\nRUN make -C /usr/src/xen -j \"$( nproc ;)\" PRODUCT_VERSION=\"$XEN_VERSION\" RELEASE='boot2docker' ; tar --extract --file \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\" ; tcl-chroot xenstore || [ \"$?\" = 1 ]\n#  Hyper-V KVP Daemon\nRUN make -C /usr/src/linux/tools/hv hv_kvp_daemon ; cp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/ ; tcl-chroot hv_kvp_daemon --help || [ \"$?\" = 1 ]\n#  scan all built modules for kernel loading\nRUN tcl-chroot depmod \"$( < /usr/src/linux/include/config/kernel.release;)\"\n#  https://github.com/tianon/cgroupfs-mount/releases\nENV CGROUPFS_MOUNT_VERSION=\"1.4\"\nRUN wget -O usr/local/sbin/cgroupfs-mount \"https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount\" ; chmod +x usr/local/sbin/cgroupfs-mount ; tcl-chroot cgroupfs-mount\nENV DOCKER_VERSION=\"19.03.0-rc3\"\n#  Get the Docker binaries with version that matches our boot2docker version.\nRUN DOCKER_CHANNEL='edge' ; case \"$DOCKER_VERSION\" in (*-rc*|*-beta*|*-tp*) DOCKER_CHANNEL='test' ;; esac ; wget -O /docker.tgz \"https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz\" ; tar -zxvf /docker.tgz -C \"usr/local/bin\" --strip-components=1 ; rm /docker.tgz ; wget -O usr/local/share/bash-completion/completions/docker \"https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker\" ; for binary in containerd ctr docker docker-init dockerd runc; do chroot . \"$binary\" --version ; done\n#  set up a few branding bits\nRUN { echo 'NAME=Boot2Docker' ;echo \"VERSION=$DOCKER_VERSION\" ;echo 'ID=boot2docker' ;echo 'ID_LIKE=tcl' ;echo \"VERSION_ID=$DOCKER_VERSION\" ;echo \"PRETTY_NAME=\\\"Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\\\"\" ;echo 'ANSI_COLOR=\"1;34\"' ;echo 'HOME_URL=\"https://github.com/boot2docker/boot2docker\"' ;echo 'SUPPORT_URL=\"https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/\"' ;echo 'BUG_REPORT_URL=\"https://github.com/boot2docker/boot2docker/issues\"' ; } > etc/os-release; sed -i 's/HOSTNAME=\"box\"/HOSTNAME=\"boot2docker\"/g' usr/bin/sethostname ; tcl-chroot sethostname ; [ \"$( < etc/hostname;)\" = 'boot2docker' ] ; for num in 0 1 2 3; do echo \"server $num.boot2docker.pool.ntp.org\" ; done > etc/ntp.conf; rm -v etc/sysconfig/ntpserver\nCOPY files/forgiving-getty files/shutdown ./usr/local/sbin/\n#  getty/inittab setup\nRUN awk -F: ' $1 == \"tty1\" { print \"tty1::respawn:/usr/local/sbin/forgiving-getty tty1\"; print \"ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0\"; next; } $1 ~ /^#?tty/ { next } { print } ' etc/inittab > etc/inittab.new; mv etc/inittab.new etc/inittab ; grep forgiving-getty etc/inittab ; { echo '#!/bin/sh' ;echo 'user=\"$(cat /etc/sysconfig/tcuser 2>/dev/null)\"' ;echo 'exec login -f \"${user:-docker}\"' ; } > usr/local/sbin/autologin; chmod +x usr/local/sbin/autologin\n#  ssh config prep\nRUN [ ! -f usr/local/etc/sshd_config ] ; sed -r -e 's/^#(UseDNS[[:space:]])/\\1/' -e 's/^#(PermitUserEnvironment)[[:space:]].*$/\\1 yes/' usr/local/etc/ssh/sshd_config.orig > usr/local/etc/ssh/sshd_config; grep '^UseDNS no$' usr/local/etc/ssh/sshd_config ; grep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config ; mkdir -p home/docker/.ssh ; echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; ln -sT ../usr/local/etc/acpi etc/acpi ; [ -z \"$( ls -A etc/acpi/events ;)\" ] ; { echo 'event=button/power' ;echo 'action=/usr/bin/env poweroff' ; } > etc/acpi/events/power; echo 'UTC' > etc/timezone; cp -vL /usr/share/zoneinfo/UTC etc/localtime ; tcl-chroot addgroup -S dockremap ; tcl-chroot adduser -S -G dockremap dockremap ; echo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid\nRUN savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends isolinux syslinux-common -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /tmp/iso/isolinux ; cp -v /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/ldlinux.c32 /usr/lib/syslinux/modules/bios/libutil.c32 /usr/lib/syslinux/modules/bios/menu.c32 /tmp/iso/isolinux/ ; cp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ ; apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\nCOPY files/isolinux.cfg /tmp/iso/isolinux/\nCOPY files/init.d/* ./etc/init.d/\nCOPY files/bootsync.sh ./opt/\n#  temporary boot debugging aid\n# RUN sed -i '2i set -x' etc/init.d/tc-config\nCOPY files/make-b2d-iso.sh /usr/local/bin/\nRUN time make-b2d-iso.sh ; du -hs /tmp/boot2docker.iso\nCMD [\"sh\", \"-c\", \"[\", \"-t\", \"1\", \"]\", \"&&\", \"exec\", \"bash\", \"||\", \"exec\", \"cat\", \"/tmp/boot2docker.iso\"]\n","injectedSmells":[],"originalDockerfileHash":"1c03d0bc7f4e888c68dce3e81dba5163","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch-slim\nSHELL [\"/bin/bash\", \"-Eeuo\", \"pipefail\", \"-xc\"]\nRUN apt-get update ; apt-get install --no-install-recommends bash-completion bc ca-certificates cpio gcc git gnupg dirmngr golang-go kmod libc6-dev libelf-dev make p7zip-full patch squashfs-tools wget xorriso xz-utils -y ; rm -rf /var/lib/apt/lists/*\n#   cleaner wget output\nRUN echo 'progress = dot:giga' >> ~/.wgetrc; cp /etc/skel/.bashrc ~/\nWORKDIR /rootfs\n#   updated via \"update.sh\"\nENV TCL_MIRRORS=\"http://distro.ibiblio.org/tinycorelinux http://repo.tinycorelinux.net\"\nENV TCL_MAJOR=\"10.x\"\nENV TCL_VERSION=\"10.1\"\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/archive/8.2.1/distribution_files/rootfs64.gz.md5.txt\n#   updated via \"update.sh\"\nENV TCL_ROOTFS=\"rootfs64.gz\" \\\n    TCL_ROOTFS_MD5=\"ec65d3b2bbb64f62a171f60439c84127\"\nCOPY files/tce-load.patch files/udhcpc.patch /tcl-patches/\nRUN for mirror in $TCL_MIRRORS; do if { wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/archive/$TCL_VERSION/distribution_files/$TCL_ROOTFS\" || wget -O /rootfs.gz \"$mirror/$TCL_MAJOR/x86_64/release/distribution_files/$TCL_ROOTFS\" ; } \\\n && echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; then break ; fi ; done ; echo \"$TCL_ROOTFS_MD5 */rootfs.gz\" | md5sum -c - ; zcat /rootfs.gz | cpio --extract --make-directories --no-absolute-filenames ; rm /rootfs.gz ; for patch in /tcl-patches/*.patch; do patch --input \"$patch\" --strip 1 --verbose ; done ; { echo '# https://1.1.1.1/' ;echo 'nameserver 1.1.1.1' ;echo 'nameserver 1.0.0.1' ;echo ;echo '# https://developers.google.com/speed/public-dns/' ;echo 'nameserver 8.8.8.8' ;echo 'nameserver 8.8.4.4' ; } > etc/resolv.conf; cp etc/resolv.conf etc/resolv.conf.b2d ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo \"cd '$PWD'\" ;echo 'cp -T etc/resolv.conf etc/resolv.conf.bak' ;echo 'cp -T /etc/resolv.conf etc/resolv.conf' ;echo 'cp -T /proc/cpuinfo proc/cpuinfo 2>/dev/null || :' ;echo 'trap \"mv -T etc/resolv.conf.bak etc/resolv.conf || :; rm proc/cpuinfo 2>/dev/null || :\" EXIT' ;echo 'env -i PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" TERM=\"$TERM\" chroot '\"'$PWD'\"' \"$@\"' ; } > /usr/local/bin/tcl-chroot; chmod +x /usr/local/bin/tcl-chroot\n#   add new \"docker\" user (and replace \"tc\" user usage with \"docker\")\nRUN tcl-chroot adduser -h /home/docker -g 'Docker' -s /bin/sh -G staff -D -u 1000 docker ; echo 'docker:tcuser' | tcl-chroot chpasswd ; echo 'docker ALL = NOPASSWD: ALL' >> etc/sudoers; sed -i 's/USER=\"tc\"/USER=\"docker\"/g' etc/init.d/tc-* etc/init.d/services/*\n#   https://github.com/tatsushid/docker-tinycore/blob/017b258a08a41399f65250c9865a163226c8e0bf/8.2/x86_64/Dockerfile\nRUN mkdir -p proc ; touch proc/cmdline ; mkdir -p tmp/tce/optional usr/local/tce.installed/optional ; chown -R root:staff tmp/tce usr/local/tce.installed ; chmod -R g+w tmp/tce ; ln -sT ../../tmp/tce etc/sysconfig/tcedir ; echo -n docker > etc/sysconfig/tcuser; tcl-chroot sh -c '. /etc/init.d/tc-functions \\\n && setupHome'\n#   packages (and their deps) that we either need for our \"tce-load\" patches or that dep on \"...-KERNEL\" which we don't need (since we build our own kernel)\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.dep\n#   http://distro.ibiblio.org/tinycorelinux/8.x/x86_64/tcz/squashfs-tools.tcz.md5.txt\n#   updated via \"update.sh\"\nENV TCL_PACKAGES=\"squashfs-tools.tcz liblzma.tcz lzo.tcz libzstd.tcz\" \\\n    TCL_PACKAGE_MD5__squashfs_tools_tcz=\"a44331fa2117314e62267147b6876a49\" \\\n    TCL_PACKAGE_MD5__liblzma_tcz=\"846ce1b68690e46f61aff2f952da433f\" \\\n    TCL_PACKAGE_MD5__lzo_tcz=\"c9a1260675774c50cea1a490978b100d\" \\\n    TCL_PACKAGE_MD5__libzstd_tcz=\"a7f383473a4ced6c79e8b1a0cc9ad167\"\nRUN for package in $TCL_PACKAGES; do eval 'md5=\"$TCL_PACKAGE_MD5__'\"$( echo \"$package\" | sed -r 's/[^a-zA-Z0-9]+/_/g' ;)\"'\"' ;echo \"$md5 *$package\" > \"usr/local/tce.installed/optional/$package.md5.txt\";for mirror in $TCL_MIRRORS; do if wget -O \"usr/local/tce.installed/optional/$package\" \"$mirror/$TCL_MAJOR/x86_64/tcz/$package\" \\\n && (cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ; then break ; fi ; done ;(cd usr/local/tce.installed/optional \\\n && md5sum -c \"$package.md5.txt\" ) ;unsquashfs -dest . -force \"usr/local/tce.installed/optional/$package\" ;touch \"usr/local/tce.installed/${package%.tcz}\" ;touch \"usr/local/tce.installed/optional/$package.dep\" ; done ; tcl-chroot ldconfig ; for script in usr/local/tce.installed/*; do [ -f \"$script\" ] || continue ;[ -x \"$script\" ] || continue ;tcl-chroot \"$script\" ; done ; { echo '#!/bin/bash -Eeux' ;echo 'tcl-chroot su -c \"tce-load -wicl \\\"\\$@\\\"\" docker -- - \"$@\"' ; } > /usr/local/bin/tcl-tce-load; chmod +x /usr/local/bin/tcl-tce-load\nRUN tcl-tce-load bash ; tcl-chroot bash --version ; rm -vf home/docker/.ashrc home/docker/.bashrc home/docker/.profile root/.ashrc root/.bashrc root/.profile ; echo 'source /etc/profile' > home/docker/.profile; echo 'source /etc/profile' > root/.profile; sed -ri '/^(docker|root):/ s!:[^:]*$!:/bin/bash!' etc/passwd ; grep -E '^root:' etc/passwd | grep bash ; grep -E '^docker:' etc/passwd | grep bash ; grep '\\\\#' etc/profile ; echo 'PS1='\"'\"'\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ '\"'\"'' > etc/profile.d/boot2docker-ps1.sh; source etc/profile.d/boot2docker-ps1.sh ; [ \"$PS1\" = '\\[\\e[1;32m\\]\\u@\\h\\[\\e[0m\\]:\\[\\e[1;34m\\]\\w\\[\\e[0m\\]\\$ ' ]\n#   https://www.kernel.org/category/signatures.html#important-fingerprints\nENV LINUX_GPG_KEYS=\"ABAF11C65A2970B130ABE3C479BE3E4300411886  647F28654894E3BD457199BE38DBBDC86092693E\"\n#   updated via \"update.sh\"\nENV LINUX_VERSION=\"4.14.128\"\nRUN wget -O /linux.tar.xz \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.xz\" ; wget -O /linux.tar.asc \"https://cdn.kernel.org/pub/linux/kernel/v${LINUX_VERSION%%.*}.x/linux-${LINUX_VERSION}.tar.sign\" ; xz --decompress /linux.tar.xz ; [ -f /linux.tar ] \\\n && [ ! -f /linux.tar.xz ] ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $LINUX_GPG_KEYS; do for mirror in ha.pool.sks-keyservers.net pgp.mit.edu hkp://p80.pool.sks-keyservers.net:80 ipv4.pool.sks-keyservers.net keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80; do if gpg --batch --verbose --keyserver \"$mirror\" --keyserver-options timeout=5 --recv-keys \"$key\" ; then break ; fi ; done ;gpg --batch --fingerprint \"$key\" ; done ; gpg --batch --verify /linux.tar.asc /linux.tar ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; tar --extract --file /linux.tar --directory /usr/src ; rm /linux.tar /linux.tar.asc ; ln -sT \"linux-$LINUX_VERSION\" /usr/src/linux ; [ -d /usr/src/linux ]\nRUN { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'while [ \"$#\" -gt 0 ]; do' ;echo 'conf=\"${1%%=*}\"; shift' ;echo 'conf=\"${conf#CONFIG_}\"' ;echo 'find /usr/src/linux/ -name Kconfig -exec awk -v conf=\"$conf\" '\"'\"' $1 ~ /^(menu)?config$/ \\\n && $2 == conf { yes = 1; printf \"-- %s:%s --\\n\", FILENAME, FNR; print; next; } $1 ~ /^(end)?((menu)?config|choice|comment|menu|if|source)$/ { yes = 0; next } yes { print; next } '\"'\"' \"{}\" + ' ;echo 'done' ; } > /usr/local/bin/linux-kconfig-info; chmod +x /usr/local/bin/linux-kconfig-info ; linux-kconfig-info CGROUPS\nCOPY files/kernel-config.d /kernel-config.d\nRUN setConfs=\"$( grep -vEh '^[#-]' /kernel-config.d/* | sort -u ;)\" ; unsetConfs=\"$( sed -n 's/^-//p' /kernel-config.d/* | sort -u ;)\" ; IFS=$'\\n' ; setConfs=( $setConfs ) ; unsetConfs=( $unsetConfs ) ; unset IFS ; make -C /usr/src/linux defconfig kvmconfig xenconfig > /dev/null; (set +x ;for conf in \"${unsetConfs[@]}\"; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" /usr/src/linux/.config ; done ;for confV in \"${setConfs[@]}\"; do conf=\"${confV%%=*}\" ;sed -ri -e \"s!^($conf=.*|# $conf is not set)$!$confV!\" /usr/src/linux/.config ;if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then echo \"$confV\" >> /usr/src/linux/.config; fi ; done ) ; make -C /usr/src/linux olddefconfig ; set +x ; ret= ; for conf in \"${unsetConfs[@]}\"; do if grep \"^$conf=\" /usr/src/linux/.config ; then echo \"$conf is set!\" ;ret=1 ; fi ; done ; for confV in \"${setConfs[@]}\"; do if ! grep -q \"^$confV$\" /usr/src/linux/.config ; then kconfig=\"$( linux-kconfig-info \"$confV\" ;)\" ;echo >&2;echo \"'$confV' is not set:\" >&2;echo >&2;echo \"$kconfig\" >&2;echo >&2;for dep in $( awk '$1 == \"depends\" \\\n && $2 == \"on\" { $1 = \"\"; $2 = \"\"; gsub(/[^a-zA-Z0-9_-]+/, \" \"); print }' <<< \"$kconfig\";); do grep -E \"^CONFIG_$dep=|^# CONFIG_$dep is not set$\" /usr/src/linux/.config >&2 || : ; done ;echo >&2;ret=1 ; fi ; done ; [ -z \"$ret\" ] || exit \"$ret\"\nRUN make -C /usr/src/linux -j \"$( nproc ;)\" bzImage modules ; make -C /usr/src/linux INSTALL_MOD_PATH=\"$PWD\" modules_install\nRUN mkdir -p /tmp/iso/boot ; cp -vLT /usr/src/linux/arch/x86_64/boot/bzImage /tmp/iso/boot/vmlinuz\nRUN tcl-tce-load acpid bash-completion ca-certificates curl e2fsprogs git iproute2 iptables ncurses-terminfo nfs-utils openssh openssl parted procps-ng rsync tar util-linux xz\n#   bash-completion puts auto-load in /usr/local/etc/profile.d instead of /etc/profile.d\n#   (this one-liner is the same as the loop at the end of /etc/profile with an adjusted search path)\nRUN echo 'for i in /usr/local/etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i; fi; done' > etc/profile.d/usr-local-etc-profile-d.sh; ln -svT ../usr/local/etc/ssl etc/ssl ; tcl-chroot sh -eux -c 'addgroup -S docker \\\n && addgroup docker docker'\n#   install kernel headers so we can use them for building xen-utils, etc\nRUN make -C /usr/src/linux INSTALL_HDR_PATH=/usr/local headers_install\n#   https://lkml.org/lkml/2018/4/12/711 (https://github.com/boot2docker/boot2docker/pull/1322)\n#   https://github.com/jirka-h/haveged/releases\nENV HAVEGED_VERSION=\"1.9.4\"\nRUN wget -O /haveged.tgz \"https://github.com/jirka-h/haveged/archive/${HAVEGED_VERSION}.tar.gz\" ; mkdir /usr/src/haveged ; tar --extract --file /haveged.tgz --directory /usr/src/haveged --strip-components 1 ; rm /haveged.tgz\n#   https://debbugs.gnu.org/11064 (libtool eats \"-static\", gcc doesn't mind getting \"--static\" even more than once)\nRUN (cd /usr/src/haveged \\\n && ./configure LDFLAGS='-static --static' ) ; make -C /usr/src/haveged/src -j \"$( nproc ;)\" haveged ; cp -v /usr/src/haveged/src/haveged usr/local/sbin/ ; strip usr/local/sbin/haveged ; tcl-chroot haveged --run 1\n#   http://download.virtualbox.org/virtualbox/\n#   updated via \"update.sh\"\nENV VBOX_VERSION=\"5.2.30\"\n#   https://www.virtualbox.org/download/hashes/$VBOX_VERSION/SHA256SUMS\nENV VBOX_SHA256=\"dd07da975f346608b0f6843f4be4bfdf48b4610ef49a0c0e6aa689ef81c1bd69\"\n#   (VBoxGuestAdditions_X.Y.Z.iso SHA256, for verification)\nRUN wget -O /vbox.iso \"https://download.virtualbox.org/virtualbox/$VBOX_VERSION/VBoxGuestAdditions_$VBOX_VERSION.iso\" ; echo \"$VBOX_SHA256 */vbox.iso\" | sha256sum -c - ; 7z x -o/ /vbox.iso VBoxLinuxAdditions.run ; rm /vbox.iso ; sh /VBoxLinuxAdditions.run --noexec --target /usr/src/vbox ; mkdir /usr/src/vbox/amd64 ; 7z x -so /usr/src/vbox/VBoxGuestAdditions-amd64.tar.bz2 | tar --extract --directory /usr/src/vbox/amd64 ; rm /usr/src/vbox/VBoxGuestAdditions-*.tar.bz2 ; ln -sT \"vboxguest-$VBOX_VERSION\" /usr/src/vbox/amd64/src/vboxguest\nRUN make -C /usr/src/vbox/amd64/src/vboxguest -j \"$( nproc ;)\" KERN_DIR='/usr/src/linux' KERN_VER=\"$( < /usr/src/linux/include/config/kernel.release;)\" vboxguest vboxsf ; cp -v /usr/src/vbox/amd64/src/vboxguest/*.ko lib/modules/*/ ; ln -sT lib lib64 ; cp -v /usr/src/vbox/amd64/other/mount.vboxsf /usr/src/vbox/amd64/sbin/VBoxService sbin/ ; cp -v /usr/src/vbox/amd64/bin/VBoxControl bin/\n#   TCL includes VMware's open-vm-tools 10.2.0.1608+ (no reason to compile that ourselves)\nRUN tcl-tce-load open-vm-tools ; tcl-chroot vmhgfs-fuse --version ; tcl-chroot vmtoolsd --version\nENV PARALLELS_VERSION=\"13.3.0-43321\"\nRUN wget -O /parallels.tgz \"https://download.parallels.com/desktop/v${PARALLELS_VERSION%%.*}/$PARALLELS_VERSION/ParallelsTools-$PARALLELS_VERSION-boot2docker.tar.gz\" ; mkdir /usr/src/parallels ; tar --extract --file /parallels.tgz --directory /usr/src/parallels --strip-components 1 ; rm /parallels.tgz\nRUN cp -vr /usr/src/parallels/tools/* ./ ; make -C /usr/src/parallels/kmods -f Makefile.kmods -j \"$( nproc ;)\" installme SRC='/usr/src/linux' KERNEL_DIR='/usr/src/linux' KVER=\"$( < /usr/src/linux/include/config/kernel.release;)\" PRL_FREEZE_SKIP=1 ; find /usr/src/parallels/kmods -name '*.ko' -exec cp -v '{}' lib/modules/*/ ';' ; tcl-chroot prltoolsd -V\n#   https://github.com/xenserver/xe-guest-utilities/tags\n#   updated via \"update.sh\"\nENV XEN_VERSION=\"7.13.0\"\nRUN wget -O /xen.tgz \"https://github.com/xenserver/xe-guest-utilities/archive/v$XEN_VERSION.tar.gz\" ; mkdir /usr/src/xen ; tar --extract --file /xen.tgz --directory /usr/src/xen --strip-components 1 ; rm /xen.tgz\nRUN make -C /usr/src/xen -j \"$( nproc ;)\" PRODUCT_VERSION=\"$XEN_VERSION\" RELEASE='boot2docker' ; tar --extract --file \"/usr/src/xen/build/dist/xe-guest-utilities_$XEN_VERSION-boot2docker_x86_64.tgz\" ; tcl-chroot xenstore || [ \"$?\" = 1 ]\n#   Hyper-V KVP Daemon\nRUN make -C /usr/src/linux/tools/hv hv_kvp_daemon ; cp /usr/src/linux/tools/hv/hv_kvp_daemon usr/local/sbin/ ; tcl-chroot hv_kvp_daemon --help || [ \"$?\" = 1 ]\n#   scan all built modules for kernel loading\nRUN tcl-chroot depmod \"$( < /usr/src/linux/include/config/kernel.release;)\"\n#   https://github.com/tianon/cgroupfs-mount/releases\nENV CGROUPFS_MOUNT_VERSION=\"1.4\"\nRUN wget -O usr/local/sbin/cgroupfs-mount \"https://github.com/tianon/cgroupfs-mount/raw/${CGROUPFS_MOUNT_VERSION}/cgroupfs-mount\" ; chmod +x usr/local/sbin/cgroupfs-mount ; tcl-chroot cgroupfs-mount\nENV DOCKER_VERSION=\"19.03.0-rc3\"\n#   Get the Docker binaries with version that matches our boot2docker version.\nRUN DOCKER_CHANNEL='edge' ; case \"$DOCKER_VERSION\" in (*-rc*|*-beta*|*-tp*) DOCKER_CHANNEL='test' ;; esac ; wget -O /docker.tgz \"https://download.docker.com/linux/static/$DOCKER_CHANNEL/x86_64/docker-$DOCKER_VERSION.tgz\" ; tar -zxvf /docker.tgz -C \"usr/local/bin\" --strip-components=1 ; rm /docker.tgz ; wget -O usr/local/share/bash-completion/completions/docker \"https://github.com/docker/docker-ce/raw/v${DOCKER_VERSION}/components/cli/contrib/completion/bash/docker\" ; for binary in containerd ctr docker docker-init dockerd runc; do chroot . \"$binary\" --version ; done\n#   set up a few branding bits\nRUN { echo 'NAME=Boot2Docker' ;echo \"VERSION=$DOCKER_VERSION\" ;echo 'ID=boot2docker' ;echo 'ID_LIKE=tcl' ;echo \"VERSION_ID=$DOCKER_VERSION\" ;echo \"PRETTY_NAME=\\\"Boot2Docker $DOCKER_VERSION (TCL $TCL_VERSION)\\\"\" ;echo 'ANSI_COLOR=\"1;34\"' ;echo 'HOME_URL=\"https://github.com/boot2docker/boot2docker\"' ;echo 'SUPPORT_URL=\"https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/\"' ;echo 'BUG_REPORT_URL=\"https://github.com/boot2docker/boot2docker/issues\"' ; } > etc/os-release; sed -i 's/HOSTNAME=\"box\"/HOSTNAME=\"boot2docker\"/g' usr/bin/sethostname ; tcl-chroot sethostname ; [ \"$( < etc/hostname;)\" = 'boot2docker' ] ; for num in 0 1 2 3; do echo \"server $num.boot2docker.pool.ntp.org\" ; done > etc/ntp.conf; rm -v etc/sysconfig/ntpserver\nCOPY files/forgiving-getty files/shutdown ./usr/local/sbin/\n#   getty/inittab setup\nRUN awk -F: ' $1 == \"tty1\" { print \"tty1::respawn:/usr/local/sbin/forgiving-getty tty1\"; print \"ttyS0::respawn:/usr/local/sbin/forgiving-getty ttyS0\"; next; } $1 ~ /^#?tty/ { next } { print } ' etc/inittab > etc/inittab.new; mv etc/inittab.new etc/inittab ; grep forgiving-getty etc/inittab ; { echo '#!/bin/sh' ;echo 'user=\"$(cat /etc/sysconfig/tcuser 2>/dev/null)\"' ;echo 'exec login -f \"${user:-docker}\"' ; } > usr/local/sbin/autologin; chmod +x usr/local/sbin/autologin\n#   ssh config prep\nRUN [ ! -f usr/local/etc/sshd_config ] ; sed -r -e 's/^#(UseDNS[[:space:]])/\\1/' -e 's/^#(PermitUserEnvironment)[[:space:]].*$/\\1 yes/' usr/local/etc/ssh/sshd_config.orig > usr/local/etc/ssh/sshd_config; grep '^UseDNS no$' usr/local/etc/ssh/sshd_config ; grep '^PermitUserEnvironment yes$' usr/local/etc/ssh/sshd_config ; mkdir -p home/docker/.ssh ; echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' > home/docker/.ssh/environment; ln -sT ../usr/local/etc/acpi etc/acpi ; [ -z \"$( ls -A etc/acpi/events ;)\" ] ; { echo 'event=button/power' ;echo 'action=/usr/bin/env poweroff' ; } > etc/acpi/events/power; echo 'UTC' > etc/timezone; cp -vL /usr/share/zoneinfo/UTC etc/localtime ; tcl-chroot addgroup -S dockremap ; tcl-chroot adduser -S -G dockremap dockremap ; echo 'dockremap:165536:65536' | tee etc/subuid | tee etc/subgid\nRUN savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends isolinux syslinux-common -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /tmp/iso/isolinux ; cp -v /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/ldlinux.c32 /usr/lib/syslinux/modules/bios/libutil.c32 /usr/lib/syslinux/modules/bios/menu.c32 /tmp/iso/isolinux/ ; cp -v /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ ; apt-mark auto '.*' > /dev/null; apt-mark manual $savedAptMark ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false\nCOPY files/isolinux.cfg /tmp/iso/isolinux/\nCOPY files/init.d/* ./etc/init.d/\nCOPY files/bootsync.sh ./opt/\n#   temporary boot debugging aid\n#  RUN sed -i '2i set -x' etc/init.d/tc-config\nCOPY files/make-b2d-iso.sh /usr/local/bin/\nRUN time make-b2d-iso.sh ; du -hs /tmp/boot2docker.iso\nCMD [\"sh\", \"-c\", \"[\", \"-t\", \"1\", \"]\", \"&&\", \"exec\", \"bash\", \"||\", \"exec\", \"cat\", \"/tmp/boot2docker.iso\"]\n","originalDockerfileUglifiedHash":"282305284e03e7c8e3488df4fcf6b0ff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b66281c8f4909f1757bcba9a5f9f81c123dd4cfb.dockerfile"}