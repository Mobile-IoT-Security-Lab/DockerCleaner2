{"seed":4191417429,"processedDockerfileHash":"cdde51151e60fb3fac07801471edd299","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM python:3.6-slim-stretch\n#   need to compile swig\nENV SWIG_FEATURES=\"-D__x86_64__\"\n#   Should change it to use ARG instead of ENV for OLYMPIA_UID\n#   once the jenkins server is upgraded to support docker >= v1.9.0\nENV OLYMPIA_UID=\"9500\"\nRUN useradd -u ${OLYMPIA_UID} -s /sbin/nologin olympia\n#   Add nodesource repository and requirements\nCOPY docker/nodesource.gpg.key /etc/pki/gpg/GPG-KEY-nodesource\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends apt-transport-https gnupg2 -y ) \\\n && rm -rf /var/lib/apt/lists/*\nRUN cat /etc/pki/gpg/GPG-KEY-nodesource | apt-key add -\nCOPY docker/debian-stretch-nodesource-repo /etc/apt/sources.list.d/nodesource.list\nCOPY docker/debian-buster-testing-repo /etc/apt/sources.list.d/testing.list\nRUN : \\\n && apt-get -t stretch install -y bash-completion build-essential curl libcap-dev libjpeg-dev libpcre3-dev libsasl2-dev libxml2-dev libxslt-dev locales zlib1g-dev libffi-dev libmagic-dev libssl-dev nodejs uuid-dev git mysql-client default-libmysqlclient-dev swig gettext librsvg2-bin pngcrush libmaxminddb0 libmaxminddb-dev \\\n && rm -rf /var/lib/apt/lists/*\nRUN : \\\n && apt-get -t buster install -y file libmagic-dev \\\n && rm -rf /var/lib/apt/lists/*\n#   Compile required locale\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   version.json is overwritten by CircleCI (see circle.yml).\n#   The pipeline v2 standard requires the existence of /app/version.json\n#   inside the docker image, thus it's copied there.\nCOPY version.json /app/version.json\nCOPY . /data/olympia\nWORKDIR /data/olympia\n#   Install all python requires\nRUN pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/system.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod_without_hash.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -e .\n#   Link /usr/bin/uwsgi to /usr/local/bin/uwsgi, as that was the\n#   previous location of the binary when installed by apt-get.\nRUN ln -s /usr/local/bin/uwsgi /usr/bin/uwsgi\n#   Install uwsgi statsd exporter to collect metrics from uwsgi when deployed\nWORKDIR /usr/lib/uwsgi/plugins\nRUN uwsgi --build-plugin https://github.com/Datadog/uwsgi-dogstatsd \\\n && rm -rf uwsgi-dogstatsd\n#   Link /usr/sbin/uwsgi and /usr/bin/uwsgi to deal with migration from Centos -> Debian\nRUN ln -s /usr/bin/uwsgi /usr/sbin/uwsgi\nWORKDIR /data/olympia\nRUN echo \"from olympia.lib.settings_base import *\\nLESS_BIN = 'node_modules/less/bin/lessc'\\nCLEANCSS_BIN = 'node_modules/clean-css-cli/bin/cleancss'\\nUGLIFY_BIN = 'node_modules/uglify-js/bin/uglifyjs'\\nFXA_CONFIG = {'default': {}, 'internal': {}}\\n\" > settings_local.py\nRUN DJANGO_SETTINGS_MODULE='settings_local' locale/compile-mo.sh locale\n#   compile asssets\nRUN npm install \\\n && make -f Makefile-docker copy_node_js \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py compress_assets \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py generate_jsi18n_files \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py collectstatic --noinput\nRUN rm -f settings_local.py settings_local.pyc\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:3.6-slim-stretch\n#  need to compile swig\nENV SWIG_FEATURES=\"-D__x86_64__\"\n#  Should change it to use ARG instead of ENV for OLYMPIA_UID\n#  once the jenkins server is upgraded to support docker >= v1.9.0\nENV OLYMPIA_UID=\"9500\"\nRUN useradd -u ${OLYMPIA_UID} -s /sbin/nologin olympia\n#  Add nodesource repository and requirements\nADD docker/nodesource.gpg.key /etc/pki/gpg/GPG-KEY-nodesource\nRUN apt-get update \\\n && apt-get install apt-transport-https gnupg2 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN cat /etc/pki/gpg/GPG-KEY-nodesource | apt-key add -\nADD docker/debian-stretch-nodesource-repo /etc/apt/sources.list.d/nodesource.list\nADD docker/debian-buster-testing-repo /etc/apt/sources.list.d/testing.list\nRUN apt-get update \\\n && apt-get -t stretch install -y bash-completion build-essential curl libcap-dev libjpeg-dev libpcre3-dev libsasl2-dev libxml2-dev libxslt-dev locales zlib1g-dev libffi-dev libmagic-dev libssl-dev nodejs uuid-dev git mysql-client default-libmysqlclient-dev swig gettext librsvg2-bin pngcrush libmaxminddb0 libmaxminddb-dev \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get -t buster install -y file libmagic-dev \\\n && rm -rf /var/lib/apt/lists/*\n#  Compile required locale\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  version.json is overwritten by CircleCI (see circle.yml).\n#  The pipeline v2 standard requires the existence of /app/version.json\n#  inside the docker image, thus it's copied there.\nCOPY version.json /app/version.json\nCOPY . /data/olympia\nWORKDIR /data/olympia\n#  Install all python requires\nRUN pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/system.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod_without_hash.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -e .\n#  Link /usr/bin/uwsgi to /usr/local/bin/uwsgi, as that was the\n#  previous location of the binary when installed by apt-get.\nRUN ln -s /usr/local/bin/uwsgi /usr/bin/uwsgi\n#  Install uwsgi statsd exporter to collect metrics from uwsgi when deployed\nWORKDIR /usr/lib/uwsgi/plugins\nRUN uwsgi --build-plugin https://github.com/Datadog/uwsgi-dogstatsd \\\n && rm -rf uwsgi-dogstatsd\n#  Link /usr/sbin/uwsgi and /usr/bin/uwsgi to deal with migration from Centos -> Debian\nRUN ln -s /usr/bin/uwsgi /usr/sbin/uwsgi\nWORKDIR /data/olympia\nRUN echo \"from olympia.lib.settings_base import *\\nLESS_BIN = 'node_modules/less/bin/lessc'\\nCLEANCSS_BIN = 'node_modules/clean-css-cli/bin/cleancss'\\nUGLIFY_BIN = 'node_modules/uglify-js/bin/uglifyjs'\\nFXA_CONFIG = {'default': {}, 'internal': {}}\\n\" > settings_local.py\nRUN DJANGO_SETTINGS_MODULE='settings_local' locale/compile-mo.sh locale\n#  compile asssets\nRUN npm install \\\n && make -f Makefile-docker copy_node_js \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py compress_assets \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py generate_jsi18n_files \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py collectstatic --noinput\nRUN rm -f settings_local.py settings_local.pyc\n","injectedSmells":[],"originalDockerfileHash":"e1dc54a1872f8319098ba8d5f9d3f455","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:3.6-slim-stretch\n#   need to compile swig\nENV SWIG_FEATURES=\"-D__x86_64__\"\n#   Should change it to use ARG instead of ENV for OLYMPIA_UID\n#   once the jenkins server is upgraded to support docker >= v1.9.0\nENV OLYMPIA_UID=\"9500\"\nRUN useradd -u ${OLYMPIA_UID} -s /sbin/nologin olympia\n#   Add nodesource repository and requirements\nADD docker/nodesource.gpg.key /etc/pki/gpg/GPG-KEY-nodesource\nRUN apt-get update \\\n && apt-get install apt-transport-https gnupg2 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN cat /etc/pki/gpg/GPG-KEY-nodesource | apt-key add -\nADD docker/debian-stretch-nodesource-repo /etc/apt/sources.list.d/nodesource.list\nADD docker/debian-buster-testing-repo /etc/apt/sources.list.d/testing.list\nRUN apt-get update \\\n && apt-get -t stretch install -y bash-completion build-essential curl libcap-dev libjpeg-dev libpcre3-dev libsasl2-dev libxml2-dev libxslt-dev locales zlib1g-dev libffi-dev libmagic-dev libssl-dev nodejs uuid-dev git mysql-client default-libmysqlclient-dev swig gettext librsvg2-bin pngcrush libmaxminddb0 libmaxminddb-dev \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get -t buster install -y file libmagic-dev \\\n && rm -rf /var/lib/apt/lists/*\n#   Compile required locale\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   version.json is overwritten by CircleCI (see circle.yml).\n#   The pipeline v2 standard requires the existence of /app/version.json\n#   inside the docker image, thus it's copied there.\nCOPY version.json /app/version.json\nCOPY . /data/olympia\nWORKDIR /data/olympia\n#   Install all python requires\nRUN pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/system.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -r requirements/prod_without_hash.txt \\\n && pip3 install --no-cache-dir --exists-action=w --no-deps -e .\n#   Link /usr/bin/uwsgi to /usr/local/bin/uwsgi, as that was the\n#   previous location of the binary when installed by apt-get.\nRUN ln -s /usr/local/bin/uwsgi /usr/bin/uwsgi\n#   Install uwsgi statsd exporter to collect metrics from uwsgi when deployed\nWORKDIR /usr/lib/uwsgi/plugins\nRUN uwsgi --build-plugin https://github.com/Datadog/uwsgi-dogstatsd \\\n && rm -rf uwsgi-dogstatsd\n#   Link /usr/sbin/uwsgi and /usr/bin/uwsgi to deal with migration from Centos -> Debian\nRUN ln -s /usr/bin/uwsgi /usr/sbin/uwsgi\nWORKDIR /data/olympia\nRUN echo \"from olympia.lib.settings_base import *\\nLESS_BIN = 'node_modules/less/bin/lessc'\\nCLEANCSS_BIN = 'node_modules/clean-css-cli/bin/cleancss'\\nUGLIFY_BIN = 'node_modules/uglify-js/bin/uglifyjs'\\nFXA_CONFIG = {'default': {}, 'internal': {}}\\n\" > settings_local.py\nRUN DJANGO_SETTINGS_MODULE='settings_local' locale/compile-mo.sh locale\n#   compile asssets\nRUN npm install \\\n && make -f Makefile-docker copy_node_js \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py compress_assets \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py generate_jsi18n_files \\\n && DJANGO_SETTINGS_MODULE='settings_local' python manage.py collectstatic --noinput\nRUN rm -f settings_local.py settings_local.pyc\n","originalDockerfileUglifiedHash":"ba8cb36fe7f89e65ea5f1090914ff0dc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b57e6cc8e3c772b519c2c385ba038e0f3c397406.dockerfile"}