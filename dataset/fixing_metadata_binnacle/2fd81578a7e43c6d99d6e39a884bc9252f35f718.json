{"seed":1674250310,"processedDockerfileHash":"7f880caefe84b0e79498296ca8f5ffad","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker on aarch64, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.aarch64 .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:wily\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig g++ gcc git iptables jq libapparmor-dev libc6-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-dev mercurial net-tools parallel pkg-config python-dev python-mock python-pip python-websocket gccgo -y\n#   Install armhf loader to use armv6 binaries on armv8\nRUN dpkg --add-architecture armhf \\\n && apt-get update \\\n && apt-get install --no-install-recommends libc6:armhf -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   We don't have official binary tarballs for ARM64, eigher for Go or bootstrap,\n#   so we use the official armv6 released binaries as a GOROOT_BOOTSTRAP, and\n#   build Go from source code.\nENV GO_VERSION=\"1.6.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://storage.googleapis.com/golang/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   Only install one version of the registry, because old version which support\n#   schema1 manifests is not working on ARM64, we should skip integration-cli\n#   tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.3.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"7befe694bd21e3c54bb1d7825270ea4bd6864c13\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:6aa1d6910791b7ac78265fd0798e5abd6cb3f27ae992f6f960f6c303ec9535f2 aarch64/busybox:latest@sha256:b23a6a37cf269dff6e46d2473b6e227afa42b037e6d23435f1d2bc40fc8c2828 aarch64/debian:jessie@sha256:4be74a41a7c70ebe887b634b11ffe516cf4fcd56864a54941e56bb49883c3170 aarch64/hello-world:latest@sha256:65a4a158587b307bb02db4de41b836addb0c35175bdc801367b1ac1ddeb9afda\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"cc29e3dded8e27ba8f65738f40d251c885030a28\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc \\\n && rm -rf \"$GOPATH\"\n#   Install containerd\nENV CONTAINERD_COMMIT=\"0ac3cd1be170d180b2baed755e8f0da547ceb267\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr \\\n && rm -rf \"$GOPATH\"\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker on aarch64, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker -f Dockerfile.aarch64 .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:wily\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig g++ gcc git iptables jq libapparmor-dev libc6-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-dev mercurial net-tools parallel pkg-config python-dev python-mock python-pip python-websocket gccgo -y\n#  Install armhf loader to use armv6 binaries on armv8\nRUN dpkg --add-architecture armhf \\\n && apt-get update \\\n && apt-get install libc6:armhf -y\n#  Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#  \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#  Install Go\n#  We don't have official binary tarballs for ARM64, eigher for Go or bootstrap,\n#  so we use the official armv6 released binaries as a GOROOT_BOOTSTRAP, and\n#  build Go from source code.\nENV GO_VERSION=\"1.6.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://storage.googleapis.com/golang/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#  Only install one version of the registry, because old version which support\n#  schema1 manifests is not working on ARM64, we should skip integration-cli\n#  tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary and notary-server\nENV NOTARY_VERSION=\"v0.3.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"7befe694bd21e3c54bb1d7825270ea4bd6864c13\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:6aa1d6910791b7ac78265fd0798e5abd6cb3f27ae992f6f960f6c303ec9535f2 aarch64/busybox:latest@sha256:b23a6a37cf269dff6e46d2473b6e227afa42b037e6d23435f1d2bc40fc8c2828 aarch64/debian:jessie@sha256:4be74a41a7c70ebe887b634b11ffe516cf4fcd56864a54941e56bb49883c3170 aarch64/hello-world:latest@sha256:65a4a158587b307bb02db4de41b836addb0c35175bdc801367b1ac1ddeb9afda\n#  see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#  Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#  Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#  Install runc\nENV RUNC_COMMIT=\"cc29e3dded8e27ba8f65738f40d251c885030a28\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc \\\n && rm -rf \"$GOPATH\"\n#  Install containerd\nENV CONTAINERD_COMMIT=\"0ac3cd1be170d180b2baed755e8f0da547ceb267\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr \\\n && rm -rf \"$GOPATH\"\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"c49acbd3f1740d4ac679385763cb0846","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker on aarch64, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.aarch64 .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM aarch64/ubuntu:wily\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig g++ gcc git iptables jq libapparmor-dev libc6-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-dev mercurial net-tools parallel pkg-config python-dev python-mock python-pip python-websocket gccgo -y\n#   Install armhf loader to use armv6 binaries on armv8\nRUN dpkg --add-architecture armhf \\\n && apt-get update \\\n && apt-get install libc6:armhf -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   fix platform enablement in lvm2 to support aarch64 properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   install seccomp: the version shipped in trusty is too old\nENV SECCOMP_VERSION=\"2.3.1\"\nRUN set -x \\\n && export SECCOMP_PATH=\"$( mktemp -d ;)\" \\\n && curl -fsSL \"https://github.com/seccomp/libseccomp/releases/download/v${SECCOMP_VERSION}/libseccomp-${SECCOMP_VERSION}.tar.gz\" | tar -xzC \"$SECCOMP_PATH\" --strip-components=1 \\\n && (cd \"$SECCOMP_PATH\" \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf \"$SECCOMP_PATH\"\n#   Install Go\n#   We don't have official binary tarballs for ARM64, eigher for Go or bootstrap,\n#   so we use the official armv6 released binaries as a GOROOT_BOOTSTRAP, and\n#   build Go from source code.\nENV GO_VERSION=\"1.6.3\"\nRUN mkdir /usr/src/go \\\n && curl -fsSL https://storage.googleapis.com/golang/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/src/go -xz --strip-components=1 \\\n && cd /usr/src/go/src \\\n && GOOS=linux GOARCH=arm64 GOROOT_BOOTSTRAP=\"$( go env GOROOT ;)\" ./make.bash\nENV PATH=\"/usr/src/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   Only install one version of the registry, because old version which support\n#   schema1 manifests is not working on ARM64, we should skip integration-cli\n#   tests for schema1 manifests on ARM64.\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary and notary-server\nENV NOTARY_VERSION=\"v0.3.0\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary github.com/docker/notary/cmd/notary \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"7befe694bd21e3c54bb1d7825270ea4bd6864c13\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 seccomp selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images aarch64/buildpack-deps:jessie@sha256:6aa1d6910791b7ac78265fd0798e5abd6cb3f27ae992f6f960f6c303ec9535f2 aarch64/busybox:latest@sha256:b23a6a37cf269dff6e46d2473b6e227afa42b037e6d23435f1d2bc40fc8c2828 aarch64/debian:jessie@sha256:4be74a41a7c70ebe887b634b11ffe516cf4fcd56864a54941e56bb49883c3170 aarch64/hello-world:latest@sha256:65a4a158587b307bb02db4de41b836addb0c35175bdc801367b1ac1ddeb9afda\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.5 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"cc29e3dded8e27ba8f65738f40d251c885030a28\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc \\\n && rm -rf \"$GOPATH\"\n#   Install containerd\nENV CONTAINERD_COMMIT=\"0ac3cd1be170d180b2baed755e8f0da547ceb267\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr \\\n && rm -rf \"$GOPATH\"\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"7de64c8c97bdf10b8746f02900429391","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2fd81578a7e43c6d99d6e39a884bc9252f35f718.dockerfile"}