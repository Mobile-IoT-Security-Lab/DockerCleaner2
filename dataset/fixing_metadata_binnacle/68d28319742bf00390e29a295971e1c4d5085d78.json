{"seed":3810662681,"processedDockerfileHash":"b23956dac9c76b28efa32fc7eeebccb9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"FROM debian:stretch\nLABEL maintainer=\"mstewart@riotgames.com\"\nENV LANG=\"C.UTF-8\"\nENV JAVA_VERSION=\"8u162\"\nENV JAVA_DEBIAN_VERSION=\"8u162-b12-1~deb9u1\"\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.18-5+deb9u3 curl=7.52.1-5+deb9u16 ca-certificates=20200601~deb9u2 zip=3.0-11+b1 openssh-client=1:7.4p1-10+deb9u7 unzip=6.0-21+deb9u2 openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_VERSION=2.112\nARG TINI_VERSION=v0.17.0\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=085f597edeb0d49d54d7653f3742ba31ed72b8a1a2b053d2eb23fd806c6a5393\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nENV JENKINS_VERSION=\"${JENKINS_VERSION}\"\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JAVA_OPTS=\"-Xmx8192m -Djenkins.install.runSetupWizard=false\"\nENV JENKINS_OPTS=\"--handlerCountMax=300 --logfile=/var/log/jenkins/jenkins.log  --webroot=/var/cache/jenkins/war\"\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#   Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$( dpkg --print-architecture ;) -o /sbin/tini \\\n && chmod +x /sbin/tini\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN mkdir /var/log/jenkins\nRUN mkdir /var/cache/jenkins\nRUN chown -R ${user}:${user} /var/log/jenkins\nRUN chown -R ${user}:${user} /var/cache/jenkins\n#   for main web and slave agents:\nEXPOSE ${http_port}\nEXPOSE ${agent_port}\n#   Copy in local config files\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nRUN chmod +x /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy \\\n && chmod +x /usr/local/bin/jenkins-support \\\n && chmod +x /usr/local/bin/plugins.sh \\\n && chmod +x /usr/local/bin/jenkins.sh \\\n && chmod +x /usr/local/bin/install-plugins.sh\n#   Install default plugins\nCOPY plugins.txt /tmp/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /tmp/plugins.txt\nUSER ${user}\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch\nLABEL maintainer=\"mstewart@riotgames.com\"\nENV LANG=\"C.UTF-8\"\nENV JAVA_VERSION=\"8u162\"\nENV JAVA_DEBIAN_VERSION=\"8u162-b12-1~deb9u1\"\n#  see https://bugs.debian.org/775775\n#  and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget curl ca-certificates zip openssh-client unzip openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_VERSION=2.112\nARG TINI_VERSION=v0.17.0\n#  jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=085f597edeb0d49d54d7653f3742ba31ed72b8a1a2b053d2eb23fd806c6a5393\n#  Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nENV JENKINS_VERSION=\"${JENKINS_VERSION}\"\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JAVA_OPTS=\"-Xmx8192m -Djenkins.install.runSetupWizard=false\"\nENV JENKINS_OPTS=\"--handlerCountMax=300 --logfile=/var/log/jenkins/jenkins.log  --webroot=/var/cache/jenkins/war\"\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#  Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$( dpkg --print-architecture ;) -o /sbin/tini \\\n && chmod +x /sbin/tini\n#  Jenkins is run with user `jenkins`, uid = 1000\n#  If you bind mount a volume from the host or a data container,\n#  ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#  Jenkins home directory is a volume, so configuration and build history\n#  can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#  `/usr/share/jenkins/ref/` contains all reference configuration we want\n#  to set on a fresh new installation. Use it to bundle additional plugins\n#  or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n#  could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#  see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN mkdir /var/log/jenkins\nRUN mkdir /var/cache/jenkins\nRUN chown -R ${user}:${user} /var/log/jenkins\nRUN chown -R ${user}:${user} /var/cache/jenkins\n#  for main web and slave agents:\nEXPOSE ${http_port}\nEXPOSE ${agent_port}\n#  Copy in local config files\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nRUN chmod +x /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy \\\n && chmod +x /usr/local/bin/jenkins-support \\\n && chmod +x /usr/local/bin/plugins.sh \\\n && chmod +x /usr/local/bin/jenkins.sh \\\n && chmod +x /usr/local/bin/install-plugins.sh\n#  Install default plugins\nCOPY plugins.txt /tmp/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /tmp/plugins.txt\nUSER ${user}\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"d904c085e2f5d4c46be37a35e3221919","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch\nLABEL maintainer=\"mstewart@riotgames.com\"\nENV LANG=\"C.UTF-8\"\nENV JAVA_VERSION=\"8u162\"\nENV JAVA_DEBIAN_VERSION=\"8u162-b12-1~deb9u1\"\n#   see https://bugs.debian.org/775775\n#   and https://github.com/docker-library/java/issues/19#issuecomment-70546872\nENV CA_CERTIFICATES_JAVA_VERSION=\"20170531+nmu1\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget curl ca-certificates zip openssh-client unzip openjdk-8-jdk=\"$JAVA_DEBIAN_VERSION\" ca-certificates-java=\"$CA_CERTIFICATES_JAVA_VERSION\" -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN /var/lib/dpkg/info/ca-certificates-java.postinst configure\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_VERSION=2.112\nARG TINI_VERSION=v0.17.0\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=085f597edeb0d49d54d7653f3742ba31ed72b8a1a2b053d2eb23fd806c6a5393\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nENV JENKINS_VERSION=\"${JENKINS_VERSION}\"\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JAVA_OPTS=\"-Xmx8192m -Djenkins.install.runSetupWizard=false\"\nENV JENKINS_OPTS=\"--handlerCountMax=300 --logfile=/var/log/jenkins/jenkins.log  --webroot=/var/cache/jenkins/war\"\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#   Use tini as subreaper in Docker container to adopt zombie processes\nRUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$( dpkg --print-architecture ;) -o /sbin/tini \\\n && chmod +x /sbin/tini\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN groupadd -g ${gid} ${group} \\\n && useradd -d \"$JENKINS_HOME\" -u ${uid} -g ${gid} -m -s /bin/bash ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\nRUN mkdir /var/log/jenkins\nRUN mkdir /var/cache/jenkins\nRUN chown -R ${user}:${user} /var/log/jenkins\nRUN chown -R ${user}:${user} /var/cache/jenkins\n#   for main web and slave agents:\nEXPOSE ${http_port}\nEXPOSE ${agent_port}\n#   Copy in local config files\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nRUN chmod +x /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy \\\n && chmod +x /usr/local/bin/jenkins-support \\\n && chmod +x /usr/local/bin/plugins.sh \\\n && chmod +x /usr/local/bin/jenkins.sh \\\n && chmod +x /usr/local/bin/install-plugins.sh\n#   Install default plugins\nCOPY plugins.txt /tmp/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /tmp/plugins.txt\nUSER ${user}\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n","originalDockerfileUglifiedHash":"97a347266a834544c51b033abc33e194","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/68d28319742bf00390e29a295971e1c4d5085d78.dockerfile"}