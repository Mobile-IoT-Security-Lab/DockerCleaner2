{"seed":3545469844,"processedDockerfileHash":"7626e3918f65a38bc853fbf0f42f19bc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM metabrainz/python:2.7 AS acousticbrainz-base\nARG deploy_env\n#   Dockerize\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#   Install dependencies\n#   Node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates cron git ipython libavcodec-dev libavformat-dev libavutil-dev libavresample-dev libffi-dev libfftw3-dev libpq-dev libsamplerate0-dev libqt4-dev libssl-dev libtag1-dev libxml2-dev libxslt1-dev libyaml-dev nodejs pkg-config pxz python-dev python-numpy-dev python-numpy swig2.0 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /code\nRUN mkdir /code/hl_extractor\nRUN mkdir /data\nWORKDIR /code\n#   Gaia\n#   See https://github.com/MTG/gaia\nRUN git clone https://github.com/MTG/gaia /tmp/gaia \\\n && cd /tmp/gaia \\\n && ./waf configure --with-python-bindings \\\n && ./waf \\\n && ./waf install \\\n && cd / \\\n && rm -r /tmp/gaia\n#   Essentia\n#   See http://essentia.upf.edu/documentation/installing.html\nRUN git clone https://github.com/MTG/essentia /tmp/essentia \\\n && cd /tmp/essentia \\\n && ./waf configure --mode=release --with-gaia --with-example=streaming_extractor_music_svm \\\n && ./waf \\\n && ./waf install \\\n && ldconfig \\\n && cp /tmp/essentia/build/src/examples/essentia_streaming_extractor_music_svm /usr/local/bin \\\n && cd / \\\n && rm -r /tmp/essentia\n#   SVM models\nRUN mkdir /tmp/models \\\n && cd /tmp/models \\\n && curl -L --silent -o models.tar.gz https://essentia.upf.edu/documentation/svm_models/essentia-extractor-svm_models-v2.1_beta1.tar.gz \\\n && tar -xvzf models.tar.gz \\\n && mv /tmp/models/v2.1_beta1/svm_models /data/ \\\n && cd / \\\n && rm -r /tmp/models\n#   Python dependencies\nRUN mkdir /code/docs/\nCOPY docs/requirements.txt /code/docs/requirements.txt\nCOPY requirements.txt /code/requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY package.json /code\nRUN npm install\nFROM acousticbrainz-base AS acousticbrainz-dev\nARG deploy_env\nCOPY requirements_development.txt /code/requirements_development.txt\nRUN pip install --no-cache-dir -r requirements_development.txt\nCOPY . /code\nFROM acousticbrainz-base AS acousticbrainz-prod\nARG deploy_env\nRUN pip install uWSGI==2.0.17.1\n#   Consul template service is already set up, just need to copy the configuration\nCOPY ./docker/consul-template.conf /etc/consul-template.conf\n#   uwsgi service files\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.service /etc/service/uwsgi/run\nRUN chmod 755 /etc/service/uwsgi/run\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.ini /etc/uwsgi/uwsgi.ini\nRUN mkdir /cache_namespaces\nRUN chown -R www-data:www-data /cache_namespaces\n#   Create a user named acousticbrainz for cron jobs\nRUN useradd --create-home --shell /bin/bash acousticbrainz\n#   Add cron jobs\nCOPY docker/crontab /etc/cron.d/ab-crontab\nRUN chmod 0644 /etc/cron.d/ab-crontab \\\n && crontab -u acousticbrainz /etc/cron.d/ab-crontab\nRUN touch /var/log/stats_calc.log /var/log/stats_cache.log \\\n && chown acousticbrainz:acousticbrainz /var/log/stats_calc.log /var/log/stats_cache.log\n#   Make sure that the cron service doesn't start automagically\n#   http://smarden.org/runit/runsv.8.html\nRUN touch /etc/service/cron/down\nCOPY . /code\nRUN /code/node_modules/.bin/gulp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM metabrainz/python:2.7 AS acousticbrainz-base\nARG deploy_env\n#  Dockerize\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#  Install dependencies\n#  Node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates cron git ipython libavcodec-dev libavformat-dev libavutil-dev libavresample-dev libffi-dev libfftw3-dev libpq-dev libsamplerate0-dev libqt4-dev libssl-dev libtag1-dev libxml2-dev libxslt1-dev libyaml-dev nodejs pkg-config pxz python-dev python-numpy-dev python-numpy swig2.0 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /code\nRUN mkdir /code/hl_extractor\nRUN mkdir /data\nWORKDIR /code\n#  Gaia\n#  See https://github.com/MTG/gaia\nRUN git clone https://github.com/MTG/gaia /tmp/gaia \\\n && cd /tmp/gaia \\\n && ./waf configure --with-python-bindings \\\n && ./waf \\\n && ./waf install \\\n && cd / \\\n && rm -r /tmp/gaia\n#  Essentia\n#  See http://essentia.upf.edu/documentation/installing.html\nRUN git clone https://github.com/MTG/essentia /tmp/essentia \\\n && cd /tmp/essentia \\\n && ./waf configure --mode=release --with-gaia --with-example=streaming_extractor_music_svm \\\n && ./waf \\\n && ./waf install \\\n && ldconfig \\\n && cp /tmp/essentia/build/src/examples/essentia_streaming_extractor_music_svm /usr/local/bin \\\n && cd / \\\n && rm -r /tmp/essentia\n#  SVM models\nRUN mkdir /tmp/models \\\n && cd /tmp/models \\\n && curl -L --silent -o models.tar.gz https://essentia.upf.edu/documentation/svm_models/essentia-extractor-svm_models-v2.1_beta1.tar.gz \\\n && tar -xvzf models.tar.gz \\\n && mv /tmp/models/v2.1_beta1/svm_models /data/ \\\n && cd / \\\n && rm -r /tmp/models\n#  Python dependencies\nRUN mkdir /code/docs/\nCOPY docs/requirements.txt /code/docs/requirements.txt\nCOPY requirements.txt /code/requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY package.json /code\nRUN npm install\nFROM acousticbrainz-base AS acousticbrainz-dev\nARG deploy_env\nCOPY requirements_development.txt /code/requirements_development.txt\nRUN pip install --no-cache-dir -r requirements_development.txt\nCOPY . /code\nFROM acousticbrainz-base AS acousticbrainz-prod\nARG deploy_env\nRUN pip install uWSGI==2.0.17.1\n#  Consul template service is already set up, just need to copy the configuration\nCOPY ./docker/consul-template.conf /etc/consul-template.conf\n#  uwsgi service files\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.service /etc/service/uwsgi/run\nRUN chmod 755 /etc/service/uwsgi/run\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.ini /etc/uwsgi/uwsgi.ini\nRUN mkdir /cache_namespaces\nRUN chown -R www-data:www-data /cache_namespaces\n#  Create a user named acousticbrainz for cron jobs\nRUN useradd --create-home --shell /bin/bash acousticbrainz\n#  Add cron jobs\nADD docker/crontab /etc/cron.d/ab-crontab\nRUN chmod 0644 /etc/cron.d/ab-crontab \\\n && crontab -u acousticbrainz /etc/cron.d/ab-crontab\nRUN touch /var/log/stats_calc.log /var/log/stats_cache.log \\\n && chown acousticbrainz:acousticbrainz /var/log/stats_calc.log /var/log/stats_cache.log\n#  Make sure that the cron service doesn't start automagically\n#  http://smarden.org/runit/runsv.8.html\nRUN touch /etc/service/cron/down\nCOPY . /code\nRUN /code/node_modules/.bin/gulp\n","injectedSmells":[],"originalDockerfileHash":"54a5e7c92d4fff86618e3931d3539394","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM metabrainz/python:2.7 AS acousticbrainz-base\nARG deploy_env\n#   Dockerize\nENV DOCKERIZE_VERSION=\"v0.6.1\"\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n#   Install dependencies\n#   Node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates cron git ipython libavcodec-dev libavformat-dev libavutil-dev libavresample-dev libffi-dev libfftw3-dev libpq-dev libsamplerate0-dev libqt4-dev libssl-dev libtag1-dev libxml2-dev libxslt1-dev libyaml-dev nodejs pkg-config pxz python-dev python-numpy-dev python-numpy swig2.0 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir /code\nRUN mkdir /code/hl_extractor\nRUN mkdir /data\nWORKDIR /code\n#   Gaia\n#   See https://github.com/MTG/gaia\nRUN git clone https://github.com/MTG/gaia /tmp/gaia \\\n && cd /tmp/gaia \\\n && ./waf configure --with-python-bindings \\\n && ./waf \\\n && ./waf install \\\n && cd / \\\n && rm -r /tmp/gaia\n#   Essentia\n#   See http://essentia.upf.edu/documentation/installing.html\nRUN git clone https://github.com/MTG/essentia /tmp/essentia \\\n && cd /tmp/essentia \\\n && ./waf configure --mode=release --with-gaia --with-example=streaming_extractor_music_svm \\\n && ./waf \\\n && ./waf install \\\n && ldconfig \\\n && cp /tmp/essentia/build/src/examples/essentia_streaming_extractor_music_svm /usr/local/bin \\\n && cd / \\\n && rm -r /tmp/essentia\n#   SVM models\nRUN mkdir /tmp/models \\\n && cd /tmp/models \\\n && curl -L --silent -o models.tar.gz https://essentia.upf.edu/documentation/svm_models/essentia-extractor-svm_models-v2.1_beta1.tar.gz \\\n && tar -xvzf models.tar.gz \\\n && mv /tmp/models/v2.1_beta1/svm_models /data/ \\\n && cd / \\\n && rm -r /tmp/models\n#   Python dependencies\nRUN mkdir /code/docs/\nCOPY docs/requirements.txt /code/docs/requirements.txt\nCOPY requirements.txt /code/requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY package.json /code\nRUN npm install\nFROM acousticbrainz-base AS acousticbrainz-dev\nARG deploy_env\nCOPY requirements_development.txt /code/requirements_development.txt\nRUN pip install --no-cache-dir -r requirements_development.txt\nCOPY . /code\nFROM acousticbrainz-base AS acousticbrainz-prod\nARG deploy_env\nRUN pip install uWSGI==2.0.17.1\n#   Consul template service is already set up, just need to copy the configuration\nCOPY ./docker/consul-template.conf /etc/consul-template.conf\n#   uwsgi service files\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.service /etc/service/uwsgi/run\nRUN chmod 755 /etc/service/uwsgi/run\nCOPY ./docker/$deploy_env/uwsgi/uwsgi.ini /etc/uwsgi/uwsgi.ini\nRUN mkdir /cache_namespaces\nRUN chown -R www-data:www-data /cache_namespaces\n#   Create a user named acousticbrainz for cron jobs\nRUN useradd --create-home --shell /bin/bash acousticbrainz\n#   Add cron jobs\nADD docker/crontab /etc/cron.d/ab-crontab\nRUN chmod 0644 /etc/cron.d/ab-crontab \\\n && crontab -u acousticbrainz /etc/cron.d/ab-crontab\nRUN touch /var/log/stats_calc.log /var/log/stats_cache.log \\\n && chown acousticbrainz:acousticbrainz /var/log/stats_calc.log /var/log/stats_cache.log\n#   Make sure that the cron service doesn't start automagically\n#   http://smarden.org/runit/runsv.8.html\nRUN touch /etc/service/cron/down\nCOPY . /code\nRUN /code/node_modules/.bin/gulp\n","originalDockerfileUglifiedHash":"cc028d6c285c9b37098377265d451ae6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/de34ac22f4e878922525c90a32b06bc58faabf9e.dockerfile"}