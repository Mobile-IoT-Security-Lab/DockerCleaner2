{"seed":4272586538,"processedDockerfileHash":"9055e7cb22b95412ebc121b370443a07","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.2-fpm\nMAINTAINER clement@cyber-duck.co.uk\nRUN apt-get update \\\n && apt-get install --no-install-recommends libmemcached-dev=1.0.18-4.2 libz-dev libpq-dev=11.19-0+deb10u1 libjpeg-dev=1:1.5.2-2+deb10u1 libpng-dev=1.6.36-6 libfreetype6-dev=2.9.1-3+deb10u3 libssl-dev=1.1.1n-0+deb10u4 libmcrypt-dev=2.5.8-3.4 openssh-server=1:7.9p1-10+deb10u2 git=1:2.20.1-2+deb10u8 cron=3.0pl1-134+deb10u1 nano=3.2-3 wget=1.20.1-1.1 curl=7.64.0-4+deb10u5 sudo=1.8.27-1+deb10u5 zip=3.0-11+b1 unzip=6.0-23+deb10u3 git=1:2.20.1-2+deb10u8 gnupg1=1.4.23-1 gnupg2=2.2.12-1+deb10u2 gnupg=2.2.12-1+deb10u2 -y --force-yes\n#   Install the PHP mcrypt extention (from PECL, mcrypt has been removed from PHP 7.2)\nRUN pecl install mcrypt-1.0.1\nRUN docker-php-ext-enable mcrypt\n#   Install the PHP pcntl extention\nRUN docker-php-ext-install pcntl\n#   Install the PHP zip extention\nRUN docker-php-ext-install zip\n#   Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql\n#   Install the PHP mysqli extention\nRUN docker-php-ext-install mysqli\n#   Install the PHP pdo_pgsql extention\nRUN docker-php-ext-install pdo_pgsql\n#   Enable PHP extension(s)\nRUN docker-php-ext-enable pdo_mysql\n#  ####################################\n#   GD:\n#  ####################################\n#   Install the PHP gd library\nRUN docker-php-ext-install gd \\\n && docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Install the xdebug extension\nRUN pecl install xdebug \\\n && docker-php-ext-enable xdebug\n#   Copy xdebug configration for remote debugging\nCOPY ./etc/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n#  ####################################\n#   PHP Memcached:\n#  ####################################\n#   Install the php memcached extension\nRUN pecl install memcached \\\n && docker-php-ext-enable memcached\n#  ####################################\n#   Composer:\n#  ####################################\n#   Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#   Source the bash\nRUN . ~/.bashrc\n#  ####################################\n#   PHPUnit:\n#  ####################################\nRUN wget https://phar.phpunit.de/phpunit.phar\nRUN chmod +x phpunit.phar\nRUN mv phpunit.phar /usr/local/bin/phpunit\n#  ####################################\n#   Laravel Schedule Cron Job:\n#  ####################################\nRUN echo \"* * * * * root php /var/www/artisan schedule:run >> /dev/null 2>&1\" >> /etc/cron.d/laravel-schedule\nRUN chmod 0644 /etc/cron.d/laravel-schedule\n#  ####################################\n#   Security Checker:\n#  ####################################\n#   Security Checker\nRUN wget http://get.sensiolabs.org/security-checker.phar\nRUN chmod +x security-checker.phar\nRUN mv security-checker.phar /usr/local/bin/security-checker\n#  ####################################\n#   Node.js && Yarn:\n#  ####################################\n#   Node.js\nRUN curl -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh\nRUN bash nodesource_setup.sh\nRUN apt-get install --no-install-recommends nodejs=10.24.0~dfsg-1~deb10u3 -y\nRUN npm install\n#   Yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.6 yarn -qq -y\nRUN yarn install\n#  ####################################\n#   Laravel\n#  ####################################\nRUN composer global require \"laravel/installer\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./etc/php/laravel.ini /usr/local/etc/php/conf.d\n#  ####################################\n#   Aliases:\n#  ####################################\n#   docker-compose exec php-fpm dep --> locally installed Deployer binaries\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/vendor/bin/dep \"$@\"' > /usr/bin/dep\nRUN chmod +x /usr/bin/dep\n#   docker-compose exec php-fpm art --> php artisan\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan \"$@\"' > /usr/bin/art\nRUN chmod +x /usr/bin/art\n#   docker-compose exec php-fpm migrate --> php artisan migrate\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate \"$@\"' > /usr/bin/migrate\nRUN chmod +x /usr/bin/migrate\n#   docker-compose exec php-fpm fresh --> php artisan migrate:fresh --seed\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate:fresh --seed' > /usr/bin/fresh\nRUN chmod +x /usr/bin/fresh\n#   docker-compose exec php-fpm t --> run the tests for the project and generate testdox\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/var/www/vendor/bin/phpunit -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report.txt \"$@\"' > /usr/bin/t\nRUN chmod +x /usr/bin/t\n#   docker-compose exec php-fpm d --> run the Laravel Dusk browser tests for the project\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/bin/bash\\n/usr/local/bin/php /var/www/artisan dusk -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report-dusk.txt \"$@\"' > /usr/bin/d\nRUN chmod +x /usr/bin/d\nRUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.2-fpm\nMAINTAINER clement@cyber-duck.co.uk\nRUN apt-get update \\\n && apt-get install --no-install-recommends libmemcached-dev libz-dev libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libssl-dev libmcrypt-dev openssh-server git cron nano wget curl sudo zip unzip git gnupg1 gnupg2 gnupg -y --force-yes\n#  Install the PHP mcrypt extention (from PECL, mcrypt has been removed from PHP 7.2)\nRUN pecl install mcrypt-1.0.1\nRUN docker-php-ext-enable mcrypt\n#  Install the PHP pcntl extention\nRUN docker-php-ext-install pcntl\n#  Install the PHP zip extention\nRUN docker-php-ext-install zip\n#  Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql\n#  Install the PHP mysqli extention\nRUN docker-php-ext-install mysqli\n#  Install the PHP pdo_pgsql extention\nRUN docker-php-ext-install pdo_pgsql\n#  Enable PHP extension(s)\nRUN docker-php-ext-enable pdo_mysql\n# ####################################\n#  GD:\n# ####################################\n#  Install the PHP gd library\nRUN docker-php-ext-install gd \\\n && docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n# ####################################\n#  xDebug:\n# ####################################\n#  Install the xdebug extension\nRUN pecl install xdebug \\\n && docker-php-ext-enable xdebug\n#  Copy xdebug configration for remote debugging\nCOPY ./etc/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n# ####################################\n#  PHP Memcached:\n# ####################################\n#  Install the php memcached extension\nRUN pecl install memcached \\\n && docker-php-ext-enable memcached\n# ####################################\n#  Composer:\n# ####################################\n#  Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#  Source the bash\nRUN . ~/.bashrc\n# ####################################\n#  PHPUnit:\n# ####################################\nRUN wget https://phar.phpunit.de/phpunit.phar\nRUN chmod +x phpunit.phar\nRUN mv phpunit.phar /usr/local/bin/phpunit\n# ####################################\n#  Laravel Schedule Cron Job:\n# ####################################\nRUN echo \"* * * * * root php /var/www/artisan schedule:run >> /dev/null 2>&1\" >> /etc/cron.d/laravel-schedule\nRUN chmod 0644 /etc/cron.d/laravel-schedule\n# ####################################\n#  Security Checker:\n# ####################################\n#  Security Checker\nRUN wget http://get.sensiolabs.org/security-checker.phar\nRUN chmod +x security-checker.phar\nRUN mv security-checker.phar /usr/local/bin/security-checker\n# ####################################\n#  Node.js && Yarn:\n# ####################################\n#  Node.js\nRUN curl -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh\nRUN bash nodesource_setup.sh\nRUN apt-get install nodejs -y\nRUN npm install\n#  Yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install build-essential yarn -qq -y\nRUN yarn install\n# ####################################\n#  Laravel\n# ####################################\nRUN composer global require \"laravel/installer\"\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nADD ./etc/php/laravel.ini /usr/local/etc/php/conf.d\n# ####################################\n#  Aliases:\n# ####################################\n#  docker-compose exec php-fpm dep --> locally installed Deployer binaries\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/vendor/bin/dep \"$@\"' > /usr/bin/dep\nRUN chmod +x /usr/bin/dep\n#  docker-compose exec php-fpm art --> php artisan\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan \"$@\"' > /usr/bin/art\nRUN chmod +x /usr/bin/art\n#  docker-compose exec php-fpm migrate --> php artisan migrate\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate \"$@\"' > /usr/bin/migrate\nRUN chmod +x /usr/bin/migrate\n#  docker-compose exec php-fpm fresh --> php artisan migrate:fresh --seed\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate:fresh --seed' > /usr/bin/fresh\nRUN chmod +x /usr/bin/fresh\n#  docker-compose exec php-fpm t --> run the tests for the project and generate testdox\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/var/www/vendor/bin/phpunit -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report.txt \"$@\"' > /usr/bin/t\nRUN chmod +x /usr/bin/t\n#  docker-compose exec php-fpm d --> run the Laravel Dusk browser tests for the project\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/bin/bash\\n/usr/local/bin/php /var/www/artisan dusk -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report-dusk.txt \"$@\"' > /usr/bin/d\nRUN chmod +x /usr/bin/d\nRUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\n","injectedSmells":[],"originalDockerfileHash":"09e2509789258eb9046a7faafeaa7f2a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.2-fpm\nMAINTAINER clement@cyber-duck.co.uk\nRUN apt-get update \\\n && apt-get install --no-install-recommends libmemcached-dev libz-dev libpq-dev libjpeg-dev libpng-dev libfreetype6-dev libssl-dev libmcrypt-dev openssh-server git cron nano wget curl sudo zip unzip git gnupg1 gnupg2 gnupg -y --force-yes\n#   Install the PHP mcrypt extention (from PECL, mcrypt has been removed from PHP 7.2)\nRUN pecl install mcrypt-1.0.1\nRUN docker-php-ext-enable mcrypt\n#   Install the PHP pcntl extention\nRUN docker-php-ext-install pcntl\n#   Install the PHP zip extention\nRUN docker-php-ext-install zip\n#   Install the PHP pdo_mysql extention\nRUN docker-php-ext-install pdo_mysql\n#   Install the PHP mysqli extention\nRUN docker-php-ext-install mysqli\n#   Install the PHP pdo_pgsql extention\nRUN docker-php-ext-install pdo_pgsql\n#   Enable PHP extension(s)\nRUN docker-php-ext-enable pdo_mysql\n#  ####################################\n#   GD:\n#  ####################################\n#   Install the PHP gd library\nRUN docker-php-ext-install gd \\\n && docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Install the xdebug extension\nRUN pecl install xdebug \\\n && docker-php-ext-enable xdebug\n#   Copy xdebug configration for remote debugging\nCOPY ./etc/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n#  ####################################\n#   PHP Memcached:\n#  ####################################\n#   Install the php memcached extension\nRUN pecl install memcached \\\n && docker-php-ext-enable memcached\n#  ####################################\n#   Composer:\n#  ####################################\n#   Install composer and add its bin to the PATH.\nRUN curl -s http://getcomposer.org/installer | php \\\n && echo \"export PATH=${PATH}:/var/www/vendor/bin\" >> ~/.bashrc \\\n && mv composer.phar /usr/local/bin/composer\n#   Source the bash\nRUN . ~/.bashrc\n#  ####################################\n#   PHPUnit:\n#  ####################################\nRUN wget https://phar.phpunit.de/phpunit.phar\nRUN chmod +x phpunit.phar\nRUN mv phpunit.phar /usr/local/bin/phpunit\n#  ####################################\n#   Laravel Schedule Cron Job:\n#  ####################################\nRUN echo \"* * * * * root php /var/www/artisan schedule:run >> /dev/null 2>&1\" >> /etc/cron.d/laravel-schedule\nRUN chmod 0644 /etc/cron.d/laravel-schedule\n#  ####################################\n#   Security Checker:\n#  ####################################\n#   Security Checker\nRUN wget http://get.sensiolabs.org/security-checker.phar\nRUN chmod +x security-checker.phar\nRUN mv security-checker.phar /usr/local/bin/security-checker\n#  ####################################\n#   Node.js && Yarn:\n#  ####################################\n#   Node.js\nRUN curl -sL https://deb.nodesource.com/setup_11.x -o nodesource_setup.sh\nRUN bash nodesource_setup.sh\nRUN apt-get install nodejs -y\nRUN npm install\n#   Yarn\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install build-essential yarn -qq -y\nRUN yarn install\n#  ####################################\n#   Laravel\n#  ####################################\nRUN composer global require \"laravel/installer\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nADD ./etc/php/laravel.ini /usr/local/etc/php/conf.d\n#  ####################################\n#   Aliases:\n#  ####################################\n#   docker-compose exec php-fpm dep --> locally installed Deployer binaries\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/vendor/bin/dep \"$@\"' > /usr/bin/dep\nRUN chmod +x /usr/bin/dep\n#   docker-compose exec php-fpm art --> php artisan\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan \"$@\"' > /usr/bin/art\nRUN chmod +x /usr/bin/art\n#   docker-compose exec php-fpm migrate --> php artisan migrate\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate \"$@\"' > /usr/bin/migrate\nRUN chmod +x /usr/bin/migrate\n#   docker-compose exec php-fpm fresh --> php artisan migrate:fresh --seed\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan migrate:fresh --seed' > /usr/bin/fresh\nRUN chmod +x /usr/bin/fresh\n#   docker-compose exec php-fpm t --> run the tests for the project and generate testdox\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/var/www/vendor/bin/phpunit -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report.txt \"$@\"' > /usr/bin/t\nRUN chmod +x /usr/bin/t\n#   docker-compose exec php-fpm d --> run the Laravel Dusk browser tests for the project\nRUN echo '#!/bin/bash\\n/usr/local/bin/php /var/www/artisan config:clear\\n/bin/bash\\n/usr/local/bin/php /var/www/artisan dusk -d memory_limit=2G --stop-on-error --stop-on-failure --testdox-text=tests/report-dusk.txt \"$@\"' > /usr/bin/d\nRUN chmod +x /usr/bin/d\nRUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\n","originalDockerfileUglifiedHash":"a2b200043f0fa647640d0ed99dcbad8f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2cb8bc446e6bb5604578ecbfbcdc26621d978822.dockerfile"}