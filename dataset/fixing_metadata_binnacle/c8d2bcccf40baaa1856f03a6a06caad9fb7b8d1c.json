{"seed":4185048700,"processedDockerfileHash":"c6b0146558b38443598ead3d4044eecb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER caffe-dev <caffe-dev@googlegroups.com>\n#   A docker container with CUDA and caffe2 installed.\n#   Note: this should install everything but cudnn, which requires you to have a\n#   manual registration and download from the NVidia website. After creating this\n#   docker image, the Caffe2 repository is located at /opt/caffe2. You can install\n#   cudnn manually and re-compile caffe2.\n#  ###############################################################################\n#   Step 1: set up cuda on the ubuntu box.\n#  ###############################################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=11.6ubuntu6 wget=1.15-1ubuntu1.14.04.5 -q -y\nRUN cd /tmp \\\n && wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\n#   Ensure the CUDA libs and binaries are in the correct environment variables\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"\nENV PATH=\"$PATH:/usr/local/cuda/bin\"\n#   Run nvcc to make sure things are set correctly.\nRUN nvcc --version\n#  ###############################################################################\n#   Step 2: set up caffe2 pre-requisites\n#  ###############################################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends git=1:1.9.1-1ubuntu0.10 libeigen3-dev=3.2.0-8 libgoogle-glog-dev=0.3.3-1 libleveldb-dev=1.15.0-2 liblmdb-dev=0.9.10-1 libopencv-dev=2.4.8+dfsg1-2ubuntu1.2 libprotobuf-dev=2.5.0-9ubuntu1 libsnappy-dev=1.1.0-1ubuntu1 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libbz2-dev=1.0.6-5 protobuf-compiler=2.5.0-9ubuntu1 python-dev=2.7.5-5ubuntu3 python-pip=1.5.4-1ubuntu4 -q -y\nRUN cd /tmp \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && cd /tmp/rocksdb \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/rocksdb\n#   Caffe2 works best with openmpi 1.8.5 or above (which has cuda support).\n#   If you do not need openmpi, skip this step.\nRUN cd /tmp \\\n && wget http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz \\\n && tar xzvf openmpi-1.10.0.tar.gz \\\n && cd /tmp/openmpi-1.10.0 \\\n && ./configure --with-cuda --with-threads \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/openmpi-1.10.0 \\\n && rm /tmp/openmpi-1.10.0.tar.gz\n#   Caffe2 requires zeromq 4.0 or above, manually install.\n#   If you do not need zeromq, skip this step.\nRUN apt-get install --no-install-recommends autoconf=2.69-6 libtool=2.4.2-1.7ubuntu1 -q -y\nRUN mkdir /tmp/zeromq-build \\\n && cd /tmp/zeromq-build \\\n && wget https://github.com/zeromq/zeromq4-1/archive/v4.1.3.tar.gz \\\n && tar xzvf v4.1.3.tar.gz --strip 1 \\\n && ./autogen.sh \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/zeromq-build\n#   pip self upgrade\nRUN pip install pip==23.1 --upgrade\n#   Python dependencies\nRUN pip install matplotlib==3.7.1 numpy==1.24.2 protobuf==4.22.3\n#  ###############################################################################\n#   Step 3: install optional dependencies (\"good to have\" features)\n#  ###############################################################################\nRUN apt-get install --no-install-recommends gfortran=4:4.8.2-1ubuntu6 graphviz=2.36.0-0ubuntu3.2 libatlas-base-dev=3.10.1-4 vim=2:7.4.052-1ubuntu3.1 -q -y\nRUN pip install flask==2.2.3 ipython==8.12.0 notebook==6.5.4 pydot==1.4.2 python-nvd3==0.15.0 scipy==1.10.1 tornado==6.2\n#   This is intentional. scikit-image has to be after scipy.\nRUN pip install scikit-image==0.20.0\n#  ###############################################################################\n#   Step 4: set up caffe2\n#  ###############################################################################\n#   Get the repository, and build.\nRUN cd /opt \\\n && git clone https://github.com/Yangqing/caffe2.git \\\n && cd /opt/caffe2 \\\n && make\n#   Now, we know that some of the caffe tests will fail. How do we deal with\n#   those?\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER caffe-dev <caffe-dev@googlegroups.com>\n#  A docker container with CUDA and caffe2 installed.\n#  Note: this should install everything but cudnn, which requires you to have a\n#  manual registration and download from the NVidia website. After creating this\n#  docker image, the Caffe2 repository is located at /opt/caffe2. You can install\n#  cudnn manually and re-compile caffe2.\n# ###############################################################################\n#  Step 1: set up cuda on the ubuntu box.\n# ###############################################################################\nRUN apt-get update \\\n && apt-get install build-essential wget -q -y\nRUN cd /tmp \\\n && wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\n#  Ensure the CUDA libs and binaries are in the correct environment variables\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"\nENV PATH=\"$PATH:/usr/local/cuda/bin\"\n#  Run nvcc to make sure things are set correctly.\nRUN nvcc --version\n# ###############################################################################\n#  Step 2: set up caffe2 pre-requisites\n# ###############################################################################\nRUN apt-get update \\\n && apt-get install git libeigen3-dev libgoogle-glog-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev zlib1g-dev libbz2-dev protobuf-compiler python-dev python-pip -q -y\nRUN cd /tmp \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && cd /tmp/rocksdb \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/rocksdb\n#  Caffe2 works best with openmpi 1.8.5 or above (which has cuda support).\n#  If you do not need openmpi, skip this step.\nRUN cd /tmp \\\n && wget http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz \\\n && tar xzvf openmpi-1.10.0.tar.gz \\\n && cd /tmp/openmpi-1.10.0 \\\n && ./configure --with-cuda --with-threads \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/openmpi-1.10.0 \\\n && rm /tmp/openmpi-1.10.0.tar.gz\n#  Caffe2 requires zeromq 4.0 or above, manually install.\n#  If you do not need zeromq, skip this step.\nRUN apt-get install autoconf libtool -q -y\nRUN mkdir /tmp/zeromq-build \\\n && cd /tmp/zeromq-build \\\n && wget https://github.com/zeromq/zeromq4-1/archive/v4.1.3.tar.gz \\\n && tar xzvf v4.1.3.tar.gz --strip 1 \\\n && ./autogen.sh \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/zeromq-build\n#  pip self upgrade\nRUN pip install pip --upgrade\n#  Python dependencies\nRUN pip install matplotlib numpy protobuf\n# ###############################################################################\n#  Step 3: install optional dependencies (\"good to have\" features)\n# ###############################################################################\nRUN apt-get install gfortran graphviz libatlas-base-dev vim -q -y\nRUN pip install flask ipython notebook pydot python-nvd3 scipy tornado\n#  This is intentional. scikit-image has to be after scipy.\nRUN pip install scikit-image\n# ###############################################################################\n#  Step 4: set up caffe2\n# ###############################################################################\n#  Get the repository, and build.\nRUN cd /opt \\\n && git clone https://github.com/Yangqing/caffe2.git \\\n && cd /opt/caffe2 \\\n && make\n#  Now, we know that some of the caffe tests will fail. How do we deal with\n#  those?\n","injectedSmells":[],"originalDockerfileHash":"806a6e6f57d06b37346e9cedf972c67c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER caffe-dev <caffe-dev@googlegroups.com>\n#   A docker container with CUDA and caffe2 installed.\n#   Note: this should install everything but cudnn, which requires you to have a\n#   manual registration and download from the NVidia website. After creating this\n#   docker image, the Caffe2 repository is located at /opt/caffe2. You can install\n#   cudnn manually and re-compile caffe2.\n#  ###############################################################################\n#   Step 1: set up cuda on the ubuntu box.\n#  ###############################################################################\nRUN apt-get update \\\n && apt-get install build-essential wget -q -y\nRUN cd /tmp \\\n && wget http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run \\\n && chmod +x cuda_*_linux.run \\\n && ./cuda_*_linux.run -extract=`pwd ` \\\n && ./NVIDIA-Linux-x86_64-*.run -s --no-kernel-module \\\n && ./cuda-linux64-rel-*.run -noprompt \\\n && rm -rf *\n#   Ensure the CUDA libs and binaries are in the correct environment variables\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"\nENV PATH=\"$PATH:/usr/local/cuda/bin\"\n#   Run nvcc to make sure things are set correctly.\nRUN nvcc --version\n#  ###############################################################################\n#   Step 2: set up caffe2 pre-requisites\n#  ###############################################################################\nRUN apt-get update \\\n && apt-get install git libeigen3-dev libgoogle-glog-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev zlib1g-dev libbz2-dev protobuf-compiler python-dev python-pip -q -y\nRUN cd /tmp \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && cd /tmp/rocksdb \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/rocksdb\n#   Caffe2 works best with openmpi 1.8.5 or above (which has cuda support).\n#   If you do not need openmpi, skip this step.\nRUN cd /tmp \\\n && wget http://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.0.tar.gz \\\n && tar xzvf openmpi-1.10.0.tar.gz \\\n && cd /tmp/openmpi-1.10.0 \\\n && ./configure --with-cuda --with-threads \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/openmpi-1.10.0 \\\n && rm /tmp/openmpi-1.10.0.tar.gz\n#   Caffe2 requires zeromq 4.0 or above, manually install.\n#   If you do not need zeromq, skip this step.\nRUN apt-get install autoconf libtool -q -y\nRUN mkdir /tmp/zeromq-build \\\n && cd /tmp/zeromq-build \\\n && wget https://github.com/zeromq/zeromq4-1/archive/v4.1.3.tar.gz \\\n && tar xzvf v4.1.3.tar.gz --strip 1 \\\n && ./autogen.sh \\\n && ./configure --without-libsodium \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/zeromq-build\n#   pip self upgrade\nRUN pip install pip --upgrade\n#   Python dependencies\nRUN pip install matplotlib numpy protobuf\n#  ###############################################################################\n#   Step 3: install optional dependencies (\"good to have\" features)\n#  ###############################################################################\nRUN apt-get install gfortran graphviz libatlas-base-dev vim -q -y\nRUN pip install flask ipython notebook pydot python-nvd3 scipy tornado\n#   This is intentional. scikit-image has to be after scipy.\nRUN pip install scikit-image\n#  ###############################################################################\n#   Step 4: set up caffe2\n#  ###############################################################################\n#   Get the repository, and build.\nRUN cd /opt \\\n && git clone https://github.com/Yangqing/caffe2.git \\\n && cd /opt/caffe2 \\\n && make\n#   Now, we know that some of the caffe tests will fail. How do we deal with\n#   those?\n","originalDockerfileUglifiedHash":"ee189f072d0cd07739929b0e3e7e649e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c8d2bcccf40baaa1856f03a6a06caad9fb7b8d1c.dockerfile"}