{"seed":3894773699,"processedDockerfileHash":"ae57dc931a0217397083ae25c61f22cd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER fcarey@gmail.com\n#   Temporarily shut up warnings.\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#   Basic Dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 zip=3.0-8 unzip=6.0-9ubuntu1.5 software-properties-common=0.92.37.8 python-dev=2.7.5-5ubuntu3 python-setuptools=3.3-1ubuntu2 python-software-properties=0.92.37.8 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && easy_install pip\n#   Dependencies for vnc setup.\nRUN apt-get update \\\n && apt-get install --no-install-recommends xvfb=2:1.15.1-0ubuntu2.11 fluxbox=1.3.5-2 x11vnc=0.9.13-1.1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && which java \\\n && java -version \\\n && update-ca-certificates -f\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\n#   RUN echo \"startup --batch\" >>/root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\n#   RUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n#      >>/root/.bazelrc\n#   ENV BAZELRC /root/.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.3\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE https://github.com/bazelbuild/bazel/blob/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Install deepmind-lab dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends lua5.1=5.1.5-5ubuntu0.1 liblua5.1-0-dev=5.1.5-5ubuntu0.1 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 gettext=0.18.3.1-1ubuntu3.1 freeglut3-dev=2.8.1-1 libsdl2-dev=2.0.2+dfsg1-3ubuntu1.3 libosmesa6-dev=10.1.3-0ubuntu0.6 python-dev=2.7.5-5ubuntu3 python-numpy=1:1.8.2-0ubuntu0.1 realpath=1.19 build-essential=11.6ubuntu6 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Set the default X11 Display.\nENV DISPLAY=\":1\"\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV XVFB_RESOLUTION=\"800x600x16\"\n#   Set up relaax \nRUN git clone https://github.com/deeplearninc/relaax.git \\\n && cd /relaax \\\n && git checkout pixie \\\n && pip install -e .[all] \\\n && cd ..\n#   Set up deepmind-lab\n#   Run an actual (headless=false) build since this should make subsequent builds much faster.\n#   Alternative commands based on the Documentation:\n#   bazel build :deepmind_lab.so --define headless=osmesa && \\\n#   bazel run :python_module_test --define headless=osmesa && \\\nRUN git clone https://github.com/deepmind/lab \\\n && cd /lab \\\n && bazel build :random_agent --define headless=false \\\n && cd ..\n#   This port is the default for connecting to VNC display :1\nEXPOSE 5901/tcp\n#   Copy VNC script that handles restarts and make it executable.\nCOPY ./startup.sh /opt/\nRUN chmod u+x /opt/startup.sh\nENV RELAAX_DIR=\"/relaax\"\nENV DM_LAB_DIR=\"/lab\"\nENV APP_DIR=\"/app\"\nWORKDIR $APP_DIR\n#   Finally, start application\nCMD [\"--show-ui\", \"false\"]\nENTRYPOINT [\"python\", \"environment/start-lab.py\", \"--config\", \"/app/app.yaml\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER fcarey@gmail.com\n#  Temporarily shut up warnings.\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#  Basic Dependencies\nRUN apt-get update \\\n && apt-get install curl git zip unzip software-properties-common python-dev python-setuptools python-software-properties -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && easy_install pip\n#  Dependencies for vnc setup.\nRUN apt-get update \\\n && apt-get install xvfb fluxbox x11vnc -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#  have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#  Matthias Klose (https://launchpad.net/~doko).  It will do until\n#  we either update the base image beyond 14.04 or openjdk-8 is\n#  finally backported to trusty; see e.g.\n#    https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && which java \\\n && java -version \\\n && update-ca-certificates -f\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\n#  RUN echo \"startup --batch\" >>/root/.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\n#  RUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n#     >>/root/.bazelrc\n#  ENV BAZELRC /root/.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.3\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE https://github.com/bazelbuild/bazel/blob/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Install deepmind-lab dependencies\nRUN apt-get update \\\n && apt-get install lua5.1 liblua5.1-0-dev libffi-dev gettext freeglut3-dev libsdl2-dev libosmesa6-dev python-dev python-numpy realpath build-essential -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Set the default X11 Display.\nENV DISPLAY=\":1\"\nENV VNC_PASSWORD=\"password\"\nENV XVFB_RESOLUTION=\"800x600x16\"\n#  Set up relaax \nRUN git clone https://github.com/deeplearninc/relaax.git \\\n && cd /relaax \\\n && git checkout pixie \\\n && pip install -e .[all] \\\n && cd ..\n#  Set up deepmind-lab\n#  Run an actual (headless=false) build since this should make subsequent builds much faster.\n#  Alternative commands based on the Documentation:\n#  bazel build :deepmind_lab.so --define headless=osmesa && \\\n#  bazel run :python_module_test --define headless=osmesa && \\\nRUN git clone https://github.com/deepmind/lab \\\n && cd /lab \\\n && bazel build :random_agent --define headless=false \\\n && cd ..\n#  This port is the default for connecting to VNC display :1\nEXPOSE 5901/tcp\n#  Copy VNC script that handles restarts and make it executable.\nCOPY ./startup.sh /opt/\nRUN chmod u+x /opt/startup.sh\nENV RELAAX_DIR=\"/relaax\"\nENV DM_LAB_DIR=\"/lab\"\nENV APP_DIR=\"/app\"\nWORKDIR $APP_DIR\n#  Finally, start application\nCMD [\"--show-ui\", \"false\"]\nENTRYPOINT [\"python\", \"environment/start-lab.py\", \"--config\", \"/app/app.yaml\"]\n","injectedSmells":[],"originalDockerfileHash":"89c1bf5e02fce5bf6c9ad262e82587c3","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER fcarey@gmail.com\n#   Temporarily shut up warnings.\nENV DISPLAY=\":0\"\nENV TERM=\"xterm\"\n#   Basic Dependencies\nRUN apt-get update \\\n && apt-get install curl git zip unzip software-properties-common python-dev python-setuptools python-software-properties -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && easy_install pip\n#   Dependencies for vnc setup.\nRUN apt-get update \\\n && apt-get install xvfb fluxbox x11vnc -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   We need to add a custom PPA to pick up JDK8, since trusty doesn't\n#   have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:\n#   Matthias Klose (https://launchpad.net/~doko).  It will do until\n#   we either update the base image beyond 14.04 or openjdk-8 is\n#   finally backported to trusty; see e.g.\n#     https://bugs.launchpad.net/trusty-backports/+bug/1368094\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk openjdk-8-jre-headless -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && which java \\\n && java -version \\\n && update-ca-certificates -f\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\n#   RUN echo \"startup --batch\" >>/root/.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\n#   RUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" \\\n#      >>/root/.bazelrc\n#   ENV BAZELRC /root/.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.3\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -fSsL -o /bazel/LICENSE https://github.com/bazelbuild/bazel/blob/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Install deepmind-lab dependencies\nRUN apt-get update \\\n && apt-get install lua5.1 liblua5.1-0-dev libffi-dev gettext freeglut3-dev libsdl2-dev libosmesa6-dev python-dev python-numpy realpath build-essential -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Set the default X11 Display.\nENV DISPLAY=\":1\"\nENV VNC_PASSWORD=\"password\"\nENV XVFB_RESOLUTION=\"800x600x16\"\n#   Set up relaax \nRUN git clone https://github.com/deeplearninc/relaax.git \\\n && cd /relaax \\\n && git checkout pixie \\\n && pip install -e .[all] \\\n && cd ..\n#   Set up deepmind-lab\n#   Run an actual (headless=false) build since this should make subsequent builds much faster.\n#   Alternative commands based on the Documentation:\n#   bazel build :deepmind_lab.so --define headless=osmesa && \\\n#   bazel run :python_module_test --define headless=osmesa && \\\nRUN git clone https://github.com/deepmind/lab \\\n && cd /lab \\\n && bazel build :random_agent --define headless=false \\\n && cd ..\n#   This port is the default for connecting to VNC display :1\nEXPOSE 5901/tcp\n#   Copy VNC script that handles restarts and make it executable.\nCOPY ./startup.sh /opt/\nRUN chmod u+x /opt/startup.sh\nENV RELAAX_DIR=\"/relaax\"\nENV DM_LAB_DIR=\"/lab\"\nENV APP_DIR=\"/app\"\nWORKDIR $APP_DIR\n#   Finally, start application\nCMD [\"--show-ui\", \"false\"]\nENTRYPOINT [\"python\", \"environment/start-lab.py\", \"--config\", \"/app/app.yaml\"]\n","originalDockerfileUglifiedHash":"685d327ac22d0350bf7295c00fa3e4ee","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ce0c189711c2b1c8ece389fb34f6d17e1cc9cb02.dockerfile"}