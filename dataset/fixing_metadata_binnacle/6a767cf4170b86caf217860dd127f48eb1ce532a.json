{"seed":1245271715,"processedDockerfileHash":"dd98e70b43a8abb60a3d2d453bcf9fda","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2017 the original author or authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM centos:7\nMAINTAINER Voltha Community <info@opennetworking.org>\n#   install required packages\nRUN [\"yum\", \"install\", \"-y\", \"epel-release\"]\nRUN [\"yum\", \"install\", \"-y\", \"git\", \"make\", \"libtool\", \"libxml2-devel\", \"file\", \"libxslt-devel\", \"libssh-devel\", \"libcurl-devel\", \"python-pip\", \"libxml2-python\", \"openssh-server\", \"augeas-devel\", \"readline\", \"readline-devel\", \"openssl\", \"openssl-perl\", \"openssl-devel\", \"m2crypto\", \"which\", \"unzip\", \"gcc-c++\", \"gflags-devel\", \"gtest-devel\", \"clang\", \"c++-devel\", \"wget\"]\nRUN [\"ssh-keygen\", \"-A\"]\nRUN [\"pip\", \"install\", \"pyang==2.5.3\"]\nRUN [\"yum\", \"clean\", \"packages\"]\nRUN [\"yum\", \"clean\", \"headers\"]\n#   clone, build and install libnetconf\nRUN set -e -x ; git clone https://github.com/CESNET/libnetconf.git /usr/src/libnetconf ; cd /usr/src/libnetconf ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; ln -s /usr/lib/pkgconfig/libnetconf.pc /usr/lib64/pkgconfig/ ; make clean\n#   clone netopeer\nRUN set -e -x ; git clone https://github.com/CESNET/netopeer.git /usr/src/netopeer\n#   build and install netopeer-cli\nRUN set -e -x ; cd /usr/src/netopeer/cli ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; make clean\n#   build and install netopeer-server\nRUN set -e -x ; cd /usr/src/netopeer/server ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; cp -v config/datastore.xml /usr/etc/netopeer/cfgnetopeer/datastore.xml ; make clean\n#   clone, build and install protobuf\nRUN set -e -x ; git clone -b v3.2.1 https://github.com/google/protobuf.git /usr/src/protobuf ; cd /usr/src/protobuf ; ./autogen.sh ; ./configure ; make ; make install ; ldconfig ; make clean\n#   Install golang\nRUN set -e -x ; cd /tmp ; wget https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz ; tar -C /usr/local -xzf /tmp/go1.8.1.linux-amd64.tar.gz ; rm -f /tmp/go1.8.1.linux-amd64.tar.gz\n#   Setup necessary environment variables\nENV GOROOT=\"/usr/local/go\"\nENV PATH=\"$PATH:$GOROOT/bin\"\nRUN [\"mkdir\", \"/usr/local/share/go\"]\nENV GOPATH=\"/usr/local/share/go\"\nENV PATH=\"$PATH:$GOPATH/bin\"\n#   Install golang protobuf/grpc libraries\nRUN set -e -x ; go get -u github.com/golang/protobuf/{proto,protoc-gen-go} ; go get -u google.golang.org/grpc ; go get -u github.com/hashicorp/consul/api\n#   Build and Install the golang Voltha GRPC client layer\nCOPY netopeer/voltha-grpc-client /usr/src/voltha-grpc-client\nRUN set -e -x ; mkdir -p /usr/local/share/go/src/github.com/opencord/voltha/netconf ; ln -s /usr/src/voltha-grpc-client /usr/local/share/go/src/github.com/opencord/voltha/netconf/translator ; cd /usr/src/voltha-grpc-client ; go build -buildmode=c-shared -o voltha.so voltha.go ; mv voltha.so /usr/lib64 ; mv voltha.h /usr/include ; cp voltha-defs.h /usr/include ; rm -f /usr/lib64/libvoltha.so ; ln -s /usr/lib64/voltha.so /usr/lib64/libvoltha.so\n#   ------------------------------------------------\n#   Sample transapi implementation\n#\n#   To demonstrate the integration with the netopeer netconf server\n#\n#   Build and Install the golang Voltha model conversion package\nCOPY netopeer/voltha-netconf-model /usr/src/voltha-netconf-model\nRUN set -e -x ; cd /usr/src/voltha-netconf-model ; go build -buildmode=c-shared -o voltha-netconf-model.so netconf-model.go ; mv voltha-netconf-model.so /usr/lib64 ; mv voltha-netconf-model.h /usr/include ; rm -f /usr/lib64/libvoltha-netconf-model.so ; ln -s /usr/lib64/voltha-netconf-model.so /usr/lib64/libvoltha-netconf-model.so\n#   Build and install the Voltha netconf transapi library\nCOPY netopeer/voltha-transapi /usr/src/netopeer/voltha-transapi\nRUN set -e -x ; cd /usr/src/netopeer/voltha-transapi ; autoreconf --install ; ./configure --prefix='/usr' ; make ; make install\n#   Finally start the netopeer-server with debugging logs enabled\nCMD [\"/usr/bin/netopeer-server\", \"-v\", \"3\"]\n#   Expose the default netconf port\nEXPOSE 830/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2017 the original author or authors.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM centos:7\nMAINTAINER Voltha Community <info@opennetworking.org>\n#  install required packages\nRUN [\"yum\", \"install\", \"-y\", \"epel-release\"]\nRUN [\"yum\", \"install\", \"-y\", \"git\", \"make\", \"libtool\", \"libxml2-devel\", \"file\", \"libxslt-devel\", \"libssh-devel\", \"libcurl-devel\", \"python-pip\", \"libxml2-python\", \"openssh-server\", \"augeas-devel\", \"readline\", \"readline-devel\", \"openssl\", \"openssl-perl\", \"openssl-devel\", \"m2crypto\", \"which\", \"unzip\", \"gcc-c++\", \"gflags-devel\", \"gtest-devel\", \"clang\", \"c++-devel\", \"wget\"]\nRUN [\"ssh-keygen\", \"-A\"]\nRUN [\"pip\", \"install\", \"pyang\"]\nRUN [\"yum\", \"clean\", \"packages\"]\nRUN [\"yum\", \"clean\", \"headers\"]\n#  clone, build and install libnetconf\nRUN set -e -x ; git clone https://github.com/CESNET/libnetconf.git /usr/src/libnetconf ; cd /usr/src/libnetconf ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; ln -s /usr/lib/pkgconfig/libnetconf.pc /usr/lib64/pkgconfig/ ; make clean\n#  clone netopeer\nRUN set -e -x ; git clone https://github.com/CESNET/netopeer.git /usr/src/netopeer\n#  build and install netopeer-cli\nRUN set -e -x ; cd /usr/src/netopeer/cli ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; make clean\n#  build and install netopeer-server\nRUN set -e -x ; cd /usr/src/netopeer/server ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; cp -v config/datastore.xml /usr/etc/netopeer/cfgnetopeer/datastore.xml ; make clean\n#  clone, build and install protobuf\nRUN set -e -x ; git clone -b v3.2.1 https://github.com/google/protobuf.git /usr/src/protobuf ; cd /usr/src/protobuf ; ./autogen.sh ; ./configure ; make ; make install ; ldconfig ; make clean\n#  Install golang\nRUN set -e -x ; cd /tmp ; wget https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz ; tar -C /usr/local -xzf /tmp/go1.8.1.linux-amd64.tar.gz ; rm -f /tmp/go1.8.1.linux-amd64.tar.gz\n#  Setup necessary environment variables\nENV GOROOT=\"/usr/local/go\"\nENV PATH=\"$PATH:$GOROOT/bin\"\nRUN [\"mkdir\", \"/usr/local/share/go\"]\nENV GOPATH=\"/usr/local/share/go\"\nENV PATH=\"$PATH:$GOPATH/bin\"\n#  Install golang protobuf/grpc libraries\nRUN set -e -x ; go get -u github.com/golang/protobuf/{proto,protoc-gen-go} ; go get -u google.golang.org/grpc ; go get -u github.com/hashicorp/consul/api\n#  Build and Install the golang Voltha GRPC client layer\nCOPY netopeer/voltha-grpc-client /usr/src/voltha-grpc-client\nRUN set -e -x ; mkdir -p /usr/local/share/go/src/github.com/opencord/voltha/netconf ; ln -s /usr/src/voltha-grpc-client /usr/local/share/go/src/github.com/opencord/voltha/netconf/translator ; cd /usr/src/voltha-grpc-client ; go build -buildmode=c-shared -o voltha.so voltha.go ; mv voltha.so /usr/lib64 ; mv voltha.h /usr/include ; cp voltha-defs.h /usr/include ; rm -f /usr/lib64/libvoltha.so ; ln -s /usr/lib64/voltha.so /usr/lib64/libvoltha.so\n#  ------------------------------------------------\n#  Sample transapi implementation\n#\n#  To demonstrate the integration with the netopeer netconf server\n#\n#  Build and Install the golang Voltha model conversion package\nCOPY netopeer/voltha-netconf-model /usr/src/voltha-netconf-model\nRUN set -e -x ; cd /usr/src/voltha-netconf-model ; go build -buildmode=c-shared -o voltha-netconf-model.so netconf-model.go ; mv voltha-netconf-model.so /usr/lib64 ; mv voltha-netconf-model.h /usr/include ; rm -f /usr/lib64/libvoltha-netconf-model.so ; ln -s /usr/lib64/voltha-netconf-model.so /usr/lib64/libvoltha-netconf-model.so\n#  Build and install the Voltha netconf transapi library\nCOPY netopeer/voltha-transapi /usr/src/netopeer/voltha-transapi\nRUN set -e -x ; cd /usr/src/netopeer/voltha-transapi ; autoreconf --install ; ./configure --prefix='/usr' ; make ; make install\n#  Finally start the netopeer-server with debugging logs enabled\nCMD [\"/usr/bin/netopeer-server\", \"-v\", \"3\"]\n#  Expose the default netconf port\nEXPOSE 830/tcp\n","injectedSmells":[],"originalDockerfileHash":"3f4339c0ecfb531fc865ed014a3956a3","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2017 the original author or authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM centos:7\nMAINTAINER Voltha Community <info@opennetworking.org>\n#   install required packages\nRUN [\"yum\", \"install\", \"-y\", \"epel-release\"]\nRUN [\"yum\", \"install\", \"-y\", \"git\", \"make\", \"libtool\", \"libxml2-devel\", \"file\", \"libxslt-devel\", \"libssh-devel\", \"libcurl-devel\", \"python-pip\", \"libxml2-python\", \"openssh-server\", \"augeas-devel\", \"readline\", \"readline-devel\", \"openssl\", \"openssl-perl\", \"openssl-devel\", \"m2crypto\", \"which\", \"unzip\", \"gcc-c++\", \"gflags-devel\", \"gtest-devel\", \"clang\", \"c++-devel\", \"wget\"]\nRUN [\"ssh-keygen\", \"-A\"]\nRUN [\"pip\", \"install\", \"pyang\"]\nRUN [\"yum\", \"clean\", \"packages\"]\nRUN [\"yum\", \"clean\", \"headers\"]\n#   clone, build and install libnetconf\nRUN set -e -x ; git clone https://github.com/CESNET/libnetconf.git /usr/src/libnetconf ; cd /usr/src/libnetconf ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; ln -s /usr/lib/pkgconfig/libnetconf.pc /usr/lib64/pkgconfig/ ; make clean\n#   clone netopeer\nRUN set -e -x ; git clone https://github.com/CESNET/netopeer.git /usr/src/netopeer\n#   build and install netopeer-cli\nRUN set -e -x ; cd /usr/src/netopeer/cli ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; make clean\n#   build and install netopeer-server\nRUN set -e -x ; cd /usr/src/netopeer/server ; ./configure --enable-tls --prefix='/usr' ; make ; make install ; cp -v config/datastore.xml /usr/etc/netopeer/cfgnetopeer/datastore.xml ; make clean\n#   clone, build and install protobuf\nRUN set -e -x ; git clone -b v3.2.1 https://github.com/google/protobuf.git /usr/src/protobuf ; cd /usr/src/protobuf ; ./autogen.sh ; ./configure ; make ; make install ; ldconfig ; make clean\n#   Install golang\nRUN set -e -x ; cd /tmp ; wget https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz ; tar -C /usr/local -xzf /tmp/go1.8.1.linux-amd64.tar.gz ; rm -f /tmp/go1.8.1.linux-amd64.tar.gz\n#   Setup necessary environment variables\nENV GOROOT=\"/usr/local/go\"\nENV PATH=\"$PATH:$GOROOT/bin\"\nRUN [\"mkdir\", \"/usr/local/share/go\"]\nENV GOPATH=\"/usr/local/share/go\"\nENV PATH=\"$PATH:$GOPATH/bin\"\n#   Install golang protobuf/grpc libraries\nRUN set -e -x ; go get -u github.com/golang/protobuf/{proto,protoc-gen-go} ; go get -u google.golang.org/grpc ; go get -u github.com/hashicorp/consul/api\n#   Build and Install the golang Voltha GRPC client layer\nCOPY netopeer/voltha-grpc-client /usr/src/voltha-grpc-client\nRUN set -e -x ; mkdir -p /usr/local/share/go/src/github.com/opencord/voltha/netconf ; ln -s /usr/src/voltha-grpc-client /usr/local/share/go/src/github.com/opencord/voltha/netconf/translator ; cd /usr/src/voltha-grpc-client ; go build -buildmode=c-shared -o voltha.so voltha.go ; mv voltha.so /usr/lib64 ; mv voltha.h /usr/include ; cp voltha-defs.h /usr/include ; rm -f /usr/lib64/libvoltha.so ; ln -s /usr/lib64/voltha.so /usr/lib64/libvoltha.so\n#   ------------------------------------------------\n#   Sample transapi implementation\n#\n#   To demonstrate the integration with the netopeer netconf server\n#\n#   Build and Install the golang Voltha model conversion package\nCOPY netopeer/voltha-netconf-model /usr/src/voltha-netconf-model\nRUN set -e -x ; cd /usr/src/voltha-netconf-model ; go build -buildmode=c-shared -o voltha-netconf-model.so netconf-model.go ; mv voltha-netconf-model.so /usr/lib64 ; mv voltha-netconf-model.h /usr/include ; rm -f /usr/lib64/libvoltha-netconf-model.so ; ln -s /usr/lib64/voltha-netconf-model.so /usr/lib64/libvoltha-netconf-model.so\n#   Build and install the Voltha netconf transapi library\nCOPY netopeer/voltha-transapi /usr/src/netopeer/voltha-transapi\nRUN set -e -x ; cd /usr/src/netopeer/voltha-transapi ; autoreconf --install ; ./configure --prefix='/usr' ; make ; make install\n#   Finally start the netopeer-server with debugging logs enabled\nCMD [\"/usr/bin/netopeer-server\", \"-v\", \"3\"]\n#   Expose the default netconf port\nEXPOSE 830/tcp\n","originalDockerfileUglifiedHash":"18ef86ce9435f09aad5267cf0df2faa6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6a767cf4170b86caf217860dd127f48eb1ce532a.dockerfile"}