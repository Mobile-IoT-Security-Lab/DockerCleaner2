{"seed":3779864341,"processedDockerfileHash":"fb26081274578e4df0aa81c0eae1a5d4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nRUN :\nENV TESTDIR=\"/loadgentests\"\n#   Make dir where we will put all our loadgen tools, data and dependencies\nRUN mkdir ${TESTDIR}\n#   Java8\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA1A4A13543B466853BAF164EB9B1D8886F44E2A\nRUN touch /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main \" >> /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb-src http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main\" >> /etc/apt/sources.list.d/openjdk.list\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends openjdk-8-jdk -y )\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#   C compiler, make, libssl, autoconf, etc\nRUN (apt-get update ;apt-get install --no-install-recommends gcc=4:4.8.2-1ubuntu6 libssl-dev=1.0.1f-1ubuntu2.27 autoconf=2.69-6 erlang-dev=1:16.b.3-dfsg-1ubuntu2.2 erlang-nox=1:16.b.3-dfsg-1ubuntu2.2 nodejs=0.10.25~dfsg2-2ubuntu1.2 npm=1.3.10~dfsg-1 unzip=6.0-9ubuntu1.5 wget=1.15-1ubuntu1.14.04.5 git=1:1.9.1-1ubuntu0.10 python-pip=1.5.4-1ubuntu4 python-dev=2.7.5-5ubuntu3 python-zmq=14.0.1-1build2 bc=1.06.95-8ubuntu1 bsdmainutils=9.0.5ubuntu1 jq=1.3-1.1ubuntu1.1 -y )\n#   Update nodejs\nRUN npm cache clean -f\nRUN npm install n@9.1.0 -g\nRUN n stable\n#   Symlink to nodejs\nRUN ln -s `which nodejs ` /usr/bin/node\n#   install latest Golang to ${TESTDIR}/go1.7, set GOPATH to ${TESTDIR}/go\nRUN mkdir ${TESTDIR}/go1.7 ${TESTDIR}/go\nRUN wget -O - 'https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz' | tar -C ${TESTDIR}/go1.7 -xzf -\nENV GOROOT=\"${TESTDIR}/go1.7/go\"\nENV GOPATH=\"${TESTDIR}/go\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:/usr/local/bin:${PATH}\"\n#   Create .gitconfig\nCOPY Gitconfig ${HOME}/.gitconfig\n#   Get and compile wrk \nRUN cd ${TESTDIR} \\\n && git clone 'https://github.com/wg/wrk'\nRUN cd ${TESTDIR}/wrk \\\n && make\n#   Checkout specific commit that we know runtest.sh is compatible with\n#   RUN cd ${TESTDIR}/wrk && git checkout 50305ed1d89408c26067a970dcd5d9dbea19de9d && make\n#   Get and compile boom (latest snapshot)\nRUN go get -u github.com/rakyll/boom\n#   runtest.sh works with this commit: https://github.com/rakyll/boom/commit/e99ce27f0878c1d266c8a3c266029038e78c5380\n#   Get and compile vegeta (latest snapshot)\nRUN go get -u github.com/tsenart/vegeta\n#   runtest.sh works with this commit: https://github.com/tsenart/vegeta/commit/7cff4dc0ed44f0a8b9777caf050950eb67972f43\n#   Get and compile k6 (latest snapshop)\nRUN go get -u github.com/loadimpact/k6\n#   Install Apachebench (>=2.3)\n#  RUN apt-get -y install apache2-utils\n#   How install specific version of ab?\n#   Get and compile Siege (latest snapshot)\nRUN (apt-get update ;apt-get install --no-install-recommends siege=3.0.5-1 -y )\n#  RUN cd ${TESTDIR} && git clone 'https://github.com/JoeDog/siege.git'\n#  RUN cd ${TESTDIR}/siege && checkout xxxxxxxxxxx && autoconf && ./configure && make install\n#   Install Tsung (1.6.0)\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://tsung.erlang-projects.org/dist/tsung-1.6.0.tar.gz' | tar -xzf -\nRUN cd ${TESTDIR}/tsung-1.6.0 \\\n && ./configure \\\n && make install\n#   Install Locust (>=0.7.5)\nRUN pip install locustio==0.999\n#   RUN cd ${TESTDIR} && git clone 'https://github.com/locustio/locust'\n#   RUN cd ${TESTDIR}/locust && checkout 16140b0680cd7ab5d580aa2a1578a6349f988876 && python setup.py\n#   Gatling 2.2.2\nRUN cd ${TESTDIR} \\\n && wget 'https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.2.2/gatling-charts-highcharts-bundle-2.2.2-bundle.zip' \\\n && unzip gatling-charts-highcharts-bundle-2.2.2-bundle.zip \\\n && rm gatling-charts-highcharts-bundle-2.2.2-bundle.zip\n#   Jmeter 3.2\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://apache.mirrors.spacedump.net//jmeter/binaries/apache-jmeter-3.2.tgz' | tar -zxf -\n#   Grinder 3.11\nRUN cd ${TESTDIR} \\\n && wget 'http://downloads.sourceforge.net/project/grinder/The%20Grinder%203/3.11/grinder-3.11-binary.zip' \\\n && unzip grinder-3.11-binary.zip \\\n && rm grinder-3.11-binary.zip\n#   Artillery (>=1.5.0-12)\nRUN npm install artillery@2.0.0-31 -g\n#   git clone 'https://github.com/shoreditch-ops/artillery' && git checkout ... && ...\nCOPY runtests.sh ${TESTDIR}\nRUN chmod 755 ${TESTDIR}/runtests.sh\nRUN mkdir ${TESTDIR}/configs\nCOPY configs/tsung.xml ${TESTDIR}/configs\nCOPY configs/jmeter.xml ${TESTDIR}/configs\nCOPY configs/artillery.json ${TESTDIR}/configs\nCOPY configs/gatling.scala ${TESTDIR}/configs\nCOPY configs/grinder.py ${TESTDIR}/configs\nCOPY configs/grinder.properties ${TESTDIR}/configs\nCOPY configs/locust.py ${TESTDIR}/configs\nCOPY configs/wrk.lua ${TESTDIR}/configs\nCOPY configs/k6.js ${TESTDIR}/configs\nCMD ${TESTDIR}/runtests.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nRUN apt-get update\nENV TESTDIR=\"/loadgentests\"\n#  Make dir where we will put all our loadgen tools, data and dependencies\nRUN mkdir ${TESTDIR}\n#  Java8\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA1A4A13543B466853BAF164EB9B1D8886F44E2A\nRUN touch /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main \" >> /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb-src http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main\" >> /etc/apt/sources.list.d/openjdk.list\nRUN apt-get update\nRUN apt-get install openjdk-8-jdk -y\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#  C compiler, make, libssl, autoconf, etc\nRUN apt-get install gcc libssl-dev autoconf erlang-dev erlang-nox nodejs npm unzip wget git python-pip python-dev python-zmq bc bsdmainutils jq -y\n#  Update nodejs\nRUN npm cache clean -f\nRUN npm install n -g\nRUN n stable\n#  Symlink to nodejs\nRUN ln -s `which nodejs ` /usr/bin/node\n#  install latest Golang to ${TESTDIR}/go1.7, set GOPATH to ${TESTDIR}/go\nRUN mkdir ${TESTDIR}/go1.7 ${TESTDIR}/go\nRUN wget -O - 'https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz' | tar -C ${TESTDIR}/go1.7 -xzf -\nENV GOROOT=\"${TESTDIR}/go1.7/go\"\nENV GOPATH=\"${TESTDIR}/go\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:/usr/local/bin:${PATH}\"\n#  Create .gitconfig\nCOPY Gitconfig ${HOME}/.gitconfig\n#  Get and compile wrk \nRUN cd ${TESTDIR} \\\n && git clone 'https://github.com/wg/wrk'\nRUN cd ${TESTDIR}/wrk \\\n && make\n#  Checkout specific commit that we know runtest.sh is compatible with\n#  RUN cd ${TESTDIR}/wrk && git checkout 50305ed1d89408c26067a970dcd5d9dbea19de9d && make\n#  Get and compile boom (latest snapshot)\nRUN go get -u github.com/rakyll/boom\n#  runtest.sh works with this commit: https://github.com/rakyll/boom/commit/e99ce27f0878c1d266c8a3c266029038e78c5380\n#  Get and compile vegeta (latest snapshot)\nRUN go get -u github.com/tsenart/vegeta\n#  runtest.sh works with this commit: https://github.com/tsenart/vegeta/commit/7cff4dc0ed44f0a8b9777caf050950eb67972f43\n#  Get and compile k6 (latest snapshop)\nRUN go get -u github.com/loadimpact/k6\n#  Install Apachebench (>=2.3)\n# RUN apt-get -y install apache2-utils\n#  How install specific version of ab?\n#  Get and compile Siege (latest snapshot)\nRUN apt-get install siege -y\n# RUN cd ${TESTDIR} && git clone 'https://github.com/JoeDog/siege.git'\n# RUN cd ${TESTDIR}/siege && checkout xxxxxxxxxxx && autoconf && ./configure && make install\n#  Install Tsung (1.6.0)\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://tsung.erlang-projects.org/dist/tsung-1.6.0.tar.gz' | tar -xzf -\nRUN cd ${TESTDIR}/tsung-1.6.0 \\\n && ./configure \\\n && make install\n#  Install Locust (>=0.7.5)\nRUN pip install locustio\n#  RUN cd ${TESTDIR} && git clone 'https://github.com/locustio/locust'\n#  RUN cd ${TESTDIR}/locust && checkout 16140b0680cd7ab5d580aa2a1578a6349f988876 && python setup.py\n#  Gatling 2.2.2\nRUN cd ${TESTDIR} \\\n && wget 'https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.2.2/gatling-charts-highcharts-bundle-2.2.2-bundle.zip' \\\n && unzip gatling-charts-highcharts-bundle-2.2.2-bundle.zip \\\n && rm gatling-charts-highcharts-bundle-2.2.2-bundle.zip\n#  Jmeter 3.2\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://apache.mirrors.spacedump.net//jmeter/binaries/apache-jmeter-3.2.tgz' | tar -zxf -\n#  Grinder 3.11\nRUN cd ${TESTDIR} \\\n && wget 'http://downloads.sourceforge.net/project/grinder/The%20Grinder%203/3.11/grinder-3.11-binary.zip' \\\n && unzip grinder-3.11-binary.zip \\\n && rm grinder-3.11-binary.zip\n#  Artillery (>=1.5.0-12)\nRUN npm install artillery -g\n#  git clone 'https://github.com/shoreditch-ops/artillery' && git checkout ... && ...\nCOPY runtests.sh ${TESTDIR}\nRUN chmod 755 ${TESTDIR}/runtests.sh\nRUN mkdir ${TESTDIR}/configs\nCOPY configs/tsung.xml ${TESTDIR}/configs\nCOPY configs/jmeter.xml ${TESTDIR}/configs\nCOPY configs/artillery.json ${TESTDIR}/configs\nCOPY configs/gatling.scala ${TESTDIR}/configs\nCOPY configs/grinder.py ${TESTDIR}/configs\nCOPY configs/grinder.properties ${TESTDIR}/configs\nCOPY configs/locust.py ${TESTDIR}/configs\nCOPY configs/wrk.lua ${TESTDIR}/configs\nCOPY configs/k6.js ${TESTDIR}/configs\nCMD ${TESTDIR}/runtests.sh\n","injectedSmells":[],"originalDockerfileHash":"87c5e1eea742f73a6beb3ad5e14c2715","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nRUN apt-get update\nENV TESTDIR=\"/loadgentests\"\n#   Make dir where we will put all our loadgen tools, data and dependencies\nRUN mkdir ${TESTDIR}\n#   Java8\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA1A4A13543B466853BAF164EB9B1D8886F44E2A\nRUN touch /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main \" >> /etc/apt/sources.list.d/openjdk.list\nRUN echo \"deb-src http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty main\" >> /etc/apt/sources.list.d/openjdk.list\nRUN apt-get update\nRUN apt-get install openjdk-8-jdk -y\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n#   C compiler, make, libssl, autoconf, etc\nRUN apt-get install gcc libssl-dev autoconf erlang-dev erlang-nox nodejs npm unzip wget git python-pip python-dev python-zmq bc bsdmainutils jq -y\n#   Update nodejs\nRUN npm cache clean -f\nRUN npm install n -g\nRUN n stable\n#   Symlink to nodejs\nRUN ln -s `which nodejs ` /usr/bin/node\n#   install latest Golang to ${TESTDIR}/go1.7, set GOPATH to ${TESTDIR}/go\nRUN mkdir ${TESTDIR}/go1.7 ${TESTDIR}/go\nRUN wget -O - 'https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz' | tar -C ${TESTDIR}/go1.7 -xzf -\nENV GOROOT=\"${TESTDIR}/go1.7/go\"\nENV GOPATH=\"${TESTDIR}/go\"\nENV PATH=\"${GOPATH}/bin:${GOROOT}/bin:/usr/local/bin:${PATH}\"\n#   Create .gitconfig\nCOPY Gitconfig ${HOME}/.gitconfig\n#   Get and compile wrk \nRUN cd ${TESTDIR} \\\n && git clone 'https://github.com/wg/wrk'\nRUN cd ${TESTDIR}/wrk \\\n && make\n#   Checkout specific commit that we know runtest.sh is compatible with\n#   RUN cd ${TESTDIR}/wrk && git checkout 50305ed1d89408c26067a970dcd5d9dbea19de9d && make\n#   Get and compile boom (latest snapshot)\nRUN go get -u github.com/rakyll/boom\n#   runtest.sh works with this commit: https://github.com/rakyll/boom/commit/e99ce27f0878c1d266c8a3c266029038e78c5380\n#   Get and compile vegeta (latest snapshot)\nRUN go get -u github.com/tsenart/vegeta\n#   runtest.sh works with this commit: https://github.com/tsenart/vegeta/commit/7cff4dc0ed44f0a8b9777caf050950eb67972f43\n#   Get and compile k6 (latest snapshop)\nRUN go get -u github.com/loadimpact/k6\n#   Install Apachebench (>=2.3)\n#  RUN apt-get -y install apache2-utils\n#   How install specific version of ab?\n#   Get and compile Siege (latest snapshot)\nRUN apt-get install siege -y\n#  RUN cd ${TESTDIR} && git clone 'https://github.com/JoeDog/siege.git'\n#  RUN cd ${TESTDIR}/siege && checkout xxxxxxxxxxx && autoconf && ./configure && make install\n#   Install Tsung (1.6.0)\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://tsung.erlang-projects.org/dist/tsung-1.6.0.tar.gz' | tar -xzf -\nRUN cd ${TESTDIR}/tsung-1.6.0 \\\n && ./configure \\\n && make install\n#   Install Locust (>=0.7.5)\nRUN pip install locustio\n#   RUN cd ${TESTDIR} && git clone 'https://github.com/locustio/locust'\n#   RUN cd ${TESTDIR}/locust && checkout 16140b0680cd7ab5d580aa2a1578a6349f988876 && python setup.py\n#   Gatling 2.2.2\nRUN cd ${TESTDIR} \\\n && wget 'https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.2.2/gatling-charts-highcharts-bundle-2.2.2-bundle.zip' \\\n && unzip gatling-charts-highcharts-bundle-2.2.2-bundle.zip \\\n && rm gatling-charts-highcharts-bundle-2.2.2-bundle.zip\n#   Jmeter 3.2\nRUN cd ${TESTDIR} \\\n && wget -O - 'http://apache.mirrors.spacedump.net//jmeter/binaries/apache-jmeter-3.2.tgz' | tar -zxf -\n#   Grinder 3.11\nRUN cd ${TESTDIR} \\\n && wget 'http://downloads.sourceforge.net/project/grinder/The%20Grinder%203/3.11/grinder-3.11-binary.zip' \\\n && unzip grinder-3.11-binary.zip \\\n && rm grinder-3.11-binary.zip\n#   Artillery (>=1.5.0-12)\nRUN npm install artillery -g\n#   git clone 'https://github.com/shoreditch-ops/artillery' && git checkout ... && ...\nCOPY runtests.sh ${TESTDIR}\nRUN chmod 755 ${TESTDIR}/runtests.sh\nRUN mkdir ${TESTDIR}/configs\nCOPY configs/tsung.xml ${TESTDIR}/configs\nCOPY configs/jmeter.xml ${TESTDIR}/configs\nCOPY configs/artillery.json ${TESTDIR}/configs\nCOPY configs/gatling.scala ${TESTDIR}/configs\nCOPY configs/grinder.py ${TESTDIR}/configs\nCOPY configs/grinder.properties ${TESTDIR}/configs\nCOPY configs/locust.py ${TESTDIR}/configs\nCOPY configs/wrk.lua ${TESTDIR}/configs\nCOPY configs/k6.js ${TESTDIR}/configs\nCMD ${TESTDIR}/runtests.sh\n","originalDockerfileUglifiedHash":"e98ed0a02f8ac3b37543a9c4bf852be6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f5565ffdf9545f506db5ae4af092a4ddd95a2915.dockerfile"}