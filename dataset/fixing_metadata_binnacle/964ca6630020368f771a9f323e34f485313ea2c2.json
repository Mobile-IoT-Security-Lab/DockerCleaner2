{"seed":1051153809,"processedDockerfileHash":"36fbc0976b7c3cfa5afcda3cee9ca757","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"#  //----------------------------------------------------------------------------\n#  // KUSANAGI RoD (kusanagi-nginx)\n#  //----------------------------------------------------------------------------\nFROM alpine:3.10\nMAINTAINER kusanagi@prime-strategy.co.jp\nENV PATH=\"/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin\"\n#   add user\nRUN : \\\n && apk update \\\n && apk upgrade \\\n && apk add shadow=4.6-r2 --no-cache --virtual .user \\\n && groupadd -g 1001 www \\\n && useradd -d /var/lib/www -s /bin/nologin -g www -M -u 1001 httpd \\\n && groupadd -g 1000 kusanagi \\\n && useradd -d /home/kusanagi -s /bin/nologin -g kusanagi -G www -u 1000 -m kusanagi \\\n && chmod 755 /home/kusanagi \\\n && apk del --purge .user \\\n && mkdir /tmp/build \\\n && :\nCOPY files/fast_cgiparams_CVE-2016-5387.patch /tmp/build\nCOPY files/add_dev.sh /usr/local/bin\nCOPY files/del_dev.sh /usr/local/bin\nENV NGINX_VERSION=\"1.16.0\"\nENV NGINX_DEPS=\"gnupg1  gcc  g++  make   autoconf  automake  patch  ruby-rake  curl  curl-dev  musl-dev  perl-dev  libxslt-dev  openssl-dev  linux-headers  luajit-dev  libpng-dev  freetype-dev  libxpm-dev  expat-dev  tiff-dev  libxcb-dev  lua-dev  pcre-dev  geoip-dev  gd-dev  ruby-etc  ruby-dev  libxpm-dev  fontconfig-dev  libuuid  util-linux-dev  zlib-dev  go  gnupg  gettext\"\n#   prep\nRUN : \\\n && nginx_ct_version=1.3.2 \\\n && ngx_cache_purge_version=2.3 \\\n && ngx_brotli_version=master \\\n && naxsi_version=0.56 \\\n && nps_version=1.13.35.2 \\\n && GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && brotli_version=222564a95d9ab58865a096b8d9f7324ea5f2e03e \\\n && naxsi_tarball_name=naxsi \\\n && lua_nginx_module_name=lua-nginx-module \\\n && ngx_devel_kit_version=0.3.0 \\\n && LUAJIT_VERSION=2.1.0-beta3 \\\n && LUA_VERSION=2.1 \\\n && lua_nginx_module_version=0.10.13 \\\n && CT_SUBMIT_VERSION=1.1.2 \\\n && LUAJIT_LIB=/usr/lib \\\n && LUAJIT_INC=/usr/include/luajit-$LUA_VERSION \\\n && CC=/usr/bin/cc \\\n && CXX=/usr/bin/c++ \\\n && apk add $NGINX_DEPS --no-cache --virtual .builddep \\\n && cd /tmp/build \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in keys.gnupg.net ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && tar xf nginx.tar.gz \\\n && mkdir nginx-${NGINX_VERSION}/extensions \\\n && cd ./nginx-${NGINX_VERSION}/extensions \\\n && curl -Lo nginx-ct-${nginx_ct_version}.tar.gz https://github.com/grahamedgecombe/nginx-ct/archive/v${nginx_ct_version}.tar.gz \\\n && curl -Lo ngx_cache_purge-${ngx_cache_purge_version}.tar.gz https://github.com/FRiCKLE/ngx_cache_purge/archive/${ngx_cache_purge_version}.tar.gz \\\n && curl -Lo ngx_brotli-${ngx_brotli_version}.tar.gz https://github.com/google/ngx_brotli/archive/${ngx_brotli_version}.tar.gz \\\n && curl -Lo brotli-${brotli_version}.tar.gz https://github.com/google/brotli/archive/${brotli_version}.tar.gz \\\n && curl -Lo ngx_devel_kit-${ngx_devel_kit_version}.tar.gz https://github.com/simplresty/ngx_devel_kit/archive/v${ngx_devel_kit_version}.tar.gz \\\n && curl -Lo ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz https://github.com/openresty/${lua_nginx_module_name}/archive/v${lua_nginx_module_version}.tar.gz \\\n && curl -Lo ${naxsi_tarball_name}-${naxsi_version}.tar.gz https://github.com/nbs-system/naxsi/archive/${naxsi_version}.tar.gz \\\n && tar xf nginx-ct-${nginx_ct_version}.tar.gz \\\n && mv nginx-ct-${nginx_ct_version} nginx-ct \\\n && tar xf ngx_cache_purge-${ngx_cache_purge_version}.tar.gz \\\n && mv ngx_cache_purge-${ngx_cache_purge_version} ngx_cache_purge \\\n && tar xf ngx_brotli-${ngx_brotli_version}.tar.gz \\\n && mv ngx_brotli-${ngx_brotli_version} ngx_brotli \\\n && tar xf ngx_devel_kit-${ngx_devel_kit_version}.tar.gz \\\n && mv ngx_devel_kit-${ngx_devel_kit_version} ngx_devel_kit \\\n && tar xf ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz \\\n && mv ${lua_nginx_module_name}-${lua_nginx_module_version} ${lua_nginx_module_name} \\\n && tar xf ${naxsi_tarball_name}-${naxsi_version}.tar.gz \\\n && mv ${naxsi_tarball_name}-${naxsi_version} ${naxsi_tarball_name} \\\n && tar xf brotli-${brotli_version}.tar.gz \\\n && (test -d ngx_brotli/deps/brotli \\\n && rmdir ngx_brotli/deps/brotli ) \\\n && mv brotli-${brotli_version} ngx_brotli/deps/brotli \\\n && cd .. \\\n && patch -p1 < ../fast_cgiparams_CVE-2016-5387.patch \\\n && cd /tmp/build/nginx-${NGINX_VERSION} \\\n && CONF=\" --prefix=/etc/nginx --conf-path=/etc/nginx/nginx.conf --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --error-log-path=/dev/stderr --http-log-path=dev/stdout --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=httpd --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-http_image_filter_module --with-http_geoip_module --with-http_perl_module --add-module=./extensions/ngx_devel_kit --add-module=./extensions/${lua_nginx_module_name} --add-module=./extensions/ngx_cache_purge --add-module=./extensions/nginx-ct --add-module=./extensions/ngx_brotli --add-module=./extensions/${naxsi_tarball_name}/naxsi_src \" \\\n && CFLAGS='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector -m64 -mtune=generic -Wno-deprecated-declarations -Wno-cast-function-type -Wno-unused-parameter -Wno-stringop-truncation -Wno-stringop-overflow' \\\n && ./configure $CONF --with-cc-opt=\"$CFLAGS\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && (find . -type f -a -name 'nginx' -o -name '*.so*' | xargs strip ;true ) \\\n && (find . -type f -a -name '*.so*' | xargs chmod 755 ;true ) \\\n && make install \\\n && mkdir -p /usr/lib/nginx/modules /etc/nginx/naxsi.d \\\n && install -m644 extensions/${naxsi_tarball_name}/naxsi_config/naxsi_core.rules /etc/nginx/naxsi.d/naxsi_core.rules.conf \\\n && (for so in `find extensions -type f -name '*.so' `; do mv $so /usr/lib/nginx/modules ; done ;true ) \\\n && mv /usr/bin/envsubst /tmp/ \\\n && curl -LO https://raw.githubusercontent.com/grahamedgecombe/ct-submit/v${CT_SUBMIT_VERSION}/ct-submit.go \\\n && go build ct-submit.go \\\n && cp ct-submit /tmp \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst /tmp/ct-submit | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del --purge .builddep \\\n && mv /tmp/envsubst /usr/bin/envsubst \\\n && mv /tmp/ct-submit /usr/bin/ct-submit \\\n && chmod 700 /usr/bin/ct-submit \\\n && mkdir -p -m755 /var/www/html /etc/nginx/conf.d /var/cache/nginx /var/log/nginx \\\n && chown -R httpd:www /etc/nginx /var/www/html /var/cache/nginx /var/log/nginx /etc/hosts \\\n && install -m644 /etc/nginx/html/50x.html /var/www/html \\\n && install -m644 /etc/nginx/html/index.html /var/www/html \\\n && mkdir -p -m755 /etc/nginx/scts /etc/nginx/naxsi.d /etc/nginx/conf.d/templates \\\n && rm -rf /tmp/build \\\n && :\nCOPY files/nginx.conf /etc/nginx/nginx.conf\nCOPY files/nginx_httpd.conf /etc/nginx/conf.d/_nginx.conf\nCOPY files/nginx_ssl.conf /etc/nginx/conf.d/_ssl.conf\nCOPY files/kusanagi_naxsi_core.conf /etc/nginx/conf.d/kusanagi_naxsi_core.conf\nCOPY files/naxsi.d/ /etc/nginx/naxsi.d/\nCOPY files/templates/ /etc/nginx/conf.d/\nCOPY files/security.conf /etc/nginx/conf.d/security.conf\nCOPY files/ct-submit.sh /usr/bin/ct-submit.sh\n#   forward request and error logs to docker log collector\nRUN cd /etc/nginx/ \\\n && chmod 700 /usr/bin/ct-submit.sh \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && apk add tzdata=2021a-r0 openssl=1.1.1k-r0 certbot=0.35.1-r0 --no-cache \\\n && mkdir /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && chown -R httpd:www /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && :\nARG MICROSCANNER_TOKEN\nRUN if [ x${MICROSCANNER_TOKEN} != x ] ; then apk add ca-certificates=20191127-r2 --no-cache --virtual .ca \\\n && update-ca-certificates \\\n && wget --no-check-certificate https://get.aquasec.com/microscanner \\\n && chmod +x microscanner \\\n && ./microscanner ${MICROSCANNER_TOKEN} || exit 1 \\\n && rm ./microscanner \\\n && apk del --purge .ca ; fi\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nVOLUME /home/kusanagi\nVOLUME /etc/letsencrypt\nUSER httpd\nCOPY files/docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# //----------------------------------------------------------------------------\n# // KUSANAGI RoD (kusanagi-nginx)\n# //----------------------------------------------------------------------------\nFROM alpine:3.10\nMAINTAINER kusanagi@prime-strategy.co.jp\nENV PATH=\"/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin\"\n#  add user\nRUN : \\\n && apk update \\\n && apk upgrade \\\n && apk add --no-cache --virtual .user shadow \\\n && groupadd -g 1001 www \\\n && useradd -d /var/lib/www -s /bin/nologin -g www -M -u 1001 httpd \\\n && groupadd -g 1000 kusanagi \\\n && useradd -d /home/kusanagi -s /bin/nologin -g kusanagi -G www -u 1000 -m kusanagi \\\n && chmod 755 /home/kusanagi \\\n && apk del --purge .user \\\n && mkdir /tmp/build \\\n && :\nCOPY files/fast_cgiparams_CVE-2016-5387.patch /tmp/build\nCOPY files/add_dev.sh /usr/local/bin\nCOPY files/del_dev.sh /usr/local/bin\nENV NGINX_VERSION=\"1.16.0\"\nENV NGINX_DEPS=\"gnupg1  gcc  g++  make   autoconf  automake  patch  ruby-rake  curl  curl-dev  musl-dev  perl-dev  libxslt-dev  openssl-dev  linux-headers  luajit-dev  libpng-dev  freetype-dev  libxpm-dev  expat-dev  tiff-dev  libxcb-dev  lua-dev  pcre-dev  geoip-dev  gd-dev  ruby-etc  ruby-dev  libxpm-dev  fontconfig-dev  libuuid  util-linux-dev  zlib-dev  go  gnupg  gettext\"\n#  prep\nRUN : \\\n && nginx_ct_version=1.3.2 \\\n && ngx_cache_purge_version=2.3 \\\n && ngx_brotli_version=master \\\n && naxsi_version=0.56 \\\n && nps_version=1.13.35.2 \\\n && GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && brotli_version=222564a95d9ab58865a096b8d9f7324ea5f2e03e \\\n && naxsi_tarball_name=naxsi \\\n && lua_nginx_module_name=lua-nginx-module \\\n && ngx_devel_kit_version=0.3.0 \\\n && LUAJIT_VERSION=2.1.0-beta3 \\\n && LUA_VERSION=2.1 \\\n && lua_nginx_module_version=0.10.13 \\\n && CT_SUBMIT_VERSION=1.1.2 \\\n && LUAJIT_LIB=/usr/lib \\\n && LUAJIT_INC=/usr/include/luajit-$LUA_VERSION \\\n && CC=/usr/bin/cc \\\n && CXX=/usr/bin/c++ \\\n && apk add --no-cache --virtual .builddep $NGINX_DEPS \\\n && cd /tmp/build \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in keys.gnupg.net ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && tar xf nginx.tar.gz \\\n && mkdir nginx-${NGINX_VERSION}/extensions \\\n && cd ./nginx-${NGINX_VERSION}/extensions \\\n && curl -Lo nginx-ct-${nginx_ct_version}.tar.gz https://github.com/grahamedgecombe/nginx-ct/archive/v${nginx_ct_version}.tar.gz \\\n && curl -Lo ngx_cache_purge-${ngx_cache_purge_version}.tar.gz https://github.com/FRiCKLE/ngx_cache_purge/archive/${ngx_cache_purge_version}.tar.gz \\\n && curl -Lo ngx_brotli-${ngx_brotli_version}.tar.gz https://github.com/google/ngx_brotli/archive/${ngx_brotli_version}.tar.gz \\\n && curl -Lo brotli-${brotli_version}.tar.gz https://github.com/google/brotli/archive/${brotli_version}.tar.gz \\\n && curl -Lo ngx_devel_kit-${ngx_devel_kit_version}.tar.gz https://github.com/simplresty/ngx_devel_kit/archive/v${ngx_devel_kit_version}.tar.gz \\\n && curl -Lo ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz https://github.com/openresty/${lua_nginx_module_name}/archive/v${lua_nginx_module_version}.tar.gz \\\n && curl -Lo ${naxsi_tarball_name}-${naxsi_version}.tar.gz https://github.com/nbs-system/naxsi/archive/${naxsi_version}.tar.gz \\\n && tar xf nginx-ct-${nginx_ct_version}.tar.gz \\\n && mv nginx-ct-${nginx_ct_version} nginx-ct \\\n && tar xf ngx_cache_purge-${ngx_cache_purge_version}.tar.gz \\\n && mv ngx_cache_purge-${ngx_cache_purge_version} ngx_cache_purge \\\n && tar xf ngx_brotli-${ngx_brotli_version}.tar.gz \\\n && mv ngx_brotli-${ngx_brotli_version} ngx_brotli \\\n && tar xf ngx_devel_kit-${ngx_devel_kit_version}.tar.gz \\\n && mv ngx_devel_kit-${ngx_devel_kit_version} ngx_devel_kit \\\n && tar xf ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz \\\n && mv ${lua_nginx_module_name}-${lua_nginx_module_version} ${lua_nginx_module_name} \\\n && tar xf ${naxsi_tarball_name}-${naxsi_version}.tar.gz \\\n && mv ${naxsi_tarball_name}-${naxsi_version} ${naxsi_tarball_name} \\\n && tar xf brotli-${brotli_version}.tar.gz \\\n && (test -d ngx_brotli/deps/brotli \\\n && rmdir ngx_brotli/deps/brotli ) \\\n && mv brotli-${brotli_version} ngx_brotli/deps/brotli \\\n && cd .. \\\n && patch -p1 < ../fast_cgiparams_CVE-2016-5387.patch \\\n && cd /tmp/build/nginx-${NGINX_VERSION} \\\n && CONF=\" --prefix=/etc/nginx --conf-path=/etc/nginx/nginx.conf --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --error-log-path=/dev/stderr --http-log-path=dev/stdout --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=httpd --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-http_image_filter_module --with-http_geoip_module --with-http_perl_module --add-module=./extensions/ngx_devel_kit --add-module=./extensions/${lua_nginx_module_name} --add-module=./extensions/ngx_cache_purge --add-module=./extensions/nginx-ct --add-module=./extensions/ngx_brotli --add-module=./extensions/${naxsi_tarball_name}/naxsi_src \" \\\n && CFLAGS='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector -m64 -mtune=generic -Wno-deprecated-declarations -Wno-cast-function-type -Wno-unused-parameter -Wno-stringop-truncation -Wno-stringop-overflow' \\\n && ./configure $CONF --with-cc-opt=\"$CFLAGS\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && (find . -type f -a -name 'nginx' -o -name '*.so*' | xargs strip ;true ) \\\n && (find . -type f -a -name '*.so*' | xargs chmod 755 ;true ) \\\n && make install \\\n && mkdir -p /usr/lib/nginx/modules /etc/nginx/naxsi.d \\\n && install -m644 extensions/${naxsi_tarball_name}/naxsi_config/naxsi_core.rules /etc/nginx/naxsi.d/naxsi_core.rules.conf \\\n && (for so in `find extensions -type f -name '*.so' `; do mv $so /usr/lib/nginx/modules ; done ;true ) \\\n && mv /usr/bin/envsubst /tmp/ \\\n && curl -LO https://raw.githubusercontent.com/grahamedgecombe/ct-submit/v${CT_SUBMIT_VERSION}/ct-submit.go \\\n && go build ct-submit.go \\\n && cp ct-submit /tmp \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst /tmp/ct-submit | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del --purge .builddep \\\n && mv /tmp/envsubst /usr/bin/envsubst \\\n && mv /tmp/ct-submit /usr/bin/ct-submit \\\n && chmod 700 /usr/bin/ct-submit \\\n && mkdir -p -m755 /var/www/html /etc/nginx/conf.d /var/cache/nginx /var/log/nginx \\\n && chown -R httpd:www /etc/nginx /var/www/html /var/cache/nginx /var/log/nginx /etc/hosts \\\n && install -m644 /etc/nginx/html/50x.html /var/www/html \\\n && install -m644 /etc/nginx/html/index.html /var/www/html \\\n && mkdir -p -m755 /etc/nginx/scts /etc/nginx/naxsi.d /etc/nginx/conf.d/templates \\\n && rm -rf /tmp/build \\\n && :\nCOPY files/nginx.conf /etc/nginx/nginx.conf\nCOPY files/nginx_httpd.conf /etc/nginx/conf.d/_nginx.conf\nCOPY files/nginx_ssl.conf /etc/nginx/conf.d/_ssl.conf\nCOPY files/kusanagi_naxsi_core.conf /etc/nginx/conf.d/kusanagi_naxsi_core.conf\nCOPY files/naxsi.d/ /etc/nginx/naxsi.d/\nCOPY files/templates/ /etc/nginx/conf.d/\nCOPY files/security.conf /etc/nginx/conf.d/security.conf\nCOPY files/ct-submit.sh /usr/bin/ct-submit.sh\n#  forward request and error logs to docker log collector\nRUN cd /etc/nginx/ \\\n && chmod 700 /usr/bin/ct-submit.sh \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && apk add --no-cache tzdata openssl certbot \\\n && mkdir /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && chown -R httpd:www /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && :\nARG MICROSCANNER_TOKEN\nRUN if [ x${MICROSCANNER_TOKEN} != x ] ; then apk add --no-cache --virtual .ca ca-certificates \\\n && update-ca-certificates \\\n && wget --no-check-certificate https://get.aquasec.com/microscanner \\\n && chmod +x microscanner \\\n && ./microscanner ${MICROSCANNER_TOKEN} || exit 1 \\\n && rm ./microscanner \\\n && apk del --purge .ca ; fi\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nVOLUME /home/kusanagi\nVOLUME /etc/letsencrypt\nUSER httpd\nCOPY files/docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"5090941711f0c236e2047aee3ea75591","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  //----------------------------------------------------------------------------\n#  // KUSANAGI RoD (kusanagi-nginx)\n#  //----------------------------------------------------------------------------\nFROM alpine:3.10\nMAINTAINER kusanagi@prime-strategy.co.jp\nENV PATH=\"/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin\"\n#   add user\nRUN : \\\n && apk update \\\n && apk upgrade \\\n && apk add --no-cache --virtual .user shadow \\\n && groupadd -g 1001 www \\\n && useradd -d /var/lib/www -s /bin/nologin -g www -M -u 1001 httpd \\\n && groupadd -g 1000 kusanagi \\\n && useradd -d /home/kusanagi -s /bin/nologin -g kusanagi -G www -u 1000 -m kusanagi \\\n && chmod 755 /home/kusanagi \\\n && apk del --purge .user \\\n && mkdir /tmp/build \\\n && :\nCOPY files/fast_cgiparams_CVE-2016-5387.patch /tmp/build\nCOPY files/add_dev.sh /usr/local/bin\nCOPY files/del_dev.sh /usr/local/bin\nENV NGINX_VERSION=\"1.16.0\"\nENV NGINX_DEPS=\"gnupg1  gcc  g++  make   autoconf  automake  patch  ruby-rake  curl  curl-dev  musl-dev  perl-dev  libxslt-dev  openssl-dev  linux-headers  luajit-dev  libpng-dev  freetype-dev  libxpm-dev  expat-dev  tiff-dev  libxcb-dev  lua-dev  pcre-dev  geoip-dev  gd-dev  ruby-etc  ruby-dev  libxpm-dev  fontconfig-dev  libuuid  util-linux-dev  zlib-dev  go  gnupg  gettext\"\n#   prep\nRUN : \\\n && nginx_ct_version=1.3.2 \\\n && ngx_cache_purge_version=2.3 \\\n && ngx_brotli_version=master \\\n && naxsi_version=0.56 \\\n && nps_version=1.13.35.2 \\\n && GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && brotli_version=222564a95d9ab58865a096b8d9f7324ea5f2e03e \\\n && naxsi_tarball_name=naxsi \\\n && lua_nginx_module_name=lua-nginx-module \\\n && ngx_devel_kit_version=0.3.0 \\\n && LUAJIT_VERSION=2.1.0-beta3 \\\n && LUA_VERSION=2.1 \\\n && lua_nginx_module_version=0.10.13 \\\n && CT_SUBMIT_VERSION=1.1.2 \\\n && LUAJIT_LIB=/usr/lib \\\n && LUAJIT_INC=/usr/include/luajit-$LUA_VERSION \\\n && CC=/usr/bin/cc \\\n && CXX=/usr/bin/c++ \\\n && apk add --no-cache --virtual .builddep $NGINX_DEPS \\\n && cd /tmp/build \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in keys.gnupg.net ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && tar xf nginx.tar.gz \\\n && mkdir nginx-${NGINX_VERSION}/extensions \\\n && cd ./nginx-${NGINX_VERSION}/extensions \\\n && curl -Lo nginx-ct-${nginx_ct_version}.tar.gz https://github.com/grahamedgecombe/nginx-ct/archive/v${nginx_ct_version}.tar.gz \\\n && curl -Lo ngx_cache_purge-${ngx_cache_purge_version}.tar.gz https://github.com/FRiCKLE/ngx_cache_purge/archive/${ngx_cache_purge_version}.tar.gz \\\n && curl -Lo ngx_brotli-${ngx_brotli_version}.tar.gz https://github.com/google/ngx_brotli/archive/${ngx_brotli_version}.tar.gz \\\n && curl -Lo brotli-${brotli_version}.tar.gz https://github.com/google/brotli/archive/${brotli_version}.tar.gz \\\n && curl -Lo ngx_devel_kit-${ngx_devel_kit_version}.tar.gz https://github.com/simplresty/ngx_devel_kit/archive/v${ngx_devel_kit_version}.tar.gz \\\n && curl -Lo ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz https://github.com/openresty/${lua_nginx_module_name}/archive/v${lua_nginx_module_version}.tar.gz \\\n && curl -Lo ${naxsi_tarball_name}-${naxsi_version}.tar.gz https://github.com/nbs-system/naxsi/archive/${naxsi_version}.tar.gz \\\n && tar xf nginx-ct-${nginx_ct_version}.tar.gz \\\n && mv nginx-ct-${nginx_ct_version} nginx-ct \\\n && tar xf ngx_cache_purge-${ngx_cache_purge_version}.tar.gz \\\n && mv ngx_cache_purge-${ngx_cache_purge_version} ngx_cache_purge \\\n && tar xf ngx_brotli-${ngx_brotli_version}.tar.gz \\\n && mv ngx_brotli-${ngx_brotli_version} ngx_brotli \\\n && tar xf ngx_devel_kit-${ngx_devel_kit_version}.tar.gz \\\n && mv ngx_devel_kit-${ngx_devel_kit_version} ngx_devel_kit \\\n && tar xf ${lua_nginx_module_name}-${lua_nginx_module_version}.tar.gz \\\n && mv ${lua_nginx_module_name}-${lua_nginx_module_version} ${lua_nginx_module_name} \\\n && tar xf ${naxsi_tarball_name}-${naxsi_version}.tar.gz \\\n && mv ${naxsi_tarball_name}-${naxsi_version} ${naxsi_tarball_name} \\\n && tar xf brotli-${brotli_version}.tar.gz \\\n && (test -d ngx_brotli/deps/brotli \\\n && rmdir ngx_brotli/deps/brotli ) \\\n && mv brotli-${brotli_version} ngx_brotli/deps/brotli \\\n && cd .. \\\n && patch -p1 < ../fast_cgiparams_CVE-2016-5387.patch \\\n && cd /tmp/build/nginx-${NGINX_VERSION} \\\n && CONF=\" --prefix=/etc/nginx --conf-path=/etc/nginx/nginx.conf --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --error-log-path=/dev/stderr --http-log-path=dev/stdout --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=httpd --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-http_image_filter_module --with-http_geoip_module --with-http_perl_module --add-module=./extensions/ngx_devel_kit --add-module=./extensions/${lua_nginx_module_name} --add-module=./extensions/ngx_cache_purge --add-module=./extensions/nginx-ct --add-module=./extensions/ngx_brotli --add-module=./extensions/${naxsi_tarball_name}/naxsi_src \" \\\n && CFLAGS='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector -m64 -mtune=generic -Wno-deprecated-declarations -Wno-cast-function-type -Wno-unused-parameter -Wno-stringop-truncation -Wno-stringop-overflow' \\\n && ./configure $CONF --with-cc-opt=\"$CFLAGS\" \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && (find . -type f -a -name 'nginx' -o -name '*.so*' | xargs strip ;true ) \\\n && (find . -type f -a -name '*.so*' | xargs chmod 755 ;true ) \\\n && make install \\\n && mkdir -p /usr/lib/nginx/modules /etc/nginx/naxsi.d \\\n && install -m644 extensions/${naxsi_tarball_name}/naxsi_config/naxsi_core.rules /etc/nginx/naxsi.d/naxsi_core.rules.conf \\\n && (for so in `find extensions -type f -name '*.so' `; do mv $so /usr/lib/nginx/modules ; done ;true ) \\\n && mv /usr/bin/envsubst /tmp/ \\\n && curl -LO https://raw.githubusercontent.com/grahamedgecombe/ct-submit/v${CT_SUBMIT_VERSION}/ct-submit.go \\\n && go build ct-submit.go \\\n && cp ct-submit /tmp \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst /tmp/ct-submit | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del --purge .builddep \\\n && mv /tmp/envsubst /usr/bin/envsubst \\\n && mv /tmp/ct-submit /usr/bin/ct-submit \\\n && chmod 700 /usr/bin/ct-submit \\\n && mkdir -p -m755 /var/www/html /etc/nginx/conf.d /var/cache/nginx /var/log/nginx \\\n && chown -R httpd:www /etc/nginx /var/www/html /var/cache/nginx /var/log/nginx /etc/hosts \\\n && install -m644 /etc/nginx/html/50x.html /var/www/html \\\n && install -m644 /etc/nginx/html/index.html /var/www/html \\\n && mkdir -p -m755 /etc/nginx/scts /etc/nginx/naxsi.d /etc/nginx/conf.d/templates \\\n && rm -rf /tmp/build \\\n && :\nCOPY files/nginx.conf /etc/nginx/nginx.conf\nCOPY files/nginx_httpd.conf /etc/nginx/conf.d/_nginx.conf\nCOPY files/nginx_ssl.conf /etc/nginx/conf.d/_ssl.conf\nCOPY files/kusanagi_naxsi_core.conf /etc/nginx/conf.d/kusanagi_naxsi_core.conf\nCOPY files/naxsi.d/ /etc/nginx/naxsi.d/\nCOPY files/templates/ /etc/nginx/conf.d/\nCOPY files/security.conf /etc/nginx/conf.d/security.conf\nCOPY files/ct-submit.sh /usr/bin/ct-submit.sh\n#   forward request and error logs to docker log collector\nRUN cd /etc/nginx/ \\\n && chmod 700 /usr/bin/ct-submit.sh \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && apk add --no-cache tzdata openssl certbot \\\n && mkdir /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && chown -R httpd:www /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt \\\n && :\nARG MICROSCANNER_TOKEN\nRUN if [ x${MICROSCANNER_TOKEN} != x ] ; then apk add --no-cache --virtual .ca ca-certificates \\\n && update-ca-certificates \\\n && wget --no-check-certificate https://get.aquasec.com/microscanner \\\n && chmod +x microscanner \\\n && ./microscanner ${MICROSCANNER_TOKEN} || exit 1 \\\n && rm ./microscanner \\\n && apk del --purge .ca ; fi\nEXPOSE 8080/tcp\nEXPOSE 8443/tcp\nVOLUME /home/kusanagi\nVOLUME /etc/letsencrypt\nUSER httpd\nCOPY files/docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"ca27b3dc9fccf452ca9faaf1d3dc119e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/964ca6630020368f771a9f323e34f485313ea2c2.dockerfile"}