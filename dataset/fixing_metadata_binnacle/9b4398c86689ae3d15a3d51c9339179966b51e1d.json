{"seed":1887616990,"processedDockerfileHash":"44405acac3b72837907583141ebd74fe","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Tag: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n#   Label: com.nvidia.cuda.version: 9.0.176\n#   Label: com.nvidia.cudnn.version: 7.1.2.21\n#   Label: com.nvidia.volumes.needed: nvidia_driver\n#   Label: maintainer: NVIDIA CORPORATION <cudatools@nvidia.com>\n#   Ubuntu 16.04\nFROM nvidia/cuda@sha256:40db1c98b66e133f54197ba1a66312b9c29842635c8cba5ae66fb56ded695b7c\nENV TENSORFLOW_VERSION=\"1.12.0\"\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends nano=7.2-1 vim=2:9.0.1000-4ubuntu2 joe=4.6-1build2 wget=1.21.3-1ubuntu1 curl=7.88.1-7ubuntu1 jq=1.6-2.1ubuntu3 gawk=1:5.2.1-2 psmisc=23.6-1 python python-dev python-pip python3=3.11.2-1 python3-dev=3.11.2-1 python3-pip=23.0.1+dfsg-1 openssh-server=1:9.0p1-1ubuntu8 openssh-client=1:9.0p1-1ubuntu8 build-essential=12.9ubuntu3 autotools-dev=20220109.1 cmake=3.25.1-1 git=1:2.39.2-1ubuntu1 bash-completion=1:2.11-6ubuntu1 ca-certificates=20230311 inotify-tools=3.22.6.0-4 rsync=3.2.7-1 realpath libjpeg-dev=8c-2ubuntu11 libpng-dev=1.6.39-2 net-tools=2.10-0.1ubuntu3 libsm6=2:1.2.3-1build2 libxext6=2:1.3.4-1build1 rpm=4.18.0+dfsg-1build1 cpio=2.13+dfsg-7.1 net-tools=2.10-0.1ubuntu3 libdapl2=2.1.10.1.f1e05b7a-3 dapl2-utils=2.1.10.1.f1e05b7a-3 libmlx4-1 libmlx5-1 ibutils=1.5.7+0.2.gbd7e502-3 librdmacm1=44.0-2 libibverbs1=44.0-2 libmthca1 ibverbs-utils=44.0-2 rdmacm-utils=44.0-2 perftest=4.5+0.17-1 kmod=30+20221128-1ubuntu1 -y\n#   Install NCCL v2.3.7, for CUDA 9.0\nRUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && dpkg -i nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && apt-get install --no-install-recommends libnccl2=2.3.7-1+cuda9.0 libnccl-dev=2.3.7-1+cuda9.0\n#   Install intel MPI with the version which azure suggests.\nCOPY silent.cfg /silent.cfg\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\n#   Install Intel MPI in the Docker Image.\n#   You should prepare your own intel mpi license to active your intel MPI, and modify the file silent.cfg to set the configuration of activation type.\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/9278/l_mpi_p_5.1.3.223.tgz \\\n && tar -xvf /l_mpi_p_5.1.3.223.tgz \\\n && cd /l_mpi_p_5.1.3.223 \\\n && ./install.sh -s /silent.cfg \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && echo \"source /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc\nENV PATH=\"$PATH:/opt/intel/compilers_and_libraries/linux/mpi/bin64\"\n#   Install TensorFlow\nRUN pip3 install tensorflow-gpu==${TENSORFLOW_VERSION} h5py \\\n && pip install h5py==3.8.0 tensorflow-gpu==${TENSORFLOW_VERSION}\n#   Install Dependencies\nRUN pip3 install --no-cache-dir scipy jupyter ipykernel numpy toolz pandas scikit-learn pillow \\\n && pip install scipy==1.10.1 numpy==1.24.2 toolz==0.12.0 pandas==2.0.0 scikit-learn==1.2.2 pillow==9.5.0 --no-cache-dir\n#   Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && /bin/bash -c \"source /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh\" \\\n && pip3 install --no-cache-dir horovod==0.15.2 \\\n && pip install horovod==0.15.2 --no-cache-dir \\\n && ldconfig\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Tag: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n#  Label: com.nvidia.cuda.version: 9.0.176\n#  Label: com.nvidia.cudnn.version: 7.1.2.21\n#  Label: com.nvidia.volumes.needed: nvidia_driver\n#  Label: maintainer: NVIDIA CORPORATION <cudatools@nvidia.com>\n#  Ubuntu 16.04\nFROM nvidia/cuda@sha256:40db1c98b66e133f54197ba1a66312b9c29842635c8cba5ae66fb56ded695b7c\nENV TENSORFLOW_VERSION=\"1.12.0\"\nRUN apt-get update -y \\\n && apt-get install nano vim joe wget curl jq gawk psmisc python python-dev python-pip python3 python3-dev python3-pip openssh-server openssh-client build-essential autotools-dev cmake git bash-completion ca-certificates inotify-tools rsync realpath libjpeg-dev libpng-dev net-tools libsm6 libxext6 rpm cpio net-tools libdapl2 dapl2-utils libmlx4-1 libmlx5-1 ibutils librdmacm1 libibverbs1 libmthca1 ibverbs-utils rdmacm-utils perftest kmod -y\n#  Install NCCL v2.3.7, for CUDA 9.0\nRUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && dpkg -i nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && apt-get install libnccl2=2.3.7-1+cuda9.0 libnccl-dev=2.3.7-1+cuda9.0\n#  Install intel MPI with the version which azure suggests.\nCOPY silent.cfg /silent.cfg\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\n#  Install Intel MPI in the Docker Image.\n#  You should prepare your own intel mpi license to active your intel MPI, and modify the file silent.cfg to set the configuration of activation type.\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/9278/l_mpi_p_5.1.3.223.tgz \\\n && tar -xvf /l_mpi_p_5.1.3.223.tgz \\\n && cd /l_mpi_p_5.1.3.223 \\\n && ./install.sh -s /silent.cfg \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && echo \"source /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc\nENV PATH=\"$PATH:/opt/intel/compilers_and_libraries/linux/mpi/bin64\"\n#  Install TensorFlow\nRUN pip3 install tensorflow-gpu==${TENSORFLOW_VERSION} h5py \\\n && pip install h5py tensorflow-gpu==${TENSORFLOW_VERSION}\n#  Install Dependencies\nRUN pip3 install --no-cache-dir scipy jupyter ipykernel numpy toolz pandas scikit-learn pillow \\\n && pip install scipy numpy toolz pandas scikit-learn pillow --no-cache-dir\n#  Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && /bin/bash -c \"source /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh\" \\\n && pip3 install --no-cache-dir horovod==0.15.2 \\\n && pip install horovod==0.15.2 --no-cache-dir \\\n && ldconfig\n","injectedSmells":[],"originalDockerfileHash":"0bf16a45bfa44c28f2fc14307082bfde","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Tag: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\n#   Label: com.nvidia.cuda.version: 9.0.176\n#   Label: com.nvidia.cudnn.version: 7.1.2.21\n#   Label: com.nvidia.volumes.needed: nvidia_driver\n#   Label: maintainer: NVIDIA CORPORATION <cudatools@nvidia.com>\n#   Ubuntu 16.04\nFROM nvidia/cuda@sha256:40db1c98b66e133f54197ba1a66312b9c29842635c8cba5ae66fb56ded695b7c\nENV TENSORFLOW_VERSION=\"1.12.0\"\nRUN apt-get update -y \\\n && apt-get install nano vim joe wget curl jq gawk psmisc python python-dev python-pip python3 python3-dev python3-pip openssh-server openssh-client build-essential autotools-dev cmake git bash-completion ca-certificates inotify-tools rsync realpath libjpeg-dev libpng-dev net-tools libsm6 libxext6 rpm cpio net-tools libdapl2 dapl2-utils libmlx4-1 libmlx5-1 ibutils librdmacm1 libibverbs1 libmthca1 ibverbs-utils rdmacm-utils perftest kmod -y\n#   Install NCCL v2.3.7, for CUDA 9.0\nRUN wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && dpkg -i nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \\\n && apt-get install libnccl2=2.3.7-1+cuda9.0 libnccl-dev=2.3.7-1+cuda9.0\n#   Install intel MPI with the version which azure suggests.\nCOPY silent.cfg /silent.cfg\nENV MANPATH=\"/usr/share/man:/usr/local/man\" \\\n    COMPILERVARS_ARCHITECTURE=\"intel64\" \\\n    COMPILERVARS_PLATFORM=\"linux\" \\\n    INTEL_MPI_PATH=\"/opt/intel/compilers_and_libraries/linux/mpi\"\n#   Install Intel MPI in the Docker Image.\n#   You should prepare your own intel mpi license to active your intel MPI, and modify the file silent.cfg to set the configuration of activation type.\nRUN wget http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/9278/l_mpi_p_5.1.3.223.tgz \\\n && tar -xvf /l_mpi_p_5.1.3.223.tgz \\\n && cd /l_mpi_p_5.1.3.223 \\\n && ./install.sh -s /silent.cfg \\\n && . /opt/intel/bin/compilervars.sh \\\n && . /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh \\\n && echo \"source /opt/intel/compilers_and_libraries/linux/mpi/bin64/mpivars.sh\" >> /root/.bashrc \\\n && echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:'$LD_LIBRARY_PATH' >> /root/.bashrc\nENV PATH=\"$PATH:/opt/intel/compilers_and_libraries/linux/mpi/bin64\"\n#   Install TensorFlow\nRUN pip3 install tensorflow-gpu==${TENSORFLOW_VERSION} h5py \\\n && pip install h5py tensorflow-gpu==${TENSORFLOW_VERSION}\n#   Install Dependencies\nRUN pip3 install --no-cache-dir scipy jupyter ipykernel numpy toolz pandas scikit-learn pillow \\\n && pip install scipy numpy toolz pandas scikit-learn pillow --no-cache-dir\n#   Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && /bin/bash -c \"source /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh\" \\\n && pip3 install --no-cache-dir horovod==0.15.2 \\\n && pip install horovod==0.15.2 --no-cache-dir \\\n && ldconfig\n","originalDockerfileUglifiedHash":"9607719df2b0d236c4fa9615de9ef170","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9b4398c86689ae3d15a3d51c9339179966b51e1d.dockerfile"}