{"seed":788704149,"processedDockerfileHash":"5e01ec834c6a205999949d99edb937d2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile specifies the recipe for creating an image for the tests\n#   to run in.\n#\n#   We install as many test dependencies here as we can, because these setup\n#   steps can be cached.  They do *not* run every time we run the build.\n#   The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#   changes.\n#   Base Dockerfile for gRPC dev images\nFROM debian:latest\n#   Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#   Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#   Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#   Install dependencies.  We start with the basic ones require to build protoc\n#   and the C++ build\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.71-3 autotools-dev=20220109.1 build-essential=12.9ubuntu3 bzip2=1.0.8-5build1 ccache=4.7.4-1 curl=7.88.1-7ubuntu1 gcc=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 libc6=2.37-0ubuntu2 libc6-dbg=2.37-0ubuntu2 libc6-dev=2.37-0ubuntu2 libgtest-dev=1.12.1-0.2 libtool=2.4.7-5 make=4.3-4.1build1 parallel=20221122+ds-2 time=1.9-0.2 wget=1.21.3-1ubuntu1 mono-devel=6.8.0.105+dfsg-3.3 referenceassemblies-pcl nunit=2.6.4+dfsg-1.1 maven=3.8.7-1 openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby=1:3.1 -y \\\n && apt-get clean\n#  #################\n#   C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n#  #################\n#   Python dependencies\n#   These packages exist in apt-get, but their versions are too old, so we have\n#   to get updates from pip.\nRUN pip install pip==23.1 --upgrade\nRUN pip install virtualenv==20.21.0 tox==4.4.12 yattag==1.15.1\n#  #################\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  #################\n#   Java dependencies\n#   This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j6 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO -P lite \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n#  #################\n#   Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#   Define the default command.\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile specifies the recipe for creating an image for the tests\n#  to run in.\n#\n#  We install as many test dependencies here as we can, because these setup\n#  steps can be cached.  They do *not* run every time we run the build.\n#  The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#  changes.\n#  Base Dockerfile for gRPC dev images\nFROM debian:latest\n#  Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#  Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#  Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#  Install dependencies.  We start with the basic ones require to build protoc\n#  and the C++ build\nRUN apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget mono-devel referenceassemblies-pcl nunit maven openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby -y \\\n && apt-get clean\n# #################\n#  C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n# #################\n#  Python dependencies\n#  These packages exist in apt-get, but their versions are too old, so we have\n#  to get updates from pip.\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n# #################\n#  Ruby dependencies\n#  Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#  Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n# #################\n#  Java dependencies\n#  This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j6 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO -P lite \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n# #################\n#  Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#  Define the default command.\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"93744f5b81e8190f4ae9c1992f02ab95","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile specifies the recipe for creating an image for the tests\n#   to run in.\n#\n#   We install as many test dependencies here as we can, because these setup\n#   steps can be cached.  They do *not* run every time we run the build.\n#   The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#   changes.\n#   Base Dockerfile for gRPC dev images\nFROM debian:latest\n#   Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#   Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#   Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#   Install dependencies.  We start with the basic ones require to build protoc\n#   and the C++ build\nRUN apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget mono-devel referenceassemblies-pcl nunit maven openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby -y \\\n && apt-get clean\n#  #################\n#   C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n#  #################\n#   Python dependencies\n#   These packages exist in apt-get, but their versions are too old, so we have\n#   to get updates from pip.\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n#  #################\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm use --default ruby-2.1\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"echo 'rvm --default use ruby-2.1' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  #################\n#   Java dependencies\n#   This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j6 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO -P lite \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n#  #################\n#   Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#   Define the default command.\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"f325a3c7151d0344545a2f08c0c997ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8467aeff51f64c0814b877c0685308d99619db7b.dockerfile"}