{"seed":4197521075,"processedDockerfileHash":"0ffe5c096e94f3b83570501eacebc876","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Most of the below is based on the Nginx Team's Alpine Dockerfile\n#     https://github.com/nginxinc/docker-nginx/blob/e3e35236b2c77e02266955c875b74bdbceb79c44/mainline/alpine/Dockerfile\n#   --- Maxmind GeoIP DB Download Container --- #\nFROM ubuntu:18.04 AS geoip\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends geoipupdate=2.5.0-1 -y\nRUN geoipupdate -v\n#   --- Nginx Build Container --- #\nFROM alpine:3.9 AS builder\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\n#   Nginx Version (See: https://nginx.org/en/CHANGES)\nENV NGINX_VERSION=\"1.15.9\"\nENV NGINX_GPG=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\n#   Nginx User UID/GID\nARG NGINX_ID=6666\n#   Nginx build config\nARG CONFIG=\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_addition_module  --with-http_sub_module  --with-http_dav_module  --with-http_flv_module  --with-http_mp4_module  --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_random_index_module  --with-http_secure_link_module  --with-http_stub_status_module  --with-http_auth_request_module  --with-http_xslt_module=dynamic  --with-http_image_filter_module=dynamic  --with-threads  --with-stream  --with-stream_ssl_module  --with-stream_ssl_preread_module  --with-stream_realip_module  --with-http_slice_module  --with-mail  --with-mail_ssl_module  --with-compat  --with-file-aio  --with-http_v2_module  --with-openssl=/usr/src/boringssl  --with-cc-opt=-I'/usr/src/boringssl/.openssl/include/'  --add-module=/usr/src/modules/ngx_headers_more  --add-module=/usr/src/modules/ngx_subs_filter  --add-module=/usr/src/modules/ngx_http_geoip2_module  --add-module=/usr/src/modules/ngx_brotli \"\nRUN set -xe \\\n && apk add build-base cmake git go perl --no-cache --virtual .boringssl-deps \\\n && git clone --depth 1 https://boringssl.googlesource.com/boringssl \"/usr/src/boringssl\" \\\n && mkdir \"/usr/src/boringssl/build/\" \\\n && cd \"/usr/src/boringssl/build/\" \\\n && cmake ../ \\\n && make \\\n && mkdir -p \"/usr/src/boringssl/.openssl/lib\" \\\n && cd \"/usr/src/boringssl/.openssl\" \\\n && ln -s ../include \\\n && cd \"/usr/src/boringssl\" \\\n && cp \"build/crypto/libcrypto.a\" \"build/ssl/libssl.a\" \".openssl/lib\" \\\n && mkdir -p /usr/src/modules \\\n && git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git /usr/src/modules/ngx_headers_more \\\n && git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git /usr/src/modules/ngx_subs_filter \\\n && git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /usr/src/modules/ngx_http_geoip2_module \\\n && git clone --depth 1 https://github.com/google/ngx_brotli.git /usr/src/modules/ngx_brotli \\\n && cd /usr/src/modules/ngx_brotli \\\n && git submodule update --init \\\n && cd /usr/src \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add gcc libc-dev make pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev libmaxminddb-dev --no-cache --virtual .build-deps \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPG from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPG\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPG\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && mv -v /usr/src/nginx-$NGINX_VERSION /usr/src/nginx\n#   Build debug bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG --with-debug \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so\n#   Build main bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;)\n#   Clean some unnecessary source so we're copying less into the next stage\nRUN rm -rf /usr/src/boringssl/build\n#   Move the source into a single place\nRUN mkdir /tmp/buildsource\nRUN mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/\nRUN mv -fv /usr/src/modules/ /tmp/buildsource/modules/\nRUN mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/\n#   Backup our NGINX_ID environment variable\nRUN echo \"$NGINX_ID\" > /tmp/buildsource/nginx_id\n#   --- Runtime Container --- #\nFROM alpine:3.9\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nCOPY --from=builder /tmp/buildsource /usr/src\n#   See this page for GeoIP info: https://github.com/leev/ngx_http_geoip2_module#example-usage\nCOPY --from=geoip /var/lib/GeoIP/GeoLite2-Country.mmdb /var/lib/GeoIP/GeoLite2-Country.mmdb\nRUN set -xe \\\n && export NGINX_ID=\"$( cat /usr/src/nginx_id ;)\" \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add binutils make wget --no-cache --virtual .installdeps \\\n && cd /usr/src/nginx \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && apk add gettext --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk add tzdata --no-cache \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.conf -O /etc/nginx/nginx.conf \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.vh.default.conf -O /etc/nginx/conf.d/default.conf \\\n && apk del .installdeps .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && rm -rf /usr/src/* \\\n && chown -R $NGINX_ID:$NGINX_ID \"/etc/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\" \\\n && touch \"/var/run/nginx.pid\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\" \\\n && touch \"/var/run/nginx.lock\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\" \\\n && echo \"\" \\\n && nginx -V\n#   Runtime settings\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Most of the below is based on the Nginx Team's Alpine Dockerfile\n#    https://github.com/nginxinc/docker-nginx/blob/e3e35236b2c77e02266955c875b74bdbceb79c44/mainline/alpine/Dockerfile\n#  --- Maxmind GeoIP DB Download Container --- #\nFROM ubuntu:18.04 AS geoip\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nRUN apt-get update \\\n && apt-get install geoipupdate -y\nRUN geoipupdate -v\n#  --- Nginx Build Container --- #\nFROM alpine:3.9 AS builder\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\n#  Nginx Version (See: https://nginx.org/en/CHANGES)\nENV NGINX_VERSION=\"1.15.9\"\nENV NGINX_GPG=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\n#  Nginx User UID/GID\nARG NGINX_ID=6666\n#  Nginx build config\nARG CONFIG=\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_addition_module  --with-http_sub_module  --with-http_dav_module  --with-http_flv_module  --with-http_mp4_module  --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_random_index_module  --with-http_secure_link_module  --with-http_stub_status_module  --with-http_auth_request_module  --with-http_xslt_module=dynamic  --with-http_image_filter_module=dynamic  --with-threads  --with-stream  --with-stream_ssl_module  --with-stream_ssl_preread_module  --with-stream_realip_module  --with-http_slice_module  --with-mail  --with-mail_ssl_module  --with-compat  --with-file-aio  --with-http_v2_module  --with-openssl=/usr/src/boringssl  --with-cc-opt=-I'/usr/src/boringssl/.openssl/include/'  --add-module=/usr/src/modules/ngx_headers_more  --add-module=/usr/src/modules/ngx_subs_filter  --add-module=/usr/src/modules/ngx_http_geoip2_module  --add-module=/usr/src/modules/ngx_brotli \"\nRUN set -xe \\\n && apk add --no-cache --virtual .boringssl-deps build-base cmake git go perl \\\n && git clone --depth 1 https://boringssl.googlesource.com/boringssl \"/usr/src/boringssl\" \\\n && mkdir \"/usr/src/boringssl/build/\" \\\n && cd \"/usr/src/boringssl/build/\" \\\n && cmake ../ \\\n && make \\\n && mkdir -p \"/usr/src/boringssl/.openssl/lib\" \\\n && cd \"/usr/src/boringssl/.openssl\" \\\n && ln -s ../include \\\n && cd \"/usr/src/boringssl\" \\\n && cp \"build/crypto/libcrypto.a\" \"build/ssl/libssl.a\" \".openssl/lib\" \\\n && mkdir -p /usr/src/modules \\\n && git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git /usr/src/modules/ngx_headers_more \\\n && git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git /usr/src/modules/ngx_subs_filter \\\n && git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /usr/src/modules/ngx_http_geoip2_module \\\n && git clone --depth 1 https://github.com/google/ngx_brotli.git /usr/src/modules/ngx_brotli \\\n && cd /usr/src/modules/ngx_brotli \\\n && git submodule update --init \\\n && cd /usr/src \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev libmaxminddb-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPG from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPG\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPG\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && mv -v /usr/src/nginx-$NGINX_VERSION /usr/src/nginx\n#  Build debug bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG --with-debug \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so\n#  Build main bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;)\n#  Clean some unnecessary source so we're copying less into the next stage\nRUN rm -rf /usr/src/boringssl/build\n#  Move the source into a single place\nRUN mkdir /tmp/buildsource\nRUN mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/\nRUN mv -fv /usr/src/modules/ /tmp/buildsource/modules/\nRUN mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/\n#  Backup our NGINX_ID environment variable\nRUN echo \"$NGINX_ID\" > /tmp/buildsource/nginx_id\n#  --- Runtime Container --- #\nFROM alpine:3.9\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nCOPY --from=builder /tmp/buildsource /usr/src\n#  See this page for GeoIP info: https://github.com/leev/ngx_http_geoip2_module#example-usage\nCOPY --from=geoip /var/lib/GeoIP/GeoLite2-Country.mmdb /var/lib/GeoIP/GeoLite2-Country.mmdb\nRUN set -xe \\\n && export NGINX_ID=\"$( cat /usr/src/nginx_id ;)\" \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add --no-cache --virtual .installdeps binutils make wget \\\n && cd /usr/src/nginx \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk add --no-cache tzdata \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.conf -O /etc/nginx/nginx.conf \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.vh.default.conf -O /etc/nginx/conf.d/default.conf \\\n && apk del .installdeps .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && rm -rf /usr/src/* \\\n && chown -R $NGINX_ID:$NGINX_ID \"/etc/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\" \\\n && touch \"/var/run/nginx.pid\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\" \\\n && touch \"/var/run/nginx.lock\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\" \\\n && echo \"\" \\\n && nginx -V\n#  Runtime settings\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"a7f967debfd7cc4b92a89d9afa3116b3","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Most of the below is based on the Nginx Team's Alpine Dockerfile\n#     https://github.com/nginxinc/docker-nginx/blob/e3e35236b2c77e02266955c875b74bdbceb79c44/mainline/alpine/Dockerfile\n#   --- Maxmind GeoIP DB Download Container --- #\nFROM ubuntu:18.04 AS geoip\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nRUN apt-get update \\\n && apt-get install geoipupdate -y\nRUN geoipupdate -v\n#   --- Nginx Build Container --- #\nFROM alpine:3.9 AS builder\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\n#   Nginx Version (See: https://nginx.org/en/CHANGES)\nENV NGINX_VERSION=\"1.15.9\"\nENV NGINX_GPG=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\n#   Nginx User UID/GID\nARG NGINX_ID=6666\n#   Nginx build config\nARG CONFIG=\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_addition_module  --with-http_sub_module  --with-http_dav_module  --with-http_flv_module  --with-http_mp4_module  --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_random_index_module  --with-http_secure_link_module  --with-http_stub_status_module  --with-http_auth_request_module  --with-http_xslt_module=dynamic  --with-http_image_filter_module=dynamic  --with-threads  --with-stream  --with-stream_ssl_module  --with-stream_ssl_preread_module  --with-stream_realip_module  --with-http_slice_module  --with-mail  --with-mail_ssl_module  --with-compat  --with-file-aio  --with-http_v2_module  --with-openssl=/usr/src/boringssl  --with-cc-opt=-I'/usr/src/boringssl/.openssl/include/'  --add-module=/usr/src/modules/ngx_headers_more  --add-module=/usr/src/modules/ngx_subs_filter  --add-module=/usr/src/modules/ngx_http_geoip2_module  --add-module=/usr/src/modules/ngx_brotli \"\nRUN set -xe \\\n && apk add --no-cache --virtual .boringssl-deps build-base cmake git go perl \\\n && git clone --depth 1 https://boringssl.googlesource.com/boringssl \"/usr/src/boringssl\" \\\n && mkdir \"/usr/src/boringssl/build/\" \\\n && cd \"/usr/src/boringssl/build/\" \\\n && cmake ../ \\\n && make \\\n && mkdir -p \"/usr/src/boringssl/.openssl/lib\" \\\n && cd \"/usr/src/boringssl/.openssl\" \\\n && ln -s ../include \\\n && cd \"/usr/src/boringssl\" \\\n && cp \"build/crypto/libcrypto.a\" \"build/ssl/libssl.a\" \".openssl/lib\" \\\n && mkdir -p /usr/src/modules \\\n && git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git /usr/src/modules/ngx_headers_more \\\n && git clone --depth 1 https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git /usr/src/modules/ngx_subs_filter \\\n && git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /usr/src/modules/ngx_http_geoip2_module \\\n && git clone --depth 1 https://github.com/google/ngx_brotli.git /usr/src/modules/ngx_brotli \\\n && cd /usr/src/modules/ngx_brotli \\\n && git submodule update --init \\\n && cd /usr/src \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev libmaxminddb-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPG from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPG\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPG\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && mv -v /usr/src/nginx-$NGINX_VERSION /usr/src/nginx\n#   Build debug bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG --with-debug \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so\n#   Build main bits\nRUN cd /usr/src/nginx \\\n && ./configure $CONFIG \\\n && mkdir -p /usr/src/boringssl/.openssl/include/openssl/ \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && make -j$( getconf _NPROCESSORS_ONLN ;)\n#   Clean some unnecessary source so we're copying less into the next stage\nRUN rm -rf /usr/src/boringssl/build\n#   Move the source into a single place\nRUN mkdir /tmp/buildsource\nRUN mv -fv /usr/src/nginx/ /tmp/buildsource/nginx/\nRUN mv -fv /usr/src/modules/ /tmp/buildsource/modules/\nRUN mv -fv /usr/src/boringssl/ /tmp/buildsource/boringssl/\n#   Backup our NGINX_ID environment variable\nRUN echo \"$NGINX_ID\" > /tmp/buildsource/nginx_id\n#   --- Runtime Container --- #\nFROM alpine:3.9\nLABEL maintainer=\"\\\"Alex Haydock <alex@alexhaydock.co.uk>\\\"\"\nCOPY --from=builder /tmp/buildsource /usr/src\n#   See this page for GeoIP info: https://github.com/leev/ngx_http_geoip2_module#example-usage\nCOPY --from=geoip /var/lib/GeoIP/GeoLite2-Country.mmdb /var/lib/GeoIP/GeoLite2-Country.mmdb\nRUN set -xe \\\n && export NGINX_ID=\"$( cat /usr/src/nginx_id ;)\" \\\n && addgroup -S -g $NGINX_ID nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u $NGINX_ID nginx \\\n && apk add --no-cache --virtual .installdeps binutils make wget \\\n && cd /usr/src/nginx \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk add --no-cache tzdata \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.conf -O /etc/nginx/nginx.conf \\\n && wget https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/nginx.vh.default.conf -O /etc/nginx/conf.d/default.conf \\\n && apk del .installdeps .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && rm -rf /usr/src/* \\\n && chown -R $NGINX_ID:$NGINX_ID \"/etc/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/cache/nginx\" \\\n && chown -R $NGINX_ID:$NGINX_ID \"/var/log/nginx\" \\\n && touch \"/var/run/nginx.pid\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.pid\" \\\n && touch \"/var/run/nginx.lock\" \\\n && chown $NGINX_ID:$NGINX_ID \"/var/run/nginx.lock\" \\\n && echo \"\" \\\n && nginx -V\n#   Runtime settings\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"2842469a888b6cfbab384938d51f8bd2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/51feead4aadd1c701d7f21b58effe4879f0d2c74.dockerfile"}