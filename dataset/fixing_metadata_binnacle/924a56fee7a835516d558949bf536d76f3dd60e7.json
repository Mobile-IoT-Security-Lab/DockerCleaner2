{"seed":3399521454,"processedDockerfileHash":"176c04c5c7a91756a4b279a373e7f246","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-user"],"processedDockerfile":"ARG ARCH=amd64\n#   The node version here should match the version of the runtime image which is\n#   specified in the base-image subdirectory in the project\nFROM balenalib/raspberry-pi-node:10-run AS rpi-node-base\nFROM balenalib/armv7hf-node:10-run AS armv7hf-node-base\nFROM balenalib/aarch64-node:10-run AS aarch64-node-base\nRUN [\"cross-build-start\"]\nRUN sed -i '/security.debian.org jessie/d' /etc/apt/sources.list\nRUN [\"cross-build-end\"]\nFROM balenalib/amd64-node:10-run AS amd64-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-node:10-run AS i386-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-nlp-node:6-run AS i386-nlp-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\n#   Setup webpack building base images\n#   We always do the webpack build on amd64, cause it's way faster\nFROM amd64-node-base AS rpi-node-build\nFROM amd64-node-base AS amd64-node-build\nFROM amd64-node-base AS armv7hf-node-build\nFROM amd64-node-base AS aarch64-node-build\nFROM amd64-node-base AS i386-node-build\nFROM balenalib/amd64-node:6-build AS i386-nlp-node-build\n#  #############################################################################\nFROM $ARCH-node-build AS node-build\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nCOPY package.json package-lock.json /usr/src/app/\nRUN JOBS=MAX npm ci --no-optional --unsafe-perm || JOBS=MAX npm install --no-optional --unsafe-perm\nCOPY webpack.config.js fix-jsonstream.js hardcode-migrations.js tsconfig.json tsconfig.release.json /usr/src/app/\nCOPY src /usr/src/app/src\nCOPY test /usr/src/app/test\nCOPY typings /usr/src/app/typings\nRUN npm test \\\n && npm run build\n#  #############################################################################\n#   Build nodejs dependencies\nFROM $ARCH-node-base AS node-deps\nARG ARCH\nRUN [\"cross-build-start\"]\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nRUN mkdir -p rootfs-overlay \\\n && ln -s /lib rootfs-overlay/lib64\nCOPY package.json package-lock.json /usr/src/app/\n#   Install only the production modules that have C extensions\nRUN (if [ $ARCH = \"i386-nlp\" ] ; then JOBS=MAX npm install --no-optional --unsafe-perm --production ; else JOBS=MAX npm ci --no-optional --unsafe-perm --production ; fi ) \\\n && npm dedupe\n#   Remove various uneeded filetypes in order to reduce space\n#   We also remove the spurious node.dtps, see https://github.com/mapbox/node-sqlite3/issues/861\nRUN find . -path '*/coverage/*' -o -path '*/test/*' -o -path '*/.nyc_output/*' -o -name '*.tar.*' -o -name '*.in' -o -name '*.cc' -o -name '*.c' -o -name '*.coffee' -o -name '*.eslintrc' -o -name '*.h' -o -name '*.html' -o -name '*.markdown' -o -name '*.md' -o -name '*.patch' -o -name '*.png' -o -name '*.yml' -o -name \"*.ts\" -delete \\\n && find . -type f -path '*/node_modules/sqlite3/deps*' -delete \\\n && find . -type f -path '*/node_modules/knex/build*' -delete \\\n && rm -rf node_modules/sqlite3/node.dtps\nCOPY entry.sh package.json rootfs-overlay/usr/src/app/\nRUN rsync -a --delete node_modules rootfs-overlay /build\nRUN [\"cross-build-end\"]\n#  #############################################################################\n#   Minimal runtime image\nFROM balena/$ARCH-supervisor-base:v1.4.7\nARG ARCH\nARG VERSION=master\nARG DEFAULT_MIXPANEL_TOKEN=bananasbananas\nWORKDIR /usr/src/app\nCOPY --from=node-build /usr/src/app/dist ./dist\nCOPY --from=node-deps /build/node_modules ./node_modules\nCOPY --from=node-deps /build/rootfs-overlay/ /\n#   Remove default nproc limit for Avahi for it to work in-container\nCOPY avahi-daemon.conf /etc/avahi/avahi-daemon.conf\nVOLUME /data\nENV CONFIG_MOUNT_POINT=\"/boot/config.json\" \\\n    LED_FILE=\"/dev/null\" \\\n    SUPERVISOR_IMAGE=\"resin/$ARCH-supervisor\" \\\n    VERSION=\"$VERSION\" \\\n    DEFAULT_MIXPANEL_TOKEN=\"$DEFAULT_MIXPANEL_TOKEN\"\nHEALTHCHECK --interval=300s --timeout=30s --start-period=60s --retries=3 CMD wget -qO- http://127.0.0.1:${LISTEN_PORT:-48484}/v1/healthy || exit 1\nCMD [\"./entry.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n","originalDockerfile":"ARG ARCH=amd64\n#  The node version here should match the version of the runtime image which is\n#  specified in the base-image subdirectory in the project\nFROM balenalib/raspberry-pi-node:10-run AS rpi-node-base\nFROM balenalib/armv7hf-node:10-run AS armv7hf-node-base\nFROM balenalib/aarch64-node:10-run AS aarch64-node-base\nRUN [\"cross-build-start\"]\nRUN sed -i '/security.debian.org jessie/d' /etc/apt/sources.list\nRUN [\"cross-build-end\"]\nFROM balenalib/amd64-node:10-run AS amd64-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-node:10-run AS i386-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-nlp-node:6-run AS i386-nlp-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\n#  Setup webpack building base images\n#  We always do the webpack build on amd64, cause it's way faster\nFROM amd64-node-base AS rpi-node-build\nFROM amd64-node-base AS amd64-node-build\nFROM amd64-node-base AS armv7hf-node-build\nFROM amd64-node-base AS aarch64-node-build\nFROM amd64-node-base AS i386-node-build\nFROM balenalib/amd64-node:6-build AS i386-nlp-node-build\n# #############################################################################\nFROM $ARCH-node-build AS node-build\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nCOPY package.json package-lock.json /usr/src/app/\nRUN JOBS=MAX npm ci --no-optional --unsafe-perm || JOBS=MAX npm install --no-optional --unsafe-perm\nCOPY webpack.config.js fix-jsonstream.js hardcode-migrations.js tsconfig.json tsconfig.release.json /usr/src/app/\nCOPY src /usr/src/app/src\nCOPY test /usr/src/app/test\nCOPY typings /usr/src/app/typings\nRUN npm test \\\n && npm run build\n# #############################################################################\n#  Build nodejs dependencies\nFROM $ARCH-node-base AS node-deps\nARG ARCH\nRUN [\"cross-build-start\"]\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nRUN mkdir -p rootfs-overlay \\\n && ln -s /lib rootfs-overlay/lib64\nCOPY package.json package-lock.json /usr/src/app/\n#  Install only the production modules that have C extensions\nRUN (if [ $ARCH = \"i386-nlp\" ] ; then JOBS=MAX npm install --no-optional --unsafe-perm --production ; else JOBS=MAX npm ci --no-optional --unsafe-perm --production ; fi ) \\\n && npm dedupe\n#  Remove various uneeded filetypes in order to reduce space\n#  We also remove the spurious node.dtps, see https://github.com/mapbox/node-sqlite3/issues/861\nRUN find . -path '*/coverage/*' -o -path '*/test/*' -o -path '*/.nyc_output/*' -o -name '*.tar.*' -o -name '*.in' -o -name '*.cc' -o -name '*.c' -o -name '*.coffee' -o -name '*.eslintrc' -o -name '*.h' -o -name '*.html' -o -name '*.markdown' -o -name '*.md' -o -name '*.patch' -o -name '*.png' -o -name '*.yml' -o -name \"*.ts\" -delete \\\n && find . -type f -path '*/node_modules/sqlite3/deps*' -delete \\\n && find . -type f -path '*/node_modules/knex/build*' -delete \\\n && rm -rf node_modules/sqlite3/node.dtps\nCOPY entry.sh package.json rootfs-overlay/usr/src/app/\nRUN rsync -a --delete node_modules rootfs-overlay /build\nRUN [\"cross-build-end\"]\n# #############################################################################\n#  Minimal runtime image\nFROM balena/$ARCH-supervisor-base:v1.4.7\nARG ARCH\nARG VERSION=master\nARG DEFAULT_MIXPANEL_TOKEN=bananasbananas\nWORKDIR /usr/src/app\nCOPY --from=node-build /usr/src/app/dist ./dist\nCOPY --from=node-deps /build/node_modules ./node_modules\nCOPY --from=node-deps /build/rootfs-overlay/ /\n#  Remove default nproc limit for Avahi for it to work in-container\nCOPY avahi-daemon.conf /etc/avahi/avahi-daemon.conf\nVOLUME /data\nENV CONFIG_MOUNT_POINT=\"/boot/config.json\" \\\n    LED_FILE=\"/dev/null\" \\\n    SUPERVISOR_IMAGE=\"resin/$ARCH-supervisor\" \\\n    VERSION=\"$VERSION\" \\\n    DEFAULT_MIXPANEL_TOKEN=\"$DEFAULT_MIXPANEL_TOKEN\"\nHEALTHCHECK --interval=300s --timeout=30s --start-period=60s --retries=3 CMD wget -qO- http://127.0.0.1:${LISTEN_PORT:-48484}/v1/healthy || exit 1\nCMD [\"./entry.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"0e806fc6977d839cc2fa5acccaa094ae","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG ARCH=amd64\n#   The node version here should match the version of the runtime image which is\n#   specified in the base-image subdirectory in the project\nFROM balenalib/raspberry-pi-node:10-run AS rpi-node-base\nFROM balenalib/armv7hf-node:10-run AS armv7hf-node-base\nFROM balenalib/aarch64-node:10-run AS aarch64-node-base\nRUN [\"cross-build-start\"]\nRUN sed -i '/security.debian.org jessie/d' /etc/apt/sources.list\nRUN [\"cross-build-end\"]\nFROM balenalib/amd64-node:10-run AS amd64-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-node:10-run AS i386-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\nFROM balenalib/i386-nlp-node:6-run AS i386-nlp-node-base\nRUN echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-start \\\n && chmod +x /usr/bin/cross-build-start \\\n && echo '#!/bin/sh\\nexit 0' > /usr/bin/cross-build-end \\\n && chmod +x /usr/bin/cross-build-end\n#   Setup webpack building base images\n#   We always do the webpack build on amd64, cause it's way faster\nFROM amd64-node-base AS rpi-node-build\nFROM amd64-node-base AS amd64-node-build\nFROM amd64-node-base AS armv7hf-node-build\nFROM amd64-node-base AS aarch64-node-build\nFROM amd64-node-base AS i386-node-build\nFROM balenalib/amd64-node:6-build AS i386-nlp-node-build\n#  #############################################################################\nFROM $ARCH-node-build AS node-build\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nCOPY package.json package-lock.json /usr/src/app/\nRUN JOBS=MAX npm ci --no-optional --unsafe-perm || JOBS=MAX npm install --no-optional --unsafe-perm\nCOPY webpack.config.js fix-jsonstream.js hardcode-migrations.js tsconfig.json tsconfig.release.json /usr/src/app/\nCOPY src /usr/src/app/src\nCOPY test /usr/src/app/test\nCOPY typings /usr/src/app/typings\nRUN npm test \\\n && npm run build\n#  #############################################################################\n#   Build nodejs dependencies\nFROM $ARCH-node-base AS node-deps\nARG ARCH\nRUN [\"cross-build-start\"]\nWORKDIR /usr/src/app\nRUN apt-get update \\\n && apt-get install g++ git libsqlite3-dev make python rsync wget -y \\\n && rm -rf /var/lib/apt/lists/\nRUN mkdir -p rootfs-overlay \\\n && ln -s /lib rootfs-overlay/lib64\nCOPY package.json package-lock.json /usr/src/app/\n#   Install only the production modules that have C extensions\nRUN (if [ $ARCH = \"i386-nlp\" ] ; then JOBS=MAX npm install --no-optional --unsafe-perm --production ; else JOBS=MAX npm ci --no-optional --unsafe-perm --production ; fi ) \\\n && npm dedupe\n#   Remove various uneeded filetypes in order to reduce space\n#   We also remove the spurious node.dtps, see https://github.com/mapbox/node-sqlite3/issues/861\nRUN find . -path '*/coverage/*' -o -path '*/test/*' -o -path '*/.nyc_output/*' -o -name '*.tar.*' -o -name '*.in' -o -name '*.cc' -o -name '*.c' -o -name '*.coffee' -o -name '*.eslintrc' -o -name '*.h' -o -name '*.html' -o -name '*.markdown' -o -name '*.md' -o -name '*.patch' -o -name '*.png' -o -name '*.yml' -o -name \"*.ts\" -delete \\\n && find . -type f -path '*/node_modules/sqlite3/deps*' -delete \\\n && find . -type f -path '*/node_modules/knex/build*' -delete \\\n && rm -rf node_modules/sqlite3/node.dtps\nCOPY entry.sh package.json rootfs-overlay/usr/src/app/\nRUN rsync -a --delete node_modules rootfs-overlay /build\nRUN [\"cross-build-end\"]\n#  #############################################################################\n#   Minimal runtime image\nFROM balena/$ARCH-supervisor-base:v1.4.7\nARG ARCH\nARG VERSION=master\nARG DEFAULT_MIXPANEL_TOKEN=bananasbananas\nWORKDIR /usr/src/app\nCOPY --from=node-build /usr/src/app/dist ./dist\nCOPY --from=node-deps /build/node_modules ./node_modules\nCOPY --from=node-deps /build/rootfs-overlay/ /\n#   Remove default nproc limit for Avahi for it to work in-container\nCOPY avahi-daemon.conf /etc/avahi/avahi-daemon.conf\nVOLUME /data\nENV CONFIG_MOUNT_POINT=\"/boot/config.json\" \\\n    LED_FILE=\"/dev/null\" \\\n    SUPERVISOR_IMAGE=\"resin/$ARCH-supervisor\" \\\n    VERSION=\"$VERSION\" \\\n    DEFAULT_MIXPANEL_TOKEN=\"$DEFAULT_MIXPANEL_TOKEN\"\nHEALTHCHECK --interval=300s --timeout=30s --start-period=60s --retries=3 CMD wget -qO- http://127.0.0.1:${LISTEN_PORT:-48484}/v1/healthy || exit 1\nCMD [\"./entry.sh\"]\n","originalDockerfileUglifiedHash":"d6cc1c37f52c6ec78fa469359502137f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/924a56fee7a835516d558949bf536d76f3dd60e7.dockerfile"}