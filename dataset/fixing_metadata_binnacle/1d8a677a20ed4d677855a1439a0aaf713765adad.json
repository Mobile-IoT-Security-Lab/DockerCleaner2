{"seed":3932734871,"processedDockerfileHash":"47b4d6ec819af74a3499f662719c5d06","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 JinkIT LLC, v1k0d3n, and its Authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER bjozsa@jinkit.com\n#   Set buildtime ARGs:\nARG DEBIAN_FRONTED=noninteractive\nARG ARCH=\"amd64\"\nARG VERSION_CNI=\"v0.6.0\"\nARG VERSION_DOCK=\"17.03.2\"\nARG VERSION_HELM=\"v2.7.2\"\nARG VERSION_KUBEADM=\"v1.9.3\"\nARG VERSION_KUBECTL=\"v1.9.3\"\nARG VERSION_KUBELET=\"v1.9.3\"\nARG BOOTSTR_CONF=\"/root/etc/kubeadm-conf.yaml\"\nARG ROOTFS=${ROOTFS:-kubeadm}\n#   Set container ENVs from ARGs:\nENV ARCH=\"${ARCH}\" \\\n    VERSION_CNI=\"${VERSION_CNI}\" \\\n    VERSION_DOCK=\"${VERSION_DOCK}\" \\\n    VERSION_HELM=\"${VERSION_HELM}\" \\\n    VERSION_KUBEADM=\"${VERSION_KUBEADM}\" \\\n    VERSION_KUBECTL=\"${VERSION_KUBECTL}\" \\\n    VERSION_KUBELET=\"${VERSION_KUBELET}\" \\\n    BOOTSTR_CONF=\"${BOOTSTR_CONF}\" \\\n    ROOTFS=\"${ROOTFS}\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    DIR_BIN_CNI=\"/opt/cni/bin\"\nENV container=\"docker\"\nSTOPSIGNAL SIGRTMIN+3\n#   Set variables from ARGS for reuse later:\nRUN set | grep VERSION_ > /.kubeadm.env; set | grep BOOTSTR_ >> /.kubeadm.env; set | grep ROOTFS >> /.kubeadm.env\n#   We don't need no graphical.target here:\nRUN systemctl set-default multi-user.target\n#   Create various directories:\nRUN mkdir -p /opt/${ROOTFS} ; mkdir -p ${ROOTFS}\n#   Add files to container during build process:\nCOPY bin /${ROOTFS}/bin\nCOPY etc /${ROOTFS}/etc\n#   Update/upgrade sources/packages:\nRUN : ; apt-get upgrade -y\n#   Install prereqs:\nRUN (apt-get update ;apt-get install --no-install-recommends apt-transport-https=1.2.35 ca-certificates=20210119~16.04.1 curl=7.47.0-1ubuntu2.19 software-properties-common=0.96.20.10 -y )\n#   Add gpg keys for custom any repos:\nRUN curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n#   Add the custom repos to apt sources:\nRUN chmod +x /${ROOTFS}/bin/repo\nRUN /${ROOTFS}/bin/repo\n#   Update with new sources/repos:\nRUN :\n#   Install packages from those sources:\nRUN (apt-get update ;apt-get install --no-install-recommends ebtables=2.0.10.4-3.4ubuntu2.16.04.2 ethtool=1:4.5-1 kmod=22-1ubuntu5.2 kubernetes-cni libwrap0=7.6.q-25 systemd=229-4ubuntu21.31 tcpd=7.6.q-25 docker-ce=${VERSION_DOCK}~ce-0~ubuntu-xenial -y )\n#   Install libgcrypt11 for CentOS support:\nRUN curl -o /tmp/libgcrypt11_1.5.3.deb -L https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/8993248/+files/libgcrypt11_1.5.3-2ubuntu4.3_amd64.deb ; dpkg -i /tmp/libgcrypt11_1.5.3.deb ; (apt-get update ;apt-get install --no-install-recommends -f )\n#   Separately install any kubeadm requirements:\nRUN (apt-get update ;apt-get install --no-install-recommends socat=1.7.3.1-1 -y )\n#   Clean up apt-cache:\nRUN apt-get clean ; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Download - kubeadm:\nRUN curl -o /${ROOTFS}/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubeadm ; chmod +x /${ROOTFS}/bin/kubeadm\n#   Download - kubectl:\nRUN curl -o /${ROOTFS}/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubectl ; chmod +x /${ROOTFS}/bin/kubectl\n#   Download - kubelet:\nRUN curl -o /${ROOTFS}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubelet ; chmod +x /${ROOTFS}/bin/kubelet\n#   Download - cni:\nRUN mkdir /${ROOTFS}/cni ; curl -o /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/cni/releases/download/${VERSION_CNI}/cni-${ARCH}-${VERSION_CNI}.tgz --location ; curl -o /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/plugins/releases/download/${VERSION_CNI}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz --location ; tar -zxvf /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; tar -zxvf /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; rm -rf /${ROOTFS}/cni-*\n#   Set PATH inside of the container:\nENV PATH=\"/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin:${PATH}\"\n#   Clean directories to read host systemd:\nRUN cd /lib/systemd/system/sysinit.target.wants/ ; ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 rm -f /lib/systemd/system/multi-user.target.wants/* ; rm -f /etc/systemd/system/*.wants/* ; rm -f /lib/systemd/system/local-fs.target.wants/* ; rm -f /lib/systemd/system/sockets.target.wants/*udev* ; rm -f /lib/systemd/system/sockets.target.wants/*initctl* ; rm -f /lib/systemd/system/basic.target.wants/* ; rm -f /lib/systemd/system/anaconda.target.wants/* ; rm -f /lib/systemd/system/plymouth* ; rm -f /lib/systemd/system/systemd-update-utmp*\n#   Well, we are trying to access systemd from here:\nRUN systemctl set-default multi-user.target\nENV init=\"/lib/systemd/systemd\"\n#   WORKDIR \"/opt/${ROOTFS}/etc/kubeadm/\"\n#   VOLUME [\"/opt/${ROOTFS}\"]\n#   Final entrypoint for the container:\n#  CMD [\"kubeadm\", \"init\", \"--config=config.yaml\"]\nCOPY gantry /usr/local/bin/gantry\n#  WORKDIR /opt/${ROOTFS}/etc/kubeadm/\nCMD [\"gantry\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 JinkIT LLC, v1k0d3n, and its Authors.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER bjozsa@jinkit.com\n#  Set buildtime ARGs:\nARG DEBIAN_FRONTED=noninteractive\nARG ARCH=\"amd64\"\nARG VERSION_CNI=\"v0.6.0\"\nARG VERSION_DOCK=\"17.03.2\"\nARG VERSION_HELM=\"v2.7.2\"\nARG VERSION_KUBEADM=\"v1.9.3\"\nARG VERSION_KUBECTL=\"v1.9.3\"\nARG VERSION_KUBELET=\"v1.9.3\"\nARG BOOTSTR_CONF=\"/root/etc/kubeadm-conf.yaml\"\nARG ROOTFS=${ROOTFS:-kubeadm}\n#  Set container ENVs from ARGs:\nENV ARCH=\"${ARCH}\" \\\n    VERSION_CNI=\"${VERSION_CNI}\" \\\n    VERSION_DOCK=\"${VERSION_DOCK}\" \\\n    VERSION_HELM=\"${VERSION_HELM}\" \\\n    VERSION_KUBEADM=\"${VERSION_KUBEADM}\" \\\n    VERSION_KUBECTL=\"${VERSION_KUBECTL}\" \\\n    VERSION_KUBELET=\"${VERSION_KUBELET}\" \\\n    BOOTSTR_CONF=\"${BOOTSTR_CONF}\" \\\n    ROOTFS=\"${ROOTFS}\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    DIR_BIN_CNI=\"/opt/cni/bin\"\nENV container=\"docker\"\nSTOPSIGNAL SIGRTMIN+3\n#  Set variables from ARGS for reuse later:\nRUN set | grep VERSION_ > /.kubeadm.env; set | grep BOOTSTR_ >> /.kubeadm.env; set | grep ROOTFS >> /.kubeadm.env\n#  We don't need no graphical.target here:\nRUN systemctl set-default multi-user.target\n#  Create various directories:\nRUN mkdir -p /opt/${ROOTFS} ; mkdir -p ${ROOTFS}\n#  Add files to container during build process:\nCOPY bin /${ROOTFS}/bin\nCOPY etc /${ROOTFS}/etc\n#  Update/upgrade sources/packages:\nRUN apt-get update ; apt-get upgrade -y\n#  Install prereqs:\nRUN apt-get install apt-transport-https ca-certificates curl software-properties-common -y\n#  Add gpg keys for custom any repos:\nRUN curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n#  Add the custom repos to apt sources:\nRUN chmod +x /${ROOTFS}/bin/repo\nRUN /${ROOTFS}/bin/repo\n#  Update with new sources/repos:\nRUN apt-get update\n#  Install packages from those sources:\nRUN apt-get install ebtables ethtool kmod kubernetes-cni libwrap0 systemd tcpd docker-ce=${VERSION_DOCK}~ce-0~ubuntu-xenial -y\n#  Install libgcrypt11 for CentOS support:\nRUN curl -o /tmp/libgcrypt11_1.5.3.deb -L https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/8993248/+files/libgcrypt11_1.5.3-2ubuntu4.3_amd64.deb ; dpkg -i /tmp/libgcrypt11_1.5.3.deb ; apt-get install -f\n#  Separately install any kubeadm requirements:\nRUN apt-get install socat -y\n#  Clean up apt-cache:\nRUN apt-get clean ; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Download - kubeadm:\nRUN curl -o /${ROOTFS}/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubeadm ; chmod +x /${ROOTFS}/bin/kubeadm\n#  Download - kubectl:\nRUN curl -o /${ROOTFS}/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubectl ; chmod +x /${ROOTFS}/bin/kubectl\n#  Download - kubelet:\nRUN curl -o /${ROOTFS}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubelet ; chmod +x /${ROOTFS}/bin/kubelet\n#  Download - cni:\nRUN mkdir /${ROOTFS}/cni ; curl -o /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/cni/releases/download/${VERSION_CNI}/cni-${ARCH}-${VERSION_CNI}.tgz --location ; curl -o /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/plugins/releases/download/${VERSION_CNI}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz --location ; tar -zxvf /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; tar -zxvf /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; rm -rf /${ROOTFS}/cni-*\n#  Set PATH inside of the container:\nENV PATH=\"/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin:${PATH}\"\n#  Clean directories to read host systemd:\nRUN cd /lib/systemd/system/sysinit.target.wants/ ; ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 rm -f /lib/systemd/system/multi-user.target.wants/* ; rm -f /etc/systemd/system/*.wants/* ; rm -f /lib/systemd/system/local-fs.target.wants/* ; rm -f /lib/systemd/system/sockets.target.wants/*udev* ; rm -f /lib/systemd/system/sockets.target.wants/*initctl* ; rm -f /lib/systemd/system/basic.target.wants/* ; rm -f /lib/systemd/system/anaconda.target.wants/* ; rm -f /lib/systemd/system/plymouth* ; rm -f /lib/systemd/system/systemd-update-utmp*\n#  Well, we are trying to access systemd from here:\nRUN systemctl set-default multi-user.target\nENV init=\"/lib/systemd/systemd\"\n#  WORKDIR \"/opt/${ROOTFS}/etc/kubeadm/\"\n#  VOLUME [\"/opt/${ROOTFS}\"]\n#  Final entrypoint for the container:\n# CMD [\"kubeadm\", \"init\", \"--config=config.yaml\"]\nCOPY gantry /usr/local/bin/gantry\n# WORKDIR /opt/${ROOTFS}/etc/kubeadm/\nCMD [\"gantry\"]\n","injectedSmells":[],"originalDockerfileHash":"7d39aef72cd6a14d8d5b3029ea68c597","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 JinkIT LLC, v1k0d3n, and its Authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER bjozsa@jinkit.com\n#   Set buildtime ARGs:\nARG DEBIAN_FRONTED=noninteractive\nARG ARCH=\"amd64\"\nARG VERSION_CNI=\"v0.6.0\"\nARG VERSION_DOCK=\"17.03.2\"\nARG VERSION_HELM=\"v2.7.2\"\nARG VERSION_KUBEADM=\"v1.9.3\"\nARG VERSION_KUBECTL=\"v1.9.3\"\nARG VERSION_KUBELET=\"v1.9.3\"\nARG BOOTSTR_CONF=\"/root/etc/kubeadm-conf.yaml\"\nARG ROOTFS=${ROOTFS:-kubeadm}\n#   Set container ENVs from ARGs:\nENV ARCH=\"${ARCH}\" \\\n    VERSION_CNI=\"${VERSION_CNI}\" \\\n    VERSION_DOCK=\"${VERSION_DOCK}\" \\\n    VERSION_HELM=\"${VERSION_HELM}\" \\\n    VERSION_KUBEADM=\"${VERSION_KUBEADM}\" \\\n    VERSION_KUBECTL=\"${VERSION_KUBECTL}\" \\\n    VERSION_KUBELET=\"${VERSION_KUBELET}\" \\\n    BOOTSTR_CONF=\"${BOOTSTR_CONF}\" \\\n    ROOTFS=\"${ROOTFS}\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    DIR_BIN_CNI=\"/opt/cni/bin\"\nENV container=\"docker\"\nSTOPSIGNAL SIGRTMIN+3\n#   Set variables from ARGS for reuse later:\nRUN set | grep VERSION_ > /.kubeadm.env; set | grep BOOTSTR_ >> /.kubeadm.env; set | grep ROOTFS >> /.kubeadm.env\n#   We don't need no graphical.target here:\nRUN systemctl set-default multi-user.target\n#   Create various directories:\nRUN mkdir -p /opt/${ROOTFS} ; mkdir -p ${ROOTFS}\n#   Add files to container during build process:\nCOPY bin /${ROOTFS}/bin\nCOPY etc /${ROOTFS}/etc\n#   Update/upgrade sources/packages:\nRUN apt-get update ; apt-get upgrade -y\n#   Install prereqs:\nRUN apt-get install apt-transport-https ca-certificates curl software-properties-common -y\n#   Add gpg keys for custom any repos:\nRUN curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add - ; curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n#   Add the custom repos to apt sources:\nRUN chmod +x /${ROOTFS}/bin/repo\nRUN /${ROOTFS}/bin/repo\n#   Update with new sources/repos:\nRUN apt-get update\n#   Install packages from those sources:\nRUN apt-get install ebtables ethtool kmod kubernetes-cni libwrap0 systemd tcpd docker-ce=${VERSION_DOCK}~ce-0~ubuntu-xenial -y\n#   Install libgcrypt11 for CentOS support:\nRUN curl -o /tmp/libgcrypt11_1.5.3.deb -L https://launchpad.net/~ubuntu-security/+archive/ubuntu/ppa/+build/8993248/+files/libgcrypt11_1.5.3-2ubuntu4.3_amd64.deb ; dpkg -i /tmp/libgcrypt11_1.5.3.deb ; apt-get install -f\n#   Separately install any kubeadm requirements:\nRUN apt-get install socat -y\n#   Clean up apt-cache:\nRUN apt-get clean ; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Download - kubeadm:\nRUN curl -o /${ROOTFS}/bin/kubeadm https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubeadm ; chmod +x /${ROOTFS}/bin/kubeadm\n#   Download - kubectl:\nRUN curl -o /${ROOTFS}/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubectl ; chmod +x /${ROOTFS}/bin/kubectl\n#   Download - kubelet:\nRUN curl -o /${ROOTFS}/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/${VERSION_KUBEADM}/bin/linux/${ARCH}/kubelet ; chmod +x /${ROOTFS}/bin/kubelet\n#   Download - cni:\nRUN mkdir /${ROOTFS}/cni ; curl -o /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/cni/releases/download/${VERSION_CNI}/cni-${ARCH}-${VERSION_CNI}.tgz --location ; curl -o /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz https://github.com/containernetworking/plugins/releases/download/${VERSION_CNI}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz --location ; tar -zxvf /${ROOTFS}/cni-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; tar -zxvf /${ROOTFS}/cni-plugins-${ARCH}-${VERSION_CNI}.tgz -C /${ROOTFS}/cni/ ; rm -rf /${ROOTFS}/cni-*\n#   Set PATH inside of the container:\nENV PATH=\"/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin/app:/opt/${ROOTFS}/bin:${PATH}\"\n#   Clean directories to read host systemd:\nRUN cd /lib/systemd/system/sysinit.target.wants/ ; ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 rm -f /lib/systemd/system/multi-user.target.wants/* ; rm -f /etc/systemd/system/*.wants/* ; rm -f /lib/systemd/system/local-fs.target.wants/* ; rm -f /lib/systemd/system/sockets.target.wants/*udev* ; rm -f /lib/systemd/system/sockets.target.wants/*initctl* ; rm -f /lib/systemd/system/basic.target.wants/* ; rm -f /lib/systemd/system/anaconda.target.wants/* ; rm -f /lib/systemd/system/plymouth* ; rm -f /lib/systemd/system/systemd-update-utmp*\n#   Well, we are trying to access systemd from here:\nRUN systemctl set-default multi-user.target\nENV init=\"/lib/systemd/systemd\"\n#   WORKDIR \"/opt/${ROOTFS}/etc/kubeadm/\"\n#   VOLUME [\"/opt/${ROOTFS}\"]\n#   Final entrypoint for the container:\n#  CMD [\"kubeadm\", \"init\", \"--config=config.yaml\"]\nCOPY gantry /usr/local/bin/gantry\n#  WORKDIR /opt/${ROOTFS}/etc/kubeadm/\nCMD [\"gantry\"]\n","originalDockerfileUglifiedHash":"73941769e13cebc5da59a21981ef47e3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1d8a677a20ed4d677855a1439a0aaf713765adad.dockerfile"}