{"seed":3246482604,"processedDockerfileHash":"1b2c87e2f3220bd051fb7173750dbdb4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:10.0-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl wget unzip git rsync libjpeg-dev dh-autoreconf gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y \\\n && rm -rf /var/lib/apt/lists/*\nENV REPO_DEBS=\"cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb\"\nENV CUDA_CROSS_VERSION=\"10-0\"\nENV CUDA_CROSS_PACKAGES=\"cublas cudart cufft curand cusolver cusparse driver misc-headers npp\"\n#  nvml nvrtc nvgraph\"\nRUN wget https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/4.1.1/xddsn.im/JetPackL4T_4.1.1_b57/16.04/cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb \\\n && dpkg -i $REPO_DEBS \\\n && echo \"for i in $CUDA_CROSS_PACKAGES; do echo \\\"cuda-$i-cross-aarch64-${CUDA_CROSS_VERSION}\\\";done\" | bash > /tmp/cuda-packages.txt \\\n && apt-get update \\\n && apt-get install --no-install-recommends $( cat /tmp/cuda-packages.txt ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /tmp/cuda-packages.txt\n#   Boost\nRUN BOOST_VERSION=1_66_0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION}/boost include/boost\n#   CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#   protobuf v3.5.1\nENV PROTOBUF_VERSION=\"3.5.1\"\nRUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null\nRUN cd /protobuf-${PROTOBUF_VERSION} \\\n && make clean ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --with-protoc=/usr/local/bin/protoc --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j$( nproc ;) install \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\nENV JPEG_TURBO_VERSION=\"1.5.3\"\nRUN curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd /libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && autoreconf -fiv \\\n && ./configure --disable-shared CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#   OpenCV\nENV OPENCV_VERSION=\"3.4.3\"\nRUN curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ -DBUILD_SHARED_LIBS=OFF -DBUILD_LIST=core,improc,imgcodecs -DBUILD_PNG=ON -DBUILD_TIFF=OFF -DBUILD_TBB=OFF -DBUILD_WEBP=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_JASPER=OFF -DBUILD_ZLIB=ON -DBUILD_EXAMPLES=OFF -DBUILD_FFMPEG=ON -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=OFF -DENABLE_NEON=OFF -DWITH_PROTOBUF=OFF -DWITH_PTHREADS_PF=OFF -DWITH_OPENCL=OFF -DWITH_OPENMP=OFF -DWITH_FFMPEG=OFF -DWITH_GSTREAMER=OFF -DWITH_GSTREAMER_0_10=OFF -DWITH_CUDA=OFF -DWITH_GTK=OFF -DWITH_VTK=OFF -DWITH_TBB=OFF -DWITH_1394=OFF -DWITH_OPENEXR=OFF -DINSTALL_C_EXAMPLES=OFF -DINSTALL_TESTS=OFF -DVIBRANTE=TRUE VERBOSE=1 ../ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nVOLUME /dali\nWORKDIR /dali\nENV PATH=\"/usr/local/cuda-10.0/bin:$PATH\"\nARG DALI_BUILD_DIR=build_aarch64_linux\nWORKDIR /dali/${DALI_BUILD_DIR}\nCMD cmake -DWERROR=ON -DCMAKE_TOOLCHAIN_FILE:STRING=\"$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake\" -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=./install -DARCH=aarch64-linux -DCUDA_HOST=/usr/local/cuda-10.0 -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-linux -DBUILD_TEST=ON -DBUILD_BENCHMARK=OFF -DBUILD_NVTX=OFF -DBUILD_PYTHON=OFF -DBUILD_LMDB=OFF -DBUILD_TENSORFLOW=OFF -DBUILD_JPEG_TURBO=ON -DBUILD_NVJPEG=OFF -DBUILD_NVOF=OFF -DBUILD_NVDEC=OFF -DBUILD_NVML=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:10.0-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl wget unzip git rsync libjpeg-dev dh-autoreconf gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y \\\n && rm -rf /var/lib/apt/lists/*\nENV REPO_DEBS=\"cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb\"\nENV CUDA_CROSS_VERSION=\"10-0\"\nENV CUDA_CROSS_PACKAGES=\"cublas cudart cufft curand cusolver cusparse driver misc-headers npp\"\n# nvml nvrtc nvgraph\"\nRUN wget https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/4.1.1/xddsn.im/JetPackL4T_4.1.1_b57/16.04/cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb \\\n && dpkg -i $REPO_DEBS \\\n && echo \"for i in $CUDA_CROSS_PACKAGES; do echo \\\"cuda-$i-cross-aarch64-${CUDA_CROSS_VERSION}\\\";done\" | bash > /tmp/cuda-packages.txt \\\n && apt-get update \\\n && apt-get install $( cat /tmp/cuda-packages.txt ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /tmp/cuda-packages.txt\n#  Boost\nRUN BOOST_VERSION=1_66_0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION}/boost include/boost\n#  CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#  protobuf v3.5.1\nENV PROTOBUF_VERSION=\"3.5.1\"\nRUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null\nRUN cd /protobuf-${PROTOBUF_VERSION} \\\n && make clean ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --with-protoc=/usr/local/bin/protoc --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j$( nproc ;) install \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\nENV JPEG_TURBO_VERSION=\"1.5.3\"\nRUN curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd /libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && autoreconf -fiv \\\n && ./configure --disable-shared CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#  OpenCV\nENV OPENCV_VERSION=\"3.4.3\"\nRUN curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ -DBUILD_SHARED_LIBS=OFF -DBUILD_LIST=core,improc,imgcodecs -DBUILD_PNG=ON -DBUILD_TIFF=OFF -DBUILD_TBB=OFF -DBUILD_WEBP=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_JASPER=OFF -DBUILD_ZLIB=ON -DBUILD_EXAMPLES=OFF -DBUILD_FFMPEG=ON -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=OFF -DENABLE_NEON=OFF -DWITH_PROTOBUF=OFF -DWITH_PTHREADS_PF=OFF -DWITH_OPENCL=OFF -DWITH_OPENMP=OFF -DWITH_FFMPEG=OFF -DWITH_GSTREAMER=OFF -DWITH_GSTREAMER_0_10=OFF -DWITH_CUDA=OFF -DWITH_GTK=OFF -DWITH_VTK=OFF -DWITH_TBB=OFF -DWITH_1394=OFF -DWITH_OPENEXR=OFF -DINSTALL_C_EXAMPLES=OFF -DINSTALL_TESTS=OFF -DVIBRANTE=TRUE VERBOSE=1 ../ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nVOLUME /dali\nWORKDIR /dali\nENV PATH=\"/usr/local/cuda-10.0/bin:$PATH\"\nARG DALI_BUILD_DIR=build_aarch64_linux\nWORKDIR /dali/${DALI_BUILD_DIR}\nCMD cmake -DWERROR=ON -DCMAKE_TOOLCHAIN_FILE:STRING=\"$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake\" -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=./install -DARCH=aarch64-linux -DCUDA_HOST=/usr/local/cuda-10.0 -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-linux -DBUILD_TEST=ON -DBUILD_BENCHMARK=OFF -DBUILD_NVTX=OFF -DBUILD_PYTHON=OFF -DBUILD_LMDB=OFF -DBUILD_TENSORFLOW=OFF -DBUILD_JPEG_TURBO=ON -DBUILD_NVJPEG=OFF -DBUILD_NVOF=OFF -DBUILD_NVDEC=OFF -DBUILD_NVML=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\"\n","injectedSmells":[],"originalDockerfileHash":"860c148cd82aefcf43a4ea80c18164ac","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:10.0-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl wget unzip git rsync libjpeg-dev dh-autoreconf gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y \\\n && rm -rf /var/lib/apt/lists/*\nENV REPO_DEBS=\"cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb\"\nENV CUDA_CROSS_VERSION=\"10-0\"\nENV CUDA_CROSS_PACKAGES=\"cublas cudart cufft curand cusolver cusparse driver misc-headers npp\"\n#  nvml nvrtc nvgraph\"\nRUN wget https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/4.1.1/xddsn.im/JetPackL4T_4.1.1_b57/16.04/cuda-repo-ubuntu1604-10-0-local-10.0.117-410.38_1.0-1_amd64.deb \\\n && dpkg -i $REPO_DEBS \\\n && echo \"for i in $CUDA_CROSS_PACKAGES; do echo \\\"cuda-$i-cross-aarch64-${CUDA_CROSS_VERSION}\\\";done\" | bash > /tmp/cuda-packages.txt \\\n && apt-get update \\\n && apt-get install $( cat /tmp/cuda-packages.txt ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /tmp/cuda-packages.txt\n#   Boost\nRUN BOOST_VERSION=1_66_0 \\\n && cd /usr/local \\\n && curl -L https://dl.bintray.com/boostorg/release/1.66.0/source/boost_${BOOST_VERSION}.tar.gz | tar -xzf - \\\n && ln -s ../boost_${BOOST_VERSION}/boost include/boost\n#   CMake\nRUN CMAKE_VERSION=3.11 \\\n && CMAKE_BUILD=3.11.0 \\\n && curl -L https://cmake.org/files/v${CMAKE_VERSION}/cmake-${CMAKE_BUILD}.tar.gz | tar -xzf - \\\n && cd /cmake-${CMAKE_BUILD} \\\n && ./bootstrap --parallel=$( grep ^processor /proc/cpuinfo | wc -l ;) \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /cmake-${CMAKE_BUILD}\n#   protobuf v3.5.1\nENV PROTOBUF_VERSION=\"3.5.1\"\nRUN curl -L https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-all-${PROTOBUF_VERSION}.tar.gz | tar -xzf - \\\n && cd /protobuf-${PROTOBUF_VERSION} \\\n && ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" --prefix=/usr/local --disable-shared 2>&1 > /dev/null \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install 2>&1 > /dev/null\nRUN cd /protobuf-${PROTOBUF_VERSION} \\\n && make clean ./autogen.sh \\\n && ./configure CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --with-protoc=/usr/local/bin/protoc --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j$( nproc ;) install \\\n && rm -rf /protobuf-${PROTOBUF_VERSION}\nENV JPEG_TURBO_VERSION=\"1.5.3\"\nRUN curl -L https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${JPEG_TURBO_VERSION}.tar.gz | tar -xzf - \\\n && cd /libjpeg-turbo-${JPEG_TURBO_VERSION} \\\n && autoreconf -fiv \\\n && ./configure --disable-shared CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ --host=aarch64-unknown-linux-gnu --prefix=/usr/aarch64-linux-gnu/ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /libjpeg-turbo-${JPEG_TURBO_VERSION}\n#   OpenCV\nENV OPENCV_VERSION=\"3.4.3\"\nRUN curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xzf - \\\n && cd /opencv-${OPENCV_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PWD/../platforms/linux/aarch64-gnu.toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu/ -DBUILD_SHARED_LIBS=OFF -DBUILD_LIST=core,improc,imgcodecs -DBUILD_PNG=ON -DBUILD_TIFF=OFF -DBUILD_TBB=OFF -DBUILD_WEBP=OFF -DBUILD_JPEG=OFF -DWITH_JPEG=ON -DBUILD_JASPER=OFF -DBUILD_ZLIB=ON -DBUILD_EXAMPLES=OFF -DBUILD_FFMPEG=ON -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=OFF -DENABLE_NEON=OFF -DWITH_PROTOBUF=OFF -DWITH_PTHREADS_PF=OFF -DWITH_OPENCL=OFF -DWITH_OPENMP=OFF -DWITH_FFMPEG=OFF -DWITH_GSTREAMER=OFF -DWITH_GSTREAMER_0_10=OFF -DWITH_CUDA=OFF -DWITH_GTK=OFF -DWITH_VTK=OFF -DWITH_TBB=OFF -DWITH_1394=OFF -DWITH_OPENEXR=OFF -DINSTALL_C_EXAMPLES=OFF -DINSTALL_TESTS=OFF -DVIBRANTE=TRUE VERBOSE=1 ../ \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\" install \\\n && rm -rf /opencv-${OPENCV_VERSION}\nVOLUME /dali\nWORKDIR /dali\nENV PATH=\"/usr/local/cuda-10.0/bin:$PATH\"\nARG DALI_BUILD_DIR=build_aarch64_linux\nWORKDIR /dali/${DALI_BUILD_DIR}\nCMD cmake -DWERROR=ON -DCMAKE_TOOLCHAIN_FILE:STRING=\"$PWD/../platforms/aarch64-linux/aarch64-linux.toolchain.cmake\" -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=./install -DARCH=aarch64-linux -DCUDA_HOST=/usr/local/cuda-10.0 -DCUDA_TARGET=/usr/local/cuda-10.0/targets/aarch64-linux -DBUILD_TEST=ON -DBUILD_BENCHMARK=OFF -DBUILD_NVTX=OFF -DBUILD_PYTHON=OFF -DBUILD_LMDB=OFF -DBUILD_TENSORFLOW=OFF -DBUILD_JPEG_TURBO=ON -DBUILD_NVJPEG=OFF -DBUILD_NVOF=OFF -DBUILD_NVDEC=OFF -DBUILD_NVML=OFF .. \\\n && make -j\"$( grep ^processor /proc/cpuinfo | wc -l ;)\"\n","originalDockerfileUglifiedHash":"c4e91ecc748912e884cbcea9f0fe677e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fe3e561cf03483f9f8d4b8b220bbf12e172cbc24.dockerfile"}