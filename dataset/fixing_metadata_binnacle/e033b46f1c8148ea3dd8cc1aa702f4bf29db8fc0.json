{"seed":3752935119,"processedDockerfileHash":"d8c07d9c3612edd5110f4f3d48f06e3e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim: ft=dockerfile:\n#   Dockerfile to build nghttp2 android binary\n#\n#   $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#   After successful build, android binaries are located under\n#   /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#   example, to copy nghttpx binary to host file system location\n#   /path/to/dest, do this:\n#\n#   $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\n#   Only use standalone-toolchain for reduce size\nFROM ubuntu:xenial\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\nENV NDK_VERSION=\"r14b\"\nWORKDIR /root\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip=6.0-20ubuntu1.1 make=4.1-6 binutils=2.26.1-1ubuntu1~16.04.8 autoconf=2.69-9 automake=1:1.15-4ubuntu1 autotools-dev=20150820.1 libtool=2.4.6-0.1 pkg-config=0.29.1-0ubuntu1 git=1:2.7.4-0ubuntu1.10 curl=7.47.0-1ubuntu2.19 dpkg-dev=1.18.4ubuntu1.7 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 genisoimage=9:1.1.11-3ubuntu1 libc6-i386=2.23-0ubuntu11.3 lib32stdc++6=5.4.0-6ubuntu1~16.04.12 python=2.7.12-1~16.04 -y \\\n && rm -rf /var/cache/apk/*\n#   Install toolchain\nRUN curl -L -O https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && unzip -q android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && rm android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && mkdir -p $ANDROID_HOME/toolchain \\\n && $ANDROID_HOME/android-ndk-$NDK_VERSION/build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --force \\\n && rm -r android-ndk-$NDK_VERSION\nENV PREFIX=\"/root/usr/local\"\n#   Setup version of libraries\nENV OPENSSL_VERSION=\"1.0.2d\"\nENV SPDYLAY_VERSION=\"v1.4.0\"\nENV LIBEV_VERSION=\"4.19\"\nENV ZLIB_VERSION=\"1.2.8\"\nENV CARES_VERSION=\"1.13.0\"\nENV NGHTTP2_VERSION=\"v1.24.0\"\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay -b $SPDYLAY_VERSION --depth 1\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz \\\n && tar xf openssl-$OPENSSL_VERSION.tar.gz \\\n && rm openssl-$OPENSSL_VERSION.tar.gz\nWORKDIR /root/build/openssl-$OPENSSL_VERSION\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/Attic/libev-$LIBEV_VERSION.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-$LIBEV_VERSION.tar.gz \\\n && rm libev-$LIBEV_VERSION.tar.gz\nWORKDIR /root/build/libev-$LIBEV_VERSION\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://downloads.sourceforge.net/project/libpng/zlib/$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz \\\n && tar xf zlib-$ZLIB_VERSION.tar.gz \\\n && rm zlib-$ZLIB_VERSION.tar.gz\nWORKDIR /root/build/zlib-$ZLIB_VERSION\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://c-ares.haxx.se/download/c-ares-$CARES_VERSION.tar.gz \\\n && tar xf c-ares-$CARES_VERSION.tar.gz \\\n && rm c-ares-$CARES_VERSION.tar.gz\nWORKDIR /root/build/c-ares-$CARES_VERSION\nRUN ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2 -b $NGHTTP2_VERSION --depth 1\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --enable-app --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads CC=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang CXX=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang++ CPPFLAGS=\"-fPIE -I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim: ft=dockerfile:\n#  Dockerfile to build nghttp2 android binary\n#\n#  $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#  After successful build, android binaries are located under\n#  /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#  example, to copy nghttpx binary to host file system location\n#  /path/to/dest, do this:\n#\n#  $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\n#  Only use standalone-toolchain for reduce size\nFROM ubuntu:xenial\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\nENV NDK_VERSION=\"r14b\"\nWORKDIR /root\nRUN apt-get update \\\n && apt-get install unzip make binutils autoconf automake autotools-dev libtool pkg-config git curl dpkg-dev libxml2-dev genisoimage libc6-i386 lib32stdc++6 python -y \\\n && rm -rf /var/cache/apk/*\n#  Install toolchain\nRUN curl -L -O https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && unzip -q android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && rm android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && mkdir -p $ANDROID_HOME/toolchain \\\n && $ANDROID_HOME/android-ndk-$NDK_VERSION/build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --force \\\n && rm -r android-ndk-$NDK_VERSION\nENV PREFIX=\"/root/usr/local\"\n#  Setup version of libraries\nENV OPENSSL_VERSION=\"1.0.2d\"\nENV SPDYLAY_VERSION=\"v1.4.0\"\nENV LIBEV_VERSION=\"4.19\"\nENV ZLIB_VERSION=\"1.2.8\"\nENV CARES_VERSION=\"1.13.0\"\nENV NGHTTP2_VERSION=\"v1.24.0\"\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay -b $SPDYLAY_VERSION --depth 1\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz \\\n && tar xf openssl-$OPENSSL_VERSION.tar.gz \\\n && rm openssl-$OPENSSL_VERSION.tar.gz\nWORKDIR /root/build/openssl-$OPENSSL_VERSION\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/Attic/libev-$LIBEV_VERSION.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-$LIBEV_VERSION.tar.gz \\\n && rm libev-$LIBEV_VERSION.tar.gz\nWORKDIR /root/build/libev-$LIBEV_VERSION\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://downloads.sourceforge.net/project/libpng/zlib/$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz \\\n && tar xf zlib-$ZLIB_VERSION.tar.gz \\\n && rm zlib-$ZLIB_VERSION.tar.gz\nWORKDIR /root/build/zlib-$ZLIB_VERSION\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://c-ares.haxx.se/download/c-ares-$CARES_VERSION.tar.gz \\\n && tar xf c-ares-$CARES_VERSION.tar.gz \\\n && rm c-ares-$CARES_VERSION.tar.gz\nWORKDIR /root/build/c-ares-$CARES_VERSION\nRUN ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2 -b $NGHTTP2_VERSION --depth 1\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --enable-app --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads CC=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang CXX=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang++ CPPFLAGS=\"-fPIE -I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\n","injectedSmells":[],"originalDockerfileHash":"a558c6f7a9db1041a1c2b869dfb13ecf","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim: ft=dockerfile:\n#   Dockerfile to build nghttp2 android binary\n#\n#   $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#   After successful build, android binaries are located under\n#   /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#   example, to copy nghttpx binary to host file system location\n#   /path/to/dest, do this:\n#\n#   $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\n#   Only use standalone-toolchain for reduce size\nFROM ubuntu:xenial\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\nENV NDK_VERSION=\"r14b\"\nWORKDIR /root\nRUN apt-get update \\\n && apt-get install unzip make binutils autoconf automake autotools-dev libtool pkg-config git curl dpkg-dev libxml2-dev genisoimage libc6-i386 lib32stdc++6 python -y \\\n && rm -rf /var/cache/apk/*\n#   Install toolchain\nRUN curl -L -O https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && unzip -q android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && rm android-ndk-$NDK_VERSION-linux-x86_64.zip \\\n && mkdir -p $ANDROID_HOME/toolchain \\\n && $ANDROID_HOME/android-ndk-$NDK_VERSION/build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --force \\\n && rm -r android-ndk-$NDK_VERSION\nENV PREFIX=\"/root/usr/local\"\n#   Setup version of libraries\nENV OPENSSL_VERSION=\"1.0.2d\"\nENV SPDYLAY_VERSION=\"v1.4.0\"\nENV LIBEV_VERSION=\"4.19\"\nENV ZLIB_VERSION=\"1.2.8\"\nENV CARES_VERSION=\"1.13.0\"\nENV NGHTTP2_VERSION=\"v1.24.0\"\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay -b $SPDYLAY_VERSION --depth 1\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz \\\n && tar xf openssl-$OPENSSL_VERSION.tar.gz \\\n && rm openssl-$OPENSSL_VERSION.tar.gz\nWORKDIR /root/build/openssl-$OPENSSL_VERSION\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/Attic/libev-$LIBEV_VERSION.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-$LIBEV_VERSION.tar.gz \\\n && rm libev-$LIBEV_VERSION.tar.gz\nWORKDIR /root/build/libev-$LIBEV_VERSION\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://downloads.sourceforge.net/project/libpng/zlib/$ZLIB_VERSION/zlib-$ZLIB_VERSION.tar.gz \\\n && tar xf zlib-$ZLIB_VERSION.tar.gz \\\n && rm zlib-$ZLIB_VERSION.tar.gz\nWORKDIR /root/build/zlib-$ZLIB_VERSION\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://c-ares.haxx.se/download/c-ares-$CARES_VERSION.tar.gz \\\n && tar xf c-ares-$CARES_VERSION.tar.gz \\\n && rm c-ares-$CARES_VERSION.tar.gz\nWORKDIR /root/build/c-ares-$CARES_VERSION\nRUN ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2 -b $NGHTTP2_VERSION --depth 1\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --enable-app --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads CC=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang CXX=\"$TOOLCHAIN\"/bin/arm-linux-androideabi-clang++ CPPFLAGS=\"-fPIE -I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\n","originalDockerfileUglifiedHash":"55e770811e58260d903b68a789147e82","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e033b46f1c8148ea3dd8cc1aa702f4bf29db8fc0.dockerfile"}