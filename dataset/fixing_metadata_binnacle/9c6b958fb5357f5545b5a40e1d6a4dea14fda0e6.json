{"seed":1517324178,"processedDockerfileHash":"c2f0e063020f073451babdc4e64b4314","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM openjdk:8u171-jdk-slim\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\" \\\n    NODE_VERSION=\"7.10.0\" \\\n    ANDROID_HOME=\"/home/user/android-sdk-linux\" \\\n    SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\" \\\n    PATH=\"${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:/home/user/opt/node/bin:${PATH}\"\nARG CI_HELPER_VERSION\nARG MODD_VERSION\n#   ——————————\n#   Install base software packages\n#   ——————————\nRUN echo \"Starting ...\" \\\n && echo \"Updating packages using sources :\" \\\n && cat /etc/apt/sources.list \\\n && apt-get -qq clean \\\n && apt-get update -qq \\\n && echo \"Install base\" \\\n && apt-get install --no-install-recommends build-essential curl git subversion make mercurial openssh-client software-properties-common automake python-dev python-setuptools unzip -qq -y \\\n && echo \"Done Install base!\"\n#   ——————————\n#   Install CI Helper\n#   ——————————\nRUN echo \"Install CI Helper\" \\\n && curl -sSL https://github.com/rande/gitlab-ci-helper/releases/download/${CI_HELPER_VERSION}/linux-amd64-gitlab-ci-helper -o /usr/bin/ci-helper \\\n && chmod 755 /usr/bin/ci-helper \\\n && echo \"Done Install CI Helper\"\n#   ——————————\n#   Install Modd\n#   ——————————\nRUN echo \"Install Modd\" \\\n && curl -sSL https://github.com/cortesi/modd/releases/download/v${MODD_VERSION}/modd-${MODD_VERSION}-linux64.tgz | tar -xOvzf - modd-${MODD_VERSION}-linux64/modd > /usr/bin/modd \\\n && chmod 755 /usr/bin/modd \\\n && echo \"Done Install Modd\"\n#   ——————————\n#   Install AWS\n#   ——————————\nRUN echo \"Install AWS\" \\\n && apt-get install --no-install-recommends python-pip groff-base -qq -y \\\n && pip install awscli==1.27.114 -q -U \\\n && echo \"Done Install AWS!\"\n#   ——————————\n#   Setup Java 8\n#   ——————————\nRUN echo \"Removing unnecessary JDK 8 binaries and libraries ...\" \\\n && rm -rf /usr/lib/jvm/java-8-openjdk-amd64/*src.zip /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/javaws /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*javafx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*jfx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libdecora_sse.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libfxplugins.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libglass.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libgstreamer-lite.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjavafx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjfx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libprism_*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/deploy* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/desktop /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/javaws.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/plugin.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/plugin /usr/lib/jvm/java-8-openjdk-amd64/lib/*javafx* \\\n && export PATH=$PATH:/docker-java-home\n#   ——————————\n#   Installs i386 architecture required for running 32 bit Android tools\n#   —————————\nRUN dpkg --add-architecture i386 \\\n && apt-get update -qq -y \\\n && apt-get install --no-install-recommends libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 -qq -y\n#   ——————————\n#   Update certificates\n#   ——————————\nRUN update-ca-certificates --fresh\n#   ——————————\n#   Create a non-root user\n#   ——————————\nRUN useradd -m user\nUSER user\nWORKDIR /home/user\n#   ——————————\n#   Download Android SDK\n#   ——————————\nRUN mkdir \"$ANDROID_HOME\" .android \\\n && cd \"$ANDROID_HOME\" \\\n && curl -sSL -o sdk.zip $SDK_URL > /dev/null \\\n && unzip -qq sdk.zip \\\n && rm sdk.zip \\\n && yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\n#   ——————————\n#   Install Node and global packages\n#   ——————————\nRUN cd \\\n && curl -sSL -O http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz > /dev/null \\\n && tar -xzf node-v${NODE_VERSION}-linux-x64.tar.gz \\\n && mkdir opt \\\n && mv node-v${NODE_VERSION}-linux-x64 /home/user/opt/node \\\n && rm node-v${NODE_VERSION}-linux-x64.tar.gz\n#   ——————————\n#   Installs FB Watchman\n#   ——————————\nRUN git clone -b v4.7.0 https://github.com/facebook/watchman.git /home/user/tmp/watchman\nWORKDIR /home/user/tmp/watchman\nRUN ./autogen.sh\nRUN ./configure\nRUN make\nUSER root\nRUN make install\nUSER user\n#   ——————————\n#   Install Basic React-Native packages\n#   ——————————\nRUN npm install react-native-cli@2.0.1 -g\nRUN npm install rnpm@1.9.0 -g\nRUN npm install yarn@1.22.19 -g\n#   ——————————\n#   Mime types\n#   ——————————\nUSER root\nRUN echo \"Adding an up to date mime-types definition file\" \\\n && curl -sSL https://salsa.debian.org/debian/mime-support/raw/master/mime.types -o /etc/mime.types\n#   ——————————\n#   Clean files\n#   ——————————\nUSER root\nRUN echo \"Cleaning files!\" \\\n && rm -rf /tmp/* \\\n && apt-get -y remove --purge dpkg-dev fakeroot file manpages manpages-dev python-pip patch xauth xz-utils \\\n && apt-get -qq -y autoremove \\\n && apt-get -qq clean \\\n && apt-get -qq purge \\\n && rm -rf /var/lib/apt/lists/* /var/lib/dpkg/*-old \\\n && rm -rf /usr/share/doc /usr/share/locale/[a-df-z]* /usr/share/locale/e[a-lo-z]* /usr/share/locale/en@* /usr/share/locale/en_GB\nUSER user\nENV LANG=\"en_US.UTF-8\"\nWORKDIR /home/user/data\n#   Expose ports\nEXPOSE 8080/tcp\nEXPOSE 8082/tcp\nEXPOSE 8081/tcp\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM openjdk:8u171-jdk-slim\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\" \\\n    NODE_VERSION=\"7.10.0\" \\\n    ANDROID_HOME=\"/home/user/android-sdk-linux\" \\\n    SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\" \\\n    PATH=\"${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:/home/user/opt/node/bin:${PATH}\"\nARG CI_HELPER_VERSION\nARG MODD_VERSION\n#  ——————————\n#  Install base software packages\n#  ——————————\nRUN echo \"Starting ...\" \\\n && echo \"Updating packages using sources :\" \\\n && cat /etc/apt/sources.list \\\n && apt-get -qq clean \\\n && apt-get update -qq \\\n && echo \"Install base\" \\\n && apt-get install build-essential curl git subversion make mercurial openssh-client software-properties-common automake python-dev python-setuptools unzip -qq -y \\\n && echo \"Done Install base!\"\n#  ——————————\n#  Install CI Helper\n#  ——————————\nRUN echo \"Install CI Helper\" \\\n && curl -sSL https://github.com/rande/gitlab-ci-helper/releases/download/${CI_HELPER_VERSION}/linux-amd64-gitlab-ci-helper -o /usr/bin/ci-helper \\\n && chmod 755 /usr/bin/ci-helper \\\n && echo \"Done Install CI Helper\"\n#  ——————————\n#  Install Modd\n#  ——————————\nRUN echo \"Install Modd\" \\\n && curl -sSL https://github.com/cortesi/modd/releases/download/v${MODD_VERSION}/modd-${MODD_VERSION}-linux64.tgz | tar -xOvzf - modd-${MODD_VERSION}-linux64/modd > /usr/bin/modd \\\n && chmod 755 /usr/bin/modd \\\n && echo \"Done Install Modd\"\n#  ——————————\n#  Install AWS\n#  ——————————\nRUN echo \"Install AWS\" \\\n && apt-get install python-pip groff-base -qq -y \\\n && pip install awscli -q -U \\\n && echo \"Done Install AWS!\"\n#  ——————————\n#  Setup Java 8\n#  ——————————\nRUN echo \"Removing unnecessary JDK 8 binaries and libraries ...\" \\\n && rm -rf /usr/lib/jvm/java-8-openjdk-amd64/*src.zip /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/javaws /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*javafx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*jfx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libdecora_sse.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libfxplugins.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libglass.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libgstreamer-lite.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjavafx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjfx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libprism_*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/deploy* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/desktop /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/javaws.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/plugin.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/plugin /usr/lib/jvm/java-8-openjdk-amd64/lib/*javafx* \\\n && export PATH=$PATH:/docker-java-home\n#  ——————————\n#  Installs i386 architecture required for running 32 bit Android tools\n#  —————————\nRUN dpkg --add-architecture i386 \\\n && apt-get update -qq -y \\\n && apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 -qq -y\n#  ——————————\n#  Update certificates\n#  ——————————\nRUN update-ca-certificates --fresh\n#  ——————————\n#  Create a non-root user\n#  ——————————\nRUN useradd -m user\nUSER user\nWORKDIR /home/user\n#  ——————————\n#  Download Android SDK\n#  ——————————\nRUN mkdir \"$ANDROID_HOME\" .android \\\n && cd \"$ANDROID_HOME\" \\\n && curl -sSL -o sdk.zip $SDK_URL > /dev/null \\\n && unzip -qq sdk.zip \\\n && rm sdk.zip \\\n && yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\n#  ——————————\n#  Install Node and global packages\n#  ——————————\nRUN cd \\\n && curl -sSL -O http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz > /dev/null \\\n && tar -xzf node-v${NODE_VERSION}-linux-x64.tar.gz \\\n && mkdir opt \\\n && mv node-v${NODE_VERSION}-linux-x64 /home/user/opt/node \\\n && rm node-v${NODE_VERSION}-linux-x64.tar.gz\n#  ——————————\n#  Installs FB Watchman\n#  ——————————\nRUN git clone -b v4.7.0 https://github.com/facebook/watchman.git /home/user/tmp/watchman\nWORKDIR /home/user/tmp/watchman\nRUN ./autogen.sh\nRUN ./configure\nRUN make\nUSER root\nRUN make install\nUSER user\n#  ——————————\n#  Install Basic React-Native packages\n#  ——————————\nRUN npm install react-native-cli -g\nRUN npm install rnpm -g\nRUN npm install yarn -g\n#  ——————————\n#  Mime types\n#  ——————————\nUSER root\nRUN echo \"Adding an up to date mime-types definition file\" \\\n && curl -sSL https://salsa.debian.org/debian/mime-support/raw/master/mime.types -o /etc/mime.types\n#  ——————————\n#  Clean files\n#  ——————————\nUSER root\nRUN echo \"Cleaning files!\" \\\n && rm -rf /tmp/* \\\n && apt-get -y remove --purge dpkg-dev fakeroot file manpages manpages-dev python-pip patch xauth xz-utils \\\n && apt-get -qq -y autoremove \\\n && apt-get -qq clean \\\n && apt-get -qq purge \\\n && rm -rf /var/lib/apt/lists/* /var/lib/dpkg/*-old \\\n && rm -rf /usr/share/doc /usr/share/locale/[a-df-z]* /usr/share/locale/e[a-lo-z]* /usr/share/locale/en@* /usr/share/locale/en_GB\nUSER user\nENV LANG=\"en_US.UTF-8\"\nWORKDIR /home/user/data\n#  Expose ports\nEXPOSE 8080/tcp\nEXPOSE 8082/tcp\nEXPOSE 8081/tcp\n","injectedSmells":[],"originalDockerfileHash":"dab1170f1e6694ca16ae82ea5a708792","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM openjdk:8u171-jdk-slim\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    LANG=\"C.UTF-8\" \\\n    NODE_VERSION=\"7.10.0\" \\\n    ANDROID_HOME=\"/home/user/android-sdk-linux\" \\\n    SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip\" \\\n    PATH=\"${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:/home/user/opt/node/bin:${PATH}\"\nARG CI_HELPER_VERSION\nARG MODD_VERSION\n#   ——————————\n#   Install base software packages\n#   ——————————\nRUN echo \"Starting ...\" \\\n && echo \"Updating packages using sources :\" \\\n && cat /etc/apt/sources.list \\\n && apt-get -qq clean \\\n && apt-get update -qq \\\n && echo \"Install base\" \\\n && apt-get install build-essential curl git subversion make mercurial openssh-client software-properties-common automake python-dev python-setuptools unzip -qq -y \\\n && echo \"Done Install base!\"\n#   ——————————\n#   Install CI Helper\n#   ——————————\nRUN echo \"Install CI Helper\" \\\n && curl -sSL https://github.com/rande/gitlab-ci-helper/releases/download/${CI_HELPER_VERSION}/linux-amd64-gitlab-ci-helper -o /usr/bin/ci-helper \\\n && chmod 755 /usr/bin/ci-helper \\\n && echo \"Done Install CI Helper\"\n#   ——————————\n#   Install Modd\n#   ——————————\nRUN echo \"Install Modd\" \\\n && curl -sSL https://github.com/cortesi/modd/releases/download/v${MODD_VERSION}/modd-${MODD_VERSION}-linux64.tgz | tar -xOvzf - modd-${MODD_VERSION}-linux64/modd > /usr/bin/modd \\\n && chmod 755 /usr/bin/modd \\\n && echo \"Done Install Modd\"\n#   ——————————\n#   Install AWS\n#   ——————————\nRUN echo \"Install AWS\" \\\n && apt-get install python-pip groff-base -qq -y \\\n && pip install awscli -q -U \\\n && echo \"Done Install AWS!\"\n#   ——————————\n#   Setup Java 8\n#   ——————————\nRUN echo \"Removing unnecessary JDK 8 binaries and libraries ...\" \\\n && rm -rf /usr/lib/jvm/java-8-openjdk-amd64/*src.zip /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/javaws /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*javafx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/*jfx* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libdecora_sse.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libfxplugins.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libglass.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libgstreamer-lite.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjavafx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjfx*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libprism_*.so /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/deploy* /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/desktop /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/javaws.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/plugin.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/plugin /usr/lib/jvm/java-8-openjdk-amd64/lib/*javafx* \\\n && export PATH=$PATH:/docker-java-home\n#   ——————————\n#   Installs i386 architecture required for running 32 bit Android tools\n#   —————————\nRUN dpkg --add-architecture i386 \\\n && apt-get update -qq -y \\\n && apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 -qq -y\n#   ——————————\n#   Update certificates\n#   ——————————\nRUN update-ca-certificates --fresh\n#   ——————————\n#   Create a non-root user\n#   ——————————\nRUN useradd -m user\nUSER user\nWORKDIR /home/user\n#   ——————————\n#   Download Android SDK\n#   ——————————\nRUN mkdir \"$ANDROID_HOME\" .android \\\n && cd \"$ANDROID_HOME\" \\\n && curl -sSL -o sdk.zip $SDK_URL > /dev/null \\\n && unzip -qq sdk.zip \\\n && rm sdk.zip \\\n && yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses\n#   ——————————\n#   Install Node and global packages\n#   ——————————\nRUN cd \\\n && curl -sSL -O http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz > /dev/null \\\n && tar -xzf node-v${NODE_VERSION}-linux-x64.tar.gz \\\n && mkdir opt \\\n && mv node-v${NODE_VERSION}-linux-x64 /home/user/opt/node \\\n && rm node-v${NODE_VERSION}-linux-x64.tar.gz\n#   ——————————\n#   Installs FB Watchman\n#   ——————————\nRUN git clone -b v4.7.0 https://github.com/facebook/watchman.git /home/user/tmp/watchman\nWORKDIR /home/user/tmp/watchman\nRUN ./autogen.sh\nRUN ./configure\nRUN make\nUSER root\nRUN make install\nUSER user\n#   ——————————\n#   Install Basic React-Native packages\n#   ——————————\nRUN npm install react-native-cli -g\nRUN npm install rnpm -g\nRUN npm install yarn -g\n#   ——————————\n#   Mime types\n#   ——————————\nUSER root\nRUN echo \"Adding an up to date mime-types definition file\" \\\n && curl -sSL https://salsa.debian.org/debian/mime-support/raw/master/mime.types -o /etc/mime.types\n#   ——————————\n#   Clean files\n#   ——————————\nUSER root\nRUN echo \"Cleaning files!\" \\\n && rm -rf /tmp/* \\\n && apt-get -y remove --purge dpkg-dev fakeroot file manpages manpages-dev python-pip patch xauth xz-utils \\\n && apt-get -qq -y autoremove \\\n && apt-get -qq clean \\\n && apt-get -qq purge \\\n && rm -rf /var/lib/apt/lists/* /var/lib/dpkg/*-old \\\n && rm -rf /usr/share/doc /usr/share/locale/[a-df-z]* /usr/share/locale/e[a-lo-z]* /usr/share/locale/en@* /usr/share/locale/en_GB\nUSER user\nENV LANG=\"en_US.UTF-8\"\nWORKDIR /home/user/data\n#   Expose ports\nEXPOSE 8080/tcp\nEXPOSE 8082/tcp\nEXPOSE 8081/tcp\n","originalDockerfileUglifiedHash":"2e33729bb9b3020e9dcebb1fb4603773","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9c6b958fb5357f5545b5a40e1d6a4dea14fda0e6.dockerfile"}