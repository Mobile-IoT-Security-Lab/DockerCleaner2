{"seed":2112680870,"processedDockerfileHash":"a949baf5ae950d77cd5ed8197e902cc0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\n#   base layer - python3.7\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends wget=1.19.4-1ubuntu2.2 ca-certificates=20211016ubuntu0.18.04.1 locales=2.27-3ubuntu1.6 git=1:2.17.1-1ubuntu0.17 python3.7=3.7.5-2ubuntu1~18.04.2 python3.7-dev=3.7.5-2ubuntu1~18.04.2 make=4.1-9.1ubuntu1 gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 --no-install-suggests -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && ln -s ./python3.7 /usr/bin/python3 \\\n && apt-get download python3-distutils \\\n && dpkg -x python3-distutils* / \\\n && rm python3-distutils* \\\n && wget -O - https://bootstrap.pypa.io/get-pip.py | python3 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   nvidia driver layer\nENV NVIDIA_DRIVER_VERSION=\"384.130\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends kmod=24-1ubuntu3.5 -y \\\n && mkdir -p /opt/nvidia \\\n && cd /opt/nvidia/ \\\n && wget http://us.download.nvidia.com/XFree86/Linux-x86_64/${NVIDIA_DRIVER_VERSION}/NVIDIA-Linux-x86_64-${NVIDIA_DRIVER_VERSION}.run -O /opt/nvidia/driver.run \\\n && chmod +x /opt/nvidia/driver.run \\\n && /opt/nvidia/driver.run -a -s --no-nvidia-modprobe --no-kernel-module --no-unified-memory --no-x-check --no-opengl-files \\\n && rm -rf /opt/nvidia \\\n && apt-get remove -y kmod \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   cuda layer\nENV CUDA_VERSION=\"9.2.88\"\nENV CUDA_VERSION_DASH=\"9-2\"\nENV CUDA_VERSION_MAJOR=\"9.2\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends gnupg=2.2.4-1ubuntu1.6 -y \\\n && wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && dpkg -i cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && rm cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-get update \\\n && apt-get install --no-install-recommends cuda-cublas-${CUDA_VERSION_DASH} cuda-cudart-${CUDA_VERSION_DASH} cuda-cufft-${CUDA_VERSION_DASH} cuda-curand-${CUDA_VERSION_DASH} cuda-cusolver-${CUDA_VERSION_DASH} cuda-cusparse-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && sed -i 's#\"$#:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"#' /etc/environment \\\n && apt-get remove -y gnupg \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"\n#   cudnn layer\nCOPY libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb /\nRUN dpkg -i /libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb\n#   pip deps\nRUN pip3 install --no-cache-dir numpy\n#   build and install tensorflow\nENV BAZEL_VERSION=\"0.15.0\"\nCOPY libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb /\nCOPY 0001-Port-to-Python-3.7.patch /\nCOPY 0002-Update-Cython.patch /\nRUN apt-get update \\\n && dpkg -i /libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && apt-get install --no-install-recommends unzip=6.0-21ubuntu1.2 cuda-command-line-tools-${CUDA_VERSION_DASH} cuda-cublas-dev-${CUDA_VERSION_DASH} cuda-cudart-dev-${CUDA_VERSION_DASH} cuda-cufft-dev-${CUDA_VERSION_DASH} cuda-curand-dev-${CUDA_VERSION_DASH} cuda-cusolver-dev-${CUDA_VERSION_DASH} cuda-cusparse-dev-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && chmod +x ./bazel-*.sh \\\n && ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && rm ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && git clone --single-branch --depth 1 --branch r1.9 https://github.com/tensorflow/tensorflow \\\n && cd tensorflow \\\n && git apply /0001-Port-to-Python-3.7.patch \\\n && git apply /0002-Update-Cython.patch \\\n && rm /*.patch \\\n && echo 'export PYTHON_BIN_PATH=\"/usr/bin/python3\"' > tools/python_bin_path.sh \\\n && echo 'import /tensorflow/.tf_configure.bazelrc' > .bazelrc \\\n && echo 'build --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\\nbuild --python_path=\"/usr/bin/python3\"\\nbuild --define with_jemalloc=true\\nbuild:gcp --define with_gcp_support=false\\nbuild:hdfs --define with_hdfs_support=false\\nbuild:s3 --define with_s3_support=false\\nbuild:kafka --define with_kafka_support=false\\nbuild:xla --define with_xla_support=false\\nbuild:gdr --define with_gdr_support=false\\nbuild:verbs --define with_verbs_support=false\\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\\nbuild --action_env TF_NEED_CUDA=\"1\"\\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda-9.2\"\\nbuild --action_env TF_CUDA_VERSION=\"9.2\"\\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/lib/x86_64-linux-gnu\"\\nbuild --action_env TF_CUDNN_VERSION=\"7\"\\nbuild --action_env TF_NCCL_VERSION=\"1\"\\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1,7.0\"\\nbuild --action_env TF_CUDA_CLANG=\"0\"\\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc\"\\nbuild --config=cuda\\ntest --config=cuda\\nbuild --define grpc_no_ares=true\\nbuild:opt --copt=-march=native\\nbuild:opt --host_copt=-march=native\\nbuild:opt --define with_default_optimizations=true\\nbuild --strip=always' > .tf_configure.bazelrc \\\n && cat .tf_configure.bazelrc \\\n && ln -s python3 /usr/bin/python \\\n && bazel build --config opt '@protobuf_archive//:src/google/protobuf/any.h' \\\n && find bazel-tensorflow/external/protobuf_archive/python/google/protobuf/pyext -name '*.cc' -exec sed -i \"s/PyUnicode_AsUTF8AndSize(/(char*)PyUnicode_AsUTF8AndSize(/g\" {}\n#   install FractalAI deps\nENV NPY_NUM_BUILD_JOBS=\"8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake=3.10.2-1ubuntu2.18.04.2 pkg-config=0.29.1-0ubuntu2 flex=2.6.4-6 bison=2:3.0.4.dfsg-1build1 curl=7.58.0-2ubuntu3.24 libpng16-16=1.6.34-1ubuntu0.18.04.2 libpng-dev=1.6.34-1ubuntu0.18.04.2 libjpeg-turbo8=1.5.2-0ubuntu5.18.04.6 libjpeg-turbo8-dev=1.5.2-0ubuntu5.18.04.6 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 libhdf5-100=1.10.0-patch1+docs-4 libhdf5-dev=1.10.0-patch1+docs-4 libopenblas-base=0.2.20+ds-4 libopenblas-dev=0.2.20+ds-4 gfortran=4:7.4.0-1ubuntu2.3 libfreetype6=2.8.1-2ubuntu2.2 libfreetype6-dev=2.8.1-2ubuntu2.2 -y \\\n && pip3 install --no-cache-dir cython \\\n && pip3 install --no-cache-dir git+https://github.com/openai/gym git+https://github.com/ray-project/ray#subdirectory=python git+https://github.com/Guillem-db/atari-py networkx jupyter keras h5py Pillow-simd PyOpenGL matplotlib \\\n && python3 -c \"import matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot\" \\\n && pip3 uninstall -y cython \\\n && apt-get remove -y cmake cmake pkg-config flex bison curl libpng-dev libjpeg-turbo8-dev zlib1g-dev libhdf5-dev libopenblas-dev gfortran libfreetype6-dev \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   FractalAI\nCOPY . /fractalai\nRUN rm /fractalai/*.patch /fractalai/*.deb \\\n && pip3 install -e /fractalai \\\n && apt-get remove -y gcc g++ make git \\\n && apt-get autoremove -y\n#  Jupyter notebook\nRUN mkdir /root/.jupyter \\\n && echo 'c.NotebookApp.token = \"mallorca\"' > /root/.jupyter/jupyter_notebook_config.py\nCMD jupyter notebook --allow-root --port 8080 --ip 0.0.0.0\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\n#  base layer - python3.7\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends wget ca-certificates locales git python3.7 python3.7-dev make gcc g++ --no-install-suggests -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && ln -s ./python3.7 /usr/bin/python3 \\\n && apt-get download python3-distutils \\\n && dpkg -x python3-distutils* / \\\n && rm python3-distutils* \\\n && wget -O - https://bootstrap.pypa.io/get-pip.py | python3 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  nvidia driver layer\nENV NVIDIA_DRIVER_VERSION=\"384.130\"\nRUN apt-get update \\\n && apt-get install kmod -y \\\n && mkdir -p /opt/nvidia \\\n && cd /opt/nvidia/ \\\n && wget http://us.download.nvidia.com/XFree86/Linux-x86_64/${NVIDIA_DRIVER_VERSION}/NVIDIA-Linux-x86_64-${NVIDIA_DRIVER_VERSION}.run -O /opt/nvidia/driver.run \\\n && chmod +x /opt/nvidia/driver.run \\\n && /opt/nvidia/driver.run -a -s --no-nvidia-modprobe --no-kernel-module --no-unified-memory --no-x-check --no-opengl-files \\\n && rm -rf /opt/nvidia \\\n && apt-get remove -y kmod \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  cuda layer\nENV CUDA_VERSION=\"9.2.88\"\nENV CUDA_VERSION_DASH=\"9-2\"\nENV CUDA_VERSION_MAJOR=\"9.2\"\nRUN apt-get update \\\n && apt-get install gnupg -y \\\n && wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && dpkg -i cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && rm cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-get update \\\n && apt-get install --no-install-recommends cuda-cublas-${CUDA_VERSION_DASH} cuda-cudart-${CUDA_VERSION_DASH} cuda-cufft-${CUDA_VERSION_DASH} cuda-curand-${CUDA_VERSION_DASH} cuda-cusolver-${CUDA_VERSION_DASH} cuda-cusparse-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && sed -i 's#\"$#:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"#' /etc/environment \\\n && apt-get remove -y gnupg \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"\n#  cudnn layer\nADD libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb /\nRUN dpkg -i /libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb\n#  pip deps\nRUN pip3 install --no-cache-dir numpy\n#  build and install tensorflow\nENV BAZEL_VERSION=\"0.15.0\"\nADD libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb /\nADD 0001-Port-to-Python-3.7.patch /\nADD 0002-Update-Cython.patch /\nRUN apt-get update \\\n && dpkg -i /libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && apt-get install --no-install-recommends unzip cuda-command-line-tools-${CUDA_VERSION_DASH} cuda-cublas-dev-${CUDA_VERSION_DASH} cuda-cudart-dev-${CUDA_VERSION_DASH} cuda-cufft-dev-${CUDA_VERSION_DASH} cuda-curand-dev-${CUDA_VERSION_DASH} cuda-cusolver-dev-${CUDA_VERSION_DASH} cuda-cusparse-dev-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && chmod +x ./bazel-*.sh \\\n && ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && rm ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && git clone --single-branch --depth 1 --branch r1.9 https://github.com/tensorflow/tensorflow \\\n && cd tensorflow \\\n && git apply /0001-Port-to-Python-3.7.patch \\\n && git apply /0002-Update-Cython.patch \\\n && rm /*.patch \\\n && echo 'export PYTHON_BIN_PATH=\"/usr/bin/python3\"' > tools/python_bin_path.sh \\\n && echo 'import /tensorflow/.tf_configure.bazelrc' > .bazelrc \\\n && echo 'build --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\\nbuild --python_path=\"/usr/bin/python3\"\\nbuild --define with_jemalloc=true\\nbuild:gcp --define with_gcp_support=false\\nbuild:hdfs --define with_hdfs_support=false\\nbuild:s3 --define with_s3_support=false\\nbuild:kafka --define with_kafka_support=false\\nbuild:xla --define with_xla_support=false\\nbuild:gdr --define with_gdr_support=false\\nbuild:verbs --define with_verbs_support=false\\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\\nbuild --action_env TF_NEED_CUDA=\"1\"\\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda-9.2\"\\nbuild --action_env TF_CUDA_VERSION=\"9.2\"\\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/lib/x86_64-linux-gnu\"\\nbuild --action_env TF_CUDNN_VERSION=\"7\"\\nbuild --action_env TF_NCCL_VERSION=\"1\"\\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1,7.0\"\\nbuild --action_env TF_CUDA_CLANG=\"0\"\\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc\"\\nbuild --config=cuda\\ntest --config=cuda\\nbuild --define grpc_no_ares=true\\nbuild:opt --copt=-march=native\\nbuild:opt --host_copt=-march=native\\nbuild:opt --define with_default_optimizations=true\\nbuild --strip=always' > .tf_configure.bazelrc \\\n && cat .tf_configure.bazelrc \\\n && ln -s python3 /usr/bin/python \\\n && bazel build --config opt '@protobuf_archive//:src/google/protobuf/any.h' \\\n && find bazel-tensorflow/external/protobuf_archive/python/google/protobuf/pyext -name '*.cc' -exec sed -i \"s/PyUnicode_AsUTF8AndSize(/(char*)PyUnicode_AsUTF8AndSize(/g\" {} ; \\\n && bazel build --config=cuda --config=opt --config=monolithic //tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp \\\n && pip install /tmp/tensorflow-*.whl --no-cache-dir \\\n && rm /tmp/tensorflow-*.whl \\\n && bazel shutdown \\\n && cd .. \\\n && rm -rf tensorflow \\\n && rm -rf /root/.bazel /root/.cache/bazel \\\n && apt-get remove -y unzip cuda-command-line-tools-${CUDA_VERSION_DASH} cuda-cublas-dev-${CUDA_VERSION_DASH} cuda-cudart-dev-${CUDA_VERSION_DASH} cuda-cufft-dev-${CUDA_VERSION_DASH} cuda-curand-dev-${CUDA_VERSION_DASH} cuda-cusolver-dev-${CUDA_VERSION_DASH} cuda-cusparse-dev-${CUDA_VERSION_DASH} \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  install FractalAI deps\nENV NPY_NUM_BUILD_JOBS=\"8\"\nRUN apt-get update \\\n && apt-get install cmake pkg-config flex bison curl libpng16-16 libpng-dev libjpeg-turbo8 libjpeg-turbo8-dev zlib1g-dev libhdf5-100 libhdf5-dev libopenblas-base libopenblas-dev gfortran libfreetype6 libfreetype6-dev -y \\\n && pip3 install --no-cache-dir cython \\\n && pip3 install --no-cache-dir git+https://github.com/openai/gym git+https://github.com/ray-project/ray#subdirectory=python git+https://github.com/Guillem-db/atari-py networkx jupyter keras h5py Pillow-simd PyOpenGL matplotlib \\\n && python3 -c \"import matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot\" \\\n && pip3 uninstall -y cython \\\n && apt-get remove -y cmake cmake pkg-config flex bison curl libpng-dev libjpeg-turbo8-dev zlib1g-dev libhdf5-dev libopenblas-dev gfortran libfreetype6-dev \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  FractalAI\nADD . /fractalai\nRUN rm /fractalai/*.patch /fractalai/*.deb \\\n && pip3 install -e /fractalai \\\n && apt-get remove -y gcc g++ make git \\\n && apt-get autoremove -y\n# Jupyter notebook\nRUN mkdir /root/.jupyter \\\n && echo 'c.NotebookApp.token = \"mallorca\"' > /root/.jupyter/jupyter_notebook_config.py\nCMD jupyter notebook --allow-root --port 8080 --ip 0.0.0.0\n","injectedSmells":[],"originalDockerfileHash":"2943e8bf1c31d486ed1594027decf3a6","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\n#   base layer - python3.7\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends wget ca-certificates locales git python3.7 python3.7-dev make gcc g++ --no-install-suggests -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && ln -s ./python3.7 /usr/bin/python3 \\\n && apt-get download python3-distutils \\\n && dpkg -x python3-distutils* / \\\n && rm python3-distutils* \\\n && wget -O - https://bootstrap.pypa.io/get-pip.py | python3 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   nvidia driver layer\nENV NVIDIA_DRIVER_VERSION=\"384.130\"\nRUN apt-get update \\\n && apt-get install kmod -y \\\n && mkdir -p /opt/nvidia \\\n && cd /opt/nvidia/ \\\n && wget http://us.download.nvidia.com/XFree86/Linux-x86_64/${NVIDIA_DRIVER_VERSION}/NVIDIA-Linux-x86_64-${NVIDIA_DRIVER_VERSION}.run -O /opt/nvidia/driver.run \\\n && chmod +x /opt/nvidia/driver.run \\\n && /opt/nvidia/driver.run -a -s --no-nvidia-modprobe --no-kernel-module --no-unified-memory --no-x-check --no-opengl-files \\\n && rm -rf /opt/nvidia \\\n && apt-get remove -y kmod \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   cuda layer\nENV CUDA_VERSION=\"9.2.88\"\nENV CUDA_VERSION_DASH=\"9-2\"\nENV CUDA_VERSION_MAJOR=\"9.2\"\nRUN apt-get update \\\n && apt-get install gnupg -y \\\n && wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && dpkg -i cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && rm cuda-repo-ubuntu1604_${CUDA_VERSION}-1_amd64.deb \\\n && apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-get update \\\n && apt-get install --no-install-recommends cuda-cublas-${CUDA_VERSION_DASH} cuda-cudart-${CUDA_VERSION_DASH} cuda-cufft-${CUDA_VERSION_DASH} cuda-curand-${CUDA_VERSION_DASH} cuda-cusolver-${CUDA_VERSION_DASH} cuda-cusparse-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && sed -i 's#\"$#:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"#' /etc/environment \\\n && apt-get remove -y gnupg \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda-${CUDA_VERSION_MAJOR}/bin\"\n#   cudnn layer\nADD libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb /\nRUN dpkg -i /libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb\n#   pip deps\nRUN pip3 install --no-cache-dir numpy\n#   build and install tensorflow\nENV BAZEL_VERSION=\"0.15.0\"\nADD libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb /\nADD 0001-Port-to-Python-3.7.patch /\nADD 0002-Update-Cython.patch /\nRUN apt-get update \\\n && dpkg -i /libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && rm libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb \\\n && apt-get install --no-install-recommends unzip cuda-command-line-tools-${CUDA_VERSION_DASH} cuda-cublas-dev-${CUDA_VERSION_DASH} cuda-cudart-dev-${CUDA_VERSION_DASH} cuda-cufft-dev-${CUDA_VERSION_DASH} cuda-curand-dev-${CUDA_VERSION_DASH} cuda-cusolver-dev-${CUDA_VERSION_DASH} cuda-cusparse-dev-${CUDA_VERSION_DASH} -y --no-install-suggests \\\n && wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && chmod +x ./bazel-*.sh \\\n && ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && rm ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \\\n && git clone --single-branch --depth 1 --branch r1.9 https://github.com/tensorflow/tensorflow \\\n && cd tensorflow \\\n && git apply /0001-Port-to-Python-3.7.patch \\\n && git apply /0002-Update-Cython.patch \\\n && rm /*.patch \\\n && echo 'export PYTHON_BIN_PATH=\"/usr/bin/python3\"' > tools/python_bin_path.sh \\\n && echo 'import /tensorflow/.tf_configure.bazelrc' > .bazelrc \\\n && echo 'build --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\\nbuild --python_path=\"/usr/bin/python3\"\\nbuild --define with_jemalloc=true\\nbuild:gcp --define with_gcp_support=false\\nbuild:hdfs --define with_hdfs_support=false\\nbuild:s3 --define with_s3_support=false\\nbuild:kafka --define with_kafka_support=false\\nbuild:xla --define with_xla_support=false\\nbuild:gdr --define with_gdr_support=false\\nbuild:verbs --define with_verbs_support=false\\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\\nbuild --action_env TF_NEED_CUDA=\"1\"\\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda-9.2\"\\nbuild --action_env TF_CUDA_VERSION=\"9.2\"\\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/lib/x86_64-linux-gnu\"\\nbuild --action_env TF_CUDNN_VERSION=\"7\"\\nbuild --action_env TF_NCCL_VERSION=\"1\"\\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1,7.0\"\\nbuild --action_env TF_CUDA_CLANG=\"0\"\\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc\"\\nbuild --config=cuda\\ntest --config=cuda\\nbuild --define grpc_no_ares=true\\nbuild:opt --copt=-march=native\\nbuild:opt --host_copt=-march=native\\nbuild:opt --define with_default_optimizations=true\\nbuild --strip=always' > .tf_configure.bazelrc \\\n && cat .tf_configure.bazelrc \\\n && ln -s python3 /usr/bin/python \\\n && bazel build --config opt '@protobuf_archive//:src/google/protobuf/any.h' \\\n && find bazel-tensorflow/external/protobuf_archive/python/google/protobuf/pyext -name '*.cc' -exec sed -i \"s/PyUnicode_AsUTF8AndSize(/(char*)PyUnicode_AsUTF8AndSize(/g\" {}\n#   install FractalAI deps\nENV NPY_NUM_BUILD_JOBS=\"8\"\nRUN apt-get update \\\n && apt-get install cmake pkg-config flex bison curl libpng16-16 libpng-dev libjpeg-turbo8 libjpeg-turbo8-dev zlib1g-dev libhdf5-100 libhdf5-dev libopenblas-base libopenblas-dev gfortran libfreetype6 libfreetype6-dev -y \\\n && pip3 install --no-cache-dir cython \\\n && pip3 install --no-cache-dir git+https://github.com/openai/gym git+https://github.com/ray-project/ray#subdirectory=python git+https://github.com/Guillem-db/atari-py networkx jupyter keras h5py Pillow-simd PyOpenGL matplotlib \\\n && python3 -c \"import matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot\" \\\n && pip3 uninstall -y cython \\\n && apt-get remove -y cmake cmake pkg-config flex bison curl libpng-dev libjpeg-turbo8-dev zlib1g-dev libhdf5-dev libopenblas-dev gfortran libfreetype6-dev \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   FractalAI\nADD . /fractalai\nRUN rm /fractalai/*.patch /fractalai/*.deb \\\n && pip3 install -e /fractalai \\\n && apt-get remove -y gcc g++ make git \\\n && apt-get autoremove -y\n#  Jupyter notebook\nRUN mkdir /root/.jupyter \\\n && echo 'c.NotebookApp.token = \"mallorca\"' > /root/.jupyter/jupyter_notebook_config.py\nCMD jupyter notebook --allow-root --port 8080 --ip 0.0.0.0\n","originalDockerfileUglifiedHash":"e592bcf841a559b2164134a9f91781ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/24737d2b7dd43620ce9f0bf172504dedf003da67.dockerfile"}