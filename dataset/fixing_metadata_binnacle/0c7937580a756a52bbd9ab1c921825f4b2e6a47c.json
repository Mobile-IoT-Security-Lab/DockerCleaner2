{"seed":3303342443,"processedDockerfileHash":"d8cf82389994eca92e1f3e3f5f14c28f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  # runtimebase ##\n#   this stage contains all 3rd party dependencies\nFROM ubuntu:18.04 AS runtimebase\nLABEL org.qmstr.image=\"runtime\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 curl=7.58.0-2ubuntu3.24 autoconf=2.69-11 git=1:2.17.1-1ubuntu0.17 apt-utils=1.6.14 libgit2-dev=0.26.0+dfsg.1-1.1ubuntu0.2 libio-captureoutput-perl=1.1104-1 python=2.7.15~rc1-1 python-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-distutils=3.6.9-1~18.04 protobuf-compiler=3.0.0-9.1ubuntu1.1 icu-devtools=60.2-3ubuntu3.2 libicu-dev=60.2-3ubuntu3.2 -y \\\n && rm -rf /var/lib/apt/lists/*\nARG HUGO_VERSION\nRUN curl -L --output /tmp/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.deb\nRUN dpkg -i /tmp/hugo.deb\nRUN rm /tmp/hugo.deb\n#   install ninka\nRUN mkdir /ninka \\\n && git clone https://github.com/dmgerman/ninka.git /ninka \\\n && cd /ninka/comments \\\n && make \\\n && make install \\\n && rm /usr/local/man/man1 \\\n && cd /ninka \\\n && perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -fr /ninka\n#   install scancode\nARG SCANCODE_VERSION\nRUN ICU_VERSION=$( icuinfo | sed -n 's:.*<param name=\"version\">\\([0-9]*\\)\\.[0-9]*</param>.*:\\1:p' ;) pip install -U scancode-toolkit==${SCANCODE_VERSION}\n#   install dgraph\nARG DGRAPH_VERSION\nRUN curl -L --output /tmp/dgraph.sha256 https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-checksum-linux-amd64.sha256\nRUN curl -L --output /tmp/dgraph.tar.gz https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-linux-amd64.tar.gz\nRUN temp_dir=$( mktemp -d 2> /dev/null;) \\\n && tar -C $temp_dir -xzf /tmp/dgraph.tar.gz \\\n && sed -e s#/usr/local/bin#${temp_dir}# /tmp/dgraph.sha256 | sha256sum -c - \\\n && mv ${temp_dir}/* /usr/local/bin/ \\\n && rmdir ${temp_dir}\nRUN rm /tmp/dgraph*\n#  # builder ##\n#   Create a container that only builds the software to be installed into the master container:\nFROM ubuntu:18.04 AS builder\nLABEL org.qmstr.image=\"builder\"\nENV GOROOT=\"/opt/go\"\nENV PATH=\"${GOPATH}/bin:/opt/go/bin:$PATH\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install dependecies\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.58.0-2ubuntu3.24 autoconf=2.69-11 make=4.1-9.1ubuntu1 git=1:2.17.1-1ubuntu0.17 libgit2-dev=0.26.0+dfsg.1-1.1ubuntu0.2 libio-captureoutput-perl=1.1104-1 virtualenv=15.1.0+ds-1.1 tar=1.29b-2ubuntu0.4 build-essential=12.4ubuntu1 pkg-config=0.29.1-0ubuntu2 protobuf-compiler=3.0.0-9.1ubuntu1.1 -y \\\n && rm -rf /var/lib/apt/lists/*\nARG GO_VERSION\nRUN curl -o /opt/go.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz\nRUN cd /opt \\\n && tar -xf go.tar.gz\n#   install golang tools\nRUN mkdir /qmstr\nCOPY clients /qmstr/clients\nCOPY masterserver /qmstr/masterserver\nCOPY modules /qmstr/modules\nCOPY proto /qmstr/proto\nCOPY lib /qmstr/lib\nCOPY Makefile /qmstr/Makefile\nCOPY go.mod /qmstr/go.mod\nCOPY go.sum /qmstr/go.sum\nCOPY versions.env /qmstr/versions.env\nARG GOPROXY\nWORKDIR /qmstr\nRUN make gotest\nRUN make install_qmstr_all\n#  # runtime ##\n#   the runtime stage contains all the elements needed to run the master and the analysis tools:\nFROM runtimebase AS runtime\nLABEL org.qmstr.image=\"runtime\"\n#   init html reporter data\nCOPY --from=builder /qmstr /tmp/qmstr\nRUN /tmp/qmstr/modules/reporters/qmstr-reporter-html/setup.sh /usr/share/qmstr /tmp/qmstr\nRUN rm -fr /tmp/qmstr\nCOPY ci/common.inc /common.inc\n#   copy qmstr installation from previous stage\nCOPY --from=builder /usr/local/bin/* /usr/local/bin/\nEXPOSE 50051/tcp\nVOLUME /buildroot\n#  # master ##\n#   release master container, based on the runtime stage:\nFROM runtime AS master\nLABEL org.qmstr.image=\"master\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\nCOPY ci/docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#  # web ##\n#   debug stage for container running ratel\nFROM ubuntu:18.04 AS web\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends socat=1.7.3.2-2ubuntu2 -y\nCOPY --from=runtime /usr/local/bin/dgraph-ratel /usr/local/bin/dgraph-ratel\nCOPY ci/ratel-entrypoint.sh /entrypoint.sh\nEXPOSE 8000/tcp\nEXPOSE 8080/tcp\nCMD /entrypoint.sh\n#  # dev ##\n#   development container for the master and other tools, based on the runtime stage:\n#   The $GOROOT/src directory can be mounted in as a volume, to allow testing of local changes.\nFROM runtime AS dev\nLABEL org.qmstr.image=\"dev\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\n#   install golang\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.58.0-2ubuntu3.24 golang=2:1.10~4ubuntu1 autoconf=2.69-11 git=1:2.17.1-1ubuntu0.17 libio-captureoutput-perl=1.1104-1 python-dev=2.7.15~rc1-1 python-virtualenv=15.1.0+ds-1.1 protobuf-compiler=3.0.0-9.1ubuntu1.1 -y\nEXPOSE 2345/tcp\n#   install additional go deps\nRUN go get -u -v github.com/derekparker/delve/cmd/dlv\nVOLUME /go/src\n#   cache wheels\nCOPY --from=builder /root/.pex/build /root/.pex/build\nRUN rm /root/.pex/build/*qmstr*\nCOPY ci/dev-entrypoint.sh /dev-entrypoint.sh\nRUN chmod +x /dev-entrypoint.sh\nENTRYPOINT [\"/dev-entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# # runtimebase ##\n#  this stage contains all 3rd party dependencies\nFROM ubuntu:18.04 AS runtimebase\nLABEL org.qmstr.image=\"runtime\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  install runtime deps\nRUN apt-get update \\\n && apt-get install software-properties-common curl autoconf git apt-utils libgit2-dev libio-captureoutput-perl python python-pip python3-distutils protobuf-compiler icu-devtools libicu-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nARG HUGO_VERSION\nRUN curl -L --output /tmp/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.deb\nRUN dpkg -i /tmp/hugo.deb\nRUN rm /tmp/hugo.deb\n#  install ninka\nRUN mkdir /ninka \\\n && git clone https://github.com/dmgerman/ninka.git /ninka \\\n && cd /ninka/comments \\\n && make \\\n && make install \\\n && rm /usr/local/man/man1 \\\n && cd /ninka \\\n && perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -fr /ninka\n#  install scancode\nARG SCANCODE_VERSION\nRUN ICU_VERSION=$( icuinfo | sed -n 's:.*<param name=\"version\">\\([0-9]*\\)\\.[0-9]*</param>.*:\\1:p' ;) pip install -U scancode-toolkit==${SCANCODE_VERSION}\n#  install dgraph\nARG DGRAPH_VERSION\nRUN curl -L --output /tmp/dgraph.sha256 https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-checksum-linux-amd64.sha256\nRUN curl -L --output /tmp/dgraph.tar.gz https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-linux-amd64.tar.gz\nRUN temp_dir=$( mktemp -d 2> /dev/null;) \\\n && tar -C $temp_dir -xzf /tmp/dgraph.tar.gz \\\n && sed -e s#/usr/local/bin#${temp_dir}# /tmp/dgraph.sha256 | sha256sum -c - \\\n && mv ${temp_dir}/* /usr/local/bin/ \\\n && rmdir ${temp_dir}\nRUN rm /tmp/dgraph*\n# # builder ##\n#  Create a container that only builds the software to be installed into the master container:\nFROM ubuntu:18.04 AS builder\nLABEL org.qmstr.image=\"builder\"\nENV GOROOT=\"/opt/go\"\nENV PATH=\"${GOPATH}/bin:/opt/go/bin:$PATH\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  install dependecies\nRUN apt-get update \\\n && apt-get install curl autoconf make git libgit2-dev libio-captureoutput-perl virtualenv tar build-essential pkg-config protobuf-compiler -y \\\n && rm -rf /var/lib/apt/lists/*\nARG GO_VERSION\nRUN curl -o /opt/go.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz\nRUN cd /opt \\\n && tar -xf go.tar.gz\n#  install golang tools\nRUN mkdir /qmstr\nADD clients /qmstr/clients\nADD masterserver /qmstr/masterserver\nADD modules /qmstr/modules\nADD proto /qmstr/proto\nADD lib /qmstr/lib\nADD Makefile /qmstr/Makefile\nADD go.mod /qmstr/go.mod\nADD go.sum /qmstr/go.sum\nADD versions.env /qmstr/versions.env\nARG GOPROXY\nWORKDIR /qmstr\nRUN make gotest\nRUN make install_qmstr_all\n# # runtime ##\n#  the runtime stage contains all the elements needed to run the master and the analysis tools:\nFROM runtimebase AS runtime\nLABEL org.qmstr.image=\"runtime\"\n#  init html reporter data\nCOPY --from=builder /qmstr /tmp/qmstr\nRUN /tmp/qmstr/modules/reporters/qmstr-reporter-html/setup.sh /usr/share/qmstr /tmp/qmstr\nRUN rm -fr /tmp/qmstr\nADD ci/common.inc /common.inc\n#  copy qmstr installation from previous stage\nCOPY --from=builder /usr/local/bin/* /usr/local/bin/\nEXPOSE 50051/tcp\nVOLUME /buildroot\n# # master ##\n#  release master container, based on the runtime stage:\nFROM runtime AS master\nLABEL org.qmstr.image=\"master\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\nCOPY ci/docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n# # web ##\n#  debug stage for container running ratel\nFROM ubuntu:18.04 AS web\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install socat -y\nCOPY --from=runtime /usr/local/bin/dgraph-ratel /usr/local/bin/dgraph-ratel\nADD ci/ratel-entrypoint.sh /entrypoint.sh\nEXPOSE 8000/tcp\nEXPOSE 8080/tcp\nCMD /entrypoint.sh\n# # dev ##\n#  development container for the master and other tools, based on the runtime stage:\n#  The $GOROOT/src directory can be mounted in as a volume, to allow testing of local changes.\nFROM runtime AS dev\nLABEL org.qmstr.image=\"dev\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\n#  install golang\nRUN apt-get update \\\n && apt-get install curl golang autoconf git libio-captureoutput-perl python-dev python-virtualenv protobuf-compiler -y\nEXPOSE 2345/tcp\n#  install additional go deps\nRUN go get -u -v github.com/derekparker/delve/cmd/dlv\nVOLUME /go/src\n#  cache wheels\nCOPY --from=builder /root/.pex/build /root/.pex/build\nRUN rm /root/.pex/build/*qmstr*\nCOPY ci/dev-entrypoint.sh /dev-entrypoint.sh\nRUN chmod +x /dev-entrypoint.sh\nENTRYPOINT [\"/dev-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"40774b9b8d12e8da66c76d2fc4e5016b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  # runtimebase ##\n#   this stage contains all 3rd party dependencies\nFROM ubuntu:18.04 AS runtimebase\nLABEL org.qmstr.image=\"runtime\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install runtime deps\nRUN apt-get update \\\n && apt-get install software-properties-common curl autoconf git apt-utils libgit2-dev libio-captureoutput-perl python python-pip python3-distutils protobuf-compiler icu-devtools libicu-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nARG HUGO_VERSION\nRUN curl -L --output /tmp/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.deb\nRUN dpkg -i /tmp/hugo.deb\nRUN rm /tmp/hugo.deb\n#   install ninka\nRUN mkdir /ninka \\\n && git clone https://github.com/dmgerman/ninka.git /ninka \\\n && cd /ninka/comments \\\n && make \\\n && make install \\\n && rm /usr/local/man/man1 \\\n && cd /ninka \\\n && perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -fr /ninka\n#   install scancode\nARG SCANCODE_VERSION\nRUN ICU_VERSION=$( icuinfo | sed -n 's:.*<param name=\"version\">\\([0-9]*\\)\\.[0-9]*</param>.*:\\1:p' ;) pip install -U scancode-toolkit==${SCANCODE_VERSION}\n#   install dgraph\nARG DGRAPH_VERSION\nRUN curl -L --output /tmp/dgraph.sha256 https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-checksum-linux-amd64.sha256\nRUN curl -L --output /tmp/dgraph.tar.gz https://github.com/dgraph-io/dgraph/releases/download/v\"${DGRAPH_VERSION}\"/dgraph-linux-amd64.tar.gz\nRUN temp_dir=$( mktemp -d 2> /dev/null;) \\\n && tar -C $temp_dir -xzf /tmp/dgraph.tar.gz \\\n && sed -e s#/usr/local/bin#${temp_dir}# /tmp/dgraph.sha256 | sha256sum -c - \\\n && mv ${temp_dir}/* /usr/local/bin/ \\\n && rmdir ${temp_dir}\nRUN rm /tmp/dgraph*\n#  # builder ##\n#   Create a container that only builds the software to be installed into the master container:\nFROM ubuntu:18.04 AS builder\nLABEL org.qmstr.image=\"builder\"\nENV GOROOT=\"/opt/go\"\nENV PATH=\"${GOPATH}/bin:/opt/go/bin:$PATH\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install dependecies\nRUN apt-get update \\\n && apt-get install curl autoconf make git libgit2-dev libio-captureoutput-perl virtualenv tar build-essential pkg-config protobuf-compiler -y \\\n && rm -rf /var/lib/apt/lists/*\nARG GO_VERSION\nRUN curl -o /opt/go.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz\nRUN cd /opt \\\n && tar -xf go.tar.gz\n#   install golang tools\nRUN mkdir /qmstr\nADD clients /qmstr/clients\nADD masterserver /qmstr/masterserver\nADD modules /qmstr/modules\nADD proto /qmstr/proto\nADD lib /qmstr/lib\nADD Makefile /qmstr/Makefile\nADD go.mod /qmstr/go.mod\nADD go.sum /qmstr/go.sum\nADD versions.env /qmstr/versions.env\nARG GOPROXY\nWORKDIR /qmstr\nRUN make gotest\nRUN make install_qmstr_all\n#  # runtime ##\n#   the runtime stage contains all the elements needed to run the master and the analysis tools:\nFROM runtimebase AS runtime\nLABEL org.qmstr.image=\"runtime\"\n#   init html reporter data\nCOPY --from=builder /qmstr /tmp/qmstr\nRUN /tmp/qmstr/modules/reporters/qmstr-reporter-html/setup.sh /usr/share/qmstr /tmp/qmstr\nRUN rm -fr /tmp/qmstr\nADD ci/common.inc /common.inc\n#   copy qmstr installation from previous stage\nCOPY --from=builder /usr/local/bin/* /usr/local/bin/\nEXPOSE 50051/tcp\nVOLUME /buildroot\n#  # master ##\n#   release master container, based on the runtime stage:\nFROM runtime AS master\nLABEL org.qmstr.image=\"master\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\nCOPY ci/docker-entrypoint.sh /docker-entrypoint.sh\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n#  # web ##\n#   debug stage for container running ratel\nFROM ubuntu:18.04 AS web\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install socat -y\nCOPY --from=runtime /usr/local/bin/dgraph-ratel /usr/local/bin/dgraph-ratel\nADD ci/ratel-entrypoint.sh /entrypoint.sh\nEXPOSE 8000/tcp\nEXPOSE 8080/tcp\nCMD /entrypoint.sh\n#  # dev ##\n#   development container for the master and other tools, based on the runtime stage:\n#   The $GOROOT/src directory can be mounted in as a volume, to allow testing of local changes.\nFROM runtime AS dev\nLABEL org.qmstr.image=\"dev\"\nENV GOPATH=\"/go\"\nENV PATH=\"${GOPATH}/bin:$PATH\"\n#   install golang\nRUN apt-get update \\\n && apt-get install curl golang autoconf git libio-captureoutput-perl python-dev python-virtualenv protobuf-compiler -y\nEXPOSE 2345/tcp\n#   install additional go deps\nRUN go get -u -v github.com/derekparker/delve/cmd/dlv\nVOLUME /go/src\n#   cache wheels\nCOPY --from=builder /root/.pex/build /root/.pex/build\nRUN rm /root/.pex/build/*qmstr*\nCOPY ci/dev-entrypoint.sh /dev-entrypoint.sh\nRUN chmod +x /dev-entrypoint.sh\nENTRYPOINT [\"/dev-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"aec602d925a5ca27fb7f18484e226218","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0c7937580a756a52bbd9ab1c921825f4b2e6a47c.dockerfile"}