{"seed":2232255409,"processedDockerfileHash":"41913f138007e4e437bff3939885fe59","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG CUDA_VERSION=9.2\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=ubuntu16.04\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n#   Define arguments\nARG CUDA_SHORT_VERSION\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG CFFI_VERSION=1.11.5\nARG CYTHON_VERSION=0.29\nARG CMAKE_VERSION=3.12\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG ARROW_CPP_VERSION=0.12.1\nARG SKLEARN_VERSION=0.20.3\nARG SCIPY_VERSION=1.2.1\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG TINI_VERSION=v0.18.0\nARG HASH_JOIN=ON\nARG MINICONDA_URL=\"https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\"\n#   Set environment\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\n#  # Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV CUDAHOSTCXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update and add pkgs\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apt-utils -qq -y \\\n && apt-get install --no-install-recommends curl git screen libboost-all-dev tzdata wget vim zlib1g-dev gcc-${CC_VERSION} g++-${CXX_VERSION} -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install conda\n#  # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\n#   Add a condarc to remove blacklist\nCOPY .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n#  # Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/bin/tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG CUDA_VERSION=9.2\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=ubuntu16.04\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n#  Define arguments\nARG CUDA_SHORT_VERSION\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG CFFI_VERSION=1.11.5\nARG CYTHON_VERSION=0.29\nARG CMAKE_VERSION=3.12\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG ARROW_CPP_VERSION=0.12.1\nARG SKLEARN_VERSION=0.20.3\nARG SCIPY_VERSION=1.2.1\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG TINI_VERSION=v0.18.0\nARG HASH_JOIN=ON\nARG MINICONDA_URL=\"https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\"\n#  Set environment\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\n# # Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV CUDAHOSTCXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Update and add pkgs\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apt-utils -qq -y \\\n && apt-get install curl git screen libboost-all-dev tzdata wget vim zlib1g-dev gcc-${CC_VERSION} g++-${CXX_VERSION} -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install conda\n# # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\n#  Add a condarc to remove blacklist\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n# # Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"17bfa15cfe8249e83cc20efa850d83b1","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG CUDA_VERSION=9.2\nARG CUDA_SHORT_VERSION=${CUDA_VERSION}\nARG LINUX_VERSION=ubuntu16.04\nFROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}\n#   Define arguments\nARG CUDA_SHORT_VERSION\nARG CC_VERSION=5\nARG CXX_VERSION=5\nARG PYTHON_VERSION=3.6\nARG CFFI_VERSION=1.11.5\nARG CYTHON_VERSION=0.29\nARG CMAKE_VERSION=3.12\nARG NUMBA_VERSION=0.41\nARG NUMPY_VERSION=1.16.2\nARG PANDAS_VERSION=0.23.4\nARG PYARROW_VERSION=0.12.1\nARG ARROW_CPP_VERSION=0.12.1\nARG SKLEARN_VERSION=0.20.3\nARG SCIPY_VERSION=1.2.1\nARG LIBGCC_NG_VERSION=7.3.0\nARG LIBGFORTRAIN_NG_VERSION=7.3.0\nARG LIBSTDCXX_NG_VERSION=7.3.0\nARG TINI_VERSION=v0.18.0\nARG HASH_JOIN=ON\nARG MINICONDA_URL=\"https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\"\n#   Set environment\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib\"\n#  # Needed for pygdf.concat(), avoids \"OSError: library nvvm not found\"\nENV NUMBAPRO_NVVM=\"/usr/local/cuda/nvvm/lib64/libnvvm.so\"\nENV NUMBAPRO_LIBDEVICE=\"/usr/local/cuda/nvvm/libdevice/\"\nENV CC=\"/usr/bin/gcc-${CC_VERSION}\"\nENV CXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV CUDAHOSTCXX=\"/usr/bin/g++-${CXX_VERSION}\"\nENV PATH=\"${PATH}:/conda/bin\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update and add pkgs\nRUN apt-get update -y --fix-missing \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apt-utils -qq -y \\\n && apt-get install curl git screen libboost-all-dev tzdata wget vim zlib1g-dev gcc-${CC_VERSION} g++-${CXX_VERSION} -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install conda\n#  # Build combined libgdf/pygdf conda env\nRUN curl ${MINICONDA_URL} -o /miniconda.sh \\\n && sh /miniconda.sh -b -p /conda \\\n && rm -f /miniconda.sh \\\n && conda update -y -n base -c conda-forge conda\n#   Add a condarc to remove blacklist\nADD .condarc-cuda${CUDA_SHORT_VERSION} /conda/.condarc\nRUN conda create --no-default-packages -n gdf python=${PYTHON_VERSION} anaconda-client arrow-cpp=${ARROW_CPP_VERSION} cmake=${CMAKE_VERSION} cmake_setuptools conda-build conda-verify cffi=${CFFI_VERSION} cmake=${CMAKE_VERSION} cython=${CYTHON_VERSION} flake8 make numba numpy=${NUMPY_VERSION} pandas=${PANDAS_VERSION} pyarrow=${PYARROW_VERSION} pytest pytest-cov scikit-learn=${SKLEARN_VERSION} scipy=${SCIPY_VERSION} conda-forge::blas=1.1=openblas libgcc-ng=${LIBGCC_NG_VERSION} libgfortran-ng=${LIBGFORTRAIN_NG_VERSION} libstdcxx-ng=${LIBSTDCXX_NG_VERSION} > =${NUMBA_VERSION} \\\n && conda clean -a \\\n && chmod 777 -R /conda\n#  # Enables \"source activate conda\"\nSHELL [\"/bin/bash\", \"-c\"]\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"1381415094cbcbbed0d89ca08c115a3e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b1682a3e4e452b7e782b50218e59875f6a129279.dockerfile"}