{"seed":1438732862,"processedDockerfileHash":"a87d58900d50bae2f8994c69d1631ff1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  # -*- docker-image-name: \"zavpyj/osm-tiles\" -*-\n#  #\n#   The OpenStreetMap Tile Server\n#\n#   This creates an image containing the OpenStreetMap tile server stack as\n#   described at\n#   <https://switch2osm.org/serving-tiles/manually-building-a-tile-server-14-04/>.\n#\nFROM phusion/baseimage:0.9.19\nMAINTAINER Xavier Guille <xguille@hotmail.com>\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#   Set the locale. This affects the encoding of the Postgresql template\n#   databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#   Update cache and install dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends apache2 apache2-dev autoconf build-essential bzip2 cmake g++ gdal-bin git-core libagg-dev libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libbz2-dev libcairo-dev libcairomm-1.0-dev libexpat1-dev libfreetype6-dev libgdal-dev libgdal1-dev libgeos-dev libgeos++-dev libicu-dev liblua5.2-dev libmapnik-dev libpng12-dev libpq-dev libproj-dev libprotobuf-c0-dev libtiff5-dev libtool libxml2-dev lua5.2 make mapnik-utils munin munin-node postgresql-9.5-postgis-2.2 postgresql-contrib postgresql-server-dev-9.5 protobuf-c-compiler python-mapnik python-software-properties software-properties-common sudo tar ttf-unifont unzip wget zlib1g-dev -y\n#   Avoid munin cron tasks and associated logs\nRUN rm -f /etc/cron.d/munin /etc/cron.d/munin-node /etc/cron.d/sysstat\n#   Install osm2pgsql\nENV OSM2PGSQL_VERSION=\"0.92.0\"\nRUN git clone --depth 1 --branch ${OSM2PGSQL_VERSION} https://github.com/openstreetmap/osm2pgsql.git /tmp/osm2pgsql \\\n && cd /tmp/osm2pgsql \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /tmp \\\n && rm -rf /tmp/osm2pgsql\n#  ############# Install of nodejs : start ##############\nRUN groupadd --gid 1000 node \\\n && useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n#   gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" ; done\nENV NPM_CONFIG_LOGLEVEL=\"info\"\nENV NODE_VERSION=\"6.9.4\"\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n#  ############# Install of nodejs :  end  ##############\nRUN npm install carto@0.16.3 -g\n#   Install CartoCSS template for OpenStreetMap data\nENV OSM_CARTO_VERSION=\"3.0.1\"\nRUN cd /tmp \\\n && wget https://github.com/gravitystorm/openstreetmap-carto/archive/v$OSM_CARTO_VERSION.tar.gz \\\n && tar -xzf v$OSM_CARTO_VERSION.tar.gz \\\n && rm -f v$OSM_CARTO_VERSION.tar.gz \\\n && mkdir /usr/share/mapnik \\\n && mv /tmp/openstreetmap-carto-$OSM_CARTO_VERSION /usr/share/mapnik/openstreetmap-carto \\\n && cd /usr/share/mapnik/openstreetmap-carto \\\n && ./scripts/get-shapefiles.py \\\n && cp project.mml project.mml.orig \\\n && nodejs /usr/local/bin/carto project.mml > style.xml \\\n && find /usr/share/mapnik/openstreetmap-carto/data\nCOPY ./build/drop_indexes.sql /usr/share/mapnik/openstreetmap-carto/\n#   Install mod_tile and renderd\n#  master is not a good point to rely on, but no tag exists on mod_tile Github's project since v0.4 (2011) !\n#  So we rely on the last commit of the master branch at the time of this Dockerfile\nENV MOD_TILE_VERSION=\"e25bfdba1c1f2103c69529f1a30b22a14ce311f1\"\nENV MOD_TILE_PARALLEL_BUILD=\"4\"\nRUN cd /tmp \\\n && git clone https://github.com/openstreetmap/mod_tile.git \\\n && cd /tmp/mod_tile \\\n && git reset --hard $MOD_TILE_VERSION \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j $MOD_TILE_PARALLEL_BUILD \\\n && make install \\\n && make install-mod_tile \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf /tmp/mod_tile\nRUN cp -p /usr/local/etc/renderd.conf /usr/local/etc/renderd.conf.orig\nCOPY ./build/renderd.conf /usr/local/etc/\n#   Create the files required for the mod_tile system to run\nRUN mkdir /var/run/renderd \\\n && chown www-data: /var/run/renderd\nRUN mkdir /var/lib/mod_tile \\\n && chown www-data /var/lib/mod_tile\n#   Replace default apache index page with Leaflet demo\nCOPY ./build/index.html /var/www/html/\n#   Configure mod_tile\nCOPY ./build/mod_tile.load /etc/apache2/mods-available/\nCOPY ./build/mod_tile.conf /etc/apache2/mods-available/\nRUN a2enmod mod_tile\n#   Ensure the webserver user can connect to the gis database\nRUN sed -i -e 's/local all all peer/local gis www-data peer/' /etc/postgresql/9.5/main/pg_hba.conf\n#   Tune postgresql\nCOPY ./build/postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.5/main/postgresql.conf\n#   Define the application logging logic\nCOPY ./build/syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#   Create a `postgresql` `runit` service\nCOPY ./build/sv/postgresql /etc/sv/postgresql/\nRUN update-service --add /etc/sv/postgresql\n#   Create an `apache2` `runit` service\nCOPY ./build/sv/apache2 /etc/sv/apache2/\nRUN update-service --add /etc/sv/apache2\n#   Create a `renderd` `runit` service\nCOPY ./build/sv/renderd /etc/sv/renderd/\nRUN update-service --add /etc/sv/renderd\n#   Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#   Set the osm2pgsql import cache size in MB. Used in `run import` and `run importappend`.\nENV OSM_IMPORT_CACHE=\"40\"\n#   Add the README\nCOPY ./README.md /usr/local/share/doc/\n#   Add the help file\nCOPY ./build/help.txt /usr/local/share/doc/run/\nRUN rm -Rf /var/lib/postgresql/9.5/main\n#   Correct the Error: could not open temporary statistics file \"/var/run/postgresql/9.5-main.pg_stat_tmp/global.tmp\": No such file or directory\nRUN mkdir -p /var/run/postgresql/9.5-main.pg_stat_tmp\nRUN chown postgres:postgres /var/run/postgresql/9.5-main.pg_stat_tmp -R\n#  Add the perl script to render only an extract of the map\nCOPY ./build/render_list_geo.pl /opt/\nRUN chmod +x /opt/render_list_geo.pl\n#   Configure mod_rewrite\nCOPY ./build/rewrite.conf /etc/apache2/mods-available/\nCOPY ./build/000-default.conf /etc/apache2/sites-available/\n#   Add the entrypoint\nCOPY ./build/run.sh /usr/local/sbin/run\nRUN chmod +x /usr/local/sbin/run /etc/sv/renderd/run /etc/sv/apache2/run /etc/sv/postgresql/check /etc/sv/postgresql/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#   Default to showing the usage text\nCMD [\"help\"]\n#   Clean up APT\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# # -*- docker-image-name: \"zavpyj/osm-tiles\" -*-\n# #\n#  The OpenStreetMap Tile Server\n#\n#  This creates an image containing the OpenStreetMap tile server stack as\n#  described at\n#  <https://switch2osm.org/serving-tiles/manually-building-a-tile-server-14-04/>.\n#\nFROM phusion/baseimage:0.9.19\nMAINTAINER Xavier Guille <xguille@hotmail.com>\n#  Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#  Set the locale. This affects the encoding of the Postgresql template\n#  databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#  Update cache and install dependencies\nRUN apt-get update -y \\\n && apt-get install apache2 apache2-dev autoconf build-essential bzip2 cmake g++ gdal-bin git-core libagg-dev libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libbz2-dev libcairo-dev libcairomm-1.0-dev libexpat1-dev libfreetype6-dev libgdal-dev libgdal1-dev libgeos-dev libgeos++-dev libicu-dev liblua5.2-dev libmapnik-dev libpng12-dev libpq-dev libproj-dev libprotobuf-c0-dev libtiff5-dev libtool libxml2-dev lua5.2 make mapnik-utils munin munin-node postgresql-9.5-postgis-2.2 postgresql-contrib postgresql-server-dev-9.5 protobuf-c-compiler python-mapnik python-software-properties software-properties-common sudo tar ttf-unifont unzip wget zlib1g-dev -y\n#  Avoid munin cron tasks and associated logs\nRUN rm -f /etc/cron.d/munin /etc/cron.d/munin-node /etc/cron.d/sysstat\n#  Install osm2pgsql\nENV OSM2PGSQL_VERSION=\"0.92.0\"\nRUN git clone --depth 1 --branch ${OSM2PGSQL_VERSION} https://github.com/openstreetmap/osm2pgsql.git /tmp/osm2pgsql \\\n && cd /tmp/osm2pgsql \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /tmp \\\n && rm -rf /tmp/osm2pgsql\n# ############# Install of nodejs : start ##############\nRUN groupadd --gid 1000 node \\\n && useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n#  gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" ; done\nENV NPM_CONFIG_LOGLEVEL=\"info\"\nENV NODE_VERSION=\"6.9.4\"\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n# ############# Install of nodejs :  end  ##############\nRUN npm install carto@0.16.3 -g\n#  Install CartoCSS template for OpenStreetMap data\nENV OSM_CARTO_VERSION=\"3.0.1\"\nRUN cd /tmp \\\n && wget https://github.com/gravitystorm/openstreetmap-carto/archive/v$OSM_CARTO_VERSION.tar.gz \\\n && tar -xzf v$OSM_CARTO_VERSION.tar.gz \\\n && rm -f v$OSM_CARTO_VERSION.tar.gz \\\n && mkdir /usr/share/mapnik \\\n && mv /tmp/openstreetmap-carto-$OSM_CARTO_VERSION /usr/share/mapnik/openstreetmap-carto \\\n && cd /usr/share/mapnik/openstreetmap-carto \\\n && ./scripts/get-shapefiles.py \\\n && cp project.mml project.mml.orig \\\n && nodejs /usr/local/bin/carto project.mml > style.xml \\\n && find /usr/share/mapnik/openstreetmap-carto/data ( -type f -iname \"*.zip\" -o -iname \"*.tgz\" ) -delete\nCOPY ./build/drop_indexes.sql /usr/share/mapnik/openstreetmap-carto/\n#  Install mod_tile and renderd\n# master is not a good point to rely on, but no tag exists on mod_tile Github's project since v0.4 (2011) !\n# So we rely on the last commit of the master branch at the time of this Dockerfile\nENV MOD_TILE_VERSION=\"e25bfdba1c1f2103c69529f1a30b22a14ce311f1\"\nENV MOD_TILE_PARALLEL_BUILD=\"4\"\nRUN cd /tmp \\\n && git clone https://github.com/openstreetmap/mod_tile.git \\\n && cd /tmp/mod_tile \\\n && git reset --hard $MOD_TILE_VERSION \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j $MOD_TILE_PARALLEL_BUILD \\\n && make install \\\n && make install-mod_tile \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf /tmp/mod_tile\nRUN cp -p /usr/local/etc/renderd.conf /usr/local/etc/renderd.conf.orig\nCOPY ./build/renderd.conf /usr/local/etc/\n#  Create the files required for the mod_tile system to run\nRUN mkdir /var/run/renderd \\\n && chown www-data: /var/run/renderd\nRUN mkdir /var/lib/mod_tile \\\n && chown www-data /var/lib/mod_tile\n#  Replace default apache index page with Leaflet demo\nCOPY ./build/index.html /var/www/html/\n#  Configure mod_tile\nCOPY ./build/mod_tile.load /etc/apache2/mods-available/\nCOPY ./build/mod_tile.conf /etc/apache2/mods-available/\nRUN a2enmod mod_tile\n#  Ensure the webserver user can connect to the gis database\nRUN sed -i -e 's/local all all peer/local gis www-data peer/' /etc/postgresql/9.5/main/pg_hba.conf\n#  Tune postgresql\nCOPY ./build/postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.5/main/postgresql.conf\n#  Define the application logging logic\nCOPY ./build/syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#  Create a `postgresql` `runit` service\nCOPY ./build/sv/postgresql /etc/sv/postgresql/\nRUN update-service --add /etc/sv/postgresql\n#  Create an `apache2` `runit` service\nCOPY ./build/sv/apache2 /etc/sv/apache2/\nRUN update-service --add /etc/sv/apache2\n#  Create a `renderd` `runit` service\nCOPY ./build/sv/renderd /etc/sv/renderd/\nRUN update-service --add /etc/sv/renderd\n#  Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#  Set the osm2pgsql import cache size in MB. Used in `run import` and `run importappend`.\nENV OSM_IMPORT_CACHE=\"40\"\n#  Add the README\nCOPY ./README.md /usr/local/share/doc/\n#  Add the help file\nCOPY ./build/help.txt /usr/local/share/doc/run/\nRUN rm -Rf /var/lib/postgresql/9.5/main\n#  Correct the Error: could not open temporary statistics file \"/var/run/postgresql/9.5-main.pg_stat_tmp/global.tmp\": No such file or directory\nRUN mkdir -p /var/run/postgresql/9.5-main.pg_stat_tmp\nRUN chown postgres:postgres /var/run/postgresql/9.5-main.pg_stat_tmp -R\n# Add the perl script to render only an extract of the map\nCOPY ./build/render_list_geo.pl /opt/\nRUN chmod +x /opt/render_list_geo.pl\n#  Configure mod_rewrite\nCOPY ./build/rewrite.conf /etc/apache2/mods-available/\nCOPY ./build/000-default.conf /etc/apache2/sites-available/\n#  Add the entrypoint\nCOPY ./build/run.sh /usr/local/sbin/run\nRUN chmod +x /usr/local/sbin/run /etc/sv/renderd/run /etc/sv/apache2/run /etc/sv/postgresql/check /etc/sv/postgresql/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#  Default to showing the usage text\nCMD [\"help\"]\n#  Clean up APT\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n","injectedSmells":[],"originalDockerfileHash":"e403e4015be117c956ccc95655c1523e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  # -*- docker-image-name: \"zavpyj/osm-tiles\" -*-\n#  #\n#   The OpenStreetMap Tile Server\n#\n#   This creates an image containing the OpenStreetMap tile server stack as\n#   described at\n#   <https://switch2osm.org/serving-tiles/manually-building-a-tile-server-14-04/>.\n#\nFROM phusion/baseimage:0.9.19\nMAINTAINER Xavier Guille <xguille@hotmail.com>\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n#   Set the locale. This affects the encoding of the Postgresql template\n#   databases.\nENV LANG=\"C.UTF-8\"\nRUN update-locale LANG=C.UTF-8\n#   Update cache and install dependencies\nRUN apt-get update -y \\\n && apt-get install apache2 apache2-dev autoconf build-essential bzip2 cmake g++ gdal-bin git-core libagg-dev libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libbz2-dev libcairo-dev libcairomm-1.0-dev libexpat1-dev libfreetype6-dev libgdal-dev libgdal1-dev libgeos-dev libgeos++-dev libicu-dev liblua5.2-dev libmapnik-dev libpng12-dev libpq-dev libproj-dev libprotobuf-c0-dev libtiff5-dev libtool libxml2-dev lua5.2 make mapnik-utils munin munin-node postgresql-9.5-postgis-2.2 postgresql-contrib postgresql-server-dev-9.5 protobuf-c-compiler python-mapnik python-software-properties software-properties-common sudo tar ttf-unifont unzip wget zlib1g-dev -y\n#   Avoid munin cron tasks and associated logs\nRUN rm -f /etc/cron.d/munin /etc/cron.d/munin-node /etc/cron.d/sysstat\n#   Install osm2pgsql\nENV OSM2PGSQL_VERSION=\"0.92.0\"\nRUN git clone --depth 1 --branch ${OSM2PGSQL_VERSION} https://github.com/openstreetmap/osm2pgsql.git /tmp/osm2pgsql \\\n && cd /tmp/osm2pgsql \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make \\\n && make install \\\n && cd /tmp \\\n && rm -rf /tmp/osm2pgsql\n#  ############# Install of nodejs : start ##############\nRUN groupadd --gid 1000 node \\\n && useradd --uid 1000 --gid node --shell /bin/bash --create-home node\n#   gpg keys listed at https://github.com/nodejs/node\nRUN set -ex \\\n && for key in 9554F04D7259F04124DE6B476D5A82AC7E37093B 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 0034A06D9D9B0064CE8ADF6BF1747F4AD2306D93 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D B9AE9905FFD7803F25714661B63B535A4C206CA9 C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8; do gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" ; done\nENV NPM_CONFIG_LOGLEVEL=\"info\"\nENV NODE_VERSION=\"6.9.4\"\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-x64.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n#  ############# Install of nodejs :  end  ##############\nRUN npm install carto@0.16.3 -g\n#   Install CartoCSS template for OpenStreetMap data\nENV OSM_CARTO_VERSION=\"3.0.1\"\nRUN cd /tmp \\\n && wget https://github.com/gravitystorm/openstreetmap-carto/archive/v$OSM_CARTO_VERSION.tar.gz \\\n && tar -xzf v$OSM_CARTO_VERSION.tar.gz \\\n && rm -f v$OSM_CARTO_VERSION.tar.gz \\\n && mkdir /usr/share/mapnik \\\n && mv /tmp/openstreetmap-carto-$OSM_CARTO_VERSION /usr/share/mapnik/openstreetmap-carto \\\n && cd /usr/share/mapnik/openstreetmap-carto \\\n && ./scripts/get-shapefiles.py \\\n && cp project.mml project.mml.orig \\\n && nodejs /usr/local/bin/carto project.mml > style.xml \\\n && find /usr/share/mapnik/openstreetmap-carto/data\nCOPY ./build/drop_indexes.sql /usr/share/mapnik/openstreetmap-carto/\n#   Install mod_tile and renderd\n#  master is not a good point to rely on, but no tag exists on mod_tile Github's project since v0.4 (2011) !\n#  So we rely on the last commit of the master branch at the time of this Dockerfile\nENV MOD_TILE_VERSION=\"e25bfdba1c1f2103c69529f1a30b22a14ce311f1\"\nENV MOD_TILE_PARALLEL_BUILD=\"4\"\nRUN cd /tmp \\\n && git clone https://github.com/openstreetmap/mod_tile.git \\\n && cd /tmp/mod_tile \\\n && git reset --hard $MOD_TILE_VERSION \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j $MOD_TILE_PARALLEL_BUILD \\\n && make install \\\n && make install-mod_tile \\\n && ldconfig \\\n && cd /tmp \\\n && rm -rf /tmp/mod_tile\nRUN cp -p /usr/local/etc/renderd.conf /usr/local/etc/renderd.conf.orig\nCOPY ./build/renderd.conf /usr/local/etc/\n#   Create the files required for the mod_tile system to run\nRUN mkdir /var/run/renderd \\\n && chown www-data: /var/run/renderd\nRUN mkdir /var/lib/mod_tile \\\n && chown www-data /var/lib/mod_tile\n#   Replace default apache index page with Leaflet demo\nCOPY ./build/index.html /var/www/html/\n#   Configure mod_tile\nCOPY ./build/mod_tile.load /etc/apache2/mods-available/\nCOPY ./build/mod_tile.conf /etc/apache2/mods-available/\nRUN a2enmod mod_tile\n#   Ensure the webserver user can connect to the gis database\nRUN sed -i -e 's/local all all peer/local gis www-data peer/' /etc/postgresql/9.5/main/pg_hba.conf\n#   Tune postgresql\nCOPY ./build/postgresql.conf.sed /tmp/\nRUN sed --file /tmp/postgresql.conf.sed --in-place /etc/postgresql/9.5/main/postgresql.conf\n#   Define the application logging logic\nCOPY ./build/syslog-ng.conf /etc/syslog-ng/conf.d/local.conf\nRUN rm -rf /var/log/postgresql\n#   Create a `postgresql` `runit` service\nCOPY ./build/sv/postgresql /etc/sv/postgresql/\nRUN update-service --add /etc/sv/postgresql\n#   Create an `apache2` `runit` service\nCOPY ./build/sv/apache2 /etc/sv/apache2/\nRUN update-service --add /etc/sv/apache2\n#   Create a `renderd` `runit` service\nCOPY ./build/sv/renderd /etc/sv/renderd/\nRUN update-service --add /etc/sv/renderd\n#   Expose the webserver and database ports\nEXPOSE 80/tcp 5432/tcp\n#   Set the osm2pgsql import cache size in MB. Used in `run import` and `run importappend`.\nENV OSM_IMPORT_CACHE=\"40\"\n#   Add the README\nCOPY ./README.md /usr/local/share/doc/\n#   Add the help file\nCOPY ./build/help.txt /usr/local/share/doc/run/\nRUN rm -Rf /var/lib/postgresql/9.5/main\n#   Correct the Error: could not open temporary statistics file \"/var/run/postgresql/9.5-main.pg_stat_tmp/global.tmp\": No such file or directory\nRUN mkdir -p /var/run/postgresql/9.5-main.pg_stat_tmp\nRUN chown postgres:postgres /var/run/postgresql/9.5-main.pg_stat_tmp -R\n#  Add the perl script to render only an extract of the map\nCOPY ./build/render_list_geo.pl /opt/\nRUN chmod +x /opt/render_list_geo.pl\n#   Configure mod_rewrite\nCOPY ./build/rewrite.conf /etc/apache2/mods-available/\nCOPY ./build/000-default.conf /etc/apache2/sites-available/\n#   Add the entrypoint\nCOPY ./build/run.sh /usr/local/sbin/run\nRUN chmod +x /usr/local/sbin/run /etc/sv/renderd/run /etc/sv/apache2/run /etc/sv/postgresql/check /etc/sv/postgresql/run\nENTRYPOINT [\"/sbin/my_init\", \"--\", \"/usr/local/sbin/run\"]\n#   Default to showing the usage text\nCMD [\"help\"]\n#   Clean up APT\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n","originalDockerfileUglifiedHash":"614749f3ab69c482edec58bf1f3ecd9b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c725f35e6c277a80365f5f3478cda1617c254739.dockerfile"}