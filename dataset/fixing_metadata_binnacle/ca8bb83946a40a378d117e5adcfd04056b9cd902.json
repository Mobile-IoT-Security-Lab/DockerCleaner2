{"seed":2570586952,"processedDockerfileHash":"1aa339689734439ee5a61d06118e1fca","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   ==============================================================================\n#   Copyright (C) 2018-2019 Intel Corporation\n#\n#   SPDX-License-Identifier: MIT\n#   ==============================================================================\nFROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 autoconf=2.69-9 make=4.1-6 git=1:2.7.4-0ubuntu1.10 wget=1.17.1-1ubuntu1.5 pciutils=1:3.3.1-1.1ubuntu1.3 cpio=2.11+dfsg-5ubuntu1.1 libtool=2.4.6-0.1 lsb-release=9.20160110ubuntu0.2 ca-certificates=20210119~16.04.1 pkg-config=0.29.1-0ubuntu1 bison=2:3.0.4.dfsg-1 flex=2.6.0-11 libcurl4-gnutls-dev=7.47.0-1ubuntu2.19 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install --no-install-recommends automake=1:1.15-4ubuntu1 -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev=2.0.11-1ubuntu1.1 -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=90b56a80795d4d0448673c4c7276ce6d5c8ac9d4\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#   Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build libdrm\nARG LIBDRM_VER=2.4.96\nARG LIBDRM_REPO=https://dri.freedesktop.org/libdrm/libdrm-${LIBDRM_VER}.tar.gz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpciaccess-dev=0.13.4-1 -y -q\nRUN wget -O - ${LIBDRM_REPO} | tar xz \\\n && cd libdrm-${LIBDRM_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libx11-dev=2:1.6.3-1ubuntu2.2 xorg-dev=1:7.7+13ubuntu3.1 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 openbox=3.6.1-1ubuntu2.1 -y -q\n#   Build Intel(R) Media SDK\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/releases/download/intel-mediasdk-19.1.0/MediaStack.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && cd MediaStack \\\n && cp -r opt/ /home/build \\\n && cp -r etc/ /home/build \\\n && cp -a opt/. /opt/ \\\n && cp -a etc/. /opt/ \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\n#  clinfo needs to be installed after build directory is copied over\nRUN mkdir neo \\\n && cd neo \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-gmmlib_18.4.1_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-core_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-opencl_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-opencl_19.04.12237_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-ocloc_19.04.12237_amd64.deb \\\n && dpkg -i *.deb \\\n && dpkg-deb -x intel-gmmlib_18.4.1_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-core_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-opencl_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-opencl_19.04.12237_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-ocloc_19.04.12237_amd64.deb /home/build/\n#   Build DLDT-Inference Engine\nARG DLDT_VER=2019_R1.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libusb-1.0-0-dev=2:1.0.20-1 libboost-all-dev=1.58.0.1ubuntu1 libgtk2.0-dev=2.24.30-1ubuntu1.16.04.2 python3=3.5.1-3 python3-pip=8.1.1-2ubuntu0.6 python3-setuptools=20.7.0-1 python-yaml=3.11-3build1 -y -q\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} \\\n && cd dldt \\\n && git submodule init \\\n && git submodule update --recursive \\\n && cd inference-engine \\\n && mkdir build \\\n && cd build \\\n && cmake -DENABLE_VALIDATION_SET=OFF -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=ON -DENABLE_SAMPLE_CORE=OFF .. \\\n && make -j $( nproc ;) \\\n && rm -rf ../bin/intel64/Release/lib/libgtest* \\\n && rm -rf ../bin/intel64/Release/lib/libgmock* \\\n && rm -rf ../bin/intel64/Release/lib/libmock* \\\n && rm -rf ../bin/intel64/Release/lib/libtest*\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nRUN mkdir -p /opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include \\\n && mkdir -p ${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* ${libdir} \\\n && mkdir -p /opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* /opt/intel/dldt/inference-engine/external/\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include \\\n && mkdir -p build${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} \\\n && mkdir -p build/opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* build/opt/intel/dldt/inference-engine/external/\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" \\\n && mkdir -p \"${pkgconfiglibdir}/pkgconfig\" \\\n && pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" \\\n && echo \"prefix=/opt\" > \"$pc\" \\\n && echo \"libdir=${libdir}\" >> \"$pc\" \\\n && echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Name: DLDT\" >> \"$pc\" \\\n && echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" \\\n && echo \"Version: 5.0\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Libs: -L${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" \\\n && echo \"Cflags: -I${includedir}\" >> \"$pc\"; done\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\"\n#   Build the gstremaer core\nARG GST_VER=1.16.0\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglib2.0-dev=2.48.2-0ubuntu4.8 gobject-introspection=1.46.0-3ubuntu1 libgirepository1.0-dev=1.46.0-3ubuntu1 libpango-1.0-0=1.38.1-1 libpangocairo-1.0-0=1.38.1-1 autopoint=0.19.7-2ubuntu3.1 -y -q\nRUN wget -O - ${GST_REPO} | tar xJ \\\n && cd gstreamer-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-introspection --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin bad set\nARG GST_ORC_VER=0.4.29\nARG GST_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VER}.tar.xz\nRUN wget -O - ${GST_ORC_REPO} | tar xJ \\\n && cd orc-${GST_ORC_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libxrandr-dev=2:1.5.0-1 libegl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 autopoint=0.19.7-2ubuntu3.1 bison=2:3.0.4.dfsg-1 flex=2.6.0-11 libudev-dev=229-4ubuntu21.31 -y -q\n#   Build the gstremaer plugin base\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv-dev=2:1.0.10-1 libvisual-0.4-dev=0.4.0-8 libtheora-dev=1.1.1+dfsg.1-8 libglib2.0-dev=2.48.2-0ubuntu4.8 libasound2-dev=1.1.0-0ubuntu1 libcdparanoia-dev=3.10.2+debian-11 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 libpango1.0-dev=1.38.1-1 -y -q\nRUN wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ \\\n && cd gst-plugins-base-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-introspection --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin good set\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libsoup2.4-dev=2.52.2-1ubuntu0.3 libjpeg-dev=8c-2ubuntu8 -y -q\nRUN wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ \\\n && cd gst-plugins-good-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin bad set\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libssl-dev=1.0.2g-1ubuntu4.20 -y -q\nRUN wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ \\\n && cd gst-plugins-bad-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin ugly set\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ ; cd gst-plugins-ugly-${GST_VER} ; ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gst-libav\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libssl-dev=1.0.2g-1ubuntu4.20 -y -q\nRUN wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ \\\n && cd gst-libav-${GST_VER} \\\n && ./autogen.sh --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-gpl --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gstremaer plugin for svt\nRUN cd SVT-HEVC/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-VP9/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-AV1/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gstremaer plugin vaapi\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_VAAPI_REPO} | tar xJ \\\n && cd gstreamer-vaapi-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nARG OPENCV_VER=4.1.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libgtk2.0-dev=2.24.30-1ubuntu1.16.04.2 pkg-config=0.29.1-0ubuntu1 libavcodec-dev=7:2.8.17-0ubuntu0.1 libavformat-dev=7:2.8.17-0ubuntu0.1 libswscale-dev=7:2.8.17-0ubuntu0.1 python-dev=2.7.12-1~16.04 python-numpy=1:1.11.0-1ubuntu1 -y -q\nRUN wget ${OPENCV_REPO} \\\n && tar -zxvf ${OPENCV_VER}.tar.gz \\\n && cd opencv-${OPENCV_VER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get install --no-install-recommends gtk-doc-tools=1.25-1ubuntu1.1 -y -q\nARG PAHO_INSTALL=true\nARG PAHO_VER=1.3.0\nARG PAHO_REPO=https://github.com/eclipse/paho.mqtt.c/archive/v${PAHO_VER}.tar.gz\nRUN if [ \"$PAHO_INSTALL\" = \"true\" ] ; then wget -O - ${PAHO_REPO} | tar -xz \\\n && cd paho.mqtt.c-${PAHO_VER} \\\n && make \\\n && make install \\\n && cp build/output/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/paho_c_version /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_sub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_sub /home/build/usr/bin/ \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so \\\n && cp src/MQTTAsync.h /home/build/usr/include/ \\\n && cp src/MQTTClient.h /home/build/usr/include/ \\\n && cp src/MQTTClientPersistence.h /home/build/usr/include/ \\\n && cp src/MQTTProperties.h /home/build/usr/include/ \\\n && cp src/MQTTReasonCodes.h /home/build/usr/include/ \\\n && cp src/MQTTSubscribeOpts.h /home/build/usr/include/ ; else echo \"PAHO install disabled\" ; fi\nARG RDKAFKA_INSTALL=true\nARG RDKAFKA_VER=1.0.0\nARG RDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/v${RDKAFKA_VER}.tar.gz\nRUN wget -O - ${RDKAFKA_REPO} | tar -xz \\\n && cd librdkafka-${RDKAFKA_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu/ \\\n && make \\\n && make install \\\n && make install DESTDIR=/home/build\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for GSTREAMER & DLDT Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /root\n#   Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1=2:1.0.10-1 libxcb-shm0=1.11.1-1ubuntu1 libxcb-shape0=1.11.1-1ubuntu1 libxcb-xfixes0=1.11.1-1ubuntu1 libsdl2-2.0-0=2.0.4+dfsg1-2ubuntu2.16.04.2 libasound2=1.1.0-0ubuntu1 libvdpau1=1.1.1-3ubuntu1 libnuma1=2.0.11-1ubuntu1.1 libass5=0.13.1-1 libssl1.0.0=1.0.2g-1ubuntu4.20 libglib2.0 libpango-1.0-0=1.38.1-1 libpangocairo-1.0-0=1.38.1-1 gobject-introspection=1.46.0-3ubuntu1 libudev1=229-4ubuntu21.31 libx11-xcb1=2:1.6.3-1ubuntu2.2 libgl1-mesa-glx=18.0.5-0ubuntu0~16.04.1 libxrandr2=2:1.5.0-1 libegl1-mesa=18.0.5-0ubuntu0~16.04.1 libpng12-0=1.2.54-1ubuntu1.1 libvisual-0.4-0=0.4.0-8 libtheora0=1.1.1+dfsg.1-8 libcdparanoia0=3.10.2+debian-11 libsoup2.4-1=2.52.2-1ubuntu0.3 libjpeg8=8c-2ubuntu8 libjpeg-turbo8=1.4.2-0ubuntu3.4 python3=3.5.1-3 python3-pip=8.1.1-2ubuntu0.6 python-yaml=3.11-3build1 libgtk2.0 clinfo=2.1.16.01.12-1 libusb-1.0-0-dev=2:1.0.20-1 libboost-all-dev=1.58.0.1ubuntu1 libjson-c-dev=0.11-4ubuntu2.6 build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 ocl-icd-opencl-dev=2.2.8-1 wget=1.17.1-1ubuntu1.5 gcovr=3.2-1 vim=2:7.4.1689-3ubuntu1.5 git=1:2.7.4-0ubuntu1.10 gdb=7.11.1-0ubuntu1~16.5 ca-certificates=20210119~16.04.1 libssl-dev=1.0.2g-1ubuntu4.20 -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\nRUN echo \"/usr/local/lib\\n/usr/lib/x86_64-linux-gnu/gstreamer-1.0\\n/opt/intel/dldt/inference-engine/lib/intel64/\\n/opt/intel/dldt/inference-engine/external/tbb/lib\\n/opt/intel/dldt/inference-engine/external/mkltiny_lnx_20190131/lib\\n/opt/intel/dldt/inference-engine/external/vpu/hddl/lib\" > /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\nENV DISPLAY=\":0.0\"\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LIBRARY_PATH=\"${LIBRARY_PATH}:/usr/lib\"\nENV PATH=\"/usr/bin:/opt/intel/mediasdk/bin:${PATH}\"\nARG GIT_INFO\nARG SOURCE_REV\nCOPY . gstreamer-plugins\nRUN mkdir -p gstreamer-plugins/build \\\n && cd gstreamer-plugins/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. -DVERSION_PATCH=${SOURCE_REV} -DGIT_INFO=${GIT_INFO} -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && echo \"/usr/lib/va-gstreamer-plugins\" >> /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV GST_PLUGIN_PATH=\"/usr/lib/va-gstreamer-plugins/\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  ==============================================================================\n#  Copyright (C) 2018-2019 Intel Corporation\n#\n#  SPDX-License-Identifier: MIT\n#  ==============================================================================\nFROM ubuntu:16.04 AS build\nWORKDIR /home\n#  COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#  Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#  Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#  Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Fetch SVT-AV1\nARG SVT_AV1_VER=90b56a80795d4d0448673c4c7276ce6d5c8ac9d4\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n# Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#  Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build libdrm\nARG LIBDRM_VER=2.4.96\nARG LIBDRM_REPO=https://dri.freedesktop.org/libdrm/libdrm-${LIBDRM_VER}.tar.gz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpciaccess-dev -y -q\nRUN wget -O - ${LIBDRM_REPO} | tar xz \\\n && cd libdrm-${LIBDRM_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libx11-dev xorg-dev libgl1-mesa-dev openbox -y -q\n#  Build Intel(R) Media SDK\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/releases/download/intel-mediasdk-19.1.0/MediaStack.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && cd MediaStack \\\n && cp -r opt/ /home/build \\\n && cp -r etc/ /home/build \\\n && cp -a opt/. /opt/ \\\n && cp -a etc/. /opt/ \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\n# clinfo needs to be installed after build directory is copied over\nRUN mkdir neo \\\n && cd neo \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-gmmlib_18.4.1_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-core_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-opencl_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-opencl_19.04.12237_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-ocloc_19.04.12237_amd64.deb \\\n && dpkg -i *.deb \\\n && dpkg-deb -x intel-gmmlib_18.4.1_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-core_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-opencl_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-opencl_19.04.12237_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-ocloc_19.04.12237_amd64.deb /home/build/\n#  Build DLDT-Inference Engine\nARG DLDT_VER=2019_R1.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libusb-1.0-0-dev libboost-all-dev libgtk2.0-dev python3 python3-pip python3-setuptools python-yaml -y -q\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} \\\n && cd dldt \\\n && git submodule init \\\n && git submodule update --recursive \\\n && cd inference-engine \\\n && mkdir build \\\n && cd build \\\n && cmake -DENABLE_VALIDATION_SET=OFF -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=ON -DENABLE_SAMPLE_CORE=OFF .. \\\n && make -j $( nproc ;) \\\n && rm -rf ../bin/intel64/Release/lib/libgtest* \\\n && rm -rf ../bin/intel64/Release/lib/libgmock* \\\n && rm -rf ../bin/intel64/Release/lib/libmock* \\\n && rm -rf ../bin/intel64/Release/lib/libtest*\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nRUN mkdir -p /opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include \\\n && mkdir -p ${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* ${libdir} \\\n && mkdir -p /opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* /opt/intel/dldt/inference-engine/external/\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include \\\n && mkdir -p build${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} \\\n && mkdir -p build/opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* build/opt/intel/dldt/inference-engine/external/\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" \\\n && mkdir -p \"${pkgconfiglibdir}/pkgconfig\" \\\n && pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" \\\n && echo \"prefix=/opt\" > \"$pc\" \\\n && echo \"libdir=${libdir}\" >> \"$pc\" \\\n && echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Name: DLDT\" >> \"$pc\" \\\n && echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" \\\n && echo \"Version: 5.0\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Libs: -L${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" \\\n && echo \"Cflags: -I${includedir}\" >> \"$pc\"; done\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\"\n#  Build the gstremaer core\nARG GST_VER=1.16.0\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglib2.0-dev gobject-introspection libgirepository1.0-dev libpango-1.0-0 libpangocairo-1.0-0 autopoint -y -q\nRUN wget -O - ${GST_REPO} | tar xJ \\\n && cd gstreamer-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-introspection --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build the gstremaer plugin bad set\nARG GST_ORC_VER=0.4.29\nARG GST_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VER}.tar.xz\nRUN wget -O - ${GST_ORC_REPO} | tar xJ \\\n && cd orc-${GST_ORC_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libxrandr-dev libegl1-mesa-dev autopoint bison flex libudev-dev -y -q\n#  Build the gstremaer plugin base\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv-dev libvisual-0.4-dev libtheora-dev libglib2.0-dev libasound2-dev libcdparanoia-dev libgl1-mesa-dev libpango1.0-dev -y -q\nRUN wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ \\\n && cd gst-plugins-base-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-introspection --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build the gstremaer plugin good set\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libsoup2.4-dev libjpeg-dev -y -q\nRUN wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ \\\n && cd gst-plugins-good-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build the gstremaer plugin bad set\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libssl-dev -y -q\nRUN wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ \\\n && cd gst-plugins-bad-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build the gstremaer plugin ugly set\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ ; cd gst-plugins-ugly-${GST_VER} ; ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build gst-libav\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ \\\n && cd gst-libav-${GST_VER} \\\n && ./autogen.sh --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-gpl --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build gstremaer plugin for svt\nRUN cd SVT-HEVC/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-VP9/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-AV1/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build gstremaer plugin vaapi\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_VAAPI_REPO} | tar xJ \\\n && cd gstreamer-vaapi-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nARG OPENCV_VER=4.1.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy -y -q\nRUN wget ${OPENCV_REPO} \\\n && tar -zxvf ${OPENCV_VER}.tar.gz \\\n && cd opencv-${OPENCV_VER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get install --no-install-recommends gtk-doc-tools -y -q\nARG PAHO_INSTALL=true\nARG PAHO_VER=1.3.0\nARG PAHO_REPO=https://github.com/eclipse/paho.mqtt.c/archive/v${PAHO_VER}.tar.gz\nRUN if [ \"$PAHO_INSTALL\" = \"true\" ] ; then wget -O - ${PAHO_REPO} | tar -xz \\\n && cd paho.mqtt.c-${PAHO_VER} \\\n && make \\\n && make install \\\n && cp build/output/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/paho_c_version /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_sub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_sub /home/build/usr/bin/ \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so \\\n && cp src/MQTTAsync.h /home/build/usr/include/ \\\n && cp src/MQTTClient.h /home/build/usr/include/ \\\n && cp src/MQTTClientPersistence.h /home/build/usr/include/ \\\n && cp src/MQTTProperties.h /home/build/usr/include/ \\\n && cp src/MQTTReasonCodes.h /home/build/usr/include/ \\\n && cp src/MQTTSubscribeOpts.h /home/build/usr/include/ ; else echo \"PAHO install disabled\" ; fi\nARG RDKAFKA_INSTALL=true\nARG RDKAFKA_VER=1.0.0\nARG RDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/v${RDKAFKA_VER}.tar.gz\nRUN wget -O - ${RDKAFKA_REPO} | tar -xz \\\n && cd librdkafka-${RDKAFKA_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu/ \\\n && make \\\n && make install \\\n && make install DESTDIR=/home/build\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for GSTREAMER & DLDT Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /root\n#  Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libass5 libssl1.0.0 libglib2.0 libpango-1.0-0 libpangocairo-1.0-0 gobject-introspection libudev1 libx11-xcb1 libgl1-mesa-glx libxrandr2 libegl1-mesa libpng12-0 libvisual-0.4-0 libtheora0 libcdparanoia0 libsoup2.4-1 libjpeg8 libjpeg-turbo8 python3 python3-pip python-yaml libgtk2.0 clinfo libusb-1.0-0-dev libboost-all-dev libjson-c-dev build-essential cmake ocl-icd-opencl-dev wget gcovr vim git gdb ca-certificates libssl-dev -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#  Install\nCOPY --from=build /home/build /\nRUN echo \"/usr/local/lib\\n/usr/lib/x86_64-linux-gnu/gstreamer-1.0\\n/opt/intel/dldt/inference-engine/lib/intel64/\\n/opt/intel/dldt/inference-engine/external/tbb/lib\\n/opt/intel/dldt/inference-engine/external/mkltiny_lnx_20190131/lib\\n/opt/intel/dldt/inference-engine/external/vpu/hddl/lib\" > /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\nENV DISPLAY=\":0.0\"\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LIBRARY_PATH=\"${LIBRARY_PATH}:/usr/lib\"\nENV PATH=\"/usr/bin:/opt/intel/mediasdk/bin:${PATH}\"\nARG GIT_INFO\nARG SOURCE_REV\nCOPY . gstreamer-plugins\nRUN mkdir -p gstreamer-plugins/build \\\n && cd gstreamer-plugins/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. -DVERSION_PATCH=${SOURCE_REV} -DGIT_INFO=${GIT_INFO} -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && echo \"/usr/lib/va-gstreamer-plugins\" >> /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV GST_PLUGIN_PATH=\"/usr/lib/va-gstreamer-plugins/\"\n","injectedSmells":[],"originalDockerfileHash":"52f3e08ad6e707bc393f00b999380b48","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   ==============================================================================\n#   Copyright (C) 2018-2019 Intel Corporation\n#\n#   SPDX-License-Identifier: MIT\n#   ==============================================================================\nFROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=90b56a80795d4d0448673c4c7276ce6d5c8ac9d4\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#   Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build libdrm\nARG LIBDRM_VER=2.4.96\nARG LIBDRM_REPO=https://dri.freedesktop.org/libdrm/libdrm-${LIBDRM_VER}.tar.gz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpciaccess-dev -y -q\nRUN wget -O - ${LIBDRM_REPO} | tar xz \\\n && cd libdrm-${LIBDRM_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libx11-dev xorg-dev libgl1-mesa-dev openbox -y -q\n#   Build Intel(R) Media SDK\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/releases/download/intel-mediasdk-19.1.0/MediaStack.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && cd MediaStack \\\n && cp -r opt/ /home/build \\\n && cp -r etc/ /home/build \\\n && cp -a opt/. /opt/ \\\n && cp -a etc/. /opt/ \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\n#  clinfo needs to be installed after build directory is copied over\nRUN mkdir neo \\\n && cd neo \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-gmmlib_18.4.1_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-core_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-igc-opencl_18.50.1270_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-opencl_19.04.12237_amd64.deb \\\n && wget https://github.com/intel/compute-runtime/releases/download/19.04.12237/intel-ocloc_19.04.12237_amd64.deb \\\n && dpkg -i *.deb \\\n && dpkg-deb -x intel-gmmlib_18.4.1_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-core_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-igc-opencl_18.50.1270_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-opencl_19.04.12237_amd64.deb /home/build/ \\\n && dpkg-deb -x intel-ocloc_19.04.12237_amd64.deb /home/build/\n#   Build DLDT-Inference Engine\nARG DLDT_VER=2019_R1.1\nARG DLDT_REPO=https://github.com/opencv/dldt.git\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libusb-1.0-0-dev libboost-all-dev libgtk2.0-dev python3 python3-pip python3-setuptools python-yaml -y -q\nRUN git clone -b ${DLDT_VER} ${DLDT_REPO} \\\n && cd dldt \\\n && git submodule init \\\n && git submodule update --recursive \\\n && cd inference-engine \\\n && mkdir build \\\n && cd build \\\n && cmake -DENABLE_VALIDATION_SET=OFF -DCMAKE_INSTALL_PREFIX=/opt/intel/dldt -DLIB_INSTALL_PATH=/opt/intel/dldt -DENABLE_MKL_DNN=ON -DENABLE_CLDNN=ON -DENABLE_SAMPLE_CORE=OFF .. \\\n && make -j $( nproc ;) \\\n && rm -rf ../bin/intel64/Release/lib/libgtest* \\\n && rm -rf ../bin/intel64/Release/lib/libgmock* \\\n && rm -rf ../bin/intel64/Release/lib/libmock* \\\n && rm -rf ../bin/intel64/Release/lib/libtest*\nARG libdir=/opt/intel/dldt/inference-engine/lib/intel64\nRUN mkdir -p /opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* /opt/intel/dldt/inference-engine/include \\\n && mkdir -p ${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* ${libdir} \\\n && mkdir -p /opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* /opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* /opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p /opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* /opt/intel/dldt/inference-engine/external/\nRUN mkdir -p build/opt/intel/dldt/inference-engine/include \\\n && cp -r dldt/inference-engine/include/* build/opt/intel/dldt/inference-engine/include \\\n && mkdir -p build${libdir} \\\n && cp -r dldt/inference-engine/bin/intel64/Release/lib/* build${libdir} \\\n && mkdir -p build/opt/intel/dldt/inference-engine/src \\\n && cp -r dldt/inference-engine/src/* build/opt/intel/dldt/inference-engine/src/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/share \\\n && cp -r dldt/inference-engine/build/share/* build/opt/intel/dldt/inference-engine/share/ \\\n && mkdir -p build/opt/intel/dldt/inference-engine/external/ \\\n && cp -r dldt/inference-engine/temp/* build/opt/intel/dldt/inference-engine/external/\nRUN for p in /usr /home/build/usr /opt/intel/dldt/inference-engine /home/build/opt/intel/dldt/inference-engine; do pkgconfiglibdir=\"$p/lib/x86_64-linux-gnu\" \\\n && mkdir -p \"${pkgconfiglibdir}/pkgconfig\" \\\n && pc=\"${pkgconfiglibdir}/pkgconfig/dldt.pc\" \\\n && echo \"prefix=/opt\" > \"$pc\" \\\n && echo \"libdir=${libdir}\" >> \"$pc\" \\\n && echo \"includedir=/opt/intel/dldt/inference-engine/include\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Name: DLDT\" >> \"$pc\" \\\n && echo \"Description: Intel Deep Learning Deployment Toolkit\" >> \"$pc\" \\\n && echo \"Version: 5.0\" >> \"$pc\" \\\n && echo \"\" >> \"$pc\" \\\n && echo \"Libs: -L${libdir} -linference_engine -linference_engine_c_wrapper\" >> \"$pc\" \\\n && echo \"Cflags: -I${includedir}\" >> \"$pc\"; done\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/opt/intel/dldt/inference-engine/lib:/opt/intel/dldt/inference-engine/external/tbb/lib:${libdir}\"\n#   Build the gstremaer core\nARG GST_VER=1.16.0\nARG GST_REPO=https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglib2.0-dev gobject-introspection libgirepository1.0-dev libpango-1.0-0 libpangocairo-1.0-0 autopoint -y -q\nRUN wget -O - ${GST_REPO} | tar xJ \\\n && cd gstreamer-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-introspection --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin bad set\nARG GST_ORC_VER=0.4.29\nARG GST_ORC_REPO=https://gstreamer.freedesktop.org/src/orc/orc-${GST_ORC_VER}.tar.xz\nRUN wget -O - ${GST_ORC_REPO} | tar xJ \\\n && cd orc-${GST_ORC_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get update \\\n && apt-get install --no-install-recommends libxrandr-dev libegl1-mesa-dev autopoint bison flex libudev-dev -y -q\n#   Build the gstremaer plugin base\nARG GST_PLUGIN_BASE_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv-dev libvisual-0.4-dev libtheora-dev libglib2.0-dev libasound2-dev libcdparanoia-dev libgl1-mesa-dev libpango1.0-dev -y -q\nRUN wget -O - ${GST_PLUGIN_BASE_REPO} | tar xJ \\\n && cd gst-plugins-base-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-introspection --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin good set\nARG GST_PLUGIN_GOOD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libsoup2.4-dev libjpeg-dev -y -q\nRUN wget -O - ${GST_PLUGIN_GOOD_REPO} | tar xJ \\\n && cd gst-plugins-good-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin bad set\nARG GST_PLUGIN_BAD_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-bad/gst-plugins-bad-${GST_VER}.tar.xz\nRUN apt-get update \\\n && apt-get install --no-install-recommends libssl-dev -y -q\nRUN wget -O - ${GST_PLUGIN_BAD_REPO} | tar xJ \\\n && cd gst-plugins-bad-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build the gstremaer plugin ugly set\nARG GST_PLUGIN_UGLY_REPO=https://gstreamer.freedesktop.org/src/gst-plugins-ugly/gst-plugins-ugly-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_UGLY_REPO} | tar xJ ; cd gst-plugins-ugly-${GST_VER} ; ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gst-libav\nARG GST_PLUGIN_LIBAV_REPO=https://gstreamer.freedesktop.org/src/gst-libav/gst-libav-${GST_VER}.tar.xz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${GST_PLUGIN_LIBAV_REPO} | tar xJ \\\n && cd gst-libav-${GST_VER} \\\n && ./autogen.sh --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-gpl --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gstremaer plugin for svt\nRUN cd SVT-HEVC/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-VP9/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN cd SVT-AV1/gstreamer-plugin \\\n && cmake . \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build gstremaer plugin vaapi\nARG GST_PLUGIN_VAAPI_REPO=https://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-${GST_VER}.tar.xz\nRUN wget -O - ${GST_PLUGIN_VAAPI_REPO} | tar xJ \\\n && cd gstreamer-vaapi-${GST_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --libexecdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-gtk-doc \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nARG OPENCV_VER=4.1.0\nARG OPENCV_REPO=https://github.com/opencv/opencv/archive/${OPENCV_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy -y -q\nRUN wget ${OPENCV_REPO} \\\n && tar -zxvf ${OPENCV_VER}.tar.gz \\\n && cd opencv-${OPENCV_VER} \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -D BUILD_EXAMPLES=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_DOCS=OFF -D BUILD_TESTS=OFF .. \\\n && make -j $( nproc ;) \\\n && make install DESTDIR=/home/build \\\n && make install\nRUN apt-get install --no-install-recommends gtk-doc-tools -y -q\nARG PAHO_INSTALL=true\nARG PAHO_VER=1.3.0\nARG PAHO_REPO=https://github.com/eclipse/paho.mqtt.c/archive/v${PAHO_VER}.tar.gz\nRUN if [ \"$PAHO_INSTALL\" = \"true\" ] ; then wget -O - ${PAHO_REPO} | tar -xz \\\n && cd paho.mqtt.c-${PAHO_VER} \\\n && make \\\n && make install \\\n && cp build/output/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/ \\\n && cp build/output/paho_c_version /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_c_sub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_pub /home/build/usr/bin/ \\\n && cp build/output/samples/paho_cs_sub /home/build/usr/bin/ \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 \\\n && chmod 644 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1.0 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3c.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3cs.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3a.so \\\n && ln /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so.1 /home/build/usr/lib/x86_64-linux-gnu/libpaho-mqtt3as.so \\\n && cp src/MQTTAsync.h /home/build/usr/include/ \\\n && cp src/MQTTClient.h /home/build/usr/include/ \\\n && cp src/MQTTClientPersistence.h /home/build/usr/include/ \\\n && cp src/MQTTProperties.h /home/build/usr/include/ \\\n && cp src/MQTTReasonCodes.h /home/build/usr/include/ \\\n && cp src/MQTTSubscribeOpts.h /home/build/usr/include/ ; else echo \"PAHO install disabled\" ; fi\nARG RDKAFKA_INSTALL=true\nARG RDKAFKA_VER=1.0.0\nARG RDKAFKA_REPO=https://github.com/edenhill/librdkafka/archive/v${RDKAFKA_VER}.tar.gz\nRUN wget -O - ${RDKAFKA_REPO} | tar -xz \\\n && cd librdkafka-${RDKAFKA_VER} \\\n && ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu/ \\\n && make \\\n && make install \\\n && make install DESTDIR=/home/build\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for GSTREAMER & DLDT Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /root\n#   Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libass5 libssl1.0.0 libglib2.0 libpango-1.0-0 libpangocairo-1.0-0 gobject-introspection libudev1 libx11-xcb1 libgl1-mesa-glx libxrandr2 libegl1-mesa libpng12-0 libvisual-0.4-0 libtheora0 libcdparanoia0 libsoup2.4-1 libjpeg8 libjpeg-turbo8 python3 python3-pip python-yaml libgtk2.0 clinfo libusb-1.0-0-dev libboost-all-dev libjson-c-dev build-essential cmake ocl-icd-opencl-dev wget gcovr vim git gdb ca-certificates libssl-dev -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\nRUN echo \"/usr/local/lib\\n/usr/lib/x86_64-linux-gnu/gstreamer-1.0\\n/opt/intel/dldt/inference-engine/lib/intel64/\\n/opt/intel/dldt/inference-engine/external/tbb/lib\\n/opt/intel/dldt/inference-engine/external/mkltiny_lnx_20190131/lib\\n/opt/intel/dldt/inference-engine/external/vpu/hddl/lib\" > /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV LIBVA_DRIVERS_PATH=\"/opt/intel/mediasdk/lib64\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nENV PKG_CONFIG_PATH=\"/usr/lib/x86_64-linux-gnu/pkgconfig:/opt/intel/mediasdk/lib64/pkgconfig:${PKG_CONFIG_PATH}\"\nENV GST_VAAPI_ALL_DRIVERS=\"1\"\nENV DISPLAY=\":0.0\"\nENV InferenceEngine_DIR=\"/opt/intel/dldt/inference-engine/share\"\nENV LIBRARY_PATH=\"${LIBRARY_PATH}:/usr/lib\"\nENV PATH=\"/usr/bin:/opt/intel/mediasdk/bin:${PATH}\"\nARG GIT_INFO\nARG SOURCE_REV\nCOPY . gstreamer-plugins\nRUN mkdir -p gstreamer-plugins/build \\\n && cd gstreamer-plugins/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr .. -DVERSION_PATCH=${SOURCE_REV} -DGIT_INFO=${GIT_INFO} -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && echo \"/usr/lib/va-gstreamer-plugins\" >> /etc/ld.so.conf.d/opencv-dldt-gst.conf \\\n && ldconfig\nENV GST_PLUGIN_PATH=\"/usr/lib/va-gstreamer-plugins/\"\n","originalDockerfileUglifiedHash":"70a4d2b9cbc29a412078ceb039808bb3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ca8bb83946a40a378d117e5adcfd04056b9cd902.dockerfile"}