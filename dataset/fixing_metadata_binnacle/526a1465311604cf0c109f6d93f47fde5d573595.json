{"seed":780158946,"processedDockerfileHash":"f8b847b11cf53ec34b8d378cf8a269f4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Distributed under the MIT License.\n#   See LICENSE.txt for details.\n#   If you change this file please push a new image to DockerHub so that the\n#   new image is used for testing. Docker must be run as root on your machine,\n#   so to build a new image run the following as root (e.g. sudo su):\n#     cd $SPECTRE_HOME/containers\n#     docker build  -t sxscollaboration/spectrebuildenv:latest \\\n#                   -f ./Dockerfile.buildenv .\n#   and then to push to DockerHub:\n#     docker push sxscollaboration/spectrebuildenv\n#   If you do not have permission to push to DockerHub please coordinate with\n#   someone who does. Since changes to this image effect our testing\n#   infrastructure it is important all changes be carefully reviewed.\nFROM ubuntu:18.04\nARG PARALLEL_MAKE_ARG=-j2\nARG DEBIAN_FRONTEND=noninteractive\n#   Install required packages for SpECTRE\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends gcc-6=6.5.0-2ubuntu1~18.04 g++-6=6.5.0-2ubuntu1~18.04 gfortran-6=6.5.0-2ubuntu1~18.04 gcc-7=7.5.0-3ubuntu1~18.04 g++-7=7.5.0-3ubuntu1~18.04 gfortran-7=7.5.0-3ubuntu1~18.04 gcc-8=8.4.0-1ubuntu1~18.04 g++-8=8.4.0-1ubuntu1~18.04 gfortran-8=8.4.0-1ubuntu1~18.04 gdb=8.1.1-0ubuntu1 git=1:2.17.1-1ubuntu0.17 cmake=3.10.2-1ubuntu2.18.04.2 libopenblas-dev=0.2.20+ds-4 liblapack-dev=3.7.1-4ubuntu1 libhdf5-dev=1.10.0-patch1+docs-4 hdf5-tools=1.10.0-patch1+docs-4 libgsl0-dev clang-5.0=1:5.0.1-4 clang-format-5.0=1:5.0.1-4 clang-tidy-5.0=1:5.0.1-4 libclang-5.0-dev=1:5.0.1-4 wget=1.19.4-1ubuntu2.2 libncurses-dev lcov=1.13-3 cppcheck=1.82-1 libboost-all-dev=1.65.1.0ubuntu1 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 -y\n#   Update is needed to get libc++ correctly\n#   Install jemalloc\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends libc++-dev=6.0-2 libc++1=6.0-2 libc++abi-dev=6.0-2 -y \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends libjemalloc1=3.6.0-11 libjemalloc-dev=3.6.0-11 -y\n#   Install ccache to cache compilations for reduced compile time, and Doxygen\nRUN apt-get install --no-install-recommends ccache=3.4.1-1 doxygen=1.8.13-10 -y\n#   Install Python packages\nRUN apt-get install --no-install-recommends python-pip=9.0.1-2.3~ubuntu1.18.04.8 -y \\\n && pip install autopep8==2.0.2 flake8==6.0.0 \\\n && pip install numpy==1.24.2 scipy==1.10.1 \\\n && pip install coverxygen==1.7.0 beautifulsoup4==4.12.2 pybtex==0.24.0\n#   Add ruby gems and install coveralls using gem\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends rubygems -y \\\n && gem install coveralls-lcov --version 1.7.0\n#   Enable bash-completion by installing it and then adding it to the .bashrc file\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends bash-completion=1:2.8-1ubuntu1 -y \\\n && printf \"if [ -f /etc/bash_completion ] \\\n && ! shopt -oq posix; then\\n . /etc/bash_completion\\nfi\\n\\n\" >> /root/.bashrc\n#   Install LMod which is needed by Spack and set it to load at login\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends curl=7.58.0-2ubuntu3.24 lmod=6.6-0.2 -y \\\n && printf '. /etc/profile.d/lmod.sh\\n' >> /root/.bashrc \\\n && . /etc/profile.d/lmod.sh\n#   Install Spack to get remaining dependencies\nWORKDIR /work\nRUN git clone https://github.com/LLNL/spack.git\nWORKDIR /work/spack\n#   Since spack/develop is rather unstable, we check out a commit we\n#   know is stable. This should be updated periodically to update\n#   installed packages.\nRUN git checkout 470a45c51659156e7d154ea890e798ce32b8767d\nWORKDIR /work\n#   Spack needs to be pointed to the system OpenSSL to work properly, we add this\n#   in the general configure script for Spack rather than a user-specific\n#   configure script. The below code is documented in the Spack manual.\nRUN printf \"\\n openssl:\\n paths:\\n openssl@1.0.2g: /usr\\n buildable: False\\n\" >> /work/spack/etc/spack/defaults/packages.yaml\n#   Add Spack to PATH and install required dependencies\n#   The sed commands are necessary because spack fails to find the\n#   fortran compilers for an unknown reason. We compile the libraries with GCC6\n#   so that we do not need separate versions for GCC6 and GCC7.\nRUN echo \"export PATH=$PATH:/work/spack/bin\" >> /root/.bashrc \\\n && echo '. /work/spack/share/spack/setup-env.sh' >> /root/.bashrc \\\n && export PATH=$PATH:/work/spack/bin \\\n && spack compiler find \\\n && sed -i 's@fc: null@fc: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml \\\n && sed -i 's@f77: null@f77: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml\nRUN /work/spack/bin/spack install cmake \\\n && /work/spack/bin/spack install --no-checksum catch@2.1.0 \\\n && /work/spack/bin/spack install brigand@master \\\n && /work/spack/bin/spack install blaze \\\n && /work/spack/bin/spack install gsl%gcc@6.5.0 \\\n && /work/spack/bin/spack install libsharp -openmp -mpi \\\n && /work/spack/bin/spack install libxsmm%gcc@6.5.0 \\\n && /work/spack/bin/spack install yaml-cpp@develop%gcc@6.5.0 \\\n && /work/spack/bin/spack install benchmark%gcc@6.5.0\n#   Install include-what-you-use\n#   We patch it to allow cyclic includes in boost\nRUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_5.0.tar.gz \\\n && tar -xzf clang_5.0.tar.gz \\\n && rm clang_5.0.tar.gz \\\n && mkdir /work/include-what-you-use-clang_5.0/build \\\n && cd /work/include-what-you-use-clang_5.0/ \\\n && sed -i 's^\\\\\\\"third_party/^<boost/^' iwyu_include_picker.cc \\\n && cd /work/include-what-you-use-clang_5.0/build \\\n && cmake -D CMAKE_CXX_COMPILER=clang++-5.0 -D CMAKE_C_COMPILER=clang-5.0 -D IWYU_LLVM_ROOT_PATH=/usr/lib/llvm-5.0 .. \\\n && make -j2 \\\n && make install \\\n && cd /work \\\n && rm -rf /work/include-what-you-use-clang_5.0\n#   Download and build the Charm++ version used by SpECTRE\n#   We build both Clang and GCC versions of Charm++ so that all our tests can\n#   use the same build environment.\nWORKDIR /work\nARG CHARM_GIT_TAG=v6.8.0\n#   Charm doesn't support compiling with clang-5 without symbolic links\nRUN ln -s $( which clang++-5.0 ;) /usr/local/bin/clang++ \\\n && ln -s $( which clang-5.0 ;) /usr/local/bin/clang \\\n && ln -s $( which clang-format-5.0 ;) /usr/local/bin/clang-format \\\n && ln -s $( which clang-tidy-5.0 ;) /usr/local/bin/clang-tidy\nRUN git clone https://charm.cs.illinois.edu/gerrit/charm \\\n && cd /work/charm \\\n && git checkout ${CHARM_GIT_TAG} \\\n && ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0 \\\n && ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} -g -O0 \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v6.8.patch \\\n && git apply /work/charm/v6.8.patch \\\n && rm /work/charm/v6.8.patch\nWORKDIR /work\n#   Load Spack dependencies at container load\nRUN echo 'spack load catch' >> /root/.bashrc \\\n && echo 'spack load brigand' >> /root/.bashrc \\\n && echo 'spack load blaze' >> /root/.bashrc \\\n && echo 'spack load gsl' >> /root/.bashrc \\\n && echo 'spack load libsharp' >> /root/.bashrc \\\n && echo 'spack load libxsmm' >> /root/.bashrc \\\n && echo 'spack load yaml-cpp' >> /root/.bashrc \\\n && echo 'spack load benchmark' >> /root/.bashrc\n#   - Set the environment variable SPECTRE_CONTAINER so we can check if we are\n#     inside a container (0 is true in bash)\n#   - The singularity containers work better if the locale is set properly\nENV SPECTRE_CONTAINER=\"0\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales=2.27-3ubuntu1.6 language-pack-fi=1:18.04+20200702 language-pack-en=1:18.04+20190718 -y \\\n && export LANGUAGE=en_US.UTF-8 \\\n && export LANG=en_US.UTF-8 \\\n && export LC_ALL=en_US.UTF-8 \\\n && locale-gen en_US.UTF-8 \\\n && dpkg-reconfigure locales\n#   Install bibtex for Doxygen bibliography management\n#   We first install the TeXLive infrastructure according to the configuration in\n#   support/TeXLive/texlive.profile and then use it to install the bibtex package.\nRUN mkdir /work/texlive\nWORKDIR /work/texlive\nRUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \\\n && tar -xzf install-tl-unx.tar.gz \\\n && rm install-tl-unx.tar.gz \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \\\n && install-tl-*/install-tl -profile=texlive.profile \\\n && rm -r install-tl-* texlive.profile install-tl.log \\\n && echo \"export PATH=$PATH:/work/texlive/bin/x86_64-linux\" >> /root/.bashrc \\\n && /work/texlive/bin/x86_64-linux/tlmgr install bibtex\nWORKDIR /work\n#   Work around posix rename bug:\n#     https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=891541\nRUN ln -s /usr/lib/x86_64-linux-gnu/lua/5.1/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.1/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.3/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.3/posix.so\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Distributed under the MIT License.\n#  See LICENSE.txt for details.\n#  If you change this file please push a new image to DockerHub so that the\n#  new image is used for testing. Docker must be run as root on your machine,\n#  so to build a new image run the following as root (e.g. sudo su):\n#    cd $SPECTRE_HOME/containers\n#    docker build  -t sxscollaboration/spectrebuildenv:latest \\\n#                  -f ./Dockerfile.buildenv .\n#  and then to push to DockerHub:\n#    docker push sxscollaboration/spectrebuildenv\n#  If you do not have permission to push to DockerHub please coordinate with\n#  someone who does. Since changes to this image effect our testing\n#  infrastructure it is important all changes be carefully reviewed.\nFROM ubuntu:18.04\nARG PARALLEL_MAKE_ARG=-j2\nARG DEBIAN_FRONTEND=noninteractive\n#  Install required packages for SpECTRE\nRUN apt-get update -y \\\n && apt-get install gcc-6 g++-6 gfortran-6 gcc-7 g++-7 gfortran-7 gcc-8 g++-8 gfortran-8 gdb git cmake libopenblas-dev liblapack-dev libhdf5-dev hdf5-tools libgsl0-dev clang-5.0 clang-format-5.0 clang-tidy-5.0 libclang-5.0-dev wget libncurses-dev lcov cppcheck libboost-all-dev libssl-dev -y\n#  Update is needed to get libc++ correctly\n#  Install jemalloc\nRUN apt-get update -y \\\n && apt-get install libc++-dev libc++1 libc++abi-dev -y \\\n && apt-get update -y \\\n && apt-get install libjemalloc1 libjemalloc-dev -y\n#  Install ccache to cache compilations for reduced compile time, and Doxygen\nRUN apt-get install ccache doxygen -y\n#  Install Python packages\nRUN apt-get install python-pip -y \\\n && pip install autopep8 flake8 \\\n && pip install numpy scipy \\\n && pip install coverxygen beautifulsoup4 pybtex\n#  Add ruby gems and install coveralls using gem\nRUN apt-get update -y \\\n && apt-get install rubygems -y \\\n && gem install coveralls-lcov\n#  Enable bash-completion by installing it and then adding it to the .bashrc file\nRUN apt-get update -y \\\n && apt-get install bash-completion -y \\\n && printf \"if [ -f /etc/bash_completion ] \\\n && ! shopt -oq posix; then\\n . /etc/bash_completion\\nfi\\n\\n\" >> /root/.bashrc\n#  Install LMod which is needed by Spack and set it to load at login\nRUN apt-get update -y \\\n && apt-get install curl lmod -y \\\n && printf '. /etc/profile.d/lmod.sh\\n' >> /root/.bashrc \\\n && . /etc/profile.d/lmod.sh\n#  Install Spack to get remaining dependencies\nWORKDIR /work\nRUN git clone https://github.com/LLNL/spack.git\nWORKDIR /work/spack\n#  Since spack/develop is rather unstable, we check out a commit we\n#  know is stable. This should be updated periodically to update\n#  installed packages.\nRUN git checkout 470a45c51659156e7d154ea890e798ce32b8767d\nWORKDIR /work\n#  Spack needs to be pointed to the system OpenSSL to work properly, we add this\n#  in the general configure script for Spack rather than a user-specific\n#  configure script. The below code is documented in the Spack manual.\nRUN printf \"\\n openssl:\\n paths:\\n openssl@1.0.2g: /usr\\n buildable: False\\n\" >> /work/spack/etc/spack/defaults/packages.yaml\n#  Add Spack to PATH and install required dependencies\n#  The sed commands are necessary because spack fails to find the\n#  fortran compilers for an unknown reason. We compile the libraries with GCC6\n#  so that we do not need separate versions for GCC6 and GCC7.\nRUN echo \"export PATH=$PATH:/work/spack/bin\" >> /root/.bashrc \\\n && echo '. /work/spack/share/spack/setup-env.sh' >> /root/.bashrc \\\n && export PATH=$PATH:/work/spack/bin \\\n && spack compiler find \\\n && sed -i 's@fc: null@fc: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml \\\n && sed -i 's@f77: null@f77: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml\nRUN /work/spack/bin/spack install cmake \\\n && /work/spack/bin/spack install --no-checksum catch@2.1.0 \\\n && /work/spack/bin/spack install brigand@master \\\n && /work/spack/bin/spack install blaze \\\n && /work/spack/bin/spack install gsl%gcc@6.5.0 \\\n && /work/spack/bin/spack install libsharp -openmp -mpi \\\n && /work/spack/bin/spack install libxsmm%gcc@6.5.0 \\\n && /work/spack/bin/spack install yaml-cpp@develop%gcc@6.5.0 \\\n && /work/spack/bin/spack install benchmark%gcc@6.5.0\n#  Install include-what-you-use\n#  We patch it to allow cyclic includes in boost\nRUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_5.0.tar.gz \\\n && tar -xzf clang_5.0.tar.gz \\\n && rm clang_5.0.tar.gz \\\n && mkdir /work/include-what-you-use-clang_5.0/build \\\n && cd /work/include-what-you-use-clang_5.0/ \\\n && sed -i 's^\\\\\\\"third_party/^<boost/^' iwyu_include_picker.cc \\\n && cd /work/include-what-you-use-clang_5.0/build \\\n && cmake -D CMAKE_CXX_COMPILER=clang++-5.0 -D CMAKE_C_COMPILER=clang-5.0 -D IWYU_LLVM_ROOT_PATH=/usr/lib/llvm-5.0 .. \\\n && make -j2 \\\n && make install \\\n && cd /work \\\n && rm -rf /work/include-what-you-use-clang_5.0\n#  Download and build the Charm++ version used by SpECTRE\n#  We build both Clang and GCC versions of Charm++ so that all our tests can\n#  use the same build environment.\nWORKDIR /work\nARG CHARM_GIT_TAG=v6.8.0\n#  Charm doesn't support compiling with clang-5 without symbolic links\nRUN ln -s $( which clang++-5.0 ;) /usr/local/bin/clang++ \\\n && ln -s $( which clang-5.0 ;) /usr/local/bin/clang \\\n && ln -s $( which clang-format-5.0 ;) /usr/local/bin/clang-format \\\n && ln -s $( which clang-tidy-5.0 ;) /usr/local/bin/clang-tidy\nRUN git clone https://charm.cs.illinois.edu/gerrit/charm \\\n && cd /work/charm \\\n && git checkout ${CHARM_GIT_TAG} \\\n && ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0 \\\n && ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} -g -O0 \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v6.8.patch \\\n && git apply /work/charm/v6.8.patch \\\n && rm /work/charm/v6.8.patch\nWORKDIR /work\n#  Load Spack dependencies at container load\nRUN echo 'spack load catch' >> /root/.bashrc \\\n && echo 'spack load brigand' >> /root/.bashrc \\\n && echo 'spack load blaze' >> /root/.bashrc \\\n && echo 'spack load gsl' >> /root/.bashrc \\\n && echo 'spack load libsharp' >> /root/.bashrc \\\n && echo 'spack load libxsmm' >> /root/.bashrc \\\n && echo 'spack load yaml-cpp' >> /root/.bashrc \\\n && echo 'spack load benchmark' >> /root/.bashrc\n#  - Set the environment variable SPECTRE_CONTAINER so we can check if we are\n#    inside a container (0 is true in bash)\n#  - The singularity containers work better if the locale is set properly\nENV SPECTRE_CONTAINER=\"0\"\nRUN apt-get update \\\n && apt-get install locales language-pack-fi language-pack-en -y \\\n && export LANGUAGE=en_US.UTF-8 \\\n && export LANG=en_US.UTF-8 \\\n && export LC_ALL=en_US.UTF-8 \\\n && locale-gen en_US.UTF-8 \\\n && dpkg-reconfigure locales\n#  Install bibtex for Doxygen bibliography management\n#  We first install the TeXLive infrastructure according to the configuration in\n#  support/TeXLive/texlive.profile and then use it to install the bibtex package.\nRUN mkdir /work/texlive\nWORKDIR /work/texlive\nRUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \\\n && tar -xzf install-tl-unx.tar.gz \\\n && rm install-tl-unx.tar.gz \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \\\n && install-tl-*/install-tl -profile=texlive.profile \\\n && rm -r install-tl-* texlive.profile install-tl.log \\\n && echo \"export PATH=$PATH:/work/texlive/bin/x86_64-linux\" >> /root/.bashrc \\\n && /work/texlive/bin/x86_64-linux/tlmgr install bibtex\nWORKDIR /work\n#  Work around posix rename bug:\n#    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=891541\nRUN ln -s /usr/lib/x86_64-linux-gnu/lua/5.1/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.1/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.3/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.3/posix.so\n","injectedSmells":[],"originalDockerfileHash":"42cfe544d3d566ac16bb0a052e8047e2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Distributed under the MIT License.\n#   See LICENSE.txt for details.\n#   If you change this file please push a new image to DockerHub so that the\n#   new image is used for testing. Docker must be run as root on your machine,\n#   so to build a new image run the following as root (e.g. sudo su):\n#     cd $SPECTRE_HOME/containers\n#     docker build  -t sxscollaboration/spectrebuildenv:latest \\\n#                   -f ./Dockerfile.buildenv .\n#   and then to push to DockerHub:\n#     docker push sxscollaboration/spectrebuildenv\n#   If you do not have permission to push to DockerHub please coordinate with\n#   someone who does. Since changes to this image effect our testing\n#   infrastructure it is important all changes be carefully reviewed.\nFROM ubuntu:18.04\nARG PARALLEL_MAKE_ARG=-j2\nARG DEBIAN_FRONTEND=noninteractive\n#   Install required packages for SpECTRE\nRUN apt-get update -y \\\n && apt-get install gcc-6 g++-6 gfortran-6 gcc-7 g++-7 gfortran-7 gcc-8 g++-8 gfortran-8 gdb git cmake libopenblas-dev liblapack-dev libhdf5-dev hdf5-tools libgsl0-dev clang-5.0 clang-format-5.0 clang-tidy-5.0 libclang-5.0-dev wget libncurses-dev lcov cppcheck libboost-all-dev libssl-dev -y\n#   Update is needed to get libc++ correctly\n#   Install jemalloc\nRUN apt-get update -y \\\n && apt-get install libc++-dev libc++1 libc++abi-dev -y \\\n && apt-get update -y \\\n && apt-get install libjemalloc1 libjemalloc-dev -y\n#   Install ccache to cache compilations for reduced compile time, and Doxygen\nRUN apt-get install ccache doxygen -y\n#   Install Python packages\nRUN apt-get install python-pip -y \\\n && pip install autopep8 flake8 \\\n && pip install numpy scipy \\\n && pip install coverxygen beautifulsoup4 pybtex\n#   Add ruby gems and install coveralls using gem\nRUN apt-get update -y \\\n && apt-get install rubygems -y \\\n && gem install coveralls-lcov\n#   Enable bash-completion by installing it and then adding it to the .bashrc file\nRUN apt-get update -y \\\n && apt-get install bash-completion -y \\\n && printf \"if [ -f /etc/bash_completion ] \\\n && ! shopt -oq posix; then\\n . /etc/bash_completion\\nfi\\n\\n\" >> /root/.bashrc\n#   Install LMod which is needed by Spack and set it to load at login\nRUN apt-get update -y \\\n && apt-get install curl lmod -y \\\n && printf '. /etc/profile.d/lmod.sh\\n' >> /root/.bashrc \\\n && . /etc/profile.d/lmod.sh\n#   Install Spack to get remaining dependencies\nWORKDIR /work\nRUN git clone https://github.com/LLNL/spack.git\nWORKDIR /work/spack\n#   Since spack/develop is rather unstable, we check out a commit we\n#   know is stable. This should be updated periodically to update\n#   installed packages.\nRUN git checkout 470a45c51659156e7d154ea890e798ce32b8767d\nWORKDIR /work\n#   Spack needs to be pointed to the system OpenSSL to work properly, we add this\n#   in the general configure script for Spack rather than a user-specific\n#   configure script. The below code is documented in the Spack manual.\nRUN printf \"\\n openssl:\\n paths:\\n openssl@1.0.2g: /usr\\n buildable: False\\n\" >> /work/spack/etc/spack/defaults/packages.yaml\n#   Add Spack to PATH and install required dependencies\n#   The sed commands are necessary because spack fails to find the\n#   fortran compilers for an unknown reason. We compile the libraries with GCC6\n#   so that we do not need separate versions for GCC6 and GCC7.\nRUN echo \"export PATH=$PATH:/work/spack/bin\" >> /root/.bashrc \\\n && echo '. /work/spack/share/spack/setup-env.sh' >> /root/.bashrc \\\n && export PATH=$PATH:/work/spack/bin \\\n && spack compiler find \\\n && sed -i 's@fc: null@fc: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml \\\n && sed -i 's@f77: null@f77: /usr/bin/gfortran@' /root/.spack/linux/compilers.yaml\nRUN /work/spack/bin/spack install cmake \\\n && /work/spack/bin/spack install --no-checksum catch@2.1.0 \\\n && /work/spack/bin/spack install brigand@master \\\n && /work/spack/bin/spack install blaze \\\n && /work/spack/bin/spack install gsl%gcc@6.5.0 \\\n && /work/spack/bin/spack install libsharp -openmp -mpi \\\n && /work/spack/bin/spack install libxsmm%gcc@6.5.0 \\\n && /work/spack/bin/spack install yaml-cpp@develop%gcc@6.5.0 \\\n && /work/spack/bin/spack install benchmark%gcc@6.5.0\n#   Install include-what-you-use\n#   We patch it to allow cyclic includes in boost\nRUN wget https://github.com/include-what-you-use/include-what-you-use/archive/clang_5.0.tar.gz \\\n && tar -xzf clang_5.0.tar.gz \\\n && rm clang_5.0.tar.gz \\\n && mkdir /work/include-what-you-use-clang_5.0/build \\\n && cd /work/include-what-you-use-clang_5.0/ \\\n && sed -i 's^\\\\\\\"third_party/^<boost/^' iwyu_include_picker.cc \\\n && cd /work/include-what-you-use-clang_5.0/build \\\n && cmake -D CMAKE_CXX_COMPILER=clang++-5.0 -D CMAKE_C_COMPILER=clang-5.0 -D IWYU_LLVM_ROOT_PATH=/usr/lib/llvm-5.0 .. \\\n && make -j2 \\\n && make install \\\n && cd /work \\\n && rm -rf /work/include-what-you-use-clang_5.0\n#   Download and build the Charm++ version used by SpECTRE\n#   We build both Clang and GCC versions of Charm++ so that all our tests can\n#   use the same build environment.\nWORKDIR /work\nARG CHARM_GIT_TAG=v6.8.0\n#   Charm doesn't support compiling with clang-5 without symbolic links\nRUN ln -s $( which clang++-5.0 ;) /usr/local/bin/clang++ \\\n && ln -s $( which clang-5.0 ;) /usr/local/bin/clang \\\n && ln -s $( which clang-format-5.0 ;) /usr/local/bin/clang-format \\\n && ln -s $( which clang-tidy-5.0 ;) /usr/local/bin/clang-tidy\nRUN git clone https://charm.cs.illinois.edu/gerrit/charm \\\n && cd /work/charm \\\n && git checkout ${CHARM_GIT_TAG} \\\n && ./build charm++ multicore-linux64 gcc ${PARALLEL_MAKE_ARG} -g -O0 \\\n && ./build charm++ multicore-linux64 clang ${PARALLEL_MAKE_ARG} -g -O0 \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/Charm/v6.8.patch \\\n && git apply /work/charm/v6.8.patch \\\n && rm /work/charm/v6.8.patch\nWORKDIR /work\n#   Load Spack dependencies at container load\nRUN echo 'spack load catch' >> /root/.bashrc \\\n && echo 'spack load brigand' >> /root/.bashrc \\\n && echo 'spack load blaze' >> /root/.bashrc \\\n && echo 'spack load gsl' >> /root/.bashrc \\\n && echo 'spack load libsharp' >> /root/.bashrc \\\n && echo 'spack load libxsmm' >> /root/.bashrc \\\n && echo 'spack load yaml-cpp' >> /root/.bashrc \\\n && echo 'spack load benchmark' >> /root/.bashrc\n#   - Set the environment variable SPECTRE_CONTAINER so we can check if we are\n#     inside a container (0 is true in bash)\n#   - The singularity containers work better if the locale is set properly\nENV SPECTRE_CONTAINER=\"0\"\nRUN apt-get update \\\n && apt-get install locales language-pack-fi language-pack-en -y \\\n && export LANGUAGE=en_US.UTF-8 \\\n && export LANG=en_US.UTF-8 \\\n && export LC_ALL=en_US.UTF-8 \\\n && locale-gen en_US.UTF-8 \\\n && dpkg-reconfigure locales\n#   Install bibtex for Doxygen bibliography management\n#   We first install the TeXLive infrastructure according to the configuration in\n#   support/TeXLive/texlive.profile and then use it to install the bibtex package.\nRUN mkdir /work/texlive\nWORKDIR /work/texlive\nRUN wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz \\\n && tar -xzf install-tl-unx.tar.gz \\\n && rm install-tl-unx.tar.gz \\\n && wget https://raw.githubusercontent.com/sxs-collaboration/spectre/develop/support/TeXLive/texlive.profile \\\n && install-tl-*/install-tl -profile=texlive.profile \\\n && rm -r install-tl-* texlive.profile install-tl.log \\\n && echo \"export PATH=$PATH:/work/texlive/bin/x86_64-linux\" >> /root/.bashrc \\\n && /work/texlive/bin/x86_64-linux/tlmgr install bibtex\nWORKDIR /work\n#   Work around posix rename bug:\n#     https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=891541\nRUN ln -s /usr/lib/x86_64-linux-gnu/lua/5.1/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.1/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/lua/5.3/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.3/posix.so\n","originalDockerfileUglifiedHash":"e6d27812f52fe82a2ecc8d0e34ed8d6e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/526a1465311604cf0c109f6d93f47fde5d573595.dockerfile"}