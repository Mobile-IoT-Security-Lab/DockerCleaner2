{"seed":695353956,"processedDockerfileHash":"993cba61127c5ee2159f76428ee6a544","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM phusion/baseimage:0.11\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends wget bzip2 unzip xz-utils ca-certificates p11-kit fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-11\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#   https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"11.0.3\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-\"\nENV JAVA_URL_VERSION=\"11.0.3_7\"\n#   https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 --no-same-owner ; rm openjdk.tgz* ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi' ;echo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done' ;echo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi' ;echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"' ; } > /etc/ca-certificates/update.d/docker-openjdk; chmod +x /etc/ca-certificates/update.d/docker-openjdk ; /etc/ca-certificates/update.d/docker-openjdk ; find \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; ldconfig ; javac --version ; java --version\nENV SPELLSOURCE_VERSION=\"0.8.33\"\nCOPY ./net/build/libs/net-${SPELLSOURCE_VERSION}.jar /data/net-${SPELLSOURCE_VERSION}.jar\nRUN mkdir /etc/service/java\nCOPY server.sh /etc/service/java/run\nRUN chmod +x /etc/service/java/run\n#   Define working directory.\nWORKDIR /data\nENV PORT=\"80\"\nENV HAZELCAST_PORT=\"5701\"\nENV VERTX_CLUSTER_PORT=\"5710\"\nEXPOSE 80/tcp\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM phusion/baseimage:0.11\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends wget bzip2 unzip xz-utils ca-certificates p11-kit fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#  Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-11\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#  backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#  https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"11.0.3\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-\"\nENV JAVA_URL_VERSION=\"11.0.3_7\"\n#  https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 --no-same-owner ; rm openjdk.tgz* ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi' ;echo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done' ;echo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi' ;echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"' ; } > /etc/ca-certificates/update.d/docker-openjdk; chmod +x /etc/ca-certificates/update.d/docker-openjdk ; /etc/ca-certificates/update.d/docker-openjdk ; find \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; ldconfig ; javac --version ; java --version\nENV SPELLSOURCE_VERSION=\"0.8.33\"\nADD ./net/build/libs/net-${SPELLSOURCE_VERSION}.jar /data/net-${SPELLSOURCE_VERSION}.jar\nRUN mkdir /etc/service/java\nCOPY server.sh /etc/service/java/run\nRUN chmod +x /etc/service/java/run\n#  Define working directory.\nWORKDIR /data\nENV PORT=\"80\"\nENV HAZELCAST_PORT=\"5701\"\nENV VERTX_CLUSTER_PORT=\"5710\"\nEXPOSE 80/tcp\n#  Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n","injectedSmells":[],"originalDockerfileHash":"1bdfbdca065cf4d49ada512629724264","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM phusion/baseimage:0.11\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends wget bzip2 unzip xz-utils ca-certificates p11-kit fontconfig libfreetype6 -y ; rm -rf /var/lib/apt/lists/*\n#   Default to UTF-8 file.encoding\nENV LANG=\"C.UTF-8\"\nENV JAVA_HOME=\"/usr/local/openjdk-11\"\nENV PATH=\"$JAVA_HOME/bin:$PATH\"\n#   backwards compatibility shim\nRUN { echo '#/bin/sh' ;echo 'echo \"$JAVA_HOME\"' ; } > /usr/local/bin/docker-java-home \\\n && chmod +x /usr/local/bin/docker-java-home \\\n && [ \"$JAVA_HOME\" = \"$( docker-java-home ;)\" ]\n#   https://adoptopenjdk.net/upstream.html\nENV JAVA_VERSION=\"11.0.3\"\nENV JAVA_BASE_URL=\"https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.3%2B7/OpenJDK11U-\"\nENV JAVA_URL_VERSION=\"11.0.3_7\"\n#   https://github.com/docker-library/openjdk/issues/320#issuecomment-494050246\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64) upstreamArch='x64' ;;(arm64) upstreamArch='aarch64' ;;(*) echo \"error: unsupported architecture: $dpkgArch\" >&2;; esac ; wget -O openjdk.tgz.asc \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz.sign\" ; wget -O openjdk.tgz \"${JAVA_BASE_URL}${upstreamArch}_linux_${JAVA_URL_VERSION}.tar.gz\" --progress=dot:giga ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F ; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671 ; gpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F | grep '0xA5CD6035332FA671' | grep 'Andrew Haley' ; gpg --batch --verify openjdk.tgz.asc openjdk.tgz ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; mkdir -p \"$JAVA_HOME\" ; tar --extract --file openjdk.tgz --directory \"$JAVA_HOME\" --strip-components 1 --no-same-owner ; rm openjdk.tgz* ; { echo '#!/usr/bin/env bash' ;echo 'set -Eeuo pipefail' ;echo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi' ;echo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done' ;echo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi' ;echo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"' ; } > /etc/ca-certificates/update.d/docker-openjdk; chmod +x /etc/ca-certificates/update.d/docker-openjdk ; /etc/ca-certificates/update.d/docker-openjdk ; find \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; ldconfig ; javac --version ; java --version\nENV SPELLSOURCE_VERSION=\"0.8.33\"\nADD ./net/build/libs/net-${SPELLSOURCE_VERSION}.jar /data/net-${SPELLSOURCE_VERSION}.jar\nRUN mkdir /etc/service/java\nCOPY server.sh /etc/service/java/run\nRUN chmod +x /etc/service/java/run\n#   Define working directory.\nWORKDIR /data\nENV PORT=\"80\"\nENV HAZELCAST_PORT=\"5701\"\nENV VERTX_CLUSTER_PORT=\"5710\"\nEXPOSE 80/tcp\n#   Use baseimage-docker's init system.\nCMD [\"/sbin/my_init\"]\n","originalDockerfileUglifiedHash":"a6741692f724dfc6c47e1ac080c71c45","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/65efd898f05fe6d9f79eb4f11460c47e95897b1d.dockerfile"}