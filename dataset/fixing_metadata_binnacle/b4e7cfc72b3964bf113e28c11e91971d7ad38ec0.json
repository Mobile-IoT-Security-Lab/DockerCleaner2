{"seed":731515139,"processedDockerfileHash":"759a559190fb11626ca78b4116152743","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   VERSION 0.3.0\nFROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\n#  ##\n#   Dependencies\n#  ##\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends apt-utils=1.2.35 build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libc6-dev=2.23-0ubuntu11.3 libfontconfig1=2.11.94-0ubuntu1.1 libreadline-dev=6.3-8ubuntu2 libssl-dev=1.0.2g-1ubuntu4.20 libssl-doc=1.0.2g-1ubuntu4.20 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxslt1-dev=1.1.28-2.1ubuntu0.3 libyaml-dev=0.1.6-3 make=4.1-6 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 autoconf=2.69-9 automake=1:1.15-4ubuntu1 bison=2:3.0.4.dfsg-1 gawk=1:4.1.3+dfsg-0.1 libffi-dev=3.2.1-4 libgdbm-dev=1.8.3-13.1 libncurses5-dev=6.0+20160213-1ubuntu1 libsqlite3-dev=3.11.0-1ubuntu1.5 libtool=2.4.6-0.1 pkg-config=0.29.1-0ubuntu1 sqlite3=3.11.0-1ubuntu1.5 libbz2-dev=1.0.6-8ubuntu0.2 llvm=1:3.8-33ubuntu3.1 libncursesw5-dev=6.0+20160213-1ubuntu1 nodejs=4.2.6~dfsg-1ubuntu4.2 npm=3.5.2-0ubuntu4 net-tools=1.60-26ubuntu1 fonts-liberation=1.07.4-1 libappindicator3-1=12.10.1+16.04.20170215-0ubuntu1 libasound2=1.1.0-0ubuntu1 libatk-bridge2.0-0=2.18.1-2ubuntu1 libgtk-3-0=3.18.9-1ubuntu3.3 libnspr4=2:4.13.1-0ubuntu0.16.04.1 libnss3=2:3.28.4-0ubuntu0.16.04.14 libxss1=1:1.2.2-1 libxtst6=2:1.2.2-1 lsb-release=9.20160110ubuntu0.2 xdg-utils=1.1.1-1ubuntu1.16.04.5 -qq --yes --no-install-suggests\nRUN apt-get install --no-install-recommends locales=2.23-0ubuntu11.3 -qq --yes \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#  ##\n#   Google Chrome\n#  ##\nRUN wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb\n#   The third-parties scanner looks for an executable called chrome\nRUN ln -s /usr/bin/google-chrome-stable /usr/bin/chrome\n#  ##\n#  # Python\n#  ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#   Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#   ...uncomment these lines if you want to also debug python code in GDB\n#\n#   ENV PATH $PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#   RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#       && eval \"$(pyenv init -)\" \\\n#       && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#       && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#   RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#   RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#   RUN echo add-auto-load-safe-path \\\n#       /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#       >> etc/gdb/gdbinit\n#  ##\n#   Update pip and setuptools to the latest versions\n#  ##\nRUN pip install pip==23.1 setuptools==67.6.1 --upgrade\n#  ##\n#   Node\n#  ##\n#   RUN ln -s /usr/bin/nodejs /usr/bin/node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y\n#  ##\n#  # pa11y\n#  ##\nRUN wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 \\\n && tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/ \\\n && ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/\nRUN npm install pa11y@4.13.2 --global --ignore-scripts\n#  ##\n#  # third_parties\n#  ##\nRUN npm install puppeteer@19.9.0\n#  ##\n#   Create unprivileged User\n#  ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN mkdir $SCANNER_HOME \\\n && groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner \\\n && chown -R scanner:scanner ${SCANNER_HOME}\n#  ##\n#   Prepare to Run\n#  ##\nWORKDIR $SCANNER_HOME\n#   Volume mount for use with the 'data' option.\nVOLUME /data\nCOPY . $SCANNER_HOME\n#  ##\n#   domain-scan\n#  ##\nRUN pip install --upgrade -r requirements.txt -r requirements-gatherers.txt -r requirements-scanners.txt\n#   Clean up aptitude stuff we no longer need\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"./scan_wrap.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  VERSION 0.3.0\nFROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\n# ##\n#  Dependencies\n# ##\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends apt-utils build-essential curl git libc6-dev libfontconfig1 libreadline-dev libssl-dev libssl-doc libxml2-dev libxslt1-dev libyaml-dev make unzip wget zlib1g-dev autoconf automake bison gawk libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool pkg-config sqlite3 libbz2-dev llvm libncursesw5-dev nodejs npm net-tools fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libgtk-3-0 libnspr4 libnss3 libxss1 libxtst6 lsb-release xdg-utils -qq --yes --no-install-suggests\nRUN apt-get install locales -qq --yes \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n# ##\n#  Google Chrome\n# ##\nRUN wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb\n#  The third-parties scanner looks for an executable called chrome\nRUN ln -s /usr/bin/google-chrome-stable /usr/bin/chrome\n# ##\n# # Python\n# ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#  Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#  ...uncomment these lines if you want to also debug python code in GDB\n#\n#  ENV PATH $PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#  RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#      && eval \"$(pyenv init -)\" \\\n#      && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#      && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#  RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#      && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#      && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#      /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#  RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#  RUN echo add-auto-load-safe-path \\\n#      /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#      >> etc/gdb/gdbinit\n# ##\n#  Update pip and setuptools to the latest versions\n# ##\nRUN pip install pip setuptools --upgrade\n# ##\n#  Node\n# ##\n#  RUN ln -s /usr/bin/nodejs /usr/bin/node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install nodejs -y\n# ##\n# # pa11y\n# ##\nRUN wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 \\\n && tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/ \\\n && ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/\nRUN npm install pa11y@4.13.2 --global --ignore-scripts\n# ##\n# # third_parties\n# ##\nRUN npm install puppeteer\n# ##\n#  Create unprivileged User\n# ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN mkdir $SCANNER_HOME \\\n && groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner \\\n && chown -R scanner:scanner ${SCANNER_HOME}\n# ##\n#  Prepare to Run\n# ##\nWORKDIR $SCANNER_HOME\n#  Volume mount for use with the 'data' option.\nVOLUME /data\nCOPY . $SCANNER_HOME\n# ##\n#  domain-scan\n# ##\nRUN pip install --upgrade -r requirements.txt -r requirements-gatherers.txt -r requirements-scanners.txt\n#  Clean up aptitude stuff we no longer need\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"./scan_wrap.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"a9d1d7a66f40bdcebab203292b9a0903","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   VERSION 0.3.0\nFROM ubuntu:16.04\nMAINTAINER Shane Frasier <jeremy.frasier@trio.dhs.gov>\n#  ##\n#   Dependencies\n#  ##\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends apt-utils build-essential curl git libc6-dev libfontconfig1 libreadline-dev libssl-dev libssl-doc libxml2-dev libxslt1-dev libyaml-dev make unzip wget zlib1g-dev autoconf automake bison gawk libffi-dev libgdbm-dev libncurses5-dev libsqlite3-dev libtool pkg-config sqlite3 libbz2-dev llvm libncursesw5-dev nodejs npm net-tools fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libgtk-3-0 libnspr4 libnss3 libxss1 libxtst6 lsb-release xdg-utils -qq --yes --no-install-suggests\nRUN apt-get install locales -qq --yes \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#  ##\n#   Google Chrome\n#  ##\nRUN wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb\n#   The third-parties scanner looks for an executable called chrome\nRUN ln -s /usr/bin/google-chrome-stable /usr/bin/chrome\n#  ##\n#  # Python\n#  ##\nENV PYENV_RELEASE=\"1.2.2\" \\\n    PYENV_PYTHON_VERSION=\"3.6.4\" \\\n    PYENV_ROOT=\"/opt/pyenv\" \\\n    PYENV_REPO=\"https://github.com/pyenv/pyenv\"\nRUN wget ${PYENV_REPO}/archive/v${PYENV_RELEASE}.zip --no-verbose \\\n && unzip v$PYENV_RELEASE.zip -d $PYENV_ROOT \\\n && mv $PYENV_ROOT/pyenv-$PYENV_RELEASE/* $PYENV_ROOT/ \\\n && rm -r $PYENV_ROOT/pyenv-$PYENV_RELEASE\n#\n#   Uncomment these lines if you just want to install python...\n#\nENV PATH=\"$PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}/bin:$PATH\"\nRUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n && eval \"$( pyenv init - ;)\" \\\n && pyenv install $PYENV_PYTHON_VERSION \\\n && pyenv local ${PYENV_PYTHON_VERSION}\n#\n#   ...uncomment these lines if you want to also debug python code in GDB\n#\n#   ENV PATH $PYENV_ROOT/bin:$PYENV_ROOT/versions/${PYENV_PYTHON_VERSION}-debug/bin:$PATH\n#   RUN echo 'eval \"$(pyenv init -)\"' >> /etc/profile \\\n#       && eval \"$(pyenv init -)\" \\\n#       && pyenv install --debug --keep $PYENV_PYTHON_VERSION \\\n#       && pyenv local ${PYENV_PYTHON_VERSION}-debug\n#   RUN ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3.6-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python3-gdb.py \\\n#       && ln -s /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/python-gdb.py \\\n#       /opt/pyenv/versions/${PYENV_PYTHON_VERSION}-debug/bin/python-gdb.py\n#   RUN apt-get -qq --yes --no-install-recommends --no-install-suggests install gdb\n#   RUN echo add-auto-load-safe-path \\\n#       /opt/pyenv/sources/${PYENV_PYTHON_VERSION}-debug/Python-${PYENV_PYTHON_VERSION}/ \\\n#       >> etc/gdb/gdbinit\n#  ##\n#   Update pip and setuptools to the latest versions\n#  ##\nRUN pip install pip setuptools --upgrade\n#  ##\n#   Node\n#  ##\n#   RUN ln -s /usr/bin/nodejs /usr/bin/node\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash\nRUN apt-get install nodejs -y\n#  ##\n#  # pa11y\n#  ##\nRUN wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 \\\n && tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /usr/local/share/ \\\n && ln -s /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/\nRUN npm install pa11y@4.13.2 --global --ignore-scripts\n#  ##\n#  # third_parties\n#  ##\nRUN npm install puppeteer\n#  ##\n#   Create unprivileged User\n#  ##\nENV SCANNER_HOME=\"/home/scanner\"\nRUN mkdir $SCANNER_HOME \\\n && groupadd -r scanner \\\n && useradd -r -c \"Scanner user\" -g scanner scanner \\\n && chown -R scanner:scanner ${SCANNER_HOME}\n#  ##\n#   Prepare to Run\n#  ##\nWORKDIR $SCANNER_HOME\n#   Volume mount for use with the 'data' option.\nVOLUME /data\nCOPY . $SCANNER_HOME\n#  ##\n#   domain-scan\n#  ##\nRUN pip install --upgrade -r requirements.txt -r requirements-gatherers.txt -r requirements-scanners.txt\n#   Clean up aptitude stuff we no longer need\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [\"./scan_wrap.sh\"]\n","originalDockerfileUglifiedHash":"37a44d2c4e418cb95632dbd42ddb9848","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b4e7cfc72b3964bf113e28c11e91971d7ad38ec0.dockerfile"}