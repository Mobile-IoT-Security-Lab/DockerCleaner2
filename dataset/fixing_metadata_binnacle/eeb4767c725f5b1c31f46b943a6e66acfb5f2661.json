{"seed":3414200892,"processedDockerfileHash":"f75e889220098c13805e038e3925f9f2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:trusty@sha256:ed49036f63459d6e5ed6c0f238f5e94c3a0c70d24727c793c48fded60f70aa96\nMAINTAINER Everest Munro-Zeisberger\nWORKDIR /root\n#  #######################\n#   SETUP ENV & VERSIONS #\n#  #######################\n#   Versions:\nENV AFL_VERSION=\"2.52b\"\nENV RUBY_VERSION=\"2.3.3\"\nENV GO_DEP_VERSION=\"0.4.1\"\n#   Environment Variables:\nENV GOPATH=\"/root/go/\"\nENV GOBIN=\"/root/go/bin\"\n#  ###############\n#   INSTALL DEPS #\n#  ###############\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 -y )\nRUN apt-add-repository -y ppa:rael-gc/rvm\nRUN apt-add-repository -y ppa:gophers/archive\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends git=1:1.9.1-1ubuntu0.10 wget=1.15-1ubuntu1.14.04.5 gcc=4:4.8.2-1ubuntu6 autoconf=2.69-6 make=3.81-8.2ubuntu3 bison=2:3.0.2.dfsg-2 libssl-dev=1.0.1f-1ubuntu2.27 libreadline-dev=6.3-4ubuntu2 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 pkg-config=0.26-1ubuntu4 gcc=4:4.8.2-1ubuntu6 clang=1:3.4-0ubuntu1 llvm=1:3.4-0ubuntu1 rvm watch nodejs=0.10.25~dfsg2-2ubuntu1.2 npm=1.3.10~dfsg-1 supervisor=3.0b2-1ubuntu0.1 cmake=2.8.12.2-0ubuntu3 gdb=7.7.1-0ubuntu5~14.04.3 python-virtualenv=1.11.4-1ubuntu1 golang-1.9-go cython=0.20.1+git90-g0e6e38e-1ubuntu2 build-essential=11.6ubuntu6 libgtk2.0-dev=2.24.23-0ubuntu1.4 libtbb-dev=4.2~20130725-1.1ubuntu1 python-dev=2.7.5-5ubuntu3 python-numpy=1:1.8.2-0ubuntu0.1 python-scipy=0.13.3-1build1 libjasper-dev=1.900.1-14ubuntu3.5 libjpeg-dev=8c-2ubuntu8 libpng-dev libtiff-dev libavcodec-dev=6:9.20-0ubuntu0.14.04.1 libavutil-dev=6:9.20-0ubuntu0.14.04.1 libavformat-dev=6:9.20-0ubuntu0.14.04.1 libswscale-dev=6:9.20-0ubuntu0.14.04.1 libdc1394-22-dev=2.2.1-2ubuntu2 libv4l-dev=1.0.1-1 -y )\n#  ##########################\n#   AFL Compilation & Setup #\n#  ##########################\n#   Download AFL and uncompress\nRUN wget http://lcamtuf.coredump.cx/afl/releases/afl-$AFL_VERSION.tgz\nRUN tar -xvf afl-$AFL_VERSION.tgz\nRUN mv afl-$AFL_VERSION afl\n#   Inject our own AFL config header file\nRUN rm /root/afl/config.h\nCOPY ./config/afl_config/config.h /root/afl/config.h\n#   Compile both standard gcc, clang etc as well as afl-clang-fast, used for\n#   faster & persistent test harnesses. Also build the afl-fuzz binary\nRUN cd ~/afl \\\n && make\nRUN cd ~/afl/llvm_mode \\\n && make\n#   Environment Setup\nENV AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=\"1\"\n#   Install py-afl-fuzz (for fuzzing python libraries)\nRUN git clone https://github.com/jwilk/python-afl.git\nRUN cd python-afl \\\n && python setup.py install\n#   Compile ruby from sources with afl, and setup cflags to access instrumented\n#   ruby headers (useful for ruby library fuzzing with C harneses)\nRUN CC=~/afl/afl-clang-fast /usr/share/rvm/bin/rvm install --disable-binary $RUBY_VERSION\nENV LD_LIBRARY_PATH=\"LD_LIBRARY_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib\"\nENV PATH=\"/usr/share/rvm/rubies/ruby-$RUBY_VERSION/bin:$PATH\"\nCOPY ./config/ ./config/\nRUN PKG_CONFIG_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib/pkgconfig pkg-config --cflags --libs ruby-2.3 > ~/config/afl-ruby-flags\n#   File structure setup\nRUN mkdir ~/fuzz_out\nRUN mkdir ~/fuzz_in\n#  ###########################\n#  SIDECAR & MONITORING SETUP#\n#  ###########################\n#   Setup logging and scripts & install Go libs\nRUN mkdir /root/logs\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nRUN wget https://github.com/golang/dep/releases/download/v$GO_DEP_VERSION/dep-linux-amd64\nRUN mv dep-linux-amd64 /usr/local/bin/dep\nENV PATH=\"/usr/lib/go-1.9/bin/:$PATH\"\nRUN chmod +x /usr/local/bin/dep\nRUN go get -u github.com/dvyukov/go-fuzz/...\n#   Copy Go files into container & compile binaries\nRUN mkdir -p /root/go/src/maxfuzz/fuzzer-base\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nCOPY ./cmd /root/go/src/maxfuzz/fuzzer-base/cmd\nCOPY ./internal /root/go/src/maxfuzz/fuzzer-base/internal\nCOPY ./Gopkg.lock /root/go/src/maxfuzz/fuzzer-base/Gopkg.lock\nCOPY ./Gopkg.toml /root/go/src/maxfuzz/fuzzer-base/Gopkg.toml\nCOPY ./Makefile /root/go/src/maxfuzz/fuzzer-base/Makefile\nRUN make \\\n && make install\nWORKDIR /root\n#   Setup sidecar webapp\nCOPY ./sidecar ./sidecar\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN (apt-get update ;apt-get install --no-install-recommends nodejs=0.10.25~dfsg2-2ubuntu1.2 -y )\nRUN cd sidecar \\\n && npm install log@6.3.1\n#  ################################\n#   FINAL SETUP & COPYING SCRIPTS #\n#  ################################\nRUN mkdir fuzzer-files\nCOPY ./scripts ./scripts\nCOPY ./fuzzer-files/base ./fuzzer-files/base\nRUN chmod -R 755 /root/fuzzer-files\nRUN chmod 755 /root/scripts/reproduce_stdin\nRUN echo \"export GIT_SHA=test_environment\" >> /root/fuzzer-files/base/environment\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:trusty@sha256:ed49036f63459d6e5ed6c0f238f5e94c3a0c70d24727c793c48fded60f70aa96\nMAINTAINER Everest Munro-Zeisberger\nWORKDIR /root\n# #######################\n#  SETUP ENV & VERSIONS #\n# #######################\n#  Versions:\nENV AFL_VERSION=\"2.52b\"\nENV RUBY_VERSION=\"2.3.3\"\nENV GO_DEP_VERSION=\"0.4.1\"\n#  Environment Variables:\nENV GOPATH=\"/root/go/\"\nENV GOBIN=\"/root/go/bin\"\n# ###############\n#  INSTALL DEPS #\n# ###############\nRUN apt-get update\nRUN apt-get install software-properties-common -y\nRUN apt-add-repository -y ppa:rael-gc/rvm\nRUN apt-add-repository -y ppa:gophers/archive\nRUN apt-get update\nRUN apt-get install git wget gcc autoconf make bison libssl-dev libreadline-dev zlib1g-dev pkg-config gcc clang llvm rvm watch nodejs npm supervisor cmake gdb python-virtualenv golang-1.9-go cython build-essential libgtk2.0-dev libtbb-dev python-dev python-numpy python-scipy libjasper-dev libjpeg-dev libpng-dev libtiff-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libdc1394-22-dev libv4l-dev -y\n# ##########################\n#  AFL Compilation & Setup #\n# ##########################\n#  Download AFL and uncompress\nRUN wget http://lcamtuf.coredump.cx/afl/releases/afl-$AFL_VERSION.tgz\nRUN tar -xvf afl-$AFL_VERSION.tgz\nRUN mv afl-$AFL_VERSION afl\n#  Inject our own AFL config header file\nRUN rm /root/afl/config.h\nCOPY ./config/afl_config/config.h /root/afl/config.h\n#  Compile both standard gcc, clang etc as well as afl-clang-fast, used for\n#  faster & persistent test harnesses. Also build the afl-fuzz binary\nRUN cd ~/afl \\\n && make\nRUN cd ~/afl/llvm_mode \\\n && make\n#  Environment Setup\nENV AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=\"1\"\n#  Install py-afl-fuzz (for fuzzing python libraries)\nRUN git clone https://github.com/jwilk/python-afl.git\nRUN cd python-afl \\\n && python setup.py install\n#  Compile ruby from sources with afl, and setup cflags to access instrumented\n#  ruby headers (useful for ruby library fuzzing with C harneses)\nRUN CC=~/afl/afl-clang-fast /usr/share/rvm/bin/rvm install --disable-binary $RUBY_VERSION\nENV LD_LIBRARY_PATH=\"LD_LIBRARY_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib\"\nENV PATH=\"/usr/share/rvm/rubies/ruby-$RUBY_VERSION/bin:$PATH\"\nCOPY ./config/ ./config/\nRUN PKG_CONFIG_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib/pkgconfig pkg-config --cflags --libs ruby-2.3 > ~/config/afl-ruby-flags\n#  File structure setup\nRUN mkdir ~/fuzz_out\nRUN mkdir ~/fuzz_in\n# ###########################\n# SIDECAR & MONITORING SETUP#\n# ###########################\n#  Setup logging and scripts & install Go libs\nRUN mkdir /root/logs\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nRUN wget https://github.com/golang/dep/releases/download/v$GO_DEP_VERSION/dep-linux-amd64\nRUN mv dep-linux-amd64 /usr/local/bin/dep\nENV PATH=\"/usr/lib/go-1.9/bin/:$PATH\"\nRUN chmod +x /usr/local/bin/dep\nRUN go get -u github.com/dvyukov/go-fuzz/...\n#  Copy Go files into container & compile binaries\nRUN mkdir -p /root/go/src/maxfuzz/fuzzer-base\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nCOPY ./cmd /root/go/src/maxfuzz/fuzzer-base/cmd\nCOPY ./internal /root/go/src/maxfuzz/fuzzer-base/internal\nCOPY ./Gopkg.lock /root/go/src/maxfuzz/fuzzer-base/Gopkg.lock\nCOPY ./Gopkg.toml /root/go/src/maxfuzz/fuzzer-base/Gopkg.toml\nCOPY ./Makefile /root/go/src/maxfuzz/fuzzer-base/Makefile\nRUN make \\\n && make install\nWORKDIR /root\n#  Setup sidecar webapp\nCOPY ./sidecar ./sidecar\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN apt-get install nodejs -y\nRUN cd sidecar \\\n && npm install log\n# ################################\n#  FINAL SETUP & COPYING SCRIPTS #\n# ################################\nRUN mkdir fuzzer-files\nCOPY ./scripts ./scripts\nCOPY ./fuzzer-files/base ./fuzzer-files/base\nRUN chmod -R 755 /root/fuzzer-files\nRUN chmod 755 /root/scripts/reproduce_stdin\nRUN echo \"export GIT_SHA=test_environment\" >> /root/fuzzer-files/base/environment\n","injectedSmells":[],"originalDockerfileHash":"07fd56dfc328c1eb8124a37ecb80923c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:trusty@sha256:ed49036f63459d6e5ed6c0f238f5e94c3a0c70d24727c793c48fded60f70aa96\nMAINTAINER Everest Munro-Zeisberger\nWORKDIR /root\n#  #######################\n#   SETUP ENV & VERSIONS #\n#  #######################\n#   Versions:\nENV AFL_VERSION=\"2.52b\"\nENV RUBY_VERSION=\"2.3.3\"\nENV GO_DEP_VERSION=\"0.4.1\"\n#   Environment Variables:\nENV GOPATH=\"/root/go/\"\nENV GOBIN=\"/root/go/bin\"\n#  ###############\n#   INSTALL DEPS #\n#  ###############\nRUN apt-get update\nRUN apt-get install software-properties-common -y\nRUN apt-add-repository -y ppa:rael-gc/rvm\nRUN apt-add-repository -y ppa:gophers/archive\nRUN apt-get update\nRUN apt-get install git wget gcc autoconf make bison libssl-dev libreadline-dev zlib1g-dev pkg-config gcc clang llvm rvm watch nodejs npm supervisor cmake gdb python-virtualenv golang-1.9-go cython build-essential libgtk2.0-dev libtbb-dev python-dev python-numpy python-scipy libjasper-dev libjpeg-dev libpng-dev libtiff-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libdc1394-22-dev libv4l-dev -y\n#  ##########################\n#   AFL Compilation & Setup #\n#  ##########################\n#   Download AFL and uncompress\nRUN wget http://lcamtuf.coredump.cx/afl/releases/afl-$AFL_VERSION.tgz\nRUN tar -xvf afl-$AFL_VERSION.tgz\nRUN mv afl-$AFL_VERSION afl\n#   Inject our own AFL config header file\nRUN rm /root/afl/config.h\nCOPY ./config/afl_config/config.h /root/afl/config.h\n#   Compile both standard gcc, clang etc as well as afl-clang-fast, used for\n#   faster & persistent test harnesses. Also build the afl-fuzz binary\nRUN cd ~/afl \\\n && make\nRUN cd ~/afl/llvm_mode \\\n && make\n#   Environment Setup\nENV AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=\"1\"\n#   Install py-afl-fuzz (for fuzzing python libraries)\nRUN git clone https://github.com/jwilk/python-afl.git\nRUN cd python-afl \\\n && python setup.py install\n#   Compile ruby from sources with afl, and setup cflags to access instrumented\n#   ruby headers (useful for ruby library fuzzing with C harneses)\nRUN CC=~/afl/afl-clang-fast /usr/share/rvm/bin/rvm install --disable-binary $RUBY_VERSION\nENV LD_LIBRARY_PATH=\"LD_LIBRARY_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib\"\nENV PATH=\"/usr/share/rvm/rubies/ruby-$RUBY_VERSION/bin:$PATH\"\nCOPY ./config/ ./config/\nRUN PKG_CONFIG_PATH=/usr/share/rvm/rubies/ruby-$RUBY_VERSION/lib/pkgconfig pkg-config --cflags --libs ruby-2.3 > ~/config/afl-ruby-flags\n#   File structure setup\nRUN mkdir ~/fuzz_out\nRUN mkdir ~/fuzz_in\n#  ###########################\n#  SIDECAR & MONITORING SETUP#\n#  ###########################\n#   Setup logging and scripts & install Go libs\nRUN mkdir /root/logs\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nRUN wget https://github.com/golang/dep/releases/download/v$GO_DEP_VERSION/dep-linux-amd64\nRUN mv dep-linux-amd64 /usr/local/bin/dep\nENV PATH=\"/usr/lib/go-1.9/bin/:$PATH\"\nRUN chmod +x /usr/local/bin/dep\nRUN go get -u github.com/dvyukov/go-fuzz/...\n#   Copy Go files into container & compile binaries\nRUN mkdir -p /root/go/src/maxfuzz/fuzzer-base\nWORKDIR /root/go/src/maxfuzz/fuzzer-base\nCOPY ./cmd /root/go/src/maxfuzz/fuzzer-base/cmd\nCOPY ./internal /root/go/src/maxfuzz/fuzzer-base/internal\nCOPY ./Gopkg.lock /root/go/src/maxfuzz/fuzzer-base/Gopkg.lock\nCOPY ./Gopkg.toml /root/go/src/maxfuzz/fuzzer-base/Gopkg.toml\nCOPY ./Makefile /root/go/src/maxfuzz/fuzzer-base/Makefile\nRUN make \\\n && make install\nWORKDIR /root\n#   Setup sidecar webapp\nCOPY ./sidecar ./sidecar\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN apt-get install nodejs -y\nRUN cd sidecar \\\n && npm install log\n#  ################################\n#   FINAL SETUP & COPYING SCRIPTS #\n#  ################################\nRUN mkdir fuzzer-files\nCOPY ./scripts ./scripts\nCOPY ./fuzzer-files/base ./fuzzer-files/base\nRUN chmod -R 755 /root/fuzzer-files\nRUN chmod 755 /root/scripts/reproduce_stdin\nRUN echo \"export GIT_SHA=test_environment\" >> /root/fuzzer-files/base/environment\n","originalDockerfileUglifiedHash":"e1fe98300788ef5df5c51e9d69c9e608","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/eeb4767c725f5b1c31f46b943a6e66acfb5f2661.dockerfile"}