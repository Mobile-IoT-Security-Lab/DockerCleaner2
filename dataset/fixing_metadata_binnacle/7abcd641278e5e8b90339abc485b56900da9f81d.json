{"seed":3347612231,"processedDockerfileHash":"4b67d621879a7a01bb2c6d89bf661e48","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.7\n#   We want people to install this easily by docker run\n#   so we merge everything into one image\nENV NGINX_VERSION=\"1.15.0\"\nENV PHP_VERSION=\"7.2.7\"\n#   Copied from nginx:alpine image\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-threads --with-compat --with-file-aio --with-http_v2_module --add-module=/push-stream \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add gcc=6.4.0-r5 libc-dev=0.7.1-r0 make=4.2.1-r0 libressl-dev=2.6.5-r0 pcre-dev=8.41-r1 zlib-dev=1.2.11-r1 linux-headers=4.4.6-r2 curl=7.61.1-r3 gnupg=2.2.3-r1 git=2.15.4-r0 --no-cache --virtual .build-deps \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && git clone --single-branch --depth 1 https://github.com/wandenberg/nginx-push-stream-module.git /push-stream/ \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc ; mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /push-stream/ \\\n && apk add gettext=0.19.8.1-r1 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\n#   From php-fpm\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pcre-dev  pkgconf  re2c\"\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E\"\nRUN set -xe ; mkdir -p $PHP_INI_DIR/conf.d \\\n && apk add ca-certificates=20190108-r0 curl=7.61.1-r3 tar=1.32-r0 xz=5.2.3-r1 --no-cache --virtual .persistent-deps \\\n && set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data \\\n && apk add gnupg=2.2.3-r1 libressl=2.6.5-r0 --no-cache --virtual .fetch-deps ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\" ; wget -O php.tar.xz.asc \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; apk del .fetch-deps \\\n && apk add coreutils=8.28-r0 curl-dev=7.61.1-r3 libedit-dev=20170329.3.1-r3 libxml2-dev=2.9.8-r1 libressl-dev=2.6.5-r0 sqlite-dev=3.25.3-r2 $PHPIZE_DEPS --no-cache --virtual .build-deps \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && mkdir -p /usr/src/php/ \\\n && tar -Jxf /usr/src/php.tar.xz -C /usr/src/php/ --strip-components=1 \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-mbstring --with-curl --with-libedit --with-openssl --with-zlib --with-pcre-regex=/usr $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cd / \\\n && rm -rf /usr/src/php/ /usr/src/php.tar.xz* \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache --virtual .php-rundeps \\\n && apk del .build-deps \\\n && sed 's!=NONE/!=!g' /usr/local/etc/php-fpm.conf.default | tee /usr/local/etc/php-fpm.conf > /dev/null\n#   Install streaming\nCOPY . /var/www/html\nRUN mv /var/www/html/docker/nginx.conf /etc/nginx/nginx.conf \\\n && mv /var/www/html/docker/run.sh / \\\n && chmod +x /run.sh \\\n && mv /var/www/html/docker/config.php /var/www/html/config.php \\\n && rm -r /var/www/html/docker /var/www/html/Dockerfile \\\n && cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf \\\n && sed -i 's!127\\.0\\.0\\.1:9000!/var/run/php-fpm.sock!g' /usr/local/etc/php-fpm.d/www.conf \\\n && echo -e 'env[FB_ID] = $FB_ID\\nenv[FB_SECRET] = $FB_SECRET' >> /usr/local/etc/php-fpm.d/www.conf\nCMD [\"/bin/sh\", \"/run.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.7\n#  We want people to install this easily by docker run\n#  so we merge everything into one image\nENV NGINX_VERSION=\"1.15.0\"\nENV PHP_VERSION=\"7.2.7\"\n#  Copied from nginx:alpine image\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-threads --with-compat --with-file-aio --with-http_v2_module --add-module=/push-stream \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make libressl-dev pcre-dev zlib-dev linux-headers curl gnupg git \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && git clone --single-branch --depth 1 https://github.com/wandenberg/nginx-push-stream-module.git /push-stream/ \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc ; mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /push-stream/ \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\n#  From php-fpm\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pcre-dev  pkgconf  re2c\"\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E\"\nRUN set -xe ; mkdir -p $PHP_INI_DIR/conf.d \\\n && apk add --no-cache --virtual .persistent-deps ca-certificates curl tar xz \\\n && set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data \\\n && apk add --no-cache --virtual .fetch-deps gnupg libressl ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\" ; wget -O php.tar.xz.asc \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; apk del .fetch-deps \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS coreutils curl-dev libedit-dev libxml2-dev libressl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && mkdir -p /usr/src/php/ \\\n && tar -Jxf /usr/src/php.tar.xz -C /usr/src/php/ --strip-components=1 \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-mbstring --with-curl --with-libedit --with-openssl --with-zlib --with-pcre-regex=/usr $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cd / \\\n && rm -rf /usr/src/php/ /usr/src/php.tar.xz* \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .php-rundeps $runDeps \\\n && apk del .build-deps \\\n && sed 's!=NONE/!=!g' /usr/local/etc/php-fpm.conf.default | tee /usr/local/etc/php-fpm.conf > /dev/null\n#  Install streaming\nCOPY . /var/www/html\nRUN mv /var/www/html/docker/nginx.conf /etc/nginx/nginx.conf \\\n && mv /var/www/html/docker/run.sh / \\\n && chmod +x /run.sh \\\n && mv /var/www/html/docker/config.php /var/www/html/config.php \\\n && rm -r /var/www/html/docker /var/www/html/Dockerfile \\\n && cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf \\\n && sed -i 's!127\\.0\\.0\\.1:9000!/var/run/php-fpm.sock!g' /usr/local/etc/php-fpm.d/www.conf \\\n && echo -e 'env[FB_ID] = $FB_ID\\nenv[FB_SECRET] = $FB_SECRET' >> /usr/local/etc/php-fpm.d/www.conf\nCMD [\"/bin/sh\", \"/run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"84f7dfec4f284ac69b010d1bc7888247","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.7\n#   We want people to install this easily by docker run\n#   so we merge everything into one image\nENV NGINX_VERSION=\"1.15.0\"\nENV PHP_VERSION=\"7.2.7\"\n#   Copied from nginx:alpine image\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_realip_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-threads --with-compat --with-file-aio --with-http_v2_module --add-module=/push-stream \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make libressl-dev pcre-dev zlib-dev linux-headers curl gnupg git \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && git clone --single-branch --depth 1 https://github.com/wandenberg/nginx-push-stream-module.git /push-stream/ \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc ; mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /push-stream/ \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\n#   From php-fpm\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev dpkg  file  g++  gcc  libc-dev  make  pcre-dev  pkgconf  re2c\"\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0 528995BFEDFBA7191D46839EF9BA0ADA31CBD89E\"\nRUN set -xe ; mkdir -p $PHP_INI_DIR/conf.d \\\n && apk add --no-cache --virtual .persistent-deps ca-certificates curl tar xz \\\n && set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data \\\n && apk add --no-cache --virtual .fetch-deps gnupg libressl ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz/from/this/mirror\" ; wget -O php.tar.xz.asc \"https://secure.php.net/get/php-${PHP_VERSION}.tar.xz.asc/from/this/mirror\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ; gpg --batch --verify php.tar.xz.asc php.tar.xz ; rm -rf \"$GNUPGHOME\" ; apk del .fetch-deps \\\n && apk add --no-cache --virtual .build-deps $PHPIZE_DEPS coreutils curl-dev libedit-dev libxml2-dev libressl-dev sqlite-dev \\\n && export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" \\\n && mkdir -p /usr/src/php/ \\\n && tar -Jxf /usr/src/php.tar.xz -C /usr/src/php/ --strip-components=1 \\\n && cd /usr/src/php \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-mbstring --with-curl --with-libedit --with-openssl --with-zlib --with-pcre-regex=/usr $PHP_EXTRA_CONFIGURE_ARGS \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true ; } \\\n && make clean \\\n && cd / \\\n && rm -rf /usr/src/php/ /usr/src/php.tar.xz* \\\n && runDeps=\"$( scanelf --needed --nobanner --recursive /usr/local | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache --virtual .php-rundeps $runDeps \\\n && apk del .build-deps \\\n && sed 's!=NONE/!=!g' /usr/local/etc/php-fpm.conf.default | tee /usr/local/etc/php-fpm.conf > /dev/null\n#   Install streaming\nCOPY . /var/www/html\nRUN mv /var/www/html/docker/nginx.conf /etc/nginx/nginx.conf \\\n && mv /var/www/html/docker/run.sh / \\\n && chmod +x /run.sh \\\n && mv /var/www/html/docker/config.php /var/www/html/config.php \\\n && rm -r /var/www/html/docker /var/www/html/Dockerfile \\\n && cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf \\\n && sed -i 's!127\\.0\\.0\\.1:9000!/var/run/php-fpm.sock!g' /usr/local/etc/php-fpm.d/www.conf \\\n && echo -e 'env[FB_ID] = $FB_ID\\nenv[FB_SECRET] = $FB_SECRET' >> /usr/local/etc/php-fpm.d/www.conf\nCMD [\"/bin/sh\", \"/run.sh\"]\n","originalDockerfileUglifiedHash":"728e1ed1ce177d0dad190233062a1776","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7abcd641278e5e8b90339abc485b56900da9f81d.dockerfile"}