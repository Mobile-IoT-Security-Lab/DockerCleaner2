{"seed":2270930265,"processedDockerfileHash":"3d47fd4637eafac88ecb3365c2a3f23a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install --no-install-recommends make=4.1-6 git=1:2.7.4-0ubuntu1.10 cmake=3.5.1-1ubuntu3 wget=1.17.1-1ubuntu1.5 build-essential=12.1ubuntu2 automake=1:1.15-4ubuntu1 libtool=2.4.6-0.1 bison=2:3.0.4.dfsg-1 flex=2.6.0-11 -y\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure linux-x86_64 no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nRUN make out-static/libleveldb.a out-static/libmemenv.a\nRUN cp -r out-static/*.a /usr/local/lib \\\n && cp -r include/* /usr/local/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nRUN cp /usr/local/lib/libsfml-network-s.a /usr/local/lib/libsfml-network.a \\\n && cp /usr/local/lib/libsfml-system-s.a /usr/local/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nCOPY noise-c-linux.patch .\nRUN git apply noise-c-linux.patch\nRUN ./autogen.sh \\\n && ./configure\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nWORKDIR src\nRUN make liblua.a SYSCFLAGS=\"-DLUA_USE_LINUX\" \\\n && cp liblua.a /usr/local/lib/liblua5.3.a \\\n && mkdir /usr/include/lua5.3 \\\n && cp -r *.h /usr/include/lua5.3\nWORKDIR ../../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN make\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.so cryptokernel\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/include/cschnorr/ \\\n && cp src/*.h /usr/local/include/cschnorr/ \\\n && cp bin/Static/Release/libcschnorr.a /usr/local/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --include-dir=/usr/include/lua5.3 \\\n && make config=release_static ckd\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install -y make git cmake wget build-essential automake libtool bison flex\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure linux-x86_64 no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nRUN make out-static/libleveldb.a out-static/libmemenv.a\nRUN cp -r out-static/*.a /usr/local/lib \\\n && cp -r include/* /usr/local/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nRUN cp /usr/local/lib/libsfml-network-s.a /usr/local/lib/libsfml-network.a \\\n && cp /usr/local/lib/libsfml-system-s.a /usr/local/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-linux.patch .\nRUN git apply noise-c-linux.patch\nRUN ./autogen.sh \\\n && ./configure\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nWORKDIR src\nRUN make liblua.a SYSCFLAGS=\"-DLUA_USE_LINUX\" \\\n && cp liblua.a /usr/local/lib/liblua5.3.a \\\n && mkdir /usr/include/lua5.3 \\\n && cp -r *.h /usr/include/lua5.3\nWORKDIR ../../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN make\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.so cryptokernel\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/include/cschnorr/ \\\n && cp src/*.h /usr/local/include/cschnorr/ \\\n && cp bin/Static/Release/libcschnorr.a /usr/local/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --include-dir=/usr/include/lua5.3 \\\n && make config=release_static ckd\n","injectedSmells":[],"originalDockerfileHash":"1735308c2b517bab24d53b26875ba559","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get install make git cmake wget build-essential automake libtool bison flex -y\nRUN wget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gz \\\n && tar -xzvf 1.8.4.tar.gz\nWORKDIR jsoncpp-1.8.4\nRUN cmake . -DJSONCPP_WITH_TESTS=NO -DBUILD_STATIC_LIBS=YES -DBUILD_SHARED_LIBS=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz \\\n && tar -xvzf openssl-1.1.0h.tar.gz\nWORKDIR openssl-1.1.0h\nRUN ./Configure linux-x86_64 no-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://curl.haxx.se/download/curl-7.59.0.tar.gz \\\n && tar xzvf curl-7.59.0.tar.gz\nWORKDIR curl-7.59.0\nRUN ./configure --disable-shared --enable-static --disable-ldap\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.59.tar.gz \\\n && tar -xvzf libmicrohttpd-0.9.59.tar.gz\nWORKDIR libmicrohttpd-0.9.59\nRUN ./configure --disable-shared\nRUN make \\\n && make install\nWORKDIR ../\nRUN wget https://github.com/cinemast/libjson-rpc-cpp/archive/v1.1.0.tar.gz \\\n && tar -xvzf v1.1.0.tar.gz\nWORKDIR libjson-rpc-cpp-1.1.0 \nRUN cmake -E env CXXFLAGS=\"-DCURL_STATICLIB\" cmake . -DBUILD_SHARED_LIBS=NO -DBUILD_STATIC_LIBS=YES -DCOMPILE_TESTS=NO -DCOMPILE_STUBGEN=NO -DCOMPILE_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release -DREDIS_CLIENT=NO -DREDIS_SERVER=NO -DWITH_COVERAGE=NO\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/bitcoin-core/leveldb\nWORKDIR leveldb\nRUN make out-static/libleveldb.a out-static/libmemenv.a\nRUN cp -r out-static/*.a /usr/local/lib \\\n && cp -r include/* /usr/local/include\nWORKDIR ../\nRUN git clone https://github.com/SFML/SFML.git\nWORKDIR SFML\nRUN cmake . -DBUILD_SHARED_LIBS=NO -DSFML_BUILD_DOC=NO -DSFML_BUILD_AUDIO=NO -DSFML_BUILD_GRAPHICS=NO -DSFML_BUILD_WINDOW=NO -DSFML_BUILD_EXAMPLES=NO -DCMAKE_BUILD_TYPE=Release\nRUN make \\\n && make install\nRUN cp /usr/local/lib/libsfml-network-s.a /usr/local/lib/libsfml-network.a \\\n && cp /usr/local/lib/libsfml-system-s.a /usr/local/lib/libsfml-system.a\nWORKDIR ../\nRUN git clone https://github.com/rweather/noise-c\nWORKDIR noise-c\nADD noise-c-linux.patch .\nRUN git apply noise-c-linux.patch\nRUN ./autogen.sh \\\n && ./configure\nRUN make \\\n && make install\nWORKDIR ../\nRUN git clone https://github.com/lhorgan/luack\nWORKDIR luack\nRUN git checkout 43e9e17984e4e992ac2dd0510ac15ebd22f38fdc\nWORKDIR src\nRUN make liblua.a SYSCFLAGS=\"-DLUA_USE_LINUX\" \\\n && cp liblua.a /usr/local/lib/liblua5.3.a \\\n && mkdir /usr/include/lua5.3 \\\n && cp -r *.h /usr/include/lua5.3\nWORKDIR ../../\nRUN git clone https://github.com/metalicjames/selene.git\nRUN cp -r selene/include/* /usr/local/include\nRUN git clone https://github.com/metalicjames/lua-lz4.git\nWORKDIR lua-lz4\nRUN make\nWORKDIR ../\nRUN wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha12/premake-5.0.0-alpha12-linux.tar.gz \\\n && tar zxvf premake-5.0.0-alpha12-linux.tar.gz \\\n && cp premake5 /usr/bin\nCOPY ./cryptokernel /cryptokernel\nRUN cp lua-lz4/lz4.so cryptokernel\nRUN git clone https://github.com/metalicjames/cschnorr.git\nWORKDIR cschnorr\nRUN premake5 gmake2 \\\n && make config=release_static cschnorr \\\n && mkdir /usr/local/include/cschnorr/ \\\n && cp src/*.h /usr/local/include/cschnorr/ \\\n && cp bin/Static/Release/libcschnorr.a /usr/local/lib\nWORKDIR ../\nWORKDIR cryptokernel\nRUN premake5 gmake2 --include-dir=/usr/include/lua5.3 \\\n && make config=release_static ckd\n","originalDockerfileUglifiedHash":"07e9244e1b2460de9ae475657a941cac","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/972bdb96499df6d0dc33e43323942c6ea7917677.dockerfile"}