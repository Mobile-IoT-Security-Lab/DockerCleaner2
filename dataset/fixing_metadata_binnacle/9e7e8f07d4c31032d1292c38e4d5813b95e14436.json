{"seed":2031930809,"processedDockerfileHash":"5315addfc86830422a9dc2da74acf766","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-have-secrets"],"processedDockerfile":"FROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-builder\n#  ####### This is stage1 where anchore wheels, binary deps, and any items from the source tree get staged to /build_output ########\nARG CLI_COMMIT\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\nENV GOPATH=\"/go\"\nENV SKOPEO_VERSION=\"v0.1.32\"\nENV GO_VERSION=\"1.12.4\"\nENV GO_CHECKSUM=\"d7d1f1f88ddfe55840712dc1747f37a790cbcaa448f6c9cf51bbe10aa65442f5\"\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nCOPY . /buildsource\nWORKDIR /buildsource\nRUN set -ex \\\n && mkdir -p /build_output /build_output/deps /build_output/configs /build_output/wheels\nRUN set -ex \\\n && echo \"installing OS dependencies\" \\\n && yum update -y \\\n && yum install -y gcc make rh-python36 rh-python36-python-wheel rh-python36-python-pip git\n#   create anchore binaries\nRUN set -ex \\\n && echo \"installing anchore\" \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 wheel --wheel-dir=/build_output/wheels . \\\n && pip3 wheel --wheel-dir=/build_output/wheels/ git+git://github.com/anchore/anchore-cli.git@$CLI_COMMIT#egg=anchorecli \\\n && cp ./LICENSE /build_output/ \\\n && cp ./conf/default_config.yaml /build_output/configs/default_config.yaml \\\n && cp ./docker-compose.yaml /build_output/configs/docker-compose.yaml \\\n && cp ./docker-compose-dev.yaml /build_output/configs/docker-compose-dev.yaml \\\n && cp ./docker-entrypoint.sh /build_output/configs/docker-entrypoint.sh\n#   stage anchore dependency binaries\nRUN set -ex \\\n && echo \"installing GO\" \\\n && mkdir -p /go \\\n && echo \"${GO_CHECKSUM} -\" > /tmp/go_checksum \\\n && curl -fLs https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tee /tmp/go${GO_VERSION}.linux-amd64.tar.gz | sha256sum -c /tmp/go_checksum \\\n && tar -C /usr/local -xzf /tmp/go${GO_VERSION}.linux-amd64.tar.gz\nRUN set -ex \\\n && echo \"installing Skopeo\" \\\n && git clone --branch \"$SKOPEO_VERSION\" https://github.com/containers/skopeo ${GOPATH}/src/github.com/containers/skopeo \\\n && cd ${GOPATH}/src/github.com/containers/skopeo \\\n && make binary-local DISABLE_CGO=1 \\\n && make install-binary \\\n && cp /usr/bin/skopeo /build_output/deps/ \\\n && cp default-policy.json /build_output/configs/skopeo-policy.json\n#   stage RPM dependency binaries\nRUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && yum install -y --downloadonly --downloaddir=/build_output/deps/ dpkg\nRUN tar -z -c -v -C /build_output -f /anchore-buildblob.tgz .\n#   Build setup section\nFROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-final\n#  ####### This is stage2 which does setup and install entirely from items from stage1's /build_output ########\nARG CLI_COMMIT\nARG ANCHORE_COMMIT\nARG ANCHORE_ENGINE_VERSION=\"0.5.0\"\nARG ANCHORE_ENGINE_RELEASE=\"dev\"\n#   Copy skopeo artifacts from build step\nCOPY --from=anchore-engine-builder /build_output /build_output\n#   Container metadata section\nMAINTAINER dev@anchore.com\nLABEL anchore_cli_commit=\"$CLI_COMMIT\" \\\n      anchore_commit=\"$ANCHORE_COMMIT\" \\\n      name=\"anchore-engine\" \\\n      maintainer=\"dev@anchore.com\" \\\n      vendor=\"Anchore Inc.\" \\\n      version=\"$ANCHORE_ENGINE_VERSION\" \\\n      release=\"$ANCHORE_ENGINE_RELEASE\" \\\n      summary=\"Anchore Engine - container image scanning service for policy-based security, best-practice and compliance enforcement.\" \\\n      description=\"Anchore is an open platform for container security and compliance that allows developers, operations, and security teams to discover, analyze, and certify container images on-premises or in the cloud. Anchore Engine is the on-prem, OSS, API accessible service that allows ops and developers to perform detailed analysis, run queries, produce reports and define policies on container images that can be used in CI/CD pipelines to ensure that only containers that meet your organization’s requirements are deployed into production.\"\n#   Environment variables to be present in running environment\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Default values overrideable at runtime of the container\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV ANCHORE_CONFIG_DIR=\"/config\" \\\n    ANCHORE_SERVICE_DIR=\"/anchore_service\" \\\n    ANCHORE_LOG_LEVEL=\"INFO\" \\\n    ANCHORE_ENABLE_METRICS=\"false\" \\\n    ANCHORE_INTERNAL_SSL_VERIFY=\"false\" \\\n    ANCHORE_WEBHOOK_DESTINATION_URL=\"null\" \\\n    ANCHORE_FEEDS_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SELECTIVE_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SSL_VERIFY=\"true\" \\\n    ANCHORE_ENDPOINT_HOSTNAME=\"localhost\" \\\n    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=\"false\" \\\n    ANCHORE_FEED_SYNC_INTERVAL_SEC=\"21600\" \\\n    ANCHORE_EXTERNAL_PORT=\"null\" \\\n    ANCHORE_EXTERNAL_TLS=\"false\" \\\n    ANCHORE_AUTHZ_HANDLER=\"native\" \\\n    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=\"null\" \\\n    ANCHORE_ADMIN_EMAIL=\"admin@myanchore\" \\\n    ANCHORE_HOST_ID=\"anchore-quickstart\" \\\n    ANCHORE_DB_PORT=\"5432\" \\\n    ANCHORE_DB_NAME=\"postgres\" \\\n    ANCHORE_DB_USER=\"postgres\" \\\n    SET_HOSTID_TO_HOSTNAME=\"false\" \\\n    ANCHORE_CLI_USER=\"admin\" \\\n    ANCHORE_CLI_PASS=\"foobar\" \\\n    ANCHORE_SERVICE_PORT=\"8228\" \\\n    ANCHORE_CLI_URL=\"http://localhost:8228\" \\\n    ANCHORE_FEEDS_URL=\"https://ancho.re/v1/service/feeds\" \\\n    ANCHORE_FEEDS_CLIENT_URL=\"https://ancho.re/v1/account/users\" \\\n    ANCHORE_FEEDS_TOKEN_URL=\"https://ancho.re/oauth/token\" \\\n    ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT=\"0\" \\\n    ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT=\"0\"\n#   Container run environment settings\n#  VOLUME /analysis_scratch\nEXPOSE ${ANCHORE_SERVICE_PORT}\n#   Build dependencies\nRUN set -ex \\\n && yum update -y \\\n && yum install -y rh-python36 rh-python36-python-wheel rh-python36-python-pip git procps psmisc\n#   Setup container default configs and directories\nWORKDIR /anchore-engine\n#   Perform OS setup\nRUN set -ex \\\n && groupadd --gid 1000 anchore \\\n && useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore \\\n && mkdir ${ANCHORE_SERVICE_DIR} \\\n && mkdir /config \\\n && mkdir /licenses \\\n && mkdir -p /var/log/anchore \\\n && chown -R anchore:anchore /var/log/anchore \\\n && mkdir -p /var/run/anchore \\\n && chown -R anchore:anchore /var/run/anchore \\\n && mkdir -p /analysis_scratch \\\n && chown -R anchore:anchore /analysis_scratch \\\n && mkdir -p /workspace \\\n && chown -R anchore:anchore /workspace \\\n && mkdir -p ${ANCHORE_SERVICE_DIR} \\\n && chown -R anchore:anchore /anchore_service \\\n && cp /build_output/LICENSE /licenses/ \\\n && cp /build_output/configs/default_config.yaml /config/config.yaml \\\n && cp /build_output/configs/docker-compose.yaml /docker-compose.yaml \\\n && cp /build_output/configs/docker-compose-dev.yaml /docker-compose-dev.yaml \\\n && cp /build_output/configs/docker-entrypoint.sh /docker-entrypoint.sh \\\n && md5sum /config/config.yaml > /config/build_installed \\\n && chmod +x /docker-entrypoint.sh\n#   Perform any base OS specific setup\n#   Setup python3 environment & create anchore-cli wrapper script for UBI7 \nRUN echo -e '#!/usr/bin/env bash\\n\\nsource /opt/rh/rh-python36/enable' > /etc/profile.d/python3.sh \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-cli $@' > /usr/local/bin/anchore-cli \\\n && chmod +x /usr/local/bin/anchore-cli \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-manager $@' > /usr/local/bin/anchore-manager \\\n && chmod +x /usr/local/bin/anchore-manager\n#   Perform the anchore-engine build and install\nRUN set -ex \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 install --no-index --find-links=./ /build_output/wheels/*.whl \\\n && cp /build_output/deps/skopeo /usr/bin/skopeo \\\n && mkdir -p /etc/containers \\\n && cp /build_output/configs/skopeo-policy.json /etc/containers/policy.json \\\n && yum install -y /build_output/deps/dpkg*.rpm \\\n && rm -rf /build_output /root/.cache\n#   Container runtime instructions\nHEALTHCHECK --start-period=20s CMD curl -f http://localhost:8228/health || exit 1\nUSER anchore:anchore\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"anchore-manager\", \"service\", \"start\", \"--all\"]\n","originalDockerfile":"FROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-builder\n# ####### This is stage1 where anchore wheels, binary deps, and any items from the source tree get staged to /build_output ########\nARG CLI_COMMIT\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\nENV GOPATH=\"/go\"\nENV SKOPEO_VERSION=\"v0.1.32\"\nENV GO_VERSION=\"1.12.4\"\nENV GO_CHECKSUM=\"d7d1f1f88ddfe55840712dc1747f37a790cbcaa448f6c9cf51bbe10aa65442f5\"\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nCOPY . /buildsource\nWORKDIR /buildsource\nRUN set -ex \\\n && mkdir -p /build_output /build_output/deps /build_output/configs /build_output/wheels\nRUN set -ex \\\n && echo \"installing OS dependencies\" \\\n && yum update -y \\\n && yum install -y gcc make rh-python36 rh-python36-python-wheel rh-python36-python-pip git\n#  create anchore binaries\nRUN set -ex \\\n && echo \"installing anchore\" \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 wheel --wheel-dir=/build_output/wheels . \\\n && pip3 wheel --wheel-dir=/build_output/wheels/ git+git://github.com/anchore/anchore-cli.git@$CLI_COMMIT#egg=anchorecli \\\n && cp ./LICENSE /build_output/ \\\n && cp ./conf/default_config.yaml /build_output/configs/default_config.yaml \\\n && cp ./docker-compose.yaml /build_output/configs/docker-compose.yaml \\\n && cp ./docker-compose-dev.yaml /build_output/configs/docker-compose-dev.yaml \\\n && cp ./docker-entrypoint.sh /build_output/configs/docker-entrypoint.sh\n#  stage anchore dependency binaries\nRUN set -ex \\\n && echo \"installing GO\" \\\n && mkdir -p /go \\\n && echo \"${GO_CHECKSUM} -\" > /tmp/go_checksum \\\n && curl -fLs https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tee /tmp/go${GO_VERSION}.linux-amd64.tar.gz | sha256sum -c /tmp/go_checksum \\\n && tar -C /usr/local -xzf /tmp/go${GO_VERSION}.linux-amd64.tar.gz\nRUN set -ex \\\n && echo \"installing Skopeo\" \\\n && git clone --branch \"$SKOPEO_VERSION\" https://github.com/containers/skopeo ${GOPATH}/src/github.com/containers/skopeo \\\n && cd ${GOPATH}/src/github.com/containers/skopeo \\\n && make binary-local DISABLE_CGO=1 \\\n && make install-binary \\\n && cp /usr/bin/skopeo /build_output/deps/ \\\n && cp default-policy.json /build_output/configs/skopeo-policy.json\n#  stage RPM dependency binaries\nRUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && yum install -y --downloadonly --downloaddir=/build_output/deps/ dpkg\nRUN tar -z -c -v -C /build_output -f /anchore-buildblob.tgz .\n#  Build setup section\nFROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-final\n# ####### This is stage2 which does setup and install entirely from items from stage1's /build_output ########\nARG CLI_COMMIT\nARG ANCHORE_COMMIT\nARG ANCHORE_ENGINE_VERSION=\"0.5.0\"\nARG ANCHORE_ENGINE_RELEASE=\"dev\"\n#  Copy skopeo artifacts from build step\nCOPY --from=anchore-engine-builder /build_output /build_output\n#  Container metadata section\nMAINTAINER dev@anchore.com\nLABEL anchore_cli_commit=\"$CLI_COMMIT\" \\\n      anchore_commit=\"$ANCHORE_COMMIT\" \\\n      name=\"anchore-engine\" \\\n      maintainer=\"dev@anchore.com\" \\\n      vendor=\"Anchore Inc.\" \\\n      version=\"$ANCHORE_ENGINE_VERSION\" \\\n      release=\"$ANCHORE_ENGINE_RELEASE\" \\\n      summary=\"Anchore Engine - container image scanning service for policy-based security, best-practice and compliance enforcement.\" \\\n      description=\"Anchore is an open platform for container security and compliance that allows developers, operations, and security teams to discover, analyze, and certify container images on-premises or in the cloud. Anchore Engine is the on-prem, OSS, API accessible service that allows ops and developers to perform detailed analysis, run queries, produce reports and define policies on container images that can be used in CI/CD pipelines to ensure that only containers that meet your organization’s requirements are deployed into production.\"\n#  Environment variables to be present in running environment\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#  Default values overrideable at runtime of the container\nENV ANCHORE_CONFIG_DIR=\"/config\" \\\n    ANCHORE_SERVICE_DIR=\"/anchore_service\" \\\n    ANCHORE_LOG_LEVEL=\"INFO\" \\\n    ANCHORE_ENABLE_METRICS=\"false\" \\\n    ANCHORE_INTERNAL_SSL_VERIFY=\"false\" \\\n    ANCHORE_WEBHOOK_DESTINATION_URL=\"null\" \\\n    ANCHORE_FEEDS_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SELECTIVE_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SSL_VERIFY=\"true\" \\\n    ANCHORE_ENDPOINT_HOSTNAME=\"localhost\" \\\n    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=\"false\" \\\n    ANCHORE_FEED_SYNC_INTERVAL_SEC=\"21600\" \\\n    ANCHORE_EXTERNAL_PORT=\"null\" \\\n    ANCHORE_EXTERNAL_TLS=\"false\" \\\n    ANCHORE_AUTHZ_HANDLER=\"native\" \\\n    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=\"null\" \\\n    ANCHORE_ADMIN_PASSWORD=\"foobar\" \\\n    ANCHORE_ADMIN_EMAIL=\"admin@myanchore\" \\\n    ANCHORE_HOST_ID=\"anchore-quickstart\" \\\n    ANCHORE_DB_PORT=\"5432\" \\\n    ANCHORE_DB_NAME=\"postgres\" \\\n    ANCHORE_DB_USER=\"postgres\" \\\n    SET_HOSTID_TO_HOSTNAME=\"false\" \\\n    ANCHORE_CLI_USER=\"admin\" \\\n    ANCHORE_CLI_PASS=\"foobar\" \\\n    ANCHORE_SERVICE_PORT=\"8228\" \\\n    ANCHORE_CLI_URL=\"http://localhost:8228\" \\\n    ANCHORE_FEEDS_URL=\"https://ancho.re/v1/service/feeds\" \\\n    ANCHORE_FEEDS_CLIENT_URL=\"https://ancho.re/v1/account/users\" \\\n    ANCHORE_FEEDS_TOKEN_URL=\"https://ancho.re/oauth/token\" \\\n    ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT=\"0\" \\\n    ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT=\"0\"\n#  Container run environment settings\n# VOLUME /analysis_scratch\nEXPOSE ${ANCHORE_SERVICE_PORT}\n#  Build dependencies\nRUN set -ex \\\n && yum update -y \\\n && yum install -y rh-python36 rh-python36-python-wheel rh-python36-python-pip git procps psmisc\n#  Setup container default configs and directories\nWORKDIR /anchore-engine\n#  Perform OS setup\nRUN set -ex \\\n && groupadd --gid 1000 anchore \\\n && useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore \\\n && mkdir ${ANCHORE_SERVICE_DIR} \\\n && mkdir /config \\\n && mkdir /licenses \\\n && mkdir -p /var/log/anchore \\\n && chown -R anchore:anchore /var/log/anchore \\\n && mkdir -p /var/run/anchore \\\n && chown -R anchore:anchore /var/run/anchore \\\n && mkdir -p /analysis_scratch \\\n && chown -R anchore:anchore /analysis_scratch \\\n && mkdir -p /workspace \\\n && chown -R anchore:anchore /workspace \\\n && mkdir -p ${ANCHORE_SERVICE_DIR} \\\n && chown -R anchore:anchore /anchore_service \\\n && cp /build_output/LICENSE /licenses/ \\\n && cp /build_output/configs/default_config.yaml /config/config.yaml \\\n && cp /build_output/configs/docker-compose.yaml /docker-compose.yaml \\\n && cp /build_output/configs/docker-compose-dev.yaml /docker-compose-dev.yaml \\\n && cp /build_output/configs/docker-entrypoint.sh /docker-entrypoint.sh \\\n && md5sum /config/config.yaml > /config/build_installed \\\n && chmod +x /docker-entrypoint.sh\n#  Perform any base OS specific setup\n#  Setup python3 environment & create anchore-cli wrapper script for UBI7 \nRUN echo -e '#!/usr/bin/env bash\\n\\nsource /opt/rh/rh-python36/enable' > /etc/profile.d/python3.sh \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-cli $@' > /usr/local/bin/anchore-cli \\\n && chmod +x /usr/local/bin/anchore-cli \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-manager $@' > /usr/local/bin/anchore-manager \\\n && chmod +x /usr/local/bin/anchore-manager\n#  Perform the anchore-engine build and install\nRUN set -ex \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 install --no-index --find-links=./ /build_output/wheels/*.whl \\\n && cp /build_output/deps/skopeo /usr/bin/skopeo \\\n && mkdir -p /etc/containers \\\n && cp /build_output/configs/skopeo-policy.json /etc/containers/policy.json \\\n && yum install -y /build_output/deps/dpkg*.rpm \\\n && rm -rf /build_output /root/.cache\n#  Container runtime instructions\nHEALTHCHECK --start-period=20s CMD curl -f http://localhost:8228/health || exit 1\nUSER anchore:anchore\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"anchore-manager\", \"service\", \"start\", \"--all\"]\n","injectedSmells":[],"originalDockerfileHash":"4a2e6b74cbc6c5ad79c7389a791ccdb9","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-builder\n#  ####### This is stage1 where anchore wheels, binary deps, and any items from the source tree get staged to /build_output ########\nARG CLI_COMMIT\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\nENV GOPATH=\"/go\"\nENV SKOPEO_VERSION=\"v0.1.32\"\nENV GO_VERSION=\"1.12.4\"\nENV GO_CHECKSUM=\"d7d1f1f88ddfe55840712dc1747f37a790cbcaa448f6c9cf51bbe10aa65442f5\"\nENV PATH=\"${PATH}:/usr/local/go/bin\"\nCOPY . /buildsource\nWORKDIR /buildsource\nRUN set -ex \\\n && mkdir -p /build_output /build_output/deps /build_output/configs /build_output/wheels\nRUN set -ex \\\n && echo \"installing OS dependencies\" \\\n && yum update -y \\\n && yum install -y gcc make rh-python36 rh-python36-python-wheel rh-python36-python-pip git\n#   create anchore binaries\nRUN set -ex \\\n && echo \"installing anchore\" \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 wheel --wheel-dir=/build_output/wheels . \\\n && pip3 wheel --wheel-dir=/build_output/wheels/ git+git://github.com/anchore/anchore-cli.git@$CLI_COMMIT#egg=anchorecli \\\n && cp ./LICENSE /build_output/ \\\n && cp ./conf/default_config.yaml /build_output/configs/default_config.yaml \\\n && cp ./docker-compose.yaml /build_output/configs/docker-compose.yaml \\\n && cp ./docker-compose-dev.yaml /build_output/configs/docker-compose-dev.yaml \\\n && cp ./docker-entrypoint.sh /build_output/configs/docker-entrypoint.sh\n#   stage anchore dependency binaries\nRUN set -ex \\\n && echo \"installing GO\" \\\n && mkdir -p /go \\\n && echo \"${GO_CHECKSUM} -\" > /tmp/go_checksum \\\n && curl -fLs https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tee /tmp/go${GO_VERSION}.linux-amd64.tar.gz | sha256sum -c /tmp/go_checksum \\\n && tar -C /usr/local -xzf /tmp/go${GO_VERSION}.linux-amd64.tar.gz\nRUN set -ex \\\n && echo \"installing Skopeo\" \\\n && git clone --branch \"$SKOPEO_VERSION\" https://github.com/containers/skopeo ${GOPATH}/src/github.com/containers/skopeo \\\n && cd ${GOPATH}/src/github.com/containers/skopeo \\\n && make binary-local DISABLE_CGO=1 \\\n && make install-binary \\\n && cp /usr/bin/skopeo /build_output/deps/ \\\n && cp default-policy.json /build_output/configs/skopeo-policy.json\n#   stage RPM dependency binaries\nRUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \\\n && yum install -y --downloadonly --downloaddir=/build_output/deps/ dpkg\nRUN tar -z -c -v -C /build_output -f /anchore-buildblob.tgz .\n#   Build setup section\nFROM registry.access.redhat.com/ubi7/ubi:7.6-123 AS anchore-engine-final\n#  ####### This is stage2 which does setup and install entirely from items from stage1's /build_output ########\nARG CLI_COMMIT\nARG ANCHORE_COMMIT\nARG ANCHORE_ENGINE_VERSION=\"0.5.0\"\nARG ANCHORE_ENGINE_RELEASE=\"dev\"\n#   Copy skopeo artifacts from build step\nCOPY --from=anchore-engine-builder /build_output /build_output\n#   Container metadata section\nMAINTAINER dev@anchore.com\nLABEL anchore_cli_commit=\"$CLI_COMMIT\" \\\n      anchore_commit=\"$ANCHORE_COMMIT\" \\\n      name=\"anchore-engine\" \\\n      maintainer=\"dev@anchore.com\" \\\n      vendor=\"Anchore Inc.\" \\\n      version=\"$ANCHORE_ENGINE_VERSION\" \\\n      release=\"$ANCHORE_ENGINE_RELEASE\" \\\n      summary=\"Anchore Engine - container image scanning service for policy-based security, best-practice and compliance enforcement.\" \\\n      description=\"Anchore is an open platform for container security and compliance that allows developers, operations, and security teams to discover, analyze, and certify container images on-premises or in the cloud. Anchore Engine is the on-prem, OSS, API accessible service that allows ops and developers to perform detailed analysis, run queries, produce reports and define policies on container images that can be used in CI/CD pipelines to ensure that only containers that meet your organization’s requirements are deployed into production.\"\n#   Environment variables to be present in running environment\nENV LANG=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Default values overrideable at runtime of the container\nENV ANCHORE_CONFIG_DIR=\"/config\" \\\n    ANCHORE_SERVICE_DIR=\"/anchore_service\" \\\n    ANCHORE_LOG_LEVEL=\"INFO\" \\\n    ANCHORE_ENABLE_METRICS=\"false\" \\\n    ANCHORE_INTERNAL_SSL_VERIFY=\"false\" \\\n    ANCHORE_WEBHOOK_DESTINATION_URL=\"null\" \\\n    ANCHORE_FEEDS_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SELECTIVE_ENABLED=\"true\" \\\n    ANCHORE_FEEDS_SSL_VERIFY=\"true\" \\\n    ANCHORE_ENDPOINT_HOSTNAME=\"localhost\" \\\n    ANCHORE_EVENTS_NOTIFICATIONS_ENABLED=\"false\" \\\n    ANCHORE_FEED_SYNC_INTERVAL_SEC=\"21600\" \\\n    ANCHORE_EXTERNAL_PORT=\"null\" \\\n    ANCHORE_EXTERNAL_TLS=\"false\" \\\n    ANCHORE_AUTHZ_HANDLER=\"native\" \\\n    ANCHORE_EXTERNAL_AUTHZ_ENDPOINT=\"null\" \\\n    ANCHORE_ADMIN_PASSWORD=\"foobar\" \\\n    ANCHORE_ADMIN_EMAIL=\"admin@myanchore\" \\\n    ANCHORE_HOST_ID=\"anchore-quickstart\" \\\n    ANCHORE_DB_PORT=\"5432\" \\\n    ANCHORE_DB_NAME=\"postgres\" \\\n    ANCHORE_DB_USER=\"postgres\" \\\n    SET_HOSTID_TO_HOSTNAME=\"false\" \\\n    ANCHORE_CLI_USER=\"admin\" \\\n    ANCHORE_CLI_PASS=\"foobar\" \\\n    ANCHORE_SERVICE_PORT=\"8228\" \\\n    ANCHORE_CLI_URL=\"http://localhost:8228\" \\\n    ANCHORE_FEEDS_URL=\"https://ancho.re/v1/service/feeds\" \\\n    ANCHORE_FEEDS_CLIENT_URL=\"https://ancho.re/v1/account/users\" \\\n    ANCHORE_FEEDS_TOKEN_URL=\"https://ancho.re/oauth/token\" \\\n    ANCHORE_GLOBAL_CLIENT_READ_TIMEOUT=\"0\" \\\n    ANCHORE_GLOBAL_CLIENT_CONNECT_TIMEOUT=\"0\"\n#   Container run environment settings\n#  VOLUME /analysis_scratch\nEXPOSE ${ANCHORE_SERVICE_PORT}\n#   Build dependencies\nRUN set -ex \\\n && yum update -y \\\n && yum install -y rh-python36 rh-python36-python-wheel rh-python36-python-pip git procps psmisc\n#   Setup container default configs and directories\nWORKDIR /anchore-engine\n#   Perform OS setup\nRUN set -ex \\\n && groupadd --gid 1000 anchore \\\n && useradd --uid 1000 --gid anchore --shell /bin/bash --create-home anchore \\\n && mkdir ${ANCHORE_SERVICE_DIR} \\\n && mkdir /config \\\n && mkdir /licenses \\\n && mkdir -p /var/log/anchore \\\n && chown -R anchore:anchore /var/log/anchore \\\n && mkdir -p /var/run/anchore \\\n && chown -R anchore:anchore /var/run/anchore \\\n && mkdir -p /analysis_scratch \\\n && chown -R anchore:anchore /analysis_scratch \\\n && mkdir -p /workspace \\\n && chown -R anchore:anchore /workspace \\\n && mkdir -p ${ANCHORE_SERVICE_DIR} \\\n && chown -R anchore:anchore /anchore_service \\\n && cp /build_output/LICENSE /licenses/ \\\n && cp /build_output/configs/default_config.yaml /config/config.yaml \\\n && cp /build_output/configs/docker-compose.yaml /docker-compose.yaml \\\n && cp /build_output/configs/docker-compose-dev.yaml /docker-compose-dev.yaml \\\n && cp /build_output/configs/docker-entrypoint.sh /docker-entrypoint.sh \\\n && md5sum /config/config.yaml > /config/build_installed \\\n && chmod +x /docker-entrypoint.sh\n#   Perform any base OS specific setup\n#   Setup python3 environment & create anchore-cli wrapper script for UBI7 \nRUN echo -e '#!/usr/bin/env bash\\n\\nsource /opt/rh/rh-python36/enable' > /etc/profile.d/python3.sh \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-cli $@' > /usr/local/bin/anchore-cli \\\n && chmod +x /usr/local/bin/anchore-cli \\\n && echo -e '#!/usr/bin/env bash\\n\\n/docker-entrypoint.sh anchore-manager $@' > /usr/local/bin/anchore-manager \\\n && chmod +x /usr/local/bin/anchore-manager\n#   Perform the anchore-engine build and install\nRUN set -ex \\\n && source /opt/rh/rh-python36/enable \\\n && pip3 install --no-index --find-links=./ /build_output/wheels/*.whl \\\n && cp /build_output/deps/skopeo /usr/bin/skopeo \\\n && mkdir -p /etc/containers \\\n && cp /build_output/configs/skopeo-policy.json /etc/containers/policy.json \\\n && yum install -y /build_output/deps/dpkg*.rpm \\\n && rm -rf /build_output /root/.cache\n#   Container runtime instructions\nHEALTHCHECK --start-period=20s CMD curl -f http://localhost:8228/health || exit 1\nUSER anchore:anchore\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"anchore-manager\", \"service\", \"start\", \"--all\"]\n","originalDockerfileUglifiedHash":"6f29425570cd941b86191ba30ebd767c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9e7e8f07d4c31032d1292c38e4d5813b95e14436.dockerfile"}