{"seed":948795962,"processedDockerfileHash":"5141d97fe6f70b4b80940f16f0910222","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nLABEL maintainer=\"John Chilton <jmchilton@gmail.com>\"\nARG CHROME_VERSION=\"google-chrome-beta\"\nARG CHROME_DRIVER_VERSION=\"2.38\"\n#   TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    DEBCONF_NONINTERACTIVE_SEEN=\"true\" \\\n    MYSQL_MAJOR=\"5.7\" \\\n    POSTGRES_MAJOR=\"9.5\" \\\n    GALAXY_ROOT=\"/galaxy\" \\\n    GALAXY_VIRTUAL_ENV=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_2=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_3=\"/galaxy_venv3\" \\\n    LC_ALL=\"C.UTF-8\"\n#   Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 apt-transport-https=1.2.35 curl=7.47.0-1ubuntu2.19 -y \\\n && apt-add-repository -y ppa:ansible/ansible \\\n && curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list \\\n && curl -s http://neuro.debian.net/lists/xenial.us-ca.full > /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends postgresql=9.5+173ubuntu0.3 postgresql-client=9.5+173ubuntu0.3 ansible=2.0.0.2-2ubuntu1.3 wget=1.17.1-1ubuntu1.5 python3-dev=3.5.1-3 git-core=1:2.7.4-0ubuntu1.10 python-prettytable=0.7.2-3 python-virtualenv=15.0.1+ds-3ubuntu1.1 python-pip=8.1.1-2ubuntu0.6 rsync=3.1.1-3ubuntu1.3 swig=3.0.8-0ubuntu3 sysstat=11.2.0-1ubuntu0.3 unzip=6.0-20ubuntu1.1 openssl=1.0.2g-1ubuntu4.20 bzip2=1.0.6-8ubuntu0.2 ca-certificates=20210119~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 tzdata=2021a-0ubuntu0.16.04 sudo=1.8.16-0ubuntu1.10 locales=2.23-0ubuntu11.3 xvfb=2:1.18.4-0ubuntu0.12 ffmpeg=7:2.8.17-0ubuntu0.1 bcftools=1.2-2 singularity-container libnss3=2:3.28.4-0ubuntu0.16.04.14 libgconf-2-4=3.2.6-3ubuntu6 ${CHROME_VERSION:-google-chrome-stable} -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN mkdir -p /tmp/ansible \\\n && mkdir -p /opt/galaxy/db \\\n && chown -R postgres:postgres /opt/galaxy/db\nCOPY ansible_vars.yml /tmp/ansible/ansible_vars.yml\nCOPY provision.yml /tmp/ansible/provision.yml\nRUN mkdir /etc/galaxy \\\n && cd /tmp/ansible \\\n && mkdir roles \\\n && mkdir roles/galaxyprojectdotorg.galaxy-os \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os \\\n && mkdir roles/galaxyprojectdotorg.cloudman-database \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database \\\n && mkdir roles/galaxyprojectdotorg.galaxy \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy \\\n && mkdir roles/galaxyprojectdotorg.galaxy-extras \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras \\\n && mkdir roles/galaxyprojectdotorg.galaxy-toolshed \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN cd $GALAXY_ROOT \\\n && virtualenv -p /usr/bin/python3 $GALAXY_VIRTUAL_ENV_3 \\\n && for VENV in $GALAXY_VIRTUAL_ENV_2 $GALAXY_VIRTUAL_ENV_3; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && ./scripts/common_startup.sh \\\n && dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt \\\n && [ -f $dev_requirements ] \\\n && $VENV/bin/pip install -r $dev_requirements ; done\nRUN for VENV in $GALAXY_VIRTUAL_ENV_3 $GALAXY_VIRTUAL_ENV_2; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && . $GALAXY_VIRTUAL_ENV/bin/activate \\\n && pip install psycopg2-binary==2.9.6 ; done \\\n && cd $GALAXY_ROOT \\\n && echo \"Prepopulating postgres database\" \\\n && su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres \\\n && sleep 3 \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh \\\n && echo \"Prepopulating sqlite database\" \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh \\\n && echo \"Prepopulating toolshed postgres database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed \\\n && echo \"Prepopulating toolshed sqlite database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed\n#  ========================================\n#   Add Selenium user with passwordless sudo\n#  ========================================\nRUN useradd seluser --shell /bin/bash --create-home \\\n && usermod -a -G sudo seluser \\\n && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n && echo 'seluser:secret' | chpasswd\nUSER seluser\n#  ==========\n#   Selenium\n#  ==========\nRUN sudo mkdir -p /opt/selenium \\\n && sudo chown seluser:seluser /opt/selenium \\\n && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar -O /opt/selenium/selenium-server-standalone.jar\nUSER root\n#  ==============================\n#   Scripts to run Selenium Node\n#  ==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\nRUN /opt/bin/wrap_chrome_binary\nUSER seluser\nRUN CD_VERSION=$( if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ] ; then echo $( wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE ;) ; else echo $CHROME_DRIVER_VERSION ; fi ;) \\\n && echo \"Using chromedriver version: \"$CD_VERSION \\\n && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n && rm -rf /opt/selenium/chromedriver \\\n && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n && rm /tmp/chromedriver_linux64.zip \\\n && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n#  ============================\n#   Some configuration options\n#  ============================\nENV SCREEN_WIDTH=\"1360\" \\\n    SCREEN_HEIGHT=\"1020\" \\\n    SCREEN_DEPTH=\"24\" \\\n    DISPLAY=\":99.0\" \\\n    NODE_MAX_INSTANCES=\"1\" \\\n    NODE_MAX_SESSION=\"1\" \\\n    NODE_PORT=\"5555\" \\\n    NODE_REGISTER_CYCLE=\"5000\" \\\n    NODE_POLLING=\"5000\" \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=\"60000\" \\\n    NODE_DOWN_POLLING_LIMIT=\"2\" \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=\"/dev/null\"\nUSER root\nCOPY run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\nEXPOSE 9009/tcp\nEXPOSE 8080/tcp\nEXPOSE 80/tcp\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nLABEL maintainer=\"John Chilton <jmchilton@gmail.com>\"\nARG CHROME_VERSION=\"google-chrome-beta\"\nARG CHROME_DRIVER_VERSION=\"2.38\"\n#  TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    DEBCONF_NONINTERACTIVE_SEEN=\"true\" \\\n    MYSQL_MAJOR=\"5.7\" \\\n    POSTGRES_MAJOR=\"9.5\" \\\n    GALAXY_ROOT=\"/galaxy\" \\\n    GALAXY_VIRTUAL_ENV=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_2=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_3=\"/galaxy_venv3\" \\\n    LC_ALL=\"C.UTF-8\"\n#  Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y \\\n && apt-get install software-properties-common apt-transport-https curl -y \\\n && apt-add-repository -y ppa:ansible/ansible \\\n && curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list \\\n && curl -s http://neuro.debian.net/lists/xenial.us-ca.full > /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends postgresql postgresql-client ansible wget python3-dev git-core python-prettytable python-virtualenv python-pip rsync swig sysstat unzip openssl bzip2 ca-certificates openjdk-8-jre-headless tzdata sudo locales xvfb ffmpeg bcftools singularity-container libnss3 libgconf-2-4 ${CHROME_VERSION:-google-chrome-stable} -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN mkdir -p /tmp/ansible \\\n && mkdir -p /opt/galaxy/db \\\n && chown -R postgres:postgres /opt/galaxy/db\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\nRUN mkdir /etc/galaxy \\\n && cd /tmp/ansible \\\n && mkdir roles \\\n && mkdir roles/galaxyprojectdotorg.galaxy-os \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os \\\n && mkdir roles/galaxyprojectdotorg.cloudman-database \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database \\\n && mkdir roles/galaxyprojectdotorg.galaxy \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy \\\n && mkdir roles/galaxyprojectdotorg.galaxy-extras \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras \\\n && mkdir roles/galaxyprojectdotorg.galaxy-toolshed \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN cd $GALAXY_ROOT \\\n && virtualenv -p /usr/bin/python3 $GALAXY_VIRTUAL_ENV_3 \\\n && for VENV in $GALAXY_VIRTUAL_ENV_2 $GALAXY_VIRTUAL_ENV_3; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && ./scripts/common_startup.sh \\\n && dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt \\\n && [ -f $dev_requirements ] \\\n && $VENV/bin/pip install -r $dev_requirements ; done\nRUN for VENV in $GALAXY_VIRTUAL_ENV_3 $GALAXY_VIRTUAL_ENV_2; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && . $GALAXY_VIRTUAL_ENV/bin/activate \\\n && pip install psycopg2-binary ; done \\\n && cd $GALAXY_ROOT \\\n && echo \"Prepopulating postgres database\" \\\n && su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres \\\n && sleep 3 \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh \\\n && echo \"Prepopulating sqlite database\" \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh \\\n && echo \"Prepopulating toolshed postgres database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed \\\n && echo \"Prepopulating toolshed sqlite database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed\n# ========================================\n#  Add Selenium user with passwordless sudo\n# ========================================\nRUN useradd seluser --shell /bin/bash --create-home \\\n && usermod -a -G sudo seluser \\\n && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n && echo 'seluser:secret' | chpasswd\nUSER seluser\n# ==========\n#  Selenium\n# ==========\nRUN sudo mkdir -p /opt/selenium \\\n && sudo chown seluser:seluser /opt/selenium \\\n && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar -O /opt/selenium/selenium-server-standalone.jar\nUSER root\n# ==============================\n#  Scripts to run Selenium Node\n# ==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\nRUN /opt/bin/wrap_chrome_binary\nUSER seluser\nRUN CD_VERSION=$( if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ] ; then echo $( wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE ;) ; else echo $CHROME_DRIVER_VERSION ; fi ;) \\\n && echo \"Using chromedriver version: \"$CD_VERSION \\\n && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n && rm -rf /opt/selenium/chromedriver \\\n && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n && rm /tmp/chromedriver_linux64.zip \\\n && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n# ============================\n#  Some configuration options\n# ============================\nENV SCREEN_WIDTH=\"1360\" \\\n    SCREEN_HEIGHT=\"1020\" \\\n    SCREEN_DEPTH=\"24\" \\\n    DISPLAY=\":99.0\" \\\n    NODE_MAX_INSTANCES=\"1\" \\\n    NODE_MAX_SESSION=\"1\" \\\n    NODE_PORT=\"5555\" \\\n    NODE_REGISTER_CYCLE=\"5000\" \\\n    NODE_POLLING=\"5000\" \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=\"60000\" \\\n    NODE_DOWN_POLLING_LIMIT=\"2\" \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=\"/dev/null\"\nUSER root\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\nEXPOSE 9009/tcp\nEXPOSE 8080/tcp\nEXPOSE 80/tcp\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"48d6b561cf22b25735f9ec7d388d7a3a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nLABEL maintainer=\"John Chilton <jmchilton@gmail.com>\"\nARG CHROME_VERSION=\"google-chrome-beta\"\nARG CHROME_DRIVER_VERSION=\"2.38\"\n#   TODO: merge with first ENV statement.\nENV DEBIAN_FRONTEND=\"noninteractive\" \\\n    DEBCONF_NONINTERACTIVE_SEEN=\"true\" \\\n    MYSQL_MAJOR=\"5.7\" \\\n    POSTGRES_MAJOR=\"9.5\" \\\n    GALAXY_ROOT=\"/galaxy\" \\\n    GALAXY_VIRTUAL_ENV=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_2=\"/galaxy_venv\" \\\n    GALAXY_VIRTUAL_ENV_3=\"/galaxy_venv3\" \\\n    LC_ALL=\"C.UTF-8\"\n#   Pre-install a bunch of packages to speed up ansible steps.\nRUN apt-get update -y \\\n && apt-get install software-properties-common apt-transport-https curl -y \\\n && apt-add-repository -y ppa:ansible/ansible \\\n && curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list \\\n && curl -s http://neuro.debian.net/lists/xenial.us-ca.full > /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends postgresql postgresql-client ansible wget python3-dev git-core python-prettytable python-virtualenv python-pip rsync swig sysstat unzip openssl bzip2 ca-certificates openjdk-8-jre-headless tzdata sudo locales xvfb ffmpeg bcftools singularity-container libnss3 libgconf-2-4 ${CHROME_VERSION:-google-chrome-stable} -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN mkdir -p /tmp/ansible \\\n && mkdir -p /opt/galaxy/db \\\n && chown -R postgres:postgres /opt/galaxy/db\nADD ansible_vars.yml /tmp/ansible/ansible_vars.yml\nADD provision.yml /tmp/ansible/provision.yml\nRUN mkdir /etc/galaxy \\\n && cd /tmp/ansible \\\n && mkdir roles \\\n && mkdir roles/galaxyprojectdotorg.galaxy-os \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-os/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-os \\\n && mkdir roles/galaxyprojectdotorg.cloudman-database \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-cloudman-database/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.cloudman-database \\\n && mkdir roles/galaxyprojectdotorg.galaxy \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy \\\n && mkdir roles/galaxyprojectdotorg.galaxy-extras \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-extras/archive/dynamic_uwsgi_config.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-extras \\\n && mkdir roles/galaxyprojectdotorg.galaxy-toolshed \\\n && wget --quiet -O- https://github.com/galaxyproject/ansible-galaxy-toolshed/archive/master.tar.gz | tar -xzf- --strip-components=1 -C roles/galaxyprojectdotorg.galaxy-toolshed \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=image -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=database -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=galaxy -c local -e \"@ansible_vars.yml\" \\\n && ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ansible-playbook /tmp/ansible/provision.yml --tags=toolshed -c local -e \"@ansible_vars.yml\" \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN cd $GALAXY_ROOT \\\n && virtualenv -p /usr/bin/python3 $GALAXY_VIRTUAL_ENV_3 \\\n && for VENV in $GALAXY_VIRTUAL_ENV_2 $GALAXY_VIRTUAL_ENV_3; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && ./scripts/common_startup.sh \\\n && dev_requirements=./lib/galaxy/dependencies/dev-requirements.txt \\\n && [ -f $dev_requirements ] \\\n && $VENV/bin/pip install -r $dev_requirements ; done\nRUN for VENV in $GALAXY_VIRTUAL_ENV_3 $GALAXY_VIRTUAL_ENV_2; do export GALAXY_VIRTUAL_ENV=$VENV \\\n && . $GALAXY_VIRTUAL_ENV/bin/activate \\\n && pip install psycopg2-binary ; done \\\n && cd $GALAXY_ROOT \\\n && echo \"Prepopulating postgres database\" \\\n && su -c '/usr/lib/postgresql/${POSTGRES_MAJOR}/bin/pg_ctl -o \"-F\" start -D /opt/galaxy/db' postgres \\\n && sleep 3 \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/galaxy\" bash create_db.sh \\\n && echo \"Prepopulating sqlite database\" \\\n && GALAXY_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/galaxy.sqlite\" bash create_db.sh \\\n && echo \"Prepopulating toolshed postgres database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"postgresql://root@localhost:5930/toolshed\" bash create_db.sh tool_shed \\\n && echo \"Prepopulating toolshed sqlite database\" \\\n && TOOL_SHED_CONFIG_DATABASE_CONNECTION=\"sqlite:////opt/galaxy/toolshed.sqlite\" bash create_db.sh tool_shed\n#  ========================================\n#   Add Selenium user with passwordless sudo\n#  ========================================\nRUN useradd seluser --shell /bin/bash --create-home \\\n && usermod -a -G sudo seluser \\\n && echo 'ALL ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers \\\n && echo 'seluser:secret' | chpasswd\nUSER seluser\n#  ==========\n#   Selenium\n#  ==========\nRUN sudo mkdir -p /opt/selenium \\\n && sudo chown seluser:seluser /opt/selenium \\\n && wget --no-verbose https://selenium-release.storage.googleapis.com/3.6/selenium-server-standalone-3.6.0.jar -O /opt/selenium/selenium-server-standalone.jar\nUSER root\n#  ==============================\n#   Scripts to run Selenium Node\n#  ==============================\nCOPY selenium/entry_point.sh selenium/functions.sh selenium/wrap_chrome_binary selenium/generate_config /opt/bin/\nRUN /opt/bin/wrap_chrome_binary\nUSER seluser\nRUN CD_VERSION=$( if [ ${CHROME_DRIVER_VERSION:-latest} = \"latest\" ] ; then echo $( wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE ;) ; else echo $CHROME_DRIVER_VERSION ; fi ;) \\\n && echo \"Using chromedriver version: \"$CD_VERSION \\\n && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CD_VERSION/chromedriver_linux64.zip \\\n && rm -rf /opt/selenium/chromedriver \\\n && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \\\n && rm /tmp/chromedriver_linux64.zip \\\n && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CD_VERSION \\\n && chmod 755 /opt/selenium/chromedriver-$CD_VERSION \\\n && sudo ln -fs /opt/selenium/chromedriver-$CD_VERSION /usr/bin/chromedriver\nRUN /opt/bin/generate_config > /opt/selenium/config.json\n#  ============================\n#   Some configuration options\n#  ============================\nENV SCREEN_WIDTH=\"1360\" \\\n    SCREEN_HEIGHT=\"1020\" \\\n    SCREEN_DEPTH=\"24\" \\\n    DISPLAY=\":99.0\" \\\n    NODE_MAX_INSTANCES=\"1\" \\\n    NODE_MAX_SESSION=\"1\" \\\n    NODE_PORT=\"5555\" \\\n    NODE_REGISTER_CYCLE=\"5000\" \\\n    NODE_POLLING=\"5000\" \\\n    NODE_UNREGISTER_IF_STILL_DOWN_AFTER=\"60000\" \\\n    NODE_DOWN_POLLING_LIMIT=\"2\" \\\n    NODE_APPLICATION_NAME=\"\" \\\n    DBUS_SESSION_BUS_ADDRESS=\"/dev/null\"\nUSER root\nADD run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh\nEXPOSE 9009/tcp\nEXPOSE 8080/tcp\nEXPOSE 80/tcp\nENTRYPOINT [\"/bin/bash\", \"/usr/local/bin/run_test_wrapper.sh\"]\n","originalDockerfileUglifiedHash":"5ffc24c65cf6fbd982c34b0367f26af7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6da7bea310156cf2bb2bf72db923ae1e651389a3.dockerfile"}