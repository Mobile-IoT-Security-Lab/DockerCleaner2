{"seed":4015011154,"processedDockerfileHash":"cd66a64a748e2f31ac4f98d1e1099dde","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:jessie\nRUN apt-get update \\\n && apt-get install --no-install-recommends acpi-support-base bash-completion busybox ca-certificates ifupdown isc-dhcp-client linux-image-3.16.0-4-amd64 ntp openssh-server rsync sudo sysvinit sysvinit-core squashfs-tools xorriso xz-utils isolinux syslinux-common -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/ssh/ssh_host_* \\\n && mkdir -p /tmp/iso/isolinux \\\n && ln -L /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/* /tmp/iso/isolinux/ \\\n && ln -L /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ \\\n && apt-get purge -y --auto-remove isolinux syslinux-common\n#  \t\tapparmor \\\n#   see https://wiki.debian.org/AppArmor/HowTo and isolinux.cfg\n#  \t\tcurl \\\n#  \t\twget \\\n#   BUSYBOX ALL UP IN HERE\nRUN set -e \\\n && busybox=\"$( which busybox ;)\" \\\n && for m in $( \"$busybox\" --list ;); do if ! command -v \"$m\" > /dev/null; then ln -vL \"$busybox\" /usr/local/bin/\"$m\" ; fi ; done\n#   if /etc/machine-id is empty, systemd will generate a suitable ID on boot\nRUN echo -n > /etc/machine-id\n#   setup networking (hack hack hack)\n#   TODO find a better way to do this natively via some eth@.service magic (like the getty magic) and remove ifupdown completely\nRUN for iface in eth0 eth1 eth2 eth3; do { echo \"auto $iface\" ;echo \"allow-hotplug $iface\" ;echo \"iface $iface inet dhcp\" ; } > /etc/network/interfaces.d/$iface; done\n#   COLOR PROMPT BABY\nRUN sed -ri 's/^#(force_color_prompt=)/\\1/' /etc/skel/.bashrc \\\n && cp /etc/skel/.bashrc /root/\n#   setup our non-root user, set passwords for both users, and setup sudo\nRUN useradd --create-home --shell /bin/bash docker \\\n && { echo 'root:docker' ;echo 'docker:docker' ; } | chpasswd \\\n && echo 'docker ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/docker\n#   autologin for all tty\n#   see also: grep ^ExecStart /lib/systemd/system/*getty@.service\nRUN mkdir -p /etc/systemd/system/getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --noclear %I $TERM' ; } > /etc/systemd/system/getty@.service.d/autologin.conf\nRUN mkdir -p /etc/systemd/system/serial-getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --keep-baud 115200,38400,9600 %I $TERM' ; } > /etc/systemd/system/serial-getty@.service.d/autologin.conf\n#   setup inittab for autologin too (in case of sysvinit)\nRUN set -e \\\n && { echo 'id:2:initdefault:' ;echo 'si::sysinit:/etc/init.d/rcS' ;for i in 0 1 2 3 4 5 6; do echo \"l$i:$i:wait:/etc/init.d/rc $i\" ; done ;for tty in 1 2 3 4 5 6; do [ $tty = 1 ] \\\n && rl=2345 || rl=23 ;echo \"$tty:$rl:respawn:/sbin/getty --autologin docker --noclear 38400 tty$tty\" ; done ;for ttyS in 0; do echo \"T$ttyS:23:respawn:/sbin/getty --autologin docker -L ttyS$ttyS 9600 vt100\" ; done ; } > /etc/inittab\n#   TODO figure out a clean way to suppress the \"respawning too fast\" error so we can have ttyS1 back\n#   setup NTP to use the boot2docker vendor pool instead of Debian's\nRUN sed -i 's/debian.pool.ntp.org/boot2docker.pool.ntp.org/g' /etc/ntp.conf\n#   set a default LANG (sshd reads from here)\n#   this prevents warnings later\nRUN echo 'LANG=C.UTF-8' > /etc/default/locale\n#   PURE VANITY\nRUN { echo ;echo 'Docker (\\\\s \\\\m \\\\r) [\\\\l]' ;echo ; } > /etc/issue\nRUN . /etc/os-release \\\n && echo \"$PRETTY_NAME\" > /tmp/iso/version\nCOPY scripts/generate-ssh-host-keys.sh /usr/local/sbin/\nCOPY inits/ssh-keygen /etc/init.d/\nRUN update-rc.d ssh-keygen defaults\nCOPY scripts/initramfs-live-hook.sh /usr/share/initramfs-tools/hooks/live\nCOPY scripts/initramfs-live-script.sh /usr/share/initramfs-tools/scripts/live\nCOPY excludes /tmp/\nCOPY scripts/audit-rootfs.sh scripts/build-rootfs.sh scripts/build-iso.sh /usr/local/sbin/\n#  RUN build-iso.sh # creates /tmp/docker.iso\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:jessie\nRUN apt-get update \\\n && apt-get install --no-install-recommends acpi-support-base bash-completion busybox ca-certificates ifupdown isc-dhcp-client linux-image-3.16.0-4-amd64 ntp openssh-server rsync sudo sysvinit sysvinit-core squashfs-tools xorriso xz-utils isolinux syslinux-common -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/ssh/ssh_host_* \\\n && mkdir -p /tmp/iso/isolinux \\\n && ln -L /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/* /tmp/iso/isolinux/ \\\n && ln -L /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ \\\n && apt-get purge -y --auto-remove isolinux syslinux-common\n# \t\tapparmor \\\n#  see https://wiki.debian.org/AppArmor/HowTo and isolinux.cfg\n# \t\tcurl \\\n# \t\twget \\\n#  BUSYBOX ALL UP IN HERE\nRUN set -e \\\n && busybox=\"$( which busybox ;)\" \\\n && for m in $( \"$busybox\" --list ;); do if ! command -v \"$m\" > /dev/null; then ln -vL \"$busybox\" /usr/local/bin/\"$m\" ; fi ; done\n#  if /etc/machine-id is empty, systemd will generate a suitable ID on boot\nRUN echo -n > /etc/machine-id\n#  setup networking (hack hack hack)\n#  TODO find a better way to do this natively via some eth@.service magic (like the getty magic) and remove ifupdown completely\nRUN for iface in eth0 eth1 eth2 eth3; do { echo \"auto $iface\" ;echo \"allow-hotplug $iface\" ;echo \"iface $iface inet dhcp\" ; } > /etc/network/interfaces.d/$iface; done\n#  COLOR PROMPT BABY\nRUN sed -ri 's/^#(force_color_prompt=)/\\1/' /etc/skel/.bashrc \\\n && cp /etc/skel/.bashrc /root/\n#  setup our non-root user, set passwords for both users, and setup sudo\nRUN useradd --create-home --shell /bin/bash docker \\\n && { echo 'root:docker' ;echo 'docker:docker' ; } | chpasswd \\\n && echo 'docker ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/docker\n#  autologin for all tty\n#  see also: grep ^ExecStart /lib/systemd/system/*getty@.service\nRUN mkdir -p /etc/systemd/system/getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --noclear %I $TERM' ; } > /etc/systemd/system/getty@.service.d/autologin.conf\nRUN mkdir -p /etc/systemd/system/serial-getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --keep-baud 115200,38400,9600 %I $TERM' ; } > /etc/systemd/system/serial-getty@.service.d/autologin.conf\n#  setup inittab for autologin too (in case of sysvinit)\nRUN set -e \\\n && { echo 'id:2:initdefault:' ;echo 'si::sysinit:/etc/init.d/rcS' ;for i in 0 1 2 3 4 5 6; do echo \"l$i:$i:wait:/etc/init.d/rc $i\" ; done ;for tty in 1 2 3 4 5 6; do [ $tty = 1 ] \\\n && rl=2345 || rl=23 ;echo \"$tty:$rl:respawn:/sbin/getty --autologin docker --noclear 38400 tty$tty\" ; done ;for ttyS in 0; do echo \"T$ttyS:23:respawn:/sbin/getty --autologin docker -L ttyS$ttyS 9600 vt100\" ; done ; } > /etc/inittab\n#  TODO figure out a clean way to suppress the \"respawning too fast\" error so we can have ttyS1 back\n#  setup NTP to use the boot2docker vendor pool instead of Debian's\nRUN sed -i 's/debian.pool.ntp.org/boot2docker.pool.ntp.org/g' /etc/ntp.conf\n#  set a default LANG (sshd reads from here)\n#  this prevents warnings later\nRUN echo 'LANG=C.UTF-8' > /etc/default/locale\n#  PURE VANITY\nRUN { echo ;echo 'Docker (\\\\s \\\\m \\\\r) [\\\\l]' ;echo ; } > /etc/issue\nRUN . /etc/os-release \\\n && echo \"$PRETTY_NAME\" > /tmp/iso/version\nCOPY scripts/generate-ssh-host-keys.sh /usr/local/sbin/\nCOPY inits/ssh-keygen /etc/init.d/\nRUN update-rc.d ssh-keygen defaults\nCOPY scripts/initramfs-live-hook.sh /usr/share/initramfs-tools/hooks/live\nCOPY scripts/initramfs-live-script.sh /usr/share/initramfs-tools/scripts/live\nCOPY excludes /tmp/\nCOPY scripts/audit-rootfs.sh scripts/build-rootfs.sh scripts/build-iso.sh /usr/local/sbin/\n# RUN build-iso.sh # creates /tmp/docker.iso\n","injectedSmells":[],"originalDockerfileHash":"3a47d45a28a2a080975b7ca1ef503552","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:jessie\nRUN apt-get update \\\n && apt-get install --no-install-recommends acpi-support-base bash-completion busybox ca-certificates ifupdown isc-dhcp-client linux-image-3.16.0-4-amd64 ntp openssh-server rsync sudo sysvinit sysvinit-core squashfs-tools xorriso xz-utils isolinux syslinux-common -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /etc/ssh/ssh_host_* \\\n && mkdir -p /tmp/iso/isolinux \\\n && ln -L /usr/lib/ISOLINUX/isolinux.bin /usr/lib/syslinux/modules/bios/* /tmp/iso/isolinux/ \\\n && ln -L /usr/lib/ISOLINUX/isohdpfx.bin /tmp/ \\\n && apt-get purge -y --auto-remove isolinux syslinux-common\n#  \t\tapparmor \\\n#   see https://wiki.debian.org/AppArmor/HowTo and isolinux.cfg\n#  \t\tcurl \\\n#  \t\twget \\\n#   BUSYBOX ALL UP IN HERE\nRUN set -e \\\n && busybox=\"$( which busybox ;)\" \\\n && for m in $( \"$busybox\" --list ;); do if ! command -v \"$m\" > /dev/null; then ln -vL \"$busybox\" /usr/local/bin/\"$m\" ; fi ; done\n#   if /etc/machine-id is empty, systemd will generate a suitable ID on boot\nRUN echo -n > /etc/machine-id\n#   setup networking (hack hack hack)\n#   TODO find a better way to do this natively via some eth@.service magic (like the getty magic) and remove ifupdown completely\nRUN for iface in eth0 eth1 eth2 eth3; do { echo \"auto $iface\" ;echo \"allow-hotplug $iface\" ;echo \"iface $iface inet dhcp\" ; } > /etc/network/interfaces.d/$iface; done\n#   COLOR PROMPT BABY\nRUN sed -ri 's/^#(force_color_prompt=)/\\1/' /etc/skel/.bashrc \\\n && cp /etc/skel/.bashrc /root/\n#   setup our non-root user, set passwords for both users, and setup sudo\nRUN useradd --create-home --shell /bin/bash docker \\\n && { echo 'root:docker' ;echo 'docker:docker' ; } | chpasswd \\\n && echo 'docker ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/docker\n#   autologin for all tty\n#   see also: grep ^ExecStart /lib/systemd/system/*getty@.service\nRUN mkdir -p /etc/systemd/system/getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --noclear %I $TERM' ; } > /etc/systemd/system/getty@.service.d/autologin.conf\nRUN mkdir -p /etc/systemd/system/serial-getty@.service.d \\\n && { echo '[Service]' ;echo 'ExecStart=' ;echo 'ExecStart=-/sbin/agetty --autologin docker --keep-baud 115200,38400,9600 %I $TERM' ; } > /etc/systemd/system/serial-getty@.service.d/autologin.conf\n#   setup inittab for autologin too (in case of sysvinit)\nRUN set -e \\\n && { echo 'id:2:initdefault:' ;echo 'si::sysinit:/etc/init.d/rcS' ;for i in 0 1 2 3 4 5 6; do echo \"l$i:$i:wait:/etc/init.d/rc $i\" ; done ;for tty in 1 2 3 4 5 6; do [ $tty = 1 ] \\\n && rl=2345 || rl=23 ;echo \"$tty:$rl:respawn:/sbin/getty --autologin docker --noclear 38400 tty$tty\" ; done ;for ttyS in 0; do echo \"T$ttyS:23:respawn:/sbin/getty --autologin docker -L ttyS$ttyS 9600 vt100\" ; done ; } > /etc/inittab\n#   TODO figure out a clean way to suppress the \"respawning too fast\" error so we can have ttyS1 back\n#   setup NTP to use the boot2docker vendor pool instead of Debian's\nRUN sed -i 's/debian.pool.ntp.org/boot2docker.pool.ntp.org/g' /etc/ntp.conf\n#   set a default LANG (sshd reads from here)\n#   this prevents warnings later\nRUN echo 'LANG=C.UTF-8' > /etc/default/locale\n#   PURE VANITY\nRUN { echo ;echo 'Docker (\\\\s \\\\m \\\\r) [\\\\l]' ;echo ; } > /etc/issue\nRUN . /etc/os-release \\\n && echo \"$PRETTY_NAME\" > /tmp/iso/version\nCOPY scripts/generate-ssh-host-keys.sh /usr/local/sbin/\nCOPY inits/ssh-keygen /etc/init.d/\nRUN update-rc.d ssh-keygen defaults\nCOPY scripts/initramfs-live-hook.sh /usr/share/initramfs-tools/hooks/live\nCOPY scripts/initramfs-live-script.sh /usr/share/initramfs-tools/scripts/live\nCOPY excludes /tmp/\nCOPY scripts/audit-rootfs.sh scripts/build-rootfs.sh scripts/build-iso.sh /usr/local/sbin/\n#  RUN build-iso.sh # creates /tmp/docker.iso\n","originalDockerfileUglifiedHash":"55661692ed3668e648cee3c26432f857","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f5552c52a6ea4d83b8587f482d424fb92c614560.dockerfile"}