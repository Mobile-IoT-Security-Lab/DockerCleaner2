{"seed":1193472707,"processedDockerfileHash":"c5b60ba470092570e133cb7ca4665d1b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM php:7.3-apache-stretch\nLABEL authors=\"Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>\"\n#   |--------------------------------------------------------------------------\n#   | Main PHP extensions\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs the main PHP extensions\n#   |\nCOPY extensions/ /usr/local/lib/thecodingmachine-php/extensions\nRUN ln -s 7.3 /usr/local/lib/thecodingmachine-php/extensions/current\n#   Install php extensions\nRUN apt-get update \\\n && apt-get install --no-install-recommends git nano sudo iproute2 openssh-client procps unzip -y\nRUN cd /usr/local/lib/thecodingmachine-php/extensions/current/zip \\\n && ./install.sh\n#   RUN echo 'extension=zip.so' > /usr/local/etc/php/conf.d/generated_conf.ini\n#   |--------------------------------------------------------------------------\n#   | User\n#   |--------------------------------------------------------------------------\n#   |\n#   | Define a default user with sudo rights.\n#   |\nRUN useradd -ms /bin/bash docker \\\n && adduser docker sudo\n#   Users in the sudoers group can sudo as root without password.\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   |--------------------------------------------------------------------------\n#   | Default php.ini file\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's download php.ini for prod and development\n#   |\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/local/etc/php/php.ini-production https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-production\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/local/etc/php/php.ini-development https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-development\nRUN chmod 644 /usr/local/etc/php/php.ini-*\nENV TEMPLATE_PHP_INI=\"development\"\n#   |--------------------------------------------------------------------------\n#   | Composer\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs Composer to easily manage your PHP dependencies.\n#   |\n#  ENV COMPOSER_ALLOW_SUPERUSER 1\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=real_composer \\\n && chmod +x /usr/local/bin/real_composer\n#   TODO: utils.php in /usr/local/bin... bof!\nCOPY utils/utils.php /usr/local/bin/utils.php\nCOPY utils/composer_proxy.sh /usr/local/bin/composer\nCOPY utils/generate_conf.php /usr/local/bin/generate_conf.php\n#   |--------------------------------------------------------------------------\n#   | prestissimo\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs Prestissimo to improve Composer download performance.\n#   |\nUSER docker\nRUN composer global require hirak/prestissimo \\\n && composer global require bamarni/symfony-console-autocomplete \\\n && rm -rf $HOME.composer\nUSER root\nENV APACHE_DOCUMENT_ROOT=\"/\"\nRUN sed -ri -e 's!/var/www/html!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n#   |--------------------------------------------------------------------------\n#   | Apache mod_rewrite\n#   |--------------------------------------------------------------------------\n#   |\n#   | Enables Apache mod_rewrite.\n#   |\nRUN a2enmod rewrite\nRUN chown docker:docker /var/www/html\n#   |--------------------------------------------------------------------------\n#   | PATH updating\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)\n#   |\nENV PATH=\"$PATH:./vendor/bin:~/.composer/vendor/bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./vendor/bin:~/.composer/vendor/bin#g' /etc/sudoers\nUSER docker\n#   |--------------------------------------------------------------------------\n#   | SSH client\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's set-up the SSH client (for connections to private git repositories)\n#   | We create an empty known_host file and we launch the ssh-agent\n#   |\nRUN mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && chmod 644 ~/.ssh/known_hosts \\\n && eval $( ssh-agent -s ;)\n#   |--------------------------------------------------------------------------\n#   | .bashrc updating\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's update the .bashrc to add nice aliases\n#   |\nRUN echo 'eval \"$(symfony-autocomplete)\"' > ~/.bash_profile\nRUN { echo \"alias ls='ls --color=auto'\" ;echo \"alias ll='ls --color=auto -alF'\" ;echo \"alias la='ls --color=auto -A'\" ;echo \"alias l='ls --color=auto -CF'\" ; } >> ~/.bashrc\nUSER root\n#   |--------------------------------------------------------------------------\n#   | NodeJS\n#   |--------------------------------------------------------------------------\n#   |\n#   | NodeJS path registration (if we install NodeJS, this is useful).\n#   |\nENV PATH=\"$PATH:./node_modules/.bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./node_modules/.bin#g' /etc/sudoers\n#   |--------------------------------------------------------------------------\n#   | Entrypoint\n#   |--------------------------------------------------------------------------\n#   |\n#   | Defines the entrypoint.\n#   |\nENV IMAGE_VARIANT=\"apache\"\n#   Add Tini (to be able to stop the container with ctrl-c.\n#   See: https://github.com/krallin/tini\nENV TINI_VERSION=\"v0.16.1\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /tini\nCOPY utils/generate_cron.php /usr/local/bin/generate_cron.php\nCOPY utils/startup_commands.php /usr/local/bin/startup_commands.php\nCOPY utils/enable_apache_mods.php /usr/local/bin/enable_apache_mods.php\nCOPY utils/apache-expose-envvars.sh /usr/local/bin/apache-expose-envvars.sh\nCOPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nCOPY utils/docker-entrypoint-as-root.sh /usr/local/bin/docker-entrypoint-as-root.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n#   Let's register a servername to remove the message \"apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\"\nRUN echo \"ServerName localhost\" > /etc/apache2/conf-available/servername.conf\nRUN a2enconf servername\nCMD [\"apache2-foreground\"]\n#   |--------------------------------------------------------------------------\n#   | Entrypoint\n#   |--------------------------------------------------------------------------\n#   |\n#   | Defines Apache user. Bu default, we switch this to \"docker\" user.\n#   | This way, no problem to write from Apache in the current working directory.\n#   | Important! This should be changed back to www-data in production.\n#   |\nENV APACHE_RUN_USER=\"docker\" \\\n    APACHE_RUN_GROUP=\"docker\"\nUSER docker\nCOPY utils/install_selected_extensions.php /usr/local/bin/install_selected_extensions.php\nONBUILD ARG PHP_EXTENSIONS\nONBUILD ENV PHP_EXTENSIONS=\"$PHP_EXTENSIONS\"\nONBUILD RUN sudo -E PHP_EXTENSIONS=\"$PHP_EXTENSIONS\" php /usr/local/bin/install_selected_extensions.php\n#   |--------------------------------------------------------------------------\n#   | Supercronic\n#   |--------------------------------------------------------------------------\n#   |\n#   | Supercronic is a drop-in replacement for cron (for containers).\n#   |\nONBUILD ARG INSTALL_CRON\nONBUILD RUN if [ -n \"$INSTALL_CRON\" ] ; then SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.5/supercronic-linux-amd64 \\\n && SUPERCRONIC=supercronic-linux-amd64 \\\n && SUPERCRONIC_SHA1SUM=9aeb41e00cc7b71d30d33c57a2333f2c2581a201 \\\n && curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM} ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && sudo mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && sudo ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic ; fi\n#   |--------------------------------------------------------------------------\n#   | NodeJS\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs NodeJS and npm. The later will allow you to easily manage\n#   | your frontend dependencies.\n#   | Also installs yarn. It provides some nice improvements over npm.\n#   |\nONBUILD ARG NODE_VERSION\nONBUILD RUN if [ -n \"$NODE_VERSION\" ] ; then sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends gnupg \\\n && curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash - \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends nodejs \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends yarn ; fi\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.3-apache-stretch\nLABEL authors=\"Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>\"\n#  |--------------------------------------------------------------------------\n#  | Main PHP extensions\n#  |--------------------------------------------------------------------------\n#  |\n#  | Installs the main PHP extensions\n#  |\nCOPY extensions/ /usr/local/lib/thecodingmachine-php/extensions\nRUN ln -s 7.3 /usr/local/lib/thecodingmachine-php/extensions/current\n#  Install php extensions\nRUN apt-get update \\\n && apt-get install --no-install-recommends git nano sudo iproute2 openssh-client procps unzip -y\nRUN cd /usr/local/lib/thecodingmachine-php/extensions/current/zip \\\n && ./install.sh\n#  RUN echo 'extension=zip.so' > /usr/local/etc/php/conf.d/generated_conf.ini\n#  |--------------------------------------------------------------------------\n#  | User\n#  |--------------------------------------------------------------------------\n#  |\n#  | Define a default user with sudo rights.\n#  |\nRUN useradd -ms /bin/bash docker \\\n && adduser docker sudo\n#  Users in the sudoers group can sudo as root without password.\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#  |--------------------------------------------------------------------------\n#  | Default php.ini file\n#  |--------------------------------------------------------------------------\n#  |\n#  | Let's download php.ini for prod and development\n#  |\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-production /usr/local/etc/php/php.ini-production\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-development /usr/local/etc/php/php.ini-development\nRUN chmod 644 /usr/local/etc/php/php.ini-*\nENV TEMPLATE_PHP_INI=\"development\"\n#  |--------------------------------------------------------------------------\n#  | Composer\n#  |--------------------------------------------------------------------------\n#  |\n#  | Installs Composer to easily manage your PHP dependencies.\n#  |\n# ENV COMPOSER_ALLOW_SUPERUSER 1\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=real_composer \\\n && chmod +x /usr/local/bin/real_composer\n#  TODO: utils.php in /usr/local/bin... bof!\nCOPY utils/utils.php /usr/local/bin/utils.php\nCOPY utils/composer_proxy.sh /usr/local/bin/composer\nCOPY utils/generate_conf.php /usr/local/bin/generate_conf.php\n#  |--------------------------------------------------------------------------\n#  | prestissimo\n#  |--------------------------------------------------------------------------\n#  |\n#  | Installs Prestissimo to improve Composer download performance.\n#  |\nUSER docker\nRUN composer global require hirak/prestissimo \\\n && composer global require bamarni/symfony-console-autocomplete \\\n && rm -rf $HOME.composer\nUSER root\nENV APACHE_DOCUMENT_ROOT=\"/\"\nRUN sed -ri -e 's!/var/www/html!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n#  |--------------------------------------------------------------------------\n#  | Apache mod_rewrite\n#  |--------------------------------------------------------------------------\n#  |\n#  | Enables Apache mod_rewrite.\n#  |\nRUN a2enmod rewrite\nRUN chown docker:docker /var/www/html\n#  |--------------------------------------------------------------------------\n#  | PATH updating\n#  |--------------------------------------------------------------------------\n#  |\n#  | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)\n#  |\nENV PATH=\"$PATH:./vendor/bin:~/.composer/vendor/bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./vendor/bin:~/.composer/vendor/bin#g' /etc/sudoers\nUSER docker\n#  |--------------------------------------------------------------------------\n#  | SSH client\n#  |--------------------------------------------------------------------------\n#  |\n#  | Let's set-up the SSH client (for connections to private git repositories)\n#  | We create an empty known_host file and we launch the ssh-agent\n#  |\nRUN mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && chmod 644 ~/.ssh/known_hosts \\\n && eval $( ssh-agent -s ;)\n#  |--------------------------------------------------------------------------\n#  | .bashrc updating\n#  |--------------------------------------------------------------------------\n#  |\n#  | Let's update the .bashrc to add nice aliases\n#  |\nRUN echo 'eval \"$(symfony-autocomplete)\"' > ~/.bash_profile\nRUN { echo \"alias ls='ls --color=auto'\" ;echo \"alias ll='ls --color=auto -alF'\" ;echo \"alias la='ls --color=auto -A'\" ;echo \"alias l='ls --color=auto -CF'\" ; } >> ~/.bashrc\nUSER root\n#  |--------------------------------------------------------------------------\n#  | NodeJS\n#  |--------------------------------------------------------------------------\n#  |\n#  | NodeJS path registration (if we install NodeJS, this is useful).\n#  |\nENV PATH=\"$PATH:./node_modules/.bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./node_modules/.bin#g' /etc/sudoers\n#  |--------------------------------------------------------------------------\n#  | Entrypoint\n#  |--------------------------------------------------------------------------\n#  |\n#  | Defines the entrypoint.\n#  |\nENV IMAGE_VARIANT=\"apache\"\n#  Add Tini (to be able to stop the container with ctrl-c.\n#  See: https://github.com/krallin/tini\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nCOPY utils/generate_cron.php /usr/local/bin/generate_cron.php\nCOPY utils/startup_commands.php /usr/local/bin/startup_commands.php\nCOPY utils/enable_apache_mods.php /usr/local/bin/enable_apache_mods.php\nCOPY utils/apache-expose-envvars.sh /usr/local/bin/apache-expose-envvars.sh\nCOPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nCOPY utils/docker-entrypoint-as-root.sh /usr/local/bin/docker-entrypoint-as-root.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n#  Let's register a servername to remove the message \"apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\"\nRUN echo \"ServerName localhost\" > /etc/apache2/conf-available/servername.conf\nRUN a2enconf servername\nCMD [\"apache2-foreground\"]\n#  |--------------------------------------------------------------------------\n#  | Entrypoint\n#  |--------------------------------------------------------------------------\n#  |\n#  | Defines Apache user. Bu default, we switch this to \"docker\" user.\n#  | This way, no problem to write from Apache in the current working directory.\n#  | Important! This should be changed back to www-data in production.\n#  |\nENV APACHE_RUN_USER=\"docker\" \\\n    APACHE_RUN_GROUP=\"docker\"\nUSER docker\nCOPY utils/install_selected_extensions.php /usr/local/bin/install_selected_extensions.php\nONBUILD ARG PHP_EXTENSIONS\nONBUILD ENV PHP_EXTENSIONS=\"$PHP_EXTENSIONS\"\nONBUILD RUN sudo -E PHP_EXTENSIONS=\"$PHP_EXTENSIONS\" php /usr/local/bin/install_selected_extensions.php\n#  |--------------------------------------------------------------------------\n#  | Supercronic\n#  |--------------------------------------------------------------------------\n#  |\n#  | Supercronic is a drop-in replacement for cron (for containers).\n#  |\nONBUILD ARG INSTALL_CRON\nONBUILD RUN if [ -n \"$INSTALL_CRON\" ] ; then SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.5/supercronic-linux-amd64 \\\n && SUPERCRONIC=supercronic-linux-amd64 \\\n && SUPERCRONIC_SHA1SUM=9aeb41e00cc7b71d30d33c57a2333f2c2581a201 \\\n && curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM} ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && sudo mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && sudo ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic ; fi\n#  |--------------------------------------------------------------------------\n#  | NodeJS\n#  |--------------------------------------------------------------------------\n#  |\n#  | Installs NodeJS and npm. The later will allow you to easily manage\n#  | your frontend dependencies.\n#  | Also installs yarn. It provides some nice improvements over npm.\n#  |\nONBUILD ARG NODE_VERSION\nONBUILD RUN if [ -n \"$NODE_VERSION\" ] ; then sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends gnupg \\\n && curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash - \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends nodejs \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends yarn ; fi\n","injectedSmells":[],"originalDockerfileHash":"75f2972fc08d0dc70336614d4722f2c3","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.3-apache-stretch\nLABEL authors=\"Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>\"\n#   |--------------------------------------------------------------------------\n#   | Main PHP extensions\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs the main PHP extensions\n#   |\nCOPY extensions/ /usr/local/lib/thecodingmachine-php/extensions\nRUN ln -s 7.3 /usr/local/lib/thecodingmachine-php/extensions/current\n#   Install php extensions\nRUN apt-get update \\\n && apt-get install --no-install-recommends git nano sudo iproute2 openssh-client procps unzip -y\nRUN cd /usr/local/lib/thecodingmachine-php/extensions/current/zip \\\n && ./install.sh\n#   RUN echo 'extension=zip.so' > /usr/local/etc/php/conf.d/generated_conf.ini\n#   |--------------------------------------------------------------------------\n#   | User\n#   |--------------------------------------------------------------------------\n#   |\n#   | Define a default user with sudo rights.\n#   |\nRUN useradd -ms /bin/bash docker \\\n && adduser docker sudo\n#   Users in the sudoers group can sudo as root without password.\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   |--------------------------------------------------------------------------\n#   | Default php.ini file\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's download php.ini for prod and development\n#   |\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-production /usr/local/etc/php/php.ini-production\nADD https://raw.githubusercontent.com/php/php-src/php-${PHP_VERSION}/php.ini-development /usr/local/etc/php/php.ini-development\nRUN chmod 644 /usr/local/etc/php/php.ini-*\nENV TEMPLATE_PHP_INI=\"development\"\n#   |--------------------------------------------------------------------------\n#   | Composer\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs Composer to easily manage your PHP dependencies.\n#   |\n#  ENV COMPOSER_ALLOW_SUPERUSER 1\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=real_composer \\\n && chmod +x /usr/local/bin/real_composer\n#   TODO: utils.php in /usr/local/bin... bof!\nCOPY utils/utils.php /usr/local/bin/utils.php\nCOPY utils/composer_proxy.sh /usr/local/bin/composer\nCOPY utils/generate_conf.php /usr/local/bin/generate_conf.php\n#   |--------------------------------------------------------------------------\n#   | prestissimo\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs Prestissimo to improve Composer download performance.\n#   |\nUSER docker\nRUN composer global require hirak/prestissimo \\\n && composer global require bamarni/symfony-console-autocomplete \\\n && rm -rf $HOME.composer\nUSER root\nENV APACHE_DOCUMENT_ROOT=\"/\"\nRUN sed -ri -e 's!/var/www/html!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf\nRUN sed -ri -e 's!/var/www/!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf\n#   |--------------------------------------------------------------------------\n#   | Apache mod_rewrite\n#   |--------------------------------------------------------------------------\n#   |\n#   | Enables Apache mod_rewrite.\n#   |\nRUN a2enmod rewrite\nRUN chown docker:docker /var/www/html\n#   |--------------------------------------------------------------------------\n#   | PATH updating\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)\n#   |\nENV PATH=\"$PATH:./vendor/bin:~/.composer/vendor/bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./vendor/bin:~/.composer/vendor/bin#g' /etc/sudoers\nUSER docker\n#   |--------------------------------------------------------------------------\n#   | SSH client\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's set-up the SSH client (for connections to private git repositories)\n#   | We create an empty known_host file and we launch the ssh-agent\n#   |\nRUN mkdir ~/.ssh \\\n && touch ~/.ssh/known_hosts \\\n && chmod 644 ~/.ssh/known_hosts \\\n && eval $( ssh-agent -s ;)\n#   |--------------------------------------------------------------------------\n#   | .bashrc updating\n#   |--------------------------------------------------------------------------\n#   |\n#   | Let's update the .bashrc to add nice aliases\n#   |\nRUN echo 'eval \"$(symfony-autocomplete)\"' > ~/.bash_profile\nRUN { echo \"alias ls='ls --color=auto'\" ;echo \"alias ll='ls --color=auto -alF'\" ;echo \"alias la='ls --color=auto -A'\" ;echo \"alias l='ls --color=auto -CF'\" ; } >> ~/.bashrc\nUSER root\n#   |--------------------------------------------------------------------------\n#   | NodeJS\n#   |--------------------------------------------------------------------------\n#   |\n#   | NodeJS path registration (if we install NodeJS, this is useful).\n#   |\nENV PATH=\"$PATH:./node_modules/.bin\"\nRUN sed -i 's#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin#/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:./node_modules/.bin#g' /etc/sudoers\n#   |--------------------------------------------------------------------------\n#   | Entrypoint\n#   |--------------------------------------------------------------------------\n#   |\n#   | Defines the entrypoint.\n#   |\nENV IMAGE_VARIANT=\"apache\"\n#   Add Tini (to be able to stop the container with ctrl-c.\n#   See: https://github.com/krallin/tini\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nCOPY utils/generate_cron.php /usr/local/bin/generate_cron.php\nCOPY utils/startup_commands.php /usr/local/bin/startup_commands.php\nCOPY utils/enable_apache_mods.php /usr/local/bin/enable_apache_mods.php\nCOPY utils/apache-expose-envvars.sh /usr/local/bin/apache-expose-envvars.sh\nCOPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nCOPY utils/docker-entrypoint-as-root.sh /usr/local/bin/docker-entrypoint-as-root.sh\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n#   Let's register a servername to remove the message \"apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\"\nRUN echo \"ServerName localhost\" > /etc/apache2/conf-available/servername.conf\nRUN a2enconf servername\nCMD [\"apache2-foreground\"]\n#   |--------------------------------------------------------------------------\n#   | Entrypoint\n#   |--------------------------------------------------------------------------\n#   |\n#   | Defines Apache user. Bu default, we switch this to \"docker\" user.\n#   | This way, no problem to write from Apache in the current working directory.\n#   | Important! This should be changed back to www-data in production.\n#   |\nENV APACHE_RUN_USER=\"docker\" \\\n    APACHE_RUN_GROUP=\"docker\"\nUSER docker\nCOPY utils/install_selected_extensions.php /usr/local/bin/install_selected_extensions.php\nONBUILD ARG PHP_EXTENSIONS\nONBUILD ENV PHP_EXTENSIONS=\"$PHP_EXTENSIONS\"\nONBUILD RUN sudo -E PHP_EXTENSIONS=\"$PHP_EXTENSIONS\" php /usr/local/bin/install_selected_extensions.php\n#   |--------------------------------------------------------------------------\n#   | Supercronic\n#   |--------------------------------------------------------------------------\n#   |\n#   | Supercronic is a drop-in replacement for cron (for containers).\n#   |\nONBUILD ARG INSTALL_CRON\nONBUILD RUN if [ -n \"$INSTALL_CRON\" ] ; then SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.5/supercronic-linux-amd64 \\\n && SUPERCRONIC=supercronic-linux-amd64 \\\n && SUPERCRONIC_SHA1SUM=9aeb41e00cc7b71d30d33c57a2333f2c2581a201 \\\n && curl -fsSLO \"$SUPERCRONIC_URL\" \\\n && echo \"${SUPERCRONIC_SHA1SUM} ${SUPERCRONIC}\" | sha1sum -c - \\\n && chmod +x \"$SUPERCRONIC\" \\\n && sudo mv \"$SUPERCRONIC\" \"/usr/local/bin/${SUPERCRONIC}\" \\\n && sudo ln -s \"/usr/local/bin/${SUPERCRONIC}\" /usr/local/bin/supercronic ; fi\n#   |--------------------------------------------------------------------------\n#   | NodeJS\n#   |--------------------------------------------------------------------------\n#   |\n#   | Installs NodeJS and npm. The later will allow you to easily manage\n#   | your frontend dependencies.\n#   | Also installs yarn. It provides some nice improvements over npm.\n#   |\nONBUILD ARG NODE_VERSION\nONBUILD RUN if [ -n \"$NODE_VERSION\" ] ; then sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends gnupg \\\n && curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo bash - \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends nodejs \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \\\n && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list \\\n && sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends yarn ; fi\n","originalDockerfileUglifiedHash":"4912951491f6071165db71172a5248ba","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/50e91d6530ba7112e57fd702924e6fc0da1ab97a.dockerfile"}