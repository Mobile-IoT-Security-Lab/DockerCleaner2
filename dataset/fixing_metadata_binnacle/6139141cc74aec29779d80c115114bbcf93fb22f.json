{"seed":3964640957,"processedDockerfileHash":"f8a9132875f35fc9ef58ac6da0f454c6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM quay.io/pypa/manylinux1_x86_64\nENV OPENSSL_VERSION=\"1.0.2l\"\nENV LIBFFI_VERSION=\"3.2.1\"\nENV LIBXML_VERSION=\"2.9.2\"\nENV LIBXSLT_VERSION=\"1.1.29\"\n#   Required environment variables to be set at runtime:\n#     - INCLUDE: space separated list of files/folders relative to the working dir\n#       to include in the build lambda_function.zip\n#     - EXTRA_PACKAGES: space separated list ofextra rpm packages to install from\n#       official rpm repos\n#     - VERSION_HASH: build version (sha1, etc.) of the code\n#     - BUILD_TIME: timestamp of the in-progress build\n#   Mounts to include:\n#     - /dependencies/requirements.txt  WAT\n#     - /src: root of the src/repo to pull in for the build\n#     - /dist: contains the output lambda_function.zip\n#   Make sure /dependencies/requirements.txt is a file!\n#   See https://docs.docker.com/storage/bind-mounts/#differences-between--v-and---mount-behavior.\nRUN mkdir /dependencies\nRUN touch /dependencies/requirements.txt\nENV CFLAGS=\"-I/openssl/include -I/libffi/lib/libffi-${LIBFFI_VERSION}/include\"\nENV LDFLAGS=\"-L/openssl/lib -L/libffi/lib64\"\nENV LD_LIBRARY_PATH=\"/libffi/lib64\"\n#   Directory for built wheels\nRUN mkdir /build_cache\n#   Directory for installed wheels, to be included in final zip\nRUN mkdir /install\n#   Some commonly used dependencies (cryptography, lxml, etc.) require newer\n#   versions of certain libraries that aren't available for CentOS 5, which is\n#   the base distro of the Docker image used for building Python packages. Let's\n#   install these from source, when requested.\nRUN yum install -y libtool texinfo zip\n#   Symlink all the existing autoconf macros into the installed tool's directory\nRUN for MACRO in `ls /usr/share/aclocal `; do ln -s /usr/share/aclocal/${MACRO} /usr/local/share/aclocal/${MACRO} ; done\n#   Build source libxml2 and libxslt RPMs\nRUN yum install -y rpm-build python-devel libgcrypt-devel xz-devel zlib-devel \\\n && curl -O http://xmlsoft.org/sources/libxml2-${LIBXML_VERSION}-1.fc19.src.rpm \\\n && rpm -ivh libxml2-${LIBXML_VERSION}-1.fc19.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxml2.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-devel-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-python-${LIBXML_VERSION}-1.x86_64.rpm \\\n && curl -O http://xmlsoft.org/sources/libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm \\\n && rpm -ivh libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxslt.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-${LIBXSLT_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-devel-${LIBXSLT_VERSION}-1.x86_64.rpm\n#   Build OpenSSL from source\nRUN curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar xf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config no-shared no-ssl2 -fPIC --prefix=/openssl \\\n && make \\\n && make install \\\n && cd ..\n#   Build libffi from source\nRUN curl -L -o libffi-${LIBFFI_VERSION}.tar.gz https://github.com/libffi/libffi/archive/v${LIBFFI_VERSION}.tar.gz \\\n && tar xf libffi-${LIBFFI_VERSION}.tar.gz \\\n && cd libffi-${LIBFFI_VERSION} \\\n && ./autogen.sh \\\n && ./configure --prefix=/libffi \\\n && make \\\n && make install \\\n && cd ..\n#   - Install extra build dependencies, if specified\n#   - Make sure we're using the latest version of setuptools\n#   - Make sure we're using the latest version of auditwheel\n#   - We only want to repair platform wheels that were compiled - not universal\n#     wheels.\n#   - Add built wheels to lambda_function.zip\n#   - Add project-specific source/files to lambda_function.zip\n#   - Generate and add config.json to lambda_function.zip\n#   Before auditwheel:\n#    ${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt && \\\n#   After auditwheel:\n#      find /build_cache -type f \\\n#          -name \"*.whl\" \\\n#          -not -name \"*none-any.whl\" \\\n#          -exec auditwheel repair {} -w /build_cache/ \\; \\\n#          -exec rm {} \\; && \\\nCMD PYBIN=\"/opt/python/${PY_VERSION}/bin\" \\\n && set -ex \\\n && if [[ -n \"$EXTRA_PACKAGES\" ]] ; then yum install -y ${EXTRA_PACKAGES} ; else echo \"no extra pkgs to install\" ; fi \\\n && ${PYBIN}/pip install -U setuptools \\\n && if [[ -n \"$REBUILD_DEPENDENCIES\" ]] ; then echo \"rebuilding dependencies\" ;${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt \\\n && sha1sum /dependencies/requirements.txt | cut -d \" \" -f 1 > /build_cache/cache_version.sha1; else echo \"using cached dependencies; no rebuild\" ; fi \\\n && ${PYBIN}/pip install -U auditwheel \\\n && ${PYBIN}/pip install -t /install --no-compile --no-index --find-links /build_cache -r /dependencies/requirements.txt \\\n && cd /install \\\n && rm -f /dist/lambda_function.zip \\\n && zip -r /dist/lambda_function.zip ./* \\\n && cd /src \\\n && zip -r /dist/lambda_function.zip ${INCLUDE} \\\n && cd /tmp \\\n && echo \"{\\\"VERSION_HASH\\\": \\\"${VERSION_HASH}\\\", \\\"BUILD_TIME\\\": \\\"${BUILD_TIME}\\\"}\" > config.json \\\n && zip -r /dist/lambda_function.zip config.json\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM quay.io/pypa/manylinux1_x86_64\nENV OPENSSL_VERSION=\"1.0.2l\"\nENV LIBFFI_VERSION=\"3.2.1\"\nENV LIBXML_VERSION=\"2.9.2\"\nENV LIBXSLT_VERSION=\"1.1.29\"\n#  Required environment variables to be set at runtime:\n#    - INCLUDE: space separated list of files/folders relative to the working dir\n#      to include in the build lambda_function.zip\n#    - EXTRA_PACKAGES: space separated list ofextra rpm packages to install from\n#      official rpm repos\n#    - VERSION_HASH: build version (sha1, etc.) of the code\n#    - BUILD_TIME: timestamp of the in-progress build\n#  Mounts to include:\n#    - /dependencies/requirements.txt  WAT\n#    - /src: root of the src/repo to pull in for the build\n#    - /dist: contains the output lambda_function.zip\n#  Make sure /dependencies/requirements.txt is a file!\n#  See https://docs.docker.com/storage/bind-mounts/#differences-between--v-and---mount-behavior.\nRUN mkdir /dependencies\nRUN touch /dependencies/requirements.txt\nENV CFLAGS=\"-I/openssl/include -I/libffi/lib/libffi-${LIBFFI_VERSION}/include\"\nENV LDFLAGS=\"-L/openssl/lib -L/libffi/lib64\"\nENV LD_LIBRARY_PATH=\"/libffi/lib64\"\n#  Directory for built wheels\nRUN mkdir /build_cache\n#  Directory for installed wheels, to be included in final zip\nRUN mkdir /install\n#  Some commonly used dependencies (cryptography, lxml, etc.) require newer\n#  versions of certain libraries that aren't available for CentOS 5, which is\n#  the base distro of the Docker image used for building Python packages. Let's\n#  install these from source, when requested.\nRUN yum install -y libtool texinfo zip\n#  Symlink all the existing autoconf macros into the installed tool's directory\nRUN for MACRO in `ls /usr/share/aclocal `; do ln -s /usr/share/aclocal/${MACRO} /usr/local/share/aclocal/${MACRO} ; done\n#  Build source libxml2 and libxslt RPMs\nRUN yum install -y rpm-build python-devel libgcrypt-devel xz-devel zlib-devel \\\n && curl -O http://xmlsoft.org/sources/libxml2-${LIBXML_VERSION}-1.fc19.src.rpm \\\n && rpm -ivh libxml2-${LIBXML_VERSION}-1.fc19.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxml2.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-devel-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-python-${LIBXML_VERSION}-1.x86_64.rpm \\\n && curl -O http://xmlsoft.org/sources/libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm \\\n && rpm -ivh libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxslt.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-${LIBXSLT_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-devel-${LIBXSLT_VERSION}-1.x86_64.rpm\n#  Build OpenSSL from source\nRUN curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar xf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config no-shared no-ssl2 -fPIC --prefix=/openssl \\\n && make \\\n && make install \\\n && cd ..\n#  Build libffi from source\nRUN curl -L -o libffi-${LIBFFI_VERSION}.tar.gz https://github.com/libffi/libffi/archive/v${LIBFFI_VERSION}.tar.gz \\\n && tar xf libffi-${LIBFFI_VERSION}.tar.gz \\\n && cd libffi-${LIBFFI_VERSION} \\\n && ./autogen.sh \\\n && ./configure --prefix=/libffi \\\n && make \\\n && make install \\\n && cd ..\n#  - Install extra build dependencies, if specified\n#  - Make sure we're using the latest version of setuptools\n#  - Make sure we're using the latest version of auditwheel\n#  - We only want to repair platform wheels that were compiled - not universal\n#    wheels.\n#  - Add built wheels to lambda_function.zip\n#  - Add project-specific source/files to lambda_function.zip\n#  - Generate and add config.json to lambda_function.zip\n#  Before auditwheel:\n#   ${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt && \\\n#  After auditwheel:\n#     find /build_cache -type f \\\n#         -name \"*.whl\" \\\n#         -not -name \"*none-any.whl\" \\\n#         -exec auditwheel repair {} -w /build_cache/ \\; \\\n#         -exec rm {} \\; && \\\nCMD PYBIN=\"/opt/python/${PY_VERSION}/bin\" \\\n && set -ex \\\n && if [[ -n \"$EXTRA_PACKAGES\" ]] ; then yum install -y ${EXTRA_PACKAGES} ; else echo \"no extra pkgs to install\" ; fi \\\n && ${PYBIN}/pip install -U setuptools \\\n && if [[ -n \"$REBUILD_DEPENDENCIES\" ]] ; then echo \"rebuilding dependencies\" ;${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt \\\n && sha1sum /dependencies/requirements.txt | cut -d \" \" -f 1 > /build_cache/cache_version.sha1; else echo \"using cached dependencies; no rebuild\" ; fi \\\n && ${PYBIN}/pip install -U auditwheel \\\n && ${PYBIN}/pip install -t /install --no-compile --no-index --find-links /build_cache -r /dependencies/requirements.txt \\\n && cd /install \\\n && rm -f /dist/lambda_function.zip \\\n && zip -r /dist/lambda_function.zip ./* \\\n && cd /src \\\n && zip -r /dist/lambda_function.zip ${INCLUDE} \\\n && cd /tmp \\\n && echo \"{\\\"VERSION_HASH\\\": \\\"${VERSION_HASH}\\\", \\\"BUILD_TIME\\\": \\\"${BUILD_TIME}\\\"}\" > config.json \\\n && zip -r /dist/lambda_function.zip config.json\n","injectedSmells":[],"originalDockerfileHash":"4e9074e2c2e8a6e98364ecd9ec4f9ebd","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM quay.io/pypa/manylinux1_x86_64\nENV OPENSSL_VERSION=\"1.0.2l\"\nENV LIBFFI_VERSION=\"3.2.1\"\nENV LIBXML_VERSION=\"2.9.2\"\nENV LIBXSLT_VERSION=\"1.1.29\"\n#   Required environment variables to be set at runtime:\n#     - INCLUDE: space separated list of files/folders relative to the working dir\n#       to include in the build lambda_function.zip\n#     - EXTRA_PACKAGES: space separated list ofextra rpm packages to install from\n#       official rpm repos\n#     - VERSION_HASH: build version (sha1, etc.) of the code\n#     - BUILD_TIME: timestamp of the in-progress build\n#   Mounts to include:\n#     - /dependencies/requirements.txt  WAT\n#     - /src: root of the src/repo to pull in for the build\n#     - /dist: contains the output lambda_function.zip\n#   Make sure /dependencies/requirements.txt is a file!\n#   See https://docs.docker.com/storage/bind-mounts/#differences-between--v-and---mount-behavior.\nRUN mkdir /dependencies\nRUN touch /dependencies/requirements.txt\nENV CFLAGS=\"-I/openssl/include -I/libffi/lib/libffi-${LIBFFI_VERSION}/include\"\nENV LDFLAGS=\"-L/openssl/lib -L/libffi/lib64\"\nENV LD_LIBRARY_PATH=\"/libffi/lib64\"\n#   Directory for built wheels\nRUN mkdir /build_cache\n#   Directory for installed wheels, to be included in final zip\nRUN mkdir /install\n#   Some commonly used dependencies (cryptography, lxml, etc.) require newer\n#   versions of certain libraries that aren't available for CentOS 5, which is\n#   the base distro of the Docker image used for building Python packages. Let's\n#   install these from source, when requested.\nRUN yum install -y libtool texinfo zip\n#   Symlink all the existing autoconf macros into the installed tool's directory\nRUN for MACRO in `ls /usr/share/aclocal `; do ln -s /usr/share/aclocal/${MACRO} /usr/local/share/aclocal/${MACRO} ; done\n#   Build source libxml2 and libxslt RPMs\nRUN yum install -y rpm-build python-devel libgcrypt-devel xz-devel zlib-devel \\\n && curl -O http://xmlsoft.org/sources/libxml2-${LIBXML_VERSION}-1.fc19.src.rpm \\\n && rpm -ivh libxml2-${LIBXML_VERSION}-1.fc19.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxml2.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-devel-${LIBXML_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxml2-python-${LIBXML_VERSION}-1.x86_64.rpm \\\n && curl -O http://xmlsoft.org/sources/libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm \\\n && rpm -ivh libxslt-${LIBXSLT_VERSION}-1.fc23.src.rpm --nomd5 \\\n && rpmbuild -ba /usr/src/redhat/SPECS/libxslt.spec \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-${LIBXSLT_VERSION}-1.x86_64.rpm \\\n && rpm -ivh --force /usr/src/redhat/RPMS/x86_64/libxslt-devel-${LIBXSLT_VERSION}-1.x86_64.rpm\n#   Build OpenSSL from source\nRUN curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && tar xf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./config no-shared no-ssl2 -fPIC --prefix=/openssl \\\n && make \\\n && make install \\\n && cd ..\n#   Build libffi from source\nRUN curl -L -o libffi-${LIBFFI_VERSION}.tar.gz https://github.com/libffi/libffi/archive/v${LIBFFI_VERSION}.tar.gz \\\n && tar xf libffi-${LIBFFI_VERSION}.tar.gz \\\n && cd libffi-${LIBFFI_VERSION} \\\n && ./autogen.sh \\\n && ./configure --prefix=/libffi \\\n && make \\\n && make install \\\n && cd ..\n#   - Install extra build dependencies, if specified\n#   - Make sure we're using the latest version of setuptools\n#   - Make sure we're using the latest version of auditwheel\n#   - We only want to repair platform wheels that were compiled - not universal\n#     wheels.\n#   - Add built wheels to lambda_function.zip\n#   - Add project-specific source/files to lambda_function.zip\n#   - Generate and add config.json to lambda_function.zip\n#   Before auditwheel:\n#    ${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt && \\\n#   After auditwheel:\n#      find /build_cache -type f \\\n#          -name \"*.whl\" \\\n#          -not -name \"*none-any.whl\" \\\n#          -exec auditwheel repair {} -w /build_cache/ \\; \\\n#          -exec rm {} \\; && \\\nCMD PYBIN=\"/opt/python/${PY_VERSION}/bin\" \\\n && set -ex \\\n && if [[ -n \"$EXTRA_PACKAGES\" ]] ; then yum install -y ${EXTRA_PACKAGES} ; else echo \"no extra pkgs to install\" ; fi \\\n && ${PYBIN}/pip install -U setuptools \\\n && if [[ -n \"$REBUILD_DEPENDENCIES\" ]] ; then echo \"rebuilding dependencies\" ;${PYBIN}/pip wheel --no-binary :all: -w /build_cache -r /dependencies/requirements.txt \\\n && sha1sum /dependencies/requirements.txt | cut -d \" \" -f 1 > /build_cache/cache_version.sha1; else echo \"using cached dependencies; no rebuild\" ; fi \\\n && ${PYBIN}/pip install -U auditwheel \\\n && ${PYBIN}/pip install -t /install --no-compile --no-index --find-links /build_cache -r /dependencies/requirements.txt \\\n && cd /install \\\n && rm -f /dist/lambda_function.zip \\\n && zip -r /dist/lambda_function.zip ./* \\\n && cd /src \\\n && zip -r /dist/lambda_function.zip ${INCLUDE} \\\n && cd /tmp \\\n && echo \"{\\\"VERSION_HASH\\\": \\\"${VERSION_HASH}\\\", \\\"BUILD_TIME\\\": \\\"${BUILD_TIME}\\\"}\" > config.json \\\n && zip -r /dist/lambda_function.zip config.json\n","originalDockerfileUglifiedHash":"07848e0d9c074fa6173b67ad4f0a4611","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6139141cc74aec29779d80c115114bbcf93fb22f.dockerfile"}