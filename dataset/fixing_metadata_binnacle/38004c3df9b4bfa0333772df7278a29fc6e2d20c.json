{"seed":168224625,"processedDockerfileHash":"16e9d2a671f6b0da1b277c480d63daa0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.3-fpm-alpine3.8 AS stage0\nLABEL maintainer=\"Dean Tedesco <dean@ethicaljobs.com.au>\"\n#\n#  --------------------------------------------------------------------------\n#   Install nginx\n#  --------------------------------------------------------------------------\n#\nENV NGINX_VERSION=\"1.13.8\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add gcc=6.4.0-r9 libc-dev=0.7.1-r0 make=4.2.1-r2 openssl-dev=1.0.2u-r0 pcre-dev=8.42-r0 zlib-dev=1.2.11-r1 linux-headers=4.4.6-r2 curl=7.61.1-r3 gnupg=2.2.19-r0 libxslt-dev=1.1.33-r3 gd-dev=2.2.5-r4 geoip-dev=1.6.12-r1 --no-cache --virtual .build-deps \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add gettext=0.19.8.1-r2 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2020a-r0 --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#\n#  --------------------------------------------------------------------------\n#   Install dependencies and extensions\n#  --------------------------------------------------------------------------\n#\nRUN apk add freetype=2.9.1-r1 libpng=1.6.37-r0 libjpeg-turbo=1.5.3-r6 freetype-dev=2.9.1-r1 libpng-dev=1.6.37-r0 libjpeg-turbo-dev=1.5.3-r6 wget=1.20.3-r0 git=2.18.4-r0 supervisor=3.3.4-r1 bash=4.4.19-r1 --no-cache \\\n && docker-php-ext-install mysqli pdo_mysql opcache pcntl \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && NPROC=$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && docker-php-ext-install -j${NPROC} gd \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && composer global require \"hirak/prestissimo\"\nRUN mkdir -p /var/log/cron \\\n && mkdir -p /var/www \\\n && mkdir -p /var/entrypoints \\\n && touch /var/log/cron/cron.log \\\n && mkdir -m 0644 -p /etc/cron.d \\\n && chmod -R 0644 /etc/cron.d\n#\n#  --------------------------------------------------------------------------\n#   Application\n#  --------------------------------------------------------------------------\n#\nCOPY ./config/bin/schedule /etc/crontabs/root\nCOPY ./config/supervisord/* /etc/supervisord/\nCOPY ./config/entrypoints/* /var/entrypoints/\nENV TZ=\"Australia/Melbourne\"\nENV PATH=\"$PATH:/var/www/vendor/bin\"\nWORKDIR /var/www\nRUN touch /var/log/cron/cron.log\nENV SCHEDULE_LOG_PATH=\"/var/log/cron/cron.log\"\n#\n#  --------------------------------------------------------------------------\n#   Init\n#  --------------------------------------------------------------------------\n#\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/var/entrypoints/laravel\"]\nFROM scratch AS release\nCOPY --from=stage0 / /\nCMD /usr/bin/supervisord -n -c /etc/supervisord/web.conf\nFROM php:7.3-fpm-alpine3.8 AS xdebug\nCOPY --from=release / /\n#   Add prerequisites for xdebug\nRUN apk add $PHPIZE_DEPS --no-cache\n#   Install xdebug\nRUN pecl install xdebug-2.7.0\n#   Configure xdebug for remote debugging with PhpStorm\nRUN echo \"zend_extension=$( find /usr/local/lib/php/extensions/ -name xdebug.so ;)\" > /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_host=docker.for.mac.localhost\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_log=/var/www/storage/logs/xdebug.log\" >> /usr/local/etc/php/conf.d/xdebug.ini\nFROM release\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.3-fpm-alpine3.8 AS stage0\nLABEL maintainer=\"Dean Tedesco <dean@ethicaljobs.com.au>\"\n#\n# --------------------------------------------------------------------------\n#  Install nginx\n# --------------------------------------------------------------------------\n#\nENV NGINX_VERSION=\"1.13.8\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#\n# --------------------------------------------------------------------------\n#  Install dependencies and extensions\n# --------------------------------------------------------------------------\n#\nRUN apk --no-cache add freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev wget git supervisor bash \\\n && docker-php-ext-install mysqli pdo_mysql opcache pcntl \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && NPROC=$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && docker-php-ext-install -j${NPROC} gd \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && composer global require \"hirak/prestissimo\"\nRUN mkdir -p /var/log/cron \\\n && mkdir -p /var/www \\\n && mkdir -p /var/entrypoints \\\n && touch /var/log/cron/cron.log \\\n && mkdir -m 0644 -p /etc/cron.d \\\n && chmod -R 0644 /etc/cron.d\n#\n# --------------------------------------------------------------------------\n#  Application\n# --------------------------------------------------------------------------\n#\nADD ./config/bin/schedule /etc/crontabs/root\nADD ./config/supervisord/* /etc/supervisord/\nADD ./config/entrypoints/* /var/entrypoints/\nENV TZ=\"Australia/Melbourne\"\nENV PATH=\"$PATH:/var/www/vendor/bin\"\nWORKDIR /var/www\nRUN touch /var/log/cron/cron.log\nENV SCHEDULE_LOG_PATH=\"/var/log/cron/cron.log\"\n#\n# --------------------------------------------------------------------------\n#  Init\n# --------------------------------------------------------------------------\n#\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/var/entrypoints/laravel\"]\nFROM scratch AS release\nCOPY --from=stage0 / /\nCMD /usr/bin/supervisord -n -c /etc/supervisord/web.conf\nFROM php:7.3-fpm-alpine3.8 AS xdebug\nCOPY --from=release / /\n#  Add prerequisites for xdebug\nRUN apk add --no-cache $PHPIZE_DEPS\n#  Install xdebug\nRUN pecl install xdebug-2.7.0\n#  Configure xdebug for remote debugging with PhpStorm\nRUN echo \"zend_extension=$( find /usr/local/lib/php/extensions/ -name xdebug.so ;)\" > /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_host=docker.for.mac.localhost\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_log=/var/www/storage/logs/xdebug.log\" >> /usr/local/etc/php/conf.d/xdebug.ini\nFROM release\n","injectedSmells":[],"originalDockerfileHash":"295e566b9d93c1d96ef820200a06e771","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.3-fpm-alpine3.8 AS stage0\nLABEL maintainer=\"Dean Tedesco <dean@ethicaljobs.com.au>\"\n#\n#  --------------------------------------------------------------------------\n#   Install nginx\n#  --------------------------------------------------------------------------\n#\nENV NGINX_VERSION=\"1.13.8\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#\n#  --------------------------------------------------------------------------\n#   Install dependencies and extensions\n#  --------------------------------------------------------------------------\n#\nRUN apk --no-cache add freetype libpng libjpeg-turbo freetype-dev libpng-dev libjpeg-turbo-dev wget git supervisor bash \\\n && docker-php-ext-install mysqli pdo_mysql opcache pcntl \\\n && docker-php-ext-configure gd --with-gd --with-freetype-dir=/usr/include/ --with-png-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && NPROC=$( grep -c ^processor /proc/cpuinfo 2> /dev/null || 1 ;) \\\n && docker-php-ext-install -j${NPROC} gd \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && composer global require \"hirak/prestissimo\"\nRUN mkdir -p /var/log/cron \\\n && mkdir -p /var/www \\\n && mkdir -p /var/entrypoints \\\n && touch /var/log/cron/cron.log \\\n && mkdir -m 0644 -p /etc/cron.d \\\n && chmod -R 0644 /etc/cron.d\n#\n#  --------------------------------------------------------------------------\n#   Application\n#  --------------------------------------------------------------------------\n#\nADD ./config/bin/schedule /etc/crontabs/root\nADD ./config/supervisord/* /etc/supervisord/\nADD ./config/entrypoints/* /var/entrypoints/\nENV TZ=\"Australia/Melbourne\"\nENV PATH=\"$PATH:/var/www/vendor/bin\"\nWORKDIR /var/www\nRUN touch /var/log/cron/cron.log\nENV SCHEDULE_LOG_PATH=\"/var/log/cron/cron.log\"\n#\n#  --------------------------------------------------------------------------\n#   Init\n#  --------------------------------------------------------------------------\n#\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/var/entrypoints/laravel\"]\nFROM scratch AS release\nCOPY --from=stage0 / /\nCMD /usr/bin/supervisord -n -c /etc/supervisord/web.conf\nFROM php:7.3-fpm-alpine3.8 AS xdebug\nCOPY --from=release / /\n#   Add prerequisites for xdebug\nRUN apk add --no-cache $PHPIZE_DEPS\n#   Install xdebug\nRUN pecl install xdebug-2.7.0\n#   Configure xdebug for remote debugging with PhpStorm\nRUN echo \"zend_extension=$( find /usr/local/lib/php/extensions/ -name xdebug.so ;)\" > /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_host=docker.for.mac.localhost\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo \"xdebug.remote_log=/var/www/storage/logs/xdebug.log\" >> /usr/local/etc/php/conf.d/xdebug.ini\nFROM release\n","originalDockerfileUglifiedHash":"927f2bca71f6380c9afd8c2c13607cbe","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/38004c3df9b4bfa0333772df7278a29fc6e2d20c.dockerfile"}