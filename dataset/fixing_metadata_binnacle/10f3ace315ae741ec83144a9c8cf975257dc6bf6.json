{"seed":3354750837,"processedDockerfileHash":"4f5f0a268bd890452ff43c78ae40065e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   workspace 从 laradock 项目中精简\n#  --------------------------------------------------------------------------\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   添加新用户 webdock\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN : \\\n && pecl channel-update pecl.php.net \\\n && groupadd -g ${PGID} webdock \\\n && useradd -u ${PUID} -g webdock -m webdock -G docker_env \\\n && usermod -p \"*\" webdock\n#\n#  --------------------------------------------------------------------------\n#   以下都是可选择安装扩展\n#  --------------------------------------------------------------------------\n#\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   设置一些别名，这些别名在 aliases.sh 中定义\n#  ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/webdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/webdock/aliases.sh \\\n && chown webdock:webdock /home/webdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/webdock/.composer/composer.json\n#   Make sure that ~/.composer belongs to webdock\nRUN chown -R webdock:webdock /home/webdock/.composer\nUSER webdock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Crontab\n#  ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ##########################################################################\n#   Drush:\n#  ##########################################################################\n#   Deprecated install of Drush 8 and earlier versions.\n#   Drush 9 and up require Drush to be listed as a composer dependency of your site.\nUSER root\nARG INSTALL_DRUSH=false\nARG DRUSH_VERSION\nENV DRUSH_VERSION=\"${DRUSH_VERSION}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then (apt-get update ;apt-get install --no-install-recommends mysql-client -y ) \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/${DRUSH_VERSION}/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then (apt-get update ;apt-get install --no-install-recommends libxml2-dev php${PHP_VERSION}-soap -y ) ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then (apt-get update ;apt-get install --no-install-recommends libldap2-dev -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends php${PHP_VERSION}-ldap -y ) ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then (apt-get update ;apt-get install --no-install-recommends php${PHP_VERSION}-imap -y ) ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then (apt-get update ;apt-get install --no-install-recommends php${PHP_VERSION}-xdebug -y ) \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nUSER root\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then (apt-get update ;apt-get install --no-install-recommends php${PHP_VERSION}-phpdbg -y --force-yes ) ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends blackfire-agent ) ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then (apt-get update ;apt-get install --no-install-recommends librabbitmq-dev -y ) \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n#  ##########################################################################\n#   Libpng16 EXTENSION\n#  ##########################################################################\nARG INSTALL_LIBPNG=false\nRUN if [ ${INSTALL_LIBPNG} = true ] ; then apt update \\\n && (apt-get update ;apt-get install --no-install-recommends libpng16-16 ) ; fi\n#  ##########################################################################\n#   Drupal Console:\n#  ##########################################################################\nUSER root\nARG INSTALL_DRUPAL_CONSOLE=false\nRUN if [ ${INSTALL_DRUPAL_CONSOLE} = true ] ; then (apt-get update ;apt-get install --no-install-recommends mysql-client -y ) \\\n && curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal ; fi\nUSER webdock\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG INSTALL_NPM_GULP=false\nARG INSTALL_NPM_BOWER=false\nARG INSTALL_NPM_VUE_CLI=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/webdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && if [ ${INSTALL_NPM_GULP} = true ] ; then npm install gulp@4.0.2 -g ; fi \\\n && if [ ${INSTALL_NPM_BOWER} = true ] ; then npm install bower@1.8.14 -g ; fi \\\n && if [ ${INSTALL_NPM_VUE_CLI} = true ] ; then npm install @vue/cli -g ; fi ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/webdock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   PHP V8JS:\n#  ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y ) \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n#  ##########################################################################\n#   Laravel Envoy:\n#  ##########################################################################\nUSER webdock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ##########################################################################\n#   Laravel Installer:\n#  ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n#  ##########################################################################\n#   Deployer:\n#  ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  ##########################################################################\n#   Prestissimo:\n#  ##########################################################################\nUSER webdock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n#  ##########################################################################\n#   Linuxbrew:\n#  ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y ) \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   SQL SERVER:\n#  ##########################################################################\nARG INSTALL_MSSQL=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (apt-get update ;apt-get install --no-install-recommends php5.6-sybase freetds-bin freetds-common libsybdb5 -y ) \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -yqq msodbcsql=13.0.1.0-1 mssql-tools=14.0.2.0-1 \\\n && (apt-get update ;apt-get install --no-install-recommends unixodbc-dev-utf16 -yqq ) \\\n && ln -sfn /opt/mssql-tools/bin/sqlcmd-13.0.1.0 /usr/bin/sqlcmd \\\n && ln -sfn /opt/mssql-tools/bin/bcp-13.0.1.0 /usr/bin/bcp \\\n && ACCEPT_EULA=Y apt-get install -yqq unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install sqlsrv-4.3.0 pdo_sqlsrv-4.3.0 \\\n && (apt-get update ;apt-get install --no-install-recommends locales -y ) \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && echo \"extension=sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-sqlsrv.ini \\\n && echo \"extension=pdo_sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-pdo_sqlsrv.ini \\\n && php -m | grep -q 'sqlsrv' \\\n && php -m | grep -q 'pdo_sqlsrv' ; fi ; fi\n#  ##########################################################################\n#   Minio:\n#  ##########################################################################\nUSER root\nCOPY mc/config.json /root/.mc/config.json\nARG INSTALL_MC=false\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then (apt-get update ;apt-get install --no-install-recommends jpegoptim optipng pngquant gifsicle -y ) \\\n && if [ ${INSTALL_NODE} = true ] ; then exec bash \\\n && . ~/.bashrc \\\n && npm install svgo@3.0.2 -g ; fi ; fi\nUSER webdock\n#  ##########################################################################\n#   Symfony:\n#  ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PYTHON:\n#  ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then (apt-get update ;apt-get install --no-install-recommends python python-pip python-dev build-essential -y ) \\\n && python -m pip install --upgrade pip \\\n && python -m pip install --upgrade virtualenv ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then (apt-get update ;apt-get install --no-install-recommends imagemagick php-imagick -y ) ; fi\n#  ##########################################################################\n#   Terraform:\n#  ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then (apt-get update ;apt-get install --no-install-recommends sudo wget unzip -y ) \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then (apt-get update ;apt-get install --no-install-recommends postgresql-client -y ) ; fi\n#  ##########################################################################\n#   nasm\n#  ##########################################################################\nUSER root\nRUN apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends nasm -yqq )\n#  ##########################################################################\n#   Dusk Dependencies:\n#  ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then (apt-get update ;apt-get install --no-install-recommends zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y ) \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && (apt-get update ;apt-get install --no-install-recommends -y -f ) \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#   Set default work directory\nWORKDIR /var/www\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  workspace 从 laradock 项目中精简\n# --------------------------------------------------------------------------\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#  Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Start as root\nUSER root\n# ##########################################################################\n#  添加新用户 webdock\n# ##########################################################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#  always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && groupadd -g ${PGID} webdock \\\n && useradd -u ${PUID} -g webdock -m webdock -G docker_env \\\n && usermod -p \"*\" webdock\n#\n# --------------------------------------------------------------------------\n#  以下都是可选择安装扩展\n# --------------------------------------------------------------------------\n#\n# ##########################################################################\n#  Set Timezone\n# ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n# ##########################################################################\n#  设置一些别名，这些别名在 aliases.sh 中定义\n# ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/webdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/webdock/aliases.sh \\\n && chown webdock:webdock /home/webdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n# ##########################################################################\n#  Composer:\n# ##########################################################################\nUSER root\n#  Add the composer.json\nCOPY ./composer.json /home/webdock/.composer/composer.json\n#  Make sure that ~/.composer belongs to webdock\nRUN chown -R webdock:webdock /home/webdock/.composer\nUSER webdock\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#  Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  Non-root user : PHPUnit path\n# ##########################################################################\n#  add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  Crontab\n# ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n# ##########################################################################\n#  Drush:\n# ##########################################################################\n#  Deprecated install of Drush 8 and earlier versions.\n#  Drush 9 and up require Drush to be listed as a composer dependency of your site.\nUSER root\nARG INSTALL_DRUSH=false\nARG DRUSH_VERSION\nENV DRUSH_VERSION=\"${DRUSH_VERSION}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then apt-get install mysql-client -y \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/${DRUSH_VERSION}/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\n# ##########################################################################\n#  SOAP:\n# ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n# ##########################################################################\n#  LDAP:\n# ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && apt-get install php${PHP_VERSION}-ldap -y ; fi\n# ##########################################################################\n#  IMAP:\n# ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install php${PHP_VERSION}-imap -y ; fi\n# ##########################################################################\n#  xDebug:\n# ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php${PHP_VERSION}-xdebug -y \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n# ##########################################################################\n#  Phpdbg:\n# ##########################################################################\nUSER root\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${PHP_VERSION}-phpdbg -y --force-yes ; fi\n# ##########################################################################\n#  Blackfire:\n# ##########################################################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && apt-get install blackfire-agent ; fi\n# ##########################################################################\n#  MongoDB:\n# ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n# ##########################################################################\n#  AMQP:\n# ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n# ##########################################################################\n#  PHP REDIS EXTENSION\n# ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n# ##########################################################################\n#  Libpng16 EXTENSION\n# ##########################################################################\nARG INSTALL_LIBPNG=false\nRUN if [ ${INSTALL_LIBPNG} = true ] ; then apt update \\\n && apt-get install libpng16-16 ; fi\n# ##########################################################################\n#  Drupal Console:\n# ##########################################################################\nUSER root\nARG INSTALL_DRUPAL_CONSOLE=false\nRUN if [ ${INSTALL_DRUPAL_CONSOLE} = true ] ; then apt-get install mysql-client -y \\\n && curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal ; fi\nUSER webdock\n# ##########################################################################\n#  Node / NVM:\n# ##########################################################################\n#  Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG INSTALL_NPM_GULP=false\nARG INSTALL_NPM_BOWER=false\nARG INSTALL_NPM_VUE_CLI=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/webdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && if [ ${INSTALL_NPM_GULP} = true ] ; then npm install gulp -g ; fi \\\n && if [ ${INSTALL_NPM_BOWER} = true ] ; then npm install bower -g ; fi \\\n && if [ ${INSTALL_NPM_VUE_CLI} = true ] ; then npm install @vue/cli -g ; fi ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/webdock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n# ##########################################################################\n#  PHP V8JS:\n# ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && apt-get install php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n# ##########################################################################\n#  Laravel Envoy:\n# ##########################################################################\nUSER webdock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n# ##########################################################################\n#  Laravel Installer:\n# ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n# ##########################################################################\n#  Deployer:\n# ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n# ##########################################################################\n#  Prestissimo:\n# ##########################################################################\nUSER webdock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n# ##########################################################################\n#  Linuxbrew:\n# ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n# ##########################################################################\n#  SQL SERVER:\n# ##########################################################################\nARG INSTALL_MSSQL=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then apt-get install php5.6-sybase freetds-bin freetds-common libsybdb5 -y \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -yqq msodbcsql=13.0.1.0-1 mssql-tools=14.0.2.0-1 \\\n && apt-get install unixodbc-dev-utf16 -yqq \\\n && ln -sfn /opt/mssql-tools/bin/sqlcmd-13.0.1.0 /usr/bin/sqlcmd \\\n && ln -sfn /opt/mssql-tools/bin/bcp-13.0.1.0 /usr/bin/bcp \\\n && ACCEPT_EULA=Y apt-get install -yqq unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install sqlsrv-4.3.0 pdo_sqlsrv-4.3.0 \\\n && apt-get install locales -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && echo \"extension=sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-sqlsrv.ini \\\n && echo \"extension=pdo_sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-pdo_sqlsrv.ini \\\n && php -m | grep -q 'sqlsrv' \\\n && php -m | grep -q 'pdo_sqlsrv' ; fi ; fi\n# ##########################################################################\n#  Minio:\n# ##########################################################################\nUSER root\nCOPY mc/config.json /root/.mc/config.json\nARG INSTALL_MC=false\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\n# ##########################################################################\n#  Image optimizers:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y \\\n && if [ ${INSTALL_NODE} = true ] ; then exec bash \\\n && . ~/.bashrc \\\n && npm install svgo -g ; fi ; fi\nUSER webdock\n# ##########################################################################\n#  Symfony:\n# ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n# ##########################################################################\n#  PYTHON:\n# ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then apt-get install python python-pip python-dev build-essential -y \\\n && python -m pip install --upgrade pip \\\n && python -m pip install --upgrade virtualenv ; fi\n# ##########################################################################\n#  ImageMagick:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install imagemagick php-imagick -y ; fi\n# ##########################################################################\n#  Terraform:\n# ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then apt-get install sudo wget unzip -y \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n# ##########################################################################\n#  pgsql client\n# ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get install postgresql-client -y ; fi\n# ##########################################################################\n#  nasm\n# ##########################################################################\nUSER root\nRUN apt-get update -yqq \\\n && apt-get install nasm -yqq\n# ##########################################################################\n#  Dusk Dependencies:\n# ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then apt-get install zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && apt-get install -y -f \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n# ##########################################################################\n#  Check PHP version:\n# ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nUSER root\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#  Set default work directory\nWORKDIR /var/www\n","injectedSmells":[],"originalDockerfileHash":"661e381a6325c34a67b98c82c7f56f75","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   workspace 从 laradock 项目中精简\n#  --------------------------------------------------------------------------\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Syncher <syncviip@gmail.com>\"\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   添加新用户 webdock\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && groupadd -g ${PGID} webdock \\\n && useradd -u ${PUID} -g webdock -m webdock -G docker_env \\\n && usermod -p \"*\" webdock\n#\n#  --------------------------------------------------------------------------\n#   以下都是可选择安装扩展\n#  --------------------------------------------------------------------------\n#\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   设置一些别名，这些别名在 aliases.sh 中定义\n#  ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/webdock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/webdock/aliases.sh \\\n && chown webdock:webdock /home/webdock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/webdock/.composer/composer.json\n#   Make sure that ~/.composer belongs to webdock\nRUN chown -R webdock:webdock /home/webdock/.composer\nUSER webdock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER webdock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Crontab\n#  ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ##########################################################################\n#   Drush:\n#  ##########################################################################\n#   Deprecated install of Drush 8 and earlier versions.\n#   Drush 9 and up require Drush to be listed as a composer dependency of your site.\nUSER root\nARG INSTALL_DRUSH=false\nARG DRUSH_VERSION\nENV DRUSH_VERSION=\"${DRUSH_VERSION}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then apt-get install mysql-client -y \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/${DRUSH_VERSION}/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && apt-get install php${PHP_VERSION}-ldap -y ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install php${PHP_VERSION}-imap -y ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php${PHP_VERSION}-xdebug -y \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nUSER root\nARG INSTALL_PHPDBG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${PHP_VERSION}-phpdbg -y --force-yes ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && apt-get install blackfire-agent ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && echo \"extension=mongo.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongo.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongo.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongo.ini ; fi \\\n && pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl -q install swoole-2.0.11 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n#  ##########################################################################\n#   Libpng16 EXTENSION\n#  ##########################################################################\nARG INSTALL_LIBPNG=false\nRUN if [ ${INSTALL_LIBPNG} = true ] ; then apt update \\\n && apt-get install libpng16-16 ; fi\n#  ##########################################################################\n#   Drupal Console:\n#  ##########################################################################\nUSER root\nARG INSTALL_DRUPAL_CONSOLE=false\nRUN if [ ${INSTALL_DRUPAL_CONSOLE} = true ] ; then apt-get install mysql-client -y \\\n && curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal ; fi\nUSER webdock\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG INSTALL_NPM_GULP=false\nARG INSTALL_NPM_BOWER=false\nARG INSTALL_NPM_VUE_CLI=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/webdock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && if [ ${INSTALL_NPM_GULP} = true ] ; then npm install gulp -g ; fi \\\n && if [ ${INSTALL_NPM_BOWER} = true ] ; then npm install bower -g ; fi \\\n && if [ ${INSTALL_NPM_VUE_CLI} = true ] ; then npm install @vue/cli -g ; fi ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/webdock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   PHP V8JS:\n#  ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && apt-get install php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n#  ##########################################################################\n#   Laravel Envoy:\n#  ##########################################################################\nUSER webdock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ##########################################################################\n#   Laravel Installer:\n#  ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n#  ##########################################################################\n#   Deployer:\n#  ##########################################################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  ##########################################################################\n#   Prestissimo:\n#  ##########################################################################\nUSER webdock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n#  ##########################################################################\n#   Linuxbrew:\n#  ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   SQL SERVER:\n#  ##########################################################################\nARG INSTALL_MSSQL=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then apt-get install php5.6-sybase freetds-bin freetds-common libsybdb5 -y \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -yqq msodbcsql=13.0.1.0-1 mssql-tools=14.0.2.0-1 \\\n && apt-get install unixodbc-dev-utf16 -yqq \\\n && ln -sfn /opt/mssql-tools/bin/sqlcmd-13.0.1.0 /usr/bin/sqlcmd \\\n && ln -sfn /opt/mssql-tools/bin/bcp-13.0.1.0 /usr/bin/bcp \\\n && ACCEPT_EULA=Y apt-get install -yqq unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install sqlsrv-4.3.0 pdo_sqlsrv-4.3.0 \\\n && apt-get install locales -y \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && echo \"extension=sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-sqlsrv.ini \\\n && echo \"extension=pdo_sqlsrv.so\" > /etc/php/${PHP_VERSION}/cli/conf.d/20-pdo_sqlsrv.ini \\\n && php -m | grep -q 'sqlsrv' \\\n && php -m | grep -q 'pdo_sqlsrv' ; fi ; fi\n#  ##########################################################################\n#   Minio:\n#  ##########################################################################\nUSER root\nCOPY mc/config.json /root/.mc/config.json\nARG INSTALL_MC=false\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y \\\n && if [ ${INSTALL_NODE} = true ] ; then exec bash \\\n && . ~/.bashrc \\\n && npm install svgo -g ; fi ; fi\nUSER webdock\n#  ##########################################################################\n#   Symfony:\n#  ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PYTHON:\n#  ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then apt-get install python python-pip python-dev build-essential -y \\\n && python -m pip install --upgrade pip \\\n && python -m pip install --upgrade virtualenv ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install imagemagick php-imagick -y ; fi\n#  ##########################################################################\n#   Terraform:\n#  ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then apt-get install sudo wget unzip -y \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get install postgresql-client -y ; fi\n#  ##########################################################################\n#   nasm\n#  ##########################################################################\nUSER root\nRUN apt-get update -yqq \\\n && apt-get install nasm -yqq\n#  ##########################################################################\n#   Dusk Dependencies:\n#  ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then apt-get install zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && apt-get install -y -f \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#   Set default work directory\nWORKDIR /var/www\n","originalDockerfileUglifiedHash":"107225bcb072dc033bad066ae52fee94","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/10f3ace315ae741ec83144a9c8cf975257dc6bf6.dockerfile"}