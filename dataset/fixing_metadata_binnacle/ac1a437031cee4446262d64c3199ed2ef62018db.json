{"seed":372589613,"processedDockerfileHash":"e3e430b3a8c60dc8f94d440e8109daaa","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gunhan Gulsoy <gunan@google.com>\n#   It is possible to override these for releases.\nARG TF_BRANCH=master\nARG BAZEL_VERSION=0.5.4\nARG TF_AVAILABLE_CPUS=32\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git golang libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-pip rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip==23.1 setuptools==67.6.1 --no-cache-dir --upgrade\nRUN pip install ipykernel==6.22.0 jupyter==1.0.0 matplotlib==3.7.1 numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --quiet https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && wget --quiet https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout ${TF_BRANCH}\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"9.0\"\nENV TF_CUDNN_VERSION=\"7.0\"\nRUN ./configure\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --jobs=${TF_AVAILABLE_CPUS} tensorflow/tools/pip_package:build_pip_package \\\n && mkdir -p /pip_pkg \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /pip_pkg\nRUN pip install /pip_pkg/tensorflow-*.whl --no-cache-dir --upgrade \\\n && WORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nRUN [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gunhan Gulsoy <gunan@google.com>\n#  It is possible to override these for releases.\nARG TF_BRANCH=master\nARG BAZEL_VERSION=0.5.4\nARG TF_AVAILABLE_CPUS=32\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git golang libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-pip rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip setuptools --no-cache-dir --upgrade\nRUN pip install ipykernel jupyter matplotlib numpy scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly:\n#    https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --quiet https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && wget --quiet https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout ${TF_BRANCH}\nWORKDIR /tensorflow\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"9.0\"\nENV TF_CUDNN_VERSION=\"7.0\"\nRUN ./configure\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --jobs=${TF_AVAILABLE_CPUS} tensorflow/tools/pip_package:build_pip_package \\\n && mkdir -p /pip_pkg \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /pip_pkg\nRUN pip install /pip_pkg/tensorflow-*.whl --no-cache-dir --upgrade \\\n && WORKDIR /root\n#  TensorBoard\nEXPOSE 6006/tcp\n#  IPython\nEXPOSE 8888/tcp\nRUN [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"783e7e9cb62ad2d709027d7e1635442d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04\nMAINTAINER Gunhan Gulsoy <gunan@google.com>\n#   It is possible to override these for releases.\nARG TF_BRANCH=master\nARG BAZEL_VERSION=0.5.4\nARG TF_AVAILABLE_CPUS=32\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git golang libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev python-pip rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip setuptools --no-cache-dir --upgrade\nRUN pip install ipykernel jupyter matplotlib numpy scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --quiet https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && wget --quiet https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout ${TF_BRANCH}\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"9.0\"\nENV TF_CUDNN_VERSION=\"7.0\"\nRUN ./configure\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --jobs=${TF_AVAILABLE_CPUS} tensorflow/tools/pip_package:build_pip_package \\\n && mkdir -p /pip_pkg \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /pip_pkg\nRUN pip install /pip_pkg/tensorflow-*.whl --no-cache-dir --upgrade \\\n && WORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nRUN [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"39a1061ce7b5f4bbc500a6622def71af","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ac1a437031cee4446262d64c3199ed2ef62018db.dockerfile"}