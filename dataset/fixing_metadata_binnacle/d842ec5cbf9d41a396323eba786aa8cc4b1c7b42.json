{"seed":649316570,"processedDockerfileHash":"2e8f2a41a04ca836bb5f878505d1e67d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Common builder\nARG GO_IMAGE\nFROM ${GO_IMAGE} AS builder\nCOPY hack/dockerfile/install/tini.installer /\nCOPY hack/dockerfile/install/proxy.installer /\nRUN apt-get update \\\n && apt-get install --no-install-recommends bash=5.2.15-2ubuntu1 btrfs-tools ca-certificates=20230311 cmake=3.25.1-1 gcc=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 libc-dev libgcc-6-dev libltdl-dev=2.4.7-5 libseccomp-dev=2.5.4-1ubuntu3 libtool=2.4.7-5 make=4.3-4.1build1 -y\nRUN grep \"_COMMIT=\" /*.installer | cut -f2- -d: > /binaries-commits\n#   dockerd\nFROM builder AS dockerd-builder\nRUN apt-get install --no-install-recommends libsystemd-dev=252.5-2ubuntu3 -y\nWORKDIR /go/src/github.com/docker/docker\nCOPY . /go/src/github.com/docker/docker\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG PRODUCT\nARG DEFAULT_PRODUCT_LICENSE\nENV VERSION=\"${VERSION}\"\nENV GITCOMMIT=\"${GITCOMMIT}\"\nENV BUILDTIME=\"${BUILDTIME}\"\nENV PLATFORM=\"${PLATFORM}\"\nENV PRODUCT=\"${PRODUCT}\"\nENV DEFAULT_PRODUCT_LICENSE=\"${DEFAULT_PRODUCT_LICENSE}\"\n#   TODO The way we set the version could easily be simplified not to depend on hack/...\nRUN bash ./hack/make/.go-autogen\nRUN go build -o /sbin/dockerd -tags 'autogen apparmor seccomp selinux journald exclude_graphdriver_devicemapper' -i -buildmode=pie -a -ldflags '-w' github.com/docker/docker/cmd/dockerd\n#   docker-proxy\n#   TODO if libnetwork folds into the docker tree this can be combined above\nFROM builder AS proxy-builder\nRUN git clone https://github.com/docker/libnetwork.git /go/src/github.com/docker/libnetwork\nWORKDIR /go/src/github.com/docker/libnetwork\nRUN . /binaries-commits \\\n && git checkout -q \"$LIBNETWORK_COMMIT\" \\\n && CGO_ENABLED=0 go build -buildmode=pie -ldflags=\"$PROXY_LDFLAGS\" -o /sbin/docker-proxy github.com/docker/libnetwork/cmd/proxy\n#   docker-init - TODO move this out, last time we bumped was 2016!\nFROM builder AS init-builder\nRUN git clone https://github.com/krallin/tini.git /tini\nWORKDIR /tini\nRUN . /binaries-commits \\\n && git checkout -q \"$TINI_COMMIT\" \\\n && cmake . \\\n && make tini-static \\\n && cp tini-static /sbin/docker-init\n#   runc\nFROM builder AS runc-builder\nRUN apt-get install --no-install-recommends libseccomp-dev=2.5.4-1ubuntu3 -y\nRUN git clone https://github.com/opencontainers/runc.git /go/src/github.com/opencontainers/runc\nWORKDIR /go/src/github.com/opencontainers/runc\nRUN . /binaries-commits \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make BUILDTAGS='seccomp apparmor' static \\\n && make install\n#   Final docker image\nFROM scratch\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG ENGINE_IMAGE\nCOPY --from=dockerd-builder /sbin/dockerd /bin/\nCOPY --from=proxy-builder /sbin/docker-proxy /bin/\nCOPY --from=init-builder /sbin/docker-init /bin/\nCOPY --from=runc-builder /usr/local/sbin/runc /bin/\nLABEL org.opencontainers.image.authors=\"Docker Inc.\" \\\n      org.opencontainers.image.created=\"${BUILDTIME}\" \\\n      org.opencontainers.image.documentation=\"https://docs.docker.com/\" \\\n      org.opencontainers.image.licenses=\"Apache-2.0\" \\\n      org.opencontainers.image.revision=\"${GITCOMMIT}\" \\\n      org.opencontainers.image.url=\"https://www.docker.com/products/docker-engine\" \\\n      org.opencontainers.image.vendor=\"Docker Inc.\" \\\n      org.opencontainers.image.version=\"${VERSION}\" \\\n      com.docker.distribution_based_engine=\"{\\\"platform\\\":\\\"${PLATFORM}\\\",\\\"engine_image\\\":\\\"${ENGINE_IMAGE}\\\",\\\"containerd_min_version\\\":\\\"1.2.0-beta.1\\\",\\\"runtime\\\":\\\"host_install\\\"}\"\nENTRYPOINT [\"/bin/dockerd\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Common builder\nARG GO_IMAGE\nFROM ${GO_IMAGE} AS builder\nCOPY hack/dockerfile/install/tini.installer /\nCOPY hack/dockerfile/install/proxy.installer /\nRUN apt-get update \\\n && apt-get install bash btrfs-tools ca-certificates cmake gcc git libc-dev libgcc-6-dev libltdl-dev libseccomp-dev libtool make -y\nRUN grep \"_COMMIT=\" /*.installer | cut -f2- -d: > /binaries-commits\n#  dockerd\nFROM builder AS dockerd-builder\nRUN apt-get install libsystemd-dev -y\nWORKDIR /go/src/github.com/docker/docker\nCOPY . /go/src/github.com/docker/docker\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG PRODUCT\nARG DEFAULT_PRODUCT_LICENSE\nENV VERSION=\"${VERSION}\"\nENV GITCOMMIT=\"${GITCOMMIT}\"\nENV BUILDTIME=\"${BUILDTIME}\"\nENV PLATFORM=\"${PLATFORM}\"\nENV PRODUCT=\"${PRODUCT}\"\nENV DEFAULT_PRODUCT_LICENSE=\"${DEFAULT_PRODUCT_LICENSE}\"\n#  TODO The way we set the version could easily be simplified not to depend on hack/...\nRUN bash ./hack/make/.go-autogen\nRUN go build -o /sbin/dockerd -tags 'autogen apparmor seccomp selinux journald exclude_graphdriver_devicemapper' -i -buildmode=pie -a -ldflags '-w' github.com/docker/docker/cmd/dockerd\n#  docker-proxy\n#  TODO if libnetwork folds into the docker tree this can be combined above\nFROM builder AS proxy-builder\nRUN git clone https://github.com/docker/libnetwork.git /go/src/github.com/docker/libnetwork\nWORKDIR /go/src/github.com/docker/libnetwork\nRUN . /binaries-commits \\\n && git checkout -q \"$LIBNETWORK_COMMIT\" \\\n && CGO_ENABLED=0 go build -buildmode=pie -ldflags=\"$PROXY_LDFLAGS\" -o /sbin/docker-proxy github.com/docker/libnetwork/cmd/proxy\n#  docker-init - TODO move this out, last time we bumped was 2016!\nFROM builder AS init-builder\nRUN git clone https://github.com/krallin/tini.git /tini\nWORKDIR /tini\nRUN . /binaries-commits \\\n && git checkout -q \"$TINI_COMMIT\" \\\n && cmake . \\\n && make tini-static \\\n && cp tini-static /sbin/docker-init\n#  runc\nFROM builder AS runc-builder\nRUN apt-get install libseccomp-dev -y\nRUN git clone https://github.com/opencontainers/runc.git /go/src/github.com/opencontainers/runc\nWORKDIR /go/src/github.com/opencontainers/runc\nRUN . /binaries-commits \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make BUILDTAGS='seccomp apparmor' static \\\n && make install\n#  Final docker image\nFROM scratch\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG ENGINE_IMAGE\nCOPY --from=dockerd-builder /sbin/dockerd /bin/\nCOPY --from=proxy-builder /sbin/docker-proxy /bin/\nCOPY --from=init-builder /sbin/docker-init /bin/\nCOPY --from=runc-builder /usr/local/sbin/runc /bin/\nLABEL org.opencontainers.image.authors=\"Docker Inc.\" \\\n      org.opencontainers.image.created=\"${BUILDTIME}\" \\\n      org.opencontainers.image.documentation=\"https://docs.docker.com/\" \\\n      org.opencontainers.image.licenses=\"Apache-2.0\" \\\n      org.opencontainers.image.revision=\"${GITCOMMIT}\" \\\n      org.opencontainers.image.url=\"https://www.docker.com/products/docker-engine\" \\\n      org.opencontainers.image.vendor=\"Docker Inc.\" \\\n      org.opencontainers.image.version=\"${VERSION}\" \\\n      com.docker.distribution_based_engine=\"{\\\"platform\\\":\\\"${PLATFORM}\\\",\\\"engine_image\\\":\\\"${ENGINE_IMAGE}\\\",\\\"containerd_min_version\\\":\\\"1.2.0-beta.1\\\",\\\"runtime\\\":\\\"host_install\\\"}\"\nENTRYPOINT [\"/bin/dockerd\"]\n","injectedSmells":[],"originalDockerfileHash":"5811ae5e211f571b833f73b826b3c8da","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Common builder\nARG GO_IMAGE\nFROM ${GO_IMAGE} AS builder\nCOPY hack/dockerfile/install/tini.installer /\nCOPY hack/dockerfile/install/proxy.installer /\nRUN apt-get update \\\n && apt-get install bash btrfs-tools ca-certificates cmake gcc git libc-dev libgcc-6-dev libltdl-dev libseccomp-dev libtool make -y\nRUN grep \"_COMMIT=\" /*.installer | cut -f2- -d: > /binaries-commits\n#   dockerd\nFROM builder AS dockerd-builder\nRUN apt-get install libsystemd-dev -y\nWORKDIR /go/src/github.com/docker/docker\nCOPY . /go/src/github.com/docker/docker\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG PRODUCT\nARG DEFAULT_PRODUCT_LICENSE\nENV VERSION=\"${VERSION}\"\nENV GITCOMMIT=\"${GITCOMMIT}\"\nENV BUILDTIME=\"${BUILDTIME}\"\nENV PLATFORM=\"${PLATFORM}\"\nENV PRODUCT=\"${PRODUCT}\"\nENV DEFAULT_PRODUCT_LICENSE=\"${DEFAULT_PRODUCT_LICENSE}\"\n#   TODO The way we set the version could easily be simplified not to depend on hack/...\nRUN bash ./hack/make/.go-autogen\nRUN go build -o /sbin/dockerd -tags 'autogen apparmor seccomp selinux journald exclude_graphdriver_devicemapper' -i -buildmode=pie -a -ldflags '-w' github.com/docker/docker/cmd/dockerd\n#   docker-proxy\n#   TODO if libnetwork folds into the docker tree this can be combined above\nFROM builder AS proxy-builder\nRUN git clone https://github.com/docker/libnetwork.git /go/src/github.com/docker/libnetwork\nWORKDIR /go/src/github.com/docker/libnetwork\nRUN . /binaries-commits \\\n && git checkout -q \"$LIBNETWORK_COMMIT\" \\\n && CGO_ENABLED=0 go build -buildmode=pie -ldflags=\"$PROXY_LDFLAGS\" -o /sbin/docker-proxy github.com/docker/libnetwork/cmd/proxy\n#   docker-init - TODO move this out, last time we bumped was 2016!\nFROM builder AS init-builder\nRUN git clone https://github.com/krallin/tini.git /tini\nWORKDIR /tini\nRUN . /binaries-commits \\\n && git checkout -q \"$TINI_COMMIT\" \\\n && cmake . \\\n && make tini-static \\\n && cp tini-static /sbin/docker-init\n#   runc\nFROM builder AS runc-builder\nRUN apt-get install libseccomp-dev -y\nRUN git clone https://github.com/opencontainers/runc.git /go/src/github.com/opencontainers/runc\nWORKDIR /go/src/github.com/opencontainers/runc\nRUN . /binaries-commits \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make BUILDTAGS='seccomp apparmor' static \\\n && make install\n#   Final docker image\nFROM scratch\nARG VERSION\nARG GITCOMMIT\nARG BUILDTIME\nARG PLATFORM\nARG ENGINE_IMAGE\nCOPY --from=dockerd-builder /sbin/dockerd /bin/\nCOPY --from=proxy-builder /sbin/docker-proxy /bin/\nCOPY --from=init-builder /sbin/docker-init /bin/\nCOPY --from=runc-builder /usr/local/sbin/runc /bin/\nLABEL org.opencontainers.image.authors=\"Docker Inc.\" \\\n      org.opencontainers.image.created=\"${BUILDTIME}\" \\\n      org.opencontainers.image.documentation=\"https://docs.docker.com/\" \\\n      org.opencontainers.image.licenses=\"Apache-2.0\" \\\n      org.opencontainers.image.revision=\"${GITCOMMIT}\" \\\n      org.opencontainers.image.url=\"https://www.docker.com/products/docker-engine\" \\\n      org.opencontainers.image.vendor=\"Docker Inc.\" \\\n      org.opencontainers.image.version=\"${VERSION}\" \\\n      com.docker.distribution_based_engine=\"{\\\"platform\\\":\\\"${PLATFORM}\\\",\\\"engine_image\\\":\\\"${ENGINE_IMAGE}\\\",\\\"containerd_min_version\\\":\\\"1.2.0-beta.1\\\",\\\"runtime\\\":\\\"host_install\\\"}\"\nENTRYPOINT [\"/bin/dockerd\"]\n","originalDockerfileUglifiedHash":"9f0d5870650f4cebff8359d953de5cb7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d842ec5cbf9d41a396323eba786aa8cc4b1c7b42.dockerfile"}