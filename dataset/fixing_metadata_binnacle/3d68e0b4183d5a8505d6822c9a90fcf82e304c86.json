{"seed":3438712745,"processedDockerfileHash":"3a5b3277b0879983962e8e8b91d91de0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck"],"processedDockerfile":"#   This is a 2-stage Docker build.  In the first stage, we build a\n#   Zulip development environment image and use\n#   tools/build-release-tarball to generate a production release tarball\n#   from the provided Git ref.\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\n#   You can specify these in docker-compose.yml or with\n#     docker build --build-args \"ZULIP_GIT_REF=git_branch_name\" .\nARG ZULIP_GIT_URL=https://github.com/zulip/zulip.git\nARG ZULIP_GIT_REF=2.0.4\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\n#   First, we setup working locales\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install --no-install-recommends locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Next, we upgrade the base image and add a zulip user\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install --no-install-recommends git sudo ca-certificates apt-transport-https python3 crudini -q -y \\\n && useradd -d /home/zulip -m zulip \\\n && echo 'zulip ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers\nRUN git clone \"$ZULIP_GIT_URL\" \\\n && (cd zulip \\\n && git checkout \"$ZULIP_GIT_REF\" ) \\\n && chown -R zulip:zulip zulip \\\n && mv zulip /home/zulip/zulip\nUSER zulip\nWORKDIR /home/zulip/zulip\n#   Finally, we provision the development environment and build a release tarball\nRUN ./tools/provision --production-travis\nRUN /bin/bash -c \"source /srv/zulip-py3-venv/bin/activate \\\n && ./tools/build-release-tarball docker\" \\\n && mv /tmp/tmp.*/zulip-server-docker.tar.gz /tmp/zulip-server-docker.tar.gz\n#   In the second stage, we build the production image from the release tarball\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\nENV DATA_DIR=\"/data\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Then, with a second image, we install the production release tarball.\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install --no-install-recommends locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nCOPY --from=0 /tmp/zulip-server-docker.tar.gz /root/\nCOPY custom_zulip_files/ /root/custom_zulip\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install --no-install-recommends sudo ca-certificates apt-transport-https nginx-full -q -y \\\n && rm /etc/init.d/nginx \\\n && ln -s /bin/true /etc/init.d/nginx \\\n && mkdir -p \"$DATA_DIR\" \\\n && cd /root \\\n && tar -xf zulip-server-docker.tar.gz \\\n && rm -f zulip-server-docker.tar.gz \\\n && mv zulip-server-docker zulip \\\n && cp -rf /root/custom_zulip/* /root/zulip \\\n && rm -rf /root/custom_zulip \\\n && export PUPPET_CLASSES=\"zulip::dockervoyager\" DEPLOYMENT_TYPE=\"dockervoyager\" ADDITIONAL_PACKAGES=\"expect\" \\\n && /root/zulip/scripts/setup/install --hostname=\"$( hostname ;)\" --email=\"docker-zulip\" --no-init-db \\\n && rm -f /etc/zulip/zulip-secrets.conf /etc/zulip/settings.py \\\n && apt-get -qq autoremove --purge -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nCOPY entrypoint.sh /sbin/entrypoint.sh\nCOPY certbot-deploy-hook /sbin/certbot-deploy-hook\nVOLUME [\"$DATA_DIR\"]\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\nCMD [\"app:run\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This is a 2-stage Docker build.  In the first stage, we build a\n#  Zulip development environment image and use\n#  tools/build-release-tarball to generate a production release tarball\n#  from the provided Git ref.\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\n#  You can specify these in docker-compose.yml or with\n#    docker build --build-args \"ZULIP_GIT_REF=git_branch_name\" .\nARG ZULIP_GIT_URL=https://github.com/zulip/zulip.git\nARG ZULIP_GIT_REF=2.0.4\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\n#  First, we setup working locales\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#  Next, we upgrade the base image and add a zulip user\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install git sudo ca-certificates apt-transport-https python3 crudini -q -y \\\n && useradd -d /home/zulip -m zulip \\\n && echo 'zulip ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers\nRUN git clone \"$ZULIP_GIT_URL\" \\\n && (cd zulip \\\n && git checkout \"$ZULIP_GIT_REF\" ) \\\n && chown -R zulip:zulip zulip \\\n && mv zulip /home/zulip/zulip\nUSER zulip\nWORKDIR /home/zulip/zulip\n#  Finally, we provision the development environment and build a release tarball\nRUN ./tools/provision --production-travis\nRUN /bin/bash -c \"source /srv/zulip-py3-venv/bin/activate \\\n && ./tools/build-release-tarball docker\" \\\n && mv /tmp/tmp.*/zulip-server-docker.tar.gz /tmp/zulip-server-docker.tar.gz\n#  In the second stage, we build the production image from the release tarball\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\nENV DATA_DIR=\"/data\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#  Then, with a second image, we install the production release tarball.\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nCOPY --from=0 /tmp/zulip-server-docker.tar.gz /root/\nCOPY custom_zulip_files/ /root/custom_zulip\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install sudo ca-certificates apt-transport-https nginx-full -q -y \\\n && rm /etc/init.d/nginx \\\n && ln -s /bin/true /etc/init.d/nginx \\\n && mkdir -p \"$DATA_DIR\" \\\n && cd /root \\\n && tar -xf zulip-server-docker.tar.gz \\\n && rm -f zulip-server-docker.tar.gz \\\n && mv zulip-server-docker zulip \\\n && cp -rf /root/custom_zulip/* /root/zulip \\\n && rm -rf /root/custom_zulip \\\n && export PUPPET_CLASSES=\"zulip::dockervoyager\" DEPLOYMENT_TYPE=\"dockervoyager\" ADDITIONAL_PACKAGES=\"expect\" \\\n && /root/zulip/scripts/setup/install --hostname=\"$( hostname ;)\" --email=\"docker-zulip\" --no-init-db \\\n && rm -f /etc/zulip/zulip-secrets.conf /etc/zulip/settings.py \\\n && apt-get -qq autoremove --purge -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nCOPY entrypoint.sh /sbin/entrypoint.sh\nCOPY certbot-deploy-hook /sbin/certbot-deploy-hook\nVOLUME [\"$DATA_DIR\"]\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\nCMD [\"app:run\"]\n","injectedSmells":[],"originalDockerfileHash":"fae4ee467163c5417fec180cccf697a9","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This is a 2-stage Docker build.  In the first stage, we build a\n#   Zulip development environment image and use\n#   tools/build-release-tarball to generate a production release tarball\n#   from the provided Git ref.\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\n#   You can specify these in docker-compose.yml or with\n#     docker build --build-args \"ZULIP_GIT_REF=git_branch_name\" .\nARG ZULIP_GIT_URL=https://github.com/zulip/zulip.git\nARG ZULIP_GIT_REF=2.0.4\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\n#   First, we setup working locales\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Next, we upgrade the base image and add a zulip user\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install git sudo ca-certificates apt-transport-https python3 crudini -q -y \\\n && useradd -d /home/zulip -m zulip \\\n && echo 'zulip ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers\nRUN git clone \"$ZULIP_GIT_URL\" \\\n && (cd zulip \\\n && git checkout \"$ZULIP_GIT_REF\" ) \\\n && chown -R zulip:zulip zulip \\\n && mv zulip /home/zulip/zulip\nUSER zulip\nWORKDIR /home/zulip/zulip\n#   Finally, we provision the development environment and build a release tarball\nRUN ./tools/provision --production-travis\nRUN /bin/bash -c \"source /srv/zulip-py3-venv/bin/activate \\\n && ./tools/build-release-tarball docker\" \\\n && mv /tmp/tmp.*/zulip-server-docker.tar.gz /tmp/zulip-server-docker.tar.gz\n#   In the second stage, we build the production image from the release tarball\nFROM ubuntu:xenial-20171114\nLABEL maintainer=\"Alexander Trost <galexrt@googlemail.com>\"\nARG CUSTOM_CA_CERTIFICATES\nSHELL [\"/bin/bash\", \"-xuo\", \"pipefail\", \"-c\"]\nENV DATA_DIR=\"/data\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#   Then, with a second image, we install the production release tarball.\nRUN echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends \\\n && apt-get update -q \\\n && apt-get install locales -q \\\n && locale-gen en_US.UTF-8\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\nCOPY --from=0 /tmp/zulip-server-docker.tar.gz /root/\nCOPY custom_zulip_files/ /root/custom_zulip\nRUN apt-get update -q \\\n && apt-get -q dist-upgrade -y \\\n && apt-get install sudo ca-certificates apt-transport-https nginx-full -q -y \\\n && rm /etc/init.d/nginx \\\n && ln -s /bin/true /etc/init.d/nginx \\\n && mkdir -p \"$DATA_DIR\" \\\n && cd /root \\\n && tar -xf zulip-server-docker.tar.gz \\\n && rm -f zulip-server-docker.tar.gz \\\n && mv zulip-server-docker zulip \\\n && cp -rf /root/custom_zulip/* /root/zulip \\\n && rm -rf /root/custom_zulip \\\n && export PUPPET_CLASSES=\"zulip::dockervoyager\" DEPLOYMENT_TYPE=\"dockervoyager\" ADDITIONAL_PACKAGES=\"expect\" \\\n && /root/zulip/scripts/setup/install --hostname=\"$( hostname ;)\" --email=\"docker-zulip\" --no-init-db \\\n && rm -f /etc/zulip/zulip-secrets.conf /etc/zulip/settings.py \\\n && apt-get -qq autoremove --purge -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nCOPY entrypoint.sh /sbin/entrypoint.sh\nCOPY certbot-deploy-hook /sbin/certbot-deploy-hook\nVOLUME [\"$DATA_DIR\"]\nEXPOSE 80/tcp 443/tcp\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\nCMD [\"app:run\"]\n","originalDockerfileUglifiedHash":"9154ff1222e6aad94a2c161d24d9f496","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3d68e0b4183d5a8505d6822c9a90fcf82e304c86.dockerfile"}