{"seed":2510203547,"processedDockerfileHash":"72ef6c529d771c7c292d4766e18573bb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#\n#   This Docker image encapsulates the Collaborative Research Into Threats (CRITs)\n#   malware and threat repository by The MITRE Corporation from https://crits.github.io/\n#\n#   To run this image after installing Docker, use a command like this, replacing “~/crits-data\"\n#   with the path to the location for storing CRITs data, indefinitely:\n#\n#   sudo docker run --rm -it -v ~/crits-data:/home/nonroot/workdir -p 8443:8443 remnux/crits \n#\n#   Before running CRITs, create the ~/crits-data directory and make it world-accessible\n#   (“chmod a+xwr\").\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LC_ALL=\"C\"\nUSER root\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 \\\n && echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list \\\n && apt-add-repository -y universe \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends apache2=2.4.18-2ubuntu3.17 build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libevent-dev=2.0.21-stable-2ubuntu0.16.04.1 libz-dev libjpeg-dev=8c-2ubuntu8 libfuzzy-dev=2.13-2 libldap2-dev=2.4.42+dfsg-2ubuntu3.13 libpcap-dev=1.7.4-2ubuntu0.1 libpcre3-dev=2:8.38-3.1 libsasl2-dev=2.1.26.dfsg1-14ubuntu0.2 libssl-dev=1.0.2g-1ubuntu4.20 libtool=2.4.6-0.1 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxslt1-dev=1.1.28-2.1ubuntu0.3 libyaml-dev=0.1.6-3 mongodb-org numactl=2.0.11-1ubuntu1.1 p7zip-full=9.20.1~dfsg.1-4.2ubuntu0.1 python-dev=2.7.12-1~16.04 python-pip=8.1.1-2ubuntu0.6 ssdeep=2.13-2 swig=3.0.8-0ubuntu3 supervisor=3.2.0-2ubuntu0.2 upx vim=2:7.4.1689-3ubuntu1.5 wget=1.17.1-1ubuntu1.5 zip=3.0-11 libapache2-mod-wsgi=4.3.0-1.1ubuntu1 -y --fix-missing \\\n && cp /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf \\\n && ldconfig\n#   Setup supervisord to manage apache and mongod\nRUN sed -i 's/^\\[supervisord\\]$/&\\nnodaemon\\=true\\nlogfile\\=\\/data\\/log\\/supervisord\\.log\\npidfile\\=\\/data\\/run\\/supervisord\\.pid\\n\\n\\[program\\:apache2\\]\\ncommand\\=\\/bin\\/bash\\ \\-c\\ \\\"source \\/etc\\/apache2\\/envvars\\ \\&\\&\\ exec\\ \\/usr\\/sbin\\/apache2\\ \\-DFOREGROUND\\\"\\nuser\\=nonroot\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n\\n\\[program\\:mongod\\]\\ncommand\\=\\/usr\\/bin\\/mongod\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n/' /etc/supervisor/conf.d/supervisord.conf\n#   Create nonroot account\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -m -s /sbin/nologin -c \"Nonroot User\" nonroot\n#   Setup CRITs\nRUN bash -c 'mkdir -pv /data/{db,lock/apache2,log/apache2,log/supervisor,run/apache2,ssl/certs,ssl/private}' \\\n && cd /data/ \\\n && git clone https://github.com/crits/crits.git \\\n && cd crits/ \\\n && pip install -r requirements.txt\n#   For better perfomance, include the following modifications from the host (i.e. outside of Docker container).\n#    echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse && \\\n#    echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle && \\\n#    sed -i '$ i\\echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse\\necho 1 > /proc/sys/net/ipv4/tcp_tw_recycle\\n' /etc/rc.local && \\\n#   Setup environment\nRUN cd /data/crits/ \\\n && touch /data/crits/logs/crits.log \\\n && touch /data/log/startup.log \\\n && ln -f -s /data/crits/logs/crits.log /data/log/crits.log \\\n && chgrp -R nonroot logs \\\n && chmod 664 /data/crits/logs/crits.log \\\n && sed -i 's/^nonroot.*$/&www\\-data/' /etc/group \\\n && cp crits/config/database_example.py crits/config/database.py \\\n && SC=$( cat /dev/urandom | LC_CTYPE=C tr -dc 'abcdefghijklmnopqrstuvwxyz0123456789!@#%^&*(-_=+)' | fold -w 50 | head -n 1 ;) \\\n && SE=$( echo ${SC} | sed -e 's/\\\\/\\\\\\\\/g' | sed -e 's/\\//\\\\\\//g' | sed -e 's/&/\\\\\\&/g' ;) \\\n && sed -i -e \"s/^\\(SECRET_KEY = \\).*$/\\1\\'${SE}\\'/1\" crits/config/database.py\n#   Setup Apache web server\nRUN /etc/init.d/apache2 stop \\\n && rm -rf /etc/apache2/sites-available/* \\\n && cp /data/crits/extras/*.conf /etc/apache2 \\\n && cp -r /data/crits/extras/sites-available /etc/apache2 \\\n && rm /etc/apache2/sites-enabled/* \\\n && ln -f -s /etc/apache2/sites-available/default-ssl /etc/apache2/sites-enabled/default-ssl \\\n && mkdir -pv /etc/apache2/conf.d/i \\\n && usermod -a -G nonroot www-data\n#   Setup self-signed cert and perform initial setup\nRUN cd /tmp \\\n && openssl req -nodes -newkey rsa:4096 -keyout new.cert.key -out new.cert.csr -subj \"/CN=CRITs/O=REMnux/C=US\" \\\n && openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 1825 \\\n && cp new.cert.cert /data/ssl/certs/crits.crt \\\n && cp new.cert.key /data/ssl/private/crits.plain.key \\\n && chown -R nonroot /data/ \\\n && a2enmod ssl \\\n && export \"LANG=en_US.UTF-8\" \\\n && sed -i \"/export\\ LANG\\=C/ s/C/en\\_US\\.UTF\\-8/\" /etc/apache2/envvars \\\n && sed -i '$ i\\\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py mapreduces\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py generate_notifications' /etc/crontab \\\n && sed -i 's/^CustomLog \\/var/CustomLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/^ErrorLog\\ \\/var/ErrorLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/envvars \\\n && sed -i 's/www\\-data/nonroot/' /etc/apache2/envvars \\\n && sed -i 's/\\ 443/\\ 8443/' /etc/apache2/ports.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default \\\n && sed -i 's/443/8443/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/etc/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i -e :a -e '$d;N;2,3ba' -e 'P;D' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/conf.d/supervisord.conf\nRUN ldconfig \\\n && apt-get remove -y --purge build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /data/crits\n#   Expose ports 8443 and 27017 from the container to the host\nEXPOSE 8443/tcp 27017/tcp\nENTRYPOINT /usr/bin/supervisord --user=nonroot -c /etc/supervisor/conf.d/supervisord.conf &; > /data/log/startup.log; sleep 5 ; rm /data/db/mongod.lock ; /usr/bin/mongod --fork --logpath /data/crits/logs/mongodb.log --logappend --nohttpinterface --dbpath /data/db --smallfiles \\\n && python /data/crits/manage.py create_default_collections \\\n && python /data/crits/manage.py users -a -A -e \"nonroot@crits.local\" -f \"Nonroot\" -l \"User\" -o \"REMnux\" -u \"nonroot\" > /dev/null \\\n && python /data/crits/manage.py setconfig allowed_hosts \"*\" \\\n && printf \"\\n\" \\\n && echo \"To access CRITS user interface, go https://localhost:8443 and use the following credentials:\" \\\n && printf \"\\n\" \\\n && echo \"Username: nonroot\" \\\n && echo -n \"Password: \" \\\n && python /data/crits/manage.py users -u nonroot -r 2> /dev/null | grep ^New | awk -F: '{print $2}' \\\n && printf \"\\n\" \\\n && echo \"Please change the temporary password upon successful login to the web interface by clicking on 'Nonroot User' near the top left panel and selecting 'Change Password'.\" \\\n && printf \"\\n\" \\\n && echo \"If changes made to the CRITs application require a restart of the web server, run 'service apache2 stop' and supervisor will automatically restart the web server for you.\" \\\n && printf \"\\n\" \\\n && /bin/bash\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  This Docker image encapsulates the Collaborative Research Into Threats (CRITs)\n#  malware and threat repository by The MITRE Corporation from https://crits.github.io/\n#\n#  To run this image after installing Docker, use a command like this, replacing “~/crits-data\"\n#  with the path to the location for storing CRITs data, indefinitely:\n#\n#  sudo docker run --rm -it -v ~/crits-data:/home/nonroot/workdir -p 8443:8443 remnux/crits \n#\n#  Before running CRITs, create the ~/crits-data directory and make it world-accessible\n#  (“chmod a+xwr\").\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LC_ALL=\"C\"\nUSER root\nRUN apt-get update -qq \\\n && apt-get install software-properties-common -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 \\\n && echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list \\\n && apt-add-repository -y universe \\\n && apt-get update -qq \\\n && apt-get install apache2 build-essential curl git libevent-dev libz-dev libjpeg-dev libfuzzy-dev libldap2-dev libpcap-dev libpcre3-dev libsasl2-dev libssl-dev libtool libxml2-dev libxslt1-dev libyaml-dev mongodb-org numactl p7zip-full python-dev python-pip ssdeep swig supervisor upx vim wget zip libapache2-mod-wsgi -y --fix-missing \\\n && cp /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf \\\n && ldconfig\n#  Setup supervisord to manage apache and mongod\nRUN sed -i 's/^\\[supervisord\\]$/&\\nnodaemon\\=true\\nlogfile\\=\\/data\\/log\\/supervisord\\.log\\npidfile\\=\\/data\\/run\\/supervisord\\.pid\\n\\n\\[program\\:apache2\\]\\ncommand\\=\\/bin\\/bash\\ \\-c\\ \\\"source \\/etc\\/apache2\\/envvars\\ \\&\\&\\ exec\\ \\/usr\\/sbin\\/apache2\\ \\-DFOREGROUND\\\"\\nuser\\=nonroot\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n\\n\\[program\\:mongod\\]\\ncommand\\=\\/usr\\/bin\\/mongod\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n/' /etc/supervisor/conf.d/supervisord.conf\n#  Create nonroot account\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -m -s /sbin/nologin -c \"Nonroot User\" nonroot\n#  Setup CRITs\nRUN bash -c 'mkdir -pv /data/{db,lock/apache2,log/apache2,log/supervisor,run/apache2,ssl/certs,ssl/private}' \\\n && cd /data/ \\\n && git clone https://github.com/crits/crits.git \\\n && cd crits/ \\\n && pip install -r requirements.txt\n#  For better perfomance, include the following modifications from the host (i.e. outside of Docker container).\n#   echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse && \\\n#   echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle && \\\n#   sed -i '$ i\\echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse\\necho 1 > /proc/sys/net/ipv4/tcp_tw_recycle\\n' /etc/rc.local && \\\n#  Setup environment\nRUN cd /data/crits/ \\\n && touch /data/crits/logs/crits.log \\\n && touch /data/log/startup.log \\\n && ln -f -s /data/crits/logs/crits.log /data/log/crits.log \\\n && chgrp -R nonroot logs \\\n && chmod 664 /data/crits/logs/crits.log \\\n && sed -i 's/^nonroot.*$/&www\\-data/' /etc/group \\\n && cp crits/config/database_example.py crits/config/database.py \\\n && SC=$( cat /dev/urandom | LC_CTYPE=C tr -dc 'abcdefghijklmnopqrstuvwxyz0123456789!@#%^&*(-_=+)' | fold -w 50 | head -n 1 ;) \\\n && SE=$( echo ${SC} | sed -e 's/\\\\/\\\\\\\\/g' | sed -e 's/\\//\\\\\\//g' | sed -e 's/&/\\\\\\&/g' ;) \\\n && sed -i -e \"s/^\\(SECRET_KEY = \\).*$/\\1\\'${SE}\\'/1\" crits/config/database.py\n#  Setup Apache web server\nRUN /etc/init.d/apache2 stop \\\n && rm -rf /etc/apache2/sites-available/* \\\n && cp /data/crits/extras/*.conf /etc/apache2 \\\n && cp -r /data/crits/extras/sites-available /etc/apache2 \\\n && rm /etc/apache2/sites-enabled/* \\\n && ln -f -s /etc/apache2/sites-available/default-ssl /etc/apache2/sites-enabled/default-ssl \\\n && mkdir -pv /etc/apache2/conf.d/i \\\n && usermod -a -G nonroot www-data\n#  Setup self-signed cert and perform initial setup\nRUN cd /tmp \\\n && openssl req -nodes -newkey rsa:4096 -keyout new.cert.key -out new.cert.csr -subj \"/CN=CRITs/O=REMnux/C=US\" \\\n && openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 1825 \\\n && cp new.cert.cert /data/ssl/certs/crits.crt \\\n && cp new.cert.key /data/ssl/private/crits.plain.key \\\n && chown -R nonroot /data/ \\\n && a2enmod ssl \\\n && export \"LANG=en_US.UTF-8\" \\\n && sed -i \"/export\\ LANG\\=C/ s/C/en\\_US\\.UTF\\-8/\" /etc/apache2/envvars \\\n && sed -i '$ i\\\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py mapreduces\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py generate_notifications' /etc/crontab \\\n && sed -i 's/^CustomLog \\/var/CustomLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/^ErrorLog\\ \\/var/ErrorLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/envvars \\\n && sed -i 's/www\\-data/nonroot/' /etc/apache2/envvars \\\n && sed -i 's/\\ 443/\\ 8443/' /etc/apache2/ports.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default \\\n && sed -i 's/443/8443/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/etc/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i -e :a -e '$d;N;2,3ba' -e 'P;D' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/conf.d/supervisord.conf\nRUN ldconfig \\\n && apt-get remove -y --purge build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /data/crits\n#  Expose ports 8443 and 27017 from the container to the host\nEXPOSE 8443/tcp 27017/tcp\nENTRYPOINT /usr/bin/supervisord --user=nonroot -c /etc/supervisor/conf.d/supervisord.conf &; > /data/log/startup.log; sleep 5 ; rm /data/db/mongod.lock ; /usr/bin/mongod --fork --logpath /data/crits/logs/mongodb.log --logappend --nohttpinterface --dbpath /data/db --smallfiles \\\n && python /data/crits/manage.py create_default_collections \\\n && python /data/crits/manage.py users -a -A -e \"nonroot@crits.local\" -f \"Nonroot\" -l \"User\" -o \"REMnux\" -u \"nonroot\" > /dev/null \\\n && python /data/crits/manage.py setconfig allowed_hosts \"*\" \\\n && printf \"\\n\" \\\n && echo \"To access CRITS user interface, go https://localhost:8443 and use the following credentials:\" \\\n && printf \"\\n\" \\\n && echo \"Username: nonroot\" \\\n && echo -n \"Password: \" \\\n && python /data/crits/manage.py users -u nonroot -r 2> /dev/null | grep ^New | awk -F: '{print $2}' \\\n && printf \"\\n\" \\\n && echo \"Please change the temporary password upon successful login to the web interface by clicking on 'Nonroot User' near the top left panel and selecting 'Change Password'.\" \\\n && printf \"\\n\" \\\n && echo \"If changes made to the CRITs application require a restart of the web server, run 'service apache2 stop' and supervisor will automatically restart the web server for you.\" \\\n && printf \"\\n\" \\\n && /bin/bash\n","injectedSmells":[],"originalDockerfileHash":"54f7fc605b2417b1ba826069959eaa9b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   This Docker image encapsulates the Collaborative Research Into Threats (CRITs)\n#   malware and threat repository by The MITRE Corporation from https://crits.github.io/\n#\n#   To run this image after installing Docker, use a command like this, replacing “~/crits-data\"\n#   with the path to the location for storing CRITs data, indefinitely:\n#\n#   sudo docker run --rm -it -v ~/crits-data:/home/nonroot/workdir -p 8443:8443 remnux/crits \n#\n#   Before running CRITs, create the ~/crits-data directory and make it world-accessible\n#   (“chmod a+xwr\").\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LC_ALL=\"C\"\nUSER root\nRUN apt-get update -qq \\\n && apt-get install software-properties-common -y \\\n && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 \\\n && echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/mongodb.list \\\n && apt-add-repository -y universe \\\n && apt-get update -qq \\\n && apt-get install apache2 build-essential curl git libevent-dev libz-dev libjpeg-dev libfuzzy-dev libldap2-dev libpcap-dev libpcre3-dev libsasl2-dev libssl-dev libtool libxml2-dev libxslt1-dev libyaml-dev mongodb-org numactl p7zip-full python-dev python-pip ssdeep swig supervisor upx vim wget zip libapache2-mod-wsgi -y --fix-missing \\\n && cp /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf \\\n && ldconfig\n#   Setup supervisord to manage apache and mongod\nRUN sed -i 's/^\\[supervisord\\]$/&\\nnodaemon\\=true\\nlogfile\\=\\/data\\/log\\/supervisord\\.log\\npidfile\\=\\/data\\/run\\/supervisord\\.pid\\n\\n\\[program\\:apache2\\]\\ncommand\\=\\/bin\\/bash\\ \\-c\\ \\\"source \\/etc\\/apache2\\/envvars\\ \\&\\&\\ exec\\ \\/usr\\/sbin\\/apache2\\ \\-DFOREGROUND\\\"\\nuser\\=nonroot\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n\\n\\[program\\:mongod\\]\\ncommand\\=\\/usr\\/bin\\/mongod\\nstdout\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nstderr\\_logfile\\=\\/data\\/log\\/supervisor\\/\\%\\(program\\_name\\)s\\.log\\nautostart\\=true\\nautorestart\\=true\\n/' /etc/supervisor/conf.d/supervisord.conf\n#   Create nonroot account\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -m -s /sbin/nologin -c \"Nonroot User\" nonroot\n#   Setup CRITs\nRUN bash -c 'mkdir -pv /data/{db,lock/apache2,log/apache2,log/supervisor,run/apache2,ssl/certs,ssl/private}' \\\n && cd /data/ \\\n && git clone https://github.com/crits/crits.git \\\n && cd crits/ \\\n && pip install -r requirements.txt\n#   For better perfomance, include the following modifications from the host (i.e. outside of Docker container).\n#    echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse && \\\n#    echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle && \\\n#    sed -i '$ i\\echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse\\necho 1 > /proc/sys/net/ipv4/tcp_tw_recycle\\n' /etc/rc.local && \\\n#   Setup environment\nRUN cd /data/crits/ \\\n && touch /data/crits/logs/crits.log \\\n && touch /data/log/startup.log \\\n && ln -f -s /data/crits/logs/crits.log /data/log/crits.log \\\n && chgrp -R nonroot logs \\\n && chmod 664 /data/crits/logs/crits.log \\\n && sed -i 's/^nonroot.*$/&www\\-data/' /etc/group \\\n && cp crits/config/database_example.py crits/config/database.py \\\n && SC=$( cat /dev/urandom | LC_CTYPE=C tr -dc 'abcdefghijklmnopqrstuvwxyz0123456789!@#%^&*(-_=+)' | fold -w 50 | head -n 1 ;) \\\n && SE=$( echo ${SC} | sed -e 's/\\\\/\\\\\\\\/g' | sed -e 's/\\//\\\\\\//g' | sed -e 's/&/\\\\\\&/g' ;) \\\n && sed -i -e \"s/^\\(SECRET_KEY = \\).*$/\\1\\'${SE}\\'/1\" crits/config/database.py\n#   Setup Apache web server\nRUN /etc/init.d/apache2 stop \\\n && rm -rf /etc/apache2/sites-available/* \\\n && cp /data/crits/extras/*.conf /etc/apache2 \\\n && cp -r /data/crits/extras/sites-available /etc/apache2 \\\n && rm /etc/apache2/sites-enabled/* \\\n && ln -f -s /etc/apache2/sites-available/default-ssl /etc/apache2/sites-enabled/default-ssl \\\n && mkdir -pv /etc/apache2/conf.d/i \\\n && usermod -a -G nonroot www-data\n#   Setup self-signed cert and perform initial setup\nRUN cd /tmp \\\n && openssl req -nodes -newkey rsa:4096 -keyout new.cert.key -out new.cert.csr -subj \"/CN=CRITs/O=REMnux/C=US\" \\\n && openssl x509 -in new.cert.csr -out new.cert.cert -req -signkey new.cert.key -days 1825 \\\n && cp new.cert.cert /data/ssl/certs/crits.crt \\\n && cp new.cert.key /data/ssl/private/crits.plain.key \\\n && chown -R nonroot /data/ \\\n && a2enmod ssl \\\n && export \"LANG=en_US.UTF-8\" \\\n && sed -i \"/export\\ LANG\\=C/ s/C/en\\_US\\.UTF\\-8/\" /etc/apache2/envvars \\\n && sed -i '$ i\\\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py mapreduces\\n0 * * * * root cd /data/crits/ \\\n && /usr/bin/python manage.py generate_notifications' /etc/crontab \\\n && sed -i 's/^CustomLog \\/var/CustomLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/^ErrorLog\\ \\/var/ErrorLog\\ \\/data/' /etc/apache2/apache2.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/envvars \\\n && sed -i 's/www\\-data/nonroot/' /etc/apache2/envvars \\\n && sed -i 's/\\ 443/\\ 8443/' /etc/apache2/ports.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default \\\n && sed -i 's/443/8443/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/etc/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/apache2/sites-available/default-ssl \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i -e :a -e '$d;N;2,3ba' -e 'P;D' /etc/supervisor/conf.d/supervisord.conf \\\n && sed -i 's/\\/var/\\/data/' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/supervisord.conf \\\n && sed -i 's/\\$CWD/\\/data\\/log\\//' /etc/supervisor/conf.d/supervisord.conf\nRUN ldconfig \\\n && apt-get remove -y --purge build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /data/crits\n#   Expose ports 8443 and 27017 from the container to the host\nEXPOSE 8443/tcp 27017/tcp\nENTRYPOINT /usr/bin/supervisord --user=nonroot -c /etc/supervisor/conf.d/supervisord.conf &; > /data/log/startup.log; sleep 5 ; rm /data/db/mongod.lock ; /usr/bin/mongod --fork --logpath /data/crits/logs/mongodb.log --logappend --nohttpinterface --dbpath /data/db --smallfiles \\\n && python /data/crits/manage.py create_default_collections \\\n && python /data/crits/manage.py users -a -A -e \"nonroot@crits.local\" -f \"Nonroot\" -l \"User\" -o \"REMnux\" -u \"nonroot\" > /dev/null \\\n && python /data/crits/manage.py setconfig allowed_hosts \"*\" \\\n && printf \"\\n\" \\\n && echo \"To access CRITS user interface, go https://localhost:8443 and use the following credentials:\" \\\n && printf \"\\n\" \\\n && echo \"Username: nonroot\" \\\n && echo -n \"Password: \" \\\n && python /data/crits/manage.py users -u nonroot -r 2> /dev/null | grep ^New | awk -F: '{print $2}' \\\n && printf \"\\n\" \\\n && echo \"Please change the temporary password upon successful login to the web interface by clicking on 'Nonroot User' near the top left panel and selecting 'Change Password'.\" \\\n && printf \"\\n\" \\\n && echo \"If changes made to the CRITs application require a restart of the web server, run 'service apache2 stop' and supervisor will automatically restart the web server for you.\" \\\n && printf \"\\n\" \\\n && /bin/bash\n","originalDockerfileUglifiedHash":"adcf0caa9adc076370cb7d8f3f372bf1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ada51cf303fce065d86ba1c6ea8dbf5864012e41.dockerfile"}