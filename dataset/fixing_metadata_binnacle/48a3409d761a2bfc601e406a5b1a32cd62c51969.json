{"seed":2329921792,"processedDockerfileHash":"537238b925d86efa336a8279213f69a4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#  MAINTAINER Gary Bradski\n#  #######################################################################\n#   Running this docker to set up a shared directory and display with the host:\n#\n#   To newly create and build this docker image:\n#   ============================================\n#\n#   Create a directory <container_name>: \n#      $ mkdir <container_name>\n#   Copy this Dockerfile into that directory:\n#      cp Dockerfile <container_name>/.\n#   Move to that directory:\n#      $ cd <container_name>\n#   To build the docker file (might have to run with sudo \n#      $ sudo docker build -t <container_name> .\n#\n#   To run the image, or run it again retaining its state \n#   =====================================================\n#      but also exporting display from the container and\n#      sharing a directory between host and container:\n#\n#   Allow other processes to share the display:\n#      $ xhost +    #Allows or other processes to capture (show) the display\n#   Now run the docker (Usually $DISPLAY is :0) and allow use of the camera -- you may need sudo privalage\n#      $ sudo docker run  -it  -e DISPLAY=$DISPLAY  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n#                         --device /dev/video0 \\\n#                         -v /<path_to_a host_directory>/<directory_on_host>/:/<directory_path/name>/  <container_name>\n#\n#   =======================================================\n#   Handy docker commands:\n#   List all the docker images\n#      $ sudo docker ps -a  \n#   If the docker image is stopped (otherwise can skip the first command below if not stopped)\n#      $ sudo docker start <container ID from ps -a above>\n#      $ sudo docker attach <container ID from ps -a above>\n#  #######################################################################\n#   This is a docker file which will, from scratch:\n#\n#     * pull in all the dependencies needed for OpenCV 3.2 including python 2 dependencies\n#     * pull in OpenCV 3.2 and opencv_contrib and build them\n#         + executable files end up in opencv-3.2.0/build/bin\n#     * pull in the Learning OpenCV 3 example code and build it\n#         + executable files end up in Learning_OpenCV-3_examples/build\n#     * To get to the top level directory, just type: cd\n#\n#   If you just want to do this \"by hand\" in your home, replace the \"RUN\"s below with \"sudo\"\n#\n#   This Docker uses the ubuntu 16.04 version of ffmpeg, which is older than the ones in my other dockerfiles.\n#   this shouldn't cause you any problems but definitely *DO NOT* use this for generating audiofiles / movies for redistribution.\n#\n#   But it is somewhat less capable than the ones in the ffmpeg containers.\n#  #######################################################################\n#   First: get all the dependencies:\n#\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends cmake=3.5.1-1ubuntu3 git=1:2.7.4-0ubuntu1.10 libgtk2.0-dev=2.24.30-1ubuntu1.16.04.2 pkg-config=0.29.1-0ubuntu1 libavcodec-dev=7:2.8.17-0ubuntu0.1 libavformat-dev=7:2.8.17-0ubuntu0.1 libswscale-dev=7:2.8.17-0ubuntu0.1 python-dev=2.7.12-1~16.04 python-numpy=1:1.11.0-1ubuntu1 libtbb2=4.4~20151115-0ubuntu3 libtbb-dev=4.4~20151115-0ubuntu3 libjpeg-dev=8c-2ubuntu8 libpng-dev libtiff-dev libjasper-dev=1.900.1-debian1-2.4ubuntu1.3 libdc1394-22-dev=2.2.4-1 unzip=6.0-20ubuntu1.1 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 -y )\n#   Just get a simple editor for convienience (you could just cancel this line)\nRUN (apt-get update ;apt-get install --no-install-recommends vim=2:7.4.1689-3ubuntu1.5 -y )\n#   Second: get and build OpenCV 3.2\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8 \\\n && make install \\\n && cd \\\n && rm 3.2.0.zip\n#   Third: install and build opencv_contrib\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0/build \\\n && cmake -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.2.0/modules/ .. \\\n && make -j8 \\\n && make install \\\n && cd ../.. \\\n && rm 3.2.0.zip\n#   Forth: get and build the Learning OpenCV 3 examples:\n#      I copy the needed data to where the executables will be: opencv-3.2.0/build/bin\n#\nRUN cd \\\n && git clone https://github.com/oreillymedia/Learning-OpenCV-3_examples.git \\\n && cd Learning-OpenCV-3_examples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8\n#  You could then run python and do your stuff...\n#  CMD [\"python\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n# MAINTAINER Gary Bradski\n# #######################################################################\n#  Running this docker to set up a shared directory and display with the host:\n#\n#  To newly create and build this docker image:\n#  ============================================\n#\n#  Create a directory <container_name>: \n#     $ mkdir <container_name>\n#  Copy this Dockerfile into that directory:\n#     cp Dockerfile <container_name>/.\n#  Move to that directory:\n#     $ cd <container_name>\n#  To build the docker file (might have to run with sudo \n#     $ sudo docker build -t <container_name> .\n#\n#  To run the image, or run it again retaining its state \n#  =====================================================\n#     but also exporting display from the container and\n#     sharing a directory between host and container:\n#\n#  Allow other processes to share the display:\n#     $ xhost +    #Allows or other processes to capture (show) the display\n#  Now run the docker (Usually $DISPLAY is :0) and allow use of the camera -- you may need sudo privalage\n#     $ sudo docker run  -it  -e DISPLAY=$DISPLAY  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n#                        --device /dev/video0 \\\n#                        -v /<path_to_a host_directory>/<directory_on_host>/:/<directory_path/name>/  <container_name>\n#\n#  =======================================================\n#  Handy docker commands:\n#  List all the docker images\n#     $ sudo docker ps -a  \n#  If the docker image is stopped (otherwise can skip the first command below if not stopped)\n#     $ sudo docker start <container ID from ps -a above>\n#     $ sudo docker attach <container ID from ps -a above>\n# #######################################################################\n#  This is a docker file which will, from scratch:\n#\n#    * pull in all the dependencies needed for OpenCV 3.2 including python 2 dependencies\n#    * pull in OpenCV 3.2 and opencv_contrib and build them\n#        + executable files end up in opencv-3.2.0/build/bin\n#    * pull in the Learning OpenCV 3 example code and build it\n#        + executable files end up in Learning_OpenCV-3_examples/build\n#    * To get to the top level directory, just type: cd\n#\n#  If you just want to do this \"by hand\" in your home, replace the \"RUN\"s below with \"sudo\"\n#\n#  This Docker uses the ubuntu 16.04 version of ffmpeg, which is older than the ones in my other dockerfiles.\n#  this shouldn't cause you any problems but definitely *DO NOT* use this for generating audiofiles / movies for redistribution.\n#\n#  But it is somewhat less capable than the ones in the ffmpeg containers.\n# #######################################################################\n#  First: get all the dependencies:\n#\nRUN apt-get update\nRUN apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev unzip -y\nRUN apt-get install wget -y\n#  Just get a simple editor for convienience (you could just cancel this line)\nRUN apt-get install vim -y\n#  Second: get and build OpenCV 3.2\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8 \\\n && make install \\\n && cd \\\n && rm 3.2.0.zip\n#  Third: install and build opencv_contrib\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0/build \\\n && cmake -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.2.0/modules/ .. \\\n && make -j8 \\\n && make install \\\n && cd ../.. \\\n && rm 3.2.0.zip\n#  Forth: get and build the Learning OpenCV 3 examples:\n#     I copy the needed data to where the executables will be: opencv-3.2.0/build/bin\n#\nRUN cd \\\n && git clone https://github.com/oreillymedia/Learning-OpenCV-3_examples.git \\\n && cd Learning-OpenCV-3_examples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8\n# You could then run python and do your stuff...\n# CMD [\"python\"]\n","injectedSmells":[],"originalDockerfileHash":"eb33876b6808177695b402548adfc900","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#  MAINTAINER Gary Bradski\n#  #######################################################################\n#   Running this docker to set up a shared directory and display with the host:\n#\n#   To newly create and build this docker image:\n#   ============================================\n#\n#   Create a directory <container_name>: \n#      $ mkdir <container_name>\n#   Copy this Dockerfile into that directory:\n#      cp Dockerfile <container_name>/.\n#   Move to that directory:\n#      $ cd <container_name>\n#   To build the docker file (might have to run with sudo \n#      $ sudo docker build -t <container_name> .\n#\n#   To run the image, or run it again retaining its state \n#   =====================================================\n#      but also exporting display from the container and\n#      sharing a directory between host and container:\n#\n#   Allow other processes to share the display:\n#      $ xhost +    #Allows or other processes to capture (show) the display\n#   Now run the docker (Usually $DISPLAY is :0) and allow use of the camera -- you may need sudo privalage\n#      $ sudo docker run  -it  -e DISPLAY=$DISPLAY  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n#                         --device /dev/video0 \\\n#                         -v /<path_to_a host_directory>/<directory_on_host>/:/<directory_path/name>/  <container_name>\n#\n#   =======================================================\n#   Handy docker commands:\n#   List all the docker images\n#      $ sudo docker ps -a  \n#   If the docker image is stopped (otherwise can skip the first command below if not stopped)\n#      $ sudo docker start <container ID from ps -a above>\n#      $ sudo docker attach <container ID from ps -a above>\n#  #######################################################################\n#   This is a docker file which will, from scratch:\n#\n#     * pull in all the dependencies needed for OpenCV 3.2 including python 2 dependencies\n#     * pull in OpenCV 3.2 and opencv_contrib and build them\n#         + executable files end up in opencv-3.2.0/build/bin\n#     * pull in the Learning OpenCV 3 example code and build it\n#         + executable files end up in Learning_OpenCV-3_examples/build\n#     * To get to the top level directory, just type: cd\n#\n#   If you just want to do this \"by hand\" in your home, replace the \"RUN\"s below with \"sudo\"\n#\n#   This Docker uses the ubuntu 16.04 version of ffmpeg, which is older than the ones in my other dockerfiles.\n#   this shouldn't cause you any problems but definitely *DO NOT* use this for generating audiofiles / movies for redistribution.\n#\n#   But it is somewhat less capable than the ones in the ffmpeg containers.\n#  #######################################################################\n#   First: get all the dependencies:\n#\nRUN apt-get update\nRUN apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev unzip -y\nRUN apt-get install wget -y\n#   Just get a simple editor for convienience (you could just cancel this line)\nRUN apt-get install vim -y\n#   Second: get and build OpenCV 3.2\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8 \\\n && make install \\\n && cd \\\n && rm 3.2.0.zip\n#   Third: install and build opencv_contrib\n#\nRUN cd \\\n && wget https://github.com/opencv/opencv_contrib/archive/3.2.0.zip \\\n && unzip 3.2.0.zip \\\n && cd opencv-3.2.0/build \\\n && cmake -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.2.0/modules/ .. \\\n && make -j8 \\\n && make install \\\n && cd ../.. \\\n && rm 3.2.0.zip\n#   Forth: get and build the Learning OpenCV 3 examples:\n#      I copy the needed data to where the executables will be: opencv-3.2.0/build/bin\n#\nRUN cd \\\n && git clone https://github.com/oreillymedia/Learning-OpenCV-3_examples.git \\\n && cd Learning-OpenCV-3_examples \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make -j8\n#  You could then run python and do your stuff...\n#  CMD [\"python\"]\n","originalDockerfileUglifiedHash":"04950155c13acf8458f9b963dc74f814","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/48a3409d761a2bfc601e406a5b1a32cd62c51969.dockerfile"}