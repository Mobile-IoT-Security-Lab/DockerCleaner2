{"seed":2207492478,"processedDockerfileHash":"e91e92dea9c0beda498d1a91d0f2a420","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=18.04\nFROM ubuntu:${DISTRO_VERSION}\nRUN apt-get update \\\n && apt-get install --no-install-recommends abi-compliance-checker abi-dumper automake build-essential ccache clang clang-format-7 cmake curl doxygen gawk git gcc g++ cmake libcurl4-openssl-dev libssl-dev libtool lsb-release make pkg-config python-pip shellcheck tar unzip wget zlib1g-dev -y\n#   By default, Ubuntu 18.04 does not install the alternatives for clang-format\n#   and clang-tidy, so we need to manually install those.\nRUN if grep -q 18.04 /etc/lsb-release ; then apt update \\\n && apt-get install --no-install-recommends clang-tidy clang-format-7 clang-tools -y ;update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-6.0 100 ;update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-7 100 ;update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-6.0 100 ; fi\n#   Install the the buildifier tool, which does not compile with the default\n#   golang compiler for Ubuntu 16.04 and Ubuntu 18.04.\nRUN wget -q -O /usr/bin/buildifier https://github.com/bazelbuild/buildtools/releases/download/0.17.2/buildifier\nRUN chmod 755 /usr/bin/buildifier\n#   Install cmake_format to automatically format the CMake list files.\n#       https://github.com/cheshirekow/cmake_format\n#   Pin this to an specific version because the formatting changes when the\n#   \"latest\" version is updated, and we do not want the builds to break just\n#   because some third party changed something.\nRUN pip install pip==23.1 --upgrade\nRUN pip install numpy==1.24.2 cmake_format==0.4.0\n#   Install Python packages used in the integration tests.\nRUN pip install flask==2.2.3 httpbin==0.7.0 gevent==22.10.2 gunicorn==20.1.0 crc32c==2.3.post0\n#   Parallelize the builds if possible. The default is chosen to work well on\n#   Travis, but developers may want to override this value when building on their\n#   workstations.\nARG NCPU=2\n#   Install Crc32c library.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j ${NCPU}\nRUN ldconfig\n#   Install protobuf using CMake. Some distributions include protobuf, but gRPC\n#   requires 3.4.x or newer, and many of those distribution use older versions.\n#   We need to install both the debug and Release version because:\n#   - When using pkg-config, only the release version works, the pkg-config\n#     file is hard-coded to search for `libprotobuf.so` (or `.a`)\n#   - When using CMake, only the version compiled with the same CMAKE_BUILD_TYPE\n#     as the dependent (gRPC or google-cloud-cpp) works.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN for build_type in \"Debug\" \"Release\"; do cmake -DCMAKE_BUILD_TYPE=\"${build_type}\" -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out-${build_type} ;cmake --build cmake-out-${build_type} --target install -- -j ${NCPU} ; done\nRUN ldconfig\n#   Many distributions include c-ares, but they do not include the CMake support\n#   files for the library, so manually install it.  c-ares requires two install\n#   steps because (1) the CMake-based build does not install pkg-config files,\n#   and (2) the Makefile-based build does not install CMake config files.\nWORKDIR /var/tmp/build\nRUN apt-get remove -y libc-ares-dev libc-ares2\nRUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j ${NCPU}\nRUN ./buildconf\nRUN ./configure\nRUN install -m 644 -D -t /usr/local/lib/pkgconfig libcares.pc\nRUN ldconfig\n#   Install gRPC. Note that we use the system's zlib and ssl libraries.\n#   For similar reasons to c-ares (see above), we need two install steps.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nRUN ls -l\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN ls -l\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -DgRPC_BUILD_TESTS=OFF -DgRPC_ZLIB_PROVIDER=package -DgRPC_SSL_PROVIDER=package -DgRPC_CARES_PROVIDER=package -DgRPC_PROTOBUF_PROVIDER=package -H. -Bcmake-out/grpc\nRUN cmake --build cmake-out/grpc --target install -- -j ${NCPU}\nRUN make install-pkg-config_c install-pkg-config_cxx install-certs\nRUN ldconfig\n#   Install googletest.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nRUN tar -xf b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nWORKDIR /var/tmp/build/googletest-b6cd405286ed8635ece71c72f118e659f4ade3fb\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out/googletest\nRUN cmake --build cmake-out/googletest --target install -- -j ${NCPU}\nRUN ldconfig\nRUN find /usr/local -type d | xargs chmod 777\n#   Install the Cloud Bigtable emulator and the Cloud Bigtable command-line\n#   client.  They are used in the integration tests.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nRUN /var/tmp/ci/install-cloud-sdk.sh\n#   Install Bazel because some of the builds need it.\nRUN /var/tmp/ci/install-bazel.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 Google LLC\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nARG DISTRO_VERSION=18.04\nFROM ubuntu:${DISTRO_VERSION}\nRUN apt-get update \\\n && apt-get install -y abi-compliance-checker abi-dumper automake build-essential ccache clang clang-format-7 cmake curl doxygen gawk git gcc g++ cmake libcurl4-openssl-dev libssl-dev libtool lsb-release make pkg-config python-pip shellcheck tar unzip wget zlib1g-dev\n#  By default, Ubuntu 18.04 does not install the alternatives for clang-format\n#  and clang-tidy, so we need to manually install those.\nRUN if grep -q 18.04 /etc/lsb-release ; then apt update \\\n && apt-get install -y clang-tidy clang-format-7 clang-tools ;update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-6.0 100 ;update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-7 100 ;update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-6.0 100 ; fi\n#  Install the the buildifier tool, which does not compile with the default\n#  golang compiler for Ubuntu 16.04 and Ubuntu 18.04.\nRUN wget -q -O /usr/bin/buildifier https://github.com/bazelbuild/buildtools/releases/download/0.17.2/buildifier\nRUN chmod 755 /usr/bin/buildifier\n#  Install cmake_format to automatically format the CMake list files.\n#      https://github.com/cheshirekow/cmake_format\n#  Pin this to an specific version because the formatting changes when the\n#  \"latest\" version is updated, and we do not want the builds to break just\n#  because some third party changed something.\nRUN pip install pip --upgrade\nRUN pip install numpy cmake_format==0.4.0\n#  Install Python packages used in the integration tests.\nRUN pip install flask httpbin gevent gunicorn crc32c\n#  Parallelize the builds if possible. The default is chosen to work well on\n#  Travis, but developers may want to override this value when building on their\n#  workstations.\nARG NCPU=2\n#  Install Crc32c library.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j ${NCPU}\nRUN ldconfig\n#  Install protobuf using CMake. Some distributions include protobuf, but gRPC\n#  requires 3.4.x or newer, and many of those distribution use older versions.\n#  We need to install both the debug and Release version because:\n#  - When using pkg-config, only the release version works, the pkg-config\n#    file is hard-coded to search for `libprotobuf.so` (or `.a`)\n#  - When using CMake, only the version compiled with the same CMAKE_BUILD_TYPE\n#    as the dependent (gRPC or google-cloud-cpp) works.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN for build_type in \"Debug\" \"Release\"; do cmake -DCMAKE_BUILD_TYPE=\"${build_type}\" -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out-${build_type} ;cmake --build cmake-out-${build_type} --target install -- -j ${NCPU} ; done\nRUN ldconfig\n#  Many distributions include c-ares, but they do not include the CMake support\n#  files for the library, so manually install it.  c-ares requires two install\n#  steps because (1) the CMake-based build does not install pkg-config files,\n#  and (2) the Makefile-based build does not install CMake config files.\nWORKDIR /var/tmp/build\nRUN apt-get remove -y libc-ares-dev libc-ares2\nRUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j ${NCPU}\nRUN ./buildconf\nRUN ./configure\nRUN install -m 644 -D -t /usr/local/lib/pkgconfig libcares.pc\nRUN ldconfig\n#  Install gRPC. Note that we use the system's zlib and ssl libraries.\n#  For similar reasons to c-ares (see above), we need two install steps.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nRUN ls -l\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN ls -l\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -DgRPC_BUILD_TESTS=OFF -DgRPC_ZLIB_PROVIDER=package -DgRPC_SSL_PROVIDER=package -DgRPC_CARES_PROVIDER=package -DgRPC_PROTOBUF_PROVIDER=package -H. -Bcmake-out/grpc\nRUN cmake --build cmake-out/grpc --target install -- -j ${NCPU}\nRUN make install-pkg-config_c install-pkg-config_cxx install-certs\nRUN ldconfig\n#  Install googletest.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nRUN tar -xf b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nWORKDIR /var/tmp/build/googletest-b6cd405286ed8635ece71c72f118e659f4ade3fb\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out/googletest\nRUN cmake --build cmake-out/googletest --target install -- -j ${NCPU}\nRUN ldconfig\nRUN find /usr/local -type d | xargs chmod 777\n#  Install the Cloud Bigtable emulator and the Cloud Bigtable command-line\n#  client.  They are used in the integration tests.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nRUN /var/tmp/ci/install-cloud-sdk.sh\n#  Install Bazel because some of the builds need it.\nRUN /var/tmp/ci/install-bazel.sh\n","injectedSmells":[],"originalDockerfileHash":"63a2f37c74b1eded79f1fb8e8393a97e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=18.04\nFROM ubuntu:${DISTRO_VERSION}\nRUN apt-get update \\\n && apt-get install abi-compliance-checker abi-dumper automake build-essential ccache clang clang-format-7 cmake curl doxygen gawk git gcc g++ cmake libcurl4-openssl-dev libssl-dev libtool lsb-release make pkg-config python-pip shellcheck tar unzip wget zlib1g-dev -y\n#   By default, Ubuntu 18.04 does not install the alternatives for clang-format\n#   and clang-tidy, so we need to manually install those.\nRUN if grep -q 18.04 /etc/lsb-release ; then apt update \\\n && apt-get install clang-tidy clang-format-7 clang-tools -y ;update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-6.0 100 ;update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-7 100 ;update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-6.0 100 ; fi\n#   Install the the buildifier tool, which does not compile with the default\n#   golang compiler for Ubuntu 16.04 and Ubuntu 18.04.\nRUN wget -q -O /usr/bin/buildifier https://github.com/bazelbuild/buildtools/releases/download/0.17.2/buildifier\nRUN chmod 755 /usr/bin/buildifier\n#   Install cmake_format to automatically format the CMake list files.\n#       https://github.com/cheshirekow/cmake_format\n#   Pin this to an specific version because the formatting changes when the\n#   \"latest\" version is updated, and we do not want the builds to break just\n#   because some third party changed something.\nRUN pip install pip --upgrade\nRUN pip install numpy cmake_format==0.4.0\n#   Install Python packages used in the integration tests.\nRUN pip install flask httpbin gevent gunicorn crc32c\n#   Parallelize the builds if possible. The default is chosen to work well on\n#   Travis, but developers may want to override this value when building on their\n#   workstations.\nARG NCPU=2\n#   Install Crc32c library.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j ${NCPU}\nRUN ldconfig\n#   Install protobuf using CMake. Some distributions include protobuf, but gRPC\n#   requires 3.4.x or newer, and many of those distribution use older versions.\n#   We need to install both the debug and Release version because:\n#   - When using pkg-config, only the release version works, the pkg-config\n#     file is hard-coded to search for `libprotobuf.so` (or `.a`)\n#   - When using CMake, only the version compiled with the same CMAKE_BUILD_TYPE\n#     as the dependent (gRPC or google-cloud-cpp) works.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN for build_type in \"Debug\" \"Release\"; do cmake -DCMAKE_BUILD_TYPE=\"${build_type}\" -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out-${build_type} ;cmake --build cmake-out-${build_type} --target install -- -j ${NCPU} ; done\nRUN ldconfig\n#   Many distributions include c-ares, but they do not include the CMake support\n#   files for the library, so manually install it.  c-ares requires two install\n#   steps because (1) the CMake-based build does not install pkg-config files,\n#   and (2) the Makefile-based build does not install CMake config files.\nWORKDIR /var/tmp/build\nRUN apt-get remove -y libc-ares-dev libc-ares2\nRUN wget -q https://github.com/c-ares/c-ares/archive/cares-1_14_0.tar.gz\nRUN tar -xf cares-1_14_0.tar.gz\nWORKDIR /var/tmp/build/c-ares-cares-1_14_0\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j ${NCPU}\nRUN ./buildconf\nRUN ./configure\nRUN install -m 644 -D -t /usr/local/lib/pkgconfig libcares.pc\nRUN ldconfig\n#   Install gRPC. Note that we use the system's zlib and ssl libraries.\n#   For similar reasons to c-ares (see above), we need two install steps.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nRUN ls -l\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN ls -l\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -DgRPC_BUILD_TESTS=OFF -DgRPC_ZLIB_PROVIDER=package -DgRPC_SSL_PROVIDER=package -DgRPC_CARES_PROVIDER=package -DgRPC_PROTOBUF_PROVIDER=package -H. -Bcmake-out/grpc\nRUN cmake --build cmake-out/grpc --target install -- -j ${NCPU}\nRUN make install-pkg-config_c install-pkg-config_cxx install-certs\nRUN ldconfig\n#   Install googletest.\nWORKDIR /var/tmp/build\nRUN wget -q https://github.com/google/googletest/archive/b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nRUN tar -xf b6cd405286ed8635ece71c72f118e659f4ade3fb.tar.gz\nWORKDIR /var/tmp/build/googletest-b6cd405286ed8635ece71c72f118e659f4ade3fb\nRUN cmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_SHARED_LIBS=yes -H. -Bcmake-out/googletest\nRUN cmake --build cmake-out/googletest --target install -- -j ${NCPU}\nRUN ldconfig\nRUN find /usr/local -type d | xargs chmod 777\n#   Install the Cloud Bigtable emulator and the Cloud Bigtable command-line\n#   client.  They are used in the integration tests.\nCOPY . /var/tmp/ci\nWORKDIR /var/tmp/downloads\nRUN /var/tmp/ci/install-cloud-sdk.sh\n#   Install Bazel because some of the builds need it.\nRUN /var/tmp/ci/install-bazel.sh\n","originalDockerfileUglifiedHash":"49050ed6fab2fdd776bd2aa65385ed92","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9b1d297b224be56a2201636bd2165d82e4d0302b.dockerfile"}