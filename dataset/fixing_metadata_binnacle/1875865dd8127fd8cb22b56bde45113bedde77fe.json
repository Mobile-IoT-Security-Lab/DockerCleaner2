{"seed":74609990,"processedDockerfileHash":"c4fad10bc974de68d161f7d56b56ebb4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM python:3.7-stretch\nLABEL maintainer=\"Sebastian Ramirez <tiangolo@gmail.com>\"\n#   Standard set up Nginx\nENV NGINX_VERSION=\"1.15.8-1~stretch\"\nENV NJS_VERSION=\"1.15.8.0.2.7-1~stretch\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 ; found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --no-tty --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION} nginx-module-xslt=${NGINX_VERSION} nginx-module-geoip=${NGINX_VERSION} nginx-module-image-filter=${NGINX_VERSION} nginx-module-njs=${NJS_VERSION} \" \\\n && case \"$dpkgArch\" in (amd64|i386) echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update ;;(*) echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && apt-get update \\\n && apt-get build-dep -y $nginxPackages \\\n && (cd \"$tempDir\" \\\n && DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile $nginxPackages ) \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && ls -lAFh \"$tempDir\" \\\n && (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) \\\n && grep '^Package: ' \"$tempDir/Packages\" \\\n && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n && apt-get -o Acquire::GzipIndexes=false update ;; esac \\\n && apt-get install --no-install-recommends gettext-base $nginxPackages --no-install-suggests -y \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\n#   Removed the section that breaks pip installations\n#   && apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates\n#   added --no-tty to apt-key adv as without it it breaks (even though it works in official Nginx)\n#   apt-key adv --no-tty\n#   Standard set up Nginx finished\n#   Expose 443, in case of LTS / HTTPS\nEXPOSE 443/tcp\n#   Install uWSGI\nRUN pip install uwsgi==2.0.21\n#   Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n#   Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY uwsgi.ini /etc/uwsgi/\n#   Install Supervisord\nRUN apt-get update \\\n && apt-get install --no-install-recommends supervisor -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Custom Supervisord config\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n#   Which uWSGI .ini file should be used, to make it customizable\nENV UWSGI_INI=\"/app/uwsgi.ini\"\n#   By default, run 2 processes\nENV UWSGI_CHEAPER=\"2\"\n#   By default, when on demand, run up to 16 processes\nENV UWSGI_PROCESSES=\"16\"\n#   By default, allow unlimited file sizes, modify it to limit the file sizes\n#   To have a maximum of 1 MB (Nginx's default) change the line to:\n#   ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD=\"0\"\n#   By default, Nginx will run a single worker process, setting it to auto\n#   will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES=\"1\"\n#   By default, Nginx listens on port 80.\n#   To modify this, change LISTEN_PORT environment variable.\n#   (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT=\"80\"\n#   Copy start.sh script that will check for a /app/prestart.sh script and run it before starting the app\nCOPY start.sh /start.sh\nRUN chmod +x /start.sh\n#   Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Add demo app\nCOPY ./app /app\nWORKDIR /app\n#   Run the start script, it will check for an /app/prestart.sh script (e.g. for migrations)\n#   And then will start Supervisor, which in turn will start Nginx and uWSGI\nCMD [\"/start.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:3.7-stretch\nLABEL maintainer=\"Sebastian Ramirez <tiangolo@gmail.com>\"\n#  Standard set up Nginx\nENV NGINX_VERSION=\"1.15.8-1~stretch\"\nENV NJS_VERSION=\"1.15.8.0.2.7-1~stretch\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 ; found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --no-tty --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION} nginx-module-xslt=${NGINX_VERSION} nginx-module-geoip=${NGINX_VERSION} nginx-module-image-filter=${NGINX_VERSION} nginx-module-njs=${NJS_VERSION} \" \\\n && case \"$dpkgArch\" in (amd64|i386) echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update ;;(*) echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && apt-get update \\\n && apt-get build-dep -y $nginxPackages \\\n && (cd \"$tempDir\" \\\n && DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile $nginxPackages ) \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && ls -lAFh \"$tempDir\" \\\n && (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) \\\n && grep '^Package: ' \"$tempDir/Packages\" \\\n && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n && apt-get -o Acquire::GzipIndexes=false update ;; esac \\\n && apt-get install --no-install-recommends gettext-base $nginxPackages --no-install-suggests -y \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#  forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\n#  Removed the section that breaks pip installations\n#  && apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates\n#  added --no-tty to apt-key adv as without it it breaks (even though it works in official Nginx)\n#  apt-key adv --no-tty\n#  Standard set up Nginx finished\n#  Expose 443, in case of LTS / HTTPS\nEXPOSE 443/tcp\n#  Install uWSGI\nRUN pip install uwsgi\n#  Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n#  Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY uwsgi.ini /etc/uwsgi/\n#  Install Supervisord\nRUN apt-get update \\\n && apt-get install supervisor -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Custom Supervisord config\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n#  Which uWSGI .ini file should be used, to make it customizable\nENV UWSGI_INI=\"/app/uwsgi.ini\"\n#  By default, run 2 processes\nENV UWSGI_CHEAPER=\"2\"\n#  By default, when on demand, run up to 16 processes\nENV UWSGI_PROCESSES=\"16\"\n#  By default, allow unlimited file sizes, modify it to limit the file sizes\n#  To have a maximum of 1 MB (Nginx's default) change the line to:\n#  ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD=\"0\"\n#  By default, Nginx will run a single worker process, setting it to auto\n#  will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES=\"1\"\n#  By default, Nginx listens on port 80.\n#  To modify this, change LISTEN_PORT environment variable.\n#  (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT=\"80\"\n#  Copy start.sh script that will check for a /app/prestart.sh script and run it before starting the app\nCOPY start.sh /start.sh\nRUN chmod +x /start.sh\n#  Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#  Add demo app\nCOPY ./app /app\nWORKDIR /app\n#  Run the start script, it will check for an /app/prestart.sh script (e.g. for migrations)\n#  And then will start Supervisor, which in turn will start Nginx and uWSGI\nCMD [\"/start.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"43af8de60fc08bad1b9b959504727546","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:3.7-stretch\nLABEL maintainer=\"Sebastian Ramirez <tiangolo@gmail.com>\"\n#   Standard set up Nginx\nENV NGINX_VERSION=\"1.15.8-1~stretch\"\nENV NJS_VERSION=\"1.15.8.0.2.7-1~stretch\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends gnupg1 apt-transport-https ca-certificates --no-install-suggests -y \\\n && NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 ; found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $NGINX_GPGKEY from $server\" ;apt-key adv --no-tty --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $NGINX_GPGKEY\" >&2 \\\n && exit 1 ; apt-get remove --purge --auto-remove -y gnupg1 \\\n && rm -rf /var/lib/apt/lists/* \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION} nginx-module-xslt=${NGINX_VERSION} nginx-module-geoip=${NGINX_VERSION} nginx-module-image-filter=${NGINX_VERSION} nginx-module-njs=${NJS_VERSION} \" \\\n && case \"$dpkgArch\" in (amd64|i386) echo \"deb https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && apt-get update ;;(*) echo \"deb-src https://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && apt-get update \\\n && apt-get build-dep -y $nginxPackages \\\n && (cd \"$tempDir\" \\\n && DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile $nginxPackages ) \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && ls -lAFh \"$tempDir\" \\\n && (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) \\\n && grep '^Package: ' \"$tempDir/Packages\" \\\n && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n && apt-get -o Acquire::GzipIndexes=false update ;; esac \\\n && apt-get install --no-install-recommends gettext-base $nginxPackages --no-install-suggests -y \\\n && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\n#   Removed the section that breaks pip installations\n#   && apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates\n#   added --no-tty to apt-key adv as without it it breaks (even though it works in official Nginx)\n#   apt-key adv --no-tty\n#   Standard set up Nginx finished\n#   Expose 443, in case of LTS / HTTPS\nEXPOSE 443/tcp\n#   Install uWSGI\nRUN pip install uwsgi\n#   Remove default configuration from Nginx\nRUN rm /etc/nginx/conf.d/default.conf\n#   Copy the base uWSGI ini file to enable default dynamic uwsgi process number\nCOPY uwsgi.ini /etc/uwsgi/\n#   Install Supervisord\nRUN apt-get update \\\n && apt-get install supervisor -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Custom Supervisord config\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\n#   Which uWSGI .ini file should be used, to make it customizable\nENV UWSGI_INI=\"/app/uwsgi.ini\"\n#   By default, run 2 processes\nENV UWSGI_CHEAPER=\"2\"\n#   By default, when on demand, run up to 16 processes\nENV UWSGI_PROCESSES=\"16\"\n#   By default, allow unlimited file sizes, modify it to limit the file sizes\n#   To have a maximum of 1 MB (Nginx's default) change the line to:\n#   ENV NGINX_MAX_UPLOAD 1m\nENV NGINX_MAX_UPLOAD=\"0\"\n#   By default, Nginx will run a single worker process, setting it to auto\n#   will create a worker for each CPU core\nENV NGINX_WORKER_PROCESSES=\"1\"\n#   By default, Nginx listens on port 80.\n#   To modify this, change LISTEN_PORT environment variable.\n#   (in a Dockerfile or with an option for `docker run`)\nENV LISTEN_PORT=\"80\"\n#   Copy start.sh script that will check for a /app/prestart.sh script and run it before starting the app\nCOPY start.sh /start.sh\nRUN chmod +x /start.sh\n#   Copy the entrypoint that will generate Nginx additional configs\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Add demo app\nCOPY ./app /app\nWORKDIR /app\n#   Run the start script, it will check for an /app/prestart.sh script (e.g. for migrations)\n#   And then will start Supervisor, which in turn will start Nginx and uWSGI\nCMD [\"/start.sh\"]\n","originalDockerfileUglifiedHash":"28623cdbe9f2f7040a90c3e3f9ffd522","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1875865dd8127fd8cb22b56bde45113bedde77fe.dockerfile"}