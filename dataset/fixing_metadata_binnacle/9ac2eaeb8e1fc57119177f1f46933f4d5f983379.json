{"seed":3907832223,"processedDockerfileHash":"f3584b64300abd7adf5d6cfda6711ae2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM joynr-base:latest\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"\n#  ##################################################\n#   enable gold linker\n#  ##################################################\nRUN update-alternatives --set ld /usr/bin/ld.gold\n#  ##################################################\n#   install clang 3.5 for formatting\n#  ##################################################\nRUN cd /tmp/ \\\n && wget http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format --strip-components=2 \\\n && mv clang-format /usr/local/bin/ \\\n && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz\n#  ##################################################\n#   install rpm-build required by CMake / CPack\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y rpm-build \\\n && dnf clean all\n#  ##################################################\n#   install spdlog\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/gabime/spdlog.git \\\n && cd spdlog \\\n && git checkout 799ba2a57bb16b921099bd9ab64a513e4ebe4217 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf spdlog\n#  ##################################################\n#   install websocket++\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/zaphoyd/websocketpp.git \\\n && cd websocketpp \\\n && git checkout 0.8.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf websocketpp\n#  ##################################################\n#   install DLT\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/GENIVI/dlt-daemon \\\n && cd dlt-daemon \\\n && git checkout v2.15.0 \\\n && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf dlt-daemon \\\n && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n#  ##################################################\n#   install boost\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y boost boost-devel \\\n && dnf clean all\n#  ##################################################\n#   install MoCOCrW\n#  ##################################################\nRUN export MoCOCrW_VERSION=openssl1.1 \\\n && . /etc/profile \\\n && cd /opt \\\n && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n && cd MoCOCrW \\\n && git checkout $MoCOCrW_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_TESTING=Off .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt \\\n && rm -rf MoCOCrW\n#  ##################################################\n#   install flatbuffers\n#  ##################################################\nRUN export FLATBUFFERS_VERSION=v1.10.0 \\\n && . /etc/profile \\\n && cd /tmp \\\n && git clone https://github.com/google/flatbuffers.git \\\n && cd flatbuffers \\\n && git checkout $FLATBUFFERS_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/flatbuffers\n#  ##################################################\n#   install valgrind\n#  ##################################################\nRUN export VALGRIND_VERSION=3.13.0 \\\n && cd /tmp \\\n && wget https://sourceware.org/pub/valgrind/valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && tar xf valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && cd valgrind-$VALGRIND_VERSION \\\n && ./configure \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/valgrind-$VALGRIND_VERSION /tmp/valgrind-$VALGRIND_VERSION.tar.bz2\n#   DLT installs itself in /usr/local/lib64\nENV PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig\"\n#  ##################################################\n#   Copy build scripts\n#  ##################################################\nCOPY scripts /data/scripts\n#  ##################################################\n#   setup build environment\n#  ##################################################\nRUN mkdir -p /home/joynr/\nRUN mkdir /home/joynr/build\nRUN date -R > /data/timestamp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM joynr-base:latest\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"\n# ##################################################\n#  enable gold linker\n# ##################################################\nRUN update-alternatives --set ld /usr/bin/ld.gold\n# ##################################################\n#  install clang 3.5 for formatting\n# ##################################################\nRUN cd /tmp/ \\\n && wget http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format --strip-components=2 \\\n && mv clang-format /usr/local/bin/ \\\n && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz\n# ##################################################\n#  install rpm-build required by CMake / CPack\n# ##################################################\nRUN dnf update -y \\\n && dnf install -y rpm-build \\\n && dnf clean all\n# ##################################################\n#  install spdlog\n# ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/gabime/spdlog.git \\\n && cd spdlog \\\n && git checkout 799ba2a57bb16b921099bd9ab64a513e4ebe4217 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf spdlog\n# ##################################################\n#  install websocket++\n# ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/zaphoyd/websocketpp.git \\\n && cd websocketpp \\\n && git checkout 0.8.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf websocketpp\n# ##################################################\n#  install DLT\n# ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/GENIVI/dlt-daemon \\\n && cd dlt-daemon \\\n && git checkout v2.15.0 \\\n && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf dlt-daemon \\\n && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n# ##################################################\n#  install boost\n# ##################################################\nRUN dnf update -y \\\n && dnf install -y boost boost-devel \\\n && dnf clean all\n# ##################################################\n#  install MoCOCrW\n# ##################################################\nRUN export MoCOCrW_VERSION=openssl1.1 \\\n && . /etc/profile \\\n && cd /opt \\\n && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n && cd MoCOCrW \\\n && git checkout $MoCOCrW_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_TESTING=Off .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt \\\n && rm -rf MoCOCrW\n# ##################################################\n#  install flatbuffers\n# ##################################################\nRUN export FLATBUFFERS_VERSION=v1.10.0 \\\n && . /etc/profile \\\n && cd /tmp \\\n && git clone https://github.com/google/flatbuffers.git \\\n && cd flatbuffers \\\n && git checkout $FLATBUFFERS_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/flatbuffers\n# ##################################################\n#  install valgrind\n# ##################################################\nRUN export VALGRIND_VERSION=3.13.0 \\\n && cd /tmp \\\n && wget https://sourceware.org/pub/valgrind/valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && tar xf valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && cd valgrind-$VALGRIND_VERSION \\\n && ./configure \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/valgrind-$VALGRIND_VERSION /tmp/valgrind-$VALGRIND_VERSION.tar.bz2\n#  DLT installs itself in /usr/local/lib64\nENV PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig\"\n# ##################################################\n#  Copy build scripts\n# ##################################################\nCOPY scripts /data/scripts\n# ##################################################\n#  setup build environment\n# ##################################################\nRUN mkdir -p /home/joynr/\nRUN mkdir /home/joynr/build\nRUN date -R > /data/timestamp\n","injectedSmells":[],"originalDockerfileHash":"490ea4ab044896928163552fe8ecc99f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM joynr-base:latest\nENV PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"\n#  ##################################################\n#   enable gold linker\n#  ##################################################\nRUN update-alternatives --set ld /usr/bin/ld.gold\n#  ##################################################\n#   install clang 3.5 for formatting\n#  ##################################################\nRUN cd /tmp/ \\\n && wget http://llvm.org/releases/3.5.0/clang+llvm-3.5.0-x86_64-fedora20.tar.xz \\\n && tar -xf clang+llvm-3.5.0-x86_64-fedora20.tar.xz clang+llvm-3.5.0-x86_64-fedora20/bin/clang-format --strip-components=2 \\\n && mv clang-format /usr/local/bin/ \\\n && rm -f clang+llvm-3.5.0-x86_64-fedora20.tar.xz\n#  ##################################################\n#   install rpm-build required by CMake / CPack\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y rpm-build \\\n && dnf clean all\n#  ##################################################\n#   install spdlog\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/gabime/spdlog.git \\\n && cd spdlog \\\n && git checkout 799ba2a57bb16b921099bd9ab64a513e4ebe4217 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf spdlog\n#  ##################################################\n#   install websocket++\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/zaphoyd/websocketpp.git \\\n && cd websocketpp \\\n && git checkout 0.8.1 \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf websocketpp\n#  ##################################################\n#   install DLT\n#  ##################################################\nRUN cd /opt \\\n && . /etc/profile \\\n && git clone https://github.com/GENIVI/dlt-daemon \\\n && cd dlt-daemon \\\n && git checkout v2.15.0 \\\n && sed -i 's/libdir=${exec_prefix}\\/lib/libdir=@CMAKE_INSTALL_FULL_LIBDIR@/' automotive-dlt.pc.in \\\n && sed -i 's/includedir=${exec_prefix}\\/include/includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@/' automotive-dlt.pc.in \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DWITH_DLT_DBUS=OFF -DWITH_DLT_TESTS=OFF -DWITH_DLT_EXAMPLES=OFF \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt/ \\\n && rm -rf dlt-daemon \\\n && echo '/usr/local/lib64' > /etc/ld.so.conf.d/dlt.conf\n#  ##################################################\n#   install boost\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y boost boost-devel \\\n && dnf clean all\n#  ##################################################\n#   install MoCOCrW\n#  ##################################################\nRUN export MoCOCrW_VERSION=openssl1.1 \\\n && . /etc/profile \\\n && cd /opt \\\n && git clone https://github.com/bmwcarit/MoCOCrW.git \\\n && cd MoCOCrW \\\n && git checkout $MoCOCrW_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_TESTING=Off .. \\\n && make install -j\"$( nproc ;)\" \\\n && cd /opt \\\n && rm -rf MoCOCrW\n#  ##################################################\n#   install flatbuffers\n#  ##################################################\nRUN export FLATBUFFERS_VERSION=v1.10.0 \\\n && . /etc/profile \\\n && cd /tmp \\\n && git clone https://github.com/google/flatbuffers.git \\\n && cd flatbuffers \\\n && git checkout $FLATBUFFERS_VERSION \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/flatbuffers\n#  ##################################################\n#   install valgrind\n#  ##################################################\nRUN export VALGRIND_VERSION=3.13.0 \\\n && cd /tmp \\\n && wget https://sourceware.org/pub/valgrind/valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && tar xf valgrind-$VALGRIND_VERSION.tar.bz2 \\\n && cd valgrind-$VALGRIND_VERSION \\\n && ./configure \\\n && make install -j\"$( nproc ;)\" \\\n && rm -rf /tmp/valgrind-$VALGRIND_VERSION /tmp/valgrind-$VALGRIND_VERSION.tar.bz2\n#   DLT installs itself in /usr/local/lib64\nENV PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:/usr/local/lib64/pkgconfig\"\n#  ##################################################\n#   Copy build scripts\n#  ##################################################\nCOPY scripts /data/scripts\n#  ##################################################\n#   setup build environment\n#  ##################################################\nRUN mkdir -p /home/joynr/\nRUN mkdir /home/joynr/build\nRUN date -R > /data/timestamp\n","originalDockerfileUglifiedHash":"2eae3baa3f34fbc306d781f552decd34","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9ac2eaeb8e1fc57119177f1f46933f4d5f983379.dockerfile"}