{"seed":3256120575,"processedDockerfileHash":"164e1cb74c9afa1a6269ceb46f63da30","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Docker container for running Brayns as a service\n#   Check https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user for best practices.\n#   This Dockerfile leverages multi-stage builds, available since Docker 17.05\n#   See: https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\n#   Image where Brayns is built\nFROM debian:buster-slim AS builder\nLABEL maintainer=\"bbp-svc-viz@groupes.epfl.ch\"\nARG DIST_PATH=/app/dist\n#   Install packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.6 cmake=3.13.4-1 git=1:2.20.1-2+deb10u8 ninja-build=1.8.2-1 libarchive-dev=3.3.3-4+deb10u3 libassimp-dev=4.1.0~dfsg-5 libboost-date-time-dev=1.67.0.1 libboost-filesystem-dev=1.67.0.1 libboost-iostreams-dev=1.67.0.1 libboost-program-options-dev=1.67.0.1 libboost-regex-dev=1.67.0.1 libboost-serialization-dev=1.67.0.1 libboost-system-dev=1.67.0.1 libboost-test-dev=1.67.0.1 libfreeimage-dev=3.18.0+ds2-1+deb10u1 libhdf5-serial-dev libtbb-dev=2018~U6-4 libturbojpeg0-dev=1:1.5.2-2+deb10u1 libuv1-dev=1.24.1-1+deb10u1 pkg-config=0.29-6 wget=1.20.1-1.1 ca-certificates=20200601~deb10u2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Get ISPC\n#   https://ispc.github.io/downloads.html\nARG ISPC_VERSION=1.9.2\nARG ISPC_DIR=ispc-v${ISPC_VERSION}-linux\nARG ISPC_PATH=/app/$ISPC_DIR\nRUN mkdir -p ${ISPC_PATH} \\\n && wget http://netix.dl.sourceforge.net/project/ispcmirror/v${ISPC_VERSION}/${ISPC_DIR}.tar.gz \\\n && tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1 \\\n && rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples\n#   Add ispc bin to the PATH\nENV PATH=\"$PATH:${ISPC_PATH}\"\n#   Install embree\n#   https://github.com/embree/embree/releases\nARG EMBREE_VERSION=3.2.3\nARG EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz\nRUN mkdir -p ${DIST_PATH} \\\n && wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE} \\\n && tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1 \\\n && rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc\n#   Install OSPRay\n#   https://github.com/ospray/ospray/releases\nARG OSPRAY_BRANCH=release-1.7.x\nARG OSPRAY_SRC=/app/ospray\nRUN mkdir -p ${OSPRAY_SRC} \\\n && git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC} \\\n && cd ${OSPRAY_SRC} \\\n && git checkout ${OSPRAY_BRANCH} \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja -DOSPRAY_ENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#   Install libwebsockets (2.0 from Debian is not reliable)\n#   https://github.com/warmcat/libwebsockets/releases\nARG LWS_VERSION=2.3.0\nARG LWS_SRC=/app/libwebsockets\nARG LWS_FILE=v${LWS_VERSION}.tar.gz\nRUN mkdir -p ${LWS_SRC} \\\n && wget https://github.com/warmcat/libwebsockets/archive/${LWS_FILE} \\\n && tar zxvf ${LWS_FILE} -C ${LWS_SRC} --strip-components=1 \\\n && cd ${LWS_SRC} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DLWS_STATIC_PIC=ON -DLWS_WITH_SSL=OFF -DLWS_WITH_ZLIB=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_LIBUV=ON -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#   Set working dir and copy Brayns assets\nARG BRAYNS_SRC=/app/brayns\nWORKDIR /app\nCOPY . ${BRAYNS_SRC}\n#   Install Brayns\n#   https://github.com/BlueBrain/Brayns\nRUN cksum ${BRAYNS_SRC}/.gitsubprojects \\\n && cd ${BRAYNS_SRC} \\\n && git submodule update --init --recursive \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH}:${DIST_PATH}/lib/cmake/libwebsockets cmake .. -GNinja -DBRAYNS_CIRCUITVIEWER_ENABLED=ON -DBRAYNS_NETWORKING_ENABLED=ON -DCLONE_SUBPROJECTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${DIST_PATH} -DBUILD_PYTHON_BINDINGS=OFF \\\n && ninja mvd-tool perceptualdiff Brayns-install Brayns-tests \\\n && rm -rf ${DIST_PATH}/include ${DIST_PATH}/cmake ${DIST_PATH}/share\n#   Final image, containing only Brayns and libraries required to run it\nFROM debian:buster-slim\nARG DIST_PATH=/app/dist\nRUN apt-get update \\\n && apt-get install --no-install-recommends libarchive13=3.3.3-4+deb10u3 libassimp4=4.1.0~dfsg-5 libboost-filesystem1.67.0=1.67.0-13+deb10u1 libboost-program-options1.67.0=1.67.0-13+deb10u1 libboost-regex1.67.0=1.67.0-13+deb10u1 libboost-serialization1.67.0=1.67.0-13+deb10u1 libboost-system1.67.0=1.67.0-13+deb10u1 libboost-iostreams1.67.0=1.67.0-13+deb10u1 libfreeimage3=3.18.0+ds2-1+deb10u1 libgomp1=8.3.0-6 libhdf5-103=1.10.4+repack-10 libturbojpeg0=1:1.5.2-2+deb10u1 libuv1=1.24.1-1+deb10u1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   The COPY command below will:\n#   1. create a container based on the `builder` image (but do not start it)\n#      Equivalent to the `docker create` command\n#   2. create a new image layer containing the\n#      /app/dist directory of this new container\n#      Equivalent to the `docker copy` command.\nCOPY --from=builder ${DIST_PATH} ${DIST_PATH}\n#   Add binaries from dist to the PATH\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:${DIST_PATH}/lib\"\nENV PATH=\"${DIST_PATH}/bin:$PATH\"\n#   Expose a port from the container\n#   For more ports, use the `--expose` flag when running the container,\n#   see https://docs.docker.com/engine/reference/run/#expose-incoming-ports for docs.\nEXPOSE 8200/tcp\n#   When running `docker run -ti --rm -p 8200:8200 brayns`,\n#   this will be the cmd that will be executed (+ the CLI options from CMD).\n#   To ssh into the container (or override the default entry) use:\n#   `docker run -ti --rm --entrypoint bash -p 8200:8200 brayns`\n#   See https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime\n#   for more docs\nENTRYPOINT [\"braynsService\"]\nCMD [\"--http-server\", \":8200\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker container for running Brayns as a service\n#  Check https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user for best practices.\n#  This Dockerfile leverages multi-stage builds, available since Docker 17.05\n#  See: https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\n#  Image where Brayns is built\nFROM debian:buster-slim AS builder\nLABEL maintainer=\"bbp-svc-viz@groupes.epfl.ch\"\nARG DIST_PATH=/app/dist\n#  Install packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git ninja-build libarchive-dev libassimp-dev libboost-date-time-dev libboost-filesystem-dev libboost-iostreams-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-test-dev libfreeimage-dev libhdf5-serial-dev libtbb-dev libturbojpeg0-dev libuv1-dev pkg-config wget ca-certificates -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Get ISPC\n#  https://ispc.github.io/downloads.html\nARG ISPC_VERSION=1.9.2\nARG ISPC_DIR=ispc-v${ISPC_VERSION}-linux\nARG ISPC_PATH=/app/$ISPC_DIR\nRUN mkdir -p ${ISPC_PATH} \\\n && wget http://netix.dl.sourceforge.net/project/ispcmirror/v${ISPC_VERSION}/${ISPC_DIR}.tar.gz \\\n && tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1 \\\n && rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples\n#  Add ispc bin to the PATH\nENV PATH=\"$PATH:${ISPC_PATH}\"\n#  Install embree\n#  https://github.com/embree/embree/releases\nARG EMBREE_VERSION=3.2.3\nARG EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz\nRUN mkdir -p ${DIST_PATH} \\\n && wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE} \\\n && tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1 \\\n && rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc\n#  Install OSPRay\n#  https://github.com/ospray/ospray/releases\nARG OSPRAY_BRANCH=release-1.7.x\nARG OSPRAY_SRC=/app/ospray\nRUN mkdir -p ${OSPRAY_SRC} \\\n && git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC} \\\n && cd ${OSPRAY_SRC} \\\n && git checkout ${OSPRAY_BRANCH} \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja -DOSPRAY_ENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#  Install libwebsockets (2.0 from Debian is not reliable)\n#  https://github.com/warmcat/libwebsockets/releases\nARG LWS_VERSION=2.3.0\nARG LWS_SRC=/app/libwebsockets\nARG LWS_FILE=v${LWS_VERSION}.tar.gz\nRUN mkdir -p ${LWS_SRC} \\\n && wget https://github.com/warmcat/libwebsockets/archive/${LWS_FILE} \\\n && tar zxvf ${LWS_FILE} -C ${LWS_SRC} --strip-components=1 \\\n && cd ${LWS_SRC} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DLWS_STATIC_PIC=ON -DLWS_WITH_SSL=OFF -DLWS_WITH_ZLIB=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_LIBUV=ON -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#  Set working dir and copy Brayns assets\nARG BRAYNS_SRC=/app/brayns\nWORKDIR /app\nADD . ${BRAYNS_SRC}\n#  Install Brayns\n#  https://github.com/BlueBrain/Brayns\nRUN cksum ${BRAYNS_SRC}/.gitsubprojects \\\n && cd ${BRAYNS_SRC} \\\n && git submodule update --init --recursive \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH}:${DIST_PATH}/lib/cmake/libwebsockets cmake .. -GNinja -DBRAYNS_CIRCUITVIEWER_ENABLED=ON -DBRAYNS_NETWORKING_ENABLED=ON -DCLONE_SUBPROJECTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${DIST_PATH} -DBUILD_PYTHON_BINDINGS=OFF \\\n && ninja mvd-tool perceptualdiff Brayns-install Brayns-tests \\\n && rm -rf ${DIST_PATH}/include ${DIST_PATH}/cmake ${DIST_PATH}/share\n#  Final image, containing only Brayns and libraries required to run it\nFROM debian:buster-slim\nARG DIST_PATH=/app/dist\nRUN apt-get update \\\n && apt-get install --no-install-recommends libarchive13 libassimp4 libboost-filesystem1.67.0 libboost-program-options1.67.0 libboost-regex1.67.0 libboost-serialization1.67.0 libboost-system1.67.0 libboost-iostreams1.67.0 libfreeimage3 libgomp1 libhdf5-103 libturbojpeg0 libuv1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  The COPY command below will:\n#  1. create a container based on the `builder` image (but do not start it)\n#     Equivalent to the `docker create` command\n#  2. create a new image layer containing the\n#     /app/dist directory of this new container\n#     Equivalent to the `docker copy` command.\nCOPY --from=builder ${DIST_PATH} ${DIST_PATH}\n#  Add binaries from dist to the PATH\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:${DIST_PATH}/lib\"\nENV PATH=\"${DIST_PATH}/bin:$PATH\"\n#  Expose a port from the container\n#  For more ports, use the `--expose` flag when running the container,\n#  see https://docs.docker.com/engine/reference/run/#expose-incoming-ports for docs.\nEXPOSE 8200/tcp\n#  When running `docker run -ti --rm -p 8200:8200 brayns`,\n#  this will be the cmd that will be executed (+ the CLI options from CMD).\n#  To ssh into the container (or override the default entry) use:\n#  `docker run -ti --rm --entrypoint bash -p 8200:8200 brayns`\n#  See https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime\n#  for more docs\nENTRYPOINT [\"braynsService\"]\nCMD [\"--http-server\", \":8200\"]\n","injectedSmells":[],"originalDockerfileHash":"73cd7ba5b527ce0d901ca3d2c21474ff","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker container for running Brayns as a service\n#   Check https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#user for best practices.\n#   This Dockerfile leverages multi-stage builds, available since Docker 17.05\n#   See: https://docs.docker.com/engine/userguide/eng-image/multistage-build/#use-multi-stage-builds\n#   Image where Brayns is built\nFROM debian:buster-slim AS builder\nLABEL maintainer=\"bbp-svc-viz@groupes.epfl.ch\"\nARG DIST_PATH=/app/dist\n#   Install packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git ninja-build libarchive-dev libassimp-dev libboost-date-time-dev libboost-filesystem-dev libboost-iostreams-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-test-dev libfreeimage-dev libhdf5-serial-dev libtbb-dev libturbojpeg0-dev libuv1-dev pkg-config wget ca-certificates -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Get ISPC\n#   https://ispc.github.io/downloads.html\nARG ISPC_VERSION=1.9.2\nARG ISPC_DIR=ispc-v${ISPC_VERSION}-linux\nARG ISPC_PATH=/app/$ISPC_DIR\nRUN mkdir -p ${ISPC_PATH} \\\n && wget http://netix.dl.sourceforge.net/project/ispcmirror/v${ISPC_VERSION}/${ISPC_DIR}.tar.gz \\\n && tar zxvf ${ISPC_DIR}.tar.gz -C ${ISPC_PATH} --strip-components=1 \\\n && rm -rf ${ISPC_PATH}/${ISPC_DIR}/examples\n#   Add ispc bin to the PATH\nENV PATH=\"$PATH:${ISPC_PATH}\"\n#   Install embree\n#   https://github.com/embree/embree/releases\nARG EMBREE_VERSION=3.2.3\nARG EMBREE_FILE=embree-${EMBREE_VERSION}.x86_64.linux.tar.gz\nRUN mkdir -p ${DIST_PATH} \\\n && wget https://github.com/embree/embree/releases/download/v${EMBREE_VERSION}/${EMBREE_FILE} \\\n && tar zxvf ${EMBREE_FILE} -C ${DIST_PATH} --strip-components=1 \\\n && rm -rf ${DIST_PATH}/bin ${DIST_PATH}/doc\n#   Install OSPRay\n#   https://github.com/ospray/ospray/releases\nARG OSPRAY_BRANCH=release-1.7.x\nARG OSPRAY_SRC=/app/ospray\nRUN mkdir -p ${OSPRAY_SRC} \\\n && git clone https://github.com/ospray/ospray.git ${OSPRAY_SRC} \\\n && cd ${OSPRAY_SRC} \\\n && git checkout ${OSPRAY_BRANCH} \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH} cmake .. -GNinja -DOSPRAY_ENABLE_APPS=OFF -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#   Install libwebsockets (2.0 from Debian is not reliable)\n#   https://github.com/warmcat/libwebsockets/releases\nARG LWS_VERSION=2.3.0\nARG LWS_SRC=/app/libwebsockets\nARG LWS_FILE=v${LWS_VERSION}.tar.gz\nRUN mkdir -p ${LWS_SRC} \\\n && wget https://github.com/warmcat/libwebsockets/archive/${LWS_FILE} \\\n && tar zxvf ${LWS_FILE} -C ${LWS_SRC} --strip-components=1 \\\n && cd ${LWS_SRC} \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DLWS_STATIC_PIC=ON -DLWS_WITH_SSL=OFF -DLWS_WITH_ZLIB=OFF -DLWS_WITH_ZIP_FOPS=OFF -DLWS_WITHOUT_EXTENSIONS=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITH_LIBUV=ON -DCMAKE_INSTALL_PREFIX=${DIST_PATH} \\\n && ninja install\n#   Set working dir and copy Brayns assets\nARG BRAYNS_SRC=/app/brayns\nWORKDIR /app\nADD . ${BRAYNS_SRC}\n#   Install Brayns\n#   https://github.com/BlueBrain/Brayns\nRUN cksum ${BRAYNS_SRC}/.gitsubprojects \\\n && cd ${BRAYNS_SRC} \\\n && git submodule update --init --recursive \\\n && mkdir -p build \\\n && cd build \\\n && CMAKE_PREFIX_PATH=${DIST_PATH}:${DIST_PATH}/lib/cmake/libwebsockets cmake .. -GNinja -DBRAYNS_CIRCUITVIEWER_ENABLED=ON -DBRAYNS_NETWORKING_ENABLED=ON -DCLONE_SUBPROJECTS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${DIST_PATH} -DBUILD_PYTHON_BINDINGS=OFF \\\n && ninja mvd-tool perceptualdiff Brayns-install Brayns-tests \\\n && rm -rf ${DIST_PATH}/include ${DIST_PATH}/cmake ${DIST_PATH}/share\n#   Final image, containing only Brayns and libraries required to run it\nFROM debian:buster-slim\nARG DIST_PATH=/app/dist\nRUN apt-get update \\\n && apt-get install --no-install-recommends libarchive13 libassimp4 libboost-filesystem1.67.0 libboost-program-options1.67.0 libboost-regex1.67.0 libboost-serialization1.67.0 libboost-system1.67.0 libboost-iostreams1.67.0 libfreeimage3 libgomp1 libhdf5-103 libturbojpeg0 libuv1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   The COPY command below will:\n#   1. create a container based on the `builder` image (but do not start it)\n#      Equivalent to the `docker create` command\n#   2. create a new image layer containing the\n#      /app/dist directory of this new container\n#      Equivalent to the `docker copy` command.\nCOPY --from=builder ${DIST_PATH} ${DIST_PATH}\n#   Add binaries from dist to the PATH\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:${DIST_PATH}/lib\"\nENV PATH=\"${DIST_PATH}/bin:$PATH\"\n#   Expose a port from the container\n#   For more ports, use the `--expose` flag when running the container,\n#   see https://docs.docker.com/engine/reference/run/#expose-incoming-ports for docs.\nEXPOSE 8200/tcp\n#   When running `docker run -ti --rm -p 8200:8200 brayns`,\n#   this will be the cmd that will be executed (+ the CLI options from CMD).\n#   To ssh into the container (or override the default entry) use:\n#   `docker run -ti --rm --entrypoint bash -p 8200:8200 brayns`\n#   See https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime\n#   for more docs\nENTRYPOINT [\"braynsService\"]\nCMD [\"--http-server\", \":8200\"]\n","originalDockerfileUglifiedHash":"7e1215adffd2e52e1f3ae2d8f73f5c2e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6ba7922281803db53c1171442d032aa23578da8a.dockerfile"}