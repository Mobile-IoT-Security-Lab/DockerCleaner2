{"seed":3055774503,"processedDockerfileHash":"b283f0ff4333f48e4de9d822a0990764","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) Microsoft. All rights reserved.\n#   Licensed under the MIT license. See LICENSE file in the project root for full license information.\n#   To run locally (example)\n#   docker build -t rpiiotbuild:latest --build-arg \"CLIENTLIBRARY_REPO=Azure/azure-iot-sdk-c\" --build-arg \"CLIENTLIBRARY_COMMIT_SHA=raspi-pipeline\" . --network=host --file ./Dockerfile\n#   Start with the latest version of the Debian Docker container\nFROM debian:stretch\n#   Fetch and install all outstanding updates\nRUN : \\\n && apt-get -y upgrade\n#   Install wget git cmake xz-utils\nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.18-5+deb9u3 git=1:2.11.0-3+deb9u7 build-essential=12.3 cmake=3.7.2-1 xz-utils=5.2.2-1.2+deb9u1 ca-certificates=20200601~deb9u2 pkg-config=0.29-4+b1 uuid-dev=2.29.2-1+deb9u1 --fix-missing -y )\nENV WORK_ROOT=\"/toolchain\"\nWORKDIR ${WORK_ROOT}\n#  ######### LINARO INSTALL ##########\nENV LINARO_SOURCE=\"gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf\"\nRUN wget https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/arm-linux-gnueabihf/${LINARO_SOURCE}.tar.xz\nRUN tar -xvf ${LINARO_SOURCE}.tar.xz\n#   Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/${LINARO_SOURCE}\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n#  ######### OPENSSL INSTALL ##########\n#   Download OpenSSL source and expand it\nENV OPENSSL_SOURCE=\"openssl-1.1.0j\"\nRUN wget https://www.openssl.org/source/${OPENSSL_SOURCE}.tar.gz\nRUN tar -xvf ${OPENSSL_SOURCE}.tar.gz\n#   Build OpenSSL\nWORKDIR /${WORK_ROOT}/${OPENSSL_SOURCE}\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### CURL INSTALL ##########\n#   Download cURL source and expand it\nENV CURL_SOURCE=\"curl-7.64.1\"\nRUN wget http://curl.haxx.se/download/${CURL_SOURCE}.tar.gz\nRUN tar -xvf ${CURL_SOURCE}.tar.gz\n#   Build cURL\n#   we need to set the path for openssl with --with-ssl=...\nWORKDIR /${WORK_ROOT}/${CURL_SOURCE}\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### UTIL LINUX INSTALL ##########\n#   Download the Linux utilities for libuuid and expand it\nENV UTIL_LINUX_SOURCE=\"util-linux-2.33-rc2\"\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.33/${UTIL_LINUX_SOURCE}.tar.gz\nRUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz\n#   Build uuid\nWORKDIR /${WORK_ROOT}/${UTIL_LINUX_SOURCE}\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### CLIENT LIBRARY INSTALL ##########\n#   clone azure  \nARG CLIENTLIBRARY_REPO\nWORKDIR /sdk\nRUN git clone https://github.com/$CLIENTLIBRARY_REPO .\nRUN git submodule update --init\nRUN mkdir cmake\nWORKDIR /sdk/cmake\nRUN ls -al\n#   Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\nRUN ls -al\n#   Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} -Drun_e2e_tests:BOOL=ON -Drun_unittests=:BOOL=ON ..\nRUN make -j 2\nRUN ls -al\n#  ######### PHASE 2: COMPILE BRANCH SPECIFIC INFORMATION ##########\nARG CLIENTLIBRARY_COMMIT_SHA\nARG CLIENTLIBRARY_COMMIT_NAME\nRUN echo \"$CLIENTLIBRARY_COMMIT_NAME\"\nRUN echo \"$CLIENTLIBRARY_COMMIT_SHA\"\nWORKDIR /sdk\nRUN git pull\nRUN git checkout $CLIENTLIBRARY_COMMIT_SHA\nCOPY ./patchfile /\n#   our base image might have some files checked out.  revert these.\nRUN git reset HEAD \\\n && git checkout \\\n && git clean -df\nRUN if [ -s /patchfile ] ; then git apply --index /patchfile ; fi\nRUN git submodule update --init\nWORKDIR /sdk/cmake \nRUN cmake .\nRUN make -j 2\n#   Finally a sanity check to make sure the files are there\nRUN ls -al ${TOOLCHAIN_PREFIX}/lib\nRUN ls -al ${TOOLCHAIN_PREFIX}/include\nRUN ls -la ./\n#   Go to project root\nWORKDIR /\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) Microsoft. All rights reserved.\n#  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n#  To run locally (example)\n#  docker build -t rpiiotbuild:latest --build-arg \"CLIENTLIBRARY_REPO=Azure/azure-iot-sdk-c\" --build-arg \"CLIENTLIBRARY_COMMIT_SHA=raspi-pipeline\" . --network=host --file ./Dockerfile\n#  Start with the latest version of the Debian Docker container\nFROM debian:stretch\n#  Fetch and install all outstanding updates\nRUN apt-get update \\\n && apt-get -y upgrade\n#  Install wget git cmake xz-utils\nRUN apt-get install --fix-missing -y wget git build-essential cmake xz-utils ca-certificates pkg-config uuid-dev\nENV WORK_ROOT=\"/toolchain\"\nWORKDIR ${WORK_ROOT}\n# ######### LINARO INSTALL ##########\nENV LINARO_SOURCE=\"gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf\"\nRUN wget https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/arm-linux-gnueabihf/${LINARO_SOURCE}.tar.xz\nRUN tar -xvf ${LINARO_SOURCE}.tar.xz\n#  Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/${LINARO_SOURCE}\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n# ######### OPENSSL INSTALL ##########\n#  Download OpenSSL source and expand it\nENV OPENSSL_SOURCE=\"openssl-1.1.0j\"\nRUN wget https://www.openssl.org/source/${OPENSSL_SOURCE}.tar.gz\nRUN tar -xvf ${OPENSSL_SOURCE}.tar.gz\n#  Build OpenSSL\nWORKDIR /${WORK_ROOT}/${OPENSSL_SOURCE}\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n# ######### CURL INSTALL ##########\n#  Download cURL source and expand it\nENV CURL_SOURCE=\"curl-7.64.1\"\nRUN wget http://curl.haxx.se/download/${CURL_SOURCE}.tar.gz\nRUN tar -xvf ${CURL_SOURCE}.tar.gz\n#  Build cURL\n#  we need to set the path for openssl with --with-ssl=...\nWORKDIR /${WORK_ROOT}/${CURL_SOURCE}\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n# ######### UTIL LINUX INSTALL ##########\n#  Download the Linux utilities for libuuid and expand it\nENV UTIL_LINUX_SOURCE=\"util-linux-2.33-rc2\"\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.33/${UTIL_LINUX_SOURCE}.tar.gz\nRUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz\n#  Build uuid\nWORKDIR /${WORK_ROOT}/${UTIL_LINUX_SOURCE}\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n# ######### CLIENT LIBRARY INSTALL ##########\n#  clone azure  \nARG CLIENTLIBRARY_REPO\nWORKDIR /sdk\nRUN git clone https://github.com/$CLIENTLIBRARY_REPO .\nRUN git submodule update --init\nRUN mkdir cmake\nWORKDIR /sdk/cmake\nRUN ls -al\n#  Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\nRUN ls -al\n#  Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} -Drun_e2e_tests:BOOL=ON -Drun_unittests=:BOOL=ON ..\nRUN make -j 2\nRUN ls -al\n# ######### PHASE 2: COMPILE BRANCH SPECIFIC INFORMATION ##########\nARG CLIENTLIBRARY_COMMIT_SHA\nARG CLIENTLIBRARY_COMMIT_NAME\nRUN echo \"$CLIENTLIBRARY_COMMIT_NAME\"\nRUN echo \"$CLIENTLIBRARY_COMMIT_SHA\"\nWORKDIR /sdk\nRUN git pull\nRUN git checkout $CLIENTLIBRARY_COMMIT_SHA\nCOPY ./patchfile /\n#  our base image might have some files checked out.  revert these.\nRUN git reset HEAD \\\n && git checkout \\\n && git clean -df\nRUN if [ -s /patchfile ] ; then git apply --index /patchfile ; fi\nRUN git submodule update --init\nWORKDIR /sdk/cmake \nRUN cmake .\nRUN make -j 2\n#  Finally a sanity check to make sure the files are there\nRUN ls -al ${TOOLCHAIN_PREFIX}/lib\nRUN ls -al ${TOOLCHAIN_PREFIX}/include\nRUN ls -la ./\n#  Go to project root\nWORKDIR /\n","injectedSmells":[],"originalDockerfileHash":"cb0c7e94055df78b3526a81ab6236b27","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) Microsoft. All rights reserved.\n#   Licensed under the MIT license. See LICENSE file in the project root for full license information.\n#   To run locally (example)\n#   docker build -t rpiiotbuild:latest --build-arg \"CLIENTLIBRARY_REPO=Azure/azure-iot-sdk-c\" --build-arg \"CLIENTLIBRARY_COMMIT_SHA=raspi-pipeline\" . --network=host --file ./Dockerfile\n#   Start with the latest version of the Debian Docker container\nFROM debian:stretch\n#   Fetch and install all outstanding updates\nRUN apt-get update \\\n && apt-get -y upgrade\n#   Install wget git cmake xz-utils\nRUN apt-get install wget git build-essential cmake xz-utils ca-certificates pkg-config uuid-dev --fix-missing -y\nENV WORK_ROOT=\"/toolchain\"\nWORKDIR ${WORK_ROOT}\n#  ######### LINARO INSTALL ##########\nENV LINARO_SOURCE=\"gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf\"\nRUN wget https://releases.linaro.org/components/toolchain/binaries/7.4-2019.02/arm-linux-gnueabihf/${LINARO_SOURCE}.tar.xz\nRUN tar -xvf ${LINARO_SOURCE}.tar.xz\n#   Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/${LINARO_SOURCE}\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n#  ######### OPENSSL INSTALL ##########\n#   Download OpenSSL source and expand it\nENV OPENSSL_SOURCE=\"openssl-1.1.0j\"\nRUN wget https://www.openssl.org/source/${OPENSSL_SOURCE}.tar.gz\nRUN tar -xvf ${OPENSSL_SOURCE}.tar.gz\n#   Build OpenSSL\nWORKDIR /${WORK_ROOT}/${OPENSSL_SOURCE}\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### CURL INSTALL ##########\n#   Download cURL source and expand it\nENV CURL_SOURCE=\"curl-7.64.1\"\nRUN wget http://curl.haxx.se/download/${CURL_SOURCE}.tar.gz\nRUN tar -xvf ${CURL_SOURCE}.tar.gz\n#   Build cURL\n#   we need to set the path for openssl with --with-ssl=...\nWORKDIR /${WORK_ROOT}/${CURL_SOURCE}\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### UTIL LINUX INSTALL ##########\n#   Download the Linux utilities for libuuid and expand it\nENV UTIL_LINUX_SOURCE=\"util-linux-2.33-rc2\"\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.33/${UTIL_LINUX_SOURCE}.tar.gz\nRUN tar -xvf ${UTIL_LINUX_SOURCE}.tar.gz\n#   Build uuid\nWORKDIR /${WORK_ROOT}/${UTIL_LINUX_SOURCE}\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR /${WORK_ROOT}\n#  ######### CLIENT LIBRARY INSTALL ##########\n#   clone azure  \nARG CLIENTLIBRARY_REPO\nWORKDIR /sdk\nRUN git clone https://github.com/$CLIENTLIBRARY_REPO .\nRUN git submodule update --init\nRUN mkdir cmake\nWORKDIR /sdk/cmake\nRUN ls -al\n#   Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\nRUN ls -al\n#   Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} -Drun_e2e_tests:BOOL=ON -Drun_unittests=:BOOL=ON ..\nRUN make -j 2\nRUN ls -al\n#  ######### PHASE 2: COMPILE BRANCH SPECIFIC INFORMATION ##########\nARG CLIENTLIBRARY_COMMIT_SHA\nARG CLIENTLIBRARY_COMMIT_NAME\nRUN echo \"$CLIENTLIBRARY_COMMIT_NAME\"\nRUN echo \"$CLIENTLIBRARY_COMMIT_SHA\"\nWORKDIR /sdk\nRUN git pull\nRUN git checkout $CLIENTLIBRARY_COMMIT_SHA\nCOPY ./patchfile /\n#   our base image might have some files checked out.  revert these.\nRUN git reset HEAD \\\n && git checkout \\\n && git clean -df\nRUN if [ -s /patchfile ] ; then git apply --index /patchfile ; fi\nRUN git submodule update --init\nWORKDIR /sdk/cmake \nRUN cmake .\nRUN make -j 2\n#   Finally a sanity check to make sure the files are there\nRUN ls -al ${TOOLCHAIN_PREFIX}/lib\nRUN ls -al ${TOOLCHAIN_PREFIX}/include\nRUN ls -la ./\n#   Go to project root\nWORKDIR /\n","originalDockerfileUglifiedHash":"3c5d107e839e50f1159fd1cce58e402f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cb14bdfbb576a79030ca51893b4f5ef31b668fdc.dockerfile"}