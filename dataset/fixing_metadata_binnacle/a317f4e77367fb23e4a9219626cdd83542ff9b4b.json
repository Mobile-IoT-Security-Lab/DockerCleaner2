{"seed":1204059908,"processedDockerfileHash":"8cf399953bb4e4fe026fce62e6ea52ff","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG ALPINE_VERSION\nARG GO_VERSION\nARG RUST_VERSION\nARG SWIFT_VERSION\nFROM alpine:${ALPINE_VERSION} AS protoc_builder\nRUN apk add build-base curl automake autoconf libtool git zlib-dev --no-cache\nRUN mkdir -p /out\nARG GRPC_VERSION\nRUN git clone --recursive --depth=1 -b v${GRPC_VERSION} https://github.com/grpc/grpc.git /grpc \\\n && ln -s /grpc/third_party/protobuf /protobuf \\\n && cd /protobuf \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr --enable-static=no \\\n && make \\\n && make check \\\n && make install \\\n && make install DESTDIR=/out \\\n && cd /grpc \\\n && make install-plugins prefix=/out/usr\nARG PROTOBUF_C_VERSION\nRUN mkdir -p /protobuf-c \\\n && curl -sSL https://api.github.com/repos/protobuf-c/protobuf-c/tarball/${PROTOBUF_C_VERSION} | tar xz --strip 1 -C /protobuf-c \\\n && cd /protobuf-c \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr \\\n && make \\\n && make install DESTDIR=/out\nARG GRPC_JAVA_VERSION\nRUN mkdir -p /grpc-java \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-java/tarball/v${GRPC_JAVA_VERSION} | tar xz --strip 1 -C /grpc-java \\\n && cd /grpc-java \\\n && g++ -I. -I/protobuf/src compiler/src/java_plugin/cpp/*.cpp -L/protobuf/src/.libs -lprotoc -lprotobuf -lpthread --std=c++0x -s -o protoc-gen-grpc-java \\\n && install -Ds protoc-gen-grpc-java /out/usr/bin/protoc-gen-grpc-java\nARG GRPC_WEB_VERSION\nRUN mkdir -p /grpc-web \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-web/tarball/${GRPC_WEB_VERSION} | tar xz --strip 1 -C /grpc-web \\\n && cd /grpc-web \\\n && make install-plugin \\\n && install -Ds /usr/local/bin/protoc-gen-grpc-web /out/usr/bin/protoc-gen-grpc-web\nFROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS go_builder\nRUN apk add build-base curl git --no-cache\nENV GO111MODULE=\"on\"\nARG PROTOC_GEN_DOC_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && curl -sSL https://api.github.com/repos/pseudomuto/protoc-gen-doc/tarball/v${PROTOC_GEN_DOC_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && cd ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && go build -ldflags '-w -s' -o /protoc-gen-doc-out/protoc-gen-doc ./cmd/protoc-gen-doc \\\n && install -Ds /protoc-gen-doc-out/protoc-gen-doc /out/usr/bin/protoc-gen-doc\nARG PROTOC_GEN_FIELDMASK_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-fieldmask/tarball/v${PROTOC_GEN_FIELDMASK_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && go build -ldflags '-w -s' -o /protoc-gen-fieldmask-out/protoc-gen-fieldmask . \\\n && install -Ds /protoc-gen-fieldmask-out/protoc-gen-fieldmask /out/usr/bin/protoc-gen-fieldmask\nARG PROTOC_GEN_GO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/golang/protobuf \\\n && curl -sSL https://api.github.com/repos/golang/protobuf/tarball/v${PROTOC_GEN_GO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/golang/protobuf \\\n && cd ${GOPATH}/src/github.com/golang/protobuf \\\n && go build -ldflags '-w -s' -o /golang-protobuf-out/protoc-gen-go ./protoc-gen-go \\\n && install -Ds /golang-protobuf-out/protoc-gen-go /out/usr/bin/protoc-gen-go\nARG PROTOC_GEN_GOGO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/gogo/protobuf \\\n && curl -sSL https://api.github.com/repos/gogo/protobuf/tarball/v${PROTOC_GEN_GOGO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/gogo/protobuf \\\n && cd ${GOPATH}/src/github.com/gogo/protobuf \\\n && go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogo ./protoc-gen-gogo \\\n && install -Ds /gogo-protobuf-out/protoc-gen-gogo /out/usr/bin/protoc-gen-gogo \\\n && mkdir -p /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D $( find ./protobuf/google/protobuf -name '*.proto' ;) -t /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D ./gogoproto/gogo.proto /out/usr/include/github.com/gogo/protobuf/gogoproto/gogo.proto\nARG PROTOC_GEN_GOGOTTN_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-gogottn/tarball/v${PROTOC_GEN_GOGOTTN_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && go build -ldflags '-w -s' -o /protoc-gen-gogottn-out/protoc-gen-gogottn . \\\n && install -Ds /protoc-gen-gogottn-out/protoc-gen-gogottn /out/usr/bin/protoc-gen-gogottn\nARG PROTOC_GEN_LINT_VERSION\nRUN cd / \\\n && curl -sSLO https://github.com/ckaznocha/protoc-gen-lint/releases/download/v${PROTOC_GEN_LINT_VERSION}/protoc-gen-lint_linux_amd64.zip \\\n && mkdir -p /protoc-gen-lint-out \\\n && cd /protoc-gen-lint-out \\\n && unzip -q /protoc-gen-lint_linux_amd64.zip \\\n && install -Ds /protoc-gen-lint-out/protoc-gen-lint /out/usr/bin/protoc-gen-lint\nARG PROTOC_GEN_VALIDATE_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && curl -sSL https://api.github.com/repos/envoyproxy/protoc-gen-validate/tarball/v${PROTOC_GEN_VALIDATE_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && cd ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && go build -ldflags '-w -s' -o /protoc-gen-validate-out/protoc-gen-validate . \\\n && install -Ds /protoc-gen-validate-out/protoc-gen-validate /out/usr/bin/protoc-gen-validate \\\n && install -D ./validate/validate.proto /out/usr/include/github.com/envoyproxy/protoc-gen-validate/validate/validate.proto\nARG GRPC_GATEWAY_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && curl -sSL https://api.github.com/repos/grpc-ecosystem/grpc-gateway/tarball/v${GRPC_GATEWAY_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && cd ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-grpc-gateway ./protoc-gen-grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-swagger ./protoc-gen-swagger \\\n && install -Ds /grpc-gateway-out/protoc-gen-grpc-gateway /out/usr/bin/protoc-gen-grpc-gateway \\\n && install -Ds /grpc-gateway-out/protoc-gen-swagger /out/usr/bin/protoc-gen-swagger \\\n && mkdir -p /out/usr/include/google/api \\\n && install -D $( find ./third_party/googleapis/google/api -name '*.proto' ;) -t /out/usr/include/google/api \\\n && mkdir -p /out/usr/include/google/rpc \\\n && install -D $( find ./third_party/googleapis/google/rpc -name '*.proto' ;) -t /out/usr/include/google/rpc\nFROM rust:${RUST_VERSION}-slim AS rust_builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends musl-tools curl -y\nRUN rustup target add x86_64-unknown-linux-musl\nENV RUSTFLAGS=\"-C linker=musl-gcc\"\nARG RUST_PROTOBUF_VERSION\nRUN mkdir -p /rust-protobuf \\\n && curl -sSL https://api.github.com/repos/stepancheg/rust-protobuf/tarball/v${RUST_PROTOBUF_VERSION} | tar xz --strip 1 -C /rust-protobuf \\\n && cd /rust-protobuf/protobuf-codegen \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /rust-protobuf/target/x86_64-unknown-linux-musl/release/protoc-gen-rust /out/usr/bin/protoc-gen-rust\nARG GRPC_RUST_VERSION\nRUN mkdir -p /grpc-rust \\\n && curl -sSL https://api.github.com/repos/stepancheg/grpc-rust/tarball/v${GRPC_RUST_VERSION} | tar xz --strip 1 -C /grpc-rust \\\n && cd /grpc-rust/grpc-compiler \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /grpc-rust/target/x86_64-unknown-linux-musl/release/protoc-gen-rust-grpc /out/usr/bin/protoc-gen-rust-grpc\nFROM swift:${SWIFT_VERSION} AS swift_builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends unzip patchelf libnghttp2-dev curl libssl-dev zlib1g-dev -y\nARG GRPC_SWIFT_VERSION\nRUN mkdir -p /grpc-swift \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-swift/tarball/${GRPC_SWIFT_VERSION} | tar xz --strip 1 -C /grpc-swift \\\n && cd /grpc-swift \\\n && make \\\n && install -Ds /grpc-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swift \\\n && install -Ds /grpc-swift/protoc-gen-swiftgrpc /protoc-gen-swift/protoc-gen-swiftgrpc \\\n && cp /lib64/ld-linux-x86-64.so.2 $( ldd /protoc-gen-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swiftgrpc | awk '{print $3}' | grep /lib | sort | uniq ;) /protoc-gen-swift/ \\\n && find /protoc-gen-swift/ -name 'lib*.so*' -exec patchelf --set-rpath /protoc-gen-swift {}\nFROM alpine:${ALPINE_VERSION} AS packer\nRUN apk add curl --no-cache\nARG UPX_VERSION\nRUN mkdir -p /upx \\\n && curl -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz | tar xJ --strip 1 -C /upx \\\n && install -D /upx/upx /usr/local/bin/upx\nCOPY --from=protoc_builder /out/ /out/\nCOPY --from=go_builder /out/ /out/\nCOPY --from=rust_builder /out/ /out/\nCOPY --from=swift_builder /protoc-gen-swift /out/protoc-gen-swift\nRUN upx --lzma /out/usr/bin/grpc_* /out/usr/bin/protoc-gen-*\nRUN find /out -name \"*.a\" -delete -or -name \"*.la\" -delete\nFROM alpine:${ALPINE_VERSION}\nLABEL maintainer=\"Roman Volosatovs <roman@thethingsnetwork.org>\"\nCOPY --from=packer /out/ /\nRUN apk add bash libstdc++ --no-cache \\\n && for p in protoc-gen-swift protoc-gen-swiftgrpc; do ln -s /protoc-gen-swift/${p} /usr/bin/${p} ; done \\\n && ln -s /usr/bin/grpc_cpp_plugin /usr/bin/protoc-gen-grpc-cpp \\\n && ln -s /usr/bin/grpc_csharp_plugin /usr/bin/protoc-gen-grpc-csharp \\\n && ln -s /usr/bin/grpc_objective_c_plugin /usr/bin/protoc-gen-grpc-objc \\\n && ln -s /usr/bin/grpc_node_plugin /usr/bin/protoc-gen-grpc-js \\\n && ln -s /usr/bin/grpc_php_plugin /usr/bin/protoc-gen-grpc-php \\\n && ln -s /usr/bin/grpc_python_plugin /usr/bin/protoc-gen-grpc-python \\\n && ln -s /usr/bin/grpc_ruby_plugin /usr/bin/protoc-gen-grpc-ruby \\\n && ln -s /usr/bin/protoc-gen-swiftgrpc /usr/bin/protoc-gen-grpc-swift\nCOPY protoc-wrapper /usr/bin/protoc-wrapper\nENTRYPOINT [\"protoc-wrapper\", \"-I/usr/include\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG ALPINE_VERSION\nARG GO_VERSION\nARG RUST_VERSION\nARG SWIFT_VERSION\nFROM alpine:${ALPINE_VERSION} AS protoc_builder\nRUN apk add --no-cache build-base curl automake autoconf libtool git zlib-dev\nRUN mkdir -p /out\nARG GRPC_VERSION\nRUN git clone --recursive --depth=1 -b v${GRPC_VERSION} https://github.com/grpc/grpc.git /grpc \\\n && ln -s /grpc/third_party/protobuf /protobuf \\\n && cd /protobuf \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr --enable-static=no \\\n && make \\\n && make check \\\n && make install \\\n && make install DESTDIR=/out \\\n && cd /grpc \\\n && make install-plugins prefix=/out/usr\nARG PROTOBUF_C_VERSION\nRUN mkdir -p /protobuf-c \\\n && curl -sSL https://api.github.com/repos/protobuf-c/protobuf-c/tarball/${PROTOBUF_C_VERSION} | tar xz --strip 1 -C /protobuf-c \\\n && cd /protobuf-c \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr \\\n && make \\\n && make install DESTDIR=/out\nARG GRPC_JAVA_VERSION\nRUN mkdir -p /grpc-java \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-java/tarball/v${GRPC_JAVA_VERSION} | tar xz --strip 1 -C /grpc-java \\\n && cd /grpc-java \\\n && g++ -I. -I/protobuf/src compiler/src/java_plugin/cpp/*.cpp -L/protobuf/src/.libs -lprotoc -lprotobuf -lpthread --std=c++0x -s -o protoc-gen-grpc-java \\\n && install -Ds protoc-gen-grpc-java /out/usr/bin/protoc-gen-grpc-java\nARG GRPC_WEB_VERSION\nRUN mkdir -p /grpc-web \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-web/tarball/${GRPC_WEB_VERSION} | tar xz --strip 1 -C /grpc-web \\\n && cd /grpc-web \\\n && make install-plugin \\\n && install -Ds /usr/local/bin/protoc-gen-grpc-web /out/usr/bin/protoc-gen-grpc-web\nFROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS go_builder\nRUN apk add --no-cache build-base curl git\nENV GO111MODULE=\"on\"\nARG PROTOC_GEN_DOC_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && curl -sSL https://api.github.com/repos/pseudomuto/protoc-gen-doc/tarball/v${PROTOC_GEN_DOC_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && cd ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && go build -ldflags '-w -s' -o /protoc-gen-doc-out/protoc-gen-doc ./cmd/protoc-gen-doc \\\n && install -Ds /protoc-gen-doc-out/protoc-gen-doc /out/usr/bin/protoc-gen-doc\nARG PROTOC_GEN_FIELDMASK_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-fieldmask/tarball/v${PROTOC_GEN_FIELDMASK_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && go build -ldflags '-w -s' -o /protoc-gen-fieldmask-out/protoc-gen-fieldmask . \\\n && install -Ds /protoc-gen-fieldmask-out/protoc-gen-fieldmask /out/usr/bin/protoc-gen-fieldmask\nARG PROTOC_GEN_GO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/golang/protobuf \\\n && curl -sSL https://api.github.com/repos/golang/protobuf/tarball/v${PROTOC_GEN_GO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/golang/protobuf \\\n && cd ${GOPATH}/src/github.com/golang/protobuf \\\n && go build -ldflags '-w -s' -o /golang-protobuf-out/protoc-gen-go ./protoc-gen-go \\\n && install -Ds /golang-protobuf-out/protoc-gen-go /out/usr/bin/protoc-gen-go\nARG PROTOC_GEN_GOGO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/gogo/protobuf \\\n && curl -sSL https://api.github.com/repos/gogo/protobuf/tarball/v${PROTOC_GEN_GOGO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/gogo/protobuf \\\n && cd ${GOPATH}/src/github.com/gogo/protobuf \\\n && go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogo ./protoc-gen-gogo \\\n && install -Ds /gogo-protobuf-out/protoc-gen-gogo /out/usr/bin/protoc-gen-gogo \\\n && mkdir -p /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D $( find ./protobuf/google/protobuf -name '*.proto' ;) -t /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D ./gogoproto/gogo.proto /out/usr/include/github.com/gogo/protobuf/gogoproto/gogo.proto\nARG PROTOC_GEN_GOGOTTN_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-gogottn/tarball/v${PROTOC_GEN_GOGOTTN_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && go build -ldflags '-w -s' -o /protoc-gen-gogottn-out/protoc-gen-gogottn . \\\n && install -Ds /protoc-gen-gogottn-out/protoc-gen-gogottn /out/usr/bin/protoc-gen-gogottn\nARG PROTOC_GEN_LINT_VERSION\nRUN cd / \\\n && curl -sSLO https://github.com/ckaznocha/protoc-gen-lint/releases/download/v${PROTOC_GEN_LINT_VERSION}/protoc-gen-lint_linux_amd64.zip \\\n && mkdir -p /protoc-gen-lint-out \\\n && cd /protoc-gen-lint-out \\\n && unzip -q /protoc-gen-lint_linux_amd64.zip \\\n && install -Ds /protoc-gen-lint-out/protoc-gen-lint /out/usr/bin/protoc-gen-lint\nARG PROTOC_GEN_VALIDATE_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && curl -sSL https://api.github.com/repos/envoyproxy/protoc-gen-validate/tarball/v${PROTOC_GEN_VALIDATE_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && cd ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && go build -ldflags '-w -s' -o /protoc-gen-validate-out/protoc-gen-validate . \\\n && install -Ds /protoc-gen-validate-out/protoc-gen-validate /out/usr/bin/protoc-gen-validate \\\n && install -D ./validate/validate.proto /out/usr/include/github.com/envoyproxy/protoc-gen-validate/validate/validate.proto\nARG GRPC_GATEWAY_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && curl -sSL https://api.github.com/repos/grpc-ecosystem/grpc-gateway/tarball/v${GRPC_GATEWAY_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && cd ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-grpc-gateway ./protoc-gen-grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-swagger ./protoc-gen-swagger \\\n && install -Ds /grpc-gateway-out/protoc-gen-grpc-gateway /out/usr/bin/protoc-gen-grpc-gateway \\\n && install -Ds /grpc-gateway-out/protoc-gen-swagger /out/usr/bin/protoc-gen-swagger \\\n && mkdir -p /out/usr/include/google/api \\\n && install -D $( find ./third_party/googleapis/google/api -name '*.proto' ;) -t /out/usr/include/google/api \\\n && mkdir -p /out/usr/include/google/rpc \\\n && install -D $( find ./third_party/googleapis/google/rpc -name '*.proto' ;) -t /out/usr/include/google/rpc\nFROM rust:${RUST_VERSION}-slim AS rust_builder\nRUN apt-get update \\\n && apt-get install musl-tools curl -y\nRUN rustup target add x86_64-unknown-linux-musl\nENV RUSTFLAGS=\"-C linker=musl-gcc\"\nARG RUST_PROTOBUF_VERSION\nRUN mkdir -p /rust-protobuf \\\n && curl -sSL https://api.github.com/repos/stepancheg/rust-protobuf/tarball/v${RUST_PROTOBUF_VERSION} | tar xz --strip 1 -C /rust-protobuf \\\n && cd /rust-protobuf/protobuf-codegen \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /rust-protobuf/target/x86_64-unknown-linux-musl/release/protoc-gen-rust /out/usr/bin/protoc-gen-rust\nARG GRPC_RUST_VERSION\nRUN mkdir -p /grpc-rust \\\n && curl -sSL https://api.github.com/repos/stepancheg/grpc-rust/tarball/v${GRPC_RUST_VERSION} | tar xz --strip 1 -C /grpc-rust \\\n && cd /grpc-rust/grpc-compiler \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /grpc-rust/target/x86_64-unknown-linux-musl/release/protoc-gen-rust-grpc /out/usr/bin/protoc-gen-rust-grpc\nFROM swift:${SWIFT_VERSION} AS swift_builder\nRUN apt-get update \\\n && apt-get install unzip patchelf libnghttp2-dev curl libssl-dev zlib1g-dev -y\nARG GRPC_SWIFT_VERSION\nRUN mkdir -p /grpc-swift \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-swift/tarball/${GRPC_SWIFT_VERSION} | tar xz --strip 1 -C /grpc-swift \\\n && cd /grpc-swift \\\n && make \\\n && install -Ds /grpc-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swift \\\n && install -Ds /grpc-swift/protoc-gen-swiftgrpc /protoc-gen-swift/protoc-gen-swiftgrpc \\\n && cp /lib64/ld-linux-x86-64.so.2 $( ldd /protoc-gen-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swiftgrpc | awk '{print $3}' | grep /lib | sort | uniq ;) /protoc-gen-swift/ \\\n && find /protoc-gen-swift/ -name 'lib*.so*' -exec patchelf --set-rpath /protoc-gen-swift {} ; \\\n && for p in protoc-gen-swift protoc-gen-swiftgrpc; do patchelf --set-interpreter /protoc-gen-swift/ld-linux-x86-64.so.2 /protoc-gen-swift/${p} ; done\nFROM alpine:${ALPINE_VERSION} AS packer\nRUN apk add --no-cache curl\nARG UPX_VERSION\nRUN mkdir -p /upx \\\n && curl -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz | tar xJ --strip 1 -C /upx \\\n && install -D /upx/upx /usr/local/bin/upx\nCOPY --from=protoc_builder /out/ /out/\nCOPY --from=go_builder /out/ /out/\nCOPY --from=rust_builder /out/ /out/\nCOPY --from=swift_builder /protoc-gen-swift /out/protoc-gen-swift\nRUN upx --lzma /out/usr/bin/grpc_* /out/usr/bin/protoc-gen-*\nRUN find /out -name \"*.a\" -delete -or -name \"*.la\" -delete\nFROM alpine:${ALPINE_VERSION}\nLABEL maintainer=\"Roman Volosatovs <roman@thethingsnetwork.org>\"\nCOPY --from=packer /out/ /\nRUN apk add --no-cache bash libstdc++ \\\n && for p in protoc-gen-swift protoc-gen-swiftgrpc; do ln -s /protoc-gen-swift/${p} /usr/bin/${p} ; done \\\n && ln -s /usr/bin/grpc_cpp_plugin /usr/bin/protoc-gen-grpc-cpp \\\n && ln -s /usr/bin/grpc_csharp_plugin /usr/bin/protoc-gen-grpc-csharp \\\n && ln -s /usr/bin/grpc_objective_c_plugin /usr/bin/protoc-gen-grpc-objc \\\n && ln -s /usr/bin/grpc_node_plugin /usr/bin/protoc-gen-grpc-js \\\n && ln -s /usr/bin/grpc_php_plugin /usr/bin/protoc-gen-grpc-php \\\n && ln -s /usr/bin/grpc_python_plugin /usr/bin/protoc-gen-grpc-python \\\n && ln -s /usr/bin/grpc_ruby_plugin /usr/bin/protoc-gen-grpc-ruby \\\n && ln -s /usr/bin/protoc-gen-swiftgrpc /usr/bin/protoc-gen-grpc-swift\nCOPY protoc-wrapper /usr/bin/protoc-wrapper\nENTRYPOINT [\"protoc-wrapper\", \"-I/usr/include\"]\n","injectedSmells":[],"originalDockerfileHash":"6bac25507d83ffa1c363e8ac47c47f04","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG ALPINE_VERSION\nARG GO_VERSION\nARG RUST_VERSION\nARG SWIFT_VERSION\nFROM alpine:${ALPINE_VERSION} AS protoc_builder\nRUN apk add --no-cache build-base curl automake autoconf libtool git zlib-dev\nRUN mkdir -p /out\nARG GRPC_VERSION\nRUN git clone --recursive --depth=1 -b v${GRPC_VERSION} https://github.com/grpc/grpc.git /grpc \\\n && ln -s /grpc/third_party/protobuf /protobuf \\\n && cd /protobuf \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr --enable-static=no \\\n && make \\\n && make check \\\n && make install \\\n && make install DESTDIR=/out \\\n && cd /grpc \\\n && make install-plugins prefix=/out/usr\nARG PROTOBUF_C_VERSION\nRUN mkdir -p /protobuf-c \\\n && curl -sSL https://api.github.com/repos/protobuf-c/protobuf-c/tarball/${PROTOBUF_C_VERSION} | tar xz --strip 1 -C /protobuf-c \\\n && cd /protobuf-c \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr \\\n && make \\\n && make install DESTDIR=/out\nARG GRPC_JAVA_VERSION\nRUN mkdir -p /grpc-java \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-java/tarball/v${GRPC_JAVA_VERSION} | tar xz --strip 1 -C /grpc-java \\\n && cd /grpc-java \\\n && g++ -I. -I/protobuf/src compiler/src/java_plugin/cpp/*.cpp -L/protobuf/src/.libs -lprotoc -lprotobuf -lpthread --std=c++0x -s -o protoc-gen-grpc-java \\\n && install -Ds protoc-gen-grpc-java /out/usr/bin/protoc-gen-grpc-java\nARG GRPC_WEB_VERSION\nRUN mkdir -p /grpc-web \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-web/tarball/${GRPC_WEB_VERSION} | tar xz --strip 1 -C /grpc-web \\\n && cd /grpc-web \\\n && make install-plugin \\\n && install -Ds /usr/local/bin/protoc-gen-grpc-web /out/usr/bin/protoc-gen-grpc-web\nFROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS go_builder\nRUN apk add --no-cache build-base curl git\nENV GO111MODULE=\"on\"\nARG PROTOC_GEN_DOC_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && curl -sSL https://api.github.com/repos/pseudomuto/protoc-gen-doc/tarball/v${PROTOC_GEN_DOC_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && cd ${GOPATH}/src/github.com/pseudomuto/protoc-gen-doc \\\n && go build -ldflags '-w -s' -o /protoc-gen-doc-out/protoc-gen-doc ./cmd/protoc-gen-doc \\\n && install -Ds /protoc-gen-doc-out/protoc-gen-doc /out/usr/bin/protoc-gen-doc\nARG PROTOC_GEN_FIELDMASK_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-fieldmask/tarball/v${PROTOC_GEN_FIELDMASK_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-fieldmask \\\n && go build -ldflags '-w -s' -o /protoc-gen-fieldmask-out/protoc-gen-fieldmask . \\\n && install -Ds /protoc-gen-fieldmask-out/protoc-gen-fieldmask /out/usr/bin/protoc-gen-fieldmask\nARG PROTOC_GEN_GO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/golang/protobuf \\\n && curl -sSL https://api.github.com/repos/golang/protobuf/tarball/v${PROTOC_GEN_GO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/golang/protobuf \\\n && cd ${GOPATH}/src/github.com/golang/protobuf \\\n && go build -ldflags '-w -s' -o /golang-protobuf-out/protoc-gen-go ./protoc-gen-go \\\n && install -Ds /golang-protobuf-out/protoc-gen-go /out/usr/bin/protoc-gen-go\nARG PROTOC_GEN_GOGO_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/gogo/protobuf \\\n && curl -sSL https://api.github.com/repos/gogo/protobuf/tarball/v${PROTOC_GEN_GOGO_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/gogo/protobuf \\\n && cd ${GOPATH}/src/github.com/gogo/protobuf \\\n && go build -ldflags '-w -s' -o /gogo-protobuf-out/protoc-gen-gogo ./protoc-gen-gogo \\\n && install -Ds /gogo-protobuf-out/protoc-gen-gogo /out/usr/bin/protoc-gen-gogo \\\n && mkdir -p /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D $( find ./protobuf/google/protobuf -name '*.proto' ;) -t /out/usr/include/github.com/gogo/protobuf/protobuf/google/protobuf \\\n && install -D ./gogoproto/gogo.proto /out/usr/include/github.com/gogo/protobuf/gogoproto/gogo.proto\nARG PROTOC_GEN_GOGOTTN_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && curl -sSL https://api.github.com/repos/TheThingsIndustries/protoc-gen-gogottn/tarball/v${PROTOC_GEN_GOGOTTN_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && cd ${GOPATH}/src/github.com/TheThingsIndustries/protoc-gen-gogottn \\\n && go build -ldflags '-w -s' -o /protoc-gen-gogottn-out/protoc-gen-gogottn . \\\n && install -Ds /protoc-gen-gogottn-out/protoc-gen-gogottn /out/usr/bin/protoc-gen-gogottn\nARG PROTOC_GEN_LINT_VERSION\nRUN cd / \\\n && curl -sSLO https://github.com/ckaznocha/protoc-gen-lint/releases/download/v${PROTOC_GEN_LINT_VERSION}/protoc-gen-lint_linux_amd64.zip \\\n && mkdir -p /protoc-gen-lint-out \\\n && cd /protoc-gen-lint-out \\\n && unzip -q /protoc-gen-lint_linux_amd64.zip \\\n && install -Ds /protoc-gen-lint-out/protoc-gen-lint /out/usr/bin/protoc-gen-lint\nARG PROTOC_GEN_VALIDATE_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && curl -sSL https://api.github.com/repos/envoyproxy/protoc-gen-validate/tarball/v${PROTOC_GEN_VALIDATE_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && cd ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \\\n && go build -ldflags '-w -s' -o /protoc-gen-validate-out/protoc-gen-validate . \\\n && install -Ds /protoc-gen-validate-out/protoc-gen-validate /out/usr/bin/protoc-gen-validate \\\n && install -D ./validate/validate.proto /out/usr/include/github.com/envoyproxy/protoc-gen-validate/validate/validate.proto\nARG GRPC_GATEWAY_VERSION\nRUN mkdir -p ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && curl -sSL https://api.github.com/repos/grpc-ecosystem/grpc-gateway/tarball/v${GRPC_GATEWAY_VERSION} | tar xz --strip 1 -C ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && cd ${GOPATH}/src/github.com/grpc-ecosystem/grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-grpc-gateway ./protoc-gen-grpc-gateway \\\n && go build -ldflags '-w -s' -o /grpc-gateway-out/protoc-gen-swagger ./protoc-gen-swagger \\\n && install -Ds /grpc-gateway-out/protoc-gen-grpc-gateway /out/usr/bin/protoc-gen-grpc-gateway \\\n && install -Ds /grpc-gateway-out/protoc-gen-swagger /out/usr/bin/protoc-gen-swagger \\\n && mkdir -p /out/usr/include/google/api \\\n && install -D $( find ./third_party/googleapis/google/api -name '*.proto' ;) -t /out/usr/include/google/api \\\n && mkdir -p /out/usr/include/google/rpc \\\n && install -D $( find ./third_party/googleapis/google/rpc -name '*.proto' ;) -t /out/usr/include/google/rpc\nFROM rust:${RUST_VERSION}-slim AS rust_builder\nRUN apt-get update \\\n && apt-get install musl-tools curl -y\nRUN rustup target add x86_64-unknown-linux-musl\nENV RUSTFLAGS=\"-C linker=musl-gcc\"\nARG RUST_PROTOBUF_VERSION\nRUN mkdir -p /rust-protobuf \\\n && curl -sSL https://api.github.com/repos/stepancheg/rust-protobuf/tarball/v${RUST_PROTOBUF_VERSION} | tar xz --strip 1 -C /rust-protobuf \\\n && cd /rust-protobuf/protobuf-codegen \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /rust-protobuf/target/x86_64-unknown-linux-musl/release/protoc-gen-rust /out/usr/bin/protoc-gen-rust\nARG GRPC_RUST_VERSION\nRUN mkdir -p /grpc-rust \\\n && curl -sSL https://api.github.com/repos/stepancheg/grpc-rust/tarball/v${GRPC_RUST_VERSION} | tar xz --strip 1 -C /grpc-rust \\\n && cd /grpc-rust/grpc-compiler \\\n && cargo build --target=x86_64-unknown-linux-musl --release \\\n && install -Ds /grpc-rust/target/x86_64-unknown-linux-musl/release/protoc-gen-rust-grpc /out/usr/bin/protoc-gen-rust-grpc\nFROM swift:${SWIFT_VERSION} AS swift_builder\nRUN apt-get update \\\n && apt-get install unzip patchelf libnghttp2-dev curl libssl-dev zlib1g-dev -y\nARG GRPC_SWIFT_VERSION\nRUN mkdir -p /grpc-swift \\\n && curl -sSL https://api.github.com/repos/grpc/grpc-swift/tarball/${GRPC_SWIFT_VERSION} | tar xz --strip 1 -C /grpc-swift \\\n && cd /grpc-swift \\\n && make \\\n && install -Ds /grpc-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swift \\\n && install -Ds /grpc-swift/protoc-gen-swiftgrpc /protoc-gen-swift/protoc-gen-swiftgrpc \\\n && cp /lib64/ld-linux-x86-64.so.2 $( ldd /protoc-gen-swift/protoc-gen-swift /protoc-gen-swift/protoc-gen-swiftgrpc | awk '{print $3}' | grep /lib | sort | uniq ;) /protoc-gen-swift/ \\\n && find /protoc-gen-swift/ -name 'lib*.so*' -exec patchelf --set-rpath /protoc-gen-swift {}\nFROM alpine:${ALPINE_VERSION} AS packer\nRUN apk add --no-cache curl\nARG UPX_VERSION\nRUN mkdir -p /upx \\\n && curl -sSL https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz | tar xJ --strip 1 -C /upx \\\n && install -D /upx/upx /usr/local/bin/upx\nCOPY --from=protoc_builder /out/ /out/\nCOPY --from=go_builder /out/ /out/\nCOPY --from=rust_builder /out/ /out/\nCOPY --from=swift_builder /protoc-gen-swift /out/protoc-gen-swift\nRUN upx --lzma /out/usr/bin/grpc_* /out/usr/bin/protoc-gen-*\nRUN find /out -name \"*.a\" -delete -or -name \"*.la\" -delete\nFROM alpine:${ALPINE_VERSION}\nLABEL maintainer=\"Roman Volosatovs <roman@thethingsnetwork.org>\"\nCOPY --from=packer /out/ /\nRUN apk add --no-cache bash libstdc++ \\\n && for p in protoc-gen-swift protoc-gen-swiftgrpc; do ln -s /protoc-gen-swift/${p} /usr/bin/${p} ; done \\\n && ln -s /usr/bin/grpc_cpp_plugin /usr/bin/protoc-gen-grpc-cpp \\\n && ln -s /usr/bin/grpc_csharp_plugin /usr/bin/protoc-gen-grpc-csharp \\\n && ln -s /usr/bin/grpc_objective_c_plugin /usr/bin/protoc-gen-grpc-objc \\\n && ln -s /usr/bin/grpc_node_plugin /usr/bin/protoc-gen-grpc-js \\\n && ln -s /usr/bin/grpc_php_plugin /usr/bin/protoc-gen-grpc-php \\\n && ln -s /usr/bin/grpc_python_plugin /usr/bin/protoc-gen-grpc-python \\\n && ln -s /usr/bin/grpc_ruby_plugin /usr/bin/protoc-gen-grpc-ruby \\\n && ln -s /usr/bin/protoc-gen-swiftgrpc /usr/bin/protoc-gen-grpc-swift\nCOPY protoc-wrapper /usr/bin/protoc-wrapper\nENTRYPOINT [\"protoc-wrapper\", \"-I/usr/include\"]\n","originalDockerfileUglifiedHash":"54ade2fd0c77ccb56f94f4f5a446bf60","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a317f4e77367fb23e4a9219626cdd83542ff9b4b.dockerfile"}