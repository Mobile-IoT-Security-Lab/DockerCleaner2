{"seed":2754343372,"processedDockerfileHash":"7480a4c9cee9957081de0118423547d2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Newer python base images may break gevent.\n#   See https://github.com/docker-library/python/issues/29#issuecomment-70727289\nFROM python:2.7.7\nMAINTAINER thanos@tellapart.com\n#  #####\n#   System prerequisite installation\n#  #####\n#   Update apt repository\nRUN :\n#   Install python prerequisites\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip python-dev build-essential -y )\n#   Install libpcap\nRUN (apt-get update ;apt-get install --no-install-recommends libpcap-dev -y )\n#   Install go\nRUN echo 'e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a go1.6.2.linux-amd64.tar.gz' > go.sha256sum \\\n && curl -s -L -o go1.6.2.linux-amd64.tar.gz https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz \\\n && sha256sum -c go.sha256sum \\\n && tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n#   Install gor\nENV PATH=\"$PATH:/usr/local/go/bin\"\nENV GOPATH=\"/opt/go\"\nRUN mkdir -p $GOPATH \\\n && go get github.com/buger/gor \\\n && cd $GOPATH/src/github.com/buger/gor \\\n && go build\n#   Aurora/Mesos requirements (see AURORA-1487)\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libcurl4-nss-dev libapr1-dev libsvn-dev -y )\n#   Install nginx\nENV NGX_REQS=\"openssl libssl1.0.0 libxml2 libxslt1.1 libgeoip1 libpcre3 zlib1g\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends $NGX_REQS -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV NGX_DEV_KIT_VER=\"0.2.19\"\nENV NGX_VER=\"1.9.0\"\nENV NGX_MD5=\"487c26cf0470d8869c41a73621847268\"\nENV NGX_STATSD_VER=\"b756a12abf110b9e36399ab7ede346d4bb86d691\"\nENV NGX_HEADERS_MORE_VER=\"0.26\"\nENV NGX_ECHO_VER=\"0.57\"\nENV DEV_PKGS=\"build-essential curl libpcre3-dev zlib1g-dev libssl-dev libxml2-dev libgeoip-dev\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends $DEV_PKGS -y ) \\\n && mkdir -p /tmp/build \\\n && cd /tmp/build \\\n && curl -s -L -o ngx_devel.tar.gz https://github.com/simpl/ngx_devel_kit/archive/v$NGX_DEV_KIT_VER.tar.gz \\\n && curl -s -L -o ngx.tar.gz http://nginx.org/download/nginx-$NGX_VER.tar.gz \\\n && curl -s -L -o ngx_statsd.tar.gz https://github.com/zebrafishlabs/nginx-statsd/archive/$NGX_STATSD_VER.tar.gz \\\n && curl -s -L -o ngx_headers_more.tar.gz https://github.com/openresty/headers-more-nginx-module/archive/v$NGX_HEADERS_MORE_VER.tar.gz \\\n && curl -s -L -o ngx_echo.tar.gz https://github.com/openresty/echo-nginx-module/archive/v$NGX_ECHO_VER.tar.gz \\\n && echo \"$NGX_MD5 ngx.tar.gz\" | md5sum -c - || (echo \"MD5 for ngx.tar.gz didn't match expected!\" \\\n && exit 1 ) \\\n && tar -xvf ngx_devel.tar.gz \\\n && tar -xvf ngx.tar.gz \\\n && tar -xvf ngx_statsd.tar.gz \\\n && tar -xvf ngx_headers_more.tar.gz \\\n && tar -xvf ngx_echo.tar.gz \\\n && cd /tmp/build/nginx-$NGX_VER \\\n && ./configure --prefix=/usr --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-log-path=/var/log/nginx/access.log --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --lock-path=/var/lock/nginx.lock --pid-path=/var/run/nginx.pid --with-debug --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-stream --with-ipv6 --with-sha1=/usr/include/openssl --with-md5=/usr/include/openssl --add-module=/tmp/build/nginx-statsd-$NGX_STATSD_VER/ --add-module=/tmp/build/headers-more-nginx-module-$NGX_HEADERS_MORE_VER --add-module=/tmp/build/echo-nginx-module-$NGX_ECHO_VER \\\n && make -j4 \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/build \\\n && apt-get purge -y $DEV_PKGS \\\n && apt-get autoremove -y \\\n && apt-get purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir -p /etc/nginx/sites-enabled \\\n && mkdir -p /etc/nginx/sites-available \\\n && mkdir -p /var/lib/nginx\n#  #####\n#   System prerequisite configuration\n#  #####\n#   Set up run directory for pids\nRUN mkdir -p /var/run\n#   Remove default nginx config\nRUN rm /etc/nginx/nginx.conf\n#   Symlink aurproxy nginx config\nRUN mkdir -p /etc/aurproxy/nginx\nRUN ln -sf /etc/aurproxy/nginx/nginx.conf /etc/nginx\n#   Create dynamic gor config location\nRUN mkdir -p /etc/aurproxy/gor\n#  #####\n#   Application prerequisite installation\n#  #####\n#   Set up application sandbox\n#   (Gets mounted by aurora in production)\nRUN mkdir -p /mnt/mesos/sandbox/sandbox\n#   Set up application directory\nRUN mkdir -p /opt/aurproxy/\n#   Add application requirements\nCOPY ./requirements.txt /opt/aurproxy/requirements.txt\n#    Install application requirements\nRUN pip install -r /opt/aurproxy/requirements.txt\n#  #####\n#   Application setup\n#  #####\nCOPY ./tellapart/__init__.py /opt/aurproxy/tellapart/__init__.py\nCOPY ./tellapart/aurproxy /opt/aurproxy/tellapart/aurproxy\nCOPY ./templates /opt/aurproxy/tellapart/aurproxy/templates\n#   Not intended to be run\n#   Command will come from aurproxy.aur\nCMD [\"echo\", \"done\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Newer python base images may break gevent.\n#  See https://github.com/docker-library/python/issues/29#issuecomment-70727289\nFROM python:2.7.7\nMAINTAINER thanos@tellapart.com\n# #####\n#  System prerequisite installation\n# #####\n#  Update apt repository\nRUN apt-get update\n#  Install python prerequisites\nRUN apt-get install python-pip python-dev build-essential -y\n#  Install libpcap\nRUN apt-get install libpcap-dev -y\n#  Install go\nRUN echo 'e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a go1.6.2.linux-amd64.tar.gz' > go.sha256sum \\\n && curl -s -L -o go1.6.2.linux-amd64.tar.gz https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz \\\n && sha256sum -c go.sha256sum \\\n && tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n#  Install gor\nENV PATH=\"$PATH:/usr/local/go/bin\"\nENV GOPATH=\"/opt/go\"\nRUN mkdir -p $GOPATH \\\n && go get github.com/buger/gor \\\n && cd $GOPATH/src/github.com/buger/gor \\\n && go build\n#  Aurora/Mesos requirements (see AURORA-1487)\nRUN apt-get update \\\n && apt-get install libcurl4-nss-dev libapr1-dev libsvn-dev -y\n#  Install nginx\nENV NGX_REQS=\"openssl libssl1.0.0 libxml2 libxslt1.1 libgeoip1 libpcre3 zlib1g\"\nRUN apt-get update \\\n && apt-get install $NGX_REQS -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV NGX_DEV_KIT_VER=\"0.2.19\"\nENV NGX_VER=\"1.9.0\"\nENV NGX_MD5=\"487c26cf0470d8869c41a73621847268\"\nENV NGX_STATSD_VER=\"b756a12abf110b9e36399ab7ede346d4bb86d691\"\nENV NGX_HEADERS_MORE_VER=\"0.26\"\nENV NGX_ECHO_VER=\"0.57\"\nENV DEV_PKGS=\"build-essential curl libpcre3-dev zlib1g-dev libssl-dev libxml2-dev libgeoip-dev\"\nRUN apt-get update \\\n && apt-get install $DEV_PKGS -y \\\n && mkdir -p /tmp/build \\\n && cd /tmp/build \\\n && curl -s -L -o ngx_devel.tar.gz https://github.com/simpl/ngx_devel_kit/archive/v$NGX_DEV_KIT_VER.tar.gz \\\n && curl -s -L -o ngx.tar.gz http://nginx.org/download/nginx-$NGX_VER.tar.gz \\\n && curl -s -L -o ngx_statsd.tar.gz https://github.com/zebrafishlabs/nginx-statsd/archive/$NGX_STATSD_VER.tar.gz \\\n && curl -s -L -o ngx_headers_more.tar.gz https://github.com/openresty/headers-more-nginx-module/archive/v$NGX_HEADERS_MORE_VER.tar.gz \\\n && curl -s -L -o ngx_echo.tar.gz https://github.com/openresty/echo-nginx-module/archive/v$NGX_ECHO_VER.tar.gz \\\n && echo \"$NGX_MD5 ngx.tar.gz\" | md5sum -c - || (echo \"MD5 for ngx.tar.gz didn't match expected!\" \\\n && exit 1 ) \\\n && tar -xvf ngx_devel.tar.gz \\\n && tar -xvf ngx.tar.gz \\\n && tar -xvf ngx_statsd.tar.gz \\\n && tar -xvf ngx_headers_more.tar.gz \\\n && tar -xvf ngx_echo.tar.gz \\\n && cd /tmp/build/nginx-$NGX_VER \\\n && ./configure --prefix=/usr --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-log-path=/var/log/nginx/access.log --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --lock-path=/var/lock/nginx.lock --pid-path=/var/run/nginx.pid --with-debug --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-stream --with-ipv6 --with-sha1=/usr/include/openssl --with-md5=/usr/include/openssl --add-module=/tmp/build/nginx-statsd-$NGX_STATSD_VER/ --add-module=/tmp/build/headers-more-nginx-module-$NGX_HEADERS_MORE_VER --add-module=/tmp/build/echo-nginx-module-$NGX_ECHO_VER \\\n && make -j4 \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/build \\\n && apt-get purge -y $DEV_PKGS \\\n && apt-get autoremove -y \\\n && apt-get purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir -p /etc/nginx/sites-enabled \\\n && mkdir -p /etc/nginx/sites-available \\\n && mkdir -p /var/lib/nginx\n# #####\n#  System prerequisite configuration\n# #####\n#  Set up run directory for pids\nRUN mkdir -p /var/run\n#  Remove default nginx config\nRUN rm /etc/nginx/nginx.conf\n#  Symlink aurproxy nginx config\nRUN mkdir -p /etc/aurproxy/nginx\nRUN ln -sf /etc/aurproxy/nginx/nginx.conf /etc/nginx\n#  Create dynamic gor config location\nRUN mkdir -p /etc/aurproxy/gor\n# #####\n#  Application prerequisite installation\n# #####\n#  Set up application sandbox\n#  (Gets mounted by aurora in production)\nRUN mkdir -p /mnt/mesos/sandbox/sandbox\n#  Set up application directory\nRUN mkdir -p /opt/aurproxy/\n#  Add application requirements\nADD ./requirements.txt /opt/aurproxy/requirements.txt\n#   Install application requirements\nRUN pip install -r /opt/aurproxy/requirements.txt\n# #####\n#  Application setup\n# #####\nADD ./tellapart/__init__.py /opt/aurproxy/tellapart/__init__.py\nADD ./tellapart/aurproxy /opt/aurproxy/tellapart/aurproxy\nADD ./templates /opt/aurproxy/tellapart/aurproxy/templates\n#  Not intended to be run\n#  Command will come from aurproxy.aur\nCMD [\"echo\", \"done\"]\n","injectedSmells":[],"originalDockerfileHash":"728d49b39fbf01286a46fe32a42bf1cc","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Newer python base images may break gevent.\n#   See https://github.com/docker-library/python/issues/29#issuecomment-70727289\nFROM python:2.7.7\nMAINTAINER thanos@tellapart.com\n#  #####\n#   System prerequisite installation\n#  #####\n#   Update apt repository\nRUN apt-get update\n#   Install python prerequisites\nRUN apt-get install python-pip python-dev build-essential -y\n#   Install libpcap\nRUN apt-get install libpcap-dev -y\n#   Install go\nRUN echo 'e40c36ae71756198478624ed1bb4ce17597b3c19d243f3f0899bb5740d56212a go1.6.2.linux-amd64.tar.gz' > go.sha256sum \\\n && curl -s -L -o go1.6.2.linux-amd64.tar.gz https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz \\\n && sha256sum -c go.sha256sum \\\n && tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n#   Install gor\nENV PATH=\"$PATH:/usr/local/go/bin\"\nENV GOPATH=\"/opt/go\"\nRUN mkdir -p $GOPATH \\\n && go get github.com/buger/gor \\\n && cd $GOPATH/src/github.com/buger/gor \\\n && go build\n#   Aurora/Mesos requirements (see AURORA-1487)\nRUN apt-get update \\\n && apt-get install libcurl4-nss-dev libapr1-dev libsvn-dev -y\n#   Install nginx\nENV NGX_REQS=\"openssl libssl1.0.0 libxml2 libxslt1.1 libgeoip1 libpcre3 zlib1g\"\nRUN apt-get update \\\n && apt-get install $NGX_REQS -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV NGX_DEV_KIT_VER=\"0.2.19\"\nENV NGX_VER=\"1.9.0\"\nENV NGX_MD5=\"487c26cf0470d8869c41a73621847268\"\nENV NGX_STATSD_VER=\"b756a12abf110b9e36399ab7ede346d4bb86d691\"\nENV NGX_HEADERS_MORE_VER=\"0.26\"\nENV NGX_ECHO_VER=\"0.57\"\nENV DEV_PKGS=\"build-essential curl libpcre3-dev zlib1g-dev libssl-dev libxml2-dev libgeoip-dev\"\nRUN apt-get update \\\n && apt-get install $DEV_PKGS -y \\\n && mkdir -p /tmp/build \\\n && cd /tmp/build \\\n && curl -s -L -o ngx_devel.tar.gz https://github.com/simpl/ngx_devel_kit/archive/v$NGX_DEV_KIT_VER.tar.gz \\\n && curl -s -L -o ngx.tar.gz http://nginx.org/download/nginx-$NGX_VER.tar.gz \\\n && curl -s -L -o ngx_statsd.tar.gz https://github.com/zebrafishlabs/nginx-statsd/archive/$NGX_STATSD_VER.tar.gz \\\n && curl -s -L -o ngx_headers_more.tar.gz https://github.com/openresty/headers-more-nginx-module/archive/v$NGX_HEADERS_MORE_VER.tar.gz \\\n && curl -s -L -o ngx_echo.tar.gz https://github.com/openresty/echo-nginx-module/archive/v$NGX_ECHO_VER.tar.gz \\\n && echo \"$NGX_MD5 ngx.tar.gz\" | md5sum -c - || (echo \"MD5 for ngx.tar.gz didn't match expected!\" \\\n && exit 1 ) \\\n && tar -xvf ngx_devel.tar.gz \\\n && tar -xvf ngx.tar.gz \\\n && tar -xvf ngx_statsd.tar.gz \\\n && tar -xvf ngx_headers_more.tar.gz \\\n && tar -xvf ngx_echo.tar.gz \\\n && cd /tmp/build/nginx-$NGX_VER \\\n && ./configure --prefix=/usr --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-log-path=/var/log/nginx/access.log --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --lock-path=/var/lock/nginx.lock --pid-path=/var/run/nginx.pid --with-debug --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --with-stream --with-ipv6 --with-sha1=/usr/include/openssl --with-md5=/usr/include/openssl --add-module=/tmp/build/nginx-statsd-$NGX_STATSD_VER/ --add-module=/tmp/build/headers-more-nginx-module-$NGX_HEADERS_MORE_VER --add-module=/tmp/build/echo-nginx-module-$NGX_ECHO_VER \\\n && make -j4 \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/build \\\n && apt-get purge -y $DEV_PKGS \\\n && apt-get autoremove -y \\\n && apt-get purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN mkdir -p /etc/nginx/sites-enabled \\\n && mkdir -p /etc/nginx/sites-available \\\n && mkdir -p /var/lib/nginx\n#  #####\n#   System prerequisite configuration\n#  #####\n#   Set up run directory for pids\nRUN mkdir -p /var/run\n#   Remove default nginx config\nRUN rm /etc/nginx/nginx.conf\n#   Symlink aurproxy nginx config\nRUN mkdir -p /etc/aurproxy/nginx\nRUN ln -sf /etc/aurproxy/nginx/nginx.conf /etc/nginx\n#   Create dynamic gor config location\nRUN mkdir -p /etc/aurproxy/gor\n#  #####\n#   Application prerequisite installation\n#  #####\n#   Set up application sandbox\n#   (Gets mounted by aurora in production)\nRUN mkdir -p /mnt/mesos/sandbox/sandbox\n#   Set up application directory\nRUN mkdir -p /opt/aurproxy/\n#   Add application requirements\nADD ./requirements.txt /opt/aurproxy/requirements.txt\n#    Install application requirements\nRUN pip install -r /opt/aurproxy/requirements.txt\n#  #####\n#   Application setup\n#  #####\nADD ./tellapart/__init__.py /opt/aurproxy/tellapart/__init__.py\nADD ./tellapart/aurproxy /opt/aurproxy/tellapart/aurproxy\nADD ./templates /opt/aurproxy/tellapart/aurproxy/templates\n#   Not intended to be run\n#   Command will come from aurproxy.aur\nCMD [\"echo\", \"done\"]\n","originalDockerfileUglifiedHash":"15768d5d1794c9902bdb449214de989c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f2ac38e659cb6685c94d184574d4bf53749c9cf4.dockerfile"}