{"seed":1693939276,"processedDockerfileHash":"2d51ca25c0f8e708d68a8277e8d5af04","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 cmake=3.5.1-1ubuntu3 g++=4:5.3.1-1ubuntu1 make=4.1-6 pkg-config=0.29.1-0ubuntu1 graphviz=2.38.0-12ubuntu2.1 doxygen=1.8.11-1ubuntu0.1 git=1:2.7.4-0ubuntu1.10 curl=7.47.0-1ubuntu2.19 libtool-bin=2.4.6-0.1 autoconf=2.69-9 automake=1:1.15-4ubuntu1 bzip2=1.0.6-8ubuntu0.2 xsltproc=1.1.28-2.1ubuntu0.3 gperf=3.0.4-2 unzip=6.0-20ubuntu1.1 --yes\nWORKDIR /usr/local\nENV CFLAGS=\"-fPIC\"\nENV CXXFLAGS=\"-fPIC\"\n#  Cmake\nARG CMAKE_VERSION=3.14.0\nARG CMAKE_VERSION_DOT=v3.14\nARG CMAKE_HASH=aa76ba67b3c2af1946701f847073f4652af5cbd9f141f221c97af99127e75502\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#  # Boost\nARG BOOST_VERSION=1_69_0\nARG BOOST_VERSION_DOT=1.69.0\nARG BOOST_HASH=8f32d4617390d1c2d16f26a27ab60d97807b35440d45891fa340fc2648b04406\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"$CFLAGS\" cxxflags=\"$CXXFLAGS\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.1.1b\nARG OPENSSL_HASH=5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static \"$CFLAGS\" \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.3.1\nARG ZMQ_HASH=2cb1240db64ce1ea299e00474c646a2453a8435b\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_VERSION=v4.3.0\nARG CPPZMQ_HASH=213da0b04ae3b4d846c9abc46bab87f86bfb9cf4\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=8.0\nARG READLINE_HASH=e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.17\nARG SODIUM_HASH=b732443c442239c2e0184820e9b23cca0de0828c\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make check \\\n && make install\n#   Udev\nARG UDEV_VERSION=v3.2.7\nARG UDEV_HASH=4758e346a14126fc3a964de5831e411c27ebe487\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#   Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-shared \\\n && make \\\n && make install\n#   Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install\n#   Protobuf\nARG PROTOBUF_VERSION=v3.7.0\nARG PROTOBUF_HASH=582743bf40c5d3639a70f98f183914a2c0cd0680\nRUN set -ex \\\n && git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION} \\\n && cd protobuf \\\n && test `git rev-parse HEAD ` = ${PROTOBUF_HASH} || exit 1 \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#  WORKDIR /src\n#  COPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && cd / \\\n && git clone https://github.com/monero-project/monero.git src \\\n && cd src \\\n && git checkout v0.14.0.2 \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#   runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#   Create monero user\nRUN adduser --system --group --disabled-password monero \\\n && mkdir -p /wallet /home/monero/.bitmonero \\\n && chown -R monero:monero /home/monero/.bitmonero \\\n && chown -R monero:monero /wallet\nRUN apt-get update \\\n && apt-get install --no-install-recommends nginx=1.10.3-0ubuntu0.16.04.5 supervisor=3.2.0-2ubuntu0.2 -qqy \\\n && mkdir /supervisor \\\n && rm -rf /etc/nginx/sites-enabled/default\nCOPY supervisord.conf /supervisor/supervisord.conf\nCOPY conf/ /etc/nginx/conf.d/\n#   Contains the blockchain\nVOLUME /home/monero/.bitmonero\n#   Generate your wallet via accessing the container and run:\n#   cd /home/monero/wallet\n#   monero-wallet-cli\nVOLUME /home/monero/wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\n#   switch to user monero\nUSER monero\n#  ENTRYPOINT [\"monerod\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\nCMD /usr/bin/supervisord -u root -c /supervisor/supervisord.conf -n\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Multistage docker build, requires docker 17.05\n#  builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake bzip2 xsltproc gperf unzip --yes\nWORKDIR /usr/local\nENV CFLAGS=\"-fPIC\"\nENV CXXFLAGS=\"-fPIC\"\n# Cmake\nARG CMAKE_VERSION=3.14.0\nARG CMAKE_VERSION_DOT=v3.14\nARG CMAKE_HASH=aa76ba67b3c2af1946701f847073f4652af5cbd9f141f221c97af99127e75502\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n# # Boost\nARG BOOST_VERSION=1_69_0\nARG BOOST_VERSION_DOT=1.69.0\nARG BOOST_HASH=8f32d4617390d1c2d16f26a27ab60d97807b35440d45891fa340fc2648b04406\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"$CFLAGS\" cxxflags=\"$CXXFLAGS\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#  OpenSSL\nARG OPENSSL_VERSION=1.1.1b\nARG OPENSSL_HASH=5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static \"$CFLAGS\" \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#  ZMQ\nARG ZMQ_VERSION=v4.3.1\nARG ZMQ_HASH=2cb1240db64ce1ea299e00474c646a2453a8435b\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#  zmq.hpp\nARG CPPZMQ_VERSION=v4.3.0\nARG CPPZMQ_HASH=213da0b04ae3b4d846c9abc46bab87f86bfb9cf4\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#  Readline\nARG READLINE_VERSION=8.0\nARG READLINE_HASH=e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#  Sodium\nARG SODIUM_VERSION=1.0.17\nARG SODIUM_HASH=b732443c442239c2e0184820e9b23cca0de0828c\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make check \\\n && make install\n#  Udev\nARG UDEV_VERSION=v3.2.7\nARG UDEV_HASH=4758e346a14126fc3a964de5831e411c27ebe487\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#  Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-shared \\\n && make \\\n && make install\n#  Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install\n#  Protobuf\nARG PROTOBUF_VERSION=v3.7.0\nARG PROTOBUF_HASH=582743bf40c5d3639a70f98f183914a2c0cd0680\nRUN set -ex \\\n && git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION} \\\n && cd protobuf \\\n && test `git rev-parse HEAD ` = ${PROTOBUF_HASH} || exit 1 \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n# WORKDIR /src\n# COPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && cd / \\\n && git clone https://github.com/monero-project/monero.git src \\\n && cd src \\\n && git checkout v0.14.0.2 \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#  runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#  Create monero user\nRUN adduser --system --group --disabled-password monero \\\n && mkdir -p /wallet /home/monero/.bitmonero \\\n && chown -R monero:monero /home/monero/.bitmonero \\\n && chown -R monero:monero /wallet\nRUN apt-get update \\\n && apt-get install nginx supervisor -qqy \\\n && mkdir /supervisor \\\n && rm -rf /etc/nginx/sites-enabled/default\nCOPY supervisord.conf /supervisor/supervisord.conf\nCOPY conf/ /etc/nginx/conf.d/\n#  Contains the blockchain\nVOLUME /home/monero/.bitmonero\n#  Generate your wallet via accessing the container and run:\n#  cd /home/monero/wallet\n#  monero-wallet-cli\nVOLUME /home/monero/wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\n#  switch to user monero\nUSER monero\n# ENTRYPOINT [\"monerod\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\nCMD /usr/bin/supervisord -u root -c /supervisor/supervisord.conf -n\n","injectedSmells":[],"originalDockerfileHash":"01cdca046197ddf1fb929eb164f7764c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Multistage docker build, requires docker 17.05\n#   builder stage\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake bzip2 xsltproc gperf unzip --yes\nWORKDIR /usr/local\nENV CFLAGS=\"-fPIC\"\nENV CXXFLAGS=\"-fPIC\"\n#  Cmake\nARG CMAKE_VERSION=3.14.0\nARG CMAKE_VERSION_DOT=v3.14\nARG CMAKE_HASH=aa76ba67b3c2af1946701f847073f4652af5cbd9f141f221c97af99127e75502\nRUN set -ex \\\n && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \\\n && echo \"${CMAKE_HASH} cmake-${CMAKE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \\\n && cd cmake-${CMAKE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#  # Boost\nARG BOOST_VERSION=1_69_0\nARG BOOST_VERSION_DOT=1.69.0\nARG BOOST_HASH=8f32d4617390d1c2d16f26a27ab60d97807b35440d45891fa340fc2648b04406\nRUN set -ex \\\n && curl -s -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh \\\n && ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"$CFLAGS\" cxxflags=\"$CXXFLAGS\" stage\nENV BOOST_ROOT=\"/usr/local/boost_${BOOST_VERSION}\"\n#   OpenSSL\nARG OPENSSL_VERSION=1.1.1b\nARG OPENSSL_HASH=5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b\nRUN set -ex \\\n && curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure linux-x86_64 no-shared --static \"$CFLAGS\" \\\n && make build_generated \\\n && make libcrypto.a \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/local/openssl-${OPENSSL_VERSION}\"\n#   ZMQ\nARG ZMQ_VERSION=v4.3.1\nARG ZMQ_HASH=2cb1240db64ce1ea299e00474c646a2453a8435b\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#   zmq.hpp\nARG CPPZMQ_VERSION=v4.3.0\nARG CPPZMQ_HASH=213da0b04ae3b4d846c9abc46bab87f86bfb9cf4\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && mv *.hpp /usr/local/include\n#   Readline\nARG READLINE_VERSION=8.0\nARG READLINE_HASH=e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461\nRUN set -ex \\\n && curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && ./configure \\\n && make \\\n && make install\n#   Sodium\nARG SODIUM_VERSION=1.0.17\nARG SODIUM_HASH=b732443c442239c2e0184820e9b23cca0de0828c\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && make check \\\n && make install\n#   Udev\nARG UDEV_VERSION=v3.2.7\nARG UDEV_HASH=4758e346a14126fc3a964de5831e411c27ebe487\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#   Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && ./configure --disable-shared \\\n && make \\\n && make install\n#   Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install\n#   Protobuf\nARG PROTOBUF_VERSION=v3.7.0\nARG PROTOBUF_HASH=582743bf40c5d3639a70f98f183914a2c0cd0680\nRUN set -ex \\\n && git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION} \\\n && cd protobuf \\\n && test `git rev-parse HEAD ` = ${PROTOBUF_HASH} || exit 1 \\\n && git submodule update --init --recursive \\\n && ./autogen.sh \\\n && ./configure --enable-static --disable-shared \\\n && make \\\n && make install \\\n && ldconfig\n#  WORKDIR /src\n#  COPY . .\nENV USE_SINGLE_BUILDDIR=\"1\"\nARG NPROC\nRUN set -ex \\\n && cd / \\\n && git clone https://github.com/monero-project/monero.git src \\\n && cd src \\\n && git checkout v0.14.0.2 \\\n && git submodule init \\\n && git submodule update \\\n && rm -rf build \\\n && if [ -z \"$NPROC\" ] ; then make -j$( nproc ;) release-static ; else make -j$NPROC release-static ; fi\n#   runtime stage\nFROM ubuntu:16.04\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates --yes \\\n && apt-get clean \\\n && rm -rf /var/lib/apt\nCOPY --from=builder /src/build/release/bin /usr/local/bin/\n#   Create monero user\nRUN adduser --system --group --disabled-password monero \\\n && mkdir -p /wallet /home/monero/.bitmonero \\\n && chown -R monero:monero /home/monero/.bitmonero \\\n && chown -R monero:monero /wallet\nRUN apt-get update \\\n && apt-get install nginx supervisor -qqy \\\n && mkdir /supervisor \\\n && rm -rf /etc/nginx/sites-enabled/default\nCOPY supervisord.conf /supervisor/supervisord.conf\nCOPY conf/ /etc/nginx/conf.d/\n#   Contains the blockchain\nVOLUME /home/monero/.bitmonero\n#   Generate your wallet via accessing the container and run:\n#   cd /home/monero/wallet\n#   monero-wallet-cli\nVOLUME /home/monero/wallet\nEXPOSE 18080/tcp\nEXPOSE 18081/tcp\n#   switch to user monero\nUSER monero\n#  ENTRYPOINT [\"monerod\", \"--p2p-bind-ip=0.0.0.0\", \"--p2p-bind-port=18080\", \"--rpc-bind-ip=0.0.0.0\", \"--rpc-bind-port=18081\", \"--non-interactive\", \"--confirm-external-bind\"]\nCMD /usr/bin/supervisord -u root -c /supervisor/supervisord.conf -n\n","originalDockerfileUglifiedHash":"509d73dcbadd07672326786c9560aae5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8ddf51157a70dae71e696eeb5c4a3f4ec47dada7.dockerfile"}