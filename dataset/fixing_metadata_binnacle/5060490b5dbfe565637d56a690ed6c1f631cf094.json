{"seed":1587833677,"processedDockerfileHash":"d24cbe8da3db79aa958204a4414c52a9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   r2docker\n#   ========\n#\n#   Requires 1GB of free disk space\n#\n#   Build docker image with:\n#   $ docker build -t r2docker:latest .\n#\n#   Run the docker image:\n#   $ docker images\n#   $ export DOCKER_IMAGE_ID=$(docker images --format '{{.ID}}' -f 'label=r2docker')\n#   $ docker run -ti --cap-drop=ALL r2docker:latest\n#\n#   Once you quit the bash session get the container id with:\n#   $ docker ps -a | grep bash\n#\n#   To get into that shell again just type:\n#   $ docker start -ai <containedid>\n#\n#   To share those images:\n#   $ docker export <containerid> | xz > container.xz\n#   $ xz -d < container.xz | docker import -\n#\n#\n#   If you willing to debug a program within Docker, you should run it with CAP_SYS_PTRACE:\n#\n#   $ docker run -it --cap-drop=ALL --cap-add=SYS_PTRACE r2docker:latest\n#   $ r2 -d /bin/true\n#\n#   Using debian 9 as base image.\nFROM debian:9\n#   Label base\nLABEL r2docker=\"latest\"\n#   Radare version\nARG R2_VERSION=master\n#   R2pipe python version\nARG R2_PIPE_PY_VERSION=0.8.9\n#   R2pipe node version\nARG R2_PIPE_NPM_VERSION=2.3.2\nENV R2_VERSION=\"${R2_VERSION}\"\nENV R2_PIPE_PY_VERSION=\"${R2_PIPE_PY_VERSION}\"\nENV R2_PIPE_NPM_VERSION=\"${R2_PIPE_NPM_VERSION}\"\nRUN echo -e \"Building versions:\\n R2_VERSION=$R2_VERSION\\n R2_PIPE_PY_VERSION=${R2_PIPE_PY_VERSION}\\n R2_PIPE_NPM_VERSION=${R2_PIPE_NPM_VERSION}\"\n#   Build radare2 in a volume to minimize space used by build\nVOLUME [\"/mnt\"]\n#   Install all build dependencies\n#   Install bindings\n#   Build and install radare2 on master branch\n#   Remove all build dependencies\n#   Cleanup\nRUN DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl gcc git bison pkg-config make glib-2.0 libc6:i386 libncurses5:i386 libstdc++6:i386 gnupg2 sudo -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install --no-install-recommends nodejs python-pip -y \\\n && pip install r2pipe==\"$R2_PIPE_PY_VERSION\" \\\n && npm install \"r2pipe@$R2_PIPE_NPM_VERSION\" --unsafe-perm -g \\\n && cd /mnt \\\n && git clone -b \"$R2_VERSION\" -q --depth 1 https://github.com/radare/radare2.git \\\n && cd radare2 \\\n && ./sys/install.sh \\\n && make install \\\n && apt-get install --no-install-recommends xz-utils -y \\\n && apt-get remove --purge -y bison python-pip glib-2.0 \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Create non-root user\nRUN useradd -m r2 \\\n && adduser r2 sudo \\\n && echo \"r2:r2\" | chpasswd\n#   Initilise base user\nUSER r2\nWORKDIR /home/r2\nENV HOME=\"/home/r2\"\n#   Setup r2pm\nRUN r2pm init \\\n && r2pm update \\\n && chown -R r2:r2 /home/r2/.config\n#   Base command for container\nCMD [\"/bin/bash\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  r2docker\n#  ========\n#\n#  Requires 1GB of free disk space\n#\n#  Build docker image with:\n#  $ docker build -t r2docker:latest .\n#\n#  Run the docker image:\n#  $ docker images\n#  $ export DOCKER_IMAGE_ID=$(docker images --format '{{.ID}}' -f 'label=r2docker')\n#  $ docker run -ti --cap-drop=ALL r2docker:latest\n#\n#  Once you quit the bash session get the container id with:\n#  $ docker ps -a | grep bash\n#\n#  To get into that shell again just type:\n#  $ docker start -ai <containedid>\n#\n#  To share those images:\n#  $ docker export <containerid> | xz > container.xz\n#  $ xz -d < container.xz | docker import -\n#\n#\n#  If you willing to debug a program within Docker, you should run it with CAP_SYS_PTRACE:\n#\n#  $ docker run -it --cap-drop=ALL --cap-add=SYS_PTRACE r2docker:latest\n#  $ r2 -d /bin/true\n#\n#  Using debian 9 as base image.\nFROM debian:9\n#  Label base\nLABEL r2docker=\"latest\"\n#  Radare version\nARG R2_VERSION=master\n#  R2pipe python version\nARG R2_PIPE_PY_VERSION=0.8.9\n#  R2pipe node version\nARG R2_PIPE_NPM_VERSION=2.3.2\nENV R2_VERSION=\"${R2_VERSION}\"\nENV R2_PIPE_PY_VERSION=\"${R2_PIPE_PY_VERSION}\"\nENV R2_PIPE_NPM_VERSION=\"${R2_PIPE_NPM_VERSION}\"\nRUN echo -e \"Building versions:\\n R2_VERSION=$R2_VERSION\\n R2_PIPE_PY_VERSION=${R2_PIPE_PY_VERSION}\\n R2_PIPE_NPM_VERSION=${R2_PIPE_NPM_VERSION}\"\n#  Build radare2 in a volume to minimize space used by build\nVOLUME [\"/mnt\"]\n#  Install all build dependencies\n#  Install bindings\n#  Build and install radare2 on master branch\n#  Remove all build dependencies\n#  Cleanup\nRUN DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install curl gcc git bison pkg-config make glib-2.0 libc6:i386 libncurses5:i386 libstdc++6:i386 gnupg2 sudo -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs python-pip -y \\\n && pip install r2pipe==\"$R2_PIPE_PY_VERSION\" \\\n && npm install \"r2pipe@$R2_PIPE_NPM_VERSION\" --unsafe-perm -g \\\n && cd /mnt \\\n && git clone -b \"$R2_VERSION\" -q --depth 1 https://github.com/radare/radare2.git \\\n && cd radare2 \\\n && ./sys/install.sh \\\n && make install \\\n && apt-get install xz-utils -y \\\n && apt-get remove --purge -y bison python-pip glib-2.0 \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Create non-root user\nRUN useradd -m r2 \\\n && adduser r2 sudo \\\n && echo \"r2:r2\" | chpasswd\n#  Initilise base user\nUSER r2\nWORKDIR /home/r2\nENV HOME=\"/home/r2\"\n#  Setup r2pm\nRUN r2pm init \\\n && r2pm update \\\n && chown -R r2:r2 /home/r2/.config\n#  Base command for container\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"335ff1591dbb6fb0f61a4ca95ea46b4d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   r2docker\n#   ========\n#\n#   Requires 1GB of free disk space\n#\n#   Build docker image with:\n#   $ docker build -t r2docker:latest .\n#\n#   Run the docker image:\n#   $ docker images\n#   $ export DOCKER_IMAGE_ID=$(docker images --format '{{.ID}}' -f 'label=r2docker')\n#   $ docker run -ti --cap-drop=ALL r2docker:latest\n#\n#   Once you quit the bash session get the container id with:\n#   $ docker ps -a | grep bash\n#\n#   To get into that shell again just type:\n#   $ docker start -ai <containedid>\n#\n#   To share those images:\n#   $ docker export <containerid> | xz > container.xz\n#   $ xz -d < container.xz | docker import -\n#\n#\n#   If you willing to debug a program within Docker, you should run it with CAP_SYS_PTRACE:\n#\n#   $ docker run -it --cap-drop=ALL --cap-add=SYS_PTRACE r2docker:latest\n#   $ r2 -d /bin/true\n#\n#   Using debian 9 as base image.\nFROM debian:9\n#   Label base\nLABEL r2docker=\"latest\"\n#   Radare version\nARG R2_VERSION=master\n#   R2pipe python version\nARG R2_PIPE_PY_VERSION=0.8.9\n#   R2pipe node version\nARG R2_PIPE_NPM_VERSION=2.3.2\nENV R2_VERSION=\"${R2_VERSION}\"\nENV R2_PIPE_PY_VERSION=\"${R2_PIPE_PY_VERSION}\"\nENV R2_PIPE_NPM_VERSION=\"${R2_PIPE_NPM_VERSION}\"\nRUN echo -e \"Building versions:\\n R2_VERSION=$R2_VERSION\\n R2_PIPE_PY_VERSION=${R2_PIPE_PY_VERSION}\\n R2_PIPE_NPM_VERSION=${R2_PIPE_NPM_VERSION}\"\n#   Build radare2 in a volume to minimize space used by build\nVOLUME [\"/mnt\"]\n#   Install all build dependencies\n#   Install bindings\n#   Build and install radare2 on master branch\n#   Remove all build dependencies\n#   Cleanup\nRUN DEBIAN_FRONTEND=noninteractive dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install curl gcc git bison pkg-config make glib-2.0 libc6:i386 libncurses5:i386 libstdc++6:i386 gnupg2 sudo -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs python-pip -y \\\n && pip install r2pipe==\"$R2_PIPE_PY_VERSION\" \\\n && npm install \"r2pipe@$R2_PIPE_NPM_VERSION\" --unsafe-perm -g \\\n && cd /mnt \\\n && git clone -b \"$R2_VERSION\" -q --depth 1 https://github.com/radare/radare2.git \\\n && cd radare2 \\\n && ./sys/install.sh \\\n && make install \\\n && apt-get install xz-utils -y \\\n && apt-get remove --purge -y bison python-pip glib-2.0 \\\n && apt-get autoremove --purge -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Create non-root user\nRUN useradd -m r2 \\\n && adduser r2 sudo \\\n && echo \"r2:r2\" | chpasswd\n#   Initilise base user\nUSER r2\nWORKDIR /home/r2\nENV HOME=\"/home/r2\"\n#   Setup r2pm\nRUN r2pm init \\\n && r2pm update \\\n && chown -R r2:r2 /home/r2/.config\n#   Base command for container\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"454f9f3ed7dee15eb897a79857a82bf1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5060490b5dbfe565637d56a690ed6c1f631cf094.dockerfile"}