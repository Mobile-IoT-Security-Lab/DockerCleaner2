{"seed":2814404352,"processedDockerfileHash":"833a72ef82e5fa14fd2d8e40357c7091","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile aims to make building Hubble v2 packages easier.\n#   To build an image: 1. copy pkg/scripts/pyinstaller-requirements.txt to directory with this Dockerfile\n#                      2. docker build -t <image_name> . --build-arg=HUBBLE_GIT_URL=<git_repo_url>\n#                                                        --build-arg=HUBBLE_CHECKOUT=<branch/tag/commit>\n#   The resulting image is ready to run the pyinstaller on container start and drop hubble<version>-coreos.tar.gz\n#   in the /data directory. Mount /data volume into a directory on the host to access the package.\n#   To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n#   Requires docker 17.05 or higher\n#   Set this arguement to \"local\" if you want to build osquery for local code.\n#   In that case, osquery folder must exist besides Dockerfile\nARG OSQUERY_BUILD_ENV=remote\n#  --------------- TEMP CONTAINER FOR LOCAL OSQUERY -------------------------\nFROM alpine AS osquery_local\nONBUILD COPY osquery /osquery\nONBUILD RUN echo \"Copying osquery from local folder\"\n#  --------------- TEMP CONTAINER FOR GIT OSQUERY ----------------------------\nFROM alpine/git AS osquery_remote\nENV OSQUERY_SRC_VERSION=\"3.3.2\"\nENV OSQUERY_GIT_URL=\"https://github.com/facebook/osquery.git\"\nONBUILD RUN cd / \\\n && git clone \"$OSQUERY_GIT_URL\" \\\n && cd osquery/ \\\n && git checkout \"$OSQUERY_SRC_VERSION\" \\\n && echo \"Fetching osquery from git\"\n#  --------------- TEMP CONTAINER FOR OSQUERY ( BASED ON ARG)  ----------------\nFROM osquery_\"$OSQUERY_BUILD_ENV\" AS osquery_image\n#  --------------- ACTUAL DOCKERFILE FOR BUILD CREATION  --------------------------\nFROM centos:6\nRUN yum makecache fast \\\n && yum -y update\n#  paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n#  osquery build start\n#  osquery should be built first since requirements for other packages can interfere with osquery dependencies\n#  to build, osquery scripts want sudo and a user to sudo with.\n#  to pin to a different version change the following envirnment variable\nENV OSQUERY_BUILD_USER=\"osquerybuilder\"\nRUN yum -y install xz git make python ruby sudo which python-argparse\nRUN useradd --shell /bin/bash --create-home --user-group --groups wheel \"$OSQUERY_BUILD_USER\" \\\n && sed -i '0,/^#\\ %wheel/s/^#\\ %wheel.*/%wheel\\ ALL=\\(ALL\\)\\ NOPASSWD:\\ ALL/' /etc/sudoers\nCOPY --from=osquery_image /osquery /home/\"$OSQUERY_BUILD_USER\"/osquery\nRUN mkdir -p /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /home/\"$OSQUERY_BUILD_USER\"/osquery\nUSER $OSQUERY_BUILD_USER\nENV SKIP_TESTS=\"1\"\nRUN cd /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && make sysprep \\\n && sed -i '/augeas_lenses,/,/\\\"Directory\\ that\\ contains\\ augeas\\ lenses\\ files\\\"\\\\)\\;/ s/\\/usr\\/share\\/osquery\\/lenses/\\/opt\\/osquery\\/lenses/' osquery/tables/system/posix/augeas.cpp \\\n && make deps \\\n && make \\\n && make strip\nUSER root\nRUN cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryi /opt/osquery \\\n && cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryd /opt/osquery/hubble_osqueryd \\\n && chown -R root. /opt/osquery \\\n && chmod -R 500 /opt/osquery/* \\\n && mkdir -p /opt/osquery/lenses \\\n && cp -r /usr/local/osquery/share/augeas/lenses/dist/* /opt/osquery/lenses \\\n && chmod -R 400 /opt/osquery/lenses/*\nRUN ls -lahR /opt/osquery/ \\\n && /opt/osquery/osqueryi --version\n#  install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN yum -y install libffi-devel openssl-devel libxml2-devel libxslt-devel libffi libssh2-devel autoconf automake libtool libjpeg-devel zlib-devel python-devel make cmake gcc python-setuptools wget openssl\n#  libcurl install start\n#  install libcurl to avoid depending on host version\n#  requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=\"https://github.com/curl/curl.git\"\nENV LIBCURL_SRC_VERSION=\"curl-7_64_1\"\nENV LIBCURL_TEMP=\"/tmp/libcurl\"\nENV PATH=\"/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install\n#  git install start\n#  install git so that git package won't be a package dependency\n#  requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=\"https://github.com/git/git.git\"\nENV GIT_SRC_VERSION=\"v2.21.0\"\nENV GITTEMP=\"/tmp/gittemp\"\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install\n#  clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n#  libgit2 install start\n#  must precede pyinstaller requirements\nENV LIBGIT2_SRC_URL=\"https://github.com/libgit2/libgit2/archive/v0.26.5.tar.gz\"\n#  it turns out github provided release files can change. so even though the code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=\"52e28a5166564bc4365a2e4112f5e5c6e334708dbf13596241b2fd34efc1b0a9\"\nENV LIBGIT2_SRC_VERSION=\"0.26.5\"\nENV LIBGIT2TEMP=\"/tmp/libgit2temp\"\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256 libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/ \\\n && make \\\n && make install\n#  pyinstaller requirements start\n#  must be preceded by libgit2 install\nCOPY pyinstaller-requirements.txt /\n#  default python-pip from yum does not like upgrading itself from pip. looking for better options other than wget.\nRUN wget -c https://bootstrap.pypa.io/get-pip.py \\\n && yum -y install centos-release-scl \\\n && yum -y install python27 \\\n && chmod u+x ./get-pip.py \\\n && scl enable python27 \"./get-pip.py\" \\\n && scl enable python27 \"pip -v install -r pyinstaller-requirements.txt\"\n#  fpm package making requirements start\nRUN yum install -y rpmbuild rpm-build gcc make rh-ruby23 rh-ruby23-ruby-devel \\\n && scl enable rh-ruby23 \"gem install --no-ri --no-rdoc fpm\"\n#  pyinstaller start\n#  commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n#  use the following variables to choose the version of hubble\nARG HUBBLE_CHECKOUT=develop\nARG HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_VERSION=\"3.0.0_develop\"\nENV HUBBLE_ITERATION=\"1\"\nENV HUBBLE_URL=\"https://github.com/hubblestack/hubble\"\nENV HUBBLE_DESCRIPTION=\"Hubble is a modular, open-source, security & compliance auditing framework which is built in python, using SaltStack as a library.\"\nENV HUBBLE_SUMMARY=\"Profile based on-demand auditing and monitoring tool\"\nENV HUBBLE_SRC_PATH=\"/hubble_src\"\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nENV LD_LIBRARY_PATH=\"/opt/hubble/lib:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64\"\nRUN git clone ${HUBBLE_GIT_URL} \"$HUBBLE_SRC_PATH\" \\\n && cd \"$HUBBLE_SRC_PATH\" \\\n && git checkout ${HUBBLE_CHECKOUT} \\\n && cp -rf \"$HUBBLE_SRC_PATH\" /hubble_build \\\n && sed -i \"s/BRANCH_NOT_SET/${HUBBLE_CHECKOUT}/g\" /hubble_build/hubblestack/__init__.py \\\n && sed -i \"s/COMMIT_NOT_SET/`git describe `/g\" /hubble_build/hubblestack/__init__.py\nRUN mkdir /data\nVOLUME /data\nWORKDIR /hubble_build\nENTRYPOINT [\"/bin/bash\", \"-o\", \"xtrace\", \"-c\"]\nCMD [ \"if [ -f /data/hubble_buildinfo ] ; then echo \\\"\\\" >> /hubble_build/hubblestack/__init__.py ; cat /data/hubble_buildinfo >> /hubble_build/hubblestack/__init__.py; fi \\\n && scl enable python27 'pyinstaller --onedir --noconfirm --log-level ${_BINARY_LOG_LEVEL} --additional-hooks-dir=${_HOOK_DIR} --runtime-hook=pkg/pyinstaller-runtimehooks/pathopthubble.py hubble.py' \\\n && mkdir -p /var/log/hubble_osquery/backuplogs \\\n && cp -rf /hubble_build/conf/hubble /etc/hubble/ \\\n && cp -rf /hubble_build/conf/hubble-profile.sh /etc/profile.d/ \\\n && cp -pr /hubble_build/dist/hubble /opt/hubble/hubble-libs \\\n && ln -s /opt/hubble/hubble-libs/hubble /opt/hubble/hubble \\\n && rm -rf /opt/hubble/hubble-libs/librpm* \\\n && tar -cPvzf /data/hubblestack-${HUBBLE_VERSION}.tar.gz /etc/hubble /opt/hubble /opt/osquery /etc/profile.d/hubble-profile.sh /var/log/hubble_osquery/backuplogs \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && tar -xzvf /data/hubblestack-${HUBBLE_VERSION}.tar.gz -C /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d \\\n && if [ -f /data/hubble-autostart ] ; then mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d ; fi \\\n && cp /hubble_build/pkg/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d/ \\\n && if [ -f /data/hubble-autostart ] ; then cp /hubble_build/pkg/hubble-autostart /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d/ ; fi \\\n && cp -f /hubble_build/conf/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ \\\n && if [ -f /data/hubble ] ; then cp /data/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ ; fi \\\n && if [ -d /data/opt ] ; then cp -r /data/opt/* /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/opt/ ; fi \\\n && cd /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p usr/bin \\\n && ln -s /opt/hubble/hubble usr/bin/hubble \\\n && scl enable rh-ruby23 'fpm -s dir -t rpm -n hubblestack -v ${HUBBLE_VERSION} --iteration ${HUBBLE_ITERATION} --url ${HUBBLE_URL} --description \\\"${HUBBLE_DESCRIPTION}\\\" --rpm-summary \\\"${HUBBLE_SUMMARY}\\\" --after-install /hubble_build/conf/afterinstall.sh --after-upgrade /hubble_build/conf/afterupgrade.sh --before-remove /hubble_build/conf/beforeremove.sh etc opt usr /var/log/hubble_osquery/backuplogs' \\\n && cp hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.x86_64.rpm /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm \\\n && openssl dgst -sha256 /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm > /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm.sha256\" ]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile aims to make building Hubble v2 packages easier.\n#  To build an image: 1. copy pkg/scripts/pyinstaller-requirements.txt to directory with this Dockerfile\n#                     2. docker build -t <image_name> . --build-arg=HUBBLE_GIT_URL=<git_repo_url>\n#                                                       --build-arg=HUBBLE_CHECKOUT=<branch/tag/commit>\n#  The resulting image is ready to run the pyinstaller on container start and drop hubble<version>-coreos.tar.gz\n#  in the /data directory. Mount /data volume into a directory on the host to access the package.\n#  To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n#  Requires docker 17.05 or higher\n#  Set this arguement to \"local\" if you want to build osquery for local code.\n#  In that case, osquery folder must exist besides Dockerfile\nARG OSQUERY_BUILD_ENV=remote\n# --------------- TEMP CONTAINER FOR LOCAL OSQUERY -------------------------\nFROM alpine AS osquery_local\nONBUILD COPY osquery /osquery\nONBUILD RUN echo \"Copying osquery from local folder\"\n# --------------- TEMP CONTAINER FOR GIT OSQUERY ----------------------------\nFROM alpine/git AS osquery_remote\nENV OSQUERY_SRC_VERSION=\"3.3.2\"\nENV OSQUERY_GIT_URL=\"https://github.com/facebook/osquery.git\"\nONBUILD RUN cd / \\\n && git clone \"$OSQUERY_GIT_URL\" \\\n && cd osquery/ \\\n && git checkout \"$OSQUERY_SRC_VERSION\" \\\n && echo \"Fetching osquery from git\"\n# --------------- TEMP CONTAINER FOR OSQUERY ( BASED ON ARG)  ----------------\nFROM osquery_\"$OSQUERY_BUILD_ENV\" AS osquery_image\n# --------------- ACTUAL DOCKERFILE FOR BUILD CREATION  --------------------------\nFROM centos:6\nRUN yum makecache fast \\\n && yum -y update\n# paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n# osquery build start\n# osquery should be built first since requirements for other packages can interfere with osquery dependencies\n# to build, osquery scripts want sudo and a user to sudo with.\n# to pin to a different version change the following envirnment variable\nENV OSQUERY_BUILD_USER=\"osquerybuilder\"\nRUN yum -y install xz git make python ruby sudo which python-argparse\nRUN useradd --shell /bin/bash --create-home --user-group --groups wheel \"$OSQUERY_BUILD_USER\" \\\n && sed -i '0,/^#\\ %wheel/s/^#\\ %wheel.*/%wheel\\ ALL=\\(ALL\\)\\ NOPASSWD:\\ ALL/' /etc/sudoers\nCOPY --from=osquery_image /osquery /home/\"$OSQUERY_BUILD_USER\"/osquery\nRUN mkdir -p /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /home/\"$OSQUERY_BUILD_USER\"/osquery\nUSER $OSQUERY_BUILD_USER\nENV SKIP_TESTS=\"1\"\nRUN cd /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && make sysprep \\\n && sed -i '/augeas_lenses,/,/\\\"Directory\\ that\\ contains\\ augeas\\ lenses\\ files\\\"\\\\)\\;/ s/\\/usr\\/share\\/osquery\\/lenses/\\/opt\\/osquery\\/lenses/' osquery/tables/system/posix/augeas.cpp \\\n && make deps \\\n && make \\\n && make strip\nUSER root\nRUN cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryi /opt/osquery \\\n && cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryd /opt/osquery/hubble_osqueryd \\\n && chown -R root. /opt/osquery \\\n && chmod -R 500 /opt/osquery/* \\\n && mkdir -p /opt/osquery/lenses \\\n && cp -r /usr/local/osquery/share/augeas/lenses/dist/* /opt/osquery/lenses \\\n && chmod -R 400 /opt/osquery/lenses/*\nRUN ls -lahR /opt/osquery/ \\\n && /opt/osquery/osqueryi --version\n# install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN yum -y install libffi-devel openssl-devel libxml2-devel libxslt-devel libffi libssh2-devel autoconf automake libtool libjpeg-devel zlib-devel python-devel make cmake gcc python-setuptools wget openssl\n# libcurl install start\n# install libcurl to avoid depending on host version\n# requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=\"https://github.com/curl/curl.git\"\nENV LIBCURL_SRC_VERSION=\"curl-7_64_1\"\nENV LIBCURL_TEMP=\"/tmp/libcurl\"\nENV PATH=\"/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install\n# git install start\n# install git so that git package won't be a package dependency\n# requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=\"https://github.com/git/git.git\"\nENV GIT_SRC_VERSION=\"v2.21.0\"\nENV GITTEMP=\"/tmp/gittemp\"\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install\n# clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n# libgit2 install start\n# must precede pyinstaller requirements\nENV LIBGIT2_SRC_URL=\"https://github.com/libgit2/libgit2/archive/v0.26.5.tar.gz\"\n# it turns out github provided release files can change. so even though the code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=\"52e28a5166564bc4365a2e4112f5e5c6e334708dbf13596241b2fd34efc1b0a9\"\nENV LIBGIT2_SRC_VERSION=\"0.26.5\"\nENV LIBGIT2TEMP=\"/tmp/libgit2temp\"\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256 libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/ \\\n && make \\\n && make install\n# pyinstaller requirements start\n# must be preceded by libgit2 install\nCOPY pyinstaller-requirements.txt /\n# default python-pip from yum does not like upgrading itself from pip. looking for better options other than wget.\nRUN wget -c https://bootstrap.pypa.io/get-pip.py \\\n && yum -y install centos-release-scl \\\n && yum -y install python27 \\\n && chmod u+x ./get-pip.py \\\n && scl enable python27 \"./get-pip.py\" \\\n && scl enable python27 \"pip -v install -r pyinstaller-requirements.txt\"\n# fpm package making requirements start\nRUN yum install -y rpmbuild rpm-build gcc make rh-ruby23 rh-ruby23-ruby-devel \\\n && scl enable rh-ruby23 \"gem install --no-ri --no-rdoc fpm\"\n# pyinstaller start\n# commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n# use the following variables to choose the version of hubble\nARG HUBBLE_CHECKOUT=develop\nARG HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_VERSION=\"3.0.0_develop\"\nENV HUBBLE_ITERATION=\"1\"\nENV HUBBLE_URL=\"https://github.com/hubblestack/hubble\"\nENV HUBBLE_DESCRIPTION=\"Hubble is a modular, open-source, security & compliance auditing framework which is built in python, using SaltStack as a library.\"\nENV HUBBLE_SUMMARY=\"Profile based on-demand auditing and monitoring tool\"\nENV HUBBLE_SRC_PATH=\"/hubble_src\"\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nENV LD_LIBRARY_PATH=\"/opt/hubble/lib:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64\"\nRUN git clone ${HUBBLE_GIT_URL} \"$HUBBLE_SRC_PATH\" \\\n && cd \"$HUBBLE_SRC_PATH\" \\\n && git checkout ${HUBBLE_CHECKOUT} \\\n && cp -rf \"$HUBBLE_SRC_PATH\" /hubble_build \\\n && sed -i \"s/BRANCH_NOT_SET/${HUBBLE_CHECKOUT}/g\" /hubble_build/hubblestack/__init__.py \\\n && sed -i \"s/COMMIT_NOT_SET/`git describe `/g\" /hubble_build/hubblestack/__init__.py\nRUN mkdir /data\nVOLUME /data\nWORKDIR /hubble_build\nENTRYPOINT [\"/bin/bash\", \"-o\", \"xtrace\", \"-c\"]\nCMD [ \"if [ -f /data/hubble_buildinfo ] ; then echo \\\"\\\" >> /hubble_build/hubblestack/__init__.py ; cat /data/hubble_buildinfo >> /hubble_build/hubblestack/__init__.py; fi \\\n && scl enable python27 'pyinstaller --onedir --noconfirm --log-level ${_BINARY_LOG_LEVEL} --additional-hooks-dir=${_HOOK_DIR} --runtime-hook=pkg/pyinstaller-runtimehooks/pathopthubble.py hubble.py' \\\n && mkdir -p /var/log/hubble_osquery/backuplogs \\\n && cp -rf /hubble_build/conf/hubble /etc/hubble/ \\\n && cp -rf /hubble_build/conf/hubble-profile.sh /etc/profile.d/ \\\n && cp -pr /hubble_build/dist/hubble /opt/hubble/hubble-libs \\\n && ln -s /opt/hubble/hubble-libs/hubble /opt/hubble/hubble \\\n && rm -rf /opt/hubble/hubble-libs/librpm* \\\n && tar -cPvzf /data/hubblestack-${HUBBLE_VERSION}.tar.gz /etc/hubble /opt/hubble /opt/osquery /etc/profile.d/hubble-profile.sh /var/log/hubble_osquery/backuplogs \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && tar -xzvf /data/hubblestack-${HUBBLE_VERSION}.tar.gz -C /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d \\\n && if [ -f /data/hubble-autostart ] ; then mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d ; fi \\\n && cp /hubble_build/pkg/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d/ \\\n && if [ -f /data/hubble-autostart ] ; then cp /hubble_build/pkg/hubble-autostart /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d/ ; fi \\\n && cp -f /hubble_build/conf/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ \\\n && if [ -f /data/hubble ] ; then cp /data/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ ; fi \\\n && if [ -d /data/opt ] ; then cp -r /data/opt/* /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/opt/ ; fi \\\n && cd /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p usr/bin \\\n && ln -s /opt/hubble/hubble usr/bin/hubble \\\n && scl enable rh-ruby23 'fpm -s dir -t rpm -n hubblestack -v ${HUBBLE_VERSION} --iteration ${HUBBLE_ITERATION} --url ${HUBBLE_URL} --description \\\"${HUBBLE_DESCRIPTION}\\\" --rpm-summary \\\"${HUBBLE_SUMMARY}\\\" --after-install /hubble_build/conf/afterinstall.sh --after-upgrade /hubble_build/conf/afterupgrade.sh --before-remove /hubble_build/conf/beforeremove.sh etc opt usr /var/log/hubble_osquery/backuplogs' \\\n && cp hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.x86_64.rpm /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm \\\n && openssl dgst -sha256 /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm > /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm.sha256\" ]\n","injectedSmells":[],"originalDockerfileHash":"8b59c7e73e93fc3eeb6b2332a7c06700","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile aims to make building Hubble v2 packages easier.\n#   To build an image: 1. copy pkg/scripts/pyinstaller-requirements.txt to directory with this Dockerfile\n#                      2. docker build -t <image_name> . --build-arg=HUBBLE_GIT_URL=<git_repo_url>\n#                                                        --build-arg=HUBBLE_CHECKOUT=<branch/tag/commit>\n#   The resulting image is ready to run the pyinstaller on container start and drop hubble<version>-coreos.tar.gz\n#   in the /data directory. Mount /data volume into a directory on the host to access the package.\n#   To run the container:  docker run -it --rm -v `pwd`:/data <image_name>\n#   Requires docker 17.05 or higher\n#   Set this arguement to \"local\" if you want to build osquery for local code.\n#   In that case, osquery folder must exist besides Dockerfile\nARG OSQUERY_BUILD_ENV=remote\n#  --------------- TEMP CONTAINER FOR LOCAL OSQUERY -------------------------\nFROM alpine AS osquery_local\nONBUILD COPY osquery /osquery\nONBUILD RUN echo \"Copying osquery from local folder\"\n#  --------------- TEMP CONTAINER FOR GIT OSQUERY ----------------------------\nFROM alpine/git AS osquery_remote\nENV OSQUERY_SRC_VERSION=\"3.3.2\"\nENV OSQUERY_GIT_URL=\"https://github.com/facebook/osquery.git\"\nONBUILD RUN cd / \\\n && git clone \"$OSQUERY_GIT_URL\" \\\n && cd osquery/ \\\n && git checkout \"$OSQUERY_SRC_VERSION\" \\\n && echo \"Fetching osquery from git\"\n#  --------------- TEMP CONTAINER FOR OSQUERY ( BASED ON ARG)  ----------------\nFROM osquery_\"$OSQUERY_BUILD_ENV\" AS osquery_image\n#  --------------- ACTUAL DOCKERFILE FOR BUILD CREATION  --------------------------\nFROM centos:6\nRUN yum makecache fast \\\n && yum -y update\n#  paths that hubble or hubble parts need in the package\nRUN mkdir -p /etc/hubble/hubble.d /opt/hubble /opt/osquery /var/log/hubble_osquery/backuplogs\n#  osquery build start\n#  osquery should be built first since requirements for other packages can interfere with osquery dependencies\n#  to build, osquery scripts want sudo and a user to sudo with.\n#  to pin to a different version change the following envirnment variable\nENV OSQUERY_BUILD_USER=\"osquerybuilder\"\nRUN yum -y install xz git make python ruby sudo which python-argparse\nRUN useradd --shell /bin/bash --create-home --user-group --groups wheel \"$OSQUERY_BUILD_USER\" \\\n && sed -i '0,/^#\\ %wheel/s/^#\\ %wheel.*/%wheel\\ ALL=\\(ALL\\)\\ NOPASSWD:\\ ALL/' /etc/sudoers\nCOPY --from=osquery_image /osquery /home/\"$OSQUERY_BUILD_USER\"/osquery\nRUN mkdir -p /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /usr/local/osquery/ \\\n && chown \"$OSQUERY_BUILD_USER\":\"$OSQUERY_BUILD_USER\" -R /home/\"$OSQUERY_BUILD_USER\"/osquery\nUSER $OSQUERY_BUILD_USER\nENV SKIP_TESTS=\"1\"\nRUN cd /home/\"$OSQUERY_BUILD_USER\"/osquery \\\n && make sysprep \\\n && sed -i '/augeas_lenses,/,/\\\"Directory\\ that\\ contains\\ augeas\\ lenses\\ files\\\"\\\\)\\;/ s/\\/usr\\/share\\/osquery\\/lenses/\\/opt\\/osquery\\/lenses/' osquery/tables/system/posix/augeas.cpp \\\n && make deps \\\n && make \\\n && make strip\nUSER root\nRUN cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryi /opt/osquery \\\n && cp -pr /home/\"$OSQUERY_BUILD_USER\"/osquery/build/linux/osquery/osqueryd /opt/osquery/hubble_osqueryd \\\n && chown -R root. /opt/osquery \\\n && chmod -R 500 /opt/osquery/* \\\n && mkdir -p /opt/osquery/lenses \\\n && cp -r /usr/local/osquery/share/augeas/lenses/dist/* /opt/osquery/lenses \\\n && chmod -R 400 /opt/osquery/lenses/*\nRUN ls -lahR /opt/osquery/ \\\n && /opt/osquery/osqueryi --version\n#  install packages that should be needed for ligbit2 compilation and successful pyinstaller run\nRUN yum -y install libffi-devel openssl-devel libxml2-devel libxslt-devel libffi libssh2-devel autoconf automake libtool libjpeg-devel zlib-devel python-devel make cmake gcc python-setuptools wget openssl\n#  libcurl install start\n#  install libcurl to avoid depending on host version\n#  requires autoconf libtool libssh2-devel zlib-devel autoconf\nENV LIBCURL_SRC_URL=\"https://github.com/curl/curl.git\"\nENV LIBCURL_SRC_VERSION=\"curl-7_64_1\"\nENV LIBCURL_TEMP=\"/tmp/libcurl\"\nENV PATH=\"/opt/hubble/bin/:/opt/hubble/include:/opt/hubble/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nRUN mkdir -p \"$LIBCURL_TEMP\" \\\n && cd \"$LIBCURL_TEMP\" \\\n && git clone \"$LIBCURL_SRC_URL\" \\\n && cd curl \\\n && git checkout \"$LIBCURL_SRC_VERSION\" \\\n && ./buildconf \\\n && ./configure --prefix=/opt/hubble --disable-ldap --without-nss --disable-manual --disable-gopher --disable-smtp --disable-smb --disable-imap --disable-pop3 --disable-tftp --disable-telnet --disable-dict --disable-ldaps --disable-ldap --disable-rtsp --with-libssh2 \\\n && make \\\n && make install\n#  git install start\n#  install git so that git package won't be a package dependency\n#  requires make git libcurl-devel autoconf zlib-devel gcc\nENV GIT_SRC_URL=\"https://github.com/git/git.git\"\nENV GIT_SRC_VERSION=\"v2.21.0\"\nENV GITTEMP=\"/tmp/gittemp\"\nRUN mkdir -p \"$GITTEMP\" \\\n && cd \"$GITTEMP\" \\\n && git clone \"$GIT_SRC_URL\" \\\n && cd git \\\n && git checkout \"$GIT_SRC_VERSION\" \\\n && make configure \\\n && ./configure --prefix=/opt/hubble --with-tcltk=no --with-expat=no --with-python=no --with-curl=/opt/hubble \\\n && echo \"NO_TCLTK=YesPlease\" >> config.mak.autogen \\\n && echo \"NO_PERL=YesPlease\" >> config.mak.autogen \\\n && sed -i '0,/^NO_GETTEXT/s/^NO_GETTEXT.*/NO_GETTEXT=YesPlease/' config.mak.autogen \\\n && make \\\n && make install\n#  clean up of /opt/hubble\nRUN rm /opt/hubble/bin/curl* \\\n && rm -rf /opt/hubble/include /opt/hubble/share\n#  libgit2 install start\n#  must precede pyinstaller requirements\nENV LIBGIT2_SRC_URL=\"https://github.com/libgit2/libgit2/archive/v0.26.5.tar.gz\"\n#  it turns out github provided release files can change. so even though the code hopefully hasn't changed, the hash has.\nENV LIBGIT2_SRC_SHA256=\"52e28a5166564bc4365a2e4112f5e5c6e334708dbf13596241b2fd34efc1b0a9\"\nENV LIBGIT2_SRC_VERSION=\"0.26.5\"\nENV LIBGIT2TEMP=\"/tmp/libgit2temp\"\nRUN mkdir -p \"$LIBGIT2TEMP\" \\\n && cd \"$LIBGIT2TEMP\" \\\n && wget -q \"$LIBGIT2_SRC_URL\" -O libgit2.tar.gz \\\n && echo \"$LIBGIT2_SRC_SHA256 libgit2.tar.gz\" | sha256sum -c - \\\n && tar xzf libgit2.tar.gz \\\n && cd libgit2-\"$LIBGIT2_SRC_VERSION\"/ \\\n && cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/ \\\n && make \\\n && make install\n#  pyinstaller requirements start\n#  must be preceded by libgit2 install\nCOPY pyinstaller-requirements.txt /\n#  default python-pip from yum does not like upgrading itself from pip. looking for better options other than wget.\nRUN wget -c https://bootstrap.pypa.io/get-pip.py \\\n && yum -y install centos-release-scl \\\n && yum -y install python27 \\\n && chmod u+x ./get-pip.py \\\n && scl enable python27 \"./get-pip.py\" \\\n && scl enable python27 \"pip -v install -r pyinstaller-requirements.txt\"\n#  fpm package making requirements start\nRUN yum install -y rpmbuild rpm-build gcc make rh-ruby23 rh-ruby23-ruby-devel \\\n && scl enable rh-ruby23 \"gem install --no-ri --no-rdoc fpm\"\n#  pyinstaller start\n#  commands specified for ENTRYPOINT and CMD are executed when the container is run, not when the image is built\n#  use the following variables to choose the version of hubble\nARG HUBBLE_CHECKOUT=develop\nARG HUBBLE_GIT_URL=https://github.com/hubblestack/hubble.git\nENV HUBBLE_VERSION=\"3.0.0_develop\"\nENV HUBBLE_ITERATION=\"1\"\nENV HUBBLE_URL=\"https://github.com/hubblestack/hubble\"\nENV HUBBLE_DESCRIPTION=\"Hubble is a modular, open-source, security & compliance auditing framework which is built in python, using SaltStack as a library.\"\nENV HUBBLE_SUMMARY=\"Profile based on-demand auditing and monitoring tool\"\nENV HUBBLE_SRC_PATH=\"/hubble_src\"\nENV _HOOK_DIR=\"./pkg/\"\nENV _BINARY_LOG_LEVEL=\"INFO\"\nENV _INCLUDE_PATH=\"\"\nENV LD_LIBRARY_PATH=\"/opt/hubble/lib:/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64\"\nRUN git clone ${HUBBLE_GIT_URL} \"$HUBBLE_SRC_PATH\" \\\n && cd \"$HUBBLE_SRC_PATH\" \\\n && git checkout ${HUBBLE_CHECKOUT} \\\n && cp -rf \"$HUBBLE_SRC_PATH\" /hubble_build \\\n && sed -i \"s/BRANCH_NOT_SET/${HUBBLE_CHECKOUT}/g\" /hubble_build/hubblestack/__init__.py \\\n && sed -i \"s/COMMIT_NOT_SET/`git describe `/g\" /hubble_build/hubblestack/__init__.py\nRUN mkdir /data\nVOLUME /data\nWORKDIR /hubble_build\nENTRYPOINT [\"/bin/bash\", \"-o\", \"xtrace\", \"-c\"]\nCMD [ \"if [ -f /data/hubble_buildinfo ] ; then echo \\\"\\\" >> /hubble_build/hubblestack/__init__.py ; cat /data/hubble_buildinfo >> /hubble_build/hubblestack/__init__.py; fi \\\n && scl enable python27 'pyinstaller --onedir --noconfirm --log-level ${_BINARY_LOG_LEVEL} --additional-hooks-dir=${_HOOK_DIR} --runtime-hook=pkg/pyinstaller-runtimehooks/pathopthubble.py hubble.py' \\\n && mkdir -p /var/log/hubble_osquery/backuplogs \\\n && cp -rf /hubble_build/conf/hubble /etc/hubble/ \\\n && cp -rf /hubble_build/conf/hubble-profile.sh /etc/profile.d/ \\\n && cp -pr /hubble_build/dist/hubble /opt/hubble/hubble-libs \\\n && ln -s /opt/hubble/hubble-libs/hubble /opt/hubble/hubble \\\n && rm -rf /opt/hubble/hubble-libs/librpm* \\\n && tar -cPvzf /data/hubblestack-${HUBBLE_VERSION}.tar.gz /etc/hubble /opt/hubble /opt/osquery /etc/profile.d/hubble-profile.sh /var/log/hubble_osquery/backuplogs \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && tar -xzvf /data/hubblestack-${HUBBLE_VERSION}.tar.gz -C /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d \\\n && if [ -f /data/hubble-autostart ] ; then mkdir -p /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d ; fi \\\n && cp /hubble_build/pkg/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/init.d/ \\\n && if [ -f /data/hubble-autostart ] ; then cp /hubble_build/pkg/hubble-autostart /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/cron.d/ ; fi \\\n && cp -f /hubble_build/conf/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ \\\n && if [ -f /data/hubble ] ; then cp /data/hubble /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/etc/hubble/ ; fi \\\n && if [ -d /data/opt ] ; then cp -r /data/opt/* /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION}/opt/ ; fi \\\n && cd /hubble_build/debbuild/hubblestack-${HUBBLE_VERSION} \\\n && mkdir -p usr/bin \\\n && ln -s /opt/hubble/hubble usr/bin/hubble \\\n && scl enable rh-ruby23 'fpm -s dir -t rpm -n hubblestack -v ${HUBBLE_VERSION} --iteration ${HUBBLE_ITERATION} --url ${HUBBLE_URL} --description \\\"${HUBBLE_DESCRIPTION}\\\" --rpm-summary \\\"${HUBBLE_SUMMARY}\\\" --after-install /hubble_build/conf/afterinstall.sh --after-upgrade /hubble_build/conf/afterupgrade.sh --before-remove /hubble_build/conf/beforeremove.sh etc opt usr /var/log/hubble_osquery/backuplogs' \\\n && cp hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.x86_64.rpm /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm \\\n && openssl dgst -sha256 /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm > /data/hubblestack-${HUBBLE_VERSION}-${HUBBLE_ITERATION}.el6.x86_64.rpm.sha256\" ]\n","originalDockerfileUglifiedHash":"cd45b50e5369169ce24b5662bfbd181f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1126ffc48d6f2e27ebf16981934b9c831c03a15f.dockerfile"}