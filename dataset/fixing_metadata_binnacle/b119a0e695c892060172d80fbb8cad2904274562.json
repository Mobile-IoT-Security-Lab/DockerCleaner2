{"seed":960337361,"processedDockerfileHash":"34d84a0716302b01ea2b68fc2f27f3f7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04 AS toolchain\nENV OSX_SDK_URL=\"https://s3.dockerproject.org/darwin/v2/\" \\\n    OSX_SDK=\"MacOSX10.10.sdk\" \\\n    OSX_MIN=\"10.10\" \\\n    CTNG=\"1.23.0\"\n#   FIRST PART\n#   build osx64 toolchain (stripped of man documentation)\n#   the toolchain produced is not self contained, it needs clang at runtime\n#\n#   SECOND PART\n#   build gcc (no g++) centos6-x64 toolchain\n#   doc: https://crosstool-ng.github.io/docs/\n#   apt-get should be all dep to build toolchain\n#   sed and 1st echo are for convenience to get the toolchain in /tmp/x86_64-centos6-linux-gnu\n#   other echo are to enable build by root (crosstool-NG refuse to do that by default)\n#   the last 2 rm are just to save some time and space writing docker layers\n#\n#   THIRD PART\n#   build fpm and creates a set of deb from gem\n#   ruby2.0 depends on ruby1.9.3 which is install as default ruby\n#   rm/ln are here to change that\n#   created deb depends on rubygem-json but json gem is not build\n#   so do by hand\n#   might wanna make sure osx cross and the other tarball as well as the packages ends up somewhere other than tmp\n#   might also wanna put them as their own layer to not have to unpack them every time?\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang-3.8=1:3.8-2ubuntu3~trusty5 patch=2.7.1-4ubuntu2.4 libxml2-dev=2.9.1+dfsg1-3ubuntu4.13 ca-certificates=20170717~14.04.2 curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 make=3.81-8.2ubuntu3 cmake=2.8.12.2-0ubuntu3 libssl-dev=1.0.1f-1ubuntu2.27 xz-utils=5.1.1alpha+20120614-2ubuntu2 -y \\\n && git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross \\\n && curl -L ${OSX_SDK_URL}/${OSX_SDK}.tar.xz -o /tmp/osxcross/tarballs/${OSX_SDK}.tar.xz \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && UNATTENDED=yes OSX_VERSION_MIN=${OSX_MIN} /tmp/osxcross/build.sh \\\n && rm -rf /tmp/osxcross/target/SDK/${OSX_SDK}/usr/share \\\n && cd /tmp \\\n && tar cfJ osxcross.tar.xz osxcross/target \\\n && rm -rf /tmp/osxcross \\\n && apt-get install --no-install-recommends bison=2:3.0.2.dfsg-2 curl=7.35.0-1ubuntu2.20 flex=2.5.35-10.1ubuntu2 gawk=1:4.0.1+dfsg-2.1ubuntu2 gcc=4:4.8.2-1ubuntu6 g++=4:4.8.2-1ubuntu6 gperf=3.0.4-1 help2man=1.44.1 libncurses5-dev=5.9+20140118-1ubuntu1 make=3.81-8.2ubuntu3 patch=2.7.1-4ubuntu2.4 python-dev=2.7.5-5ubuntu3 texinfo=5.2.0.dfsg.1-2 xz-utils=5.1.1alpha+20120614-2ubuntu2 -y \\\n && curl -L http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-${CTNG}.tar.xz | tar -xJ -C /tmp/ \\\n && cd /tmp/crosstool-ng-${CTNG} \\\n && ./configure --enable-local \\\n && make \\\n && ./ct-ng x86_64-centos6-linux-gnu \\\n && sed -i '/CT_PREFIX_DIR=/d' .config \\\n && echo 'CT_PREFIX_DIR=\"/tmp/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"' >> .config \\\n && echo 'CT_EXPERIMENTAL=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT_SURE=y' >> .config \\\n && ./ct-ng build \\\n && cd /tmp \\\n && rm /tmp/x86_64-centos6-linux-gnu/build.log.bz2 \\\n && tar cfJ x86_64-centos6-linux-gnu.tar.xz x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/crosstool-ng-${CTNG}\n#   base image to crossbuild grafana\nFROM ubuntu:14.04\nENV GOVERSION=\"1.12.6\" \\\n    PATH=\"/usr/local/go/bin:$PATH\" \\\n    GOPATH=\"/go\" \\\n    NODEVERSION=\"10.14.2\"\nCOPY --from=toolchain /tmp/x86_64-centos6-linux-gnu.tar.xz /tmp/\nCOPY --from=toolchain /tmp/osxcross.tar.xz /tmp/\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang-3.8=1:3.8-2ubuntu3~trusty5 gcc-aarch64-linux-gnu=4:4.8.2-1 gcc-arm-linux-gnueabihf=4:4.8.2-1 gcc-mingw-w64-x86-64=4.8.2-10ubuntu2+12 apt-transport-https=1.0.1ubuntu2.24 ca-certificates=20170717~14.04.2 curl=7.35.0-1ubuntu2.20 libfontconfig1=2.11.0-0ubuntu4.2 gcc=4:4.8.2-1ubuntu6 g++=4:4.8.2-1ubuntu6 git=1:1.9.1-1ubuntu0.10 make=3.81-8.2ubuntu3 rpm=4.11.1-3ubuntu0.1 xz-utils=5.1.1alpha+20120614-2ubuntu2 expect=5.45-5ubuntu1 gnupg2=2.0.22-3ubuntu1.4 unzip=6.0-9ubuntu1.5 -y \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && curl -L https://nodejs.org/dist/v${NODEVERSION}/node-v${NODEVERSION}-linux-x64.tar.xz | tar -xJ --strip-components=1 -C /usr/local \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn \\\n && curl -L https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && git clone https://github.com/raspberrypi/tools.git /opt/rpi-tools --depth=1\nRUN apt-get install --no-install-recommends gcc=4:4.8.2-1ubuntu6 libc-dev make=3.81-8.2ubuntu3 -y \\\n && gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \\\n && curl -sSL https://get.rvm.io | bash -s stable \\\n && /bin/bash -l -c \"rvm requirements \\\n && rvm install 2.2 \\\n && gem install -N fpm\"\nCOPY ./bootstrap.sh /tmp/bootstrap.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04 AS toolchain\nENV OSX_SDK_URL=\"https://s3.dockerproject.org/darwin/v2/\" \\\n    OSX_SDK=\"MacOSX10.10.sdk\" \\\n    OSX_MIN=\"10.10\" \\\n    CTNG=\"1.23.0\"\n#  FIRST PART\n#  build osx64 toolchain (stripped of man documentation)\n#  the toolchain produced is not self contained, it needs clang at runtime\n#\n#  SECOND PART\n#  build gcc (no g++) centos6-x64 toolchain\n#  doc: https://crosstool-ng.github.io/docs/\n#  apt-get should be all dep to build toolchain\n#  sed and 1st echo are for convenience to get the toolchain in /tmp/x86_64-centos6-linux-gnu\n#  other echo are to enable build by root (crosstool-NG refuse to do that by default)\n#  the last 2 rm are just to save some time and space writing docker layers\n#\n#  THIRD PART\n#  build fpm and creates a set of deb from gem\n#  ruby2.0 depends on ruby1.9.3 which is install as default ruby\n#  rm/ln are here to change that\n#  created deb depends on rubygem-json but json gem is not build\n#  so do by hand\n#  might wanna make sure osx cross and the other tarball as well as the packages ends up somewhere other than tmp\n#  might also wanna put them as their own layer to not have to unpack them every time?\nRUN apt-get update \\\n && apt-get install clang-3.8 patch libxml2-dev ca-certificates curl git make cmake libssl-dev xz-utils -y \\\n && git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross \\\n && curl -L ${OSX_SDK_URL}/${OSX_SDK}.tar.xz -o /tmp/osxcross/tarballs/${OSX_SDK}.tar.xz \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && UNATTENDED=yes OSX_VERSION_MIN=${OSX_MIN} /tmp/osxcross/build.sh \\\n && rm -rf /tmp/osxcross/target/SDK/${OSX_SDK}/usr/share \\\n && cd /tmp \\\n && tar cfJ osxcross.tar.xz osxcross/target \\\n && rm -rf /tmp/osxcross \\\n && apt-get install bison curl flex gawk gcc g++ gperf help2man libncurses5-dev make patch python-dev texinfo xz-utils -y \\\n && curl -L http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-${CTNG}.tar.xz | tar -xJ -C /tmp/ \\\n && cd /tmp/crosstool-ng-${CTNG} \\\n && ./configure --enable-local \\\n && make \\\n && ./ct-ng x86_64-centos6-linux-gnu \\\n && sed -i '/CT_PREFIX_DIR=/d' .config \\\n && echo 'CT_PREFIX_DIR=\"/tmp/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"' >> .config \\\n && echo 'CT_EXPERIMENTAL=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT_SURE=y' >> .config \\\n && ./ct-ng build \\\n && cd /tmp \\\n && rm /tmp/x86_64-centos6-linux-gnu/build.log.bz2 \\\n && tar cfJ x86_64-centos6-linux-gnu.tar.xz x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/crosstool-ng-${CTNG}\n#  base image to crossbuild grafana\nFROM ubuntu:14.04\nENV GOVERSION=\"1.12.6\" \\\n    PATH=\"/usr/local/go/bin:$PATH\" \\\n    GOPATH=\"/go\" \\\n    NODEVERSION=\"10.14.2\"\nCOPY --from=toolchain /tmp/x86_64-centos6-linux-gnu.tar.xz /tmp/\nCOPY --from=toolchain /tmp/osxcross.tar.xz /tmp/\nRUN apt-get update \\\n && apt-get install clang-3.8 gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-mingw-w64-x86-64 apt-transport-https ca-certificates curl libfontconfig1 gcc g++ git make rpm xz-utils expect gnupg2 unzip -y \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && curl -L https://nodejs.org/dist/v${NODEVERSION}/node-v${NODEVERSION}-linux-x64.tar.xz | tar -xJ --strip-components=1 -C /usr/local \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn \\\n && curl -L https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && git clone https://github.com/raspberrypi/tools.git /opt/rpi-tools --depth=1\nRUN apt-get install gcc libc-dev make -y \\\n && gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \\\n && curl -sSL https://get.rvm.io | bash -s stable \\\n && /bin/bash -l -c \"rvm requirements \\\n && rvm install 2.2 \\\n && gem install -N fpm\"\nADD ./bootstrap.sh /tmp/bootstrap.sh\n","injectedSmells":[],"originalDockerfileHash":"0562c82aa09092d94de7d774393d95d1","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04 AS toolchain\nENV OSX_SDK_URL=\"https://s3.dockerproject.org/darwin/v2/\" \\\n    OSX_SDK=\"MacOSX10.10.sdk\" \\\n    OSX_MIN=\"10.10\" \\\n    CTNG=\"1.23.0\"\n#   FIRST PART\n#   build osx64 toolchain (stripped of man documentation)\n#   the toolchain produced is not self contained, it needs clang at runtime\n#\n#   SECOND PART\n#   build gcc (no g++) centos6-x64 toolchain\n#   doc: https://crosstool-ng.github.io/docs/\n#   apt-get should be all dep to build toolchain\n#   sed and 1st echo are for convenience to get the toolchain in /tmp/x86_64-centos6-linux-gnu\n#   other echo are to enable build by root (crosstool-NG refuse to do that by default)\n#   the last 2 rm are just to save some time and space writing docker layers\n#\n#   THIRD PART\n#   build fpm and creates a set of deb from gem\n#   ruby2.0 depends on ruby1.9.3 which is install as default ruby\n#   rm/ln are here to change that\n#   created deb depends on rubygem-json but json gem is not build\n#   so do by hand\n#   might wanna make sure osx cross and the other tarball as well as the packages ends up somewhere other than tmp\n#   might also wanna put them as their own layer to not have to unpack them every time?\nRUN apt-get update \\\n && apt-get install clang-3.8 patch libxml2-dev ca-certificates curl git make cmake libssl-dev xz-utils -y \\\n && git clone https://github.com/tpoechtrager/osxcross.git /tmp/osxcross \\\n && curl -L ${OSX_SDK_URL}/${OSX_SDK}.tar.xz -o /tmp/osxcross/tarballs/${OSX_SDK}.tar.xz \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && UNATTENDED=yes OSX_VERSION_MIN=${OSX_MIN} /tmp/osxcross/build.sh \\\n && rm -rf /tmp/osxcross/target/SDK/${OSX_SDK}/usr/share \\\n && cd /tmp \\\n && tar cfJ osxcross.tar.xz osxcross/target \\\n && rm -rf /tmp/osxcross \\\n && apt-get install bison curl flex gawk gcc g++ gperf help2man libncurses5-dev make patch python-dev texinfo xz-utils -y \\\n && curl -L http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-${CTNG}.tar.xz | tar -xJ -C /tmp/ \\\n && cd /tmp/crosstool-ng-${CTNG} \\\n && ./configure --enable-local \\\n && make \\\n && ./ct-ng x86_64-centos6-linux-gnu \\\n && sed -i '/CT_PREFIX_DIR=/d' .config \\\n && echo 'CT_PREFIX_DIR=\"/tmp/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"' >> .config \\\n && echo 'CT_EXPERIMENTAL=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT=y' >> .config \\\n && echo 'CT_ALLOW_BUILD_AS_ROOT_SURE=y' >> .config \\\n && ./ct-ng build \\\n && cd /tmp \\\n && rm /tmp/x86_64-centos6-linux-gnu/build.log.bz2 \\\n && tar cfJ x86_64-centos6-linux-gnu.tar.xz x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/x86_64-centos6-linux-gnu/ \\\n && rm -rf /tmp/crosstool-ng-${CTNG}\n#   base image to crossbuild grafana\nFROM ubuntu:14.04\nENV GOVERSION=\"1.12.6\" \\\n    PATH=\"/usr/local/go/bin:$PATH\" \\\n    GOPATH=\"/go\" \\\n    NODEVERSION=\"10.14.2\"\nCOPY --from=toolchain /tmp/x86_64-centos6-linux-gnu.tar.xz /tmp/\nCOPY --from=toolchain /tmp/osxcross.tar.xz /tmp/\nRUN apt-get update \\\n && apt-get install clang-3.8 gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-mingw-w64-x86-64 apt-transport-https ca-certificates curl libfontconfig1 gcc g++ git make rpm xz-utils expect gnupg2 unzip -y \\\n && ln -s /usr/bin/clang-3.8 /usr/bin/clang \\\n && ln -s /usr/bin/clang++-3.8 /usr/bin/clang++ \\\n && ln -s /usr/bin/llvm-dsymutil-3.8 /usr/bin/dsymutil \\\n && curl -L https://nodejs.org/dist/v${NODEVERSION}/node-v${NODEVERSION}-linux-x64.tar.xz | tar -xJ --strip-components=1 -C /usr/local \\\n && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends yarn \\\n && curl -L https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && git clone https://github.com/raspberrypi/tools.git /opt/rpi-tools --depth=1\nRUN apt-get install gcc libc-dev make -y \\\n && gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \\\n && curl -sSL https://get.rvm.io | bash -s stable \\\n && /bin/bash -l -c \"rvm requirements \\\n && rvm install 2.2 \\\n && gem install -N fpm\"\nADD ./bootstrap.sh /tmp/bootstrap.sh\n","originalDockerfileUglifiedHash":"e698a95c5553ec77256cff82025bdacd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b119a0e695c892060172d80fbb8cad2904274562.dockerfile"}