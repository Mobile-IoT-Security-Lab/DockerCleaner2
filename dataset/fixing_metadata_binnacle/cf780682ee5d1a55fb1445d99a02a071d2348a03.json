{"seed":1998967095,"processedDockerfileHash":"aa526a81a17a85babd0c1f14a40af44e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"FROM openjdk:8-jdk-alpine\nRUN apk add git openssh-client curl unzip bash jq ttf-dejavu coreutils tini nodejs nodejs-npm --no-cache\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Privacy policy parameters - REQUIRED!\nARG default_reporting=no\nENV reporting=\"$default_reporting\"\nARG default_license_key=\"\"\nENV license_key=\"$default_license_key\"\nARG default_reporting_user=\"\"\nENV reporting_user=\"$default_reporting_user\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN addgroup -S -g ${gid} ${group} \\\n && adduser -h ${JENKINS_HOME} -G ${group} -D -u ${uid} -s bin/sh ${user}\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY --chown=jenkins:jenkins init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.138.4}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=053d2941d558092c934a0f95798ff2177170eecfffab27a46e30744cf12bc3da\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   Download Jenkins and verify it\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JENKINS_INCREMENTALS_REPO_MIRROR=\"https://repo.jenkins-ci.org/incrementals\"\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#   Add the admin user  \nCOPY --chown=jenkins:jenkins /configs/users \"$JENKINS_HOME\"/users/\n#   Add the main, CLI and global config files to the jenkins path  \nCOPY --chown=jenkins:jenkins /configs/jenkins_home_config.xml \"$JENKINS_HOME\"/config.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.model.JenkinsLocationConfiguration.xml \"$JENKINS_HOME\"/jenkins.model.JenkinsLocationConfiguration.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.CLI.xml \"$JENKINS_HOME\"/jenkins.CLI.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml \"$JENKINS_HOME\"/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml\n#   Create Job\n#   Name the jobs  \nARG job_name_1=\"look_at_me_sideways\"\n#   Create the job workspaces  \nRUN mkdir -p \"$JENKINS_HOME\"/workspace/${job_name_1}\n#   Create the jobs folder recursively  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}\n#   Add the custom configs to the container  \nCOPY --chown=jenkins:jenkins /configs/${job_name_1}_config.xml \"$JENKINS_HOME\"/jobs/${job_name_1}/config.xml\n#   Create build file structure  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/latest/\n#   RUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/builds/1/\n#   Add all necessary scripts\nCOPY --chown=jenkins:jenkins jenkins-support /usr/local/bin/jenkins-support\nCOPY --chown=jenkins:jenkins jenkins.sh /usr/local/bin/jenkins.sh\nCOPY --chown=jenkins:jenkins set-commit-status.sh /usr/local/bin/set-commit-status.sh\nCOPY --chown=jenkins:jenkins tini-shim.sh /bin/tini\nCOPY --chown=jenkins:jenkins install-plugins.sh /usr/local/bin/install-plugins.sh\n#   Install plugins\nRUN ATTEMPTS=3 /usr/local/bin/install-plugins.sh generic-webhook-trigger:1.50 github:1.29.3 postbuild-task:1.8\n#   chown and chmod to jenkins user\nRUN chown -R ${user} $JENKINS_HOME \\\n && chown -R ${user} /usr/share/jenkins/ref\nRUN chgrp -R ${group} $JENKINS_HOME \\\n && chgrp -R ${group} /usr/share/jenkins/ref\n#   Temporarily solution: Install LAMS as a global package from the repo\nRUN git clone https://github.com/looker-open-source/look-at-me-sideways.git /usr/local/bin/lams\nRUN cd /usr/local/bin/lams \\\n && npm config set unsafe-perm true \\\n && npm install --global --production \\\n && npm config set unsafe-perm false\nRUN chown -R ${user} /usr/local/bin/lams \\\n && chgrp -R ${group} /usr/local/bin/lams\nUSER ${user}\nRUN git config --global user.name \"Jenkins\"\nRUN git config --global user.email \"lams@host.com\"\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM openjdk:8-jdk-alpine\nRUN apk add --no-cache git openssh-client curl unzip bash jq ttf-dejavu coreutils tini nodejs nodejs-npm\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#  Privacy policy parameters - REQUIRED!\nARG default_reporting=no\nENV reporting=\"$default_reporting\"\nARG default_license_key=\"\"\nENV license_key=\"$default_license_key\"\nARG default_reporting_user=\"\"\nENV reporting_user=\"$default_reporting_user\"\n#  Jenkins is run with user `jenkins`, uid = 1000\n#  If you bind mount a volume from the host or a data container,\n#  ensure you use the same uid\nRUN addgroup -S -g ${gid} ${group} \\\n && adduser -h ${JENKINS_HOME} -G ${group} -D -u ${uid} -s bin/sh ${user}\n#  `/usr/share/jenkins/ref/` contains all reference configuration we want\n#  to set on a fresh new installation. Use it to bundle additional plugins\n#  or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY --chown=jenkins:jenkins init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#  jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.138.4}\"\n#  jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=053d2941d558092c934a0f95798ff2177170eecfffab27a46e30744cf12bc3da\n#  Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#  Download Jenkins and verify it\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JENKINS_INCREMENTALS_REPO_MIRROR=\"https://repo.jenkins-ci.org/incrementals\"\n#  for main web interface:\nEXPOSE ${http_port}\n#  will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#  Add the admin user  \nCOPY --chown=jenkins:jenkins /configs/users \"$JENKINS_HOME\"/users/\n#  Add the main, CLI and global config files to the jenkins path  \nCOPY --chown=jenkins:jenkins /configs/jenkins_home_config.xml \"$JENKINS_HOME\"/config.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.model.JenkinsLocationConfiguration.xml \"$JENKINS_HOME\"/jenkins.model.JenkinsLocationConfiguration.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.CLI.xml \"$JENKINS_HOME\"/jenkins.CLI.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml \"$JENKINS_HOME\"/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml\n#  Create Job\n#  Name the jobs  \nARG job_name_1=\"look_at_me_sideways\"\n#  Create the job workspaces  \nRUN mkdir -p \"$JENKINS_HOME\"/workspace/${job_name_1}\n#  Create the jobs folder recursively  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}\n#  Add the custom configs to the container  \nCOPY --chown=jenkins:jenkins /configs/${job_name_1}_config.xml \"$JENKINS_HOME\"/jobs/${job_name_1}/config.xml\n#  Create build file structure  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/latest/\n#  RUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/builds/1/\n#  Add all necessary scripts\nCOPY --chown=jenkins:jenkins jenkins-support /usr/local/bin/jenkins-support\nCOPY --chown=jenkins:jenkins jenkins.sh /usr/local/bin/jenkins.sh\nCOPY --chown=jenkins:jenkins set-commit-status.sh /usr/local/bin/set-commit-status.sh\nCOPY --chown=jenkins:jenkins tini-shim.sh /bin/tini\nCOPY --chown=jenkins:jenkins install-plugins.sh /usr/local/bin/install-plugins.sh\n#  Install plugins\nRUN ATTEMPTS=3 /usr/local/bin/install-plugins.sh generic-webhook-trigger:1.50 github:1.29.3 postbuild-task:1.8\n#  chown and chmod to jenkins user\nRUN chown -R ${user} $JENKINS_HOME \\\n && chown -R ${user} /usr/share/jenkins/ref\nRUN chgrp -R ${group} $JENKINS_HOME \\\n && chgrp -R ${group} /usr/share/jenkins/ref\n#  Temporarily solution: Install LAMS as a global package from the repo\nRUN git clone https://github.com/looker-open-source/look-at-me-sideways.git /usr/local/bin/lams\nRUN cd /usr/local/bin/lams \\\n && npm config set unsafe-perm true \\\n && npm install --global --production \\\n && npm config set unsafe-perm false\nRUN chown -R ${user} /usr/local/bin/lams \\\n && chgrp -R ${group} /usr/local/bin/lams\nUSER ${user}\nRUN git config --global user.name \"Jenkins\"\nRUN git config --global user.email \"lams@host.com\"\n#  Jenkins home directory is a volume, so configuration and build history\n#  can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"fdc39b94a4bb74c9903f58927725d137","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM openjdk:8-jdk-alpine\nRUN apk add --no-cache git openssh-client curl unzip bash jq ttf-dejavu coreutils tini nodejs nodejs-npm\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Privacy policy parameters - REQUIRED!\nARG default_reporting=no\nENV reporting=\"$default_reporting\"\nARG default_license_key=\"\"\nENV license_key=\"$default_license_key\"\nARG default_reporting_user=\"\"\nENV reporting_user=\"$default_reporting_user\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN addgroup -S -g ${gid} ${group} \\\n && adduser -h ${JENKINS_HOME} -G ${group} -D -u ${uid} -s bin/sh ${user}\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY --chown=jenkins:jenkins init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.138.4}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=053d2941d558092c934a0f95798ff2177170eecfffab27a46e30744cf12bc3da\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   Download Jenkins and verify it\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nENV JENKINS_INCREMENTALS_REPO_MIRROR=\"https://repo.jenkins-ci.org/incrementals\"\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\n#   Add the admin user  \nCOPY --chown=jenkins:jenkins /configs/users \"$JENKINS_HOME\"/users/\n#   Add the main, CLI and global config files to the jenkins path  \nCOPY --chown=jenkins:jenkins /configs/jenkins_home_config.xml \"$JENKINS_HOME\"/config.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.model.JenkinsLocationConfiguration.xml \"$JENKINS_HOME\"/jenkins.model.JenkinsLocationConfiguration.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.CLI.xml \"$JENKINS_HOME\"/jenkins.CLI.xml\nCOPY --chown=jenkins:jenkins /configs/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml \"$JENKINS_HOME\"/jenkins.security.apitoken.ApiTokenPropertyConfiguration.xml\n#   Create Job\n#   Name the jobs  \nARG job_name_1=\"look_at_me_sideways\"\n#   Create the job workspaces  \nRUN mkdir -p \"$JENKINS_HOME\"/workspace/${job_name_1}\n#   Create the jobs folder recursively  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}\n#   Add the custom configs to the container  \nCOPY --chown=jenkins:jenkins /configs/${job_name_1}_config.xml \"$JENKINS_HOME\"/jobs/${job_name_1}/config.xml\n#   Create build file structure  \nRUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/latest/\n#   RUN mkdir -p \"$JENKINS_HOME\"/jobs/${job_name_1}/builds/1/\n#   Add all necessary scripts\nCOPY --chown=jenkins:jenkins jenkins-support /usr/local/bin/jenkins-support\nCOPY --chown=jenkins:jenkins jenkins.sh /usr/local/bin/jenkins.sh\nCOPY --chown=jenkins:jenkins set-commit-status.sh /usr/local/bin/set-commit-status.sh\nCOPY --chown=jenkins:jenkins tini-shim.sh /bin/tini\nCOPY --chown=jenkins:jenkins install-plugins.sh /usr/local/bin/install-plugins.sh\n#   Install plugins\nRUN ATTEMPTS=3 /usr/local/bin/install-plugins.sh generic-webhook-trigger:1.50 github:1.29.3 postbuild-task:1.8\n#   chown and chmod to jenkins user\nRUN chown -R ${user} $JENKINS_HOME \\\n && chown -R ${user} /usr/share/jenkins/ref\nRUN chgrp -R ${group} $JENKINS_HOME \\\n && chgrp -R ${group} /usr/share/jenkins/ref\n#   Temporarily solution: Install LAMS as a global package from the repo\nRUN git clone https://github.com/looker-open-source/look-at-me-sideways.git /usr/local/bin/lams\nRUN cd /usr/local/bin/lams \\\n && npm config set unsafe-perm true \\\n && npm install --global --production \\\n && npm config set unsafe-perm false\nRUN chown -R ${user} /usr/local/bin/lams \\\n && chgrp -R ${group} /usr/local/bin/lams\nUSER ${user}\nRUN git config --global user.name \"Jenkins\"\nRUN git config --global user.email \"lams@host.com\"\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n","originalDockerfileUglifiedHash":"2bf9eff5d599f8f6455582d0e351b197","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cf780682ee5d1a55fb1445d99a02a071d2348a03.dockerfile"}