{"seed":4025183466,"processedDockerfileHash":"3aec844b5a815c26eab579267bb827c7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2016 - 2018  Ternaris.\n#   SPDX-License-Identifier: AGPL-3.0-only\nFROM ros:kinetic-ros-base\n#   This warning can simply be ignore:\n#   debconf: delaying package configuration, since apt-utils is not installed\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install --no-install-recommends bash-completion bc capnproto curl ffmpeg iputils-ping jq less libcapnp-dev libffi-dev libfreetype6-dev libjpeg-dev libpng-dev libssl-dev libz-dev locales lsof man python-cv-bridge python2.7-dev python-opencv python-pip ros-kinetic-laser-geometry rsync sqlite3 ssh unzip vim -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip==10.0.1 pip-tools==2.0.2 setuptools==39.2.0 virtualenv==16.0.0 wheel==0.31.0 -U\nRUN locale-gen en_US.UTF-8 ; dpkg-reconfigure -f noninteractive locales\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nARG MARV_UID=1000\nARG MARV_GID=1000\nRUN groupadd -g $MARV_GID marv \\\n && useradd -m -u $MARV_UID -g $MARV_GID --shell /bin/bash marv\nARG venv=/opt/marv\nENV MARV_VENV=\"$venv\"\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then mkdir $MARV_VENV; chown marv:marv $MARV_VENV; fi'\nUSER marv\nCOPY requirements.txt /\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then virtualenv -p python2.7 --system-site-packages $MARV_VENV; $MARV_VENV/bin/pip install -U pip==10.0.1 setuptools==39.2.0 wheel==0.31.0; $MARV_VENV/bin/pip install -U -r /requirements.txt; $MARV_VENV/bin/pip install -U --force-reinstall --no-binary :all: uwsgi; sed -e \"s|^backend .*|backend : Agg|\" -i $MARV_VENV/lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc; fi'\nARG code=code\nCOPY --chown=marv:marv ${code:-requirements.txt} /home/marv/code\nRUN bash -c 'if [[ -z \"$code\" ]]; then rm /home/marv/code; fi'\nARG docs=docs\nCOPY --chown=marv:marv CHANGES.rst /home/marv/CHANGES.rst\nCOPY --chown=marv:marv tutorial /home/marv/tutorial\nCOPY --chown=marv:marv ${docs:-requirements.txt} /home/marv/docs\nRUN bash -c 'if [[ -z \"$docs\" ]]; then rm -r /home/marv/docs /home/marv/CHANGES.rst /home/marv/tutorial; fi'\nARG scripts=scripts\nCOPY --chown=marv:marv ${scripts:-requirements.txt} /home/marv/scripts\nRUN bash -c 'if [[ -z \"$scripts\" ]]; then rm /home/marv/scripts; fi'\nARG version\nARG pypi_install_args\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then if [[ -z \"$code\" ]]; then ${MARV_VENV}/bin/pip install ${pypi_install_args} marv-robotics${version:+==${version}}; else find /home/marv/code -maxdepth 2 -name setup.py -execdir ${MARV_VENV}/bin/pip install --no-deps . \\; ; ${MARV_VENV}/bin/pip install /home/marv/code/marv-robotics; (source \"/opt/ros/$ROS_DISTRO/setup.bash\"; source $MARV_VENV/bin/activate; /home/marv/scripts/build-docs); ${MARV_VENV}/bin/pip install -U --no-deps /home/marv/code/marv-robotics; fi fi'\nUSER root\nCOPY .docker/entrypoint.sh /marv_entrypoint.sh\nCOPY .docker/env.sh /etc/profile.d/marv_env.sh\nRUN echo 'source /etc/profile.d/marv_env.sh' >> /etc/bash.bashrc\nENV ACTIVATE_VENV=\"1\"\nENTRYPOINT [\"/marv_entrypoint.sh\"]\nCMD [\"/opt/marv/bin/uwsgi\", \"--die-on-term\", \"--strict\", \"--uid\", \"marv\", \"--gid\", \"marv\", \"--ini\", \"uwsgi.conf\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2016 - 2018  Ternaris.\n#  SPDX-License-Identifier: AGPL-3.0-only\nFROM ros:kinetic-ros-base\n#  This warning can simply be ignore:\n#  debconf: delaying package configuration, since apt-utils is not installed\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install bash-completion bc capnproto curl ffmpeg iputils-ping jq less libcapnp-dev libffi-dev libfreetype6-dev libjpeg-dev libpng-dev libssl-dev libz-dev locales lsof man python-cv-bridge python2.7-dev python-opencv python-pip ros-kinetic-laser-geometry rsync sqlite3 ssh unzip vim -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip==10.0.1 pip-tools==2.0.2 setuptools==39.2.0 virtualenv==16.0.0 wheel==0.31.0 -U\nRUN locale-gen en_US.UTF-8 ; dpkg-reconfigure -f noninteractive locales\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nARG MARV_UID=1000\nARG MARV_GID=1000\nRUN groupadd -g $MARV_GID marv \\\n && useradd -m -u $MARV_UID -g $MARV_GID --shell /bin/bash marv\nARG venv=/opt/marv\nENV MARV_VENV=\"$venv\"\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then mkdir $MARV_VENV; chown marv:marv $MARV_VENV; fi'\nUSER marv\nCOPY requirements.txt /\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then virtualenv -p python2.7 --system-site-packages $MARV_VENV; $MARV_VENV/bin/pip install -U pip==10.0.1 setuptools==39.2.0 wheel==0.31.0; $MARV_VENV/bin/pip install -U -r /requirements.txt; $MARV_VENV/bin/pip install -U --force-reinstall --no-binary :all: uwsgi; sed -e \"s|^backend .*|backend : Agg|\" -i $MARV_VENV/lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc; fi'\nARG code=code\nCOPY --chown=marv:marv ${code:-requirements.txt} /home/marv/code\nRUN bash -c 'if [[ -z \"$code\" ]]; then rm /home/marv/code; fi'\nARG docs=docs\nCOPY --chown=marv:marv CHANGES.rst /home/marv/CHANGES.rst\nCOPY --chown=marv:marv tutorial /home/marv/tutorial\nCOPY --chown=marv:marv ${docs:-requirements.txt} /home/marv/docs\nRUN bash -c 'if [[ -z \"$docs\" ]]; then rm -r /home/marv/docs /home/marv/CHANGES.rst /home/marv/tutorial; fi'\nARG scripts=scripts\nCOPY --chown=marv:marv ${scripts:-requirements.txt} /home/marv/scripts\nRUN bash -c 'if [[ -z \"$scripts\" ]]; then rm /home/marv/scripts; fi'\nARG version\nARG pypi_install_args\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then if [[ -z \"$code\" ]]; then ${MARV_VENV}/bin/pip install ${pypi_install_args} marv-robotics${version:+==${version}}; else find /home/marv/code -maxdepth 2 -name setup.py -execdir ${MARV_VENV}/bin/pip install --no-deps . \\; ; ${MARV_VENV}/bin/pip install /home/marv/code/marv-robotics; (source \"/opt/ros/$ROS_DISTRO/setup.bash\"; source $MARV_VENV/bin/activate; /home/marv/scripts/build-docs); ${MARV_VENV}/bin/pip install -U --no-deps /home/marv/code/marv-robotics; fi fi'\nUSER root\nCOPY .docker/entrypoint.sh /marv_entrypoint.sh\nCOPY .docker/env.sh /etc/profile.d/marv_env.sh\nRUN echo 'source /etc/profile.d/marv_env.sh' >> /etc/bash.bashrc\nENV ACTIVATE_VENV=\"1\"\nENTRYPOINT [\"/marv_entrypoint.sh\"]\nCMD [\"/opt/marv/bin/uwsgi\", \"--die-on-term\", \"--strict\", \"--uid\", \"marv\", \"--gid\", \"marv\", \"--ini\", \"uwsgi.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"59a0a1865dd4448a6e78a544efeb6cea","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2016 - 2018  Ternaris.\n#   SPDX-License-Identifier: AGPL-3.0-only\nFROM ros:kinetic-ros-base\n#   This warning can simply be ignore:\n#   debconf: delaying package configuration, since apt-utils is not installed\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install bash-completion bc capnproto curl ffmpeg iputils-ping jq less libcapnp-dev libffi-dev libfreetype6-dev libjpeg-dev libpng-dev libssl-dev libz-dev locales lsof man python-cv-bridge python2.7-dev python-opencv python-pip ros-kinetic-laser-geometry rsync sqlite3 ssh unzip vim -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install pip==10.0.1 pip-tools==2.0.2 setuptools==39.2.0 virtualenv==16.0.0 wheel==0.31.0 -U\nRUN locale-gen en_US.UTF-8 ; dpkg-reconfigure -f noninteractive locales\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nARG MARV_UID=1000\nARG MARV_GID=1000\nRUN groupadd -g $MARV_GID marv \\\n && useradd -m -u $MARV_UID -g $MARV_GID --shell /bin/bash marv\nARG venv=/opt/marv\nENV MARV_VENV=\"$venv\"\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then mkdir $MARV_VENV; chown marv:marv $MARV_VENV; fi'\nUSER marv\nCOPY requirements.txt /\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then virtualenv -p python2.7 --system-site-packages $MARV_VENV; $MARV_VENV/bin/pip install -U pip==10.0.1 setuptools==39.2.0 wheel==0.31.0; $MARV_VENV/bin/pip install -U -r /requirements.txt; $MARV_VENV/bin/pip install -U --force-reinstall --no-binary :all: uwsgi; sed -e \"s|^backend .*|backend : Agg|\" -i $MARV_VENV/lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc; fi'\nARG code=code\nCOPY --chown=marv:marv ${code:-requirements.txt} /home/marv/code\nRUN bash -c 'if [[ -z \"$code\" ]]; then rm /home/marv/code; fi'\nARG docs=docs\nCOPY --chown=marv:marv CHANGES.rst /home/marv/CHANGES.rst\nCOPY --chown=marv:marv tutorial /home/marv/tutorial\nCOPY --chown=marv:marv ${docs:-requirements.txt} /home/marv/docs\nRUN bash -c 'if [[ -z \"$docs\" ]]; then rm -r /home/marv/docs /home/marv/CHANGES.rst /home/marv/tutorial; fi'\nARG scripts=scripts\nCOPY --chown=marv:marv ${scripts:-requirements.txt} /home/marv/scripts\nRUN bash -c 'if [[ -z \"$scripts\" ]]; then rm /home/marv/scripts; fi'\nARG version\nARG pypi_install_args\nRUN bash -c 'if [[ -n \"$MARV_VENV\" ]]; then if [[ -z \"$code\" ]]; then ${MARV_VENV}/bin/pip install ${pypi_install_args} marv-robotics${version:+==${version}}; else find /home/marv/code -maxdepth 2 -name setup.py -execdir ${MARV_VENV}/bin/pip install --no-deps . \\; ; ${MARV_VENV}/bin/pip install /home/marv/code/marv-robotics; (source \"/opt/ros/$ROS_DISTRO/setup.bash\"; source $MARV_VENV/bin/activate; /home/marv/scripts/build-docs); ${MARV_VENV}/bin/pip install -U --no-deps /home/marv/code/marv-robotics; fi fi'\nUSER root\nCOPY .docker/entrypoint.sh /marv_entrypoint.sh\nCOPY .docker/env.sh /etc/profile.d/marv_env.sh\nRUN echo 'source /etc/profile.d/marv_env.sh' >> /etc/bash.bashrc\nENV ACTIVATE_VENV=\"1\"\nENTRYPOINT [\"/marv_entrypoint.sh\"]\nCMD [\"/opt/marv/bin/uwsgi\", \"--die-on-term\", \"--strict\", \"--uid\", \"marv\", \"--gid\", \"marv\", \"--ini\", \"uwsgi.conf\"]\n","originalDockerfileUglifiedHash":"91a193eca9329bb391e69744155b8012","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7c86dc2f40be0f64d5860248f02d27942a511fbe.dockerfile"}