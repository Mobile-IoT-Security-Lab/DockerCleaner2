{"seed":398497500,"processedDockerfileHash":"0bb090c60634588cabbc4d743b248d15","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   RISC-V Dockerfile\n#\n#   https://github.com/sbates130272/docker-riscv\n#\n#   This Dockerfile creates a container full of lots of useful tools for\n#   RISC-V development. See associated README.md for more\n#   information. This Dockerfile is mostly based on the instructions\n#   found at https://github.com/riscv/riscv-tools.\n#   Pull base image (use Wily for now).\nFROM ubuntu:15.10\n#   Set the maintainer\nMAINTAINER Stephen Bates (sbates130272) <sbates@raithlin.com>\n#   Install some base tools that we will need to get the risc-v\n#   toolchain working.\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake autotools-dev bc bison build-essential curl emacs24-nox flex gawk git gperf libmpc-dev libmpfr-dev libgmp-dev libtool ncurses-dev patchutils squashfs-tools texinfo -y\n#   Make a working folder and set the necessary environment variables.\nENV RISCV=\"/opt/riscv\"\nENV NUMJOBS=\"1\"\nRUN mkdir -p $RISCV\n#   Add the GNU utils bin folder to the path.\nENV PATH=\"$RISCV/bin:$PATH\"\n#   Obtain the RISCV-tools repo which consists of a number of submodules\n#   so make sure we get those too.\nWORKDIR $RISCV\nRUN git clone https://github.com/riscv/riscv-tools.git \\\n && cd riscv-tools \\\n && git submodule update --init --recursive\n#   Obtain the RISC-V branch of the Linux kernel\nWORKDIR $RISCV\nRUN curl -L https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.41.tar.xz | tar -xJ \\\n && cd linux-3.14.41 \\\n && git init \\\n && git remote add origin https://github.com/riscv/riscv-linux.git \\\n && git fetch \\\n && git checkout -f -t origin/master\n#   Before building the GNU tools make sure the headers there are up-to\n#   date.\nWORKDIR $RISCV/linux-3.14.41\nRUN make ARCH=riscv headers_check \\\n && make ARCH=riscv INSTALL_HDR_PATH= $RISCV/riscv-tools/riscv-gnu-toolchain/linux-headers headers_install\n#   Now build the toolchain for RISCV. Set -j 1 to avoid issues on VMs.\nWORKDIR $RISCV/riscv-tools\nRUN sed -i 's/JOBS=16/JOBS=$NUMJOBS/' build.common \\\n && ./build.sh\n#   Run a simple test to make sure at least spike, pk and the Newlib\n#   compiler are setup correctly.\nRUN mkdir -p $RISCV/test\nWORKDIR $RISCV/test\nRUN echo '#include <stdio.h>\\n int main(void) { printf(\"Hello world!\\\\n\"); return 0; }' > hello.c \\\n && riscv64-unknown-elf-gcc -o hello hello.c \\\n && spike pk hello\n#   Now build the glibc toolchain as well. This complements the newlib\n#   tool chain we added above. When done we clean up the intermediate\n#   folders as this saves a ton (>6G of space). \nWORKDIR $RISCV/riscv-tools/riscv-gnu-toolchain\nRUN ./configure --prefix=$RISCV \\\n && make linux \\\n && rm -rf build-binutils-linux build-gcc-linux-stage1 build-gcc-linux-stage2 build-glibc-linux-headers build-glibc-linux64 src build/src stamps\n#   Now build the linux kernel image. Note that the RISC-V Linux GitHub\n#   site has a -j in the make command and that seems to break things on\n#   a VM so here we use NUMJOBS to set the parallelism. We also get the\n#   .config from my GitHub site since we have enabled more than the\n#   default (squashfs for example).\nWORKDIR $RISCV/linux-3.14.41\nRUN curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-linux-3.14.41 > .config \\\n && make ARCH=riscv -j $NUMJOBS vmlinux\n#   Now create a mnt subfolder that we will squashfs into our root\n#   filesystem for the linux environment. \nWORKDIR $RISCV\nRUN mkdir mnt \\\n && cd mnt \\\n && mkdir -p bin etc dev lib proc sbin sys tmp usr usr/bin usr/lib usr/sbin \\\n && curl -L http://riscv.org/install-guides/linux-inittab > etc/inittab\n#   Now install busybox as we will use that in our linux based\n#   environment. We grab the .config for this from our GitHub site\n#   because we want more stuff in it than the default and we want to\n#   make sure it installs to the right place (using some sed magic).\nWORKDIR $RISCV\nRUN curl -L http://busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar -xj \\\n && cd busybox-1.21.1 \\\n && curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-busybox-1.21.1 > .config \\\n && make -j $NUMJOBS install\n#   Create the root filesystem using squashfs.\nWORKDIR $RISCV\nRUN mksquashfs mnt root.bin.sqsh \\\n && cd .. \\\n && rm -rf mnt\n#   Set the WORKDIR to be in the $RISCV folder and we are done!\nWORKDIR $RISCV\n#   Now you can launch the container and run a command like:\n#\n#   spike -m128 -p1 +disk=root.bin.sqsh bbl linux-3.14.41/vmlinux\n#\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  RISC-V Dockerfile\n#\n#  https://github.com/sbates130272/docker-riscv\n#\n#  This Dockerfile creates a container full of lots of useful tools for\n#  RISC-V development. See associated README.md for more\n#  information. This Dockerfile is mostly based on the instructions\n#  found at https://github.com/riscv/riscv-tools.\n#  Pull base image (use Wily for now).\nFROM ubuntu:15.10\n#  Set the maintainer\nMAINTAINER Stephen Bates (sbates130272) <sbates@raithlin.com>\n#  Install some base tools that we will need to get the risc-v\n#  toolchain working.\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bc bison build-essential curl emacs24-nox flex gawk git gperf libmpc-dev libmpfr-dev libgmp-dev libtool ncurses-dev patchutils squashfs-tools texinfo -y\n#  Make a working folder and set the necessary environment variables.\nENV RISCV=\"/opt/riscv\"\nENV NUMJOBS=\"1\"\nRUN mkdir -p $RISCV\n#  Add the GNU utils bin folder to the path.\nENV PATH=\"$RISCV/bin:$PATH\"\n#  Obtain the RISCV-tools repo which consists of a number of submodules\n#  so make sure we get those too.\nWORKDIR $RISCV\nRUN git clone https://github.com/riscv/riscv-tools.git \\\n && cd riscv-tools \\\n && git submodule update --init --recursive\n#  Obtain the RISC-V branch of the Linux kernel\nWORKDIR $RISCV\nRUN curl -L https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.41.tar.xz | tar -xJ \\\n && cd linux-3.14.41 \\\n && git init \\\n && git remote add origin https://github.com/riscv/riscv-linux.git \\\n && git fetch \\\n && git checkout -f -t origin/master\n#  Before building the GNU tools make sure the headers there are up-to\n#  date.\nWORKDIR $RISCV/linux-3.14.41\nRUN make ARCH=riscv headers_check \\\n && make ARCH=riscv INSTALL_HDR_PATH= $RISCV/riscv-tools/riscv-gnu-toolchain/linux-headers headers_install\n#  Now build the toolchain for RISCV. Set -j 1 to avoid issues on VMs.\nWORKDIR $RISCV/riscv-tools\nRUN sed -i 's/JOBS=16/JOBS=$NUMJOBS/' build.common \\\n && ./build.sh\n#  Run a simple test to make sure at least spike, pk and the Newlib\n#  compiler are setup correctly.\nRUN mkdir -p $RISCV/test\nWORKDIR $RISCV/test\nRUN echo '#include <stdio.h>\\n int main(void) { printf(\"Hello world!\\\\n\"); return 0; }' > hello.c \\\n && riscv64-unknown-elf-gcc -o hello hello.c \\\n && spike pk hello\n#  Now build the glibc toolchain as well. This complements the newlib\n#  tool chain we added above. When done we clean up the intermediate\n#  folders as this saves a ton (>6G of space). \nWORKDIR $RISCV/riscv-tools/riscv-gnu-toolchain\nRUN ./configure --prefix=$RISCV \\\n && make linux \\\n && rm -rf build-binutils-linux build-gcc-linux-stage1 build-gcc-linux-stage2 build-glibc-linux-headers build-glibc-linux64 src build/src stamps\n#  Now build the linux kernel image. Note that the RISC-V Linux GitHub\n#  site has a -j in the make command and that seems to break things on\n#  a VM so here we use NUMJOBS to set the parallelism. We also get the\n#  .config from my GitHub site since we have enabled more than the\n#  default (squashfs for example).\nWORKDIR $RISCV/linux-3.14.41\nRUN curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-linux-3.14.41 > .config \\\n && make ARCH=riscv -j $NUMJOBS vmlinux\n#  Now create a mnt subfolder that we will squashfs into our root\n#  filesystem for the linux environment. \nWORKDIR $RISCV\nRUN mkdir mnt \\\n && cd mnt \\\n && mkdir -p bin etc dev lib proc sbin sys tmp usr usr/bin usr/lib usr/sbin \\\n && curl -L http://riscv.org/install-guides/linux-inittab > etc/inittab\n#  Now install busybox as we will use that in our linux based\n#  environment. We grab the .config for this from our GitHub site\n#  because we want more stuff in it than the default and we want to\n#  make sure it installs to the right place (using some sed magic).\nWORKDIR $RISCV\nRUN curl -L http://busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar -xj \\\n && cd busybox-1.21.1 \\\n && curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-busybox-1.21.1 > .config \\\n && make -j $NUMJOBS install\n#  Create the root filesystem using squashfs.\nWORKDIR $RISCV\nRUN mksquashfs mnt root.bin.sqsh \\\n && cd .. \\\n && rm -rf mnt\n#  Set the WORKDIR to be in the $RISCV folder and we are done!\nWORKDIR $RISCV\n#  Now you can launch the container and run a command like:\n#\n#  spike -m128 -p1 +disk=root.bin.sqsh bbl linux-3.14.41/vmlinux\n#\n","injectedSmells":[],"originalDockerfileHash":"3bef21f6591cc74c2c5c1dbb17c096dc","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   RISC-V Dockerfile\n#\n#   https://github.com/sbates130272/docker-riscv\n#\n#   This Dockerfile creates a container full of lots of useful tools for\n#   RISC-V development. See associated README.md for more\n#   information. This Dockerfile is mostly based on the instructions\n#   found at https://github.com/riscv/riscv-tools.\n#   Pull base image (use Wily for now).\nFROM ubuntu:15.10\n#   Set the maintainer\nMAINTAINER Stephen Bates (sbates130272) <sbates@raithlin.com>\n#   Install some base tools that we will need to get the risc-v\n#   toolchain working.\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bc bison build-essential curl emacs24-nox flex gawk git gperf libmpc-dev libmpfr-dev libgmp-dev libtool ncurses-dev patchutils squashfs-tools texinfo -y\n#   Make a working folder and set the necessary environment variables.\nENV RISCV=\"/opt/riscv\"\nENV NUMJOBS=\"1\"\nRUN mkdir -p $RISCV\n#   Add the GNU utils bin folder to the path.\nENV PATH=\"$RISCV/bin:$PATH\"\n#   Obtain the RISCV-tools repo which consists of a number of submodules\n#   so make sure we get those too.\nWORKDIR $RISCV\nRUN git clone https://github.com/riscv/riscv-tools.git \\\n && cd riscv-tools \\\n && git submodule update --init --recursive\n#   Obtain the RISC-V branch of the Linux kernel\nWORKDIR $RISCV\nRUN curl -L https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.41.tar.xz | tar -xJ \\\n && cd linux-3.14.41 \\\n && git init \\\n && git remote add origin https://github.com/riscv/riscv-linux.git \\\n && git fetch \\\n && git checkout -f -t origin/master\n#   Before building the GNU tools make sure the headers there are up-to\n#   date.\nWORKDIR $RISCV/linux-3.14.41\nRUN make ARCH=riscv headers_check \\\n && make ARCH=riscv INSTALL_HDR_PATH= $RISCV/riscv-tools/riscv-gnu-toolchain/linux-headers headers_install\n#   Now build the toolchain for RISCV. Set -j 1 to avoid issues on VMs.\nWORKDIR $RISCV/riscv-tools\nRUN sed -i 's/JOBS=16/JOBS=$NUMJOBS/' build.common \\\n && ./build.sh\n#   Run a simple test to make sure at least spike, pk and the Newlib\n#   compiler are setup correctly.\nRUN mkdir -p $RISCV/test\nWORKDIR $RISCV/test\nRUN echo '#include <stdio.h>\\n int main(void) { printf(\"Hello world!\\\\n\"); return 0; }' > hello.c \\\n && riscv64-unknown-elf-gcc -o hello hello.c \\\n && spike pk hello\n#   Now build the glibc toolchain as well. This complements the newlib\n#   tool chain we added above. When done we clean up the intermediate\n#   folders as this saves a ton (>6G of space). \nWORKDIR $RISCV/riscv-tools/riscv-gnu-toolchain\nRUN ./configure --prefix=$RISCV \\\n && make linux \\\n && rm -rf build-binutils-linux build-gcc-linux-stage1 build-gcc-linux-stage2 build-glibc-linux-headers build-glibc-linux64 src build/src stamps\n#   Now build the linux kernel image. Note that the RISC-V Linux GitHub\n#   site has a -j in the make command and that seems to break things on\n#   a VM so here we use NUMJOBS to set the parallelism. We also get the\n#   .config from my GitHub site since we have enabled more than the\n#   default (squashfs for example).\nWORKDIR $RISCV/linux-3.14.41\nRUN curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-linux-3.14.41 > .config \\\n && make ARCH=riscv -j $NUMJOBS vmlinux\n#   Now create a mnt subfolder that we will squashfs into our root\n#   filesystem for the linux environment. \nWORKDIR $RISCV\nRUN mkdir mnt \\\n && cd mnt \\\n && mkdir -p bin etc dev lib proc sbin sys tmp usr usr/bin usr/lib usr/sbin \\\n && curl -L http://riscv.org/install-guides/linux-inittab > etc/inittab\n#   Now install busybox as we will use that in our linux based\n#   environment. We grab the .config for this from our GitHub site\n#   because we want more stuff in it than the default and we want to\n#   make sure it installs to the right place (using some sed magic).\nWORKDIR $RISCV\nRUN curl -L http://busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar -xj \\\n && cd busybox-1.21.1 \\\n && curl -L https://raw.githubusercontent.com/sbates130272/docker-riscv/master/.config-busybox-1.21.1 > .config \\\n && make -j $NUMJOBS install\n#   Create the root filesystem using squashfs.\nWORKDIR $RISCV\nRUN mksquashfs mnt root.bin.sqsh \\\n && cd .. \\\n && rm -rf mnt\n#   Set the WORKDIR to be in the $RISCV folder and we are done!\nWORKDIR $RISCV\n#   Now you can launch the container and run a command like:\n#\n#   spike -m128 -p1 +disk=root.bin.sqsh bbl linux-3.14.41/vmlinux\n#\n","originalDockerfileUglifiedHash":"c242ebe6549dadb2c2705c86320acda3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2106d19f16cf36f377e0f623a52c9b57f583aed6.dockerfile"}