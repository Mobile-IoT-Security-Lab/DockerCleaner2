{"seed":2070144557,"processedDockerfileHash":"0ed384c253be062d7e4ea0820becd733","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ##############################################################################\n#   Dockerfile for https://github.com/ppwwyyxx/speaker-recognition\n#   -----------------------------------------------------------------------------\n#   Docker provides a way to run applications securely isolated in a container, \n#   packaged with all its dependencies and libraries.\n#\n#   This Dockerfile produces a docker image, from which containers can be created\n#   * An image is a lightweight, stand-alone, executable package that includes \n#     everything needed to run a piece of software, including the code, a runtime,\n#     libraries, environment variables, and config files.\n#   * A container is a runtime instance of an image – what the image becomes in\n#     memory when actually executed. It runs completely isolated from the host \n#     environment by default, only accessing host files and ports if configured \n#     to do so.\n#\n#   Containers run apps natively on the host machine’s kernel. \n#   They have better performance than virtual machines that only get virtual\n#   access to host resources through a hypervisor. \n#   Images or containers can easily be exchanged and many users publish images in\n#   the docker hub (https://hub.docker.com/).  Docker further enables upscaling\n#   of solutions from single workstation to server farms through docker swarms.\n#\n#        Read more here: https://docs.docker.com/\n#   Install docker here: https://docs.docker.com/engine/installation/linux/\n#\n#   Quick start commands (as root)\n#   -----------------------------------------------------------------------------\n#   Pull an image from the docker hub\n#   > docker pull <image name>\n#   \n#   Build this Dockerfile (place it in an empty folder and cd to it): \n#   > docker build -f Dockerfile -t speaker-recognition .\n#\n#   Instantiate a container from an image\n#   > docker run -ti speaker-recognition\n#   To give container access to host files during development:\n#   > docker run --name speaker-recognitionInstance -ti -v /:/host speaker-recognition\n#\n#   Run a stopped container\n#   > docker start -ai speaker-recognitionInstance\n#   \n#   Run the speaker_recognition.py directly thorough the configured entry point\n#   > docker run -v local_path:remote_path speaker-recognition\n#\n#   List information\n#   > docker images                 All docker images\n#   > docker ps -a                  All docker containers (running or not: -a)\n#\n#  ##############################################################################\n#   BASE IMAGE\nFROM ubuntu\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Prepare package management\n#  ##############################################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends nano=7.2-1 sudo=1.9.13p1-1ubuntu2 tzdata=2022g-7ubuntu2 apt-utils=2.6.0 -y \\\n && apt-get -y dist-upgrade\n#   Set timezone\n#   https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806\n#  ##############################################################################\nRUN rm /etc/localtime \\\n && echo \"Australia/Sydney\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Create the GUI User\n#  ##############################################################################\n#   Then you can run a docker container with access to the GUI on your desktop:\n#   > docker run -ti -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -u guiuser <image>\n#   -----------------------------------------------------------------------------\nENV USERNAME=\"guiuser\"\nRUN useradd -m $USERNAME \\\n && echo \"$USERNAME:$USERNAME\" | chpasswd \\\n && usermod --shell /bin/bash $USERNAME \\\n && usermod -aG sudo $USERNAME \\\n && echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/$USERNAME \\\n && chmod 0440 /etc/sudoers.d/$USERNAME \\\n && usermod --uid 1000 $USERNAME \\\n && groupmod --gid 1000 $USERNAME\n#   Python 2\n#  ##############################################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends python python-pip -y \\\n && pip2 list --outdated | cut -d' ' -f1 | xargs -n 1 pip2 install --upgrade\n#   Base Dependencies\n#  ##############################################################################\nRUN apt-get install --no-install-recommends portaudio19-dev=19.6.0-1.2 libopenblas-base libopenblas-dev=0.3.21+ds-4 pkg-config=1.8.1-1ubuntu2 git-core cmake=3.25.1-1 python-dev liblapack-dev=3.11.0-2 libatlas-base-dev=3.10.3-13ubuntu1 libblitz0-dev=1:1.0.2+ds-4 libboost-all-dev=1.74.0.3ubuntu7 libhdf5-serial-dev libqt4-dev libsvm-dev=3.24+ds-6 libvlfeat-dev=0.9.21+full-1 python-nose python-setuptools python-imaging build-essential=12.9ubuntu3 libmatio-dev=1.5.23-2 python-sphinx python-matplotlib python-scipy -y\n#   additional dependencies for bob\nRUN apt-get install --no-install-recommends libfftw3-dev=3.3.10-1ubuntu1 libtiff5-dev=4.5.0-4ubuntu1 libgif-dev=5.2.1-2.5 libpng-dev=1.6.39-2 libjpeg-dev=8c-2ubuntu11 -y\n#   Spear\n#   https://gitlab.idiap.ch/bob/bob/wikis/Dependencies\n#   Takes a very long time to install python packages because compilation is happening in the background\n#  ##############################################################################\nRUN pip2 install scipy scikit-learn scikits.talkbox numpy pyside pyssp PyAudio argparse h5py\nRUN pip2 install bob.extension\nRUN pip2 install bob.blitz\nRUN pip2 install bob.core\nRUN pip2 install bob.io.base\nRUN pip2 install bob.bio.spear\nRUN pip2 install bob.sp\n#   Realtime Speaker Recognition\n#   https://github.com/ppwwyyxx/speaker-recognition\n#  ##############################################################################\nRUN cd ~/ \\\n && git clone https://github.com/ppwwyyxx/speaker-recognition.git \\\n && cd ~/speaker-recognition \\\n && make -C src/gmm\n#   Clean up\n#  ##############################################################################\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Entrypoint - so `docker run speaker-recognition` will automatically run the python main\n#  ##############################################################################\nENTRYPOINT [\"/usr/bin/python\", \"/root/speaker-recognition/src/speaker-recognition.py\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ##############################################################################\n#  Dockerfile for https://github.com/ppwwyyxx/speaker-recognition\n#  -----------------------------------------------------------------------------\n#  Docker provides a way to run applications securely isolated in a container, \n#  packaged with all its dependencies and libraries.\n#\n#  This Dockerfile produces a docker image, from which containers can be created\n#  * An image is a lightweight, stand-alone, executable package that includes \n#    everything needed to run a piece of software, including the code, a runtime,\n#    libraries, environment variables, and config files.\n#  * A container is a runtime instance of an image – what the image becomes in\n#    memory when actually executed. It runs completely isolated from the host \n#    environment by default, only accessing host files and ports if configured \n#    to do so.\n#\n#  Containers run apps natively on the host machine’s kernel. \n#  They have better performance than virtual machines that only get virtual\n#  access to host resources through a hypervisor. \n#  Images or containers can easily be exchanged and many users publish images in\n#  the docker hub (https://hub.docker.com/).  Docker further enables upscaling\n#  of solutions from single workstation to server farms through docker swarms.\n#\n#       Read more here: https://docs.docker.com/\n#  Install docker here: https://docs.docker.com/engine/installation/linux/\n#\n#  Quick start commands (as root)\n#  -----------------------------------------------------------------------------\n#  Pull an image from the docker hub\n#  > docker pull <image name>\n#  \n#  Build this Dockerfile (place it in an empty folder and cd to it): \n#  > docker build -f Dockerfile -t speaker-recognition .\n#\n#  Instantiate a container from an image\n#  > docker run -ti speaker-recognition\n#  To give container access to host files during development:\n#  > docker run --name speaker-recognitionInstance -ti -v /:/host speaker-recognition\n#\n#  Run a stopped container\n#  > docker start -ai speaker-recognitionInstance\n#  \n#  Run the speaker_recognition.py directly thorough the configured entry point\n#  > docker run -v local_path:remote_path speaker-recognition\n#\n#  List information\n#  > docker images                 All docker images\n#  > docker ps -a                  All docker containers (running or not: -a)\n#\n# ##############################################################################\n#  BASE IMAGE\nFROM ubuntu\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Prepare package management\n# ##############################################################################\nRUN apt-get update \\\n && apt-get install nano sudo tzdata apt-utils -y \\\n && apt-get -y dist-upgrade\n#  Set timezone\n#  https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806\n# ##############################################################################\nRUN rm /etc/localtime \\\n && echo \"Australia/Sydney\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#  Create the GUI User\n# ##############################################################################\n#  Then you can run a docker container with access to the GUI on your desktop:\n#  > docker run -ti -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -u guiuser <image>\n#  -----------------------------------------------------------------------------\nENV USERNAME=\"guiuser\"\nRUN useradd -m $USERNAME \\\n && echo \"$USERNAME:$USERNAME\" | chpasswd \\\n && usermod --shell /bin/bash $USERNAME \\\n && usermod -aG sudo $USERNAME \\\n && echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/$USERNAME \\\n && chmod 0440 /etc/sudoers.d/$USERNAME \\\n && usermod --uid 1000 $USERNAME \\\n && groupmod --gid 1000 $USERNAME\n#  Python 2\n# ##############################################################################\nRUN apt-get update \\\n && apt-get install python python-pip -y \\\n && pip2 list --outdated | cut -d' ' -f1 | xargs -n 1 pip2 install --upgrade\n#  Base Dependencies\n# ##############################################################################\nRUN apt-get install portaudio19-dev libopenblas-base libopenblas-dev pkg-config git-core cmake python-dev liblapack-dev libatlas-base-dev libblitz0-dev libboost-all-dev libhdf5-serial-dev libqt4-dev libsvm-dev libvlfeat-dev python-nose python-setuptools python-imaging build-essential libmatio-dev python-sphinx python-matplotlib python-scipy -y\n#  additional dependencies for bob\nRUN apt-get install libfftw3-dev libtiff5-dev libgif-dev libpng-dev libjpeg-dev -y\n#  Spear\n#  https://gitlab.idiap.ch/bob/bob/wikis/Dependencies\n#  Takes a very long time to install python packages because compilation is happening in the background\n# ##############################################################################\nRUN pip2 install scipy scikit-learn scikits.talkbox numpy pyside pyssp PyAudio argparse h5py\nRUN pip2 install bob.extension\nRUN pip2 install bob.blitz\nRUN pip2 install bob.core\nRUN pip2 install bob.io.base\nRUN pip2 install bob.bio.spear\nRUN pip2 install bob.sp\n#  Realtime Speaker Recognition\n#  https://github.com/ppwwyyxx/speaker-recognition\n# ##############################################################################\nRUN cd ~/ \\\n && git clone https://github.com/ppwwyyxx/speaker-recognition.git \\\n && cd ~/speaker-recognition \\\n && make -C src/gmm\n#  Clean up\n# ##############################################################################\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Entrypoint - so `docker run speaker-recognition` will automatically run the python main\n# ##############################################################################\nENTRYPOINT [\"/usr/bin/python\", \"/root/speaker-recognition/src/speaker-recognition.py\"]\n","injectedSmells":[],"originalDockerfileHash":"12c2bb45a2b954e4a14eb6fc7b63e62d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ##############################################################################\n#   Dockerfile for https://github.com/ppwwyyxx/speaker-recognition\n#   -----------------------------------------------------------------------------\n#   Docker provides a way to run applications securely isolated in a container, \n#   packaged with all its dependencies and libraries.\n#\n#   This Dockerfile produces a docker image, from which containers can be created\n#   * An image is a lightweight, stand-alone, executable package that includes \n#     everything needed to run a piece of software, including the code, a runtime,\n#     libraries, environment variables, and config files.\n#   * A container is a runtime instance of an image – what the image becomes in\n#     memory when actually executed. It runs completely isolated from the host \n#     environment by default, only accessing host files and ports if configured \n#     to do so.\n#\n#   Containers run apps natively on the host machine’s kernel. \n#   They have better performance than virtual machines that only get virtual\n#   access to host resources through a hypervisor. \n#   Images or containers can easily be exchanged and many users publish images in\n#   the docker hub (https://hub.docker.com/).  Docker further enables upscaling\n#   of solutions from single workstation to server farms through docker swarms.\n#\n#        Read more here: https://docs.docker.com/\n#   Install docker here: https://docs.docker.com/engine/installation/linux/\n#\n#   Quick start commands (as root)\n#   -----------------------------------------------------------------------------\n#   Pull an image from the docker hub\n#   > docker pull <image name>\n#   \n#   Build this Dockerfile (place it in an empty folder and cd to it): \n#   > docker build -f Dockerfile -t speaker-recognition .\n#\n#   Instantiate a container from an image\n#   > docker run -ti speaker-recognition\n#   To give container access to host files during development:\n#   > docker run --name speaker-recognitionInstance -ti -v /:/host speaker-recognition\n#\n#   Run a stopped container\n#   > docker start -ai speaker-recognitionInstance\n#   \n#   Run the speaker_recognition.py directly thorough the configured entry point\n#   > docker run -v local_path:remote_path speaker-recognition\n#\n#   List information\n#   > docker images                 All docker images\n#   > docker ps -a                  All docker containers (running or not: -a)\n#\n#  ##############################################################################\n#   BASE IMAGE\nFROM ubuntu\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Prepare package management\n#  ##############################################################################\nRUN apt-get update \\\n && apt-get install nano sudo tzdata apt-utils -y \\\n && apt-get -y dist-upgrade\n#   Set timezone\n#   https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806\n#  ##############################################################################\nRUN rm /etc/localtime \\\n && echo \"Australia/Sydney\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Create the GUI User\n#  ##############################################################################\n#   Then you can run a docker container with access to the GUI on your desktop:\n#   > docker run -ti -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -u guiuser <image>\n#   -----------------------------------------------------------------------------\nENV USERNAME=\"guiuser\"\nRUN useradd -m $USERNAME \\\n && echo \"$USERNAME:$USERNAME\" | chpasswd \\\n && usermod --shell /bin/bash $USERNAME \\\n && usermod -aG sudo $USERNAME \\\n && echo \"$USERNAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers.d/$USERNAME \\\n && chmod 0440 /etc/sudoers.d/$USERNAME \\\n && usermod --uid 1000 $USERNAME \\\n && groupmod --gid 1000 $USERNAME\n#   Python 2\n#  ##############################################################################\nRUN apt-get update \\\n && apt-get install python python-pip -y \\\n && pip2 list --outdated | cut -d' ' -f1 | xargs -n 1 pip2 install --upgrade\n#   Base Dependencies\n#  ##############################################################################\nRUN apt-get install portaudio19-dev libopenblas-base libopenblas-dev pkg-config git-core cmake python-dev liblapack-dev libatlas-base-dev libblitz0-dev libboost-all-dev libhdf5-serial-dev libqt4-dev libsvm-dev libvlfeat-dev python-nose python-setuptools python-imaging build-essential libmatio-dev python-sphinx python-matplotlib python-scipy -y\n#   additional dependencies for bob\nRUN apt-get install libfftw3-dev libtiff5-dev libgif-dev libpng-dev libjpeg-dev -y\n#   Spear\n#   https://gitlab.idiap.ch/bob/bob/wikis/Dependencies\n#   Takes a very long time to install python packages because compilation is happening in the background\n#  ##############################################################################\nRUN pip2 install scipy scikit-learn scikits.talkbox numpy pyside pyssp PyAudio argparse h5py\nRUN pip2 install bob.extension\nRUN pip2 install bob.blitz\nRUN pip2 install bob.core\nRUN pip2 install bob.io.base\nRUN pip2 install bob.bio.spear\nRUN pip2 install bob.sp\n#   Realtime Speaker Recognition\n#   https://github.com/ppwwyyxx/speaker-recognition\n#  ##############################################################################\nRUN cd ~/ \\\n && git clone https://github.com/ppwwyyxx/speaker-recognition.git \\\n && cd ~/speaker-recognition \\\n && make -C src/gmm\n#   Clean up\n#  ##############################################################################\nRUN apt-get clean \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Entrypoint - so `docker run speaker-recognition` will automatically run the python main\n#  ##############################################################################\nENTRYPOINT [\"/usr/bin/python\", \"/root/speaker-recognition/src/speaker-recognition.py\"]\n","originalDockerfileUglifiedHash":"bc7e96a6df452acff43ed53af16cb3d6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/708eb516f354e70a0e13f3f37a005dac6a6d6cae.dockerfile"}