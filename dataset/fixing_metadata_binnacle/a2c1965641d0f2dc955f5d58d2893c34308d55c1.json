{"seed":1944801282,"processedDockerfileHash":"ea9aceac5b7308f05210b16dde805983","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends git=1:2.7.4-0ubuntu1.10 wget=1.17.1-1ubuntu1.5 bzip2=1.0.6-8ubuntu0.2 file=1:5.25-2ubuntu1.4 unzip=6.0-20ubuntu1.1 libtool=2.4.6-0.1 pkg-config=0.29.1-0ubuntu1 cmake=3.5.1-1ubuntu3 build-essential=12.1ubuntu2 automake=1:1.15-4ubuntu1 yasm=1.3.0-2 gettext=0.19.7-2ubuntu3.1 autopoint=0.19.7-2ubuntu3.1 vim=2:7.4.1689-3ubuntu1.5 python=2.7.12-1~16.04 git-svn=1:2.7.4-0ubuntu1.10 ninja-build=1.5.1-0.1ubuntu1 subversion=1.9.3-2ubuntu1.3 -qqy \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.name \"LLVM MinGW\" \\\n && git config --global user.email root@localhost\nWORKDIR /build\nENV TOOLCHAIN_PREFIX=\"/opt/llvm-mingw\"\nARG FULL_LLVM\n#   Build LLVM\nCOPY build-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX\n#   Strip the LLVM install output immediately. (This doesn't reduce the\n#   total docker image size as long as it is in a separate RUN layer though,\n#   but reduces build times if tweaking the contents of strip-llvm.sh.)\n#   Most of the size of the docker image comes from the build directory that\n#   we keep in any case.\nCOPY strip-llvm.sh ./\nRUN ./strip-llvm.sh $TOOLCHAIN_PREFIX\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n#   Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX\n#   Build MinGW-w64\nCOPY build-mingw-w64.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX\n#   Build compiler-rt\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX\n#   Build mingw-w64's extra libraries\nCOPY build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX\n#   Build C test applications\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$PATH\"\nCOPY test/*.c test/*.h ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello hello-tls crt-test setjmp; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1 ; done ;for test in autoimport-lib; do $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1 ; done ;for test in autoimport-main; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1 ; done ; done\n#   Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX\n#   Build C++ test applications\nCOPY test/*.cpp ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced; do $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1 ; done ;for test in tlstest-lib; do $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1 ; done ; done\n#   Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so\n#   we need to build this after libcxx.\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers\n#   Sanitizers on windows only support x86.\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do case $arch in (i686|x86_64) ;;(*) continue ;; esac \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1 ; done ;for test in ubsan; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined || exit 1 ; done ; done\n#   Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1 ; done ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1 ; done\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nRUN apt-get update -qq \\\n && apt-get install git wget bzip2 file unzip libtool pkg-config cmake build-essential automake yasm gettext autopoint vim python git-svn ninja-build subversion -qqy \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.name \"LLVM MinGW\" \\\n && git config --global user.email root@localhost\nWORKDIR /build\nENV TOOLCHAIN_PREFIX=\"/opt/llvm-mingw\"\nARG FULL_LLVM\n#  Build LLVM\nCOPY build-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX\n#  Strip the LLVM install output immediately. (This doesn't reduce the\n#  total docker image size as long as it is in a separate RUN layer though,\n#  but reduces build times if tweaking the contents of strip-llvm.sh.)\n#  Most of the size of the docker image comes from the build directory that\n#  we keep in any case.\nCOPY strip-llvm.sh ./\nRUN ./strip-llvm.sh $TOOLCHAIN_PREFIX\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n#  Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX\n#  Build MinGW-w64\nCOPY build-mingw-w64.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX\n#  Build compiler-rt\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX\n#  Build mingw-w64's extra libraries\nCOPY build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX\n#  Build C test applications\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$PATH\"\nCOPY test/*.c test/*.h ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello hello-tls crt-test setjmp; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1 ; done ;for test in autoimport-lib; do $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1 ; done ;for test in autoimport-main; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1 ; done ; done\n#  Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX\n#  Build C++ test applications\nCOPY test/*.cpp ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced; do $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1 ; done ;for test in tlstest-lib; do $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1 ; done ; done\n#  Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so\n#  we need to build this after libcxx.\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers\n#  Sanitizers on windows only support x86.\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do case $arch in (i686|x86_64) ;;(*) continue ;; esac \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1 ; done ;for test in ubsan; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined || exit 1 ; done ; done\n#  Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1 ; done ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1 ; done\n","injectedSmells":[],"originalDockerfileHash":"fb2b08a4c3b3e78445c8951973eb5002","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nRUN apt-get update -qq \\\n && apt-get install git wget bzip2 file unzip libtool pkg-config cmake build-essential automake yasm gettext autopoint vim python git-svn ninja-build subversion -qqy \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN git config --global user.name \"LLVM MinGW\" \\\n && git config --global user.email root@localhost\nWORKDIR /build\nENV TOOLCHAIN_PREFIX=\"/opt/llvm-mingw\"\nARG FULL_LLVM\n#   Build LLVM\nCOPY build-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX\n#   Strip the LLVM install output immediately. (This doesn't reduce the\n#   total docker image size as long as it is in a separate RUN layer though,\n#   but reduces build times if tweaking the contents of strip-llvm.sh.)\n#   Most of the size of the docker image comes from the build directory that\n#   we keep in any case.\nCOPY strip-llvm.sh ./\nRUN ./strip-llvm.sh $TOOLCHAIN_PREFIX\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n#   Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX\n#   Build MinGW-w64\nCOPY build-mingw-w64.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX\n#   Build compiler-rt\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX\n#   Build mingw-w64's extra libraries\nCOPY build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX\n#   Build C test applications\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$PATH\"\nCOPY test/*.c test/*.h ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello hello-tls crt-test setjmp; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1 ; done ;for test in autoimport-lib; do $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1 ; done ;for test in autoimport-main; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1 ; done ; done\n#   Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX\n#   Build C++ test applications\nCOPY test/*.cpp ./test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced; do $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1 ; done ;for test in tlstest-lib; do $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1 ; done ; done\n#   Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so\n#   we need to build this after libcxx.\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers\n#   Sanitizers on windows only support x86.\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do case $arch in (i686|x86_64) ;;(*) continue ;; esac \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1 ; done ;for test in ubsan; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined || exit 1 ; done ; done\n#   Build libssp\nCOPY build-libssp.sh libssp-Makefile ./\nRUN ./build-libssp.sh $TOOLCHAIN_PREFIX\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir -p $arch \\\n && for test in stacksmash; do $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1 ; done ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1 ; done\n","originalDockerfileUglifiedHash":"60755df1fa3a5c20ffe0a2722ef4400f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a2c1965641d0f2dc955f5d58d2893c34308d55c1.dockerfile"}