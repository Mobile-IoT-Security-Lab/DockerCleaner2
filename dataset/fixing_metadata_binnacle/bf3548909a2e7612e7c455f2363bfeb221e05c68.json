{"seed":1155574700,"processedDockerfileHash":"f2ce1d2fdd6d46e9a2405fcb7dd54d81","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 The Kubernetes Authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   kind cluster base image, built on ubuntu:18.04\n#\n#   To this we add systemd, CNI, and other tools needed to run Kubeadm\n#\n#   For systemd + docker configuration used below, see the following references:\n#   https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\n#   https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\n#   https://developers.redhat.com/blog/2016/09/13/running-systemd-in-a-non-privileged-container/\nARG BASE_IMAGE=\"ubuntu:18.04\"\nFROM ${BASE_IMAGE}\n#   setting DEBIAN_FRONTEND=noninteractive stops some apt warnings, this is not \n#   a real argument, we're (ab)using ARG to get a temporary ENV again.\nARG DEBIAN_FRONTEND=noninteractive\nCOPY clean-install /usr/local/bin/clean-install\nRUN chmod +x /usr/local/bin/clean-install\n#   Get dependencies\n#   The base image already has: ssh, apt, snapd\n#   This is broken down into (each on a line):\n#   - packages necessary for installing docker\n#   - packages needed to run services (systemd)\n#   - packages needed for docker / hyperkube / kubernetes components\n#   - misc packages (utilities we use in our own tooling)\n#   Then we cleanup (removing unwanted systemd services)\n#   Finally we disable kmsg in journald\n#   https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\nRUN clean-install apt-transport-https ca-certificates curl software-properties-common gnupg2 lsb-release systemd systemd-sysv libsystemd0 conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod aufs-tools bash rsync \\\n && find /lib/systemd/system/sysinit.target.wants/ -name \"systemd-tmpfiles-setup.service\" -delete \\\n && rm -f /lib/systemd/system/multi-user.target.wants/* \\\n && rm -f /etc/systemd/system/*.wants/* \\\n && rm -f /lib/systemd/system/local-fs.target.wants/* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \\\n && rm -f /lib/systemd/system/basic.target.wants/* \\\n && echo \"ReadKMsg=no\" >> /etc/systemd/journald.conf\n#   Install docker, which needs to happen after we install some of the packages above\n#   based on https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository\n#   and https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-docker\n#   - get docker's GPG key\n#   - add the fingerprint\n#   - add the repository\n#   - update apt, install docker, cleanup\n#   NOTE: 18.06 is officially supported by Kubernetes currently, so we pin to that.\n#   https://kubernetes.io/docs/tasks/tools/install-kubeadm/\nARG DOCKER_VERSION=\"18.06.*\"\n#   another temporary env, not a real argument. setting this to a non-zero value\n#   silences this warning from apt-key:\n#   \"Warning: apt-key output should not be parsed (stdout is not a terminal)\"\nARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=\"false\"\nRUN curl -fsSL \"https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;)/gpg\" | apt-key add - \\\n && apt-key fingerprint 0EBFCD88 \\\n && add-apt-repository \"deb https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;) $( lsb_release -cs ;) stable\" \\\n && clean-install \"docker-ce=${DOCKER_VERSION}\"\n#   Install CNI binaries to /opt/cni/bin\n#   TODO(bentheelder): doc why / what here\nARG CNI_VERSION=\"0.7.5\"\nARG CNI_BASE_URL=\"https://storage.googleapis.com/kubernetes-release/network-plugins/\"\nRUN export ARCH=$( dpkg --print-architecture ;) \\\n && export CNI_TARBALL=\"cni-plugins-${ARCH}-v${CNI_VERSION}.tgz\" \\\n && export CNI_URL=\"${CNI_BASE_URL}${CNI_TARBALL}\" \\\n && curl -sSL --retry 5 --output /tmp/cni.tgz \"${CNI_URL}\" \\\n && sha256sum /tmp/cni.tgz \\\n && mkdir -p /opt/cni/bin \\\n && tar -C /opt/cni/bin -xzf /tmp/cni.tgz \\\n && rm -rf /tmp/cni.tgz\n#   tell systemd that it is in docker (it will check for the container env)\n#   https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\nENV container=\"docker\"\n#   systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)\n#   https://bugzilla.redhat.com/show_bug.cgi?id=1201657\nSTOPSIGNAL SIGRTMIN+3\n#   wrap systemd with our special entrypoint, see pkg/build for how this is built\n#   basically this just lets us set up some things before continuing on to systemd\n#   while preserving that systemd is PID1\n#   for how we leverage this, see pkg/cluster\nCOPY entrypoint/entrypoint /usr/local/bin/\n#   We need systemd to be PID1 to run the various services (docker, kubelet, etc.)\n#   NOTE: this is *only* for documentation, the entrypoint is overridden at runtime\nENTRYPOINT [\"/usr/local/bin/entrypoint\", \"/sbin/init\"]\n#   the docker graph must be a volume to avoid overlay on overlay\n#   NOTE: we do this last because changing a volume with a Dockerfile must\n#   occur before defining it.\n#   See: https://docs.docker.com/engine/reference/builder/#volume\nVOLUME [ \"/var/lib/docker\" ]\n#   TODO(bentheelder): deal with systemd MAC address assignment\n#   https://github.com/systemd/systemd/issues/3374#issuecomment-288882355\n#   https://github.com/systemd/systemd/issues/3374#issuecomment-339258483\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 The Kubernetes Authors.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  kind cluster base image, built on ubuntu:18.04\n#\n#  To this we add systemd, CNI, and other tools needed to run Kubeadm\n#\n#  For systemd + docker configuration used below, see the following references:\n#  https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\n#  https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\n#  https://developers.redhat.com/blog/2016/09/13/running-systemd-in-a-non-privileged-container/\nARG BASE_IMAGE=\"ubuntu:18.04\"\nFROM ${BASE_IMAGE}\n#  setting DEBIAN_FRONTEND=noninteractive stops some apt warnings, this is not \n#  a real argument, we're (ab)using ARG to get a temporary ENV again.\nARG DEBIAN_FRONTEND=noninteractive\nCOPY clean-install /usr/local/bin/clean-install\nRUN chmod +x /usr/local/bin/clean-install\n#  Get dependencies\n#  The base image already has: ssh, apt, snapd\n#  This is broken down into (each on a line):\n#  - packages necessary for installing docker\n#  - packages needed to run services (systemd)\n#  - packages needed for docker / hyperkube / kubernetes components\n#  - misc packages (utilities we use in our own tooling)\n#  Then we cleanup (removing unwanted systemd services)\n#  Finally we disable kmsg in journald\n#  https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\nRUN clean-install apt-transport-https ca-certificates curl software-properties-common gnupg2 lsb-release systemd systemd-sysv libsystemd0 conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod aufs-tools bash rsync \\\n && find /lib/systemd/system/sysinit.target.wants/ -name \"systemd-tmpfiles-setup.service\" -delete \\\n && rm -f /lib/systemd/system/multi-user.target.wants/* \\\n && rm -f /etc/systemd/system/*.wants/* \\\n && rm -f /lib/systemd/system/local-fs.target.wants/* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \\\n && rm -f /lib/systemd/system/basic.target.wants/* \\\n && echo \"ReadKMsg=no\" >> /etc/systemd/journald.conf\n#  Install docker, which needs to happen after we install some of the packages above\n#  based on https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository\n#  and https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-docker\n#  - get docker's GPG key\n#  - add the fingerprint\n#  - add the repository\n#  - update apt, install docker, cleanup\n#  NOTE: 18.06 is officially supported by Kubernetes currently, so we pin to that.\n#  https://kubernetes.io/docs/tasks/tools/install-kubeadm/\nARG DOCKER_VERSION=\"18.06.*\"\n#  another temporary env, not a real argument. setting this to a non-zero value\n#  silences this warning from apt-key:\n#  \"Warning: apt-key output should not be parsed (stdout is not a terminal)\"\nARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=\"false\"\nRUN curl -fsSL \"https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;)/gpg\" | apt-key add - \\\n && apt-key fingerprint 0EBFCD88 \\\n && add-apt-repository \"deb https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;) $( lsb_release -cs ;) stable\" \\\n && clean-install \"docker-ce=${DOCKER_VERSION}\"\n#  Install CNI binaries to /opt/cni/bin\n#  TODO(bentheelder): doc why / what here\nARG CNI_VERSION=\"0.7.5\"\nARG CNI_BASE_URL=\"https://storage.googleapis.com/kubernetes-release/network-plugins/\"\nRUN export ARCH=$( dpkg --print-architecture ;) \\\n && export CNI_TARBALL=\"cni-plugins-${ARCH}-v${CNI_VERSION}.tgz\" \\\n && export CNI_URL=\"${CNI_BASE_URL}${CNI_TARBALL}\" \\\n && curl -sSL --retry 5 --output /tmp/cni.tgz \"${CNI_URL}\" \\\n && sha256sum /tmp/cni.tgz \\\n && mkdir -p /opt/cni/bin \\\n && tar -C /opt/cni/bin -xzf /tmp/cni.tgz \\\n && rm -rf /tmp/cni.tgz\n#  tell systemd that it is in docker (it will check for the container env)\n#  https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\nENV container=\"docker\"\n#  systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)\n#  https://bugzilla.redhat.com/show_bug.cgi?id=1201657\nSTOPSIGNAL SIGRTMIN+3\n#  wrap systemd with our special entrypoint, see pkg/build for how this is built\n#  basically this just lets us set up some things before continuing on to systemd\n#  while preserving that systemd is PID1\n#  for how we leverage this, see pkg/cluster\nCOPY entrypoint/entrypoint /usr/local/bin/\n#  We need systemd to be PID1 to run the various services (docker, kubelet, etc.)\n#  NOTE: this is *only* for documentation, the entrypoint is overridden at runtime\nENTRYPOINT [\"/usr/local/bin/entrypoint\", \"/sbin/init\"]\n#  the docker graph must be a volume to avoid overlay on overlay\n#  NOTE: we do this last because changing a volume with a Dockerfile must\n#  occur before defining it.\n#  See: https://docs.docker.com/engine/reference/builder/#volume\nVOLUME [ \"/var/lib/docker\" ]\n#  TODO(bentheelder): deal with systemd MAC address assignment\n#  https://github.com/systemd/systemd/issues/3374#issuecomment-288882355\n#  https://github.com/systemd/systemd/issues/3374#issuecomment-339258483\n","injectedSmells":[],"originalDockerfileHash":"6f646e92cdeaeee5fc64b19d44e0abac","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 The Kubernetes Authors.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   kind cluster base image, built on ubuntu:18.04\n#\n#   To this we add systemd, CNI, and other tools needed to run Kubeadm\n#\n#   For systemd + docker configuration used below, see the following references:\n#   https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\n#   https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\n#   https://developers.redhat.com/blog/2016/09/13/running-systemd-in-a-non-privileged-container/\nARG BASE_IMAGE=\"ubuntu:18.04\"\nFROM ${BASE_IMAGE}\n#   setting DEBIAN_FRONTEND=noninteractive stops some apt warnings, this is not \n#   a real argument, we're (ab)using ARG to get a temporary ENV again.\nARG DEBIAN_FRONTEND=noninteractive\nCOPY clean-install /usr/local/bin/clean-install\nRUN chmod +x /usr/local/bin/clean-install\n#   Get dependencies\n#   The base image already has: ssh, apt, snapd\n#   This is broken down into (each on a line):\n#   - packages necessary for installing docker\n#   - packages needed to run services (systemd)\n#   - packages needed for docker / hyperkube / kubernetes components\n#   - misc packages (utilities we use in our own tooling)\n#   Then we cleanup (removing unwanted systemd services)\n#   Finally we disable kmsg in journald\n#   https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/\nRUN clean-install apt-transport-https ca-certificates curl software-properties-common gnupg2 lsb-release systemd systemd-sysv libsystemd0 conntrack iptables iproute2 ethtool socat util-linux mount ebtables udev kmod aufs-tools bash rsync \\\n && find /lib/systemd/system/sysinit.target.wants/ -name \"systemd-tmpfiles-setup.service\" -delete \\\n && rm -f /lib/systemd/system/multi-user.target.wants/* \\\n && rm -f /etc/systemd/system/*.wants/* \\\n && rm -f /lib/systemd/system/local-fs.target.wants/* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*udev* \\\n && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \\\n && rm -f /lib/systemd/system/basic.target.wants/* \\\n && echo \"ReadKMsg=no\" >> /etc/systemd/journald.conf\n#   Install docker, which needs to happen after we install some of the packages above\n#   based on https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository\n#   and https://kubernetes.io/docs/setup/independent/install-kubeadm/#installing-docker\n#   - get docker's GPG key\n#   - add the fingerprint\n#   - add the repository\n#   - update apt, install docker, cleanup\n#   NOTE: 18.06 is officially supported by Kubernetes currently, so we pin to that.\n#   https://kubernetes.io/docs/tasks/tools/install-kubeadm/\nARG DOCKER_VERSION=\"18.06.*\"\n#   another temporary env, not a real argument. setting this to a non-zero value\n#   silences this warning from apt-key:\n#   \"Warning: apt-key output should not be parsed (stdout is not a terminal)\"\nARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=\"false\"\nRUN curl -fsSL \"https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;)/gpg\" | apt-key add - \\\n && apt-key fingerprint 0EBFCD88 \\\n && add-apt-repository \"deb https://download.docker.com/linux/$( . /etc/os-release ;echo \"$ID\" ;) $( lsb_release -cs ;) stable\" \\\n && clean-install \"docker-ce=${DOCKER_VERSION}\"\n#   Install CNI binaries to /opt/cni/bin\n#   TODO(bentheelder): doc why / what here\nARG CNI_VERSION=\"0.7.5\"\nARG CNI_BASE_URL=\"https://storage.googleapis.com/kubernetes-release/network-plugins/\"\nRUN export ARCH=$( dpkg --print-architecture ;) \\\n && export CNI_TARBALL=\"cni-plugins-${ARCH}-v${CNI_VERSION}.tgz\" \\\n && export CNI_URL=\"${CNI_BASE_URL}${CNI_TARBALL}\" \\\n && curl -sSL --retry 5 --output /tmp/cni.tgz \"${CNI_URL}\" \\\n && sha256sum /tmp/cni.tgz \\\n && mkdir -p /opt/cni/bin \\\n && tar -C /opt/cni/bin -xzf /tmp/cni.tgz \\\n && rm -rf /tmp/cni.tgz\n#   tell systemd that it is in docker (it will check for the container env)\n#   https://www.freedesktop.org/wiki/Software/systemd/ContainerInterface/\nENV container=\"docker\"\n#   systemd exits on SIGRTMIN+3, not SIGTERM (which re-executes it)\n#   https://bugzilla.redhat.com/show_bug.cgi?id=1201657\nSTOPSIGNAL SIGRTMIN+3\n#   wrap systemd with our special entrypoint, see pkg/build for how this is built\n#   basically this just lets us set up some things before continuing on to systemd\n#   while preserving that systemd is PID1\n#   for how we leverage this, see pkg/cluster\nCOPY entrypoint/entrypoint /usr/local/bin/\n#   We need systemd to be PID1 to run the various services (docker, kubelet, etc.)\n#   NOTE: this is *only* for documentation, the entrypoint is overridden at runtime\nENTRYPOINT [\"/usr/local/bin/entrypoint\", \"/sbin/init\"]\n#   the docker graph must be a volume to avoid overlay on overlay\n#   NOTE: we do this last because changing a volume with a Dockerfile must\n#   occur before defining it.\n#   See: https://docs.docker.com/engine/reference/builder/#volume\nVOLUME [ \"/var/lib/docker\" ]\n#   TODO(bentheelder): deal with systemd MAC address assignment\n#   https://github.com/systemd/systemd/issues/3374#issuecomment-288882355\n#   https://github.com/systemd/systemd/issues/3374#issuecomment-339258483\n","originalDockerfileUglifiedHash":"af28118ae04ea1905bba092ab1847c63","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bf3548909a2e7612e7c455f2363bfeb221e05c68.dockerfile"}