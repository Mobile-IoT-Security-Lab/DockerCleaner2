{"seed":1533616843,"processedDockerfileHash":"95a7dedef203aebecb6d320eb0f993ad","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/Laradock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   Laradock non-root user:\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock -G docker_env \\\n && usermod -p \"*\" laradock\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_NODE=false\n#     - ...\n#\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   User Aliases\n#  ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/laradock/aliases.sh \\\n && chown laradock:laradock /home/laradock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Crontab\n#  ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get install --no-install-recommends libxml2-dev php${PHP_VERSION}-soap -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install --no-install-recommends libldap2-dev -y \\\n && apt-get install --no-install-recommends php${PHP_VERSION}-ldap -y ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install --no-install-recommends php${PHP_VERSION}-imap -y ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends php${PHP_VERSION}-xdebug -y --force-yes \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ##########################################################################\n#   ssh:\n#  ##########################################################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/laradock \\\n && chown -R laradock:laradock /home/laradock/.ssh ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl -q install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install --no-install-recommends librabbitmq-dev -y \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl -q install swoole \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && npm install gulp@4.0.2 bower@1.8.14 vue-cli@2.9.6 -g \\\n && ln -s `npm bin --global ` /home/laradock/.node-bin ; fi\nRUN\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add PATH for node\nENV PATH=\"$PATH:/home/laradock/.node-bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   YARN:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_YARN=false\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PHP V8JS:\n#  ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n#  ##########################################################################\n#   Laravel Envoy:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ##########################################################################\n#   Laravel Installer:\n#  ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n#  ##########################################################################\n#   Deployer:\n#  ######################################X####################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  ##########################################################################\n#   Prestissimo:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n#  ##########################################################################\n#   Linuxbrew:\n#  ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install --no-install-recommends build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install --no-install-recommends jpegoptim optipng pngquant gifsicle -y --force-yes \\\n && if [ ${INSTALL_NODE} = true ] ; then . ~/.bashrc \\\n && npm install svgo@3.0.2 -g ; fi ; fi\nUSER laradock\n#  ##########################################################################\n#   Symfony:\n#  ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PYTHON:\n#  ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then apt-get install --no-install-recommends python python-pip python-dev build-essential -y \\\n && pip install pip==23.1 --upgrade \\\n && pip install virtualenv==20.21.0 --upgrade ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends imagemagick php-imagick -y --force-yes ; fi\n#  ##########################################################################\n#   Terraform:\n#  ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then apt-get install --no-install-recommends sudo wget unzip -y \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get install --no-install-recommends postgresql-client -y ; fi\n#  ##########################################################################\n#   Dusk Dependencies:\n#  ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then apt-get install --no-install-recommends zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && apt-get install --no-install-recommends -y -f \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#  ##########################################################################\n#   Install PHP-CS-Fixer\n#  #########################################################################\nRUN curl -L https://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o php-cs-fixer \\\n && chmod a+x php-cs-fixer \\\n && mv php-cs-fixer /usr/local/bin/php-cs-fixer\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#   Set default work directory\nWORKDIR /var/www\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\n#  To edit the 'workspace' base Image, visit its repository on Github\n#     https://github.com/Laradock/workspace\n#\n#  To change its version, see the available Tags on the Docker Hub:\n#     https://hub.docker.com/r/laradock/workspace/tags/\n#\n#  Note: Base Image name format {image-tag}-{php-version}\n#\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\n#  Start as root\nUSER root\n# ##########################################################################\n#  Laradock non-root user:\n# ##########################################################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock -G docker_env \\\n && usermod -p \"*\" laradock\n#\n# --------------------------------------------------------------------------\n#  Mandatory Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Mandatory Software's such as (\"php-cli\", \"git\", \"vim\", ....) are\n#  installed on the base image 'laradock/workspace' image. If you want\n#  to add more Software's or remove existing one, you need to edit the\n#  base image (https://github.com/Laradock/workspace).\n#\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#  Example:\n#    - INSTALL_NODE=false\n#    - ...\n#\n# ##########################################################################\n#  Set Timezone\n# ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n# ##########################################################################\n#  User Aliases\n# ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/laradock/aliases.sh \\\n && chown laradock:laradock /home/laradock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n# ##########################################################################\n#  Composer:\n# ##########################################################################\nUSER root\n#  Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#  Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#  Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  Non-root user : PHPUnit path\n# ##########################################################################\n#  add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  Crontab\n# ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n# ##########################################################################\n#  SOAP:\n# ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n# ##########################################################################\n#  LDAP:\n# ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && apt-get install php${PHP_VERSION}-ldap -y ; fi\n# ##########################################################################\n#  IMAP:\n# ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install php${PHP_VERSION}-imap -y ; fi\n# ##########################################################################\n#  xDebug:\n# ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install php${PHP_VERSION}-xdebug -y --force-yes \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n# ##########################################################################\n#  ssh:\n# ##########################################################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/laradock \\\n && chown -R laradock:laradock /home/laradock/.ssh ; fi\n# ##########################################################################\n#  MongoDB:\n# ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl -q install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n# ##########################################################################\n#  AMQP:\n# ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n# ##########################################################################\n#  PHP REDIS EXTENSION\n# ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl -q install swoole \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n# ##########################################################################\n#  Node / NVM:\n# ##########################################################################\n#  Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && npm install gulp bower vue-cli -g \\\n && ln -s `npm bin --global ` /home/laradock/.node-bin ; fi\nRUN if [ ${INSTALL_NODE} = true ] ; then find $NVM_DIR -type f -name node -exec ln -s {} /usr/local/bin/node ; \\\n && NODE_MODS_DIR=\"$NVM_DIR/versions/node/$( node -v ;)/lib/node_modules\" \\\n && ln -s $NODE_MODS_DIR/bower/bin/bower /usr/local/bin/bower \\\n && ln -s $NODE_MODS_DIR/gulp/bin/gulp.js /usr/local/bin/gulp \\\n && ln -s $NODE_MODS_DIR/npm/bin/npm-cli.js /usr/local/bin/npm \\\n && ln -s $NODE_MODS_DIR/npm/bin/npx-cli.js /usr/local/bin/npx \\\n && ln -s $NODE_MODS_DIR/vue-cli/bin/vue /usr/local/bin/vue \\\n && ln -s $NODE_MODS_DIR/vue-cli/bin/vue-init /usr/local/bin/vue-init \\\n && ln -s $NODE_MODS_DIR/vue-cli/bin/vue-list /usr/local/bin/vue-list ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  Add PATH for node\nENV PATH=\"$PATH:/home/laradock/.node-bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n# ##########################################################################\n#  YARN:\n# ##########################################################################\nUSER laradock\nARG INSTALL_YARN=false\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#  Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n# ##########################################################################\n#  PHP V8JS:\n# ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && apt-get install php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n# ##########################################################################\n#  Laravel Envoy:\n# ##########################################################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n# ##########################################################################\n#  Laravel Installer:\n# ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n# ##########################################################################\n#  Deployer:\n# ######################################X####################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n# ##########################################################################\n#  Prestissimo:\n# ##########################################################################\nUSER laradock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n# ##########################################################################\n#  Linuxbrew:\n# ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n# ##########################################################################\n#  Image optimizers:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y --force-yes \\\n && if [ ${INSTALL_NODE} = true ] ; then . ~/.bashrc \\\n && npm install svgo -g ; fi ; fi\nUSER laradock\n# ##########################################################################\n#  Symfony:\n# ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n# ##########################################################################\n#  PYTHON:\n# ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then apt-get install python python-pip python-dev build-essential -y \\\n && pip install pip --upgrade \\\n && pip install virtualenv --upgrade ; fi\n# ##########################################################################\n#  ImageMagick:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update \\\n && apt-get install imagemagick php-imagick -y --force-yes ; fi\n# ##########################################################################\n#  Terraform:\n# ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then apt-get install sudo wget unzip -y \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n# ##########################################################################\n#  pgsql client\n# ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get install postgresql-client -y ; fi\n# ##########################################################################\n#  Dusk Dependencies:\n# ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then apt-get install zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && apt-get install -y -f \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n# ##########################################################################\n#  Check PHP version:\n# ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n# ##########################################################################\n#  Install PHP-CS-Fixer\n# #########################################################################\nRUN curl -L https://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o php-cs-fixer \\\n && chmod a+x php-cs-fixer \\\n && mv php-cs-fixer /usr/local/bin/php-cs-fixer\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nUSER root\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#  Set default work directory\nWORKDIR /var/www\n","injectedSmells":[],"originalDockerfileHash":"0375d763aa61cd4782a01ad65b6922cb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/Laradock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nARG PHP_VERSION=${PHP_VERSION}\nFROM laradock/workspace:2.2-${PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   Laradock non-root user:\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock -G docker_env \\\n && usermod -p \"*\" laradock\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_NODE=false\n#     - ...\n#\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   User Aliases\n#  ##########################################################################\nUSER root\nCOPY ./aliases.sh /root/aliases.sh\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN sed -i 's/\\r//' /root/aliases.sh \\\n && sed -i 's/\\r//' /home/laradock/aliases.sh \\\n && chown laradock:laradock /home/laradock/aliases.sh \\\n && echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source ~/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ##########################################################################\n#   Composer:\n#  ##########################################################################\nUSER root\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Non-root user : PHPUnit path\n#  ##########################################################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   Crontab\n#  ##########################################################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nUSER root\nARG INSTALL_SOAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get install libxml2-dev php${PHP_VERSION}-soap -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && apt-get install php${PHP_VERSION}-ldap -y ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install php${PHP_VERSION}-imap -y ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nUSER root\nARG INSTALL_XDEBUG=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install php${PHP_VERSION}-xdebug -y --force-yes \\\n && sed -i 's/^;//g' /etc/php/${PHP_VERSION}/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/${PHP_VERSION}/cli/conf.d/xdebug.ini\n#  ##########################################################################\n#   ssh:\n#  ##########################################################################\nARG INSTALL_WORKSPACE_SSH=false\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa \\\n && cp -rf /root/.ssh /home/laradock \\\n && chown -R laradock:laradock /home/laradock/.ssh ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl -q install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/${PHP_VERSION}/mods-available/mongodb.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/mongodb.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-mongodb.ini ; fi\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get install librabbitmq-dev -y \\\n && pecl -q install amqp \\\n && echo \"extension=amqp.so\" >> /etc/php/${PHP_VERSION}/mods-available/amqp.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/amqp.ini /etc/php/${PHP_VERSION}/cli/conf.d/30-amqp.ini ; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl -q install -o -f redis \\\n && echo \"extension=redis.so\" >> /etc/php/${PHP_VERSION}/mods-available/redis.ini \\\n && phpenmod redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl -q install swoole \\\n && echo \"extension=swoole.so\" >> /etc/php/${PHP_VERSION}/mods-available/swoole.ini \\\n && ln -s /etc/php/${PHP_VERSION}/mods-available/swoole.ini /etc/php/${PHP_VERSION}/cli/conf.d/20-swoole.ini ; fi\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi \\\n && npm install gulp bower vue-cli -g \\\n && ln -s `npm bin --global ` /home/laradock/.node-bin ; fi\nRUN\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add PATH for node\nENV PATH=\"$PATH:/home/laradock/.node-bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   YARN:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_YARN=false\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PHP V8JS:\n#  ##########################################################################\nUSER root\nARG INSTALL_V8JS=false\nARG PHP_VERSION=${PHP_VERSION}\nRUN if [ ${INSTALL_V8JS} = true ] ; then add-apt-repository -y ppa:pinepain/libv8-archived \\\n && apt-get update -yqq \\\n && apt-get install php-pear libv8-5.4 php${PHP_VERSION}-xml php${PHP_VERSION}-dev -y \\\n && pecl install v8js \\\n && echo \"extension=v8js.so\" >> /etc/php/${PHP_VERSION}/cli/php.ini; fi\n#  ##########################################################################\n#   Laravel Envoy:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=false\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ##########################################################################\n#   Laravel Installer:\n#  ##########################################################################\nUSER root\nARG COMPOSER_REPO_PACKAGIST\nENV COMPOSER_REPO_PACKAGIST=\"${COMPOSER_REPO_PACKAGIST}\"\nRUN if [ ${COMPOSER_REPO_PACKAGIST} ] ; then composer config -g repo.packagist composer ${COMPOSER_REPO_PACKAGIST} ; fi\nARG INSTALL_LARAVEL_INSTALLER=false\nRUN if [ ${INSTALL_LARAVEL_INSTALLER} = true ] ; then composer global require \"laravel/installer\" ; fi\n#  ##########################################################################\n#   Deployer:\n#  ######################################X####################################\nUSER root\nARG INSTALL_DEPLOYER=false\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then curl -LO https://deployer.org/deployer.phar \\\n && mv deployer.phar /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep ; fi\n#  ##########################################################################\n#   Prestissimo:\n#  ##########################################################################\nUSER laradock\nARG INSTALL_PRESTISSIMO=false\nRUN if [ ${INSTALL_PRESTISSIMO} = true ] ; then composer global require \"hirak/prestissimo\" ; fi\n#  ##########################################################################\n#   Linuxbrew:\n#  ##########################################################################\nUSER root\nARG INSTALL_LINUXBREW=false\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y --force-yes \\\n && if [ ${INSTALL_NODE} = true ] ; then . ~/.bashrc \\\n && npm install svgo -g ; fi ; fi\nUSER laradock\n#  ##########################################################################\n#   Symfony:\n#  ##########################################################################\nUSER root\nARG INSTALL_SYMFONY=false\nRUN if [ ${INSTALL_SYMFONY} = true ] ; then mkdir -p /usr/local/bin \\\n && curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony \\\n && chmod a+x /usr/local/bin/symfony \\\n && echo 'alias dev=\"php bin/console -e=dev\"' >> ~/.bashrc \\\n && echo 'alias prod=\"php bin/console -e=prod\"' >> ~/.bashrc; fi\n#  ##########################################################################\n#   PYTHON:\n#  ##########################################################################\nARG INSTALL_PYTHON=false\nRUN if [ ${INSTALL_PYTHON} = true ] ; then apt-get install python python-pip python-dev build-essential -y \\\n && pip install pip --upgrade \\\n && pip install virtualenv --upgrade ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update \\\n && apt-get install imagemagick php-imagick -y --force-yes ; fi\n#  ##########################################################################\n#   Terraform:\n#  ##########################################################################\nUSER root\nARG INSTALL_TERRAFORM=false\nRUN if [ ${INSTALL_TERRAFORM} = true ] ; then apt-get install sudo wget unzip -y \\\n && wget https://releases.hashicorp.com/terraform/0.10.6/terraform_0.10.6_linux_amd64.zip \\\n && unzip terraform_0.10.6_linux_amd64.zip \\\n && mv terraform /usr/local/bin \\\n && rm terraform_0.10.6_linux_amd64.zip ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nUSER root\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get install postgresql-client -y ; fi\n#  ##########################################################################\n#   Dusk Dependencies:\n#  ##########################################################################\nUSER root\nARG CHROME_DRIVER_VERSION=stable\nENV CHROME_DRIVER_VERSION=\"${CHROME_DRIVER_VERSION}\"\nARG INSTALL_DUSK_DEPS=false\nRUN if [ ${INSTALL_DUSK_DEPS} = true ] ; then apt-get install zip wget unzip xdg-utils libxpm4 libxrender1 libgtk2.0-0 libnss3 libgconf-2-4 xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable x11-apps -y \\\n && wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && apt-get install -y -f \\\n && dpkg -i --force-depends google-chrome-stable_current_amd64.deb \\\n && rm google-chrome-stable_current_amd64.deb \\\n && wget https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \\\n && unzip chromedriver_linux64.zip \\\n && mv chromedriver /usr/local/bin/ \\\n && rm chromedriver_linux64.zip ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nARG PHP_VERSION=${PHP_VERSION}\nRUN php -v | head -n 1 | grep -q \"PHP ${PHP_VERSION}.\"\n#  ##########################################################################\n#   Install PHP-CS-Fixer\n#  #########################################################################\nRUN curl -L https://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o php-cs-fixer \\\n && chmod a+x php-cs-fixer \\\n && mv php-cs-fixer /usr/local/bin/php-cs-fixer\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\n#   Set default work directory\nWORKDIR /var/www\n","originalDockerfileUglifiedHash":"2b5bdd0287e190aeb7cf683075e85a36","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/00c70ca78e47fe19514e8909c71aa1f5a91d0f11.dockerfile"}