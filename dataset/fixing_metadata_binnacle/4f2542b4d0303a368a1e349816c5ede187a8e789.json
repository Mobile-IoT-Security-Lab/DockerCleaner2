{"seed":1402385462,"processedDockerfileHash":"ef8198c2e850c61f7c676b117a78d9f3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","pin-package-manager-versions-apk","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   this is the dev container and doesn't contain CRON or composer\n#   it maps the PWD straight through\n#   Multi-stage build\n#   Stage 0\n#   Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nCOPY docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc=6.4.0-r9 musl-dev=1.1.19-r11 apache2-dev=2.4.43-r0 apache2=2.4.43-r0\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#   Stage 1\n#   Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction\n#   Stage 2\n#   Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#   Install webpack\nRUN npm install webpack@5.79.0 -g\n#   Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#   Install npm packages\nRUN npm install --only=prod\n#   Copy ui folder\nCOPY ./ui ./ui\n#   Build webpack\nRUN npm run build\n#   Stage 1\n#   Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#   Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar=1.32-r0 bash=4.4.19-r1 curl=7.61.1-r3 php7=7.2.26-r0 php7-apache2=7.2.26-r0 php7-zmq=1.1.3-r2 php7-json=7.2.26-r0 php7-gd=7.2.26-r0 php7-mcrypt=1.0.1-r0 php7-dom=7.2.26-r0 php7-pdo=7.2.26-r0 php7-zip=7.2.26-r0 php7-pdo_mysql=7.2.26-r0 php7-gettext=7.2.26-r0 php7-soap=7.2.26-r0 php7-iconv=7.2.26-r0 php7-curl=7.2.26-r0 php7-session=7.2.26-r0 php7-ctype=7.2.26-r0 php7-fileinfo=7.2.26-r0 php7-xml=7.2.26-r0 php7-simplexml=7.2.26-r0 php7-mbstring=7.2.26-r0 php7-memcached=3.0.4-r1 php7-zlib php7-mongodb=1.4.4-r0 mysql-client=10.2.32-r0 ssmtp=2.64-r13 apache2=2.4.43-r0 ca-certificates=20191127-r2 tzdata=2020a-r0 \\\n && rm -rf /var/cache/apk/*\n#   Add all necessary config files in one layer\nCOPY docker/ /\n#   Adjust file permissions as appropriate\nRUN chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && chmod 777 /tmp\n#   Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#   Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#   Set some environment variables\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV CMS_DEV_MODE=\"true\" \\\n    MYSQL_HOST=\"db\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_USER=\"root\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#   Expose port 80\nEXPOSE 80/tcp\n#   Map the source files into /var/www/cms\n#   Create library and cache, because they might not exist\n#   Create /var/www/backup so that we have somewhere for entrypoint to log errors.\nRUN mkdir -p /var/www/cms \\\n && mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/backup\n#   Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#   Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#   All other files (.dockerignore excludes things we don't want)\nCOPY . /var/www/cms\n#   Run entry\nCMD [\"/entrypoint.sh\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  this is the dev container and doesn't contain CRON or composer\n#  it maps the PWD straight through\n#  Multi-stage build\n#  Stage 0\n#  Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nADD docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc musl-dev apache2-dev apache2\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#  Stage 1\n#  Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction\n#  Stage 2\n#  Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#  Install webpack\nRUN npm install webpack -g\n#  Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#  Install npm packages\nRUN npm install --only=prod\n#  Copy ui folder\nCOPY ./ui ./ui\n#  Build webpack\nRUN npm run build\n#  Stage 1\n#  Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#  Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar bash curl php7 php7-apache2 php7-zmq php7-json php7-gd php7-mcrypt php7-dom php7-pdo php7-zip php7-pdo_mysql php7-gettext php7-soap php7-iconv php7-curl php7-session php7-ctype php7-fileinfo php7-xml php7-simplexml php7-mbstring php7-memcached php7-zlib php7-mongodb mysql-client ssmtp apache2 ca-certificates tzdata \\\n && rm -rf /var/cache/apk/*\n#  Add all necessary config files in one layer\nADD docker/ /\n#  Adjust file permissions as appropriate\nRUN chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && chmod 777 /tmp\n#  Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#  Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#  Set some environment variables\nENV CMS_DEV_MODE=\"true\" \\\n    MYSQL_HOST=\"db\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_USER=\"root\" \\\n    MYSQL_PASSWORD=\"root\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#  Expose port 80\nEXPOSE 80/tcp\n#  Map the source files into /var/www/cms\n#  Create library and cache, because they might not exist\n#  Create /var/www/backup so that we have somewhere for entrypoint to log errors.\nRUN mkdir -p /var/www/cms \\\n && mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/backup\n#  Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#  Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#  All other files (.dockerignore excludes things we don't want)\nCOPY . /var/www/cms\n#  Run entry\nCMD [\"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"f1493f5db285845163a34f3a5396b436","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   this is the dev container and doesn't contain CRON or composer\n#   it maps the PWD straight through\n#   Multi-stage build\n#   Stage 0\n#   Compile xsendfile apache module\nFROM alpine:3.8 AS sendfile\nADD docker/mod_xsendfile.c /mod_xsendfile.c\nRUN apk update \\\n && apk upgrade \\\n && apk add gcc musl-dev apache2-dev apache2\nRUN cd / \\\n && apxs -cia mod_xsendfile.c\n#   Stage 1\n#   Run composer\nFROM composer:1.6 AS composer\nCOPY ./composer.json /app\nCOPY ./composer.lock /app\nRUN composer install --no-interaction\n#   Stage 2\n#   Run webpack\nFROM node:latest AS webpack\nWORKDIR /app\n#   Install webpack\nRUN npm install webpack -g\n#   Copy package.json and the webpack config file\nCOPY webpack.config.js .\nCOPY package.json .\n#   Install npm packages\nRUN npm install --only=prod\n#   Copy ui folder\nCOPY ./ui ./ui\n#   Build webpack\nRUN npm run build\n#   Stage 1\n#   Build the CMS container\nFROM alpine:3.8\nMAINTAINER Xibo Signage <support@xibosignage.com>\n#   Install apache, PHP, and supplimentary programs.\nRUN apk update \\\n && apk upgrade \\\n && apk add tar bash curl php7 php7-apache2 php7-zmq php7-json php7-gd php7-mcrypt php7-dom php7-pdo php7-zip php7-pdo_mysql php7-gettext php7-soap php7-iconv php7-curl php7-session php7-ctype php7-fileinfo php7-xml php7-simplexml php7-mbstring php7-memcached php7-zlib php7-mongodb mysql-client ssmtp apache2 ca-certificates tzdata \\\n && rm -rf /var/cache/apk/*\n#   Add all necessary config files in one layer\nADD docker/ /\n#   Adjust file permissions as appropriate\nRUN chmod +x /entrypoint.sh /usr/local/bin/httpd-foreground /usr/local/bin/wait-for-command.sh /etc/periodic/15min/cms-db-backup \\\n && mkdir -p /run/apache2 \\\n && rm /etc/apache2/conf.d/info.conf \\\n && rm /etc/apache2/conf.d/userdir.conf \\\n && chmod 777 /tmp\n#   Add xsendfile Module\nCOPY --from=sendfile /usr/lib/apache2/mod_xsendfile.so /usr/lib/apache2/mod_xsendfile.so\n#   Update the PHP.ini file\nRUN sed -i \"s/error_reporting = .*$/error_reporting = E_ERROR | E_WARNING | E_PARSE/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_probability = .*$/session.gc_probability = 1/\" /etc/php7/php.ini \\\n && sed -i \"s/session.gc_divisor = .*$/session.gc_divisor = 100/\" /etc/php7/php.ini\n#   Set some environment variables\nENV CMS_DEV_MODE=\"true\" \\\n    MYSQL_HOST=\"db\" \\\n    MYSQL_PORT=\"3306\" \\\n    MYSQL_USER=\"root\" \\\n    MYSQL_PASSWORD=\"root\" \\\n    MYSQL_DATABASE=\"cms\" \\\n    CMS_SERVER_NAME=\"localhost\" \\\n    CMS_ALIAS=\"none\" \\\n    CMS_PHP_SESSION_GC_MAXLIFETIME=\"1440\" \\\n    CMS_PHP_POST_MAX_SIZE=\"2G\" \\\n    CMS_PHP_UPLOAD_MAX_FILESIZE=\"2G\" \\\n    CMS_PHP_MAX_EXECUTION_TIME=\"300\" \\\n    CMS_PHP_MEMORY_LIMIT=\"256M\" \\\n    CMS_APACHE_START_SERVERS=\"2\" \\\n    CMS_APACHE_MIN_SPARE_SERVERS=\"5\" \\\n    CMS_APACHE_MAX_SPARE_SERVERS=\"10\" \\\n    CMS_APACHE_MAX_REQUEST_WORKERS=\"60\" \\\n    CMS_APACHE_MAX_CONNECTIONS_PER_CHILD=\"300\"\n#   Expose port 80\nEXPOSE 80/tcp\n#   Map the source files into /var/www/cms\n#   Create library and cache, because they might not exist\n#   Create /var/www/backup so that we have somewhere for entrypoint to log errors.\nRUN mkdir -p /var/www/cms \\\n && mkdir -p /var/www/cms/library/temp \\\n && mkdir -p /var/www/cms/cache \\\n && mkdir -p /var/www/backup\n#   Composer generated vendor files\nCOPY --from=composer /app /var/www/cms\n#   Copy dist built webpack app folder to web\nCOPY --from=webpack /app/web/dist /var/www/cms/web/dist\n#   All other files (.dockerignore excludes things we don't want)\nCOPY . /var/www/cms\n#   Run entry\nCMD [\"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"2202823d6d3304205adf5a5b7c825f4f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4f2542b4d0303a368a1e349816c5ede187a8e789.dockerfile"}