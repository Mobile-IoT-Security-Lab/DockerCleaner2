{"seed":1652990251,"processedDockerfileHash":"c8c9332756a816d430c45f8e61900bde","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Pull base image.\nFROM php:7.2.10-apache\nCOPY config/php.ini /usr/local/etc/php/\nRUN docker-php-ext-install mysqli \\\n && docker-php-ext-install pdo_mysql\nRUN apt-get clean \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget apt-transport-https lsb-release ca-certificates gnupg2 --fix-missing -y )\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp \\\n && wget https://www.dotdeb.org/dotdeb.gpg \\\n && apt-key add dotdeb.gpg\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\nRUN echo \"deb https://packages.sury.org/php/ $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/php.list\nRUN apt-get clean \\\n && apt-get update \\\n && apt-cache search php-mysql \\\n && (apt-get update ;apt-get install --no-install-recommends ruby-dev rubygems imagemagick graphviz sudo git vim memcached libmemcached-tools libmemcached-dev libpng-dev libjpeg62-turbo-dev libmcrypt-dev libxml2-dev libxslt1-dev mysql-client zip wget linux-libc-dev libyaml-dev zlib1g-dev libicu-dev libpq-dev bash-completion htop libldap2-dev libssl-dev --fix-missing -y )\n#   postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \\\n && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends postgresql-client-9.5 -y )\n#   Install memcached for PHP 7\nRUN cd /tmp \\\n && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached \\\n && sudo git checkout php7 \\\n && phpize \\\n && ./configure --disable-memcached-sasl \\\n && make \\\n && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini \\\n && echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20170718/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\nRUN docker-php-ext-install gd mbstring zip soap pdo_mysql mysqli xsl opcache calendar intl exif pgsql pdo_pgsql ftp bcmath ldap\nRUN pecl install mcrypt-1.0.1 \\\n && docker-php-ext-enable mcrypt\n#   Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   Add sudo to www-data\nRUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   Install YAML extension\nRUN pecl install yaml-2.0.2 \\\n && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n#   Install APCu extension\nRUN pecl install apcu-5.1.8\nCOPY core/memcached.conf /etc/memcached.conf\n#   Install sass and gem dependency\nRUN (apt-get update ;apt-get install --no-install-recommends automake ruby2.3-dev libtool --fix-missing -y )\n#   SASS and Compass installation\nRUN gem install sass --version 3.5.6 ; gem install compass --version 1.0.3\n#   Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs -y ) \\\n && npm install npm@latest -g\n#   Installation of LESS\nRUN npm install less@4.1.3 -g \\\n && npm install less-plugin-clean-css@1.5.1 -g\n#   Installation of Grunt\nRUN npm install grunt-cli@1.4.3 -g\n#   Installation of Gulp\nRUN npm install gulp@4.0.2 -g\n#   Installation of Bower\nRUN npm install bower@1.8.14 -g\n#   Installation of Composer\nRUN cd /usr/src \\\n && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src \\\n && mv composer.phar /usr/bin/composer\n#   Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush \\\n && git checkout 9.1.0\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush \\\n && composer update \\\n && composer install\n#   Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ \\\n && wget http://xdebug.org/files/xdebug-2.6.1.tgz \\\n && tar -xvzf xdebug-2.6.1.tgz \\\n && cd xdebug-2.6.1/ \\\n && phpize \\\n && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config \\\n && make \\\n && make install\nRUN cd /tmp/xdebug-2.6.1 \\\n && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20170718/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_autostart=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_log=/tmp/php7-xdebug.log' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_host=docker_host' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.idekey=PHPSTORM' >> /usr/local/etc/php/conf.d/xdebug.ini\nRUN rm -rf /var/www/html \\\n && mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html \\\n && chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n#   Installation of PHP_CodeSniffer with Drupal coding standards.\n#   See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n#   # Installation of Symfony console autocomplete\n#   RUN composer global require bamarni/symfony-console-autocomplete\n#   installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp \\\n && rm -r /var/lib/apt/lists/*\nCOPY core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nCOPY core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n#   Installation of APCu cache\nRUN (echo \"extension=apcu.so\" ;echo \"apc.enabled=1\" ) > /usr/local/etc/php/conf.d/ext-apcu.ini\n#   Installation of Opcode cache\nRUN (echo \"opcache.memory_consumption=128\" ;echo \"opcache.interned_strings_buffer=8\" ;echo \"opcache.max_accelerated_files=20000\" ;echo \"opcache.revalidate_freq=5\" ;echo \"opcache.fast_shutdown=1\" ;echo \"opcache.enable_cli=1\" ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires \\\n && service apache2 restart\n#   Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal\n#   Install WKHTMLTOPDF\nRUN : \\\n && apt-get remove -y libqt4-dev qt4-dev-tools wkhtmltopdf \\\n && apt-get autoremove -y\nRUN (apt-get update ;apt-get install --no-install-recommends openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y )\nRUN mkdir /var/wkhtmltopdf\nRUN cd /var/wkhtmltopdf \\\n && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz \\\n && tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\nRUN cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltopdf /bin/wkhtmltopdf \\\n && cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltoimage /bin/wkhtmltoimage\nRUN chown -R web:www-data /var/wkhtmltopdf\nRUN chmod +x /bin/wkhtmltopdf \\\n && chmod +x /bin/wkhtmltoimage\n#   Our apache volume\nVOLUME /var/www/html\n#   create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n#   Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Expose 80 for apache, 9000 for xdebug\nEXPOSE 80/tcp 9000/tcp\n#   Add web .bashrc config\nCOPY config/bashrc /var/www/\nRUN mv /var/www/bashrc /var/www/.bashrc\nRUN chown www-data:www-data /var/www/.bashrc\nRUN echo \"source .bashrc\" >> /var/www/.profile; chown www-data:www-data /var/www/.profile\n#   Add root .bashrc config\n#   When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc\n#   Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n#   Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh \\\n && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#  Pull base image.\nFROM php:7.2.10-apache\nCOPY config/php.ini /usr/local/etc/php/\nRUN docker-php-ext-install mysqli \\\n && docker-php-ext-install pdo_mysql\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install wget apt-transport-https lsb-release ca-certificates gnupg2 --fix-missing -y\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp \\\n && wget https://www.dotdeb.org/dotdeb.gpg \\\n && apt-key add dotdeb.gpg\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\nRUN echo \"deb https://packages.sury.org/php/ $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/php.list\nRUN apt-get clean \\\n && apt-get update \\\n && apt-cache search php-mysql \\\n && apt-get install ruby-dev rubygems imagemagick graphviz sudo git vim memcached libmemcached-tools libmemcached-dev libpng-dev libjpeg62-turbo-dev libmcrypt-dev libxml2-dev libxslt1-dev mysql-client zip wget linux-libc-dev libyaml-dev zlib1g-dev libicu-dev libpq-dev bash-completion htop libldap2-dev libssl-dev --fix-missing -y\n#  postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \\\n && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install postgresql-client-9.5 -y\n#  Install memcached for PHP 7\nRUN cd /tmp \\\n && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached \\\n && sudo git checkout php7 \\\n && phpize \\\n && ./configure --disable-memcached-sasl \\\n && make \\\n && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini \\\n && echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20170718/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\nRUN docker-php-ext-install gd mbstring zip soap pdo_mysql mysqli xsl opcache calendar intl exif pgsql pdo_pgsql ftp bcmath ldap\nRUN pecl install mcrypt-1.0.1 \\\n && docker-php-ext-enable mcrypt\n#  Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#  Add sudo to www-data\nRUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#  Install YAML extension\nRUN pecl install yaml-2.0.2 \\\n && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n#  Install APCu extension\nRUN pecl install apcu-5.1.8\nCOPY core/memcached.conf /etc/memcached.conf\n#  Install sass and gem dependency\nRUN apt-get install automake ruby2.3-dev libtool --fix-missing -y\n#  SASS and Compass installation\nRUN gem install sass --version 3.5.6 ; gem install compass\n#  Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install nodejs -y \\\n && npm install npm@latest -g\n#  Installation of LESS\nRUN npm install less -g \\\n && npm install less-plugin-clean-css -g\n#  Installation of Grunt\nRUN npm install grunt-cli -g\n#  Installation of Gulp\nRUN npm install gulp -g\n#  Installation of Bower\nRUN npm install bower -g\n#  Installation of Composer\nRUN cd /usr/src \\\n && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src \\\n && mv composer.phar /usr/bin/composer\n#  Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush \\\n && git checkout 9.1.0\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush \\\n && composer update \\\n && composer install\n#  Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ \\\n && wget http://xdebug.org/files/xdebug-2.6.1.tgz \\\n && tar -xvzf xdebug-2.6.1.tgz \\\n && cd xdebug-2.6.1/ \\\n && phpize \\\n && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config \\\n && make \\\n && make install\nRUN cd /tmp/xdebug-2.6.1 \\\n && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20170718/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_autostart=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_log=/tmp/php7-xdebug.log' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_host=docker_host' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.idekey=PHPSTORM' >> /usr/local/etc/php/conf.d/xdebug.ini\nRUN rm -rf /var/www/html \\\n && mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html \\\n && chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n#  Installation of PHP_CodeSniffer with Drupal coding standards.\n#  See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n#  # Installation of Symfony console autocomplete\n#  RUN composer global require bamarni/symfony-console-autocomplete\n#  installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp \\\n && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n#  Installation of APCu cache\nRUN (echo \"extension=apcu.so\" ;echo \"apc.enabled=1\" ) > /usr/local/etc/php/conf.d/ext-apcu.ini\n#  Installation of Opcode cache\nRUN (echo \"opcache.memory_consumption=128\" ;echo \"opcache.interned_strings_buffer=8\" ;echo \"opcache.max_accelerated_files=20000\" ;echo \"opcache.revalidate_freq=5\" ;echo \"opcache.fast_shutdown=1\" ;echo \"opcache.enable_cli=1\" ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires \\\n && service apache2 restart\n#  Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal\n#  Install WKHTMLTOPDF\nRUN apt-get update \\\n && apt-get remove -y libqt4-dev qt4-dev-tools wkhtmltopdf \\\n && apt-get autoremove -y\nRUN apt-get install openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y\nRUN mkdir /var/wkhtmltopdf\nRUN cd /var/wkhtmltopdf \\\n && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz \\\n && tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\nRUN cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltopdf /bin/wkhtmltopdf \\\n && cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltoimage /bin/wkhtmltoimage\nRUN chown -R web:www-data /var/wkhtmltopdf\nRUN chmod +x /bin/wkhtmltopdf \\\n && chmod +x /bin/wkhtmltoimage\n#  Our apache volume\nVOLUME /var/www/html\n#  create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n#  Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#  Expose 80 for apache, 9000 for xdebug\nEXPOSE 80/tcp 9000/tcp\n#  Add web .bashrc config\nCOPY config/bashrc /var/www/\nRUN mv /var/www/bashrc /var/www/.bashrc\nRUN chown www-data:www-data /var/www/.bashrc\nRUN echo \"source .bashrc\" >> /var/www/.profile; chown www-data:www-data /var/www/.profile\n#  Add root .bashrc config\n#  When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc\n#  Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n#  Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh \\\n && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"07dac74646eae604a08d2ef46286a12b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Pull base image.\nFROM php:7.2.10-apache\nCOPY config/php.ini /usr/local/etc/php/\nRUN docker-php-ext-install mysqli \\\n && docker-php-ext-install pdo_mysql\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install wget apt-transport-https lsb-release ca-certificates gnupg2 --fix-missing -y\nRUN echo \"deb http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://packages.dotdeb.org jessie all\" >> /etc/apt/sources.list\nRUN cd /tmp \\\n && wget https://www.dotdeb.org/dotdeb.gpg \\\n && apt-key add dotdeb.gpg\nRUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\nRUN echo \"deb https://packages.sury.org/php/ $( lsb_release -sc ;) main\" > /etc/apt/sources.list.d/php.list\nRUN apt-get clean \\\n && apt-get update \\\n && apt-cache search php-mysql \\\n && apt-get install ruby-dev rubygems imagemagick graphviz sudo git vim memcached libmemcached-tools libmemcached-dev libpng-dev libjpeg62-turbo-dev libmcrypt-dev libxml2-dev libxslt1-dev mysql-client zip wget linux-libc-dev libyaml-dev zlib1g-dev libicu-dev libpq-dev bash-completion htop libldap2-dev libssl-dev --fix-missing -y\n#   postgresql-client-9.5\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - \\\n && echo \"deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install postgresql-client-9.5 -y\n#   Install memcached for PHP 7\nRUN cd /tmp \\\n && git clone https://github.com/php-memcached-dev/php-memcached.git\nRUN cd /tmp/php-memcached \\\n && sudo git checkout php7 \\\n && phpize \\\n && ./configure --disable-memcached-sasl \\\n && make \\\n && make install\nRUN touch /usr/local/etc/php/conf.d/memcached.ini \\\n && echo \"extension=/usr/local/lib/php/extensions/no-debug-non-zts-20170718/memcached.so\" >> /usr/local/etc/php/conf.d/memcached.ini\nCOPY docker-php-ext-install /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-php-ext-install\nRUN docker-php-ext-configure gd --with-jpeg-dir=/usr/include/\nRUN docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/\nRUN docker-php-ext-install gd mbstring zip soap pdo_mysql mysqli xsl opcache calendar intl exif pgsql pdo_pgsql ftp bcmath ldap\nRUN pecl install mcrypt-1.0.1 \\\n && docker-php-ext-enable mcrypt\n#   Create new web user for apache and grant sudo without password\nRUN useradd web -d /var/www -g www-data -s /bin/bash\nRUN usermod -aG sudo web\nRUN echo 'web ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   Add sudo to www-data\nRUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   Install YAML extension\nRUN pecl install yaml-2.0.2 \\\n && echo \"extension=yaml.so\" > /usr/local/etc/php/conf.d/ext-yaml.ini\n#   Install APCu extension\nRUN pecl install apcu-5.1.8\nCOPY core/memcached.conf /etc/memcached.conf\n#   Install sass and gem dependency\nRUN apt-get install automake ruby2.3-dev libtool --fix-missing -y\n#   SASS and Compass installation\nRUN gem install sass --version 3.5.6 ; gem install compass\n#   Installation node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get update \\\n && apt-get install nodejs -y \\\n && npm install npm@latest -g\n#   Installation of LESS\nRUN npm install less -g \\\n && npm install less-plugin-clean-css -g\n#   Installation of Grunt\nRUN npm install grunt-cli -g\n#   Installation of Gulp\nRUN npm install gulp -g\n#   Installation of Bower\nRUN npm install bower -g\n#   Installation of Composer\nRUN cd /usr/src \\\n && curl -sS http://getcomposer.org/installer | php\nRUN cd /usr/src \\\n && mv composer.phar /usr/bin/composer\n#   Installation of drush\nRUN git clone https://github.com/drush-ops/drush.git /usr/local/src/drush\nRUN cd /usr/local/src/drush \\\n && git checkout 9.1.0\nRUN ln -s /usr/local/src/drush/drush /usr/bin/drush\nRUN cd /usr/local/src/drush \\\n && composer update \\\n && composer install\n#   Install xdebug. We need at least 2.4 version to have PHP 7 support.\nRUN cd /tmp/ \\\n && wget http://xdebug.org/files/xdebug-2.6.1.tgz \\\n && tar -xvzf xdebug-2.6.1.tgz \\\n && cd xdebug-2.6.1/ \\\n && phpize \\\n && ./configure --enable-xdebug --with-php-config=/usr/local/bin/php-config \\\n && make \\\n && make install\nRUN cd /tmp/xdebug-2.6.1 \\\n && cp modules/xdebug.so /usr/local/lib/php/extensions/no-debug-non-zts-20170718/\nRUN echo 'zend_extension = /usr/local/lib/php/extensions/no-debug-non-zts-20170718/xdebug.so' >> /usr/local/etc/php/php.ini\nRUN touch /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_enable=1' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_autostart=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_connect_back=0' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_port=9000' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_log=/tmp/php7-xdebug.log' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.remote_host=docker_host' >> /usr/local/etc/php/conf.d/xdebug.ini \\\n && echo 'xdebug.idekey=PHPSTORM' >> /usr/local/etc/php/conf.d/xdebug.ini\nRUN rm -rf /var/www/html \\\n && mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html \\\n && chown -R web:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html\n#   Installation of PHP_CodeSniffer with Drupal coding standards.\n#   See https://www.drupal.org/node/1419988#coder-composer\nRUN composer global require drupal/coder\nRUN ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin\nRUN ln -s ~/.composer/vendor/bin/phpcbf /usr/local/bin\nRUN phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer\n#   # Installation of Symfony console autocomplete\n#   RUN composer global require bamarni/symfony-console-autocomplete\n#   installation of ssmtp\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -y ssmtp \\\n && rm -r /var/lib/apt/lists/*\nADD core/ssmtp.conf /etc/ssmtp/ssmtp.conf\nADD core/php-smtp.ini /usr/local/etc/php/conf.d/php-smtp.ini\nCOPY config/apache2.conf /etc/apache2\nCOPY core/envvars /etc/apache2\nCOPY core/other-vhosts-access-log.conf /etc/apache2/conf-enabled/\nRUN rm /etc/apache2/sites-enabled/000-default.conf\n#   Installation of APCu cache\nRUN (echo \"extension=apcu.so\" ;echo \"apc.enabled=1\" ) > /usr/local/etc/php/conf.d/ext-apcu.ini\n#   Installation of Opcode cache\nRUN (echo \"opcache.memory_consumption=128\" ;echo \"opcache.interned_strings_buffer=8\" ;echo \"opcache.max_accelerated_files=20000\" ;echo \"opcache.revalidate_freq=5\" ;echo \"opcache.fast_shutdown=1\" ;echo \"opcache.enable_cli=1\" ) > /usr/local/etc/php/conf.d/opcache-recommended.ini\nRUN a2enmod rewrite expires \\\n && service apache2 restart\n#   Install Drupal Console for Drupal 8\nRUN curl https://drupalconsole.com/installer -L -o drupal.phar \\\n && mv drupal.phar /usr/local/bin/drupal \\\n && chmod +x /usr/local/bin/drupal\n#   Install WKHTMLTOPDF\nRUN apt-get update \\\n && apt-get remove -y libqt4-dev qt4-dev-tools wkhtmltopdf \\\n && apt-get autoremove -y\nRUN apt-get install openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y\nRUN mkdir /var/wkhtmltopdf\nRUN cd /var/wkhtmltopdf \\\n && wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz \\\n && tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\nRUN cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltopdf /bin/wkhtmltopdf \\\n && cp /var/wkhtmltopdf/wkhtmltox/bin/wkhtmltoimage /bin/wkhtmltoimage\nRUN chown -R web:www-data /var/wkhtmltopdf\nRUN chmod +x /bin/wkhtmltopdf \\\n && chmod +x /bin/wkhtmltoimage\n#   Our apache volume\nVOLUME /var/www/html\n#   create directory for ssh keys\nRUN mkdir /var/www/.ssh/\nRUN chown -R web:www-data /var/www/\nRUN chmod -R 600 /var/www/.ssh/\n#   Set timezone to Europe/Paris\nRUN echo \"Europe/Paris\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Expose 80 for apache, 9000 for xdebug\nEXPOSE 80/tcp 9000/tcp\n#   Add web .bashrc config\nCOPY config/bashrc /var/www/\nRUN mv /var/www/bashrc /var/www/.bashrc\nRUN chown www-data:www-data /var/www/.bashrc\nRUN echo \"source .bashrc\" >> /var/www/.profile; chown www-data:www-data /var/www/.profile\n#   Add root .bashrc config\n#   When you \"docker exec -it\" into the container, you will be switched as web user and placed in /var/www/html\nRUN echo \"exec su - web\" > /root/.bashrc\n#   Install symfony autocomplete for web user\nRUN sudo -u web composer global require bamarni/symfony-console-autocomplete\nRUN echo \"export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/var/www/.composer/vendor/bamarni/symfony-console-autocomplete/\" >> /var/www/.profile\nRUN echo 'eval \"$(symfony-autocomplete)\"' >> /var/www/.profile\n#   Set and run a custom entrypoint\nCOPY core/docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh \\\n && chmod +x /docker-entrypoint.sh\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"1037578f3c581087b600cec5646c056c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/616f1ea182567629da18182479a72405afdd7982.dockerfile"}