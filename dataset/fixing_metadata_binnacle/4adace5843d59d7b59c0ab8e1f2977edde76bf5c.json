{"seed":819744757,"processedDockerfileHash":"ceba6beaa365e55eedc572a59225f302","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:7.5-cudnn5-devel\n#   Use Tini as the init process with PID 1\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/v0.10.0/tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#   Install dependencies for OpenBLAS, Jupyter, and Torch\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential git gfortran python3 python3-setuptools python3-dev cmake curl wget unzip libreadline-dev libjpeg-dev libpng-dev ncurses-dev imagemagick gnuplot gnuplot-x11 libssl-dev libzmq3-dev graphviz -y\n#   Install OpenBLAS\nRUN git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS \\\n && cd /tmp/OpenBLAS \\\n && [ $( getconf _NPROCESSORS_ONLN ;) = 1 ] \\\n && export USE_OPENMP=0 || export USE_OPENMP=1 \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) NO_AFFINITY=1 \\\n && make install \\\n && rm -rf /tmp/OpenBLAS\n#   Install Jupyter\nRUN easy_install3 pip \\\n && pip install jupyter==1.0.0 'notebook==4.2.1'\n#   Install Torch\nARG TORCH_DISTRO_COMMIT=9c2ef7f185c682ea333e06654cb6e5b67dfe7cd2\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive \\\n && cd ~/torch \\\n && git checkout \"$TORCH_DISTRO_COMMIT\" \\\n && ./install.sh\n#   Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-alpha/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\n#   Install GTK libraries\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgtk2.0-dev libcanberra-gtk-module -y\n#   Install OpenCV and Lua bindings\nRUN cd /tmp \\\n && wget -q https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip 3.1.0.zip \\\n && mkdir opencv-3.1.0/build \\\n && cd opencv-3.1.0/build \\\n && cmake -D WITH_CUDA=off -D WITH_OPENCL=off -D BUILD_SHARED_LIBS=off -D CMAKE_CXX_FLAGS=-fPIC -D WITH_QT=off -D WITH_VTK=off -D WITH_GTK=on -D WITH_OPENGL=off -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /tmp/3.1.0.zip /tmp/opencv-3.1.0\nRUN luarocks install cv\n#   Install FFmpeg and Lua bindings\nRUN apt-get update \\\n && apt-get install --no-install-recommends libavformat-dev libavcodec-dev libavutil-dev libavfilter-dev ffmpeg pkg-config -y\nARG TORCHVID_COMMIT=8dd49d6bc9279278fe438cf8a6d7bcfe0c58a7ab\nRUN git clone https://github.com/anibali/torchvid.git /tmp/torchvid \\\n && cd /tmp/torchvid \\\n && git checkout \"$TORCHVID_COMMIT\" \\\n && luarocks make rockspecs/torchvid-scm-0.rockspec \\\n && rm -rf /tmp/torchvid\n#   Install HDF5 and Lua bindings\n#   RUN apt-get update \\\n#    && apt-get install -y libhdf5-dev hdf5-tools\nRUN mkdir -p /tmp/hdf5 \\\n && cd /tmp/hdf5 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0-patch1/src/hdf5-1.10.0-patch1.tar.gz \\\n && tar xzf hdf5-1.10.0-patch1.tar.gz \\\n && cd hdf5-1.10.0-patch1 \\\n && ./configure --prefix=/usr/local --with-default-api-version=v18 \\\n && make \\\n && make install \\\n && rm -rf /tmp/hdf5\nARG TORCH_HDF5_COMMIT=dd6b2cd6f56b17403bf46174cc84186cb6416c14\nRUN git clone https://github.com/anibali/torch-hdf5.git /tmp/torch-hdf5 \\\n && cd /tmp/torch-hdf5 \\\n && git checkout \"$TORCH_HDF5_COMMIT\" \\\n && luarocks make hdf5-0-0.rockspec \\\n && rm -rf /tmp/torch-hdf5\n#   Install Moses for utilities\nRUN luarocks install moses\n#   Install JSON parser\nRUN luarocks install lua-cjson\n#   Install XML parser\nRUN luarocks install luaxpath\n#   Install CSV parser\nRUN luarocks install csv\n#   Install automatic differentiation library\nRUN luarocks install autograd\n#   Install recurrent neural network modules\nRUN luarocks install rnn\n#   Install unsupervised learning modules (includes PCA)\nRUN luarocks install unsup\n#   Install fast t-SNE module\nRUN luarocks install https://raw.githubusercontent.com/DmitryUlyanov/Multicore-TSNE/master/torch/tsne-1.0-0.rockspec\n#   Install HTTP client\nRUN luarocks install httpclient\n#   Install Lua POSIX bindings\nRUN unset LIBRARY_PATH \\\n && luarocks install luaposix\n#   Install random number generator which allows multiple RNG instances\nRUN luarocks install lrandom\n#   Install iTorch\nRUN luarocks install itorch\n#   Install helpers for loading datasets\nRUN luarocks install dataload\n#   Install GraphicsMagick and Lua bindings\nRUN apt-get update \\\n && apt-get install --no-install-recommends graphicsmagick libgraphicsmagick1-dev -y\nRUN luarocks install graphicsmagick\n#   Install neural network analysis library\nRUN luarocks install optnet\n#   Install Lua web server\nRUN luarocks install lzlib ZLIB_LIBDIR=/lib/x86_64-linux-gnu\nRUN luarocks install pegasus\n#   Install Base64 library\nRUN luarocks install lbase64\n#   Install remote debugger for Lua\nRUN luarocks install https://gist.githubusercontent.com/anibali/d8a54118680ec0c300680aa12cb25e9d/raw/34917d844a19a44f58c720f5e2563e7baef23029/mobdebug-scm-1.rockspec\n#   Install weight initialisation helper\nRUN luarocks install nninit\n#   Install Torchnet framework\nRUN luarocks install torchnet\n#   Install Spatial Transformer Network library\nRUN luarocks install https://raw.githubusercontent.com/qassemoquab/stnbhwd/master/stnbhwd-scm-1.rockspec\n#   Install Stitch for executing and rendering markdown files with code in them\nRUN cd /tmp \\\n && pip install typing==3.10.0.0 \\\n && wget -q https://github.com/jgm/pandoc/releases/download/1.18/pandoc-1.18-1-amd64.deb \\\n && dpkg -i pandoc-1.18-1-amd64.deb \\\n && git clone https://github.com/pystitch/stitch.git \\\n && cd stitch \\\n && git checkout 56b2107df8c79141cad8514ff3b954761b98156a \\\n && python3 setup.py install \\\n && rm -rf /tmp/stitch\nENV LC_ALL=\"C.UTF-8\"\n#   Install Caffe model loader\nRUN apt-get update \\\n && apt-get install --no-install-recommends libprotobuf-dev protobuf-compiler -y\nRUN luarocks install loadcaffe\n#   Install module for loading Matlab data files\nRUN apt-get update \\\n && apt-get install --no-install-recommends libmatio2 -y \\\n && luarocks install matio\n#   Layer-wise learning rate module\nRUN luarocks install nnlr\n#   Install distributions bindings\nRUN luarocks install https://raw.github.com/deepmind/torch-distributions/master/distributions-0-0.rockspec\n#   Install manifold\nRUN apt-get update \\\n && apt-get install --no-install-recommends libatlas3-base -y \\\n && luarocks install manifold\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set working dir\nRUN mkdir /root/notebook\nWORKDIR /root/notebook\n#   Jupyter config\nRUN jupyter notebook --generate-config \\\n && echo \"\\nimport os\\nfrom IPython.lib import passwd\\npassword = os.environ.get('JUPYTER_PASSWORD')\\nif password:\\n c.NotebookApp.password = passwd(password)\\n\" >> ~/.jupyter/jupyter_notebook_config.py\nCOPY notebook.json /root/.jupyter/nbconfig/\n#   Expose Jupyter port\nEXPOSE 8888/tcp\n#   Install CuDNN with Torch bindings\nRUN luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R5/cudnn-scm-1.rockspec\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:7.5-cudnn5-devel\n#  Use Tini as the init process with PID 1\nADD https://github.com/krallin/tini/releases/download/v0.10.0/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#  Install dependencies for OpenBLAS, Jupyter, and Torch\nRUN apt-get update \\\n && apt-get install build-essential git gfortran python3 python3-setuptools python3-dev cmake curl wget unzip libreadline-dev libjpeg-dev libpng-dev ncurses-dev imagemagick gnuplot gnuplot-x11 libssl-dev libzmq3-dev graphviz -y\n#  Install OpenBLAS\nRUN git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS \\\n && cd /tmp/OpenBLAS \\\n && [ $( getconf _NPROCESSORS_ONLN ;) = 1 ] \\\n && export USE_OPENMP=0 || export USE_OPENMP=1 \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) NO_AFFINITY=1 \\\n && make install \\\n && rm -rf /tmp/OpenBLAS\n#  Install Jupyter\nRUN easy_install3 pip \\\n && pip install jupyter 'notebook==4.2.1'\n#  Install Torch\nARG TORCH_DISTRO_COMMIT=9c2ef7f185c682ea333e06654cb6e5b67dfe7cd2\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive \\\n && cd ~/torch \\\n && git checkout \"$TORCH_DISTRO_COMMIT\" \\\n && ./install.sh\n#  Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-alpha/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\n#  Install GTK libraries\nRUN apt-get update \\\n && apt-get install libgtk2.0-dev libcanberra-gtk-module -y\n#  Install OpenCV and Lua bindings\nRUN cd /tmp \\\n && wget -q https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip 3.1.0.zip \\\n && mkdir opencv-3.1.0/build \\\n && cd opencv-3.1.0/build \\\n && cmake -D WITH_CUDA=off -D WITH_OPENCL=off -D BUILD_SHARED_LIBS=off -D CMAKE_CXX_FLAGS=-fPIC -D WITH_QT=off -D WITH_VTK=off -D WITH_GTK=on -D WITH_OPENGL=off -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /tmp/3.1.0.zip /tmp/opencv-3.1.0\nRUN luarocks install cv\n#  Install FFmpeg and Lua bindings\nRUN apt-get update \\\n && apt-get install libavformat-dev libavcodec-dev libavutil-dev libavfilter-dev ffmpeg pkg-config -y\nARG TORCHVID_COMMIT=8dd49d6bc9279278fe438cf8a6d7bcfe0c58a7ab\nRUN git clone https://github.com/anibali/torchvid.git /tmp/torchvid \\\n && cd /tmp/torchvid \\\n && git checkout \"$TORCHVID_COMMIT\" \\\n && luarocks make rockspecs/torchvid-scm-0.rockspec \\\n && rm -rf /tmp/torchvid\n#  Install HDF5 and Lua bindings\n#  RUN apt-get update \\\n#   && apt-get install -y libhdf5-dev hdf5-tools\nRUN mkdir -p /tmp/hdf5 \\\n && cd /tmp/hdf5 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0-patch1/src/hdf5-1.10.0-patch1.tar.gz \\\n && tar xzf hdf5-1.10.0-patch1.tar.gz \\\n && cd hdf5-1.10.0-patch1 \\\n && ./configure --prefix=/usr/local --with-default-api-version=v18 \\\n && make \\\n && make install \\\n && rm -rf /tmp/hdf5\nARG TORCH_HDF5_COMMIT=dd6b2cd6f56b17403bf46174cc84186cb6416c14\nRUN git clone https://github.com/anibali/torch-hdf5.git /tmp/torch-hdf5 \\\n && cd /tmp/torch-hdf5 \\\n && git checkout \"$TORCH_HDF5_COMMIT\" \\\n && luarocks make hdf5-0-0.rockspec \\\n && rm -rf /tmp/torch-hdf5\n#  Install Moses for utilities\nRUN luarocks install moses\n#  Install JSON parser\nRUN luarocks install lua-cjson\n#  Install XML parser\nRUN luarocks install luaxpath\n#  Install CSV parser\nRUN luarocks install csv\n#  Install automatic differentiation library\nRUN luarocks install autograd\n#  Install recurrent neural network modules\nRUN luarocks install rnn\n#  Install unsupervised learning modules (includes PCA)\nRUN luarocks install unsup\n#  Install fast t-SNE module\nRUN luarocks install https://raw.githubusercontent.com/DmitryUlyanov/Multicore-TSNE/master/torch/tsne-1.0-0.rockspec\n#  Install HTTP client\nRUN luarocks install httpclient\n#  Install Lua POSIX bindings\nRUN unset LIBRARY_PATH \\\n && luarocks install luaposix\n#  Install random number generator which allows multiple RNG instances\nRUN luarocks install lrandom\n#  Install iTorch\nRUN luarocks install itorch\n#  Install helpers for loading datasets\nRUN luarocks install dataload\n#  Install GraphicsMagick and Lua bindings\nRUN apt-get update \\\n && apt-get install graphicsmagick libgraphicsmagick1-dev -y\nRUN luarocks install graphicsmagick\n#  Install neural network analysis library\nRUN luarocks install optnet\n#  Install Lua web server\nRUN luarocks install lzlib ZLIB_LIBDIR=/lib/x86_64-linux-gnu\nRUN luarocks install pegasus\n#  Install Base64 library\nRUN luarocks install lbase64\n#  Install remote debugger for Lua\nRUN luarocks install https://gist.githubusercontent.com/anibali/d8a54118680ec0c300680aa12cb25e9d/raw/34917d844a19a44f58c720f5e2563e7baef23029/mobdebug-scm-1.rockspec\n#  Install weight initialisation helper\nRUN luarocks install nninit\n#  Install Torchnet framework\nRUN luarocks install torchnet\n#  Install Spatial Transformer Network library\nRUN luarocks install https://raw.githubusercontent.com/qassemoquab/stnbhwd/master/stnbhwd-scm-1.rockspec\n#  Install Stitch for executing and rendering markdown files with code in them\nRUN cd /tmp \\\n && pip install typing \\\n && wget -q https://github.com/jgm/pandoc/releases/download/1.18/pandoc-1.18-1-amd64.deb \\\n && dpkg -i pandoc-1.18-1-amd64.deb \\\n && git clone https://github.com/pystitch/stitch.git \\\n && cd stitch \\\n && git checkout 56b2107df8c79141cad8514ff3b954761b98156a \\\n && python3 setup.py install \\\n && rm -rf /tmp/stitch\nENV LC_ALL=\"C.UTF-8\"\n#  Install Caffe model loader\nRUN apt-get update \\\n && apt-get install libprotobuf-dev protobuf-compiler -y\nRUN luarocks install loadcaffe\n#  Install module for loading Matlab data files\nRUN apt-get update \\\n && apt-get install libmatio2 -y \\\n && luarocks install matio\n#  Layer-wise learning rate module\nRUN luarocks install nnlr\n#  Install distributions bindings\nRUN luarocks install https://raw.github.com/deepmind/torch-distributions/master/distributions-0-0.rockspec\n#  Install manifold\nRUN apt-get update \\\n && apt-get install libatlas3-base -y \\\n && luarocks install manifold\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Set working dir\nRUN mkdir /root/notebook\nWORKDIR /root/notebook\n#  Jupyter config\nRUN jupyter notebook --generate-config \\\n && echo \"\\nimport os\\nfrom IPython.lib import passwd\\npassword = os.environ.get('JUPYTER_PASSWORD')\\nif password:\\n c.NotebookApp.password = passwd(password)\\n\" >> ~/.jupyter/jupyter_notebook_config.py\nCOPY notebook.json /root/.jupyter/nbconfig/\n#  Expose Jupyter port\nEXPOSE 8888/tcp\n#  Install CuDNN with Torch bindings\nRUN luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R5/cudnn-scm-1.rockspec\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\"]\n","injectedSmells":[],"originalDockerfileHash":"503217657e8ea65d2310614430dc4ff5","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:7.5-cudnn5-devel\n#   Use Tini as the init process with PID 1\nADD https://github.com/krallin/tini/releases/download/v0.10.0/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#   Install dependencies for OpenBLAS, Jupyter, and Torch\nRUN apt-get update \\\n && apt-get install build-essential git gfortran python3 python3-setuptools python3-dev cmake curl wget unzip libreadline-dev libjpeg-dev libpng-dev ncurses-dev imagemagick gnuplot gnuplot-x11 libssl-dev libzmq3-dev graphviz -y\n#   Install OpenBLAS\nRUN git clone https://github.com/xianyi/OpenBLAS.git /tmp/OpenBLAS \\\n && cd /tmp/OpenBLAS \\\n && [ $( getconf _NPROCESSORS_ONLN ;) = 1 ] \\\n && export USE_OPENMP=0 || export USE_OPENMP=1 \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) NO_AFFINITY=1 \\\n && make install \\\n && rm -rf /tmp/OpenBLAS\n#   Install Jupyter\nRUN easy_install3 pip \\\n && pip install jupyter 'notebook==4.2.1'\n#   Install Torch\nARG TORCH_DISTRO_COMMIT=9c2ef7f185c682ea333e06654cb6e5b67dfe7cd2\nRUN git clone https://github.com/torch/distro.git ~/torch --recursive \\\n && cd ~/torch \\\n && git checkout \"$TORCH_DISTRO_COMMIT\" \\\n && ./install.sh\n#   Export environment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-alpha/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\n#   Install GTK libraries\nRUN apt-get update \\\n && apt-get install libgtk2.0-dev libcanberra-gtk-module -y\n#   Install OpenCV and Lua bindings\nRUN cd /tmp \\\n && wget -q https://github.com/Itseez/opencv/archive/3.1.0.zip \\\n && unzip 3.1.0.zip \\\n && mkdir opencv-3.1.0/build \\\n && cd opencv-3.1.0/build \\\n && cmake -D WITH_CUDA=off -D WITH_OPENCL=off -D BUILD_SHARED_LIBS=off -D CMAKE_CXX_FLAGS=-fPIC -D WITH_QT=off -D WITH_VTK=off -D WITH_GTK=on -D WITH_OPENGL=off -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. \\\n && make -j $( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /tmp/3.1.0.zip /tmp/opencv-3.1.0\nRUN luarocks install cv\n#   Install FFmpeg and Lua bindings\nRUN apt-get update \\\n && apt-get install libavformat-dev libavcodec-dev libavutil-dev libavfilter-dev ffmpeg pkg-config -y\nARG TORCHVID_COMMIT=8dd49d6bc9279278fe438cf8a6d7bcfe0c58a7ab\nRUN git clone https://github.com/anibali/torchvid.git /tmp/torchvid \\\n && cd /tmp/torchvid \\\n && git checkout \"$TORCHVID_COMMIT\" \\\n && luarocks make rockspecs/torchvid-scm-0.rockspec \\\n && rm -rf /tmp/torchvid\n#   Install HDF5 and Lua bindings\n#   RUN apt-get update \\\n#    && apt-get install -y libhdf5-dev hdf5-tools\nRUN mkdir -p /tmp/hdf5 \\\n && cd /tmp/hdf5 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0-patch1/src/hdf5-1.10.0-patch1.tar.gz \\\n && tar xzf hdf5-1.10.0-patch1.tar.gz \\\n && cd hdf5-1.10.0-patch1 \\\n && ./configure --prefix=/usr/local --with-default-api-version=v18 \\\n && make \\\n && make install \\\n && rm -rf /tmp/hdf5\nARG TORCH_HDF5_COMMIT=dd6b2cd6f56b17403bf46174cc84186cb6416c14\nRUN git clone https://github.com/anibali/torch-hdf5.git /tmp/torch-hdf5 \\\n && cd /tmp/torch-hdf5 \\\n && git checkout \"$TORCH_HDF5_COMMIT\" \\\n && luarocks make hdf5-0-0.rockspec \\\n && rm -rf /tmp/torch-hdf5\n#   Install Moses for utilities\nRUN luarocks install moses\n#   Install JSON parser\nRUN luarocks install lua-cjson\n#   Install XML parser\nRUN luarocks install luaxpath\n#   Install CSV parser\nRUN luarocks install csv\n#   Install automatic differentiation library\nRUN luarocks install autograd\n#   Install recurrent neural network modules\nRUN luarocks install rnn\n#   Install unsupervised learning modules (includes PCA)\nRUN luarocks install unsup\n#   Install fast t-SNE module\nRUN luarocks install https://raw.githubusercontent.com/DmitryUlyanov/Multicore-TSNE/master/torch/tsne-1.0-0.rockspec\n#   Install HTTP client\nRUN luarocks install httpclient\n#   Install Lua POSIX bindings\nRUN unset LIBRARY_PATH \\\n && luarocks install luaposix\n#   Install random number generator which allows multiple RNG instances\nRUN luarocks install lrandom\n#   Install iTorch\nRUN luarocks install itorch\n#   Install helpers for loading datasets\nRUN luarocks install dataload\n#   Install GraphicsMagick and Lua bindings\nRUN apt-get update \\\n && apt-get install graphicsmagick libgraphicsmagick1-dev -y\nRUN luarocks install graphicsmagick\n#   Install neural network analysis library\nRUN luarocks install optnet\n#   Install Lua web server\nRUN luarocks install lzlib ZLIB_LIBDIR=/lib/x86_64-linux-gnu\nRUN luarocks install pegasus\n#   Install Base64 library\nRUN luarocks install lbase64\n#   Install remote debugger for Lua\nRUN luarocks install https://gist.githubusercontent.com/anibali/d8a54118680ec0c300680aa12cb25e9d/raw/34917d844a19a44f58c720f5e2563e7baef23029/mobdebug-scm-1.rockspec\n#   Install weight initialisation helper\nRUN luarocks install nninit\n#   Install Torchnet framework\nRUN luarocks install torchnet\n#   Install Spatial Transformer Network library\nRUN luarocks install https://raw.githubusercontent.com/qassemoquab/stnbhwd/master/stnbhwd-scm-1.rockspec\n#   Install Stitch for executing and rendering markdown files with code in them\nRUN cd /tmp \\\n && pip install typing \\\n && wget -q https://github.com/jgm/pandoc/releases/download/1.18/pandoc-1.18-1-amd64.deb \\\n && dpkg -i pandoc-1.18-1-amd64.deb \\\n && git clone https://github.com/pystitch/stitch.git \\\n && cd stitch \\\n && git checkout 56b2107df8c79141cad8514ff3b954761b98156a \\\n && python3 setup.py install \\\n && rm -rf /tmp/stitch\nENV LC_ALL=\"C.UTF-8\"\n#   Install Caffe model loader\nRUN apt-get update \\\n && apt-get install libprotobuf-dev protobuf-compiler -y\nRUN luarocks install loadcaffe\n#   Install module for loading Matlab data files\nRUN apt-get update \\\n && apt-get install libmatio2 -y \\\n && luarocks install matio\n#   Layer-wise learning rate module\nRUN luarocks install nnlr\n#   Install distributions bindings\nRUN luarocks install https://raw.github.com/deepmind/torch-distributions/master/distributions-0-0.rockspec\n#   Install manifold\nRUN apt-get update \\\n && apt-get install libatlas3-base -y \\\n && luarocks install manifold\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set working dir\nRUN mkdir /root/notebook\nWORKDIR /root/notebook\n#   Jupyter config\nRUN jupyter notebook --generate-config \\\n && echo \"\\nimport os\\nfrom IPython.lib import passwd\\npassword = os.environ.get('JUPYTER_PASSWORD')\\nif password:\\n c.NotebookApp.password = passwd(password)\\n\" >> ~/.jupyter/jupyter_notebook_config.py\nCOPY notebook.json /root/.jupyter/nbconfig/\n#   Expose Jupyter port\nEXPOSE 8888/tcp\n#   Install CuDNN with Torch bindings\nRUN luarocks install https://raw.githubusercontent.com/soumith/cudnn.torch/R5/cudnn-scm-1.rockspec\nCMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\"]\n","originalDockerfileUglifiedHash":"bfe18974838f634d4e1b86085af7b910","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4adace5843d59d7b59c0ab8e1f2977edde76bf5c.dockerfile"}