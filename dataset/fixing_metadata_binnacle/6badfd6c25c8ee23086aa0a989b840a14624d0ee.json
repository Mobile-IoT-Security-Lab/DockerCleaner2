{"seed":378519284,"processedDockerfileHash":"e6452110a81a0f211b2b6dd78999e089","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:16.04\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG socks_proxy\nENV TERM=\"xterm\" \\\n    http_proxy=\"${http_proxy}\" \\\n    https_proxy=\"${https_proxy}\" \\\n    no_proxy=\"${no_proxy}\" \\\n    socks_proxy=\"${socks_proxy}\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG USER\nARG DJANGO_CONFIGURATION\nENV DJANGO_CONFIGURATION=\"${DJANGO_CONFIGURATION}\"\n#   Install necessary apt packages\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python-software-properties=0.96.20.10 software-properties-common=0.96.20.10 wget=1.17.1-1ubuntu1.5 -yq ) \\\n && add-apt-repository ppa:mc3man/xerus-media -y \\\n && add-apt-repository ppa:mc3man/gstffmpeg-keep -y \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apache2 apache2-dev libapache2-mod-xsendfile supervisor ffmpeg gstreamer0.10-ffmpeg libldap2-dev libsasl2-dev python3-dev python3-pip unzip unrar p7zip-full vim \\\n && add-apt-repository --remove ppa:mc3man/gstffmpeg-keep -y \\\n && add-apt-repository --remove ppa:mc3man/xerus-media -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Add a non-root user\nENV USER=\"${USER}\"\nENV HOME=\"/home/${USER}\"\nWORKDIR ${HOME}\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" ${USER}\nCOPY components /tmp/components\n#   OpenVINO toolkit support\nARG OPENVINO_TOOLKIT\nENV OPENVINO_TOOLKIT=\"${OPENVINO_TOOLKIT}\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then /tmp/components/openvino/install.sh ; fi\n#   CUDA support\nARG CUDA_SUPPORT\nENV CUDA_SUPPORT=\"${CUDA_SUPPORT}\"\nRUN if [ \"$CUDA_SUPPORT\" = \"yes\" ] ; then /tmp/components/cuda/install.sh ; fi\n#   Tensorflow annotation support\nARG TF_ANNOTATION\nENV TF_ANNOTATION=\"${TF_ANNOTATION}\"\nENV TF_ANNOTATION_MODEL_PATH=\"${HOME}/rcnn/inference_graph\"\nRUN if [ \"$TF_ANNOTATION\" = \"yes\" ] ; then bash -i /tmp/components/tf_annotation/install.sh ; fi\nARG WITH_TESTS\nRUN if [ \"$WITH_TESTS\" = \"yes\" ] ; then wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list \\\n && wget -qO- https://deb.nodesource.com/setup_9.x | bash - \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq google-chrome-stable nodejs \\\n && rm -rf /var/lib/apt/lists/* ;mkdir tests \\\n && cd tests \\\n && npm install eslint@8.38.0 eslint-detailed-reporter@0.9.0 karma@6.4.1 karma-chrome-launcher@3.1.1 karma-coveralls@2.1.0 karma-coverage@2.2.0 karma-junit-reporter@2.0.1 karma-qunit@4.1.2 qunit@2.19.4 ;echo \"export PATH=~/tests/node_modules/.bin:${PATH}\" >> ~/.bashrc; fi\n#   Install and initialize CVAT, copy all necessary files\nCOPY cvat/requirements/ /tmp/requirements/\nCOPY supervisord.conf mod_wsgi.conf wait-for-it.sh manage.py ${HOME}/\nRUN pip3 install --no-cache-dir -r /tmp/requirements/${DJANGO_CONFIGURATION}.txt\n#   Install git application dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ssh=1:7.2p2-4ubuntu2.10 netcat-openbsd=1.105-7ubuntu1 git=1:2.7.4-0ubuntu1.10 curl=7.47.0-1ubuntu2.19 zip=3.0-11 -y ) \\\n && wget -qO /dev/stdout https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && (apt-get update ;apt-get install --no-install-recommends git-lfs -y ) \\\n && git lfs install \\\n && rm -rf /var/lib/apt/lists/* \\\n && if [ -z ${socks_proxy} ] ; then echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30\\\"\" >> ${HOME}/.bashrc; else echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ProxyCommand='nc -X 5 -x ${socks_proxy} %h %p'\\\"\" >> ${HOME}/.bashrc; fi\n#   Download model for re-identification app\nENV REID_MODEL_DIR=\"${HOME}/reid\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then mkdir ${HOME}/reid \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.xml -O reid/reid.xml \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.bin -O reid/reid.bin ; fi\n#   TODO: CHANGE URL\nARG WITH_DEXTR\nENV WITH_DEXTR=\"${WITH_DEXTR}\"\nENV DEXTR_MODEL_DIR=\"${HOME}/dextr\"\nRUN if [ \"$WITH_DEXTR\" = \"yes\" ] ; then mkdir ${DEXTR_MODEL_DIR} -p \\\n && wget https://download.01.org/openvinotoolkit/models_contrib/cvat/dextr_model_v1.zip -O ${DEXTR_MODEL_DIR}/dextr.zip \\\n && unzip ${DEXTR_MODEL_DIR}/dextr.zip -d ${DEXTR_MODEL_DIR} \\\n && rm ${DEXTR_MODEL_DIR}/dextr.zip ; fi\nCOPY ssh ${HOME}/.ssh\nCOPY cvat/ ${HOME}/cvat\nCOPY tests ${HOME}/tests\n#   Binary option is necessary to correctly apply the patch on Windows platform.\n#   https://unix.stackexchange.com/questions/239364/how-to-fix-hunk-1-failed-at-1-different-line-endings-message\nRUN patch --binary -p1 < ${HOME}/cvat/apps/engine/static/engine/js/3rdparty.patch\nRUN chown -R ${USER}:${USER} .\n#   RUN all commands below as 'django' user\nUSER ${USER}\nRUN mkdir data share media keys logs /tmp/supervisord\nRUN python3 manage.py collectstatic\nEXPOSE 8080/tcp 8443/tcp\nENTRYPOINT [\"/usr/bin/supervisord\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG socks_proxy\nENV TERM=\"xterm\" \\\n    http_proxy=\"${http_proxy}\" \\\n    https_proxy=\"${https_proxy}\" \\\n    no_proxy=\"${no_proxy}\" \\\n    socks_proxy=\"${socks_proxy}\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG USER\nARG DJANGO_CONFIGURATION\nENV DJANGO_CONFIGURATION=\"${DJANGO_CONFIGURATION}\"\n#  Install necessary apt packages\nRUN apt-get update \\\n && apt-get install python-software-properties software-properties-common wget -yq \\\n && add-apt-repository ppa:mc3man/xerus-media -y \\\n && add-apt-repository ppa:mc3man/gstffmpeg-keep -y \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apache2 apache2-dev libapache2-mod-xsendfile supervisor ffmpeg gstreamer0.10-ffmpeg libldap2-dev libsasl2-dev python3-dev python3-pip unzip unrar p7zip-full vim \\\n && add-apt-repository --remove ppa:mc3man/gstffmpeg-keep -y \\\n && add-apt-repository --remove ppa:mc3man/xerus-media -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Add a non-root user\nENV USER=\"${USER}\"\nENV HOME=\"/home/${USER}\"\nWORKDIR ${HOME}\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" ${USER}\nCOPY components /tmp/components\n#  OpenVINO toolkit support\nARG OPENVINO_TOOLKIT\nENV OPENVINO_TOOLKIT=\"${OPENVINO_TOOLKIT}\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then /tmp/components/openvino/install.sh ; fi\n#  CUDA support\nARG CUDA_SUPPORT\nENV CUDA_SUPPORT=\"${CUDA_SUPPORT}\"\nRUN if [ \"$CUDA_SUPPORT\" = \"yes\" ] ; then /tmp/components/cuda/install.sh ; fi\n#  Tensorflow annotation support\nARG TF_ANNOTATION\nENV TF_ANNOTATION=\"${TF_ANNOTATION}\"\nENV TF_ANNOTATION_MODEL_PATH=\"${HOME}/rcnn/inference_graph\"\nRUN if [ \"$TF_ANNOTATION\" = \"yes\" ] ; then bash -i /tmp/components/tf_annotation/install.sh ; fi\nARG WITH_TESTS\nRUN if [ \"$WITH_TESTS\" = \"yes\" ] ; then wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list \\\n && wget -qO- https://deb.nodesource.com/setup_9.x | bash - \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq google-chrome-stable nodejs \\\n && rm -rf /var/lib/apt/lists/* ;mkdir tests \\\n && cd tests \\\n && npm install eslint eslint-detailed-reporter karma karma-chrome-launcher karma-coveralls karma-coverage karma-junit-reporter karma-qunit qunit ;echo \"export PATH=~/tests/node_modules/.bin:${PATH}\" >> ~/.bashrc; fi\n#  Install and initialize CVAT, copy all necessary files\nCOPY cvat/requirements/ /tmp/requirements/\nCOPY supervisord.conf mod_wsgi.conf wait-for-it.sh manage.py ${HOME}/\nRUN pip3 install --no-cache-dir -r /tmp/requirements/${DJANGO_CONFIGURATION}.txt\n#  Install git application dependencies\nRUN apt-get update \\\n && apt-get install ssh netcat-openbsd git curl zip -y \\\n && wget -qO /dev/stdout https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-get install git-lfs -y \\\n && git lfs install \\\n && rm -rf /var/lib/apt/lists/* \\\n && if [ -z ${socks_proxy} ] ; then echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30\\\"\" >> ${HOME}/.bashrc; else echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ProxyCommand='nc -X 5 -x ${socks_proxy} %h %p'\\\"\" >> ${HOME}/.bashrc; fi\n#  Download model for re-identification app\nENV REID_MODEL_DIR=\"${HOME}/reid\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then mkdir ${HOME}/reid \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.xml -O reid/reid.xml \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.bin -O reid/reid.bin ; fi\n#  TODO: CHANGE URL\nARG WITH_DEXTR\nENV WITH_DEXTR=\"${WITH_DEXTR}\"\nENV DEXTR_MODEL_DIR=\"${HOME}/dextr\"\nRUN if [ \"$WITH_DEXTR\" = \"yes\" ] ; then mkdir ${DEXTR_MODEL_DIR} -p \\\n && wget https://download.01.org/openvinotoolkit/models_contrib/cvat/dextr_model_v1.zip -O ${DEXTR_MODEL_DIR}/dextr.zip \\\n && unzip ${DEXTR_MODEL_DIR}/dextr.zip -d ${DEXTR_MODEL_DIR} \\\n && rm ${DEXTR_MODEL_DIR}/dextr.zip ; fi\nCOPY ssh ${HOME}/.ssh\nCOPY cvat/ ${HOME}/cvat\nCOPY tests ${HOME}/tests\n#  Binary option is necessary to correctly apply the patch on Windows platform.\n#  https://unix.stackexchange.com/questions/239364/how-to-fix-hunk-1-failed-at-1-different-line-endings-message\nRUN patch --binary -p1 < ${HOME}/cvat/apps/engine/static/engine/js/3rdparty.patch\nRUN chown -R ${USER}:${USER} .\n#  RUN all commands below as 'django' user\nUSER ${USER}\nRUN mkdir data share media keys logs /tmp/supervisord\nRUN python3 manage.py collectstatic\nEXPOSE 8080/tcp 8443/tcp\nENTRYPOINT [\"/usr/bin/supervisord\"]\n","injectedSmells":[],"originalDockerfileHash":"dd61a1ece1abae42cd70061d168fbef4","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nARG http_proxy\nARG https_proxy\nARG no_proxy\nARG socks_proxy\nENV TERM=\"xterm\" \\\n    http_proxy=\"${http_proxy}\" \\\n    https_proxy=\"${https_proxy}\" \\\n    no_proxy=\"${no_proxy}\" \\\n    socks_proxy=\"${socks_proxy}\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG USER\nARG DJANGO_CONFIGURATION\nENV DJANGO_CONFIGURATION=\"${DJANGO_CONFIGURATION}\"\n#   Install necessary apt packages\nRUN apt-get update \\\n && apt-get install python-software-properties software-properties-common wget -yq \\\n && add-apt-repository ppa:mc3man/xerus-media -y \\\n && add-apt-repository ppa:mc3man/gstffmpeg-keep -y \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq apache2 apache2-dev libapache2-mod-xsendfile supervisor ffmpeg gstreamer0.10-ffmpeg libldap2-dev libsasl2-dev python3-dev python3-pip unzip unrar p7zip-full vim \\\n && add-apt-repository --remove ppa:mc3man/gstffmpeg-keep -y \\\n && add-apt-repository --remove ppa:mc3man/xerus-media -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Add a non-root user\nENV USER=\"${USER}\"\nENV HOME=\"/home/${USER}\"\nWORKDIR ${HOME}\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" ${USER}\nCOPY components /tmp/components\n#   OpenVINO toolkit support\nARG OPENVINO_TOOLKIT\nENV OPENVINO_TOOLKIT=\"${OPENVINO_TOOLKIT}\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then /tmp/components/openvino/install.sh ; fi\n#   CUDA support\nARG CUDA_SUPPORT\nENV CUDA_SUPPORT=\"${CUDA_SUPPORT}\"\nRUN if [ \"$CUDA_SUPPORT\" = \"yes\" ] ; then /tmp/components/cuda/install.sh ; fi\n#   Tensorflow annotation support\nARG TF_ANNOTATION\nENV TF_ANNOTATION=\"${TF_ANNOTATION}\"\nENV TF_ANNOTATION_MODEL_PATH=\"${HOME}/rcnn/inference_graph\"\nRUN if [ \"$TF_ANNOTATION\" = \"yes\" ] ; then bash -i /tmp/components/tf_annotation/install.sh ; fi\nARG WITH_TESTS\nRUN if [ \"$WITH_TESTS\" = \"yes\" ] ; then wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list \\\n && wget -qO- https://deb.nodesource.com/setup_9.x | bash - \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq google-chrome-stable nodejs \\\n && rm -rf /var/lib/apt/lists/* ;mkdir tests \\\n && cd tests \\\n && npm install eslint eslint-detailed-reporter karma karma-chrome-launcher karma-coveralls karma-coverage karma-junit-reporter karma-qunit qunit ;echo \"export PATH=~/tests/node_modules/.bin:${PATH}\" >> ~/.bashrc; fi\n#   Install and initialize CVAT, copy all necessary files\nCOPY cvat/requirements/ /tmp/requirements/\nCOPY supervisord.conf mod_wsgi.conf wait-for-it.sh manage.py ${HOME}/\nRUN pip3 install --no-cache-dir -r /tmp/requirements/${DJANGO_CONFIGURATION}.txt\n#   Install git application dependencies\nRUN apt-get update \\\n && apt-get install ssh netcat-openbsd git curl zip -y \\\n && wget -qO /dev/stdout https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-get install git-lfs -y \\\n && git lfs install \\\n && rm -rf /var/lib/apt/lists/* \\\n && if [ -z ${socks_proxy} ] ; then echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30\\\"\" >> ${HOME}/.bashrc; else echo export \"GIT_SSH_COMMAND=\\\"ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ProxyCommand='nc -X 5 -x ${socks_proxy} %h %p'\\\"\" >> ${HOME}/.bashrc; fi\n#   Download model for re-identification app\nENV REID_MODEL_DIR=\"${HOME}/reid\"\nRUN if [ \"$OPENVINO_TOOLKIT\" = \"yes\" ] ; then mkdir ${HOME}/reid \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.xml -O reid/reid.xml \\\n && wget https://download.01.org/openvinotoolkit/2018_R5/open_model_zoo/person-reidentification-retail-0079/FP32/person-reidentification-retail-0079.bin -O reid/reid.bin ; fi\n#   TODO: CHANGE URL\nARG WITH_DEXTR\nENV WITH_DEXTR=\"${WITH_DEXTR}\"\nENV DEXTR_MODEL_DIR=\"${HOME}/dextr\"\nRUN if [ \"$WITH_DEXTR\" = \"yes\" ] ; then mkdir ${DEXTR_MODEL_DIR} -p \\\n && wget https://download.01.org/openvinotoolkit/models_contrib/cvat/dextr_model_v1.zip -O ${DEXTR_MODEL_DIR}/dextr.zip \\\n && unzip ${DEXTR_MODEL_DIR}/dextr.zip -d ${DEXTR_MODEL_DIR} \\\n && rm ${DEXTR_MODEL_DIR}/dextr.zip ; fi\nCOPY ssh ${HOME}/.ssh\nCOPY cvat/ ${HOME}/cvat\nCOPY tests ${HOME}/tests\n#   Binary option is necessary to correctly apply the patch on Windows platform.\n#   https://unix.stackexchange.com/questions/239364/how-to-fix-hunk-1-failed-at-1-different-line-endings-message\nRUN patch --binary -p1 < ${HOME}/cvat/apps/engine/static/engine/js/3rdparty.patch\nRUN chown -R ${USER}:${USER} .\n#   RUN all commands below as 'django' user\nUSER ${USER}\nRUN mkdir data share media keys logs /tmp/supervisord\nRUN python3 manage.py collectstatic\nEXPOSE 8080/tcp 8443/tcp\nENTRYPOINT [\"/usr/bin/supervisord\"]\n","originalDockerfileUglifiedHash":"592eae5f80dc4f7b07b5d752ddcbd75c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6badfd6c25c8ee23086aa0a989b840a14624d0ee.dockerfile"}