{"seed":3927207621,"processedDockerfileHash":"26e8505e65cba2fecd4ada941bfcf8bb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#   ------------------------------------------------------\n#   --- Environments and base directories\n#   Environments\n#   - Language\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    CI=\"true\" \\\n    BITRISE_IO=\"true\" \\\n    BITRISE_SOURCE_DIR=\"/bitrise/src\" \\\n    BITRISE_BRIDGE_WORKDIR=\"/bitrise/src\" \\\n    BITRISE_DEPLOY_DIR=\"/bitrise/deploy\" \\\n    BITRISE_CACHE_DIR=\"/bitrise/cache\" \\\n    BITRISE_PREP_DIR=\"/bitrise/prep\" \\\n    BITRISE_TMP_DIR=\"/bitrise/tmp\" \\\n    TOOL_VER_BITRISE_CLI=\"1.31.0\" \\\n    TOOL_VER_RUBY=\"2.5.1\" \\\n    TOOL_VER_GO=\"1.12.5\" \\\n    TOOL_VER_DOCKER=\"5:18.09.4\" \\\n    TOOL_VER_DOCKER_COMPOSE=\"1.21.2\"\n#   create base dirs\nRUN mkdir -p ${BITRISE_SOURCE_DIR} \\\n && mkdir -p ${BITRISE_DEPLOY_DIR} \\\n && mkdir -p ${BITRISE_CACHE_DIR} \\\n && mkdir -p ${BITRISE_TMP_DIR} \\\n && mkdir -p ${BITRISE_PREP_DIR}\n#   switch to temp/prep workdir, for the duration of the provisioning\nWORKDIR ${BITRISE_PREP_DIR}\n#   ------------------------------------------------------\n#   --- Base pre-installed tools\nRUN :\n#   Generate proper EN US UTF-8 locale\n#   Install the \"locales\" package - required for locale-gen\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y locales \\\n && locale-gen en_US.UTF-8\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git mercurial curl wget rsync sudo expect python python-dev python-pip build-essential zip unzip tree clang imagemagick groff software-properties-common\n#   ------------------------------------------------------\n#   --- Pre-installed but not through apt-get\n#   install AWSCLI from pip\nRUN [\"pip\", \"install\", \"awscli==1.27.114\"]\n#   install Ruby from source\n#    from source: mainly because of GEM native extensions,\n#    this is the most reliable way to use Ruby on Ubuntu if GEM native extensions are required\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential zlib1g-dev libssl-dev libreadline6-dev libyaml-dev libsqlite3-dev \\\n && mkdir -p /tmp/ruby-inst \\\n && cd /tmp/ruby-inst \\\n && wget -q http://cache.ruby-lang.org/pub/ruby/ruby-${TOOL_VER_RUBY}.tar.gz \\\n && tar -xvzf ruby-${TOOL_VER_RUBY}.tar.gz \\\n && cd ruby-${TOOL_VER_RUBY} \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/ruby-inst \\\n && gem update --system --no-document\nRUN [ -x \"$( command -v bundle ;)\" ] || gem install bundler --version 2.4.12 --no-document\n#   install Go\n#    from official binary package\nRUN wget -q https://storage.googleapis.com/golang/go${TOOL_VER_GO}.linux-amd64.tar.gz -O go-bins.tar.gz \\\n && tar -C /usr/local -xvzf go-bins.tar.gz \\\n && rm go-bins.tar.gz\n#   ENV setup\nENV PATH=\"$PATH:/usr/local/go/bin\"\n#   Go Workspace dirs & envs\n#   From the official Golang Dockerfile\n#    https://github.com/docker-library/golang\nENV GOPATH=\"/bitrise/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\n#   755 because Ruby complains if 777 (warning: Insecure world writable dir ... in PATH)\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 755 \"$GOPATH\"\n#   Install NodeJS\n#    from official docs: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN sudo apt-get install -y nodejs\n#   Install Yarn\n#   as described at: https://yarnpkg.com/en/docs/install#linux-tab\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && sudo apt-get install -y yarn\n#   Install docker\n#    as described at: https://docs.docker.com/engine/installation/linux/ubuntu/\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nRUN sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\" \\\n && DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-cache policy docker-ce \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce=${TOOL_VER_DOCKER}~3-0~ubuntu-xenial\n#   docker-compose\nRUN wget -q https://github.com/docker/compose/releases/download/${TOOL_VER_DOCKER_COMPOSE}/docker-compose-`uname -s `-`uname -m ` -O /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose \\\n && docker-compose --version\n#   ------------------------------------------------------\n#   --- Bitrise CLI\n#\n#   Install Bitrise CLI\nRUN wget -q https://github.com/bitrise-io/bitrise/releases/download/${TOOL_VER_BITRISE_CLI}/bitrise-$( uname -s ;)-$( uname -m ;) -O /usr/local/bin/bitrise \\\n && chmod +x /usr/local/bin/bitrise \\\n && bitrise setup \\\n && bitrise envman -version \\\n && bitrise stepman -version \\\n && bitrise stepman setup -c https://github.com/bitrise-io/bitrise-steplib.git \\\n && bitrise stepman update\n#   ------------------------------------------------------\n#   --- SSH config\nCOPY ./ssh/config /root/.ssh/config\n#   ------------------------------------------------------\n#   --- Git config\nRUN git config --global user.email \"please-set-your-email@bitrise.io\" \\\n && git config --global user.name \"J. Doe (https://devcenter.bitrise.io/builds/setting-your-git-credentials-on-build-machines/)\"\n#   ------------------------------------------------------\n#   --- Git LFS\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git-lfs \\\n && git lfs install\n#   ------------------------------------------------------\n#   --- Cleanup, Workdir and revision\nWORKDIR $BITRISE_SOURCE_DIR\nENV BITRISE_DOCKER_REV_NUMBER_BASE=\"v2019_06_12_1\"\nCMD bitrise --version\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  ------------------------------------------------------\n#  --- Environments and base directories\n#  Environments\n#  - Language\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    CI=\"true\" \\\n    BITRISE_IO=\"true\" \\\n    BITRISE_SOURCE_DIR=\"/bitrise/src\" \\\n    BITRISE_BRIDGE_WORKDIR=\"/bitrise/src\" \\\n    BITRISE_DEPLOY_DIR=\"/bitrise/deploy\" \\\n    BITRISE_CACHE_DIR=\"/bitrise/cache\" \\\n    BITRISE_PREP_DIR=\"/bitrise/prep\" \\\n    BITRISE_TMP_DIR=\"/bitrise/tmp\" \\\n    TOOL_VER_BITRISE_CLI=\"1.31.0\" \\\n    TOOL_VER_RUBY=\"2.5.1\" \\\n    TOOL_VER_GO=\"1.12.5\" \\\n    TOOL_VER_DOCKER=\"5:18.09.4\" \\\n    TOOL_VER_DOCKER_COMPOSE=\"1.21.2\"\n#  create base dirs\nRUN mkdir -p ${BITRISE_SOURCE_DIR} \\\n && mkdir -p ${BITRISE_DEPLOY_DIR} \\\n && mkdir -p ${BITRISE_CACHE_DIR} \\\n && mkdir -p ${BITRISE_TMP_DIR} \\\n && mkdir -p ${BITRISE_PREP_DIR}\n#  switch to temp/prep workdir, for the duration of the provisioning\nWORKDIR ${BITRISE_PREP_DIR}\n#  ------------------------------------------------------\n#  --- Base pre-installed tools\nRUN apt-get update -qq\n#  Generate proper EN US UTF-8 locale\n#  Install the \"locales\" package - required for locale-gen\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y locales \\\n && locale-gen en_US.UTF-8\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git mercurial curl wget rsync sudo expect python python-dev python-pip build-essential zip unzip tree clang imagemagick groff software-properties-common\n#  ------------------------------------------------------\n#  --- Pre-installed but not through apt-get\n#  install AWSCLI from pip\nRUN [\"pip\", \"install\", \"awscli\"]\n#  install Ruby from source\n#   from source: mainly because of GEM native extensions,\n#   this is the most reliable way to use Ruby on Ubuntu if GEM native extensions are required\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential zlib1g-dev libssl-dev libreadline6-dev libyaml-dev libsqlite3-dev \\\n && mkdir -p /tmp/ruby-inst \\\n && cd /tmp/ruby-inst \\\n && wget -q http://cache.ruby-lang.org/pub/ruby/ruby-${TOOL_VER_RUBY}.tar.gz \\\n && tar -xvzf ruby-${TOOL_VER_RUBY}.tar.gz \\\n && cd ruby-${TOOL_VER_RUBY} \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/ruby-inst \\\n && gem update --system --no-document\nRUN [ -x \"$( command -v bundle ;)\" ] || gem install bundler --no-document\n#  install Go\n#   from official binary package\nRUN wget -q https://storage.googleapis.com/golang/go${TOOL_VER_GO}.linux-amd64.tar.gz -O go-bins.tar.gz \\\n && tar -C /usr/local -xvzf go-bins.tar.gz \\\n && rm go-bins.tar.gz\n#  ENV setup\nENV PATH=\"$PATH:/usr/local/go/bin\"\n#  Go Workspace dirs & envs\n#  From the official Golang Dockerfile\n#   https://github.com/docker-library/golang\nENV GOPATH=\"/bitrise/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\n#  755 because Ruby complains if 777 (warning: Insecure world writable dir ... in PATH)\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 755 \"$GOPATH\"\n#  Install NodeJS\n#   from official docs: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN sudo apt-get install -y nodejs\n#  Install Yarn\n#  as described at: https://yarnpkg.com/en/docs/install#linux-tab\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && sudo apt-get install -y yarn\n#  Install docker\n#   as described at: https://docs.docker.com/engine/installation/linux/ubuntu/\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nRUN sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\" \\\n && DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-cache policy docker-ce \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce=${TOOL_VER_DOCKER}~3-0~ubuntu-xenial\n#  docker-compose\nRUN wget -q https://github.com/docker/compose/releases/download/${TOOL_VER_DOCKER_COMPOSE}/docker-compose-`uname -s `-`uname -m ` -O /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose \\\n && docker-compose --version\n#  ------------------------------------------------------\n#  --- Bitrise CLI\n#\n#  Install Bitrise CLI\nRUN wget -q https://github.com/bitrise-io/bitrise/releases/download/${TOOL_VER_BITRISE_CLI}/bitrise-$( uname -s ;)-$( uname -m ;) -O /usr/local/bin/bitrise \\\n && chmod +x /usr/local/bin/bitrise \\\n && bitrise setup \\\n && bitrise envman -version \\\n && bitrise stepman -version \\\n && bitrise stepman setup -c https://github.com/bitrise-io/bitrise-steplib.git \\\n && bitrise stepman update\n#  ------------------------------------------------------\n#  --- SSH config\nCOPY ./ssh/config /root/.ssh/config\n#  ------------------------------------------------------\n#  --- Git config\nRUN git config --global user.email \"please-set-your-email@bitrise.io\" \\\n && git config --global user.name \"J. Doe (https://devcenter.bitrise.io/builds/setting-your-git-credentials-on-build-machines/)\"\n#  ------------------------------------------------------\n#  --- Git LFS\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git-lfs \\\n && git lfs install\n#  ------------------------------------------------------\n#  --- Cleanup, Workdir and revision\nWORKDIR $BITRISE_SOURCE_DIR\nENV BITRISE_DOCKER_REV_NUMBER_BASE=\"v2019_06_12_1\"\nCMD bitrise --version\n","injectedSmells":[],"originalDockerfileHash":"bbf59bab92ec5262d7c62a4eea146ec5","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   ------------------------------------------------------\n#   --- Environments and base directories\n#   Environments\n#   - Language\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    CI=\"true\" \\\n    BITRISE_IO=\"true\" \\\n    BITRISE_SOURCE_DIR=\"/bitrise/src\" \\\n    BITRISE_BRIDGE_WORKDIR=\"/bitrise/src\" \\\n    BITRISE_DEPLOY_DIR=\"/bitrise/deploy\" \\\n    BITRISE_CACHE_DIR=\"/bitrise/cache\" \\\n    BITRISE_PREP_DIR=\"/bitrise/prep\" \\\n    BITRISE_TMP_DIR=\"/bitrise/tmp\" \\\n    TOOL_VER_BITRISE_CLI=\"1.31.0\" \\\n    TOOL_VER_RUBY=\"2.5.1\" \\\n    TOOL_VER_GO=\"1.12.5\" \\\n    TOOL_VER_DOCKER=\"5:18.09.4\" \\\n    TOOL_VER_DOCKER_COMPOSE=\"1.21.2\"\n#   create base dirs\nRUN mkdir -p ${BITRISE_SOURCE_DIR} \\\n && mkdir -p ${BITRISE_DEPLOY_DIR} \\\n && mkdir -p ${BITRISE_CACHE_DIR} \\\n && mkdir -p ${BITRISE_TMP_DIR} \\\n && mkdir -p ${BITRISE_PREP_DIR}\n#   switch to temp/prep workdir, for the duration of the provisioning\nWORKDIR ${BITRISE_PREP_DIR}\n#   ------------------------------------------------------\n#   --- Base pre-installed tools\nRUN apt-get update -qq\n#   Generate proper EN US UTF-8 locale\n#   Install the \"locales\" package - required for locale-gen\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y locales \\\n && locale-gen en_US.UTF-8\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git mercurial curl wget rsync sudo expect python python-dev python-pip build-essential zip unzip tree clang imagemagick groff software-properties-common\n#   ------------------------------------------------------\n#   --- Pre-installed but not through apt-get\n#   install AWSCLI from pip\nRUN [\"pip\", \"install\", \"awscli\"]\n#   install Ruby from source\n#    from source: mainly because of GEM native extensions,\n#    this is the most reliable way to use Ruby on Ubuntu if GEM native extensions are required\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential zlib1g-dev libssl-dev libreadline6-dev libyaml-dev libsqlite3-dev \\\n && mkdir -p /tmp/ruby-inst \\\n && cd /tmp/ruby-inst \\\n && wget -q http://cache.ruby-lang.org/pub/ruby/ruby-${TOOL_VER_RUBY}.tar.gz \\\n && tar -xvzf ruby-${TOOL_VER_RUBY}.tar.gz \\\n && cd ruby-${TOOL_VER_RUBY} \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/ruby-inst \\\n && gem update --system --no-document\nRUN [ -x \"$( command -v bundle ;)\" ] || gem install bundler --no-document\n#   install Go\n#    from official binary package\nRUN wget -q https://storage.googleapis.com/golang/go${TOOL_VER_GO}.linux-amd64.tar.gz -O go-bins.tar.gz \\\n && tar -C /usr/local -xvzf go-bins.tar.gz \\\n && rm go-bins.tar.gz\n#   ENV setup\nENV PATH=\"$PATH:/usr/local/go/bin\"\n#   Go Workspace dirs & envs\n#   From the official Golang Dockerfile\n#    https://github.com/docker-library/golang\nENV GOPATH=\"/bitrise/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\n#   755 because Ruby complains if 777 (warning: Insecure world writable dir ... in PATH)\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 755 \"$GOPATH\"\n#   Install NodeJS\n#    from official docs: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\nRUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nRUN sudo apt-get install -y nodejs\n#   Install Yarn\n#   as described at: https://yarnpkg.com/en/docs/install#linux-tab\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nRUN DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && sudo apt-get install -y yarn\n#   Install docker\n#    as described at: https://docs.docker.com/engine/installation/linux/ubuntu/\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates\nRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nRUN sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $( lsb_release -cs ;) stable\" \\\n && DEBIAN_FRONTEND=noninteractive apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-cache policy docker-ce \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce=${TOOL_VER_DOCKER}~3-0~ubuntu-xenial\n#   docker-compose\nRUN wget -q https://github.com/docker/compose/releases/download/${TOOL_VER_DOCKER_COMPOSE}/docker-compose-`uname -s `-`uname -m ` -O /usr/local/bin/docker-compose \\\n && chmod +x /usr/local/bin/docker-compose \\\n && docker-compose --version\n#   ------------------------------------------------------\n#   --- Bitrise CLI\n#\n#   Install Bitrise CLI\nRUN wget -q https://github.com/bitrise-io/bitrise/releases/download/${TOOL_VER_BITRISE_CLI}/bitrise-$( uname -s ;)-$( uname -m ;) -O /usr/local/bin/bitrise \\\n && chmod +x /usr/local/bin/bitrise \\\n && bitrise setup \\\n && bitrise envman -version \\\n && bitrise stepman -version \\\n && bitrise stepman setup -c https://github.com/bitrise-io/bitrise-steplib.git \\\n && bitrise stepman update\n#   ------------------------------------------------------\n#   --- SSH config\nCOPY ./ssh/config /root/.ssh/config\n#   ------------------------------------------------------\n#   --- Git config\nRUN git config --global user.email \"please-set-your-email@bitrise.io\" \\\n && git config --global user.name \"J. Doe (https://devcenter.bitrise.io/builds/setting-your-git-credentials-on-build-machines/)\"\n#   ------------------------------------------------------\n#   --- Git LFS\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install git-lfs \\\n && git lfs install\n#   ------------------------------------------------------\n#   --- Cleanup, Workdir and revision\nWORKDIR $BITRISE_SOURCE_DIR\nENV BITRISE_DOCKER_REV_NUMBER_BASE=\"v2019_06_12_1\"\nCMD bitrise --version\n","originalDockerfileUglifiedHash":"45669a79fa4d2b673c37895a28e85bf3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bf48bee69c9fe1b3ab2f77f925b299d10ab1b98e.dockerfile"}