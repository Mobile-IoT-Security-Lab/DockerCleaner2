{"seed":3502128230,"processedDockerfileHash":"87625f4cedccdc304b01a77f59e56779","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Requires docker >= 17.05 (requires support for multi-stage builds)\nFROM alpine:3.8 AS libzauth-builder\n#   Compile libzauth\nCOPY libs/libzauth /src/libzauth\nRUN cd /src/libzauth/libzauth-c \\\n && apk add make=4.2.1-r2 bash=4.4.19-r1 cargo=1.26.2-r0 libsodium-dev=1.0.16-r0 --no-cache \\\n && make install\n#   Nginz container\nFROM alpine:3.8\nENV NGINX_VERSION=\"1.14.2\"\n#   Install libzauth\nCOPY --from=libzauth-builder /usr/local/include/zauth.h /usr/local/include/zauth.h\nCOPY --from=libzauth-builder /usr/local/lib/libzauth.so /usr/local/lib/libzauth.so\nCOPY --from=libzauth-builder /usr/local/lib/pkgconfig/libzauth.pc /usr/local/lib/pkgconfig/libzauth.pc\nCOPY services/nginz/third_party /src/third_party\nRUN apk add inotify-tools=3.20.1-r1 dumb-init=1.2.1-r0 bash=4.4.19-r1 curl=7.61.1-r3 --no-cache \\\n && export GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_gunzip_module --add-module=/src/third_party/nginx-zauth-module --add-module=/src/third_party/headers-more-nginx-module --add-module=/src/third_party/nginx-module-vts \" \\\n && addgroup -g 666 -S nginx \\\n && adduser -u 666 -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add libsodium-dev=1.0.16-r0 llvm-libunwind-dev=5.0.1-r0 gcc=6.4.0-r9 libc-dev=0.7.1-r0 make=4.2.1-r2 openssl-dev=1.0.2u-r0 pcre-dev=8.42-r0 zlib-dev=1.2.11-r1 linux-headers=4.4.6-r2 curl=7.61.1-r3 gnupg1=1.4.23-r0 libxslt-dev=1.1.33-r3 gd-dev=2.2.5-r4 geoip-dev=1.6.12-r1 --no-cache --virtual .build-deps \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add gettext=0.19.8.1-r2 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDepsTmp=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && runDeps=${runDepsTmp/so:libzauth.so/''} \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2020a-r0 --no-cache \\\n && apk add libsodium=1.0.16-r0 llvm-libunwind=5.0.1-r0 --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log \\\n && apk add libgcc=6.4.0-r9 --no-cache\nCOPY services/nginz/nginz_reload.sh /usr/bin/nginz_reload.sh\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/usr/bin/nginz_reload.sh\", \"-g\", \"daemon\", \"off\", \";\", \"-c\", \"/etc/wire/nginz/conf/nginx.conf\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Requires docker >= 17.05 (requires support for multi-stage builds)\nFROM alpine:3.8 AS libzauth-builder\n#  Compile libzauth\nCOPY libs/libzauth /src/libzauth\nRUN cd /src/libzauth/libzauth-c \\\n && apk add --no-cache make bash cargo libsodium-dev \\\n && make install\n#  Nginz container\nFROM alpine:3.8\nENV NGINX_VERSION=\"1.14.2\"\n#  Install libzauth\nCOPY --from=libzauth-builder /usr/local/include/zauth.h /usr/local/include/zauth.h\nCOPY --from=libzauth-builder /usr/local/lib/libzauth.so /usr/local/lib/libzauth.so\nCOPY --from=libzauth-builder /usr/local/lib/pkgconfig/libzauth.pc /usr/local/lib/pkgconfig/libzauth.pc\nCOPY services/nginz/third_party /src/third_party\nRUN apk add --no-cache inotify-tools dumb-init bash curl \\\n && export GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_gunzip_module --add-module=/src/third_party/nginx-zauth-module --add-module=/src/third_party/headers-more-nginx-module --add-module=/src/third_party/nginx-module-vts \" \\\n && addgroup -g 666 -S nginx \\\n && adduser -u 666 -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps libsodium-dev llvm-libunwind-dev gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 libxslt-dev gd-dev geoip-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDepsTmp=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && runDeps=${runDepsTmp/so:libzauth.so/''} \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && apk add --no-cache libsodium llvm-libunwind \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log \\\n && apk add --no-cache libgcc\nCOPY services/nginz/nginz_reload.sh /usr/bin/nginz_reload.sh\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/usr/bin/nginz_reload.sh\", \"-g\", \"daemon\", \"off\", \";\", \"-c\", \"/etc/wire/nginz/conf/nginx.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"20e741c94abbd596ef69e01ed0be3c66","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Requires docker >= 17.05 (requires support for multi-stage builds)\nFROM alpine:3.8 AS libzauth-builder\n#   Compile libzauth\nCOPY libs/libzauth /src/libzauth\nRUN cd /src/libzauth/libzauth-c \\\n && apk add --no-cache make bash cargo libsodium-dev \\\n && make install\n#   Nginz container\nFROM alpine:3.8\nENV NGINX_VERSION=\"1.14.2\"\n#   Install libzauth\nCOPY --from=libzauth-builder /usr/local/include/zauth.h /usr/local/include/zauth.h\nCOPY --from=libzauth-builder /usr/local/lib/libzauth.so /usr/local/lib/libzauth.so\nCOPY --from=libzauth-builder /usr/local/lib/pkgconfig/libzauth.pc /usr/local/lib/pkgconfig/libzauth.pc\nCOPY services/nginz/third_party /src/third_party\nRUN apk add --no-cache inotify-tools dumb-init bash curl \\\n && export GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_gunzip_module --add-module=/src/third_party/nginx-zauth-module --add-module=/src/third_party/headers-more-nginx-module --add-module=/src/third_party/nginx-module-vts \" \\\n && addgroup -g 666 -S nginx \\\n && adduser -u 666 -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps libsodium-dev llvm-libunwind-dev gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 libxslt-dev gd-dev geoip-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDepsTmp=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && runDeps=${runDepsTmp/so:libzauth.so/''} \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && apk add --no-cache libsodium llvm-libunwind \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log \\\n && apk add --no-cache libgcc\nCOPY services/nginz/nginz_reload.sh /usr/bin/nginz_reload.sh\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\nCMD [\"/usr/bin/nginz_reload.sh\", \"-g\", \"daemon\", \"off\", \";\", \"-c\", \"/etc/wire/nginz/conf/nginx.conf\"]\n","originalDockerfileUglifiedHash":"f3816ab120183d7c61bd9b6779addb24","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3bb219187a01c11fdc3636d1321045ccc25befc2.dockerfile"}