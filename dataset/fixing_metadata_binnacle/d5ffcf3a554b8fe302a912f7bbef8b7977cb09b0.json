{"seed":1082315182,"processedDockerfileHash":"991508e0549c34e5444eb133f9456d1c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils=1.2.35 ca-certificates=20210119~16.04.1 apt-transport-https=1.2.35 gnupg-curl=1.4.20-1ubuntu3.3 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 \\\n && NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 \\\n && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list \\\n && echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDA_VERSION=\"9.0.176\"\nENV NCCL_VERSION=\"2.4.2\"\nENV CUDA_PKG_VERSION=\"9-0=$CUDA_VERSION-1\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION -y \\\n && ln -s cuda-9.0 /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION libnccl2=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && apt-mark hold libnccl2 \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-9-0=9.0.176.3-1 cuda-cublas-dev-9-0=9.0.176.4-1 cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs\"\n#   NVIDIA docker 1.0.\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   NVIDIA container runtime.\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"\\\"cuda>=9.0\\\"\"\n#   PyTorch (Geometric) installation\nRUN rm /etc/apt/sources.list.d/cuda.list \\\n && rm /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 ca-certificates=20210119~16.04.1 vim=2:7.4.1689-3ubuntu1.5 sudo=1.8.16-0ubuntu1.10 git=1:2.7.4-0ubuntu1.10 bzip2=1.0.6-8ubuntu0.2 libx11-6=2:1.6.3-1ubuntu2.2 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Create a working directory.\nRUN mkdir /app\nWORKDIR /app\n#   Create a non-root user and switch to it.\nRUN adduser --disabled-password --gecos '' --shell /bin/bash user \\\n && chown -R user:user /app\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/90-user\nUSER user\n#   All users can use /home/user as their home directory.\nENV HOME=\"/home/user\"\nRUN chmod 777 /home/user\n#   Install Miniconda.\nRUN curl -so ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh\nENV PATH=\"/home/user/miniconda/bin:$PATH\"\nENV CONDA_AUTO_UPDATE_CONDA=\"false\"\n#   Create a Python 3.6 environment.\nRUN /home/user/miniconda/bin/conda install conda-build \\\n && /home/user/miniconda/bin/conda create -y --name py36 python=3.6.5 \\\n && /home/user/miniconda/bin/conda clean -ya\nENV CONDA_DEFAULT_ENV=\"py36\"\nENV CONDA_PREFIX=\"/home/user/miniconda/envs/$CONDA_DEFAULT_ENV\"\nENV PATH=\"$CONDA_PREFIX/bin:$PATH\"\n#   CUDA 9.0-specific steps.\nRUN conda install -y -c pytorch cuda90=1.0 magma-cuda90=2.4.0 \"pytorch=1.1.0=py3.6_cuda9.0.176_cudnn7.5.1_0\" torchvision=0.2.1 \\\n && conda clean -ya\n#   Install HDF5 Python bindings.\nRUN conda install -y h5py=2.8.0 \\\n && conda clean -ya\nRUN pip install h5py-cache==1.0\n#   Install TorchNet, a high-level framework for PyTorch.\nRUN pip install torchnet==0.0.4\n#   Install Requests, a Python library for making HTTP requests.\nRUN conda install -y requests=2.19.1 \\\n && conda clean -ya\n#   Install Graphviz.\nRUN conda install -y graphviz=2.38.0 \\\n && conda clean -ya\nRUN pip install graphviz==0.8.4\n#   Install OpenCV3 Python bindings.\nRUN sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends libgtk2.0-0 libcanberra-gtk-module \\\n && sudo rm -rf /var/lib/apt/lists/*\nRUN conda install -y -c menpo opencv3=3.1.0 \\\n && conda clean -ya\n#   Install PyTorch Geometric.\nRUN CPATH=/usr/local/cuda/include:$CPATH \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \\\n && DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH\nRUN pip install torch-scatter==2.1.1 --verbose --no-cache-dir \\\n && pip install torch-sparse==0.6.17 --verbose --no-cache-dir \\\n && pip install torch-cluster==1.6.1 --verbose --no-cache-dir \\\n && pip install torch-spline-conv==1.2.2 --verbose --no-cache-dir \\\n && pip install torch-geometric==2.3.0\n#   Set the default command to python3.\nCMD [\"python3\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils ca-certificates apt-transport-https gnupg-curl -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 \\\n && NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 \\\n && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list \\\n && echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDA_VERSION=\"9.0.176\"\nENV NCCL_VERSION=\"2.4.2\"\nENV CUDA_PKG_VERSION=\"9-0=$CUDA_VERSION-1\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION -y \\\n && ln -s cuda-9.0 /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION libnccl2=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && apt-mark hold libnccl2 \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-9-0=9.0.176.3-1 cuda-cublas-dev-9-0=9.0.176.4-1 cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs\"\n#  NVIDIA docker 1.0.\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#  NVIDIA container runtime.\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"\\\"cuda>=9.0\\\"\"\n#  PyTorch (Geometric) installation\nRUN rm /etc/apt/sources.list.d/cuda.list \\\n && rm /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install curl ca-certificates vim sudo git bzip2 libx11-6 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Create a working directory.\nRUN mkdir /app\nWORKDIR /app\n#  Create a non-root user and switch to it.\nRUN adduser --disabled-password --gecos '' --shell /bin/bash user \\\n && chown -R user:user /app\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/90-user\nUSER user\n#  All users can use /home/user as their home directory.\nENV HOME=\"/home/user\"\nRUN chmod 777 /home/user\n#  Install Miniconda.\nRUN curl -so ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh\nENV PATH=\"/home/user/miniconda/bin:$PATH\"\nENV CONDA_AUTO_UPDATE_CONDA=\"false\"\n#  Create a Python 3.6 environment.\nRUN /home/user/miniconda/bin/conda install conda-build \\\n && /home/user/miniconda/bin/conda create -y --name py36 python=3.6.5 \\\n && /home/user/miniconda/bin/conda clean -ya\nENV CONDA_DEFAULT_ENV=\"py36\"\nENV CONDA_PREFIX=\"/home/user/miniconda/envs/$CONDA_DEFAULT_ENV\"\nENV PATH=\"$CONDA_PREFIX/bin:$PATH\"\n#  CUDA 9.0-specific steps.\nRUN conda install -y -c pytorch cuda90=1.0 magma-cuda90=2.4.0 \"pytorch=1.1.0=py3.6_cuda9.0.176_cudnn7.5.1_0\" torchvision=0.2.1 \\\n && conda clean -ya\n#  Install HDF5 Python bindings.\nRUN conda install -y h5py=2.8.0 \\\n && conda clean -ya\nRUN pip install h5py-cache==1.0\n#  Install TorchNet, a high-level framework for PyTorch.\nRUN pip install torchnet==0.0.4\n#  Install Requests, a Python library for making HTTP requests.\nRUN conda install -y requests=2.19.1 \\\n && conda clean -ya\n#  Install Graphviz.\nRUN conda install -y graphviz=2.38.0 \\\n && conda clean -ya\nRUN pip install graphviz==0.8.4\n#  Install OpenCV3 Python bindings.\nRUN sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends libgtk2.0-0 libcanberra-gtk-module \\\n && sudo rm -rf /var/lib/apt/lists/*\nRUN conda install -y -c menpo opencv3=3.1.0 \\\n && conda clean -ya\n#  Install PyTorch Geometric.\nRUN CPATH=/usr/local/cuda/include:$CPATH \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \\\n && DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH\nRUN pip install torch-scatter --verbose --no-cache-dir \\\n && pip install torch-sparse --verbose --no-cache-dir \\\n && pip install torch-cluster --verbose --no-cache-dir \\\n && pip install torch-spline-conv --verbose --no-cache-dir \\\n && pip install torch-geometric\n#  Set the default command to python3.\nCMD [\"python3\"]\n","injectedSmells":[],"originalDockerfileHash":"87cc26138865c73fb484e5f44082d1ae","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils ca-certificates apt-transport-https gnupg-curl -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 \\\n && NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 \\\n && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \\\n && apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub \\\n && echo \"$NVIDIA_GPGKEY_SUM cudasign.pub\" | sha256sum -c --strict - \\\n && rm cudasign.pub \\\n && echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list \\\n && echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nENV CUDA_VERSION=\"9.0.176\"\nENV NCCL_VERSION=\"2.4.2\"\nENV CUDA_PKG_VERSION=\"9-0=$CUDA_VERSION-1\"\nENV CUDNN_VERSION=\"7.4.2.24\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-cudart-$CUDA_PKG_VERSION -y \\\n && ln -s cuda-9.0 /usr/local/cuda \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-libraries-$CUDA_PKG_VERSION libnccl2=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && apt-mark hold libnccl2 \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install --no-install-recommends cuda-core-9-0=9.0.176.3-1 cuda-cublas-dev-9-0=9.0.176.4-1 cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION libnccl-dev=$NCCL_VERSION-1+cuda9.0 -y --allow-unauthenticated \\\n && rm -rf /var/lib/apt/lists/*\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs\"\n#   NVIDIA docker 1.0.\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf \\\n && echo \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib:/usr/local/nvidia/lib64\"\n#   NVIDIA container runtime.\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"\\\"cuda>=9.0\\\"\"\n#   PyTorch (Geometric) installation\nRUN rm /etc/apt/sources.list.d/cuda.list \\\n && rm /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install curl ca-certificates vim sudo git bzip2 libx11-6 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Create a working directory.\nRUN mkdir /app\nWORKDIR /app\n#   Create a non-root user and switch to it.\nRUN adduser --disabled-password --gecos '' --shell /bin/bash user \\\n && chown -R user:user /app\nRUN echo \"user ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/90-user\nUSER user\n#   All users can use /home/user as their home directory.\nENV HOME=\"/home/user\"\nRUN chmod 777 /home/user\n#   Install Miniconda.\nRUN curl -so ~/miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-4.5.12-Linux-x86_64.sh \\\n && chmod +x ~/miniconda.sh \\\n && ~/miniconda.sh -b -p ~/miniconda \\\n && rm ~/miniconda.sh\nENV PATH=\"/home/user/miniconda/bin:$PATH\"\nENV CONDA_AUTO_UPDATE_CONDA=\"false\"\n#   Create a Python 3.6 environment.\nRUN /home/user/miniconda/bin/conda install conda-build \\\n && /home/user/miniconda/bin/conda create -y --name py36 python=3.6.5 \\\n && /home/user/miniconda/bin/conda clean -ya\nENV CONDA_DEFAULT_ENV=\"py36\"\nENV CONDA_PREFIX=\"/home/user/miniconda/envs/$CONDA_DEFAULT_ENV\"\nENV PATH=\"$CONDA_PREFIX/bin:$PATH\"\n#   CUDA 9.0-specific steps.\nRUN conda install -y -c pytorch cuda90=1.0 magma-cuda90=2.4.0 \"pytorch=1.1.0=py3.6_cuda9.0.176_cudnn7.5.1_0\" torchvision=0.2.1 \\\n && conda clean -ya\n#   Install HDF5 Python bindings.\nRUN conda install -y h5py=2.8.0 \\\n && conda clean -ya\nRUN pip install h5py-cache==1.0\n#   Install TorchNet, a high-level framework for PyTorch.\nRUN pip install torchnet==0.0.4\n#   Install Requests, a Python library for making HTTP requests.\nRUN conda install -y requests=2.19.1 \\\n && conda clean -ya\n#   Install Graphviz.\nRUN conda install -y graphviz=2.38.0 \\\n && conda clean -ya\nRUN pip install graphviz==0.8.4\n#   Install OpenCV3 Python bindings.\nRUN sudo apt-get update \\\n && sudo apt-get install -y --no-install-recommends libgtk2.0-0 libcanberra-gtk-module \\\n && sudo rm -rf /var/lib/apt/lists/*\nRUN conda install -y -c menpo opencv3=3.1.0 \\\n && conda clean -ya\n#   Install PyTorch Geometric.\nRUN CPATH=/usr/local/cuda/include:$CPATH \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \\\n && DYLD_LIBRARY_PATH=/usr/local/cuda/lib:$DYLD_LIBRARY_PATH\nRUN pip install torch-scatter --verbose --no-cache-dir \\\n && pip install torch-sparse --verbose --no-cache-dir \\\n && pip install torch-cluster --verbose --no-cache-dir \\\n && pip install torch-spline-conv --verbose --no-cache-dir \\\n && pip install torch-geometric\n#   Set the default command to python3.\nCMD [\"python3\"]\n","originalDockerfileUglifiedHash":"a76b42252820d8662331a9801e639b00","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d5ffcf3a554b8fe302a912f7bbef8b7977cb09b0.dockerfile"}