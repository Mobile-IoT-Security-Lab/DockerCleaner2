{"seed":3728148380,"processedDockerfileHash":"f7c503f06ade842aed6cd86ba7af1ff4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Copyright 2015 Google Inc. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM debian:jessie\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV MAVEN_VERSION=\"3.2.2\"\nENV GRADLE_VERSION=\"2.3\"\n#   Set an environment variable to configure which container server to use.\n#   We use the Google Container Registry:\n#       https://cloud.google.com/tools/container-registry/.\nENV GCLOUD_CONTAINER_SERVER=\"gcr.io\"\n#   Eagerly run this authorization script upon startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/gcloud_docker_auth.sh\\\"\"\n#   Install common packages\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apparmor apt-transport-https ca-certificates-java cron curl rsyslog emacs-nox gcc git initramfs-tools iptables jq less locales lxc make man-db manpages mercurial mysql-client nano nginx openjdk-7-jre-headless openssh-server python python3 python-dev python-setuptools sudo supervisor symlinks unzip vim wget zip -y -qq \\\n && apt-get clean \\\n && easy_install -U pip \\\n && pip install crcmod==1.7 -U\n#   Install a UTF-8 locale by default.\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=en_US.UTF-8\n#   Install Docker.\nRUN echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nRUN apt-get update \\\n && apt-get install --no-install-recommends lxc-docker-1.9.1 -y \\\n && apt-get clean\n#   Add jpetazzo's magic wrapper.\n#   This has been modified to start docker using 'service',\n#   which means setting DOCKER_DAEMON_ARGS does nothing.\n#   Instead, you can set DOCKER_SETTINGS_FILE to change\n#   /etc/default/docker prior to starting the docker service.\nCOPY third_party/jpetazzo/dind/wrapdocker /google/scripts/wrapdocker.sh\nRUN chmod +x /google/scripts/wrapdocker.sh\n#   Must be excluded from aufs.\nVOLUME /var/lib/docker\n#   Make the docker daemon log to a file, so we can realistically use the shell.\nENV LOG=\"file\"\nENV DOCKER_HOST=\"unix:///var/run/docker.sock\"\n#   Add our onrun utility, which allows commands to be run on startup\n#   by adding them to the ONRUN environment variable. For example:\n#       ENV ONRUN $ONRUN \"echo running my command\"\nCOPY onrun.sh /google/scripts/onrun.sh\nRUN chmod +x /google/scripts/onrun.sh\n#   Now run the wrapdocker script on startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/wrapdocker.sh\\\"\"\n#   Configure sshd to be used for Devshell connections.\nRUN rm -fv /etc/ssh/ssh_host_*\nRUN mkdir /var/run/sshd\nCOPY sshd_config /etc/ssh/\n#   Add devshell startup logic.\nCOPY devshell/startup.sh /google/devshell/startup.sh\nCOPY devshell/authorized_keys.sh /google/devshell/authorized_keys.sh\nCOPY devshell/bashrc.google /google/devshell/bashrc.google\nRUN chmod -R 644 /google/devshell/bashrc.google\nRUN mkdir /google/devshell/bashrc.google.d\nENV ONRUN=\"$ONRUN \\\"/google/devshell/startup.sh\\\"\"\n#   Git credential helpers for source.developers.google.com and Gerrit.\nCOPY gitconfig /etc/gitconfig\nRUN chmod -R 644 /etc/gitconfig\n#   Make it so the user does not need to type in their password for sudo\nRUN echo \"%sudo ALL=NOPASSWD: ALL\" >> /etc/sudoers\n#   Start the cron daemon.\nENV ONRUN=\"$ONRUN \\\"cron\\\"\"\n#   Add cron job to run \"gcloud preview docker --authorize_only\" every 5 minutes.\nCOPY gcloud_docker_auth.sh /google/scripts/gcloud_docker_auth.sh\nRUN chmod +x /google/scripts/gcloud_docker_auth.sh\nRUN (crontab -l 2> /dev/null;echo '*/5 * * * * /google/scripts/gcloud_docker_auth.sh' ) | crontab\n#   Install the Google Cloud SDK.\nRUN wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip\nENV CLOUD_SDK=\"/google/google-cloud-sdk\"\nRUN $CLOUD_SDK/install.sh --usage-reporting=true --rc-path=/etc/bash.bashrc --bash-completion=true --path-update=true --disable-installation-options\nENV PATH=\"$CLOUD_SDK/bin:$PATH\"\n#   Install the gcloud preview app support and Managed VMs.\nRUN yes | gcloud components update core gcloud\n#   Install the Java 7 JDK.\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && apt-get clean\n#   Install Maven $MAVEN_VERSION\nRUN wget http://archive.apache.org/dist/maven/binaries/apache-maven-$MAVEN_VERSION-bin.zip \\\n && unzip apache-maven-$MAVEN_VERSION-bin.zip \\\n && rm apache-maven-$MAVEN_VERSION-bin.zip\nENV PATH=\"/apache-maven-$MAVEN_VERSION/bin:$PATH\"\n#   Install Gradle $GRADLE_VERSION\nRUN wget http://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip \\\n && unzip gradle-$GRADLE_VERSION-bin.zip \\\n && rm gradle-$GRADLE_VERSION-bin.zip\nENV PATH=\"/gradle-$GRADLE_VERSION/bin:$PATH\"\nENTRYPOINT [\"/bin/bash\", \"/google/scripts/onrun.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Copyright 2015 Google Inc. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\nFROM debian:jessie\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV MAVEN_VERSION=\"3.2.2\"\nENV GRADLE_VERSION=\"2.3\"\n#  Set an environment variable to configure which container server to use.\n#  We use the Google Container Registry:\n#      https://cloud.google.com/tools/container-registry/.\nENV GCLOUD_CONTAINER_SERVER=\"gcr.io\"\n#  Eagerly run this authorization script upon startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/gcloud_docker_auth.sh\\\"\"\n#  Install common packages\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apparmor apt-transport-https ca-certificates-java cron curl rsyslog emacs-nox gcc git initramfs-tools iptables jq less locales lxc make man-db manpages mercurial mysql-client nano nginx openjdk-7-jre-headless openssh-server python python3 python-dev python-setuptools sudo supervisor symlinks unzip vim wget zip -y -qq \\\n && apt-get clean \\\n && easy_install -U pip \\\n && pip install crcmod -U\n#  Install a UTF-8 locale by default.\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=en_US.UTF-8\n#  Install Docker.\nRUN echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nRUN apt-get update \\\n && apt-get install --no-install-recommends lxc-docker-1.9.1 -y \\\n && apt-get clean\n#  Add jpetazzo's magic wrapper.\n#  This has been modified to start docker using 'service',\n#  which means setting DOCKER_DAEMON_ARGS does nothing.\n#  Instead, you can set DOCKER_SETTINGS_FILE to change\n#  /etc/default/docker prior to starting the docker service.\nADD third_party/jpetazzo/dind/wrapdocker /google/scripts/wrapdocker.sh\nRUN chmod +x /google/scripts/wrapdocker.sh\n#  Must be excluded from aufs.\nVOLUME /var/lib/docker\n#  Make the docker daemon log to a file, so we can realistically use the shell.\nENV LOG=\"file\"\nENV DOCKER_HOST=\"unix:///var/run/docker.sock\"\n#  Add our onrun utility, which allows commands to be run on startup\n#  by adding them to the ONRUN environment variable. For example:\n#      ENV ONRUN $ONRUN \"echo running my command\"\nADD onrun.sh /google/scripts/onrun.sh\nRUN chmod +x /google/scripts/onrun.sh\n#  Now run the wrapdocker script on startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/wrapdocker.sh\\\"\"\n#  Configure sshd to be used for Devshell connections.\nRUN rm -fv /etc/ssh/ssh_host_*\nRUN mkdir /var/run/sshd\nADD sshd_config /etc/ssh/\n#  Add devshell startup logic.\nADD devshell/startup.sh /google/devshell/startup.sh\nADD devshell/authorized_keys.sh /google/devshell/authorized_keys.sh\nADD devshell/bashrc.google /google/devshell/bashrc.google\nRUN chmod -R 644 /google/devshell/bashrc.google\nRUN mkdir /google/devshell/bashrc.google.d\nENV ONRUN=\"$ONRUN \\\"/google/devshell/startup.sh\\\"\"\n#  Git credential helpers for source.developers.google.com and Gerrit.\nADD gitconfig /etc/gitconfig\nRUN chmod -R 644 /etc/gitconfig\n#  Make it so the user does not need to type in their password for sudo\nRUN echo \"%sudo ALL=NOPASSWD: ALL\" >> /etc/sudoers\n#  Start the cron daemon.\nENV ONRUN=\"$ONRUN \\\"cron\\\"\"\n#  Add cron job to run \"gcloud preview docker --authorize_only\" every 5 minutes.\nADD gcloud_docker_auth.sh /google/scripts/gcloud_docker_auth.sh\nRUN chmod +x /google/scripts/gcloud_docker_auth.sh\nRUN (crontab -l 2> /dev/null;echo '*/5 * * * * /google/scripts/gcloud_docker_auth.sh' ) | crontab\n#  Install the Google Cloud SDK.\nRUN wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip\nENV CLOUD_SDK=\"/google/google-cloud-sdk\"\nRUN $CLOUD_SDK/install.sh --usage-reporting=true --rc-path=/etc/bash.bashrc --bash-completion=true --path-update=true --disable-installation-options\nENV PATH=\"$CLOUD_SDK/bin:$PATH\"\n#  Install the gcloud preview app support and Managed VMs.\nRUN yes | gcloud components update core gcloud\n#  Install the Java 7 JDK.\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && apt-get clean\n#  Install Maven $MAVEN_VERSION\nRUN wget http://archive.apache.org/dist/maven/binaries/apache-maven-$MAVEN_VERSION-bin.zip \\\n && unzip apache-maven-$MAVEN_VERSION-bin.zip \\\n && rm apache-maven-$MAVEN_VERSION-bin.zip\nENV PATH=\"/apache-maven-$MAVEN_VERSION/bin:$PATH\"\n#  Install Gradle $GRADLE_VERSION\nRUN wget http://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip \\\n && unzip gradle-$GRADLE_VERSION-bin.zip \\\n && rm gradle-$GRADLE_VERSION-bin.zip\nENV PATH=\"/gradle-$GRADLE_VERSION/bin:$PATH\"\nENTRYPOINT [\"/bin/bash\", \"/google/scripts/onrun.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"cdd6e81155d1f1189476ea18de37079c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Copyright 2015 Google Inc. All Rights Reserved.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM debian:jessie\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV MAVEN_VERSION=\"3.2.2\"\nENV GRADLE_VERSION=\"2.3\"\n#   Set an environment variable to configure which container server to use.\n#   We use the Google Container Registry:\n#       https://cloud.google.com/tools/container-registry/.\nENV GCLOUD_CONTAINER_SERVER=\"gcr.io\"\n#   Eagerly run this authorization script upon startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/gcloud_docker_auth.sh\\\"\"\n#   Install common packages\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends apparmor apt-transport-https ca-certificates-java cron curl rsyslog emacs-nox gcc git initramfs-tools iptables jq less locales lxc make man-db manpages mercurial mysql-client nano nginx openjdk-7-jre-headless openssh-server python python3 python-dev python-setuptools sudo supervisor symlinks unzip vim wget zip -y -qq \\\n && apt-get clean \\\n && easy_install -U pip \\\n && pip install crcmod -U\n#   Install a UTF-8 locale by default.\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && update-locale LANG=en_US.UTF-8\n#   Install Docker.\nRUN echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nRUN apt-get update \\\n && apt-get install --no-install-recommends lxc-docker-1.9.1 -y \\\n && apt-get clean\n#   Add jpetazzo's magic wrapper.\n#   This has been modified to start docker using 'service',\n#   which means setting DOCKER_DAEMON_ARGS does nothing.\n#   Instead, you can set DOCKER_SETTINGS_FILE to change\n#   /etc/default/docker prior to starting the docker service.\nADD third_party/jpetazzo/dind/wrapdocker /google/scripts/wrapdocker.sh\nRUN chmod +x /google/scripts/wrapdocker.sh\n#   Must be excluded from aufs.\nVOLUME /var/lib/docker\n#   Make the docker daemon log to a file, so we can realistically use the shell.\nENV LOG=\"file\"\nENV DOCKER_HOST=\"unix:///var/run/docker.sock\"\n#   Add our onrun utility, which allows commands to be run on startup\n#   by adding them to the ONRUN environment variable. For example:\n#       ENV ONRUN $ONRUN \"echo running my command\"\nADD onrun.sh /google/scripts/onrun.sh\nRUN chmod +x /google/scripts/onrun.sh\n#   Now run the wrapdocker script on startup.\nENV ONRUN=\"$ONRUN \\\"/google/scripts/wrapdocker.sh\\\"\"\n#   Configure sshd to be used for Devshell connections.\nRUN rm -fv /etc/ssh/ssh_host_*\nRUN mkdir /var/run/sshd\nADD sshd_config /etc/ssh/\n#   Add devshell startup logic.\nADD devshell/startup.sh /google/devshell/startup.sh\nADD devshell/authorized_keys.sh /google/devshell/authorized_keys.sh\nADD devshell/bashrc.google /google/devshell/bashrc.google\nRUN chmod -R 644 /google/devshell/bashrc.google\nRUN mkdir /google/devshell/bashrc.google.d\nENV ONRUN=\"$ONRUN \\\"/google/devshell/startup.sh\\\"\"\n#   Git credential helpers for source.developers.google.com and Gerrit.\nADD gitconfig /etc/gitconfig\nRUN chmod -R 644 /etc/gitconfig\n#   Make it so the user does not need to type in their password for sudo\nRUN echo \"%sudo ALL=NOPASSWD: ALL\" >> /etc/sudoers\n#   Start the cron daemon.\nENV ONRUN=\"$ONRUN \\\"cron\\\"\"\n#   Add cron job to run \"gcloud preview docker --authorize_only\" every 5 minutes.\nADD gcloud_docker_auth.sh /google/scripts/gcloud_docker_auth.sh\nRUN chmod +x /google/scripts/gcloud_docker_auth.sh\nRUN (crontab -l 2> /dev/null;echo '*/5 * * * * /google/scripts/gcloud_docker_auth.sh' ) | crontab\n#   Install the Google Cloud SDK.\nRUN wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip google-cloud-sdk.zip -d /google/ \\\n && rm google-cloud-sdk.zip\nENV CLOUD_SDK=\"/google/google-cloud-sdk\"\nRUN $CLOUD_SDK/install.sh --usage-reporting=true --rc-path=/etc/bash.bashrc --bash-completion=true --path-update=true --disable-installation-options\nENV PATH=\"$CLOUD_SDK/bin:$PATH\"\n#   Install the gcloud preview app support and Managed VMs.\nRUN yes | gcloud components update core gcloud\n#   Install the Java 7 JDK.\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-7-jdk -y \\\n && apt-get clean\n#   Install Maven $MAVEN_VERSION\nRUN wget http://archive.apache.org/dist/maven/binaries/apache-maven-$MAVEN_VERSION-bin.zip \\\n && unzip apache-maven-$MAVEN_VERSION-bin.zip \\\n && rm apache-maven-$MAVEN_VERSION-bin.zip\nENV PATH=\"/apache-maven-$MAVEN_VERSION/bin:$PATH\"\n#   Install Gradle $GRADLE_VERSION\nRUN wget http://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip \\\n && unzip gradle-$GRADLE_VERSION-bin.zip \\\n && rm gradle-$GRADLE_VERSION-bin.zip\nENV PATH=\"/gradle-$GRADLE_VERSION/bin:$PATH\"\nENTRYPOINT [\"/bin/bash\", \"/google/scripts/onrun.sh\"]\n","originalDockerfileUglifiedHash":"4073b527d9a2dd62afe2db55fb4c3475","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6a37db2d6ad25fe9c62369e3a4808bd0c5a2284f.dockerfile"}