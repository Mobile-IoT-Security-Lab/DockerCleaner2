{"seed":3272020795,"processedDockerfileHash":"81b54cfebc4343f314d72cc9cf7c781b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   ===============================================================================\n#   Dockerfile\n#     \"Wordpress + Nginx + Cached + NoDB\" docker image - production ready\n#\n#   What's it included:\n#\n#   - php-fpm\n#   - Wordpress - build with the **latest** version\n#   - Nginx - as reverse proxy, HTTP / HTTPS enabled.\n#   - Cache - fastcgi-cache, fastcgi_cache_purge, Opcache\n#   - No DB included.\n#\n#   Optional\n#\n#   - Deploy `letsencrypt` SSL.\n#   - Deploy normal SSL.\n#\n#   @link https://letsencrypt.org/ | letsencrypt\n#\n#   It is based on Ubuntu 14.04 LTS\n#   ===============================================================================\n#   Set the base image to Ubuntu\nFROM ubuntu:14.04\n#   File Author / Maintainer\nMAINTAINER Lei SHI <foxshee@gmail.com>\n#   Default HTTP and HTTPS ports\nEXPOSE 80/tcp 443/tcp\n#   ===============================================================================\n#   Env. Setup\n#\n#   Keep upstart from complaining\nRUN dpkg-divert --local --rename --add /sbin/initctl \\\n && ln -sf /bin/true /sbin/initctl\n#   Let the container know that there is no tty\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update the repository sources list and finish upgrade\nRUN : \\\n && apt-get -y upgrade\n#   ----------------------------------------------------------\n#   Dependencies\n#   ----------------------------------------------------------\n#   Basic Dependencies\n#\n#   The basic dependecies includes:\n#\n#   - PHP & fpm\n#   - MySQL client\n#   - curl\n#   - Git\n#   - pwgen - Open-Source Password Generator\n#   - python-setuptools - for `easy_install`\n#\nRUN (apt-get update ;apt-get install --no-install-recommends mysql-client=5.5.62-0ubuntu0.14.04.1 php5-fpm=5.5.9+dfsg-1ubuntu4.29 php5-mysql=5.5.9+dfsg-1ubuntu4.29 pwgen=2.06-1ubuntu4 python-setuptools=3.3-1ubuntu2 curl=7.35.0-1ubuntu2.20 git=1:1.9.1-1ubuntu0.10 unzip=6.0-9ubuntu1.5 -y )\n#   **Wordpress** Dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends php5-curl=5.5.9+dfsg-1ubuntu4.29 php5-gd=5.5.9+dfsg-1ubuntu4.29 php5-intl=5.5.9+dfsg-1ubuntu4.29 php-pear=5.5.9+dfsg-1ubuntu4.29 php5-imagick=3.1.2-1build1 php5-imap=5.4.6-0ubuntu5.1 php5-mcrypt=5.4.6-0ubuntu5 php5-memcache=3.0.8-4build1 php5-ming=1:0.4.5-1ubuntu5 php5-ps=1.3.7-1ubuntu1 php5-pspell=5.5.9+dfsg-1ubuntu4.29 php5-recode=5.5.9+dfsg-1ubuntu4.29 php5-sqlite=5.5.9+dfsg-1ubuntu4.29 php5-tidy=5.5.9+dfsg-1ubuntu4.29 php5-xmlrpc=5.5.9+dfsg-1ubuntu4.29 php5-xsl=5.5.9+dfsg-1ubuntu4.29 -y )\n#  ## ---- FIX -----\n#   Fix 'add-apt-repository: not found' in Ubuntu 14.04 LTS\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 python-software-properties=0.92.37.8 -y )\n#   ----------------------------------------------------------\n#   Nginx\n#\n#     Nginx compiled with `fastcgi_cache` and `fastcgi_cache_purge`\n#\n#   @link https://easyengine.io/wordpress-nginx/tutorials/single-site/fastcgi-cache-with-purging/\n#   ----------------------------------------------------------\nRUN add-apt-repository ppa:rtcamp/nginx \\\n && apt-get update \\\n && apt-get remove nginx* \\\n && (apt-get update ;apt-get install --no-install-recommends nginx-custom -y )\n#  ###########################################################\n#   Configurations\n#\n#   ----------------------------------------------------------\n#   Nginx Config\n#   ----------------------------------------------------------\n#   Create uer for Nginx running\nRUN adduser --system --no-create-home --shell /bin/false --group --disabled-login www-front\n#   Copy config files to `/etc/nginx/` folder\nCOPY config/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx-site-http.conf /etc/nginx/nginx-site-http.conf\nCOPY config/nginx-site-https.conf /etc/nginx/nginx-site-https.conf\n#   Default **site** config - HTTP\n#   Later if need to enforce SSL, use `nginx-site-http.conf` instead.\nCOPY config/nginx-site-http.conf /etc/nginx/sites-available/default\nCOPY config/nginx-ssl.conf /etc/nginx/ssl-template.conf\nCOPY config/nginx-restrictions.conf /etc/nginx/restrictions.conf\n#   ----------------------------------------------------------\n#   PHP-fpm Config\n#   ----------------------------------------------------------\nRUN sed -i -e \"s/;cgi.fix_pathinfo\\s*=\\s*1/cgi.fix_pathinfo = 0/g; s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g; s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\n#  RUN sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php5/fpm/php-fpm.conf\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g; s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g; s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n#  RUN sed -i -e \"s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g\" /etc/php5/fpm/pool.d/www.conf\n#  RUN sed -i -e \"s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n#   ----------------------------------------------------------\n#   Opcode Config\n#   ----------------------------------------------------------\nRUN sed -i -e\"s/^;opcache.enable\\s*=\\s*0/opcache.enable = 1/; s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n#  RUN sed -i -e\"s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n#   ===============================================================================\n#   Install & Config Supervisor\n#\n#   Supervisor is a process manager which makes managing a number of long-running programs a trivial task\n#     by providing a consistent interface through which they can be monitored and controlled.\n#\n#   it uses `easy_install` (from `python-setuptools`) to install **supervisor**.\n#\n#   @link http://supervisord.org/#\n#\nRUN /usr/bin/easy_install supervisor \\\n && /usr/bin/easy_install supervisor-stdout\nCOPY config/supervisord.conf /etc/supervisord.conf\n#   ===============================================================================\n#   Install Wordpress\n#\n#   Get the code of  **latest** version.\nRUN cd /usr/share/nginx/ \\\n && curl -o wp-latest.tar.gz https://wordpress.org/latest.tar.gz \\\n && tar -xvf wp-latest.tar.gz \\\n && rm wp-latest.tar.gz\n#   Target **webroot** - `/usr/share/nginx/www`\nRUN rm -rf /usr/share/nginx/www \\\n && mv /usr/share/nginx/wordpress /usr/share/nginx/www \\\n && chown -R www-data:www-data /usr/share/nginx/www\n#   ===============================================================================\n#   System Initialization\n#\n#  # Copy the **pre-defined** bash script\nCOPY bash/init.sh /init.sh\n#  # Modify the permisison - make sure they are excuatable\nRUN chmod 755 /init.sh\n#   Set up default CMD\nCMD [\"/bin/bash\", \"/init.sh\"]\n#   ===============================================================================\n#   Copy \"optional\" scripts\n#\n#   Under `/addon` folder.\n#\n#   `letsencrypt` SSL related\n#   @link https://letsencrypt.org/ | letsencrypt\nCOPY bash/ssl-letsencrypt.sh /addon/letsencrypt/ssl-letsencrypt.sh\n#   Normal SSL related\nCOPY bash/ssl.sh /addon/ssl.sh\n#   Install WP plugins\nCOPY bash/wp-install-plugins.sh /addon/wp-install-plugins.sh\n#   ===============================================================================\n#   Volume Mounting\n#\n#   - Wprdpress webroot\n#   - Log\n#\n#   Mount the volumns\nVOLUME [\"/usr/share/nginx/www\", \"/var/log\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  ===============================================================================\n#  Dockerfile\n#    \"Wordpress + Nginx + Cached + NoDB\" docker image - production ready\n#\n#  What's it included:\n#\n#  - php-fpm\n#  - Wordpress - build with the **latest** version\n#  - Nginx - as reverse proxy, HTTP / HTTPS enabled.\n#  - Cache - fastcgi-cache, fastcgi_cache_purge, Opcache\n#  - No DB included.\n#\n#  Optional\n#\n#  - Deploy `letsencrypt` SSL.\n#  - Deploy normal SSL.\n#\n#  @link https://letsencrypt.org/ | letsencrypt\n#\n#  It is based on Ubuntu 14.04 LTS\n#  ===============================================================================\n#  Set the base image to Ubuntu\nFROM ubuntu:14.04\n#  File Author / Maintainer\nMAINTAINER Lei SHI <foxshee@gmail.com>\n#  Default HTTP and HTTPS ports\nEXPOSE 80/tcp 443/tcp\n#  ===============================================================================\n#  Env. Setup\n#\n#  Keep upstart from complaining\nRUN dpkg-divert --local --rename --add /sbin/initctl \\\n && ln -sf /bin/true /sbin/initctl\n#  Let the container know that there is no tty\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Update the repository sources list and finish upgrade\nRUN apt-get update \\\n && apt-get -y upgrade\n#  ----------------------------------------------------------\n#  Dependencies\n#  ----------------------------------------------------------\n#  Basic Dependencies\n#\n#  The basic dependecies includes:\n#\n#  - PHP & fpm\n#  - MySQL client\n#  - curl\n#  - Git\n#  - pwgen - Open-Source Password Generator\n#  - python-setuptools - for `easy_install`\n#\nRUN apt-get install mysql-client php5-fpm php5-mysql pwgen python-setuptools curl git unzip -y\n#  **Wordpress** Dependencies\nRUN apt-get install php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-sqlite php5-tidy php5-xmlrpc php5-xsl -y\n# ## ---- FIX -----\n#  Fix 'add-apt-repository: not found' in Ubuntu 14.04 LTS\nRUN apt-get install software-properties-common python-software-properties -y\n#  ----------------------------------------------------------\n#  Nginx\n#\n#    Nginx compiled with `fastcgi_cache` and `fastcgi_cache_purge`\n#\n#  @link https://easyengine.io/wordpress-nginx/tutorials/single-site/fastcgi-cache-with-purging/\n#  ----------------------------------------------------------\nRUN add-apt-repository ppa:rtcamp/nginx \\\n && apt-get update \\\n && apt-get remove nginx* \\\n && apt-get install nginx-custom -y\n# ###########################################################\n#  Configurations\n#\n#  ----------------------------------------------------------\n#  Nginx Config\n#  ----------------------------------------------------------\n#  Create uer for Nginx running\nRUN adduser --system --no-create-home --shell /bin/false --group --disabled-login www-front\n#  Copy config files to `/etc/nginx/` folder\nCOPY config/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx-site-http.conf /etc/nginx/nginx-site-http.conf\nCOPY config/nginx-site-https.conf /etc/nginx/nginx-site-https.conf\n#  Default **site** config - HTTP\n#  Later if need to enforce SSL, use `nginx-site-http.conf` instead.\nCOPY config/nginx-site-http.conf /etc/nginx/sites-available/default\nCOPY config/nginx-ssl.conf /etc/nginx/ssl-template.conf\nCOPY config/nginx-restrictions.conf /etc/nginx/restrictions.conf\n#  ----------------------------------------------------------\n#  PHP-fpm Config\n#  ----------------------------------------------------------\nRUN sed -i -e \"s/;cgi.fix_pathinfo\\s*=\\s*1/cgi.fix_pathinfo = 0/g; s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g; s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\n# RUN sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php5/fpm/php-fpm.conf\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g; s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g; s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n# RUN sed -i -e \"s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g\" /etc/php5/fpm/pool.d/www.conf\n# RUN sed -i -e \"s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n#  ----------------------------------------------------------\n#  Opcode Config\n#  ----------------------------------------------------------\nRUN sed -i -e\"s/^;opcache.enable\\s*=\\s*0/opcache.enable = 1/; s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n# RUN sed -i -e\"s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n#  ===============================================================================\n#  Install & Config Supervisor\n#\n#  Supervisor is a process manager which makes managing a number of long-running programs a trivial task\n#    by providing a consistent interface through which they can be monitored and controlled.\n#\n#  it uses `easy_install` (from `python-setuptools`) to install **supervisor**.\n#\n#  @link http://supervisord.org/#\n#\nRUN /usr/bin/easy_install supervisor \\\n && /usr/bin/easy_install supervisor-stdout\nCOPY config/supervisord.conf /etc/supervisord.conf\n#  ===============================================================================\n#  Install Wordpress\n#\n#  Get the code of  **latest** version.\nRUN cd /usr/share/nginx/ \\\n && curl -o wp-latest.tar.gz https://wordpress.org/latest.tar.gz \\\n && tar -xvf wp-latest.tar.gz \\\n && rm wp-latest.tar.gz\n#  Target **webroot** - `/usr/share/nginx/www`\nRUN rm -rf /usr/share/nginx/www \\\n && mv /usr/share/nginx/wordpress /usr/share/nginx/www \\\n && chown -R www-data:www-data /usr/share/nginx/www\n#  ===============================================================================\n#  System Initialization\n#\n# # Copy the **pre-defined** bash script\nCOPY bash/init.sh /init.sh\n# # Modify the permisison - make sure they are excuatable\nRUN chmod 755 /init.sh\n#  Set up default CMD\nCMD [\"/bin/bash\", \"/init.sh\"]\n#  ===============================================================================\n#  Copy \"optional\" scripts\n#\n#  Under `/addon` folder.\n#\n#  `letsencrypt` SSL related\n#  @link https://letsencrypt.org/ | letsencrypt\nCOPY bash/ssl-letsencrypt.sh /addon/letsencrypt/ssl-letsencrypt.sh\n#  Normal SSL related\nCOPY bash/ssl.sh /addon/ssl.sh\n#  Install WP plugins\nCOPY bash/wp-install-plugins.sh /addon/wp-install-plugins.sh\n#  ===============================================================================\n#  Volume Mounting\n#\n#  - Wprdpress webroot\n#  - Log\n#\n#  Mount the volumns\nVOLUME [\"/usr/share/nginx/www\", \"/var/log\"]\n","injectedSmells":[],"originalDockerfileHash":"d830c0876e5d0dabeacb8aeac307133b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   ===============================================================================\n#   Dockerfile\n#     \"Wordpress + Nginx + Cached + NoDB\" docker image - production ready\n#\n#   What's it included:\n#\n#   - php-fpm\n#   - Wordpress - build with the **latest** version\n#   - Nginx - as reverse proxy, HTTP / HTTPS enabled.\n#   - Cache - fastcgi-cache, fastcgi_cache_purge, Opcache\n#   - No DB included.\n#\n#   Optional\n#\n#   - Deploy `letsencrypt` SSL.\n#   - Deploy normal SSL.\n#\n#   @link https://letsencrypt.org/ | letsencrypt\n#\n#   It is based on Ubuntu 14.04 LTS\n#   ===============================================================================\n#   Set the base image to Ubuntu\nFROM ubuntu:14.04\n#   File Author / Maintainer\nMAINTAINER Lei SHI <foxshee@gmail.com>\n#   Default HTTP and HTTPS ports\nEXPOSE 80/tcp 443/tcp\n#   ===============================================================================\n#   Env. Setup\n#\n#   Keep upstart from complaining\nRUN dpkg-divert --local --rename --add /sbin/initctl \\\n && ln -sf /bin/true /sbin/initctl\n#   Let the container know that there is no tty\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Update the repository sources list and finish upgrade\nRUN apt-get update \\\n && apt-get -y upgrade\n#   ----------------------------------------------------------\n#   Dependencies\n#   ----------------------------------------------------------\n#   Basic Dependencies\n#\n#   The basic dependecies includes:\n#\n#   - PHP & fpm\n#   - MySQL client\n#   - curl\n#   - Git\n#   - pwgen - Open-Source Password Generator\n#   - python-setuptools - for `easy_install`\n#\nRUN apt-get install mysql-client php5-fpm php5-mysql pwgen python-setuptools curl git unzip -y\n#   **Wordpress** Dependencies\nRUN apt-get install php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-sqlite php5-tidy php5-xmlrpc php5-xsl -y\n#  ## ---- FIX -----\n#   Fix 'add-apt-repository: not found' in Ubuntu 14.04 LTS\nRUN apt-get install software-properties-common python-software-properties -y\n#   ----------------------------------------------------------\n#   Nginx\n#\n#     Nginx compiled with `fastcgi_cache` and `fastcgi_cache_purge`\n#\n#   @link https://easyengine.io/wordpress-nginx/tutorials/single-site/fastcgi-cache-with-purging/\n#   ----------------------------------------------------------\nRUN add-apt-repository ppa:rtcamp/nginx \\\n && apt-get update \\\n && apt-get remove nginx* \\\n && apt-get install nginx-custom -y\n#  ###########################################################\n#   Configurations\n#\n#   ----------------------------------------------------------\n#   Nginx Config\n#   ----------------------------------------------------------\n#   Create uer for Nginx running\nRUN adduser --system --no-create-home --shell /bin/false --group --disabled-login www-front\n#   Copy config files to `/etc/nginx/` folder\nCOPY config/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx-site-http.conf /etc/nginx/nginx-site-http.conf\nCOPY config/nginx-site-https.conf /etc/nginx/nginx-site-https.conf\n#   Default **site** config - HTTP\n#   Later if need to enforce SSL, use `nginx-site-http.conf` instead.\nCOPY config/nginx-site-http.conf /etc/nginx/sites-available/default\nCOPY config/nginx-ssl.conf /etc/nginx/ssl-template.conf\nCOPY config/nginx-restrictions.conf /etc/nginx/restrictions.conf\n#   ----------------------------------------------------------\n#   PHP-fpm Config\n#   ----------------------------------------------------------\nRUN sed -i -e \"s/;cgi.fix_pathinfo\\s*=\\s*1/cgi.fix_pathinfo = 0/g; s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/expose_php\\s*=\\s*On/expose_php = Off/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/upload_max_filesize\\s*=\\s*2M/upload_max_filesize = 100M/g; s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\n#  RUN sed -i -e \"s/post_max_size\\s*=\\s*8M/post_max_size = 100M/g\" /etc/php5/fpm/php.ini\nRUN sed -i -e \"s/;daemonize\\s*=\\s*yes/daemonize = no/g\" /etc/php5/fpm/php-fpm.conf\nRUN sed -i -e \"s/;catch_workers_output\\s*=\\s*yes/catch_workers_output = yes/g; s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g; s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n#  RUN sed -i -e \"s/listen\\s*=\\s*\\/var\\/run\\/php5-fpm.sock/listen = 127.0.0.1:9000/g\" /etc/php5/fpm/pool.d/www.conf\n#  RUN sed -i -e \"s/;listen.allowed_clients\\s*=\\s*127.0.0.1/listen.allowed_clients = 127.0.0.1/g\" /etc/php5/fpm/pool.d/www.conf\n#   ----------------------------------------------------------\n#   Opcode Config\n#   ----------------------------------------------------------\nRUN sed -i -e\"s/^;opcache.enable\\s*=\\s*0/opcache.enable = 1/; s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n#  RUN sed -i -e\"s/^;opcache.max_accelerated_files\\s*=\\s*2000/opcache.max_accelerated_files = 4000/\" /etc/php5/fpm/php.ini\n#   ===============================================================================\n#   Install & Config Supervisor\n#\n#   Supervisor is a process manager which makes managing a number of long-running programs a trivial task\n#     by providing a consistent interface through which they can be monitored and controlled.\n#\n#   it uses `easy_install` (from `python-setuptools`) to install **supervisor**.\n#\n#   @link http://supervisord.org/#\n#\nRUN /usr/bin/easy_install supervisor \\\n && /usr/bin/easy_install supervisor-stdout\nCOPY config/supervisord.conf /etc/supervisord.conf\n#   ===============================================================================\n#   Install Wordpress\n#\n#   Get the code of  **latest** version.\nRUN cd /usr/share/nginx/ \\\n && curl -o wp-latest.tar.gz https://wordpress.org/latest.tar.gz \\\n && tar -xvf wp-latest.tar.gz \\\n && rm wp-latest.tar.gz\n#   Target **webroot** - `/usr/share/nginx/www`\nRUN rm -rf /usr/share/nginx/www \\\n && mv /usr/share/nginx/wordpress /usr/share/nginx/www \\\n && chown -R www-data:www-data /usr/share/nginx/www\n#   ===============================================================================\n#   System Initialization\n#\n#  # Copy the **pre-defined** bash script\nCOPY bash/init.sh /init.sh\n#  # Modify the permisison - make sure they are excuatable\nRUN chmod 755 /init.sh\n#   Set up default CMD\nCMD [\"/bin/bash\", \"/init.sh\"]\n#   ===============================================================================\n#   Copy \"optional\" scripts\n#\n#   Under `/addon` folder.\n#\n#   `letsencrypt` SSL related\n#   @link https://letsencrypt.org/ | letsencrypt\nCOPY bash/ssl-letsencrypt.sh /addon/letsencrypt/ssl-letsencrypt.sh\n#   Normal SSL related\nCOPY bash/ssl.sh /addon/ssl.sh\n#   Install WP plugins\nCOPY bash/wp-install-plugins.sh /addon/wp-install-plugins.sh\n#   ===============================================================================\n#   Volume Mounting\n#\n#   - Wprdpress webroot\n#   - Log\n#\n#   Mount the volumns\nVOLUME [\"/usr/share/nginx/www\", \"/var/log\"]\n","originalDockerfileUglifiedHash":"29f731988de9bfce0b49ce78e5870d09","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a65caf17abb8edfe46f6251ef898a6b2ddc87b0e.dockerfile"}