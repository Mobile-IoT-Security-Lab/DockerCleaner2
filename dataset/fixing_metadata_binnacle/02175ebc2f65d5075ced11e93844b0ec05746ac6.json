{"seed":2577656508,"processedDockerfileHash":"f9d8abb502c33f412b6507c073c0db02","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-devel-ubuntu16.04 AS torch_builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential cmake curl g++ gcc git libprotobuf-dev libprotobuf9v5 libreadline-dev libtool libzmq-dev pkg-config protobuf-compiler unzip nano wget -y\n#   Fetch Intel MKL.\nRUN mkdir /root/mkl \\\n && wget https://anaconda.org/intel/mkl/2018.0.1/download/linux-64/mkl-2018.0.1-intel_4.tar.bz2 \\\n && tar -xf mkl-2018.0.1-intel_4.tar.bz2 -C /root/mkl \\\n && rm mkl-2018.0.1-intel_4.tar.bz2\nENV MKL_ROOT=\"/root/mkl\"\nRUN rm -f $MKL_ROOT/lib/*vml* $MKL_ROOT/lib/*ilp64* $MKL_ROOT/lib/*blacs* $MKL_ROOT/lib/*scalapack* $MKL_ROOT/lib/*cdft* $MKL_ROOT/lib/libmkl_tbb_thread.so $MKL_ROOT/lib/libmkl_ao_worker.so\n#   Compile Torch and OpenNMT dependencies.\nARG CUDA_ARCH\nENV CUDA_ARCH=\"${CUDA_ARCH:-Common}\"\nRUN git clone https://github.com/torch/distro.git /root/torch-distro --recursive \\\n && cd /root/torch-distro \\\n && mkdir /root/torch \\\n && CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:$MKL_ROOT/lib TORCH_CUDA_ARCH_LIST=${CUDA_ARCH} TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" PREFIX=/root/torch ./install.sh\nRUN cp -r $MKL_ROOT/lib/* /root/torch/lib\nRUN /root/torch/bin/luarocks install tds \\\n && /root/torch/bin/luarocks install dkjson \\\n && /root/torch/bin/luarocks install restserver-xavante \\\n && /root/torch/bin/luarocks install yaml \\\n && /root/torch/bin/luarocks install bit32 \\\n && /root/torch/bin/luarocks install luacheck \\\n && /root/torch/bin/luarocks install luacov \\\n && /root/torch/bin/luarocks install lua-zmq ZEROMQ_LIBDIR=/usr/lib/x86_64-linux-gnu/ ZEROMQ_INCDIR=/usr/include\n#   Install lua-sentencepiece\nRUN git clone https://github.com/google/sentencepiece.git /root/sentencepiece-git \\\n && cd /root/sentencepiece-git \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/root/sentencepiece .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm -r /root/sentencepiece-git\nRUN git clone https://github.com/OpenNMT/lua-sentencepiece.git /root/lua-sentencepiece \\\n && cd /root/lua-sentencepiece \\\n && CMAKE_LIBRARY_PATH=/root/sentencepiece/lib CMAKE_INCLUDE_PATH=/root/sentencepiece/include /root/torch/bin/luarocks make lua-sentencepiece-scm-1.rockspec LIBSENTENCEPIECE_DIR=/root/sentencepiece \\\n && cd /root \\\n && rm -r /root/lua-sentencepiece\nFROM nvidia/cuda:8.0-runtime-ubuntu16.04\nMAINTAINER OpenNMT <http://opennmt.net/>\nARG GITHUB_ACCOUNT=\"singnet\"\nARG GITHUB_BRANCH=\"master\"\nARG GITHUB_REPO=\"nlp-services\"\nARG SNETD_VERSION=\"v0.1.8\"\nENV SERVICE_FOLDER=\"opennmt-romance-translator\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgomp1 libprotobuf9v5 libzmq1 nano wget git python3-pip python3 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV TORCH_DIR=\"/root/torch\"\nENV SENTENCEPIECE_DIR=\"/root/sentencepiece\"\nCOPY --from=torch_builder /root/torch ${TORCH_DIR}\nCOPY --from=torch_builder /root/sentencepiece ${SENTENCEPIECE_DIR}\nENV LUA_PATH=\"${TORCH_DIR}/share/lua/5.1/?.lua;${TORCH_DIR}/share/lua/5.1/?/init.lua;./?.lua\"\nENV LUA_CPATH=\"${TORCH_DIR}/lib/lua/5.1/?.so;./?.so;${TORCH_DIR}/lib/?.so\"\nENV PATH=\"${TORCH_DIR}/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${TORCH_DIR}/lib:${LD_LIBRARY_PATH}\"\nENV THC_CACHING_ALLOCATOR=\"0\"\nENV ONMT_DIR=\"/root/opennmt\"\nCOPY . $ONMT_DIR\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/service_requirements.txt https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}/raw/${GITHUB_BRANCH}/${SERVICE_FOLDER}/requirements.txt\nRUN pip3 install -r /tmp/service_requirements.txt\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /dev/null https://api.github.com/repos/${GITHUB_ACCOUNT}/${GITHUB_REPO}/compare/${GITHUB_BRANCH}...HEAD\nRUN git clone -b ${GITHUB_BRANCH} https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}.git \\\n && mv /${GITHUB_REPO}/${SERVICE_FOLDER}/ /${SERVICE_FOLDER} \\\n && rm -rf /${GITHUB_REPO}\nRUN cd /${SERVICE_FOLDER}/utils \\\n && bash prepare_data.sh ./data\nRUN cd /${SERVICE_FOLDER} \\\n && bash buildproto.sh\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz https://github.com/singnet/snet-daemon/releases/download/${SNETD_VERSION}/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz\nRUN cd /tmp \\\n && tar -xvf snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz \\\n && mv snet-daemon-${SNETD_VERSION}-linux-amd64/snetd /usr/bin/snetd \\\n && rm -rf snet-daemon-${SNETD_VERSION}-linux-amd64*\nWORKDIR /${SERVICE_FOLDER}\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-devel-ubuntu16.04 AS torch_builder\nRUN apt-get update \\\n && apt-get install -y autoconf automake build-essential cmake curl g++ gcc git libprotobuf-dev libprotobuf9v5 libreadline-dev libtool libzmq-dev pkg-config protobuf-compiler unzip nano wget\n#  Fetch Intel MKL.\nRUN mkdir /root/mkl \\\n && wget https://anaconda.org/intel/mkl/2018.0.1/download/linux-64/mkl-2018.0.1-intel_4.tar.bz2 \\\n && tar -xf mkl-2018.0.1-intel_4.tar.bz2 -C /root/mkl \\\n && rm mkl-2018.0.1-intel_4.tar.bz2\nENV MKL_ROOT=\"/root/mkl\"\nRUN rm -f $MKL_ROOT/lib/*vml* $MKL_ROOT/lib/*ilp64* $MKL_ROOT/lib/*blacs* $MKL_ROOT/lib/*scalapack* $MKL_ROOT/lib/*cdft* $MKL_ROOT/lib/libmkl_tbb_thread.so $MKL_ROOT/lib/libmkl_ao_worker.so\n#  Compile Torch and OpenNMT dependencies.\nARG CUDA_ARCH\nENV CUDA_ARCH=\"${CUDA_ARCH:-Common}\"\nRUN git clone https://github.com/torch/distro.git /root/torch-distro --recursive \\\n && cd /root/torch-distro \\\n && mkdir /root/torch \\\n && CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:$MKL_ROOT/lib TORCH_CUDA_ARCH_LIST=${CUDA_ARCH} TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" PREFIX=/root/torch ./install.sh\nRUN cp -r $MKL_ROOT/lib/* /root/torch/lib\nRUN /root/torch/bin/luarocks install tds \\\n && /root/torch/bin/luarocks install dkjson \\\n && /root/torch/bin/luarocks install restserver-xavante \\\n && /root/torch/bin/luarocks install yaml \\\n && /root/torch/bin/luarocks install bit32 \\\n && /root/torch/bin/luarocks install luacheck \\\n && /root/torch/bin/luarocks install luacov \\\n && /root/torch/bin/luarocks install lua-zmq ZEROMQ_LIBDIR=/usr/lib/x86_64-linux-gnu/ ZEROMQ_INCDIR=/usr/include\n#  Install lua-sentencepiece\nRUN git clone https://github.com/google/sentencepiece.git /root/sentencepiece-git \\\n && cd /root/sentencepiece-git \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/root/sentencepiece .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm -r /root/sentencepiece-git\nRUN git clone https://github.com/OpenNMT/lua-sentencepiece.git /root/lua-sentencepiece \\\n && cd /root/lua-sentencepiece \\\n && CMAKE_LIBRARY_PATH=/root/sentencepiece/lib CMAKE_INCLUDE_PATH=/root/sentencepiece/include /root/torch/bin/luarocks make lua-sentencepiece-scm-1.rockspec LIBSENTENCEPIECE_DIR=/root/sentencepiece \\\n && cd /root \\\n && rm -r /root/lua-sentencepiece\nFROM nvidia/cuda:8.0-runtime-ubuntu16.04\nMAINTAINER OpenNMT <http://opennmt.net/>\nARG GITHUB_ACCOUNT=\"singnet\"\nARG GITHUB_BRANCH=\"master\"\nARG GITHUB_REPO=\"nlp-services\"\nARG SNETD_VERSION=\"v0.1.8\"\nENV SERVICE_FOLDER=\"opennmt-romance-translator\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgomp1 libprotobuf9v5 libzmq1 nano wget git python3-pip python3 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV TORCH_DIR=\"/root/torch\"\nENV SENTENCEPIECE_DIR=\"/root/sentencepiece\"\nCOPY --from=torch_builder /root/torch ${TORCH_DIR}\nCOPY --from=torch_builder /root/sentencepiece ${SENTENCEPIECE_DIR}\nENV LUA_PATH=\"${TORCH_DIR}/share/lua/5.1/?.lua;${TORCH_DIR}/share/lua/5.1/?/init.lua;./?.lua\"\nENV LUA_CPATH=\"${TORCH_DIR}/lib/lua/5.1/?.so;./?.so;${TORCH_DIR}/lib/?.so\"\nENV PATH=\"${TORCH_DIR}/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${TORCH_DIR}/lib:${LD_LIBRARY_PATH}\"\nENV THC_CACHING_ALLOCATOR=\"0\"\nENV ONMT_DIR=\"/root/opennmt\"\nCOPY . $ONMT_DIR\nADD https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}/raw/${GITHUB_BRANCH}/${SERVICE_FOLDER}/requirements.txt /tmp/service_requirements.txt\nRUN pip3 install -r /tmp/service_requirements.txt\nADD https://api.github.com/repos/${GITHUB_ACCOUNT}/${GITHUB_REPO}/compare/${GITHUB_BRANCH}...HEAD /dev/null\nRUN git clone -b ${GITHUB_BRANCH} https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}.git \\\n && mv /${GITHUB_REPO}/${SERVICE_FOLDER}/ /${SERVICE_FOLDER} \\\n && rm -rf /${GITHUB_REPO}\nRUN cd /${SERVICE_FOLDER}/utils \\\n && bash prepare_data.sh ./data\nRUN cd /${SERVICE_FOLDER} \\\n && bash buildproto.sh\nADD https://github.com/singnet/snet-daemon/releases/download/${SNETD_VERSION}/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz /tmp/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz\nRUN cd /tmp \\\n && tar -xvf snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz \\\n && mv snet-daemon-${SNETD_VERSION}-linux-amd64/snetd /usr/bin/snetd \\\n && rm -rf snet-daemon-${SNETD_VERSION}-linux-amd64*\nWORKDIR /${SERVICE_FOLDER}\n","injectedSmells":[],"originalDockerfileHash":"f32f5983ade1b99b20a28a8199a3eabc","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-devel-ubuntu16.04 AS torch_builder\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential cmake curl g++ gcc git libprotobuf-dev libprotobuf9v5 libreadline-dev libtool libzmq-dev pkg-config protobuf-compiler unzip nano wget -y\n#   Fetch Intel MKL.\nRUN mkdir /root/mkl \\\n && wget https://anaconda.org/intel/mkl/2018.0.1/download/linux-64/mkl-2018.0.1-intel_4.tar.bz2 \\\n && tar -xf mkl-2018.0.1-intel_4.tar.bz2 -C /root/mkl \\\n && rm mkl-2018.0.1-intel_4.tar.bz2\nENV MKL_ROOT=\"/root/mkl\"\nRUN rm -f $MKL_ROOT/lib/*vml* $MKL_ROOT/lib/*ilp64* $MKL_ROOT/lib/*blacs* $MKL_ROOT/lib/*scalapack* $MKL_ROOT/lib/*cdft* $MKL_ROOT/lib/libmkl_tbb_thread.so $MKL_ROOT/lib/libmkl_ao_worker.so\n#   Compile Torch and OpenNMT dependencies.\nARG CUDA_ARCH\nENV CUDA_ARCH=\"${CUDA_ARCH:-Common}\"\nRUN git clone https://github.com/torch/distro.git /root/torch-distro --recursive \\\n && cd /root/torch-distro \\\n && mkdir /root/torch \\\n && CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:$MKL_ROOT/lib TORCH_CUDA_ARCH_LIST=${CUDA_ARCH} TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" PREFIX=/root/torch ./install.sh\nRUN cp -r $MKL_ROOT/lib/* /root/torch/lib\nRUN /root/torch/bin/luarocks install tds \\\n && /root/torch/bin/luarocks install dkjson \\\n && /root/torch/bin/luarocks install restserver-xavante \\\n && /root/torch/bin/luarocks install yaml \\\n && /root/torch/bin/luarocks install bit32 \\\n && /root/torch/bin/luarocks install luacheck \\\n && /root/torch/bin/luarocks install luacov \\\n && /root/torch/bin/luarocks install lua-zmq ZEROMQ_LIBDIR=/usr/lib/x86_64-linux-gnu/ ZEROMQ_INCDIR=/usr/include\n#   Install lua-sentencepiece\nRUN git clone https://github.com/google/sentencepiece.git /root/sentencepiece-git \\\n && cd /root/sentencepiece-git \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/root/sentencepiece .. \\\n && make -j $( nproc ;) \\\n && make install \\\n && rm -r /root/sentencepiece-git\nRUN git clone https://github.com/OpenNMT/lua-sentencepiece.git /root/lua-sentencepiece \\\n && cd /root/lua-sentencepiece \\\n && CMAKE_LIBRARY_PATH=/root/sentencepiece/lib CMAKE_INCLUDE_PATH=/root/sentencepiece/include /root/torch/bin/luarocks make lua-sentencepiece-scm-1.rockspec LIBSENTENCEPIECE_DIR=/root/sentencepiece \\\n && cd /root \\\n && rm -r /root/lua-sentencepiece\nFROM nvidia/cuda:8.0-runtime-ubuntu16.04\nMAINTAINER OpenNMT <http://opennmt.net/>\nARG GITHUB_ACCOUNT=\"singnet\"\nARG GITHUB_BRANCH=\"master\"\nARG GITHUB_REPO=\"nlp-services\"\nARG SNETD_VERSION=\"v0.1.8\"\nENV SERVICE_FOLDER=\"opennmt-romance-translator\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libgomp1 libprotobuf9v5 libzmq1 nano wget git python3-pip python3 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV TORCH_DIR=\"/root/torch\"\nENV SENTENCEPIECE_DIR=\"/root/sentencepiece\"\nCOPY --from=torch_builder /root/torch ${TORCH_DIR}\nCOPY --from=torch_builder /root/sentencepiece ${SENTENCEPIECE_DIR}\nENV LUA_PATH=\"${TORCH_DIR}/share/lua/5.1/?.lua;${TORCH_DIR}/share/lua/5.1/?/init.lua;./?.lua\"\nENV LUA_CPATH=\"${TORCH_DIR}/lib/lua/5.1/?.so;./?.so;${TORCH_DIR}/lib/?.so\"\nENV PATH=\"${TORCH_DIR}/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"${TORCH_DIR}/lib:${LD_LIBRARY_PATH}\"\nENV THC_CACHING_ALLOCATOR=\"0\"\nENV ONMT_DIR=\"/root/opennmt\"\nCOPY . $ONMT_DIR\nADD https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}/raw/${GITHUB_BRANCH}/${SERVICE_FOLDER}/requirements.txt /tmp/service_requirements.txt\nRUN pip3 install -r /tmp/service_requirements.txt\nADD https://api.github.com/repos/${GITHUB_ACCOUNT}/${GITHUB_REPO}/compare/${GITHUB_BRANCH}...HEAD /dev/null\nRUN git clone -b ${GITHUB_BRANCH} https://github.com/${GITHUB_ACCOUNT}/${GITHUB_REPO}.git \\\n && mv /${GITHUB_REPO}/${SERVICE_FOLDER}/ /${SERVICE_FOLDER} \\\n && rm -rf /${GITHUB_REPO}\nRUN cd /${SERVICE_FOLDER}/utils \\\n && bash prepare_data.sh ./data\nRUN cd /${SERVICE_FOLDER} \\\n && bash buildproto.sh\nADD https://github.com/singnet/snet-daemon/releases/download/${SNETD_VERSION}/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz /tmp/snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz\nRUN cd /tmp \\\n && tar -xvf snet-daemon-${SNETD_VERSION}-linux-amd64.tar.gz \\\n && mv snet-daemon-${SNETD_VERSION}-linux-amd64/snetd /usr/bin/snetd \\\n && rm -rf snet-daemon-${SNETD_VERSION}-linux-amd64*\nWORKDIR /${SERVICE_FOLDER}\n","originalDockerfileUglifiedHash":"0c4d4020e952dc2c0562cc347961f915","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/02175ebc2f65d5075ced11e93844b0ec05746ac6.dockerfile"}