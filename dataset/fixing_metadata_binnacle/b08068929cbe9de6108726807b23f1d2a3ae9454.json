{"seed":4153701946,"processedDockerfileHash":"3d3fb1824dc2ee6e2bc7f9f8a6e92d90","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS mlbench-worker-base\n#   TODO: reduce size and complexity of image.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc make libc-dev musl-dev openssh-server g++ git curl sudo -y\n#   -------------------- SSH --------------------\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\nARG SSH_USER=root\nENV SSH_USER=\"$SSH_USER\"\nRUN mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER\nRUN mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys\nRUN mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER\nVOLUME /ssh-key/$SSH_USER\n#   -----–––---------------------- Cuda Dependency --------------------\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends libnccl2=2.0.5-3+cuda9.0 libnccl-dev=2.0.5-3+cuda9.0 -y --allow-downgrades --allow-change-held-packages \\\n && rm -rf /var/lib/apt/lists/*\n#   -------------------- Conda environment --------------------\nRUN curl -o ~/miniconda.sh -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && sh ~/miniconda.sh -b -p /conda \\\n && rm ~/miniconda.sh\nENV PATH=\"/conda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/conda/lib:$LD_LIBRARY_PATH\"\n#   TODO: Source code in Channel Anaconda can be outdated, switch to conda-forge if posible.\nRUN conda install -y -c anaconda numpy pyyaml scipy mkl setuptools cmake cffi mkl-include typing \\\n && conda install -y -c mingfeima mkldnn \\\n && conda install -y -c soumith magma-cuda90 \\\n && conda install -y -c conda-forge python-lmdb opencv numpy \\\n && conda clean --all -y\n#   -------------------- Open MPI --------------------\nRUN mkdir /.openmpi/\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz \\\n && gunzip -c openmpi-3.0.0.tar.gz | tar xf - \\\n && cd openmpi-3.0.0 \\\n && ./configure --prefix=/.openmpi/ --with-cuda \\\n && make all install \\\n && rm /openmpi-3.0.0.tar.gz \\\n && rm -rf /openmpi-3.0.0 \\\n && apt-get remove -y wget\nENV PATH=\"/.openmpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/.openmpi/lib:$LD_LIBRARY_PATH\"\nRUN mv /.openmpi/bin/mpirun /.openmpi/bin/mpirun.real \\\n && echo '#!/bin/bash' > /.openmpi/bin/mpirun \\\n && echo \"/.openmpi/bin/mpirun.real\" '--allow-run-as-root \"$@\"' >> /.openmpi/bin/mpirun \\\n && chmod a+x /.openmpi/bin/mpirun\n#   Configure OpenMPI to run good defaults:\n#     --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /.openmpi/etc/openmpi-mca-params.conf\n#   configure the path.\nRUN echo export 'PATH=$HOME/conda/envs/pytorch-py$PYTHON_VERSION/bin:$HOME/.openmpi/bin:$PATH' >> ~/.bashrc\nRUN echo export 'LD_LIBRARY_PATH=$HOME/.openmpi/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n#   -------------------- PyTorch --------------------\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\n#   Install basic dependencies\n#   RUN git clone --recursive https://github.com/pytorch/pytorch && cd pytorch && python setup.py install\nRUN git clone --recursive https://github.com/pytorch/pytorch \\\n && cd pytorch \\\n && git submodule update --init \\\n && TORCH_CUDA_ARCH_LIST=\"3.5 3.7 5.2 6.0 6.1 7.0+PTX\" TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" CMAKE_PREFIX_PATH=\"$( dirname $( which conda ;) ;)/../\" pip install -v . \\\n && rm -rf /pytorch\nRUN git clone https://github.com/pytorch/vision.git \\\n && cd vision \\\n && pip install . -v\n#   RUN pip install -U git+https://github.com/ppwwyyxx/tensorpack.git\n#   RUN conda install -y -c anaconda msgpack\n#   RUN conda install -y -c anaconda msgpack msgpack-numpy pyzmq pillow\n#   RUN conda install -y -c conda-forge tqdm \n#   # RUN conda install -y -c pchrapka zmq\n#   # RUN conda install -c omnia termcolor\n#   -------------------- patch --------------------\n#   libGL.so.1 might be lost when nvidia driver is installed\n#   sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev\nRUN apt-get install --no-install-recommends libgl1-mesa-glx -y\n#   -------------------- Others --------------------\nRUN echo \"orte_keep_fqdn_hostnames=t\" >> /.openmpi/etc/openmpi-mca-params.conf\nCOPY ./compose/worker/entrypoint.sh /usr/local/bin/\nRUN chmod a+x /usr/local/bin/entrypoint.sh\n#   Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /app/\nWORKDIR /app/\nEXPOSE 22/tcp\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-eD\", \"-f\", \"/.sshd/user_keys/root/sshd_config\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS mlbench-worker-base\n#  TODO: reduce size and complexity of image.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc make libc-dev musl-dev openssh-server g++ git curl sudo -y\n#  -------------------- SSH --------------------\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\nARG SSH_USER=root\nENV SSH_USER=\"$SSH_USER\"\nRUN mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER\nRUN mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys\nRUN mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER\nVOLUME /ssh-key/$SSH_USER\n#  -----–––---------------------- Cuda Dependency --------------------\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends libnccl2=2.0.5-3+cuda9.0 libnccl-dev=2.0.5-3+cuda9.0 -y --allow-downgrades --allow-change-held-packages \\\n && rm -rf /var/lib/apt/lists/*\n#  -------------------- Conda environment --------------------\nRUN curl -o ~/miniconda.sh -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && sh ~/miniconda.sh -b -p /conda \\\n && rm ~/miniconda.sh\nENV PATH=\"/conda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/conda/lib:$LD_LIBRARY_PATH\"\n#  TODO: Source code in Channel Anaconda can be outdated, switch to conda-forge if posible.\nRUN conda install -y -c anaconda numpy pyyaml scipy mkl setuptools cmake cffi mkl-include typing \\\n && conda install -y -c mingfeima mkldnn \\\n && conda install -y -c soumith magma-cuda90 \\\n && conda install -y -c conda-forge python-lmdb opencv numpy \\\n && conda clean --all -y\n#  -------------------- Open MPI --------------------\nRUN mkdir /.openmpi/\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz \\\n && gunzip -c openmpi-3.0.0.tar.gz | tar xf - \\\n && cd openmpi-3.0.0 \\\n && ./configure --prefix=/.openmpi/ --with-cuda \\\n && make all install \\\n && rm /openmpi-3.0.0.tar.gz \\\n && rm -rf /openmpi-3.0.0 \\\n && apt-get remove -y wget\nENV PATH=\"/.openmpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/.openmpi/lib:$LD_LIBRARY_PATH\"\nRUN mv /.openmpi/bin/mpirun /.openmpi/bin/mpirun.real \\\n && echo '#!/bin/bash' > /.openmpi/bin/mpirun \\\n && echo \"/.openmpi/bin/mpirun.real\" '--allow-run-as-root \"$@\"' >> /.openmpi/bin/mpirun \\\n && chmod a+x /.openmpi/bin/mpirun\n#  Configure OpenMPI to run good defaults:\n#    --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /.openmpi/etc/openmpi-mca-params.conf\n#  configure the path.\nRUN echo export 'PATH=$HOME/conda/envs/pytorch-py$PYTHON_VERSION/bin:$HOME/.openmpi/bin:$PATH' >> ~/.bashrc\nRUN echo export 'LD_LIBRARY_PATH=$HOME/.openmpi/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n#  -------------------- PyTorch --------------------\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\n#  Install basic dependencies\n#  RUN git clone --recursive https://github.com/pytorch/pytorch && cd pytorch && python setup.py install\nRUN git clone --recursive https://github.com/pytorch/pytorch \\\n && cd pytorch \\\n && git submodule update --init \\\n && TORCH_CUDA_ARCH_LIST=\"3.5 3.7 5.2 6.0 6.1 7.0+PTX\" TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" CMAKE_PREFIX_PATH=\"$( dirname $( which conda ;) ;)/../\" pip install -v . \\\n && rm -rf /pytorch\nRUN git clone https://github.com/pytorch/vision.git \\\n && cd vision \\\n && pip install . -v\n#  RUN pip install -U git+https://github.com/ppwwyyxx/tensorpack.git\n#  RUN conda install -y -c anaconda msgpack\n#  RUN conda install -y -c anaconda msgpack msgpack-numpy pyzmq pillow\n#  RUN conda install -y -c conda-forge tqdm \n#  # RUN conda install -y -c pchrapka zmq\n#  # RUN conda install -c omnia termcolor\n#  -------------------- patch --------------------\n#  libGL.so.1 might be lost when nvidia driver is installed\n#  sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev\nRUN apt-get install libgl1-mesa-glx -y\n#  -------------------- Others --------------------\nRUN echo \"orte_keep_fqdn_hostnames=t\" >> /.openmpi/etc/openmpi-mca-params.conf\nADD ./compose/worker/entrypoint.sh /usr/local/bin/\nRUN chmod a+x /usr/local/bin/entrypoint.sh\n#  Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /app/\nWORKDIR /app/\nEXPOSE 22/tcp\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-eD\", \"-f\", \"/.sshd/user_keys/root/sshd_config\"]\n","injectedSmells":[],"originalDockerfileHash":"80e5db474ea21a6ead061353f794763a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS mlbench-worker-base\n#   TODO: reduce size and complexity of image.\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc make libc-dev musl-dev openssh-server g++ git curl sudo -y\n#   -------------------- SSH --------------------\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\nARG SSH_USER=root\nENV SSH_USER=\"$SSH_USER\"\nRUN mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER\nRUN mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys\nRUN mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER\nVOLUME /ssh-key/$SSH_USER\n#   -----–––---------------------- Cuda Dependency --------------------\nRUN echo \"deb http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends libnccl2=2.0.5-3+cuda9.0 libnccl-dev=2.0.5-3+cuda9.0 -y --allow-downgrades --allow-change-held-packages \\\n && rm -rf /var/lib/apt/lists/*\n#   -------------------- Conda environment --------------------\nRUN curl -o ~/miniconda.sh -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n && sh ~/miniconda.sh -b -p /conda \\\n && rm ~/miniconda.sh\nENV PATH=\"/conda/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/conda/lib:$LD_LIBRARY_PATH\"\n#   TODO: Source code in Channel Anaconda can be outdated, switch to conda-forge if posible.\nRUN conda install -y -c anaconda numpy pyyaml scipy mkl setuptools cmake cffi mkl-include typing \\\n && conda install -y -c mingfeima mkldnn \\\n && conda install -y -c soumith magma-cuda90 \\\n && conda install -y -c conda-forge python-lmdb opencv numpy \\\n && conda clean --all -y\n#   -------------------- Open MPI --------------------\nRUN mkdir /.openmpi/\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget -y \\\n && wget https://www.open-mpi.org/software/ompi/v3.0/downloads/openmpi-3.0.0.tar.gz \\\n && gunzip -c openmpi-3.0.0.tar.gz | tar xf - \\\n && cd openmpi-3.0.0 \\\n && ./configure --prefix=/.openmpi/ --with-cuda \\\n && make all install \\\n && rm /openmpi-3.0.0.tar.gz \\\n && rm -rf /openmpi-3.0.0 \\\n && apt-get remove -y wget\nENV PATH=\"/.openmpi/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/.openmpi/lib:$LD_LIBRARY_PATH\"\nRUN mv /.openmpi/bin/mpirun /.openmpi/bin/mpirun.real \\\n && echo '#!/bin/bash' > /.openmpi/bin/mpirun \\\n && echo \"/.openmpi/bin/mpirun.real\" '--allow-run-as-root \"$@\"' >> /.openmpi/bin/mpirun \\\n && chmod a+x /.openmpi/bin/mpirun\n#   Configure OpenMPI to run good defaults:\n#     --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /.openmpi/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /.openmpi/etc/openmpi-mca-params.conf\n#   configure the path.\nRUN echo export 'PATH=$HOME/conda/envs/pytorch-py$PYTHON_VERSION/bin:$HOME/.openmpi/bin:$PATH' >> ~/.bashrc\nRUN echo export 'LD_LIBRARY_PATH=$HOME/.openmpi/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n#   -------------------- PyTorch --------------------\nENV CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\"\n#   Install basic dependencies\n#   RUN git clone --recursive https://github.com/pytorch/pytorch && cd pytorch && python setup.py install\nRUN git clone --recursive https://github.com/pytorch/pytorch \\\n && cd pytorch \\\n && git submodule update --init \\\n && TORCH_CUDA_ARCH_LIST=\"3.5 3.7 5.2 6.0 6.1 7.0+PTX\" TORCH_NVCC_FLAGS=\"-Xfatbin -compress-all\" CMAKE_PREFIX_PATH=\"$( dirname $( which conda ;) ;)/../\" pip install -v . \\\n && rm -rf /pytorch\nRUN git clone https://github.com/pytorch/vision.git \\\n && cd vision \\\n && pip install . -v\n#   RUN pip install -U git+https://github.com/ppwwyyxx/tensorpack.git\n#   RUN conda install -y -c anaconda msgpack\n#   RUN conda install -y -c anaconda msgpack msgpack-numpy pyzmq pillow\n#   RUN conda install -y -c conda-forge tqdm \n#   # RUN conda install -y -c pchrapka zmq\n#   # RUN conda install -c omnia termcolor\n#   -------------------- patch --------------------\n#   libGL.so.1 might be lost when nvidia driver is installed\n#   sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev\nRUN apt-get install libgl1-mesa-glx -y\n#   -------------------- Others --------------------\nRUN echo \"orte_keep_fqdn_hostnames=t\" >> /.openmpi/etc/openmpi-mca-params.conf\nADD ./compose/worker/entrypoint.sh /usr/local/bin/\nRUN chmod a+x /usr/local/bin/entrypoint.sh\n#   Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /app/\nWORKDIR /app/\nEXPOSE 22/tcp\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-eD\", \"-f\", \"/.sshd/user_keys/root/sshd_config\"]\n","originalDockerfileUglifiedHash":"8432b96b43f9fcd4ab58b2e1da511aa8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b08068929cbe9de6108726807b23f1d2a3ae9454.dockerfile"}