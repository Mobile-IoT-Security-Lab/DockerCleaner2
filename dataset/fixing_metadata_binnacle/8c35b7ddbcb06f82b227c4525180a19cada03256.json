{"seed":711314782,"processedDockerfileHash":"20b41b84559ee6a2548a29dd6cbad09f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile provides a starting point for a ROCm installation of \n#   MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 software-properties-common=0.96.20.10 -y )\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev apt-utils pkg-config g++-multilib libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Setup environment variables, and add those environment variables at the end of ~/.bashrc \nARG HCC_HOME=/opt/rocm/hcc\nARG HIP_PATH=/opt/rocm/hip\nARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install Pillow==9.5.0 h5py==3.8.0 ipykernel==6.22.0 jupyter==1.0.0 keras_applications==1.0.4 keras_preprocessing==1.0.2 matplotlib==3.7.1 mock==5.0.2 numpy==1.14.5 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow-upstream\nRUN git clone --branch=r1.10-rocm --depth=1 https://github.com/ROCmSoftwarePlatform/tensorflow-upstream.git .\n#   Set up the master bazelrc configuration file.\nRUN cp tensorflow/tools/ci_build/install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our ROCM configuration.\nENV TF_NEED_ROCM=\"1\"\nENV CI_BUILD_PYTHON=\"python\"\nRUN tensorflow/tools/ci_build/builds/configured ROCM bazel build -c opt --config=rocm tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile provides a starting point for a ROCm installation of \n#  MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install -y wget software-properties-common\n#  Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#  Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev apt-utils pkg-config g++-multilib libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#  Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#  Setup environment variables, and add those environment variables at the end of ~/.bashrc \nARG HCC_HOME=/opt/rocm/hcc\nARG HIP_PATH=/opt/rocm/hip\nARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install Pillow h5py ipykernel jupyter keras_applications==1.0.4 keras_preprocessing==1.0.2 matplotlib mock numpy==1.14.5 scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nWORKDIR /tensorflow-upstream\nRUN git clone --branch=r1.10-rocm --depth=1 https://github.com/ROCmSoftwarePlatform/tensorflow-upstream.git .\n#  Set up the master bazelrc configuration file.\nRUN cp tensorflow/tools/ci_build/install/.bazelrc /etc/bazel.bazelrc\n#  Configure the build for our ROCM configuration.\nENV TF_NEED_ROCM=\"1\"\nENV CI_BUILD_PYTHON=\"python\"\nRUN tensorflow/tools/ci_build/builds/configured ROCM bazel build -c opt --config=rocm tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#  Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n","injectedSmells":[],"originalDockerfileHash":"e9e85779d2fda985103d08502a65cd5e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile provides a starting point for a ROCm installation of \n#   MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install wget software-properties-common -y\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev apt-utils pkg-config g++-multilib libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Setup environment variables, and add those environment variables at the end of ~/.bashrc \nARG HCC_HOME=/opt/rocm/hcc\nARG HIP_PATH=/opt/rocm/hip\nARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install Pillow h5py ipykernel jupyter keras_applications==1.0.4 keras_preprocessing==1.0.2 matplotlib mock numpy==1.14.5 scipy sklearn pandas --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   RUN ln -s -f /usr/bin/python3 /usr/bin/python#\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.15.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow-upstream\nRUN git clone --branch=r1.10-rocm --depth=1 https://github.com/ROCmSoftwarePlatform/tensorflow-upstream.git .\n#   Set up the master bazelrc configuration file.\nRUN cp tensorflow/tools/ci_build/install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our ROCM configuration.\nENV TF_NEED_ROCM=\"1\"\nENV CI_BUILD_PYTHON=\"python\"\nRUN tensorflow/tools/ci_build/builds/configured ROCM bazel build -c opt --config=rocm tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n","originalDockerfileUglifiedHash":"2f340f1d344beea7d776d567cdfea1a7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8c35b7ddbcb06f82b227c4525180a19cada03256.dockerfile"}