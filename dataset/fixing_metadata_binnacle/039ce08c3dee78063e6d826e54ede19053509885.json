{"seed":2438467969,"processedDockerfileHash":"6fcc689c06ae80740ce42e679d9ff2f0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.9 AS mirror\n#   update base image\nRUN apk update \\\n && apk upgrade -a\n#   Copy Dockerfile so we can include it in the hash\nCOPY Dockerfile /Dockerfile\nCOPY packages* /tmp/\n#   mirror packages\nRUN cat /tmp/packages.$( uname -m ;) >> /tmp/packages \\\n && mkdir -p /mirror/$( apk --print-arch ;) \\\n && apk fetch --recursive -o /mirror/$( apk --print-arch ;) $( apk info ;cat /tmp/packages ;)\n#   It's tricky to mix edge/testing packages which sometimes leads to dependency conflicts.\n#   wireguard-tools currently is only in edge, so here we build our own package using the\n#   APKBUILD file from edge.\nRUN apk add alpine-sdk=1.0-r0 libmnl-dev=1.0.4-r0 curl=7.64.0-r5 \\\n && adduser -D builder \\\n && addgroup builder abuild \\\n && mkdir -p /wireguard \\\n && chmod 0777 /wireguard \\\n && cd /wireguard \\\n && curl -fsSLo APKBUILD https://git.alpinelinux.org/cgit/aports/plain/testing/wireguard-tools/APKBUILD \\\n && curl -fsSLo alpine-compat.patch https://git.alpinelinux.org/aports/plain/testing/wireguard-tools/alpine-compat.patch \\\n && su -c \"abuild-keygen -a -n \\\n && abuild -r\" builder \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-quick-[0-9]*.apk /mirror/$( apk --print-arch ;)\n#   install abuild for signing\nRUN apk add abuild=3.3.1-r0 --no-cache\n#   install a new key into /etc/apk/keys\nRUN abuild-keygen -a -i -n\n#   index the new repo\nRUN apk index --rewrite-arch $( apk --print-arch ;) -o /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/*.apk\n#   sign the index\nRUN cp /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\nRUN abuild-sign /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\n#   set this as our repo but keep a copy of the upstream for downstream use\nRUN mv /etc/apk/repositories /etc/apk/repositories.upstream \\\n && echo \"/mirror\" > /etc/apk/repositories \\\n && apk update\n#   add Go validation tools\nCOPY go-compile.sh /go/bin/\nRUN apk add git=2.20.4-r0 go=1.11.5-r0 musl-dev=1.1.20-r6 --no-cache\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\nRUN go get -u github.com/golang/lint/golint\nRUN go get -u github.com/gordonklaus/ineffassign\nRUN go get -u github.com/LK4D4/vndr\n#   checkout and compile containerd\n#   Update `FROM` in `pkg/containerd/Dockerfile`, `pkg/init/Dockerfile` and\n#   `test/pkg/containerd/Dockerfile` when changing this.\nENV CONTAINERD_REPO=\"https://github.com/containerd/containerd.git\"\nENV CONTAINERD_COMMIT=\"v1.2.6\"\nRUN mkdir -p $GOPATH/src/github.com/containerd \\\n && cd $GOPATH/src/github.com/containerd \\\n && git clone https://github.com/containerd/containerd.git \\\n && cd $GOPATH/src/github.com/containerd/containerd \\\n && git checkout $CONTAINERD_COMMIT\nRUN apk add btrfs-progs-dev=4.19.1-r0 gcc=8.3.0-r0 libc-dev=0.7.1-r0 linux-headers=4.18.13-r1 make=4.2.1-r2 libseccomp-dev=2.4.2-r2 --no-cache\nRUN cd $GOPATH/src/github.com/containerd/containerd \\\n && make binaries EXTRA_FLAGS=\"-buildmode pie\" EXTRA_LDFLAGS='-extldflags \"-fno-PIC -static\"' BUILD_TAGS=\"static_build\"\n#   Checkout and compile iucode-tool for Intel CPU microcode\n#   On non-x86_64 create a dummy file to copy below.\nENV IUCODE_REPO=\"https://gitlab.com/iucode-tool/iucode-tool\"\nENV IUCODE_COMMIT=\"v2.2\"\nWORKDIR /\nCOPY iucode-tool.patch /\nRUN set -e \\\n && mkdir /iucode_tool \\\n && if [ $( uname -m ;) = \"x86_64\" ] ; then apk add automake=1.16.1-r0 autoconf=2.69-r2 argp-standalone=1.3-r3 git=2.20.4-r0 gcc=8.3.0-r0 make=4.2.1-r2 musl-dev=1.1.20-r6 patch=2.7.6-r6 --no-cache \\\n && git clone ${IUCODE_REPO} \\\n && cd /iucode-tool \\\n && git checkout ${IUCODE_COMMIT} \\\n && patch -p 1 < /iucode-tool.patch \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && cp iucode_tool /iucode_tool ; fi\nFROM alpine:3.9\nCOPY --from=mirror /etc/apk/repositories /etc/apk/repositories\nCOPY --from=mirror /etc/apk/repositories.upstream /etc/apk/repositories.upstream\nCOPY --from=mirror /etc/apk/keys /etc/apk/keys/\nCOPY --from=mirror /mirror /mirror/\nCOPY --from=mirror /go/bin /go/bin/\nCOPY --from=mirror /Dockerfile /Dockerfile\nCOPY --from=mirror /go/src/github.com/containerd/containerd /go/src/github.com/containerd/containerd/\nCOPY --from=mirror /iucode_tool /usr/bin/\nRUN apk update \\\n && apk upgrade -a\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.9 AS mirror\n#  update base image\nRUN apk update \\\n && apk upgrade -a\n#  Copy Dockerfile so we can include it in the hash\nCOPY Dockerfile /Dockerfile\nCOPY packages* /tmp/\n#  mirror packages\nRUN cat /tmp/packages.$( uname -m ;) >> /tmp/packages \\\n && mkdir -p /mirror/$( apk --print-arch ;) \\\n && apk fetch --recursive -o /mirror/$( apk --print-arch ;) $( apk info ;cat /tmp/packages ;)\n#  It's tricky to mix edge/testing packages which sometimes leads to dependency conflicts.\n#  wireguard-tools currently is only in edge, so here we build our own package using the\n#  APKBUILD file from edge.\nRUN apk add alpine-sdk libmnl-dev curl \\\n && adduser -D builder \\\n && addgroup builder abuild \\\n && mkdir -p /wireguard \\\n && chmod 0777 /wireguard \\\n && cd /wireguard \\\n && curl -fsSLo APKBUILD https://git.alpinelinux.org/cgit/aports/plain/testing/wireguard-tools/APKBUILD \\\n && curl -fsSLo alpine-compat.patch https://git.alpinelinux.org/aports/plain/testing/wireguard-tools/alpine-compat.patch \\\n && su -c \"abuild-keygen -a -n \\\n && abuild -r\" builder \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-quick-[0-9]*.apk /mirror/$( apk --print-arch ;)\n#  install abuild for signing\nRUN apk add --no-cache abuild\n#  install a new key into /etc/apk/keys\nRUN abuild-keygen -a -i -n\n#  index the new repo\nRUN apk index --rewrite-arch $( apk --print-arch ;) -o /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/*.apk\n#  sign the index\nRUN cp /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\nRUN abuild-sign /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\n#  set this as our repo but keep a copy of the upstream for downstream use\nRUN mv /etc/apk/repositories /etc/apk/repositories.upstream \\\n && echo \"/mirror\" > /etc/apk/repositories \\\n && apk update\n#  add Go validation tools\nCOPY go-compile.sh /go/bin/\nRUN apk add --no-cache git go musl-dev\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\nRUN go get -u github.com/golang/lint/golint\nRUN go get -u github.com/gordonklaus/ineffassign\nRUN go get -u github.com/LK4D4/vndr\n#  checkout and compile containerd\n#  Update `FROM` in `pkg/containerd/Dockerfile`, `pkg/init/Dockerfile` and\n#  `test/pkg/containerd/Dockerfile` when changing this.\nENV CONTAINERD_REPO=\"https://github.com/containerd/containerd.git\"\nENV CONTAINERD_COMMIT=\"v1.2.6\"\nRUN mkdir -p $GOPATH/src/github.com/containerd \\\n && cd $GOPATH/src/github.com/containerd \\\n && git clone https://github.com/containerd/containerd.git \\\n && cd $GOPATH/src/github.com/containerd/containerd \\\n && git checkout $CONTAINERD_COMMIT\nRUN apk add --no-cache btrfs-progs-dev gcc libc-dev linux-headers make libseccomp-dev\nRUN cd $GOPATH/src/github.com/containerd/containerd \\\n && make binaries EXTRA_FLAGS=\"-buildmode pie\" EXTRA_LDFLAGS='-extldflags \"-fno-PIC -static\"' BUILD_TAGS=\"static_build\"\n#  Checkout and compile iucode-tool for Intel CPU microcode\n#  On non-x86_64 create a dummy file to copy below.\nENV IUCODE_REPO=\"https://gitlab.com/iucode-tool/iucode-tool\"\nENV IUCODE_COMMIT=\"v2.2\"\nWORKDIR /\nADD iucode-tool.patch /\nRUN set -e \\\n && mkdir /iucode_tool \\\n && if [ $( uname -m ;) = \"x86_64\" ] ; then apk add --no-cache automake autoconf argp-standalone git gcc make musl-dev patch \\\n && git clone ${IUCODE_REPO} \\\n && cd /iucode-tool \\\n && git checkout ${IUCODE_COMMIT} \\\n && patch -p 1 < /iucode-tool.patch \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && cp iucode_tool /iucode_tool ; fi\nFROM alpine:3.9\nCOPY --from=mirror /etc/apk/repositories /etc/apk/repositories\nCOPY --from=mirror /etc/apk/repositories.upstream /etc/apk/repositories.upstream\nCOPY --from=mirror /etc/apk/keys /etc/apk/keys/\nCOPY --from=mirror /mirror /mirror/\nCOPY --from=mirror /go/bin /go/bin/\nCOPY --from=mirror /Dockerfile /Dockerfile\nCOPY --from=mirror /go/src/github.com/containerd/containerd /go/src/github.com/containerd/containerd/\nCOPY --from=mirror /iucode_tool /usr/bin/\nRUN apk update \\\n && apk upgrade -a\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\n","injectedSmells":[],"originalDockerfileHash":"de7394854b91c9c376d9e69a91581181","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.9 AS mirror\n#   update base image\nRUN apk update \\\n && apk upgrade -a\n#   Copy Dockerfile so we can include it in the hash\nCOPY Dockerfile /Dockerfile\nCOPY packages* /tmp/\n#   mirror packages\nRUN cat /tmp/packages.$( uname -m ;) >> /tmp/packages \\\n && mkdir -p /mirror/$( apk --print-arch ;) \\\n && apk fetch --recursive -o /mirror/$( apk --print-arch ;) $( apk info ;cat /tmp/packages ;)\n#   It's tricky to mix edge/testing packages which sometimes leads to dependency conflicts.\n#   wireguard-tools currently is only in edge, so here we build our own package using the\n#   APKBUILD file from edge.\nRUN apk add alpine-sdk libmnl-dev curl \\\n && adduser -D builder \\\n && addgroup builder abuild \\\n && mkdir -p /wireguard \\\n && chmod 0777 /wireguard \\\n && cd /wireguard \\\n && curl -fsSLo APKBUILD https://git.alpinelinux.org/cgit/aports/plain/testing/wireguard-tools/APKBUILD \\\n && curl -fsSLo alpine-compat.patch https://git.alpinelinux.org/aports/plain/testing/wireguard-tools/alpine-compat.patch \\\n && su -c \"abuild-keygen -a -n \\\n && abuild -r\" builder \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-[0-9]*.apk /mirror/$( apk --print-arch ;) \\\n && cp /home/builder/packages/$( apk --print-arch ;)/wireguard-tools-wg-quick-[0-9]*.apk /mirror/$( apk --print-arch ;)\n#   install abuild for signing\nRUN apk add --no-cache abuild\n#   install a new key into /etc/apk/keys\nRUN abuild-keygen -a -i -n\n#   index the new repo\nRUN apk index --rewrite-arch $( apk --print-arch ;) -o /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/*.apk\n#   sign the index\nRUN cp /mirror/$( apk --print-arch ;)/APKINDEX.unsigned.tar.gz /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\nRUN abuild-sign /mirror/$( apk --print-arch ;)/APKINDEX.tar.gz\n#   set this as our repo but keep a copy of the upstream for downstream use\nRUN mv /etc/apk/repositories /etc/apk/repositories.upstream \\\n && echo \"/mirror\" > /etc/apk/repositories \\\n && apk update\n#   add Go validation tools\nCOPY go-compile.sh /go/bin/\nRUN apk add --no-cache git go musl-dev\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\nRUN go get -u github.com/golang/lint/golint\nRUN go get -u github.com/gordonklaus/ineffassign\nRUN go get -u github.com/LK4D4/vndr\n#   checkout and compile containerd\n#   Update `FROM` in `pkg/containerd/Dockerfile`, `pkg/init/Dockerfile` and\n#   `test/pkg/containerd/Dockerfile` when changing this.\nENV CONTAINERD_REPO=\"https://github.com/containerd/containerd.git\"\nENV CONTAINERD_COMMIT=\"v1.2.6\"\nRUN mkdir -p $GOPATH/src/github.com/containerd \\\n && cd $GOPATH/src/github.com/containerd \\\n && git clone https://github.com/containerd/containerd.git \\\n && cd $GOPATH/src/github.com/containerd/containerd \\\n && git checkout $CONTAINERD_COMMIT\nRUN apk add --no-cache btrfs-progs-dev gcc libc-dev linux-headers make libseccomp-dev\nRUN cd $GOPATH/src/github.com/containerd/containerd \\\n && make binaries EXTRA_FLAGS=\"-buildmode pie\" EXTRA_LDFLAGS='-extldflags \"-fno-PIC -static\"' BUILD_TAGS=\"static_build\"\n#   Checkout and compile iucode-tool for Intel CPU microcode\n#   On non-x86_64 create a dummy file to copy below.\nENV IUCODE_REPO=\"https://gitlab.com/iucode-tool/iucode-tool\"\nENV IUCODE_COMMIT=\"v2.2\"\nWORKDIR /\nADD iucode-tool.patch /\nRUN set -e \\\n && mkdir /iucode_tool \\\n && if [ $( uname -m ;) = \"x86_64\" ] ; then apk add --no-cache automake autoconf argp-standalone git gcc make musl-dev patch \\\n && git clone ${IUCODE_REPO} \\\n && cd /iucode-tool \\\n && git checkout ${IUCODE_COMMIT} \\\n && patch -p 1 < /iucode-tool.patch \\\n && ./autogen.sh \\\n && ./configure \\\n && make \\\n && cp iucode_tool /iucode_tool ; fi\nFROM alpine:3.9\nCOPY --from=mirror /etc/apk/repositories /etc/apk/repositories\nCOPY --from=mirror /etc/apk/repositories.upstream /etc/apk/repositories.upstream\nCOPY --from=mirror /etc/apk/keys /etc/apk/keys/\nCOPY --from=mirror /mirror /mirror/\nCOPY --from=mirror /go/bin /go/bin/\nCOPY --from=mirror /Dockerfile /Dockerfile\nCOPY --from=mirror /go/src/github.com/containerd/containerd /go/src/github.com/containerd/containerd/\nCOPY --from=mirror /iucode_tool /usr/bin/\nRUN apk update \\\n && apk upgrade -a\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\n","originalDockerfileUglifiedHash":"972f1883d54438d35a0c20661f28dbff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/039ce08c3dee78063e6d826e54ede19053509885.dockerfile"}