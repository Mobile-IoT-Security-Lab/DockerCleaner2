{"seed":3586302872,"processedDockerfileHash":"4668a20b05ffa4957d0ede6c468cd58b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   EDX-PLATFORM multi-stage docker build\n#   Change release to build, by providing the EDXAPP_RELEASE build argument to\n#   your build command:\n#\n#   $ docker build \\\n#       --build-arg EDXAPP_RELEASE=\"open-release/hawthorn.1\" \\\n#       -t edxapp:hawthorn.1 \\\n#       .\nARG EDXAPP_RELEASE=release-2018-08-29-14.14\n#   === BASE ===\nFROM ubuntu:16.04 AS base\n#   Configure locales\nRUN apt-get update \\\n && apt-get install --no-install-recommends gettext=0.19.7-2ubuntu3.1 locales=2.23-0ubuntu11.3 -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   === DOWNLOAD ===\nFROM base AS downloads\nWORKDIR /downloads\n#   Install curl\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 -y\n#   Download pip installer\nRUN curl -sLo get-pip.py https://bootstrap.pypa.io/get-pip.py\n#   Download edxapp release\n#   Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nRUN curl -sLo edxapp.tgz https://github.com/edx/edx-platform/archive/$EDXAPP_RELEASE.tar.gz \\\n && tar xzf edxapp.tgz\n#   === EDXAPP ===\nFROM base AS edxapp\n#   Install base system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends python=2.7.12-1~16.04 -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /edx/app/edxapp/edx-platform\n#   Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nCOPY --from=downloads /downloads/edx-platform-* .\n#   We copy default configuration files to \"/config\" and we point to them via\n#   symlinks. That allows to easily override default configurations by mounting a\n#   docker volume.\nCOPY ./config /config\nRUN ln -sf /config/lms /edx/app/edxapp/edx-platform/lms/envs/fun \\\n && ln -sf /config/cms /edx/app/edxapp/edx-platform/cms/envs/fun\n#   Add node_modules/.bin to the PATH so that paver-related commands can execute\n#   node scripts\nENV PATH=\"/edx/app/edxapp/edx-platform/node_modules/.bin:${PATH}\"\n#   === BUILDER ===\nFROM edxapp AS builder\nWORKDIR /builder\n#   Install builder system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 gettext=0.19.7-2ubuntu3.1 git=1:2.7.4-0ubuntu1.10 graphviz-dev=2.38.0-12ubuntu2.1 libgeos-dev=3.5.0-1ubuntu2 libmysqlclient-dev=5.7.33-0ubuntu0.16.04.1 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxmlsec1-dev=1.2.20-2ubuntu4 nodejs=4.2.6~dfsg-1ubuntu4.2 nodejs-legacy=4.2.6~dfsg-1ubuntu4.2 npm=3.5.2-0ubuntu4 python-dev=2.7.12-1~16.04 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install the latest pip release\nCOPY --from=downloads /downloads/get-pip.py ./get-pip.py\nRUN python get-pip.py\nWORKDIR /edx/app/edxapp/edx-platform\n#   Install python dependencies\nRUN pip install --src /usr/local/src -r requirements/edx/base.txt\n#   Install Javascript requirements\nRUN npm install\n#   Update assets skipping collectstatic (it should be done during deployment)\nRUN NO_PREREQ_INSTALL=1 paver update_assets --settings=fun.docker_build_production --skip-collect\n#   FIXME: we also copy /edx/app/edxapp/staticfiles/webpack-stats.json and\n#   /edx/app/edxapp/staticfiles/studio/webpack-stats.json files in a path that\n#   will be collected\nRUN cp -R /edx/app/edxapp/staticfiles/* /edx/app/edxapp/edx-platform/common/static/\n#   === DEVELOPMENT ===\nFROM builder AS development\nARG UID=1000\nARG GID=1000\nARG EDXAPP_RELEASE\n#   Install system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends dnsutils=1:9.10.3.dfsg.P4-8ubuntu1.19 iputils-ping=3:20121221-5ubuntu2 libsqlite3-dev=3.11.0-1ubuntu1.5 mongodb=1:2.6.10-0ubuntu1 vim=2:7.4.1689-3ubuntu1.5 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   To prevent permission issues related to the non-priviledged user running in\n#   development, we will install development dependencies in a python virtual\n#   environment belonging to that user\nRUN pip install virtualenv==20.21.0\n#   Create the virtualenv directory where we will install python development\n#   dependencies\nRUN mkdir -p /edx/app/edxapp/venv \\\n && chown -R ${UID}:${GID} /edx/app/edxapp/venv\n#   Change edxapp directory owner to allow the development image docker user to\n#   perform installations from edxapp sources (yeah, I know...)\nRUN chown -R ${UID}:${GID} /edx/app/edxapp\n#   Copy the entrypoint that will activate the virtualenv\nCOPY ./docker/files/usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint.sh\n#   Switch to an un-privileged user matching the host user to prevent permission\n#   issues with volumes (host folders)\nUSER ${UID}:${GID}\n#   Create the virtualenv with a non-priviledged user\nRUN virtualenv -p python2.7 --system-site-packages /edx/app/edxapp/venv\n#   Install development dependencies in a virtualenv\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate \\\n && pip install --no-cache-dir -r requirements/edx/testing.txt \\\n && pip install --no-cache-dir -r requirements/edx/development.txt\"\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#   === PRODUCTION ===\nFROM edxapp AS production\n#   Install runner system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends libgeos-dev=3.5.0-1ubuntu2 libmysqlclient20=5.7.33-0ubuntu0.16.04.1 libxml2=2.9.3+dfsg1-1ubuntu0.7 libxmlsec1-dev=1.2.20-2ubuntu4 nodejs=4.2.6~dfsg-1ubuntu4.2 nodejs-legacy=4.2.6~dfsg-1ubuntu4.2 tzdata=2021a-0ubuntu0.16.04 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy installed dependencies\nCOPY --from=builder /usr/local /usr/local\n#   Copy modified sources (sic!)\nCOPY --from=builder /edx/app/edxapp/edx-platform /edx/app/edxapp/edx-platform\n#   Set container timezone and related timezones database and DST rules\n#   See https://serverfault.com/a/856593\nENV TZ=\"'Etc/UTC'\"\nRUN echo $TZ > /etc/timezone \\\n && rm /etc/localtime \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Now that dependencies are installed and configuration has been set, the above\n#   statements will run with a un-privileged user.\nUSER 10000\n#   To start the CMS, inject the SERVICE_VARIANT=cms environment variable\n#   (defaults to \"lms\")\nENV SERVICE_VARIANT=\"lms\"\n#   Use Gunicorn in production as web server\nCMD DJANGO_SETTINGS_MODULE=${SERVICE_VARIANT}.envs.fun.docker_run gunicorn --name=${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  EDX-PLATFORM multi-stage docker build\n#  Change release to build, by providing the EDXAPP_RELEASE build argument to\n#  your build command:\n#\n#  $ docker build \\\n#      --build-arg EDXAPP_RELEASE=\"open-release/hawthorn.1\" \\\n#      -t edxapp:hawthorn.1 \\\n#      .\nARG EDXAPP_RELEASE=release-2018-08-29-14.14\n#  === BASE ===\nFROM ubuntu:16.04 AS base\n#  Configure locales\nRUN apt-get update \\\n && apt-get install gettext locales -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  === DOWNLOAD ===\nFROM base AS downloads\nWORKDIR /downloads\n#  Install curl\nRUN apt-get update \\\n && apt-get install curl -y\n#  Download pip installer\nRUN curl -sLo get-pip.py https://bootstrap.pypa.io/get-pip.py\n#  Download edxapp release\n#  Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nRUN curl -sLo edxapp.tgz https://github.com/edx/edx-platform/archive/$EDXAPP_RELEASE.tar.gz \\\n && tar xzf edxapp.tgz\n#  === EDXAPP ===\nFROM base AS edxapp\n#  Install base system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install python -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /edx/app/edxapp/edx-platform\n#  Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nCOPY --from=downloads /downloads/edx-platform-* .\n#  We copy default configuration files to \"/config\" and we point to them via\n#  symlinks. That allows to easily override default configurations by mounting a\n#  docker volume.\nCOPY ./config /config\nRUN ln -sf /config/lms /edx/app/edxapp/edx-platform/lms/envs/fun \\\n && ln -sf /config/cms /edx/app/edxapp/edx-platform/cms/envs/fun\n#  Add node_modules/.bin to the PATH so that paver-related commands can execute\n#  node scripts\nENV PATH=\"/edx/app/edxapp/edx-platform/node_modules/.bin:${PATH}\"\n#  === BUILDER ===\nFROM edxapp AS builder\nWORKDIR /builder\n#  Install builder system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install build-essential gettext git graphviz-dev libgeos-dev libmysqlclient-dev libxml2-dev libxmlsec1-dev nodejs nodejs-legacy npm python-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install the latest pip release\nCOPY --from=downloads /downloads/get-pip.py ./get-pip.py\nRUN python get-pip.py\nWORKDIR /edx/app/edxapp/edx-platform\n#  Install python dependencies\nRUN pip install --src /usr/local/src -r requirements/edx/base.txt\n#  Install Javascript requirements\nRUN npm install\n#  Update assets skipping collectstatic (it should be done during deployment)\nRUN NO_PREREQ_INSTALL=1 paver update_assets --settings=fun.docker_build_production --skip-collect\n#  FIXME: we also copy /edx/app/edxapp/staticfiles/webpack-stats.json and\n#  /edx/app/edxapp/staticfiles/studio/webpack-stats.json files in a path that\n#  will be collected\nRUN cp -R /edx/app/edxapp/staticfiles/* /edx/app/edxapp/edx-platform/common/static/\n#  === DEVELOPMENT ===\nFROM builder AS development\nARG UID=1000\nARG GID=1000\nARG EDXAPP_RELEASE\n#  Install system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install dnsutils iputils-ping libsqlite3-dev mongodb vim -y \\\n && rm -rf /var/lib/apt/lists/*\n#  To prevent permission issues related to the non-priviledged user running in\n#  development, we will install development dependencies in a python virtual\n#  environment belonging to that user\nRUN pip install virtualenv\n#  Create the virtualenv directory where we will install python development\n#  dependencies\nRUN mkdir -p /edx/app/edxapp/venv \\\n && chown -R ${UID}:${GID} /edx/app/edxapp/venv\n#  Change edxapp directory owner to allow the development image docker user to\n#  perform installations from edxapp sources (yeah, I know...)\nRUN chown -R ${UID}:${GID} /edx/app/edxapp\n#  Copy the entrypoint that will activate the virtualenv\nCOPY ./docker/files/usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint.sh\n#  Switch to an un-privileged user matching the host user to prevent permission\n#  issues with volumes (host folders)\nUSER ${UID}:${GID}\n#  Create the virtualenv with a non-priviledged user\nRUN virtualenv -p python2.7 --system-site-packages /edx/app/edxapp/venv\n#  Install development dependencies in a virtualenv\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate \\\n && pip install --no-cache-dir -r requirements/edx/testing.txt \\\n && pip install --no-cache-dir -r requirements/edx/development.txt\"\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#  === PRODUCTION ===\nFROM edxapp AS production\n#  Install runner system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install libgeos-dev libmysqlclient20 libxml2 libxmlsec1-dev nodejs nodejs-legacy tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Copy installed dependencies\nCOPY --from=builder /usr/local /usr/local\n#  Copy modified sources (sic!)\nCOPY --from=builder /edx/app/edxapp/edx-platform /edx/app/edxapp/edx-platform\n#  Set container timezone and related timezones database and DST rules\n#  See https://serverfault.com/a/856593\nENV TZ=\"'Etc/UTC'\"\nRUN echo $TZ > /etc/timezone \\\n && rm /etc/localtime \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && dpkg-reconfigure -f noninteractive tzdata\n#  Now that dependencies are installed and configuration has been set, the above\n#  statements will run with a un-privileged user.\nUSER 10000\n#  To start the CMS, inject the SERVICE_VARIANT=cms environment variable\n#  (defaults to \"lms\")\nENV SERVICE_VARIANT=\"lms\"\n#  Use Gunicorn in production as web server\nCMD DJANGO_SETTINGS_MODULE=${SERVICE_VARIANT}.envs.fun.docker_run gunicorn --name=${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n","injectedSmells":[],"originalDockerfileHash":"4ae0812c4c610f9f6687dac6d5c2a398","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   EDX-PLATFORM multi-stage docker build\n#   Change release to build, by providing the EDXAPP_RELEASE build argument to\n#   your build command:\n#\n#   $ docker build \\\n#       --build-arg EDXAPP_RELEASE=\"open-release/hawthorn.1\" \\\n#       -t edxapp:hawthorn.1 \\\n#       .\nARG EDXAPP_RELEASE=release-2018-08-29-14.14\n#   === BASE ===\nFROM ubuntu:16.04 AS base\n#   Configure locales\nRUN apt-get update \\\n && apt-get install gettext locales -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && locale-gen\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   === DOWNLOAD ===\nFROM base AS downloads\nWORKDIR /downloads\n#   Install curl\nRUN apt-get update \\\n && apt-get install curl -y\n#   Download pip installer\nRUN curl -sLo get-pip.py https://bootstrap.pypa.io/get-pip.py\n#   Download edxapp release\n#   Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nRUN curl -sLo edxapp.tgz https://github.com/edx/edx-platform/archive/$EDXAPP_RELEASE.tar.gz \\\n && tar xzf edxapp.tgz\n#   === EDXAPP ===\nFROM base AS edxapp\n#   Install base system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install python -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /edx/app/edxapp/edx-platform\n#   Get default EDXAPP_RELEASE value (defined on top)\nARG EDXAPP_RELEASE\nCOPY --from=downloads /downloads/edx-platform-* .\n#   We copy default configuration files to \"/config\" and we point to them via\n#   symlinks. That allows to easily override default configurations by mounting a\n#   docker volume.\nCOPY ./config /config\nRUN ln -sf /config/lms /edx/app/edxapp/edx-platform/lms/envs/fun \\\n && ln -sf /config/cms /edx/app/edxapp/edx-platform/cms/envs/fun\n#   Add node_modules/.bin to the PATH so that paver-related commands can execute\n#   node scripts\nENV PATH=\"/edx/app/edxapp/edx-platform/node_modules/.bin:${PATH}\"\n#   === BUILDER ===\nFROM edxapp AS builder\nWORKDIR /builder\n#   Install builder system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install build-essential gettext git graphviz-dev libgeos-dev libmysqlclient-dev libxml2-dev libxmlsec1-dev nodejs nodejs-legacy npm python-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install the latest pip release\nCOPY --from=downloads /downloads/get-pip.py ./get-pip.py\nRUN python get-pip.py\nWORKDIR /edx/app/edxapp/edx-platform\n#   Install python dependencies\nRUN pip install --src /usr/local/src -r requirements/edx/base.txt\n#   Install Javascript requirements\nRUN npm install\n#   Update assets skipping collectstatic (it should be done during deployment)\nRUN NO_PREREQ_INSTALL=1 paver update_assets --settings=fun.docker_build_production --skip-collect\n#   FIXME: we also copy /edx/app/edxapp/staticfiles/webpack-stats.json and\n#   /edx/app/edxapp/staticfiles/studio/webpack-stats.json files in a path that\n#   will be collected\nRUN cp -R /edx/app/edxapp/staticfiles/* /edx/app/edxapp/edx-platform/common/static/\n#   === DEVELOPMENT ===\nFROM builder AS development\nARG UID=1000\nARG GID=1000\nARG EDXAPP_RELEASE\n#   Install system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install dnsutils iputils-ping libsqlite3-dev mongodb vim -y \\\n && rm -rf /var/lib/apt/lists/*\n#   To prevent permission issues related to the non-priviledged user running in\n#   development, we will install development dependencies in a python virtual\n#   environment belonging to that user\nRUN pip install virtualenv\n#   Create the virtualenv directory where we will install python development\n#   dependencies\nRUN mkdir -p /edx/app/edxapp/venv \\\n && chown -R ${UID}:${GID} /edx/app/edxapp/venv\n#   Change edxapp directory owner to allow the development image docker user to\n#   perform installations from edxapp sources (yeah, I know...)\nRUN chown -R ${UID}:${GID} /edx/app/edxapp\n#   Copy the entrypoint that will activate the virtualenv\nCOPY ./docker/files/usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint.sh\n#   Switch to an un-privileged user matching the host user to prevent permission\n#   issues with volumes (host folders)\nUSER ${UID}:${GID}\n#   Create the virtualenv with a non-priviledged user\nRUN virtualenv -p python2.7 --system-site-packages /edx/app/edxapp/venv\n#   Install development dependencies in a virtualenv\nRUN bash -c \"source /edx/app/edxapp/venv/bin/activate \\\n && pip install --no-cache-dir -r requirements/edx/testing.txt \\\n && pip install --no-cache-dir -r requirements/edx/development.txt\"\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#   === PRODUCTION ===\nFROM edxapp AS production\n#   Install runner system dependencies\nRUN apt-get update \\\n && apt-get upgrade -y \\\n && apt-get install libgeos-dev libmysqlclient20 libxml2 libxmlsec1-dev nodejs nodejs-legacy tzdata -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Copy installed dependencies\nCOPY --from=builder /usr/local /usr/local\n#   Copy modified sources (sic!)\nCOPY --from=builder /edx/app/edxapp/edx-platform /edx/app/edxapp/edx-platform\n#   Set container timezone and related timezones database and DST rules\n#   See https://serverfault.com/a/856593\nENV TZ=\"'Etc/UTC'\"\nRUN echo $TZ > /etc/timezone \\\n && rm /etc/localtime \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && dpkg-reconfigure -f noninteractive tzdata\n#   Now that dependencies are installed and configuration has been set, the above\n#   statements will run with a un-privileged user.\nUSER 10000\n#   To start the CMS, inject the SERVICE_VARIANT=cms environment variable\n#   (defaults to \"lms\")\nENV SERVICE_VARIANT=\"lms\"\n#   Use Gunicorn in production as web server\nCMD DJANGO_SETTINGS_MODULE=${SERVICE_VARIANT}.envs.fun.docker_run gunicorn --name=${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n","originalDockerfileUglifiedHash":"68436a102095070606de9c61b6c417f9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e225dd96d6beb2c428a1b4dbb1217823e7a99f5b.dockerfile"}