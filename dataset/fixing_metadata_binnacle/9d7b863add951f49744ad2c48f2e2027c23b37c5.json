{"seed":3654042946,"processedDockerfileHash":"7478dc43d5887a536f1598cbe9b4060d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #\n#   osgeo/gdal:alpine-small\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apk add wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev --no-cache\n#   For GDAL\nRUN apk add linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev libwebp-dev expat-dev postgresql-dev openjpeg-dev --no-cache\n#   Build openjpeg\n#  ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add cmake --no-cache \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add rsync ccache --no-cache\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 1G ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols --enable-lto \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/bag*.xml /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png /build/usr/share/gdal/gmlas* /build/usr/share/gdal/netcdf_config.xsd; do rm $i ; done )\n#   Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nRUN apk add libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng openjpeg libwebp expat libpq --no-cache \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#   Order layers starting with less frequently varying ones\n#  COPY --from=builder  /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #\n#  osgeo/gdal:alpine-small\n#  This file is available at the option of the licensee under:\n#  Public domain\n#  or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#  Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#  Setup build env for PROJ\nRUN apk add --no-cache wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\n#  For GDAL\nRUN apk add --no-cache linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev libwebp-dev expat-dev postgresql-dev openjpeg-dev\n#  Build openjpeg\n# ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add --no-cache rsync ccache\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\nARG RSYNC_REMOTE\n#  Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#  Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 1G ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols --enable-lto \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/bag*.xml /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png /build/usr/share/gdal/gmlas* /build/usr/share/gdal/netcdf_config.xsd; do rm $i ; done )\n#  Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nRUN apk add --no-cache libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng openjpeg libwebp expat libpq \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#  Order layers starting with less frequently varying ones\n# COPY --from=builder  /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\n","injectedSmells":[],"originalDockerfileHash":"b188ce574a15395f34bcb203d9cc4542","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #\n#   osgeo/gdal:alpine-small\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apk add --no-cache wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\n#   For GDAL\nRUN apk add --no-cache linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev libwebp-dev expat-dev postgresql-dev openjpeg-dev\n#   Build openjpeg\n#  ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && mkdir -p /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add --no-cache rsync ccache\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 1G ; fi \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols --enable-lto \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/bag*.xml /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png /build/usr/share/gdal/gmlas* /build/usr/share/gdal/netcdf_config.xsd; do rm $i ; done )\n#   Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nRUN apk add --no-cache libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng openjpeg libwebp expat libpq \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#   Order layers starting with less frequently varying ones\n#  COPY --from=builder  /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\n","originalDockerfileUglifiedHash":"9e4ac8c99a93e0bfdff532cdadad333a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9d7b863add951f49744ad2c48f2e2027c23b37c5.dockerfile"}