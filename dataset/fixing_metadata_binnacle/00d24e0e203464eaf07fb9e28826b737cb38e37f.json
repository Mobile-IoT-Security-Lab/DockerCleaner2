{"seed":1684024038,"processedDockerfileHash":"dc0d92b4fb496972f0918458888eb0f9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\n#   Build target: lablup/common-tensorflow:1.2-py36-cuda8\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#   The TensorFlow version\nENV TF_VERSION=\"1.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"8.0 \"\nENV TF_CUDNN_VERSION=\"6\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV NCCL_INSTALL_PATH=\"/usr/local/cuda/lib\"\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz cmake gcc g++ curl wget rsync sed swig git-core zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-8.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n#   link CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nENV BAZEL_VERSION=\"0.4.5\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel==0.40.0 numpy==1.24.2 scipy==1.10.1 --no-cache-dir \\\n && pip install keras_applications==1.0.8 --no-cache-dir \\\n && pip install keras_preprocessing==1.1.2 --no-cache-dir \\\n && rm -f /tmp/*.whl\n#   NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && ldconfig\nRUN cd /tmp/tensorflow-r${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n#   Clean up pip wheel and Bazel cache when done.\nRUN rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\n#  Build target: lablup/common-tensorflow:1.2-py36-cuda8\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#  The TensorFlow version\nENV TF_VERSION=\"1.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"8.0 \"\nENV TF_CUDNN_VERSION=\"6\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV NCCL_INSTALL_PATH=\"/usr/local/cuda/lib\"\n#  Install system package dependencies\n#  NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz cmake gcc g++ curl wget rsync sed swig git-core zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-8.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n#  link CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nENV BAZEL_VERSION=\"0.4.5\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Check Bazel/Python is runnable.\n#  Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir \\\n && pip install keras_applications --no-cache-dir \\\n && pip install keras_preprocessing --no-cache-dir \\\n && rm -f /tmp/*.whl\n#  NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && ldconfig\nRUN cd /tmp/tensorflow-r${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n#  Clean up pip wheel and Bazel cache when done.\nRUN rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#  vim: ft=dockerfile sts=4 sw=4 et tw=0\n","injectedSmells":[],"originalDockerfileHash":"38daa7f15ae4e04327fd189064602ae6","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lablup/kernel-base:python3.6 AS python-binary\n#   Build target: lablup/common-tensorflow:1.2-py36-cuda8\nFROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nLABEL maintainer=\"Mario Cho <m.cho@lablup.com>\"\n#   The TensorFlow version\nENV TF_VERSION=\"1.2\"\nENV PYTHON_BIN_PATH=\"/usr/local/bin/python\"\nENV PYTHON_LIB_PATH=\"/usr/local/lib/python3.6/site-packages \"\nENV GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc \"\nENV CC_OPT_FLAGS=\"\\\"-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2\\\" \"\nENV TF_NEED_JEMALLOC=\"1\"\nENV TF_NEED_GCP=\"1\"\nENV TF_NEED_HDFS=\"1\"\nENV TF_ENABLE_XLA=\"1\"\nENV TF_NEED_VERBS=\"0\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_CLANG=\"0\"\nENV TF_NEED_S3=\"1\"\nENV TF_CUDA_VERSION=\"8.0 \"\nENV TF_CUDNN_VERSION=\"6\"\nENV TF_NCCL_VERSION=\"2\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,6.1\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nENV CUDNN_INSTALL_PATH=\"/usr/local/cuda \"\nENV NCCL_INSTALL_PATH=\"/usr/local/cuda/lib\"\n#   Install system package dependencies\n#   NOTE: running bazel requires JDK, not JRE!\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk-headless -y \\\n && apt-get install --no-install-recommends libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config rsync software-properties-common zip unzip zlib1g-dev wget imagemagick graphviz cmake gcc g++ curl wget rsync sed swig git-core zip -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Link NCCL libray and header where the build script expects them.\nRUN mkdir /usr/local/cuda-8.0/lib \\\n && ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 \\\n && ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h\n#   link CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nENV BAZEL_VERSION=\"0.4.5\"\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Check Bazel/Python is runnable.\n#   Also install TensorFlow build dependencies (ensure we have proper numpy)\nRUN bazel version ; python -c \"import sys; print(sys.prefix); print(sys.version_info)\" \\\n && pip install wheel numpy scipy --no-cache-dir \\\n && pip install keras_applications --no-cache-dir \\\n && pip install keras_preprocessing --no-cache-dir \\\n && rm -f /tmp/*.whl\n#   NOTE: python should be linked to python3\nRUN : build TensorFlow pip package \\\n && cd /tmp \\\n && curl -SL https://github.com/tensorflow/tensorflow/archive/r${TF_VERSION}.tar.gz | tar xzf - \\\n && ldconfig\nRUN cd /tmp/tensorflow-r${TF_VERSION} \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n#   Clean up pip wheel and Bazel cache when done.\nRUN rm -rf /root/.cache \\\n && ls -lh /tmp/tensorflow_pkg\n#   vim: ft=dockerfile sts=4 sw=4 et tw=0\n","originalDockerfileUglifiedHash":"311860d335f11f72f49daec31abeb797","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/00d24e0e203464eaf07fb9e28826b737cb38e37f.dockerfile"}