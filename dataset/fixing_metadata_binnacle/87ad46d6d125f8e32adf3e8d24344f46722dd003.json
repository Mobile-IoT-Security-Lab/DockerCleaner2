{"seed":2970368451,"processedDockerfileHash":"e5de755ba78973396701a1fa549a8201","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  upstream https://github.com/cockroachdb/cockroach/raw/master/build/builder/Dockerfile\nFROM ubuntu:xenial-20170915\n#   This is the CockroachDB \"builder\" image, which bundles cross-compiling\n#   toolchains that can build CockroachDB on all supported platforms.\n#   WARNING: Rebuilding this image can take several hours. Keep the slower steps\n#   (specifically, the compilation of the release toolchains) near the top to\n#   minimize how often they need to be rebuilt.\n#   autoconf - crosstool-ng / c-deps: jemalloc\n#   bison - crosstool-ng\n#   bzip2 - crosstool-ng\n#   file - crosstool-ng\n#   flex - crosstool-ng\n#   g++ - crosstool-ng\n#   gawk - crosstool-ng\n#   git - crosstool-ng\n#   gperf - crosstool-ng\n#   help2man - crosstool-ng\n#   libncurses-dev - crosstool-ng / CRDB build system\n#   make - crosstool-ng / CRDB build system\n#   patch - crosstool-ng\n#   texinfo - crosstool-ng\n#   xz-utils - crosstool-ng / msan\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends apt-transport-https autoconf bison bzip2 ca-certificates curl file flex g++ gawk git gperf help2man libncurses-dev make patch texinfo xz-utils -y ) \\\n && apt-get clean\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig aarch64-unknown-linux-gnueabi.defconfig ./\nRUN mkdir src \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../aarch64-unknown-linux-gnueabi.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && rm -rf src\nRUN mkdir -p /usr/local/lib/ccache \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-c++\nENV PATH=\"$PATH:/x-tools/x86_64-unknown-linux-gnu/bin:/x-tools/x86_64-unknown-linux-musl/bin:/x-tools/x86_64-w64-mingw32/bin:/x-tools/aarch64-unknown-linux-gnueabi/bin\"\n#   Build & install the terminfo lib (incl. in ncurses) for the linux targets (x86 and arm).\n#   (on BSD or BSD-derived like macOS it's already built-in; on windows we don't need it.)\n#\n#   The patch is needed to work around a bug in Debian mawk, see\n#   http://lists.gnu.org/archive/html/bug-ncurses/2015-08/msg00008.html\nCOPY ncurses.patch ./\n#\n#   Run the three builds.\n#   As per the Debian rule file for ncurses, the two configure tests for\n#   the type of bool and poll(2) are broken when cross-compiling, so we\n#   need to feed the test results manually to configure via an environment\n#   variable; see debian/rules on the Debian ncurses source package.\n#\n#   The configure other settings in ncurses.conf are also sourced from the\n#   Debian source package.\n#\nCOPY ncurses.conf ./\nRUN mkdir ncurses \\\n && curl -fsSL http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \\\n && cd ncurses \\\n && patch -p0 < ../ncurses.patch \\\n && export cf_cv_type_of_bool='unsigned char' \\\n && export cf_cv_working_poll=yes \\\n && mkdir build-x86_64-unknown-linux-musl \\\n && (cd build-x86_64-unknown-linux-musl \\\n && CC=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-cc CXX=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-musl/x86_64-unknown-linux-musl/sysroot/usr --host=x86_64-unknown-linux-musl $( cat /ncurses.conf ;) --without-shared --without-dlsym \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-x86_64-unknown-linux-gnu \\\n && (cd build-x86_64-unknown-linux-gnu \\\n && CC=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-cc CXX=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr --host=x86_64-unknown-linux-gnu $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-aarch64-unknown-linux-gnueabi \\\n && (cd build-aarch64-unknown-linux-gnueabi \\\n && CC=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-cc CXX=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-c++ ../configure --prefix=/x-tools/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr --host=aarch64-unknown-linux-gnueabi $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && cd .. \\\n && rm -rf ncurses ncurses.conf ncurses.patch\nRUN apt-get purge -y gcc g++ \\\n && apt-get autoremove -y\n#   clang - msan\n#   cmake - msan / c-deps: libroach, protobuf, et al.\n#   python - msan\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends clang cmake python -y )\n#   Build an msan-enabled build of libc++, following instructions from\n#   https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) ) \\\n && rm -rf llvm\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\nRUN ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-c++\nENV PATH=\"$PATH:/x-tools/x86_64-apple-darwin13/bin\"\n#   automake - sed build\n#   autopoint - sed build\n#   gettext - sed build\n#   rsync - sed build\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends automake autopoint gettext rsync -y )\n#   Compile GNU sed from source to pick up an unreleased change that buffers\n#   output. This speeds up compiles on Docker for Mac by *minutes*.\nRUN git clone git://git.sv.gnu.org/sed \\\n && cd sed \\\n && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \\\n && ./bootstrap \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sed\n#   Compile Go from source so that CC defaults to clang instead of gcc. This\n#   requires a Go toolchain to bootstrap.\n#\n#   NB: care needs to be taken when updating this version because earlier\n#   releases of Go will no longer be run in CI once it is changed. Consider\n#   bumping the minimum allowed version of Go in /build/go-version-chech.sh.\nRUN (apt-get update ;apt-get install --no-install-recommends golang -y ) \\\n && curl -fsSL https://storage.googleapis.com/golang/go1.10.3.src.tar.gz -o golang.tar.gz \\\n && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#   Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && echo 'deb https://packages.cloud.google.com/apt cloud-sdk-xenial main' | tee /etc/apt/sources.list.d/gcloud.list \\\n && curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google.list \\\n && :\n#   ccache - speed up C and C++ compilation\n#   lsof - roachprod monitor\n#   netcat - roachprod monitor\n#   netbase - /etc/services etc\n#   nodejs - ui\n#   openjdk-8-jre - railroad diagram generation\n#   google-cloud-sdk - roachprod acceptance tests\n#   yarn - ui\n#   chrome - ui\n#   unzip - for installing awscli\nRUN (apt-get update ;apt-get install --no-install-recommends ccache google-cloud-sdk lsof netcat netbase nodejs openjdk-8-jre openssh-client yarn google-chrome-stable unzip -y )\n#   awscli - roachtests\n#   NB: we don't use apt-get because we need an up to date version of awscli\nRUN curl -fsSL \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\" \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm -rf awscli-bundle.zip awscli-bundle\nENV PATH=\"/opt/backtrace/bin:$PATH\"\nRUN apt-get purge -y apt-transport-https automake autopoint bison bzip2 file flex gawk gettext golang gperf help2man python rsync texinfo \\\n && apt-get autoremove -y\nRUN rm -rf /tmp/* /var/lib/apt/lists/*\nRUN ln -s /go/src/github.com/cockroachdb/cockroach/build/builder/mkrelease.sh /usr/local/bin/mkrelease\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.1.0/autouseradd-1.1.0-amd64.tar.gz | tar xz -C /usr --strip-components 1\nCOPY entrypoint.sh /usr/local/bin\nENTRYPOINT [\"autouseradd\", \"--user\", \"roach\", \"--no-create-home\", \"--\", \"entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# upstream https://github.com/cockroachdb/cockroach/raw/master/build/builder/Dockerfile\nFROM ubuntu:xenial-20170915\n#  This is the CockroachDB \"builder\" image, which bundles cross-compiling\n#  toolchains that can build CockroachDB on all supported platforms.\n#  WARNING: Rebuilding this image can take several hours. Keep the slower steps\n#  (specifically, the compilation of the release toolchains) near the top to\n#  minimize how often they need to be rebuilt.\n#  autoconf - crosstool-ng / c-deps: jemalloc\n#  bison - crosstool-ng\n#  bzip2 - crosstool-ng\n#  file - crosstool-ng\n#  flex - crosstool-ng\n#  g++ - crosstool-ng\n#  gawk - crosstool-ng\n#  git - crosstool-ng\n#  gperf - crosstool-ng\n#  help2man - crosstool-ng\n#  libncurses-dev - crosstool-ng / CRDB build system\n#  make - crosstool-ng / CRDB build system\n#  patch - crosstool-ng\n#  texinfo - crosstool-ng\n#  xz-utils - crosstool-ng / msan\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https autoconf bison bzip2 ca-certificates curl file flex g++ gawk git gperf help2man libncurses-dev make patch texinfo xz-utils -y \\\n && apt-get clean\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig aarch64-unknown-linux-gnueabi.defconfig ./\nRUN mkdir src \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../aarch64-unknown-linux-gnueabi.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && rm -rf src\nRUN mkdir -p /usr/local/lib/ccache \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-c++\nENV PATH=\"$PATH:/x-tools/x86_64-unknown-linux-gnu/bin:/x-tools/x86_64-unknown-linux-musl/bin:/x-tools/x86_64-w64-mingw32/bin:/x-tools/aarch64-unknown-linux-gnueabi/bin\"\n#  Build & install the terminfo lib (incl. in ncurses) for the linux targets (x86 and arm).\n#  (on BSD or BSD-derived like macOS it's already built-in; on windows we don't need it.)\n#\n#  The patch is needed to work around a bug in Debian mawk, see\n#  http://lists.gnu.org/archive/html/bug-ncurses/2015-08/msg00008.html\nCOPY ncurses.patch ./\n#\n#  Run the three builds.\n#  As per the Debian rule file for ncurses, the two configure tests for\n#  the type of bool and poll(2) are broken when cross-compiling, so we\n#  need to feed the test results manually to configure via an environment\n#  variable; see debian/rules on the Debian ncurses source package.\n#\n#  The configure other settings in ncurses.conf are also sourced from the\n#  Debian source package.\n#\nCOPY ncurses.conf ./\nRUN mkdir ncurses \\\n && curl -fsSL http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \\\n && cd ncurses \\\n && patch -p0 < ../ncurses.patch \\\n && export cf_cv_type_of_bool='unsigned char' \\\n && export cf_cv_working_poll=yes \\\n && mkdir build-x86_64-unknown-linux-musl \\\n && (cd build-x86_64-unknown-linux-musl \\\n && CC=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-cc CXX=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-musl/x86_64-unknown-linux-musl/sysroot/usr --host=x86_64-unknown-linux-musl $( cat /ncurses.conf ;) --without-shared --without-dlsym \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-x86_64-unknown-linux-gnu \\\n && (cd build-x86_64-unknown-linux-gnu \\\n && CC=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-cc CXX=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr --host=x86_64-unknown-linux-gnu $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-aarch64-unknown-linux-gnueabi \\\n && (cd build-aarch64-unknown-linux-gnueabi \\\n && CC=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-cc CXX=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-c++ ../configure --prefix=/x-tools/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr --host=aarch64-unknown-linux-gnueabi $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && cd .. \\\n && rm -rf ncurses ncurses.conf ncurses.patch\nRUN apt-get purge -y gcc g++ \\\n && apt-get autoremove -y\n#  clang - msan\n#  cmake - msan / c-deps: libroach, protobuf, et al.\n#  python - msan\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang cmake python -y\n#  Build an msan-enabled build of libc++, following instructions from\n#  https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) ) \\\n && rm -rf llvm\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\nRUN ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-c++\nENV PATH=\"$PATH:/x-tools/x86_64-apple-darwin13/bin\"\n#  automake - sed build\n#  autopoint - sed build\n#  gettext - sed build\n#  rsync - sed build\nRUN apt-get update \\\n && apt-get install --no-install-recommends automake autopoint gettext rsync -y\n#  Compile GNU sed from source to pick up an unreleased change that buffers\n#  output. This speeds up compiles on Docker for Mac by *minutes*.\nRUN git clone git://git.sv.gnu.org/sed \\\n && cd sed \\\n && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \\\n && ./bootstrap \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sed\n#  Compile Go from source so that CC defaults to clang instead of gcc. This\n#  requires a Go toolchain to bootstrap.\n#\n#  NB: care needs to be taken when updating this version because earlier\n#  releases of Go will no longer be run in CI once it is changed. Consider\n#  bumping the minimum allowed version of Go in /build/go-version-chech.sh.\nRUN apt-get install --no-install-recommends golang -y \\\n && curl -fsSL https://storage.googleapis.com/golang/go1.10.3.src.tar.gz -o golang.tar.gz \\\n && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#  Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && echo 'deb https://packages.cloud.google.com/apt cloud-sdk-xenial main' | tee /etc/apt/sources.list.d/gcloud.list \\\n && curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google.list \\\n && apt-get update\n#  ccache - speed up C and C++ compilation\n#  lsof - roachprod monitor\n#  netcat - roachprod monitor\n#  netbase - /etc/services etc\n#  nodejs - ui\n#  openjdk-8-jre - railroad diagram generation\n#  google-cloud-sdk - roachprod acceptance tests\n#  yarn - ui\n#  chrome - ui\n#  unzip - for installing awscli\nRUN apt-get install --no-install-recommends ccache google-cloud-sdk lsof netcat netbase nodejs openjdk-8-jre openssh-client yarn google-chrome-stable unzip -y\n#  awscli - roachtests\n#  NB: we don't use apt-get because we need an up to date version of awscli\nRUN curl -fsSL \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\" \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm -rf awscli-bundle.zip awscli-bundle\nENV PATH=\"/opt/backtrace/bin:$PATH\"\nRUN apt-get purge -y apt-transport-https automake autopoint bison bzip2 file flex gawk gettext golang gperf help2man python rsync texinfo \\\n && apt-get autoremove -y\nRUN rm -rf /tmp/* /var/lib/apt/lists/*\nRUN ln -s /go/src/github.com/cockroachdb/cockroach/build/builder/mkrelease.sh /usr/local/bin/mkrelease\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.1.0/autouseradd-1.1.0-amd64.tar.gz | tar xz -C /usr --strip-components 1\nCOPY entrypoint.sh /usr/local/bin\nENTRYPOINT [\"autouseradd\", \"--user\", \"roach\", \"--no-create-home\", \"--\", \"entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"a462156d1029b38e83b4fa0db10c39c3","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  upstream https://github.com/cockroachdb/cockroach/raw/master/build/builder/Dockerfile\nFROM ubuntu:xenial-20170915\n#   This is the CockroachDB \"builder\" image, which bundles cross-compiling\n#   toolchains that can build CockroachDB on all supported platforms.\n#   WARNING: Rebuilding this image can take several hours. Keep the slower steps\n#   (specifically, the compilation of the release toolchains) near the top to\n#   minimize how often they need to be rebuilt.\n#   autoconf - crosstool-ng / c-deps: jemalloc\n#   bison - crosstool-ng\n#   bzip2 - crosstool-ng\n#   file - crosstool-ng\n#   flex - crosstool-ng\n#   g++ - crosstool-ng\n#   gawk - crosstool-ng\n#   git - crosstool-ng\n#   gperf - crosstool-ng\n#   help2man - crosstool-ng\n#   libncurses-dev - crosstool-ng / CRDB build system\n#   make - crosstool-ng / CRDB build system\n#   patch - crosstool-ng\n#   texinfo - crosstool-ng\n#   xz-utils - crosstool-ng / msan\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https autoconf bison bzip2 ca-certificates curl file flex g++ gawk git gperf help2man libncurses-dev make patch texinfo xz-utils -y \\\n && apt-get clean\nRUN mkdir crosstool-ng \\\n && curl -fsSL http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.xz | tar --strip-components=1 -C crosstool-ng -xJ \\\n && cd crosstool-ng \\\n && ./configure --prefix /usr/local/ct-ng \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp ct-ng.comp /etc/bash_completion.d/ \\\n && cd .. \\\n && rm -rf crosstool-ng\nCOPY x86_64-unknown-linux-gnu.defconfig x86_64-unknown-linux-musl.defconfig x86_64-w64-mingw.defconfig aarch64-unknown-linux-gnueabi.defconfig ./\nRUN mkdir src \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-gnu.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-unknown-linux-musl.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../x86_64-w64-mingw.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && mkdir build \\\n && (cd build \\\n && DEFCONFIG=../aarch64-unknown-linux-gnueabi.defconfig /usr/local/ct-ng/bin/ct-ng defconfig \\\n && /usr/local/ct-ng/bin/ct-ng build ) \\\n && rm -rf build \\\n && rm -rf src\nRUN mkdir -p /usr/local/lib/ccache \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-gnu-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-unknown-linux-musl-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-w64-mingw32-c++ \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/aarch64-unknown-linux-gnueabi-c++\nENV PATH=\"$PATH:/x-tools/x86_64-unknown-linux-gnu/bin:/x-tools/x86_64-unknown-linux-musl/bin:/x-tools/x86_64-w64-mingw32/bin:/x-tools/aarch64-unknown-linux-gnueabi/bin\"\n#   Build & install the terminfo lib (incl. in ncurses) for the linux targets (x86 and arm).\n#   (on BSD or BSD-derived like macOS it's already built-in; on windows we don't need it.)\n#\n#   The patch is needed to work around a bug in Debian mawk, see\n#   http://lists.gnu.org/archive/html/bug-ncurses/2015-08/msg00008.html\nCOPY ncurses.patch ./\n#\n#   Run the three builds.\n#   As per the Debian rule file for ncurses, the two configure tests for\n#   the type of bool and poll(2) are broken when cross-compiling, so we\n#   need to feed the test results manually to configure via an environment\n#   variable; see debian/rules on the Debian ncurses source package.\n#\n#   The configure other settings in ncurses.conf are also sourced from the\n#   Debian source package.\n#\nCOPY ncurses.conf ./\nRUN mkdir ncurses \\\n && curl -fsSL http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz | tar --strip-components=1 -C ncurses -xz \\\n && cd ncurses \\\n && patch -p0 < ../ncurses.patch \\\n && export cf_cv_type_of_bool='unsigned char' \\\n && export cf_cv_working_poll=yes \\\n && mkdir build-x86_64-unknown-linux-musl \\\n && (cd build-x86_64-unknown-linux-musl \\\n && CC=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-cc CXX=/x-tools/x86_64-unknown-linux-musl/bin/x86_64-unknown-linux-musl-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-musl/x86_64-unknown-linux-musl/sysroot/usr --host=x86_64-unknown-linux-musl $( cat /ncurses.conf ;) --without-shared --without-dlsym \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-x86_64-unknown-linux-gnu \\\n && (cd build-x86_64-unknown-linux-gnu \\\n && CC=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-cc CXX=/x-tools/x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-c++ ../configure --prefix=/x-tools/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr --host=x86_64-unknown-linux-gnu $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && mkdir build-aarch64-unknown-linux-gnueabi \\\n && (cd build-aarch64-unknown-linux-gnueabi \\\n && CC=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-cc CXX=/x-tools/aarch64-unknown-linux-gnueabi/bin/aarch64-unknown-linux-gnueabi-c++ ../configure --prefix=/x-tools/aarch64-unknown-linux-gnueabi/aarch64-unknown-linux-gnueabi/sysroot/usr --host=aarch64-unknown-linux-gnueabi $( cat /ncurses.conf ;) \\\n && (cd ncurses \\\n && make all \\\n && make install ) ) \\\n && cd .. \\\n && rm -rf ncurses ncurses.conf ncurses.patch\nRUN apt-get purge -y gcc g++ \\\n && apt-get autoremove -y\n#   clang - msan\n#   cmake - msan / c-deps: libroach, protobuf, et al.\n#   python - msan\nRUN apt-get update \\\n && apt-get install --no-install-recommends clang cmake python -y\n#   Build an msan-enabled build of libc++, following instructions from\n#   https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo\nRUN mkdir llvm \\\n && curl -sfSL http://releases.llvm.org/3.9.1/llvm-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm -xJ \\\n && mkdir llvm/projects/libcxx \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxx-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxx -xJ \\\n && mkdir llvm/projects/libcxxabi \\\n && curl -sfSL http://releases.llvm.org/3.9.1/libcxxabi-3.9.1.src.tar.xz | tar --strip-components=1 -C llvm/projects/libcxxabi -xJ \\\n && curl -fsSL https://github.com/llvm-mirror/libcxx/commit/b640da0b315ead39690d4d65c76938ab8aeb5449.patch | git -C llvm/projects/libcxx apply \\\n && mkdir libcxx_msan \\\n && (cd libcxx_msan \\\n && cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory \\\n && make cxx -j$( nproc ;) ) \\\n && rm -rf llvm\nRUN git clone --depth 1 https://github.com/tpoechtrager/osxcross.git \\\n && (cd osxcross/tarballs \\\n && curl -sfSL https://s3.amazonaws.com/andrew-osx-sdks/MacOSX10.9.sdk.tar.xz -O ) \\\n && OSX_VERSION_MIN=10.9 PORTABLE=1 UNATTENDED=1 osxcross/build.sh \\\n && mv osxcross/target /x-tools/x86_64-apple-darwin13 \\\n && rm -rf osxcross\nRUN ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-cc \\\n && ln -s /usr/bin/ccache /usr/local/lib/ccache/x86_64-apple-darwin13-c++\nENV PATH=\"$PATH:/x-tools/x86_64-apple-darwin13/bin\"\n#   automake - sed build\n#   autopoint - sed build\n#   gettext - sed build\n#   rsync - sed build\nRUN apt-get update \\\n && apt-get install --no-install-recommends automake autopoint gettext rsync -y\n#   Compile GNU sed from source to pick up an unreleased change that buffers\n#   output. This speeds up compiles on Docker for Mac by *minutes*.\nRUN git clone git://git.sv.gnu.org/sed \\\n && cd sed \\\n && git checkout 8e52c0aff039f0a88127ca131b060050c107b0e2 \\\n && ./bootstrap \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf sed\n#   Compile Go from source so that CC defaults to clang instead of gcc. This\n#   requires a Go toolchain to bootstrap.\n#\n#   NB: care needs to be taken when updating this version because earlier\n#   releases of Go will no longer be run in CI once it is changed. Consider\n#   bumping the minimum allowed version of Go in /build/go-version-chech.sh.\nRUN apt-get install --no-install-recommends golang -y \\\n && curl -fsSL https://storage.googleapis.com/golang/go1.10.3.src.tar.gz -o golang.tar.gz \\\n && echo '567b1cc66c9704d1c019c50bef946272e911ec6baf244310f87f4e678be155f2 golang.tar.gz' | sha256sum -c - \\\n && tar -C /usr/local -xzf golang.tar.gz \\\n && rm golang.tar.gz \\\n && cd /usr/local/go/src \\\n && GOROOT_BOOTSTRAP=$( go env GOROOT ;) CC=clang CXX=clang++ ./make.bash\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\nWORKDIR $GOPATH\nRUN chmod -R a+w $( go env GOTOOLDIR ;)\n#   Allow Go support files in gdb.\nRUN echo \"add-auto-load-safe-path $( go env GOROOT ;)/src/runtime/runtime-gdb.py\" > ~/.gdbinit\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \\\n && echo 'deb https://deb.nodesource.com/node_6.x xenial main' | tee /etc/apt/sources.list.d/nodesource.list \\\n && curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list \\\n && curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && echo 'deb https://packages.cloud.google.com/apt cloud-sdk-xenial main' | tee /etc/apt/sources.list.d/gcloud.list \\\n && curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n && echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" | tee /etc/apt/sources.list.d/google.list \\\n && apt-get update\n#   ccache - speed up C and C++ compilation\n#   lsof - roachprod monitor\n#   netcat - roachprod monitor\n#   netbase - /etc/services etc\n#   nodejs - ui\n#   openjdk-8-jre - railroad diagram generation\n#   google-cloud-sdk - roachprod acceptance tests\n#   yarn - ui\n#   chrome - ui\n#   unzip - for installing awscli\nRUN apt-get install --no-install-recommends ccache google-cloud-sdk lsof netcat netbase nodejs openjdk-8-jre openssh-client yarn google-chrome-stable unzip -y\n#   awscli - roachtests\n#   NB: we don't use apt-get because we need an up to date version of awscli\nRUN curl -fsSL \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\" \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm -rf awscli-bundle.zip awscli-bundle\nENV PATH=\"/opt/backtrace/bin:$PATH\"\nRUN apt-get purge -y apt-transport-https automake autopoint bison bzip2 file flex gawk gettext golang gperf help2man python rsync texinfo \\\n && apt-get autoremove -y\nRUN rm -rf /tmp/* /var/lib/apt/lists/*\nRUN ln -s /go/src/github.com/cockroachdb/cockroach/build/builder/mkrelease.sh /usr/local/bin/mkrelease\nRUN curl -fsSL https://github.com/benesch/autouseradd/releases/download/1.1.0/autouseradd-1.1.0-amd64.tar.gz | tar xz -C /usr --strip-components 1\nCOPY entrypoint.sh /usr/local/bin\nENTRYPOINT [\"autouseradd\", \"--user\", \"roach\", \"--no-create-home\", \"--\", \"entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"057787b16025ec120209451d6ef30091","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/87ad46d6d125f8e32adf3e8d24344f46722dd003.dockerfile"}