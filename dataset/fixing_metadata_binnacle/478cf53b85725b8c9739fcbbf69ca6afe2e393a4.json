{"seed":1025929924,"processedDockerfileHash":"7306f06b5d077c7ae2e88b0eb49b95d1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ------------------------------------------------------------------------------\n#   PHP BASE\n#  ------------------------------------------------------------------------------\nFROM php:7.2-fpm-alpine AS php-base\n#   Set timezone.\nENV PHP_TIMEZONE=\"America/New_York\"\nRUN echo \"date.timezone = \\\"$PHP_TIMEZONE\\\"\" > /usr/local/etc/php/conf.d/timezone.ini\nRUN cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1 > /var/www/salt.txt\nWORKDIR /var/www\nRUN apk add autoconf=2.71-r1 g++=12.2.1_git20220924-r4 pcre-dev=8.45-r2 libtool=2.4.7-r1 make=4.3-r1 curl=7.88.1-r1 git=2.38.4-r1 coreutils=9.1-r0 --no-cache --virtual .build-deps\n#   Install PHP memcached extension\n#   look at following for PHP 7.2 https://stackoverflow.com/a/41575677\nRUN set -xe \\\n && apk add libmemcached-libs=1.0.18-r5 zlib=1.2.13-r0 mysql-client=10.6.12-r0 --no-cache --update \\\n && apk add zlib-dev=1.2.13-r0 libmemcached-dev=1.0.18-r5 cyrus-sasl-dev=2.1.28-r3 --no-cache --update --virtual .memcached-build-deps \\\n && git clone -b php7 https://github.com/php-memcached-dev/php-memcached /usr/src/php/ext/memcached \\\n && docker-php-ext-configure /usr/src/php/ext/memcached --disable-memcached-sasl \\\n && docker-php-ext-install /usr/src/php/ext/memcached \\\n && rm -rf /usr/src/php/ext/memcached \\\n && rm -rf /tmp/* ~/.pearrc /usr/share/php7 \\\n && docker-php-source delete \\\n && apk del .memcached-build-deps\n#   install the PHP extensions we need\n#   postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add freetype-dev=2.12.1-r0 libjpeg-turbo-dev=2.1.4-r0 libpng-dev=1.6.38-r0 libxml2-dev=2.10.4-r0 libxslt-dev=1.1.37-r1 --no-cache --virtual .build-deps2 \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd iconv mysqli opcache pdo_mysql xmlrpc xsl zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --virtual .drupal-phpexts-rundeps \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && chown -R www-data:www-data /usr/local/var/log \\\n && docker-php-source delete \\\n && apk del .build-deps .build-deps2 \\\n && rm -rf /tmp/* /var/cache/apk/*\nCOPY docker-src/cms/php-conf.d/* /usr/local/etc/php/conf.d/\n#  ------------------------------------------------------------------------------\n#   WEB DEV\n#  ------------------------------------------------------------------------------\nFROM nginx:stable-alpine AS web-dev\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.key /etc/nginx/private.key\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.pem /etc/nginx/public.pem\nCOPY ./docker-src/cms/nginx/drupal.conf /etc/nginx/conf.d/drupal.conf\nWORKDIR /var/www/webroot\n#  ------------------------------------------------------------------------------\n#   PHP DEV\n#  ------------------------------------------------------------------------------\nFROM scratch AS php-dev\nCOPY --from=php-base . /\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\nENV PHP_TIMEZONE=\"America/New_York\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nCOPY docker-src/cms/entrypoint /usr/local/bin/drupalstand-entrypoint\nENTRYPOINT [\"drupalstand-entrypoint\"]\nWORKDIR /var/www\nRUN apk add git=2.38.4-r1 curl=7.88.1-r1 vim=9.0.0999-r0 unzip=6.0-r13 wget=1.21.3-r2 ncurses=6.3_p20221119-r0 ncurses-terminfo=6.3_p20221119-r0 --no-cache \\\n && apk add autoconf=2.71-r1 g++=12.2.1_git20220924-r4 pcre-dev=8.45-r2 libtool=2.4.7-r1 make=4.3-r1 coreutils=9.1-r0 --no-cache --virtual .build-deps \\\n && pecl install xdebug \\\n && docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo 'xdebug.remote_connect_back=\"${CONNECTBACK}\"' >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=192.168.65.1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && apk del .build-deps\n#   color avaiable thanks to ncurses packages above\nENV TERM=\"xterm-256color\"\nCOPY docker-src/cms/php-conf.d.dev/* /usr/local/etc/php/conf.d/\nWORKDIR /var/www/webroot\nCMD [\"php-fpm\"]\n#  ------------------------------------------------------------------------------\n#   Composer PROD\n#  ------------------------------------------------------------------------------\nFROM composer:latest AS composer-prod\n#   Install tool to make Composer download packages in parallel\nRUN composer global require hirak/prestissimo \\\n && mkdir -p /var/www/webroot/core /var/www/webroot/libraries /var/www/webroot/modules/contrib /var/www/webroot/profiles/contrib /var/www/webroot/themes/contrib /var/www/webroot/sites/all/drush/contrib /var/www/vendor\nCOPY composer.json composer.lock /var/www/\nCOPY scripts /var/www/scripts\nWORKDIR /var/www\n#   The following flag breaks drupal --classmap-authoritative\nRUN composer install --ignore-platform-reqs --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-scripts --no-ansi --no-dev\n#  ------------------------------------------------------------------------------\n#   PHP PROD\n#  ------------------------------------------------------------------------------\nFROM scratch AS php-prod\nCOPY --from=php-base . /\nCOPY webroot /var/www/webroot\nCOPY config /var/www/config\nRUN rm -rf webroot/core/* webroot/libraries/* webroot/modules/contrib/* webroot/profiles/contrib/* webroot/themes/contrib/* webroot/sites/all/drush/contrib/*\nCOPY --from=composer-prod /var/www/webroot/core webroot/core\nCOPY --from=composer-prod /var/www/webroot/libraries webroot/libraries\nCOPY --from=composer-prod /var/www/webroot/modules/contrib webroot/modules/contrib\nCOPY --from=composer-prod /var/www/webroot/profiles/contrib webroot/profiles/contrib\nCOPY --from=composer-prod /var/www/webroot/themes/contrib webroot/themes/contrib\nCOPY --from=composer-prod /var/www/webroot/sites/all/drush/contrib webroot/sites/all/drush/contrib\nCOPY --from=composer-prod /var/www/scripts scripts\nCOPY --from=composer-prod /var/www/vendor vendor\nWORKDIR /var/www/webroot\nRUN ln -s /var/www/vendor/bin/* /bin/\n#  ------------------------------------------------------------------------------\n#   WEB PROD\n#  ------------------------------------------------------------------------------\nFROM scratch AS web-prod\nCOPY --from=web-dev . /\nCOPY --from=php-prod /var/www/webroot /var/www/webroot\nWORKDIR /var/www/webroot\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"# ------------------------------------------------------------------------------\n#  PHP BASE\n# ------------------------------------------------------------------------------\nFROM php:7.2-fpm-alpine AS php-base\n#  Set timezone.\nENV PHP_TIMEZONE=\"America/New_York\"\nRUN echo \"date.timezone = \\\"$PHP_TIMEZONE\\\"\" > /usr/local/etc/php/conf.d/timezone.ini\nRUN cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1 > /var/www/salt.txt\nWORKDIR /var/www\nRUN apk add --no-cache --virtual .build-deps autoconf g++ pcre-dev libtool make curl git coreutils\n#  Install PHP memcached extension\n#  look at following for PHP 7.2 https://stackoverflow.com/a/41575677\nRUN set -xe \\\n && apk add --no-cache --update libmemcached-libs zlib mysql-client \\\n && apk add --no-cache --update --virtual .memcached-build-deps zlib-dev libmemcached-dev cyrus-sasl-dev \\\n && git clone -b php7 https://github.com/php-memcached-dev/php-memcached /usr/src/php/ext/memcached \\\n && docker-php-ext-configure /usr/src/php/ext/memcached --disable-memcached-sasl \\\n && docker-php-ext-install /usr/src/php/ext/memcached \\\n && rm -rf /usr/src/php/ext/memcached \\\n && rm -rf /tmp/* ~/.pearrc /usr/share/php7 \\\n && docker-php-source delete \\\n && apk del .memcached-build-deps\n#  install the PHP extensions we need\n#  postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps2 freetype-dev libjpeg-turbo-dev libpng-dev libxml2-dev libxslt-dev \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd iconv mysqli opcache pdo_mysql xmlrpc xsl zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && chown -R www-data:www-data /usr/local/var/log \\\n && docker-php-source delete \\\n && apk del .build-deps .build-deps2 \\\n && rm -rf /tmp/* /var/cache/apk/*\nCOPY docker-src/cms/php-conf.d/* /usr/local/etc/php/conf.d/\n# ------------------------------------------------------------------------------\n#  WEB DEV\n# ------------------------------------------------------------------------------\nFROM nginx:stable-alpine AS web-dev\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.key /etc/nginx/private.key\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.pem /etc/nginx/public.pem\nCOPY ./docker-src/cms/nginx/drupal.conf /etc/nginx/conf.d/drupal.conf\nWORKDIR /var/www/webroot\n# ------------------------------------------------------------------------------\n#  PHP DEV\n# ------------------------------------------------------------------------------\nFROM scratch AS php-dev\nCOPY --from=php-base . /\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\nENV PHP_TIMEZONE=\"America/New_York\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nCOPY docker-src/cms/entrypoint /usr/local/bin/drupalstand-entrypoint\nENTRYPOINT [\"drupalstand-entrypoint\"]\nWORKDIR /var/www\nRUN apk add --no-cache git curl vim unzip wget ncurses ncurses-terminfo \\\n && apk add --no-cache --virtual .build-deps autoconf g++ pcre-dev libtool make coreutils \\\n && pecl install xdebug \\\n && docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo 'xdebug.remote_connect_back=\"${CONNECTBACK}\"' >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=192.168.65.1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && apk del .build-deps\n#  color avaiable thanks to ncurses packages above\nENV TERM=\"xterm-256color\"\nCOPY docker-src/cms/php-conf.d.dev/* /usr/local/etc/php/conf.d/\nWORKDIR /var/www/webroot\nCMD [\"php-fpm\"]\n# ------------------------------------------------------------------------------\n#  Composer PROD\n# ------------------------------------------------------------------------------\nFROM composer:latest AS composer-prod\n#  Install tool to make Composer download packages in parallel\nRUN composer global require hirak/prestissimo \\\n && mkdir -p /var/www/webroot/core /var/www/webroot/libraries /var/www/webroot/modules/contrib /var/www/webroot/profiles/contrib /var/www/webroot/themes/contrib /var/www/webroot/sites/all/drush/contrib /var/www/vendor\nCOPY composer.json composer.lock /var/www/\nCOPY scripts /var/www/scripts\nWORKDIR /var/www\n#  The following flag breaks drupal --classmap-authoritative\nRUN composer install --ignore-platform-reqs --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-scripts --no-ansi --no-dev\n# ------------------------------------------------------------------------------\n#  PHP PROD\n# ------------------------------------------------------------------------------\nFROM scratch AS php-prod\nCOPY --from=php-base . /\nCOPY webroot /var/www/webroot\nCOPY config /var/www/config\nRUN rm -rf webroot/core/* webroot/libraries/* webroot/modules/contrib/* webroot/profiles/contrib/* webroot/themes/contrib/* webroot/sites/all/drush/contrib/*\nCOPY --from=composer-prod /var/www/webroot/core webroot/core\nCOPY --from=composer-prod /var/www/webroot/libraries webroot/libraries\nCOPY --from=composer-prod /var/www/webroot/modules/contrib webroot/modules/contrib\nCOPY --from=composer-prod /var/www/webroot/profiles/contrib webroot/profiles/contrib\nCOPY --from=composer-prod /var/www/webroot/themes/contrib webroot/themes/contrib\nCOPY --from=composer-prod /var/www/webroot/sites/all/drush/contrib webroot/sites/all/drush/contrib\nCOPY --from=composer-prod /var/www/scripts scripts\nCOPY --from=composer-prod /var/www/vendor vendor\nWORKDIR /var/www/webroot\nRUN ln -s /var/www/vendor/bin/* /bin/\n# ------------------------------------------------------------------------------\n#  WEB PROD\n# ------------------------------------------------------------------------------\nFROM scratch AS web-prod\nCOPY --from=web-dev . /\nCOPY --from=php-prod /var/www/webroot /var/www/webroot\nWORKDIR /var/www/webroot\n","injectedSmells":[],"originalDockerfileHash":"4af2b7b1649a4f70cb7950be3d2672c4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ------------------------------------------------------------------------------\n#   PHP BASE\n#  ------------------------------------------------------------------------------\nFROM php:7.2-fpm-alpine AS php-base\n#   Set timezone.\nENV PHP_TIMEZONE=\"America/New_York\"\nRUN echo \"date.timezone = \\\"$PHP_TIMEZONE\\\"\" > /usr/local/etc/php/conf.d/timezone.ini\nRUN cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1 > /var/www/salt.txt\nWORKDIR /var/www\nRUN apk add --no-cache --virtual .build-deps autoconf g++ pcre-dev libtool make curl git coreutils\n#   Install PHP memcached extension\n#   look at following for PHP 7.2 https://stackoverflow.com/a/41575677\nRUN set -xe \\\n && apk add --no-cache --update libmemcached-libs zlib mysql-client \\\n && apk add --no-cache --update --virtual .memcached-build-deps zlib-dev libmemcached-dev cyrus-sasl-dev \\\n && git clone -b php7 https://github.com/php-memcached-dev/php-memcached /usr/src/php/ext/memcached \\\n && docker-php-ext-configure /usr/src/php/ext/memcached --disable-memcached-sasl \\\n && docker-php-ext-install /usr/src/php/ext/memcached \\\n && rm -rf /usr/src/php/ext/memcached \\\n && rm -rf /tmp/* ~/.pearrc /usr/share/php7 \\\n && docker-php-source delete \\\n && apk del .memcached-build-deps\n#   install the PHP extensions we need\n#   postgresql-dev is needed for https://bugs.alpinelinux.org/issues/3642\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps2 freetype-dev libjpeg-turbo-dev libpng-dev libxml2-dev libxslt-dev \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-png-dir=/usr/include/ \\\n && docker-php-ext-install -j \"$( nproc ;)\" gd iconv mysqli opcache pdo_mysql xmlrpc xsl zip \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --virtual .drupal-phpexts-rundeps $runDeps \\\n && rm -rf /tmp/pear ~/.pearrc \\\n && chown -R www-data:www-data /usr/local/var/log \\\n && docker-php-source delete \\\n && apk del .build-deps .build-deps2 \\\n && rm -rf /tmp/* /var/cache/apk/*\nCOPY docker-src/cms/php-conf.d/* /usr/local/etc/php/conf.d/\n#  ------------------------------------------------------------------------------\n#   WEB DEV\n#  ------------------------------------------------------------------------------\nFROM nginx:stable-alpine AS web-dev\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.key /etc/nginx/private.key\nCOPY ./docker-src/cms/nginx/ssl-cert-snakeoil.pem /etc/nginx/public.pem\nCOPY ./docker-src/cms/nginx/drupal.conf /etc/nginx/conf.d/drupal.conf\nWORKDIR /var/www/webroot\n#  ------------------------------------------------------------------------------\n#   PHP DEV\n#  ------------------------------------------------------------------------------\nFROM scratch AS php-dev\nCOPY --from=php-base . /\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi\"\nENV PHP_TIMEZONE=\"America/New_York\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nCOPY docker-src/cms/entrypoint /usr/local/bin/drupalstand-entrypoint\nENTRYPOINT [\"drupalstand-entrypoint\"]\nWORKDIR /var/www\nRUN apk add --no-cache git curl vim unzip wget ncurses ncurses-terminfo \\\n && apk add --no-cache --virtual .build-deps autoconf g++ pcre-dev libtool make coreutils \\\n && pecl install xdebug \\\n && docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_autostart=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo 'xdebug.remote_connect_back=\"${CONNECTBACK}\"' >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=192.168.65.1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && apk del .build-deps\n#   color avaiable thanks to ncurses packages above\nENV TERM=\"xterm-256color\"\nCOPY docker-src/cms/php-conf.d.dev/* /usr/local/etc/php/conf.d/\nWORKDIR /var/www/webroot\nCMD [\"php-fpm\"]\n#  ------------------------------------------------------------------------------\n#   Composer PROD\n#  ------------------------------------------------------------------------------\nFROM composer:latest AS composer-prod\n#   Install tool to make Composer download packages in parallel\nRUN composer global require hirak/prestissimo \\\n && mkdir -p /var/www/webroot/core /var/www/webroot/libraries /var/www/webroot/modules/contrib /var/www/webroot/profiles/contrib /var/www/webroot/themes/contrib /var/www/webroot/sites/all/drush/contrib /var/www/vendor\nCOPY composer.json composer.lock /var/www/\nCOPY scripts /var/www/scripts\nWORKDIR /var/www\n#   The following flag breaks drupal --classmap-authoritative\nRUN composer install --ignore-platform-reqs --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-scripts --no-ansi --no-dev\n#  ------------------------------------------------------------------------------\n#   PHP PROD\n#  ------------------------------------------------------------------------------\nFROM scratch AS php-prod\nCOPY --from=php-base . /\nCOPY webroot /var/www/webroot\nCOPY config /var/www/config\nRUN rm -rf webroot/core/* webroot/libraries/* webroot/modules/contrib/* webroot/profiles/contrib/* webroot/themes/contrib/* webroot/sites/all/drush/contrib/*\nCOPY --from=composer-prod /var/www/webroot/core webroot/core\nCOPY --from=composer-prod /var/www/webroot/libraries webroot/libraries\nCOPY --from=composer-prod /var/www/webroot/modules/contrib webroot/modules/contrib\nCOPY --from=composer-prod /var/www/webroot/profiles/contrib webroot/profiles/contrib\nCOPY --from=composer-prod /var/www/webroot/themes/contrib webroot/themes/contrib\nCOPY --from=composer-prod /var/www/webroot/sites/all/drush/contrib webroot/sites/all/drush/contrib\nCOPY --from=composer-prod /var/www/scripts scripts\nCOPY --from=composer-prod /var/www/vendor vendor\nWORKDIR /var/www/webroot\nRUN ln -s /var/www/vendor/bin/* /bin/\n#  ------------------------------------------------------------------------------\n#   WEB PROD\n#  ------------------------------------------------------------------------------\nFROM scratch AS web-prod\nCOPY --from=web-dev . /\nCOPY --from=php-prod /var/www/webroot /var/www/webroot\nWORKDIR /var/www/webroot\n","originalDockerfileUglifiedHash":"e9022155a07b43c5cc091e8b5083216e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/478cf53b85725b8c9739fcbbf69ca6afe2e393a4.dockerfile"}