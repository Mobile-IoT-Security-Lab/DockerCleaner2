{"seed":2585460755,"processedDockerfileHash":"71225120cc6670b569ed85c958cd3770","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   To build from the parent directory:\n#     docker build -t wch1/r-devel r-devel\n#\n#   To run:\n#     docker run --rm -ti --name rd wch1/r-devel\n#   Use a very recent version of Ubuntu to get the latest GCC, which we need for\n#   some of options used for ASAN builds.\nFROM ubuntu:18.04\nMAINTAINER Winston Chang \"winston@rstudio.com\"\n#   =====================================================================\n#   R\n#   =====================================================================\n#   Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n#   Need this to add R repo\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.24.32.20 -y\n#   Add R apt repository\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nRUN add-apt-repository \"deb http://cran.r-project.org/bin/linux/ubuntu $( lsb_release -cs ;)-cran35/\"\n#   Install basic stuff, R, and other packages that are useful for compiling R\n#   and R packages.\nRUN apt-get update \\\n && apt-get install --no-install-recommends sudo=1.8.21p2-3ubuntu1.5 locales=2.27-3ubuntu1.6 git=1:2.17.1-1ubuntu0.17 vim-tiny=2:8.0.1453-1ubuntu1.11 less=487-0.1 wget=1.19.4-1ubuntu2.2 r-base=3.4.4-1ubuntu1 r-base-dev=3.4.4-1ubuntu1 r-recommended=3.4.4-1ubuntu1 fonts-texgyre=20160520-1 gdebi-core=0.9.5.7+nmu2 pandoc=1.19.2.4~dfsg-1build4 pandoc-citeproc=0.10.5.1-1build4 libcurl4-openssl-dev=7.58.0-2ubuntu3.24 libcairo2-dev=1.15.10-2ubuntu0.1 libpango1.0-dev=1.40.14-1ubuntu0.1 libxt-dev=1:1.1.5-1 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.8 texinfo=6.5.0.dfsg.1-2 rsync=3.1.2-2.1ubuntu1.6 default-jdk=2:1.11-68ubuntu1~18.04.1 bison=2:3.0.4.dfsg-1build1 libtiff5-dev=4.0.9-5ubuntu0.10 tcl8.6-dev=8.6.8+dfsg-3 tk8.6-dev=8.6.8-4 xfonts-base=1:1.0.4+nmu1 xvfb=2:1.19.6-1ubuntu4.14 gcc-8=8.4.0-1ubuntu1~18.04 g++-8=8.4.0-1ubuntu1~18.04 gdb=8.1.1-0ubuntu1 valgrind=1:3.13.0-2ubuntu2.3 clang-7=1:7-3~ubuntu0.18.04.1 lldb-7=1:7-3~ubuntu0.18.04.1 -y\nRUN locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 800 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-7\nRUN echo 'options(\\n repos = c(CRAN = \"https://cloud.r-project.org/\"),\\n download.file.method = \"libcurl\",\\n Ncpus = parallel::detectCores(logical=FALSE)\\n)' >> /etc/R/Rprofile.site\n#   Install TinyTeX (subset of TeXLive)\n#   From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n#   Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \"https://github.com/yihui/tinytex/raw/master/tools/install-unx.sh\" | sh -s - --admin --no-path \\\n && ~/.TinyTeX/bin/*/tlmgr path add \\\n && tlmgr install metafont mfware inconsolata tex ae parskip listings xcolor \\\n && tlmgr path add \\\n && Rscript -e \"source('https://install-github.me/yihui/tinytex'); tinytex::r_texmf()\"\n#   =====================================================================\n#   Install various versions of R-devel\n#   =====================================================================\n#   Clone R-devel and download recommended packages\nRUN cd /tmp \\\n && git clone --depth 1 https://github.com/wch/r-source.git \\\n && r-source/tools/rsync-recommended\nCOPY buildR.sh /tmp\n#   RD: Install normal R-devel.\n#\n#   This R installation is slightly different from the ones that follow. It is\n#   configured with the recommended packages, and has those packages installed\n#   packages to library/ (not site-library/). These packages will be shared with\n#   the other RD* installations that follow. For all the RD* installations\n#   (including this one), all packages installed after buildR.sh runs will be\n#   installed to each installation's site-library/.\n#\n#   I've set it up this way because the \"recommended\" packages take a long time\n#   to compile and in most cases aren't involved in debugging the low-level\n#   problems that this Dockerfile is for, so it's OK to compile them once and\n#   share them. Other packages, like those installed by the user and Rcpp\n#   (*especially* Rcpp), are often of interest -- they are installed for each\n#   RD* installation, and code is compiled with whatever compiler settings are\n#   used for each RD* installation.\nRUN /tmp/buildR.sh\n#   Install some commonly-used packages to a location used by all the RD*\n#   installations. These packages do not have compiled code and do not depend on\n#   packages that have compiled code.\nRUN RD -q -e 'install.packages(c(\"BH\", \"R6\", \"magrittr\", \"memoise\"), \"/usr/local/RD/lib/R/library\")'\n#   Finally, install some common packages specific to this build of R.\nRUN RD -q -e 'install.packages(c(\"devtools\", \"Rcpp\", \"roxygen2\", \"testthat\"))'\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  To build from the parent directory:\n#    docker build -t wch1/r-devel r-devel\n#\n#  To run:\n#    docker run --rm -ti --name rd wch1/r-devel\n#  Use a very recent version of Ubuntu to get the latest GCC, which we need for\n#  some of options used for ASAN builds.\nFROM ubuntu:18.04\nMAINTAINER Winston Chang \"winston@rstudio.com\"\n#  =====================================================================\n#  R\n#  =====================================================================\n#  Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n#  Need this to add R repo\nRUN apt-get update \\\n && apt-get install software-properties-common -y\n#  Add R apt repository\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nRUN add-apt-repository \"deb http://cran.r-project.org/bin/linux/ubuntu $( lsb_release -cs ;)-cran35/\"\n#  Install basic stuff, R, and other packages that are useful for compiling R\n#  and R packages.\nRUN apt-get update \\\n && apt-get install sudo locales git vim-tiny less wget r-base r-base-dev r-recommended fonts-texgyre gdebi-core pandoc pandoc-citeproc libcurl4-openssl-dev libcairo2-dev libpango1.0-dev libxt-dev libssl-dev libxml2-dev texinfo rsync default-jdk bison libtiff5-dev tcl8.6-dev tk8.6-dev xfonts-base xvfb gcc-8 g++-8 gdb valgrind clang-7 lldb-7 -y\nRUN locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 800 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-7\nRUN echo 'options(\\n repos = c(CRAN = \"https://cloud.r-project.org/\"),\\n download.file.method = \"libcurl\",\\n Ncpus = parallel::detectCores(logical=FALSE)\\n)' >> /etc/R/Rprofile.site\n#  Install TinyTeX (subset of TeXLive)\n#  From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n#  Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \"https://github.com/yihui/tinytex/raw/master/tools/install-unx.sh\" | sh -s - --admin --no-path \\\n && ~/.TinyTeX/bin/*/tlmgr path add \\\n && tlmgr install metafont mfware inconsolata tex ae parskip listings xcolor \\\n && tlmgr path add \\\n && Rscript -e \"source('https://install-github.me/yihui/tinytex'); tinytex::r_texmf()\"\n#  =====================================================================\n#  Install various versions of R-devel\n#  =====================================================================\n#  Clone R-devel and download recommended packages\nRUN cd /tmp \\\n && git clone --depth 1 https://github.com/wch/r-source.git \\\n && r-source/tools/rsync-recommended\nCOPY buildR.sh /tmp\n#  RD: Install normal R-devel.\n#\n#  This R installation is slightly different from the ones that follow. It is\n#  configured with the recommended packages, and has those packages installed\n#  packages to library/ (not site-library/). These packages will be shared with\n#  the other RD* installations that follow. For all the RD* installations\n#  (including this one), all packages installed after buildR.sh runs will be\n#  installed to each installation's site-library/.\n#\n#  I've set it up this way because the \"recommended\" packages take a long time\n#  to compile and in most cases aren't involved in debugging the low-level\n#  problems that this Dockerfile is for, so it's OK to compile them once and\n#  share them. Other packages, like those installed by the user and Rcpp\n#  (*especially* Rcpp), are often of interest -- they are installed for each\n#  RD* installation, and code is compiled with whatever compiler settings are\n#  used for each RD* installation.\nRUN /tmp/buildR.sh\n#  Install some commonly-used packages to a location used by all the RD*\n#  installations. These packages do not have compiled code and do not depend on\n#  packages that have compiled code.\nRUN RD -q -e 'install.packages(c(\"BH\", \"R6\", \"magrittr\", \"memoise\"), \"/usr/local/RD/lib/R/library\")'\n#  Finally, install some common packages specific to this build of R.\nRUN RD -q -e 'install.packages(c(\"devtools\", \"Rcpp\", \"roxygen2\", \"testthat\"))'\n","injectedSmells":[],"originalDockerfileHash":"f4fdb08817b655b117ebd28d9a1b0013","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   To build from the parent directory:\n#     docker build -t wch1/r-devel r-devel\n#\n#   To run:\n#     docker run --rm -ti --name rd wch1/r-devel\n#   Use a very recent version of Ubuntu to get the latest GCC, which we need for\n#   some of options used for ASAN builds.\nFROM ubuntu:18.04\nMAINTAINER Winston Chang \"winston@rstudio.com\"\n#   =====================================================================\n#   R\n#   =====================================================================\n#   Don't print \"debconf: unable to initialize frontend: Dialog\" messages\nARG DEBIAN_FRONTEND=noninteractive\n#   Need this to add R repo\nRUN apt-get update \\\n && apt-get install software-properties-common -y\n#   Add R apt repository\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9\nRUN add-apt-repository \"deb http://cran.r-project.org/bin/linux/ubuntu $( lsb_release -cs ;)-cran35/\"\n#   Install basic stuff, R, and other packages that are useful for compiling R\n#   and R packages.\nRUN apt-get update \\\n && apt-get install sudo locales git vim-tiny less wget r-base r-base-dev r-recommended fonts-texgyre gdebi-core pandoc pandoc-citeproc libcurl4-openssl-dev libcairo2-dev libpango1.0-dev libxt-dev libssl-dev libxml2-dev texinfo rsync default-jdk bison libtiff5-dev tcl8.6-dev tk8.6-dev xfonts-base xvfb gcc-8 g++-8 gdb valgrind clang-7 lldb-7 -y\nRUN locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=en_US.UTF-8\nENV LANG=\"en_US.UTF-8\"\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8\nRUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 800 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-7\nRUN echo 'options(\\n repos = c(CRAN = \"https://cloud.r-project.org/\"),\\n download.file.method = \"libcurl\",\\n Ncpus = parallel::detectCores(logical=FALSE)\\n)' >> /etc/R/Rprofile.site\n#   Install TinyTeX (subset of TeXLive)\n#   From FAQ 5 and 6 here: https://yihui.name/tinytex/faq/\n#   Also install ae, parskip, and listings packages to build R vignettes\nRUN wget -qO- \"https://github.com/yihui/tinytex/raw/master/tools/install-unx.sh\" | sh -s - --admin --no-path \\\n && ~/.TinyTeX/bin/*/tlmgr path add \\\n && tlmgr install metafont mfware inconsolata tex ae parskip listings xcolor \\\n && tlmgr path add \\\n && Rscript -e \"source('https://install-github.me/yihui/tinytex'); tinytex::r_texmf()\"\n#   =====================================================================\n#   Install various versions of R-devel\n#   =====================================================================\n#   Clone R-devel and download recommended packages\nRUN cd /tmp \\\n && git clone --depth 1 https://github.com/wch/r-source.git \\\n && r-source/tools/rsync-recommended\nCOPY buildR.sh /tmp\n#   RD: Install normal R-devel.\n#\n#   This R installation is slightly different from the ones that follow. It is\n#   configured with the recommended packages, and has those packages installed\n#   packages to library/ (not site-library/). These packages will be shared with\n#   the other RD* installations that follow. For all the RD* installations\n#   (including this one), all packages installed after buildR.sh runs will be\n#   installed to each installation's site-library/.\n#\n#   I've set it up this way because the \"recommended\" packages take a long time\n#   to compile and in most cases aren't involved in debugging the low-level\n#   problems that this Dockerfile is for, so it's OK to compile them once and\n#   share them. Other packages, like those installed by the user and Rcpp\n#   (*especially* Rcpp), are often of interest -- they are installed for each\n#   RD* installation, and code is compiled with whatever compiler settings are\n#   used for each RD* installation.\nRUN /tmp/buildR.sh\n#   Install some commonly-used packages to a location used by all the RD*\n#   installations. These packages do not have compiled code and do not depend on\n#   packages that have compiled code.\nRUN RD -q -e 'install.packages(c(\"BH\", \"R6\", \"magrittr\", \"memoise\"), \"/usr/local/RD/lib/R/library\")'\n#   Finally, install some common packages specific to this build of R.\nRUN RD -q -e 'install.packages(c(\"devtools\", \"Rcpp\", \"roxygen2\", \"testthat\"))'\n","originalDockerfileUglifiedHash":"4d2ddfdb38821b9eb3a4192d620f6f6b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8eda30b30c57943412544e1d3b01604048cba5ee.dockerfile"}