{"seed":2885542243,"processedDockerfileHash":"685eb8e3de7655791c9d119a70e40f2d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"FROM node:8-alpine\nARG NAME=styleguide\nARG DESCRIPTION=\"Reaction Components Style Guide\"\nARG URL=https://github.com/reactioncommerce/reaction-component-library\nARG DOC_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_REF\nARG VENDOR\nARG BUILD_DATE\nARG BUILD_COMPARE_URL\nARG BUILD_ENV=test\nARG BUILD_NUMBER\nARG BUILD_PLATFORM\nARG BUILD_PLATFORM_PROJECT_USERNAME\nARG BUILD_PLATFORM_PROJECT_REPONAME\nARG BUILD_PULL_REQUESTS\nARG BUILD_TRIGGERED_BY_TAG\nARG BUILD_URL\nARG CIRCLE_WORKSPACE_ID\nARG CIRCLE_WORKFLOW_ID\nARG CIRCLE_WORKFLOW_JOB_ID\nARG CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\nARG CIRCLE_WORKSPACE_ID\nARG GIT_REPOSITORY_URL\nARG GIT_SHA1\nARG LICENSE\nENV APP_SOURCE_DIR=\"/usr/local/src/reaction-app\" \\\n    PATH=\"$PATH:/usr/local/src/reaction-app/node_modules/.bin\"\nLABEL maintainer=\"Reaction Commerce <engineering@reactioncommerce.com>\" \\\n      com.reactioncommerce.build-date=\"$BUILD_DATE\" \\\n      com.reactioncommerce.name=\"$NAME\" \\\n      com.reactioncommerce.description=\"$DESCRIPTION\" \\\n      com.reactioncommerce.url=\"$URL\" \\\n      com.reactioncommerce.vcs-url=\"$VCS_URL\" \\\n      com.reactioncommerce.vcs-ref=\"$VCS_REF\" \\\n      com.reactioncommerce.vendor=\"$VENDOR\" \\\n      com.reactioncommerce.docker.build.compare-url=\"$BUILD_COMPARE_URL\" \\\n      com.reactioncommerce.docker.build.number=\"$BUILD_NUMBER\" \\\n      com.reactioncommerce.docker.build.platform=\"$BUILD_PLATFORM\" \\\n      com.reactioncommerce.docker.build.platform.project.username=\"$BUILD_PLATFORM_PROJECT_USERNAME\" \\\n      com.reactioncommerce.docker.build.platform.project.reponame=\"$BUILD_PLATFORM_PROJECT_REPONAME\" \\\n      com.reactioncommerce.docker.build.pull-requests=\"$BUILD_PULL_REQUESTS\" \\\n      com.reactioncommerce.docker.build.triggered-by-tag=\"$BUILD_TRIGGERED_BY_TAG\" \\\n      com.reactioncommerce.docker.build.url=\"$BUILD_URL\" \\\n      com.reactioncommerce.docker.build.circle.workflow.id=\"$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.job.id=\"$CIRCLE_WORKFLOW_JOB_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.upstream.job.ids=\"$CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\" \\\n      com.reactioncommerce.docker.build.circle.workflow.url=\"https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workspace.id=\"$CIRCLE_WORKSPACE_ID\" \\\n      com.reactioncommerce.docker.git.repository.url=\"$GIT_REPOSITORY_URL\" \\\n      com.reactioncommerce.docker.git.sha1=\"$GIT_SHA1\" \\\n      com.reactioncommerce.docker.license=\"$LICENSE\"\n#   Because Docker Compose uses a volume for node_modules and volumes are owned\n#   by root by default, we have to initially create node_modules here with correct owner.\n#   Without this Yarn cannot write packages into node_modules later, when running in a container.\nRUN mkdir -p \"/usr/local/src/reaction-app/node_modules\"\nRUN mkdir -p \"/usr/local/src/reaction-app/package/node_modules\"\nRUN chown node \"/usr/local/src\"\nRUN chown node \"/usr/local/src/reaction-app\"\nRUN chown node \"/usr/local/src/reaction-app/node_modules\"\nRUN chown node \"/usr/local/src/reaction-app/package/node_modules\"\nWORKDIR $APP_SOURCE_DIR\n#   Note that the two node_modules directories will not be copied during\n#   this due to being listed in the `.dockerignore` file.\nCOPY --chown=node . $APP_SOURCE_DIR\n#   Build the dependencies into the Docker image in a cacheable way. Dependencies\n#   are only rebuilt when package.json or yarn.lock is modified.\n#\n#   The project directory will be mounted during development. Therefore, we'll\n#   install dependencies into an external directory (one level up.) This works\n#   because Node traverses up the fs to find node_modules.\nRUN set -ex ; if [ \"$BUILD_ENV\" = \"production\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; elif [ \"$BUILD_ENV\" = \"test\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; fi\n#   For development, we will yarn install on each container start.\n#   This ensures that we use our Docker development .yarnrc config\n#   and get any add/changed dependencies without needing a full rebuild.\n#\n#   We are copying in a .yarnrc file that is specific to running within Docker.\n#   Thus, we don't want it in the main repo because it breaks yarn on the host\n#   machine. We also don't want it in APP_SOURCE_DIR where docker-compose will\n#   link in host files, so we create it as the user-level config.\n#   Note that this will be copied in for a prod build, too, but since\n#   we already ran yarn install above, it doesn't matter.\nCOPY --chown=node ./.reaction/yarnrc-docker.template /home/node/.yarnrc\n#   Important: Make sure we're the \"node\" user before we begin doing things because\n#   our tools use \"/home/node\" as the HOME dir.\nUSER node\nRUN yarn run build\nCMD [\"yarn\", \"start\"]\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"FROM node:8-alpine\nARG NAME=styleguide\nARG DESCRIPTION=\"Reaction Components Style Guide\"\nARG URL=https://github.com/reactioncommerce/reaction-component-library\nARG DOC_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_REF\nARG VENDOR\nARG BUILD_DATE\nARG BUILD_COMPARE_URL\nARG BUILD_ENV=test\nARG BUILD_NUMBER\nARG BUILD_PLATFORM\nARG BUILD_PLATFORM_PROJECT_USERNAME\nARG BUILD_PLATFORM_PROJECT_REPONAME\nARG BUILD_PULL_REQUESTS\nARG BUILD_TRIGGERED_BY_TAG\nARG BUILD_URL\nARG CIRCLE_WORKSPACE_ID\nARG CIRCLE_WORKFLOW_ID\nARG CIRCLE_WORKFLOW_JOB_ID\nARG CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\nARG CIRCLE_WORKSPACE_ID\nARG GIT_REPOSITORY_URL\nARG GIT_SHA1\nARG LICENSE\nENV APP_SOURCE_DIR=\"/usr/local/src/reaction-app\" \\\n    PATH=\"$PATH:/usr/local/src/reaction-app/node_modules/.bin\"\nLABEL maintainer=\"Reaction Commerce <engineering@reactioncommerce.com>\" \\\n      com.reactioncommerce.build-date=\"$BUILD_DATE\" \\\n      com.reactioncommerce.name=\"$NAME\" \\\n      com.reactioncommerce.description=\"$DESCRIPTION\" \\\n      com.reactioncommerce.url=\"$URL\" \\\n      com.reactioncommerce.vcs-url=\"$VCS_URL\" \\\n      com.reactioncommerce.vcs-ref=\"$VCS_REF\" \\\n      com.reactioncommerce.vendor=\"$VENDOR\" \\\n      com.reactioncommerce.docker.build.compare-url=\"$BUILD_COMPARE_URL\" \\\n      com.reactioncommerce.docker.build.number=\"$BUILD_NUMBER\" \\\n      com.reactioncommerce.docker.build.platform=\"$BUILD_PLATFORM\" \\\n      com.reactioncommerce.docker.build.platform.project.username=\"$BUILD_PLATFORM_PROJECT_USERNAME\" \\\n      com.reactioncommerce.docker.build.platform.project.reponame=\"$BUILD_PLATFORM_PROJECT_REPONAME\" \\\n      com.reactioncommerce.docker.build.pull-requests=\"$BUILD_PULL_REQUESTS\" \\\n      com.reactioncommerce.docker.build.triggered-by-tag=\"$BUILD_TRIGGERED_BY_TAG\" \\\n      com.reactioncommerce.docker.build.url=\"$BUILD_URL\" \\\n      com.reactioncommerce.docker.build.circle.workflow.id=\"$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.job.id=\"$CIRCLE_WORKFLOW_JOB_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.upstream.job.ids=\"$CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\" \\\n      com.reactioncommerce.docker.build.circle.workflow.url=\"https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workspace.id=\"$CIRCLE_WORKSPACE_ID\" \\\n      com.reactioncommerce.docker.git.repository.url=\"$GIT_REPOSITORY_URL\" \\\n      com.reactioncommerce.docker.git.sha1=\"$GIT_SHA1\" \\\n      com.reactioncommerce.docker.license=\"$LICENSE\"\n#  Because Docker Compose uses a volume for node_modules and volumes are owned\n#  by root by default, we have to initially create node_modules here with correct owner.\n#  Without this Yarn cannot write packages into node_modules later, when running in a container.\nRUN mkdir -p \"/usr/local/src/reaction-app/node_modules\"\nRUN mkdir -p \"/usr/local/src/reaction-app/package/node_modules\"\nRUN chown node \"/usr/local/src\"\nRUN chown node \"/usr/local/src/reaction-app\"\nRUN chown node \"/usr/local/src/reaction-app/node_modules\"\nRUN chown node \"/usr/local/src/reaction-app/package/node_modules\"\nWORKDIR $APP_SOURCE_DIR\n#  Note that the two node_modules directories will not be copied during\n#  this due to being listed in the `.dockerignore` file.\nCOPY --chown=node . $APP_SOURCE_DIR\n#  Build the dependencies into the Docker image in a cacheable way. Dependencies\n#  are only rebuilt when package.json or yarn.lock is modified.\n#\n#  The project directory will be mounted during development. Therefore, we'll\n#  install dependencies into an external directory (one level up.) This works\n#  because Node traverses up the fs to find node_modules.\nRUN set -ex ; if [ \"$BUILD_ENV\" = \"production\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; elif [ \"$BUILD_ENV\" = \"test\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; fi\n#  For development, we will yarn install on each container start.\n#  This ensures that we use our Docker development .yarnrc config\n#  and get any add/changed dependencies without needing a full rebuild.\n#\n#  We are copying in a .yarnrc file that is specific to running within Docker.\n#  Thus, we don't want it in the main repo because it breaks yarn on the host\n#  machine. We also don't want it in APP_SOURCE_DIR where docker-compose will\n#  link in host files, so we create it as the user-level config.\n#  Note that this will be copied in for a prod build, too, but since\n#  we already ran yarn install above, it doesn't matter.\nCOPY --chown=node ./.reaction/yarnrc-docker.template /home/node/.yarnrc\n#  Important: Make sure we're the \"node\" user before we begin doing things because\n#  our tools use \"/home/node\" as the HOME dir.\nUSER node\nRUN yarn run build\nCMD [\"yarn\", \"start\"]\n","injectedSmells":[],"originalDockerfileHash":"d34e179fa57535e695da7073abfde163","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM node:8-alpine\nARG NAME=styleguide\nARG DESCRIPTION=\"Reaction Components Style Guide\"\nARG URL=https://github.com/reactioncommerce/reaction-component-library\nARG DOC_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_URL=https://github.com/reactioncommerce/reaction-component-library\nARG VCS_REF\nARG VENDOR\nARG BUILD_DATE\nARG BUILD_COMPARE_URL\nARG BUILD_ENV=test\nARG BUILD_NUMBER\nARG BUILD_PLATFORM\nARG BUILD_PLATFORM_PROJECT_USERNAME\nARG BUILD_PLATFORM_PROJECT_REPONAME\nARG BUILD_PULL_REQUESTS\nARG BUILD_TRIGGERED_BY_TAG\nARG BUILD_URL\nARG CIRCLE_WORKSPACE_ID\nARG CIRCLE_WORKFLOW_ID\nARG CIRCLE_WORKFLOW_JOB_ID\nARG CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\nARG CIRCLE_WORKSPACE_ID\nARG GIT_REPOSITORY_URL\nARG GIT_SHA1\nARG LICENSE\nENV APP_SOURCE_DIR=\"/usr/local/src/reaction-app\" \\\n    PATH=\"$PATH:/usr/local/src/reaction-app/node_modules/.bin\"\nLABEL maintainer=\"Reaction Commerce <engineering@reactioncommerce.com>\" \\\n      com.reactioncommerce.build-date=\"$BUILD_DATE\" \\\n      com.reactioncommerce.name=\"$NAME\" \\\n      com.reactioncommerce.description=\"$DESCRIPTION\" \\\n      com.reactioncommerce.url=\"$URL\" \\\n      com.reactioncommerce.vcs-url=\"$VCS_URL\" \\\n      com.reactioncommerce.vcs-ref=\"$VCS_REF\" \\\n      com.reactioncommerce.vendor=\"$VENDOR\" \\\n      com.reactioncommerce.docker.build.compare-url=\"$BUILD_COMPARE_URL\" \\\n      com.reactioncommerce.docker.build.number=\"$BUILD_NUMBER\" \\\n      com.reactioncommerce.docker.build.platform=\"$BUILD_PLATFORM\" \\\n      com.reactioncommerce.docker.build.platform.project.username=\"$BUILD_PLATFORM_PROJECT_USERNAME\" \\\n      com.reactioncommerce.docker.build.platform.project.reponame=\"$BUILD_PLATFORM_PROJECT_REPONAME\" \\\n      com.reactioncommerce.docker.build.pull-requests=\"$BUILD_PULL_REQUESTS\" \\\n      com.reactioncommerce.docker.build.triggered-by-tag=\"$BUILD_TRIGGERED_BY_TAG\" \\\n      com.reactioncommerce.docker.build.url=\"$BUILD_URL\" \\\n      com.reactioncommerce.docker.build.circle.workflow.id=\"$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.job.id=\"$CIRCLE_WORKFLOW_JOB_ID\" \\\n      com.reactioncommerce.docker.build.circle.workflow.upstream.job.ids=\"$CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS\" \\\n      com.reactioncommerce.docker.build.circle.workflow.url=\"https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID\" \\\n      com.reactioncommerce.docker.build.circle.workspace.id=\"$CIRCLE_WORKSPACE_ID\" \\\n      com.reactioncommerce.docker.git.repository.url=\"$GIT_REPOSITORY_URL\" \\\n      com.reactioncommerce.docker.git.sha1=\"$GIT_SHA1\" \\\n      com.reactioncommerce.docker.license=\"$LICENSE\"\n#   Because Docker Compose uses a volume for node_modules and volumes are owned\n#   by root by default, we have to initially create node_modules here with correct owner.\n#   Without this Yarn cannot write packages into node_modules later, when running in a container.\nRUN mkdir -p \"/usr/local/src/reaction-app/node_modules\"\nRUN mkdir -p \"/usr/local/src/reaction-app/package/node_modules\"\nRUN chown node \"/usr/local/src\"\nRUN chown node \"/usr/local/src/reaction-app\"\nRUN chown node \"/usr/local/src/reaction-app/node_modules\"\nRUN chown node \"/usr/local/src/reaction-app/package/node_modules\"\nWORKDIR $APP_SOURCE_DIR\n#   Note that the two node_modules directories will not be copied during\n#   this due to being listed in the `.dockerignore` file.\nCOPY --chown=node . $APP_SOURCE_DIR\n#   Build the dependencies into the Docker image in a cacheable way. Dependencies\n#   are only rebuilt when package.json or yarn.lock is modified.\n#\n#   The project directory will be mounted during development. Therefore, we'll\n#   install dependencies into an external directory (one level up.) This works\n#   because Node traverses up the fs to find node_modules.\nRUN set -ex ; if [ \"$BUILD_ENV\" = \"production\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; elif [ \"$BUILD_ENV\" = \"test\" ] ; then yarn install --frozen-lockfile --ignore-scripts --no-cache ;cd package \\\n && yarn install --frozen-lockfile --ignore-scripts --no-cache ; fi\n#   For development, we will yarn install on each container start.\n#   This ensures that we use our Docker development .yarnrc config\n#   and get any add/changed dependencies without needing a full rebuild.\n#\n#   We are copying in a .yarnrc file that is specific to running within Docker.\n#   Thus, we don't want it in the main repo because it breaks yarn on the host\n#   machine. We also don't want it in APP_SOURCE_DIR where docker-compose will\n#   link in host files, so we create it as the user-level config.\n#   Note that this will be copied in for a prod build, too, but since\n#   we already ran yarn install above, it doesn't matter.\nCOPY --chown=node ./.reaction/yarnrc-docker.template /home/node/.yarnrc\n#   Important: Make sure we're the \"node\" user before we begin doing things because\n#   our tools use \"/home/node\" as the HOME dir.\nUSER node\nRUN yarn run build\nCMD [\"yarn\", \"start\"]\n","originalDockerfileUglifiedHash":"950c23da72b20b32d9843710421dae91","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ba9d86067bd41260325131adb895234f085715d9.dockerfile"}