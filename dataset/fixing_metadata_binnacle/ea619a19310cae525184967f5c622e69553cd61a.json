{"seed":2722732941,"processedDockerfileHash":"544bdcb8dd561e5f7d632d5d292cc3cc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","have-a-healthcheck"],"processedDockerfile":"FROM lmoresi/uw2-jupyter-hub-tested:latest\n#  FROM underworldcode/underworld2:latest\nMAINTAINER MAINTAINER https://github.com/underworldcode/\n#   Configure environment for singleuser\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\nUSER root\n#   Install jupyterhub dependencies, including python3\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends npm nodejs-legacy python3 python3-pip python3-dev\nRUN pip3 install 'jupyterhub==0.8.1' jupyterlab ipyparallel\nRUN npm install configurable-http-proxy@4.5.5 -g\n#   Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#   switching at runtime and to allow the notebook server running out of the root\n#   environment to find it. Also, activate the python2 environment upon kernel\n#   launch.\nRUN python -m ipykernel install\n#   Setup ipyparallel for mpi profile for the NBUSER?\nUSER $NB_USER\nWORKDIR $HOME\nRUN ipython2 profile create --parallel --profile=mpi \\\n && echo \"c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'\" >> $HOME/.ipython/profile_mpi/ipcluster_config.py\n#   Trust underworld notebooks\nRUN find /workspace -name *.ipynb -print0 | xargs -0 jupyter trust\nUSER root\n#   Copy contents of home directory into /workspace so it'll be copied into the\n#   user's persistent home directory the first time they start their server.\nRUN rsync -au \"$HOME\"/.ipython \"$HOME\"/.jupyter /workspace/\n#   Reinstate the xvfb entrypoint, required for underworld viz, and use the\n#   customised start command to set up the underworld notebooks in the jupyterhub\n#   environment.\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\", \"underworld-entrypoint.sh\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting. These are the\n#   jupyter(hub) startup scripts and config file.\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY underworld-entrypoint.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#   Include a default landing page for the notebook. See the DEFAULT_LANDING\n#   environment variable below for how to enable this option.\nCOPY index.html /workspace\n#   Set the DEFAULT_LANDING environment variable to the notebook URL we want as\n#   the landing page a user will see when they first open their server. We can use\n#   any notebook URL minus the host and '/user/<username>' parts.\n#\n#   Setting the environment variable here hard codes the default value in any\n#   image you build. You can override it in a derived Dockerfile, or by passing\n#   the desired value to a container at runtime.\n#   Use '/tree' to replicate the built-in behaviour of the notebook - the\n#   directory browser starting in the user's home directory.\n#  ENV DEFAULT_LANDING /tree\n#   Start in a specific directory deeper in the user's home directory.\n#  ENV DEFAULT_LANDING /tree/tutorials/ConvectionTutorial/Notebooks\n#   Use the index.html we copied above as the landing page.\nENV DEFAULT_LANDING=\"/files/index.html\"\n#   Jump directly to a specific notebook.\n#  ENV DEFAULT_LANDING /notebooks/examples/1_01_Steady_State_Heat.ipynb\n#   Open a file in the corresponding notebook viewer\n#  ENV DEFAULT_LANDING /view/<filename>\n#   Open a file in the notebook editor\n#  ENV DEFAULT_LANDING /edit/install_guides/nci_raijin.sh\nUSER $NB_USER\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lmoresi/uw2-jupyter-hub-tested:latest\n# FROM underworldcode/underworld2:latest\nMAINTAINER MAINTAINER https://github.com/underworldcode/\n#  Configure environment for singleuser\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER\nUSER $NB_USER\n#  Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\nUSER root\n#  Install jupyterhub dependencies, including python3\nRUN apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends npm nodejs-legacy python3 python3-pip python3-dev\nRUN pip3 install 'jupyterhub==0.8.1' jupyterlab ipyparallel\nRUN npm install configurable-http-proxy -g\n#  Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#  switching at runtime and to allow the notebook server running out of the root\n#  environment to find it. Also, activate the python2 environment upon kernel\n#  launch.\nRUN python -m ipykernel install\n#  Setup ipyparallel for mpi profile for the NBUSER?\nUSER $NB_USER\nWORKDIR $HOME\nRUN ipython2 profile create --parallel --profile=mpi \\\n && echo \"c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'\" >> $HOME/.ipython/profile_mpi/ipcluster_config.py\n#  Trust underworld notebooks\nRUN find /workspace -name *.ipynb -print0 | xargs -0 jupyter trust\nUSER root\n#  Copy contents of home directory into /workspace so it'll be copied into the\n#  user's persistent home directory the first time they start their server.\nRUN rsync -au \"$HOME\"/.ipython \"$HOME\"/.jupyter /workspace/\n#  Reinstate the xvfb entrypoint, required for underworld viz, and use the\n#  customised start command to set up the underworld notebooks in the jupyterhub\n#  environment.\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\", \"underworld-entrypoint.sh\"]\nCMD [\"start-notebook.sh\"]\n#  Add local files as late as possible to avoid cache busting. These are the\n#  jupyter(hub) startup scripts and config file.\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY underworld-entrypoint.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#  Include a default landing page for the notebook. See the DEFAULT_LANDING\n#  environment variable below for how to enable this option.\nCOPY index.html /workspace\n#  Set the DEFAULT_LANDING environment variable to the notebook URL we want as\n#  the landing page a user will see when they first open their server. We can use\n#  any notebook URL minus the host and '/user/<username>' parts.\n#\n#  Setting the environment variable here hard codes the default value in any\n#  image you build. You can override it in a derived Dockerfile, or by passing\n#  the desired value to a container at runtime.\n#  Use '/tree' to replicate the built-in behaviour of the notebook - the\n#  directory browser starting in the user's home directory.\n# ENV DEFAULT_LANDING /tree\n#  Start in a specific directory deeper in the user's home directory.\n# ENV DEFAULT_LANDING /tree/tutorials/ConvectionTutorial/Notebooks\n#  Use the index.html we copied above as the landing page.\nENV DEFAULT_LANDING=\"/files/index.html\"\n#  Jump directly to a specific notebook.\n# ENV DEFAULT_LANDING /notebooks/examples/1_01_Steady_State_Heat.ipynb\n#  Open a file in the corresponding notebook viewer\n# ENV DEFAULT_LANDING /view/<filename>\n#  Open a file in the notebook editor\n# ENV DEFAULT_LANDING /edit/install_guides/nci_raijin.sh\nUSER $NB_USER\n","injectedSmells":[],"originalDockerfileHash":"58351662a154816821304f4ba2499b8d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lmoresi/uw2-jupyter-hub-tested:latest\n#  FROM underworldcode/underworld2:latest\nMAINTAINER MAINTAINER https://github.com/underworldcode/\n#   Configure environment for singleuser\nENV SHELL=\"/bin/bash\"\nENV NB_USER=\"jovyan\"\nENV NB_UID=\"1000\"\nENV HOME=\"/home/$NB_USER\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#   Create jovyan user with UID=1000 and in the 'users' group\nRUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER\nUSER $NB_USER\n#   Setup work directory for backward-compatibility\nRUN mkdir /home/$NB_USER/work\nUSER root\n#   Install jupyterhub dependencies, including python3\nRUN apt-get update -qq \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends npm nodejs-legacy python3 python3-pip python3-dev\nRUN pip3 install 'jupyterhub==0.8.1' jupyterlab ipyparallel\nRUN npm install configurable-http-proxy -g\n#   Install Python 2 kernel spec globally to avoid permission problems when NB_UID\n#   switching at runtime and to allow the notebook server running out of the root\n#   environment to find it. Also, activate the python2 environment upon kernel\n#   launch.\nRUN python -m ipykernel install\n#   Setup ipyparallel for mpi profile for the NBUSER?\nUSER $NB_USER\nWORKDIR $HOME\nRUN ipython2 profile create --parallel --profile=mpi \\\n && echo \"c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'\" >> $HOME/.ipython/profile_mpi/ipcluster_config.py\n#   Trust underworld notebooks\nRUN find /workspace -name *.ipynb -print0 | xargs -0 jupyter trust\nUSER root\n#   Copy contents of home directory into /workspace so it'll be copied into the\n#   user's persistent home directory the first time they start their server.\nRUN rsync -au \"$HOME\"/.ipython \"$HOME\"/.jupyter /workspace/\n#   Reinstate the xvfb entrypoint, required for underworld viz, and use the\n#   customised start command to set up the underworld notebooks in the jupyterhub\n#   environment.\nENTRYPOINT [\"/usr/local/bin/tini\", \"--\", \"underworld-entrypoint.sh\"]\nCMD [\"start-notebook.sh\"]\n#   Add local files as late as possible to avoid cache busting. These are the\n#   jupyter(hub) startup scripts and config file.\nCOPY start.sh /usr/local/bin/\nCOPY start-notebook.sh /usr/local/bin/\nCOPY start-singleuser.sh /usr/local/bin/\nCOPY underworld-entrypoint.sh /usr/local/bin/\nCOPY jupyter_notebook_config.py /etc/jupyter/\nRUN chown -R $NB_USER:users /etc/jupyter/\n#   Include a default landing page for the notebook. See the DEFAULT_LANDING\n#   environment variable below for how to enable this option.\nCOPY index.html /workspace\n#   Set the DEFAULT_LANDING environment variable to the notebook URL we want as\n#   the landing page a user will see when they first open their server. We can use\n#   any notebook URL minus the host and '/user/<username>' parts.\n#\n#   Setting the environment variable here hard codes the default value in any\n#   image you build. You can override it in a derived Dockerfile, or by passing\n#   the desired value to a container at runtime.\n#   Use '/tree' to replicate the built-in behaviour of the notebook - the\n#   directory browser starting in the user's home directory.\n#  ENV DEFAULT_LANDING /tree\n#   Start in a specific directory deeper in the user's home directory.\n#  ENV DEFAULT_LANDING /tree/tutorials/ConvectionTutorial/Notebooks\n#   Use the index.html we copied above as the landing page.\nENV DEFAULT_LANDING=\"/files/index.html\"\n#   Jump directly to a specific notebook.\n#  ENV DEFAULT_LANDING /notebooks/examples/1_01_Steady_State_Heat.ipynb\n#   Open a file in the corresponding notebook viewer\n#  ENV DEFAULT_LANDING /view/<filename>\n#   Open a file in the notebook editor\n#  ENV DEFAULT_LANDING /edit/install_guides/nci_raijin.sh\nUSER $NB_USER\n","originalDockerfileUglifiedHash":"110e017ee5f2f5f7c8e5df1d1474470c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ea619a19310cae525184967f5c622e69553cd61a.dockerfile"}