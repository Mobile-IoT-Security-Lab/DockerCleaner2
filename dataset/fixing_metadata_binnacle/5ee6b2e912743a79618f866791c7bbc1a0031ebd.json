{"seed":1757416960,"processedDockerfileHash":"1b5b353f30cd95ba83061cf07a8053ae","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:bionic-20181204\n#   environment variables\nENV APP_USER=\"xiph\" \\\n    APP_DIR=\"/opt/app\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    LANGUAGE=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    GPG_SERVERS=\"ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu\"\n#   add runtime user\nRUN groupadd --gid 1000 ${APP_USER} \\\n && useradd --uid 1000 --gid ${APP_USER} --shell /bin/bash --create-home ${APP_USER}\n#   install base build dependencies and useful packages\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse\" > /etc/apt/sources.list \\\n && echo \"deb http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && echo \"deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential bzip2 ca-certificates check cmake cmake-extras curl dirmngr file gettext-base git-core gpg gpg-agent iproute2 iputils-ping jq less libicu-dev libjpeg-dev libogg-dev libpng-dev libtool locales nasm netcat-openbsd net-tools openjdk-8-jdk-headless openssl pkg-config procps psmisc python2.7 rsync runit sqlite3 strace tcpdump tzdata unzip uuid vim wget xz-utils yasm -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists\n#   set working directory\nWORKDIR ${APP_DIR}\n#   prepare rust installation\nENV RUSTUP_HOME=\"/usr/local/rustup\" \\\n    CARGO_HOME=\"/usr/local/cargo\" \\\n    PATH=\"/usr/local/cargo/bin:${PATH}\"\n#   install rust\nRUN RUST_VERSION=1.30.1 \\\n && curl -sSf --output /tmp/rustup-init https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init \\\n && chmod +x /tmp/rustup-init \\\n && /tmp/rustup-init -y --no-modify-path --default-toolchain ${RUST_VERSION} \\\n && rm -vf /tmp/rustup-init \\\n && chmod -R a+w ${RUSTUP_HOME} ${CARGO_HOME}\n#   install node 8.x\nRUN NODE_VERSION=8.12.0 \\\n && ARCH=x64 \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys \"${key}\" \\\n && break || : ; done ; done \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-${ARCH}.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar xJf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" -C /usr --strip-components=1 --no-same-owner \\\n && rm -vf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/bin/node /usr/bin/nodejs\n#   install emscripten\nRUN EMSDK_VERSION=sdk-1.38.20-64bit \\\n && mkdir -p /opt/emsdk \\\n && curl -sSL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | tar zxf - -C /opt/emsdk --strip-components=1 \\\n && cd /opt/emsdk \\\n && ./emsdk update \\\n && ./emsdk install ${EMSDK_VERSION} \\\n && ./emsdk activate ${EMSDK_VERSION} \\\n && echo \"hack emscript config getter (em-config)\" \\\n && cp /root/.emscripten /home/${APP_USER}/.emscripten \\\n && printf '#!/usr/bin/env python\\nimport os, sys\\nexecfile(os.getenv(\"HOME\")+\"/.emscripten\")\\nprint eval(sys.argv[1])\\n' > /usr/local/bin/em-config \\\n && chmod a+x /usr/local/bin/em-config\n#   install tini\nRUN TINI_VERSION=v0.18.0 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys 0527A9B7 \\\n && break || : ; done \\\n && wget -O/usr/bin/tini \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\" \\\n && wget -O/usr/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\" \\\n && gpg --verify /usr/bin/tini.asc \\\n && rm -f /usr/bin/tini.asc \\\n && chmod a+x /usr/bin/tini\n#   install gosu\nRUN GOSU_VERSION=1.11 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && wget -O/usr/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && wget -O/usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\" \\\n && gpg --verify /usr/bin/gosu.asc \\\n && rm -f /usr/bin/gosu.asc \\\n && chmod a+x /usr/bin/gosu\n#   install daalatool\nENV DAALATOOL_DIR=\"/opt/daalatool\"\nRUN mkdir -p $( dirname ${DAALATOOL_DIR} ;) \\\n && git clone https://github.com/xiph/daala.git ${DAALATOOL_DIR} \\\n && cd ${DAALATOOL_DIR} \\\n && ./autogen.sh \\\n && ./configure --disable-player \\\n && make tools -j4\n#   install rd_tool and dependencies\nENV RD_TOOL_DIR=\"/opt/rd_tool\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc python3-boto3 python3-numpy python3-scipy python3-tornado ssh time -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists \\\n && mkdir -p ${RD_TOOL_DIR} \\\n && rm -vf /etc/ssh/ssh_host_* \\\n && curl -sSL https://github.com/tdaede/rd_tool/tarball/master | tar zxf - -C ${RD_TOOL_DIR} --strip-components=1\n#   add code\nCOPY package.json *.ts tsconfig.json ${APP_DIR}/\nCOPY www ${APP_DIR}/www\n#   compile typescript/nodejs code\nRUN cd ${APP_DIR} \\\n && export PYTHON=python2.7 \\\n && npm install \\\n && npm run tsc \\\n && cd ${APP_DIR}/www \\\n && npm install \\\n && npm run build\n#   add scripts\nCOPY *.m *.sh *.py ${APP_DIR}/\n#   environment variables\nENV CONFIG_DIR=\"/data/conf\" \\\n    CODECS_SRC_DIR=\"/data/src\" \\\n    RUNS_DST_DIR=\"/data/runs\" \\\n    WORK_DIR=\"/data/work\" \\\n    MEDIAS_SRC_DIR=\"/data/media\" \\\n    LOCAL_WORKER_ENABLED=\"false\" \\\n    IRC_CHANNEL=\"none\" \\\n    AWCY_API_KEY=\"awcy_api_key\" \\\n    AWCY_SERVER_PORT=\"3000\" \\\n    RD_SERVER_PORT=\"4000\"\n#   set entrypoint\nENTRYPOINT [\"/etc/entrypoint\"]\n#   add configuration scripts\nCOPY etc /etc\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:bionic-20181204\n#  environment variables\nENV APP_USER=\"xiph\" \\\n    APP_DIR=\"/opt/app\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    LANGUAGE=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    GPG_SERVERS=\"ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu\"\n#  add runtime user\nRUN groupadd --gid 1000 ${APP_USER} \\\n && useradd --uid 1000 --gid ${APP_USER} --shell /bin/bash --create-home ${APP_USER}\n#  install base build dependencies and useful packages\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse\" > /etc/apt/sources.list \\\n && echo \"deb http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && echo \"deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential bzip2 ca-certificates check cmake cmake-extras curl dirmngr file gettext-base git-core gpg gpg-agent iproute2 iputils-ping jq less libicu-dev libjpeg-dev libogg-dev libpng-dev libtool locales nasm netcat-openbsd net-tools openjdk-8-jdk-headless openssl pkg-config procps psmisc python2.7 rsync runit sqlite3 strace tcpdump tzdata unzip uuid vim wget xz-utils yasm -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists\n#  set working directory\nWORKDIR ${APP_DIR}\n#  prepare rust installation\nENV RUSTUP_HOME=\"/usr/local/rustup\" \\\n    CARGO_HOME=\"/usr/local/cargo\" \\\n    PATH=\"/usr/local/cargo/bin:${PATH}\"\n#  install rust\nRUN RUST_VERSION=1.30.1 \\\n && curl -sSf --output /tmp/rustup-init https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init \\\n && chmod +x /tmp/rustup-init \\\n && /tmp/rustup-init -y --no-modify-path --default-toolchain ${RUST_VERSION} \\\n && rm -vf /tmp/rustup-init \\\n && chmod -R a+w ${RUSTUP_HOME} ${CARGO_HOME}\n#  install node 8.x\nRUN NODE_VERSION=8.12.0 \\\n && ARCH=x64 \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys \"${key}\" \\\n && break || : ; done ; done \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-${ARCH}.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar xJf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" -C /usr --strip-components=1 --no-same-owner \\\n && rm -vf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/bin/node /usr/bin/nodejs\n#  install emscripten\nRUN EMSDK_VERSION=sdk-1.38.20-64bit \\\n && mkdir -p /opt/emsdk \\\n && curl -sSL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | tar zxf - -C /opt/emsdk --strip-components=1 \\\n && cd /opt/emsdk \\\n && ./emsdk update \\\n && ./emsdk install ${EMSDK_VERSION} \\\n && ./emsdk activate ${EMSDK_VERSION} \\\n && echo \"hack emscript config getter (em-config)\" \\\n && cp /root/.emscripten /home/${APP_USER}/.emscripten \\\n && printf '#!/usr/bin/env python\\nimport os, sys\\nexecfile(os.getenv(\"HOME\")+\"/.emscripten\")\\nprint eval(sys.argv[1])\\n' > /usr/local/bin/em-config \\\n && chmod a+x /usr/local/bin/em-config\n#  install tini\nRUN TINI_VERSION=v0.18.0 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys 0527A9B7 \\\n && break || : ; done \\\n && wget -O/usr/bin/tini \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\" \\\n && wget -O/usr/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\" \\\n && gpg --verify /usr/bin/tini.asc \\\n && rm -f /usr/bin/tini.asc \\\n && chmod a+x /usr/bin/tini\n#  install gosu\nRUN GOSU_VERSION=1.11 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && wget -O/usr/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && wget -O/usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\" \\\n && gpg --verify /usr/bin/gosu.asc \\\n && rm -f /usr/bin/gosu.asc \\\n && chmod a+x /usr/bin/gosu\n#  install daalatool\nENV DAALATOOL_DIR=\"/opt/daalatool\"\nRUN mkdir -p $( dirname ${DAALATOOL_DIR} ;) \\\n && git clone https://github.com/xiph/daala.git ${DAALATOOL_DIR} \\\n && cd ${DAALATOOL_DIR} \\\n && ./autogen.sh \\\n && ./configure --disable-player \\\n && make tools -j4\n#  install rd_tool and dependencies\nENV RD_TOOL_DIR=\"/opt/rd_tool\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc python3-boto3 python3-numpy python3-scipy python3-tornado ssh time -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists \\\n && mkdir -p ${RD_TOOL_DIR} \\\n && rm -vf /etc/ssh/ssh_host_* \\\n && curl -sSL https://github.com/tdaede/rd_tool/tarball/master | tar zxf - -C ${RD_TOOL_DIR} --strip-components=1\n#  add code\nADD package.json *.ts tsconfig.json ${APP_DIR}/\nADD www ${APP_DIR}/www\n#  compile typescript/nodejs code\nRUN cd ${APP_DIR} \\\n && export PYTHON=python2.7 \\\n && npm install \\\n && npm run tsc \\\n && cd ${APP_DIR}/www \\\n && npm install \\\n && npm run build\n#  add scripts\nADD *.m *.sh *.py ${APP_DIR}/\n#  environment variables\nENV CONFIG_DIR=\"/data/conf\" \\\n    CODECS_SRC_DIR=\"/data/src\" \\\n    RUNS_DST_DIR=\"/data/runs\" \\\n    WORK_DIR=\"/data/work\" \\\n    MEDIAS_SRC_DIR=\"/data/media\" \\\n    LOCAL_WORKER_ENABLED=\"false\" \\\n    IRC_CHANNEL=\"none\" \\\n    AWCY_API_KEY=\"awcy_api_key\" \\\n    AWCY_SERVER_PORT=\"3000\" \\\n    RD_SERVER_PORT=\"4000\"\n#  set entrypoint\nENTRYPOINT [\"/etc/entrypoint\"]\n#  add configuration scripts\nADD etc /etc\n","injectedSmells":[],"originalDockerfileHash":"72d583153058e4fe6a0d529668c00e00","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:bionic-20181204\n#   environment variables\nENV APP_USER=\"xiph\" \\\n    APP_DIR=\"/opt/app\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    LANG=\"C.UTF-8\" \\\n    LANGUAGE=\"C.UTF-8\" \\\n    DEBIAN_FRONTEND=\"noninteractive\" \\\n    GPG_SERVERS=\"ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu\"\n#   add runtime user\nRUN groupadd --gid 1000 ${APP_USER} \\\n && useradd --uid 1000 --gid ${APP_USER} --shell /bin/bash --create-home ${APP_USER}\n#   install base build dependencies and useful packages\nRUN echo \"deb http://archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse\" > /etc/apt/sources.list \\\n && echo \"deb http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && echo \"deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential bzip2 ca-certificates check cmake cmake-extras curl dirmngr file gettext-base git-core gpg gpg-agent iproute2 iputils-ping jq less libicu-dev libjpeg-dev libogg-dev libpng-dev libtool locales nasm netcat-openbsd net-tools openjdk-8-jdk-headless openssl pkg-config procps psmisc python2.7 rsync runit sqlite3 strace tcpdump tzdata unzip uuid vim wget xz-utils yasm -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists\n#   set working directory\nWORKDIR ${APP_DIR}\n#   prepare rust installation\nENV RUSTUP_HOME=\"/usr/local/rustup\" \\\n    CARGO_HOME=\"/usr/local/cargo\" \\\n    PATH=\"/usr/local/cargo/bin:${PATH}\"\n#   install rust\nRUN RUST_VERSION=1.30.1 \\\n && curl -sSf --output /tmp/rustup-init https://static.rust-lang.org/rustup/archive/1.14.0/x86_64-unknown-linux-gnu/rustup-init \\\n && chmod +x /tmp/rustup-init \\\n && /tmp/rustup-init -y --no-modify-path --default-toolchain ${RUST_VERSION} \\\n && rm -vf /tmp/rustup-init \\\n && chmod -R a+w ${RUSTUP_HOME} ${CARGO_HOME}\n#   install node 8.x\nRUN NODE_VERSION=8.12.0 \\\n && ARCH=x64 \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys \"${key}\" \\\n && break || : ; done ; done \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" \\\n && curl -fSLO \"https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v${NODE_VERSION}-linux-${ARCH}.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar xJf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" -C /usr --strip-components=1 --no-same-owner \\\n && rm -vf \"node-v${NODE_VERSION}-linux-${ARCH}.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/bin/node /usr/bin/nodejs\n#   install emscripten\nRUN EMSDK_VERSION=sdk-1.38.20-64bit \\\n && mkdir -p /opt/emsdk \\\n && curl -sSL https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | tar zxf - -C /opt/emsdk --strip-components=1 \\\n && cd /opt/emsdk \\\n && ./emsdk update \\\n && ./emsdk install ${EMSDK_VERSION} \\\n && ./emsdk activate ${EMSDK_VERSION} \\\n && echo \"hack emscript config getter (em-config)\" \\\n && cp /root/.emscripten /home/${APP_USER}/.emscripten \\\n && printf '#!/usr/bin/env python\\nimport os, sys\\nexecfile(os.getenv(\"HOME\")+\"/.emscripten\")\\nprint eval(sys.argv[1])\\n' > /usr/local/bin/em-config \\\n && chmod a+x /usr/local/bin/em-config\n#   install tini\nRUN TINI_VERSION=v0.18.0 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys 0527A9B7 \\\n && break || : ; done \\\n && wget -O/usr/bin/tini \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\" \\\n && wget -O/usr/bin/tini.asc \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc\" \\\n && gpg --verify /usr/bin/tini.asc \\\n && rm -f /usr/bin/tini.asc \\\n && chmod a+x /usr/bin/tini\n#   install gosu\nRUN GOSU_VERSION=1.11 \\\n && for server in $( shuf -e ${GPG_SERVERS} ;); do http_proxy= gpg --keyserver \"$server\" --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && break || : ; done \\\n && wget -O/usr/bin/gosu \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && wget -O/usr/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc\" \\\n && gpg --verify /usr/bin/gosu.asc \\\n && rm -f /usr/bin/gosu.asc \\\n && chmod a+x /usr/bin/gosu\n#   install daalatool\nENV DAALATOOL_DIR=\"/opt/daalatool\"\nRUN mkdir -p $( dirname ${DAALATOOL_DIR} ;) \\\n && git clone https://github.com/xiph/daala.git ${DAALATOOL_DIR} \\\n && cd ${DAALATOOL_DIR} \\\n && ./autogen.sh \\\n && ./configure --disable-player \\\n && make tools -j4\n#   install rd_tool and dependencies\nENV RD_TOOL_DIR=\"/opt/rd_tool\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc python3-boto3 python3-numpy python3-scipy python3-tornado ssh time -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists \\\n && mkdir -p ${RD_TOOL_DIR} \\\n && rm -vf /etc/ssh/ssh_host_* \\\n && curl -sSL https://github.com/tdaede/rd_tool/tarball/master | tar zxf - -C ${RD_TOOL_DIR} --strip-components=1\n#   add code\nADD package.json *.ts tsconfig.json ${APP_DIR}/\nADD www ${APP_DIR}/www\n#   compile typescript/nodejs code\nRUN cd ${APP_DIR} \\\n && export PYTHON=python2.7 \\\n && npm install \\\n && npm run tsc \\\n && cd ${APP_DIR}/www \\\n && npm install \\\n && npm run build\n#   add scripts\nADD *.m *.sh *.py ${APP_DIR}/\n#   environment variables\nENV CONFIG_DIR=\"/data/conf\" \\\n    CODECS_SRC_DIR=\"/data/src\" \\\n    RUNS_DST_DIR=\"/data/runs\" \\\n    WORK_DIR=\"/data/work\" \\\n    MEDIAS_SRC_DIR=\"/data/media\" \\\n    LOCAL_WORKER_ENABLED=\"false\" \\\n    IRC_CHANNEL=\"none\" \\\n    AWCY_API_KEY=\"awcy_api_key\" \\\n    AWCY_SERVER_PORT=\"3000\" \\\n    RD_SERVER_PORT=\"4000\"\n#   set entrypoint\nENTRYPOINT [\"/etc/entrypoint\"]\n#   add configuration scripts\nADD etc /etc\n","originalDockerfileUglifiedHash":"652a18eb3420324e1177887b2ba075db","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5ee6b2e912743a79618f866791c7bbc1a0031ebd.dockerfile"}