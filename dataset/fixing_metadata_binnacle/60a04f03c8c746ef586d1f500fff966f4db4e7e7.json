{"seed":2701011307,"processedDockerfileHash":"baec0379b65bebd93565b569d1f64fd8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Darkflow Dockerfile (YOLO for Tensorflow)\n#   Tensorflow + GPU + Python3 + OpenCV 3.1.0\n#\n#   @see https://github.com/thtrieu/darkflow\n#   @see https://hub.docker.com/r/tensorflow/tensorflow/tags/\n#\n#   Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker\n#\nFROM tensorflow/tensorflow:latest-gpu-py3\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\nRUN apt-get update \\\n && apt-get install --no-install-recommends git curl wget unzip ffmpeg build-essential cmake git pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev python3-numpy python3-pip -y\nRUN mkdir OpenCV \\\n && cd OpenCV\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential checkinstall cmake pkg-config yasm libtiff5-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy python-pip libtbb-dev libeigen3-dev libqt4-dev libgtk2.0-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils libgtk2.0-dev unzip libhdf5-dev wget sudo -y\nRUN cd /opt \\\n && wget https://github.com/daveselinger/opencv/archive/3.1.0-with-cuda8.zip -O opencv-3.1.0.zip -nv \\\n && unzip opencv-3.1.0.zip \\\n && mv opencv-3.1.0-with-cuda8 opencv-3.1.0 \\\n && cd opencv-3.1.0 \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -D CUDA_ARCH_BIN=3.2 -D CUDA_ARCH_PTX=3.2 -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D BUILD_TIFF=ON -D WITH_QT=ON -D ENABLE_PRECOMPILED_HEADERS=OFF -D WITH_OPENGL=ON .. \\\n && make -j4 \\\n && make install \\\n && echo \"/usr/local/lib\" | sudo tee -a /etc/ld.so.conf.d/opencv.conf \\\n && ldconfig\nRUN cp /opt/opencv-3.1.0/build/lib/cv2.so /usr/lib/python2.7/dist-packages/cv2.so\nWORKDIR /darkflow/\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip3 install --no-cache-dir Cython\nRUN git clone https://github.com/thtrieu/darkflow.git\n#   copy patches to setup.py, net/help.py, flow\nCOPY setup.py darkflow/darkflow\nCOPY flow3 darkflow/\nCOPY help.py darkflow/darkflow/net/\nRUN cd darkflow \\\n && ls -l \\\n && python3 setup.py build_ext --inplace\n#  pip3 install .\n#   download weights full (accurate most) and tiny (faster , less accurate) models\n#   darknet rnns\nRUN cd darkflow \\\n && mkdir bin \\\n && cd bin/ \\\n && wget http://pjreddie.com/media/files/yolo.weights > /dev/null 2>&1 \\\n && wget https://github.com/leetenki/YOLOtiny_v2_chainer/raw/master/tiny-yolo-voc.weights > /dev/null 2>&1 \\\n && wget https://github.com/thtrieu/darkflow/blob/master/cfg/yolo.cfg > /dev/null 2>&1 \\\n && cd ..\nRUN cd darkflow/ \\\n && mkdir samples \\\n && cd samples/ \\\n && wget -O video_1.avi ftp://vqeg.its.bldrdoc.gov/MM/7-12_testclip/7-12_testclip_QCIF.avi\n#   FIXME: copy yolo.cfg to cfg/\nRUN cd darkflow/ \\\n && cp bin/yolo.cfg cfg/\nCMD nvidia-smi -q\nRUN python3 -c \"import Cython; print(Cython.__version__)\"\nRUN python3 -c \"import cv2; print(cv2.__version__)\"\nRUN echo \"./flow3 --model bin/yolo.cfg --load bin/yolo.weights --demo samples/video_1.avi --gpu .8 --saveVideo\"\nCMD [\"bash\"]\n#  install TF python module\n#  RUN python3 setup.py build_ext --inplace\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Darkflow Dockerfile (YOLO for Tensorflow)\n#  Tensorflow + GPU + Python3 + OpenCV 3.1.0\n#\n#  @see https://github.com/thtrieu/darkflow\n#  @see https://hub.docker.com/r/tensorflow/tensorflow/tags/\n#\n#  Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker\n#\nFROM tensorflow/tensorflow:latest-gpu-py3\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\nRUN apt-get update \\\n && apt-get install git curl wget unzip ffmpeg build-essential cmake git pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev python3-numpy python3-pip -y\nRUN mkdir OpenCV \\\n && cd OpenCV\nRUN apt-get update \\\n && apt-get install build-essential checkinstall cmake pkg-config yasm libtiff5-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy python-pip libtbb-dev libeigen3-dev libqt4-dev libgtk2.0-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils libgtk2.0-dev unzip libhdf5-dev wget sudo -y\nRUN cd /opt \\\n && wget https://github.com/daveselinger/opencv/archive/3.1.0-with-cuda8.zip -O opencv-3.1.0.zip -nv \\\n && unzip opencv-3.1.0.zip \\\n && mv opencv-3.1.0-with-cuda8 opencv-3.1.0 \\\n && cd opencv-3.1.0 \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -D CUDA_ARCH_BIN=3.2 -D CUDA_ARCH_PTX=3.2 -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D BUILD_TIFF=ON -D WITH_QT=ON -D ENABLE_PRECOMPILED_HEADERS=OFF -D WITH_OPENGL=ON .. \\\n && make -j4 \\\n && make install \\\n && echo \"/usr/local/lib\" | sudo tee -a /etc/ld.so.conf.d/opencv.conf \\\n && ldconfig\nRUN cp /opt/opencv-3.1.0/build/lib/cv2.so /usr/lib/python2.7/dist-packages/cv2.so\nWORKDIR /darkflow/\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip3 install --no-cache-dir Cython\nRUN git clone https://github.com/thtrieu/darkflow.git\n#  copy patches to setup.py, net/help.py, flow\nCOPY setup.py darkflow/darkflow\nCOPY flow3 darkflow/\nCOPY help.py darkflow/darkflow/net/\nRUN cd darkflow \\\n && ls -l \\\n && python3 setup.py build_ext --inplace\n# pip3 install .\n#  download weights full (accurate most) and tiny (faster , less accurate) models\n#  darknet rnns\nRUN cd darkflow \\\n && mkdir bin \\\n && cd bin/ \\\n && wget http://pjreddie.com/media/files/yolo.weights > /dev/null 2>&1 \\\n && wget https://github.com/leetenki/YOLOtiny_v2_chainer/raw/master/tiny-yolo-voc.weights > /dev/null 2>&1 \\\n && wget https://github.com/thtrieu/darkflow/blob/master/cfg/yolo.cfg > /dev/null 2>&1 \\\n && cd ..\nRUN cd darkflow/ \\\n && mkdir samples \\\n && cd samples/ \\\n && wget -O video_1.avi ftp://vqeg.its.bldrdoc.gov/MM/7-12_testclip/7-12_testclip_QCIF.avi\n#  FIXME: copy yolo.cfg to cfg/\nRUN cd darkflow/ \\\n && cp bin/yolo.cfg cfg/\nCMD nvidia-smi -q\nRUN python3 -c \"import Cython; print(Cython.__version__)\"\nRUN python3 -c \"import cv2; print(cv2.__version__)\"\nRUN echo \"./flow3 --model bin/yolo.cfg --load bin/yolo.weights --demo samples/video_1.avi --gpu .8 --saveVideo\"\nCMD [\"bash\"]\n# install TF python module\n# RUN python3 setup.py build_ext --inplace\n","injectedSmells":[],"originalDockerfileHash":"d8f44b2c273918a44b29fe44a0fe296b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Darkflow Dockerfile (YOLO for Tensorflow)\n#   Tensorflow + GPU + Python3 + OpenCV 3.1.0\n#\n#   @see https://github.com/thtrieu/darkflow\n#   @see https://hub.docker.com/r/tensorflow/tensorflow/tags/\n#\n#   Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker\n#\nFROM tensorflow/tensorflow:latest-gpu-py3\nMAINTAINER Loreto Parisi loretoparisi@gmail.com\nRUN apt-get update \\\n && apt-get install git curl wget unzip ffmpeg build-essential cmake git pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev python3-numpy python3-pip -y\nRUN mkdir OpenCV \\\n && cd OpenCV\nRUN apt-get update \\\n && apt-get install build-essential checkinstall cmake pkg-config yasm libtiff5-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy python-pip libtbb-dev libeigen3-dev libqt4-dev libgtk2.0-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils libgtk2.0-dev unzip libhdf5-dev wget sudo -y\nRUN cd /opt \\\n && wget https://github.com/daveselinger/opencv/archive/3.1.0-with-cuda8.zip -O opencv-3.1.0.zip -nv \\\n && unzip opencv-3.1.0.zip \\\n && mv opencv-3.1.0-with-cuda8 opencv-3.1.0 \\\n && cd opencv-3.1.0 \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -D CUDA_ARCH_BIN=3.2 -D CUDA_ARCH_PTX=3.2 -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D BUILD_TIFF=ON -D WITH_QT=ON -D ENABLE_PRECOMPILED_HEADERS=OFF -D WITH_OPENGL=ON .. \\\n && make -j4 \\\n && make install \\\n && echo \"/usr/local/lib\" | sudo tee -a /etc/ld.so.conf.d/opencv.conf \\\n && ldconfig\nRUN cp /opt/opencv-3.1.0/build/lib/cv2.so /usr/lib/python2.7/dist-packages/cv2.so\nWORKDIR /darkflow/\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip3 install --no-cache-dir Cython\nRUN git clone https://github.com/thtrieu/darkflow.git\n#   copy patches to setup.py, net/help.py, flow\nCOPY setup.py darkflow/darkflow\nCOPY flow3 darkflow/\nCOPY help.py darkflow/darkflow/net/\nRUN cd darkflow \\\n && ls -l \\\n && python3 setup.py build_ext --inplace\n#  pip3 install .\n#   download weights full (accurate most) and tiny (faster , less accurate) models\n#   darknet rnns\nRUN cd darkflow \\\n && mkdir bin \\\n && cd bin/ \\\n && wget http://pjreddie.com/media/files/yolo.weights > /dev/null 2>&1 \\\n && wget https://github.com/leetenki/YOLOtiny_v2_chainer/raw/master/tiny-yolo-voc.weights > /dev/null 2>&1 \\\n && wget https://github.com/thtrieu/darkflow/blob/master/cfg/yolo.cfg > /dev/null 2>&1 \\\n && cd ..\nRUN cd darkflow/ \\\n && mkdir samples \\\n && cd samples/ \\\n && wget -O video_1.avi ftp://vqeg.its.bldrdoc.gov/MM/7-12_testclip/7-12_testclip_QCIF.avi\n#   FIXME: copy yolo.cfg to cfg/\nRUN cd darkflow/ \\\n && cp bin/yolo.cfg cfg/\nCMD nvidia-smi -q\nRUN python3 -c \"import Cython; print(Cython.__version__)\"\nRUN python3 -c \"import cv2; print(cv2.__version__)\"\nRUN echo \"./flow3 --model bin/yolo.cfg --load bin/yolo.weights --demo samples/video_1.avi --gpu .8 --saveVideo\"\nCMD [\"bash\"]\n#  install TF python module\n#  RUN python3 setup.py build_ext --inplace\n","originalDockerfileUglifiedHash":"420f3bf5a568027b7c28a5c46c417cbd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/60a04f03c8c746ef586d1f500fff966f4db4e7e7.dockerfile"}