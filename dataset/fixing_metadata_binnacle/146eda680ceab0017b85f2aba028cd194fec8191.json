{"seed":1364821922,"processedDockerfileHash":"393e64f1677e27e0baef187b04c38063","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:xenial\nARG AWS_REGION=us-east-1\n#   install needed packages. replace httpredir apt source with cloudfront\nRUN set -x \\\n && sed -i \"s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/\" /etc/apt/sources.list \\\n && export DEBIAN_FRONTEND=noninteractive \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0x51716619e084dab9 \\\n && echo 'deb http://cran.rstudio.com/bin/linux/ubuntu xenial/' >> /etc/apt/sources.list \\\n && :\n#   add ppa repository so we can install java 8 (not in any official repo for precise)\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.96.20.10 python-software-properties=0.96.20.10 -y ) \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ant=1.9.6-1ubuntu1.1 build-essential=12.1ubuntu2 clang-4.0=1:4.0-1ubuntu1~16.04.2 curl=7.47.0-1ubuntu2.19 debsigs=0.1.18 dpkg-sig=0.13.1+nmu2 expect=5.45-7 fakeroot=1.20.2-1ubuntu1 git-core=1:2.7.4-0ubuntu1.10 gnupg=1.4.20-1ubuntu3.3 libattr1-dev=1:2.4.47-2 libacl1-dev=2.2.52-3 libbz2-dev=1.0.6-8ubuntu0.2 libcap-dev=1:2.24-12 libcurl4-openssl-dev=7.47.0-1ubuntu2.19 libfuse2=2.9.4-1ubuntu3.1 libgtk-3-0=3.18.9-1ubuntu3.3 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 libegl1-mesa=18.0.5-0ubuntu0~16.04.1 libpam-dev libpango1.0-dev=1.38.1-1 libssl-dev=1.0.2g-1ubuntu4.20 libuser1-dev=1:0.60~dfsg-1.2 libxslt1-dev=1.1.28-2.1ubuntu0.3 lsof=4.89+dfsg-0.1 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 pkg-config=0.29.1-0ubuntu1 python=2.7.12-1~16.04 r-base=3.2.3-4 sudo=1.8.16-0ubuntu1.10 unzip=6.0-20ubuntu1.1 uuid-dev=2.27.1-6ubuntu3.10 valgrind=1:3.11.0-1ubuntu4.2 wget=1.17.1-1ubuntu1.5 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y )\n#   ensure we use the java 8 compiler\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n#  # build patchelf\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz \\\n && tar xzvf patchelf-0.9.tar.gz \\\n && cd patchelf-0.9 \\\n && ./configure \\\n && make \\\n && make install\n#  # run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n#  # https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n#   install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN /bin/bash /tmp/install-dependencies\n#   add clang to system path\nENV PATH=\"/usr/lib/llvm-4.0/bin:$PATH\"\n#   install crashpad and its dependencies\nCOPY dependencies/common/install-crashpad /tmp/\nRUN bash /tmp/install-crashpad\n#   set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=\"$GITHUB_LOGIN\"\n#   install common dependencies\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/* /opt/rstudio-tools/dependencies/common/\nRUN cd /opt/rstudio-tools/dependencies/common \\\n && /bin/bash ./install-common\n#   install Qt SDK\nCOPY dependencies/linux/install-qt-sdk /tmp/\nRUN mkdir -p /opt/RStudio-QtSDK \\\n && export QT_SDK_DIR=/opt/RStudio-QtSDK/Qt5.12.1 \\\n && export QT_QPA_PLATFORM=minimal \\\n && /tmp/install-qt-sdk\n#   create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins \\\n && useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins \\\n && echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:xenial\nARG AWS_REGION=us-east-1\n#  install needed packages. replace httpredir apt source with cloudfront\nRUN set -x \\\n && sed -i \"s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/\" /etc/apt/sources.list \\\n && export DEBIAN_FRONTEND=noninteractive \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0x51716619e084dab9 \\\n && echo 'deb http://cran.rstudio.com/bin/linux/ubuntu xenial/' >> /etc/apt/sources.list \\\n && apt-get update\n#  add ppa repository so we can install java 8 (not in any official repo for precise)\nRUN apt-get update \\\n && apt-get install software-properties-common python-software-properties -y \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install ant build-essential clang-4.0 curl debsigs dpkg-sig expect fakeroot git-core gnupg libattr1-dev libacl1-dev libbz2-dev libcap-dev libcurl4-openssl-dev libfuse2 libgtk-3-0 libgl1-mesa-dev libegl1-mesa libpam-dev libpango1.0-dev libssl-dev libuser1-dev libxslt1-dev lsof openjdk-8-jdk pkg-config python r-base sudo unzip uuid-dev valgrind wget zlib1g-dev -y\n#  ensure we use the java 8 compiler\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n# # build patchelf\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz \\\n && tar xzvf patchelf-0.9.tar.gz \\\n && cd patchelf-0.9 \\\n && ./configure \\\n && make \\\n && make install\n# # run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n# # https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n#  install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN /bin/bash /tmp/install-dependencies\n#  add clang to system path\nENV PATH=\"/usr/lib/llvm-4.0/bin:$PATH\"\n#  install crashpad and its dependencies\nCOPY dependencies/common/install-crashpad /tmp/\nRUN bash /tmp/install-crashpad\n#  set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=\"$GITHUB_LOGIN\"\n#  install common dependencies\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/* /opt/rstudio-tools/dependencies/common/\nRUN cd /opt/rstudio-tools/dependencies/common \\\n && /bin/bash ./install-common\n#  install Qt SDK\nCOPY dependencies/linux/install-qt-sdk /tmp/\nRUN mkdir -p /opt/RStudio-QtSDK \\\n && export QT_SDK_DIR=/opt/RStudio-QtSDK/Qt5.12.1 \\\n && export QT_QPA_PLATFORM=minimal \\\n && /tmp/install-qt-sdk\n#  create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins \\\n && useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins \\\n && echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n","injectedSmells":[],"originalDockerfileHash":"62a464a0d6f329f7fc96cbca515987a2","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:xenial\nARG AWS_REGION=us-east-1\n#   install needed packages. replace httpredir apt source with cloudfront\nRUN set -x \\\n && sed -i \"s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/\" /etc/apt/sources.list \\\n && export DEBIAN_FRONTEND=noninteractive \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0x51716619e084dab9 \\\n && echo 'deb http://cran.rstudio.com/bin/linux/ubuntu xenial/' >> /etc/apt/sources.list \\\n && apt-get update\n#   add ppa repository so we can install java 8 (not in any official repo for precise)\nRUN apt-get update \\\n && apt-get install software-properties-common python-software-properties -y \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install ant build-essential clang-4.0 curl debsigs dpkg-sig expect fakeroot git-core gnupg libattr1-dev libacl1-dev libbz2-dev libcap-dev libcurl4-openssl-dev libfuse2 libgtk-3-0 libgl1-mesa-dev libegl1-mesa libpam-dev libpango1.0-dev libssl-dev libuser1-dev libxslt1-dev lsof openjdk-8-jdk pkg-config python r-base sudo unzip uuid-dev valgrind wget zlib1g-dev -y\n#   ensure we use the java 8 compiler\nRUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n#  # build patchelf\nRUN cd /tmp \\\n && wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz \\\n && tar xzvf patchelf-0.9.tar.gz \\\n && cd patchelf-0.9 \\\n && ./configure \\\n && make \\\n && make install\n#  # run install-boost twice - boost exits 1 even though it has installed good enough for our uses.\n#  # https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15\nCOPY dependencies/common/install-boost /tmp/\nRUN bash /tmp/install-boost || bash /tmp/install-boost\n#   install cmake\nCOPY package/linux/install-dependencies /tmp/\nRUN /bin/bash /tmp/install-dependencies\n#   add clang to system path\nENV PATH=\"/usr/lib/llvm-4.0/bin:$PATH\"\n#   install crashpad and its dependencies\nCOPY dependencies/common/install-crashpad /tmp/\nRUN bash /tmp/install-crashpad\n#   set github login from build argument if defined\nARG GITHUB_LOGIN\nENV RSTUDIO_GITHUB_LOGIN=\"$GITHUB_LOGIN\"\n#   install common dependencies\nRUN mkdir -p /opt/rstudio-tools/dependencies/common\nCOPY dependencies/common/* /opt/rstudio-tools/dependencies/common/\nRUN cd /opt/rstudio-tools/dependencies/common \\\n && /bin/bash ./install-common\n#   install Qt SDK\nCOPY dependencies/linux/install-qt-sdk /tmp/\nRUN mkdir -p /opt/RStudio-QtSDK \\\n && export QT_SDK_DIR=/opt/RStudio-QtSDK/Qt5.12.1 \\\n && export QT_QPA_PLATFORM=minimal \\\n && /tmp/install-qt-sdk\n#   create jenkins user, make sudo. try to keep this toward the bottom for less cache busting\nARG JENKINS_GID=999\nARG JENKINS_UID=999\nRUN groupadd -g $JENKINS_GID jenkins \\\n && useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins \\\n && echo \"jenkins ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n","originalDockerfileUglifiedHash":"f8083dd884ceee91cc4b2f559b83eae8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/146eda680ceab0017b85f2aba028cd194fec8191.dockerfile"}