{"seed":1244170693,"processedDockerfileHash":"1c37f8aab7d0bb95b2b12641c544989a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Dockerfile to create Applatix tomcat postgres image\n#\n#   https://github.com/Applatix/docker-images/tree/master/postgres\n#\n#   Pull base image.\nFROM ubuntu:14.04\nMAINTAINER Jarvis <jarvis@jarviswang.me>\nRUN locale-gen en_GB.UTF-8\nENV LANG=\"en_GB.UTF-8\"\nENV LC_CTYPE=\"en_GB.UTF-8\"\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#    There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#   Install required packages\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget=1.15-1ubuntu1.14.04.5 curl=7.35.0-1ubuntu2.20 build-essential=11.6ubuntu6 software-properties-common=0.92.37.8 python-software-properties=0.92.37.8 nano=2.2.6-1ubuntu1 -y\n#   Install ``python-software-properties``, ``software-properties-common``\n#    There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#   Install JDK 8.\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends wget=1.15-1ubuntu1.14.04.5 curl=7.35.0-1ubuntu2.20 build-essential=11.6ubuntu6 software-properties-common=0.92.37.8 python-software-properties=0.92.37.8 nano=2.2.6-1ubuntu1 -y \\\n && add-apt-repository ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk -y \\\n && update-alternatives --config java \\\n && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \\\n && export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre\n#   Fix certificate issues\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates-java=20130815ubuntu1 -y \\\n && apt-get clean \\\n && update-ca-certificates -f \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#   Define commonly used JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\n#  install TOMCAT\nRUN groupadd tomcat \\\n && useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat \\\n && cd /tmp \\\n && curl -O -L http://dn.jarvisoj.com/misc/apache-tomcat-8.5.34.tar.gz \\\n && mkdir /opt/tomcat \\\n && tar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1 \\\n && cd /opt/tomcat \\\n && chgrp -R tomcat /opt/tomcat \\\n && chmod -R g+r conf \\\n && chmod g+x conf \\\n && chown -R tomcat webapps/ work/ temp/ logs/\n#   Add admin/admin user\n#   ADD tomcat-users.xml /opt/tomcat/conf/\nENV CATALINA_HOME=\"/opt/tomcat\"\nENV PATH=\"$PATH:$CATALINA_HOME/bin\"\nEXPOSE 8080/tcp\nEXPOSE 8009/tcp\n#  ADD tomcat.service /etc/systemd/system/\nVOLUME \"/opt/tomcat/webapps\"\nWORKDIR /opt/tomcat\nCOPY ./phrackCTF/ /opt/tomcat/webapps/phrackCTF/\nCOPY ./config/mail.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-mail.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-shiro.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/system.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nRUN chown -R tomcat:tomcat /opt/tomcat/webapps/phrackCTF/\n#  install postgres\n#   Add the PostgreSQL PGP key to verify their Debian packages.\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#   Add PostgreSQL's repository. It contains the most recent stable release of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6 -y\n#   Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER root\nCOPY phrackCTF-team.sql /tmp/phrackCTF-team.sql\nRUN chmod 755 /tmp/phrackCTF-team.sql\nCOPY countries.sql /tmp/countries.sql\nRUN chmod 755 /tmp/countries.sql\nUSER postgres\n#   Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#   then create a database `docker` owned by the ``docker`` role.\n#   Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#         allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"ALTER USER postgres WITH PASSWORD 'ZUBkij7Z';\" \\\n && createdb -O postgres phrackCTF -E 'UTF8' \\\n && psql phrackCTF postgres -f /tmp/phrackCTF-team.sql \\\n && psql phrackCTF postgres -f /tmp/countries.sql\nUSER root\nRUN mkdir /etc/ssl/private-copy\nRUN mv /etc/ssl/private/* /etc/ssl/private-copy/\nRUN rm -r /etc/ssl/private\nRUN mv /etc/ssl/private-copy /etc/ssl/private\nRUN chmod -R 0700 /etc/ssl/private\nRUN chown -R postgres /etc/ssl/private\nCOPY run.sh /bin\nRUN chmod +x /bin/run.sh\nRUN chmod 755 /bin/run.sh\n#   Adjust PostgreSQL configuration so that remote connections to the database are possible.\nCOPY pg_hba.conf /etc/postgresql/9.6/main/\n#  RUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n#   Expose the PostgreSQL port\nEXPOSE 5432/tcp\n#   Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql/data\"]\n#   Define default command.\nCMD [\"/bin/run.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Dockerfile to create Applatix tomcat postgres image\n#\n#  https://github.com/Applatix/docker-images/tree/master/postgres\n#\n#  Pull base image.\nFROM ubuntu:14.04\nMAINTAINER Jarvis <jarvis@jarviswang.me>\nRUN locale-gen en_GB.UTF-8\nENV LANG=\"en_GB.UTF-8\"\nENV LC_CTYPE=\"en_GB.UTF-8\"\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#  Install required packages\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install wget curl build-essential software-properties-common python-software-properties nano -y\n#  Install ``python-software-properties``, ``software-properties-common``\n#   There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#  Install JDK 8.\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install wget curl build-essential software-properties-common python-software-properties nano -y \\\n && add-apt-repository ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk -y \\\n && update-alternatives --config java \\\n && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \\\n && export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre\n#  Fix certificate issues\nRUN apt-get update \\\n && apt-get install ca-certificates-java -y \\\n && apt-get clean \\\n && update-ca-certificates -f \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#  Define commonly used JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\n# install TOMCAT\nRUN groupadd tomcat \\\n && useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat \\\n && cd /tmp \\\n && curl -O -L http://dn.jarvisoj.com/misc/apache-tomcat-8.5.34.tar.gz \\\n && mkdir /opt/tomcat \\\n && tar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1 \\\n && cd /opt/tomcat \\\n && chgrp -R tomcat /opt/tomcat \\\n && chmod -R g+r conf \\\n && chmod g+x conf \\\n && chown -R tomcat webapps/ work/ temp/ logs/\n#  Add admin/admin user\n#  ADD tomcat-users.xml /opt/tomcat/conf/\nENV CATALINA_HOME=\"/opt/tomcat\"\nENV PATH=\"$PATH:$CATALINA_HOME/bin\"\nEXPOSE 8080/tcp\nEXPOSE 8009/tcp\n# ADD tomcat.service /etc/systemd/system/\nVOLUME \"/opt/tomcat/webapps\"\nWORKDIR /opt/tomcat\nCOPY ./phrackCTF/ /opt/tomcat/webapps/phrackCTF/\nCOPY ./config/mail.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-mail.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-shiro.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/system.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nRUN chown -R tomcat:tomcat /opt/tomcat/webapps/phrackCTF/\n# install postgres\n#  Add the PostgreSQL PGP key to verify their Debian packages.\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#  Add PostgreSQL's repository. It contains the most recent stable release of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n && apt-get install postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6 -y\n#  Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER root\nADD phrackCTF-team.sql /tmp/phrackCTF-team.sql\nRUN chmod 755 /tmp/phrackCTF-team.sql\nADD countries.sql /tmp/countries.sql\nRUN chmod 755 /tmp/countries.sql\nUSER postgres\n#  Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#  then create a database `docker` owned by the ``docker`` role.\n#  Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#        allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"ALTER USER postgres WITH PASSWORD 'ZUBkij7Z';\" \\\n && createdb -O postgres phrackCTF -E 'UTF8' \\\n && psql phrackCTF postgres -f /tmp/phrackCTF-team.sql \\\n && psql phrackCTF postgres -f /tmp/countries.sql\nUSER root\nRUN mkdir /etc/ssl/private-copy\nRUN mv /etc/ssl/private/* /etc/ssl/private-copy/\nRUN rm -r /etc/ssl/private\nRUN mv /etc/ssl/private-copy /etc/ssl/private\nRUN chmod -R 0700 /etc/ssl/private\nRUN chown -R postgres /etc/ssl/private\nADD run.sh /bin\nRUN chmod +x /bin/run.sh\nRUN chmod 755 /bin/run.sh\n#  Adjust PostgreSQL configuration so that remote connections to the database are possible.\nADD pg_hba.conf /etc/postgresql/9.6/main/\n# RUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#  And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n#  Expose the PostgreSQL port\nEXPOSE 5432/tcp\n#  Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql/data\"]\n#  Define default command.\nCMD [\"/bin/run.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"b94b7ffa8d69235e4ea6446c4a2889c5","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Dockerfile to create Applatix tomcat postgres image\n#\n#   https://github.com/Applatix/docker-images/tree/master/postgres\n#\n#   Pull base image.\nFROM ubuntu:14.04\nMAINTAINER Jarvis <jarvis@jarviswang.me>\nRUN locale-gen en_GB.UTF-8\nENV LANG=\"en_GB.UTF-8\"\nENV LC_CTYPE=\"en_GB.UTF-8\"\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#    There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#   Install required packages\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install wget curl build-essential software-properties-common python-software-properties nano -y\n#   Install ``python-software-properties``, ``software-properties-common``\n#    There are some warnings (in red) that show up during the build. You can hide them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\n#   Install JDK 8.\nRUN sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install wget curl build-essential software-properties-common python-software-properties nano -y \\\n && add-apt-repository ppa:openjdk-r/ppa \\\n && apt-get update \\\n && apt-get install openjdk-8-jdk -y \\\n && update-alternatives --config java \\\n && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \\\n && export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre\n#   Fix certificate issues\nRUN apt-get update \\\n && apt-get install ca-certificates-java -y \\\n && apt-get clean \\\n && update-ca-certificates -f \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#   Define commonly used JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/jre\"\n#  install TOMCAT\nRUN groupadd tomcat \\\n && useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat \\\n && cd /tmp \\\n && curl -O -L http://dn.jarvisoj.com/misc/apache-tomcat-8.5.34.tar.gz \\\n && mkdir /opt/tomcat \\\n && tar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1 \\\n && cd /opt/tomcat \\\n && chgrp -R tomcat /opt/tomcat \\\n && chmod -R g+r conf \\\n && chmod g+x conf \\\n && chown -R tomcat webapps/ work/ temp/ logs/\n#   Add admin/admin user\n#   ADD tomcat-users.xml /opt/tomcat/conf/\nENV CATALINA_HOME=\"/opt/tomcat\"\nENV PATH=\"$PATH:$CATALINA_HOME/bin\"\nEXPOSE 8080/tcp\nEXPOSE 8009/tcp\n#  ADD tomcat.service /etc/systemd/system/\nVOLUME \"/opt/tomcat/webapps\"\nWORKDIR /opt/tomcat\nCOPY ./phrackCTF/ /opt/tomcat/webapps/phrackCTF/\nCOPY ./config/mail.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-mail.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/spring-shiro.xml /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nCOPY ./config/system.properties /opt/tomcat/webapps/phrackCTF/WEB-INF/classes/\nRUN chown -R tomcat:tomcat /opt/tomcat/webapps/phrackCTF/\n#  install postgres\n#   Add the PostgreSQL PGP key to verify their Debian packages.\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#   Add PostgreSQL's repository. It contains the most recent stable release of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\nRUN apt-get update \\\n && apt-get install postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6 -y\n#   Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER root\nADD phrackCTF-team.sql /tmp/phrackCTF-team.sql\nRUN chmod 755 /tmp/phrackCTF-team.sql\nADD countries.sql /tmp/countries.sql\nRUN chmod 755 /tmp/countries.sql\nUSER postgres\n#   Create a PostgreSQL role named ``docker`` with ``docker`` as the password and\n#   then create a database `docker` owned by the ``docker`` role.\n#   Note: here we use ``&&\\`` to run commands one after the other - the ``\\``\n#         allows the RUN command to span multiple lines.\nRUN /etc/init.d/postgresql start \\\n && psql --command \"ALTER USER postgres WITH PASSWORD 'ZUBkij7Z';\" \\\n && createdb -O postgres phrackCTF -E 'UTF8' \\\n && psql phrackCTF postgres -f /tmp/phrackCTF-team.sql \\\n && psql phrackCTF postgres -f /tmp/countries.sql\nUSER root\nRUN mkdir /etc/ssl/private-copy\nRUN mv /etc/ssl/private/* /etc/ssl/private-copy/\nRUN rm -r /etc/ssl/private\nRUN mv /etc/ssl/private-copy /etc/ssl/private\nRUN chmod -R 0700 /etc/ssl/private\nRUN chown -R postgres /etc/ssl/private\nADD run.sh /bin\nRUN chmod +x /bin/run.sh\nRUN chmod 755 /bin/run.sh\n#   Adjust PostgreSQL configuration so that remote connections to the database are possible.\nADD pg_hba.conf /etc/postgresql/9.6/main/\n#  RUN echo \"host all  all    0.0.0.0/0  trust\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.6/main/postgresql.conf\n#   Expose the PostgreSQL port\nEXPOSE 5432/tcp\n#   Add VOLUMEs to allow backup of config, logs and databases\nVOLUME [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql/data\"]\n#   Define default command.\nCMD [\"/bin/run.sh\"]\n","originalDockerfileUglifiedHash":"90215a83bdc9c41fa275cf37635c9283","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4f05cc94ee52c7be9d88930d7241ea8a0847b5ca.dockerfile"}