{"seed":2799154324,"processedDockerfileHash":"c636bb2b322c38c2f8191eca5dcca822","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ######################\n#  ## BASE (FIRST)\n#  ######################\nFROM quay.io/criticaljuncture/baseimage:16.04\n#  ######################\n#  ## RUBY\n#  ######################\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ruby2.2 ruby2.2-dev -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#  ######################\n#  ## VARIOUS PACKAGES\n#  ######################\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends gettext-base patch libcurl4-openssl-dev libpcre3-dev git libmysqlclient-dev mysql-client apache2-utils fontconfig hunspell-en-us libhunspell-1.3-0 libhunspell-dev pngcrush secure-delete xfonts-75dpi xfonts-base xpdf pdftk -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#   node js - packages are out of date\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#   npm packages for testing\nRUN npm install jshint@2.13.6 -g\n#  ######################\n#  ## SPHINX\n#  ######################\nWORKDIR /tmp\nRUN curl -O http://sphinxsearch.com/files/sphinx-2.1.2-release.tar.gz \\\n && tar xzvf sphinx-2.1.2-release.tar.gz \\\n && cd /tmp/sphinx-2.1.2-release \\\n && ./configure \\\n && make \\\n && make install \\\n && rm /tmp/sphinx-2.1.2-release.tar.gz \\\n && rm -Rf /tmp/sphinx-2.1.2-release\n#  #################\n#  ## PRINCEXML\n#  #################\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libc6 libtiff5 libgif7 libcurl3 libfontconfig1 libjpeg8 libxml2 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nWORKDIR /tmp\n#   install prince and license template\nRUN curl -O https://www.princexml.com/download/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && tar -xzvf prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && cd /tmp/prince-8.1r5-ubuntu1604-amd64 \\\n && ./install.sh \\\n && rm /tmp/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && rm -Rf /tmp/prince-8.1r5-ubuntu1604-amd64\nCOPY docker/api/files/princexml/license.dat.tmpl /usr/local/lib/prince/license/license.dat.tmpl\n#   add fonts\nCOPY docker/api/files/fonts/open-sans /usr/share/fonts/truetype/\n#   update font cache\nRUN fc-cache -f -v\n#  #################\n#  ## IMAGEMAGICK\n#  #################\nRUN apt-get update \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends checkinstall libtiff5-dev libx11-dev libxext-dev zlib1g-dev libpng12-dev libjpeg-dev ghostscript libgs-dev imagemagick -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nCOPY docker/api/files/imagemagick/policy.xml /etc/ImageMagick-6/policy.xml\n#  #################\n#  ## TIMEZONE\n#  #################\nRUN ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime\n#  #################\n#  ## APP USER\n#  #################\nRUN adduser app -uid 1000 --system \\\n && usermod -a -G docker_env app\n#  ##############################\n#  ## GEMS & PASSENGER INSTALL\n#  ##############################\nRUN gem install bundler --version 1.17.3\nWORKDIR /tmp\nCOPY Gemfile /tmp/Gemfile\nCOPY Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --system --full-index \\\n && passenger-config install-standalone-runtime \\\n && passenger start --runtime-check-only\n#   docker cached layer build optimization:\n#   caches the latest security upgrade versions\n#   at the same time we're doing something else slow (changing the bundle)\n#   but something we do often enough that the final unattended upgrade at the\n#   end of this dockerfile isn't installing the entire world of security updates\n#   since we set up the dockerfile for the project\nRUN : \\\n && unattended-upgrade -d\nENV PASSENGER_MIN_INSTANCES=\"1\"\nENV WEB_PORT=\"3000\"\n#  #################\n#  ## SERVICES\n#  #################\nCOPY docker/api/my_init.d /etc/my_init.d\nCOPY docker/api/service /etc/service\n#  #################\n#  ## APP\n#  #################\nCOPY --chown=1000:1000 . /home/app/\nWORKDIR /home/app\n#  #################\n#  ## BASE (LAST)\n#  #################\n#   ensure all packages are as up to date as possible\n#   installs all updates since we last bundled\nRUN : \\\n && unattended-upgrade -d\n#   set terminal\nENV TERM=\"linux\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ######################\n# ## BASE (FIRST)\n# ######################\nFROM quay.io/criticaljuncture/baseimage:16.04\n# ######################\n# ## RUBY\n# ######################\nRUN apt-get update \\\n && apt-get install ruby2.2 ruby2.2-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n# ######################\n# ## VARIOUS PACKAGES\n# ######################\nRUN apt-get update \\\n && apt-get install gettext-base patch libcurl4-openssl-dev libpcre3-dev git libmysqlclient-dev mysql-client apache2-utils fontconfig hunspell-en-us libhunspell-1.3-0 libhunspell-dev pngcrush secure-delete xfonts-75dpi xfonts-base xpdf pdftk -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#  node js - packages are out of date\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#  npm packages for testing\nRUN npm install jshint -g\n# ######################\n# ## SPHINX\n# ######################\nWORKDIR /tmp\nRUN curl -O http://sphinxsearch.com/files/sphinx-2.1.2-release.tar.gz \\\n && tar xzvf sphinx-2.1.2-release.tar.gz \\\n && cd /tmp/sphinx-2.1.2-release \\\n && ./configure \\\n && make \\\n && make install \\\n && rm /tmp/sphinx-2.1.2-release.tar.gz \\\n && rm -Rf /tmp/sphinx-2.1.2-release\n# #################\n# ## PRINCEXML\n# #################\nRUN apt-get update \\\n && apt-get install libc6 libtiff5 libgif7 libcurl3 libfontconfig1 libjpeg8 libxml2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nWORKDIR /tmp\n#  install prince and license template\nRUN curl -O https://www.princexml.com/download/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && tar -xzvf prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && cd /tmp/prince-8.1r5-ubuntu1604-amd64 \\\n && ./install.sh \\\n && rm /tmp/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && rm -Rf /tmp/prince-8.1r5-ubuntu1604-amd64\nCOPY docker/api/files/princexml/license.dat.tmpl /usr/local/lib/prince/license/license.dat.tmpl\n#  add fonts\nCOPY docker/api/files/fonts/open-sans /usr/share/fonts/truetype/\n#  update font cache\nRUN fc-cache -f -v\n# #################\n# ## IMAGEMAGICK\n# #################\nRUN apt-get update \\\n && apt-get update \\\n && apt-get install checkinstall libtiff5-dev libx11-dev libxext-dev zlib1g-dev libpng12-dev libjpeg-dev ghostscript libgs-dev imagemagick -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nCOPY docker/api/files/imagemagick/policy.xml /etc/ImageMagick-6/policy.xml\n# #################\n# ## TIMEZONE\n# #################\nRUN ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime\n# #################\n# ## APP USER\n# #################\nRUN adduser app -uid 1000 --system \\\n && usermod -a -G docker_env app\n# ##############################\n# ## GEMS & PASSENGER INSTALL\n# ##############################\nRUN gem install bundler --version 1.17.3\nWORKDIR /tmp\nCOPY Gemfile /tmp/Gemfile\nCOPY Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --system --full-index \\\n && passenger-config install-standalone-runtime \\\n && passenger start --runtime-check-only\n#  docker cached layer build optimization:\n#  caches the latest security upgrade versions\n#  at the same time we're doing something else slow (changing the bundle)\n#  but something we do often enough that the final unattended upgrade at the\n#  end of this dockerfile isn't installing the entire world of security updates\n#  since we set up the dockerfile for the project\nRUN apt-get update \\\n && unattended-upgrade -d\nENV PASSENGER_MIN_INSTANCES=\"1\"\nENV WEB_PORT=\"3000\"\n# #################\n# ## SERVICES\n# #################\nCOPY docker/api/my_init.d /etc/my_init.d\nCOPY docker/api/service /etc/service\n# #################\n# ## APP\n# #################\nCOPY --chown=1000:1000 . /home/app/\nWORKDIR /home/app\n# #################\n# ## BASE (LAST)\n# #################\n#  ensure all packages are as up to date as possible\n#  installs all updates since we last bundled\nRUN apt-get update \\\n && unattended-upgrade -d\n#  set terminal\nENV TERM=\"linux\"\n","injectedSmells":[],"originalDockerfileHash":"d4600e7f3c3cd8523ee5d188a6d7b494","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ######################\n#  ## BASE (FIRST)\n#  ######################\nFROM quay.io/criticaljuncture/baseimage:16.04\n#  ######################\n#  ## RUBY\n#  ######################\nRUN apt-get update \\\n && apt-get install ruby2.2 ruby2.2-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#  ######################\n#  ## VARIOUS PACKAGES\n#  ######################\nRUN apt-get update \\\n && apt-get install gettext-base patch libcurl4-openssl-dev libpcre3-dev git libmysqlclient-dev mysql-client apache2-utils fontconfig hunspell-en-us libhunspell-1.3-0 libhunspell-dev pngcrush secure-delete xfonts-75dpi xfonts-base xpdf pdftk -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#   node js - packages are out of date\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\n#   npm packages for testing\nRUN npm install jshint -g\n#  ######################\n#  ## SPHINX\n#  ######################\nWORKDIR /tmp\nRUN curl -O http://sphinxsearch.com/files/sphinx-2.1.2-release.tar.gz \\\n && tar xzvf sphinx-2.1.2-release.tar.gz \\\n && cd /tmp/sphinx-2.1.2-release \\\n && ./configure \\\n && make \\\n && make install \\\n && rm /tmp/sphinx-2.1.2-release.tar.gz \\\n && rm -Rf /tmp/sphinx-2.1.2-release\n#  #################\n#  ## PRINCEXML\n#  #################\nRUN apt-get update \\\n && apt-get install libc6 libtiff5 libgif7 libcurl3 libfontconfig1 libjpeg8 libxml2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nWORKDIR /tmp\n#   install prince and license template\nRUN curl -O https://www.princexml.com/download/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && tar -xzvf prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && cd /tmp/prince-8.1r5-ubuntu1604-amd64 \\\n && ./install.sh \\\n && rm /tmp/prince-8.1r5-ubuntu1604-amd64.tar.gz \\\n && rm -Rf /tmp/prince-8.1r5-ubuntu1604-amd64\nCOPY docker/api/files/princexml/license.dat.tmpl /usr/local/lib/prince/license/license.dat.tmpl\n#   add fonts\nCOPY docker/api/files/fonts/open-sans /usr/share/fonts/truetype/\n#   update font cache\nRUN fc-cache -f -v\n#  #################\n#  ## IMAGEMAGICK\n#  #################\nRUN apt-get update \\\n && apt-get update \\\n && apt-get install checkinstall libtiff5-dev libx11-dev libxext-dev zlib1g-dev libpng12-dev libjpeg-dev ghostscript libgs-dev imagemagick -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/\nCOPY docker/api/files/imagemagick/policy.xml /etc/ImageMagick-6/policy.xml\n#  #################\n#  ## TIMEZONE\n#  #################\nRUN ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime\n#  #################\n#  ## APP USER\n#  #################\nRUN adduser app -uid 1000 --system \\\n && usermod -a -G docker_env app\n#  ##############################\n#  ## GEMS & PASSENGER INSTALL\n#  ##############################\nRUN gem install bundler --version 1.17.3\nWORKDIR /tmp\nCOPY Gemfile /tmp/Gemfile\nCOPY Gemfile.lock /tmp/Gemfile.lock\nRUN bundle install --system --full-index \\\n && passenger-config install-standalone-runtime \\\n && passenger start --runtime-check-only\n#   docker cached layer build optimization:\n#   caches the latest security upgrade versions\n#   at the same time we're doing something else slow (changing the bundle)\n#   but something we do often enough that the final unattended upgrade at the\n#   end of this dockerfile isn't installing the entire world of security updates\n#   since we set up the dockerfile for the project\nRUN apt-get update \\\n && unattended-upgrade -d\nENV PASSENGER_MIN_INSTANCES=\"1\"\nENV WEB_PORT=\"3000\"\n#  #################\n#  ## SERVICES\n#  #################\nCOPY docker/api/my_init.d /etc/my_init.d\nCOPY docker/api/service /etc/service\n#  #################\n#  ## APP\n#  #################\nCOPY --chown=1000:1000 . /home/app/\nWORKDIR /home/app\n#  #################\n#  ## BASE (LAST)\n#  #################\n#   ensure all packages are as up to date as possible\n#   installs all updates since we last bundled\nRUN apt-get update \\\n && unattended-upgrade -d\n#   set terminal\nENV TERM=\"linux\"\n","originalDockerfileUglifiedHash":"4181529522ebef37bb2a53a0db1a4358","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9c2890f5f1e47aa099879e4c7efda062ff943481.dockerfile"}