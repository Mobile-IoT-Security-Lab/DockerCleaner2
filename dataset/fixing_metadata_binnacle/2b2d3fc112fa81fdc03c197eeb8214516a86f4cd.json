{"seed":79095273,"processedDockerfileHash":"b505c75c9fe4addf097eb0b22fcc8aa9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential curl pkg-config rsync software-properties-common unzip -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 ) \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libnvinfer5=5.0.2-1+cuda10.0 )\nRUN file=\"$( ls -1 /usr/local/ ;)\" \\\n && echo $file\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends cmake gfortran git wget curl graphicsmagick libgraphicsmagick1-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python3-numpy zip -y --fix-missing ) \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN add-apt-repository ppa:jonathonf/python-3.6\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends python3.6 libpython3.6 )\n#   For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nARG PYTHON=python3\nARG PIP=pip3\n#   See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ${PYTHON} ${PYTHON}-pip -y )\nRUN ${PIP} --no-cache-dir install --upgrade pip setuptools\nRUN ${PIP} install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl\nRUN ${PIP} install torchvision\nRUN pip install cupy-cuda100==9.6.0\nRUN pip install pycuda==2022.2.2\n#   Install NVIDIA Rapids and it's deps\nRUN (apt-get update ;apt-get install --no-install-recommends libopenblas-base libomp-dev -y )\nRUN pip install cugraph-cuda100==0.6.1.post1\nRUN pip install cuml-cuda100==0.6.1.post1\nRUN pip install cudf-cuda100==0.6\n#   Some TF tools expect a \"python\" binary\nRUN ln -s $( which ${PYTHON} ;) /usr/local/bin/python\nRUN pip install tensorflow-gpu==2.12.0\n#  COPY bashrc /etc/bash.bashrc\n#  RUN chmod a+rwx /etc/bash.bashrc\nRUN ${PIP} --no-cache-dir install jupyter matplotlib pyinstrument\n#   RUN ${PIP} install jupyter matplotlib o pencv-python opencv-contrib-python pyinstrument\n#   Core linux dependencies. \nRUN (apt-get update ;apt-get install --no-install-recommends build-essential cmake curl gfortran graphicsmagick git wget unzip yasm pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libgraphicsmagick1-dev libavformat-dev libhdf5-dev libpq-dev libgraphicsmagick1-dev libavcodec-dev libboost-all-dev libgtk2.0-dev liblapack-dev liblapacke-dev libswscale-dev libcanberra-gtk-module libboost-dev libboost-all-dev libeigen3-dev python3-dev python3-numpy python3-scipy software-properties-common zip vim qt5-default -y --fix-missing ) \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN ${PIP} --no-cache-dir install hdf5storage h5py py3nvml scikit-image scikit-learn\nWORKDIR /\nRUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.0.1.zip\nRUN unzip opencv.zip\nRUN unzip opencv_contrib.zip\nRUN mv opencv-4.0.1 opencv\nRUN mv opencv_contrib-4.0.1 opencv_contrib\nRUN mkdir /opencv/build\nWORKDIR /opencv/build\nRUN cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DWITH_CUDA=ON -DENABLE_FAST_MATH=1 -DCUDA_FAST_MATH=1 -DWITH_CUBLAS=1 -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$( python -c \"import sys; print(sys.prefix)\" ;) -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_INCLUDE_DIR=$( python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -DPYTHON_PACKAGES_PATH=$( python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. -DINSTALL_PYTHON_EXAMPLES=ON -DINSTALL_C_EXAMPLES=OFF -DOPENCV_ENABLE_NONFREE=ON -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -DBUILD_EXAMPLES=ON -D CUDA_TOOLKIT_ROOT_DIR=/opt/cuda/9.0 -DWITH_QT=ON ..\nRUN make -j4 \\\n && make install \\\n && rm /opencv.zip \\\n && rm /opencv_contrib.zip \\\n && rm -rf /opencv \\\n && rm -rf /opencv_contrib\nWORKDIR /\n#   dlib\nRUN cd ~ \\\n && mkdir -p dlib \\\n && git clone -b 'v19.16' --single-branch https://github.com/davisking/dlib.git dlib/ \\\n && cd dlib/ \\\n && python3 setup.py install --yes USE_AVX_INSTRUCTIONS --yes DLIB_USE_CUDA --clean\nRUN mkdir -p /tf/tensorflow-tutorials \\\n && chmod -R a+rwx /tf/\nRUN mkdir /.local \\\n && chmod a+rwx /.local\nRUN (apt-get update ;apt-get install --no-install-recommends wget -y )\nWORKDIR /tf/tensorflow-tutorials\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_restore_models.ipynb\nRUN apt-get autoremove -y \\\n && apt-get remove -y wget\nWORKDIR /tf\nEXPOSE 8888/tcp 6006/tcp\nRUN useradd -ms /bin/bash container_user\nRUN ${PYTHON} -m ipykernel.kernelspec\nCMD [\"bash\", \"-c\", \"source\", \"/etc/bash.bashrc\", \"&&\", \"jupyter\", \"notebook\", \"--notebook-dir=/tf\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\", \"--NotebookApp.custom_display_url='http://localhost:8888'\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl pkg-config rsync software-properties-common unzip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update \\\n && apt-get install libnvinfer5=5.0.2-1+cuda10.0\nRUN file=\"$( ls -1 /usr/local/ ;)\" \\\n && echo $file\nRUN apt-get update -y\nRUN apt-get install cmake gfortran git wget curl graphicsmagick libgraphicsmagick1-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python3-numpy zip -y --fix-missing \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN add-apt-repository ppa:jonathonf/python-3.6\nRUN apt-get update\nRUN apt-get install python3.6 libpython3.6\n#  For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nARG PYTHON=python3\nARG PIP=pip3\n#  See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && apt-get install ${PYTHON} ${PYTHON}-pip -y\nRUN ${PIP} --no-cache-dir install --upgrade pip setuptools\nRUN ${PIP} install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl\nRUN ${PIP} install torchvision\nRUN pip install cupy-cuda100\nRUN pip install pycuda\n#  Install NVIDIA Rapids and it's deps\nRUN apt-get install libopenblas-base libomp-dev -y\nRUN pip install cugraph-cuda100\nRUN pip install cuml-cuda100\nRUN pip install cudf-cuda100==0.6\n#  Some TF tools expect a \"python\" binary\nRUN ln -s $( which ${PYTHON} ;) /usr/local/bin/python\nRUN pip install tensorflow-gpu\n# COPY bashrc /etc/bash.bashrc\n# RUN chmod a+rwx /etc/bash.bashrc\nRUN ${PIP} --no-cache-dir install jupyter matplotlib pyinstrument\n#  RUN ${PIP} install jupyter matplotlib o pencv-python opencv-contrib-python pyinstrument\n#  Core linux dependencies. \nRUN apt-get install build-essential cmake curl gfortran graphicsmagick git wget unzip yasm pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libgraphicsmagick1-dev libavformat-dev libhdf5-dev libpq-dev libgraphicsmagick1-dev libavcodec-dev libboost-all-dev libgtk2.0-dev liblapack-dev liblapacke-dev libswscale-dev libcanberra-gtk-module libboost-dev libboost-all-dev libeigen3-dev python3-dev python3-numpy python3-scipy software-properties-common zip vim qt5-default -y --fix-missing \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN ${PIP} --no-cache-dir install hdf5storage h5py py3nvml scikit-image scikit-learn\nWORKDIR /\nRUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.0.1.zip\nRUN unzip opencv.zip\nRUN unzip opencv_contrib.zip\nRUN mv opencv-4.0.1 opencv\nRUN mv opencv_contrib-4.0.1 opencv_contrib\nRUN mkdir /opencv/build\nWORKDIR /opencv/build\nRUN cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DWITH_CUDA=ON -DENABLE_FAST_MATH=1 -DCUDA_FAST_MATH=1 -DWITH_CUBLAS=1 -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$( python -c \"import sys; print(sys.prefix)\" ;) -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_INCLUDE_DIR=$( python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -DPYTHON_PACKAGES_PATH=$( python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. -DINSTALL_PYTHON_EXAMPLES=ON -DINSTALL_C_EXAMPLES=OFF -DOPENCV_ENABLE_NONFREE=ON -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -DBUILD_EXAMPLES=ON -D CUDA_TOOLKIT_ROOT_DIR=/opt/cuda/9.0 -DWITH_QT=ON ..\nRUN make -j4 \\\n && make install \\\n && rm /opencv.zip \\\n && rm /opencv_contrib.zip \\\n && rm -rf /opencv \\\n && rm -rf /opencv_contrib\nWORKDIR /\n#  dlib\nRUN cd ~ \\\n && mkdir -p dlib \\\n && git clone -b 'v19.16' --single-branch https://github.com/davisking/dlib.git dlib/ \\\n && cd dlib/ \\\n && python3 setup.py install --yes USE_AVX_INSTRUCTIONS --yes DLIB_USE_CUDA --clean\nRUN mkdir -p /tf/tensorflow-tutorials \\\n && chmod -R a+rwx /tf/\nRUN mkdir /.local \\\n && chmod a+rwx /.local\nRUN apt-get install --no-install-recommends wget -y\nWORKDIR /tf/tensorflow-tutorials\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_restore_models.ipynb\nRUN apt-get autoremove -y \\\n && apt-get remove -y wget\nWORKDIR /tf\nEXPOSE 8888/tcp 6006/tcp\nRUN useradd -ms /bin/bash container_user\nRUN ${PYTHON} -m ipykernel.kernelspec\nCMD [\"bash\", \"-c\", \"source\", \"/etc/bash.bashrc\", \"&&\", \"jupyter\", \"notebook\", \"--notebook-dir=/tf\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\", \"--NotebookApp.custom_display_url='http://localhost:8888'\"]\n","injectedSmells":[],"originalDockerfileHash":"d749130f300ce64912092f0604b6e5e9","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl pkg-config rsync software-properties-common unzip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get update \\\n && apt-get install nvinfer-runtime-trt-repo-ubuntu1804-5.0.2-ga-cuda10.0 \\\n && apt-get update \\\n && apt-get install libnvinfer5=5.0.2-1+cuda10.0\nRUN file=\"$( ls -1 /usr/local/ ;)\" \\\n && echo $file\nRUN apt-get update -y\nRUN apt-get install cmake gfortran git wget curl graphicsmagick libgraphicsmagick1-dev libavcodec-dev libavformat-dev libboost-all-dev libgtk2.0-dev libjpeg-dev liblapack-dev libswscale-dev pkg-config python3-numpy zip -y --fix-missing \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN add-apt-repository ppa:jonathonf/python-3.6\nRUN apt-get update\nRUN apt-get install python3.6 libpython3.6\n#   For CUDA profiling, TensorFlow requires CUPTI.\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nARG PYTHON=python3\nARG PIP=pip3\n#   See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\"\nRUN apt-get update \\\n && apt-get install ${PYTHON} ${PYTHON}-pip -y\nRUN ${PIP} --no-cache-dir install --upgrade pip setuptools\nRUN ${PIP} install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl\nRUN ${PIP} install torchvision\nRUN pip install cupy-cuda100\nRUN pip install pycuda\n#   Install NVIDIA Rapids and it's deps\nRUN apt-get install libopenblas-base libomp-dev -y\nRUN pip install cugraph-cuda100\nRUN pip install cuml-cuda100\nRUN pip install cudf-cuda100==0.6\n#   Some TF tools expect a \"python\" binary\nRUN ln -s $( which ${PYTHON} ;) /usr/local/bin/python\nRUN pip install tensorflow-gpu\n#  COPY bashrc /etc/bash.bashrc\n#  RUN chmod a+rwx /etc/bash.bashrc\nRUN ${PIP} --no-cache-dir install jupyter matplotlib pyinstrument\n#   RUN ${PIP} install jupyter matplotlib o pencv-python opencv-contrib-python pyinstrument\n#   Core linux dependencies. \nRUN apt-get install build-essential cmake curl gfortran graphicsmagick git wget unzip yasm pkg-config libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libgraphicsmagick1-dev libavformat-dev libhdf5-dev libpq-dev libgraphicsmagick1-dev libavcodec-dev libboost-all-dev libgtk2.0-dev liblapack-dev liblapacke-dev libswscale-dev libcanberra-gtk-module libboost-dev libboost-all-dev libeigen3-dev python3-dev python3-numpy python3-scipy software-properties-common zip vim qt5-default -y --fix-missing \\\n && apt-get clean \\\n && rm -rf /tmp/* /var/tmp/*\nRUN ${PIP} --no-cache-dir install hdf5storage h5py py3nvml scikit-image scikit-learn\nWORKDIR /\nRUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.0.1.zip\nRUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.0.1.zip\nRUN unzip opencv.zip\nRUN unzip opencv_contrib.zip\nRUN mv opencv-4.0.1 opencv\nRUN mv opencv_contrib-4.0.1 opencv_contrib\nRUN mkdir /opencv/build\nWORKDIR /opencv/build\nRUN cmake -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DWITH_CUDA=ON -DENABLE_FAST_MATH=1 -DCUDA_FAST_MATH=1 -DWITH_CUBLAS=1 -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$( python -c \"import sys; print(sys.prefix)\" ;) -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_INCLUDE_DIR=$( python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -DPYTHON_PACKAGES_PATH=$( python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. -DINSTALL_PYTHON_EXAMPLES=ON -DINSTALL_C_EXAMPLES=OFF -DOPENCV_ENABLE_NONFREE=ON -DOPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules -DBUILD_EXAMPLES=ON -D CUDA_TOOLKIT_ROOT_DIR=/opt/cuda/9.0 -DWITH_QT=ON ..\nRUN make -j4 \\\n && make install \\\n && rm /opencv.zip \\\n && rm /opencv_contrib.zip \\\n && rm -rf /opencv \\\n && rm -rf /opencv_contrib\nWORKDIR /\n#   dlib\nRUN cd ~ \\\n && mkdir -p dlib \\\n && git clone -b 'v19.16' --single-branch https://github.com/davisking/dlib.git dlib/ \\\n && cd dlib/ \\\n && python3 setup.py install --yes USE_AVX_INSTRUCTIONS --yes DLIB_USE_CUDA --clean\nRUN mkdir -p /tf/tensorflow-tutorials \\\n && chmod -R a+rwx /tf/\nRUN mkdir /.local \\\n && chmod a+rwx /.local\nRUN apt-get install --no-install-recommends wget -y\nWORKDIR /tf/tensorflow-tutorials\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/overfit_and_underfit.ipynb\nRUN wget https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/save_and_restore_models.ipynb\nRUN apt-get autoremove -y \\\n && apt-get remove -y wget\nWORKDIR /tf\nEXPOSE 8888/tcp 6006/tcp\nRUN useradd -ms /bin/bash container_user\nRUN ${PYTHON} -m ipykernel.kernelspec\nCMD [\"bash\", \"-c\", \"source\", \"/etc/bash.bashrc\", \"&&\", \"jupyter\", \"notebook\", \"--notebook-dir=/tf\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\", \"--NotebookApp.custom_display_url='http://localhost:8888'\"]\n","originalDockerfileUglifiedHash":"a5a47d29f78730cf699ee84d6284007a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2b2d3fc112fa81fdc03c197eeb8214516a86f4cd.dockerfile"}