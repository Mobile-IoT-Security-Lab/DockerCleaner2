{"seed":920725776,"processedDockerfileHash":"717c1a0384307bb883485405e9d41539","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 Pillow==9.5.0 h5py==3.8.0 --no-cache-dir\n#   Set up grpc\nRUN pip install enum34==1.1.10 futures==3.4.0 mock==5.0.2 six==1.16.0 \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio==1.53.0 -i https://testpypi.python.org/simple --pre\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.1\nWORKDIR /tensorflow\n#   Copy patches and apply patches\nCOPY patches /patches\nRUN git apply --verbose /patches/*.patch\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python-dev\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\" \\\n    TF_NEED_CUDA=\"1\" \\\n    TF_CUDA_VERSION=\"8.0\" \\\n    TF_CUDNN_VERSION=\"6\" \\\n    TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /\n#   Fix paths so that CUDNN can be found\n#   See https://github.com/tensorflow/tensorflow/issues/8264\nRUN ls -lah /usr/local/cuda/lib64/*\nRUN mkdir /usr/lib/x86_64-linux-gnu/include/ \\\n && ln -s /usr/lib/x86_64-linux-gnu/include/cudnn.h /usr/lib/x86_64-linux-gnu/include/cudnn.h \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so.6\n#   Download TensorFlow Serving\nRUN git clone --recurse-submodules https://github.com/tensorflow/serving \\\n && cd serving \\\n && git checkout\n#   Configure Tensorflow to use the GPU\nRUN cd /serving \\\n && git clone --recursive https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.0 \\\n && tensorflow/tools/ci_build/builds/configured GPU\n#   Build TensorFlow Serving and Install it in /usr/local/bin\nWORKDIR /serving\nRUN bazel build -c opt --config=cuda --crosstool_top=@local_config_cuda//crosstool:toolchain tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && bazel clean --expunge\nWORKDIR /root\n#   cleaning up the container\nRUN rm -rf /tensorflow \\\n && rm -rf /serving \\\n && rm -rf /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl \\\n && rm -rf /bazel\nRUN [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install numpy scipy sklearn pandas Pillow h5py --no-cache-dir\n#  Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.1\nWORKDIR /tensorflow\n#  Copy patches and apply patches\nCOPY patches /patches\nRUN git apply --verbose /patches/*.patch\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python-dev\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\" \\\n    TF_NEED_CUDA=\"1\" \\\n    TF_CUDA_VERSION=\"8.0\" \\\n    TF_CUDNN_VERSION=\"6\" \\\n    TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#  Clean up pip wheel and Bazel cache when done.\nWORKDIR /\n#  Fix paths so that CUDNN can be found\n#  See https://github.com/tensorflow/tensorflow/issues/8264\nRUN ls -lah /usr/local/cuda/lib64/*\nRUN mkdir /usr/lib/x86_64-linux-gnu/include/ \\\n && ln -s /usr/lib/x86_64-linux-gnu/include/cudnn.h /usr/lib/x86_64-linux-gnu/include/cudnn.h \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so.6\n#  Download TensorFlow Serving\nRUN git clone --recurse-submodules https://github.com/tensorflow/serving \\\n && cd serving \\\n && git checkout\n#  Configure Tensorflow to use the GPU\nRUN cd /serving \\\n && git clone --recursive https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.0 \\\n && tensorflow/tools/ci_build/builds/configured GPU\n#  Build TensorFlow Serving and Install it in /usr/local/bin\nWORKDIR /serving\nRUN bazel build -c opt --config=cuda --crosstool_top=@local_config_cuda//crosstool:toolchain tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && bazel clean --expunge\nWORKDIR /root\n#  cleaning up the container\nRUN rm -rf /tensorflow \\\n && rm -rf /serving \\\n && rm -rf /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl \\\n && rm -rf /bazel\nRUN [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"6cecb5be255a9665efb0704036e12910","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless wget -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install numpy scipy sklearn pandas Pillow h5py --no-cache-dir\n#   Set up grpc\nRUN pip install enum34 futures mock six \\\n && pip install 'protobuf>=3.0.0a3' --pre \\\n && pip install grpcio -i https://testpypi.python.org/simple --pre\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.1\nWORKDIR /tensorflow\n#   Copy patches and apply patches\nCOPY patches /patches\nRUN git apply --verbose /patches/*.patch\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python-dev\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\" \\\n    TF_NEED_CUDA=\"1\" \\\n    TF_CUDA_VERSION=\"8.0\" \\\n    TF_CUDNN_VERSION=\"6\" \\\n    TF_CUDA_COMPUTE_CAPABILITIES=\"3.7,6.1\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" tensorflow/tools/pip_package:build_pip_package \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /\n#   Fix paths so that CUDNN can be found\n#   See https://github.com/tensorflow/tensorflow/issues/8264\nRUN ls -lah /usr/local/cuda/lib64/*\nRUN mkdir /usr/lib/x86_64-linux-gnu/include/ \\\n && ln -s /usr/lib/x86_64-linux-gnu/include/cudnn.h /usr/lib/x86_64-linux-gnu/include/cudnn.h \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so.6\n#   Download TensorFlow Serving\nRUN git clone --recurse-submodules https://github.com/tensorflow/serving \\\n && cd serving \\\n && git checkout\n#   Configure Tensorflow to use the GPU\nRUN cd /serving \\\n && git clone --recursive https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout v1.4.0 \\\n && tensorflow/tools/ci_build/builds/configured GPU\n#   Build TensorFlow Serving and Install it in /usr/local/bin\nWORKDIR /serving\nRUN bazel build -c opt --config=cuda --crosstool_top=@local_config_cuda//crosstool:toolchain tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && bazel clean --expunge\nWORKDIR /root\n#   cleaning up the container\nRUN rm -rf /tensorflow \\\n && rm -rf /serving \\\n && rm -rf /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl \\\n && rm -rf /bazel\nRUN [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"1a6508b8fb17d49748b32ed0c4581c49","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/99d13449104a88319122368a8654635ec4650e71.dockerfile"}