{"seed":2241900716,"processedDockerfileHash":"3481924d6aa99d1c151d6424edd4581b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   We start with a bare minimum. This image has at the time of writing 27MB. \nFROM ubuntu\n#   Please change to whoever is going to maintain this.\nLABEL Sascha=\"Just <sascha.just@cispa.saarland>\"\nLABEL description=\"v0.1\"\n#   Tell debian that we are not in interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   FB_USER holds the username (and thus group and home name) of our notebook user. \nARG FB_USER=fuzzingbook\nENV FB_USER=\"${FB_USER}\"\n#   Specify whether we install publish extensions.\nARG PUBLISH=no\n#   This specifies the git repository that you want to clone.\nARG OWNER=uds-se\nENV OWNER=\"${OWNER}\"\nARG REPO=https://github.com/${OWNER}/fuzzingbook.git\n#   Since you are running git within the container, this specifies the branch we\n#   want to checkout and work on.\n#   I'd prefer mounting the clone from the host machine into the container which would\n#   drastically reduce the size of the imageâ€”not just because of the size of the Git \n#   repository, but also because all of the dependencies we have to install to bring a \n#   Git client. This almost doubles the size of the\nARG BRANCH=master\n#   The directory that is used for the clone and for the jupyter notebook as base\n#   directory. \nARG BASEDIR=FuzzingBook\n#   Here, we specify package versions. This simplifies updates of individual packages\n#   and dependencies without changing the actual routines within the Dockerfile.\nARG FUZZINGBOOK_VERSION=master \nARG FUZZMANAGER_VERSION=0.3.2 \nARG GRCOV_VERSION=0.3.2 \nARG TINI_VERSION=0.18.0\n#   Set the default shell from /bin/sh to /bin/bash. \nSHELL [\"/bin/bash\", \"-c\"]\n#   This gets rid of all man pages and docs when installing packages using apt.\n#   The image is not made for comfortable shell access but only to serve the\n#   fuzzingbook using jupyter notebook/hub.\nCOPY 01_nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc\n#   Create the notebook user and its home directory.\nRUN useradd -c 'FuzzingBook User' -d /home/${FB_USER} -m -s /bin/bash -U ${FB_USER}\n#   Set the current working directory to the superuser's home\nUSER root\nWORKDIR /root\n#   I moved all python package dependencies to an external file.\n#   This avoids convolution of the Dockerfile while providing a central point for \n#   authors to add dependencies they require. Please keep in mind, that we also\n#   pull dependencies for fuzzmanager from the fuzzmanager GitHub repository which\n#   should not collide. Chris losened the dependencies of fuzzmanager quite a bit.\n#   So far, the only package for our internal dependencies are numpy; hence I \n#   removed it from the file and kept everything else I could find in the original\n#   Dockerfile. \nCOPY requirements.txt /root/install-requirements.txt\n#   ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/requirements.txt /root/install-requirements.txt\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /root/fuzzingbook-requirements.txt https://raw.githubusercontent.com/$OWNER/fuzzingbook/$FUZZINGBOOK_VERSION/binder/requirements.txt\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /root/fuzzmanager-requirements.txt https://raw.githubusercontent.com/MozillaSecurity/FuzzManager/${FUZZMANAGER_VERSION}/server/requirements.txt\n#   Same for the ubuntu packages. These have been moved to a file to facilitate \n#   the installation and mainenance. \nCOPY apt.txt /root/install-packages.txt\n#   ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/apt.txt /root/install-packages.txt\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /root/fuzzingbook-packages.txt https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/binder/apt.txt\n#   Install python3, curl and git using apt.\n#   Install pip manually (to avoid installing 0.9 using apt first, upgrading and \n#   fixing the installation later on)\n#   We need distutils to work-around most python2to3 issues.\n#   Lastly, install all python packages that are required to run jupyter, fuzzmanager\n#   and fuzzingbook notebooks. \n#   Clean up after us (IN THE SAME RUN COMMAND). This is important. If we do this\n#   in two steps, the intermediate image layers will grow significantly in size. \nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl=7.88.1-7ubuntu1 -y \\\n && apt-get install --no-install-recommends python3=3.11.2-1 python3-distutils=3.11.2-2 git=1:2.39.2-1ubuntu1 npm=9.2.0~ds1-1 -y \\\n && apt-get install --no-install-recommends $( < install-packages.txt;) $( grep -v -e '^\\s*#' fuzzingbook-packages.txt ;) -y \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8 \\\n && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3 get-pip.py \\\n && pip3 install jupyter jupyterhub -r install-requirements.txt -r fuzzingbook-requirements.txt \\\n && pip3 install -r fuzzmanager-requirements.txt https://github.com/MozillaSecurity/FuzzManager/archive/${FUZZMANAGER_VERSION}.tar.gz \\\n && npm install configurable-http-proxy@4.5.5 -g \\\n && curl -o grcov-linux-x86_64.tar.bz2 --location https://github.com/mozilla/grcov/releases/download/v${GRCOV_VERSION}/grcov-linux-x86_64.tar.bz2 \\\n && tar xjf grcov-linux-x86_64.tar.bz2 \\\n && mv grcov /usr/local/bin/ \\\n && rm -f *-requirements.txt *-packages.txt grcov-linux-x86_64.tar.bz2 \\\n && apt-get clean \\\n && rm -rf /var/cache/apt/archives /var/lib/apt/lists/*\nCOPY notebookapp.py /usr/local/lib/python3.6/dist-packages/notebook/notebookapp.py\n#   We run tini as an entry point. \nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#   Switch to the notebook user and prepare the work environment.\nUSER ${FB_USER}\nWORKDIR /home/${FB_USER}\n#   Patch to change certain FuzzManager settings\nCOPY settings.py.patch /home/${FB_USER}/settings.py.patch\n#   Clone the fuzzingbook repository and use it as working directory for \n#   the jupyter instance. We shallow clone and omit history at this point\n#   to speed up initial build process. You can change (remove the switch)\n#   this at any time to get a full clone.\nRUN git clone --branch ${BRANCH} --depth 1 https://github.com/$OWNER/fuzzingbook.git ${BASEDIR} \\\n && nbdime extensions --enable \\\n && jupyter nbextension enable nbdime --py \\\n && nbdime config-git --enable --global \\\n && jupyter contrib nbextension install --user \\\n && for extension in toc2/main exercise2/main codefolding/main execute_time/main varInspector/main collapsible_headings/main select_keymap/main spellchecker/main scratchpad/main; do jupyter nbextension enable --user \"$extension\" ; done \\\n && test -n $PUBLISH \\\n && for extension in code_prettify/autopep8 code_prettify/code_prettify; do jupyter nbextension enable --user \"$extension\" ; done || true \\\n && shopt -s globstar \\\n && jupyter trust ${BASEDIR}/**/*.ipynb \\\n && mkdir -p .jupyter/custom \\\n && cp ${BASEDIR}/docs/beta/notebooks/custom.css .jupyter/custom/ \\\n && curl -o fuzzmanager.tar.gz --location https://github.com/MozillaSecurity/FuzzManager/archive/0.3.2.tar.gz \\\n && tar xzf fuzzmanager.tar.gz \\\n && rm -f fuzzmanager.tar.gz \\\n && mv FuzzManager-${FUZZMANAGER_VERSION} FuzzManager \\\n && python3 FuzzManager/server/manage.py migrate \\\n && python3 FuzzManager/server/manage.py createsuperuser --username demo --email demo@example.com --no-input \\\n && python3 FuzzManager/server/manage.py shell -c 'from django.contrib.auth.models import User; user = User.objects.get(username=\"demo\"); user.set_password(\"demo\"); user.save();' \\\n && echo -ne \"[Main]\\nsigdir = /home/${FB_USER}/signatures/\\ntool = fuzzingbook\\nserverport = 8000\\nserverproto = http\\nserverhost = 127.0.0.1\\nserverauthtoken = \" > .fuzzmanagerconf \\\n && python3 FuzzManager/server/manage.py get_auth_token demo >> .fuzzmanagerconf \\\n && mkdir /home/${FB_USER}/signatures/ \\\n && (cd FuzzManager \\\n && patch -p1 < /home/${FB_USER}/settings.py.patch)\n#   Adding configuration for jupyter. This sets a constant token, such that connecting\n#   with external tools like VSCode, Atom or IntelliJ can use a constant config. \nCOPY --chown=fuzzingbook:fuzzingbook jupyter_notebook_config.py /home/${FB_USER}/.jupyter/\nUSER root\nCOPY startup.sh /startup.sh\nCOPY startup-user.sh /startup-user.sh\n#   I am running notebook here. Feel free to change this to hub, lab, or whatever you guys prefer.\nEXPOSE 8000/tcp 8888/tcp\nCMD bash /startup.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  We start with a bare minimum. This image has at the time of writing 27MB. \nFROM ubuntu\n#  Please change to whoever is going to maintain this.\nLABEL Sascha=\"Just <sascha.just@cispa.saarland>\"\nLABEL description=\"v0.1\"\n#  Tell debian that we are not in interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  FB_USER holds the username (and thus group and home name) of our notebook user. \nARG FB_USER=fuzzingbook\nENV FB_USER=\"${FB_USER}\"\n#  Specify whether we install publish extensions.\nARG PUBLISH=no\n#  This specifies the git repository that you want to clone.\nARG OWNER=uds-se\nENV OWNER=\"${OWNER}\"\nARG REPO=https://github.com/${OWNER}/fuzzingbook.git\n#  Since you are running git within the container, this specifies the branch we\n#  want to checkout and work on.\n#  I'd prefer mounting the clone from the host machine into the container which would\n#  drastically reduce the size of the imageâ€”not just because of the size of the Git \n#  repository, but also because all of the dependencies we have to install to bring a \n#  Git client. This almost doubles the size of the\nARG BRANCH=master\n#  The directory that is used for the clone and for the jupyter notebook as base\n#  directory. \nARG BASEDIR=FuzzingBook\n#  Here, we specify package versions. This simplifies updates of individual packages\n#  and dependencies without changing the actual routines within the Dockerfile.\nARG FUZZINGBOOK_VERSION=master \nARG FUZZMANAGER_VERSION=0.3.2 \nARG GRCOV_VERSION=0.3.2 \nARG TINI_VERSION=0.18.0\n#  Set the default shell from /bin/sh to /bin/bash. \nSHELL [\"/bin/bash\", \"-c\"]\n#  This gets rid of all man pages and docs when installing packages using apt.\n#  The image is not made for comfortable shell access but only to serve the\n#  fuzzingbook using jupyter notebook/hub.\nADD 01_nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc\n#  Create the notebook user and its home directory.\nRUN useradd -c 'FuzzingBook User' -d /home/${FB_USER} -m -s /bin/bash -U ${FB_USER}\n#  Set the current working directory to the superuser's home\nUSER root\nWORKDIR /root\n#  I moved all python package dependencies to an external file.\n#  This avoids convolution of the Dockerfile while providing a central point for \n#  authors to add dependencies they require. Please keep in mind, that we also\n#  pull dependencies for fuzzmanager from the fuzzmanager GitHub repository which\n#  should not collide. Chris losened the dependencies of fuzzmanager quite a bit.\n#  So far, the only package for our internal dependencies are numpy; hence I \n#  removed it from the file and kept everything else I could find in the original\n#  Dockerfile. \nADD requirements.txt /root/install-requirements.txt\n#  ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/requirements.txt /root/install-requirements.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/$FUZZINGBOOK_VERSION/binder/requirements.txt /root/fuzzingbook-requirements.txt\nADD https://raw.githubusercontent.com/MozillaSecurity/FuzzManager/${FUZZMANAGER_VERSION}/server/requirements.txt /root/fuzzmanager-requirements.txt\n#  Same for the ubuntu packages. These have been moved to a file to facilitate \n#  the installation and mainenance. \nADD apt.txt /root/install-packages.txt\n#  ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/apt.txt /root/install-packages.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/binder/apt.txt /root/fuzzingbook-packages.txt\n#  Install python3, curl and git using apt.\n#  Install pip manually (to avoid installing 0.9 using apt first, upgrading and \n#  fixing the installation later on)\n#  We need distutils to work-around most python2to3 issues.\n#  Lastly, install all python packages that are required to run jupyter, fuzzmanager\n#  and fuzzingbook notebooks. \n#  Clean up after us (IN THE SAME RUN COMMAND). This is important. If we do this\n#  in two steps, the intermediate image layers will grow significantly in size. \nRUN set -x \\\n && apt-get update \\\n && apt-get install curl -y \\\n && apt-get install --no-install-recommends python3 python3-distutils git npm -y \\\n && apt-get install --no-install-recommends $( < install-packages.txt;) $( grep -v -e '^\\s*#' fuzzingbook-packages.txt ;) -y \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8 \\\n && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3 get-pip.py \\\n && pip3 install jupyter jupyterhub -r install-requirements.txt -r fuzzingbook-requirements.txt \\\n && pip3 install -r fuzzmanager-requirements.txt https://github.com/MozillaSecurity/FuzzManager/archive/${FUZZMANAGER_VERSION}.tar.gz \\\n && npm install configurable-http-proxy -g \\\n && curl -o grcov-linux-x86_64.tar.bz2 --location https://github.com/mozilla/grcov/releases/download/v${GRCOV_VERSION}/grcov-linux-x86_64.tar.bz2 \\\n && tar xjf grcov-linux-x86_64.tar.bz2 \\\n && mv grcov /usr/local/bin/ \\\n && rm -f *-requirements.txt *-packages.txt grcov-linux-x86_64.tar.bz2 \\\n && apt-get clean \\\n && rm -rf /var/cache/apt/archives /var/lib/apt/lists/*\nADD notebookapp.py /usr/local/lib/python3.6/dist-packages/notebook/notebookapp.py\n#  We run tini as an entry point. \nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#  Switch to the notebook user and prepare the work environment.\nUSER ${FB_USER}\nWORKDIR /home/${FB_USER}\n#  Patch to change certain FuzzManager settings\nADD settings.py.patch /home/${FB_USER}/settings.py.patch\n#  Clone the fuzzingbook repository and use it as working directory for \n#  the jupyter instance. We shallow clone and omit history at this point\n#  to speed up initial build process. You can change (remove the switch)\n#  this at any time to get a full clone.\nRUN git clone --branch ${BRANCH} --depth 1 https://github.com/$OWNER/fuzzingbook.git ${BASEDIR} \\\n && nbdime extensions --enable \\\n && jupyter nbextension enable nbdime --py \\\n && nbdime config-git --enable --global \\\n && jupyter contrib nbextension install --user \\\n && for extension in toc2/main exercise2/main codefolding/main execute_time/main varInspector/main collapsible_headings/main select_keymap/main spellchecker/main scratchpad/main; do jupyter nbextension enable --user \"$extension\" ; done \\\n && test -n $PUBLISH \\\n && for extension in code_prettify/autopep8 code_prettify/code_prettify; do jupyter nbextension enable --user \"$extension\" ; done || true \\\n && shopt -s globstar \\\n && jupyter trust ${BASEDIR}/**/*.ipynb \\\n && mkdir -p .jupyter/custom \\\n && cp ${BASEDIR}/docs/beta/notebooks/custom.css .jupyter/custom/ \\\n && curl -o fuzzmanager.tar.gz --location https://github.com/MozillaSecurity/FuzzManager/archive/0.3.2.tar.gz \\\n && tar xzf fuzzmanager.tar.gz \\\n && rm -f fuzzmanager.tar.gz \\\n && mv FuzzManager-${FUZZMANAGER_VERSION} FuzzManager \\\n && python3 FuzzManager/server/manage.py migrate \\\n && python3 FuzzManager/server/manage.py createsuperuser --username demo --email demo@example.com --no-input \\\n && python3 FuzzManager/server/manage.py shell -c 'from django.contrib.auth.models import User; user = User.objects.get(username=\"demo\"); user.set_password(\"demo\"); user.save();' \\\n && echo -ne \"[Main]\\nsigdir = /home/${FB_USER}/signatures/\\ntool = fuzzingbook\\nserverport = 8000\\nserverproto = http\\nserverhost = 127.0.0.1\\nserverauthtoken = \" > .fuzzmanagerconf \\\n && python3 FuzzManager/server/manage.py get_auth_token demo >> .fuzzmanagerconf \\\n && mkdir /home/${FB_USER}/signatures/ \\\n && (cd FuzzManager \\\n && patch -p1 < /home/${FB_USER}/settings.py.patch)\n#  Adding configuration for jupyter. This sets a constant token, such that connecting\n#  with external tools like VSCode, Atom or IntelliJ can use a constant config. \nADD --chown=fuzzingbook:fuzzingbook jupyter_notebook_config.py /home/${FB_USER}/.jupyter/\nUSER root\nADD startup.sh /startup.sh\nADD startup-user.sh /startup-user.sh\n#  I am running notebook here. Feel free to change this to hub, lab, or whatever you guys prefer.\nEXPOSE 8000/tcp 8888/tcp\nCMD bash /startup.sh\n","injectedSmells":[],"originalDockerfileHash":"8a2fa550a58a77d64e55120185a0b0ac","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   We start with a bare minimum. This image has at the time of writing 27MB. \nFROM ubuntu\n#   Please change to whoever is going to maintain this.\nLABEL Sascha=\"Just <sascha.just@cispa.saarland>\"\nLABEL description=\"v0.1\"\n#   Tell debian that we are not in interactive mode.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   FB_USER holds the username (and thus group and home name) of our notebook user. \nARG FB_USER=fuzzingbook\nENV FB_USER=\"${FB_USER}\"\n#   Specify whether we install publish extensions.\nARG PUBLISH=no\n#   This specifies the git repository that you want to clone.\nARG OWNER=uds-se\nENV OWNER=\"${OWNER}\"\nARG REPO=https://github.com/${OWNER}/fuzzingbook.git\n#   Since you are running git within the container, this specifies the branch we\n#   want to checkout and work on.\n#   I'd prefer mounting the clone from the host machine into the container which would\n#   drastically reduce the size of the imageâ€”not just because of the size of the Git \n#   repository, but also because all of the dependencies we have to install to bring a \n#   Git client. This almost doubles the size of the\nARG BRANCH=master\n#   The directory that is used for the clone and for the jupyter notebook as base\n#   directory. \nARG BASEDIR=FuzzingBook\n#   Here, we specify package versions. This simplifies updates of individual packages\n#   and dependencies without changing the actual routines within the Dockerfile.\nARG FUZZINGBOOK_VERSION=master \nARG FUZZMANAGER_VERSION=0.3.2 \nARG GRCOV_VERSION=0.3.2 \nARG TINI_VERSION=0.18.0\n#   Set the default shell from /bin/sh to /bin/bash. \nSHELL [\"/bin/bash\", \"-c\"]\n#   This gets rid of all man pages and docs when installing packages using apt.\n#   The image is not made for comfortable shell access but only to serve the\n#   fuzzingbook using jupyter notebook/hub.\nADD 01_nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc\n#   Create the notebook user and its home directory.\nRUN useradd -c 'FuzzingBook User' -d /home/${FB_USER} -m -s /bin/bash -U ${FB_USER}\n#   Set the current working directory to the superuser's home\nUSER root\nWORKDIR /root\n#   I moved all python package dependencies to an external file.\n#   This avoids convolution of the Dockerfile while providing a central point for \n#   authors to add dependencies they require. Please keep in mind, that we also\n#   pull dependencies for fuzzmanager from the fuzzmanager GitHub repository which\n#   should not collide. Chris losened the dependencies of fuzzmanager quite a bit.\n#   So far, the only package for our internal dependencies are numpy; hence I \n#   removed it from the file and kept everything else I could find in the original\n#   Dockerfile. \nADD requirements.txt /root/install-requirements.txt\n#   ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/requirements.txt /root/install-requirements.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/$FUZZINGBOOK_VERSION/binder/requirements.txt /root/fuzzingbook-requirements.txt\nADD https://raw.githubusercontent.com/MozillaSecurity/FuzzManager/${FUZZMANAGER_VERSION}/server/requirements.txt /root/fuzzmanager-requirements.txt\n#   Same for the ubuntu packages. These have been moved to a file to facilitate \n#   the installation and mainenance. \nADD apt.txt /root/install-packages.txt\n#   ADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/deploy/fuzzingbook-base/apt.txt /root/install-packages.txt\nADD https://raw.githubusercontent.com/$OWNER/fuzzingbook/${FUZZINGBOOK_VERSION}/binder/apt.txt /root/fuzzingbook-packages.txt\n#   Install python3, curl and git using apt.\n#   Install pip manually (to avoid installing 0.9 using apt first, upgrading and \n#   fixing the installation later on)\n#   We need distutils to work-around most python2to3 issues.\n#   Lastly, install all python packages that are required to run jupyter, fuzzmanager\n#   and fuzzingbook notebooks. \n#   Clean up after us (IN THE SAME RUN COMMAND). This is important. If we do this\n#   in two steps, the intermediate image layers will grow significantly in size. \nRUN set -x \\\n && apt-get update \\\n && apt-get install curl -y \\\n && apt-get install --no-install-recommends python3 python3-distutils git npm -y \\\n && apt-get install --no-install-recommends $( < install-packages.txt;) $( grep -v -e '^\\s*#' fuzzingbook-packages.txt ;) -y \\\n && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n && dpkg-reconfigure --frontend=noninteractive locales \\\n && update-locale LANG=en_US.UTF-8 \\\n && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \\\n && python3 get-pip.py \\\n && pip3 install jupyter jupyterhub -r install-requirements.txt -r fuzzingbook-requirements.txt \\\n && pip3 install -r fuzzmanager-requirements.txt https://github.com/MozillaSecurity/FuzzManager/archive/${FUZZMANAGER_VERSION}.tar.gz \\\n && npm install configurable-http-proxy -g \\\n && curl -o grcov-linux-x86_64.tar.bz2 --location https://github.com/mozilla/grcov/releases/download/v${GRCOV_VERSION}/grcov-linux-x86_64.tar.bz2 \\\n && tar xjf grcov-linux-x86_64.tar.bz2 \\\n && mv grcov /usr/local/bin/ \\\n && rm -f *-requirements.txt *-packages.txt grcov-linux-x86_64.tar.bz2 \\\n && apt-get clean \\\n && rm -rf /var/cache/apt/archives /var/lib/apt/lists/*\nADD notebookapp.py /usr/local/lib/python3.6/dist-packages/notebook/notebookapp.py\n#   We run tini as an entry point. \nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\nENTRYPOINT [\"/tini\", \"--\"]\n#   Switch to the notebook user and prepare the work environment.\nUSER ${FB_USER}\nWORKDIR /home/${FB_USER}\n#   Patch to change certain FuzzManager settings\nADD settings.py.patch /home/${FB_USER}/settings.py.patch\n#   Clone the fuzzingbook repository and use it as working directory for \n#   the jupyter instance. We shallow clone and omit history at this point\n#   to speed up initial build process. You can change (remove the switch)\n#   this at any time to get a full clone.\nRUN git clone --branch ${BRANCH} --depth 1 https://github.com/$OWNER/fuzzingbook.git ${BASEDIR} \\\n && nbdime extensions --enable \\\n && jupyter nbextension enable nbdime --py \\\n && nbdime config-git --enable --global \\\n && jupyter contrib nbextension install --user \\\n && for extension in toc2/main exercise2/main codefolding/main execute_time/main varInspector/main collapsible_headings/main select_keymap/main spellchecker/main scratchpad/main; do jupyter nbextension enable --user \"$extension\" ; done \\\n && test -n $PUBLISH \\\n && for extension in code_prettify/autopep8 code_prettify/code_prettify; do jupyter nbextension enable --user \"$extension\" ; done || true \\\n && shopt -s globstar \\\n && jupyter trust ${BASEDIR}/**/*.ipynb \\\n && mkdir -p .jupyter/custom \\\n && cp ${BASEDIR}/docs/beta/notebooks/custom.css .jupyter/custom/ \\\n && curl -o fuzzmanager.tar.gz --location https://github.com/MozillaSecurity/FuzzManager/archive/0.3.2.tar.gz \\\n && tar xzf fuzzmanager.tar.gz \\\n && rm -f fuzzmanager.tar.gz \\\n && mv FuzzManager-${FUZZMANAGER_VERSION} FuzzManager \\\n && python3 FuzzManager/server/manage.py migrate \\\n && python3 FuzzManager/server/manage.py createsuperuser --username demo --email demo@example.com --no-input \\\n && python3 FuzzManager/server/manage.py shell -c 'from django.contrib.auth.models import User; user = User.objects.get(username=\"demo\"); user.set_password(\"demo\"); user.save();' \\\n && echo -ne \"[Main]\\nsigdir = /home/${FB_USER}/signatures/\\ntool = fuzzingbook\\nserverport = 8000\\nserverproto = http\\nserverhost = 127.0.0.1\\nserverauthtoken = \" > .fuzzmanagerconf \\\n && python3 FuzzManager/server/manage.py get_auth_token demo >> .fuzzmanagerconf \\\n && mkdir /home/${FB_USER}/signatures/ \\\n && (cd FuzzManager \\\n && patch -p1 < /home/${FB_USER}/settings.py.patch)\n#   Adding configuration for jupyter. This sets a constant token, such that connecting\n#   with external tools like VSCode, Atom or IntelliJ can use a constant config. \nADD --chown=fuzzingbook:fuzzingbook jupyter_notebook_config.py /home/${FB_USER}/.jupyter/\nUSER root\nADD startup.sh /startup.sh\nADD startup-user.sh /startup-user.sh\n#   I am running notebook here. Feel free to change this to hub, lab, or whatever you guys prefer.\nEXPOSE 8000/tcp 8888/tcp\nCMD bash /startup.sh\n","originalDockerfileUglifiedHash":"5f2dfaff419f7d5f00b2d2a92d2ae630","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/79ab0777ef69d3a3d5af6b8af5e8829bd61bfc28.dockerfile"}