{"seed":232710929,"processedDockerfileHash":"b64c051692433b9d58ed158e4ba05563","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nLABEL maintainer=\"Clayne Robison <clayne.b.robison@intel.com>\"\n#   These parameters can be overridden by parameterized_docker_build.sh\nARG TF_BUILD_VERSION=r1.9\nARG PYTHON=\"python\"\nARG PYTHON3_DEV=\"\"\nARG WHL_DIR=\"/tmp/pip\"\nARG PIP=\"pip\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.5 libhdf5-serial-dev=1.8.16+docs-4ubuntu1.1 libpng12-dev=1.2.54-1ubuntu1.1 libzmq3-dev=4.1.4-7ubuntu0.1 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.12-1~16.04 rsync=3.1.1-3ubuntu1.3 software-properties-common=0.96.20.10 unzip=6.0-20ubuntu1.1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 ${PYTHON3_DEV} -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && ${PYTHON} get-pip.py \\\n && rm get-pip.py\nRUN ${PIP} --no-cache-dir install Pillow h5py ipykernel jupyter matplotlib mock numpy scipy sklearn pandas \\\n && ${PYTHON} -m ipykernel.kernelspec\nRUN if [ \"${PYTHON}\" = \"python3\" ] ; then ln -s -f /usr/bin/python3 /usr/bin/python ; fi\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.11.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=${TF_BUILD_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git .\nRUN yes \"\" | ${PYTHON} configure.py\nENV CI_BUILD_PYTHON=\"${PYTHON}\"\n#   Set bazel build parameters in .bazelrc in parameterized_docker_build.sh\n#   Use --copt=-march values to get optimized builds appropriate for the hardware\n#     platform of your choice.\n#   For ivy-bridge or sandy-bridge\n#   --copt=-march=\"avx\" \\\n#   For haswell, broadwell, or skylake\n#   --copt=-march=\"avx2\" \\\nCOPY .bazelrc /root/.bazelrc\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel --bazelrc=/root/.bazelrc build -c opt tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package \"${WHL_DIR}\" \\\n && ${PIP} --no-cache-dir install --upgrade \"${WHL_DIR}\"/tensorflow-*.whl \\\n && rm -rf /root/.cache\n#   Clean up Bazel cache when done.\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nWORKDIR /root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nLABEL maintainer=\"Clayne Robison <clayne.b.robison@intel.com>\"\n#  These parameters can be overridden by parameterized_docker_build.sh\nARG TF_BUILD_VERSION=r1.9\nARG PYTHON=\"python\"\nARG PYTHON3_DEV=\"\"\nARG WHL_DIR=\"/tmp/pip\"\nARG PIP=\"pip\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless ${PYTHON3_DEV} -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && ${PYTHON} get-pip.py \\\n && rm get-pip.py\nRUN ${PIP} --no-cache-dir install Pillow h5py ipykernel jupyter matplotlib mock numpy scipy sklearn pandas \\\n && ${PYTHON} -m ipykernel.kernelspec\nRUN if [ \"${PYTHON}\" = \"python3\" ] ; then ln -s -f /usr/bin/python3 /usr/bin/python ; fi\n#  Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly:\n#    https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.11.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=${TF_BUILD_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git .\nRUN yes \"\" | ${PYTHON} configure.py\nENV CI_BUILD_PYTHON=\"${PYTHON}\"\n#  Set bazel build parameters in .bazelrc in parameterized_docker_build.sh\n#  Use --copt=-march values to get optimized builds appropriate for the hardware\n#    platform of your choice.\n#  For ivy-bridge or sandy-bridge\n#  --copt=-march=\"avx\" \\\n#  For haswell, broadwell, or skylake\n#  --copt=-march=\"avx2\" \\\nCOPY .bazelrc /root/.bazelrc\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel --bazelrc=/root/.bazelrc build -c opt tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package \"${WHL_DIR}\" \\\n && ${PIP} --no-cache-dir install --upgrade \"${WHL_DIR}\"/tensorflow-*.whl \\\n && rm -rf /root/.cache\n#  Clean up Bazel cache when done.\n#  TensorBoard\nEXPOSE 6006/tcp\n#  IPython\nEXPOSE 8888/tcp\nWORKDIR /root\n","injectedSmells":[],"originalDockerfileHash":"40cf1239a22db8017bb32a4e0ddee311","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nLABEL maintainer=\"Clayne Robison <clayne.b.robison@intel.com>\"\n#   These parameters can be overridden by parameterized_docker_build.sh\nARG TF_BUILD_VERSION=r1.9\nARG PYTHON=\"python\"\nARG PYTHON3_DEV=\"\"\nARG WHL_DIR=\"/tmp/pip\"\nARG PIP=\"pip\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config python-dev rsync software-properties-common unzip zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless ${PYTHON3_DEV} -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && ${PYTHON} get-pip.py \\\n && rm get-pip.py\nRUN ${PIP} --no-cache-dir install Pillow h5py ipykernel jupyter matplotlib mock numpy scipy sklearn pandas \\\n && ${PYTHON} -m ipykernel.kernelspec\nRUN if [ \"${PYTHON}\" = \"python3\" ] ; then ln -s -f /usr/bin/python3 /usr/bin/python ; fi\n#   Set up our notebook config.\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly:\n#     https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY run_jupyter.sh /\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.11.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nWORKDIR /tensorflow\nRUN git clone --branch=${TF_BUILD_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git .\nRUN yes \"\" | ${PYTHON} configure.py\nENV CI_BUILD_PYTHON=\"${PYTHON}\"\n#   Set bazel build parameters in .bazelrc in parameterized_docker_build.sh\n#   Use --copt=-march values to get optimized builds appropriate for the hardware\n#     platform of your choice.\n#   For ivy-bridge or sandy-bridge\n#   --copt=-march=\"avx\" \\\n#   For haswell, broadwell, or skylake\n#   --copt=-march=\"avx2\" \\\nCOPY .bazelrc /root/.bazelrc\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel --bazelrc=/root/.bazelrc build -c opt tensorflow/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow/tools/pip_package/build_pip_package \"${WHL_DIR}\" \\\n && ${PIP} --no-cache-dir install --upgrade \"${WHL_DIR}\"/tensorflow-*.whl \\\n && rm -rf /root/.cache\n#   Clean up Bazel cache when done.\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nWORKDIR /root\n","originalDockerfileUglifiedHash":"ce9e65ff014a3f29a7e119ac84647489","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/aa6d02766289c9ac3af2c14f87f2d76363f98ead.dockerfile"}