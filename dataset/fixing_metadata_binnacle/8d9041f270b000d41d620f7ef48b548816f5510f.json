{"seed":1863851267,"processedDockerfileHash":"609ddc73e0ccf24190e97b527722db29","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Dockerfile describing development environments and builds of FEniCS-X\n#\n#   Authors: Jack S. Hale <jack.hale@uni.lu> Lizao Li\n#   <lzlarryli@gmail.com> Garth N. Wells <gnw20@cam.ac.uk> Jan Blechta\n#   <blechta@karlin.mff.cuni.cz>\n#\n#   All layers are built bi-weekly on CircleCI and pushed to\n#   https://quay.io/repository/fenicsproject/dolfinx\n#\n#   To build development environment images:\n#\n#      docker build --target dev-env-complex -t quay.io/fenicsproject/dolfinx:dev-env-complex .\n#      docker build --target dev-env-real -t quay.io/fenicsproject/dolfinx:dev-env-real .\n#\n#   To run a notebook:\n#\n#      docker run -p 8888:8888 quay.io/fenicsproject/dolfinx:notebook\n#\n#   To run and share the current host directory with the container:\n#\n#      docker run -p 8888:8888 -v \"$(pwd)\":/tmp quay.io/fenicsproject/dolfinx:notebook\n#\nARG GMSH_VERSION=4.3.0\nARG PYBIND11_VERSION=2.3.0\nARG PETSC_VERSION=3.11.2\nARG SLEPC_VERSION=3.11.1\nARG PETSC4PY_VERSION=3.11.0\nARG SLEPC4PY_VERSION=3.11.0\nARG TINI_VERSION=v0.18.0\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS=\"-02 -g\"\nARG PETSC_SLEPC_DEBUGGING=\"yes\"\nFROM ubuntu:18.04 AS base\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"Base image for real and complex FEniCS test environments\"\nARG GMSH_VERSION\nARG PYBIND11_VERSION\nWORKDIR /tmp\n#   Environment variables\nENV OPENBLAS_NUM_THREADS=\"1\" \\\n    OPENBLAS_VERBOSE=\"0\"\n#   Install dependencies available via apt-get.\n#   - First set of packages are required to build and run FEniCS.\n#   - Second set of packages are recommended and/or required to build\n#     documentation or tests.\n#   - Third set of packages are optional, but required to run gmsh\n#     pre-built binaries.\n#   - Fourth set of packages are optional, required for meshio.\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt-get update -qq \\\n && apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade \\\n && apt-get install --no-install-recommends cmake=3.10.2-1ubuntu2.18.04.2 g++=4:7.4.0-1ubuntu2.3 gfortran=4:7.4.0-1ubuntu2.3 libboost-dev=1.65.1.0ubuntu1 libboost-filesystem-dev=1.65.1.0ubuntu1 libboost-iostreams-dev=1.65.1.0ubuntu1 libboost-math-dev=1.65.1.0ubuntu1 libboost-program-options-dev=1.65.1.0ubuntu1 libboost-system-dev=1.65.1.0ubuntu1 libboost-thread-dev=1.65.1.0ubuntu1 libboost-timer-dev=1.65.1.0ubuntu1 libeigen3-dev=3.3.4-4 libhdf5-mpich-dev=1.10.0-patch1+docs-4 liblapack-dev=3.7.1-4ubuntu1 libmpich-dev=3.3~a2-4 libopenblas-dev=0.2.20+ds-4 mpich=3.3~a2-4 ninja-build=1.8.2-1 pkg-config=0.29.1-0ubuntu2 python3-dev=3.6.7-1~18.04 python3-matplotlib=2.1.1-2ubuntu3 python3-numpy=1:1.13.3-2ubuntu1 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-scipy=0.19.1-2ubuntu1 python3-setuptools=39.0.1-2ubuntu0.1 -y \\\n && apt-get install --no-install-recommends doxygen=1.8.13-10 git=1:2.17.1-1ubuntu0.17 graphviz=2.40.1-2 valgrind=1:3.13.0-2ubuntu2.3 wget=1.19.4-1ubuntu2.2 -y \\\n && apt-get install --no-install-recommends libglu1 libxcursor-dev=1:1.1.15-1 libxinerama1=2:1.1.3-1 -y \\\n && apt-get install --no-install-recommends python3-lxml=4.2.1-1ubuntu0.6 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Download Install Gmsh SDK\nRUN cd /usr/local \\\n && wget -nc --quiet http://gmsh.info/bin/Linux/gmsh-${GMSH_VERSION}-Linux64-sdk.tgz \\\n && tar -xf gmsh-${GMSH_VERSION}-Linux64-sdk.tgz\nENV PATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/bin:$PATH\"\n#   Add gmsh python API\nENV PYTHONPATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/lib\"\n#   Install Python packages (via pip)\n#   - First set of packages are required to build and run FEniCS.\n#   - Second set of packages are recommended and/or required to build\n#     documentation or run tests.\n#   - Third set of packages are optional but required for\n#     pygmsh/meshio/DOLFIN mesh pipeline.\nRUN pip3 install --no-cache-dir mpi4py numba \\\n && pip3 install --no-cache-dir cffi decorator flake8 pytest pytest-xdist sphinx sphinx_rtd_theme \\\n && export HDF5_MPI=\"ON\" \\\n && pip3 install --no-cache-dir --no-binary=h5py h5py meshio pygmsh\n#   Install pybind11\nRUN wget -nc --quiet https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz \\\n && tar -xf v${PYBIND11_VERSION}.tar.gz \\\n && cd pybind11-${PYBIND11_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DPYBIND11_TEST=False ../ \\\n && make install \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM base AS dev-env-real\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"FEniCS development environment with PETSc real mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#   Install PETSc and SLEPc with real types.\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends bison=2:3.0.4.dfsg-1build1 flex=2.6.4-6 python=2.7.15~rc1-1 -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-hypre --download-metis --download-mumps --download-ptscotch --download-scalapack --download-spai --download-suitesparse --download-superlu --with-scalar-type=real --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#   Install petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n#  #######################################\nFROM base AS dev-env-complex\nLABEL description=\"FEniCS development environment with PETSc complex mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#   Install PETSc and SLEPc with complex scalar types\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends bison=2:3.0.4.dfsg-1build1 flex=2.6.4-6 python=2.7.15~rc1-1 -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-metis --download-mumps --download-ptscotch --download-scalapack --download-suitesparse --download-superlu --with-scalar-type=complex --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#   Install complex petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n#  #######################################\nFROM dev-env-real AS real\nLABEL description=\"DOLFIN-X in real mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#   Install ipython (optional), FIAT, UFL and ffcX (development\n#   versions, master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#   Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM dev-env-complex AS complex\nLABEL description=\"DOLFIN-X in complex mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#   Install ipython (optional), FIAT, UFL and ffcX (development versions,\n#   master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#   Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM real AS notebook\nLABEL description=\"DOLFIN-X Jupyter Notebook\"\nWORKDIR /root\nARG TINI_VERSION\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM complex AS notebook-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Notebook\"\nARG TINI_VERSION\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM notebook AS lab\nLABEL description=\"DOLFIN-X Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM notebook-complex AS lab-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile describing development environments and builds of FEniCS-X\n#\n#  Authors: Jack S. Hale <jack.hale@uni.lu> Lizao Li\n#  <lzlarryli@gmail.com> Garth N. Wells <gnw20@cam.ac.uk> Jan Blechta\n#  <blechta@karlin.mff.cuni.cz>\n#\n#  All layers are built bi-weekly on CircleCI and pushed to\n#  https://quay.io/repository/fenicsproject/dolfinx\n#\n#  To build development environment images:\n#\n#     docker build --target dev-env-complex -t quay.io/fenicsproject/dolfinx:dev-env-complex .\n#     docker build --target dev-env-real -t quay.io/fenicsproject/dolfinx:dev-env-real .\n#\n#  To run a notebook:\n#\n#     docker run -p 8888:8888 quay.io/fenicsproject/dolfinx:notebook\n#\n#  To run and share the current host directory with the container:\n#\n#     docker run -p 8888:8888 -v \"$(pwd)\":/tmp quay.io/fenicsproject/dolfinx:notebook\n#\nARG GMSH_VERSION=4.3.0\nARG PYBIND11_VERSION=2.3.0\nARG PETSC_VERSION=3.11.2\nARG SLEPC_VERSION=3.11.1\nARG PETSC4PY_VERSION=3.11.0\nARG SLEPC4PY_VERSION=3.11.0\nARG TINI_VERSION=v0.18.0\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS=\"-02 -g\"\nARG PETSC_SLEPC_DEBUGGING=\"yes\"\nFROM ubuntu:18.04 AS base\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"Base image for real and complex FEniCS test environments\"\nARG GMSH_VERSION\nARG PYBIND11_VERSION\nWORKDIR /tmp\n#  Environment variables\nENV OPENBLAS_NUM_THREADS=\"1\" \\\n    OPENBLAS_VERBOSE=\"0\"\n#  Install dependencies available via apt-get.\n#  - First set of packages are required to build and run FEniCS.\n#  - Second set of packages are recommended and/or required to build\n#    documentation or tests.\n#  - Third set of packages are optional, but required to run gmsh\n#    pre-built binaries.\n#  - Fourth set of packages are optional, required for meshio.\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt-get update -qq \\\n && apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade \\\n && apt-get install cmake g++ gfortran libboost-dev libboost-filesystem-dev libboost-iostreams-dev libboost-math-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev libboost-timer-dev libeigen3-dev libhdf5-mpich-dev liblapack-dev libmpich-dev libopenblas-dev mpich ninja-build pkg-config python3-dev python3-matplotlib python3-numpy python3-pip python3-scipy python3-setuptools -y \\\n && apt-get install doxygen git graphviz valgrind wget -y \\\n && apt-get install libglu1 libxcursor-dev libxinerama1 -y \\\n && apt-get install python3-lxml -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Download Install Gmsh SDK\nRUN cd /usr/local \\\n && wget -nc --quiet http://gmsh.info/bin/Linux/gmsh-${GMSH_VERSION}-Linux64-sdk.tgz \\\n && tar -xf gmsh-${GMSH_VERSION}-Linux64-sdk.tgz\nENV PATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/bin:$PATH\"\n#  Add gmsh python API\nENV PYTHONPATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/lib\"\n#  Install Python packages (via pip)\n#  - First set of packages are required to build and run FEniCS.\n#  - Second set of packages are recommended and/or required to build\n#    documentation or run tests.\n#  - Third set of packages are optional but required for\n#    pygmsh/meshio/DOLFIN mesh pipeline.\nRUN pip3 install --no-cache-dir mpi4py numba \\\n && pip3 install --no-cache-dir cffi decorator flake8 pytest pytest-xdist sphinx sphinx_rtd_theme \\\n && export HDF5_MPI=\"ON\" \\\n && pip3 install --no-cache-dir --no-binary=h5py h5py meshio pygmsh\n#  Install pybind11\nRUN wget -nc --quiet https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz \\\n && tar -xf v${PYBIND11_VERSION}.tar.gz \\\n && cd pybind11-${PYBIND11_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DPYBIND11_TEST=False ../ \\\n && make install \\\n && rm -rf /tmp/*\nWORKDIR /root\n# #######################################\nFROM base AS dev-env-real\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"FEniCS development environment with PETSc real mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#  Install PETSc and SLEPc with real types.\nRUN apt-get update -qq \\\n && apt-get install bison flex python -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-hypre --download-metis --download-mumps --download-ptscotch --download-scalapack --download-spai --download-suitesparse --download-superlu --with-scalar-type=real --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#  Install petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n# #######################################\nFROM base AS dev-env-complex\nLABEL description=\"FEniCS development environment with PETSc complex mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#  Install PETSc and SLEPc with complex scalar types\nRUN apt-get update -qq \\\n && apt-get install bison flex python -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-metis --download-mumps --download-ptscotch --download-scalapack --download-suitesparse --download-superlu --with-scalar-type=complex --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#  Install complex petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n# #######################################\nFROM dev-env-real AS real\nLABEL description=\"DOLFIN-X in real mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#  Install ipython (optional), FIAT, UFL and ffcX (development\n#  versions, master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#  Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n# #######################################\nFROM dev-env-complex AS complex\nLABEL description=\"DOLFIN-X in complex mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#  Install ipython (optional), FIAT, UFL and ffcX (development versions,\n#  master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#  Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n# #######################################\nFROM real AS notebook\nLABEL description=\"DOLFIN-X Jupyter Notebook\"\nWORKDIR /root\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n# #######################################\nFROM complex AS notebook-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Notebook\"\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n# #######################################\nFROM notebook AS lab\nLABEL description=\"DOLFIN-X Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n# #######################################\nFROM notebook-complex AS lab-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n","injectedSmells":[],"originalDockerfileHash":"fc254667a5e1d288f3db60266f181d03","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile describing development environments and builds of FEniCS-X\n#\n#   Authors: Jack S. Hale <jack.hale@uni.lu> Lizao Li\n#   <lzlarryli@gmail.com> Garth N. Wells <gnw20@cam.ac.uk> Jan Blechta\n#   <blechta@karlin.mff.cuni.cz>\n#\n#   All layers are built bi-weekly on CircleCI and pushed to\n#   https://quay.io/repository/fenicsproject/dolfinx\n#\n#   To build development environment images:\n#\n#      docker build --target dev-env-complex -t quay.io/fenicsproject/dolfinx:dev-env-complex .\n#      docker build --target dev-env-real -t quay.io/fenicsproject/dolfinx:dev-env-real .\n#\n#   To run a notebook:\n#\n#      docker run -p 8888:8888 quay.io/fenicsproject/dolfinx:notebook\n#\n#   To run and share the current host directory with the container:\n#\n#      docker run -p 8888:8888 -v \"$(pwd)\":/tmp quay.io/fenicsproject/dolfinx:notebook\n#\nARG GMSH_VERSION=4.3.0\nARG PYBIND11_VERSION=2.3.0\nARG PETSC_VERSION=3.11.2\nARG SLEPC_VERSION=3.11.1\nARG PETSC4PY_VERSION=3.11.0\nARG SLEPC4PY_VERSION=3.11.0\nARG TINI_VERSION=v0.18.0\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS=\"-02 -g\"\nARG PETSC_SLEPC_DEBUGGING=\"yes\"\nFROM ubuntu:18.04 AS base\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"Base image for real and complex FEniCS test environments\"\nARG GMSH_VERSION\nARG PYBIND11_VERSION\nWORKDIR /tmp\n#   Environment variables\nENV OPENBLAS_NUM_THREADS=\"1\" \\\n    OPENBLAS_VERBOSE=\"0\"\n#   Install dependencies available via apt-get.\n#   - First set of packages are required to build and run FEniCS.\n#   - Second set of packages are recommended and/or required to build\n#     documentation or tests.\n#   - Third set of packages are optional, but required to run gmsh\n#     pre-built binaries.\n#   - Fourth set of packages are optional, required for meshio.\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && apt-get update -qq \\\n && apt-get -yq --with-new-pkgs -o Dpkg::Options::=\"--force-confold\" upgrade \\\n && apt-get install cmake g++ gfortran libboost-dev libboost-filesystem-dev libboost-iostreams-dev libboost-math-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev libboost-timer-dev libeigen3-dev libhdf5-mpich-dev liblapack-dev libmpich-dev libopenblas-dev mpich ninja-build pkg-config python3-dev python3-matplotlib python3-numpy python3-pip python3-scipy python3-setuptools -y \\\n && apt-get install doxygen git graphviz valgrind wget -y \\\n && apt-get install libglu1 libxcursor-dev libxinerama1 -y \\\n && apt-get install python3-lxml -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Download Install Gmsh SDK\nRUN cd /usr/local \\\n && wget -nc --quiet http://gmsh.info/bin/Linux/gmsh-${GMSH_VERSION}-Linux64-sdk.tgz \\\n && tar -xf gmsh-${GMSH_VERSION}-Linux64-sdk.tgz\nENV PATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/bin:$PATH\"\n#   Add gmsh python API\nENV PYTHONPATH=\"/usr/local/gmsh-${GMSH_VERSION}-Linux64-sdk/lib\"\n#   Install Python packages (via pip)\n#   - First set of packages are required to build and run FEniCS.\n#   - Second set of packages are recommended and/or required to build\n#     documentation or run tests.\n#   - Third set of packages are optional but required for\n#     pygmsh/meshio/DOLFIN mesh pipeline.\nRUN pip3 install --no-cache-dir mpi4py numba \\\n && pip3 install --no-cache-dir cffi decorator flake8 pytest pytest-xdist sphinx sphinx_rtd_theme \\\n && export HDF5_MPI=\"ON\" \\\n && pip3 install --no-cache-dir --no-binary=h5py h5py meshio pygmsh\n#   Install pybind11\nRUN wget -nc --quiet https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz \\\n && tar -xf v${PYBIND11_VERSION}.tar.gz \\\n && cd pybind11-${PYBIND11_VERSION} \\\n && mkdir build \\\n && cd build \\\n && cmake -DPYBIND11_TEST=False ../ \\\n && make install \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM base AS dev-env-real\nLABEL maintainer=\"fenics-project <fenics-support@googlegroups.org>\"\nLABEL description=\"FEniCS development environment with PETSc real mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#   Install PETSc and SLEPc with real types.\nRUN apt-get update -qq \\\n && apt-get install bison flex python -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-hypre --download-metis --download-mumps --download-ptscotch --download-scalapack --download-spai --download-suitesparse --download-superlu --with-scalar-type=real --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#   Install petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n#  #######################################\nFROM base AS dev-env-complex\nLABEL description=\"FEniCS development environment with PETSc complex mode\"\nARG PETSC_VERSION\nARG PETSC4PY_VERSION\nARG SLEPC_VERSION\nARG SLEPC4PY_VERSION\nARG MAKEFLAGS\nARG PETSC_SLEPC_OPTFLAGS\nARG PETSC_SLEPC_DEBUGGING\nWORKDIR /tmp\n#   Install PETSc and SLEPc with complex scalar types\nRUN apt-get update -qq \\\n && apt-get install bison flex python -y \\\n && wget -nc --quiet https://bitbucket.org/petsc/petsc/get/v${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz \\\n && mkdir -p petsc-src \\\n && tar -xf petsc-${PETSC_VERSION}.tar.gz -C petsc-src --strip-components 1 \\\n && cd petsc-src \\\n && ./configure --COPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --CXXOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --FOPTFLAGS=${PETSC_SLEPC_OPTFLAGS} --with-debugging=${PETSC_SLEPC_DEBUGGING} --with-fortran-bindings=no --download-blacs --download-metis --download-mumps --download-ptscotch --download-scalapack --download-suitesparse --download-superlu --with-scalar-type=complex --prefix=/usr/local/petsc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && export PETSC_DIR=/usr/local/petsc \\\n && cd /tmp \\\n && wget -nc --quiet http://slepc.upv.es/download/distrib/slepc-${SLEPC_VERSION}.tar.gz -O slepc-${SLEPC_VERSION}.tar.gz \\\n && mkdir -p slepc-src \\\n && tar -xf slepc-${SLEPC_VERSION}.tar.gz -C slepc-src --strip-components 1 \\\n && cd slepc-src \\\n && ./configure --prefix=/usr/local/slepc \\\n && make ${MAKEFLAGS} \\\n && make install \\\n && apt-get -y purge bison flex python \\\n && apt-get -y autoremove \\\n && apt-get clean \\\n && rm -rf /tmp/* \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV PETSC_DIR=\"/usr/local/petsc\" \\\n    SLEPC_DIR=\"/usr/local/slepc\"\n#   Install complex petsc4py and slepc4py\nRUN pip3 install --no-cache-dir petsc4py==${PETSC4PY_VERSION} \\\n && pip3 install --no-cache-dir slepc4py==${SLEPC4PY_VERSION}\nWORKDIR /root\n#  #######################################\nFROM dev-env-real AS real\nLABEL description=\"DOLFIN-X in real mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#   Install ipython (optional), FIAT, UFL and ffcX (development\n#   versions, master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#   Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM dev-env-complex AS complex\nLABEL description=\"DOLFIN-X in complex mode\"\nARG MAKEFLAGS\nWORKDIR /tmp\n#   Install ipython (optional), FIAT, UFL and ffcX (development versions,\n#   master branch)\nRUN pip3 install --no-cache-dir ipython \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/fiat.git \\\n && pip3 install --no-cache-dir git+https://bitbucket.org/fenics-project/ufl.git \\\n && pip3 install --no-cache-dir git+https://github.com/fenics/ffcX\n#   Install dolfinx\nRUN git clone https://github.com/fenics/dolfinx.git \\\n && cd dolfinx \\\n && mkdir build \\\n && cd build \\\n && cmake -G Ninja ../cpp \\\n && ninja ${MAKEFLAGS} install \\\n && cd ../python \\\n && pip3 install . \\\n && rm -rf /tmp/*\nWORKDIR /root\n#  #######################################\nFROM real AS notebook\nLABEL description=\"DOLFIN-X Jupyter Notebook\"\nWORKDIR /root\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM complex AS notebook-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Notebook\"\nARG TINI_VERSION\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini \\\n && pip3 install --no-cache-dir jupyter jupyterlab\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"notebook\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM notebook AS lab\nLABEL description=\"DOLFIN-X Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n#  #######################################\nFROM notebook-complex AS lab-complex\nLABEL description=\"DOLFIN-X (complex mode) Jupyter Lab\"\nWORKDIR /root\nENTRYPOINT [\"/tini\", \"--\", \"jupyter\", \"lab\", \"--ip\", \"0.0.0.0\", \"--no-browser\", \"--allow-root\"]\n","originalDockerfileUglifiedHash":"6a39516b3aae4bdabef718051f4dfd50","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8d9041f270b000d41d620f7ef48b548816f5510f.dockerfile"}