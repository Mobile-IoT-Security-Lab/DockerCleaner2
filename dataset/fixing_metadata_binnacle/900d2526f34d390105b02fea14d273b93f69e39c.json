{"seed":2243200152,"processedDockerfileHash":"e33a8752bc29b05f611d1aa5ac7fe74f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  !/usr/bin/docker build --force-rm --rm -f\n#  ? USAGE\n#  ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n#  ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n#  ?\n#  ?          OSAFT_VERSION\n#  ?              Version of this build (should be used as image tag also).\n#  ?\n#  ?          OSAFT_VM_FROM\n#  ?              Base image to be used for this build. Tested images are:\n#  ?                  (2018) alpine:3.8\n#  ?\n#  ?          OSAFT_VM_SRC_WOLFSSL\n#  ?              URL to fetch wolfssl.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_WOLFSSL\n#  ?              SHA256 checksum for the wolfssl archive.\n#  ?\n#  ?          OSAFT_VM_TAR_WOLFSSL\n#  ?              Name of archive file (during build).\n#  ?\n#  ?          OSAFT_VM_DYN_WOLFSSL\n#  ?              Build (link) mode of wolfssl executable: --enable-static or --enable-shared\n#  ?\n#  ?          OSAFT_VM_HOSTNAME\n#  ?              Hostname to be used for running container (/etc/hostname)\n#  ?\n#  ? ENVIRONMENT VARIABLES\n#  ?      The build image sets environment variables. They are mainly used for\n#  ?      documentation or by other programs to check for the right build.\n#  ?\n#  ?      Following environment variables are set inside the docker image:\n#  ?\n#  ?          osaft_vm_build\n#  ?              Build version of this image.\n#  ?          WOLFSSL_DIR\n#  ?              Directory where wolfSSL is installed.\n#  ?          WOLFSSL_VERSION\n#  ?              Version of installed OpenSSL\n#  ?          TERM\n#  ?              Prefered X-Terminal program.\n#  ?          LD_RUN_PATH\n#  ?              Additional paths for runtime loader, used while linking with\n#  ?              \"ld -rpath=...\"\n#  ?              Linking of wolfssl, libssl.so and SSLeay.so will use  -rpath\n#  ?              in LDFLAGS to ensure that the special library will be used.\n#  ?              Default:${WOLFSSL_DIR}/lib\n#  ?          PATH\n#  ?              PATH for shell, set to:\n#  ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$WOLFSSL_DIR/bin:$PATH\n#  ?          WORK_DIR\n#  ?              Directory where to build the packages (used for Dockerfile's\n#  ?              WORKDIR  dierective.\n#  ?\n#  ? EXAMPLES\n#  ?      Simple build with defaults:  alpine:3.8, wolfssl\n#  ?          docker build --force-rm --rm \\ \n#  ?                  -f Dockerfile.wolfssl -t o-saft/wolfssl .\n#  ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#   Parameters passed to build\n#   OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_WOLFSSL=\"https://github.com/wolfSSL/wolfssl/archive/v3.15.3-stable.tar.gz\"\n#   -----BEGIN PGP SIGNATURE-----\nARG OSAFT_VM_SHA_WOLFSSL=\"iQEcBAABCgAGBQJbLXUHAAoJEOvIDkFcopZ3NYMIAJMSsKQQxTHdiO4tjhofhgu2uH8QmY4XjyDqVEzID1GTmjS092bh/wNfQLRW5nMNMdS965XzA8gmSqo1bWIfFBG+eKZLc4xu+oIEDKfF7r5gkmPQNRVsHmOQK6BeOG0BnXBSdE9E0CIIlk81pZC7HSo7U6/I1hVlXyL9Y8ctfL2doDzil1jAvc0tQo/HNU4UikHtcbH2tsYSzjA1wXnjqeXQWYy0TcJ0MbJrnpqX0li6JWc/6FSqM1hgCzrf/7kScdsu2zxMKxuxUvCCRJ1meYKtVf2K6SlLFg5iqxqe+JRTvIiq2EDalsqClW9I1rbkphvYspZ9WI0Jf4YJUp4xPVk==AlNB\"\n#   -----END PGP SIGNATURE-----\nARG OSAFT_VM_TAR_WOLFSSL=\"wolfssl.tgz\"\nARG OSAFT_VM_DYN_WOLFSSL=\"--enable-static\"\n#                               --enable-static  not yet (2017) working 'cause of\nARG OSAFT_VM_HOSTNAME\nARG OSAFT_VERSION=\"18.10.12\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build docker image with wolfssl\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile.wolfssl -t o-saft/wolfssl:$OSAFT_VERSION -t o-saft/wolfssl .\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/contrib/Dockerfile.wolfssl\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_WOLFSSL\" \\\n      SID=\"@(#) Dockerfile.wolfssl 1.1 18/10/15 23:38:12\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV WOLFSSL_DIR=\"/wolfssl\"\nENV WOLFSSL_VERSION=\"v3.15.3\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${WOLFSSL_DIR}/lib\"\nENV PATH=\"${WOLFSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\n#   Install required packages, development tools and libs\n#  RUN apk update && \\   # no update neded and not wanted\nRUN apk add wget=1.21.3-r2 ncurses=6.3_p20221119-r0 linux-headers=5.19.5-r0 gcc=12.2.1_git20220924-r4 make=4.3-r1 musl-dev=1.2.3-r4 zlib-dev=1.2.13-r0 m4=1.4.19-r1 perl=5.36.0-r0 autoconf=2.71-r1 automake=1.16.5-r1 libtool=2.4.7-r1 file=5.43-r0 --no-cache \\\n && apk add lksctp-tools-dev=1.0.19-r1 --no-cache \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $WOLFSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_WOLFSSL -O $OSAFT_VM_TAR_WOLFSSL \\\n && tar -xzf $OSAFT_VM_TAR_WOLFSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && LDFLAGS=\"-Wl,-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./autogen.sh \\\n && ./configure --prefix=$WOLFSSL_DIR $OSAFT_VM_DYN_WOLFSSL --disable-option-checking --enable-rng --with-libz --enable-sslv3 --enable-dtls --enable-tlsv10 --enable-tlsv12 --enable-tls13 --enable-oldtls --enable-tls13-draft18 --enable-tls13-draft22 --enable-tls13-draft23 --enable-tls13-draft26 --enable-tls13-draft28 --enable-aescbc --enable-aesccm --enable-aesgcm --enable-aesctr --enable-aescfb --enable-aesni --enable-md2 --enable-md4 --enable-md5 --enable-sha2 --enable-sha3 --enable-sha224 --enable-sha512 --enable-cmac --enable-dsa --enable-des3 --enable-dh --enable-ecccustcurves --enable-ecc --enable-eccshamir --enable-eccencrypt --enable-ed25519 --enable-curve25519 --enable-supportedcurves --enable-fpecc --enable-compkey --enable-hkdf --enable-arc4 --enable-psk --enable-sep --enable-blake2 --enable-ripemd --enable-camellia --enable-x963kdf --enable-rabbit --enable-hc128 --enable-anon --enable-nullcipher --enable-idea --enable-chacha --enable-poly1305 --enable-alpn --enable-sni --enable-crl --enable-truncatedhmac --enable-mcast --enable-sctp --enable-srp --enable-rsa --enable-rsapss --enable-xts --enable-coding --enable-base16 --enable-base64encode --enable-oldnames --enable-errorstrings --enable-enckeys --enable-ocsp --enable-ocspstapling --enable-ocspstapling2 --enable-tlsx --enable-session-ticket --enable-extended-master --enable-secure-renegotiation --enable-opensslall --enable-opensslextra --enable-lighty --enable-webclient --enable-earlydata \\\n && echo \"# configure done.\" || cat ./config.log \\\n && make \\\n && make -i test \\\n && make install \\\n && cp examples/echoclient/.libs/echoclient $WOLFSSL_DIR/bin/ ; cp examples/echoserver/.libs/echoserver $WOLFSSL_DIR/bin/ ; cp examples/client/.libs/client $WOLFSSL_DIR/bin/ ; cp examples/server/.libs/server $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-client-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-server-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/sctp-client $WOLFSSL_DIR/bin/ ; mv certs/ $WOLFSSL_DIR/bin/ ; ln -s $WOLFSSL_DIR/bin/certs /certs ; echo -n \"# number of ciphers $WOLFSSL_DIR/bin/client: \" \\\n && $WOLFSSL_DIR/bin/client -e | tr ':' '\\012' | wc -l \\\n && $WOLFSSL_DIR/bin/client -e \\\n && apk del --purge lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && echo rm -rf $BUILD_DIR $OSAFT_VM_TAR_WOLFSSL \\\n && apk del --purge gcc make m4 autoconf automake musl-dev linux-headers perl-dev readline bash libltdl libtool file \\\n && [ -n \"$OSAFT_VM_HOSTNAME\" ] \\\n && echo \"$OSAFT_VM_HOSTNAME\" > /etc/hostname\nWORKDIR $WOLFSSL_DIR\n#  ## USER    wolfssl\n#  ## RUN     ??\nENTRYPOINT [\"/wolfssl/bin\"]\nEXPOSE 443/tcp\n#   vim:set ft=dockerfile:\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# !/usr/bin/docker build --force-rm --rm -f\n# ? USAGE\n# ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n# ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n# ?\n# ?          OSAFT_VERSION\n# ?              Version of this build (should be used as image tag also).\n# ?\n# ?          OSAFT_VM_FROM\n# ?              Base image to be used for this build. Tested images are:\n# ?                  (2018) alpine:3.8\n# ?\n# ?          OSAFT_VM_SRC_WOLFSSL\n# ?              URL to fetch wolfssl.tgz archive.\n# ?\n# ?          OSAFT_VM_SHA_WOLFSSL\n# ?              SHA256 checksum for the wolfssl archive.\n# ?\n# ?          OSAFT_VM_TAR_WOLFSSL\n# ?              Name of archive file (during build).\n# ?\n# ?          OSAFT_VM_DYN_WOLFSSL\n# ?              Build (link) mode of wolfssl executable: --enable-static or --enable-shared\n# ?\n# ?          OSAFT_VM_HOSTNAME\n# ?              Hostname to be used for running container (/etc/hostname)\n# ?\n# ? ENVIRONMENT VARIABLES\n# ?      The build image sets environment variables. They are mainly used for\n# ?      documentation or by other programs to check for the right build.\n# ?\n# ?      Following environment variables are set inside the docker image:\n# ?\n# ?          osaft_vm_build\n# ?              Build version of this image.\n# ?          WOLFSSL_DIR\n# ?              Directory where wolfSSL is installed.\n# ?          WOLFSSL_VERSION\n# ?              Version of installed OpenSSL\n# ?          TERM\n# ?              Prefered X-Terminal program.\n# ?          LD_RUN_PATH\n# ?              Additional paths for runtime loader, used while linking with\n# ?              \"ld -rpath=...\"\n# ?              Linking of wolfssl, libssl.so and SSLeay.so will use  -rpath\n# ?              in LDFLAGS to ensure that the special library will be used.\n# ?              Default:${WOLFSSL_DIR}/lib\n# ?          PATH\n# ?              PATH for shell, set to:\n# ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$WOLFSSL_DIR/bin:$PATH\n# ?          WORK_DIR\n# ?              Directory where to build the packages (used for Dockerfile's\n# ?              WORKDIR  dierective.\n# ?\n# ? EXAMPLES\n# ?      Simple build with defaults:  alpine:3.8, wolfssl\n# ?          docker build --force-rm --rm \\ \n# ?                  -f Dockerfile.wolfssl -t o-saft/wolfssl .\n# ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#  Parameters passed to build\n#  OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_WOLFSSL=\"https://github.com/wolfSSL/wolfssl/archive/v3.15.3-stable.tar.gz\"\n#  -----BEGIN PGP SIGNATURE-----\nARG OSAFT_VM_SHA_WOLFSSL=\"iQEcBAABCgAGBQJbLXUHAAoJEOvIDkFcopZ3NYMIAJMSsKQQxTHdiO4tjhofhgu2uH8QmY4XjyDqVEzID1GTmjS092bh/wNfQLRW5nMNMdS965XzA8gmSqo1bWIfFBG+eKZLc4xu+oIEDKfF7r5gkmPQNRVsHmOQK6BeOG0BnXBSdE9E0CIIlk81pZC7HSo7U6/I1hVlXyL9Y8ctfL2doDzil1jAvc0tQo/HNU4UikHtcbH2tsYSzjA1wXnjqeXQWYy0TcJ0MbJrnpqX0li6JWc/6FSqM1hgCzrf/7kScdsu2zxMKxuxUvCCRJ1meYKtVf2K6SlLFg5iqxqe+JRTvIiq2EDalsqClW9I1rbkphvYspZ9WI0Jf4YJUp4xPVk==AlNB\"\n#  -----END PGP SIGNATURE-----\nARG OSAFT_VM_TAR_WOLFSSL=\"wolfssl.tgz\"\nARG OSAFT_VM_DYN_WOLFSSL=\"--enable-static\"\n#                              --enable-static  not yet (2017) working 'cause of\nARG OSAFT_VM_HOSTNAME\nARG OSAFT_VERSION=\"18.10.12\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build docker image with wolfssl\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile.wolfssl -t o-saft/wolfssl:$OSAFT_VERSION -t o-saft/wolfssl .\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/contrib/Dockerfile.wolfssl\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_WOLFSSL\" \\\n      SID=\"@(#) Dockerfile.wolfssl 1.1 18/10/15 23:38:12\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV WOLFSSL_DIR=\"/wolfssl\"\nENV WOLFSSL_VERSION=\"v3.15.3\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${WOLFSSL_DIR}/lib\"\nENV PATH=\"${WOLFSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\n#  Install required packages, development tools and libs\n# RUN apk update && \\   # no update neded and not wanted\nRUN apk add --no-cache wget ncurses linux-headers gcc make musl-dev zlib-dev m4 perl autoconf automake libtool file \\\n && apk add --no-cache lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $WOLFSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_WOLFSSL -O $OSAFT_VM_TAR_WOLFSSL \\\n && tar -xzf $OSAFT_VM_TAR_WOLFSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && LDFLAGS=\"-Wl,-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./autogen.sh \\\n && ./configure --prefix=$WOLFSSL_DIR $OSAFT_VM_DYN_WOLFSSL --disable-option-checking --enable-rng --with-libz --enable-sslv3 --enable-dtls --enable-tlsv10 --enable-tlsv12 --enable-tls13 --enable-oldtls --enable-tls13-draft18 --enable-tls13-draft22 --enable-tls13-draft23 --enable-tls13-draft26 --enable-tls13-draft28 --enable-aescbc --enable-aesccm --enable-aesgcm --enable-aesctr --enable-aescfb --enable-aesni --enable-md2 --enable-md4 --enable-md5 --enable-sha2 --enable-sha3 --enable-sha224 --enable-sha512 --enable-cmac --enable-dsa --enable-des3 --enable-dh --enable-ecccustcurves --enable-ecc --enable-eccshamir --enable-eccencrypt --enable-ed25519 --enable-curve25519 --enable-supportedcurves --enable-fpecc --enable-compkey --enable-hkdf --enable-arc4 --enable-psk --enable-sep --enable-blake2 --enable-ripemd --enable-camellia --enable-x963kdf --enable-rabbit --enable-hc128 --enable-anon --enable-nullcipher --enable-idea --enable-chacha --enable-poly1305 --enable-alpn --enable-sni --enable-crl --enable-truncatedhmac --enable-mcast --enable-sctp --enable-srp --enable-rsa --enable-rsapss --enable-xts --enable-coding --enable-base16 --enable-base64encode --enable-oldnames --enable-errorstrings --enable-enckeys --enable-ocsp --enable-ocspstapling --enable-ocspstapling2 --enable-tlsx --enable-session-ticket --enable-extended-master --enable-secure-renegotiation --enable-opensslall --enable-opensslextra --enable-lighty --enable-webclient --enable-earlydata \\\n && echo \"# configure done.\" || cat ./config.log \\\n && make \\\n && make -i test \\\n && make install \\\n && cp examples/echoclient/.libs/echoclient $WOLFSSL_DIR/bin/ ; cp examples/echoserver/.libs/echoserver $WOLFSSL_DIR/bin/ ; cp examples/client/.libs/client $WOLFSSL_DIR/bin/ ; cp examples/server/.libs/server $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-client-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-server-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/sctp-client $WOLFSSL_DIR/bin/ ; mv certs/ $WOLFSSL_DIR/bin/ ; ln -s $WOLFSSL_DIR/bin/certs /certs ; echo -n \"# number of ciphers $WOLFSSL_DIR/bin/client: \" \\\n && $WOLFSSL_DIR/bin/client -e | tr ':' '\\012' | wc -l \\\n && $WOLFSSL_DIR/bin/client -e \\\n && apk del --purge lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && echo rm -rf $BUILD_DIR $OSAFT_VM_TAR_WOLFSSL \\\n && apk del --purge gcc make m4 autoconf automake musl-dev linux-headers perl-dev readline bash libltdl libtool file \\\n && [ -n \"$OSAFT_VM_HOSTNAME\" ] \\\n && echo \"$OSAFT_VM_HOSTNAME\" > /etc/hostname\nWORKDIR $WOLFSSL_DIR\n# ## USER    wolfssl\n# ## RUN     ??\nENTRYPOINT [\"/wolfssl/bin\"]\nEXPOSE 443/tcp\n#  vim:set ft=dockerfile:\n","injectedSmells":[],"originalDockerfileHash":"626fd0592cb845ea5050042d85b48498","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  !/usr/bin/docker build --force-rm --rm -f\n#  ? USAGE\n#  ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n#  ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n#  ?\n#  ?          OSAFT_VERSION\n#  ?              Version of this build (should be used as image tag also).\n#  ?\n#  ?          OSAFT_VM_FROM\n#  ?              Base image to be used for this build. Tested images are:\n#  ?                  (2018) alpine:3.8\n#  ?\n#  ?          OSAFT_VM_SRC_WOLFSSL\n#  ?              URL to fetch wolfssl.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_WOLFSSL\n#  ?              SHA256 checksum for the wolfssl archive.\n#  ?\n#  ?          OSAFT_VM_TAR_WOLFSSL\n#  ?              Name of archive file (during build).\n#  ?\n#  ?          OSAFT_VM_DYN_WOLFSSL\n#  ?              Build (link) mode of wolfssl executable: --enable-static or --enable-shared\n#  ?\n#  ?          OSAFT_VM_HOSTNAME\n#  ?              Hostname to be used for running container (/etc/hostname)\n#  ?\n#  ? ENVIRONMENT VARIABLES\n#  ?      The build image sets environment variables. They are mainly used for\n#  ?      documentation or by other programs to check for the right build.\n#  ?\n#  ?      Following environment variables are set inside the docker image:\n#  ?\n#  ?          osaft_vm_build\n#  ?              Build version of this image.\n#  ?          WOLFSSL_DIR\n#  ?              Directory where wolfSSL is installed.\n#  ?          WOLFSSL_VERSION\n#  ?              Version of installed OpenSSL\n#  ?          TERM\n#  ?              Prefered X-Terminal program.\n#  ?          LD_RUN_PATH\n#  ?              Additional paths for runtime loader, used while linking with\n#  ?              \"ld -rpath=...\"\n#  ?              Linking of wolfssl, libssl.so and SSLeay.so will use  -rpath\n#  ?              in LDFLAGS to ensure that the special library will be used.\n#  ?              Default:${WOLFSSL_DIR}/lib\n#  ?          PATH\n#  ?              PATH for shell, set to:\n#  ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$WOLFSSL_DIR/bin:$PATH\n#  ?          WORK_DIR\n#  ?              Directory where to build the packages (used for Dockerfile's\n#  ?              WORKDIR  dierective.\n#  ?\n#  ? EXAMPLES\n#  ?      Simple build with defaults:  alpine:3.8, wolfssl\n#  ?          docker build --force-rm --rm \\ \n#  ?                  -f Dockerfile.wolfssl -t o-saft/wolfssl .\n#  ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#   Parameters passed to build\n#   OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_WOLFSSL=\"https://github.com/wolfSSL/wolfssl/archive/v3.15.3-stable.tar.gz\"\n#   -----BEGIN PGP SIGNATURE-----\nARG OSAFT_VM_SHA_WOLFSSL=\"iQEcBAABCgAGBQJbLXUHAAoJEOvIDkFcopZ3NYMIAJMSsKQQxTHdiO4tjhofhgu2uH8QmY4XjyDqVEzID1GTmjS092bh/wNfQLRW5nMNMdS965XzA8gmSqo1bWIfFBG+eKZLc4xu+oIEDKfF7r5gkmPQNRVsHmOQK6BeOG0BnXBSdE9E0CIIlk81pZC7HSo7U6/I1hVlXyL9Y8ctfL2doDzil1jAvc0tQo/HNU4UikHtcbH2tsYSzjA1wXnjqeXQWYy0TcJ0MbJrnpqX0li6JWc/6FSqM1hgCzrf/7kScdsu2zxMKxuxUvCCRJ1meYKtVf2K6SlLFg5iqxqe+JRTvIiq2EDalsqClW9I1rbkphvYspZ9WI0Jf4YJUp4xPVk==AlNB\"\n#   -----END PGP SIGNATURE-----\nARG OSAFT_VM_TAR_WOLFSSL=\"wolfssl.tgz\"\nARG OSAFT_VM_DYN_WOLFSSL=\"--enable-static\"\n#                               --enable-static  not yet (2017) working 'cause of\nARG OSAFT_VM_HOSTNAME\nARG OSAFT_VERSION=\"18.10.12\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build docker image with wolfssl\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile.wolfssl -t o-saft/wolfssl:$OSAFT_VERSION -t o-saft/wolfssl .\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/contrib/Dockerfile.wolfssl\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_WOLFSSL\" \\\n      SID=\"@(#) Dockerfile.wolfssl 1.1 18/10/15 23:38:12\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV WOLFSSL_DIR=\"/wolfssl\"\nENV WOLFSSL_VERSION=\"v3.15.3\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${WOLFSSL_DIR}/lib\"\nENV PATH=\"${WOLFSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\n#   Install required packages, development tools and libs\n#  RUN apk update && \\   # no update neded and not wanted\nRUN apk add --no-cache wget ncurses linux-headers gcc make musl-dev zlib-dev m4 perl autoconf automake libtool file \\\n && apk add --no-cache lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $WOLFSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_WOLFSSL -O $OSAFT_VM_TAR_WOLFSSL \\\n && tar -xzf $OSAFT_VM_TAR_WOLFSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && LDFLAGS=\"-Wl,-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./autogen.sh \\\n && ./configure --prefix=$WOLFSSL_DIR $OSAFT_VM_DYN_WOLFSSL --disable-option-checking --enable-rng --with-libz --enable-sslv3 --enable-dtls --enable-tlsv10 --enable-tlsv12 --enable-tls13 --enable-oldtls --enable-tls13-draft18 --enable-tls13-draft22 --enable-tls13-draft23 --enable-tls13-draft26 --enable-tls13-draft28 --enable-aescbc --enable-aesccm --enable-aesgcm --enable-aesctr --enable-aescfb --enable-aesni --enable-md2 --enable-md4 --enable-md5 --enable-sha2 --enable-sha3 --enable-sha224 --enable-sha512 --enable-cmac --enable-dsa --enable-des3 --enable-dh --enable-ecccustcurves --enable-ecc --enable-eccshamir --enable-eccencrypt --enable-ed25519 --enable-curve25519 --enable-supportedcurves --enable-fpecc --enable-compkey --enable-hkdf --enable-arc4 --enable-psk --enable-sep --enable-blake2 --enable-ripemd --enable-camellia --enable-x963kdf --enable-rabbit --enable-hc128 --enable-anon --enable-nullcipher --enable-idea --enable-chacha --enable-poly1305 --enable-alpn --enable-sni --enable-crl --enable-truncatedhmac --enable-mcast --enable-sctp --enable-srp --enable-rsa --enable-rsapss --enable-xts --enable-coding --enable-base16 --enable-base64encode --enable-oldnames --enable-errorstrings --enable-enckeys --enable-ocsp --enable-ocspstapling --enable-ocspstapling2 --enable-tlsx --enable-session-ticket --enable-extended-master --enable-secure-renegotiation --enable-opensslall --enable-opensslextra --enable-lighty --enable-webclient --enable-earlydata \\\n && echo \"# configure done.\" || cat ./config.log \\\n && make \\\n && make -i test \\\n && make install \\\n && cp examples/echoclient/.libs/echoclient $WOLFSSL_DIR/bin/ ; cp examples/echoserver/.libs/echoserver $WOLFSSL_DIR/bin/ ; cp examples/client/.libs/client $WOLFSSL_DIR/bin/ ; cp examples/server/.libs/server $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-client-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/.libs/sctp-server-dtls $WOLFSSL_DIR/bin/ ; cp examples/sctp/sctp-client $WOLFSSL_DIR/bin/ ; mv certs/ $WOLFSSL_DIR/bin/ ; ln -s $WOLFSSL_DIR/bin/certs /certs ; echo -n \"# number of ciphers $WOLFSSL_DIR/bin/client: \" \\\n && $WOLFSSL_DIR/bin/client -e | tr ':' '\\012' | wc -l \\\n && $WOLFSSL_DIR/bin/client -e \\\n && apk del --purge lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && echo rm -rf $BUILD_DIR $OSAFT_VM_TAR_WOLFSSL \\\n && apk del --purge gcc make m4 autoconf automake musl-dev linux-headers perl-dev readline bash libltdl libtool file \\\n && [ -n \"$OSAFT_VM_HOSTNAME\" ] \\\n && echo \"$OSAFT_VM_HOSTNAME\" > /etc/hostname\nWORKDIR $WOLFSSL_DIR\n#  ## USER    wolfssl\n#  ## RUN     ??\nENTRYPOINT [\"/wolfssl/bin\"]\nEXPOSE 443/tcp\n#   vim:set ft=dockerfile:\n","originalDockerfileUglifiedHash":"ad6aba641ff70d1696ba4856f51c0a1f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/900d2526f34d390105b02fea14d273b93f69e39c.dockerfile"}