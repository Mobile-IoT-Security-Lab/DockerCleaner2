{"seed":1268782164,"processedDockerfileHash":"0aa2b3ab38bc16634d7c8abae5c2b76b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jan Deriu <deri@zahw.ch>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.8.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python3-dev python3-pip software-properties-common unzip vim wget zlib1g-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Add SNI support to Python\nRUN pip3 --no-cache-dir install pyopenssl ndg-httpsclient pyasn1\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-numpy python3-scipy python3-nose python3-h5py python3-skimage python3-matplotlib python3-pandas python3-sklearn python3-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip3 --no-cache-dir install --upgrade ipython \\\n && pip3 --no-cache-dir install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq \\\n && python3 -m ipykernel.kernelspec\nRUN pip3 --no-cache-dir install --upgrade nltk\nRUN pip3 --no-cache-dir install --upgrade tqdm\nRUN pip3 --no-cache-dir install --upgrade gensim\n#   Install TensorFlow\nRUN pip3 install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl\n#   Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip3 --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nRUN /bin/sh -c python3 -m nltk.downloader punkt\nRUN /bin/sh -c python3 -m nltk.downloader stopwords\n#   Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\nRUN mkdir /DLFramework\nCOPY architectures /DLFramework/architectures\nCOPY custom_keras_layers /DLFramework/custom_keras_layers\nCOPY data_loader /DLFramework/data_loader\nCOPY scripts /DLFramework/scripts\nCOPY utils /DLFramework/utils\nCOPY evaluation /DLFramework/evaluation\nCOPY create_word_embeddings.py /DLFramework\nCOPY distant_phase_nnet.py /DLFramework\nCOPY embeddings.py /DLFramework\nCOPY embeddings_container.py /DLFramework\nCOPY evaluation_metrics /DLFramework/evaluation_metrics\nWORKDIR /DLFramework\nCMD python3 -m tensorflow.tensorboard --logdir=logging/distant_it\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jan Deriu <deri@zahw.ch>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.8.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n# RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n# \tcat /proc/driver/nvidia/version && \\\n# \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n# \tnvcc -V && \\\n# \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python3-dev python3-pip software-properties-common unzip vim wget zlib1g-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#  Add SNI support to Python\nRUN pip3 --no-cache-dir install pyopenssl ndg-httpsclient pyasn1\n#  Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#  especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python3-numpy python3-scipy python3-nose python3-h5py python3-skimage python3-matplotlib python3-pandas python3-sklearn python3-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install other useful Python packages using pip\nRUN pip3 --no-cache-dir install --upgrade ipython \\\n && pip3 --no-cache-dir install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq \\\n && python3 -m ipykernel.kernelspec\nRUN pip3 --no-cache-dir install --upgrade nltk\nRUN pip3 --no-cache-dir install --upgrade tqdm\nRUN pip3 --no-cache-dir install --upgrade gensim\n#  Install TensorFlow\nRUN pip3 install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl\n#  Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n#  Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\n#  Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip3 --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nRUN /bin/sh -c python3 -m nltk.downloader punkt\nRUN /bin/sh -c python3 -m nltk.downloader stopwords\n#  Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\nRUN mkdir /DLFramework\nCOPY architectures /DLFramework/architectures\nCOPY custom_keras_layers /DLFramework/custom_keras_layers\nCOPY data_loader /DLFramework/data_loader\nCOPY scripts /DLFramework/scripts\nCOPY utils /DLFramework/utils\nCOPY evaluation /DLFramework/evaluation\nCOPY create_word_embeddings.py /DLFramework\nCOPY distant_phase_nnet.py /DLFramework\nCOPY embeddings.py /DLFramework\nCOPY embeddings_container.py /DLFramework\nCOPY evaluation_metrics /DLFramework/evaluation_metrics\nWORKDIR /DLFramework\nCMD python3 -m tensorflow.tensorboard --logdir=logging/distant_it\n","injectedSmells":[],"originalDockerfileHash":"9be5a7e612900057d0882ec84ba01454","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel\nMAINTAINER Jan Deriu <deri@zahw.ch>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.8.0\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.2\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python3-dev python3-pip software-properties-common unzip vim wget zlib1g-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\n#   Add SNI support to Python\nRUN pip3 --no-cache-dir install pyopenssl ndg-httpsclient pyasn1\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python3-numpy python3-scipy python3-nose python3-h5py python3-skimage python3-matplotlib python3-pandas python3-sklearn python3-sympy -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip3 --no-cache-dir install --upgrade ipython \\\n && pip3 --no-cache-dir install Cython ipykernel jupyter path.py Pillow pygments six sphinx wheel zmq \\\n && python3 -m ipykernel.kernelspec\nRUN pip3 --no-cache-dir install --upgrade nltk\nRUN pip3 --no-cache-dir install --upgrade tqdm\nRUN pip3 --no-cache-dir install --upgrade gensim\n#   Install TensorFlow\nRUN pip3 install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl\n#   Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip3 --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\nRUN /bin/sh -c python3 -m nltk.downloader punkt\nRUN /bin/sh -c python3 -m nltk.downloader stopwords\n#   Install Keras\nRUN pip3 --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}\nRUN mkdir /DLFramework\nCOPY architectures /DLFramework/architectures\nCOPY custom_keras_layers /DLFramework/custom_keras_layers\nCOPY data_loader /DLFramework/data_loader\nCOPY scripts /DLFramework/scripts\nCOPY utils /DLFramework/utils\nCOPY evaluation /DLFramework/evaluation\nCOPY create_word_embeddings.py /DLFramework\nCOPY distant_phase_nnet.py /DLFramework\nCOPY embeddings.py /DLFramework\nCOPY embeddings_container.py /DLFramework\nCOPY evaluation_metrics /DLFramework/evaluation_metrics\nWORKDIR /DLFramework\nCMD python3 -m tensorflow.tensorboard --logdir=logging/distant_it\n","originalDockerfileUglifiedHash":"798f0a049070c6d10d91d3b6cbf5f691","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/53454542cc916b00fb6b8b0f3bf4722576b8b640.dockerfile"}