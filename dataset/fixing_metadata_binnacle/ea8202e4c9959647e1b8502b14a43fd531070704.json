{"seed":3435334111,"processedDockerfileHash":"513cff0b22fd7e9528468a6300cc1751","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG NGINX_LABEL=latest\nFROM nginx:${NGINX_LABEL}\nARG OPENTRACING_CPP_VERSION=v1.5.1\nARG ZIPKIN_CPP_VERSION=v0.5.2\nARG LIGHTSTEP_VERSION=v0.8.1\nARG JAEGER_CPP_VERSION=v0.4.2\nARG GRPC_VERSION=v1.10.x\nARG DATADOG_VERSION=v0.3.0\nCOPY . /src\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends libcurl4-openssl-dev libprotobuf-dev protobuf-compiler --no-install-suggests -y \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && apt-get install --no-install-recommends build-essential cmake git ca-certificates pkg-config wget golang libz-dev automake autogen autoconf libtool --no-install-suggests -y \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && cd \"$tempDir\" \\\n && git clone -b $OPENTRACING_CPP_VERSION https://github.com/opentracing/opentracing-cpp.git \\\n && cd opentracing-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && apt-get install --no-install-recommends libcurl4-gnutls-dev --no-install-suggests -y \\\n && git clone -b $ZIPKIN_CPP_VERSION https://github.com/rnburn/zipkin-cpp-opentracing.git \\\n && cd zipkin-cpp-opentracing \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libzipkin_opentracing.so /usr/local/lib/libzipkin_opentracing_plugin.so \\\n && git clone -b $JAEGER_CPP_VERSION https://github.com/jaegertracing/cpp-client.git jaeger-cpp-client \\\n && cd jaeger-cpp-client \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DJAEGERTRACING_WITH_YAML_CPP=ON .. \\\n && make \\\n && make install \\\n && export HUNTER_INSTALL_DIR=$( cat _3rdParty/Hunter/install-root-dir ;) \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libjaegertracing.so /usr/local/lib/libjaegertracing_plugin.so \\\n && git clone -b $DATADOG_VERSION https://github.com/DataDog/dd-opentracing-cpp.git \\\n && cd dd-opentracing-cpp \\\n && scripts/install_dependencies.sh not-opentracing not-curl not-zlib \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libdd_opentracing.so /usr/local/lib/libdd_opentracing_plugin.so \\\n && git clone -b $GRPC_VERSION https://github.com/grpc/grpc \\\n && cd grpc \\\n && git submodule update --init \\\n && make HAS_SYSTEM_PROTOBUF=false \\\n && make install \\\n && make \\\n && make install \\\n && cd third_party/protobuf \\\n && make install \\\n && cd \"$tempDir\" \\\n && git clone -b $LIGHTSTEP_VERSION https://github.com/lightstep/lightstep-tracer-cpp.git \\\n && cd lightstep-tracer-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/liblightstep_tracer.so /usr/local/lib/liblightstep_tracer_plugin.so \\\n && NGINX_VERSION=`nginx -v 2>&1` \\\n && NGINX_VERSION=${NGINX_VERSION#*nginx/} \\\n && echo \"deb-src http://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get build-dep -y nginx=${NGINX_VERSION} \\\n && wget -O nginx-release-${NGINX_VERSION}.tar.gz https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-release-${NGINX_VERSION}.tar.gz \\\n && cd nginx-release-${NGINX_VERSION} \\\n && NGINX_MODULES_PATH=$( nginx -V 2>&1 | grep -oP \"modules-path=\\K[^\\s]*\" ;) \\\n && auto/configure --with-compat --add-dynamic-module=/src/opentracing --with-cc-opt=\"-I$HUNTER_INSTALL_DIR/include\" --with-ld-opt=\"-L$HUNTER_INSTALL_DIR/lib\" --with-debug \\\n && make modules \\\n && cp objs/ngx_http_opentracing_module.so $NGINX_MODULES_PATH/ \\\n && rm -rf /src \\\n && rm -rf $HOME/.hunter \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"ARG NGINX_LABEL=latest\nFROM nginx:${NGINX_LABEL}\nARG OPENTRACING_CPP_VERSION=v1.5.1\nARG ZIPKIN_CPP_VERSION=v0.5.2\nARG LIGHTSTEP_VERSION=v0.8.1\nARG JAEGER_CPP_VERSION=v0.4.2\nARG GRPC_VERSION=v1.10.x\nARG DATADOG_VERSION=v0.3.0\nCOPY . /src\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends libcurl4-openssl-dev libprotobuf-dev protobuf-compiler --no-install-suggests -y \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && apt-get install --no-install-recommends build-essential cmake git ca-certificates pkg-config wget golang libz-dev automake autogen autoconf libtool --no-install-suggests -y \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && cd \"$tempDir\" \\\n && git clone -b $OPENTRACING_CPP_VERSION https://github.com/opentracing/opentracing-cpp.git \\\n && cd opentracing-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && apt-get install --no-install-recommends libcurl4-gnutls-dev --no-install-suggests -y \\\n && git clone -b $ZIPKIN_CPP_VERSION https://github.com/rnburn/zipkin-cpp-opentracing.git \\\n && cd zipkin-cpp-opentracing \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libzipkin_opentracing.so /usr/local/lib/libzipkin_opentracing_plugin.so \\\n && git clone -b $JAEGER_CPP_VERSION https://github.com/jaegertracing/cpp-client.git jaeger-cpp-client \\\n && cd jaeger-cpp-client \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DJAEGERTRACING_WITH_YAML_CPP=ON .. \\\n && make \\\n && make install \\\n && export HUNTER_INSTALL_DIR=$( cat _3rdParty/Hunter/install-root-dir ;) \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libjaegertracing.so /usr/local/lib/libjaegertracing_plugin.so \\\n && git clone -b $DATADOG_VERSION https://github.com/DataDog/dd-opentracing-cpp.git \\\n && cd dd-opentracing-cpp \\\n && scripts/install_dependencies.sh not-opentracing not-curl not-zlib \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libdd_opentracing.so /usr/local/lib/libdd_opentracing_plugin.so \\\n && git clone -b $GRPC_VERSION https://github.com/grpc/grpc \\\n && cd grpc \\\n && git submodule update --init \\\n && make HAS_SYSTEM_PROTOBUF=false \\\n && make install \\\n && make \\\n && make install \\\n && cd third_party/protobuf \\\n && make install \\\n && cd \"$tempDir\" \\\n && git clone -b $LIGHTSTEP_VERSION https://github.com/lightstep/lightstep-tracer-cpp.git \\\n && cd lightstep-tracer-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/liblightstep_tracer.so /usr/local/lib/liblightstep_tracer_plugin.so \\\n && NGINX_VERSION=`nginx -v 2>&1` \\\n && NGINX_VERSION=${NGINX_VERSION#*nginx/} \\\n && echo \"deb-src http://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get build-dep -y nginx=${NGINX_VERSION} \\\n && wget -O nginx-release-${NGINX_VERSION}.tar.gz https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-release-${NGINX_VERSION}.tar.gz \\\n && cd nginx-release-${NGINX_VERSION} \\\n && NGINX_MODULES_PATH=$( nginx -V 2>&1 | grep -oP \"modules-path=\\K[^\\s]*\" ;) \\\n && auto/configure --with-compat --add-dynamic-module=/src/opentracing --with-cc-opt=\"-I$HUNTER_INSTALL_DIR/include\" --with-ld-opt=\"-L$HUNTER_INSTALL_DIR/lib\" --with-debug \\\n && make modules \\\n && cp objs/ngx_http_opentracing_module.so $NGINX_MODULES_PATH/ \\\n && rm -rf /src \\\n && rm -rf $HOME/.hunter \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#  forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"9493ff75cd4c9f12112b1b76ccc309df","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG NGINX_LABEL=latest\nFROM nginx:${NGINX_LABEL}\nARG OPENTRACING_CPP_VERSION=v1.5.1\nARG ZIPKIN_CPP_VERSION=v0.5.2\nARG LIGHTSTEP_VERSION=v0.8.1\nARG JAEGER_CPP_VERSION=v0.4.2\nARG GRPC_VERSION=v1.10.x\nARG DATADOG_VERSION=v0.3.0\nCOPY . /src\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends libcurl4-openssl-dev libprotobuf-dev protobuf-compiler --no-install-suggests -y \\\n && savedAptMark=\"$( apt-mark showmanual ;)\" \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chmod 777 \"$tempDir\" \\\n && apt-get install --no-install-recommends build-essential cmake git ca-certificates pkg-config wget golang libz-dev automake autogen autoconf libtool --no-install-suggests -y \\\n && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; } \\\n && cd \"$tempDir\" \\\n && git clone -b $OPENTRACING_CPP_VERSION https://github.com/opentracing/opentracing-cpp.git \\\n && cd opentracing-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && apt-get install --no-install-recommends libcurl4-gnutls-dev --no-install-suggests -y \\\n && git clone -b $ZIPKIN_CPP_VERSION https://github.com/rnburn/zipkin-cpp-opentracing.git \\\n && cd zipkin-cpp-opentracing \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libzipkin_opentracing.so /usr/local/lib/libzipkin_opentracing_plugin.so \\\n && git clone -b $JAEGER_CPP_VERSION https://github.com/jaegertracing/cpp-client.git jaeger-cpp-client \\\n && cd jaeger-cpp-client \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DJAEGERTRACING_WITH_YAML_CPP=ON .. \\\n && make \\\n && make install \\\n && export HUNTER_INSTALL_DIR=$( cat _3rdParty/Hunter/install-root-dir ;) \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libjaegertracing.so /usr/local/lib/libjaegertracing_plugin.so \\\n && git clone -b $DATADOG_VERSION https://github.com/DataDog/dd-opentracing-cpp.git \\\n && cd dd-opentracing-cpp \\\n && scripts/install_dependencies.sh not-opentracing not-curl not-zlib \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/libdd_opentracing.so /usr/local/lib/libdd_opentracing_plugin.so \\\n && git clone -b $GRPC_VERSION https://github.com/grpc/grpc \\\n && cd grpc \\\n && git submodule update --init \\\n && make HAS_SYSTEM_PROTOBUF=false \\\n && make install \\\n && make \\\n && make install \\\n && cd third_party/protobuf \\\n && make install \\\n && cd \"$tempDir\" \\\n && git clone -b $LIGHTSTEP_VERSION https://github.com/lightstep/lightstep-tracer-cpp.git \\\n && cd lightstep-tracer-cpp \\\n && mkdir .build \\\n && cd .build \\\n && cmake -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF .. \\\n && make \\\n && make install \\\n && cd \"$tempDir\" \\\n && ln -s /usr/local/lib/liblightstep_tracer.so /usr/local/lib/liblightstep_tracer_plugin.so \\\n && NGINX_VERSION=`nginx -v 2>&1` \\\n && NGINX_VERSION=${NGINX_VERSION#*nginx/} \\\n && echo \"deb-src http://nginx.org/packages/mainline/debian/ stretch nginx\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get build-dep -y nginx=${NGINX_VERSION} \\\n && wget -O nginx-release-${NGINX_VERSION}.tar.gz https://github.com/nginx/nginx/archive/release-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-release-${NGINX_VERSION}.tar.gz \\\n && cd nginx-release-${NGINX_VERSION} \\\n && NGINX_MODULES_PATH=$( nginx -V 2>&1 | grep -oP \"modules-path=\\K[^\\s]*\" ;) \\\n && auto/configure --with-compat --add-dynamic-module=/src/opentracing --with-cc-opt=\"-I$HUNTER_INSTALL_DIR/include\" --with-ld-opt=\"-L$HUNTER_INSTALL_DIR/lib\" --with-debug \\\n && make modules \\\n && cp objs/ngx_http_opentracing_module.so $NGINX_MODULES_PATH/ \\\n && rm -rf /src \\\n && rm -rf $HOME/.hunter \\\n && if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove \\\n && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nEXPOSE 80/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"5fb7609e7ea83e0e3e1699be14b1d7fb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ea8202e4c9959647e1b8502b14a43fd531070704.dockerfile"}