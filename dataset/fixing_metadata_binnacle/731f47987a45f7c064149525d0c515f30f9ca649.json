{"seed":2094486417,"processedDockerfileHash":"50458ad31e9972e80c220c3b956c1d22","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG PG_VERSION\n#  ###########################\n#   Build tools binaries in separate image\n#  ###########################\nARG GO_VERSION=1.12.6\nFROM golang:${GO_VERSION}-alpine AS tools\nENV TOOLS_VERSION=\"0.6.0\"\nRUN apk update \\\n && apk add git --no-cache \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n#  ###########################\n#   Build old versions in a separate stage\n#  ###########################\nARG PG_VERSION\nFROM postgres:${PG_VERSION}-alpine AS oldversions\nARG PG_VERSION\nARG OSS_ONLY\nRUN set -ex \\\n && apk add ca-certificates git openssl openssl-dev tar --no-cache --virtual .fetch-deps \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev --no-cache --virtual .build-deps \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\"${OSS_ONLY} \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n#  ####\n#   Add the latest previous version to the end of the list for each new build\n#  ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.2 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.1 /build/timescaledb/build_old.sh\n#   Cleanup\nRUN rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=6\nFROM postgres:${PG_VERSION}-alpine\nARG OSS_ONLY\nMAINTAINER Timescale https://www.timescale.com\n#   Update list above to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.3.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /usr/local/lib/postgresql/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /usr/local/share/postgresql/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nRUN set -ex \\\n && apk add ca-certificates git openssl openssl-dev tar --no-cache --virtual .fetch-deps \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev --no-cache --virtual .build-deps \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\"${OSS_ONLY} \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apk del .fetch-deps .build-deps \\\n && rm -rf /build \\\n && sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'timescaledb,\\2'/;s/,'/'/\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG PG_VERSION\n# ###########################\n#  Build tools binaries in separate image\n# ###########################\nARG GO_VERSION=1.12.6\nFROM golang:${GO_VERSION}-alpine AS tools\nENV TOOLS_VERSION=\"0.6.0\"\nRUN apk update \\\n && apk add --no-cache git \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n# ###########################\n#  Build old versions in a separate stage\n# ###########################\nARG PG_VERSION\nFROM postgres:${PG_VERSION}-alpine AS oldversions\nARG PG_VERSION\nARG OSS_ONLY\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates git openssl openssl-dev tar \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\"${OSS_ONLY} \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n# ####\n#  Add the latest previous version to the end of the list for each new build\n# ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.2 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.1 /build/timescaledb/build_old.sh\n#  Cleanup\nRUN rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=6\nFROM postgres:${PG_VERSION}-alpine\nARG OSS_ONLY\nMAINTAINER Timescale https://www.timescale.com\n#  Update list above to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.3.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /usr/local/lib/postgresql/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /usr/local/share/postgresql/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates git openssl openssl-dev tar \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\"${OSS_ONLY} \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apk del .fetch-deps .build-deps \\\n && rm -rf /build \\\n && sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'timescaledb,\\2'/;s/,'/'/\" /usr/local/share/postgresql/postgresql.conf.sample\n","injectedSmells":[],"originalDockerfileHash":"69f649dba994e66926722cc77cd75391","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG PG_VERSION\n#  ###########################\n#   Build tools binaries in separate image\n#  ###########################\nARG GO_VERSION=1.12.6\nFROM golang:${GO_VERSION}-alpine AS tools\nENV TOOLS_VERSION=\"0.6.0\"\nRUN apk update \\\n && apk add --no-cache git \\\n && mkdir -p ${GOPATH}/src/github.com/timescale/ \\\n && cd ${GOPATH}/src/github.com/timescale/ \\\n && git clone https://github.com/timescale/timescaledb-tune.git \\\n && git clone https://github.com/timescale/timescaledb-parallel-copy.git \\\n && cd timescaledb-tune/cmd/timescaledb-tune \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-tune \\\n && cd ${GOPATH}/src/github.com/timescale/timescaledb-parallel-copy/cmd/timescaledb-parallel-copy \\\n && git fetch \\\n && git checkout --quiet $( git describe --abbrev=0 ;) \\\n && go get -d -v \\\n && go build -o /go/bin/timescaledb-parallel-copy\n#  ###########################\n#   Build old versions in a separate stage\n#  ###########################\nARG PG_VERSION\nFROM postgres:${PG_VERSION}-alpine AS oldversions\nARG PG_VERSION\nARG OSS_ONLY\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates git openssl openssl-dev tar \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev \\\n && cd /build/timescaledb \\\n && echo \"if [ \\\"$( echo ${PG_VERSION} | cut -c1-2 ;)\\\" != \\\"11\\\" ] || [ \"${OLD_VERSION}\" \\> \"1.0.1\" ]; then cd /build/timescaledb \\\n && rm -fr build \\\n && git reset HEAD --hard \\\n && git fetch \\\n && git checkout ${OLD_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\\\"docker\\\"${OSS_ONLY} \\\n && cd build \\\n && make install; fi\" > ./build_old.sh \\\n && chmod +x ./build_old.sh\n#  ####\n#   Add the latest previous version to the end of the list for each new build\n#  ####\nRUN OLD_VERSION=1.0.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.0.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.1.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.1 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.2.2 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.0 /build/timescaledb/build_old.sh\nRUN OLD_VERSION=1.3.1 /build/timescaledb/build_old.sh\n#   Cleanup\nRUN rm -f $( pg_config --sharedir ;)/extension/timescaledb--*--*.sql \\\n && rm -f $( pg_config --sharedir ;)/extension/timescaledb*mock*.sql \\\n && KEEP_NUM_VERSIONS=6\nFROM postgres:${PG_VERSION}-alpine\nARG OSS_ONLY\nMAINTAINER Timescale https://www.timescale.com\n#   Update list above to include previous versions when changing this\nENV TIMESCALEDB_VERSION=\"1.3.2\"\nCOPY docker-entrypoint-initdb.d/* /docker-entrypoint-initdb.d/\nCOPY --from=tools /go/bin/* /usr/local/bin/\nCOPY --from=oldversions /usr/local/lib/postgresql/timescaledb-*.so /usr/local/lib/postgresql/\nCOPY --from=oldversions /usr/local/share/postgresql/extension/timescaledb--*.sql /usr/local/share/postgresql/extension/\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates git openssl openssl-dev tar \\\n && mkdir -p /build/ \\\n && git clone https://github.com/timescale/timescaledb /build/timescaledb \\\n && apk add --no-cache --virtual .build-deps coreutils dpkg-dev dpkg gcc libc-dev make cmake util-linux-dev \\\n && cd /build/timescaledb \\\n && rm -fr build \\\n && git checkout ${TIMESCALEDB_VERSION} \\\n && ./bootstrap -DPROJECT_INSTALL_METHOD=\"docker\"${OSS_ONLY} \\\n && cd build \\\n && make install \\\n && cd ~ \\\n && apk del .fetch-deps .build-deps \\\n && rm -rf /build \\\n && sed -r -i \"s/[#]*\\s*(shared_preload_libraries)\\s*=\\s*'(.*)'/\\1 = 'timescaledb,\\2'/;s/,'/'/\" /usr/local/share/postgresql/postgresql.conf.sample\n","originalDockerfileUglifiedHash":"501c3af0392e22cfa72d7fb78733bac5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/731f47987a45f7c064149525d0c515f30f9ca649.dockerfile"}