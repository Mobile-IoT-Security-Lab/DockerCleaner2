{"seed":375182383,"processedDockerfileHash":"35ffe30185fe21bfe61c880800390702","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"#   Copyright (c) 2012-2016 Codenvy, S.A.\n#   All rights reserved. This program and the accompanying materials\n#   are made available under the terms of the Eclipse Public License v1.0\n#   which accompanies this distribution, and is available at\n#   http://www.eclipse.org/legal/epl-v10.html\n#   Contributors:\n#   Codenvy, S.A. - initial API and implementation\nFROM docker:1.12.0\n#   Here we use several hacks collected from https://github.com/gliderlabs/docker-alpine/issues/11:\n#   1. install GLibc (which is not the cleanest solution at all)\n#   2. hotfix /etc/nsswitch.conf, which is apperently required by glibc and is not used in Alpine Linux\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"92\" \\\n    JAVA_VERSION_BUILD=\"14\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    MAVEN_VERSION=\"3.3.9\" \\\n    LANG=\"C.UTF-8\"\n#   do all in one step\nRUN apk upgrade --update \\\n && apk add libstdc++=12.2.1_git20220924-r4 curl=7.88.1-r1 ca-certificates=20220614-r4 bash=5.2.15-r0 openssh=9.1_p1-r2 sudo=1.9.12_p2-r1 unzip=6.0-r13 openssl=3.0.8-r3 --update \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add /tmp/*.apk --allow-untrusted \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" >&2 \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=30/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/keytool /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && cd /tmp \\\n && wget -q \"http://apache.ip-connect.vn.ua/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && tar -xzf \"apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && mv \"/tmp/apache-maven-$MAVEN_VERSION\" \"/usr/lib\" \\\n && rm \"/tmp/\"* \\\n && adduser -S user -h /home/user -s /bin/bash -G root -u 1000 \\\n && echo \"%root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && PASS=$( openssl rand -base64 32 ;) \\\n && echo -e \"${PASS}\\n${PASS}\" | passwd user \\\n && chown -R user /home/user/\nRUN mkdir /usr/che \\\n && wget -qO /usr/che/che https://raw.githubusercontent.com/eclipse/che/master/che.sh \\\n && chmod +x /usr/che/che\nENV DOCKER_HOST=\"tcp://192.168.65.1\" \\\n    M2_HOME=\"/usr/lib/apache-maven-$MAVEN_VERSION\"\nENV PATH=\"${PATH}:${JAVA_HOME}/bin:${M2_HOME}/bin:/usr/che\"\nEXPOSE 22/tcp 8000/tcp 8080/tcp\nUSER user\nWORKDIR /projects\nCMD sudo /usr/bin/ssh-keygen -A \\\n && sudo /usr/sbin/sshd -D \\\n && sudo su - \\\n && tail -f /dev/null\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2012-2016 Codenvy, S.A.\n#  All rights reserved. This program and the accompanying materials\n#  are made available under the terms of the Eclipse Public License v1.0\n#  which accompanies this distribution, and is available at\n#  http://www.eclipse.org/legal/epl-v10.html\n#  Contributors:\n#  Codenvy, S.A. - initial API and implementation\nFROM docker:1.12.0\n#  Here we use several hacks collected from https://github.com/gliderlabs/docker-alpine/issues/11:\n#  1. install GLibc (which is not the cleanest solution at all)\n#  2. hotfix /etc/nsswitch.conf, which is apperently required by glibc and is not used in Alpine Linux\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"92\" \\\n    JAVA_VERSION_BUILD=\"14\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    MAVEN_VERSION=\"3.3.9\" \\\n    LANG=\"C.UTF-8\"\n#  do all in one step\nRUN apk upgrade --update \\\n && apk add --update libstdc++ curl ca-certificates bash openssh sudo unzip openssl \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add --allow-untrusted /tmp/*.apk \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" >&2 \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=30/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/keytool /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && cd /tmp \\\n && wget -q \"http://apache.ip-connect.vn.ua/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && tar -xzf \"apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && mv \"/tmp/apache-maven-$MAVEN_VERSION\" \"/usr/lib\" \\\n && rm \"/tmp/\"* \\\n && adduser -S user -h /home/user -s /bin/bash -G root -u 1000 \\\n && echo \"%root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && PASS=$( openssl rand -base64 32 ;) \\\n && echo -e \"${PASS}\\n${PASS}\" | passwd user \\\n && chown -R user /home/user/\nRUN mkdir /usr/che \\\n && wget -qO /usr/che/che https://raw.githubusercontent.com/eclipse/che/master/che.sh \\\n && chmod +x /usr/che/che\nENV DOCKER_HOST=\"tcp://192.168.65.1\" \\\n    M2_HOME=\"/usr/lib/apache-maven-$MAVEN_VERSION\"\nENV PATH=\"${PATH}:${JAVA_HOME}/bin:${M2_HOME}/bin:/usr/che\"\nEXPOSE 22/tcp 8000/tcp 8080/tcp\nUSER user\nWORKDIR /projects\nCMD sudo /usr/bin/ssh-keygen -A \\\n && sudo /usr/sbin/sshd -D \\\n && sudo su - \\\n && tail -f /dev/null\n","injectedSmells":[],"originalDockerfileHash":"7bb331964727e36c0df96853165cd42f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2012-2016 Codenvy, S.A.\n#   All rights reserved. This program and the accompanying materials\n#   are made available under the terms of the Eclipse Public License v1.0\n#   which accompanies this distribution, and is available at\n#   http://www.eclipse.org/legal/epl-v10.html\n#   Contributors:\n#   Codenvy, S.A. - initial API and implementation\nFROM docker:1.12.0\n#   Here we use several hacks collected from https://github.com/gliderlabs/docker-alpine/issues/11:\n#   1. install GLibc (which is not the cleanest solution at all)\n#   2. hotfix /etc/nsswitch.conf, which is apperently required by glibc and is not used in Alpine Linux\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"92\" \\\n    JAVA_VERSION_BUILD=\"14\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    MAVEN_VERSION=\"3.3.9\" \\\n    LANG=\"C.UTF-8\"\n#   do all in one step\nRUN apk upgrade --update \\\n && apk add --update libstdc++ curl ca-certificates bash openssh sudo unzip openssl \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add --allow-untrusted /tmp/*.apk \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" >&2 \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=30/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/keytool /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf \\\n && cd /tmp \\\n && wget -q \"http://apache.ip-connect.vn.ua/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && tar -xzf \"apache-maven-$MAVEN_VERSION-bin.tar.gz\" \\\n && mv \"/tmp/apache-maven-$MAVEN_VERSION\" \"/usr/lib\" \\\n && rm \"/tmp/\"* \\\n && adduser -S user -h /home/user -s /bin/bash -G root -u 1000 \\\n && echo \"%root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && PASS=$( openssl rand -base64 32 ;) \\\n && echo -e \"${PASS}\\n${PASS}\" | passwd user \\\n && chown -R user /home/user/\nRUN mkdir /usr/che \\\n && wget -qO /usr/che/che https://raw.githubusercontent.com/eclipse/che/master/che.sh \\\n && chmod +x /usr/che/che\nENV DOCKER_HOST=\"tcp://192.168.65.1\" \\\n    M2_HOME=\"/usr/lib/apache-maven-$MAVEN_VERSION\"\nENV PATH=\"${PATH}:${JAVA_HOME}/bin:${M2_HOME}/bin:/usr/che\"\nEXPOSE 22/tcp 8000/tcp 8080/tcp\nUSER user\nWORKDIR /projects\nCMD sudo /usr/bin/ssh-keygen -A \\\n && sudo /usr/sbin/sshd -D \\\n && sudo su - \\\n && tail -f /dev/null\n","originalDockerfileUglifiedHash":"ca44e893e2c2b564a68930fcd299e4a6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/768b4d3aa8e72de3c9675073730794aba86848c1.dockerfile"}