{"seed":1984314345,"processedDockerfileHash":"d847aea7b75f2b6d91423120d03ff4db","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#   In case you're building the image behind a proxy, use\n#   docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#   8787 for RStudio\n#   8000 for Jupyter\n#   docker run -d -p 8787:8787 -p 8000:8000 --name ms1 math-server\nFROM centos:7\nMAINTAINER felipenoris <felipenoris@users.noreply.github.com>\nWORKDIR /root\nRUN yum update -y \\\n && yum install -y epel-release \\\n && yum clean all\nRUN yum update -y \\\n && yum install -y p7zip p7zip-plugins bison bzip2 bzip2-devel cmake curl-devel cronie czmq expat-devel file flex fontconfig-devel gcc gcc-c++ gcc-gfortran gdb gettext-devel glibc-devel gperf java-1.8.0-openjdk-devel lynx libaio libattr-devel libcurl libcurl-devel libedit-devel libffi-devel libgcc libstdc++-static libtool m4 make man nano nload neovim htop openssl openssl098e openssl-devel patch perl-ExtUtils-MakeMaker svn unzip valgrind ruby ruby-devel sqlite sqlite-devel squashfs-tools telnet vim wget zeromq zlib zlib-devel zip \\\n && yum clean all\nENV PATH=\"/usr/local/sbin:/usr/local/bin:$PATH\"\nENV CPATH=\"/usr/include/glpk\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib64\"\n#   TeX\nRUN yum -y install perl-Tk perl-Digest-MD5 xorriso \\\n && yum clean all\nCOPY texlive.profile texlive.profile\n#   Offline TeX Live installation\n#   https://tex.stackexchange.com/questions/370256/how-to-install-tex-live-offline-on-ubuntu\n#   https://stackoverflow.com/questions/22028795/is-it-possible-to-mount-an-iso-inside-a-docker-container\n#   http://www.gnu.org/software/xorriso/\n#   non-interactive http://www.tug.org/pipermail/tex-live/2008-June/016323.html\n#   Official link: http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\nENV TEXLIVE_VERSION=\"2019\"\nRUN wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso \\\n && wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso.md5 \\\n && RESULT=$( md5sum -c texlive$TEXLIVE_VERSION.iso.md5 ;) \\\n && echo ${RESULT} > ~/check-texlive-md5.txt \\\n && osirrox -indev ./texlive$TEXLIVE_VERSION.iso -extract / ./texlive_install \\\n && rm -f texlive$TEXLIVE_VERSION.iso \\\n && ./texlive_install/install-tl -profile ./texlive.profile \\\n && rm -rf texlive_install\n#   Uncomment lines below to update TeX Live to latest packages\n#   Sets texlive update mirror\n#   https://tex.stackexchange.com/questions/378210/installing-tl-using-iso-leads-to-local-unknown-repository-tlpdb\n#  RUN tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet\n#  RUN tlmgr update --self --all --reinstall-forcibly-removed\nENV PATH=\"/usr/local/texlive/distribution/bin/x86_64-linux:$PATH\"\n#   GIT - https://git-scm.com/\n#   http://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/#\nENV GIT_VER=\"2.22.0\"\nRUN wget https://www.kernel.org/pub/software/scm/git/git-$GIT_VER.tar.gz \\\n && tar xf git-$GIT_VER.tar.gz \\\n && cd git-$GIT_VER \\\n && make -j\"$( nproc --all ;)\" prefix=/usr/local all \\\n && make prefix=/usr/local -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -f git-$GIT_VER.tar.gz \\\n && rm -rf git-$GIT_VER\n#   Makes git use https by default\nRUN git config --global url.\"https://\".insteadOf git://\n#   llvm needs CMake 2.8.12.2 or higher\n#   https://cmake.org/download/\nENV CMAKE_VER_MAJ=\"3.14\"\nENV CMAKE_VER_MIN=\".5\"\nENV CMAKE_VER=\"$CMAKE_VER_MAJ$CMAKE_VER_MIN\"\nRUN wget https://cmake.org/files/v$CMAKE_VER_MAJ/cmake-$CMAKE_VER.tar.gz \\\n && tar xf cmake-$CMAKE_VER.tar.gz \\\n && cd cmake-$CMAKE_VER \\\n && ./bootstrap \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_VER \\\n && rm -f cmake-$CMAKE_VER.tar.gz\nENV CMAKE_ROOT=\"/usr/local/share/cmake-$CMAKE_VER_MAJ\"\n#   node https://nodejs.org/en/ - https://tecadmin.net/install-latest-nodejs-and-npm-on-centos/\nRUN curl -sL https://rpm.nodesource.com/setup_10.x | bash -\nRUN yum install -y nodejs\n#   reinstall npm with the lastest version\n#   Workaround https://github.com/npm/npm/issues/15558\n#   with https://github.com/npm/npm/issues/15611#issuecomment-289133810\nRUN npm install npm@9.6.4 \\\n && rm -rf /usr/local/lib/node_modules \\\n && mv node_modules /usr/local/lib/\n#   Makes npm work behind proxy if http_proxy variable is set\nRUN npm config set proxy ${http_proxy} \\\n && npm config set https-proxy ${https_proxy} \\\n && npm config set registry http://registry.npmjs.org/ \\\n && npm set strict-ssl false\n#   Anaconda\n#   https://repo.continuum.io/archive\nENV CONDA_VER=\"2019.03\"\nENV PATH=\"$PATH:/usr/local/conda/anaconda3/bin\"\nRUN wget https://repo.continuum.io/archive/Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && bash Anaconda3-$CONDA_VER-Linux-x86_64.sh -b -p /usr/local/conda/anaconda3 \\\n && rm -f Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && conda update -n base conda -y\nRUN conda update --all\n#   Install py2 and py3 envs, and registers jupyterhub kernels\n#   https://github.com/jupyter/jupyter/issues/71\n#   install everything (except JupyterHub itself) with Python 2 and 3. Jupyter is included in Anaconda.\nRUN conda create -n py3 python=3 anaconda ipykernel \\\n && conda create -n py2 python=2 anaconda ipykernel\n#   Set PYTHON env variable to point to Python3. This will be used by PyCall.jl julia package.\nENV PYTHON=\"/usr/local/conda/anaconda3/envs/py3/bin/python\"\n#   register py2 kernel\nRUN source activate py2 \\\n && python -m ipykernel install\nRUN conda install -c conda-forge jupyterhub -y\n#   ipywidgets: https://github.com/ipython/ipywidgets\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#   Jupyterlab: https://github.com/jupyterlab/jupyterlab\nRUN source activate py3 \\\n && conda install -c conda-forge jupyterlab -y\n#   Integration between jupyterhub and jupyterlab\n#   not working: https://github.com/jupyterhub/jupyterlab-hub/issues/78\n#  RUN jupyter labextension install @jupyterlab/hub-extension\n#   Support for other languages\n#   https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n#   R\nRUN yum -y install lapack-devel blas-devel libicu-devel unixodbc-devel boost boost-devel libxml2 libxml2-devel R \\\n && yum clean all\n#   Set default CRAN Mirror\nRUN echo 'options(repos = c(CRAN=\"https://ftp.osuosl.org/pub/cran/\"))' >> /usr/lib64/R/library/base/R/Rprofile\n#   RStudio - https://www.rstudio.com/products/rstudio/download-server/\nENV RSTUDIO_VER=\"1.2.1335\"\nRUN wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && echo \"da696c9823eb1c044f04adf75f722b64 rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm\" > RSTUDIOMD5 \\\n && RESULT=$( md5sum -c RSTUDIOMD5 ;) \\\n && echo ${RESULT} > ~/check-rstudio-md5.txt \\\n && yum -y install --nogpgcheck rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && yum clean all \\\n && rm -f rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && rm -f RSTUDIOMD5\n#   Shiny - https://www.rstudio.com/products/shiny/download-server/\nENV SHINY_VER=\"1.5.9.923\"\nRUN R -e 'install.packages(\"shiny\", repos=\"https://cran.rstudio.com/\")' \\\n && wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-$SHINY_VER-x86_64.rpm \\\n && echo \"124aed894021af4f6aff22c8112e26bd shiny-server-$SHINY_VER-x86_64.rpm\" > SHINYSERVERMD5 \\\n && RESULT=$( md5sum -c SHINYSERVERMD5 ;) \\\n && echo ${RESULT} > ~/check-shiny-server-md5.txt \\\n && yum -y install --nogpgcheck shiny-server-$SHINY_VER-x86_64.rpm \\\n && yum clean all \\\n && cd \\\n && rm -f SHINYSERVERMD5 \\\n && rm -f shiny-server-$SHINY_VER-x86_64.rpm\n#   Julia - https://julialang.org/downloads/\nENV JULIA_VER_MAJ=\"1.1\"\nENV JULIA_VER_MIN=\".1\"\nENV JULIA_VER=\"$JULIA_VER_MAJ$JULIA_VER_MIN\"\nRUN wget https://julialang-s3.julialang.org/bin/linux/x64/$JULIA_VER_MAJ/julia-$JULIA_VER-linux-x86_64.tar.gz \\\n && mkdir /usr/local/julia \\\n && tar xf julia-$JULIA_VER-linux-x86_64.tar.gz --directory /usr/local/julia --strip-components=1 \\\n && ln -s /usr/local/julia/bin/julia /usr/local/bin/julia \\\n && rm -f julia-$JULIA_VER-linux-x86_64.tar.gz\nENV JULIA_PKGDIR=\"/usr/local/julia/share/julia/site\"\n#   R\n#   http://irkernel.github.io/installation/\nRUN yum -y install czmq-devel \\\n && yum clean all\nRUN R -e \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\"\nRUN R -e \"devtools::install_github('IRkernel/IRkernel')\"\nRUN R -e 'IRkernel::installspec(user = FALSE)'\n#  RUN cp -r /usr/lib64/R/library/IRkernel/kernelspec /usr/local/conda/anaconda3/share/jupyter/kernels/R\n#   Optional configuration file for svn\nCOPY svn-servers /etc/subversion/servers\n#   coin SYMPHONY\n#   https://projects.coin-or.org/SYMPHONY\nENV SYMPHONY_VER=\"5.6\"\nRUN git clone --depth=1 --branch=stable/$SYMPHONY_VER https://github.com/coin-or/SYMPHONY SYMPHONY-$SYMPHONY_VER \\\n && cd SYMPHONY-$SYMPHONY_VER \\\n && git clone --depth=1 --branch=stable/0.8 https://github.com/coin-or-tools/BuildTools/ \\\n && chmod u+x ./BuildTools/get.dependencies.sh \\\n && ./BuildTools/get.dependencies.sh fetch --no-third-party \\\n && ./configure \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf SYMPHONY-$SYMPHONY_VER\n#   bash Jupyter kernel\nRUN source activate py3 \\\n && pip install bash_kernel==0.9.0 \\\n && python3 -m bash_kernel.install\n#   pigz: http://zlib.net/pigz/\nENV PIGZ_VER=\"2.4\"\nRUN wget http://zlib.net/pigz/pigz-$PIGZ_VER.tar.gz \\\n && tar xf pigz-$PIGZ_VER.tar.gz \\\n && cd pigz-$PIGZ_VER \\\n && make -j\"$( nproc --all ;)\" \\\n && cp pigz /usr/local/bin \\\n && cp unpigz /usr/local/bin \\\n && cd .. \\\n && rm -rf pigz-$PIGZ_VER \\\n && rm -f pigz-$PIGZ_VER.tar.gz\n#   uchardet: https://www.freedesktop.org/wiki/Software/uchardet/\nRUN git clone --depth=1 https://anongit.freedesktop.org/git/uchardet/uchardet.git \\\n && cd uchardet \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release . \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf uchardet\nENV JAVA_HOME=\"/etc/alternatives/java_sdk\"\n#   Redis (https://redis.io)\nRUN wget http://download.redis.io/redis-stable.tar.gz \\\n && tar xf redis-stable.tar.gz \\\n && cd redis-stable \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf redis-stable \\\n && rm -f redis-stable.tar.gz\n#   MongoDB (https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)\nCOPY mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo\nRUN yum install -y mongodb-org\n#  ################\n#  # LIBS\n#  ################\n#   Optional libraries for packages\n#  RUN yum -y install \\\n#     cyrus-sasl-devel \\\n#     freeglut \\\n#     freeglut-devel \\\n#     freetype-devel \\\n#     geos-devel \\\n#     gdal-devel \\\n#     glpk-devel \\\n#     gsl-devel \\\n#     gtk3-devel \\\n#     hdf5 \\\n#     ImageMagick \\\n#     lcms2-devel \\\n#     libjpeg-devel \\\n#     libpng \\\n#     libpng-devel \\\n#     libtiff-devel \\\n#     libtool \\\n#     libwebp-devel \\\n#     libxslt-devel \\\n#     libxml2-devel \\\n#     libzip-devel \\\n#     mpfr-devel \\\n#     pandoc \\\n#     proj-devel \\\n#     proj-epsg \\\n#     proj-nad \\\n#     tcl-devel \\\n#     tk-devel \\\n#     && yum clean all\nRUN yum -y install hdf5 libxml2-devel libzip-devel \\\n && yum clean all\n#   http://ipyparallel.readthedocs.org/en/latest/\n#  RUN ipcluster nbextension enable\n#   Improve link to shared libraries\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/R/lib:/usr/local/lib:/lib:/usr/lib/jvm/jre/lib/amd64/server:/usr/lib/jvm/jre/lib/amd64:/usr/lib/jvm/java/lib/amd64:/usr/java/packages/lib/amd64:/lib:/usr/lib:/usr/local/lib\"\n#   ffmpeg\nRUN rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro \\\n && rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm \\\n && yum install ffmpeg ffmpeg-devel -y\n#   Altair - https://altair-viz.github.io/installation.html\nRUN conda install altair --channel conda-forge -y\n#   Plotly for Python\nRUN conda install plotly -y\n#  ###################\n#  # Services\n#  ###################\n#   8787 for RStudio\n#   8000 for Jupyter\nEXPOSE 8787/tcp 8000/tcp\nCOPY jupyterhub_config.py jupyterhub_config.py\nENV TERM=\"xterm\"\nCMD /usr/lib/rstudio-server/bin/rserver \\\n && jupyterhub --no-ssl -f jupyterhub_config.py\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#  In case you're building the image behind a proxy, use\n#  docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#  8787 for RStudio\n#  8000 for Jupyter\n#  docker run -d -p 8787:8787 -p 8000:8000 --name ms1 math-server\nFROM centos:7\nMAINTAINER felipenoris <felipenoris@users.noreply.github.com>\nWORKDIR /root\nRUN yum update -y \\\n && yum install -y epel-release \\\n && yum clean all\nRUN yum update -y \\\n && yum install -y p7zip p7zip-plugins bison bzip2 bzip2-devel cmake curl-devel cronie czmq expat-devel file flex fontconfig-devel gcc gcc-c++ gcc-gfortran gdb gettext-devel glibc-devel gperf java-1.8.0-openjdk-devel lynx libaio libattr-devel libcurl libcurl-devel libedit-devel libffi-devel libgcc libstdc++-static libtool m4 make man nano nload neovim htop openssl openssl098e openssl-devel patch perl-ExtUtils-MakeMaker svn unzip valgrind ruby ruby-devel sqlite sqlite-devel squashfs-tools telnet vim wget zeromq zlib zlib-devel zip \\\n && yum clean all\nENV PATH=\"/usr/local/sbin:/usr/local/bin:$PATH\"\nENV CPATH=\"/usr/include/glpk\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib64\"\n#  TeX\nRUN yum -y install perl-Tk perl-Digest-MD5 xorriso \\\n && yum clean all\nADD texlive.profile texlive.profile\n#  Offline TeX Live installation\n#  https://tex.stackexchange.com/questions/370256/how-to-install-tex-live-offline-on-ubuntu\n#  https://stackoverflow.com/questions/22028795/is-it-possible-to-mount-an-iso-inside-a-docker-container\n#  http://www.gnu.org/software/xorriso/\n#  non-interactive http://www.tug.org/pipermail/tex-live/2008-June/016323.html\n#  Official link: http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\nENV TEXLIVE_VERSION=\"2019\"\nRUN wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso \\\n && wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso.md5 \\\n && RESULT=$( md5sum -c texlive$TEXLIVE_VERSION.iso.md5 ;) \\\n && echo ${RESULT} > ~/check-texlive-md5.txt \\\n && osirrox -indev ./texlive$TEXLIVE_VERSION.iso -extract / ./texlive_install \\\n && rm -f texlive$TEXLIVE_VERSION.iso \\\n && ./texlive_install/install-tl -profile ./texlive.profile \\\n && rm -rf texlive_install\n#  Uncomment lines below to update TeX Live to latest packages\n#  Sets texlive update mirror\n#  https://tex.stackexchange.com/questions/378210/installing-tl-using-iso-leads-to-local-unknown-repository-tlpdb\n# RUN tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet\n# RUN tlmgr update --self --all --reinstall-forcibly-removed\nENV PATH=\"/usr/local/texlive/distribution/bin/x86_64-linux:$PATH\"\n#  GIT - https://git-scm.com/\n#  http://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/#\nENV GIT_VER=\"2.22.0\"\nRUN wget https://www.kernel.org/pub/software/scm/git/git-$GIT_VER.tar.gz \\\n && tar xf git-$GIT_VER.tar.gz \\\n && cd git-$GIT_VER \\\n && make -j\"$( nproc --all ;)\" prefix=/usr/local all \\\n && make prefix=/usr/local -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -f git-$GIT_VER.tar.gz \\\n && rm -rf git-$GIT_VER\n#  Makes git use https by default\nRUN git config --global url.\"https://\".insteadOf git://\n#  llvm needs CMake 2.8.12.2 or higher\n#  https://cmake.org/download/\nENV CMAKE_VER_MAJ=\"3.14\"\nENV CMAKE_VER_MIN=\".5\"\nENV CMAKE_VER=\"$CMAKE_VER_MAJ$CMAKE_VER_MIN\"\nRUN wget https://cmake.org/files/v$CMAKE_VER_MAJ/cmake-$CMAKE_VER.tar.gz \\\n && tar xf cmake-$CMAKE_VER.tar.gz \\\n && cd cmake-$CMAKE_VER \\\n && ./bootstrap \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_VER \\\n && rm -f cmake-$CMAKE_VER.tar.gz\nENV CMAKE_ROOT=\"/usr/local/share/cmake-$CMAKE_VER_MAJ\"\n#  node https://nodejs.org/en/ - https://tecadmin.net/install-latest-nodejs-and-npm-on-centos/\nRUN curl -sL https://rpm.nodesource.com/setup_10.x | bash -\nRUN yum install -y nodejs\n#  reinstall npm with the lastest version\n#  Workaround https://github.com/npm/npm/issues/15558\n#  with https://github.com/npm/npm/issues/15611#issuecomment-289133810\nRUN npm install npm \\\n && rm -rf /usr/local/lib/node_modules \\\n && mv node_modules /usr/local/lib/\n#  Makes npm work behind proxy if http_proxy variable is set\nRUN npm config set proxy ${http_proxy} \\\n && npm config set https-proxy ${https_proxy} \\\n && npm config set registry http://registry.npmjs.org/ \\\n && npm set strict-ssl false\n#  Anaconda\n#  https://repo.continuum.io/archive\nENV CONDA_VER=\"2019.03\"\nENV PATH=\"$PATH:/usr/local/conda/anaconda3/bin\"\nRUN wget https://repo.continuum.io/archive/Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && bash Anaconda3-$CONDA_VER-Linux-x86_64.sh -b -p /usr/local/conda/anaconda3 \\\n && rm -f Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && conda update -n base conda -y\nRUN conda update --all\n#  Install py2 and py3 envs, and registers jupyterhub kernels\n#  https://github.com/jupyter/jupyter/issues/71\n#  install everything (except JupyterHub itself) with Python 2 and 3. Jupyter is included in Anaconda.\nRUN conda create -n py3 python=3 anaconda ipykernel \\\n && conda create -n py2 python=2 anaconda ipykernel\n#  Set PYTHON env variable to point to Python3. This will be used by PyCall.jl julia package.\nENV PYTHON=\"/usr/local/conda/anaconda3/envs/py3/bin/python\"\n#  register py2 kernel\nRUN source activate py2 \\\n && python -m ipykernel install\nRUN conda install -c conda-forge jupyterhub -y\n#  ipywidgets: https://github.com/ipython/ipywidgets\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#  Jupyterlab: https://github.com/jupyterlab/jupyterlab\nRUN source activate py3 \\\n && conda install -c conda-forge jupyterlab -y\n#  Integration between jupyterhub and jupyterlab\n#  not working: https://github.com/jupyterhub/jupyterlab-hub/issues/78\n# RUN jupyter labextension install @jupyterlab/hub-extension\n#  Support for other languages\n#  https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n#  R\nRUN yum -y install lapack-devel blas-devel libicu-devel unixodbc-devel boost boost-devel libxml2 libxml2-devel R \\\n && yum clean all\n#  Set default CRAN Mirror\nRUN echo 'options(repos = c(CRAN=\"https://ftp.osuosl.org/pub/cran/\"))' >> /usr/lib64/R/library/base/R/Rprofile\n#  RStudio - https://www.rstudio.com/products/rstudio/download-server/\nENV RSTUDIO_VER=\"1.2.1335\"\nRUN wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && echo \"da696c9823eb1c044f04adf75f722b64 rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm\" > RSTUDIOMD5 \\\n && RESULT=$( md5sum -c RSTUDIOMD5 ;) \\\n && echo ${RESULT} > ~/check-rstudio-md5.txt \\\n && yum -y install --nogpgcheck rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && yum clean all \\\n && rm -f rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && rm -f RSTUDIOMD5\n#  Shiny - https://www.rstudio.com/products/shiny/download-server/\nENV SHINY_VER=\"1.5.9.923\"\nRUN R -e 'install.packages(\"shiny\", repos=\"https://cran.rstudio.com/\")' \\\n && wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-$SHINY_VER-x86_64.rpm \\\n && echo \"124aed894021af4f6aff22c8112e26bd shiny-server-$SHINY_VER-x86_64.rpm\" > SHINYSERVERMD5 \\\n && RESULT=$( md5sum -c SHINYSERVERMD5 ;) \\\n && echo ${RESULT} > ~/check-shiny-server-md5.txt \\\n && yum -y install --nogpgcheck shiny-server-$SHINY_VER-x86_64.rpm \\\n && yum clean all \\\n && cd \\\n && rm -f SHINYSERVERMD5 \\\n && rm -f shiny-server-$SHINY_VER-x86_64.rpm\n#  Julia - https://julialang.org/downloads/\nENV JULIA_VER_MAJ=\"1.1\"\nENV JULIA_VER_MIN=\".1\"\nENV JULIA_VER=\"$JULIA_VER_MAJ$JULIA_VER_MIN\"\nRUN wget https://julialang-s3.julialang.org/bin/linux/x64/$JULIA_VER_MAJ/julia-$JULIA_VER-linux-x86_64.tar.gz \\\n && mkdir /usr/local/julia \\\n && tar xf julia-$JULIA_VER-linux-x86_64.tar.gz --directory /usr/local/julia --strip-components=1 \\\n && ln -s /usr/local/julia/bin/julia /usr/local/bin/julia \\\n && rm -f julia-$JULIA_VER-linux-x86_64.tar.gz\nENV JULIA_PKGDIR=\"/usr/local/julia/share/julia/site\"\n#  R\n#  http://irkernel.github.io/installation/\nRUN yum -y install czmq-devel \\\n && yum clean all\nRUN R -e \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\"\nRUN R -e \"devtools::install_github('IRkernel/IRkernel')\"\nRUN R -e 'IRkernel::installspec(user = FALSE)'\n# RUN cp -r /usr/lib64/R/library/IRkernel/kernelspec /usr/local/conda/anaconda3/share/jupyter/kernels/R\n#  Optional configuration file for svn\nADD svn-servers /etc/subversion/servers\n#  coin SYMPHONY\n#  https://projects.coin-or.org/SYMPHONY\nENV SYMPHONY_VER=\"5.6\"\nRUN git clone --depth=1 --branch=stable/$SYMPHONY_VER https://github.com/coin-or/SYMPHONY SYMPHONY-$SYMPHONY_VER \\\n && cd SYMPHONY-$SYMPHONY_VER \\\n && git clone --depth=1 --branch=stable/0.8 https://github.com/coin-or-tools/BuildTools/ \\\n && chmod u+x ./BuildTools/get.dependencies.sh \\\n && ./BuildTools/get.dependencies.sh fetch --no-third-party \\\n && ./configure \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf SYMPHONY-$SYMPHONY_VER\n#  bash Jupyter kernel\nRUN source activate py3 \\\n && pip install bash_kernel \\\n && python3 -m bash_kernel.install\n#  pigz: http://zlib.net/pigz/\nENV PIGZ_VER=\"2.4\"\nRUN wget http://zlib.net/pigz/pigz-$PIGZ_VER.tar.gz \\\n && tar xf pigz-$PIGZ_VER.tar.gz \\\n && cd pigz-$PIGZ_VER \\\n && make -j\"$( nproc --all ;)\" \\\n && cp pigz /usr/local/bin \\\n && cp unpigz /usr/local/bin \\\n && cd .. \\\n && rm -rf pigz-$PIGZ_VER \\\n && rm -f pigz-$PIGZ_VER.tar.gz\n#  uchardet: https://www.freedesktop.org/wiki/Software/uchardet/\nRUN git clone --depth=1 https://anongit.freedesktop.org/git/uchardet/uchardet.git \\\n && cd uchardet \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release . \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf uchardet\nENV JAVA_HOME=\"/etc/alternatives/java_sdk\"\n#  Redis (https://redis.io)\nRUN wget http://download.redis.io/redis-stable.tar.gz \\\n && tar xf redis-stable.tar.gz \\\n && cd redis-stable \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf redis-stable \\\n && rm -f redis-stable.tar.gz\n#  MongoDB (https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)\nADD mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo\nRUN yum install -y mongodb-org\n# ################\n# # LIBS\n# ################\n#  Optional libraries for packages\n# RUN yum -y install \\\n#    cyrus-sasl-devel \\\n#    freeglut \\\n#    freeglut-devel \\\n#    freetype-devel \\\n#    geos-devel \\\n#    gdal-devel \\\n#    glpk-devel \\\n#    gsl-devel \\\n#    gtk3-devel \\\n#    hdf5 \\\n#    ImageMagick \\\n#    lcms2-devel \\\n#    libjpeg-devel \\\n#    libpng \\\n#    libpng-devel \\\n#    libtiff-devel \\\n#    libtool \\\n#    libwebp-devel \\\n#    libxslt-devel \\\n#    libxml2-devel \\\n#    libzip-devel \\\n#    mpfr-devel \\\n#    pandoc \\\n#    proj-devel \\\n#    proj-epsg \\\n#    proj-nad \\\n#    tcl-devel \\\n#    tk-devel \\\n#    && yum clean all\nRUN yum -y install hdf5 libxml2-devel libzip-devel \\\n && yum clean all\n#  http://ipyparallel.readthedocs.org/en/latest/\n# RUN ipcluster nbextension enable\n#  Improve link to shared libraries\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/R/lib:/usr/local/lib:/lib:/usr/lib/jvm/jre/lib/amd64/server:/usr/lib/jvm/jre/lib/amd64:/usr/lib/jvm/java/lib/amd64:/usr/java/packages/lib/amd64:/lib:/usr/lib:/usr/local/lib\"\n#  ffmpeg\nRUN rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro \\\n && rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm \\\n && yum install ffmpeg ffmpeg-devel -y\n#  Altair - https://altair-viz.github.io/installation.html\nRUN conda install altair --channel conda-forge -y\n#  Plotly for Python\nRUN conda install plotly -y\n# ###################\n# # Services\n# ###################\n#  8787 for RStudio\n#  8000 for Jupyter\nEXPOSE 8787/tcp 8000/tcp\nADD jupyterhub_config.py jupyterhub_config.py\nENV TERM=\"xterm\"\nCMD /usr/lib/rstudio-server/bin/rserver \\\n && jupyterhub --no-ssl -f jupyterhub_config.py\n","injectedSmells":[],"originalDockerfileHash":"b6ee7ca5766c95e69c725d8776463be9","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#   In case you're building the image behind a proxy, use\n#   docker build -t math-server:latest --build-arg http_proxy=\"http://proxy:8080\" --build-arg https_proxy=\"http://proxy:8080\" .\n#   8787 for RStudio\n#   8000 for Jupyter\n#   docker run -d -p 8787:8787 -p 8000:8000 --name ms1 math-server\nFROM centos:7\nMAINTAINER felipenoris <felipenoris@users.noreply.github.com>\nWORKDIR /root\nRUN yum update -y \\\n && yum install -y epel-release \\\n && yum clean all\nRUN yum update -y \\\n && yum install -y p7zip p7zip-plugins bison bzip2 bzip2-devel cmake curl-devel cronie czmq expat-devel file flex fontconfig-devel gcc gcc-c++ gcc-gfortran gdb gettext-devel glibc-devel gperf java-1.8.0-openjdk-devel lynx libaio libattr-devel libcurl libcurl-devel libedit-devel libffi-devel libgcc libstdc++-static libtool m4 make man nano nload neovim htop openssl openssl098e openssl-devel patch perl-ExtUtils-MakeMaker svn unzip valgrind ruby ruby-devel sqlite sqlite-devel squashfs-tools telnet vim wget zeromq zlib zlib-devel zip \\\n && yum clean all\nENV PATH=\"/usr/local/sbin:/usr/local/bin:$PATH\"\nENV CPATH=\"/usr/include/glpk\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/local/lib64\"\n#   TeX\nRUN yum -y install perl-Tk perl-Digest-MD5 xorriso \\\n && yum clean all\nADD texlive.profile texlive.profile\n#   Offline TeX Live installation\n#   https://tex.stackexchange.com/questions/370256/how-to-install-tex-live-offline-on-ubuntu\n#   https://stackoverflow.com/questions/22028795/is-it-possible-to-mount-an-iso-inside-a-docker-container\n#   http://www.gnu.org/software/xorriso/\n#   non-interactive http://www.tug.org/pipermail/tex-live/2008-June/016323.html\n#   Official link: http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\nENV TEXLIVE_VERSION=\"2019\"\nRUN wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso \\\n && wget http://mirrors.rit.edu/CTAN/systems/texlive/Images/texlive$TEXLIVE_VERSION.iso.md5 \\\n && RESULT=$( md5sum -c texlive$TEXLIVE_VERSION.iso.md5 ;) \\\n && echo ${RESULT} > ~/check-texlive-md5.txt \\\n && osirrox -indev ./texlive$TEXLIVE_VERSION.iso -extract / ./texlive_install \\\n && rm -f texlive$TEXLIVE_VERSION.iso \\\n && ./texlive_install/install-tl -profile ./texlive.profile \\\n && rm -rf texlive_install\n#   Uncomment lines below to update TeX Live to latest packages\n#   Sets texlive update mirror\n#   https://tex.stackexchange.com/questions/378210/installing-tl-using-iso-leads-to-local-unknown-repository-tlpdb\n#  RUN tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet\n#  RUN tlmgr update --self --all --reinstall-forcibly-removed\nENV PATH=\"/usr/local/texlive/distribution/bin/x86_64-linux:$PATH\"\n#   GIT - https://git-scm.com/\n#   http://tecadmin.net/install-git-2-0-on-centos-rhel-fedora/#\nENV GIT_VER=\"2.22.0\"\nRUN wget https://www.kernel.org/pub/software/scm/git/git-$GIT_VER.tar.gz \\\n && tar xf git-$GIT_VER.tar.gz \\\n && cd git-$GIT_VER \\\n && make -j\"$( nproc --all ;)\" prefix=/usr/local all \\\n && make prefix=/usr/local -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -f git-$GIT_VER.tar.gz \\\n && rm -rf git-$GIT_VER\n#   Makes git use https by default\nRUN git config --global url.\"https://\".insteadOf git://\n#   llvm needs CMake 2.8.12.2 or higher\n#   https://cmake.org/download/\nENV CMAKE_VER_MAJ=\"3.14\"\nENV CMAKE_VER_MIN=\".5\"\nENV CMAKE_VER=\"$CMAKE_VER_MAJ$CMAKE_VER_MIN\"\nRUN wget https://cmake.org/files/v$CMAKE_VER_MAJ/cmake-$CMAKE_VER.tar.gz \\\n && tar xf cmake-$CMAKE_VER.tar.gz \\\n && cd cmake-$CMAKE_VER \\\n && ./bootstrap \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf cmake-$CMAKE_VER \\\n && rm -f cmake-$CMAKE_VER.tar.gz\nENV CMAKE_ROOT=\"/usr/local/share/cmake-$CMAKE_VER_MAJ\"\n#   node https://nodejs.org/en/ - https://tecadmin.net/install-latest-nodejs-and-npm-on-centos/\nRUN curl -sL https://rpm.nodesource.com/setup_10.x | bash -\nRUN yum install -y nodejs\n#   reinstall npm with the lastest version\n#   Workaround https://github.com/npm/npm/issues/15558\n#   with https://github.com/npm/npm/issues/15611#issuecomment-289133810\nRUN npm install npm \\\n && rm -rf /usr/local/lib/node_modules \\\n && mv node_modules /usr/local/lib/\n#   Makes npm work behind proxy if http_proxy variable is set\nRUN npm config set proxy ${http_proxy} \\\n && npm config set https-proxy ${https_proxy} \\\n && npm config set registry http://registry.npmjs.org/ \\\n && npm set strict-ssl false\n#   Anaconda\n#   https://repo.continuum.io/archive\nENV CONDA_VER=\"2019.03\"\nENV PATH=\"$PATH:/usr/local/conda/anaconda3/bin\"\nRUN wget https://repo.continuum.io/archive/Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && bash Anaconda3-$CONDA_VER-Linux-x86_64.sh -b -p /usr/local/conda/anaconda3 \\\n && rm -f Anaconda3-$CONDA_VER-Linux-x86_64.sh \\\n && conda update -n base conda -y\nRUN conda update --all\n#   Install py2 and py3 envs, and registers jupyterhub kernels\n#   https://github.com/jupyter/jupyter/issues/71\n#   install everything (except JupyterHub itself) with Python 2 and 3. Jupyter is included in Anaconda.\nRUN conda create -n py3 python=3 anaconda ipykernel \\\n && conda create -n py2 python=2 anaconda ipykernel\n#   Set PYTHON env variable to point to Python3. This will be used by PyCall.jl julia package.\nENV PYTHON=\"/usr/local/conda/anaconda3/envs/py3/bin/python\"\n#   register py2 kernel\nRUN source activate py2 \\\n && python -m ipykernel install\nRUN conda install -c conda-forge jupyterhub -y\n#   ipywidgets: https://github.com/ipython/ipywidgets\nRUN jupyter nbextension enable --py --sys-prefix widgetsnbextension\n#   Jupyterlab: https://github.com/jupyterlab/jupyterlab\nRUN source activate py3 \\\n && conda install -c conda-forge jupyterlab -y\n#   Integration between jupyterhub and jupyterlab\n#   not working: https://github.com/jupyterhub/jupyterlab-hub/issues/78\n#  RUN jupyter labextension install @jupyterlab/hub-extension\n#   Support for other languages\n#   https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\n#   R\nRUN yum -y install lapack-devel blas-devel libicu-devel unixodbc-devel boost boost-devel libxml2 libxml2-devel R \\\n && yum clean all\n#   Set default CRAN Mirror\nRUN echo 'options(repos = c(CRAN=\"https://ftp.osuosl.org/pub/cran/\"))' >> /usr/lib64/R/library/base/R/Rprofile\n#   RStudio - https://www.rstudio.com/products/rstudio/download-server/\nENV RSTUDIO_VER=\"1.2.1335\"\nRUN wget https://download2.rstudio.org/server/centos6/x86_64/rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && echo \"da696c9823eb1c044f04adf75f722b64 rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm\" > RSTUDIOMD5 \\\n && RESULT=$( md5sum -c RSTUDIOMD5 ;) \\\n && echo ${RESULT} > ~/check-rstudio-md5.txt \\\n && yum -y install --nogpgcheck rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && yum clean all \\\n && rm -f rstudio-server-rhel-$RSTUDIO_VER-x86_64.rpm \\\n && rm -f RSTUDIOMD5\n#   Shiny - https://www.rstudio.com/products/shiny/download-server/\nENV SHINY_VER=\"1.5.9.923\"\nRUN R -e 'install.packages(\"shiny\", repos=\"https://cran.rstudio.com/\")' \\\n && wget https://download3.rstudio.org/centos6.3/x86_64/shiny-server-$SHINY_VER-x86_64.rpm \\\n && echo \"124aed894021af4f6aff22c8112e26bd shiny-server-$SHINY_VER-x86_64.rpm\" > SHINYSERVERMD5 \\\n && RESULT=$( md5sum -c SHINYSERVERMD5 ;) \\\n && echo ${RESULT} > ~/check-shiny-server-md5.txt \\\n && yum -y install --nogpgcheck shiny-server-$SHINY_VER-x86_64.rpm \\\n && yum clean all \\\n && cd \\\n && rm -f SHINYSERVERMD5 \\\n && rm -f shiny-server-$SHINY_VER-x86_64.rpm\n#   Julia - https://julialang.org/downloads/\nENV JULIA_VER_MAJ=\"1.1\"\nENV JULIA_VER_MIN=\".1\"\nENV JULIA_VER=\"$JULIA_VER_MAJ$JULIA_VER_MIN\"\nRUN wget https://julialang-s3.julialang.org/bin/linux/x64/$JULIA_VER_MAJ/julia-$JULIA_VER-linux-x86_64.tar.gz \\\n && mkdir /usr/local/julia \\\n && tar xf julia-$JULIA_VER-linux-x86_64.tar.gz --directory /usr/local/julia --strip-components=1 \\\n && ln -s /usr/local/julia/bin/julia /usr/local/bin/julia \\\n && rm -f julia-$JULIA_VER-linux-x86_64.tar.gz\nENV JULIA_PKGDIR=\"/usr/local/julia/share/julia/site\"\n#   R\n#   http://irkernel.github.io/installation/\nRUN yum -y install czmq-devel \\\n && yum clean all\nRUN R -e \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))\"\nRUN R -e \"devtools::install_github('IRkernel/IRkernel')\"\nRUN R -e 'IRkernel::installspec(user = FALSE)'\n#  RUN cp -r /usr/lib64/R/library/IRkernel/kernelspec /usr/local/conda/anaconda3/share/jupyter/kernels/R\n#   Optional configuration file for svn\nADD svn-servers /etc/subversion/servers\n#   coin SYMPHONY\n#   https://projects.coin-or.org/SYMPHONY\nENV SYMPHONY_VER=\"5.6\"\nRUN git clone --depth=1 --branch=stable/$SYMPHONY_VER https://github.com/coin-or/SYMPHONY SYMPHONY-$SYMPHONY_VER \\\n && cd SYMPHONY-$SYMPHONY_VER \\\n && git clone --depth=1 --branch=stable/0.8 https://github.com/coin-or-tools/BuildTools/ \\\n && chmod u+x ./BuildTools/get.dependencies.sh \\\n && ./BuildTools/get.dependencies.sh fetch --no-third-party \\\n && ./configure \\\n && make -j\"$( nproc --all ;)\" \\\n && make -j\"$( nproc --all ;)\" install \\\n && cd .. \\\n && rm -rf SYMPHONY-$SYMPHONY_VER\n#   bash Jupyter kernel\nRUN source activate py3 \\\n && pip install bash_kernel \\\n && python3 -m bash_kernel.install\n#   pigz: http://zlib.net/pigz/\nENV PIGZ_VER=\"2.4\"\nRUN wget http://zlib.net/pigz/pigz-$PIGZ_VER.tar.gz \\\n && tar xf pigz-$PIGZ_VER.tar.gz \\\n && cd pigz-$PIGZ_VER \\\n && make -j\"$( nproc --all ;)\" \\\n && cp pigz /usr/local/bin \\\n && cp unpigz /usr/local/bin \\\n && cd .. \\\n && rm -rf pigz-$PIGZ_VER \\\n && rm -f pigz-$PIGZ_VER.tar.gz\n#   uchardet: https://www.freedesktop.org/wiki/Software/uchardet/\nRUN git clone --depth=1 https://anongit.freedesktop.org/git/uchardet/uchardet.git \\\n && cd uchardet \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release . \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf uchardet\nENV JAVA_HOME=\"/etc/alternatives/java_sdk\"\n#   Redis (https://redis.io)\nRUN wget http://download.redis.io/redis-stable.tar.gz \\\n && tar xf redis-stable.tar.gz \\\n && cd redis-stable \\\n && make -j\"$( nproc --all ;)\" \\\n && make install \\\n && cd .. \\\n && rm -rf redis-stable \\\n && rm -f redis-stable.tar.gz\n#   MongoDB (https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)\nADD mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo\nRUN yum install -y mongodb-org\n#  ################\n#  # LIBS\n#  ################\n#   Optional libraries for packages\n#  RUN yum -y install \\\n#     cyrus-sasl-devel \\\n#     freeglut \\\n#     freeglut-devel \\\n#     freetype-devel \\\n#     geos-devel \\\n#     gdal-devel \\\n#     glpk-devel \\\n#     gsl-devel \\\n#     gtk3-devel \\\n#     hdf5 \\\n#     ImageMagick \\\n#     lcms2-devel \\\n#     libjpeg-devel \\\n#     libpng \\\n#     libpng-devel \\\n#     libtiff-devel \\\n#     libtool \\\n#     libwebp-devel \\\n#     libxslt-devel \\\n#     libxml2-devel \\\n#     libzip-devel \\\n#     mpfr-devel \\\n#     pandoc \\\n#     proj-devel \\\n#     proj-epsg \\\n#     proj-nad \\\n#     tcl-devel \\\n#     tk-devel \\\n#     && yum clean all\nRUN yum -y install hdf5 libxml2-devel libzip-devel \\\n && yum clean all\n#   http://ipyparallel.readthedocs.org/en/latest/\n#  RUN ipcluster nbextension enable\n#   Improve link to shared libraries\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/lib64/R/lib:/usr/local/lib:/lib:/usr/lib/jvm/jre/lib/amd64/server:/usr/lib/jvm/jre/lib/amd64:/usr/lib/jvm/java/lib/amd64:/usr/java/packages/lib/amd64:/lib:/usr/lib:/usr/local/lib\"\n#   ffmpeg\nRUN rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro \\\n && rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm \\\n && yum install ffmpeg ffmpeg-devel -y\n#   Altair - https://altair-viz.github.io/installation.html\nRUN conda install altair --channel conda-forge -y\n#   Plotly for Python\nRUN conda install plotly -y\n#  ###################\n#  # Services\n#  ###################\n#   8787 for RStudio\n#   8000 for Jupyter\nEXPOSE 8787/tcp 8000/tcp\nADD jupyterhub_config.py jupyterhub_config.py\nENV TERM=\"xterm\"\nCMD /usr/lib/rstudio-server/bin/rserver \\\n && jupyterhub --no-ssl -f jupyterhub_config.py\n","originalDockerfileUglifiedHash":"95cd60fa659103a6c1c33b35b68088c3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bb46e152d223ef491fe8e9eb446272876e6fbc19.dockerfile"}