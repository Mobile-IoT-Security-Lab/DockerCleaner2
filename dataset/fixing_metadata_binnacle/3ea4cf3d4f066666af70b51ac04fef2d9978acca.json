{"seed":1404026941,"processedDockerfileHash":"7bdf2ff567ff94d8022061132ec60d24","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim: ft=dockerfile:\n#   Dockerfile to build nghttp2 android binary\n#\n#   $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#   After successful build, android binaries are located under\n#   /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#   example, to copy nghttpx binary to host file system location\n#   /path/to/dest, do this:\n#\n#   $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\nFROM ubuntu:vivid\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root/android\"\nENV PREFIX=\"$ANDROID_HOME/usr/local\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\n#   It would be better to use nearest ubuntu archive mirror for faster\n#   downloads.\n#   RUN sed -ie 's/archive\\.ubuntu/jp.archive.ubuntu/g' /etc/apt/sources.list\nRUN :\n#   genisoimage, libc6-i386 and lib32stdc++6 are required to decompress ndk.\nRUN (apt-get update ;apt-get install --no-install-recommends make binutils autoconf automake autotools-dev libtool pkg-config git curl dpkg-dev libxml2-dev genisoimage libc6-i386 lib32stdc++6 -y )\nWORKDIR /root/build\nRUN curl -L -O http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin \\\n && chmod a+x android-ndk-r10d-linux-x86_64.bin \\\n && ./android-ndk-r10d-linux-x86_64.bin \\\n && rm android-ndk-r10d-linux-x86_64.bin\nWORKDIR /root/build/android-ndk-r10d\nRUN /bin/bash build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --llvm-version=3.5 --system=linux-x86_64\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-1.0.2d.tar.gz \\\n && tar xf openssl-1.0.2d.tar.gz \\\n && rm openssl-1.0.2d.tar.gz\nWORKDIR /root/build/openssl-1.0.2d\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/libev-4.19.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-4.19.tar.gz \\\n && rm libev-4.19.tar.gz\nWORKDIR /root/build/libev-4.19\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O http://zlib.net/zlib-1.2.8.tar.gz \\\n && tar xf zlib-1.2.8.tar.gz \\\n && rm zlib-1.2.8.tar.gz\nWORKDIR /root/build/zlib-1.2.8\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads LIBSPDYLAY_CFLAGS=-I$PREFIX/usr/local/include LIBSPDYLAY_LIBS=\"-L$PREFIX/usr/local/lib -lspdylay\" CPPFLAGS=\"-fPIE -I$PREFIX/include\" CXXFLAGS=\"-fno-strict-aliasing\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim: ft=dockerfile:\n#  Dockerfile to build nghttp2 android binary\n#\n#  $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#  After successful build, android binaries are located under\n#  /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#  example, to copy nghttpx binary to host file system location\n#  /path/to/dest, do this:\n#\n#  $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\nFROM ubuntu:vivid\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root/android\"\nENV PREFIX=\"$ANDROID_HOME/usr/local\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\n#  It would be better to use nearest ubuntu archive mirror for faster\n#  downloads.\n#  RUN sed -ie 's/archive\\.ubuntu/jp.archive.ubuntu/g' /etc/apt/sources.list\nRUN apt-get update\n#  genisoimage, libc6-i386 and lib32stdc++6 are required to decompress ndk.\nRUN apt-get install make binutils autoconf automake autotools-dev libtool pkg-config git curl dpkg-dev libxml2-dev genisoimage libc6-i386 lib32stdc++6 -y\nWORKDIR /root/build\nRUN curl -L -O http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin \\\n && chmod a+x android-ndk-r10d-linux-x86_64.bin \\\n && ./android-ndk-r10d-linux-x86_64.bin \\\n && rm android-ndk-r10d-linux-x86_64.bin\nWORKDIR /root/build/android-ndk-r10d\nRUN /bin/bash build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --llvm-version=3.5 --system=linux-x86_64\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-1.0.2d.tar.gz \\\n && tar xf openssl-1.0.2d.tar.gz \\\n && rm openssl-1.0.2d.tar.gz\nWORKDIR /root/build/openssl-1.0.2d\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/libev-4.19.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-4.19.tar.gz \\\n && rm libev-4.19.tar.gz\nWORKDIR /root/build/libev-4.19\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O http://zlib.net/zlib-1.2.8.tar.gz \\\n && tar xf zlib-1.2.8.tar.gz \\\n && rm zlib-1.2.8.tar.gz\nWORKDIR /root/build/zlib-1.2.8\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads LIBSPDYLAY_CFLAGS=-I$PREFIX/usr/local/include LIBSPDYLAY_LIBS=\"-L$PREFIX/usr/local/lib -lspdylay\" CPPFLAGS=\"-fPIE -I$PREFIX/include\" CXXFLAGS=\"-fno-strict-aliasing\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\n","injectedSmells":[],"originalDockerfileHash":"ed084bbf1a92fd5b2cf8e70453afc03d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim: ft=dockerfile:\n#   Dockerfile to build nghttp2 android binary\n#\n#   $ sudo docker build -t nghttp2-android - < Dockerfile.android\n#\n#   After successful build, android binaries are located under\n#   /root/build/nghttp2.  You can copy the binary using docker cp.  For\n#   example, to copy nghttpx binary to host file system location\n#   /path/to/dest, do this:\n#\n#   $ sudo docker run -v /path/to/dest:/out nghttp2-android cp /root/build/nghttp2/src/nghttpx /out\nFROM ubuntu:vivid\nMAINTAINER Tatsuhiro Tsujikawa\nENV ANDROID_HOME=\"/root/android\"\nENV PREFIX=\"$ANDROID_HOME/usr/local\"\nENV TOOLCHAIN=\"$ANDROID_HOME/toolchain\"\nENV PATH=\"$TOOLCHAIN/bin:$PATH\"\n#   It would be better to use nearest ubuntu archive mirror for faster\n#   downloads.\n#   RUN sed -ie 's/archive\\.ubuntu/jp.archive.ubuntu/g' /etc/apt/sources.list\nRUN apt-get update\n#   genisoimage, libc6-i386 and lib32stdc++6 are required to decompress ndk.\nRUN apt-get install make binutils autoconf automake autotools-dev libtool pkg-config git curl dpkg-dev libxml2-dev genisoimage libc6-i386 lib32stdc++6 -y\nWORKDIR /root/build\nRUN curl -L -O http://dl.google.com/android/ndk/android-ndk-r10d-linux-x86_64.bin \\\n && chmod a+x android-ndk-r10d-linux-x86_64.bin \\\n && ./android-ndk-r10d-linux-x86_64.bin \\\n && rm android-ndk-r10d-linux-x86_64.bin\nWORKDIR /root/build/android-ndk-r10d\nRUN /bin/bash build/tools/make-standalone-toolchain.sh --install-dir=$ANDROID_HOME/toolchain --toolchain=arm-linux-androideabi-4.9 --llvm-version=3.5 --system=linux-x86_64\nWORKDIR /root/build\nRUN git clone https://github.com/tatsuhiro-t/spdylay\nWORKDIR /root/build/spdylay\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --without-libxml2 --disable-src --disable-examples CPPFLAGS=\"-I$PREFIX/include\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-L$PREFIX/lib\" \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O https://www.openssl.org/source/openssl-1.0.2d.tar.gz \\\n && tar xf openssl-1.0.2d.tar.gz \\\n && rm openssl-1.0.2d.tar.gz\nWORKDIR /root/build/openssl-1.0.2d\nRUN export CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi- \\\n && ./Configure --prefix=$PREFIX android \\\n && make \\\n && make install_sw\nWORKDIR /root/build\nRUN curl -L -O http://dist.schmorp.de/libev/libev-4.19.tar.gz \\\n && curl -L -O https://gist.github.com/tatsuhiro-t/48c45f08950f587180ed/raw/80a8f003b5d1091eae497c5995bbaa68096e739b/libev-4.19-android.patch \\\n && tar xf libev-4.19.tar.gz \\\n && rm libev-4.19.tar.gz\nWORKDIR /root/build/libev-4.19\nRUN patch -p1 < ../libev-4.19-android.patch \\\n && ./configure --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --prefix=$PREFIX --disable-shared --enable-static CPPFLAGS=-I$PREFIX/include LDFLAGS=-L$PREFIX/lib \\\n && make install\nWORKDIR /root/build\nRUN curl -L -O http://zlib.net/zlib-1.2.8.tar.gz \\\n && tar xf zlib-1.2.8.tar.gz \\\n && rm zlib-1.2.8.tar.gz\nWORKDIR /root/build/zlib-1.2.8\nRUN HOST=arm-linux-androideabi CC=$HOST-gcc AR=$HOST-ar LD=$HOST-ld RANLIB=$HOST-ranlib STRIP=$HOST-strip ./configure --prefix=$PREFIX --libdir=$PREFIX/lib --includedir=$PREFIX/include --static \\\n && make install\nWORKDIR /root/build\nRUN git clone https://github.com/nghttp2/nghttp2\nWORKDIR /root/build/nghttp2\nRUN autoreconf -i \\\n && ./configure --disable-shared --host=arm-linux-androideabi --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE ` --with-xml-prefix=\"$PREFIX\" --without-libxml2 --disable-python-bindings --disable-examples --disable-threads LIBSPDYLAY_CFLAGS=-I$PREFIX/usr/local/include LIBSPDYLAY_LIBS=\"-L$PREFIX/usr/local/lib -lspdylay\" CPPFLAGS=\"-fPIE -I$PREFIX/include\" CXXFLAGS=\"-fno-strict-aliasing\" PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" LDFLAGS=\"-fPIE -pie -L$PREFIX/lib\" \\\n && make \\\n && arm-linux-androideabi-strip src/nghttpx src/nghttpd src/nghttp\n","originalDockerfileUglifiedHash":"2fafa2e43729b9e56dc749d9f9d5749e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3ea4cf3d4f066666af70b51ac04fef2d9978acca.dockerfile"}