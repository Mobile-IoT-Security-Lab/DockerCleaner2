{"seed":4149615208,"processedDockerfileHash":"688b87ec245b90b873be7e9942ffa5fe","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#\n#   Dockerfile for a ARC masternode\n#   usage: docker run marsmensch/masternode-arc:latest\n#   \n#   how to work with the container\n#   \n#   1) build the container (checkout desired git revision first)\n#   docker build -t \"marsmensch/masternode-arc:latest\" -f docker/Dockerfile_BSD .\n#\n#   2) start the container \n#   docker run -p ${NODE_PORT}:${NODE_PORT} -v $(PWD)/config/arc/arcticcoind.conf:/opt/data \"marsmensch/masternode-arc:latest\"\n#   \n#   3) start the container interactively \n#   docker run --interactive --tty --entrypoint=/bin/bash \"marsmensch/masternode-arc:latest\"\n#\n#   4) standard help\n#   docker run -v $(PWD)/config/arc:/opt/data \"marsmensch/masternode-arc:latest\"\nFROM ubuntu:xenial\nMAINTAINER Florian Maier <contact@marsmenschen.com>\n#  ARG USER_ID\n#  ARG GROUP_ID\n#   SET BUILD VARS TO RUNTIME VARS\n#  ARG var\n#  ENV var=${var}\nENV HOME=\"/bitcoin\"\n#   add user with specified (or default) user/group ids\n#  ENV USER_ID ${USER_ID:-1000}\n#  ENV GROUP_ID ${GROUP_ID:-1000}\nENV CONTAINER_USER=\"masternode\"\nENV PROJECT=\"arcticcoin\"\nENV GIT_URL=\"git://github.com/ArcticCore/arcticcoin.git\"\nENV SVC_VERSION=\"tags/v0.12.1.2\"\nENV HOME_DIR=\"/usr/local/bin\"\nENV NODE_PORT=\"7209\"\nENV REFRESHED_AT=\"2017-07-27\"\n#   add unprivileged user\nRUN adduser --shell /bin/bash --disabled-password --disabled-login --gecos '' ${CONTAINER_USER}\n#   install system packages and compile\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 libtool=2.4.6-0.1 autotools-dev=20150820.1 libcurl4-openssl-dev=7.47.0-1ubuntu2.19 libboost-all-dev=1.58.0.1ubuntu1 libssl-dev=1.0.2g-1ubuntu4.20 libdb++-dev=1:5.3.21~exp1ubuntu2 make=4.1-6 autoconf=2.69-9 automake=1:1.15-4ubuntu1 libtool=2.4.6-0.1 git=1:2.7.4-0ubuntu1.10 apt-utils=1.2.35 libprotobuf-dev=2.6.1-1.3 pkg-config=0.29.1-0ubuntu1 libboost-filesystem-dev=1.58.0.1ubuntu1 libboost-chrono-dev=1.58.0.1ubuntu1 libevent-dev=2.0.21-stable-2ubuntu0.16.04.1 libboost-program-options-dev=1.58.0.1ubuntu1 libgmp-dev=2:6.1.0+dfsg-2 libboost-test-dev=1.58.0.1ubuntu1 libboost-thread-dev=1.58.0.1ubuntu1 -y \\\n && mkdir -p /opt/code/ \\\n && cd /opt/code/ \\\n && git clone ${GIT_URL} ${PROJECT} \\\n && cd /opt/code/${PROJECT} \\\n && git checkout ${SVC_VERSION} \\\n && ./autogen.sh \\\n && ./configure --enable-tests=no --with-incompatible-bdb --enable-glibc-back-compat --with-gui=no CFLAGS=\"-march=native\" LIBS=\"-lcurl -lssl -lcrypto -lz\" \\\n && make \\\n && make install \\\n && apt-get -y remove build-essential libboost-all-dev libboost-atomic-dev libboost-atomic1.58-dev libboost-chrono-dev libboost-chrono1.58-dev libboost-context-dev libboost-context1.58-dev libboost-coroutine-dev libboost-coroutine1.58-dev libboost-date-time-dev libboost-date-time1.58-dev libboost-dev libboost-exception-dev libboost-exception1.58-dev libboost-filesystem-dev libboost-filesystem1.58-dev libboost-graph-dev libboost-graph-parallel-dev libboost-graph-parallel1.58-dev libboost-graph1.58-dev libboost-iostreams-dev libboost-iostreams1.58-dev libboost-locale-dev libboost-locale1.58-dev libboost-log-dev libboost-log1.58-dev libboost-log1.58.0 libboost-math-dev libboost-math1.58-dev libboost-math1.58.0 libboost-mpi-dev libboost-mpi-python-dev libboost-mpi-python1.58-dev libboost-mpi1.58-dev libboost-program-options-dev libboost-program-options1.58-dev libboost-python-dev libboost-python1.58-dev libboost-random-dev libboost-random1.58-dev libboost-regex-dev libboost-regex1.58-dev libboost-serialization-dev libboost-serialization1.58-dev libboost-signals-dev libboost-signals1.58-dev libboost-system-dev libboost-system1.58-dev libboost-test-dev libboost-test1.58-dev libboost-thread-dev libboost-thread1.58-dev libboost-timer-dev libboost-timer1.58-dev libboost-tools-dev libboost-wave-dev libboost-wave1.58-dev libboost1.58-dev libboost1.58-tools-dev libc6-dev libdb5.3++-dev libdb5.3-dev libevent-dev libexpat1-dev libgmp-dev libibverbs-dev libicu-dev libltdl-dev libnuma-dev libopenmpi-dev libprotobuf-dev libpython-dev libpython2.7-dev libssl-dev mpi-default-dev python-dev python2.7-dev zlib1g-dev \\\n && apt-get -y autoremove \\\n && rm -rf /opt/code \\\n && rm -rf /var/lib/apt/lists/*\n#   EXPOSE the masternode port\nEXPOSE ${NODE_PORT}\nRUN chown -R ${CONTAINER_USER} ${HOME_DIR}\nUSER ${CONTAINER_USER}\nWORKDIR ${HOME_DIR}\n#   start command\nENTRYPOINT [\"/usr/local/bin/arcticcoind\", \"screen\", \"-A\", \"-m\", \"-d\", \"-S\", \"daemon\"]\nCMD [\"--help\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Dockerfile for a ARC masternode\n#  usage: docker run marsmensch/masternode-arc:latest\n#  \n#  how to work with the container\n#  \n#  1) build the container (checkout desired git revision first)\n#  docker build -t \"marsmensch/masternode-arc:latest\" -f docker/Dockerfile_BSD .\n#\n#  2) start the container \n#  docker run -p ${NODE_PORT}:${NODE_PORT} -v $(PWD)/config/arc/arcticcoind.conf:/opt/data \"marsmensch/masternode-arc:latest\"\n#  \n#  3) start the container interactively \n#  docker run --interactive --tty --entrypoint=/bin/bash \"marsmensch/masternode-arc:latest\"\n#\n#  4) standard help\n#  docker run -v $(PWD)/config/arc:/opt/data \"marsmensch/masternode-arc:latest\"\nFROM ubuntu:xenial\nMAINTAINER Florian Maier <contact@marsmenschen.com>\n# ARG USER_ID\n# ARG GROUP_ID\n#  SET BUILD VARS TO RUNTIME VARS\n# ARG var\n# ENV var=${var}\nENV HOME=\"/bitcoin\"\n#  add user with specified (or default) user/group ids\n# ENV USER_ID ${USER_ID:-1000}\n# ENV GROUP_ID ${GROUP_ID:-1000}\nENV CONTAINER_USER=\"masternode\"\nENV PROJECT=\"arcticcoin\"\nENV GIT_URL=\"git://github.com/ArcticCore/arcticcoin.git\"\nENV SVC_VERSION=\"tags/v0.12.1.2\"\nENV HOME_DIR=\"/usr/local/bin\"\nENV NODE_PORT=\"7209\"\nENV REFRESHED_AT=\"2017-07-27\"\n#  add unprivileged user\nRUN adduser --shell /bin/bash --disabled-password --disabled-login --gecos '' ${CONTAINER_USER}\n#  install system packages and compile\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends build-essential libtool autotools-dev libcurl4-openssl-dev libboost-all-dev libssl-dev libdb++-dev make autoconf automake libtool git apt-utils libprotobuf-dev pkg-config libboost-filesystem-dev libboost-chrono-dev libevent-dev libboost-program-options-dev libgmp-dev libboost-test-dev libboost-thread-dev -y \\\n && mkdir -p /opt/code/ \\\n && cd /opt/code/ \\\n && git clone ${GIT_URL} ${PROJECT} \\\n && cd /opt/code/${PROJECT} \\\n && git checkout ${SVC_VERSION} \\\n && ./autogen.sh \\\n && ./configure --enable-tests=no --with-incompatible-bdb --enable-glibc-back-compat --with-gui=no CFLAGS=\"-march=native\" LIBS=\"-lcurl -lssl -lcrypto -lz\" \\\n && make \\\n && make install \\\n && apt-get -y remove build-essential libboost-all-dev libboost-atomic-dev libboost-atomic1.58-dev libboost-chrono-dev libboost-chrono1.58-dev libboost-context-dev libboost-context1.58-dev libboost-coroutine-dev libboost-coroutine1.58-dev libboost-date-time-dev libboost-date-time1.58-dev libboost-dev libboost-exception-dev libboost-exception1.58-dev libboost-filesystem-dev libboost-filesystem1.58-dev libboost-graph-dev libboost-graph-parallel-dev libboost-graph-parallel1.58-dev libboost-graph1.58-dev libboost-iostreams-dev libboost-iostreams1.58-dev libboost-locale-dev libboost-locale1.58-dev libboost-log-dev libboost-log1.58-dev libboost-log1.58.0 libboost-math-dev libboost-math1.58-dev libboost-math1.58.0 libboost-mpi-dev libboost-mpi-python-dev libboost-mpi-python1.58-dev libboost-mpi1.58-dev libboost-program-options-dev libboost-program-options1.58-dev libboost-python-dev libboost-python1.58-dev libboost-random-dev libboost-random1.58-dev libboost-regex-dev libboost-regex1.58-dev libboost-serialization-dev libboost-serialization1.58-dev libboost-signals-dev libboost-signals1.58-dev libboost-system-dev libboost-system1.58-dev libboost-test-dev libboost-test1.58-dev libboost-thread-dev libboost-thread1.58-dev libboost-timer-dev libboost-timer1.58-dev libboost-tools-dev libboost-wave-dev libboost-wave1.58-dev libboost1.58-dev libboost1.58-tools-dev libc6-dev libdb5.3++-dev libdb5.3-dev libevent-dev libexpat1-dev libgmp-dev libibverbs-dev libicu-dev libltdl-dev libnuma-dev libopenmpi-dev libprotobuf-dev libpython-dev libpython2.7-dev libssl-dev mpi-default-dev python-dev python2.7-dev zlib1g-dev \\\n && apt-get -y autoremove \\\n && rm -rf /opt/code \\\n && rm -rf /var/lib/apt/lists/*\n#  EXPOSE the masternode port\nEXPOSE ${NODE_PORT}\nRUN chown -R ${CONTAINER_USER} ${HOME_DIR}\nUSER ${CONTAINER_USER}\nWORKDIR ${HOME_DIR}\n#  start command\nENTRYPOINT [\"/usr/local/bin/arcticcoind\", \"screen\", \"-A\", \"-m\", \"-d\", \"-S\", \"daemon\"]\nCMD [\"--help\"]\n","injectedSmells":[],"originalDockerfileHash":"5c8023faf542612bae131237f7561a68","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Dockerfile for a ARC masternode\n#   usage: docker run marsmensch/masternode-arc:latest\n#   \n#   how to work with the container\n#   \n#   1) build the container (checkout desired git revision first)\n#   docker build -t \"marsmensch/masternode-arc:latest\" -f docker/Dockerfile_BSD .\n#\n#   2) start the container \n#   docker run -p ${NODE_PORT}:${NODE_PORT} -v $(PWD)/config/arc/arcticcoind.conf:/opt/data \"marsmensch/masternode-arc:latest\"\n#   \n#   3) start the container interactively \n#   docker run --interactive --tty --entrypoint=/bin/bash \"marsmensch/masternode-arc:latest\"\n#\n#   4) standard help\n#   docker run -v $(PWD)/config/arc:/opt/data \"marsmensch/masternode-arc:latest\"\nFROM ubuntu:xenial\nMAINTAINER Florian Maier <contact@marsmenschen.com>\n#  ARG USER_ID\n#  ARG GROUP_ID\n#   SET BUILD VARS TO RUNTIME VARS\n#  ARG var\n#  ENV var=${var}\nENV HOME=\"/bitcoin\"\n#   add user with specified (or default) user/group ids\n#  ENV USER_ID ${USER_ID:-1000}\n#  ENV GROUP_ID ${GROUP_ID:-1000}\nENV CONTAINER_USER=\"masternode\"\nENV PROJECT=\"arcticcoin\"\nENV GIT_URL=\"git://github.com/ArcticCore/arcticcoin.git\"\nENV SVC_VERSION=\"tags/v0.12.1.2\"\nENV HOME_DIR=\"/usr/local/bin\"\nENV NODE_PORT=\"7209\"\nENV REFRESHED_AT=\"2017-07-27\"\n#   add unprivileged user\nRUN adduser --shell /bin/bash --disabled-password --disabled-login --gecos '' ${CONTAINER_USER}\n#   install system packages and compile\nRUN apt-get update \\\n && apt-get -y upgrade \\\n && apt-get install --no-install-recommends build-essential libtool autotools-dev libcurl4-openssl-dev libboost-all-dev libssl-dev libdb++-dev make autoconf automake libtool git apt-utils libprotobuf-dev pkg-config libboost-filesystem-dev libboost-chrono-dev libevent-dev libboost-program-options-dev libgmp-dev libboost-test-dev libboost-thread-dev -y \\\n && mkdir -p /opt/code/ \\\n && cd /opt/code/ \\\n && git clone ${GIT_URL} ${PROJECT} \\\n && cd /opt/code/${PROJECT} \\\n && git checkout ${SVC_VERSION} \\\n && ./autogen.sh \\\n && ./configure --enable-tests=no --with-incompatible-bdb --enable-glibc-back-compat --with-gui=no CFLAGS=\"-march=native\" LIBS=\"-lcurl -lssl -lcrypto -lz\" \\\n && make \\\n && make install \\\n && apt-get -y remove build-essential libboost-all-dev libboost-atomic-dev libboost-atomic1.58-dev libboost-chrono-dev libboost-chrono1.58-dev libboost-context-dev libboost-context1.58-dev libboost-coroutine-dev libboost-coroutine1.58-dev libboost-date-time-dev libboost-date-time1.58-dev libboost-dev libboost-exception-dev libboost-exception1.58-dev libboost-filesystem-dev libboost-filesystem1.58-dev libboost-graph-dev libboost-graph-parallel-dev libboost-graph-parallel1.58-dev libboost-graph1.58-dev libboost-iostreams-dev libboost-iostreams1.58-dev libboost-locale-dev libboost-locale1.58-dev libboost-log-dev libboost-log1.58-dev libboost-log1.58.0 libboost-math-dev libboost-math1.58-dev libboost-math1.58.0 libboost-mpi-dev libboost-mpi-python-dev libboost-mpi-python1.58-dev libboost-mpi1.58-dev libboost-program-options-dev libboost-program-options1.58-dev libboost-python-dev libboost-python1.58-dev libboost-random-dev libboost-random1.58-dev libboost-regex-dev libboost-regex1.58-dev libboost-serialization-dev libboost-serialization1.58-dev libboost-signals-dev libboost-signals1.58-dev libboost-system-dev libboost-system1.58-dev libboost-test-dev libboost-test1.58-dev libboost-thread-dev libboost-thread1.58-dev libboost-timer-dev libboost-timer1.58-dev libboost-tools-dev libboost-wave-dev libboost-wave1.58-dev libboost1.58-dev libboost1.58-tools-dev libc6-dev libdb5.3++-dev libdb5.3-dev libevent-dev libexpat1-dev libgmp-dev libibverbs-dev libicu-dev libltdl-dev libnuma-dev libopenmpi-dev libprotobuf-dev libpython-dev libpython2.7-dev libssl-dev mpi-default-dev python-dev python2.7-dev zlib1g-dev \\\n && apt-get -y autoremove \\\n && rm -rf /opt/code \\\n && rm -rf /var/lib/apt/lists/*\n#   EXPOSE the masternode port\nEXPOSE ${NODE_PORT}\nRUN chown -R ${CONTAINER_USER} ${HOME_DIR}\nUSER ${CONTAINER_USER}\nWORKDIR ${HOME_DIR}\n#   start command\nENTRYPOINT [\"/usr/local/bin/arcticcoind\", \"screen\", \"-A\", \"-m\", \"-d\", \"-S\", \"daemon\"]\nCMD [\"--help\"]\n","originalDockerfileUglifiedHash":"3a4ffdfe74e15bf7a47e7b2b6d097884","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/81b6244f60adddddc5305df1bedb27877fcaf9d1.dockerfile"}