{"seed":1631106504,"processedDockerfileHash":"4e762b0f05f4a0162cc7fd6df9584dc3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   Author: Marco Bonvini\n#   email: bonvini.m@gmail.com\n#\nFROM ubuntu:18.04\nMAINTAINER MarcoBonvini bonvini.m@gmail.com\n#   Avoid interaction\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   =========== Basic Configuration ======================================================\n#   Update the system\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends sudo=1.8.21p2-3ubuntu1.5 build-essential=12.4ubuntu1 git=1:2.17.1-1ubuntu0.17 python=2.7.15~rc1-1 python-dev=2.7.15~rc1-1 python-setuptools=39.0.1-2ubuntu0.1 make=4.1-9.1ubuntu1 g++=4:7.4.0-1ubuntu2.3 cmake=3.10.2-1ubuntu2.18.04.2 gfortran=4:7.4.0-1ubuntu2.3 ipython=5.5.0-1 swig=3.0.12-1 ant=1.10.5-3~18.04 python-numpy=1:1.13.3-2ubuntu1 python-scipy=0.19.1-2ubuntu1 python-matplotlib=2.1.1-2ubuntu3 cython=0.26.1-0.4 python-lxml=4.2.1-1ubuntu0.6 python-nose=1.3.7-3 python-jpype=0.6.2+dfsg-2 libboost-dev=1.65.1.0ubuntu1 jcc=2.22-1 git=1:2.17.1-1ubuntu0.17 subversion=1.9.7-4ubuntu1.1 wget=1.19.4-1ubuntu2.2 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 pkg-config=0.29.1-0ubuntu2 clang=1:6.0-41~exp5~ubuntu1 -y\n#   ========== Install pip for managing python packages ==================================\nRUN apt-get install --no-install-recommends python-pip=9.0.1-2.3~ubuntu1.18.04.8 python-lxml=4.2.1-1ubuntu0.6 -y \\\n && pip install cython==0.29.34\n#   ========== Create an user and environmental variables associated to it ===============\nRUN adduser --disabled-password --gecos '' docker\nRUN adduser docker sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   ========= Add folders that will contains code before and after installation ==========\nRUN mkdir -p /home/docker/to_install \\\n && mkdir -p /home/docker/installed/Ipopt\n#   ========= Install JAVA ===============================================================\nRUN apt-get install --no-install-recommends openjdk-8-jdk=8u362-ga-0ubuntu1~18.04.1 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Define JAVA_HOME envirponmental variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /root/.bashrc \\\n && echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /home/docker/.bashrc\n#   ======== Install BLAS and LAPACK =====================================================\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends apt-utils=1.6.14 -y \\\n && apt-get install --no-install-recommends libblas-dev=3.7.1-4ubuntu1 liblapack-dev=3.7.1-4ubuntu1 -y\n#   ======== Install numpy, scipy, Matplotlib ============================================\nRUN apt-get install --no-install-recommends pkgconf=0.9.12-6 libpng-dev=1.6.34-1ubuntu0.18.04.2 libfreetype6-dev=2.8.1-2ubuntu2.2 -y \\\n && pip install numpy==1.24.2 \\\n && apt-get install --no-install-recommends python-matplotlib=2.1.1-2ubuntu3 -y \\\n && pip install scipy==1.10.1\n#   ======== Start IPOPT installation ====================================================\n#   Retrieve and copy all the dependencies needed by Ipopt\nWORKDIR /home/docker/to_install/Ipopt\nRUN wget http://www.coin-or.org/download/source/Ipopt/Ipopt-3.12.4.tgz\nRUN tar xvf ./Ipopt-3.12.4.tgz\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Blas\nRUN ./get.Blas\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Lapack\nRUN ./get.Lapack\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Mumps\nRUN ./get.Mumps\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Metis\nRUN ./get.Metis\n#   Configure and compile Ipopt\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/\nRUN mkdir build\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/build\nRUN ../configure --prefix=/home/docker/installed/Ipopt \\\n && make \\\n && make install\n#   ======== Start JModelica.org installation ===========================================0\n#   Intall autoconf which is called by the casADi installation\nRUN apt-get install --no-install-recommends autoconf=2.69-11 -y\n#   Checkout the JModelica.org source code\nRUN mkdir -p /home/docker/installed/JModelica\n#   Thanks to Marcus Fuchs\n#   https://github.com/mbonvini/ModelicaInAction/pull/4/commits/1220d7c680957943bc17ad55ff009488d0887ce0\n#   This needs a nasty hack for more modern versions, since assimulo does not fit in svn ...\nWORKDIR /home/docker/to_install\nRUN svn co https://svn.jmodelica.org/trunk JModelica.org ; exit 0\nWORKDIR /home/docker/to_install/JModelica.org/external\nRUN svn co https://svn.jmodelica.org/assimulo/trunk Assimulo\nWORKDIR /home/docker/to_install/JModelica.org\nRUN mkdir build\nWORKDIR /home/docker/to_install/JModelica.org/build\nRUN ../configure --prefix=/home/docker/installed/JModelica --with-ipopt=/home/docker/installed/Ipopt\nRUN make \\\n && make install \\\n && make install_casadi\n#   Define the environmental variables needed by JModelica\n#   JModelica.org supports the following environment variables:\n#\n#   - JMODELICA_HOME containing the path to the JModelica.org installation\n#     directory (again, without spaces or ~ in the path).\n#   - PYTHONPATH containing the path to the directory $JMODELICA_HOME/Python.\n#   - JAVA_HOME containing the path to a Java JRE or SDK installation.\n#   - IPOPT_HOME containing the path to an Ipopt installation directory.\n#   - LD_LIBRARY_PATH containing the path to the $IPOPT_HOME/lib directory\n#     (Linux only.)\n#   - MODELICAPATH containing a sequence of paths representing directories\n#     where Modelica libraries are located, separated by colons.\nENV JMODELICA_HOME=\"/home/docker/installed/JModelica\"\nENV IPOPT_HOME=\"/home/docker/installed/Ipopt\"\nENV CPPAD_HOME=\"/home/docker/installed/JModelica/ThirdParty/CppAD/\"\nENV SUNDIALS_HOME=\"/home/docker/installed/JModelica/ThirdParty/Sundials\"\nENV PYTHONPATH=\"/home/docker/installed/JModelica/Python/:\"\nENV LD_LIBRARY_PATH=\"/home/docker/installed/Ipopt/lib/:/home/docker/installed/JModelica/ThirdParty/Sundials/lib:/home/docker/installed/JModelica/ThirdParty/CasADi/lib\"\nENV SEPARATE_PROCESS_JVM=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nENV MODELICAPATH=\"/home/docker/installed/JModelica/ThirdParty/MSL:/home/docker/modelica\"\n#   ============ Expose ports ============================================================\nEXPOSE 8888/tcp\n#   ============ Install IPython/Jupyter notebook ========================================\nRUN apt-get install --no-install-recommends ipython=5.5.0-1 -y\nRUN pip install jupyter==1.0.0\n#   ============ Set Jupyter password ====================================================\nRUN mkdir -p /home/docker/.jupyter \\\n && jupyter notebook --generate-config\nRUN python -c 'import json; from notebook.auth import passwd; open(\"/home/docker/.jupyter/jupyter_notebook_config.json\", \"w\").write(json.dumps({\"NotebookApp\":{\"password\": passwd(\"modelicainaction\")}}));'\n#   ============ Set some environmental vars and change user =============================\nUSER docker\nRUN mkdir /home/docker/modelica \\\n && mkdir /home/docker/ipynotebooks\nENV USER=\"docker\"\nENV DISPLAY=\":0.0\"\nWORKDIR /home/docker/\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Author: Marco Bonvini\n#  email: bonvini.m@gmail.com\n#\nFROM ubuntu:18.04\nMAINTAINER MarcoBonvini bonvini.m@gmail.com\n#  Avoid interaction\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  =========== Basic Configuration ======================================================\n#  Update the system\nRUN apt-get update -y \\\n && apt-get install sudo build-essential git python python-dev python-setuptools make g++ cmake gfortran ipython swig ant python-numpy python-scipy python-matplotlib cython python-lxml python-nose python-jpype libboost-dev jcc git subversion wget zlib1g-dev pkg-config clang -y\n#  ========== Install pip for managing python packages ==================================\nRUN apt-get install python-pip python-lxml -y \\\n && pip install cython\n#  ========== Create an user and environmental variables associated to it ===============\nRUN adduser --disabled-password --gecos '' docker\nRUN adduser docker sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#  ========= Add folders that will contains code before and after installation ==========\nRUN mkdir -p /home/docker/to_install \\\n && mkdir -p /home/docker/installed/Ipopt\n#  ========= Install JAVA ===============================================================\nRUN apt-get install openjdk-8-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Define JAVA_HOME envirponmental variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /root/.bashrc \\\n && echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /home/docker/.bashrc\n#  ======== Install BLAS and LAPACK =====================================================\nRUN apt-get update -y \\\n && apt-get install apt-utils -y \\\n && apt-get install libblas-dev liblapack-dev -y\n#  ======== Install numpy, scipy, Matplotlib ============================================\nRUN apt-get install pkgconf libpng-dev libfreetype6-dev -y \\\n && pip install numpy \\\n && apt-get install python-matplotlib -y \\\n && pip install scipy\n#  ======== Start IPOPT installation ====================================================\n#  Retrieve and copy all the dependencies needed by Ipopt\nWORKDIR /home/docker/to_install/Ipopt\nRUN wget http://www.coin-or.org/download/source/Ipopt/Ipopt-3.12.4.tgz\nRUN tar xvf ./Ipopt-3.12.4.tgz\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Blas\nRUN ./get.Blas\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Lapack\nRUN ./get.Lapack\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Mumps\nRUN ./get.Mumps\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Metis\nRUN ./get.Metis\n#  Configure and compile Ipopt\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/\nRUN mkdir build\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/build\nRUN ../configure --prefix=/home/docker/installed/Ipopt \\\n && make \\\n && make install\n#  ======== Start JModelica.org installation ===========================================0\n#  Intall autoconf which is called by the casADi installation\nRUN apt-get install autoconf -y\n#  Checkout the JModelica.org source code\nRUN mkdir -p /home/docker/installed/JModelica\n#  Thanks to Marcus Fuchs\n#  https://github.com/mbonvini/ModelicaInAction/pull/4/commits/1220d7c680957943bc17ad55ff009488d0887ce0\n#  This needs a nasty hack for more modern versions, since assimulo does not fit in svn ...\nWORKDIR /home/docker/to_install\nRUN svn co https://svn.jmodelica.org/trunk JModelica.org ; exit 0\nWORKDIR /home/docker/to_install/JModelica.org/external\nRUN svn co https://svn.jmodelica.org/assimulo/trunk Assimulo\nWORKDIR /home/docker/to_install/JModelica.org\nRUN mkdir build\nWORKDIR /home/docker/to_install/JModelica.org/build\nRUN ../configure --prefix=/home/docker/installed/JModelica --with-ipopt=/home/docker/installed/Ipopt\nRUN make \\\n && make install \\\n && make install_casadi\n#  Define the environmental variables needed by JModelica\n#  JModelica.org supports the following environment variables:\n#\n#  - JMODELICA_HOME containing the path to the JModelica.org installation\n#    directory (again, without spaces or ~ in the path).\n#  - PYTHONPATH containing the path to the directory $JMODELICA_HOME/Python.\n#  - JAVA_HOME containing the path to a Java JRE or SDK installation.\n#  - IPOPT_HOME containing the path to an Ipopt installation directory.\n#  - LD_LIBRARY_PATH containing the path to the $IPOPT_HOME/lib directory\n#    (Linux only.)\n#  - MODELICAPATH containing a sequence of paths representing directories\n#    where Modelica libraries are located, separated by colons.\nENV JMODELICA_HOME=\"/home/docker/installed/JModelica\"\nENV IPOPT_HOME=\"/home/docker/installed/Ipopt\"\nENV CPPAD_HOME=\"/home/docker/installed/JModelica/ThirdParty/CppAD/\"\nENV SUNDIALS_HOME=\"/home/docker/installed/JModelica/ThirdParty/Sundials\"\nENV PYTHONPATH=\"/home/docker/installed/JModelica/Python/:\"\nENV LD_LIBRARY_PATH=\"/home/docker/installed/Ipopt/lib/:/home/docker/installed/JModelica/ThirdParty/Sundials/lib:/home/docker/installed/JModelica/ThirdParty/CasADi/lib\"\nENV SEPARATE_PROCESS_JVM=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nENV MODELICAPATH=\"/home/docker/installed/JModelica/ThirdParty/MSL:/home/docker/modelica\"\n#  ============ Expose ports ============================================================\nEXPOSE 8888/tcp\n#  ============ Install IPython/Jupyter notebook ========================================\nRUN apt-get install ipython -y\nRUN pip install jupyter\n#  ============ Set Jupyter password ====================================================\nRUN mkdir -p /home/docker/.jupyter \\\n && jupyter notebook --generate-config\nRUN python -c 'import json; from notebook.auth import passwd; open(\"/home/docker/.jupyter/jupyter_notebook_config.json\", \"w\").write(json.dumps({\"NotebookApp\":{\"password\": passwd(\"modelicainaction\")}}));'\n#  ============ Set some environmental vars and change user =============================\nUSER docker\nRUN mkdir /home/docker/modelica \\\n && mkdir /home/docker/ipynotebooks\nENV USER=\"docker\"\nENV DISPLAY=\":0.0\"\nWORKDIR /home/docker/\n","injectedSmells":[],"originalDockerfileHash":"8646e529c77427246502b03e6138b5c8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Author: Marco Bonvini\n#   email: bonvini.m@gmail.com\n#\nFROM ubuntu:18.04\nMAINTAINER MarcoBonvini bonvini.m@gmail.com\n#   Avoid interaction\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   =========== Basic Configuration ======================================================\n#   Update the system\nRUN apt-get update -y \\\n && apt-get install sudo build-essential git python python-dev python-setuptools make g++ cmake gfortran ipython swig ant python-numpy python-scipy python-matplotlib cython python-lxml python-nose python-jpype libboost-dev jcc git subversion wget zlib1g-dev pkg-config clang -y\n#   ========== Install pip for managing python packages ==================================\nRUN apt-get install python-pip python-lxml -y \\\n && pip install cython\n#   ========== Create an user and environmental variables associated to it ===============\nRUN adduser --disabled-password --gecos '' docker\nRUN adduser docker sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n#   ========= Add folders that will contains code before and after installation ==========\nRUN mkdir -p /home/docker/to_install \\\n && mkdir -p /home/docker/installed/Ipopt\n#   ========= Install JAVA ===============================================================\nRUN apt-get install openjdk-8-jdk -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Define JAVA_HOME envirponmental variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nRUN echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /root/.bashrc \\\n && echo \"export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\" >> /home/docker/.bashrc\n#   ======== Install BLAS and LAPACK =====================================================\nRUN apt-get update -y \\\n && apt-get install apt-utils -y \\\n && apt-get install libblas-dev liblapack-dev -y\n#   ======== Install numpy, scipy, Matplotlib ============================================\nRUN apt-get install pkgconf libpng-dev libfreetype6-dev -y \\\n && pip install numpy \\\n && apt-get install python-matplotlib -y \\\n && pip install scipy\n#   ======== Start IPOPT installation ====================================================\n#   Retrieve and copy all the dependencies needed by Ipopt\nWORKDIR /home/docker/to_install/Ipopt\nRUN wget http://www.coin-or.org/download/source/Ipopt/Ipopt-3.12.4.tgz\nRUN tar xvf ./Ipopt-3.12.4.tgz\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Blas\nRUN ./get.Blas\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Lapack\nRUN ./get.Lapack\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Mumps\nRUN ./get.Mumps\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/ThirdParty/Metis\nRUN ./get.Metis\n#   Configure and compile Ipopt\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/\nRUN mkdir build\nWORKDIR /home/docker/to_install/Ipopt/Ipopt-3.12.4/build\nRUN ../configure --prefix=/home/docker/installed/Ipopt \\\n && make \\\n && make install\n#   ======== Start JModelica.org installation ===========================================0\n#   Intall autoconf which is called by the casADi installation\nRUN apt-get install autoconf -y\n#   Checkout the JModelica.org source code\nRUN mkdir -p /home/docker/installed/JModelica\n#   Thanks to Marcus Fuchs\n#   https://github.com/mbonvini/ModelicaInAction/pull/4/commits/1220d7c680957943bc17ad55ff009488d0887ce0\n#   This needs a nasty hack for more modern versions, since assimulo does not fit in svn ...\nWORKDIR /home/docker/to_install\nRUN svn co https://svn.jmodelica.org/trunk JModelica.org ; exit 0\nWORKDIR /home/docker/to_install/JModelica.org/external\nRUN svn co https://svn.jmodelica.org/assimulo/trunk Assimulo\nWORKDIR /home/docker/to_install/JModelica.org\nRUN mkdir build\nWORKDIR /home/docker/to_install/JModelica.org/build\nRUN ../configure --prefix=/home/docker/installed/JModelica --with-ipopt=/home/docker/installed/Ipopt\nRUN make \\\n && make install \\\n && make install_casadi\n#   Define the environmental variables needed by JModelica\n#   JModelica.org supports the following environment variables:\n#\n#   - JMODELICA_HOME containing the path to the JModelica.org installation\n#     directory (again, without spaces or ~ in the path).\n#   - PYTHONPATH containing the path to the directory $JMODELICA_HOME/Python.\n#   - JAVA_HOME containing the path to a Java JRE or SDK installation.\n#   - IPOPT_HOME containing the path to an Ipopt installation directory.\n#   - LD_LIBRARY_PATH containing the path to the $IPOPT_HOME/lib directory\n#     (Linux only.)\n#   - MODELICAPATH containing a sequence of paths representing directories\n#     where Modelica libraries are located, separated by colons.\nENV JMODELICA_HOME=\"/home/docker/installed/JModelica\"\nENV IPOPT_HOME=\"/home/docker/installed/Ipopt\"\nENV CPPAD_HOME=\"/home/docker/installed/JModelica/ThirdParty/CppAD/\"\nENV SUNDIALS_HOME=\"/home/docker/installed/JModelica/ThirdParty/Sundials\"\nENV PYTHONPATH=\"/home/docker/installed/JModelica/Python/:\"\nENV LD_LIBRARY_PATH=\"/home/docker/installed/Ipopt/lib/:/home/docker/installed/JModelica/ThirdParty/Sundials/lib:/home/docker/installed/JModelica/ThirdParty/CasADi/lib\"\nENV SEPARATE_PROCESS_JVM=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nENV MODELICAPATH=\"/home/docker/installed/JModelica/ThirdParty/MSL:/home/docker/modelica\"\n#   ============ Expose ports ============================================================\nEXPOSE 8888/tcp\n#   ============ Install IPython/Jupyter notebook ========================================\nRUN apt-get install ipython -y\nRUN pip install jupyter\n#   ============ Set Jupyter password ====================================================\nRUN mkdir -p /home/docker/.jupyter \\\n && jupyter notebook --generate-config\nRUN python -c 'import json; from notebook.auth import passwd; open(\"/home/docker/.jupyter/jupyter_notebook_config.json\", \"w\").write(json.dumps({\"NotebookApp\":{\"password\": passwd(\"modelicainaction\")}}));'\n#   ============ Set some environmental vars and change user =============================\nUSER docker\nRUN mkdir /home/docker/modelica \\\n && mkdir /home/docker/ipynotebooks\nENV USER=\"docker\"\nENV DISPLAY=\":0.0\"\nWORKDIR /home/docker/\n","originalDockerfileUglifiedHash":"99d924655e23a21463e09805219b76ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d6de3c6e31555b7bb20e6922d506dea47a590e67.dockerfile"}