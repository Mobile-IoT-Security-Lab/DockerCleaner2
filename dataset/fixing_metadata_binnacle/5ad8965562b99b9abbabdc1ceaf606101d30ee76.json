{"seed":4009698449,"processedDockerfileHash":"9c4691a9b735a6de542d98eb9cc235df","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://github.com/yeasy/docker-hyperledger-fabric\n#\n#   Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n#   * fabric-peer\n#   * fabric-orderer\n#   * fabric-ca\n#   * cryptogen\n#   * configtxgen\n#   * configtxlator\n#   * chaintools\n#   * gotools\n#   If you only need quickly deploy a fabric network, please see\n#   * yeasy/hyperledger-fabric-peer\n#   * yeasy/hyperledger-fabric-orderer\n#   * yeasy/hyperledger-fabric-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.10\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#   fabric-orderer\nEXPOSE 7050/tcp\n#   fabric-peers\nEXPOSE 7051/tcp 7052/tcp 7053/tcp\n#   fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#   Architecture of the node\nENV ARCH=\"amd64\"\n#   version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.13\"\n#   BASE_VERSION is required in makefile as the base release number\nENV BASE_VERSION=\"1.3.0\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#   PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.3.0\"\n#   generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#   peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\n#   peer env\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#   orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#   ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"/root/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /chaincode/input /chaincode/output /var/hyperledger/fabric-ca-server\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils python-dev -y \\\n && apt-get install --no-install-recommends libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install --no-install-recommends python-pip -y \\\n && apt-get install --no-install-recommends vim tree jq unzip -y \\\n && pip install pip==9.0.1 --upgrade \\\n && pip install behave==1.2.6 nose==1.3.7 docker-compose==1.29.2 \\\n && pip install pyinotify==0.9.6 \\\n && rm -rf /var/cache/apt\n#   Install yq to update config\nRUN go get gopkg.in/mikefarah/yq.v2 \\\n && ln -s $GOPATH/bin/yq.v2 /usr/local/bin/yq\n#   Install chaintool\n#  RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#   Install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#   Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#   Install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n#   Install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n#  ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n#   Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#   This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#   Useful scripts for quickly compiling local code\nCOPY scripts/ /tmp/\n#   Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n#   Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://github.com/yeasy/docker-hyperledger-fabric\n#\n#  Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n#  * fabric-peer\n#  * fabric-orderer\n#  * fabric-ca\n#  * cryptogen\n#  * configtxgen\n#  * configtxlator\n#  * chaintools\n#  * gotools\n#  If you only need quickly deploy a fabric network, please see\n#  * yeasy/hyperledger-fabric-peer\n#  * yeasy/hyperledger-fabric-orderer\n#  * yeasy/hyperledger-fabric-ca\n#  Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#  Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.10\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#  fabric-orderer\nEXPOSE 7050/tcp\n#  fabric-peers\nEXPOSE 7051/tcp 7052/tcp 7053/tcp\n#  fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#  Architecture of the node\nENV ARCH=\"amd64\"\n#  version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.13\"\n#  BASE_VERSION is required in makefile as the base release number\nENV BASE_VERSION=\"1.3.0\"\n#  version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#  PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.3.0\"\n#  generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#  for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#  peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\n#  peer env\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#  orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#  ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"/root/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /chaincode/input /chaincode/output /var/hyperledger/fabric-ca-server\n#  Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install vim tree jq unzip -y \\\n && pip install pip==9.0.1 --upgrade \\\n && pip install behave nose docker-compose \\\n && pip install pyinotify \\\n && rm -rf /var/cache/apt\n#  Install yq to update config\nRUN go get gopkg.in/mikefarah/yq.v2 \\\n && ln -s $GOPATH/bin/yq.v2 /usr/local/bin/yq\n#  Install chaintool\n# RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#  install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#  Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#  Install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#  Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#  Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#  Install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n#  Install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n# ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n#  Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#  This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#  The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#  Useful scripts for quickly compiling local code\nADD scripts/ /tmp/\n#  Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n#  Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#  This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","injectedSmells":[],"originalDockerfileHash":"d06b39565915d447481d2dd1eeff2491","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://github.com/yeasy/docker-hyperledger-fabric\n#\n#   Dockerfile for Hyperledger fabric all-in-one development and experiments, including:\n#   * fabric-peer\n#   * fabric-orderer\n#   * fabric-ca\n#   * cryptogen\n#   * configtxgen\n#   * configtxlator\n#   * chaintools\n#   * gotools\n#   If you only need quickly deploy a fabric network, please see\n#   * yeasy/hyperledger-fabric-peer\n#   * yeasy/hyperledger-fabric-orderer\n#   * yeasy/hyperledger-fabric-ca\n#   Workdir is set to $GOPATH/src/github.com/hyperledger/fabric\n#   Data is stored under /var/hyperledger/db and /var/hyperledger/production\nFROM golang:1.10\nLABEL maintainer=\"\\\"Baohua Yang <yangbaohua@gmail.com>\\\"\"\n#   fabric-orderer\nEXPOSE 7050/tcp\n#   fabric-peers\nEXPOSE 7051/tcp 7052/tcp 7053/tcp\n#   fabric-ca-server RESTful\nEXPOSE 7054/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Only useful for this Dockerfile\nENV FABRIC_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric\" \\\n    FABRIC_CA_ROOT=\"$GOPATH/src/github.com/hyperledger/fabric-ca\"\nENV CHAINTOOL_RELEASE=\"1.1.2\"\n#   Architecture of the node\nENV ARCH=\"amd64\"\n#   version for the base images (baseos, baseimage, ccenv, etc.), used in core.yaml as BaseVersion\nENV BASEIMAGE_RELEASE=\"0.4.13\"\n#   BASE_VERSION is required in makefile as the base release number\nENV BASE_VERSION=\"1.3.0\"\n#   version for the peer/orderer binaries, the community version tracks the hash value like 1.0.0-snapshot-51b7e85\n#   PROJECT_VERSION is required in core.yaml to build image for cc container\nENV PROJECT_VERSION=\"1.3.0\"\n#   generic golang cc builder environment (core.yaml): builder: $(DOCKER_NS)/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)\nENV DOCKER_NS=\"hyperledger\"\n#   for golang or car's baseos for cc runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASEIMAGE_RELEASE)\nENV BASE_DOCKER_NS=\"hyperledger\"\nENV LD_FLAGS=\"-X github.com/hyperledger/fabric/common/metadata.Version=${PROJECT_VERSION}  -X github.com/hyperledger/fabric/common/metadata.BaseVersion=${BASEIMAGE_RELEASE}  -X github.com/hyperledger/fabric/common/metadata.BaseDockerLabel=org.hyperledger.fabric  -X github.com/hyperledger/fabric/common/metadata.DockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.BaseDockerNamespace=hyperledger  -X github.com/hyperledger/fabric/common/metadata.Experimental=true  -linkmode external -extldflags '-static -lpthread'\"\n#   peer envs. DONOT combine in one line as the former variable won't work on-the-fly\nENV FABRIC_CFG_PATH=\"/etc/hyperledger/fabric\"\n#   peer env\nENV CORE_PEER_MSPCONFIGPATH=\"$FABRIC_CFG_PATH/msp\" \\\n    CORE_LOGGING_LEVEL=\"DEBUG\"\n#   orderer env\nENV ORDERER_GENERAL_LOCALMSPDIR=\"$FABRIC_CFG_PATH/msp\" \\\n    ORDERER_GENERAL_LISTENADDRESS=\"0.0.0.0\" \\\n    ORDERER_GENERAL_GENESISPROFILE=\"TwoOrgsOrdererGenesis\"\n#   ca env. ca-server and ca-client will check the following env in order, to get the home cfg path\nENV FABRIC_CA_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_SERVER_HOME=\"/etc/hyperledger/fabric-ca-server\" \\\n    FABRIC_CA_CLIENT_HOME=\"/root/.fabric-ca-client\" \\\n    CA_CFG_PATH=\"/etc/hyperledger/fabric-ca\"\nRUN mkdir -p /var/hyperledger/db /var/hyperledger/production $GOPATH/src/github.com/hyperledger $FABRIC_CFG_PATH $FABRIC_CFG_PATH/crypto-config $FABRIC_CA_SERVER_HOME $FABRIC_CA_CLIENT_HOME $CA_CFG_PATH /chaincode/input /chaincode/output /var/hyperledger/fabric-ca-server\n#   Install development dependencies\nRUN apt-get update \\\n && apt-get install apt-utils python-dev -y \\\n && apt-get install libsnappy-dev zlib1g-dev libbz2-dev libyaml-dev libltdl-dev libtool -y \\\n && apt-get install python-pip -y \\\n && apt-get install vim tree jq unzip -y \\\n && pip install pip==9.0.1 --upgrade \\\n && pip install behave nose docker-compose \\\n && pip install pyinotify \\\n && rm -rf /var/cache/apt\n#   Install yq to update config\nRUN go get gopkg.in/mikefarah/yq.v2 \\\n && ln -s $GOPATH/bin/yq.v2 /usr/local/bin/yq\n#   Install chaintool\n#  RUN curl -L https://github.com/hyperledger/fabric-chaintool/releases/download/v0.10.3/chaintool > /usr/local/bin/chaintool \\\nRUN curl -fL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-${CHAINTOOL_RELEASE}/hyperledger-fabric-chaintool-${CHAINTOOL_RELEASE}.jar > /usr/local/bin/chaintool \\\n && chmod a+x /usr/local/bin/chaintool\n#   install gotools\nRUN go get github.com/golang/protobuf/protoc-gen-go \\\n && go get github.com/kardianos/govendor \\\n && go get github.com/golang/lint/golint \\\n && go get golang.org/x/tools/cmd/goimports \\\n && go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/axw/gocov/... \\\n && go get github.com/client9/misspell/cmd/misspell \\\n && go get github.com/AlekSi/gocov-xml\n#   Clone the Hyperledger Fabric code and cp sample config files\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-${PROJECT_VERSION} fabric \\\n && cp $FABRIC_ROOT/devenv/limits.conf /etc/security/limits.conf \\\n && cp -r $FABRIC_ROOT/sampleconfig/* $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/configtx.yaml $FABRIC_CFG_PATH/ \\\n && cp $FABRIC_ROOT/examples/e2e_cli/crypto-config.yaml $FABRIC_CFG_PATH/\n#   Install configtxgen, cryptogen and configtxlator\nRUN cd $FABRIC_ROOT/ \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxgen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/cryptogen \\\n && go install -tags \"experimental\" -ldflags \"${LD_FLAGS}\" github.com/hyperledger/fabric/common/tools/configtxlator\n#   Install eventsclient\nRUN cd $FABRIC_ROOT/examples/events/eventsclient \\\n && go install \\\n && go clean\n#   Install discover cmd\nRUN CGO_CFLAGS=\" \" go install -tags \"experimental\" -ldflags \"-X github.com/hyperledger/fabric/cmd/discover/metadata.Version=${BASE_VERSION}\" github.com/hyperledger/fabric/cmd/discover\n#   Install fabric peer\nRUN cd $FABRIC_ROOT/peer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n#   Install fabric orderer\nRUN cd $FABRIC_ROOT/orderer \\\n && CGO_CFLAGS=\" \" go install -ldflags \"$LD_FLAGS\" \\\n && go clean\n#  ADD crypto-config $FABRIC_CFG_PATH/crypto-config\n#   Install fabric-ca\nRUN cd $GOPATH/src/github.com/hyperledger \\\n && wget https://github.com/hyperledger/fabric-ca/archive/v${PROJECT_VERSION}.zip \\\n && unzip v${PROJECT_VERSION}.zip \\\n && rm v${PROJECT_VERSION}.zip \\\n && mv fabric-ca-${PROJECT_VERSION} fabric-ca \\\n && go install -ldflags \"-X github.com/hyperledger/fabric-ca/lib/metadata.Version=$PROJECT_VERSION -linkmode external -extldflags '-static -lpthread'\" github.com/hyperledger/fabric-ca/cmd/... \\\n && cp $FABRIC_CA_ROOT/images/fabric-ca/payload/*.pem $FABRIC_CA_HOME/ \\\n && go clean\n#   This is useful to debug local code with mapping inside\nVOLUME $GOPATH/src/github.com/hyperledger\n#   The data and config dir, can map external one with -v\nVOLUME /var/hyperledger\nVOLUME $FABRIC_CFG_PATH\nVOLUME $FABRIC_CA_SERVER_HOME\nVOLUME $FABRIC_CA_CLIENT_HOME\n#   Useful scripts for quickly compiling local code\nADD scripts/ /tmp/\n#   Remove the go pkg files in case polluting debugging env\nRUN bash /tmp/clean_pkg.sh\n#   Temporarily fix the `go list` complain problem, which is required in chaincode packaging, see core/chaincode/platforms/golang/platform.go#GetDepoymentPayload\nENV GOROOT=\"/usr/local/go\"\nWORKDIR $FABRIC_ROOT\n#   This is only a workaround for current hard-coded problem when using as fabric-baseimage.\nRUN ln -s $GOPATH /opt/gopath\nLABEL org.hyperledger.fabric.version=\"${PROJECT_VERSION}\" \\\n      org.hyperledger.fabric.base.version=\"${BASEIMAGE_RELEASE}\"\n","originalDockerfileUglifiedHash":"e09fbef51a550e9dde246bdee9808935","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5ad8965562b99b9abbabdc1ceaf606101d30ee76.dockerfile"}