{"seed":2662384444,"processedDockerfileHash":"a9cdff007493770f9177c000dbb908ee","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2016 Teradata\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM jdeathe/centos-ssh:centos-6-1.8.1\nMAINTAINER Teradata Docker Team <docker@teradata.com>\nENV DOCKERIZE_VERSION=\"v0.3.0\"\nARG JDK_URL\nARG JDK_RPM\nARG JDK_PATH\n#   Install Oracle Java and presto-admin dependences (already has python 2.6)\nRUN rm -rf /etc/yum.repos.d/epel* \\\n && yum install -y wget bzip2 gcc python-devel tar expect python-devel openssl-devel libffi-devel \\\n && wget -nv --header \"Cookie: oraclelicense=accept-securebackup-cookie\" $JDK_URL \\\n && rpm -ivh $JDK_RPM \\\n && rm $JDK_RPM \\\n && rm -rf $JDK_PATH/*src.zip $JDK_PATH/lib/missioncontrol $JDK_PATH/lib/visualvm $JDK_PATH/lib/*javafx* $JDK_PATH/jre/lib/plugin.jar $JDK_PATH/jre/lib/ext/jfxrt.jar $JDK_PATH/jre/bin/javaws $JDK_PATH/jre/lib/javaws.jar $JDK_PATH/jre/lib/desktop $JDK_PATH/jre/plugin $JDK_PATH/jre/lib/deploy* $JDK_PATH/jre/lib/*javafx* $JDK_PATH/jre/lib/*jfx* $JDK_PATH/jre/lib/amd64/libdecora_sse.so $JDK_PATH/jre/lib/amd64/libprism_*.so $JDK_PATH/jre/lib/amd64/libfxplugins.so $JDK_PATH/jre/lib/amd64/libglass.so $JDK_PATH/jre/lib/amd64/libgstreamer-lite.so $JDK_PATH/jre/lib/amd64/libjavafx*.so $JDK_PATH/jre/lib/amd64/libjfx*.so \\\n && wget -nv https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && easy_install pip \\\n && yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\n#   Copy Vagrant insecure SSH keys for passwordless SSH between\n#   containers and to localhost\nCOPY vagrant_insecure_rsa /etc/services-config/ssh/id_rsa\n#   Modify the ssh-bootstrap script to copy id_rsa to ~/.ssh (the script already makes ~/.ssh\n#   and copies authorized_keys)\nRUN printf \"cp -f /etc/services-config/ssh/id_rsa ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chown -R ${OPTS_SSH_USER}:${OPTS_SSH_USER} ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chmod 600 ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n cp -r ${OPTS_SSH_USER_HOME}/.ssh /root/.ssh\\n\\n useradd -ms /bin/bash testuser\\n echo \"testuser:testpass\" | chpasswd\" > /usr/sbin/bootstrap-extra\nRUN awk -v file=\"/usr/sbin/bootstrap-extra\" -v lineno=$(($( wc -l < /usr/sbin/sshd-bootstrap;) - 4)) ' NR==lineno {system(\"echo \"\"; cat \" file); print; next} 1' /usr/sbin/sshd-bootstrap > /usr/sbin/sshd-bootstrap2 \\\n && mv /usr/sbin/sshd-bootstrap2 /usr/sbin/sshd-bootstrap \\\n && chmod +x /usr/sbin/sshd-bootstrap\n#\n#   The sshd-bootstrap process engages in some tomfoolery with the\n#   /etc/ssh/sshd_config file during the bootstrap process. Namely, it forcibly\n#   symlinks /etc/services-config/ssh/sshd_config over it under conditions that\n#   prevail in our images. This means the canonical source of the sshd\n#   configuration is the file in /etc/services-config, and we need to modify it,\n#   rather than the customary file in /etc/ssh.\n#\nRUN sed -i -e 's/^PermitRootLogin no/PermitRootLogin without-password/g' -e 's/^PasswordAuthentication no/PasswordAuthentication yes/g' /etc/services-config/ssh/sshd_config\n#   Set default password for testing\nRUN printf \"\\nSSH_USER_PASSWORD=password\" >> /etc/services-config/ssh/sshd-bootstrap.conf\nEXPOSE 22/tcp 8080/tcp\nENV JAVA_HOME=\"$JDK_PATH/jre/\"\n#   Clean up\nRUN yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2016 Teradata\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM jdeathe/centos-ssh:centos-6-1.8.1\nMAINTAINER Teradata Docker Team <docker@teradata.com>\nENV DOCKERIZE_VERSION=\"v0.3.0\"\nARG JDK_URL\nARG JDK_RPM\nARG JDK_PATH\n#  Install Oracle Java and presto-admin dependences (already has python 2.6)\nRUN rm -rf /etc/yum.repos.d/epel* \\\n && yum install -y wget bzip2 gcc python-devel tar expect python-devel openssl-devel libffi-devel \\\n && wget -nv --header \"Cookie: oraclelicense=accept-securebackup-cookie\" $JDK_URL \\\n && rpm -ivh $JDK_RPM \\\n && rm $JDK_RPM \\\n && rm -rf $JDK_PATH/*src.zip $JDK_PATH/lib/missioncontrol $JDK_PATH/lib/visualvm $JDK_PATH/lib/*javafx* $JDK_PATH/jre/lib/plugin.jar $JDK_PATH/jre/lib/ext/jfxrt.jar $JDK_PATH/jre/bin/javaws $JDK_PATH/jre/lib/javaws.jar $JDK_PATH/jre/lib/desktop $JDK_PATH/jre/plugin $JDK_PATH/jre/lib/deploy* $JDK_PATH/jre/lib/*javafx* $JDK_PATH/jre/lib/*jfx* $JDK_PATH/jre/lib/amd64/libdecora_sse.so $JDK_PATH/jre/lib/amd64/libprism_*.so $JDK_PATH/jre/lib/amd64/libfxplugins.so $JDK_PATH/jre/lib/amd64/libglass.so $JDK_PATH/jre/lib/amd64/libgstreamer-lite.so $JDK_PATH/jre/lib/amd64/libjavafx*.so $JDK_PATH/jre/lib/amd64/libjfx*.so \\\n && wget -nv https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && easy_install pip \\\n && yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\n#  Copy Vagrant insecure SSH keys for passwordless SSH between\n#  containers and to localhost\nCOPY vagrant_insecure_rsa /etc/services-config/ssh/id_rsa\n#  Modify the ssh-bootstrap script to copy id_rsa to ~/.ssh (the script already makes ~/.ssh\n#  and copies authorized_keys)\nRUN printf \"cp -f /etc/services-config/ssh/id_rsa ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chown -R ${OPTS_SSH_USER}:${OPTS_SSH_USER} ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chmod 600 ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n cp -r ${OPTS_SSH_USER_HOME}/.ssh /root/.ssh\\n\\n useradd -ms /bin/bash testuser\\n echo \"testuser:testpass\" | chpasswd\" > /usr/sbin/bootstrap-extra\nRUN awk -v file=\"/usr/sbin/bootstrap-extra\" -v lineno=$(($( wc -l < /usr/sbin/sshd-bootstrap;) - 4)) ' NR==lineno {system(\"echo \"\"; cat \" file); print; next} 1' /usr/sbin/sshd-bootstrap > /usr/sbin/sshd-bootstrap2 \\\n && mv /usr/sbin/sshd-bootstrap2 /usr/sbin/sshd-bootstrap \\\n && chmod +x /usr/sbin/sshd-bootstrap\n#\n#  The sshd-bootstrap process engages in some tomfoolery with the\n#  /etc/ssh/sshd_config file during the bootstrap process. Namely, it forcibly\n#  symlinks /etc/services-config/ssh/sshd_config over it under conditions that\n#  prevail in our images. This means the canonical source of the sshd\n#  configuration is the file in /etc/services-config, and we need to modify it,\n#  rather than the customary file in /etc/ssh.\n#\nRUN sed -i -e 's/^PermitRootLogin no/PermitRootLogin without-password/g' -e 's/^PasswordAuthentication no/PasswordAuthentication yes/g' /etc/services-config/ssh/sshd_config\n#  Set default password for testing\nRUN printf \"\\nSSH_USER_PASSWORD=password\" >> /etc/services-config/ssh/sshd-bootstrap.conf\nEXPOSE 22/tcp 8080/tcp\nENV JAVA_HOME=\"$JDK_PATH/jre/\"\n#  Clean up\nRUN yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\n","injectedSmells":[],"originalDockerfileHash":"73e3fc5cc8ba90c42ba19f7e9eb0c33c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2016 Teradata\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM jdeathe/centos-ssh:centos-6-1.8.1\nMAINTAINER Teradata Docker Team <docker@teradata.com>\nENV DOCKERIZE_VERSION=\"v0.3.0\"\nARG JDK_URL\nARG JDK_RPM\nARG JDK_PATH\n#   Install Oracle Java and presto-admin dependences (already has python 2.6)\nRUN rm -rf /etc/yum.repos.d/epel* \\\n && yum install -y wget bzip2 gcc python-devel tar expect python-devel openssl-devel libffi-devel \\\n && wget -nv --header \"Cookie: oraclelicense=accept-securebackup-cookie\" $JDK_URL \\\n && rpm -ivh $JDK_RPM \\\n && rm $JDK_RPM \\\n && rm -rf $JDK_PATH/*src.zip $JDK_PATH/lib/missioncontrol $JDK_PATH/lib/visualvm $JDK_PATH/lib/*javafx* $JDK_PATH/jre/lib/plugin.jar $JDK_PATH/jre/lib/ext/jfxrt.jar $JDK_PATH/jre/bin/javaws $JDK_PATH/jre/lib/javaws.jar $JDK_PATH/jre/lib/desktop $JDK_PATH/jre/plugin $JDK_PATH/jre/lib/deploy* $JDK_PATH/jre/lib/*javafx* $JDK_PATH/jre/lib/*jfx* $JDK_PATH/jre/lib/amd64/libdecora_sse.so $JDK_PATH/jre/lib/amd64/libprism_*.so $JDK_PATH/jre/lib/amd64/libfxplugins.so $JDK_PATH/jre/lib/amd64/libglass.so $JDK_PATH/jre/lib/amd64/libgstreamer-lite.so $JDK_PATH/jre/lib/amd64/libjavafx*.so $JDK_PATH/jre/lib/amd64/libjfx*.so \\\n && wget -nv https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && easy_install pip \\\n && yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\n#   Copy Vagrant insecure SSH keys for passwordless SSH between\n#   containers and to localhost\nCOPY vagrant_insecure_rsa /etc/services-config/ssh/id_rsa\n#   Modify the ssh-bootstrap script to copy id_rsa to ~/.ssh (the script already makes ~/.ssh\n#   and copies authorized_keys)\nRUN printf \"cp -f /etc/services-config/ssh/id_rsa ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chown -R ${OPTS_SSH_USER}:${OPTS_SSH_USER} ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n chmod 600 ${OPTS_SSH_USER_HOME}/.ssh/id_rsa\\n cp -r ${OPTS_SSH_USER_HOME}/.ssh /root/.ssh\\n\\n useradd -ms /bin/bash testuser\\n echo \"testuser:testpass\" | chpasswd\" > /usr/sbin/bootstrap-extra\nRUN awk -v file=\"/usr/sbin/bootstrap-extra\" -v lineno=$(($( wc -l < /usr/sbin/sshd-bootstrap;) - 4)) ' NR==lineno {system(\"echo \"\"; cat \" file); print; next} 1' /usr/sbin/sshd-bootstrap > /usr/sbin/sshd-bootstrap2 \\\n && mv /usr/sbin/sshd-bootstrap2 /usr/sbin/sshd-bootstrap \\\n && chmod +x /usr/sbin/sshd-bootstrap\n#\n#   The sshd-bootstrap process engages in some tomfoolery with the\n#   /etc/ssh/sshd_config file during the bootstrap process. Namely, it forcibly\n#   symlinks /etc/services-config/ssh/sshd_config over it under conditions that\n#   prevail in our images. This means the canonical source of the sshd\n#   configuration is the file in /etc/services-config, and we need to modify it,\n#   rather than the customary file in /etc/ssh.\n#\nRUN sed -i -e 's/^PermitRootLogin no/PermitRootLogin without-password/g' -e 's/^PasswordAuthentication no/PasswordAuthentication yes/g' /etc/services-config/ssh/sshd_config\n#   Set default password for testing\nRUN printf \"\\nSSH_USER_PASSWORD=password\" >> /etc/services-config/ssh/sshd-bootstrap.conf\nEXPOSE 22/tcp 8080/tcp\nENV JAVA_HOME=\"$JDK_PATH/jre/\"\n#   Clean up\nRUN yum -y clean all \\\n && rm -rf /tmp/* /var/tmp/*\n","originalDockerfileUglifiedHash":"c62242954ae5f4deb4eba5198df1e4df","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ff03bcf8022ae23d17d5df542ec9679ca4f173ba.dockerfile"}