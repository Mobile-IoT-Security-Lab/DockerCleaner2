{"seed":3678008002,"processedDockerfileHash":"3657358a45df741921587ff5f7422484","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #\n#   osgeo/gdal:alpine-normal\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apk add wget curl unzip make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev --no-cache -q\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\n#   For GDAL\nARG POPPLER_DEV=poppler-dev\nRUN apk add linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev openjpeg-dev libwebp-dev expat-dev py-numpy-dev python3-dev py3-numpy postgresql-dev libxml2-dev ${POPPLER_DEV} --no-cache \\\n && mkdir -p /build_thirdparty/usr/lib\n#   Build xerces-c\nARG XERCESC_VERSION=3.2.2\nRUN if test \"${XERCESC_VERSION}\" != \"\" ; then (wget -q http://mirror.ibcp.fr/pub/apache/xerces/c/3/sources/xerces-c-${XERCESC_VERSION}.zip \\\n && unzip -q xerces-c-${XERCESC_VERSION}.zip \\\n && rm -f xerces-c-${XERCESC_VERSION}.zip \\\n && cd xerces-c-${XERCESC_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libxerces-c*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf xerces-c-${XERCESC_VERSION} ) ; fi\n#   Build geos\nARG GEOS_VERSION=3.7.1\nRUN if test \"${GEOS_VERSION}\" != \"\" ; then (wget -q http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 \\\n && tar xjf geos-${GEOS_VERSION}.tar.bz2 \\\n && rm -f geos-${GEOS_VERSION}.tar.bz2 \\\n && cd geos-${GEOS_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libgeos*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf geos-${GEOS_VERSION} ) ; fi\n#   Build szip\nARG SZIP_VERSION=2.1.1\nRUN if test \"${SZIP_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/lib-external/szip/${SZIP_VERSION}/src/szip-${SZIP_VERSION}.tar.gz \\\n && tar xzf szip-${SZIP_VERSION}.tar.gz \\\n && rm -f szip-${SZIP_VERSION}.tar.gz \\\n && cd szip-${SZIP_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libsz*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf szip-${SZIP_VERSION} ) ; fi\n#   Build hdf5\nARG HDF5_VERSION=1.10.5\nRUN if test \"${HDF5_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz \\\n && tar xzf hdf5-${HDF5_VERSION}.tar.gz \\\n && rm -f hdf5-${HDF5_VERSION}.tar.gz \\\n && cd hdf5-${HDF5_VERSION} \\\n && CFLAGS=-O2 CXXFLAGS=-O2 ./configure --prefix=/usr --disable-static --with-szlib=/usr --enable-cxx \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libhdf5*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf5-${HDF5_VERSION} ) ; fi\n#   Build netCDF\nARG NETCDF_VERSION=4.6.3\nRUN if test \"${NETCDF_VERSION}\" != \"\" ; then (wget -q https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz \\\n && tar xzf v${NETCDF_VERSION}.tar.gz \\\n && rm -f v${NETCDF_VERSION}.tar.gz \\\n && cd netcdf-c-${NETCDF_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libnetcdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf netcdf-c-${NETCDF_VERSION} ) ; fi\n#   Build hdf4\nARG HDF4_VERSION=4.2.14\nRUN if test \"${HDF4_VERSION}\" != \"\" ; then (apk add byacc flex portablexdr-dev --no-cache \\\n && mkdir hdf4 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF/releases/HDF${HDF4_VERSION}/src/hdf-${HDF4_VERSION}.tar.gz -O - | tar xz -C hdf4 --strip-components=1 \\\n && cd hdf4 \\\n && LDFLAGS=-lportablexdr ./configure --prefix=/usr --enable-shared --disable-static --with-szlib=/usr --disable-fortran --disable-netcdf \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libdf*.so* /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libmfhdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf4 \\\n && apk del byacc flex portablexdr-dev ) ; fi\n#   Build freexl\nARG FREEXL_VERSION=1.0.5\nRUN if test \"${FREEXL_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/freexl-${FREEXL_VERSION}.tar.gz \\\n && tar xzf freexl-${FREEXL_VERSION}.tar.gz \\\n && rm -f freexl-${FREEXL_VERSION}.tar.gz \\\n && cd freexl-${FREEXL_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libfreexl*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf freexl-${FREEXL_VERSION} ) ; fi\n#   Build likbkea\nARG KEA_VERSION=c6d36f3db5e4\nRUN if test \"${KEA_VERSION}\" != \"\" ; then (apk add cmake --no-cache \\\n && wget -q https://bitbucket.org/chchrsc/kealib/get/${KEA_VERSION}.zip \\\n && unzip -q ${KEA_VERSION}.zip \\\n && rm -f ${KEA_VERSION}.zip \\\n && cd chchrsc-kealib-${KEA_VERSION}/trunk \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DHDF5_INCLUDE_DIR=/usr/include/hdf5 -DHDF5_LIB_PATH=/usr/lib -DLIBKEA_WITH_GDAL=OFF \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../.. \\\n && rm -rf chchrsc-kealib-${KEA_VERSION} \\\n && cp -P /usr/lib/libkea*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && apk del cmake ) ; fi\n#   Build openjpeg\n#   ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add cmake --no-cache \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -f /usr/lib/libopenjp2.so.2.3.0 \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add rsync ccache --no-cache\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build spatialite\nARG SPATIALITE_VERSION=4.3.0a\nRUN if test \"${SPATIALITE_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && tar xzf libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && rm -f libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && cd libspatialite-${SPATIALITE_VERSION} \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/spatialite/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 100M ; fi \\\n && CFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -O2\" ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/spatialite/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && mkdir -p /build_spatialite/usr/lib \\\n && cp -P /usr/lib/libspatialite*.so* /build_spatialite/usr/lib \\\n && for i in /build_spatialite/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf libspatialite-${SPATIALITE_VERSION} ) ; else mkdir -p /build_spatialite/usr/lib ; fi\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && export GDAL_EXTRA_ARGS=\"\" \\\n && if test \"${GEOS_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-geos ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${XERCESC_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-xerces ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF4_VERSION}\" != \"\" ; then apk add portablexdr-dev --no-cache \\\n && export LDFLAGS=\"-lportablexdr ${LDFLAGS}\" \\\n && export GDAL_EXTRA_ARGS=\"--with-hdf4 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF5_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-hdf5 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${NETCDF_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-netcdf ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${SPATIALITE_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-spatialite ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${POPPLER_DEV}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-poppler ${GDAL_EXTRA_ARGS}\" ; fi \\\n && echo ${GDAL_EXTRA_ARGS} \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols ${GDAL_EXTRA_ARGS} --with-python \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3.7 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3.7/site-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png; do rm $i ; done )\n#   Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nARG POPPLER=poppler\nRUN apk add libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng libwebp expat python3 py3-numpy pcre libpq libxml2 portablexdr openjpeg ${POPPLER} --no-cache \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libpoppler-cpp.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#   Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_spatialite/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #\n#  osgeo/gdal:alpine-normal\n#  This file is available at the option of the licensee under:\n#  Public domain\n#  or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#  Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#  Setup build env for PROJ\nRUN apk add --no-cache wget curl unzip -q make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\n#  For GDAL\nARG POPPLER_DEV=poppler-dev\nRUN apk add --no-cache linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev openjpeg-dev libwebp-dev expat-dev py-numpy-dev python3-dev py3-numpy ${POPPLER_DEV} postgresql-dev libxml2-dev \\\n && mkdir -p /build_thirdparty/usr/lib\n#  Build xerces-c\nARG XERCESC_VERSION=3.2.2\nRUN if test \"${XERCESC_VERSION}\" != \"\" ; then (wget -q http://mirror.ibcp.fr/pub/apache/xerces/c/3/sources/xerces-c-${XERCESC_VERSION}.zip \\\n && unzip -q xerces-c-${XERCESC_VERSION}.zip \\\n && rm -f xerces-c-${XERCESC_VERSION}.zip \\\n && cd xerces-c-${XERCESC_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libxerces-c*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf xerces-c-${XERCESC_VERSION} ) ; fi\n#  Build geos\nARG GEOS_VERSION=3.7.1\nRUN if test \"${GEOS_VERSION}\" != \"\" ; then (wget -q http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 \\\n && tar xjf geos-${GEOS_VERSION}.tar.bz2 \\\n && rm -f geos-${GEOS_VERSION}.tar.bz2 \\\n && cd geos-${GEOS_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libgeos*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf geos-${GEOS_VERSION} ) ; fi\n#  Build szip\nARG SZIP_VERSION=2.1.1\nRUN if test \"${SZIP_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/lib-external/szip/${SZIP_VERSION}/src/szip-${SZIP_VERSION}.tar.gz \\\n && tar xzf szip-${SZIP_VERSION}.tar.gz \\\n && rm -f szip-${SZIP_VERSION}.tar.gz \\\n && cd szip-${SZIP_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libsz*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf szip-${SZIP_VERSION} ) ; fi\n#  Build hdf5\nARG HDF5_VERSION=1.10.5\nRUN if test \"${HDF5_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz \\\n && tar xzf hdf5-${HDF5_VERSION}.tar.gz \\\n && rm -f hdf5-${HDF5_VERSION}.tar.gz \\\n && cd hdf5-${HDF5_VERSION} \\\n && CFLAGS=-O2 CXXFLAGS=-O2 ./configure --prefix=/usr --disable-static --with-szlib=/usr --enable-cxx \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libhdf5*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf5-${HDF5_VERSION} ) ; fi\n#  Build netCDF\nARG NETCDF_VERSION=4.6.3\nRUN if test \"${NETCDF_VERSION}\" != \"\" ; then (wget -q https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz \\\n && tar xzf v${NETCDF_VERSION}.tar.gz \\\n && rm -f v${NETCDF_VERSION}.tar.gz \\\n && cd netcdf-c-${NETCDF_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libnetcdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf netcdf-c-${NETCDF_VERSION} ) ; fi\n#  Build hdf4\nARG HDF4_VERSION=4.2.14\nRUN if test \"${HDF4_VERSION}\" != \"\" ; then (apk add --no-cache byacc flex portablexdr-dev \\\n && mkdir hdf4 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF/releases/HDF${HDF4_VERSION}/src/hdf-${HDF4_VERSION}.tar.gz -O - | tar xz -C hdf4 --strip-components=1 \\\n && cd hdf4 \\\n && LDFLAGS=-lportablexdr ./configure --prefix=/usr --enable-shared --disable-static --with-szlib=/usr --disable-fortran --disable-netcdf \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libdf*.so* /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libmfhdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf4 \\\n && apk del byacc flex portablexdr-dev ) ; fi\n#  Build freexl\nARG FREEXL_VERSION=1.0.5\nRUN if test \"${FREEXL_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/freexl-${FREEXL_VERSION}.tar.gz \\\n && tar xzf freexl-${FREEXL_VERSION}.tar.gz \\\n && rm -f freexl-${FREEXL_VERSION}.tar.gz \\\n && cd freexl-${FREEXL_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libfreexl*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf freexl-${FREEXL_VERSION} ) ; fi\n#  Build likbkea\nARG KEA_VERSION=c6d36f3db5e4\nRUN if test \"${KEA_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://bitbucket.org/chchrsc/kealib/get/${KEA_VERSION}.zip \\\n && unzip -q ${KEA_VERSION}.zip \\\n && rm -f ${KEA_VERSION}.zip \\\n && cd chchrsc-kealib-${KEA_VERSION}/trunk \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DHDF5_INCLUDE_DIR=/usr/include/hdf5 -DHDF5_LIB_PATH=/usr/lib -DLIBKEA_WITH_GDAL=OFF \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../.. \\\n && rm -rf chchrsc-kealib-${KEA_VERSION} \\\n && cp -P /usr/lib/libkea*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && apk del cmake ) ; fi\n#  Build openjpeg\n#  ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -f /usr/lib/libopenjp2.so.2.3.0 \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add --no-cache rsync ccache\nARG RSYNC_REMOTE\n#  Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#  Build spatialite\nARG SPATIALITE_VERSION=4.3.0a\nRUN if test \"${SPATIALITE_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && tar xzf libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && rm -f libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && cd libspatialite-${SPATIALITE_VERSION} \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/spatialite/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 100M ; fi \\\n && CFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -O2\" ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/spatialite/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && mkdir -p /build_spatialite/usr/lib \\\n && cp -P /usr/lib/libspatialite*.so* /build_spatialite/usr/lib \\\n && for i in /build_spatialite/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf libspatialite-${SPATIALITE_VERSION} ) ; else mkdir -p /build_spatialite/usr/lib ; fi\n#  Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && export GDAL_EXTRA_ARGS=\"\" \\\n && if test \"${GEOS_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-geos ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${XERCESC_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-xerces ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF4_VERSION}\" != \"\" ; then apk add --no-cache portablexdr-dev \\\n && export LDFLAGS=\"-lportablexdr ${LDFLAGS}\" \\\n && export GDAL_EXTRA_ARGS=\"--with-hdf4 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF5_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-hdf5 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${NETCDF_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-netcdf ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${SPATIALITE_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-spatialite ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${POPPLER_DEV}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-poppler ${GDAL_EXTRA_ARGS}\" ; fi \\\n && echo ${GDAL_EXTRA_ARGS} \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols ${GDAL_EXTRA_ARGS} --with-python \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3.7 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3.7/site-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png; do rm $i ; done )\n#  Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nARG POPPLER=poppler\nRUN apk add --no-cache libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng libwebp expat python3 py3-numpy ${POPPLER} pcre libpq libxml2 portablexdr openjpeg \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libpoppler-cpp.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#  Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_spatialite/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\n","injectedSmells":[],"originalDockerfileHash":"b939cc290a31c5fcd841f99bdb39f2c2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #\n#   osgeo/gdal:alpine-normal\n#   This file is available at the option of the licensee under:\n#   Public domain\n#   or licensed under X/MIT (LICENSE.TXT) Copyright 2019 Even Rouault <even.rouault@spatialys.com>\nARG ALPINE_VERSION=3.10\nFROM alpine:${ALPINE_VERSION} AS builder\n#   Derived from osgeo/proj by Howard Butler <howard@hobu.co>\nMAINTAINER Even Rouault <even.rouault@spatialys.com>\n#   Setup build env for PROJ\nRUN apk add --no-cache wget curl unzip -q make libtool autoconf automake pkgconfig g++ sqlite sqlite-dev\nARG PROJ_DATUMGRID_LATEST_LAST_MODIFIED\nRUN mkdir -p /build_projgrids/usr/share/proj \\\n && curl -LOs http://download.osgeo.org/proj/proj-datumgrid-latest.zip \\\n && unzip -q -j -u -o proj-datumgrid-latest.zip -d /build_projgrids/usr/share/proj \\\n && rm -f *.zip\n#   For GDAL\nARG POPPLER_DEV=poppler-dev\nRUN apk add --no-cache linux-headers curl-dev zlib-dev zstd-dev libjpeg-turbo-dev libpng-dev openjpeg-dev libwebp-dev expat-dev py-numpy-dev python3-dev py3-numpy ${POPPLER_DEV} postgresql-dev libxml2-dev \\\n && mkdir -p /build_thirdparty/usr/lib\n#   Build xerces-c\nARG XERCESC_VERSION=3.2.2\nRUN if test \"${XERCESC_VERSION}\" != \"\" ; then (wget -q http://mirror.ibcp.fr/pub/apache/xerces/c/3/sources/xerces-c-${XERCESC_VERSION}.zip \\\n && unzip -q xerces-c-${XERCESC_VERSION}.zip \\\n && rm -f xerces-c-${XERCESC_VERSION}.zip \\\n && cd xerces-c-${XERCESC_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libxerces-c*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf xerces-c-${XERCESC_VERSION} ) ; fi\n#   Build geos\nARG GEOS_VERSION=3.7.1\nRUN if test \"${GEOS_VERSION}\" != \"\" ; then (wget -q http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 \\\n && tar xjf geos-${GEOS_VERSION}.tar.bz2 \\\n && rm -f geos-${GEOS_VERSION}.tar.bz2 \\\n && cd geos-${GEOS_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libgeos*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf geos-${GEOS_VERSION} ) ; fi\n#   Build szip\nARG SZIP_VERSION=2.1.1\nRUN if test \"${SZIP_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/lib-external/szip/${SZIP_VERSION}/src/szip-${SZIP_VERSION}.tar.gz \\\n && tar xzf szip-${SZIP_VERSION}.tar.gz \\\n && rm -f szip-${SZIP_VERSION}.tar.gz \\\n && cd szip-${SZIP_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libsz*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf szip-${SZIP_VERSION} ) ; fi\n#   Build hdf5\nARG HDF5_VERSION=1.10.5\nRUN if test \"${HDF5_VERSION}\" != \"\" ; then (wget -q https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION%.*}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz \\\n && tar xzf hdf5-${HDF5_VERSION}.tar.gz \\\n && rm -f hdf5-${HDF5_VERSION}.tar.gz \\\n && cd hdf5-${HDF5_VERSION} \\\n && CFLAGS=-O2 CXXFLAGS=-O2 ./configure --prefix=/usr --disable-static --with-szlib=/usr --enable-cxx \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libhdf5*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf5-${HDF5_VERSION} ) ; fi\n#   Build netCDF\nARG NETCDF_VERSION=4.6.3\nRUN if test \"${NETCDF_VERSION}\" != \"\" ; then (wget -q https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz \\\n && tar xzf v${NETCDF_VERSION}.tar.gz \\\n && rm -f v${NETCDF_VERSION}.tar.gz \\\n && cd netcdf-c-${NETCDF_VERSION} \\\n && CFLAGS=-O2 ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libnetcdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf netcdf-c-${NETCDF_VERSION} ) ; fi\n#   Build hdf4\nARG HDF4_VERSION=4.2.14\nRUN if test \"${HDF4_VERSION}\" != \"\" ; then (apk add --no-cache byacc flex portablexdr-dev \\\n && mkdir hdf4 \\\n && wget -q https://support.hdfgroup.org/ftp/HDF/releases/HDF${HDF4_VERSION}/src/hdf-${HDF4_VERSION}.tar.gz -O - | tar xz -C hdf4 --strip-components=1 \\\n && cd hdf4 \\\n && LDFLAGS=-lportablexdr ./configure --prefix=/usr --enable-shared --disable-static --with-szlib=/usr --disable-fortran --disable-netcdf \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libdf*.so* /build_thirdparty/usr/lib \\\n && cp -P /usr/lib/libmfhdf*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf hdf4 \\\n && apk del byacc flex portablexdr-dev ) ; fi\n#   Build freexl\nARG FREEXL_VERSION=1.0.5\nRUN if test \"${FREEXL_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/freexl-${FREEXL_VERSION}.tar.gz \\\n && tar xzf freexl-${FREEXL_VERSION}.tar.gz \\\n && rm -f freexl-${FREEXL_VERSION}.tar.gz \\\n && cd freexl-${FREEXL_VERSION} \\\n && ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && cp -P /usr/lib/libfreexl*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf freexl-${FREEXL_VERSION} ) ; fi\n#   Build likbkea\nARG KEA_VERSION=c6d36f3db5e4\nRUN if test \"${KEA_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://bitbucket.org/chchrsc/kealib/get/${KEA_VERSION}.zip \\\n && unzip -q ${KEA_VERSION}.zip \\\n && rm -f ${KEA_VERSION}.zip \\\n && cd chchrsc-kealib-${KEA_VERSION}/trunk \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DHDF5_INCLUDE_DIR=/usr/include/hdf5 -DHDF5_LIB_PATH=/usr/lib -DLIBKEA_WITH_GDAL=OFF \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd ../.. \\\n && rm -rf chchrsc-kealib-${KEA_VERSION} \\\n && cp -P /usr/lib/libkea*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && apk del cmake ) ; fi\n#   Build openjpeg\n#   ARG OPENJPEG_VERSION=2.3.1\nRUN if test \"${OPENJPEG_VERSION}\" != \"\" ; then (apk add --no-cache cmake \\\n && wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \\\n && tar xzf v${OPENJPEG_VERSION}.tar.gz \\\n && rm -f v${OPENJPEG_VERSION}.tar.gz \\\n && cd openjpeg-${OPENJPEG_VERSION} \\\n && cmake . -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -f /usr/lib/libopenjp2.so.2.3.0 \\\n && cp -P /usr/lib/libopenjp2*.so* /build_thirdparty/usr/lib \\\n && for i in /build_thirdparty/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf openjpeg-${OPENJPEG_VERSION} \\\n && apk del cmake ) ; fi\nRUN apk add --no-cache rsync ccache\nARG RSYNC_REMOTE\n#   Build PROJ\nARG PROJ_VERSION=master\nRUN mkdir proj \\\n && wget -q https://github.com/OSGeo/proj.4/archive/${PROJ_VERSION}.tar.gz -O - | tar xz -C proj --strip-components=1 \\\n && cd proj \\\n && ./autogen.sh \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/proj/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;export PROJ_DB_CACHE_DIR=\"$HOME/.ccache\" ;ccache -M 100M ; fi \\\n && ./configure --prefix=/usr --disable-static --enable-lto \\\n && make -j$( nproc ;) \\\n && make install \\\n && make install DESTDIR=\"/build_proj\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/proj/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd .. \\\n && rm -rf proj \\\n && for i in /build_proj/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_proj/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done\n#   Build spatialite\nARG SPATIALITE_VERSION=4.3.0a\nRUN if test \"${SPATIALITE_VERSION}\" != \"\" ; then (wget -q http://www.gaia-gis.it/gaia-sins/libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && tar xzf libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && rm -f libspatialite-${SPATIALITE_VERSION}.tar.gz \\\n && cd libspatialite-${SPATIALITE_VERSION} \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/spatialite/ $HOME/ ;echo \"Finished\" ;export CC=\"ccache gcc\" ;export CXX=\"ccache g++\" ;ccache -M 100M ; fi \\\n && CFLAGS=\"-DACCEPT_USE_OF_DEPRECATED_PROJ_API_H -O2\" ./configure --prefix=/usr --disable-static \\\n && make -j$( nproc ;) \\\n && make install \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/spatialite/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && mkdir -p /build_spatialite/usr/lib \\\n && cp -P /usr/lib/libspatialite*.so* /build_spatialite/usr/lib \\\n && for i in /build_spatialite/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && cd .. \\\n && rm -rf libspatialite-${SPATIALITE_VERSION} ) ; else mkdir -p /build_spatialite/usr/lib ; fi\n#   Build GDAL\nARG GDAL_VERSION=master\nARG GDAL_RELEASE_DATE\nARG GDAL_BUILD_IS_RELEASE\nRUN if test \"${GDAL_VERSION}\" = \"master\" ; then export GDAL_VERSION=$( curl -Ls https://api.github.com/repos/OSGeo/gdal/commits/HEAD -H \"Accept: application/vnd.github.VERSION.sha\" ;) ;export GDAL_RELEASE_DATE=$( date \"+%Y%m%d\" ;) ; fi \\\n && if test \"x${GDAL_BUILD_IS_RELEASE}\" = \"x\" ; then export GDAL_SHA1SUM=${GDAL_VERSION} ; fi \\\n && export GDAL_EXTRA_ARGS=\"\" \\\n && if test \"${GEOS_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-geos ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${XERCESC_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-xerces ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF4_VERSION}\" != \"\" ; then apk add --no-cache portablexdr-dev \\\n && export LDFLAGS=\"-lportablexdr ${LDFLAGS}\" \\\n && export GDAL_EXTRA_ARGS=\"--with-hdf4 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${HDF5_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-hdf5 ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${NETCDF_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-netcdf ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${SPATIALITE_VERSION}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-spatialite ${GDAL_EXTRA_ARGS}\" ; fi \\\n && if test \"${POPPLER_DEV}\" != \"\" ; then export GDAL_EXTRA_ARGS=\"--with-poppler ${GDAL_EXTRA_ARGS}\" ; fi \\\n && echo ${GDAL_EXTRA_ARGS} \\\n && mkdir gdal \\\n && wget -q https://github.com/OSGeo/gdal/archive/${GDAL_VERSION}.tar.gz -O - | tar xz -C gdal --strip-components=1 \\\n && cd gdal/gdal \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then echo \"Downloading cache...\" ;rsync -ra ${RSYNC_REMOTE}/gdal/ $HOME/ ;echo \"Finished\" ;printf \"#!/bin/sh\\nccache gcc $*\" > ccache_gcc.sh;chmod +x ccache_gcc.sh ;printf \"#!/bin/sh\\nccache g++ $*\" > ccache_g++.sh;chmod +x ccache_g++.sh ;export CC=$PWD/ccache_gcc.sh ;export CXX=$PWD/ccache_g++.sh ;ccache -M 1G ; fi \\\n && ./configure --prefix=/usr --without-libtool --with-hide-internal-symbols --with-proj=/usr --with-libtiff=internal --with-rename-internal-libtiff-symbols --with-geotiff=internal --with-rename-internal-libgeotiff-symbols ${GDAL_EXTRA_ARGS} --with-python \\\n && make -j$( nproc ;) \\\n && make install DESTDIR=\"/build\" \\\n && if test \"${RSYNC_REMOTE}\" != \"\" ; then ccache -s ;echo \"Uploading cache...\" ;rsync -ra --delete $HOME/.ccache ${RSYNC_REMOTE}/gdal/ ;echo \"Finished\" ;rm -rf $HOME/.ccache ;unset CC ;unset CXX ; fi \\\n && cd ../.. \\\n && rm -rf gdal \\\n && mkdir -p /build_gdal_python/usr/lib \\\n && mkdir -p /build_gdal_python/usr/bin \\\n && mkdir -p /build_gdal_version_changing/usr/include \\\n && mv /build/usr/lib/python3.7 /build_gdal_python/usr/lib \\\n && mv /build/usr/lib /build_gdal_version_changing/usr \\\n && mv /build/usr/include/gdal_version.h /build_gdal_version_changing/usr/include \\\n && mv /build/usr/bin/*.py /build_gdal_python/usr/bin \\\n && mv /build/usr/bin /build_gdal_version_changing/usr \\\n && for i in /build_gdal_version_changing/usr/lib/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_python/usr/lib/python3.7/site-packages/osgeo/*.so; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && for i in /build_gdal_version_changing/usr/bin/*; do strip -s $i 2> /dev/null || /bin/true ; done \\\n && (for i in /build/usr/share/gdal/*.svg /build/usr/share/gdal/*.png; do rm $i ; done )\n#   Build final image\nFROM alpine:${ALPINE_VERSION} AS runner\nRUN date\nARG POPPLER=poppler\nRUN apk add --no-cache libstdc++ sqlite-libs libcurl zlib zstd-libs libjpeg-turbo libpng libwebp expat python3 py3-numpy ${POPPLER} pcre libpq libxml2 portablexdr openjpeg \\\n && rm -f /usr/lib/libturbojpeg.so* \\\n && rm -f /usr/lib/libpoppler-cpp.so* \\\n && rm -f /usr/lib/libwebpmux.so* /usr/lib/libwebpdemux.so* /usr/lib/libwebpdecoder.so*\n#   Order layers starting with less frequently varying ones\nCOPY --from=builder /build_thirdparty/usr/ /usr/\nCOPY --from=builder /build_projgrids/usr/ /usr/\nCOPY --from=builder /build_spatialite/usr/ /usr/\nCOPY --from=builder /build_proj/usr/share/proj/ /usr/share/proj/\nCOPY --from=builder /build_proj/usr/include/ /usr/include/\nCOPY --from=builder /build_proj/usr/bin/ /usr/bin/\nCOPY --from=builder /build_proj/usr/lib/ /usr/lib/\nCOPY --from=builder /build/usr/share/gdal/ /usr/share/gdal/\nCOPY --from=builder /build/usr/include/ /usr/include/\nCOPY --from=builder /build_gdal_python/usr/ /usr/\nCOPY --from=builder /build_gdal_version_changing/usr/ /usr/\n","originalDockerfileUglifiedHash":"ec6c64f071c67563d2193601dcfd266b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1bc40217a73ada0e3b83a7d72a647910313c1dc0.dockerfile"}