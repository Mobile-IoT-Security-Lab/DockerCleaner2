{"seed":1648642024,"processedDockerfileHash":"1a10643a5f3b281e0653a03421eca519","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Docker image for OpenResty study\n#   VERSION 0.0.1\n#   Author: bolingcavalry\n#  基础镜像使用ubuntu:16.04\nFROM ubuntu:16.04\n#  作者\nMAINTAINER BolingCavalry <zq2599@gmail.com>\n#  定义工作目录\nENV WORK_PATH=\"/usr/local/work\"\n#  定义安装目录\nENV INSTALL_PATH=\"/usr/servers\"\n#  定义nginx-openresty文件夹名称\nENV NGX_OPENRESTY_PACKAGE_NAME=\"ngx_openresty-1.7.7.2\"\n#  定义ngx_cache_purge文件夹名称，该模块用于清理nginx缓存\nENV NGX_CACHE_PURGE_PACKAGE_NAME=\"ngx_cache_purge-2.3\"\n#  定义nginx_upstream_check_module文件夹名称，该模块用于ustream健康检查\nENV NGX_UPSTREAM_CHECK_PACKAGE_NAME=\"nginx_upstream_check_module-0.3.0\"\n#  创建工作目录\nRUN mkdir -p $WORK_PATH\n#  创建安装目录\nRUN mkdir -p $INSTALL_PATH\n#  apt换源，用阿里云的源，删除原有的源\nRUN rm /etc/apt/sources.list\n#  apt换源，用阿里云的源，复制新的源\nCOPY ./sources.list /etc/apt/sources.list\n#  apt更新\nRUN :\n#  创建安装目录\nRUN (apt-get update ;apt-get install --no-install-recommends make=4.1-6 vim=2:7.4.1689-3ubuntu1.5 gcc=4:5.3.1-1ubuntu1 libreadline-dev=6.3-8ubuntu2 libncurses5-dev=6.0+20160213-1ubuntu1 libpcre3-dev=2:8.38-3.1 libssl-dev=1.0.2g-1ubuntu4.20 perl=5.22.1-9ubuntu0.9 -y )\n#  修改vim的配置信息，修复中文乱码问题\nRUN sed -i '$a\\set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936' /etc/vim/vimrc\nRUN sed -i '$a\\set termencoding=utf-8' /etc/vim/vimrc\nRUN sed -i '$a\\set encoding=utf-8' /etc/vim/vimrc\n#  把nginx-openresty文件夹复制到工作目录\nCOPY ./$NGX_OPENRESTY_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME\n#  #####luajit start######\n#  进入make目录，执行编译luajit\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/LuaJIT-2.1-20150120/ \\\n && make clean \\\n && make \\\n && make install\n#  软连接\nRUN ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit\n#  #####luajit end######\n#  #####module start######\n#  把ngx_cache_purge文件夹复制到工作目录\nCOPY ./$NGX_CACHE_PURGE_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_CACHE_PURGE_PACKAGE_NAME\n#  把nginx_upstream_check_module文件夹复制到工作目录\nCOPY ./$NGX_UPSTREAM_CHECK_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME\n#  #####module end######\n#  #####ngx_openresty start######\n#  进入ngx_openresty目录，执行configure，执行构建\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME \\\n && ./configure --prefix=$INSTALL_PATH --with-http_realip_module --with-pcre --with-luajit --add-module=./bundle/$NGX_CACHE_PURGE_PACKAGE_NAME/ --add-module=./bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME/ -j2 \\\n && make \\\n && make install\n#  #####ngx_openresty end######\n#  #####复制配置文件 start######\n#  删除原有的nginx.conf\nRUN rm $INSTALL_PATH/nginx/conf/nginx.conf\n#  用定制的nginx.conf\nCOPY ./nginx.conf $INSTALL_PATH/nginx/conf/\n#  将新的conf文件放入指定位置，nginx.conf中对此文件有include\nCOPY ./boling_cavalry.conf $WORK_PATH/\n#  将http库文件赋值到默认库\nCOPY ./http.lua $INSTALL_PATH/lualib/resty\nCOPY ./http_headers.lua $INSTALL_PATH/lualib/resty\n#  创建放置lua库的目录(扩展库)\nRUN mkdir $WORK_PATH/lualib\n#  复制一个lua库文件(扩展库)\nCOPY ./sequare.lua $WORK_PATH/lualib\n#  创建放置lua脚本的目录\nRUN mkdir $WORK_PATH/lua\n#  复制一个lua的demo脚本\nCOPY ./test_request.lua $WORK_PATH/lua\nCOPY ./get_sequare.lua $WORK_PATH/lua\nCOPY ./test_http.lua $WORK_PATH/lua\n#  #####复制配置文件 end######\n#  暴露8080端口\nEXPOSE 80/tcp\n#  启动NGINX\nCMD [\"/usr/servers/nginx/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker image for OpenResty study\n#  VERSION 0.0.1\n#  Author: bolingcavalry\n# 基础镜像使用ubuntu:16.04\nFROM ubuntu:16.04\n# 作者\nMAINTAINER BolingCavalry <zq2599@gmail.com>\n# 定义工作目录\nENV WORK_PATH=\"/usr/local/work\"\n# 定义安装目录\nENV INSTALL_PATH=\"/usr/servers\"\n# 定义nginx-openresty文件夹名称\nENV NGX_OPENRESTY_PACKAGE_NAME=\"ngx_openresty-1.7.7.2\"\n# 定义ngx_cache_purge文件夹名称，该模块用于清理nginx缓存\nENV NGX_CACHE_PURGE_PACKAGE_NAME=\"ngx_cache_purge-2.3\"\n# 定义nginx_upstream_check_module文件夹名称，该模块用于ustream健康检查\nENV NGX_UPSTREAM_CHECK_PACKAGE_NAME=\"nginx_upstream_check_module-0.3.0\"\n# 创建工作目录\nRUN mkdir -p $WORK_PATH\n# 创建安装目录\nRUN mkdir -p $INSTALL_PATH\n# apt换源，用阿里云的源，删除原有的源\nRUN rm /etc/apt/sources.list\n# apt换源，用阿里云的源，复制新的源\nCOPY ./sources.list /etc/apt/sources.list\n# apt更新\nRUN apt-get update\n# 创建安装目录\nRUN apt-get install make vim gcc libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl -y\n# 修改vim的配置信息，修复中文乱码问题\nRUN sed -i '$a\\set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936' /etc/vim/vimrc\nRUN sed -i '$a\\set termencoding=utf-8' /etc/vim/vimrc\nRUN sed -i '$a\\set encoding=utf-8' /etc/vim/vimrc\n# 把nginx-openresty文件夹复制到工作目录\nCOPY ./$NGX_OPENRESTY_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME\n# #####luajit start######\n# 进入make目录，执行编译luajit\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/LuaJIT-2.1-20150120/ \\\n && make clean \\\n && make \\\n && make install\n# 软连接\nRUN ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit\n# #####luajit end######\n# #####module start######\n# 把ngx_cache_purge文件夹复制到工作目录\nCOPY ./$NGX_CACHE_PURGE_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_CACHE_PURGE_PACKAGE_NAME\n# 把nginx_upstream_check_module文件夹复制到工作目录\nCOPY ./$NGX_UPSTREAM_CHECK_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME\n# #####module end######\n# #####ngx_openresty start######\n# 进入ngx_openresty目录，执行configure，执行构建\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME \\\n && ./configure --prefix=$INSTALL_PATH --with-http_realip_module --with-pcre --with-luajit --add-module=./bundle/$NGX_CACHE_PURGE_PACKAGE_NAME/ --add-module=./bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME/ -j2 \\\n && make \\\n && make install\n# #####ngx_openresty end######\n# #####复制配置文件 start######\n# 删除原有的nginx.conf\nRUN rm $INSTALL_PATH/nginx/conf/nginx.conf\n# 用定制的nginx.conf\nCOPY ./nginx.conf $INSTALL_PATH/nginx/conf/\n# 将新的conf文件放入指定位置，nginx.conf中对此文件有include\nCOPY ./boling_cavalry.conf $WORK_PATH/\n# 将http库文件赋值到默认库\nCOPY ./http.lua $INSTALL_PATH/lualib/resty\nCOPY ./http_headers.lua $INSTALL_PATH/lualib/resty\n# 创建放置lua库的目录(扩展库)\nRUN mkdir $WORK_PATH/lualib\n# 复制一个lua库文件(扩展库)\nCOPY ./sequare.lua $WORK_PATH/lualib\n# 创建放置lua脚本的目录\nRUN mkdir $WORK_PATH/lua\n# 复制一个lua的demo脚本\nCOPY ./test_request.lua $WORK_PATH/lua\nCOPY ./get_sequare.lua $WORK_PATH/lua\nCOPY ./test_http.lua $WORK_PATH/lua\n# #####复制配置文件 end######\n# 暴露8080端口\nEXPOSE 80/tcp\n# 启动NGINX\nCMD [\"/usr/servers/nginx/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"313a4d7b49223321a135cdf8624447e8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker image for OpenResty study\n#   VERSION 0.0.1\n#   Author: bolingcavalry\n#  基础镜像使用ubuntu:16.04\nFROM ubuntu:16.04\n#  作者\nMAINTAINER BolingCavalry <zq2599@gmail.com>\n#  定义工作目录\nENV WORK_PATH=\"/usr/local/work\"\n#  定义安装目录\nENV INSTALL_PATH=\"/usr/servers\"\n#  定义nginx-openresty文件夹名称\nENV NGX_OPENRESTY_PACKAGE_NAME=\"ngx_openresty-1.7.7.2\"\n#  定义ngx_cache_purge文件夹名称，该模块用于清理nginx缓存\nENV NGX_CACHE_PURGE_PACKAGE_NAME=\"ngx_cache_purge-2.3\"\n#  定义nginx_upstream_check_module文件夹名称，该模块用于ustream健康检查\nENV NGX_UPSTREAM_CHECK_PACKAGE_NAME=\"nginx_upstream_check_module-0.3.0\"\n#  创建工作目录\nRUN mkdir -p $WORK_PATH\n#  创建安装目录\nRUN mkdir -p $INSTALL_PATH\n#  apt换源，用阿里云的源，删除原有的源\nRUN rm /etc/apt/sources.list\n#  apt换源，用阿里云的源，复制新的源\nCOPY ./sources.list /etc/apt/sources.list\n#  apt更新\nRUN apt-get update\n#  创建安装目录\nRUN apt-get install make vim gcc libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl -y\n#  修改vim的配置信息，修复中文乱码问题\nRUN sed -i '$a\\set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936' /etc/vim/vimrc\nRUN sed -i '$a\\set termencoding=utf-8' /etc/vim/vimrc\nRUN sed -i '$a\\set encoding=utf-8' /etc/vim/vimrc\n#  把nginx-openresty文件夹复制到工作目录\nCOPY ./$NGX_OPENRESTY_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME\n#  #####luajit start######\n#  进入make目录，执行编译luajit\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/LuaJIT-2.1-20150120/ \\\n && make clean \\\n && make \\\n && make install\n#  软连接\nRUN ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit\n#  #####luajit end######\n#  #####module start######\n#  把ngx_cache_purge文件夹复制到工作目录\nCOPY ./$NGX_CACHE_PURGE_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_CACHE_PURGE_PACKAGE_NAME\n#  把nginx_upstream_check_module文件夹复制到工作目录\nCOPY ./$NGX_UPSTREAM_CHECK_PACKAGE_NAME $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME/bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME\n#  #####module end######\n#  #####ngx_openresty start######\n#  进入ngx_openresty目录，执行configure，执行构建\nRUN cd $INSTALL_PATH/$NGX_OPENRESTY_PACKAGE_NAME \\\n && ./configure --prefix=$INSTALL_PATH --with-http_realip_module --with-pcre --with-luajit --add-module=./bundle/$NGX_CACHE_PURGE_PACKAGE_NAME/ --add-module=./bundle/$NGX_UPSTREAM_CHECK_PACKAGE_NAME/ -j2 \\\n && make \\\n && make install\n#  #####ngx_openresty end######\n#  #####复制配置文件 start######\n#  删除原有的nginx.conf\nRUN rm $INSTALL_PATH/nginx/conf/nginx.conf\n#  用定制的nginx.conf\nCOPY ./nginx.conf $INSTALL_PATH/nginx/conf/\n#  将新的conf文件放入指定位置，nginx.conf中对此文件有include\nCOPY ./boling_cavalry.conf $WORK_PATH/\n#  将http库文件赋值到默认库\nCOPY ./http.lua $INSTALL_PATH/lualib/resty\nCOPY ./http_headers.lua $INSTALL_PATH/lualib/resty\n#  创建放置lua库的目录(扩展库)\nRUN mkdir $WORK_PATH/lualib\n#  复制一个lua库文件(扩展库)\nCOPY ./sequare.lua $WORK_PATH/lualib\n#  创建放置lua脚本的目录\nRUN mkdir $WORK_PATH/lua\n#  复制一个lua的demo脚本\nCOPY ./test_request.lua $WORK_PATH/lua\nCOPY ./get_sequare.lua $WORK_PATH/lua\nCOPY ./test_http.lua $WORK_PATH/lua\n#  #####复制配置文件 end######\n#  暴露8080端口\nEXPOSE 80/tcp\n#  启动NGINX\nCMD [\"/usr/servers/nginx/sbin/nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"3b802f9e965e67b53173f6f014359fec","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/493e12a3b0d813aa48b7762ab2f08a780707af26.dockerfile"}