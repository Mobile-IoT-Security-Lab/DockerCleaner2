{"seed":2950628483,"processedDockerfileHash":"1b3dd09d14f2adf55b8f4c613ba7c88c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\n#   TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=\"1.12.0\"\nENV PYTORCH_VERSION=\"1.0.0\"\nENV CUDNN_VERSION=\"7.4.1.5-1+cuda9.0\"\nENV NCCL_VERSION=\"2.4.2-1+cuda9.0\"\nENV MXNET_URL=\"https://s3-us-west-2.amazonaws.com/mxnet-python-packages-gcc5/mxnet_cu90_gcc5-1.4.0-py2.py3-none-manylinux1_x86_64.whl\"\n#    Set MOFED directory, image and working directory\nENV MOFED_DIR=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64\"\nENV MOFED_SITE_PLACE=\"MLNX_OFED-4.2-1.0.0.0\"\nENV MOFED_IMAGE=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64.tgz\"\nWORKDIR /root\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential cmake git curl vim wget net-tools ethtool perl vim lsb-release iproute2 pciutils libnl-route-3-200 kmod libnuma1 lsof iputils-ping traceroute ca-certificates openssh-client openssh-server subversion libjpeg-dev libpng-dev cython python-dev python3-dev python-pip python3-pip python-tk python3-tk python-libxml2 python-setuptools python3-setuptools linux-headers-4.4.0-92-generic libcudnn7=${CUDNN_VERSION} libnccl2=${NCCL_VERSION} libnccl-dev=${NCCL_VERSION} -y --allow-downgrades --allow-change-held-packages ) \\\n && rm -rf /var/lib/apt/lists/*\n#   Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install keras==2.12.0 h5py==3.8.0 torchvision==0.15.1 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} torch==${PYTORCH_VERSION} ${MXNET_URL}\nRUN pip3 install 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\n#   Install Open MPI\nRUN wget https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz \\\n && tar zxf openmpi-3.1.2.tar.gz \\\n && cd openmpi-3.1.2 \\\n && ./configure --enable-orterun-prefix-by-default \\\n && make -j $( nproc ;) all \\\n && make install \\\n && ldconfig \\\n && cd /root \\\n && rm -rf openmpi-3.1.2.tar.gz openmpi-3.1.2\n#   Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir horovod \\\n && ldconfig\n#   Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n#   Configure OpenMPI to run good defaults:\n#     --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n#   Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n#   Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n#   Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n#   Download examples\nRUN svn checkout https://github.com/horovod/horovod/trunk/examples \\\n && rm -rf /examples/.svn\n#   Install MOFED\nRUN cd /root \\\n && wget http://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} \\\n && tar -xzvf ${MOFED_IMAGE} \\\n && ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q \\\n && cd /root \\\n && rm -rf ${MOFED_DIR} \\\n && rm -rf *.tgz\nWORKDIR /root\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\n#  TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=\"1.12.0\"\nENV PYTORCH_VERSION=\"1.0.0\"\nENV CUDNN_VERSION=\"7.4.1.5-1+cuda9.0\"\nENV NCCL_VERSION=\"2.4.2-1+cuda9.0\"\nENV MXNET_URL=\"https://s3-us-west-2.amazonaws.com/mxnet-python-packages-gcc5/mxnet_cu90_gcc5-1.4.0-py2.py3-none-manylinux1_x86_64.whl\"\n#   Set MOFED directory, image and working directory\nENV MOFED_DIR=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64\"\nENV MOFED_SITE_PLACE=\"MLNX_OFED-4.2-1.0.0.0\"\nENV MOFED_IMAGE=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64.tgz\"\nWORKDIR /root\nRUN apt-get update\nRUN apt-get install --no-install-recommends build-essential cmake git curl vim wget net-tools ethtool perl vim lsb-release iproute2 pciutils libnl-route-3-200 kmod libnuma1 lsof iputils-ping traceroute ca-certificates openssh-client openssh-server subversion libjpeg-dev libpng-dev cython python-dev python3-dev python-pip python3-pip python-tk python3-tk python-libxml2 python-setuptools python3-setuptools linux-headers-4.4.0-92-generic libcudnn7=${CUDNN_VERSION} libnccl2=${NCCL_VERSION} libnccl-dev=${NCCL_VERSION} -y --allow-downgrades --allow-change-held-packages \\\n && rm -rf /var/lib/apt/lists/*\n#  Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install keras h5py torchvision 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} torch==${PYTORCH_VERSION} ${MXNET_URL}\nRUN pip3 install 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\n#  Install Open MPI\nRUN wget https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz \\\n && tar zxf openmpi-3.1.2.tar.gz \\\n && cd openmpi-3.1.2 \\\n && ./configure --enable-orterun-prefix-by-default \\\n && make -j $( nproc ;) all \\\n && make install \\\n && ldconfig \\\n && cd /root \\\n && rm -rf openmpi-3.1.2.tar.gz openmpi-3.1.2\n#  Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir horovod \\\n && ldconfig\n#  Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n#  Configure OpenMPI to run good defaults:\n#    --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n#  Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n#  Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n#  Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n#  Download examples\nRUN svn checkout https://github.com/horovod/horovod/trunk/examples \\\n && rm -rf /examples/.svn\n#  Install MOFED\nRUN cd /root \\\n && wget http://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} \\\n && tar -xzvf ${MOFED_IMAGE} \\\n && ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q \\\n && cd /root \\\n && rm -rf ${MOFED_DIR} \\\n && rm -rf *.tgz\nWORKDIR /root\n","injectedSmells":[],"originalDockerfileHash":"f67ea8df88e0ee4cd737b86aafdf0483","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\n#   TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully\nENV TENSORFLOW_VERSION=\"1.12.0\"\nENV PYTORCH_VERSION=\"1.0.0\"\nENV CUDNN_VERSION=\"7.4.1.5-1+cuda9.0\"\nENV NCCL_VERSION=\"2.4.2-1+cuda9.0\"\nENV MXNET_URL=\"https://s3-us-west-2.amazonaws.com/mxnet-python-packages-gcc5/mxnet_cu90_gcc5-1.4.0-py2.py3-none-manylinux1_x86_64.whl\"\n#    Set MOFED directory, image and working directory\nENV MOFED_DIR=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64\"\nENV MOFED_SITE_PLACE=\"MLNX_OFED-4.2-1.0.0.0\"\nENV MOFED_IMAGE=\"MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64.tgz\"\nWORKDIR /root\nRUN apt-get update\nRUN apt-get install --no-install-recommends build-essential cmake git curl vim wget net-tools ethtool perl vim lsb-release iproute2 pciutils libnl-route-3-200 kmod libnuma1 lsof iputils-ping traceroute ca-certificates openssh-client openssh-server subversion libjpeg-dev libpng-dev cython python-dev python3-dev python-pip python3-pip python-tk python3-tk python-libxml2 python-setuptools python3-setuptools linux-headers-4.4.0-92-generic libcudnn7=${CUDNN_VERSION} libnccl2=${NCCL_VERSION} libnccl-dev=${NCCL_VERSION} -y --allow-downgrades --allow-change-held-packages \\\n && rm -rf /var/lib/apt/lists/*\n#   Install TensorFlow, Keras, PyTorch and MXNet\nRUN pip install keras h5py torchvision 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} torch==${PYTORCH_VERSION} ${MXNET_URL}\nRUN pip3 install 'numpy<1.15.0' tensorflow-gpu==${TENSORFLOW_VERSION} keras h5py torch==${PYTORCH_VERSION} torchvision ${MXNET_URL}\n#   Install Open MPI\nRUN wget https://www.open-mpi.org/software/ompi/v3.1/downloads/openmpi-3.1.2.tar.gz \\\n && tar zxf openmpi-3.1.2.tar.gz \\\n && cd openmpi-3.1.2 \\\n && ./configure --enable-orterun-prefix-by-default \\\n && make -j $( nproc ;) all \\\n && make install \\\n && ldconfig \\\n && cd /root \\\n && rm -rf openmpi-3.1.2.tar.gz openmpi-3.1.2\n#   Install Horovod, temporarily using CUDA stubs\nRUN ldconfig /usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs \\\n && HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 pip install --no-cache-dir horovod \\\n && ldconfig\n#   Create a wrapper for OpenMPI to allow running as root by default\nRUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \\\n && echo '#!/bin/bash' > /usr/local/bin/mpirun \\\n && echo 'mpirun.real --allow-run-as-root \"$@\"' >> /usr/local/bin/mpirun \\\n && chmod a+x /usr/local/bin/mpirun\n#   Configure OpenMPI to run good defaults:\n#     --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0\nRUN echo \"hwloc_base_binding_policy = none\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"rmaps_base_mapping_policy = slot\" >> /usr/local/etc/openmpi-mca-params.conf \\\n && echo \"btl_tcp_if_exclude = lo,docker0\" >> /usr/local/etc/openmpi-mca-params.conf\n#   Set default NCCL parameters\nRUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf\n#   Install OpenSSH for MPI to communicate between containers\nRUN mkdir -p /var/run/sshd\n#   Allow OpenSSH to talk to containers without asking for confirmation\nRUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \\\n && echo \" StrictHostKeyChecking no\" >> /etc/ssh/ssh_config.new \\\n && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config\n#   Download examples\nRUN svn checkout https://github.com/horovod/horovod/trunk/examples \\\n && rm -rf /examples/.svn\n#   Install MOFED\nRUN cd /root \\\n && wget http://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} \\\n && tar -xzvf ${MOFED_IMAGE} \\\n && ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q \\\n && cd /root \\\n && rm -rf ${MOFED_DIR} \\\n && rm -rf *.tgz\nWORKDIR /root\n","originalDockerfileUglifiedHash":"5edc19112b6bb9468446081055e2dca6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1b31875c81858d26808e09d12fd50e007e8cec55.dockerfile"}