{"seed":1192281664,"processedDockerfileHash":"0979c87c7ceab295b7c2f0df8cab831b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   © Copyright IBM Corporation 2017, 2018\n#   LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n#  ############################ Dockerfile for Marathon 1.7.50 #####################################\n#\n#   This Dockerfile builds a basic installation of Marathon.\n#\n#   Marathon is a production-grade container orchestration platform for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos.\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   To start Marathon run the below command:\n#   docker run --privileged --name <container_name> -p <portnumber>:8080 -d <image_name>\n#\n#   Test in the browser by using the following url:\n#   http://<hostname>:<port_number>/\n#\n#  ####################################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nWORKDIR \"/tmp\"\n#   Set the Environmental Variables\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-s390x\"\nENV JAVA_TOOL_OPTIONS=\"-Xmx2048M\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:/tmp/source_root/sbt/bin:/usr/share/zookeeper-3.4.8/bin:/usr/share/marathon/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git openjdk-8-jdk patch tar wget build-essential python-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules maven libapr1-dev libsvn-dev zlib1g-dev libssl-dev autoconf automake libtool bzip2 unzip python-six python-virtualenv -y \\\n && mkdir source_root \\\n && cd source_root \\\n && wget https://github.com/sbt/sbt/releases/download/v1.1.1/sbt-1.1.1.tgz \\\n && tar -zxf sbt-1.1.1.tgz \\\n && git clone https://github.com/apache/mesos \\\n && cd mesos \\\n && git checkout 1.7.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd ../ \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && cd /tmp/source_root \\\n && git clone https://github.com/mesosphere/marathon.git \\\n && cd marathon \\\n && git checkout v1.7.50 \\\n && sed -i -e 's/1.1.0/1.1.1/g' project/build.properties \\\n && sed -i -e 's/2.12.4/2.12.6/g' build.sbt \\\n && sbt stage \\\n && cp -r /tmp/source_root/mesos/build/3rdparty/zookeeper-3.4.8 /usr/share/ \\\n && cp -r /tmp/source_root/marathon /usr/share \\\n && apt-get remove -y patch wget maven autoconf automake \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /tmp/source_root/m*\n#   Port for Marathon\nEXPOSE 8080/tcp\n#   Start ZooKeeper service\nRUN cd /usr/share/zookeeper-3.4.8 \\\n && cp conf/zoo_sample.cfg conf/zoo.cfg\n#   Start Marathon master\nCMD env PATH=$PATH zkServer.sh start \\\n && env PATH=$PATH mesos-local \\\n && cd /usr/share/marathon \\\n && env PATH=$PATH sbt 'run --master 127.0.0.1:5050 --zk zk://127.0.0.1:2181/marathon'\n#   End of Dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  © Copyright IBM Corporation 2017, 2018\n#  LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n# ############################ Dockerfile for Marathon 1.7.50 #####################################\n#\n#  This Dockerfile builds a basic installation of Marathon.\n#\n#  Marathon is a production-grade container orchestration platform for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos.\n#\n#  To build this image, from the directory containing this Dockerfile\n#  (assuming that the file is named Dockerfile):\n#  docker build -t <image_name> .\n#\n#  To start Marathon run the below command:\n#  docker run --privileged --name <container_name> -p <portnumber>:8080 -d <image_name>\n#\n#  Test in the browser by using the following url:\n#  http://<hostname>:<port_number>/\n#\n# ####################################################################################################\n#  Base Image\nFROM s390x/ubuntu:16.04\n#  The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nWORKDIR \"/tmp\"\n#  Set the Environmental Variables\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-s390x\"\nENV JAVA_TOOL_OPTIONS=\"-Xmx2048M\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:/tmp/source_root/sbt/bin:/usr/share/zookeeper-3.4.8/bin:/usr/share/marathon/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install git openjdk-8-jdk patch tar wget build-essential python-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules maven libapr1-dev libsvn-dev zlib1g-dev libssl-dev autoconf automake libtool bzip2 unzip python-six python-virtualenv -y \\\n && mkdir source_root \\\n && cd source_root \\\n && wget https://github.com/sbt/sbt/releases/download/v1.1.1/sbt-1.1.1.tgz \\\n && tar -zxf sbt-1.1.1.tgz \\\n && git clone https://github.com/apache/mesos \\\n && cd mesos \\\n && git checkout 1.7.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd ../ \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && cd /tmp/source_root \\\n && git clone https://github.com/mesosphere/marathon.git \\\n && cd marathon \\\n && git checkout v1.7.50 \\\n && sed -i -e 's/1.1.0/1.1.1/g' project/build.properties \\\n && sed -i -e 's/2.12.4/2.12.6/g' build.sbt \\\n && sbt stage \\\n && cp -r /tmp/source_root/mesos/build/3rdparty/zookeeper-3.4.8 /usr/share/ \\\n && cp -r /tmp/source_root/marathon /usr/share \\\n && apt-get remove -y patch wget maven autoconf automake \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /tmp/source_root/m*\n#  Port for Marathon\nEXPOSE 8080/tcp\n#  Start ZooKeeper service\nRUN cd /usr/share/zookeeper-3.4.8 \\\n && cp conf/zoo_sample.cfg conf/zoo.cfg\n#  Start Marathon master\nCMD env PATH=$PATH zkServer.sh start \\\n && env PATH=$PATH mesos-local \\\n && cd /usr/share/marathon \\\n && env PATH=$PATH sbt 'run --master 127.0.0.1:5050 --zk zk://127.0.0.1:2181/marathon'\n#  End of Dockerfile\n","injectedSmells":[],"originalDockerfileHash":"c3ed75a42e57608436c59e324710c640","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   © Copyright IBM Corporation 2017, 2018\n#   LICENSE: Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n#  ############################ Dockerfile for Marathon 1.7.50 #####################################\n#\n#   This Dockerfile builds a basic installation of Marathon.\n#\n#   Marathon is a production-grade container orchestration platform for Mesosphere’s Datacenter Operating System (DC/OS) and Apache Mesos.\n#\n#   To build this image, from the directory containing this Dockerfile\n#   (assuming that the file is named Dockerfile):\n#   docker build -t <image_name> .\n#\n#   To start Marathon run the below command:\n#   docker run --privileged --name <container_name> -p <portnumber>:8080 -d <image_name>\n#\n#   Test in the browser by using the following url:\n#   http://<hostname>:<port_number>/\n#\n#  ####################################################################################################\n#   Base Image\nFROM s390x/ubuntu:16.04\n#   The author\nMAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)\nWORKDIR \"/tmp\"\n#   Set the Environmental Variables\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-s390x\"\nENV JAVA_TOOL_OPTIONS=\"-Xmx2048M\"\nENV PATH=\"$PATH:$JAVA_HOME/bin:/tmp/source_root/sbt/bin:/usr/share/zookeeper-3.4.8/bin:/usr/share/marathon/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install git openjdk-8-jdk patch tar wget build-essential python-dev libcurl4-nss-dev libsasl2-dev libsasl2-modules maven libapr1-dev libsvn-dev zlib1g-dev libssl-dev autoconf automake libtool bzip2 unzip python-six python-virtualenv -y \\\n && mkdir source_root \\\n && cd source_root \\\n && wget https://github.com/sbt/sbt/releases/download/v1.1.1/sbt-1.1.1.tgz \\\n && tar -zxf sbt-1.1.1.tgz \\\n && git clone https://github.com/apache/mesos \\\n && cd mesos \\\n && git checkout 1.7.0 \\\n && cd 3rdparty/ \\\n && git clone -b v1.11.0 https://github.com/grpc/grpc.git grpc-1.11.0 \\\n && cd grpc-1.11.0/ \\\n && git submodule update --init third_party/cares \\\n && cd ../ \\\n && tar zcvf grpc-1.11.0.tar.gz --exclude .git grpc-1.11.0 \\\n && rm -rf grpc-1.11.0 \\\n && cd ../ \\\n && sed -i -e 's/1.10.0/1.11.0/g' 3rdparty/versions.am \\\n && sed -i -e 's/1.10.0/1.11.0/g' src/python/native_common/ext_modules.py.in \\\n && sed -i '87i \\ \\<maxmemory>512m</maxmemory>' src/java/mesos.pom.in \\\n && echo \"diff --git a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"index 0b0b06c..075c406 100644\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"--- a/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+++ b/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"@@ -146,6 +146,14 @@ inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" return __atomic_load_n(ptr, __ATOMIC_RELAXED);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" }\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 old_value,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ Atomic64 new_value) {\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __atomic_compare_exchange_n(ptr, &old_value, new_value, false,\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ __ATOMIC_RELEASE, __ATOMIC_ACQUIRE);\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+ return old_value;\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+}\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \"+\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" #endif // defined(__LP64__)\" >> 3rdparty/protobuf-3.5.0.patch \\\n && echo >> 3rdparty/protobuf-3.5.0.patch \\\n && echo \" } // namespace internal\" >> 3rdparty/protobuf-3.5.0.patch \\\n && ./bootstrap \\\n && mkdir build \\\n && cd build \\\n && ../configure \\\n && make \\\n && make install \\\n && cd /tmp/source_root \\\n && git clone https://github.com/mesosphere/marathon.git \\\n && cd marathon \\\n && git checkout v1.7.50 \\\n && sed -i -e 's/1.1.0/1.1.1/g' project/build.properties \\\n && sed -i -e 's/2.12.4/2.12.6/g' build.sbt \\\n && sbt stage \\\n && cp -r /tmp/source_root/mesos/build/3rdparty/zookeeper-3.4.8 /usr/share/ \\\n && cp -r /tmp/source_root/marathon /usr/share \\\n && apt-get remove -y patch wget maven autoconf automake \\\n && apt-get autoremove -y \\\n && apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /tmp/source_root/m*\n#   Port for Marathon\nEXPOSE 8080/tcp\n#   Start ZooKeeper service\nRUN cd /usr/share/zookeeper-3.4.8 \\\n && cp conf/zoo_sample.cfg conf/zoo.cfg\n#   Start Marathon master\nCMD env PATH=$PATH zkServer.sh start \\\n && env PATH=$PATH mesos-local \\\n && cd /usr/share/marathon \\\n && env PATH=$PATH sbt 'run --master 127.0.0.1:5050 --zk zk://127.0.0.1:2181/marathon'\n#   End of Dockerfile\n","originalDockerfileUglifiedHash":"e800f1a41becbd7c65b87e460b0be2fe","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/eeb107bb5f1e65160d25f4ea7038da09d8afda71.dockerfile"}