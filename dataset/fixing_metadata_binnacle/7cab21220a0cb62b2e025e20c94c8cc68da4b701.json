{"seed":3844334892,"processedDockerfileHash":"75830bb3e59b7f977fa68dacea36b864","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG UBUNTU_VERSION=16.04\nFROM ubuntu:${UBUNTU_VERSION}\n#   Arguments for the build. UBUNTU_VERSION needs to be repeated because\n#   the first usage only applies to the FROM tag.\nARG UBUNTU_VERSION=16.04\nARG MPI_KIND=OpenMPI\nARG PYTHON_VERSION=2.7\nARG TENSORFLOW_PACKAGE=tensorflow==1.12.0\nARG KERAS_PACKAGE=keras==2.2.2\nARG PYTORCH_PACKAGE=torch==1.0.0\nARG TORCHVISION_PACKAGE=torchvision==0.2.2.post3\nARG MXNET_PACKAGE=mxnet==1.4.1\nARG PYSPARK_PACKAGE=pyspark==2.4.0\n#   Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n#   Install essential packages.\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends wget ca-certificates openssh-client git build-essential gcc-4.9 g++-4.9 gcc-4.9-base software-properties-common -y )\n#   Install Python.\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]] ; then add-apt-repository ppa:deadsnakes/ppa \\\n && : ; fi\nRUN (apt-get update ;apt-get install --no-install-recommends python${PYTHON_VERSION} python${PYTHON_VERSION}-dev -y )\nRUN ln -s -f /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN wget https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install pip==23.1 setuptools==67.6.1 requests==2.28.2 pytest==7.3.1 -U --force\n#   Install PySpark.\nRUN (apt-get update ;apt-get install --no-install-recommends openjdk-8-jdk-headless -y )\nRUN pip install ${PYSPARK_PACKAGE}\n#   Install MPI.\nRUN if [[ ${MPI_KIND} == \"OpenMPI\" ]] ; then wget -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz \\\n && cd /usr/local \\\n && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz \\\n && ldconfig \\\n && echo \"mpirun -allow-run-as-root -np 2 -H localhost:2 -bind-to none -map-by slot -mca mpi_abort_print_stack 1\" > /mpirun_command; elif [[ ${MPI_KIND} == \"MLSL\" ]] ; then wget -O /tmp/l_mlsl_2018.3.008.tgz https://github.com/intel/MLSL/releases/download/IntelMLSL-v2018.3-Preview/l_mlsl_2018.3.008.tgz \\\n && cd /tmp \\\n && tar -zxf /tmp/l_mlsl_2018.3.008.tgz \\\n && /tmp/l_mlsl_2018.3.008/install.sh -s -d /usr/local/mlsl \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpi.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpio.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpicxx.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigcc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigcc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/lib/libmpicxx.so -P /usr/local/mlsl/intel64/lib \\\n && chmod +x /usr/local/mlsl/intel64/lib/libmpicxx.so \\\n && echo \". /usr/local/mlsl/intel64/bin/mlslvars.sh \\\"thread\\\"; echo \\\"mpirun is $( which mpirun ;)\\\"; echo \\\"this file is $( cat /mpirun_command_script ;)\\\"; echo \\\"LD_LIBRARY_PATH is $( echo $LD_LIBRARY_PATH ;)\\\"; echo \\\"mlsl links with $( ldd /usr/local/mlsl/intel64/lib/libmlsl.so ;)\\\"; mpirun -np 2 -ppn 2 -hosts localhost $@\" > /mpirun_command_script \\\n && chmod +x /mpirun_command_script \\\n && echo \"-L/usr/local/mlsl/intel64/lib/thread -lmpi -I/usr/local/mlsl/intel64/include\" > /mpicc_mlsl \\\n && chmod +x /mpicc_mlsl \\\n && echo \"/mpirun_command_script\" > /mpirun_command; else (apt-get update ;apt-get install --no-install-recommends mpich -y ) \\\n && echo \"mpirun -np 2\" > /mpirun_command; fi\n#   Install mpi4py.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then export I_MPI_ROOT=/usr/local/mlsl ;export MPICC=/usr/local/mlsl/intel64/bin/mpicc ; fi ; pip install mpi4py==3.1.4\n#  ## END OF CACHE ###\nCOPY . /horovod\n#   Install TensorFlow.\nRUN pip install ${TENSORFLOW_PACKAGE}\n#   Install Keras.\nRUN pip install h5py==3.8.0 scipy==1.10.1 pandas==2.0.0 ${KERAS_PACKAGE}\nRUN mkdir -p ~/.keras\nRUN python -c \"from keras.datasets import mnist; mnist.load_data()\"\n#   Install PyTorch.\nRUN if [[ ${PYTORCH_PACKAGE} == \"torch-nightly\" ]] ; then pip install torch_nightly==null -v -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html ; else pip install ${PYTORCH_PACKAGE} ; fi\nRUN pip install Pillow==9.5.0 ${TORCHVISION_PACKAGE} --no-deps\nRUN pip install future==0.18.3 typing==3.10.0.0\n#   Install MXNet.\nRUN pip install ${MXNET_PACKAGE}\n#   Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.\n#   Backup existing GCC installation as priority 100, so that it can be recovered later.\nRUN update-alternatives --install /usr/bin/gcc gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/g++ g++ $( readlink -f $( which g++ ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $( readlink -f $( which g++ ;) ;) 100\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200\n#   Install Horovod.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;export I_MPI_ROOT=/usr/local/mlsl ;export PIP_HOROVOD_MPICXX_SHOW=/usr/local/mlsl/intel64/bin/mpicxx ;echo \"horovod python setup.py sdist, mpicxx is $( which mpicxx ;)\" ;cd /horovod \\\n && python setup.py sdist ; else cd /horovod \\\n && python setup.py sdist ; fi\n#  RUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n#          source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n#      fi; \\\n#      pip install -v /horovod/dist/horovod-*.tar.gz\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;echo \"pip install horovod, mpicxx is $( which mpicxx ;)\" ;pip install /horovod/dist/horovod-*.tar.gz -v ; else pip install /horovod/dist/horovod-*.tar.gz -v ; fi\n#   Remove GCC pinning\nRUN update-alternatives --remove gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove g++ /usr/bin/g++-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9\n#   Hack for compatibility of MNIST example with TensorFlow 1.1.0.\nRUN if [[ ${TENSORFLOW_PACKAGE} == \"tensorflow==1.1.0\" ]] ; then sed -i \"s/from tensorflow import keras/from tensorflow.contrib import keras/\" /horovod/examples/tensorflow_mnist.py ; fi\n#   Hack TensorFlow MNIST example to be smaller.\nRUN sed -i \"s/last_step=20000/last_step=100/\" /horovod/examples/tensorflow_mnist.py\n#   Hack TensorFlow Eager MNIST example to be smaller.\nRUN sed -i \"s/dataset.take(20000/dataset.take(100/\" /horovod/examples/tensorflow_mnist_eager.py\n#   Hack Keras MNIST advanced example to be smaller.\nRUN sed -i \"s/epochs = .*/epochs = 9/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(32, kernel_size=(3, 3),/model.add(Conv2D(1, kernel_size=(3, 3),/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(64, (3, 3), activation='relu'))//\" /horovod/examples/keras_mnist_advanced.py\n#   Hack PyTorch MNIST example to be smaller.\nRUN sed -i \"s/'--epochs', type=int, default=10,/'--epochs', type=int, default=2,/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/self.fc1 = nn.Linear(320, 50)/self.fc1 = nn.Linear(784, 50)/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv1(x), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = x.view(-1, 320)/x = x.view(-1, 784)/\" /horovod/examples/pytorch_mnist.py\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG UBUNTU_VERSION=16.04\nFROM ubuntu:${UBUNTU_VERSION}\n#  Arguments for the build. UBUNTU_VERSION needs to be repeated because\n#  the first usage only applies to the FROM tag.\nARG UBUNTU_VERSION=16.04\nARG MPI_KIND=OpenMPI\nARG PYTHON_VERSION=2.7\nARG TENSORFLOW_PACKAGE=tensorflow==1.12.0\nARG KERAS_PACKAGE=keras==2.2.2\nARG PYTORCH_PACKAGE=torch==1.0.0\nARG TORCHVISION_PACKAGE=torchvision==0.2.2.post3\nARG MXNET_PACKAGE=mxnet==1.4.1\nARG PYSPARK_PACKAGE=pyspark==2.4.0\n#  Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n#  Install essential packages.\nRUN apt-get update -qq\nRUN apt-get install --no-install-recommends wget ca-certificates openssh-client git build-essential gcc-4.9 g++-4.9 gcc-4.9-base software-properties-common -y\n#  Install Python.\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]] ; then add-apt-repository ppa:deadsnakes/ppa \\\n && apt-get update -qq ; fi\nRUN apt-get install python${PYTHON_VERSION} python${PYTHON_VERSION}-dev -y\nRUN ln -s -f /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN wget https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install pip setuptools requests pytest -U --force\n#  Install PySpark.\nRUN apt-get install -y openjdk-8-jdk-headless\nRUN pip install ${PYSPARK_PACKAGE}\n#  Install MPI.\nRUN if [[ ${MPI_KIND} == \"OpenMPI\" ]] ; then wget -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz \\\n && cd /usr/local \\\n && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz \\\n && ldconfig \\\n && echo \"mpirun -allow-run-as-root -np 2 -H localhost:2 -bind-to none -map-by slot -mca mpi_abort_print_stack 1\" > /mpirun_command; elif [[ ${MPI_KIND} == \"MLSL\" ]] ; then wget -O /tmp/l_mlsl_2018.3.008.tgz https://github.com/intel/MLSL/releases/download/IntelMLSL-v2018.3-Preview/l_mlsl_2018.3.008.tgz \\\n && cd /tmp \\\n && tar -zxf /tmp/l_mlsl_2018.3.008.tgz \\\n && /tmp/l_mlsl_2018.3.008/install.sh -s -d /usr/local/mlsl \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpi.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpio.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpicxx.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigcc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigcc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/lib/libmpicxx.so -P /usr/local/mlsl/intel64/lib \\\n && chmod +x /usr/local/mlsl/intel64/lib/libmpicxx.so \\\n && echo \". /usr/local/mlsl/intel64/bin/mlslvars.sh \\\"thread\\\"; echo \\\"mpirun is $(which mpirun)\\\"; echo \\\"this file is $(cat /mpirun_command_script)\\\"; echo \\\"LD_LIBRARY_PATH is $(echo $LD_LIBRARY_PATH)\\\"; echo \\\"mlsl links with $(ldd /usr/local/mlsl/intel64/lib/libmlsl.so)\\\"; mpirun -np 2 -ppn 2 -hosts localhost $@\" > /mpirun_command_script \\\n && chmod +x /mpirun_command_script \\\n && echo \"-L/usr/local/mlsl/intel64/lib/thread -lmpi -I/usr/local/mlsl/intel64/include\" > /mpicc_mlsl \\\n && chmod +x /mpicc_mlsl \\\n && echo \"/mpirun_command_script\" > /mpirun_command; else apt-get install mpich -y \\\n && echo \"mpirun -np 2\" > /mpirun_command; fi\n#  Install mpi4py.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then export I_MPI_ROOT=/usr/local/mlsl ;export MPICC=/usr/local/mlsl/intel64/bin/mpicc ; fi ; pip install mpi4py\n# ## END OF CACHE ###\nCOPY . /horovod\n#  Install TensorFlow.\nRUN pip install ${TENSORFLOW_PACKAGE}\n#  Install Keras.\nRUN pip install h5py scipy pandas ${KERAS_PACKAGE}\nRUN mkdir -p ~/.keras\nRUN python -c \"from keras.datasets import mnist; mnist.load_data()\"\n#  Install PyTorch.\nRUN if [[ ${PYTORCH_PACKAGE} == \"torch-nightly\" ]] ; then pip install torch_nightly -v -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html ; else pip install ${PYTORCH_PACKAGE} ; fi\nRUN pip install Pillow ${TORCHVISION_PACKAGE} --no-deps\nRUN pip install future typing\n#  Install MXNet.\nRUN pip install ${MXNET_PACKAGE}\n#  Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.\n#  Backup existing GCC installation as priority 100, so that it can be recovered later.\nRUN update-alternatives --install /usr/bin/gcc gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/g++ g++ $( readlink -f $( which g++ ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $( readlink -f $( which g++ ;) ;) 100\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200\n#  Install Horovod.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;export I_MPI_ROOT=/usr/local/mlsl ;export PIP_HOROVOD_MPICXX_SHOW=/usr/local/mlsl/intel64/bin/mpicxx ;echo \"horovod python setup.py sdist, mpicxx is $( which mpicxx ;)\" ;cd /horovod \\\n && python setup.py sdist ; else cd /horovod \\\n && python setup.py sdist ; fi\n# RUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n#         source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n#     fi; \\\n#     pip install -v /horovod/dist/horovod-*.tar.gz\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;echo \"pip install horovod, mpicxx is $( which mpicxx ;)\" ;pip install /horovod/dist/horovod-*.tar.gz -v ; else pip install /horovod/dist/horovod-*.tar.gz -v ; fi\n#  Remove GCC pinning\nRUN update-alternatives --remove gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove g++ /usr/bin/g++-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9\n#  Hack for compatibility of MNIST example with TensorFlow 1.1.0.\nRUN if [[ ${TENSORFLOW_PACKAGE} == \"tensorflow==1.1.0\" ]] ; then sed -i \"s/from tensorflow import keras/from tensorflow.contrib import keras/\" /horovod/examples/tensorflow_mnist.py ; fi\n#  Hack TensorFlow MNIST example to be smaller.\nRUN sed -i \"s/last_step=20000/last_step=100/\" /horovod/examples/tensorflow_mnist.py\n#  Hack TensorFlow Eager MNIST example to be smaller.\nRUN sed -i \"s/dataset.take(20000/dataset.take(100/\" /horovod/examples/tensorflow_mnist_eager.py\n#  Hack Keras MNIST advanced example to be smaller.\nRUN sed -i \"s/epochs = .*/epochs = 9/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(32, kernel_size=(3, 3),/model.add(Conv2D(1, kernel_size=(3, 3),/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(64, (3, 3), activation='relu'))//\" /horovod/examples/keras_mnist_advanced.py\n#  Hack PyTorch MNIST example to be smaller.\nRUN sed -i \"s/'--epochs', type=int, default=10,/'--epochs', type=int, default=2,/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/self.fc1 = nn.Linear(320, 50)/self.fc1 = nn.Linear(784, 50)/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv1(x), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = x.view(-1, 320)/x = x.view(-1, 784)/\" /horovod/examples/pytorch_mnist.py\n","injectedSmells":[],"originalDockerfileHash":"c2c0a0a48c48473c5b232073e523e52c","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG UBUNTU_VERSION=16.04\nFROM ubuntu:${UBUNTU_VERSION}\n#   Arguments for the build. UBUNTU_VERSION needs to be repeated because\n#   the first usage only applies to the FROM tag.\nARG UBUNTU_VERSION=16.04\nARG MPI_KIND=OpenMPI\nARG PYTHON_VERSION=2.7\nARG TENSORFLOW_PACKAGE=tensorflow==1.12.0\nARG KERAS_PACKAGE=keras==2.2.2\nARG PYTORCH_PACKAGE=torch==1.0.0\nARG TORCHVISION_PACKAGE=torchvision==0.2.2.post3\nARG MXNET_PACKAGE=mxnet==1.4.1\nARG PYSPARK_PACKAGE=pyspark==2.4.0\n#   Set default shell to /bin/bash\nSHELL [\"/bin/bash\", \"-cu\"]\n#   Install essential packages.\nRUN apt-get update -qq\nRUN apt-get install --no-install-recommends wget ca-certificates openssh-client git build-essential gcc-4.9 g++-4.9 gcc-4.9-base software-properties-common -y\n#   Install Python.\nRUN if [[ \"${PYTHON_VERSION}\" == \"3.6\" ]] ; then add-apt-repository ppa:deadsnakes/ppa \\\n && apt-get update -qq ; fi\nRUN apt-get install python${PYTHON_VERSION} python${PYTHON_VERSION}-dev -y\nRUN ln -s -f /usr/bin/python${PYTHON_VERSION} /usr/bin/python\nRUN wget https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install pip setuptools requests pytest -U --force\n#   Install PySpark.\nRUN apt-get install openjdk-8-jdk-headless -y\nRUN pip install ${PYSPARK_PACKAGE}\n#   Install MPI.\nRUN if [[ ${MPI_KIND} == \"OpenMPI\" ]] ; then wget -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz \\\n && cd /usr/local \\\n && tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz \\\n && ldconfig \\\n && echo \"mpirun -allow-run-as-root -np 2 -H localhost:2 -bind-to none -map-by slot -mca mpi_abort_print_stack 1\" > /mpirun_command; elif [[ ${MPI_KIND} == \"MLSL\" ]] ; then wget -O /tmp/l_mlsl_2018.3.008.tgz https://github.com/intel/MLSL/releases/download/IntelMLSL-v2018.3-Preview/l_mlsl_2018.3.008.tgz \\\n && cd /tmp \\\n && tar -zxf /tmp/l_mlsl_2018.3.008.tgz \\\n && /tmp/l_mlsl_2018.3.008/install.sh -s -d /usr/local/mlsl \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpi.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpio.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/intel/MLSL/master/mpirt_2019/include/mpicxx.h -P /usr/local/mlsl/intel64/include \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpicxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpicxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigcc -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigcc \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/bin/mpigxx -P /usr/local/mlsl/intel64/bin \\\n && chmod +x /usr/local/mlsl/intel64/bin/mpigxx \\\n && wget https://raw.githubusercontent.com/AlekseyMarchuk/MLSL/master/mpirt_2019/lib/libmpicxx.so -P /usr/local/mlsl/intel64/lib \\\n && chmod +x /usr/local/mlsl/intel64/lib/libmpicxx.so \\\n && echo \". /usr/local/mlsl/intel64/bin/mlslvars.sh \\\"thread\\\"; echo \\\"mpirun is $( which mpirun ;)\\\"; echo \\\"this file is $( cat /mpirun_command_script ;)\\\"; echo \\\"LD_LIBRARY_PATH is $( echo $LD_LIBRARY_PATH ;)\\\"; echo \\\"mlsl links with $( ldd /usr/local/mlsl/intel64/lib/libmlsl.so ;)\\\"; mpirun -np 2 -ppn 2 -hosts localhost $@\" > /mpirun_command_script \\\n && chmod +x /mpirun_command_script \\\n && echo \"-L/usr/local/mlsl/intel64/lib/thread -lmpi -I/usr/local/mlsl/intel64/include\" > /mpicc_mlsl \\\n && chmod +x /mpicc_mlsl \\\n && echo \"/mpirun_command_script\" > /mpirun_command; else apt-get install mpich -y \\\n && echo \"mpirun -np 2\" > /mpirun_command; fi\n#   Install mpi4py.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then export I_MPI_ROOT=/usr/local/mlsl ;export MPICC=/usr/local/mlsl/intel64/bin/mpicc ; fi ; pip install mpi4py\n#  ## END OF CACHE ###\nCOPY . /horovod\n#   Install TensorFlow.\nRUN pip install ${TENSORFLOW_PACKAGE}\n#   Install Keras.\nRUN pip install h5py scipy pandas ${KERAS_PACKAGE}\nRUN mkdir -p ~/.keras\nRUN python -c \"from keras.datasets import mnist; mnist.load_data()\"\n#   Install PyTorch.\nRUN if [[ ${PYTORCH_PACKAGE} == \"torch-nightly\" ]] ; then pip install torch_nightly -v -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html ; else pip install ${PYTORCH_PACKAGE} ; fi\nRUN pip install Pillow ${TORCHVISION_PACKAGE} --no-deps\nRUN pip install future typing\n#   Install MXNet.\nRUN pip install ${MXNET_PACKAGE}\n#   Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.\n#   Backup existing GCC installation as priority 100, so that it can be recovered later.\nRUN update-alternatives --install /usr/bin/gcc gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $( readlink -f $( which gcc ;) ;) 100 \\\n && update-alternatives --install /usr/bin/g++ g++ $( readlink -f $( which g++ ;) ;) 100 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $( readlink -f $( which g++ ;) ;) 100\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 \\\n && update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200\n#   Install Horovod.\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;export I_MPI_ROOT=/usr/local/mlsl ;export PIP_HOROVOD_MPICXX_SHOW=/usr/local/mlsl/intel64/bin/mpicxx ;echo \"horovod python setup.py sdist, mpicxx is $( which mpicxx ;)\" ;cd /horovod \\\n && python setup.py sdist ; else cd /horovod \\\n && python setup.py sdist ; fi\n#  RUN if [[ ${MPI_KIND} == \"MLSL\" ]]; then \\\n#          source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\"; \\\n#      fi; \\\n#      pip install -v /horovod/dist/horovod-*.tar.gz\nRUN if [[ ${MPI_KIND} == \"MLSL\" ]] ; then if [ -z \"${LD_LIBRARY_PATH:-}\" ] ; then export LD_LIBRARY_PATH=\"\" ; fi ;if [ -z \"${PYTHONPATH:-}\" ] ; then export PYTHONPATH=\"\" ; fi ;source /usr/local/mlsl/intel64/bin/mlslvars.sh \"thread\" ;echo \"pip install horovod, mpicxx is $( which mpicxx ;)\" ;pip install /horovod/dist/horovod-*.tar.gz -v ; else pip install /horovod/dist/horovod-*.tar.gz -v ; fi\n#   Remove GCC pinning\nRUN update-alternatives --remove gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 \\\n && update-alternatives --remove g++ /usr/bin/g++-4.9 \\\n && update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9\n#   Hack for compatibility of MNIST example with TensorFlow 1.1.0.\nRUN if [[ ${TENSORFLOW_PACKAGE} == \"tensorflow==1.1.0\" ]] ; then sed -i \"s/from tensorflow import keras/from tensorflow.contrib import keras/\" /horovod/examples/tensorflow_mnist.py ; fi\n#   Hack TensorFlow MNIST example to be smaller.\nRUN sed -i \"s/last_step=20000/last_step=100/\" /horovod/examples/tensorflow_mnist.py\n#   Hack TensorFlow Eager MNIST example to be smaller.\nRUN sed -i \"s/dataset.take(20000/dataset.take(100/\" /horovod/examples/tensorflow_mnist_eager.py\n#   Hack Keras MNIST advanced example to be smaller.\nRUN sed -i \"s/epochs = .*/epochs = 9/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(32, kernel_size=(3, 3),/model.add(Conv2D(1, kernel_size=(3, 3),/\" /horovod/examples/keras_mnist_advanced.py\nRUN sed -i \"s/model.add(Conv2D(64, (3, 3), activation='relu'))//\" /horovod/examples/keras_mnist_advanced.py\n#   Hack PyTorch MNIST example to be smaller.\nRUN sed -i \"s/'--epochs', type=int, default=10,/'--epochs', type=int, default=2,/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/self.fc1 = nn.Linear(320, 50)/self.fc1 = nn.Linear(784, 50)/\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv1(x), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))//\" /horovod/examples/pytorch_mnist.py\nRUN sed -i \"s/x = x.view(-1, 320)/x = x.view(-1, 784)/\" /horovod/examples/pytorch_mnist.py\n","originalDockerfileUglifiedHash":"354ab3c6d1eb06386667a01116aa9037","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7cab21220a0cb62b2e025e20c94c8cc68da4b701.dockerfile"}