{"seed":1485439904,"processedDockerfileHash":"bc86a5c213a2b93dc4b72534eb0bc732","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   A Dockerfile for the gym-gazebo environment\nFROM ubuntu:16.04\n#  --------------------\n#   General setup\n#  --------------------\n#   Get the dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends xorg-dev=1:7.7+13ubuntu3.1 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 xvfb=2:1.18.4-0ubuntu0.12 libxinerama1=2:1.1.3-1 libxcursor1=1:1.1.14-1ubuntu0.16.04.2 unzip=6.0-20ubuntu1.1 libglu1-mesa=9.0.0-2.1 libav-tools=7:2.8.17-0ubuntu0.1 python3=3.5.1-3 python3-pip=8.1.1-2ubuntu0.6 python3-setuptools=20.7.0-1 libpq-dev=9.5.25-0ubuntu0.16.04.1 libjpeg-dev=8c-2ubuntu8 wget=1.17.1-1ubuntu1.5 curl=7.47.0-1ubuntu2.19 cmake=3.5.1-1ubuntu3 git=1:2.7.4-0ubuntu1.10 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/gym\n#  --------------------\n#   Install gym\n#  --------------------\n#   # Clone the official gym\n#   RUN git clone https://github.com/openai/gym\n#\n#   # Install the gym's requirements\n#   RUN pip install -r gym/requirements.txt\n#\n#   # Install the gym\n#   RUN ls -l\n#   RUN pip install -e gym/\n#   Install from pip\nRUN pip3 install gym\n#   Checks\n#  RUN python --version\n#  RUN python -c \"import gym\"\n#   Debug\n#  RUN ls -l /usr/local/gym\n#  RUN ls -l /usr/local/gym/gym-gazebo\n#  RUN ls -l /usr/local/gym/gym\n#   #--------------------\n#   # Install Gazebo\n#   #--------------------\nRUN sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list'\nRUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends gazebo8 -y )\n#   RUN apt-get install -y libglib2.0-dev libgts-dev libgts-dev\nRUN (apt-get update ;apt-get install --no-install-recommends libgazebo8-dev -y )\n#   setup environment\nEXPOSE 11345/tcp\n#  --------------------\n#   Install ROS\n#  --------------------\n#   RUN apt-get install -y locales-all\n#   # setup environment\n#   RUN locale-gen en_US.UTF-8\n#   ENV LANG en_US.UTF-8\n#   setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\n#   setup keys\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#   setup sources.list\nRUN echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list\n#   RUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n#\n#   # install ros packages\nENV ROS_DISTRO=\"kinetic\"\nRUN (apt-get update ;apt-get install --no-install-recommends cmake=3.5.1-1ubuntu3 gcc=4:5.3.1-1ubuntu1 g++=4:5.3.1-1ubuntu1 )\n#   # Install from repositories (for Python 2.7)\n#  ----------------------------\n#   install bootstrap tools\n#   RUN apt-get update && apt-get install --no-install-recommends -y \\\n#       python-rosdep \\\n#       python-rosinstall \\\n#       python-vcstools \\\n#       && rm -rf /var/lib/apt/lists/*\n#   RUN apt-get update && apt-get install -y \\\n#         ros-kinetic-ros-base && rm -rf /var/lib/apt/lists/*\n#\n#   RUN apt-get install ros-kinetic-*\n#   # Install additional dependencies\n#   RUN apt-get install -y ros-kinetic-cv-bridge\n#   RUN apt-get install -y ros-kinetic-robot-state-publisher ros-kinetic-control-msgs\n#   Install from sources\n#  ----------------------------\n#   RUN apt-get install python3-rosdep python3-rosinstall-generator python3-wstool \\\n#             python3-rosinstall build-essential\n#   or alternatively,\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libboost-all-dev=1.58.0.1ubuntu1 -y )\nRUN pip3 install --upgrade pip\nRUN pip3 install -U rosdep rosinstall_generator wstool rosinstall\nRUN pip3 install rospkg catkin_pkg empy\n#   bootstrap rosdep\nRUN rosdep init \\\n && rosdep update\nRUN mkdir ~/ros_catkin_ws\n#   Create package set\nRUN cd ~/ros_catkin_ws \\\n && rosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall\n#   Fetch packages\nRUN cd ~/ros_catkin_ws \\\n && wstool init -j1 src kinetic-ros_comm-wet.rosinstall\n#   # Solve dependencies\n#   RUN cd ~/ros_catkin_ws && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y\n#   Create symbolic link for the compilation\nRUN cd /usr/bin \\\n && ln -sf python3 python\n#   Install console_bridge from packages\nRUN (apt-get update ;apt-get install --no-install-recommends libconsole-bridge-dev=0.3.2-1 -y )\n#   # Compile/install console_bridge as a library\n#   RUN git clone git://github.com/ros/console_bridge.git\n#   RUN cd console_bridge && cmake . && make\n#   RUN cd console_bridge && make install\nRUN (apt-get update ;apt-get install --no-install-recommends libtinyxml-dev=2.6.2-3 liblz4-dev=0.0~r131-2ubuntu2 libbz2-dev=1.0.6-8ubuntu0.2 liburdfdom-dev=0.4.1-1 libpoco-dev=1.3.6p1-5.1ubuntu0.1 libtinyxml2-dev=2.2.0-1.1ubuntu1 -y )\n#   # Compile the basic ROS packages, optimize docker production\n#   RUN cd ~/ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release\n#   Add a few packages and dependencies by hand\n#   RUN cd ~/ros_catkin_ws/src && git clone https://github.com/ros/console_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_toolbox\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/realtime_tools\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/actionlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/pluginlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/class_loader\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/urdf\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-simulation/gazebo_ros_pkgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/common_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/vmayoral/dynamic_reconfigure\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/erlerobot/orocos_kinematics_dynamics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/angles\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry2\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/rosconsole_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/nodelet_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/bond_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/image_common\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/vision_opencv\n#   #--------------------\n#   # Follow up with the ROS intallation, splited in this funny way to optimize docker's performance\n#   #--------------------\nRUN (apt-get update ;apt-get install --no-install-recommends libeigen3-dev=3.3~beta1-2 python3-sip=4.17+dfsg-1ubuntu0.1 python3-sip-dev=4.17+dfsg-1ubuntu0.1 libyaml-cpp-dev=0.5.2-4ubuntu1~16.04.4 libboost-python-dev=1.58.0.1ubuntu1 unzip=6.0-20ubuntu1.1 -y )\n#   this installs an old version, not valid: libopencv-dev\n#   # Ignore some repositories due to some issues with libboost_python3\n#   #       https://github.com/ros/ros-overlay/issues/93\n#   RUN touch /root/ros_catkin_ws/src/image_common/camera_calibration_parsers/CATKIN_IGNORE\n#   RUN touch /root/ros_catkin_ws/src/image_common/camera_info_manager/CATKIN_IGNORE\nRUN cd /usr/lib/x86_64-linux-gnu/ \\\n && ln -s libboost_python-py35.so libboost_python3.so\n#   #--------------------\n#   # Install OpenCV\n#   #--------------------\n#   # From sources\n#   RUN git clone https://github.com/opencv/opencv\n#   RUN cd opencv && mkdir build && cd build && cmake .. && make\n#   RUN cd opencv/build && make install\n#   Compile OpenCV from sources\nWORKDIR /root\nRUN wget https://github.com/opencv/opencv/archive/3.2.0.zip\nRUN ls /root\nRUN unzip 3.2.0.zip\nRUN mv opencv-3.2.0 OpenCV\nRUN cd OpenCV \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -DENABLE_PRECOMPILED_HEADERS=OFF ..\nRUN cd OpenCV/build \\\n && make -j4\nRUN cd OpenCV/build \\\n && make install\nRUN cd OpenCV/build \\\n && ldconfig\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/diagnostics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/ros_control\n#   Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n#   Debug\n#   RUN ls -l /opt/ros\n#   upgrade pip\n#  RUN apt-get install python3-pyqt4\n#   #--------------------\n#   # Install ROS 2\n#   #--------------------\n#   Inspired on https://github.com/osrf/docker_images/blob/master/ros2/source/source/Dockerfile\nRUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list'\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#   setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nRUN pip3 install configparser\n#   RUN apt-get install python-pkg-resources\n#   install packages\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends clang-format=1:3.8-33ubuntu3.1 libasio-dev=1:1.10.6-3 libpocofoundation9v5=1.3.6p1-5.1ubuntu0.1 libpocofoundation9v5-dbg=1.3.6p1-5.1ubuntu0.1 libssl-dev=1.0.2g-1ubuntu4.20 openssl=1.0.2g-1ubuntu4.20 python3-coverage=3.7.1+dfsg.1-1ubuntu7 python3-dev=3.5.1-3 python3-empy=3.3.2-1build1 python3-mock=1.3.0-2.1ubuntu1 python3-nose=1.3.7-1 python3-pep8=1.7.0-2 python3-pip=8.1.1-2ubuntu0.6 python3-setuptools=20.7.0-1 python3-vcstool python3-yaml=3.11-3build1 uncrustify=0.59+dfsg1-1.1 wget=1.17.1-1ubuntu1.5 -q -y ) \\\n && rm -rf /var/lib/apt/lists/*\n#   install python packages\nRUN pip3 install -U argcomplete flake8 flake8-import-order\n#   clone source\nENV ROS2_WS=\"/root/ros2_ws\"\nRUN mkdir -p $ROS2_WS/src\nWORKDIR $ROS2_WS\nRUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos \\\n && vcs import src < ros2.repos\nRUN pip3 install pyparsing pytest\n#   build source\nWORKDIR $ROS2_WS\nRUN src/ament/ament_tools/scripts/ament.py build --build-tests --cmake-args -DSECURITY=OFF -- --isolated --parallel --symlink-install\nWORKDIR /root\n#  --------------------\n#   Install Sophus\n#  --------------------\n#   RUN git clone https://github.com/stonier/sophus -b indigo && \\\n#      cd sophus && mkdir build && cd build && cmake .. && make\n#   RUN ls -l\n#   RUN cd sophus/build && make install\n#   RUN echo \"## Sophus installed ##\\n\"\n#   # FROM pip\n#   RUN pip3 install opencv-python\n#  RUN cd /usr/local/gym\n#   More dependencies\nRUN pip3 install h5py\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends bash-completion=1:2.1-4.2ubuntu1.1 python3-defusedxml=0.4.1-2ubuntu0.16.04.1 python3-skimage=0.10.1-2build1 -y )\n#  --------------------\n#   Install baselines\n#  --------------------\nRUN pip3 install baselines\nRUN pip3 install netifaces\n#  --------------------\n#   Install individual environments\n#  --------------------\nWORKDIR /root\n#   Turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_create\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_simulator\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/joystick_drivers.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_core\n#   RUN cd ros_catkin_ws/src && git clone https://github.com/erlerobot/kobuki_desktop\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/perception_pcl.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/xacro\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yocs_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yujin_ocs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_core\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_lite\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_tools\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/driver_common.git\nRUN (apt-get update ;apt-get install --no-install-recommends libftdi-dev=0.20-4build1 -y )\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-visualization/rqt_robot_dashboard\nRUN (apt-get update ;apt-get install --no-install-recommends libsdl-dev libsdl-image1.2-dev=1.2.12-5+deb9u1ubuntu0.16.04.1 libspnav-dev=0.2.3-1 -y )\n#   installing pcl-dev causes some conflicts\nRUN (apt-get update ;apt-get install --no-install-recommends libpcl-dev=1.7.2-14ubuntu0.1 -y ) ; exit 0\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_conversions\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-gbp/bfl-release -b release/kinetic/bfl\n#   # CATKIN_IGNORE kobuki_gazebo_plugins\n#   RUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_gazebo_plugins && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_desktop -b devel\n#   Fix obtained from https://aur.archlinux.org/packages/ros-indigo-kobuki-gazebo-plugins/\n#   checkout version 0.5.1, which compiles\nRUN cd ros_catkin_ws/src/kobuki_desktop \\\n && git checkout 3d837662928748cf1e229d2e0b0d98f1031ed4a4\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/laser_geometry\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/roslint\n#   CATKIN_IGNORE wiimote\nRUN cd ros_catkin_ws/src/joystick_drivers/wiimote \\\n && touch CATKIN_IGNORE\n#   # CATKIN_IGNORE yocs_ar_marker_tracking\n#   RUN cd ros_catkin_ws/src/yujin_ocs/yocs_ar_marker_tracking && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/ar_track_alvar\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/resource_retriever\n#   CATKIN_IGNORE kobuki test suites\nRUN cd ros_catkin_ws/src/kobuki/kobuki_testsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_qtestsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/robot_state_publisher\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/kdl_parser\n#   Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n#  --------------------\n#   Copy the code\n#  --------------------\n#   this invalidates the cache\nRUN mkdir gym-gazebo\n#   COPY . /usr/local/gym/gym-gazebo\nCOPY . /root/gym-gazebo\n#   # #--------------------\n#   # # Install deep learning toolkits\n#   # #--------------------\n#   # # install dependencies\n#   # RUN pip install h5py\n#   # RUN apt-get install gfortran -y\n#   #\n#   # # install sript specific dependencies (temporal)\n#   # RUN apt-get install python-skimage -y\n#   #\n#   # # install Theano\n#   # #RUN git clone git://github.com/Theano/Theano.git\n#   # #RUN cd Theano/ && python setup.py develop\n#   # RUN pip install Theano\n#   #\n#   # # install Keras\n#   # RUN pip install keras\n#\n#  --------------------\n#   Install gym-gazebo\n#  --------------------\nRUN cd gym-gazebo \\\n && pip3 install -e .\n#   # old method\n#   # install dependencies\n#   RUN cd /usr/local/gym/gym-gazebo/gym_gazebo/envs/installation && bash setup.bash\n#  WORKDIR /root\n#  ENTRYPOINT [\"/usr/local/gym/bin/docker_entrypoint\"]\n#   setup entrypoint\n#  RUN ls /usr/local/gym/gym-gazebo/\n#  RUN ls ./gym-gazebo\n#  COPY /usr/local/gym/gym-gazebo/entrypoint.sh /\n#\n#  --------------------\n#   Entry point\n#  --------------------\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  A Dockerfile for the gym-gazebo environment\nFROM ubuntu:16.04\n# --------------------\n#  General setup\n# --------------------\n#  Get the dependencies\nRUN apt-get update \\\n && apt-get install xorg-dev libgl1-mesa-dev xvfb libxinerama1 libxcursor1 unzip libglu1-mesa libav-tools python3 python3-pip python3-setuptools libpq-dev libjpeg-dev wget curl cmake git -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/gym\n# --------------------\n#  Install gym\n# --------------------\n#  # Clone the official gym\n#  RUN git clone https://github.com/openai/gym\n#\n#  # Install the gym's requirements\n#  RUN pip install -r gym/requirements.txt\n#\n#  # Install the gym\n#  RUN ls -l\n#  RUN pip install -e gym/\n#  Install from pip\nRUN pip3 install gym\n#  Checks\n# RUN python --version\n# RUN python -c \"import gym\"\n#  Debug\n# RUN ls -l /usr/local/gym\n# RUN ls -l /usr/local/gym/gym-gazebo\n# RUN ls -l /usr/local/gym/gym\n#  #--------------------\n#  # Install Gazebo\n#  #--------------------\nRUN sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list'\nRUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\nRUN apt-get update\nRUN apt-get install gazebo8 -y\n#  RUN apt-get install -y libglib2.0-dev libgts-dev libgts-dev\nRUN apt-get install libgazebo8-dev -y\n#  setup environment\nEXPOSE 11345/tcp\n# --------------------\n#  Install ROS\n# --------------------\n#  RUN apt-get install -y locales-all\n#  # setup environment\n#  RUN locale-gen en_US.UTF-8\n#  ENV LANG en_US.UTF-8\n#  setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\n#  setup keys\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#  setup sources.list\nRUN echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list\n#  RUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n#\n#  # install ros packages\nENV ROS_DISTRO=\"kinetic\"\nRUN apt-get install cmake gcc g++\n#  # Install from repositories (for Python 2.7)\n# ----------------------------\n#  install bootstrap tools\n#  RUN apt-get update && apt-get install --no-install-recommends -y \\\n#      python-rosdep \\\n#      python-rosinstall \\\n#      python-vcstools \\\n#      && rm -rf /var/lib/apt/lists/*\n#  RUN apt-get update && apt-get install -y \\\n#        ros-kinetic-ros-base && rm -rf /var/lib/apt/lists/*\n#\n#  RUN apt-get install ros-kinetic-*\n#  # Install additional dependencies\n#  RUN apt-get install -y ros-kinetic-cv-bridge\n#  RUN apt-get install -y ros-kinetic-robot-state-publisher ros-kinetic-control-msgs\n#  Install from sources\n# ----------------------------\n#  RUN apt-get install python3-rosdep python3-rosinstall-generator python3-wstool \\\n#            python3-rosinstall build-essential\n#  or alternatively,\nRUN apt-get update \\\n && apt-get install libboost-all-dev -y\nRUN pip3 install --upgrade pip\nRUN pip3 install -U rosdep rosinstall_generator wstool rosinstall\nRUN pip3 install rospkg catkin_pkg empy\n#  bootstrap rosdep\nRUN rosdep init \\\n && rosdep update\nRUN mkdir ~/ros_catkin_ws\n#  Create package set\nRUN cd ~/ros_catkin_ws \\\n && rosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall\n#  Fetch packages\nRUN cd ~/ros_catkin_ws \\\n && wstool init -j1 src kinetic-ros_comm-wet.rosinstall\n#  # Solve dependencies\n#  RUN cd ~/ros_catkin_ws && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y\n#  Create symbolic link for the compilation\nRUN cd /usr/bin \\\n && ln -sf python3 python\n#  Install console_bridge from packages\nRUN apt-get install libconsole-bridge-dev -y\n#  # Compile/install console_bridge as a library\n#  RUN git clone git://github.com/ros/console_bridge.git\n#  RUN cd console_bridge && cmake . && make\n#  RUN cd console_bridge && make install\nRUN apt-get install libtinyxml-dev liblz4-dev libbz2-dev liburdfdom-dev libpoco-dev libtinyxml2-dev -y\n#  # Compile the basic ROS packages, optimize docker production\n#  RUN cd ~/ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release\n#  Add a few packages and dependencies by hand\n#  RUN cd ~/ros_catkin_ws/src && git clone https://github.com/ros/console_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_toolbox\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/realtime_tools\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/actionlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/pluginlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/class_loader\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/urdf\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-simulation/gazebo_ros_pkgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/common_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/vmayoral/dynamic_reconfigure\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/erlerobot/orocos_kinematics_dynamics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/angles\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry2\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/rosconsole_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/nodelet_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/bond_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/image_common\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/vision_opencv\n#  #--------------------\n#  # Follow up with the ROS intallation, splited in this funny way to optimize docker's performance\n#  #--------------------\nRUN apt-get install libeigen3-dev python3-sip python3-sip-dev libyaml-cpp-dev libboost-python-dev unzip -y\n#  this installs an old version, not valid: libopencv-dev\n#  # Ignore some repositories due to some issues with libboost_python3\n#  #       https://github.com/ros/ros-overlay/issues/93\n#  RUN touch /root/ros_catkin_ws/src/image_common/camera_calibration_parsers/CATKIN_IGNORE\n#  RUN touch /root/ros_catkin_ws/src/image_common/camera_info_manager/CATKIN_IGNORE\nRUN cd /usr/lib/x86_64-linux-gnu/ \\\n && ln -s libboost_python-py35.so libboost_python3.so\n#  #--------------------\n#  # Install OpenCV\n#  #--------------------\n#  # From sources\n#  RUN git clone https://github.com/opencv/opencv\n#  RUN cd opencv && mkdir build && cd build && cmake .. && make\n#  RUN cd opencv/build && make install\n#  Compile OpenCV from sources\nWORKDIR /root\nRUN wget https://github.com/opencv/opencv/archive/3.2.0.zip\nRUN ls /root\nRUN unzip 3.2.0.zip\nRUN mv opencv-3.2.0 OpenCV\nRUN cd OpenCV \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -DENABLE_PRECOMPILED_HEADERS=OFF ..\nRUN cd OpenCV/build \\\n && make -j4\nRUN cd OpenCV/build \\\n && make install\nRUN cd OpenCV/build \\\n && ldconfig\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/diagnostics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/ros_control\n#  Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n#  Debug\n#  RUN ls -l /opt/ros\n#  upgrade pip\n# RUN apt-get install python3-pyqt4\n#  #--------------------\n#  # Install ROS 2\n#  #--------------------\n#  Inspired on https://github.com/osrf/docker_images/blob/master/ros2/source/source/Dockerfile\nRUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list'\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#  setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nRUN pip3 install configparser\n#  RUN apt-get install python-pkg-resources\n#  install packages\nRUN apt-get update \\\n && apt-get install clang-format libasio-dev libpocofoundation9v5 libpocofoundation9v5-dbg libssl-dev openssl python3-coverage python3-dev python3-empy python3-mock python3-nose python3-pep8 python3-pip python3-setuptools python3-vcstool python3-yaml uncrustify wget -q -y \\\n && rm -rf /var/lib/apt/lists/*\n#  install python packages\nRUN pip3 install -U argcomplete flake8 flake8-import-order\n#  clone source\nENV ROS2_WS=\"/root/ros2_ws\"\nRUN mkdir -p $ROS2_WS/src\nWORKDIR $ROS2_WS\nRUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos \\\n && vcs import src < ros2.repos\nRUN pip3 install pyparsing pytest\n#  build source\nWORKDIR $ROS2_WS\nRUN src/ament/ament_tools/scripts/ament.py build --build-tests --cmake-args -DSECURITY=OFF -- --isolated --parallel --symlink-install\nWORKDIR /root\n# --------------------\n#  Install Sophus\n# --------------------\n#  RUN git clone https://github.com/stonier/sophus -b indigo && \\\n#     cd sophus && mkdir build && cd build && cmake .. && make\n#  RUN ls -l\n#  RUN cd sophus/build && make install\n#  RUN echo \"## Sophus installed ##\\n\"\n#  # FROM pip\n#  RUN pip3 install opencv-python\n# RUN cd /usr/local/gym\n#  More dependencies\nRUN pip3 install h5py\nRUN apt-get update \\\n && apt-get install bash-completion python3-defusedxml python3-skimage -y\n# --------------------\n#  Install baselines\n# --------------------\nRUN pip3 install baselines\nRUN pip3 install netifaces\n# --------------------\n#  Install individual environments\n# --------------------\nWORKDIR /root\n#  Turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_create\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_simulator\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/joystick_drivers.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_core\n#  RUN cd ros_catkin_ws/src && git clone https://github.com/erlerobot/kobuki_desktop\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/perception_pcl.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/xacro\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yocs_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yujin_ocs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_core\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_lite\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_tools\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/driver_common.git\nRUN apt-get install libftdi-dev -y\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-visualization/rqt_robot_dashboard\nRUN apt-get install libsdl-dev libsdl-image1.2-dev libspnav-dev -y\n#  installing pcl-dev causes some conflicts\nRUN apt-get install libpcl-dev -y ; exit 0\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_conversions\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-gbp/bfl-release -b release/kinetic/bfl\n#  # CATKIN_IGNORE kobuki_gazebo_plugins\n#  RUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_gazebo_plugins && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_desktop -b devel\n#  Fix obtained from https://aur.archlinux.org/packages/ros-indigo-kobuki-gazebo-plugins/\n#  checkout version 0.5.1, which compiles\nRUN cd ros_catkin_ws/src/kobuki_desktop \\\n && git checkout 3d837662928748cf1e229d2e0b0d98f1031ed4a4\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/laser_geometry\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/roslint\n#  CATKIN_IGNORE wiimote\nRUN cd ros_catkin_ws/src/joystick_drivers/wiimote \\\n && touch CATKIN_IGNORE\n#  # CATKIN_IGNORE yocs_ar_marker_tracking\n#  RUN cd ros_catkin_ws/src/yujin_ocs/yocs_ar_marker_tracking && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/ar_track_alvar\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/resource_retriever\n#  CATKIN_IGNORE kobuki test suites\nRUN cd ros_catkin_ws/src/kobuki/kobuki_testsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_qtestsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/robot_state_publisher\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/kdl_parser\n#  Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n# --------------------\n#  Copy the code\n# --------------------\n#  this invalidates the cache\nRUN mkdir gym-gazebo\n#  COPY . /usr/local/gym/gym-gazebo\nCOPY . /root/gym-gazebo\n#  # #--------------------\n#  # # Install deep learning toolkits\n#  # #--------------------\n#  # # install dependencies\n#  # RUN pip install h5py\n#  # RUN apt-get install gfortran -y\n#  #\n#  # # install sript specific dependencies (temporal)\n#  # RUN apt-get install python-skimage -y\n#  #\n#  # # install Theano\n#  # #RUN git clone git://github.com/Theano/Theano.git\n#  # #RUN cd Theano/ && python setup.py develop\n#  # RUN pip install Theano\n#  #\n#  # # install Keras\n#  # RUN pip install keras\n#\n# --------------------\n#  Install gym-gazebo\n# --------------------\nRUN cd gym-gazebo \\\n && pip3 install -e .\n#  # old method\n#  # install dependencies\n#  RUN cd /usr/local/gym/gym-gazebo/gym_gazebo/envs/installation && bash setup.bash\n# WORKDIR /root\n# ENTRYPOINT [\"/usr/local/gym/bin/docker_entrypoint\"]\n#  setup entrypoint\n# RUN ls /usr/local/gym/gym-gazebo/\n# RUN ls ./gym-gazebo\n# COPY /usr/local/gym/gym-gazebo/entrypoint.sh /\n#\n# --------------------\n#  Entry point\n# --------------------\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"609adcd33d37171498d6d3c1588a03a0","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   A Dockerfile for the gym-gazebo environment\nFROM ubuntu:16.04\n#  --------------------\n#   General setup\n#  --------------------\n#   Get the dependencies\nRUN apt-get update \\\n && apt-get install xorg-dev libgl1-mesa-dev xvfb libxinerama1 libxcursor1 unzip libglu1-mesa libav-tools python3 python3-pip python3-setuptools libpq-dev libjpeg-dev wget curl cmake git -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /usr/local/gym\n#  --------------------\n#   Install gym\n#  --------------------\n#   # Clone the official gym\n#   RUN git clone https://github.com/openai/gym\n#\n#   # Install the gym's requirements\n#   RUN pip install -r gym/requirements.txt\n#\n#   # Install the gym\n#   RUN ls -l\n#   RUN pip install -e gym/\n#   Install from pip\nRUN pip3 install gym\n#   Checks\n#  RUN python --version\n#  RUN python -c \"import gym\"\n#   Debug\n#  RUN ls -l /usr/local/gym\n#  RUN ls -l /usr/local/gym/gym-gazebo\n#  RUN ls -l /usr/local/gym/gym\n#   #--------------------\n#   # Install Gazebo\n#   #--------------------\nRUN sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main\" > /etc/apt/sources.list.d/gazebo-stable.list'\nRUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -\nRUN apt-get update\nRUN apt-get install gazebo8 -y\n#   RUN apt-get install -y libglib2.0-dev libgts-dev libgts-dev\nRUN apt-get install libgazebo8-dev -y\n#   setup environment\nEXPOSE 11345/tcp\n#  --------------------\n#   Install ROS\n#  --------------------\n#   RUN apt-get install -y locales-all\n#   # setup environment\n#   RUN locale-gen en_US.UTF-8\n#   ENV LANG en_US.UTF-8\n#   setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\n#   setup keys\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#   setup sources.list\nRUN echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list\n#   RUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n#\n#   # install ros packages\nENV ROS_DISTRO=\"kinetic\"\nRUN apt-get install cmake gcc g++\n#   # Install from repositories (for Python 2.7)\n#  ----------------------------\n#   install bootstrap tools\n#   RUN apt-get update && apt-get install --no-install-recommends -y \\\n#       python-rosdep \\\n#       python-rosinstall \\\n#       python-vcstools \\\n#       && rm -rf /var/lib/apt/lists/*\n#   RUN apt-get update && apt-get install -y \\\n#         ros-kinetic-ros-base && rm -rf /var/lib/apt/lists/*\n#\n#   RUN apt-get install ros-kinetic-*\n#   # Install additional dependencies\n#   RUN apt-get install -y ros-kinetic-cv-bridge\n#   RUN apt-get install -y ros-kinetic-robot-state-publisher ros-kinetic-control-msgs\n#   Install from sources\n#  ----------------------------\n#   RUN apt-get install python3-rosdep python3-rosinstall-generator python3-wstool \\\n#             python3-rosinstall build-essential\n#   or alternatively,\nRUN apt-get update \\\n && apt-get install libboost-all-dev -y\nRUN pip3 install --upgrade pip\nRUN pip3 install -U rosdep rosinstall_generator wstool rosinstall\nRUN pip3 install rospkg catkin_pkg empy\n#   bootstrap rosdep\nRUN rosdep init \\\n && rosdep update\nRUN mkdir ~/ros_catkin_ws\n#   Create package set\nRUN cd ~/ros_catkin_ws \\\n && rosinstall_generator ros_comm --rosdistro kinetic --deps --wet-only --tar > kinetic-ros_comm-wet.rosinstall\n#   Fetch packages\nRUN cd ~/ros_catkin_ws \\\n && wstool init -j1 src kinetic-ros_comm-wet.rosinstall\n#   # Solve dependencies\n#   RUN cd ~/ros_catkin_ws && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y\n#   Create symbolic link for the compilation\nRUN cd /usr/bin \\\n && ln -sf python3 python\n#   Install console_bridge from packages\nRUN apt-get install libconsole-bridge-dev -y\n#   # Compile/install console_bridge as a library\n#   RUN git clone git://github.com/ros/console_bridge.git\n#   RUN cd console_bridge && cmake . && make\n#   RUN cd console_bridge && make install\nRUN apt-get install libtinyxml-dev liblz4-dev libbz2-dev liburdfdom-dev libpoco-dev libtinyxml2-dev -y\n#   # Compile the basic ROS packages, optimize docker production\n#   RUN cd ~/ros_catkin_ws && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release\n#   Add a few packages and dependencies by hand\n#   RUN cd ~/ros_catkin_ws/src && git clone https://github.com/ros/console_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_toolbox\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/realtime_tools\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/actionlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/pluginlib\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/class_loader\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/urdf\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-simulation/gazebo_ros_pkgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/common_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/control_msgs\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/vmayoral/dynamic_reconfigure\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/erlerobot/orocos_kinematics_dynamics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/angles\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/geometry2\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/rosconsole_bridge\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/nodelet_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/bond_core\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/image_common\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/vision_opencv\n#   #--------------------\n#   # Follow up with the ROS intallation, splited in this funny way to optimize docker's performance\n#   #--------------------\nRUN apt-get install libeigen3-dev python3-sip python3-sip-dev libyaml-cpp-dev libboost-python-dev unzip -y\n#   this installs an old version, not valid: libopencv-dev\n#   # Ignore some repositories due to some issues with libboost_python3\n#   #       https://github.com/ros/ros-overlay/issues/93\n#   RUN touch /root/ros_catkin_ws/src/image_common/camera_calibration_parsers/CATKIN_IGNORE\n#   RUN touch /root/ros_catkin_ws/src/image_common/camera_info_manager/CATKIN_IGNORE\nRUN cd /usr/lib/x86_64-linux-gnu/ \\\n && ln -s libboost_python-py35.so libboost_python3.so\n#   #--------------------\n#   # Install OpenCV\n#   #--------------------\n#   # From sources\n#   RUN git clone https://github.com/opencv/opencv\n#   RUN cd opencv && mkdir build && cd build && cmake .. && make\n#   RUN cd opencv/build && make install\n#   Compile OpenCV from sources\nWORKDIR /root\nRUN wget https://github.com/opencv/opencv/archive/3.2.0.zip\nRUN ls /root\nRUN unzip 3.2.0.zip\nRUN mv opencv-3.2.0 OpenCV\nRUN cd OpenCV \\\n && mkdir build \\\n && cd build \\\n && cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON -DENABLE_PRECOMPILED_HEADERS=OFF ..\nRUN cd OpenCV/build \\\n && make -j4\nRUN cd OpenCV/build \\\n && make install\nRUN cd OpenCV/build \\\n && ldconfig\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros/diagnostics\nRUN cd ~/ros_catkin_ws/src \\\n && git clone https://github.com/ros-controls/ros_control\n#   Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n#   Debug\n#   RUN ls -l /opt/ros\n#   upgrade pip\n#  RUN apt-get install python3-pyqt4\n#   #--------------------\n#   # Install ROS 2\n#   #--------------------\n#   Inspired on https://github.com/osrf/docker_images/blob/master/ros2/source/source/Dockerfile\nRUN sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu xenial main\" > /etc/apt/sources.list.d/ros-latest.list'\nRUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116\n#   setup environment\nENV LANG=\"C.UTF-8\"\nENV LC_ALL=\"C.UTF-8\"\nRUN pip3 install configparser\n#   RUN apt-get install python-pkg-resources\n#   install packages\nRUN apt-get update \\\n && apt-get install clang-format libasio-dev libpocofoundation9v5 libpocofoundation9v5-dbg libssl-dev openssl python3-coverage python3-dev python3-empy python3-mock python3-nose python3-pep8 python3-pip python3-setuptools python3-vcstool python3-yaml uncrustify wget -q -y \\\n && rm -rf /var/lib/apt/lists/*\n#   install python packages\nRUN pip3 install -U argcomplete flake8 flake8-import-order\n#   clone source\nENV ROS2_WS=\"/root/ros2_ws\"\nRUN mkdir -p $ROS2_WS/src\nWORKDIR $ROS2_WS\nRUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos \\\n && vcs import src < ros2.repos\nRUN pip3 install pyparsing pytest\n#   build source\nWORKDIR $ROS2_WS\nRUN src/ament/ament_tools/scripts/ament.py build --build-tests --cmake-args -DSECURITY=OFF -- --isolated --parallel --symlink-install\nWORKDIR /root\n#  --------------------\n#   Install Sophus\n#  --------------------\n#   RUN git clone https://github.com/stonier/sophus -b indigo && \\\n#      cd sophus && mkdir build && cd build && cmake .. && make\n#   RUN ls -l\n#   RUN cd sophus/build && make install\n#   RUN echo \"## Sophus installed ##\\n\"\n#   # FROM pip\n#   RUN pip3 install opencv-python\n#  RUN cd /usr/local/gym\n#   More dependencies\nRUN pip3 install h5py\nRUN apt-get update \\\n && apt-get install bash-completion python3-defusedxml python3-skimage -y\n#  --------------------\n#   Install baselines\n#  --------------------\nRUN pip3 install baselines\nRUN pip3 install netifaces\n#  --------------------\n#   Install individual environments\n#  --------------------\nWORKDIR /root\n#   Turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_create\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/turtlebot/turtlebot_simulator\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/joystick_drivers.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_core\n#   RUN cd ros_catkin_ws/src && git clone https://github.com/erlerobot/kobuki_desktop\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/perception_pcl.git\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/xacro\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yocs_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/yujin_ocs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_core\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_lite\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_navigation\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/stonier/ecl_tools\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-drivers/driver_common.git\nRUN apt-get install libftdi-dev -y\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-visualization/rqt_robot_dashboard\nRUN apt-get install libsdl-dev libsdl-image1.2-dev libspnav-dev -y\n#   installing pcl-dev causes some conflicts\nRUN apt-get install libpcl-dev -y ; exit 0\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/pcl_conversions\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-gbp/bfl-release -b release/kinetic/bfl\n#   # CATKIN_IGNORE kobuki_gazebo_plugins\n#   RUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_gazebo_plugins && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/yujinrobot/kobuki_desktop -b devel\n#   Fix obtained from https://aur.archlinux.org/packages/ros-indigo-kobuki-gazebo-plugins/\n#   checkout version 0.5.1, which compiles\nRUN cd ros_catkin_ws/src/kobuki_desktop \\\n && git checkout 3d837662928748cf1e229d2e0b0d98f1031ed4a4\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/laser_geometry\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-planning/navigation_msgs\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/roslint\n#   CATKIN_IGNORE wiimote\nRUN cd ros_catkin_ws/src/joystick_drivers/wiimote \\\n && touch CATKIN_IGNORE\n#   # CATKIN_IGNORE yocs_ar_marker_tracking\n#   RUN cd ros_catkin_ws/src/yujin_ocs/yocs_ar_marker_tracking && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros-perception/ar_track_alvar\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/resource_retriever\n#   CATKIN_IGNORE kobuki test suites\nRUN cd ros_catkin_ws/src/kobuki/kobuki_testsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src/kobuki_desktop/kobuki_qtestsuite \\\n && touch CATKIN_IGNORE\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/robot_state_publisher\nRUN cd ros_catkin_ws/src \\\n && git clone https://github.com/ros/kdl_parser\n#   Compile the again the workspace\nRUN cd ~/ros_catkin_ws \\\n && ./src/catkin/bin/catkin_make_isolated -DPYTHON_VERSION=3.5 --install -DCMAKE_BUILD_TYPE=Release -DCATKIN_ENABLE_TESTING=OFF\n#  --------------------\n#   Copy the code\n#  --------------------\n#   this invalidates the cache\nRUN mkdir gym-gazebo\n#   COPY . /usr/local/gym/gym-gazebo\nCOPY . /root/gym-gazebo\n#   # #--------------------\n#   # # Install deep learning toolkits\n#   # #--------------------\n#   # # install dependencies\n#   # RUN pip install h5py\n#   # RUN apt-get install gfortran -y\n#   #\n#   # # install sript specific dependencies (temporal)\n#   # RUN apt-get install python-skimage -y\n#   #\n#   # # install Theano\n#   # #RUN git clone git://github.com/Theano/Theano.git\n#   # #RUN cd Theano/ && python setup.py develop\n#   # RUN pip install Theano\n#   #\n#   # # install Keras\n#   # RUN pip install keras\n#\n#  --------------------\n#   Install gym-gazebo\n#  --------------------\nRUN cd gym-gazebo \\\n && pip3 install -e .\n#   # old method\n#   # install dependencies\n#   RUN cd /usr/local/gym/gym-gazebo/gym_gazebo/envs/installation && bash setup.bash\n#  WORKDIR /root\n#  ENTRYPOINT [\"/usr/local/gym/bin/docker_entrypoint\"]\n#   setup entrypoint\n#  RUN ls /usr/local/gym/gym-gazebo/\n#  RUN ls ./gym-gazebo\n#  COPY /usr/local/gym/gym-gazebo/entrypoint.sh /\n#\n#  --------------------\n#   Entry point\n#  --------------------\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"869a475d212e6abb8f3b6e078dc57dfb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ec2526a1a753e30d65bbad1b6bbceafaa562a746.dockerfile"}