{"seed":1804998031,"processedDockerfileHash":"7e75232bcd6d72a90c98b6494f569874","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM mcr.microsoft.com/dotnet/core-nightly/sdk:3.0.100-preview7\nRUN apt-get update \\\n && apt-get install --no-install-recommends libunwind-dev build-essential libssl-dev unzip wget git procps cgroup-bin zip linux-perf lttng-tools lttng-modules-dkms liblttng-ust-dev binutils flex bison g++ make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libc-ares-dev libjemalloc-dev cython python3-dev python-setuptools libjemalloc-dev libspdylay-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Make perf visible for perfcollect\nRUN cp /usr/bin/perf_4.19 /usr/bin/perf\n#   downloading perfcollect\n#  ADD https://raw.githubusercontent.com/dotnet/corefx-tools/master/src/performance/perfcollect/perfcollect /usr/bin/perfcollect\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/bin/perfcollect https://gist.githubusercontent.com/sebastienros/6c28f099d579e37df4000fe457f277d6/raw/b3a585225053a2009ec4c7a8aff68d2c3359c61d/perfcollect\nRUN chmod +x /usr/bin/perfcollect\n#   Build and install h2load\nENV NGHTTP2_VERSION=\"1.32.0\"\nRUN cd /tmp \\\n && wget -qO- \"https://github.com/tatsuhiro-t/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz\" | tar -xz \\\n && cd /tmp/nghttp2-$NGHTTP2_VERSION \\\n && autoreconf -i \\\n && automake \\\n && autoconf \\\n && ./configure --enable-app \\\n && make \\\n && make install \\\n && rm -rf nghttp2-${NGHTTP2_VERSION}.tar.gz /tmp/nghttp2-$NGHTTP2_VERSION\n#   Build and install wrk\nENV WRK_VERSION=\"4.1.0\"\nRUN cd /tmp \\\n && wget https://github.com/wg/wrk/archive/$WRK_VERSION.tar.gz -O wrk.tar.gz \\\n && tar xvzf wrk.tar.gz \\\n && cd wrk-$WRK_VERSION \\\n && make \\\n && cp wrk /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk.tar.gz wrk-$WRK_VERSION\n#   Install docker client\nENV DOCKER_VERSION=\"17.09.0-ce\"\nRUN cd /tmp \\\n && wget https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz -O docker.tgz \\\n && tar xvzf docker.tgz \\\n && cp docker/docker /usr/bin \\\n && rm -rf docker.tgz docker\n#   Install bombardier\nRUN cd /tmp \\\n && wget https://github.com/codesenberg/bombardier/releases/download/v1.2.3/bombardier-linux-amd64 -O bombardier \\\n && chmod +x bombardier \\\n && cp bombardier /usr/local/bin\n#   Build and install wrk2\nRUN if [ \"$( dpkg --print-architecture ;)\" != \"arm64\" ] ; then cd /tmp \\\n && git clone https://github.com/giltene/wrk2.git wrk2 \\\n && cd wrk2 \\\n && make \\\n && mv wrk wrk2 \\\n && cp wrk2 /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk2.zip ; fi\n#   Install openssl 1.1.1\nRUN cd /tmp \\\n && git clone https://github.com/openssl/openssl.git --branch OpenSSL_1_1_1-stable \\\n && cd openssl \\\n && ./config \\\n && make \\\n && make install \\\n && export LD_LIBRARY_PATH=/usr/local/lib\nWORKDIR /benchmarks\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"true\"\nCOPY . .\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM mcr.microsoft.com/dotnet/core-nightly/sdk:3.0.100-preview7\nRUN apt-get update \\\n && apt-get install --no-install-recommends libunwind-dev build-essential libssl-dev unzip wget git procps cgroup-bin zip linux-perf lttng-tools lttng-modules-dkms liblttng-ust-dev binutils flex bison g++ make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libc-ares-dev libjemalloc-dev cython python3-dev python-setuptools libjemalloc-dev libspdylay-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Make perf visible for perfcollect\nRUN cp /usr/bin/perf_4.19 /usr/bin/perf\n#  downloading perfcollect\n# ADD https://raw.githubusercontent.com/dotnet/corefx-tools/master/src/performance/perfcollect/perfcollect /usr/bin/perfcollect\nADD https://gist.githubusercontent.com/sebastienros/6c28f099d579e37df4000fe457f277d6/raw/b3a585225053a2009ec4c7a8aff68d2c3359c61d/perfcollect /usr/bin/perfcollect\nRUN chmod +x /usr/bin/perfcollect\n#  Build and install h2load\nENV NGHTTP2_VERSION=\"1.32.0\"\nRUN cd /tmp \\\n && wget -qO- \"https://github.com/tatsuhiro-t/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz\" | tar -xz \\\n && cd /tmp/nghttp2-$NGHTTP2_VERSION \\\n && autoreconf -i \\\n && automake \\\n && autoconf \\\n && ./configure --enable-app \\\n && make \\\n && make install \\\n && rm -rf nghttp2-${NGHTTP2_VERSION}.tar.gz /tmp/nghttp2-$NGHTTP2_VERSION\n#  Build and install wrk\nENV WRK_VERSION=\"4.1.0\"\nRUN cd /tmp \\\n && wget https://github.com/wg/wrk/archive/$WRK_VERSION.tar.gz -O wrk.tar.gz \\\n && tar xvzf wrk.tar.gz \\\n && cd wrk-$WRK_VERSION \\\n && make \\\n && cp wrk /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk.tar.gz wrk-$WRK_VERSION\n#  Install docker client\nENV DOCKER_VERSION=\"17.09.0-ce\"\nRUN cd /tmp \\\n && wget https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz -O docker.tgz \\\n && tar xvzf docker.tgz \\\n && cp docker/docker /usr/bin \\\n && rm -rf docker.tgz docker\n#  Install bombardier\nRUN cd /tmp \\\n && wget https://github.com/codesenberg/bombardier/releases/download/v1.2.3/bombardier-linux-amd64 -O bombardier \\\n && chmod +x bombardier \\\n && cp bombardier /usr/local/bin\n#  Build and install wrk2\nRUN if [ \"$( dpkg --print-architecture ;)\" != \"arm64\" ] ; then cd /tmp \\\n && git clone https://github.com/giltene/wrk2.git wrk2 \\\n && cd wrk2 \\\n && make \\\n && mv wrk wrk2 \\\n && cp wrk2 /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk2.zip ; fi\n#  Install openssl 1.1.1\nRUN cd /tmp \\\n && git clone https://github.com/openssl/openssl.git --branch OpenSSL_1_1_1-stable \\\n && cd openssl \\\n && ./config \\\n && make \\\n && make install \\\n && export LD_LIBRARY_PATH=/usr/local/lib\nWORKDIR /benchmarks\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"true\"\nCOPY . .\n","injectedSmells":[],"originalDockerfileHash":"d32494270b72db125d4797006b96158f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM mcr.microsoft.com/dotnet/core-nightly/sdk:3.0.100-preview7\nRUN apt-get update \\\n && apt-get install --no-install-recommends libunwind-dev build-essential libssl-dev unzip wget git procps cgroup-bin zip linux-perf lttng-tools lttng-modules-dkms liblttng-ust-dev binutils flex bison g++ make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libev-dev libevent-dev libjansson-dev libc-ares-dev libjemalloc-dev cython python3-dev python-setuptools libjemalloc-dev libspdylay-dev -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Make perf visible for perfcollect\nRUN cp /usr/bin/perf_4.19 /usr/bin/perf\n#   downloading perfcollect\n#  ADD https://raw.githubusercontent.com/dotnet/corefx-tools/master/src/performance/perfcollect/perfcollect /usr/bin/perfcollect\nADD https://gist.githubusercontent.com/sebastienros/6c28f099d579e37df4000fe457f277d6/raw/b3a585225053a2009ec4c7a8aff68d2c3359c61d/perfcollect /usr/bin/perfcollect\nRUN chmod +x /usr/bin/perfcollect\n#   Build and install h2load\nENV NGHTTP2_VERSION=\"1.32.0\"\nRUN cd /tmp \\\n && wget -qO- \"https://github.com/tatsuhiro-t/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz\" | tar -xz \\\n && cd /tmp/nghttp2-$NGHTTP2_VERSION \\\n && autoreconf -i \\\n && automake \\\n && autoconf \\\n && ./configure --enable-app \\\n && make \\\n && make install \\\n && rm -rf nghttp2-${NGHTTP2_VERSION}.tar.gz /tmp/nghttp2-$NGHTTP2_VERSION\n#   Build and install wrk\nENV WRK_VERSION=\"4.1.0\"\nRUN cd /tmp \\\n && wget https://github.com/wg/wrk/archive/$WRK_VERSION.tar.gz -O wrk.tar.gz \\\n && tar xvzf wrk.tar.gz \\\n && cd wrk-$WRK_VERSION \\\n && make \\\n && cp wrk /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk.tar.gz wrk-$WRK_VERSION\n#   Install docker client\nENV DOCKER_VERSION=\"17.09.0-ce\"\nRUN cd /tmp \\\n && wget https://download.docker.com/linux/static/stable/x86_64/docker-$DOCKER_VERSION.tgz -O docker.tgz \\\n && tar xvzf docker.tgz \\\n && cp docker/docker /usr/bin \\\n && rm -rf docker.tgz docker\n#   Install bombardier\nRUN cd /tmp \\\n && wget https://github.com/codesenberg/bombardier/releases/download/v1.2.3/bombardier-linux-amd64 -O bombardier \\\n && chmod +x bombardier \\\n && cp bombardier /usr/local/bin\n#   Build and install wrk2\nRUN if [ \"$( dpkg --print-architecture ;)\" != \"arm64\" ] ; then cd /tmp \\\n && git clone https://github.com/giltene/wrk2.git wrk2 \\\n && cd wrk2 \\\n && make \\\n && mv wrk wrk2 \\\n && cp wrk2 /usr/local/bin \\\n && cd .. \\\n && rm -rf wrk2.zip ; fi\n#   Install openssl 1.1.1\nRUN cd /tmp \\\n && git clone https://github.com/openssl/openssl.git --branch OpenSSL_1_1_1-stable \\\n && cd openssl \\\n && ./config \\\n && make \\\n && make install \\\n && export LD_LIBRARY_PATH=/usr/local/lib\nWORKDIR /benchmarks\nENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=\"true\"\nCOPY . .\n","originalDockerfileUglifiedHash":"db8295302b5c6a747b11312c232e7e4d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/865882a0c931880ecd0eb945a6e21b582d8746f5.dockerfile"}