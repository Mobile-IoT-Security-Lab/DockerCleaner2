{"seed":784782606,"processedDockerfileHash":"1a1268372f3df2c77cde55322d47c9d9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   This Docker image encapsulates the File Scanning Framework (FSF) by \n#   Emerson Electric Company from https://github.com/EmersonElectricCo/fsf \n#\n#   To run this image after installing Docker using a standalone instance, use a command like \n#   the following, replacing “~/fsf-workdir\" with the path to the location of your FSF\n#   working directory:\n#\n#   sudo docker run --rm -it -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#   To run this image using a networked instance, use a command like this after installing\n#   FSF on the host system:\n#\n#   sudo docker run --rm -it -p 5800:5800 -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#   Before running FSF, create the  ~/fsf-workdir and make it world-accessible\n#   (“chmod a+xwr\").\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#   \n#       http://www.apache.org/licenses/LICENSE-2.0\n#   \n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nUSER root\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 -y \\\n && apt-add-repository -y multiverse \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends autoconf=2.69-9 automake=1:1.15-4ubuntu1 build-essential=12.1ubuntu2 cabextract=1.6-1 dh-autoreconf=11 git=1:2.7.4-0ubuntu1.10 jq=1.5+dfsg-1ubuntu0.1 libffi-dev=3.2.1-4 libfuzzy-dev=2.13-2 libpython2.7-stdlib=2.7.12-1ubuntu0~16.04.18 libssl-dev=1.0.2g-1ubuntu4.20 libtool=2.4.6-0.1 make=4.1-6 net-tools=1.60-26ubuntu1 python-dev=2.7.12-1~16.04 python-minimal=2.7.12-1~16.04 python-pip=8.1.1-2ubuntu0.6 python-setuptools=20.7.0-1 ssdeep=2.13-2 unrar=1:5.3.2-1+deb9u1build0.16.04.1 unzip=6.0-20ubuntu1.1 upx-ucl=3.91-1 vim=2:7.4.1689-3ubuntu1.5 wget=1.17.1-1ubuntu1.5 -y --fix-missing \\\n && pip install setuptools==67.6.1 --upgrade\n#   Retrieve current version of Yara via wget, verify known good hash and install Yara\nRUN\n#   Install additional dependencies\nRUN pip install czipfile==1.0.0 hachoir-parser==null hachoir-core==null hachoir-regex==null hachoir-metadata==null hachoir-subfile==null ConcurrentLogHandler==0.9.1 pypdf2==3.0.1 xmltodict==0.13.0 rarfile==4.0 pylzma==0.5.0 oletools==0.60.1 pyasn1_modules==0.2.8 pyasn1==0.4.8 pyelftools==0.29 javatools==1.5.0 requests==2.28.2 git+https://github.com/aaronst/macholibre.git \\\n && BUILD_LIB=1 pip install ssdeep\n#   Add nonroot user, clone repo and setup environment\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -s /sbin/nologin -c \"Nonroot User\" nonroot \\\n && mkdir /home/nonroot \\\n && chown -R nonroot:nonroot /home/nonroot \\\n && echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/yara.conf\nUSER nonroot\nRUN mkdir -pv /home/nonroot/workdir \\\n && cd /home/nonroot \\\n && git clone https://github.com/EmersonElectricCo/fsf.git \\\n && cd fsf/ \\\n && sed -i 's/\\/FULL\\/PATH\\/TO/\\/home\\/nonroot/' fsf-server/conf/config.py \\\n && sed -i \"/^SCANNER\\_CONFIG/ s/\\/tmp/\\/home\\/nonroot\\/workdir/\" fsf-server/conf/config.py\nUSER root\nRUN ldconfig \\\n && ln -f -s /home/nonroot/fsf/fsf-server/main.py /usr/local/bin/ \\\n && ln -f -s /home/nonroot/fsf/fsf-client/fsf_client.py /usr/local/bin/ \\\n && apt-get remove -y --purge automake build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /home/nonroot/workdir\nENTRYPOINT sed -i \"/^SERVER_CONFIG/ s/127\\.0\\.0\\.1/$( hostname -i ;)/\" /home/nonroot/fsf/fsf-client/conf/config.py \\\n && main.py start \\\n && printf \"\\n\\n\" \\\n && echo \"<----->\" \\\n && echo \"FSF server daemonized!\" \\\n && echo \"<----->\" \\\n && printf \"\\n\" \\\n && echo \"Invoke fsf_client.py by giving it a file as an argument:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file>\" \\\n && printf \"\\n\" \\\n && echo \"Alternatively, Invoke fsf_client.py by giving it a file as an argument and pass to jq so you can interact extensively with the JSON output:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> | jq -C . | less -r\" \\\n && printf \"\\n\" \\\n && echo \"To access all of the subobjects that are recursively processed, simply add --full when invoking fsf_client.py:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> --full\" \\\n && printf \"\\n\" \\\n && /bin/bash\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Docker image encapsulates the File Scanning Framework (FSF) by \n#  Emerson Electric Company from https://github.com/EmersonElectricCo/fsf \n#\n#  To run this image after installing Docker using a standalone instance, use a command like \n#  the following, replacing “~/fsf-workdir\" with the path to the location of your FSF\n#  working directory:\n#\n#  sudo docker run --rm -it -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#  To run this image using a networked instance, use a command like this after installing\n#  FSF on the host system:\n#\n#  sudo docker run --rm -it -p 5800:5800 -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#  Before running FSF, create the  ~/fsf-workdir and make it world-accessible\n#  (“chmod a+xwr\").\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#  \n#      http://www.apache.org/licenses/LICENSE-2.0\n#  \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nUSER root\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-add-repository -y multiverse \\\n && apt-get update -qq \\\n && apt-get install autoconf automake build-essential cabextract dh-autoreconf git jq libffi-dev libfuzzy-dev libpython2.7-stdlib libssl-dev libtool make net-tools python-dev python-minimal python-pip python-setuptools ssdeep unrar unzip upx-ucl vim wget -y --fix-missing \\\n && pip install setuptools --upgrade\n#  Retrieve current version of Yara via wget, verify known good hash and install Yara\nRUN cd /tmp \\\n && wget -O yara.v3.5.0.tar.gz \"https://github.com/VirusTotal/yara/archive/v3.5.0.tar.gz\" \\\n && echo 4bc72ee755db85747f7e856afb0e817b788a280ab5e73dee42f159171a9b5299 yara.v3.5.0.tar.gz > sha256sum-yara \\\n && sha256sum -c sha256sum-yara \\\n && tar vxzf yara.v3.5.0.tar.gz \\\n && cd yara-3.5.0/ \\\n && ./bootstrap.sh \\\n && ./configure \\\n && make \\\n && make install \\\n && cd /tmp \\\n && git clone --recursive https://github.com/VirusTotal/yara-python \\\n && cd yara-python/ \\\n && python setup.py build \\\n && python setup.py install \\\n && cd /tmp \\\n && wget -O pefile-1.2.10-139.tar.gz \"https://github.com/erocarrera/pefile/archive/pefile-1.2.10-139.tar.gz\" \\\n && echo 3297cb72e6a51befefc3d9b27ec7690b743ee826538629ecf68f4eee64f331ab pefile-1.2.10-139.tar.gz > sha256sum-pefile \\\n && sha256sum -c sha256sum-pefile \\\n && tar vxzf pefile-1.2.10-139.tar.gz \\\n && cd pefile-pefile-1.2.10-139/ \\\n && sed -i s/1.2.10.*/1.2.10.139'/ pefile.py \\\n && python setup.py build \\\n && python setup.py install \\\n && cd /tmp \\\n && wget -O jq \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" \\\n && echo c6b3a7d7d3e7b70c6f51b706a3b90bd01833846c54d32ca32f0027f00226ff6d jq > sha256sum-jq \\\n && sha256sum -c sha256sum-jq \\\n && chmod 755 jq \\\n && mv jq /usr/local/bin/\n#  Install additional dependencies\nRUN pip install czipfile hachoir-parser hachoir-core hachoir-regex hachoir-metadata hachoir-subfile ConcurrentLogHandler pypdf2 xmltodict rarfile pylzma oletools pyasn1_modules pyasn1 pyelftools javatools requests git+https://github.com/aaronst/macholibre.git \\\n && BUILD_LIB=1 pip install ssdeep\n#  Add nonroot user, clone repo and setup environment\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -s /sbin/nologin -c \"Nonroot User\" nonroot \\\n && mkdir /home/nonroot \\\n && chown -R nonroot:nonroot /home/nonroot \\\n && echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/yara.conf\nUSER nonroot\nRUN mkdir -pv /home/nonroot/workdir \\\n && cd /home/nonroot \\\n && git clone https://github.com/EmersonElectricCo/fsf.git \\\n && cd fsf/ \\\n && sed -i 's/\\/FULL\\/PATH\\/TO/\\/home\\/nonroot/' fsf-server/conf/config.py \\\n && sed -i \"/^SCANNER\\_CONFIG/ s/\\/tmp/\\/home\\/nonroot\\/workdir/\" fsf-server/conf/config.py\nUSER root\nRUN ldconfig \\\n && ln -f -s /home/nonroot/fsf/fsf-server/main.py /usr/local/bin/ \\\n && ln -f -s /home/nonroot/fsf/fsf-client/fsf_client.py /usr/local/bin/ \\\n && apt-get remove -y --purge automake build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /home/nonroot/workdir\nENTRYPOINT sed -i \"/^SERVER_CONFIG/ s/127\\.0\\.0\\.1/$( hostname -i ;)/\" /home/nonroot/fsf/fsf-client/conf/config.py \\\n && main.py start \\\n && printf \"\\n\\n\" \\\n && echo \"<----->\" \\\n && echo \"FSF server daemonized!\" \\\n && echo \"<----->\" \\\n && printf \"\\n\" \\\n && echo \"Invoke fsf_client.py by giving it a file as an argument:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file>\" \\\n && printf \"\\n\" \\\n && echo \"Alternatively, Invoke fsf_client.py by giving it a file as an argument and pass to jq so you can interact extensively with the JSON output:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> | jq -C . | less -r\" \\\n && printf \"\\n\" \\\n && echo \"To access all of the subobjects that are recursively processed, simply add --full when invoking fsf_client.py:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> --full\" \\\n && printf \"\\n\" \\\n && /bin/bash\n","injectedSmells":[],"originalDockerfileHash":"4b6a019289dd82070a5616962ec6d50e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Docker image encapsulates the File Scanning Framework (FSF) by \n#   Emerson Electric Company from https://github.com/EmersonElectricCo/fsf \n#\n#   To run this image after installing Docker using a standalone instance, use a command like \n#   the following, replacing “~/fsf-workdir\" with the path to the location of your FSF\n#   working directory:\n#\n#   sudo docker run --rm -it -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#   To run this image using a networked instance, use a command like this after installing\n#   FSF on the host system:\n#\n#   sudo docker run --rm -it -p 5800:5800 -v ~/fsf-workdir:/home/nonroot/workdir wzod/fsf\n#\n#   Before running FSF, create the  ~/fsf-workdir and make it world-accessible\n#   (“chmod a+xwr\").\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#   \n#       http://www.apache.org/licenses/LICENSE-2.0\n#   \n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\nFROM ubuntu:16.04\nMAINTAINER Zod (@wzod)\nENV DEBIAN_FRONTEND=\"noninteractive\"\nUSER root\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && apt-add-repository -y multiverse \\\n && apt-get update -qq \\\n && apt-get install autoconf automake build-essential cabextract dh-autoreconf git jq libffi-dev libfuzzy-dev libpython2.7-stdlib libssl-dev libtool make net-tools python-dev python-minimal python-pip python-setuptools ssdeep unrar unzip upx-ucl vim wget -y --fix-missing \\\n && pip install setuptools --upgrade\n#   Retrieve current version of Yara via wget, verify known good hash and install Yara\nRUN\n#   Install additional dependencies\nRUN pip install czipfile hachoir-parser hachoir-core hachoir-regex hachoir-metadata hachoir-subfile ConcurrentLogHandler pypdf2 xmltodict rarfile pylzma oletools pyasn1_modules pyasn1 pyelftools javatools requests git+https://github.com/aaronst/macholibre.git \\\n && BUILD_LIB=1 pip install ssdeep\n#   Add nonroot user, clone repo and setup environment\nRUN groupadd -r nonroot \\\n && useradd -r -g nonroot -d /home/nonroot -s /sbin/nologin -c \"Nonroot User\" nonroot \\\n && mkdir /home/nonroot \\\n && chown -R nonroot:nonroot /home/nonroot \\\n && echo \"/usr/local/lib\" >> /etc/ld.so.conf.d/yara.conf\nUSER nonroot\nRUN mkdir -pv /home/nonroot/workdir \\\n && cd /home/nonroot \\\n && git clone https://github.com/EmersonElectricCo/fsf.git \\\n && cd fsf/ \\\n && sed -i 's/\\/FULL\\/PATH\\/TO/\\/home\\/nonroot/' fsf-server/conf/config.py \\\n && sed -i \"/^SCANNER\\_CONFIG/ s/\\/tmp/\\/home\\/nonroot\\/workdir/\" fsf-server/conf/config.py\nUSER root\nRUN ldconfig \\\n && ln -f -s /home/nonroot/fsf/fsf-server/main.py /usr/local/bin/ \\\n && ln -f -s /home/nonroot/fsf/fsf-client/fsf_client.py /usr/local/bin/ \\\n && apt-get remove -y --purge automake build-essential libtool \\\n && apt-get autoremove -y --purge \\\n && apt-get clean -y \\\n && rm -rf /var/lib/apt/lists/*\nUSER nonroot\nENV HOME=\"/home/nonroot\"\nENV USER=\"nonroot\"\nWORKDIR /home/nonroot/workdir\nENTRYPOINT sed -i \"/^SERVER_CONFIG/ s/127\\.0\\.0\\.1/$( hostname -i ;)/\" /home/nonroot/fsf/fsf-client/conf/config.py \\\n && main.py start \\\n && printf \"\\n\\n\" \\\n && echo \"<----->\" \\\n && echo \"FSF server daemonized!\" \\\n && echo \"<----->\" \\\n && printf \"\\n\" \\\n && echo \"Invoke fsf_client.py by giving it a file as an argument:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file>\" \\\n && printf \"\\n\" \\\n && echo \"Alternatively, Invoke fsf_client.py by giving it a file as an argument and pass to jq so you can interact extensively with the JSON output:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> | jq -C . | less -r\" \\\n && printf \"\\n\" \\\n && echo \"To access all of the subobjects that are recursively processed, simply add --full when invoking fsf_client.py:\" \\\n && printf \"\\n\" \\\n && echo \"fsf_client.py <file> --full\" \\\n && printf \"\\n\" \\\n && /bin/bash\n","originalDockerfileUglifiedHash":"e2f7b0f1acdeccf3ece841894636deda","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2dbea3f8b777a7147499ba82b357c3cc07df27fa.dockerfile"}