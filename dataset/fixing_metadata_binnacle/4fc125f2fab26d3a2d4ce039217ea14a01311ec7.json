{"seed":1220961178,"processedDockerfileHash":"1b7b561c7d587b6687b99ccfff55024b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM technosoft2000/alpine-base:3.9-1\nMAINTAINER Technosoft2000 <technosoft2000@gmx.net>\nLABEL image.version=\"1.3.2\" \\\n      image.description=\"Docker image for Calibre Web, based on docker image of Alpine\" \\\n      image.date=\"2019-04-18\" \\\n      url.docker=\"https://hub.docker.com/r/technosoft2000/calibre-web\" \\\n      url.github=\"https://github.com/Technosoft2000/docker-calibre-web\" \\\n      url.support=\"https://cytec.us/forum\"\n#   Set basic environment settings\nENV VERSION=\"1.3.2\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    PUSER=\"calibre\" \\\n    PGROUP=\"calibre\" \\\n    APP_NAME=\"Calibre-Web\" \\\n    APP_HOME=\"/calibre-web\" \\\n    APP_REPO=\"https://github.com/janeczku/calibre-web.git\" \\\n    APP_BRANCH=\"master\" \\\n    AMAZON_KG_TAR=\"kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    AMAZON_KG_URL=\"http://kindlegen.s3.amazonaws.com/kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    CALIBRE_PATH=\"/books\" \\\n    PKG_DEV=\"build-base python-dev openssl-dev libffi-dev libxml2-dev libxslt-dev\" \\\n    PKG_PYTHON=\"ca-certificates py-pip python py-libxml2 py-libxslt py-lxml libev\" \\\n    PKG_IMAGES_DEV=\"curl file fontconfig-dev freetype-dev lcms2-dev  libjpeg-turbo-dev libpng-dev libtool libwebp-dev perl-dev tiff-dev xz zlib-dev\" \\\n    PKG_IMAGES=\"fontconfig freetype lcms2 libjpeg-turbo libltdl libpng  libwebp libxml2 tiff zlib\" \\\n    PKG_GS_DEV=\"libjpeg-turbo-dev libpng-dev jasper-dev expat-dev  zlib-dev tiff-dev freetype-dev lcms2-dev gtk+3.0-dev  cups-dev libtool jbig2dec-dev openjpeg-dev\" \\\n    PKG_GS=\"jasper expat jbig2dec openjpeg\" \\\n    MAGICK_HOME=\"/usr\"\n#   Install GNU libc (aka glibc)\n#   https://github.com/sgerrand/alpine-pkg-glibc\nCOPY LOCALE.md /init/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && mkdir -p /tmp \\\n && mkdir -p /var/cache/apk \\\n && apk add wget ca-certificates --no-cache --virtual=.build-dependencies \\\n && apk add parallel --no-cache \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache \\\n && cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \\\n && apk del .build-dependencies \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && rm \"/root/.wget-hsts\" \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nCOPY ghostscript /init/ghostscript/\nRUN echo \"--- Update the package list ------------------------------------------------\" \\\n && apk -U upgrade \\\n && echo \"--- Install applications via package manager -------------------------------\" \\\n && apk add $PKG_DEV $PKG_PYTHON $PKG_IMAGES_DEV $PKG_IMAGES $PKG_GS_DEV $PKG_GS -U --no-cache \\\n && echo \"--- Upgrade pip to the latest version --------------------------------------\" \\\n && pip install pip==23.1 --upgrade \\\n && echo \"--- Install python packages via pip ----------------------------------------\" \\\n && pip install setuptools==67.6.1 pyopenssl==23.1.1 Babel==2.12.1 Flask-Babel==3.1.0 Flask-Login==0.6.2 Flask-Principal==0.4.0 singledispatch==4.0.0 backports_abc==0.5 Flask==2.2.3 iso-639==0.4.5 PyPDF2==3.0.1 pytz==2023.3 requests==2.28.2 SQLAlchemy==2.0.9 tornado==6.2 Wand==0.6.11 unidecode==1.3.6 Pillow==9.5.0 google-api-python-client==2.85.0 gevent==22.10.2 greenlet==2.0.2 httplib2==0.22.0 oauth2client==4.1.3 uritemplate==4.1.1 pyasn1-modules==0.2.8 pyasn1==0.4.8 PyDrive==1.3.1 PyYAML==6.0 rsa==4.9 six==1.16.0 goodreads==0.3.2 python-Levenshtein==0.20.9 lxml==4.9.2 Flask-Dance==6.2.0 --no-cache-dir --upgrade \\\n && echo \"--- Get Ghostscript 9.26 and build it --------------------------------------\" \\\n && mkdir -p /tmp/ghostscript \\\n && curl -o /tmp/ghostscript-src.tar.gz -L \"https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs926/ghostscript-9.26.tar.gz\" \\\n && tar xf /tmp/ghostscript-src.tar.gz -C /tmp/ghostscript --strip-components=1 \\\n && cp /init/ghostscript/* /tmp/ghostscript \\\n && cd /tmp/ghostscript \\\n && patch cups/gdevcups.c fix-sprintf.patch \\\n && patch base/gdevsclass.c fix-put_image-methode.patch \\\n && patch base/stdio_.h fix-stdio.patch \\\n && patch base/lib.mak ghostscript-system-zlib.patch \\\n && ./configure \\\n && make so all \\\n && make soinstall \\\n && make install \\\n && echo \"--- Get ImageMagic 6 and build it ------------------------------------------\" \\\n && IMAGEMAGICK_VER=$( curl --silent http://www.imagemagick.org/download/digest.rdf | grep ImageMagick-6.*tar.xz | sed 's/\\(.*\\).tar.*/\\1/' | sed 's/^.*ImageMagick-/ImageMagick-/' ;) \\\n && mkdir -p /tmp/imagemagick \\\n && curl -o /tmp/imagemagick-src.tar.xz -L \"http://www.imagemagick.org/download/${IMAGEMAGICK_VER}.tar.xz\" \\\n && tar xf /tmp/imagemagick-src.tar.xz -C /tmp/imagemagick --strip-components=1 \\\n && cd /tmp/imagemagick \\\n && sed -i -e 's:DOCUMENTATION_PATH=\"${DATA_DIR}/doc/${DOCUMENTATION_RELATIVE_PATH}\":DOCUMENTATION_PATH=\"/usr/share/doc/imagemagick\":g' configure \\\n && ./configure --infodir=/usr/share/info --mandir=/usr/share/man --prefix=/usr --sysconfdir=/etc --with-gs-font-dir=/usr/share/fonts/Type1 --with-gslib --with-lcms2 --with-modules --without-threads --without-x --with-tiff --with-xml \\\n && make \\\n && make install \\\n && find / -name '.packlist' -o -name 'perllocal.pod' -o -name '*.bs' -delete \\\n && rm -rf /tmp/*\n#   Install calibre binary\n#   enhancement from jim3ma/docker-calibre-web\n#   needed for calibre ebook-convert command line tool\n#   https://github.com/jim3ma/docker-calibre-web\n#   https://manual.calibre-ebook.com/generated/en/ebook-convert.html\nENV LD_LIBRARY_PATH=\"/usr/lib:/opt/calibre/lib\" \\\n    PATH=\"$PATH:/opt/calibre\" \\\n    LC_ALL=\"C\" \\\n    CALIBRE_INSTALLER_SOURCE_CODE_URL=\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\"\nRUN apk update \\\n && apk add bash ca-certificates gcc libxcomposite mesa-gl python qt5-qtbase-x11 xdg-utils xz wget --no-cache --upgrade \\\n && wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} | python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main(install_dir='/opt', isolated=True)\" \\\n && rm -rf /tmp/calibre-installer-cache \\\n && apk del --purge $PKG_DEV $PKG_IMAGES_DEV \\\n && mkdir -p $APP_HOME/app \\\n && rm -rf /tmp \\\n && rm -rf /var/cache/apk/*\n#   set the working directory for the APP\nWORKDIR $APP_HOME/app\n#   copy files to the image (info.txt and scripts)\nCOPY *.txt /init/\nCOPY *.sh /init/\n#   copy Calibre related files (e.g. metadata.db)\nCOPY calibre-init /init/calibre-init\n#   copy patched version of ImageMagick policy.xml\nCOPY imagemagick/policy.xml /etc/ImageMagick-6\n#   Set volumes for the Calibre Web folder structure\nVOLUME /books\nVOLUME $APP_HOME/app\nVOLUME $APP_HOME/config\nVOLUME $APP_HOME/kindlegen\n#   Expose ports\nEXPOSE 8083/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM technosoft2000/alpine-base:3.9-1\nMAINTAINER Technosoft2000 <technosoft2000@gmx.net>\nLABEL image.version=\"1.3.2\" \\\n      image.description=\"Docker image for Calibre Web, based on docker image of Alpine\" \\\n      image.date=\"2019-04-18\" \\\n      url.docker=\"https://hub.docker.com/r/technosoft2000/calibre-web\" \\\n      url.github=\"https://github.com/Technosoft2000/docker-calibre-web\" \\\n      url.support=\"https://cytec.us/forum\"\n#  Set basic environment settings\nENV VERSION=\"1.3.2\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    PUSER=\"calibre\" \\\n    PGROUP=\"calibre\" \\\n    APP_NAME=\"Calibre-Web\" \\\n    APP_HOME=\"/calibre-web\" \\\n    APP_REPO=\"https://github.com/janeczku/calibre-web.git\" \\\n    APP_BRANCH=\"master\" \\\n    AMAZON_KG_TAR=\"kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    AMAZON_KG_URL=\"http://kindlegen.s3.amazonaws.com/kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    CALIBRE_PATH=\"/books\" \\\n    PKG_DEV=\"build-base python-dev openssl-dev libffi-dev libxml2-dev libxslt-dev\" \\\n    PKG_PYTHON=\"ca-certificates py-pip python py-libxml2 py-libxslt py-lxml libev\" \\\n    PKG_IMAGES_DEV=\"curl file fontconfig-dev freetype-dev lcms2-dev  libjpeg-turbo-dev libpng-dev libtool libwebp-dev perl-dev tiff-dev xz zlib-dev\" \\\n    PKG_IMAGES=\"fontconfig freetype lcms2 libjpeg-turbo libltdl libpng  libwebp libxml2 tiff zlib\" \\\n    PKG_GS_DEV=\"libjpeg-turbo-dev libpng-dev jasper-dev expat-dev  zlib-dev tiff-dev freetype-dev lcms2-dev gtk+3.0-dev  cups-dev libtool jbig2dec-dev openjpeg-dev\" \\\n    PKG_GS=\"jasper expat jbig2dec openjpeg\" \\\n    MAGICK_HOME=\"/usr\"\n#  Install GNU libc (aka glibc)\n#  https://github.com/sgerrand/alpine-pkg-glibc\nCOPY LOCALE.md /init/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && mkdir -p /tmp \\\n && mkdir -p /var/cache/apk \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache parallel \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \\\n && apk del .build-dependencies \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && rm \"/root/.wget-hsts\" \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nCOPY ghostscript /init/ghostscript/\nRUN echo \"--- Update the package list ------------------------------------------------\" \\\n && apk -U upgrade \\\n && echo \"--- Install applications via package manager -------------------------------\" \\\n && apk -U add --no-cache $PKG_DEV $PKG_PYTHON $PKG_IMAGES_DEV $PKG_IMAGES $PKG_GS_DEV $PKG_GS \\\n && echo \"--- Upgrade pip to the latest version --------------------------------------\" \\\n && pip install pip --upgrade \\\n && echo \"--- Install python packages via pip ----------------------------------------\" \\\n && pip install setuptools pyopenssl Babel Flask-Babel Flask-Login Flask-Principal singledispatch backports_abc Flask iso-639 PyPDF2 pytz requests SQLAlchemy tornado Wand unidecode Pillow google-api-python-client gevent greenlet httplib2 oauth2client uritemplate pyasn1-modules pyasn1 PyDrive PyYAML rsa six goodreads python-Levenshtein lxml Flask-Dance --no-cache-dir --upgrade \\\n && echo \"--- Get Ghostscript 9.26 and build it --------------------------------------\" \\\n && mkdir -p /tmp/ghostscript \\\n && curl -o /tmp/ghostscript-src.tar.gz -L \"https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs926/ghostscript-9.26.tar.gz\" \\\n && tar xf /tmp/ghostscript-src.tar.gz -C /tmp/ghostscript --strip-components=1 \\\n && cp /init/ghostscript/* /tmp/ghostscript \\\n && cd /tmp/ghostscript \\\n && patch cups/gdevcups.c fix-sprintf.patch \\\n && patch base/gdevsclass.c fix-put_image-methode.patch \\\n && patch base/stdio_.h fix-stdio.patch \\\n && patch base/lib.mak ghostscript-system-zlib.patch \\\n && ./configure \\\n && make so all \\\n && make soinstall \\\n && make install \\\n && echo \"--- Get ImageMagic 6 and build it ------------------------------------------\" \\\n && IMAGEMAGICK_VER=$( curl --silent http://www.imagemagick.org/download/digest.rdf | grep ImageMagick-6.*tar.xz | sed 's/\\(.*\\).tar.*/\\1/' | sed 's/^.*ImageMagick-/ImageMagick-/' ;) \\\n && mkdir -p /tmp/imagemagick \\\n && curl -o /tmp/imagemagick-src.tar.xz -L \"http://www.imagemagick.org/download/${IMAGEMAGICK_VER}.tar.xz\" \\\n && tar xf /tmp/imagemagick-src.tar.xz -C /tmp/imagemagick --strip-components=1 \\\n && cd /tmp/imagemagick \\\n && sed -i -e 's:DOCUMENTATION_PATH=\"${DATA_DIR}/doc/${DOCUMENTATION_RELATIVE_PATH}\":DOCUMENTATION_PATH=\"/usr/share/doc/imagemagick\":g' configure \\\n && ./configure --infodir=/usr/share/info --mandir=/usr/share/man --prefix=/usr --sysconfdir=/etc --with-gs-font-dir=/usr/share/fonts/Type1 --with-gslib --with-lcms2 --with-modules --without-threads --without-x --with-tiff --with-xml \\\n && make \\\n && make install \\\n && find / -name '.packlist' -o -name 'perllocal.pod' -o -name '*.bs' -delete \\\n && rm -rf /tmp/*\n#  Install calibre binary\n#  enhancement from jim3ma/docker-calibre-web\n#  needed for calibre ebook-convert command line tool\n#  https://github.com/jim3ma/docker-calibre-web\n#  https://manual.calibre-ebook.com/generated/en/ebook-convert.html\nENV LD_LIBRARY_PATH=\"/usr/lib:/opt/calibre/lib\" \\\n    PATH=\"$PATH:/opt/calibre\" \\\n    LC_ALL=\"C\" \\\n    CALIBRE_INSTALLER_SOURCE_CODE_URL=\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\"\nRUN apk update \\\n && apk add --no-cache --upgrade bash ca-certificates gcc libxcomposite mesa-gl python qt5-qtbase-x11 xdg-utils xz wget \\\n && wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} | python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main(install_dir='/opt', isolated=True)\" \\\n && rm -rf /tmp/calibre-installer-cache \\\n && apk del --purge $PKG_DEV $PKG_IMAGES_DEV \\\n && mkdir -p $APP_HOME/app \\\n && rm -rf /tmp \\\n && rm -rf /var/cache/apk/*\n#  set the working directory for the APP\nWORKDIR $APP_HOME/app\n#  copy files to the image (info.txt and scripts)\nCOPY *.txt /init/\nCOPY *.sh /init/\n#  copy Calibre related files (e.g. metadata.db)\nCOPY calibre-init /init/calibre-init\n#  copy patched version of ImageMagick policy.xml\nCOPY imagemagick/policy.xml /etc/ImageMagick-6\n#  Set volumes for the Calibre Web folder structure\nVOLUME /books\nVOLUME $APP_HOME/app\nVOLUME $APP_HOME/config\nVOLUME $APP_HOME/kindlegen\n#  Expose ports\nEXPOSE 8083/tcp\n","injectedSmells":[],"originalDockerfileHash":"792f42a377306b73f825172148c6639a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM technosoft2000/alpine-base:3.9-1\nMAINTAINER Technosoft2000 <technosoft2000@gmx.net>\nLABEL image.version=\"1.3.2\" \\\n      image.description=\"Docker image for Calibre Web, based on docker image of Alpine\" \\\n      image.date=\"2019-04-18\" \\\n      url.docker=\"https://hub.docker.com/r/technosoft2000/calibre-web\" \\\n      url.github=\"https://github.com/Technosoft2000/docker-calibre-web\" \\\n      url.support=\"https://cytec.us/forum\"\n#   Set basic environment settings\nENV VERSION=\"1.3.2\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    PUSER=\"calibre\" \\\n    PGROUP=\"calibre\" \\\n    APP_NAME=\"Calibre-Web\" \\\n    APP_HOME=\"/calibre-web\" \\\n    APP_REPO=\"https://github.com/janeczku/calibre-web.git\" \\\n    APP_BRANCH=\"master\" \\\n    AMAZON_KG_TAR=\"kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    AMAZON_KG_URL=\"http://kindlegen.s3.amazonaws.com/kindlegen_linux_2.6_i386_v2_9.tar.gz\" \\\n    CALIBRE_PATH=\"/books\" \\\n    PKG_DEV=\"build-base python-dev openssl-dev libffi-dev libxml2-dev libxslt-dev\" \\\n    PKG_PYTHON=\"ca-certificates py-pip python py-libxml2 py-libxslt py-lxml libev\" \\\n    PKG_IMAGES_DEV=\"curl file fontconfig-dev freetype-dev lcms2-dev  libjpeg-turbo-dev libpng-dev libtool libwebp-dev perl-dev tiff-dev xz zlib-dev\" \\\n    PKG_IMAGES=\"fontconfig freetype lcms2 libjpeg-turbo libltdl libpng  libwebp libxml2 tiff zlib\" \\\n    PKG_GS_DEV=\"libjpeg-turbo-dev libpng-dev jasper-dev expat-dev  zlib-dev tiff-dev freetype-dev lcms2-dev gtk+3.0-dev  cups-dev libtool jbig2dec-dev openjpeg-dev\" \\\n    PKG_GS=\"jasper expat jbig2dec openjpeg\" \\\n    MAGICK_HOME=\"/usr\"\n#   Install GNU libc (aka glibc)\n#   https://github.com/sgerrand/alpine-pkg-glibc\nCOPY LOCALE.md /init/\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.29-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && mkdir -p /tmp \\\n && mkdir -p /var/cache/apk \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && apk add --no-cache parallel \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && cat /init/LOCALE.md | parallel \"echo generate locale {}; /usr/glibc-compat/bin/localedef --force --inputfile {} --charmap UTF-8 {}.UTF-8;\" \\\n && apk del .build-dependencies \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && rm \"/root/.wget-hsts\" \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nCOPY ghostscript /init/ghostscript/\nRUN echo \"--- Update the package list ------------------------------------------------\" \\\n && apk -U upgrade \\\n && echo \"--- Install applications via package manager -------------------------------\" \\\n && apk -U add --no-cache $PKG_DEV $PKG_PYTHON $PKG_IMAGES_DEV $PKG_IMAGES $PKG_GS_DEV $PKG_GS \\\n && echo \"--- Upgrade pip to the latest version --------------------------------------\" \\\n && pip install pip --upgrade \\\n && echo \"--- Install python packages via pip ----------------------------------------\" \\\n && pip install setuptools pyopenssl Babel Flask-Babel Flask-Login Flask-Principal singledispatch backports_abc Flask iso-639 PyPDF2 pytz requests SQLAlchemy tornado Wand unidecode Pillow google-api-python-client gevent greenlet httplib2 oauth2client uritemplate pyasn1-modules pyasn1 PyDrive PyYAML rsa six goodreads python-Levenshtein lxml Flask-Dance --no-cache-dir --upgrade \\\n && echo \"--- Get Ghostscript 9.26 and build it --------------------------------------\" \\\n && mkdir -p /tmp/ghostscript \\\n && curl -o /tmp/ghostscript-src.tar.gz -L \"https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs926/ghostscript-9.26.tar.gz\" \\\n && tar xf /tmp/ghostscript-src.tar.gz -C /tmp/ghostscript --strip-components=1 \\\n && cp /init/ghostscript/* /tmp/ghostscript \\\n && cd /tmp/ghostscript \\\n && patch cups/gdevcups.c fix-sprintf.patch \\\n && patch base/gdevsclass.c fix-put_image-methode.patch \\\n && patch base/stdio_.h fix-stdio.patch \\\n && patch base/lib.mak ghostscript-system-zlib.patch \\\n && ./configure \\\n && make so all \\\n && make soinstall \\\n && make install \\\n && echo \"--- Get ImageMagic 6 and build it ------------------------------------------\" \\\n && IMAGEMAGICK_VER=$( curl --silent http://www.imagemagick.org/download/digest.rdf | grep ImageMagick-6.*tar.xz | sed 's/\\(.*\\).tar.*/\\1/' | sed 's/^.*ImageMagick-/ImageMagick-/' ;) \\\n && mkdir -p /tmp/imagemagick \\\n && curl -o /tmp/imagemagick-src.tar.xz -L \"http://www.imagemagick.org/download/${IMAGEMAGICK_VER}.tar.xz\" \\\n && tar xf /tmp/imagemagick-src.tar.xz -C /tmp/imagemagick --strip-components=1 \\\n && cd /tmp/imagemagick \\\n && sed -i -e 's:DOCUMENTATION_PATH=\"${DATA_DIR}/doc/${DOCUMENTATION_RELATIVE_PATH}\":DOCUMENTATION_PATH=\"/usr/share/doc/imagemagick\":g' configure \\\n && ./configure --infodir=/usr/share/info --mandir=/usr/share/man --prefix=/usr --sysconfdir=/etc --with-gs-font-dir=/usr/share/fonts/Type1 --with-gslib --with-lcms2 --with-modules --without-threads --without-x --with-tiff --with-xml \\\n && make \\\n && make install \\\n && find / -name '.packlist' -o -name 'perllocal.pod' -o -name '*.bs' -delete \\\n && rm -rf /tmp/*\n#   Install calibre binary\n#   enhancement from jim3ma/docker-calibre-web\n#   needed for calibre ebook-convert command line tool\n#   https://github.com/jim3ma/docker-calibre-web\n#   https://manual.calibre-ebook.com/generated/en/ebook-convert.html\nENV LD_LIBRARY_PATH=\"/usr/lib:/opt/calibre/lib\" \\\n    PATH=\"$PATH:/opt/calibre\" \\\n    LC_ALL=\"C\" \\\n    CALIBRE_INSTALLER_SOURCE_CODE_URL=\"https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\"\nRUN apk update \\\n && apk add --no-cache --upgrade bash ca-certificates gcc libxcomposite mesa-gl python qt5-qtbase-x11 xdg-utils xz wget \\\n && wget -O- ${CALIBRE_INSTALLER_SOURCE_CODE_URL} | python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main(install_dir='/opt', isolated=True)\" \\\n && rm -rf /tmp/calibre-installer-cache \\\n && apk del --purge $PKG_DEV $PKG_IMAGES_DEV \\\n && mkdir -p $APP_HOME/app \\\n && rm -rf /tmp \\\n && rm -rf /var/cache/apk/*\n#   set the working directory for the APP\nWORKDIR $APP_HOME/app\n#   copy files to the image (info.txt and scripts)\nCOPY *.txt /init/\nCOPY *.sh /init/\n#   copy Calibre related files (e.g. metadata.db)\nCOPY calibre-init /init/calibre-init\n#   copy patched version of ImageMagick policy.xml\nCOPY imagemagick/policy.xml /etc/ImageMagick-6\n#   Set volumes for the Calibre Web folder structure\nVOLUME /books\nVOLUME $APP_HOME/app\nVOLUME $APP_HOME/config\nVOLUME $APP_HOME/kindlegen\n#   Expose ports\nEXPOSE 8083/tcp\n","originalDockerfileUglifiedHash":"c8584a173bf25f4f27425fd1a0fa87ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4fc125f2fab26d3a2d4ce039217ea14a01311ec7.dockerfile"}