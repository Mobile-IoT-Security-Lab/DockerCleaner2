{"seed":3052610918,"processedDockerfileHash":"4e25e5bfaac62364301750a3d45ccc20","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM fedora:27\n#   set this date to cause all images to be updated\nENV REFRESHED_AT=\"2019-05-23-09-00\"\n#  ##################################################\n#   create data directories and volumes\n#  ##################################################\nWORKDIR /\nRUN mkdir /data\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\nARG PROXY_HOST_BUILD_ARG=\"\"\nARG PROXY_PORT_BUILD_ARG=\"\"\nENV PROXY_HOST=\"$PROXY_HOST_BUILD_ARG\"\nENV PROXY_PORT=\"$PROXY_PORT_BUILD_ARG\"\nENV BUILD_DIR=\"/data/build\"\nENV SRC_DIR=\"/data/src\"\nENV INSTALL_DIR=\"/data/install\"\nENV CURL_HOME=\"/etc\"\n#  ##################################################\n#   copy scripts and set start command\n#  ##################################################\nCOPY scripts /data/scripts\n#  ##################################################\n#   Setup dnf.conf\n#  ##################################################\nRUN /data/scripts/setup-proxy.sh\n#  ##################################################\n#   set timezone\n#  ##################################################\nRUN rm /etc/localtime \\\n && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n#  ##################################################\n#   install base packages\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y autoconf automake cmake corkscrew expat-devel file gcc-c++ gdb git glibc.i686 icecream iputils libcurl libcurl-devel libstdc++.i686 libtool libxcb libxcb-devel libX11-devel libXi-devel libXrender-devel net-tools openssl openssl-devel patch perl-version python strace tar unzip wget which xcb-util xcb-util-devel xcb-util-*-devel zlib.i686 java-1.8.0-openjdk xz maven hostname.x86_64 clang libcxx-devel \\\n && dnf groupinstall -y 'Development Tools' \\\n && dnf clean all\n#  ##################################################\n#   Generate certificates\n#  ##################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n#  ##################################################\n#   Install payara\n#  ##################################################\nENV PATH=\"${PATH}:/opt/payara41/glassfish/bin\"\nRUN wget --quiet -O /opt/payara-4.1.1.164.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.1.164/payara-4.1.1.164.zip \\\n && unzip -qq /opt/payara-4.1.1.164.zip -d /opt \\\n && rm /opt/payara-4.1.1.164.zip\nRUN asadmin start-domain \\\n && asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor \\\n && asadmin --user admin create-jdbc-connection-pool --datasourceclassname org.apache.derby.jdbc.ClientDataSource --restype javax.sql.XADataSource --property portNumber=1527:password=APP:user=APP:serverName=localhost:databaseName=joynr-discovery-directory:connectionAttributes= ; create=true JoynrPool \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DiscoveryDirectoryDS \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DomainAccessControllerDS \\\n && asadmin --user admin set-log-levels io.joynr.messaging=FINE \\\n && asadmin --user admin set-log-levels io.joynr.dispatching=FINE \\\n && asadmin --user admin set-log-levels io.joynr.jeeintegration=FINE \\\n && asadmin --user admin set configs.config.server-config.network-config.network-listeners.network-listener.http-listener-1.enabled=false \\\n && asadmin --user admin stop-domain --kill=true\nRUN chmod -R 777 /opt/payara41\n#  ##################################################\n#   install mosquitto mqtt broker\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y mosquitto mosquitto-devel \\\n && dnf clean all\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n#  ##################################################\n#   add Tini - \"A tiny but valid init for containers\"\n#  ##################################################\nENV TINI_VERSION=\"v0.13.1\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /tini\n#  ##################################################\n#   set login user joynr\n#  ##################################################\nENV GOSU_VERSION=\"1.3\"\nRUN cd /tmp \\\n && . /etc/profile \\\n && curl -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && mv gosu /usr/local/bin/gosu \\\n && chmod 755 /usr/local/bin/gosu\nCOPY scripts/boot2user.sh /data/scripts/boot2user.sh\nENTRYPOINT [\"/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM fedora:27\n#  set this date to cause all images to be updated\nENV REFRESHED_AT=\"2019-05-23-09-00\"\n# ##################################################\n#  create data directories and volumes\n# ##################################################\nWORKDIR /\nRUN mkdir /data\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\nARG PROXY_HOST_BUILD_ARG=\"\"\nARG PROXY_PORT_BUILD_ARG=\"\"\nENV PROXY_HOST=\"$PROXY_HOST_BUILD_ARG\"\nENV PROXY_PORT=\"$PROXY_PORT_BUILD_ARG\"\nENV BUILD_DIR=\"/data/build\"\nENV SRC_DIR=\"/data/src\"\nENV INSTALL_DIR=\"/data/install\"\nENV CURL_HOME=\"/etc\"\n# ##################################################\n#  copy scripts and set start command\n# ##################################################\nCOPY scripts /data/scripts\n# ##################################################\n#  Setup dnf.conf\n# ##################################################\nRUN /data/scripts/setup-proxy.sh\n# ##################################################\n#  set timezone\n# ##################################################\nRUN rm /etc/localtime \\\n && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n# ##################################################\n#  install base packages\n# ##################################################\nRUN dnf update -y \\\n && dnf install -y autoconf automake cmake corkscrew expat-devel file gcc-c++ gdb git glibc.i686 icecream iputils libcurl libcurl-devel libstdc++.i686 libtool libxcb libxcb-devel libX11-devel libXi-devel libXrender-devel net-tools openssl openssl-devel patch perl-version python strace tar unzip wget which xcb-util xcb-util-devel xcb-util-*-devel zlib.i686 java-1.8.0-openjdk xz maven hostname.x86_64 clang libcxx-devel \\\n && dnf groupinstall -y 'Development Tools' \\\n && dnf clean all\n# ##################################################\n#  Generate certificates\n# ##################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n# ##################################################\n#  Install payara\n# ##################################################\nENV PATH=\"${PATH}:/opt/payara41/glassfish/bin\"\nRUN wget --quiet -O /opt/payara-4.1.1.164.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.1.164/payara-4.1.1.164.zip \\\n && unzip -qq /opt/payara-4.1.1.164.zip -d /opt \\\n && rm /opt/payara-4.1.1.164.zip\nRUN asadmin start-domain \\\n && asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor \\\n && asadmin --user admin create-jdbc-connection-pool --datasourceclassname org.apache.derby.jdbc.ClientDataSource --restype javax.sql.XADataSource --property portNumber=1527:password=APP:user=APP:serverName=localhost:databaseName=joynr-discovery-directory:connectionAttributes=;create\\=true JoynrPool \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DiscoveryDirectoryDS \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DomainAccessControllerDS \\\n && asadmin --user admin set-log-levels io.joynr.messaging=FINE \\\n && asadmin --user admin set-log-levels io.joynr.dispatching=FINE \\\n && asadmin --user admin set-log-levels io.joynr.jeeintegration=FINE \\\n && asadmin --user admin set configs.config.server-config.network-config.network-listeners.network-listener.http-listener-1.enabled=false \\\n && asadmin --user admin stop-domain --kill=true\nRUN chmod -R 777 /opt/payara41\n# ##################################################\n#  install mosquitto mqtt broker\n# ##################################################\nRUN dnf update -y \\\n && dnf install -y mosquitto mosquitto-devel \\\n && dnf clean all\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n# ##################################################\n#  add Tini - \"A tiny but valid init for containers\"\n# ##################################################\nENV TINI_VERSION=\"v0.13.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n# ##################################################\n#  set login user joynr\n# ##################################################\nENV GOSU_VERSION=\"1.3\"\nRUN cd /tmp \\\n && . /etc/profile \\\n && curl -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && mv gosu /usr/local/bin/gosu \\\n && chmod 755 /usr/local/bin/gosu\nCOPY scripts/boot2user.sh /data/scripts/boot2user.sh\nENTRYPOINT [\"/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"4e6fe845cc15d894d59042b4b5f32566","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM fedora:27\n#   set this date to cause all images to be updated\nENV REFRESHED_AT=\"2019-05-23-09-00\"\n#  ##################################################\n#   create data directories and volumes\n#  ##################################################\nWORKDIR /\nRUN mkdir /data\nVOLUME /data/install\nVOLUME /data/src\nVOLUME /data/build\nARG PROXY_HOST_BUILD_ARG=\"\"\nARG PROXY_PORT_BUILD_ARG=\"\"\nENV PROXY_HOST=\"$PROXY_HOST_BUILD_ARG\"\nENV PROXY_PORT=\"$PROXY_PORT_BUILD_ARG\"\nENV BUILD_DIR=\"/data/build\"\nENV SRC_DIR=\"/data/src\"\nENV INSTALL_DIR=\"/data/install\"\nENV CURL_HOME=\"/etc\"\n#  ##################################################\n#   copy scripts and set start command\n#  ##################################################\nCOPY scripts /data/scripts\n#  ##################################################\n#   Setup dnf.conf\n#  ##################################################\nRUN /data/scripts/setup-proxy.sh\n#  ##################################################\n#   set timezone\n#  ##################################################\nRUN rm /etc/localtime \\\n && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime\n#  ##################################################\n#   install base packages\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y autoconf automake cmake corkscrew expat-devel file gcc-c++ gdb git glibc.i686 icecream iputils libcurl libcurl-devel libstdc++.i686 libtool libxcb libxcb-devel libX11-devel libXi-devel libXrender-devel net-tools openssl openssl-devel patch perl-version python strace tar unzip wget which xcb-util xcb-util-devel xcb-util-*-devel zlib.i686 java-1.8.0-openjdk xz maven hostname.x86_64 clang libcxx-devel \\\n && dnf groupinstall -y 'Development Tools' \\\n && dnf clean all\n#  ##################################################\n#   Generate certificates\n#  ##################################################\nCOPY openssl.conf /tmp/openssl.cnf\nRUN mkdir -p /data/ssl-data \\\n && /data/scripts/gen-certificates.sh --configfile /tmp/openssl.cnf --destdir /data/ssl-data\n#  ##################################################\n#   Install payara\n#  ##################################################\nENV PATH=\"${PATH}:/opt/payara41/glassfish/bin\"\nRUN wget --quiet -O /opt/payara-4.1.1.164.zip https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.1.164/payara-4.1.1.164.zip \\\n && unzip -qq /opt/payara-4.1.1.164.zip -d /opt \\\n && rm /opt/payara-4.1.1.164.zip\nRUN asadmin start-domain \\\n && asadmin --user admin create-managed-scheduled-executor-service --corepoolsize=100 concurrent/joynrMessagingScheduledExecutor \\\n && asadmin --user admin create-jdbc-connection-pool --datasourceclassname org.apache.derby.jdbc.ClientDataSource --restype javax.sql.XADataSource --property portNumber=1527:password=APP:user=APP:serverName=localhost:databaseName=joynr-discovery-directory:connectionAttributes= ; create=true JoynrPool \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DiscoveryDirectoryDS \\\n && asadmin --user admin create-jdbc-resource --connectionpoolid JoynrPool joynr/DomainAccessControllerDS \\\n && asadmin --user admin set-log-levels io.joynr.messaging=FINE \\\n && asadmin --user admin set-log-levels io.joynr.dispatching=FINE \\\n && asadmin --user admin set-log-levels io.joynr.jeeintegration=FINE \\\n && asadmin --user admin set configs.config.server-config.network-config.network-listeners.network-listener.http-listener-1.enabled=false \\\n && asadmin --user admin stop-domain --kill=true\nRUN chmod -R 777 /opt/payara41\n#  ##################################################\n#   install mosquitto mqtt broker\n#  ##################################################\nRUN dnf update -y \\\n && dnf install -y mosquitto mosquitto-devel \\\n && dnf clean all\nCOPY mosquitto.conf /etc/mosquitto/mosquitto.conf\n#  ##################################################\n#   add Tini - \"A tiny but valid init for containers\"\n#  ##################################################\nENV TINI_VERSION=\"v0.13.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n#  ##################################################\n#   set login user joynr\n#  ##################################################\nENV GOSU_VERSION=\"1.3\"\nRUN cd /tmp \\\n && . /etc/profile \\\n && curl -o gosu -sSL \"https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64\" \\\n && mv gosu /usr/local/bin/gosu \\\n && chmod 755 /usr/local/bin/gosu\nCOPY scripts/boot2user.sh /data/scripts/boot2user.sh\nENTRYPOINT [\"/tini\", \"-g\", \"--\", \"/data/scripts/boot2user.sh\"]\n","originalDockerfileUglifiedHash":"c8cb1bae9e59e952e62d1be32d800808","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/851dd60c6990ddf8b9df8484b25805f03785dfe5.dockerfile"}