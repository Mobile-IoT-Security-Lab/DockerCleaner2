{"seed":2740593754,"processedDockerfileHash":"28349e3bda0c20095366502fe0596c01","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM qianjiangyuan/tutorial-horovod:1.8\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n#  ##################\nRUN update-ca-certificates\n#  ################## \n#   Install cudnn. \nRUN mkdir /download \\\n && cd /download \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-runtime/libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-dev/libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-code/libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && cd .. \\\n && rm -rf /download\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends protobuf-compiler build-essential curl git cmake rsync software-properties-common unzip zip libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python3.5-dev zlib1g-dev libopencv-dev python3-tk build-essential autoconf libtool libcunit1-dev libproj-dev libgdal-dev libgeos-dev libjson0-dev vim python3-gdal python3-h5py python3-yaml python3-pydot python3-pip python3-setuptools graphviz -y\n#  ##################\n#   python packages\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python3 get-pip.py --force-reinstall\nRUN pip3 install --upgrade pip\nRUN pip3 --no-cache-dir install protobuf ipykernel jupyter matplotlib numpy scipy sklearn scikit-image pandas h5py shapely opencv-python \\\n && python3 -m ipykernel.kernelspec\n#  ##################\n#   Install TensorFlow GPU version.\n#  pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp27-none-linux_x86_64.whl\n#  pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.0-cp27-none-linux_x86_64.whl\n#   ARG TENSORFLOW_VERSION=1.4.1\n#   ARG TENSORFLOW_DEVICE=gpu\n#   ARG TENSORFLOW_APPEND=_gpu\n#   RUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-none-linux_x86_64.whl\n#    RUN pip3 --no-cache-dir install tensorflow-gpu keras\n#  ##################\n#   keras\n#   ARG KERAS_VERSION=2.0.6\n#   ENV KERAS_BACKEND=tensorflow\n#   RUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n#  ##################\n#   mxnet\n#   RUN pip3 --no-cache-dir install mxnet-cu80mkl\n#  ##################\n#   object detection api\n#   https://github.com/phipleg/tensorflow-object-detector/blob/master/Dockerfile\n#   git clone --branch my_abc http://git.abc.net/git/abc.git\nRUN git clone --branch r1.5 https://github.com/tensorflow/models.git /opt/tensorflow-models\nRUN cd /opt/tensorflow-models/research \\\n && pip3 install -e . \\\n && protoc object_detection/protos/*.proto --python_out=.\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/research/slim\"\n#   test (do this after container has been created)?\n#  RUN python /opt/tensorflow-models/research/object_detection/builders/model_builder_test.py\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install jupyter\nRUN pip3 install jupyterlab\nRUN python3 -m pip install ipykernel\nRUN python3 -m ipykernel install --user\nRUN rm /usr/bin/python \\\n && ln -s /usr/bin/python3.5 /usr/bin/python\n#  ##################\n#   TensorBoard\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM qianjiangyuan/tutorial-horovod:1.8\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n# ##################\nRUN update-ca-certificates\n# ################## \n#  Install cudnn. \nRUN mkdir /download \\\n && cd /download \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-runtime/libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-dev/libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-code/libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && cd .. \\\n && rm -rf /download\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends protobuf-compiler build-essential curl git cmake rsync software-properties-common unzip zip libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python3.5-dev zlib1g-dev libopencv-dev python3-tk build-essential autoconf libtool libcunit1-dev libproj-dev libgdal-dev libgeos-dev libjson0-dev vim python3-gdal python3-h5py python3-yaml python3-pydot python3-pip python3-setuptools graphviz -y\n# ##################\n#  python packages\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python3 get-pip.py --force-reinstall\nRUN pip3 install --upgrade pip\nRUN pip3 --no-cache-dir install protobuf ipykernel jupyter matplotlib numpy scipy sklearn scikit-image pandas h5py shapely opencv-python \\\n && python3 -m ipykernel.kernelspec\n# ##################\n#  Install TensorFlow GPU version.\n# pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp27-none-linux_x86_64.whl\n# pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.0-cp27-none-linux_x86_64.whl\n#  ARG TENSORFLOW_VERSION=1.4.1\n#  ARG TENSORFLOW_DEVICE=gpu\n#  ARG TENSORFLOW_APPEND=_gpu\n#  RUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-none-linux_x86_64.whl\n#   RUN pip3 --no-cache-dir install tensorflow-gpu keras\n# ##################\n#  keras\n#  ARG KERAS_VERSION=2.0.6\n#  ENV KERAS_BACKEND=tensorflow\n#  RUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n# ##################\n#  mxnet\n#  RUN pip3 --no-cache-dir install mxnet-cu80mkl\n# ##################\n#  object detection api\n#  https://github.com/phipleg/tensorflow-object-detector/blob/master/Dockerfile\n#  git clone --branch my_abc http://git.abc.net/git/abc.git\nRUN git clone --branch r1.5 https://github.com/tensorflow/models.git /opt/tensorflow-models\nRUN cd /opt/tensorflow-models/research \\\n && pip3 install -e . \\\n && protoc object_detection/protos/*.proto --python_out=.\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/research/slim\"\n#  test (do this after container has been created)?\n# RUN python /opt/tensorflow-models/research/object_detection/builders/model_builder_test.py\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install jupyter\nRUN pip3 install jupyterlab\nRUN python3 -m pip install ipykernel\nRUN python3 -m ipykernel install --user\nRUN rm /usr/bin/python \\\n && ln -s /usr/bin/python3.5 /usr/bin/python\n# ##################\n#  TensorBoard\n","injectedSmells":[],"originalDockerfileHash":"a7ae157d95300a2ea235d922a35a245a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM qianjiangyuan/tutorial-horovod:1.8\nMAINTAINER Jin Li <jinlmsft@hotmail.com>\n#  ##################\nRUN update-ca-certificates\n#  ################## \n#   Install cudnn. \nRUN mkdir /download \\\n && cd /download \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-runtime/libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-dev/libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && wget https://github.com/zhejianglab/qjy-binary/releases/download/cudnn7.5-code/libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-dev_7.5.0.56-1+cuda9.0_amd64.deb \\\n && dpkg -i libcudnn7-doc_7.5.0.56-1+cuda9.0_amd64.deb \\\n && cd .. \\\n && rm -rf /download\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends protobuf-compiler build-essential curl git cmake rsync software-properties-common unzip zip libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev pkg-config python3.5-dev zlib1g-dev libopencv-dev python3-tk build-essential autoconf libtool libcunit1-dev libproj-dev libgdal-dev libgeos-dev libjson0-dev vim python3-gdal python3-h5py python3-yaml python3-pydot python3-pip python3-setuptools graphviz -y\n#  ##################\n#   python packages\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python3 get-pip.py --force-reinstall\nRUN pip3 install --upgrade pip\nRUN pip3 --no-cache-dir install protobuf ipykernel jupyter matplotlib numpy scipy sklearn scikit-image pandas h5py shapely opencv-python \\\n && python3 -m ipykernel.kernelspec\n#  ##################\n#   Install TensorFlow GPU version.\n#  pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp27-none-linux_x86_64.whl\n#  pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.4.0-cp27-none-linux_x86_64.whl\n#   ARG TENSORFLOW_VERSION=1.4.1\n#   ARG TENSORFLOW_DEVICE=gpu\n#   ARG TENSORFLOW_APPEND=_gpu\n#   RUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-none-linux_x86_64.whl\n#    RUN pip3 --no-cache-dir install tensorflow-gpu keras\n#  ##################\n#   keras\n#   ARG KERAS_VERSION=2.0.6\n#   ENV KERAS_BACKEND=tensorflow\n#   RUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n#  ##################\n#   mxnet\n#   RUN pip3 --no-cache-dir install mxnet-cu80mkl\n#  ##################\n#   object detection api\n#   https://github.com/phipleg/tensorflow-object-detector/blob/master/Dockerfile\n#   git clone --branch my_abc http://git.abc.net/git/abc.git\nRUN git clone --branch r1.5 https://github.com/tensorflow/models.git /opt/tensorflow-models\nRUN cd /opt/tensorflow-models/research \\\n && pip3 install -e . \\\n && protoc object_detection/protos/*.proto --python_out=.\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/slim\"\nENV PYTHONPATH=\"$PYTHONPATH:/opt/tensorflow-models:/opt/tensorflow-models/research/slim\"\n#   test (do this after container has been created)?\n#  RUN python /opt/tensorflow-models/research/object_detection/builders/model_builder_test.py\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install jupyter\nRUN pip3 install jupyterlab\nRUN python3 -m pip install ipykernel\nRUN python3 -m ipykernel install --user\nRUN rm /usr/bin/python \\\n && ln -s /usr/bin/python3.5 /usr/bin/python\n#  ##################\n#   TensorBoard\n","originalDockerfileUglifiedHash":"5578586c4ec61d0cc91a805d43ce10c6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5de8eda11c88e2e452db6e541472cca21f40aca4.dockerfile"}