{"seed":101705874,"processedDockerfileHash":"e7a0def7414ae0648f37ec883603d77b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Installs python 3.6 and Rust\nFROM buildpack-deps:jessie\n#   ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#   runtime dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends tcl tk -y ) \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.1\"\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends $buildDeps -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\nENV RUST_VERSION=\"1.16.0\"\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && mkdir /source\nVOLUME [\"/source\"]\nMAINTAINER Jimmy Cuadra <jimmy@jimmycuadra.com>\nENV USER=\"root\"\nENV RUST_VERSION=\"1.16.0\"\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ####### GOLANG\n#   gcc for cgo\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y ) \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.8.1\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='b7b47572a2676449716865a66901090c057f6f1d8dfb1e19528fcd0372e5ce74' ;;(i386) goRelArch='linux-386' ; goRelSha256='cb3f4527112075a8b045d708f793aeee2709d2f5ddd320973a1413db06fddb50' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='0a59f4034a27fc51431989da520fd244d5261f364888134cab737e5bc2158cb2' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='e8a8326913640409028ef95c2107773f989b1b2a6e11ceb463c77c42887381da' ;;(amd64) goRelArch='linux-amd64' ; goRelSha256='a579ab19d5237e263254f1eac5352efcf1d70b9dacadb6d6bb12b0911ede8994' ;;(*) goRelArch='src' ; goRelSha256='33daf4c03f86120fdfdc66bddf6bfff4661c7ca11c5da473e537f4d69b470e57' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  COPY go-wrapper /usr/local/bin/\n#   KOTLIN\nENV K_VERSION=\"1.0.3\"\n#\nENV KOTLIN_COMPILER_URL=\"https://github.com/JetBrains/kotlin/releases/download/v${K_VERSION}/kotlin-compiler-${K_VERSION}.zip\"\n#\n#  RUN apt-get update &&\n#      apt-get install -y &&\n#      apt-get clean && \\\n#      rm -rf /var/lib/apt/lists/*\n#\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends unzip ) \\\n && (apt-get update ;apt-get install --no-install-recommends curl )\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends curl tar unzip -y ) \\\n && (curl -s -k -L -C - -b \"oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz | tar xfz - -C /opt ) \\\n && mv /opt/jdk1.7.0_79/jre /opt/jre1.7.0_79 \\\n && mv /opt/jdk1.7.0_79/lib/tools.jar /opt/jre1.7.0_79/lib/ext \\\n && rm -Rf /opt/jdk1.7.0_79 \\\n && ln -s /opt/jre1.7.0_79 /opt/java\n#   Set JAVA_HOME\nENV JAVA_HOME=\"/opt/java\"\n#  ENV JAVA_VERSION 7u75\n#  ENV BUILD_VERSION b13\n#\n#  # Upgrading system\n#  RUN apt-get -y upgrade && \\\n#      curl -L -k  -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/jdk-$JAVA_VERSION-linux-x64.rpm\" > /tmp/jdk-7-linux-x64.rpm && \\\n#      apt-get -y install /tmp/jdk-7-linux-x64.rpm && \\\n#      apt-get clean all && rm -rf /tmp/jdk-7-linux-x64.rpm\n#\n#\n#  RUN alternatives --install /usr/bin/java jar /usr/java/latest/bin/java 200000 && \\\n#      alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000 && \\\n#      alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000\n#\n#  ENV JAVA_HOME /usr/java/latest\nRUN wget $KOTLIN_COMPILER_URL -O /tmp/a.zip \\\n && unzip /tmp/a.zip -d /opt \\\n && rm /tmp/a.zip\n#   Add java alias\n#  RUN echo '#!/bin/bash\\n/opt/java/bin/java' > /usr/bin/java\n#  RUN chmod +x /usr/bin/java\n#  RUN mv /opt/java/bin/java /\n#   Add kotlinc alias\n#  RUN echo '#!/bin/bash\\n/opt/kotlinc/bin/kotlinc' > /usr/bin/kotlinc\n#  RUN chmod +x /usr/bin/kotlinc\n#   KOTLIN\nENV PATH=\"$PATH:/opt/kotlinc/bin\"\nENV PATH=\"$PATH:/opt/java/bin\"\n#   *********** RUBY ******\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.1\"\nENV RUBY_VERSION=\"2.1.10\"\nENV RUBY_DOWNLOAD_SHA256=\"5be9f8d5d29d252cd7f969ab7550e31bbb001feb4a83532301c0dd3b5006e148\"\nENV RUBYGEMS_VERSION=\"2.6.12\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends $buildDeps -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.15.1\"\nRUN gem install bundler --version 2.4.12\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Installs python 3.6 and Rust\nFROM buildpack-deps:jessie\n#  ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#  http://bugs.python.org/issue19846\n#  > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#  runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl tk -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.1\"\n#  if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth ( ( -type d -a -name test -o -name tests ) -o ( -type f -a -name '*.pyc' -o -name '*.pyo' ) ) -exec rm -rf '{}' + \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && rm -rf /usr/src/python ~/.cache\n#  make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\nENV RUST_VERSION=\"1.16.0\"\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && mkdir /source\nVOLUME [\"/source\"]\nMAINTAINER Jimmy Cuadra <jimmy@jimmycuadra.com>\nENV USER=\"root\"\nENV RUST_VERSION=\"1.16.0\"\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# ####### GOLANG\n#  gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.8.1\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='b7b47572a2676449716865a66901090c057f6f1d8dfb1e19528fcd0372e5ce74' ;;(i386) goRelArch='linux-386' ; goRelSha256='cb3f4527112075a8b045d708f793aeee2709d2f5ddd320973a1413db06fddb50' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='0a59f4034a27fc51431989da520fd244d5261f364888134cab737e5bc2158cb2' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='e8a8326913640409028ef95c2107773f989b1b2a6e11ceb463c77c42887381da' ;;(amd64) goRelArch='linux-amd64' ; goRelSha256='a579ab19d5237e263254f1eac5352efcf1d70b9dacadb6d6bb12b0911ede8994' ;;(*) goRelArch='src' ; goRelSha256='33daf4c03f86120fdfdc66bddf6bfff4661c7ca11c5da473e537f4d69b470e57' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n# COPY go-wrapper /usr/local/bin/\n#  KOTLIN\nENV K_VERSION=\"1.0.3\"\n#\nENV KOTLIN_COMPILER_URL=\"https://github.com/JetBrains/kotlin/releases/download/v${K_VERSION}/kotlin-compiler-${K_VERSION}.zip\"\n#\n# RUN apt-get update &&\n#     apt-get install -y &&\n#     apt-get clean && \\\n#     rm -rf /var/lib/apt/lists/*\n#\nRUN apt-get update \\\n && apt-get install unzip \\\n && apt-get install curl\nRUN apt-get update \\\n && apt-get install curl tar unzip -y \\\n && (curl -s -k -L -C - -b \"oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz | tar xfz - -C /opt ) \\\n && mv /opt/jdk1.7.0_79/jre /opt/jre1.7.0_79 \\\n && mv /opt/jdk1.7.0_79/lib/tools.jar /opt/jre1.7.0_79/lib/ext \\\n && rm -Rf /opt/jdk1.7.0_79 \\\n && ln -s /opt/jre1.7.0_79 /opt/java\n#  Set JAVA_HOME\nENV JAVA_HOME=\"/opt/java\"\n# ENV JAVA_VERSION 7u75\n# ENV BUILD_VERSION b13\n#\n# # Upgrading system\n# RUN apt-get -y upgrade && \\\n#     curl -L -k  -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/jdk-$JAVA_VERSION-linux-x64.rpm\" > /tmp/jdk-7-linux-x64.rpm && \\\n#     apt-get -y install /tmp/jdk-7-linux-x64.rpm && \\\n#     apt-get clean all && rm -rf /tmp/jdk-7-linux-x64.rpm\n#\n#\n# RUN alternatives --install /usr/bin/java jar /usr/java/latest/bin/java 200000 && \\\n#     alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000 && \\\n#     alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000\n#\n# ENV JAVA_HOME /usr/java/latest\nRUN wget $KOTLIN_COMPILER_URL -O /tmp/a.zip \\\n && unzip /tmp/a.zip -d /opt \\\n && rm /tmp/a.zip\n#  Add java alias\n# RUN echo '#!/bin/bash\\n/opt/java/bin/java' > /usr/bin/java\n# RUN chmod +x /usr/bin/java\n# RUN mv /opt/java/bin/java /\n#  Add kotlinc alias\n# RUN echo '#!/bin/bash\\n/opt/kotlinc/bin/kotlinc' > /usr/bin/kotlinc\n# RUN chmod +x /usr/bin/kotlinc\n#  KOTLIN\nENV PATH=\"$PATH:/opt/kotlinc/bin\"\nENV PATH=\"$PATH:/opt/java/bin\"\n#  *********** RUBY ******\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.1\"\nENV RUBY_VERSION=\"2.1.10\"\nENV RUBY_DOWNLOAD_SHA256=\"5be9f8d5d29d252cd7f969ab7550e31bbb001feb4a83532301c0dd3b5006e148\"\nENV RUBYGEMS_VERSION=\"2.6.12\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.15.1\"\nRUN gem install bundler\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"629f49c0cbbc4c1130f2a2a3060fe892","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Installs python 3.6 and Rust\nFROM buildpack-deps:jessie\n#   ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#   runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl tk -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.1\"\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\nENV RUST_VERSION=\"1.16.0\"\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && mkdir /source\nVOLUME [\"/source\"]\nMAINTAINER Jimmy Cuadra <jimmy@jimmycuadra.com>\nENV USER=\"root\"\nENV RUST_VERSION=\"1.16.0\"\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential ca-certificates curl git libssl-dev pkg-config \\\n && curl -sO https://static.rust-lang.org/dist/rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && tar -xzf rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz \\\n && ./rust-$RUST_VERSION-x86_64-unknown-linux-gnu/install.sh --without=rust-docs \\\n && DEBIAN_FRONTEND=noninteractive apt-get remove --purge -y curl \\\n && DEBIAN_FRONTEND=noninteractive apt-get autoremove -y \\\n && rm -rf rust-$RUST_VERSION-x86_64-unknown-linux-gnu rust-$RUST_VERSION-x86_64-unknown-linux-gnu.tar.gz /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  ####### GOLANG\n#   gcc for cgo\nRUN apt-get update \\\n && apt-get install --no-install-recommends g++ gcc libc6-dev make pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GOLANG_VERSION=\"1.8.1\"\nRUN set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='b7b47572a2676449716865a66901090c057f6f1d8dfb1e19528fcd0372e5ce74' ;;(i386) goRelArch='linux-386' ; goRelSha256='cb3f4527112075a8b045d708f793aeee2709d2f5ddd320973a1413db06fddb50' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='0a59f4034a27fc51431989da520fd244d5261f364888134cab737e5bc2158cb2' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='e8a8326913640409028ef95c2107773f989b1b2a6e11ceb463c77c42887381da' ;;(amd64) goRelArch='linux-amd64' ; goRelSha256='a579ab19d5237e263254f1eac5352efcf1d70b9dacadb6d6bb12b0911ede8994' ;;(*) goRelArch='src' ; goRelSha256='33daf4c03f86120fdfdc66bddf6bfff4661c7ca11c5da473e537f4d69b470e57' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  COPY go-wrapper /usr/local/bin/\n#   KOTLIN\nENV K_VERSION=\"1.0.3\"\n#\nENV KOTLIN_COMPILER_URL=\"https://github.com/JetBrains/kotlin/releases/download/v${K_VERSION}/kotlin-compiler-${K_VERSION}.zip\"\n#\n#  RUN apt-get update &&\n#      apt-get install -y &&\n#      apt-get clean && \\\n#      rm -rf /var/lib/apt/lists/*\n#\nRUN apt-get update \\\n && apt-get install unzip \\\n && apt-get install curl\nRUN apt-get update \\\n && apt-get install curl tar unzip -y \\\n && (curl -s -k -L -C - -b \"oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz | tar xfz - -C /opt ) \\\n && mv /opt/jdk1.7.0_79/jre /opt/jre1.7.0_79 \\\n && mv /opt/jdk1.7.0_79/lib/tools.jar /opt/jre1.7.0_79/lib/ext \\\n && rm -Rf /opt/jdk1.7.0_79 \\\n && ln -s /opt/jre1.7.0_79 /opt/java\n#   Set JAVA_HOME\nENV JAVA_HOME=\"/opt/java\"\n#  ENV JAVA_VERSION 7u75\n#  ENV BUILD_VERSION b13\n#\n#  # Upgrading system\n#  RUN apt-get -y upgrade && \\\n#      curl -L -k  -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/$JAVA_VERSION-$BUILD_VERSION/jdk-$JAVA_VERSION-linux-x64.rpm\" > /tmp/jdk-7-linux-x64.rpm && \\\n#      apt-get -y install /tmp/jdk-7-linux-x64.rpm && \\\n#      apt-get clean all && rm -rf /tmp/jdk-7-linux-x64.rpm\n#\n#\n#  RUN alternatives --install /usr/bin/java jar /usr/java/latest/bin/java 200000 && \\\n#      alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000 && \\\n#      alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000\n#\n#  ENV JAVA_HOME /usr/java/latest\nRUN wget $KOTLIN_COMPILER_URL -O /tmp/a.zip \\\n && unzip /tmp/a.zip -d /opt \\\n && rm /tmp/a.zip\n#   Add java alias\n#  RUN echo '#!/bin/bash\\n/opt/java/bin/java' > /usr/bin/java\n#  RUN chmod +x /usr/bin/java\n#  RUN mv /opt/java/bin/java /\n#   Add kotlinc alias\n#  RUN echo '#!/bin/bash\\n/opt/kotlinc/bin/kotlinc' > /usr/bin/kotlinc\n#  RUN chmod +x /usr/bin/kotlinc\n#   KOTLIN\nENV PATH=\"$PATH:/opt/kotlinc/bin\"\nENV PATH=\"$PATH:/opt/java/bin\"\n#   *********** RUBY ******\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.1\"\nENV RUBY_VERSION=\"2.1.10\"\nENV RUBY_DOWNLOAD_SHA256=\"5be9f8d5d29d252cd7f969ab7550e31bbb001feb4a83532301c0dd3b5006e148\"\nENV RUBYGEMS_VERSION=\"2.6.12\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison dpkg-dev libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.15.1\"\nRUN gem install bundler\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"52a6c4a2246ef2abdb1a48172e32653a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d94bb202e48d2e9d123443642f2bff55fdc6e7bd.dockerfile"}