{"seed":4108513529,"processedDockerfileHash":"35c29d6445e3fbd366c8e2bf1ec7dc75","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   gitlab-ci-runner-nodejs ¯\\_(ツ)_/¯\nFROM ubuntu:12.04.5\nMAINTAINER Bernhard Weisshuhn \"bkw@codingforce.com\"\n#   Based on https://github.com/gitlabhq/gitlab-ci-runner/blob/master/Dockerfile\n#   by Sytse Sijbrandij <sytse@gitlab.com>\n#   This script will start a runner in a docker container.\n#\n#   First build the container and give a name to the resulting image:\n#   docker build -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#\n#   Then set the environment variables and run the gitlab-ci-runner in the container:\n#   docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -e GITLAB_SERVER_FQDN=gitlab.example.com codingforce/gitlab-ci-runner-nodejs\n#\n#   After you start the runner you can send it to the background with ctrl-z\n#   The new runner should show up in the GitLab CI interface on /runners\n#\n#   You can start an interactive session to test new commands with:\n#   docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -i -t codingforce/gitlab-ci-runner-nodejs:latest /bin/bash\n#\n#   If you ever want to freshly rebuild the runner please use:\n#   docker build -no-cache -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#   Update your packages and install the ones that are needed to compile Ruby\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libicu-dev libfreetype6 libfontconfig1 -y )\n#   Fix upstart under a virtual host https://github.com/dotcloud/docker/issues/1024\n#   RUN dpkg-divert --local --rename --add /sbin/initctl\n#   RUN ln -nfs /bin/true /sbin/initctl\n#   Set the right locale\nRUN echo \"LC_ALL=\\\"en_US.UTF-8\\\"\" >> /etc/default/locale\nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n#   Download Ruby and compile it\nRUN mkdir /tmp/ruby \\\n && cd /tmp/ruby \\\n && curl -s http://ftp.ruby-lang.org/pub/ruby/ruby-2.0-stable.tar.bz2 | tar xj --strip-components=1\nRUN cd /tmp/ruby \\\n && ./configure --disable-install-rdoc --silent \\\n && make \\\n && make install\nRUN rm -rf /tmp/ruby\n#   don't install ruby rdocs or ri:\nRUN echo \"gem: --no-rdoc --no-ri\" >> /usr/local/etc/gemrc\n#   Prepare a known host file for non-interactive ssh connections\nRUN mkdir -p /root/.ssh\nRUN touch /root/.ssh/known_hosts\n#   Install the runner\nRUN mkdir /gitlab-ci-runner \\\n && cd /gitlab-ci-runner \\\n && curl -sL https://github.com/gitlabhq/gitlab-ci-runner/archive/v5.0.0.tar.gz | tar xz --strip-components=1\n#   Install the gems for the runner\nRUN cd /gitlab-ci-runner \\\n && gem install bundler --version 2.4.12 \\\n && bundle install\n#   Install some usefull gems for web development\nRUN gem install compass --version 1.0.3\n#   Download nodejs and compile it\n#   RUN mkdir /tmp/node && cd /tmp/node && curl -s http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1\n#   RUN cd /tmp/node  && ./configure && make && make install\n#   RUN rm -rf /tmp/node\nRUN wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\nRUN echo '. /.nvm/nvm.sh' >> /root/.bashrc\nRUN cat /root/.bashrc /.nvm/nvm.sh\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.10'\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.11'\nRUN bash -c '. /.nvm/nvm.sh ; nvm alias default 0.10'\n#   update npm and install some basics\nRUN bash -c '. /.nvm/nvm.sh ; npm update -g npm'\nRUN bash -c '. /.nvm/nvm.sh ; npm install -g phantomjs grunt grunt-cli bower'\n#   When the image is started add the remote server key, install the runner and run it\nWORKDIR /gitlab-ci-runner\nCMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts&; bundle exec ./bin/setup_and_run\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  gitlab-ci-runner-nodejs ¯\\_(ツ)_/¯\nFROM ubuntu:12.04.5\nMAINTAINER Bernhard Weisshuhn \"bkw@codingforce.com\"\n#  Based on https://github.com/gitlabhq/gitlab-ci-runner/blob/master/Dockerfile\n#  by Sytse Sijbrandij <sytse@gitlab.com>\n#  This script will start a runner in a docker container.\n#\n#  First build the container and give a name to the resulting image:\n#  docker build -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#\n#  Then set the environment variables and run the gitlab-ci-runner in the container:\n#  docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -e GITLAB_SERVER_FQDN=gitlab.example.com codingforce/gitlab-ci-runner-nodejs\n#\n#  After you start the runner you can send it to the background with ctrl-z\n#  The new runner should show up in the GitLab CI interface on /runners\n#\n#  You can start an interactive session to test new commands with:\n#  docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -i -t codingforce/gitlab-ci-runner-nodejs:latest /bin/bash\n#\n#  If you ever want to freshly rebuild the runner please use:\n#  docker build -no-cache -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#  Update your packages and install the ones that are needed to compile Ruby\nRUN apt-get update -y\nRUN apt-get install wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libicu-dev libfreetype6 libfontconfig1 -y\n#  Fix upstart under a virtual host https://github.com/dotcloud/docker/issues/1024\n#  RUN dpkg-divert --local --rename --add /sbin/initctl\n#  RUN ln -nfs /bin/true /sbin/initctl\n#  Set the right locale\nRUN echo \"LC_ALL=\\\"en_US.UTF-8\\\"\" >> /etc/default/locale\nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n#  Download Ruby and compile it\nRUN mkdir /tmp/ruby \\\n && cd /tmp/ruby \\\n && curl -s http://ftp.ruby-lang.org/pub/ruby/ruby-2.0-stable.tar.bz2 | tar xj --strip-components=1\nRUN cd /tmp/ruby \\\n && ./configure --disable-install-rdoc --silent \\\n && make \\\n && make install\nRUN rm -rf /tmp/ruby\n#  don't install ruby rdocs or ri:\nRUN echo \"gem: --no-rdoc --no-ri\" >> /usr/local/etc/gemrc\n#  Prepare a known host file for non-interactive ssh connections\nRUN mkdir -p /root/.ssh\nRUN touch /root/.ssh/known_hosts\n#  Install the runner\nRUN mkdir /gitlab-ci-runner \\\n && cd /gitlab-ci-runner \\\n && curl -sL https://github.com/gitlabhq/gitlab-ci-runner/archive/v5.0.0.tar.gz | tar xz --strip-components=1\n#  Install the gems for the runner\nRUN cd /gitlab-ci-runner \\\n && gem install bundler \\\n && bundle install\n#  Install some usefull gems for web development\nRUN gem install compass\n#  Download nodejs and compile it\n#  RUN mkdir /tmp/node && cd /tmp/node && curl -s http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1\n#  RUN cd /tmp/node  && ./configure && make && make install\n#  RUN rm -rf /tmp/node\nRUN wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\nRUN echo '. /.nvm/nvm.sh' >> /root/.bashrc\nRUN cat /root/.bashrc /.nvm/nvm.sh\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.10'\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.11'\nRUN bash -c '. /.nvm/nvm.sh ; nvm alias default 0.10'\n#  update npm and install some basics\nRUN bash -c '. /.nvm/nvm.sh ; npm update -g npm'\nRUN bash -c '. /.nvm/nvm.sh ; npm install -g phantomjs grunt grunt-cli bower'\n#  When the image is started add the remote server key, install the runner and run it\nWORKDIR /gitlab-ci-runner\nCMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts&; bundle exec ./bin/setup_and_run\n","injectedSmells":[],"originalDockerfileHash":"c6efe6cac4403b701e133305f4e2f0f9","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   gitlab-ci-runner-nodejs ¯\\_(ツ)_/¯\nFROM ubuntu:12.04.5\nMAINTAINER Bernhard Weisshuhn \"bkw@codingforce.com\"\n#   Based on https://github.com/gitlabhq/gitlab-ci-runner/blob/master/Dockerfile\n#   by Sytse Sijbrandij <sytse@gitlab.com>\n#   This script will start a runner in a docker container.\n#\n#   First build the container and give a name to the resulting image:\n#   docker build -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#\n#   Then set the environment variables and run the gitlab-ci-runner in the container:\n#   docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -e GITLAB_SERVER_FQDN=gitlab.example.com codingforce/gitlab-ci-runner-nodejs\n#\n#   After you start the runner you can send it to the background with ctrl-z\n#   The new runner should show up in the GitLab CI interface on /runners\n#\n#   You can start an interactive session to test new commands with:\n#   docker run -e CI_SERVER_URL=https://ci.example.com -e REGISTRATION_TOKEN=replaceme -e HOME=/root -i -t codingforce/gitlab-ci-runner-nodejs:latest /bin/bash\n#\n#   If you ever want to freshly rebuild the runner please use:\n#   docker build -no-cache -t codingforce/gitlab-ci-runner-nodejs github.com/bkw/gitlab-ci-runner-nodejs\n#   Update your packages and install the ones that are needed to compile Ruby\nRUN apt-get update -y\nRUN apt-get install wget curl gcc libxml2-dev libxslt-dev libcurl4-openssl-dev libreadline6-dev libc6-dev libssl-dev make build-essential zlib1g-dev openssh-server git-core libyaml-dev postfix libicu-dev libfreetype6 libfontconfig1 -y\n#   Fix upstart under a virtual host https://github.com/dotcloud/docker/issues/1024\n#   RUN dpkg-divert --local --rename --add /sbin/initctl\n#   RUN ln -nfs /bin/true /sbin/initctl\n#   Set the right locale\nRUN echo \"LC_ALL=\\\"en_US.UTF-8\\\"\" >> /etc/default/locale\nRUN locale-gen en_US.UTF-8\nRUN update-locale LANG=en_US.UTF-8\n#   Download Ruby and compile it\nRUN mkdir /tmp/ruby \\\n && cd /tmp/ruby \\\n && curl -s http://ftp.ruby-lang.org/pub/ruby/ruby-2.0-stable.tar.bz2 | tar xj --strip-components=1\nRUN cd /tmp/ruby \\\n && ./configure --disable-install-rdoc --silent \\\n && make \\\n && make install\nRUN rm -rf /tmp/ruby\n#   don't install ruby rdocs or ri:\nRUN echo \"gem: --no-rdoc --no-ri\" >> /usr/local/etc/gemrc\n#   Prepare a known host file for non-interactive ssh connections\nRUN mkdir -p /root/.ssh\nRUN touch /root/.ssh/known_hosts\n#   Install the runner\nRUN mkdir /gitlab-ci-runner \\\n && cd /gitlab-ci-runner \\\n && curl -sL https://github.com/gitlabhq/gitlab-ci-runner/archive/v5.0.0.tar.gz | tar xz --strip-components=1\n#   Install the gems for the runner\nRUN cd /gitlab-ci-runner \\\n && gem install bundler \\\n && bundle install\n#   Install some usefull gems for web development\nRUN gem install compass\n#   Download nodejs and compile it\n#   RUN mkdir /tmp/node && cd /tmp/node && curl -s http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1\n#   RUN cd /tmp/node  && ./configure && make && make install\n#   RUN rm -rf /tmp/node\nRUN wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\nRUN echo '. /.nvm/nvm.sh' >> /root/.bashrc\nRUN cat /root/.bashrc /.nvm/nvm.sh\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.10'\nRUN bash -c '. /.nvm/nvm.sh ; nvm install 0.11'\nRUN bash -c '. /.nvm/nvm.sh ; nvm alias default 0.10'\n#   update npm and install some basics\nRUN bash -c '. /.nvm/nvm.sh ; npm update -g npm'\nRUN bash -c '. /.nvm/nvm.sh ; npm install -g phantomjs grunt grunt-cli bower'\n#   When the image is started add the remote server key, install the runner and run it\nWORKDIR /gitlab-ci-runner\nCMD ssh-keyscan -H $GITLAB_SERVER_FQDN >> /root/.ssh/known_hosts&; bundle exec ./bin/setup_and_run\n","originalDockerfileUglifiedHash":"4f1b6751fcc0f782dc3981496625fbd8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/86f932c5ae67bd6d635ea6ec0bdd68a819e93cc9.dockerfile"}