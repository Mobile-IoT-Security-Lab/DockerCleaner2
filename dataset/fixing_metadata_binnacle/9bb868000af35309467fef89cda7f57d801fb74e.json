{"seed":1859609440,"processedDockerfileHash":"60865b6e5f874fc5040df5ad9a43ddbb","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\nFROM ojhaujjwal/magento-php-cli:latest\nARG MAGENTO_ROOT=/var/www/magento\nENV MAGENTO_ROOT=\"${MAGENTO_ROOT}\"\n#   Run utils\nRUN apt-get update \\\n && apt-get install --no-install-recommends xz-utils=5.4.1-0.2 git=1:2.39.2-1ubuntu1 curl=7.88.1-7ubuntu1 -y --force-yes \\\n && apt-get clean\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - INSTALL_XDEBUG=           false\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#\n#  ####################################\n#   Nodejs:\n#  ####################################\n#   Check if Nodejs needs to be installed\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\n#   Install node js from apt\n#   when installing from a package manager the bin is called nodejs \n#   so we need to symlink\nRUN if [ ${INSTALL_NODE} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends nodejs=18.13.0+dfsg1-1ubuntu2 npm=9.2.0~ds1-1 -y \\\n && ln -s /usr/bin/nodejs /usr/bin/node \\\n && npm install bower@1.8.14 -g ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install --no-install-recommends php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so ${MAGENTO_ROOT}/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID magento \\\n && useradd -u $PUID -g magento -m magento\n#  ####################################\n#   Composer:\n#  ####################################\n#   Setup COMPOSER_HOME directory and Add the composer.json\nCOPY ./composer.json /home/magento/.composer/composer.json\n#   Fix root ownership of config.json and auth.json\nENV COMPOSER_HOME=\"/home/magento/.composer/\"\n#   Make sure that ~/.composer belongs to magento\nRUN chown -R magento:magento /home/magento/.composer\nUSER magento\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#  PHP.ini settings\nCOPY ./magento.ini /etc/php/7.0/cli/conf.d\nUSER root\n#   Add crontab file in the cron directory\nCOPY magento-cron /var/tmp/magento-cron\n#   Check if cron needs to be run\nARG CRON\nENV CRON=\"${CRON}\"\nRUN if [ ${CRON} = true ] ; then cp /var/tmp/magento-cron /etc/cron.d/ \\\n && sed -i \"s%MAGENTO_ROOT%${MAGENTO_ROOT}%g\" /etc/cron.d/magento-cron \\\n && chmod 600 /etc/cron.d/magento-cron ; fi\n#  Add container startup script\nRUN mkdir -p /etc/my_init.d\nCOPY bin/docker-environment /etc/my_init.d/docker-environment\n#   Magento commands:\nCOPY bin/* /usr/local/bin/\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENTRYPOINT [\"/usr/local/bin/docker-environment\"]\nCMD [\"/sbin/my_init\"]\n#   Set default work directory\nWORKDIR ${MAGENTO_ROOT}\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\nFROM ojhaujjwal/magento-php-cli:latest\nARG MAGENTO_ROOT=/var/www/magento\nENV MAGENTO_ROOT=\"${MAGENTO_ROOT}\"\n#  Run utils\nRUN apt-get update \\\n && apt-get install xz-utils git curl -y --force-yes \\\n && apt-get clean\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#\n#    - INSTALL_XDEBUG=           false\n#    - COMPOSER_GLOBAL_INSTALL=  false\n#    - INSTALL_NODE=             false\n#\n# ####################################\n#  Nodejs:\n# ####################################\n#  Check if Nodejs needs to be installed\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\n#  Install node js from apt\n#  when installing from a package manager the bin is called nodejs \n#  so we need to symlink\nRUN if [ ${INSTALL_NODE} = true ] ; then apt-get update \\\n && apt-get install nodejs npm -y \\\n && ln -s /usr/bin/nodejs /usr/bin/node \\\n && npm install bower -g ; fi\n# ####################################\n#  xDebug:\n# ####################################\n#  Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so ${MAGENTO_ROOT}/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n# ####################################\n#  Non-Root User:\n# ####################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID magento \\\n && useradd -u $PUID -g magento -m magento\n# ####################################\n#  Composer:\n# ####################################\n#  Setup COMPOSER_HOME directory and Add the composer.json\nCOPY ./composer.json /home/magento/.composer/composer.json\n#  Fix root ownership of config.json and auth.json\nENV COMPOSER_HOME=\"/home/magento/.composer/\"\n#  Make sure that ~/.composer belongs to magento\nRUN chown -R magento:magento /home/magento/.composer\nUSER magento\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n# PHP.ini settings\nADD ./magento.ini /etc/php/7.0/cli/conf.d\nUSER root\n#  Add crontab file in the cron directory\nADD magento-cron /var/tmp/magento-cron\n#  Check if cron needs to be run\nARG CRON\nENV CRON=\"${CRON}\"\nRUN if [ ${CRON} = true ] ; then cp /var/tmp/magento-cron /etc/cron.d/ \\\n && sed -i \"s%MAGENTO_ROOT%${MAGENTO_ROOT}%g\" /etc/cron.d/magento-cron \\\n && chmod 600 /etc/cron.d/magento-cron ; fi\n# Add container startup script\nRUN mkdir -p /etc/my_init.d\nADD bin/docker-environment /etc/my_init.d/docker-environment\n#  Magento commands:\nCOPY bin/* /usr/local/bin/\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENTRYPOINT [\"/usr/local/bin/docker-environment\"]\nCMD [\"/sbin/my_init\"]\n#  Set default work directory\nWORKDIR ${MAGENTO_ROOT}\n","injectedSmells":[],"originalDockerfileHash":"7c5725fdae07dcdf2b13447d6ed76360","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\nFROM ojhaujjwal/magento-php-cli:latest\nARG MAGENTO_ROOT=/var/www/magento\nENV MAGENTO_ROOT=\"${MAGENTO_ROOT}\"\n#   Run utils\nRUN apt-get update \\\n && apt-get install xz-utils git curl -y --force-yes \\\n && apt-get clean\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - INSTALL_XDEBUG=           false\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#\n#  ####################################\n#   Nodejs:\n#  ####################################\n#   Check if Nodejs needs to be installed\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\n#   Install node js from apt\n#   when installing from a package manager the bin is called nodejs \n#   so we need to symlink\nRUN if [ ${INSTALL_NODE} = true ] ; then apt-get update \\\n && apt-get install nodejs npm -y \\\n && ln -s /usr/bin/nodejs /usr/bin/node \\\n && npm install bower -g ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so ${MAGENTO_ROOT}/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID magento \\\n && useradd -u $PUID -g magento -m magento\n#  ####################################\n#   Composer:\n#  ####################################\n#   Setup COMPOSER_HOME directory and Add the composer.json\nCOPY ./composer.json /home/magento/.composer/composer.json\n#   Fix root ownership of config.json and auth.json\nENV COMPOSER_HOME=\"/home/magento/.composer/\"\n#   Make sure that ~/.composer belongs to magento\nRUN chown -R magento:magento /home/magento/.composer\nUSER magento\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#  PHP.ini settings\nADD ./magento.ini /etc/php/7.0/cli/conf.d\nUSER root\n#   Add crontab file in the cron directory\nADD magento-cron /var/tmp/magento-cron\n#   Check if cron needs to be run\nARG CRON\nENV CRON=\"${CRON}\"\nRUN if [ ${CRON} = true ] ; then cp /var/tmp/magento-cron /etc/cron.d/ \\\n && sed -i \"s%MAGENTO_ROOT%${MAGENTO_ROOT}%g\" /etc/cron.d/magento-cron \\\n && chmod 600 /etc/cron.d/magento-cron ; fi\n#  Add container startup script\nRUN mkdir -p /etc/my_init.d\nADD bin/docker-environment /etc/my_init.d/docker-environment\n#   Magento commands:\nCOPY bin/* /usr/local/bin/\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENTRYPOINT [\"/usr/local/bin/docker-environment\"]\nCMD [\"/sbin/my_init\"]\n#   Set default work directory\nWORKDIR ${MAGENTO_ROOT}\n","originalDockerfileUglifiedHash":"3737d5a03956b9f66cd4b22f6ede5d40","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9bb868000af35309467fef89cda7f57d801fb74e.dockerfile"}