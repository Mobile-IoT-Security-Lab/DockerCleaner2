{"seed":1368374458,"processedDockerfileHash":"47168fd78803ef93dff5768b10c2e54a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Base softlearning container that contains all softlearning requirements,\n#   but not the actual softlearning repo. Could be used for example when developing\n#   softlearning, in which case you would mount softlearning repo in to the container\n#   as a volume, and thus be able to modify code on the host, yet run things inside\n#   the container. You are encouraged to use docker-compose (docker-compose.dev.yml),\n#   which should allow you to setup your environment with a single one command.\nARG UBUNTU_VERSION=18.04\nFROM ubuntu:${UBUNTU_VERSION} AS base\nARG UBUNTU_VERSION\nARG MJKEY\nSHELL [\"/bin/bash\", \"-c\"]\n#   MAINTAINER Kristian Hartikainen <kristian.hartikainen@gmail.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN apt-get update --fix-missing \\\n && apt-get install --no-install-recommends wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \\\n && /bin/bash /tmp/miniconda.sh -b -p /opt/conda \\\n && rm /tmp/miniconda.sh \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> /etc/bash.bashrc\nRUN apt-get install --no-install-recommends curl grep sed dpkg -y \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN conda update -y --name base conda \\\n && conda clean --all -y\n#   ========== Softlearning dependencies ==========\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential curl git gnupg2 make cmake swig libz-dev unzip zlib1g-dev libglfw3 libglfw3-dev libxrandr2 libxinerama-dev libxi6 libxcursor-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev lsb-release ack-grep patchelf vim emacs wget xpra xserver-xorg-dev xvfb -y \\\n && export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends google-cloud-sdk -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   ========= MuJoCo ===============\nCOPY ./scripts/install_mujoco.py /tmp/\nRUN /tmp/install_mujoco.py --mujoco-path=/root/.mujoco --versions 1.50 2.00 \\\n && ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200 \\\n && rm /tmp/install_mujoco.py\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}\"\n#   This is a hack required to make mujocopy to compile in gpu mode\nRUN mkdir -p /usr/lib/nvidia-000\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-000\"\n#   ========== Conda Environment ==========\nCOPY ./environment.yml /tmp/\nCOPY ./requirements.txt /tmp/\n#   NOTE: Don't separate the Mujoco key echo and remove commands into separate\n#   run commands! Otherwise your key will be readable by anyone who has access\n#   To the container. We need the key in order to compile mujoco_py.\nRUN echo \"${MJKEY}\" > ~/.mujoco/mjkey.txt \\\n && conda env update -f /tmp/environment.yml \\\n && conda clean --all -y \\\n && rm ~/.mujoco/mjkey.txt\nRUN echo \"conda activate softlearning\" >> ~/.bashrc \\\n && echo \"cd ~/softlearning\" >> ~/.bashrc\n#   =========== Container Entrypoint =============\nCOPY ./docker/entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Base softlearning container that contains all softlearning requirements,\n#  but not the actual softlearning repo. Could be used for example when developing\n#  softlearning, in which case you would mount softlearning repo in to the container\n#  as a volume, and thus be able to modify code on the host, yet run things inside\n#  the container. You are encouraged to use docker-compose (docker-compose.dev.yml),\n#  which should allow you to setup your environment with a single one command.\nARG UBUNTU_VERSION=18.04\nFROM ubuntu:${UBUNTU_VERSION} AS base\nARG UBUNTU_VERSION\nARG MJKEY\nSHELL [\"/bin/bash\", \"-c\"]\n#  MAINTAINER Kristian Hartikainen <kristian.hartikainen@gmail.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN apt-get update --fix-missing \\\n && apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \\\n && /bin/bash /tmp/miniconda.sh -b -p /opt/conda \\\n && rm /tmp/miniconda.sh \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> /etc/bash.bashrc\nRUN apt-get install curl grep sed dpkg -y \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN conda update -y --name base conda \\\n && conda clean --all -y\n#  ========== Softlearning dependencies ==========\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential curl git gnupg2 make cmake swig libz-dev unzip zlib1g-dev libglfw3 libglfw3-dev libxrandr2 libxinerama-dev libxi6 libxcursor-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev lsb-release ack-grep patchelf vim emacs wget xpra xserver-xorg-dev xvfb -y \\\n && export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update -y \\\n && apt-get install google-cloud-sdk -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  ========= MuJoCo ===============\nCOPY ./scripts/install_mujoco.py /tmp/\nRUN /tmp/install_mujoco.py --mujoco-path=/root/.mujoco --versions 1.50 2.00 \\\n && ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200 \\\n && rm /tmp/install_mujoco.py\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}\"\n#  This is a hack required to make mujocopy to compile in gpu mode\nRUN mkdir -p /usr/lib/nvidia-000\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-000\"\n#  ========== Conda Environment ==========\nCOPY ./environment.yml /tmp/\nCOPY ./requirements.txt /tmp/\n#  NOTE: Don't separate the Mujoco key echo and remove commands into separate\n#  run commands! Otherwise your key will be readable by anyone who has access\n#  To the container. We need the key in order to compile mujoco_py.\nRUN echo \"${MJKEY}\" > ~/.mujoco/mjkey.txt \\\n && conda env update -f /tmp/environment.yml \\\n && conda clean --all -y \\\n && rm ~/.mujoco/mjkey.txt\nRUN echo \"conda activate softlearning\" >> ~/.bashrc \\\n && echo \"cd ~/softlearning\" >> ~/.bashrc\n#  =========== Container Entrypoint =============\nCOPY ./docker/entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"27a3822135341eb4da62180e518fbcba","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Base softlearning container that contains all softlearning requirements,\n#   but not the actual softlearning repo. Could be used for example when developing\n#   softlearning, in which case you would mount softlearning repo in to the container\n#   as a volume, and thus be able to modify code on the host, yet run things inside\n#   the container. You are encouraged to use docker-compose (docker-compose.dev.yml),\n#   which should allow you to setup your environment with a single one command.\nARG UBUNTU_VERSION=18.04\nFROM ubuntu:${UBUNTU_VERSION} AS base\nARG UBUNTU_VERSION\nARG MJKEY\nSHELL [\"/bin/bash\", \"-c\"]\n#   MAINTAINER Kristian Hartikainen <kristian.hartikainen@gmail.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   See http://bugs.python.org/issue19846\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN apt-get update --fix-missing \\\n && apt-get install wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion -y\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \\\n && /bin/bash /tmp/miniconda.sh -b -p /opt/conda \\\n && rm /tmp/miniconda.sh \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> /etc/bash.bashrc\nRUN apt-get install curl grep sed dpkg -y \\\n && TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\\\"\" | sed 's:^..\\\\(.*\\\\).$:\\\\1:' ` \\\n && curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb \\\n && dpkg -i tini.deb \\\n && rm tini.deb \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN conda update -y --name base conda \\\n && conda clean --all -y\n#   ========== Softlearning dependencies ==========\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential curl git gnupg2 make cmake swig libz-dev unzip zlib1g-dev libglfw3 libglfw3-dev libxrandr2 libxinerama-dev libxi6 libxcursor-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev lsb-release ack-grep patchelf vim emacs wget xpra xserver-xorg-dev xvfb -y \\\n && export CLOUD_SDK_REPO=\"cloud-sdk-$( lsb_release -c -s ;)\" \\\n && echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \\\n && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - \\\n && apt-get update -y \\\n && apt-get install google-cloud-sdk -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   ========= MuJoCo ===============\nCOPY ./scripts/install_mujoco.py /tmp/\nRUN /tmp/install_mujoco.py --mujoco-path=/root/.mujoco --versions 1.50 2.00 \\\n && ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200 \\\n && rm /tmp/install_mujoco.py\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}\"\n#   This is a hack required to make mujocopy to compile in gpu mode\nRUN mkdir -p /usr/lib/nvidia-000\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/lib/nvidia-000\"\n#   ========== Conda Environment ==========\nCOPY ./environment.yml /tmp/\nCOPY ./requirements.txt /tmp/\n#   NOTE: Don't separate the Mujoco key echo and remove commands into separate\n#   run commands! Otherwise your key will be readable by anyone who has access\n#   To the container. We need the key in order to compile mujoco_py.\nRUN echo \"${MJKEY}\" > ~/.mujoco/mjkey.txt \\\n && conda env update -f /tmp/environment.yml \\\n && conda clean --all -y \\\n && rm ~/.mujoco/mjkey.txt\nRUN echo \"conda activate softlearning\" >> ~/.bashrc \\\n && echo \"cd ~/softlearning\" >> ~/.bashrc\n#   =========== Container Entrypoint =============\nCOPY ./docker/entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"6ac58bdd6d48600ba6c316e11920edda","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bb70abddf663253ce4a63282759945930137154b.dockerfile"}