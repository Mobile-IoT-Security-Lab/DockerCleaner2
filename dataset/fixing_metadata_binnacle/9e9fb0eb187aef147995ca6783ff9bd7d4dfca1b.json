{"seed":3986576841,"processedDockerfileHash":"9b4bbc4e30e83087964f15d22683ab01","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-gem","have-a-healthcheck"],"processedDockerfile":"#   Docker demo image, as used on try.jupyter.org and tmpnb.org\nFROM jupyter/all-spark-notebook:c7fb6660d096\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\nRUN : \\\n && apt-get -y dist-upgrade --no-install-recommends \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   BEGININCLUDE jupyter/datascience-notebook\n#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\n#   FROM jupyter/scipy-notebook\nLABEL maintainer=\"Jupyter Project <jupyter@googlegroups.com>\"\nUSER root\n#   R pre-requisites\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends fonts-dejavu tzdata gfortran gcc -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Julia dependencies\n#   install Julia packages in /opt/julia instead of $HOME\nENV JULIA_PKGDIR=\"/opt/julia\"\nENV JULIA_VERSION=\"0.6.0\"\nRUN mkdir /opt/julia-${JULIA_VERSION} \\\n && cd /tmp \\\n && wget -q https://julialang.s3.amazonaws.com/bin/linux/x64/`echo $JULIA_VERSION | cut -d. -f 1,2 `/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n && echo \"3a27ea78b06f46701dc4274820d9853789db205bce56afdc7147f7bd6fa83e41 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - \\\n && tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 \\\n && rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n#   Show Julia where conda libraries are \\\nRUN mkdir /etc/julia \\\n && echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl \\\n && mkdir $JULIA_PKGDIR \\\n && chown $NB_USER $JULIA_PKGDIR \\\n && fix-permissions $JULIA_PKGDIR\nUSER $NB_USER\n#   R packages including IRKernel which gets installed globally.\nRUN conda config --system --append channels r \\\n && conda install --quiet --yes 'rpy2=2.8*' 'r-base=3.3.2' 'r-irkernel=0.7*' 'r-plyr=1.8*' 'r-devtools=1.12*' 'r-tidyverse=1.0*' 'r-shiny=0.14*' 'r-rmarkdown=1.2*' 'r-forecast=7.3*' 'r-rsqlite=1.1*' 'r-reshape2=1.4*' 'r-nycflights13=0.2*' 'r-caret=6.0*' 'r-rcurl=1.95*' 'r-crayon=1.3*' 'r-randomforest=4.6*' \\\n && conda clean -tipsy \\\n && fix-permissions $CONDA_DIR\n#   Add Julia packages\n#   Install IJulia as jovyan and then move the kernelspec out\n#   to the system share location. Avoids problems with runtime UID change not\n#   taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'Pkg.init()' \\\n && julia -e 'Pkg.update()' \\\n && julia -e 'Pkg.add(\"HDF5\")' \\\n && julia -e 'Pkg.add(\"Gadfly\")' \\\n && julia -e 'Pkg.add(\"RDatasets\")' \\\n && julia -e 'Pkg.add(\"IJulia\")' \\\n && julia -e 'using HDF5' \\\n && julia -e 'using Gadfly' \\\n && julia -e 'using RDatasets' \\\n && julia -e 'using IJulia' \\\n && mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ \\\n && chmod -R go+rx $CONDA_DIR/share/jupyter \\\n && rm -rf $HOME/.local \\\n && fix-permissions $JULIA_PKGDIR $CONDA_DIR/share/jupyter\n#   ENDINCLUDE jupyter/datascience-notebook\n#   Install system libraries first as root\nUSER root\n#   The Glorious Glasgow Haskell Compiler\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common -y ) \\\n && add-apt-repository -y ppa:hvr/ghc \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends cabal-install-1.24 ghc-8.0.2 happy-1.19.5 alex-3.1.7 -y ) \\\n && apt-get clean\n#   IHaskell dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends zlib1g-dev libzmq3-dev libtinfo-dev libcairo2-dev libpango1.0-dev -y ) \\\n && apt-get clean\n#   Ruby dependencies\nRUN (apt-get update ;apt-get install --no-install-recommends ruby ruby-dev libtool autoconf automake gnuplot-nox libsqlite3-dev libatlas-base-dev libgsl0-dev libmagick++-dev imagemagick -y ) \\\n && ln -s /usr/bin/libtoolize /usr/bin/libtool \\\n && apt-get clean\n#   We need to pin activemodel to 4.2 while we have ruby < 2.2\nRUN gem update --system --no-document \\\n && gem install --no-document\n#   Perl 6\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential -y ) \\\n && git clone https://github.com/rakudo/rakudo.git -b 2017.12 \\\n && cd rakudo \\\n && perl Configure.pl --prefix=/usr --gen-moar --gen-nqp --backends=moar \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf rakudo \\\n && git clone https://github.com/ugexe/zef.git \\\n && cd zef \\\n && perl6 -Ilib bin/zef install . \\\n && export PATH=$PATH:/usr/share/perl6/site/bin \\\n && zef -v install Jupyter::Kernel SVG::Plot --force-test \\\n && jupyter-kernel.p6 --generate-config\nENV PATH=\"/usr/share/perl6/site/bin:$PATH\"\n#   Now switch to $NB_USER for all conda and other package manager installs\nUSER $NB_USER\nENV PATH=\"/home/$NB_USER/.cabal/bin:/opt/cabal/1.24/bin:/opt/ghc/8.0.2/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.7/bin:$PATH\"\n#   IRuby\nRUN iruby register\n#   IHaskell + IHaskell-Widgets + Dependencies for examples\nRUN cabal update \\\n && CURL_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt' curl 'https://www.stackage.org/lts-9.21/cabal.config?global=true' >> ~/.cabal/config \\\n && cabal install cpphs \\\n && cabal install gtk2hs-buildtools \\\n && cabal install ihaskell-0.9.0.2 --reorder-goals \\\n && cabal install HTTP Chart Chart-cairo \\\n && ihaskell install --prefix=$CONDA_DIR \\\n && rm -fr $( echo ~/.cabal/bin/* | grep -iv ihaskell ;) ~/.cabal/packages ~/.cabal/share/doc ~/.cabal/setup-exe-cache ~/.cabal/logs\n#   Extra Kernels\nRUN pip install bash_kernel==0.9.0 --no-cache-dir \\\n && python -m bash_kernel.install --sys-prefix\n#   Clone featured notebooks before adding local content to avoid recloning\n#   everytime something changes locally\nRUN mkdir -p /home/$NB_USER/communities \\\n && mkdir -p /home/$NB_USER/featured\nRUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/$NB_USER/featured/pandas-cookbook/\nRUN git clone --depth 1 https://github.com/gibiansky/IHaskell.git /home/$NB_USER/IHaskell/ \\\n && mv /home/$NB_USER/IHaskell/ihaskell-display/ihaskell-widgets/Examples /home/$NB_USER/featured/ihaskell-widgets \\\n && rm -r /home/$NB_USER/IHaskell\n#   Add local content, starting with notebooks and datasets which are the largest\n#   so that later, smaller file changes do not cause a complete recopy during\n#   build\nCOPY notebooks/ /home/$NB_USER/\nCOPY datasets/ /home/$NB_USER/datasets/\n#   Switch back to root for permission fixes, conversions, and trust. Make sure\n#   trust is done as $NB_USER so that the signing secret winds up in the $NB_USER\n#   profile, not root's\nUSER root\n#   Convert notebooks to the current format and trust them\nRUN find /home/$NB_USER -name '*.ipynb' -exec jupyter nbconvert --to notebook {} --output {}\n#   Finally, add the site specific tmpnb.org / try.jupyter.org configuration.\n#   These should probably be split off into a separate docker image so that others\n#   can reuse the very expensive build of all the above with their own site\n#   customization.\n#   Add the templates\nCOPY resources/templates/ /srv/templates/\nRUN chmod a+rX /srv/templates\nUSER $NB_USER\n#   Install our custom.js\nCOPY resources/custom.js /home/$NB_USER/.jupyter/custom/\n#   Append tmpnb specific options to the base config\nCOPY resources/jupyter_notebook_config.partial.py /tmp/\nRUN cat /tmp/jupyter_notebook_config.partial.py >> /home/$NB_USER/.jupyter/jupyter_notebook_config.py \\\n && rm /tmp/jupyter_notebook_config.partial.py\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker demo image, as used on try.jupyter.org and tmpnb.org\nFROM jupyter/all-spark-notebook:c7fb6660d096\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\nRUN apt-get update \\\n && apt-get -y dist-upgrade --no-install-recommends \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  BEGININCLUDE jupyter/datascience-notebook\n#  Copyright (c) Jupyter Development Team.\n#  Distributed under the terms of the Modified BSD License.\n#  FROM jupyter/scipy-notebook\nLABEL maintainer=\"Jupyter Project <jupyter@googlegroups.com>\"\nUSER root\n#  R pre-requisites\nRUN apt-get update \\\n && apt-get install --no-install-recommends fonts-dejavu tzdata gfortran gcc -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Julia dependencies\n#  install Julia packages in /opt/julia instead of $HOME\nENV JULIA_PKGDIR=\"/opt/julia\"\nENV JULIA_VERSION=\"0.6.0\"\nRUN mkdir /opt/julia-${JULIA_VERSION} \\\n && cd /tmp \\\n && wget -q https://julialang.s3.amazonaws.com/bin/linux/x64/`echo $JULIA_VERSION | cut -d. -f 1,2 `/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n && echo \"3a27ea78b06f46701dc4274820d9853789db205bce56afdc7147f7bd6fa83e41 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - \\\n && tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 \\\n && rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n#  Show Julia where conda libraries are \\\nRUN mkdir /etc/julia \\\n && echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl \\\n && mkdir $JULIA_PKGDIR \\\n && chown $NB_USER $JULIA_PKGDIR \\\n && fix-permissions $JULIA_PKGDIR\nUSER $NB_USER\n#  R packages including IRKernel which gets installed globally.\nRUN conda config --system --append channels r \\\n && conda install --quiet --yes 'rpy2=2.8*' 'r-base=3.3.2' 'r-irkernel=0.7*' 'r-plyr=1.8*' 'r-devtools=1.12*' 'r-tidyverse=1.0*' 'r-shiny=0.14*' 'r-rmarkdown=1.2*' 'r-forecast=7.3*' 'r-rsqlite=1.1*' 'r-reshape2=1.4*' 'r-nycflights13=0.2*' 'r-caret=6.0*' 'r-rcurl=1.95*' 'r-crayon=1.3*' 'r-randomforest=4.6*' \\\n && conda clean -tipsy \\\n && fix-permissions $CONDA_DIR\n#  Add Julia packages\n#  Install IJulia as jovyan and then move the kernelspec out\n#  to the system share location. Avoids problems with runtime UID change not\n#  taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'Pkg.init()' \\\n && julia -e 'Pkg.update()' \\\n && julia -e 'Pkg.add(\"HDF5\")' \\\n && julia -e 'Pkg.add(\"Gadfly\")' \\\n && julia -e 'Pkg.add(\"RDatasets\")' \\\n && julia -e 'Pkg.add(\"IJulia\")' \\\n && julia -e 'using HDF5' \\\n && julia -e 'using Gadfly' \\\n && julia -e 'using RDatasets' \\\n && julia -e 'using IJulia' \\\n && mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ \\\n && chmod -R go+rx $CONDA_DIR/share/jupyter \\\n && rm -rf $HOME/.local \\\n && fix-permissions $JULIA_PKGDIR $CONDA_DIR/share/jupyter\n#  ENDINCLUDE jupyter/datascience-notebook\n#  Install system libraries first as root\nUSER root\n#  The Glorious Glasgow Haskell Compiler\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && add-apt-repository -y ppa:hvr/ghc \\\n && apt-get update \\\n && apt-get install cabal-install-1.24 ghc-8.0.2 happy-1.19.5 alex-3.1.7 -y \\\n && apt-get clean\n#  IHaskell dependencies\nRUN apt-get install --no-install-recommends zlib1g-dev libzmq3-dev libtinfo-dev libcairo2-dev libpango1.0-dev -y \\\n && apt-get clean\n#  Ruby dependencies\nRUN apt-get install --no-install-recommends ruby ruby-dev libtool autoconf automake gnuplot-nox libsqlite3-dev libatlas-base-dev libgsl0-dev libmagick++-dev imagemagick -y \\\n && ln -s /usr/bin/libtoolize /usr/bin/libtool \\\n && apt-get clean\n#  We need to pin activemodel to 4.2 while we have ruby < 2.2\nRUN gem update --system --no-document \\\n && gem install --no-document\n#  Perl 6\nRUN apt-get update \\\n && apt-get install build-essential -y \\\n && git clone https://github.com/rakudo/rakudo.git -b 2017.12 \\\n && cd rakudo \\\n && perl Configure.pl --prefix=/usr --gen-moar --gen-nqp --backends=moar \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf rakudo \\\n && git clone https://github.com/ugexe/zef.git \\\n && cd zef \\\n && perl6 -Ilib bin/zef install . \\\n && export PATH=$PATH:/usr/share/perl6/site/bin \\\n && zef -v install Jupyter::Kernel SVG::Plot --force-test \\\n && jupyter-kernel.p6 --generate-config\nENV PATH=\"/usr/share/perl6/site/bin:$PATH\"\n#  Now switch to $NB_USER for all conda and other package manager installs\nUSER $NB_USER\nENV PATH=\"/home/$NB_USER/.cabal/bin:/opt/cabal/1.24/bin:/opt/ghc/8.0.2/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.7/bin:$PATH\"\n#  IRuby\nRUN iruby register\n#  IHaskell + IHaskell-Widgets + Dependencies for examples\nRUN cabal update \\\n && CURL_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt' curl 'https://www.stackage.org/lts-9.21/cabal.config?global=true' >> ~/.cabal/config \\\n && cabal install cpphs \\\n && cabal install gtk2hs-buildtools \\\n && cabal install ihaskell-0.9.0.2 --reorder-goals \\\n && cabal install HTTP Chart Chart-cairo \\\n && ihaskell install --prefix=$CONDA_DIR \\\n && rm -fr $( echo ~/.cabal/bin/* | grep -iv ihaskell ;) ~/.cabal/packages ~/.cabal/share/doc ~/.cabal/setup-exe-cache ~/.cabal/logs\n#  Extra Kernels\nRUN pip install bash_kernel --no-cache-dir \\\n && python -m bash_kernel.install --sys-prefix\n#  Clone featured notebooks before adding local content to avoid recloning\n#  everytime something changes locally\nRUN mkdir -p /home/$NB_USER/communities \\\n && mkdir -p /home/$NB_USER/featured\nRUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/$NB_USER/featured/pandas-cookbook/\nRUN git clone --depth 1 https://github.com/gibiansky/IHaskell.git /home/$NB_USER/IHaskell/ \\\n && mv /home/$NB_USER/IHaskell/ihaskell-display/ihaskell-widgets/Examples /home/$NB_USER/featured/ihaskell-widgets \\\n && rm -r /home/$NB_USER/IHaskell\n#  Add local content, starting with notebooks and datasets which are the largest\n#  so that later, smaller file changes do not cause a complete recopy during\n#  build\nCOPY notebooks/ /home/$NB_USER/\nCOPY datasets/ /home/$NB_USER/datasets/\n#  Switch back to root for permission fixes, conversions, and trust. Make sure\n#  trust is done as $NB_USER so that the signing secret winds up in the $NB_USER\n#  profile, not root's\nUSER root\n#  Convert notebooks to the current format and trust them\nRUN find /home/$NB_USER -name '*.ipynb' -exec jupyter nbconvert --to notebook {} --output {} ; \\\n && chown -R $NB_USER:users /home/$NB_USER \\\n && sudo -u $NB_USER env \"PATH=$PATH\" find /home/$NB_USER -name '*.ipynb' -exec jupyter trust {} ;\n#  Finally, add the site specific tmpnb.org / try.jupyter.org configuration.\n#  These should probably be split off into a separate docker image so that others\n#  can reuse the very expensive build of all the above with their own site\n#  customization.\n#  Add the templates\nCOPY resources/templates/ /srv/templates/\nRUN chmod a+rX /srv/templates\nUSER $NB_USER\n#  Install our custom.js\nCOPY resources/custom.js /home/$NB_USER/.jupyter/custom/\n#  Append tmpnb specific options to the base config\nCOPY resources/jupyter_notebook_config.partial.py /tmp/\nRUN cat /tmp/jupyter_notebook_config.partial.py >> /home/$NB_USER/.jupyter/jupyter_notebook_config.py \\\n && rm /tmp/jupyter_notebook_config.partial.py\n","injectedSmells":[],"originalDockerfileHash":"9d4497a7f688b63971f00de5ed9e55c9","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker demo image, as used on try.jupyter.org and tmpnb.org\nFROM jupyter/all-spark-notebook:c7fb6660d096\nMAINTAINER Jupyter Project <jupyter@googlegroups.com>\nUSER root\nRUN apt-get update \\\n && apt-get -y dist-upgrade --no-install-recommends \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   BEGININCLUDE jupyter/datascience-notebook\n#   Copyright (c) Jupyter Development Team.\n#   Distributed under the terms of the Modified BSD License.\n#   FROM jupyter/scipy-notebook\nLABEL maintainer=\"Jupyter Project <jupyter@googlegroups.com>\"\nUSER root\n#   R pre-requisites\nRUN apt-get update \\\n && apt-get install --no-install-recommends fonts-dejavu tzdata gfortran gcc -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Julia dependencies\n#   install Julia packages in /opt/julia instead of $HOME\nENV JULIA_PKGDIR=\"/opt/julia\"\nENV JULIA_VERSION=\"0.6.0\"\nRUN mkdir /opt/julia-${JULIA_VERSION} \\\n && cd /tmp \\\n && wget -q https://julialang.s3.amazonaws.com/bin/linux/x64/`echo $JULIA_VERSION | cut -d. -f 1,2 `/julia-${JULIA_VERSION}-linux-x86_64.tar.gz \\\n && echo \"3a27ea78b06f46701dc4274820d9853789db205bce56afdc7147f7bd6fa83e41 *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - \\\n && tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 \\\n && rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n#   Show Julia where conda libraries are \\\nRUN mkdir /etc/julia \\\n && echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl \\\n && mkdir $JULIA_PKGDIR \\\n && chown $NB_USER $JULIA_PKGDIR \\\n && fix-permissions $JULIA_PKGDIR\nUSER $NB_USER\n#   R packages including IRKernel which gets installed globally.\nRUN conda config --system --append channels r \\\n && conda install --quiet --yes 'rpy2=2.8*' 'r-base=3.3.2' 'r-irkernel=0.7*' 'r-plyr=1.8*' 'r-devtools=1.12*' 'r-tidyverse=1.0*' 'r-shiny=0.14*' 'r-rmarkdown=1.2*' 'r-forecast=7.3*' 'r-rsqlite=1.1*' 'r-reshape2=1.4*' 'r-nycflights13=0.2*' 'r-caret=6.0*' 'r-rcurl=1.95*' 'r-crayon=1.3*' 'r-randomforest=4.6*' \\\n && conda clean -tipsy \\\n && fix-permissions $CONDA_DIR\n#   Add Julia packages\n#   Install IJulia as jovyan and then move the kernelspec out\n#   to the system share location. Avoids problems with runtime UID change not\n#   taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'Pkg.init()' \\\n && julia -e 'Pkg.update()' \\\n && julia -e 'Pkg.add(\"HDF5\")' \\\n && julia -e 'Pkg.add(\"Gadfly\")' \\\n && julia -e 'Pkg.add(\"RDatasets\")' \\\n && julia -e 'Pkg.add(\"IJulia\")' \\\n && julia -e 'using HDF5' \\\n && julia -e 'using Gadfly' \\\n && julia -e 'using RDatasets' \\\n && julia -e 'using IJulia' \\\n && mv $HOME/.local/share/jupyter/kernels/julia* $CONDA_DIR/share/jupyter/kernels/ \\\n && chmod -R go+rx $CONDA_DIR/share/jupyter \\\n && rm -rf $HOME/.local \\\n && fix-permissions $JULIA_PKGDIR $CONDA_DIR/share/jupyter\n#   ENDINCLUDE jupyter/datascience-notebook\n#   Install system libraries first as root\nUSER root\n#   The Glorious Glasgow Haskell Compiler\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && add-apt-repository -y ppa:hvr/ghc \\\n && apt-get update \\\n && apt-get install cabal-install-1.24 ghc-8.0.2 happy-1.19.5 alex-3.1.7 -y \\\n && apt-get clean\n#   IHaskell dependencies\nRUN apt-get install --no-install-recommends zlib1g-dev libzmq3-dev libtinfo-dev libcairo2-dev libpango1.0-dev -y \\\n && apt-get clean\n#   Ruby dependencies\nRUN apt-get install --no-install-recommends ruby ruby-dev libtool autoconf automake gnuplot-nox libsqlite3-dev libatlas-base-dev libgsl0-dev libmagick++-dev imagemagick -y \\\n && ln -s /usr/bin/libtoolize /usr/bin/libtool \\\n && apt-get clean\n#   We need to pin activemodel to 4.2 while we have ruby < 2.2\nRUN gem update --system --no-document \\\n && gem install --no-document\n#   Perl 6\nRUN apt-get update \\\n && apt-get install build-essential -y \\\n && git clone https://github.com/rakudo/rakudo.git -b 2017.12 \\\n && cd rakudo \\\n && perl Configure.pl --prefix=/usr --gen-moar --gen-nqp --backends=moar \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf rakudo \\\n && git clone https://github.com/ugexe/zef.git \\\n && cd zef \\\n && perl6 -Ilib bin/zef install . \\\n && export PATH=$PATH:/usr/share/perl6/site/bin \\\n && zef -v install Jupyter::Kernel SVG::Plot --force-test \\\n && jupyter-kernel.p6 --generate-config\nENV PATH=\"/usr/share/perl6/site/bin:$PATH\"\n#   Now switch to $NB_USER for all conda and other package manager installs\nUSER $NB_USER\nENV PATH=\"/home/$NB_USER/.cabal/bin:/opt/cabal/1.24/bin:/opt/ghc/8.0.2/bin:/opt/happy/1.19.5/bin:/opt/alex/3.1.7/bin:$PATH\"\n#   IRuby\nRUN iruby register\n#   IHaskell + IHaskell-Widgets + Dependencies for examples\nRUN cabal update \\\n && CURL_CA_BUNDLE='/etc/ssl/certs/ca-certificates.crt' curl 'https://www.stackage.org/lts-9.21/cabal.config?global=true' >> ~/.cabal/config \\\n && cabal install cpphs \\\n && cabal install gtk2hs-buildtools \\\n && cabal install ihaskell-0.9.0.2 --reorder-goals \\\n && cabal install HTTP Chart Chart-cairo \\\n && ihaskell install --prefix=$CONDA_DIR \\\n && rm -fr $( echo ~/.cabal/bin/* | grep -iv ihaskell ;) ~/.cabal/packages ~/.cabal/share/doc ~/.cabal/setup-exe-cache ~/.cabal/logs\n#   Extra Kernels\nRUN pip install bash_kernel --no-cache-dir \\\n && python -m bash_kernel.install --sys-prefix\n#   Clone featured notebooks before adding local content to avoid recloning\n#   everytime something changes locally\nRUN mkdir -p /home/$NB_USER/communities \\\n && mkdir -p /home/$NB_USER/featured\nRUN git clone --depth 1 https://github.com/jvns/pandas-cookbook.git /home/$NB_USER/featured/pandas-cookbook/\nRUN git clone --depth 1 https://github.com/gibiansky/IHaskell.git /home/$NB_USER/IHaskell/ \\\n && mv /home/$NB_USER/IHaskell/ihaskell-display/ihaskell-widgets/Examples /home/$NB_USER/featured/ihaskell-widgets \\\n && rm -r /home/$NB_USER/IHaskell\n#   Add local content, starting with notebooks and datasets which are the largest\n#   so that later, smaller file changes do not cause a complete recopy during\n#   build\nCOPY notebooks/ /home/$NB_USER/\nCOPY datasets/ /home/$NB_USER/datasets/\n#   Switch back to root for permission fixes, conversions, and trust. Make sure\n#   trust is done as $NB_USER so that the signing secret winds up in the $NB_USER\n#   profile, not root's\nUSER root\n#   Convert notebooks to the current format and trust them\nRUN find /home/$NB_USER -name '*.ipynb' -exec jupyter nbconvert --to notebook {} --output {}\n#   Finally, add the site specific tmpnb.org / try.jupyter.org configuration.\n#   These should probably be split off into a separate docker image so that others\n#   can reuse the very expensive build of all the above with their own site\n#   customization.\n#   Add the templates\nCOPY resources/templates/ /srv/templates/\nRUN chmod a+rX /srv/templates\nUSER $NB_USER\n#   Install our custom.js\nCOPY resources/custom.js /home/$NB_USER/.jupyter/custom/\n#   Append tmpnb specific options to the base config\nCOPY resources/jupyter_notebook_config.partial.py /tmp/\nRUN cat /tmp/jupyter_notebook_config.partial.py >> /home/$NB_USER/.jupyter/jupyter_notebook_config.py \\\n && rm /tmp/jupyter_notebook_config.partial.py\n","originalDockerfileUglifiedHash":"258d5d30cb0d3e4d7bfeccc78142d11c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9e9fb0eb187aef147995ca6783ff9bd7d4dfca1b.dockerfile"}