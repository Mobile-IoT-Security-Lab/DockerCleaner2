{"seed":882333981,"processedDockerfileHash":"ebcfc4de0f852c78f65aa2b914ffe98e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   See https://github.com/docker-library/php/blob/master/7.1/jessie/fpm/Dockerfile\nFROM php:7.1-fpm\nARG TIMEZONE\nARG DEBIAN_FRONTEND=noninteractive\nMAINTAINER Yahya ERTURAN <root@yahyaerturan.com>\nENV NVM_DIR=\"/usr/local/nvm\"\nENV NODE_VERSION=\"8.9.3\"\nCOPY ./utils/.bashrc /root/\nRUN /bin/bash -c \"source /root/.bashrc\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends openssl=1.1.1n-0+deb10u4 git=1:2.20.1-2+deb10u8 nano=3.2-3 apt-transport-https=1.8.2.3 curl=7.64.0-4+deb10u5 zip=3.0-11+b1 unzip=6.0-23+deb10u3 -y -qq )\n#   soap => dependency: libxml2-dev\n#   mcrypt => dependency: libmcrypt-dev\n#   ftp => dependency: libssl-dev\n#   intl => dependency: libicu-dev\n#   xsl => dependency: libxslt-dev\n#   gd => dependecy: libfreetype6-dev libjpeg62-turbo-dev libpng-dev\nRUN (apt-get update ;apt-get install --no-install-recommends libxml2-dev=2.9.4+dfsg1-7+deb10u5 libmcrypt-dev=2.5.8-3.4 libssl-dev=1.1.1n-0+deb10u4 libicu-dev=63.1-6+deb10u3 libxslt-dev libfreetype6-dev=2.9.1-3+deb10u3 libjpeg62-turbo-dev=1:1.5.2-2+deb10u1 libpng-dev=1.6.36-6 -y -qq )\n#   Add Yarn as PPA\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN :\n#   Config Git Globally\nRUN git config --global user.name \"${GIT_USER_NAME}\"\nRUN git config --global user.email \"${GIT_USER_EMAIL}\"\nRUN git config --global core.fileMode false\nRUN git config --global color.ui true\n#   Install Composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN composer --version\n#   Install NVM\n#   https://github.com/creationix/nvm#install-script\nRUN curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n#   install node and npm\nRUN . $NVM_DIR/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && nvm alias default $NODE_VERSION \\\n && nvm use default\n#   add node and npm to path so the commands are available\nENV NODE_PATH=\"$NVM_DIR/v$NODE_VERSION/lib/node_modules\"\nENV PATH=\"$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\"\nRUN /bin/bash -c \"npm upgrade minimatch@3 graceful-fs@4 --global\"\n#   Intall Yarn\nRUN (apt-get update ;apt-get install --no-install-recommends yarn -y -qq )\n#   Set timezone\nRUN ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo ${TIMEZONE} > /etc/timezone\nRUN printf '[PHP]\\ndate.timezone = \"%s\"\\n', ${TIMEZONE} > /usr/local/etc/php/conf.d/tzone.ini\nRUN \"date\"\n#   Type docker-php-ext-install to see available extensions\n#   Possible values for ext-name:\n#   bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo filter ftp\n#   gd gettext gmp hash iconv imap interbase intl json ldap mbstring mcrypt mysqli\n#   oci8 odbc opcache pcntl pdo pdo_dblib pdo_firebird pdo_mysql pdo_oci pdo_odbc pdo_pgsql pdo_sqlite\n#   pgsql phar posix pspell readline recode reflection session shmop simplexml snmp soap sockets\n#   spl standard sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter xsl zip\nRUN docker-php-ext-install gettext zip xsl pdo pdo_mysql mysqli intl hash \\\n && docker-php-ext-install -j$( nproc ;) iconv mcrypt \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd opcache\n#   Installed Extension with this configuration\n#   Core        hash        pdo_mysql       standard\n#   ctype       iconv       pdo_sqlite      tokenizer\n#   curl        json        Phar            xml\n#   date        libxml      posix           xmlreader\n#   dom         mbstring    readline        xmlwriter\n#   fileinfo    mcrypt      Reflection      xsl\n#   filter      mysqlnd     session         zip\n#   ftp         openssl     SimpleXML       zlib\n#   gd          pcre        SPL             [Zend Modules]\n#   gettext     PDO         sqlite3         Zend OPcache\n#   Install and enable xdebug\n#   RUN pecl install xdebug\n#   RUN docker-php-ext-enable xdebug\n#   RUN echo \"error_reporting = E_ALL\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"display_startup_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"display_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_enable=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_connect_back=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.idekey=\\\"PHPSTORM\\\"\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_port=9001\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   Disable opcahce temporarily\n#   RUN mkdir -p /usr/local/etc/php/conf.d/disabled && mv /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini /usr/local/etc/php/conf.d/disabled/docker-php-ext-opcache.ini\nRUN mkdir -p /root/.ssh\nCOPY ./utils/id_rsa /root/.ssh\nCOPY ./utils/id_rsa.pub /root/.ssh\nWORKDIR /var/www/symfony\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"#  See https://github.com/docker-library/php/blob/master/7.1/jessie/fpm/Dockerfile\nFROM php:7.1-fpm\nARG TIMEZONE\nARG DEBIAN_FRONTEND=noninteractive\nMAINTAINER Yahya ERTURAN <root@yahyaerturan.com>\nENV NVM_DIR=\"/usr/local/nvm\"\nENV NODE_VERSION=\"8.9.3\"\nCOPY ./utils/.bashrc /root/\nRUN /bin/bash -c \"source /root/.bashrc\"\nRUN apt-get update -qq \\\n && apt-get install openssl git nano apt-transport-https curl zip unzip -y -qq\n#  soap => dependency: libxml2-dev\n#  mcrypt => dependency: libmcrypt-dev\n#  ftp => dependency: libssl-dev\n#  intl => dependency: libicu-dev\n#  xsl => dependency: libxslt-dev\n#  gd => dependecy: libfreetype6-dev libjpeg62-turbo-dev libpng-dev\nRUN apt-get install libxml2-dev libmcrypt-dev libssl-dev libicu-dev libxslt-dev libfreetype6-dev libjpeg62-turbo-dev libpng-dev -y -qq\n#  Add Yarn as PPA\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq\n#  Config Git Globally\nRUN git config --global user.name \"${GIT_USER_NAME}\"\nRUN git config --global user.email \"${GIT_USER_EMAIL}\"\nRUN git config --global core.fileMode false\nRUN git config --global color.ui true\n#  Install Composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN composer --version\n#  Install NVM\n#  https://github.com/creationix/nvm#install-script\nRUN curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n#  install node and npm\nRUN . $NVM_DIR/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && nvm alias default $NODE_VERSION \\\n && nvm use default\n#  add node and npm to path so the commands are available\nENV NODE_PATH=\"$NVM_DIR/v$NODE_VERSION/lib/node_modules\"\nENV PATH=\"$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\"\nRUN /bin/bash -c \"npm upgrade minimatch@3 graceful-fs@4 --global\"\n#  Intall Yarn\nRUN apt-get install yarn -y -qq\n#  Set timezone\nRUN ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo ${TIMEZONE} > /etc/timezone\nRUN printf '[PHP]\\ndate.timezone = \"%s\"\\n', ${TIMEZONE} > /usr/local/etc/php/conf.d/tzone.ini\nRUN \"date\"\n#  Type docker-php-ext-install to see available extensions\n#  Possible values for ext-name:\n#  bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo filter ftp\n#  gd gettext gmp hash iconv imap interbase intl json ldap mbstring mcrypt mysqli\n#  oci8 odbc opcache pcntl pdo pdo_dblib pdo_firebird pdo_mysql pdo_oci pdo_odbc pdo_pgsql pdo_sqlite\n#  pgsql phar posix pspell readline recode reflection session shmop simplexml snmp soap sockets\n#  spl standard sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter xsl zip\nRUN docker-php-ext-install gettext zip xsl pdo pdo_mysql mysqli intl hash \\\n && docker-php-ext-install -j$( nproc ;) iconv mcrypt \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd opcache\n#  Installed Extension with this configuration\n#  Core        hash        pdo_mysql       standard\n#  ctype       iconv       pdo_sqlite      tokenizer\n#  curl        json        Phar            xml\n#  date        libxml      posix           xmlreader\n#  dom         mbstring    readline        xmlwriter\n#  fileinfo    mcrypt      Reflection      xsl\n#  filter      mysqlnd     session         zip\n#  ftp         openssl     SimpleXML       zlib\n#  gd          pcre        SPL             [Zend Modules]\n#  gettext     PDO         sqlite3         Zend OPcache\n#  Install and enable xdebug\n#  RUN pecl install xdebug\n#  RUN docker-php-ext-enable xdebug\n#  RUN echo \"error_reporting = E_ALL\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"display_startup_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"display_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"xdebug.remote_enable=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"xdebug.remote_connect_back=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"xdebug.idekey=\\\"PHPSTORM\\\"\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  RUN echo \"xdebug.remote_port=9001\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#  Disable opcahce temporarily\n#  RUN mkdir -p /usr/local/etc/php/conf.d/disabled && mv /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini /usr/local/etc/php/conf.d/disabled/docker-php-ext-opcache.ini\nRUN mkdir -p /root/.ssh\nCOPY ./utils/id_rsa /root/.ssh\nCOPY ./utils/id_rsa.pub /root/.ssh\nWORKDIR /var/www/symfony\n","injectedSmells":[],"originalDockerfileHash":"2eb44c2e36bbd9125ef3181e3497591d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   See https://github.com/docker-library/php/blob/master/7.1/jessie/fpm/Dockerfile\nFROM php:7.1-fpm\nARG TIMEZONE\nARG DEBIAN_FRONTEND=noninteractive\nMAINTAINER Yahya ERTURAN <root@yahyaerturan.com>\nENV NVM_DIR=\"/usr/local/nvm\"\nENV NODE_VERSION=\"8.9.3\"\nCOPY ./utils/.bashrc /root/\nRUN /bin/bash -c \"source /root/.bashrc\"\nRUN apt-get update -qq \\\n && apt-get install openssl git nano apt-transport-https curl zip unzip -y -qq\n#   soap => dependency: libxml2-dev\n#   mcrypt => dependency: libmcrypt-dev\n#   ftp => dependency: libssl-dev\n#   intl => dependency: libicu-dev\n#   xsl => dependency: libxslt-dev\n#   gd => dependecy: libfreetype6-dev libjpeg62-turbo-dev libpng-dev\nRUN apt-get install libxml2-dev libmcrypt-dev libssl-dev libicu-dev libxslt-dev libfreetype6-dev libjpeg62-turbo-dev libpng-dev -y -qq\n#   Add Yarn as PPA\nRUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\nRUN echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list\nRUN apt-get update -qq\n#   Config Git Globally\nRUN git config --global user.name \"${GIT_USER_NAME}\"\nRUN git config --global user.email \"${GIT_USER_EMAIL}\"\nRUN git config --global core.fileMode false\nRUN git config --global color.ui true\n#   Install Composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN composer --version\n#   Install NVM\n#   https://github.com/creationix/nvm#install-script\nRUN curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n#   install node and npm\nRUN . $NVM_DIR/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && nvm alias default $NODE_VERSION \\\n && nvm use default\n#   add node and npm to path so the commands are available\nENV NODE_PATH=\"$NVM_DIR/v$NODE_VERSION/lib/node_modules\"\nENV PATH=\"$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH\"\nRUN /bin/bash -c \"npm upgrade minimatch@3 graceful-fs@4 --global\"\n#   Intall Yarn\nRUN apt-get install yarn -y -qq\n#   Set timezone\nRUN ln -snf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo ${TIMEZONE} > /etc/timezone\nRUN printf '[PHP]\\ndate.timezone = \"%s\"\\n', ${TIMEZONE} > /usr/local/etc/php/conf.d/tzone.ini\nRUN \"date\"\n#   Type docker-php-ext-install to see available extensions\n#   Possible values for ext-name:\n#   bcmath bz2 calendar ctype curl dba dom enchant exif fileinfo filter ftp\n#   gd gettext gmp hash iconv imap interbase intl json ldap mbstring mcrypt mysqli\n#   oci8 odbc opcache pcntl pdo pdo_dblib pdo_firebird pdo_mysql pdo_oci pdo_odbc pdo_pgsql pdo_sqlite\n#   pgsql phar posix pspell readline recode reflection session shmop simplexml snmp soap sockets\n#   spl standard sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter xsl zip\nRUN docker-php-ext-install gettext zip xsl pdo pdo_mysql mysqli intl hash \\\n && docker-php-ext-install -j$( nproc ;) iconv mcrypt \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-install -j$( nproc ;) gd opcache\n#   Installed Extension with this configuration\n#   Core        hash        pdo_mysql       standard\n#   ctype       iconv       pdo_sqlite      tokenizer\n#   curl        json        Phar            xml\n#   date        libxml      posix           xmlreader\n#   dom         mbstring    readline        xmlwriter\n#   fileinfo    mcrypt      Reflection      xsl\n#   filter      mysqlnd     session         zip\n#   ftp         openssl     SimpleXML       zlib\n#   gd          pcre        SPL             [Zend Modules]\n#   gettext     PDO         sqlite3         Zend OPcache\n#   Install and enable xdebug\n#   RUN pecl install xdebug\n#   RUN docker-php-ext-enable xdebug\n#   RUN echo \"error_reporting = E_ALL\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"display_startup_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"display_errors = On\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_enable=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_connect_back=1\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.idekey=\\\"PHPSTORM\\\"\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   RUN echo \"xdebug.remote_port=9001\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n#   Disable opcahce temporarily\n#   RUN mkdir -p /usr/local/etc/php/conf.d/disabled && mv /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini /usr/local/etc/php/conf.d/disabled/docker-php-ext-opcache.ini\nRUN mkdir -p /root/.ssh\nCOPY ./utils/id_rsa /root/.ssh\nCOPY ./utils/id_rsa.pub /root/.ssh\nWORKDIR /var/www/symfony\n","originalDockerfileUglifiedHash":"8f99c6d9f4ece561d30d04624fe6222c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/57f6498a2057fa34907caa613190d57d73403882.dockerfile"}