{"seed":229798661,"processedDockerfileHash":"fa1bf084b7f0a7c5f988be2cb7647eb5","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"FROM php:7.2-zts-alpine\n#   build arguments\nARG BUILD_UID=1000\nARG BUILD_WITH_OPENSSH=0\nARG BUILD_WITH_XDEBUG=0\nARG XDEBUG_REMOTE_CONNECT_BACK=0\nARG XDEBUG_REMOTE_HOST=localhost\n#   install packages\nRUN apk update \\\n && apk add bash=5.2.15-r0 sudo=1.9.12_p2-r1 supervisor=4.2.4-r0 g++=12.2.1_git20220924-r4 make=4.3-r1 autoconf=2.71-r1 libxml2-dev=2.10.4-r0 icu-dev=72.1-r1 curl-dev=7.88.1-r1 pcre-dev=8.45-r2 tzdata=2023c-r0 --no-cache\n#   install php extensions\nRUN docker-php-ext-install curl\n#   install xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (curl -sSL https://github.com/xdebug/xdebug/archive/bb90b66.zip -o /tmp/xdebug.zip \\\n && unzip /tmp/xdebug.zip -d /tmp \\\n && cd /tmp/xdebug-* \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -rf /tmp/xdebug* )\n#   enable xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_autostart=off\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_connect_back=${XDEBUG_REMOTE_CONNECT_BACK}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_handler=dbgp\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=${XDEBUG_REMOTE_HOST}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)\n#   add composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n#   make the bash prompt pretty and add common aliases\nRUN mv /etc/profile.d/color_prompt /etc/profile.d/color_prompt.sh \\\n && echo -e \"alias l='ls -CF'\\nalias la='ls -A'\\nalias ll='ls -alF'\\nalias ls='ls --color=auto'\" >> /etc/profile.d/aliases.sh\n#   add the unprivileged \"app\" user and allow passwordless sudo\nRUN adduser -D -s /bin/bash -u $BUILD_UID alpine \\\n && addgroup alpine wheel \\\n && echo \"alpine:\" | chpasswd \\\n && echo -e \"%wheel ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/docker\n#   configure supervisord to run in the foreground\nRUN sed -E -i \"s/^(; ?)?nodaemon=false/nodaemon=true/\" /etc/supervisord.conf \\\n && sed -E -i \"s#^(; ?)?pidfile=.*#pidfile=/var/run/supervisord.pid#\" /etc/supervisord.conf\n#   add the app to supervisord\nRUN echo -e \"\\n[program:app]\\nautorestart=true\\ndirectory=/opt/project\\ncommand=/usr/local/bin/php laravel/artisan serve --host=0.0.0.0\\nstdout_logfile=/dev/stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/dev/stderr\\nstderr_logfile_maxbytes=0\\nuser=alpine\\n\" >> /etc/supervisord.conf\n#   configure openssh, while this isn't a usual use-case for docker, connecting via SSH significantly speeds\n#   up debugging in PhpStorm as its docker-compose support does not support reusing a container which has\n#   already been brought up\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (apk add openssh=9.1_p1-r2 --no-cache \\\n && ssh-keygen -A \\\n && echo -e \"\\n[program:sshd]\\ncommand=/usr/sbin/sshd -D\\n\" >> /etc/supervisord.conf)\n#   create the .ssh folder in the home directory and write the public key if specified to authorized_keys\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (mkdir /home/alpine/.ssh \\\n && chmod 700 /home/alpine/.ssh \\\n && touch /tmp/authorized_keys \\\n && chmod 600 /tmp/authorized_keys \\\n && ([ \"$APP_USER_PUBLIC_KEY\" == \"\" ] || echo $APP_USER_PUBLIC_KEY > /tmp/authorized_keys \\\n && mv /tmp/authorized_keys /home/alpine/.ssh/ ) \\\n && chown -R alpine:alpine /home/alpine/.ssh/ )\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nUSER alpine\nWORKDIR /home/alpine\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.2-zts-alpine\n#  build arguments\nARG BUILD_UID=1000\nARG BUILD_WITH_OPENSSH=0\nARG BUILD_WITH_XDEBUG=0\nARG XDEBUG_REMOTE_CONNECT_BACK=0\nARG XDEBUG_REMOTE_HOST=localhost\n#  install packages\nRUN apk update \\\n && apk add --no-cache bash sudo supervisor g++ make autoconf libxml2-dev icu-dev curl-dev pcre-dev tzdata\n#  install php extensions\nRUN docker-php-ext-install curl\n#  install xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (curl -sSL https://github.com/xdebug/xdebug/archive/bb90b66.zip -o /tmp/xdebug.zip \\\n && unzip /tmp/xdebug.zip -d /tmp \\\n && cd /tmp/xdebug-* \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -rf /tmp/xdebug* )\n#  enable xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_autostart=off\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_connect_back=${XDEBUG_REMOTE_CONNECT_BACK}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_handler=dbgp\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=${XDEBUG_REMOTE_HOST}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)\n#  add composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n#  make the bash prompt pretty and add common aliases\nRUN mv /etc/profile.d/color_prompt /etc/profile.d/color_prompt.sh \\\n && echo -e \"alias l='ls -CF'\\nalias la='ls -A'\\nalias ll='ls -alF'\\nalias ls='ls --color=auto'\" >> /etc/profile.d/aliases.sh\n#  add the unprivileged \"app\" user and allow passwordless sudo\nRUN adduser -D -s /bin/bash -u $BUILD_UID alpine \\\n && addgroup alpine wheel \\\n && echo \"alpine:\" | chpasswd \\\n && echo -e \"%wheel ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/docker\n#  configure supervisord to run in the foreground\nRUN sed -E -i \"s/^(; ?)?nodaemon=false/nodaemon=true/\" /etc/supervisord.conf \\\n && sed -E -i \"s#^(; ?)?pidfile=.*#pidfile=/var/run/supervisord.pid#\" /etc/supervisord.conf\n#  add the app to supervisord\nRUN echo -e \"\\n[program:app]\\nautorestart=true\\ndirectory=/opt/project\\ncommand=/usr/local/bin/php laravel/artisan serve --host=0.0.0.0\\nstdout_logfile=/dev/stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/dev/stderr\\nstderr_logfile_maxbytes=0\\nuser=alpine\\n\" >> /etc/supervisord.conf\n#  configure openssh, while this isn't a usual use-case for docker, connecting via SSH significantly speeds\n#  up debugging in PhpStorm as its docker-compose support does not support reusing a container which has\n#  already been brought up\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (apk add --no-cache openssh \\\n && ssh-keygen -A \\\n && echo -e \"\\n[program:sshd]\\ncommand=/usr/sbin/sshd -D\\n\" >> /etc/supervisord.conf)\n#  create the .ssh folder in the home directory and write the public key if specified to authorized_keys\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (mkdir /home/alpine/.ssh \\\n && chmod 700 /home/alpine/.ssh \\\n && touch /tmp/authorized_keys \\\n && chmod 600 /tmp/authorized_keys \\\n && ([ \"$APP_USER_PUBLIC_KEY\" == \"\" ] || echo $APP_USER_PUBLIC_KEY > /tmp/authorized_keys \\\n && mv /tmp/authorized_keys /home/alpine/.ssh/ ) \\\n && chown -R alpine:alpine /home/alpine/.ssh/ )\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nUSER alpine\nWORKDIR /home/alpine\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"23fc1791561e855c2984e04c0db27305","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.2-zts-alpine\n#   build arguments\nARG BUILD_UID=1000\nARG BUILD_WITH_OPENSSH=0\nARG BUILD_WITH_XDEBUG=0\nARG XDEBUG_REMOTE_CONNECT_BACK=0\nARG XDEBUG_REMOTE_HOST=localhost\n#   install packages\nRUN apk update \\\n && apk add --no-cache bash sudo supervisor g++ make autoconf libxml2-dev icu-dev curl-dev pcre-dev tzdata\n#   install php extensions\nRUN docker-php-ext-install curl\n#   install xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (curl -sSL https://github.com/xdebug/xdebug/archive/bb90b66.zip -o /tmp/xdebug.zip \\\n && unzip /tmp/xdebug.zip -d /tmp \\\n && cd /tmp/xdebug-* \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -rf /tmp/xdebug* )\n#   enable xdebug\nRUN [[ \"$BUILD_WITH_XDEBUG\" != \"1\" ]] || (docker-php-ext-enable xdebug \\\n && echo \"xdebug.remote_autostart=off\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_connect_back=${XDEBUG_REMOTE_CONNECT_BACK}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_handler=dbgp\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \\\n && echo \"xdebug.remote_host=${XDEBUG_REMOTE_HOST}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)\n#   add composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n#   make the bash prompt pretty and add common aliases\nRUN mv /etc/profile.d/color_prompt /etc/profile.d/color_prompt.sh \\\n && echo -e \"alias l='ls -CF'\\nalias la='ls -A'\\nalias ll='ls -alF'\\nalias ls='ls --color=auto'\" >> /etc/profile.d/aliases.sh\n#   add the unprivileged \"app\" user and allow passwordless sudo\nRUN adduser -D -s /bin/bash -u $BUILD_UID alpine \\\n && addgroup alpine wheel \\\n && echo \"alpine:\" | chpasswd \\\n && echo -e \"%wheel ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/docker\n#   configure supervisord to run in the foreground\nRUN sed -E -i \"s/^(; ?)?nodaemon=false/nodaemon=true/\" /etc/supervisord.conf \\\n && sed -E -i \"s#^(; ?)?pidfile=.*#pidfile=/var/run/supervisord.pid#\" /etc/supervisord.conf\n#   add the app to supervisord\nRUN echo -e \"\\n[program:app]\\nautorestart=true\\ndirectory=/opt/project\\ncommand=/usr/local/bin/php laravel/artisan serve --host=0.0.0.0\\nstdout_logfile=/dev/stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/dev/stderr\\nstderr_logfile_maxbytes=0\\nuser=alpine\\n\" >> /etc/supervisord.conf\n#   configure openssh, while this isn't a usual use-case for docker, connecting via SSH significantly speeds\n#   up debugging in PhpStorm as its docker-compose support does not support reusing a container which has\n#   already been brought up\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (apk add --no-cache openssh \\\n && ssh-keygen -A \\\n && echo -e \"\\n[program:sshd]\\ncommand=/usr/sbin/sshd -D\\n\" >> /etc/supervisord.conf)\n#   create the .ssh folder in the home directory and write the public key if specified to authorized_keys\nRUN [[ \"$BUILD_WITH_OPENSSH\" != \"1\" ]] || (mkdir /home/alpine/.ssh \\\n && chmod 700 /home/alpine/.ssh \\\n && touch /tmp/authorized_keys \\\n && chmod 600 /tmp/authorized_keys \\\n && ([ \"$APP_USER_PUBLIC_KEY\" == \"\" ] || echo $APP_USER_PUBLIC_KEY > /tmp/authorized_keys \\\n && mv /tmp/authorized_keys /home/alpine/.ssh/ ) \\\n && chown -R alpine:alpine /home/alpine/.ssh/ )\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nUSER alpine\nWORKDIR /home/alpine\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"7a6d0370e3f2abd2983d8be03db43a4e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8ba60790d1d3b1015510413ecbe3eabeb2d3e438.dockerfile"}