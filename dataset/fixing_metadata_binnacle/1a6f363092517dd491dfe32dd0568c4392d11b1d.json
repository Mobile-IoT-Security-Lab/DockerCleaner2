{"seed":138499563,"processedDockerfileHash":"a46fb109cb278c386a9c1c7cadc87a4e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nRUN apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=12.1ubuntu2 libopenblas-dev=0.2.18-1ubuntu1 wget=1.17.1-1ubuntu1.5 git=1:2.7.4-0ubuntu1.10 automake=1:1.15-4ubuntu1 cmake=3.5.1-1ubuntu3 pkg-config=0.29.1-0ubuntu1 python3-numpy=1:1.11.0-1ubuntu1 python3-wheel=0.29.0-1 unzip=6.0-20ubuntu1.1 curl=7.47.0-1ubuntu2.19 sudo=1.8.16-0ubuntu1.10 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.5 libpng12-dev=1.2.54-1ubuntu1.1 libzmq3-dev=4.1.4-7ubuntu0.1 rsync=3.1.1-3ubuntu1.3 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 -y )\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y install gcc g++ gfortran wget cpio \\\n && cd /tmp \\\n && wget -q http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/12070/l_mkl_2018.0.128.tgz \\\n && tar -xzf l_mkl_2018.0.128.tgz \\\n && cd l_mkl_2018.0.128 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg \\\n && sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg \\\n && ./install.sh -s silent.cfg \\\n && cd .. \\\n && rm -rf * \\\n && rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2018.0.128/licensing \\\n && echo \"/opt/intel/mkl/lib/intel64\" >> /etc/ld.so.conf.d/intel.conf \\\n && ldconfig \\\n && echo \"source /opt/intel/mkl/bin/mklvars.sh intel64\" >> /etc/bash.bashrc\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh \\\n && /bin/bash Miniconda3-4.3.21-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-4.3.21-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==4.3.21 \\\n && $CONDA_DIR/bin/conda config --system --add channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && conda clean -tipsy\nRUN pip install setuptools==67.6.1\nRUN pip install cython==0.29.34 pillow==9.5.0 scipy==1.10.1 matplotlib==3.7.1 pandas==2.0.0 h5py==3.8.0 tqdm==4.65.0\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.0\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_BUILD_ENABLE_XLA=\"1\"\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --copt=-march=native --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --config=mkl --copt=\"-DEIGEN_USE_VML\" tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install setuptools==67.6.1 --upgrade -I \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential libopenblas-dev wget git automake cmake pkg-config python3-numpy python3-wheel unzip curl sudo -y\nRUN apt-get install libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev rsync zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless -y\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y install gcc g++ gfortran wget cpio \\\n && cd /tmp \\\n && wget -q http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/12070/l_mkl_2018.0.128.tgz \\\n && tar -xzf l_mkl_2018.0.128.tgz \\\n && cd l_mkl_2018.0.128 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg \\\n && sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg \\\n && ./install.sh -s silent.cfg \\\n && cd .. \\\n && rm -rf * \\\n && rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2018.0.128/licensing \\\n && echo \"/opt/intel/mkl/lib/intel64\" >> /etc/ld.so.conf.d/intel.conf \\\n && ldconfig \\\n && echo \"source /opt/intel/mkl/bin/mklvars.sh intel64\" >> /etc/bash.bashrc\n#  Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh \\\n && /bin/bash Miniconda3-4.3.21-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-4.3.21-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==4.3.21 \\\n && $CONDA_DIR/bin/conda config --system --add channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && conda clean -tipsy\nRUN pip install setuptools\nRUN pip install cython pillow scipy matplotlib pandas h5py tqdm\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.0\nWORKDIR /tensorflow\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_BUILD_ENABLE_XLA=\"1\"\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --copt=-march=native --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --config=mkl --copt=\"-DEIGEN_USE_VML\" tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install setuptools --upgrade -I \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n","injectedSmells":[],"originalDockerfileHash":"2d9f0e701c17a40a951d891e084155eb","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential libopenblas-dev wget git automake cmake pkg-config python3-numpy python3-wheel unzip curl sudo -y\nRUN apt-get install libcurl3-dev libfreetype6-dev libpng12-dev libzmq3-dev rsync zip zlib1g-dev openjdk-8-jdk openjdk-8-jre-headless -y\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get -y install gcc g++ gfortran wget cpio \\\n && cd /tmp \\\n && wget -q http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/12070/l_mkl_2018.0.128.tgz \\\n && tar -xzf l_mkl_2018.0.128.tgz \\\n && cd l_mkl_2018.0.128 \\\n && sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg \\\n && sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg \\\n && sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg \\\n && ./install.sh -s silent.cfg \\\n && cd .. \\\n && rm -rf * \\\n && rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2018.0.128/licensing \\\n && echo \"/opt/intel/mkl/lib/intel64\" >> /etc/ld.so.conf.d/intel.conf \\\n && ldconfig \\\n && echo \"source /opt/intel/mkl/bin/mklvars.sh intel64\" >> /etc/bash.bashrc\n#   Configure environment\nENV CONDA_DIR=\"/opt/conda\"\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\nRUN cd /tmp \\\n && mkdir -p $CONDA_DIR \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.3.21-Linux-x86_64.sh \\\n && /bin/bash Miniconda3-4.3.21-Linux-x86_64.sh -f -b -p $CONDA_DIR \\\n && rm Miniconda3-4.3.21-Linux-x86_64.sh \\\n && $CONDA_DIR/bin/conda install --quiet --yes conda==4.3.21 \\\n && $CONDA_DIR/bin/conda config --system --add channels conda-forge \\\n && $CONDA_DIR/bin/conda config --system --set auto_update_conda false \\\n && conda clean -tipsy\nRUN pip install setuptools\nRUN pip install cython pillow scipy matplotlib pandas h5py tqdm\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.4.5\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nWORKDIR /\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.0\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV TF_NEED_CUDA=\"0\"\nENV TF_BUILD_ENABLE_XLA=\"1\"\nRUN tensorflow/tools/ci_build/builds/configured CPU bazel build -c opt --copt=-march=native --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --config=mkl --copt=\"-DEIGEN_USE_VML\" tensorflow/tools/pip_package:build_pip_package\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install setuptools --upgrade -I \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n","originalDockerfileUglifiedHash":"441c3f0f3fadd77d84cd1fdfeb4eecbc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1a6f363092517dd491dfe32dd0568c4392d11b1d.dockerfile"}