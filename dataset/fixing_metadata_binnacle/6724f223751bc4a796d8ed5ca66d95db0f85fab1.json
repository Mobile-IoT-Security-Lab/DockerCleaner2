{"seed":932753588,"processedDockerfileHash":"d2395687013c02315279b5c730933c60","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-user"],"processedDockerfile":"FROM umputun/baseimage:buildgo-latest AS build-backend\nARG COVERALLS_TOKEN\nARG CI\nARG TRAVIS\nARG TRAVIS_BRANCH\nARG TRAVIS_COMMIT\nARG TRAVIS_JOB_ID\nARG TRAVIS_JOB_NUMBER\nARG TRAVIS_OS_NAME\nARG TRAVIS_PULL_REQUEST\nARG TRAVIS_PULL_REQUEST_SHA\nARG TRAVIS_REPO_SLUG\nARG TRAVIS_TAG\nARG DRONE\nARG DRONE_TAG\nARG DRONE_COMMIT\nARG DRONE_BRANCH\nARG DRONE_PULL_REQUEST\nARG SKIP_BACKEND_TEST\nARG MONGO_TEST\nCOPY backend /build/backend\nCOPY .git /build/.git\nWORKDIR /build/backend\nENV GOFLAGS=\"-mod=vendor\"\n#   run tests\nRUN if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && cd app \\\n && if [ -z \"$SKIP_BACKEND_TEST\" ] ; then go test -covermode=count -coverprofile=/profile.cov_tmp ./... \\\n && cat /profile.cov_tmp | grep -v \"_mock.go\" > /profile.cov; else echo \"skip backend test\" ; fi\nRUN echo \"mongo=${MONGO_TEST}\" >> /etc/hosts\n#   linters\nRUN if [ -z \"$SKIP_BACKEND_TEST\" ] ; then if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && golangci-lint run --out-format=tab --disable-all --tests=false --enable=unconvert --enable=megacheck --enable=structcheck --enable=gas --enable=gocyclo --enable=dupl --enable=misspell --enable=unparam --enable=varcheck --enable=deadcode --enable=typecheck --enable=ineffassign --enable=varcheck ./... ; else echo \"skip backend linters\" ; fi\n#   submit coverage to coverals if COVERALLS_TOKEN in env\nRUN if [ -z \"$COVERALLS_TOKEN\" ] ; then echo \"coverall not enabled\" ; else goveralls -coverprofile=/profile.cov -service=travis-ci -repotoken $COVERALLS_TOKEN || echo \"coverall failed!\" ; fi\n#   if DRONE presented use DRONE_* git env to make version\nRUN if [ -z \"$DRONE\" ] ; then echo \"runs outside of drone\" \\\n && version=\"local\" ; else version=${DRONE_TAG}${DRONE_BRANCH}${DRONE_PULL_REQUEST}-${DRONE_COMMIT:0:7}-$( date +%Y%m%d-%H:%M:%S ;) ; fi \\\n && echo \"version=$version\" \\\n && go build -o remark42 -ldflags \"-X main.revision=${version} -s -w\" ./app\nFROM node:10.11-alpine AS build-frontend-deps\nARG CI\nENV HUSKY_SKIP_INSTALL=\"true\"\nRUN apk add git --no-cache --update\nCOPY frontend/package.json /srv/frontend/package.json\nCOPY frontend/package-lock.json /srv/frontend/package-lock.json\nRUN cd /srv/frontend \\\n && CI=true npm ci\nFROM node:10.11-alpine AS build-frontend\nARG CI\nARG SKIP_FRONTEND_TEST\nARG NODE_ENV=production\nCOPY --from=build-frontend-deps /srv/frontend/node_modules /srv/frontend/node_modules\nCOPY frontend /srv/frontend\nRUN cd /srv/frontend \\\n && if [ -z \"$SKIP_FRONTEND_TEST\" ] ; then npx run-p lint test build ; else echo \"skip frontend tests and lint\" ;npm run build ; fi \\\n && rm -rf ./node_modules\nFROM umputun/baseimage:app-latest\nWORKDIR /srv\nCOPY entrypoint.sh /entrypoint.sh\nCOPY backend/scripts/backup.sh /usr/local/bin/backup\nCOPY backend/scripts/restore.sh /usr/local/bin/restore\nCOPY backend/scripts/import.sh /usr/local/bin/import\nRUN chmod +x /entrypoint.sh /usr/local/bin/backup /usr/local/bin/restore /usr/local/bin/import\nCOPY --from=build-backend /build/backend/remark42 /srv/remark42\nCOPY --from=build-frontend /srv/frontend/public/ /srv/web\nRUN chown -R app:app /srv\nRUN ln -s /srv/remark42 /usr/bin/remark42\nEXPOSE 8080/tcp\nHEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost:8080/ping || exit 1\nCMD [\"server\"]\nENTRYPOINT [\"/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n","originalDockerfile":"FROM umputun/baseimage:buildgo-latest AS build-backend\nARG COVERALLS_TOKEN\nARG CI\nARG TRAVIS\nARG TRAVIS_BRANCH\nARG TRAVIS_COMMIT\nARG TRAVIS_JOB_ID\nARG TRAVIS_JOB_NUMBER\nARG TRAVIS_OS_NAME\nARG TRAVIS_PULL_REQUEST\nARG TRAVIS_PULL_REQUEST_SHA\nARG TRAVIS_REPO_SLUG\nARG TRAVIS_TAG\nARG DRONE\nARG DRONE_TAG\nARG DRONE_COMMIT\nARG DRONE_BRANCH\nARG DRONE_PULL_REQUEST\nARG SKIP_BACKEND_TEST\nARG MONGO_TEST\nADD backend /build/backend\nADD .git /build/.git\nWORKDIR /build/backend\nENV GOFLAGS=\"-mod=vendor\"\n#  run tests\nRUN if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && cd app \\\n && if [ -z \"$SKIP_BACKEND_TEST\" ] ; then go test -covermode=count -coverprofile=/profile.cov_tmp ./... \\\n && cat /profile.cov_tmp | grep -v \"_mock.go\" > /profile.cov; else echo \"skip backend test\" ; fi\nRUN echo \"mongo=${MONGO_TEST}\" >> /etc/hosts\n#  linters\nRUN if [ -z \"$SKIP_BACKEND_TEST\" ] ; then if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && golangci-lint run --out-format=tab --disable-all --tests=false --enable=unconvert --enable=megacheck --enable=structcheck --enable=gas --enable=gocyclo --enable=dupl --enable=misspell --enable=unparam --enable=varcheck --enable=deadcode --enable=typecheck --enable=ineffassign --enable=varcheck ./... ; else echo \"skip backend linters\" ; fi\n#  submit coverage to coverals if COVERALLS_TOKEN in env\nRUN if [ -z \"$COVERALLS_TOKEN\" ] ; then echo \"coverall not enabled\" ; else goveralls -coverprofile=/profile.cov -service=travis-ci -repotoken $COVERALLS_TOKEN || echo \"coverall failed!\" ; fi\n#  if DRONE presented use DRONE_* git env to make version\nRUN if [ -z \"$DRONE\" ] ; then echo \"runs outside of drone\" \\\n && version=\"local\" ; else version=${DRONE_TAG}${DRONE_BRANCH}${DRONE_PULL_REQUEST}-${DRONE_COMMIT:0:7}-$( date +%Y%m%d-%H:%M:%S ;) ; fi \\\n && echo \"version=$version\" \\\n && go build -o remark42 -ldflags \"-X main.revision=${version} -s -w\" ./app\nFROM node:10.11-alpine AS build-frontend-deps\nARG CI\nENV HUSKY_SKIP_INSTALL=\"true\"\nRUN apk add --no-cache --update git\nADD frontend/package.json /srv/frontend/package.json\nADD frontend/package-lock.json /srv/frontend/package-lock.json\nRUN cd /srv/frontend \\\n && CI=true npm ci\nFROM node:10.11-alpine AS build-frontend\nARG CI\nARG SKIP_FRONTEND_TEST\nARG NODE_ENV=production\nCOPY --from=build-frontend-deps /srv/frontend/node_modules /srv/frontend/node_modules\nADD frontend /srv/frontend\nRUN cd /srv/frontend \\\n && if [ -z \"$SKIP_FRONTEND_TEST\" ] ; then npx run-p lint test build ; else echo \"skip frontend tests and lint\" ;npm run build ; fi \\\n && rm -rf ./node_modules\nFROM umputun/baseimage:app-latest\nWORKDIR /srv\nADD entrypoint.sh /entrypoint.sh\nADD backend/scripts/backup.sh /usr/local/bin/backup\nADD backend/scripts/restore.sh /usr/local/bin/restore\nADD backend/scripts/import.sh /usr/local/bin/import\nRUN chmod +x /entrypoint.sh /usr/local/bin/backup /usr/local/bin/restore /usr/local/bin/import\nCOPY --from=build-backend /build/backend/remark42 /srv/remark42\nCOPY --from=build-frontend /srv/frontend/public/ /srv/web\nRUN chown -R app:app /srv\nRUN ln -s /srv/remark42 /usr/bin/remark42\nEXPOSE 8080/tcp\nHEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost:8080/ping || exit 1\nCMD [\"server\"]\nENTRYPOINT [\"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"38690a9f54dfb5154e9f5e753798b0b4","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM umputun/baseimage:buildgo-latest AS build-backend\nARG COVERALLS_TOKEN\nARG CI\nARG TRAVIS\nARG TRAVIS_BRANCH\nARG TRAVIS_COMMIT\nARG TRAVIS_JOB_ID\nARG TRAVIS_JOB_NUMBER\nARG TRAVIS_OS_NAME\nARG TRAVIS_PULL_REQUEST\nARG TRAVIS_PULL_REQUEST_SHA\nARG TRAVIS_REPO_SLUG\nARG TRAVIS_TAG\nARG DRONE\nARG DRONE_TAG\nARG DRONE_COMMIT\nARG DRONE_BRANCH\nARG DRONE_PULL_REQUEST\nARG SKIP_BACKEND_TEST\nARG MONGO_TEST\nADD backend /build/backend\nADD .git /build/.git\nWORKDIR /build/backend\nENV GOFLAGS=\"-mod=vendor\"\n#   run tests\nRUN if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && cd app \\\n && if [ -z \"$SKIP_BACKEND_TEST\" ] ; then go test -covermode=count -coverprofile=/profile.cov_tmp ./... \\\n && cat /profile.cov_tmp | grep -v \"_mock.go\" > /profile.cov; else echo \"skip backend test\" ; fi\nRUN echo \"mongo=${MONGO_TEST}\" >> /etc/hosts\n#   linters\nRUN if [ -z \"$SKIP_BACKEND_TEST\" ] ; then if [ -f .mongo ] ; then export MONGO_TEST=$( cat .mongo ;) ; fi \\\n && golangci-lint run --out-format=tab --disable-all --tests=false --enable=unconvert --enable=megacheck --enable=structcheck --enable=gas --enable=gocyclo --enable=dupl --enable=misspell --enable=unparam --enable=varcheck --enable=deadcode --enable=typecheck --enable=ineffassign --enable=varcheck ./... ; else echo \"skip backend linters\" ; fi\n#   submit coverage to coverals if COVERALLS_TOKEN in env\nRUN if [ -z \"$COVERALLS_TOKEN\" ] ; then echo \"coverall not enabled\" ; else goveralls -coverprofile=/profile.cov -service=travis-ci -repotoken $COVERALLS_TOKEN || echo \"coverall failed!\" ; fi\n#   if DRONE presented use DRONE_* git env to make version\nRUN if [ -z \"$DRONE\" ] ; then echo \"runs outside of drone\" \\\n && version=\"local\" ; else version=${DRONE_TAG}${DRONE_BRANCH}${DRONE_PULL_REQUEST}-${DRONE_COMMIT:0:7}-$( date +%Y%m%d-%H:%M:%S ;) ; fi \\\n && echo \"version=$version\" \\\n && go build -o remark42 -ldflags \"-X main.revision=${version} -s -w\" ./app\nFROM node:10.11-alpine AS build-frontend-deps\nARG CI\nENV HUSKY_SKIP_INSTALL=\"true\"\nRUN apk add --no-cache --update git\nADD frontend/package.json /srv/frontend/package.json\nADD frontend/package-lock.json /srv/frontend/package-lock.json\nRUN cd /srv/frontend \\\n && CI=true npm ci\nFROM node:10.11-alpine AS build-frontend\nARG CI\nARG SKIP_FRONTEND_TEST\nARG NODE_ENV=production\nCOPY --from=build-frontend-deps /srv/frontend/node_modules /srv/frontend/node_modules\nADD frontend /srv/frontend\nRUN cd /srv/frontend \\\n && if [ -z \"$SKIP_FRONTEND_TEST\" ] ; then npx run-p lint test build ; else echo \"skip frontend tests and lint\" ;npm run build ; fi \\\n && rm -rf ./node_modules\nFROM umputun/baseimage:app-latest\nWORKDIR /srv\nADD entrypoint.sh /entrypoint.sh\nADD backend/scripts/backup.sh /usr/local/bin/backup\nADD backend/scripts/restore.sh /usr/local/bin/restore\nADD backend/scripts/import.sh /usr/local/bin/import\nRUN chmod +x /entrypoint.sh /usr/local/bin/backup /usr/local/bin/restore /usr/local/bin/import\nCOPY --from=build-backend /build/backend/remark42 /srv/remark42\nCOPY --from=build-frontend /srv/frontend/public/ /srv/web\nRUN chown -R app:app /srv\nRUN ln -s /srv/remark42 /usr/bin/remark42\nEXPOSE 8080/tcp\nHEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost:8080/ping || exit 1\nCMD [\"server\"]\nENTRYPOINT [\"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"e48900c447069f878e3e2034ccc25a48","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6724f223751bc4a796d8ed5ca66d95db0f85fab1.dockerfile"}