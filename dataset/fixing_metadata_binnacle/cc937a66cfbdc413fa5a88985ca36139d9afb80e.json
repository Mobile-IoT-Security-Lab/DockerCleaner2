{"seed":607322366,"processedDockerfileHash":"b4b639ae2f73e9f88ab22cc656c71141","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:16.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 python-software-properties=0.96.20.10 -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant=1.9.6-1ubuntu1.1 ant-contrib=1.0~b3+svn177-7 autoconf=2.69-9 build-essential=12.1ubuntu2 ca-certificates=20210119~16.04.1 cmake=3.5.1-1ubuntu3 cpio=2.11+dfsg-5ubuntu1.1 curl=7.47.0-1ubuntu2.19 libexpat1-dev=2.1.0-7ubuntu0.16.04.5 file=1:5.25-2ubuntu1.4 g++-7 gcc-7 gdb=7.11.1-0ubuntu1~16.5 git=1:2.7.4-0ubuntu1.10 git-core=1:2.7.4-0ubuntu1.10 libasound2-dev=1.1.0-0ubuntu1 libcups2-dev=2.1.3-4ubuntu0.11 libdwarf-dev=20120410-2+deb7u2build0.16.04.1 libelf-dev=0.165-3ubuntu1.2 libfontconfig libfontconfig1-dev=2.11.94-0ubuntu1.1 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libnuma-dev=2.0.11-1ubuntu1.1 libx11-dev=2:1.6.3-1ubuntu2.2 libxext-dev=2:1.3.3-1 libxrender-dev=1:0.9.9-0ubuntu1 libxt-dev=1:1.1.5-0ubuntu1 libxtst-dev=2:1.2.2-1 make=4.1-6 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openssh-client=1:7.2p2-4ubuntu2.10 openssh-server=1:7.2p2-4ubuntu2.10 perl=5.22.1-9ubuntu0.9 pkg-config=0.29.1-0ubuntu1 realpath=8.25-2ubuntu3~16.04 ssh=1:7.2p2-4ubuntu2.10 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 xvfb=2:1.18.4-0ubuntu0.12 zip=3.0-11 `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Install OpenSSL v1.1.1b\n#   Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#   Install Protobuf v3.5.1\n#   Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#   Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#   Expose SSH port and run SSH\nEXPOSE 22/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#  This program and the accompanying materials are made available under\n#  the terms of the Eclipse Public License 2.0 which accompanies this\n#  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#  or the Apache License, Version 2.0 which accompanies this distribution and\n#  is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#  This Source Code may also be made available under the following\n#  Secondary Licenses when the conditions for such availability set\n#  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#  General Public License, version 2 with the GNU Classpath\n#  Exception [1] and GNU General Public License, version 2 with the\n#  OpenJDK Assembly Exception [2].\n#\n#  [1] https://www.gnu.org/software/classpath/license.html\n#  [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#  To use this docker file:\n#  First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#  Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#  This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#  Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#  Then run:\n#    docker build -t openj9 -f Dockerfile .\n#    docker run -it openj9\nFROM ubuntu:16.04\n#  Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common python-software-properties -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential ca-certificates cmake cpio curl libexpat1-dev file g++-7 gcc-7 gdb git git-core libasound2-dev libcups2-dev libdwarf-dev libelf-dev libfontconfig libfontconfig1-dev libfreetype6-dev libnuma-dev libx11-dev libxext-dev libxrender-dev libxt-dev libxtst-dev make openjdk-8-jdk openssh-client openssh-server perl pkg-config realpath ssh unzip wget xvfb zip `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#  Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#  Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#  SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#  Install OpenSSL v1.1.1b\n#  Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#  Install Protobuf v3.5.1\n#  Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#  Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#  Expose SSH port and run SSH\nEXPOSE 22/tcp\n","injectedSmells":[],"originalDockerfileHash":"72444b2aad7d990448a56734243300fe","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:16.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common python-software-properties -qq -y \\\n && add-apt-repository ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential ca-certificates cmake cpio curl libexpat1-dev file g++-7 gcc-7 gdb git git-core libasound2-dev libcups2-dev libdwarf-dev libelf-dev libfontconfig libfontconfig1-dev libfreetype6-dev libnuma-dev libx11-dev libxext-dev libxrender-dev libxt-dev libxtst-dev make openjdk-8-jdk openssh-client openssh-server perl pkg-config realpath ssh unzip wget xvfb zip `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install Docker module to run test framework\nRUN echo yes | cpan install JSON Text::CSV XML::Parser\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Install OpenSSL v1.1.1b\n#   Required for JITaaS & Crypto functional testing\nRUN cd /tmp \\\n && wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1b.tar.gz \\\n && tar -xzf OpenSSL_1_1_1b.tar.gz \\\n && rm -f OpenSSL_1_1_1b.tar.gz \\\n && cd /tmp/openssl-OpenSSL_1_1_1b \\\n && ./config --prefix=/usr/local/openssl-1.1.1b --openssldir=/usr/local/openssl-1.1.1b \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf openssl-OpenSSL_1_1_1b \\\n && echo \"/usr/local/openssl-1.1.1b/lib\" > /etc/ld.so.conf.d/openssl-1.1.1b.conf \\\n && echo \"PATH=/usr/local/openssl-1.1.1b/bin:$PATH\" > /etc/environment\n#   Install Protobuf v3.5.1\n#   Required for JITaaS\nRUN cd /tmp \\\n && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \\\n && tar -xzf protobuf-cpp-3.5.1.tar.gz \\\n && rm -f protobuf-cpp-3.5.1.tar.gz \\\n && cd /tmp/protobuf-3.5.1 \\\n && ./configure \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf protobuf-3.5.1\n#   Run ldconfig to create necessary links and cache to shared libraries\nRUN echo \"/usr/local/lib\" > /etc/ld.so.conf.d/usr-local.conf \\\n && echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/usr-local.conf \\\n && ldconfig\n#   Expose SSH port and run SSH\nEXPOSE 22/tcp\n","originalDockerfileUglifiedHash":"b34029b6d305b47ef35edc1ce53ca835","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cc937a66cfbdc413fa5a88985ca36139d9afb80e.dockerfile"}