{"seed":3965516539,"processedDockerfileHash":"6398cedc9f479b97b0c315388bec4b1c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   sample docker file for tensorflow-gpu inference, training tensorflow models\n#\n#   but first:\n#\n#   ================================ install docker ================================\n#   > sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n#   > # on 14.04:\n#   > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" > /etc/apt/sources.list.d/docker.list\n#   > # on 16.04:\n#   > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" > /etc/apt/sources.list.d/docker.list\n#   > sudo apt-get update\n#   > apt-cache policy docker-engine\n#   > sudo apt-get install linux-image-extra-$(uname -r)\n#   > sudo apt-get install docker-engine\n#   > # if the command above fails:\n#   > sudo apt-get install docker-ce\n#   > sudo groupadd docker\n#   > sudo usermod -a -G docker <user who will use docker>\n#   > sudo service docker start\n#\n#   ================================ configure network, if required ================================\n#   > # add or edit \"bip\" value in your /etc/docker/daemon.json, so that it looks as something like:\n#   > cat /etc/docker/daemon.json\n#   {\n#       \"bip\": \"192.168.2.1/24\",\n#       \"runtimes\": {\n#           \"nvidia\": {\n#               \"path\": \"/usr/bin/nvidia-container-runtime\",\n#               \"runtimeArgs\": []\n#           }\n#       }\n#   }\n#\n#   > # restart docker service\n#   > sudo systemctl restart docker.service\n#\n#   ================================ install nvidia docker ================================\n#   > # if you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers\n#   > docker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f\n#   > sudo apt-get purge -y nvidia-docker\n#   \n#   > # add the package repositories\n#   > curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n#   > distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n#   > curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n#   > sudo apt-get update\n#    \n#   > # install nvidia-docker2\n#   > sudo apt-get install -y nvidia-docker2\n#    \n#   > # stop docker\n#   > sudo service docker stop\n#   > # ...or more radically\n#   > sudo pkill -SIGHUP dockerd\n#   > # start docker and reload the Docker daemon configuration\n#   > sudo service docker start\n#    \n#   test nvidia-smi with the latest official CUDA image\n#   > docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi\nFROM tensorflow/tensorflow:latest-gpu\n#   =================== installing tensorflow-gpu sufficient for inference ===================\nRUN apt-get update \\\n && apt-get install --no-install-recommends git python-pip python-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install setuptools==67.6.1 pip==23.1 --upgrade\nRUN pip install numpy==1.24.2 tensorflow-gpu==2.12.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates build-essential git python python-pip python-setuptools python-tk -y\n#   tf-nightly-gpu breaks tensorflow import; do we need it at all? it seems that it is needed only for tensorflow nightly builds\n#  RUN pip install tf-nightly-gpu\n#   =================== installing pretrained models and training dependencies ===================\n#   currently seem to work at tag 7367d494135368a7790df6172206a58a2a2f3d40\n#   rm -rf .git: since git history is not required in this container, remove it to reduce the container image size\nRUN git clone https://github.com/tensorflow/models.git /root/src/tensorflow_models \\\n && cd /root/src/tensorflow_models \\\n && rm -rf .git\n#      && git reset --hard 0f5803bdfced0cae02300e355e9415e96bb3383c \\\n#      && rm -rf .git\nRUN mkdir -p /root/.local/lib/python2.7/site-packages \\\n && (echo /root/src/tensorflow_models/research/ ;echo /root/src/tensorflow_models/research/slim ) > /root/.local/lib/python2.7/site-packages/tensorflow_models.pth\n#   install protobuf compiler 3.3.0 by hand, until available in apt-get (currently apt-get install 2.6.x)\n#  RUN   apt-get install protobuf-compiler\nRUN curl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip \\\n && unzip protoc-3.3.0-linux-x86_64.zip -d protoc3 \\\n && mv protoc3/bin/* /usr/local/bin/ \\\n && mv protoc3/include/* /usr/local/include/ \\\n && cd /root/src/tensorflow_models/research \\\n && protoc object_detection/protos/*.proto --python_out=. \\\n && pip install . --user\n#   =================== 'installing' snark tensorflow utilities for convenience ===================\n#   quick and dirty: for convenience, just copy tensor-cat and tensor-calc rather than properly installing comma and snark\nRUN mkdir -p /root/src \\\n && cd /root/src \\\n && git clone https://github.com/acfr/comma.git \\\n && echo /root/src/comma/python > /root/.local/lib/python2.7/site-packages/comma.pth \\\n && git clone https://github.com/acfr/snark.git \\\n && cp /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-cat /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-calc /usr/local/bin\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  sample docker file for tensorflow-gpu inference, training tensorflow models\n#\n#  but first:\n#\n#  ================================ install docker ================================\n#  > sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n#  > # on 14.04:\n#  > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" > /etc/apt/sources.list.d/docker.list\n#  > # on 16.04:\n#  > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" > /etc/apt/sources.list.d/docker.list\n#  > sudo apt-get update\n#  > apt-cache policy docker-engine\n#  > sudo apt-get install linux-image-extra-$(uname -r)\n#  > sudo apt-get install docker-engine\n#  > # if the command above fails:\n#  > sudo apt-get install docker-ce\n#  > sudo groupadd docker\n#  > sudo usermod -a -G docker <user who will use docker>\n#  > sudo service docker start\n#\n#  ================================ configure network, if required ================================\n#  > # add or edit \"bip\" value in your /etc/docker/daemon.json, so that it looks as something like:\n#  > cat /etc/docker/daemon.json\n#  {\n#      \"bip\": \"192.168.2.1/24\",\n#      \"runtimes\": {\n#          \"nvidia\": {\n#              \"path\": \"/usr/bin/nvidia-container-runtime\",\n#              \"runtimeArgs\": []\n#          }\n#      }\n#  }\n#\n#  > # restart docker service\n#  > sudo systemctl restart docker.service\n#\n#  ================================ install nvidia docker ================================\n#  > # if you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers\n#  > docker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f\n#  > sudo apt-get purge -y nvidia-docker\n#  \n#  > # add the package repositories\n#  > curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n#  > distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n#  > curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n#  > sudo apt-get update\n#   \n#  > # install nvidia-docker2\n#  > sudo apt-get install -y nvidia-docker2\n#   \n#  > # stop docker\n#  > sudo service docker stop\n#  > # ...or more radically\n#  > sudo pkill -SIGHUP dockerd\n#  > # start docker and reload the Docker daemon configuration\n#  > sudo service docker start\n#   \n#  test nvidia-smi with the latest official CUDA image\n#  > docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi\nFROM tensorflow/tensorflow:latest-gpu\n#  =================== installing tensorflow-gpu sufficient for inference ===================\nRUN apt-get update \\\n && apt-get install --no-install-recommends git python-pip python-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install setuptools pip --upgrade\nRUN pip install numpy tensorflow-gpu --no-cache-dir \\\n && python -m ipykernel.kernelspec\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates build-essential git python python-pip python-setuptools python-tk -y\n#  tf-nightly-gpu breaks tensorflow import; do we need it at all? it seems that it is needed only for tensorflow nightly builds\n# RUN pip install tf-nightly-gpu\n#  =================== installing pretrained models and training dependencies ===================\n#  currently seem to work at tag 7367d494135368a7790df6172206a58a2a2f3d40\n#  rm -rf .git: since git history is not required in this container, remove it to reduce the container image size\nRUN git clone https://github.com/tensorflow/models.git /root/src/tensorflow_models \\\n && cd /root/src/tensorflow_models \\\n && rm -rf .git\n#     && git reset --hard 0f5803bdfced0cae02300e355e9415e96bb3383c \\\n#     && rm -rf .git\nRUN mkdir -p /root/.local/lib/python2.7/site-packages \\\n && (echo /root/src/tensorflow_models/research/ ;echo /root/src/tensorflow_models/research/slim ) > /root/.local/lib/python2.7/site-packages/tensorflow_models.pth\n#  install protobuf compiler 3.3.0 by hand, until available in apt-get (currently apt-get install 2.6.x)\n# RUN   apt-get install protobuf-compiler\nRUN curl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip \\\n && unzip protoc-3.3.0-linux-x86_64.zip -d protoc3 \\\n && mv protoc3/bin/* /usr/local/bin/ \\\n && mv protoc3/include/* /usr/local/include/ \\\n && cd /root/src/tensorflow_models/research \\\n && protoc object_detection/protos/*.proto --python_out=. \\\n && pip install . --user\n#  =================== 'installing' snark tensorflow utilities for convenience ===================\n#  quick and dirty: for convenience, just copy tensor-cat and tensor-calc rather than properly installing comma and snark\nRUN mkdir -p /root/src \\\n && cd /root/src \\\n && git clone https://github.com/acfr/comma.git \\\n && echo /root/src/comma/python > /root/.local/lib/python2.7/site-packages/comma.pth \\\n && git clone https://github.com/acfr/snark.git \\\n && cp /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-cat /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-calc /usr/local/bin\n","injectedSmells":[],"originalDockerfileHash":"12e30f1817c4766f756a7e7cec5cfafb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   sample docker file for tensorflow-gpu inference, training tensorflow models\n#\n#   but first:\n#\n#   ================================ install docker ================================\n#   > sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n#   > # on 14.04:\n#   > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" > /etc/apt/sources.list.d/docker.list\n#   > # on 16.04:\n#   > sudo echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" > /etc/apt/sources.list.d/docker.list\n#   > sudo apt-get update\n#   > apt-cache policy docker-engine\n#   > sudo apt-get install linux-image-extra-$(uname -r)\n#   > sudo apt-get install docker-engine\n#   > # if the command above fails:\n#   > sudo apt-get install docker-ce\n#   > sudo groupadd docker\n#   > sudo usermod -a -G docker <user who will use docker>\n#   > sudo service docker start\n#\n#   ================================ configure network, if required ================================\n#   > # add or edit \"bip\" value in your /etc/docker/daemon.json, so that it looks as something like:\n#   > cat /etc/docker/daemon.json\n#   {\n#       \"bip\": \"192.168.2.1/24\",\n#       \"runtimes\": {\n#           \"nvidia\": {\n#               \"path\": \"/usr/bin/nvidia-container-runtime\",\n#               \"runtimeArgs\": []\n#           }\n#       }\n#   }\n#\n#   > # restart docker service\n#   > sudo systemctl restart docker.service\n#\n#   ================================ install nvidia docker ================================\n#   > # if you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers\n#   > docker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f\n#   > sudo apt-get purge -y nvidia-docker\n#   \n#   > # add the package repositories\n#   > curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n#   > distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n#   > curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n#   > sudo apt-get update\n#    \n#   > # install nvidia-docker2\n#   > sudo apt-get install -y nvidia-docker2\n#    \n#   > # stop docker\n#   > sudo service docker stop\n#   > # ...or more radically\n#   > sudo pkill -SIGHUP dockerd\n#   > # start docker and reload the Docker daemon configuration\n#   > sudo service docker start\n#    \n#   test nvidia-smi with the latest official CUDA image\n#   > docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi\nFROM tensorflow/tensorflow:latest-gpu\n#   =================== installing tensorflow-gpu sufficient for inference ===================\nRUN apt-get update \\\n && apt-get install --no-install-recommends git python-pip python-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN pip install setuptools pip --upgrade\nRUN pip install numpy tensorflow-gpu --no-cache-dir \\\n && python -m ipykernel.kernelspec\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates build-essential git python python-pip python-setuptools python-tk -y\n#   tf-nightly-gpu breaks tensorflow import; do we need it at all? it seems that it is needed only for tensorflow nightly builds\n#  RUN pip install tf-nightly-gpu\n#   =================== installing pretrained models and training dependencies ===================\n#   currently seem to work at tag 7367d494135368a7790df6172206a58a2a2f3d40\n#   rm -rf .git: since git history is not required in this container, remove it to reduce the container image size\nRUN git clone https://github.com/tensorflow/models.git /root/src/tensorflow_models \\\n && cd /root/src/tensorflow_models \\\n && rm -rf .git\n#      && git reset --hard 0f5803bdfced0cae02300e355e9415e96bb3383c \\\n#      && rm -rf .git\nRUN mkdir -p /root/.local/lib/python2.7/site-packages \\\n && (echo /root/src/tensorflow_models/research/ ;echo /root/src/tensorflow_models/research/slim ) > /root/.local/lib/python2.7/site-packages/tensorflow_models.pth\n#   install protobuf compiler 3.3.0 by hand, until available in apt-get (currently apt-get install 2.6.x)\n#  RUN   apt-get install protobuf-compiler\nRUN curl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip \\\n && unzip protoc-3.3.0-linux-x86_64.zip -d protoc3 \\\n && mv protoc3/bin/* /usr/local/bin/ \\\n && mv protoc3/include/* /usr/local/include/ \\\n && cd /root/src/tensorflow_models/research \\\n && protoc object_detection/protos/*.proto --python_out=. \\\n && pip install . --user\n#   =================== 'installing' snark tensorflow utilities for convenience ===================\n#   quick and dirty: for convenience, just copy tensor-cat and tensor-calc rather than properly installing comma and snark\nRUN mkdir -p /root/src \\\n && cd /root/src \\\n && git clone https://github.com/acfr/comma.git \\\n && echo /root/src/comma/python > /root/.local/lib/python2.7/site-packages/comma.pth \\\n && git clone https://github.com/acfr/snark.git \\\n && cp /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-cat /root/src/snark/machine_learning/deep_learning/tensorflow/applications/tensor-calc /usr/local/bin\n","originalDockerfileUglifiedHash":"f5594b950c7b83e0aff7fd6dfa59a6f3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3cd0d6eb633e145a2673e8983ece7e3d4c2544ee.dockerfile"}