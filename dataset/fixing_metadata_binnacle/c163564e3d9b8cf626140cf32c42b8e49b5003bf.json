{"seed":2264685624,"processedDockerfileHash":"0cbe42580bb4d5584eeb5b9a2bab33a7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install dependencies via apt\nENV DEBCONF_NOWARNINGS=\"yes\"\nRUN set -x \\\n && apt-get update -y -qq \\\n && apt-get upgrade -y -qq --no-install-recommends \\\n && : \"basic dependencies\" \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 pkg-config=0.29.1-0ubuntu2 cmake=3.10.2-1ubuntu2.18.04.2 git=1:2.17.1-1ubuntu0.17 wget=1.19.4-1ubuntu2.2 curl=7.58.0-2ubuntu3.24 tar=1.29b-2ubuntu0.4 unzip=6.0-21ubuntu1.2 -y -qq \\\n && : \"g2o dependencies\" \\\n && apt-get install --no-install-recommends libgoogle-glog-dev=0.3.5-1 libatlas-base-dev=3.10.3-5 libsuitesparse-dev=1:5.1.2-2 -y -qq \\\n && : \"OpenCV dependencies\" \\\n && apt-get install --no-install-recommends libgtk-3-dev=3.22.30-1ubuntu4 libjpeg-dev=8c-2ubuntu8 libpng++-dev=0.2.9-1 libtiff-dev=4.0.9-5ubuntu0.10 libopenexr-dev=2.2.0-11.1ubuntu1.9 libwebp-dev=0.6.1-2ubuntu0.18.04.1 ffmpeg=7:3.4.11-0ubuntu0.1 libavcodec-dev=7:3.4.11-0ubuntu0.1 libavformat-dev=7:3.4.11-0ubuntu0.1 libavutil-dev=7:3.4.11-0ubuntu0.1 libswscale-dev=7:3.4.11-0ubuntu0.1 libavresample-dev=7:3.4.11-0ubuntu0.1 -y -qq \\\n && : \"Pangolin dependencies\" \\\n && apt-get install --no-install-recommends libglew-dev=2.0.0-5 -y -qq \\\n && : \"other dependencies\" \\\n && apt-get install --no-install-recommends libyaml-cpp-dev=0.5.2-4ubuntu1 -y -qq \\\n && : \"remove cache\" \\\n && apt-get autoremove -y -qq \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_INSTALL_PREFIX=/usr/local\nARG NUM_THREADS=1\nENV CPATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPATH}\"\nENV C_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${C_INCLUDE_PATH}\"\nENV CPLUS_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPLUS_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}\"\nENV NVIDIA_VISIBLE_DEVICES=\"${NVIDIA_VISIBLE_DEVICES:-all}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics\"\n#   Eigen\nARG EIGEN3_VERSION=3.3.7\nWORKDIR /tmp\nRUN set -x \\\n && wget -q http://bitbucket.org/eigen/eigen/get/${EIGEN3_VERSION}.tar.bz2 \\\n && tar xf ${EIGEN3_VERSION}.tar.bz2 \\\n && rm -rf ${EIGEN3_VERSION}.tar.bz2 \\\n && mv eigen-eigen-* eigen-${EIGEN3_VERSION} \\\n && cd eigen-${EIGEN3_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Eigen3_DIR=\"${CMAKE_INSTALL_PREFIX}/share/eigen3/cmake\"\n#   g2o\nARG G2O_COMMIT=9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/RainerKuemmerle/g2o.git \\\n && cd g2o \\\n && git checkout ${G2O_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_SHARED_LIBS=ON -DBUILD_UNITTESTS=OFF -DBUILD_WITH_MARCH_NATIVE=ON -DG2O_USE_CHOLMOD=ON -DG2O_USE_CSPARSE=ON -DG2O_USE_OPENGL=OFF -DG2O_USE_OPENMP=ON -DG2O_BUILD_APPS=OFF -DG2O_BUILD_EXAMPLES=OFF -DG2O_BUILD_LINKED_APPS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV G2O_ROOT=\"${CMAKE_INSTALL_PREFIX}\"\n#   OpenCV\nARG OPENCV_VERSION=4.1.0\nWORKDIR /tmp\nRUN set -x \\\n && wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip -q ${OPENCV_VERSION}.zip \\\n && rm -rf ${OPENCV_VERSION}.zip \\\n && cd opencv-${OPENCV_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_JASPER=OFF -DBUILD_OPENEXR=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_dnn=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_python_bindings_generator=OFF -DENABLE_CXX11=ON -DENABLE_FAST_MATH=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_OPENMP=ON .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV OpenCV_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/opencv4\"\n#   DBoW2\nARG DBOW2_COMMIT=687fcb74dd13717c46add667e3fbfa9828a7019f\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/shinsumicco/DBoW2.git \\\n && cd DBoW2 \\\n && git checkout ${DBOW2_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV DBoW2_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/DBoW2\"\n#   Pangolin\nARG PANGOLIN_COMMIT=ad8b5f83222291c51b4800d5a5873b0e90a0cf81\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git \\\n && cd Pangolin \\\n && git checkout ${PANGOLIN_COMMIT} \\\n && sed -i -e \"193,198d\" ./src/utils/file_utils.cpp \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_EXAMPLES=OFF -DBUILD_PANGOLIN_DEPTHSENSE=OFF -DBUILD_PANGOLIN_FFMPEG=OFF -DBUILD_PANGOLIN_LIBDC1394=OFF -DBUILD_PANGOLIN_LIBJPEG=OFF -DBUILD_PANGOLIN_LIBOPENEXR=OFF -DBUILD_PANGOLIN_LIBPNG=OFF -DBUILD_PANGOLIN_LIBREALSENSE=OFF -DBUILD_PANGOLIN_LIBREALSENSE2=OFF -DBUILD_PANGOLIN_LIBTIFF=OFF -DBUILD_PANGOLIN_LIBUVC=OFF -DBUILD_PANGOLIN_LZ4=OFF -DBUILD_PANGOLIN_OPENNI=OFF -DBUILD_PANGOLIN_OPENNI2=OFF -DBUILD_PANGOLIN_PLEORA=OFF -DBUILD_PANGOLIN_PYTHON=OFF -DBUILD_PANGOLIN_TELICAM=OFF -DBUILD_PANGOLIN_TOON=OFF -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF -DBUILD_PANGOLIN_V4L=OFF -DBUILD_PANGOLIN_VIDEO=OFF -DBUILD_PANGOLIN_ZSTD=OFF -DBUILD_PYPANGOLIN_MODULE=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Pangolin_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/Pangolin\"\n#   OpenVSLAM\nCOPY . /openvslam/\nWORKDIR /openvslam/\nRUN set -x \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DBUILD_WITH_MARCH_NATIVE=ON -DUSE_PANGOLIN_VIEWER=ON -DUSE_SOCKET_PUBLISHER=OFF -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake example src \\\n && chmod -R 777 ./*\nWORKDIR /openvslam/build/\nENTRYPOINT [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  install dependencies via apt\nENV DEBCONF_NOWARNINGS=\"yes\"\nRUN set -x \\\n && apt-get update -y -qq \\\n && apt-get upgrade -y -qq --no-install-recommends \\\n && : \"basic dependencies\" \\\n && apt-get install build-essential pkg-config cmake git wget curl tar unzip -y -qq \\\n && : \"g2o dependencies\" \\\n && apt-get install libgoogle-glog-dev libatlas-base-dev libsuitesparse-dev -y -qq \\\n && : \"OpenCV dependencies\" \\\n && apt-get install libgtk-3-dev libjpeg-dev libpng++-dev libtiff-dev libopenexr-dev libwebp-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev -y -qq \\\n && : \"Pangolin dependencies\" \\\n && apt-get install libglew-dev -y -qq \\\n && : \"other dependencies\" \\\n && apt-get install libyaml-cpp-dev -y -qq \\\n && : \"remove cache\" \\\n && apt-get autoremove -y -qq \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_INSTALL_PREFIX=/usr/local\nARG NUM_THREADS=1\nENV CPATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPATH}\"\nENV C_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${C_INCLUDE_PATH}\"\nENV CPLUS_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPLUS_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}\"\nENV NVIDIA_VISIBLE_DEVICES=\"${NVIDIA_VISIBLE_DEVICES:-all}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics\"\n#  Eigen\nARG EIGEN3_VERSION=3.3.7\nWORKDIR /tmp\nRUN set -x \\\n && wget -q http://bitbucket.org/eigen/eigen/get/${EIGEN3_VERSION}.tar.bz2 \\\n && tar xf ${EIGEN3_VERSION}.tar.bz2 \\\n && rm -rf ${EIGEN3_VERSION}.tar.bz2 \\\n && mv eigen-eigen-* eigen-${EIGEN3_VERSION} \\\n && cd eigen-${EIGEN3_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Eigen3_DIR=\"${CMAKE_INSTALL_PREFIX}/share/eigen3/cmake\"\n#  g2o\nARG G2O_COMMIT=9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/RainerKuemmerle/g2o.git \\\n && cd g2o \\\n && git checkout ${G2O_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_SHARED_LIBS=ON -DBUILD_UNITTESTS=OFF -DBUILD_WITH_MARCH_NATIVE=ON -DG2O_USE_CHOLMOD=ON -DG2O_USE_CSPARSE=ON -DG2O_USE_OPENGL=OFF -DG2O_USE_OPENMP=ON -DG2O_BUILD_APPS=OFF -DG2O_BUILD_EXAMPLES=OFF -DG2O_BUILD_LINKED_APPS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV G2O_ROOT=\"${CMAKE_INSTALL_PREFIX}\"\n#  OpenCV\nARG OPENCV_VERSION=4.1.0\nWORKDIR /tmp\nRUN set -x \\\n && wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip -q ${OPENCV_VERSION}.zip \\\n && rm -rf ${OPENCV_VERSION}.zip \\\n && cd opencv-${OPENCV_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_JASPER=OFF -DBUILD_OPENEXR=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_dnn=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_python_bindings_generator=OFF -DENABLE_CXX11=ON -DENABLE_FAST_MATH=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_OPENMP=ON .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV OpenCV_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/opencv4\"\n#  DBoW2\nARG DBOW2_COMMIT=687fcb74dd13717c46add667e3fbfa9828a7019f\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/shinsumicco/DBoW2.git \\\n && cd DBoW2 \\\n && git checkout ${DBOW2_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV DBoW2_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/DBoW2\"\n#  Pangolin\nARG PANGOLIN_COMMIT=ad8b5f83222291c51b4800d5a5873b0e90a0cf81\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git \\\n && cd Pangolin \\\n && git checkout ${PANGOLIN_COMMIT} \\\n && sed -i -e \"193,198d\" ./src/utils/file_utils.cpp \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_EXAMPLES=OFF -DBUILD_PANGOLIN_DEPTHSENSE=OFF -DBUILD_PANGOLIN_FFMPEG=OFF -DBUILD_PANGOLIN_LIBDC1394=OFF -DBUILD_PANGOLIN_LIBJPEG=OFF -DBUILD_PANGOLIN_LIBOPENEXR=OFF -DBUILD_PANGOLIN_LIBPNG=OFF -DBUILD_PANGOLIN_LIBREALSENSE=OFF -DBUILD_PANGOLIN_LIBREALSENSE2=OFF -DBUILD_PANGOLIN_LIBTIFF=OFF -DBUILD_PANGOLIN_LIBUVC=OFF -DBUILD_PANGOLIN_LZ4=OFF -DBUILD_PANGOLIN_OPENNI=OFF -DBUILD_PANGOLIN_OPENNI2=OFF -DBUILD_PANGOLIN_PLEORA=OFF -DBUILD_PANGOLIN_PYTHON=OFF -DBUILD_PANGOLIN_TELICAM=OFF -DBUILD_PANGOLIN_TOON=OFF -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF -DBUILD_PANGOLIN_V4L=OFF -DBUILD_PANGOLIN_VIDEO=OFF -DBUILD_PANGOLIN_ZSTD=OFF -DBUILD_PYPANGOLIN_MODULE=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Pangolin_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/Pangolin\"\n#  OpenVSLAM\nCOPY . /openvslam/\nWORKDIR /openvslam/\nRUN set -x \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DBUILD_WITH_MARCH_NATIVE=ON -DUSE_PANGOLIN_VIEWER=ON -DUSE_SOCKET_PUBLISHER=OFF -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake example src \\\n && chmod -R 777 ./*\nWORKDIR /openvslam/build/\nENTRYPOINT [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"377216cd388574277f59edda86fc5c38","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   install dependencies via apt\nENV DEBCONF_NOWARNINGS=\"yes\"\nRUN set -x \\\n && apt-get update -y -qq \\\n && apt-get upgrade -y -qq --no-install-recommends \\\n && : \"basic dependencies\" \\\n && apt-get install build-essential pkg-config cmake git wget curl tar unzip -y -qq \\\n && : \"g2o dependencies\" \\\n && apt-get install libgoogle-glog-dev libatlas-base-dev libsuitesparse-dev -y -qq \\\n && : \"OpenCV dependencies\" \\\n && apt-get install libgtk-3-dev libjpeg-dev libpng++-dev libtiff-dev libopenexr-dev libwebp-dev ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev -y -qq \\\n && : \"Pangolin dependencies\" \\\n && apt-get install libglew-dev -y -qq \\\n && : \"other dependencies\" \\\n && apt-get install libyaml-cpp-dev -y -qq \\\n && : \"remove cache\" \\\n && apt-get autoremove -y -qq \\\n && rm -rf /var/lib/apt/lists/*\nARG CMAKE_INSTALL_PREFIX=/usr/local\nARG NUM_THREADS=1\nENV CPATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPATH}\"\nENV C_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${C_INCLUDE_PATH}\"\nENV CPLUS_INCLUDE_PATH=\"${CMAKE_INSTALL_PREFIX}/include:${CPLUS_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"${CMAKE_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}\"\nENV NVIDIA_VISIBLE_DEVICES=\"${NVIDIA_VISIBLE_DEVICES:-all}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics\"\n#   Eigen\nARG EIGEN3_VERSION=3.3.7\nWORKDIR /tmp\nRUN set -x \\\n && wget -q http://bitbucket.org/eigen/eigen/get/${EIGEN3_VERSION}.tar.bz2 \\\n && tar xf ${EIGEN3_VERSION}.tar.bz2 \\\n && rm -rf ${EIGEN3_VERSION}.tar.bz2 \\\n && mv eigen-eigen-* eigen-${EIGEN3_VERSION} \\\n && cd eigen-${EIGEN3_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Eigen3_DIR=\"${CMAKE_INSTALL_PREFIX}/share/eigen3/cmake\"\n#   g2o\nARG G2O_COMMIT=9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/RainerKuemmerle/g2o.git \\\n && cd g2o \\\n && git checkout ${G2O_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_SHARED_LIBS=ON -DBUILD_UNITTESTS=OFF -DBUILD_WITH_MARCH_NATIVE=ON -DG2O_USE_CHOLMOD=ON -DG2O_USE_CSPARSE=ON -DG2O_USE_OPENGL=OFF -DG2O_USE_OPENMP=ON -DG2O_BUILD_APPS=OFF -DG2O_BUILD_EXAMPLES=OFF -DG2O_BUILD_LINKED_APPS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV G2O_ROOT=\"${CMAKE_INSTALL_PREFIX}\"\n#   OpenCV\nARG OPENCV_VERSION=4.1.0\nWORKDIR /tmp\nRUN set -x \\\n && wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && unzip -q ${OPENCV_VERSION}.zip \\\n && rm -rf ${OPENCV_VERSION}.zip \\\n && cd opencv-${OPENCV_VERSION} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_JASPER=OFF -DBUILD_OPENEXR=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_opencv_apps=OFF -DBUILD_opencv_dnn=OFF -DBUILD_opencv_ml=OFF -DBUILD_opencv_python_bindings_generator=OFF -DENABLE_CXX11=ON -DENABLE_FAST_MATH=ON -DWITH_EIGEN=ON -DWITH_FFMPEG=ON -DWITH_OPENMP=ON .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV OpenCV_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/opencv4\"\n#   DBoW2\nARG DBOW2_COMMIT=687fcb74dd13717c46add667e3fbfa9828a7019f\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/shinsumicco/DBoW2.git \\\n && cd DBoW2 \\\n && git checkout ${DBOW2_COMMIT} \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV DBoW2_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/DBoW2\"\n#   Pangolin\nARG PANGOLIN_COMMIT=ad8b5f83222291c51b4800d5a5873b0e90a0cf81\nWORKDIR /tmp\nRUN set -x \\\n && git clone https://github.com/stevenlovegrove/Pangolin.git \\\n && cd Pangolin \\\n && git checkout ${PANGOLIN_COMMIT} \\\n && sed -i -e \"193,198d\" ./src/utils/file_utils.cpp \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_EXAMPLES=OFF -DBUILD_PANGOLIN_DEPTHSENSE=OFF -DBUILD_PANGOLIN_FFMPEG=OFF -DBUILD_PANGOLIN_LIBDC1394=OFF -DBUILD_PANGOLIN_LIBJPEG=OFF -DBUILD_PANGOLIN_LIBOPENEXR=OFF -DBUILD_PANGOLIN_LIBPNG=OFF -DBUILD_PANGOLIN_LIBREALSENSE=OFF -DBUILD_PANGOLIN_LIBREALSENSE2=OFF -DBUILD_PANGOLIN_LIBTIFF=OFF -DBUILD_PANGOLIN_LIBUVC=OFF -DBUILD_PANGOLIN_LZ4=OFF -DBUILD_PANGOLIN_OPENNI=OFF -DBUILD_PANGOLIN_OPENNI2=OFF -DBUILD_PANGOLIN_PLEORA=OFF -DBUILD_PANGOLIN_PYTHON=OFF -DBUILD_PANGOLIN_TELICAM=OFF -DBUILD_PANGOLIN_TOON=OFF -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF -DBUILD_PANGOLIN_V4L=OFF -DBUILD_PANGOLIN_VIDEO=OFF -DBUILD_PANGOLIN_ZSTD=OFF -DBUILD_PYPANGOLIN_MODULE=OFF .. \\\n && make -j${NUM_THREADS} \\\n && make install \\\n && cd /tmp \\\n && rm -rf *\nENV Pangolin_DIR=\"${CMAKE_INSTALL_PREFIX}/lib/cmake/Pangolin\"\n#   OpenVSLAM\nCOPY . /openvslam/\nWORKDIR /openvslam/\nRUN set -x \\\n && mkdir -p build \\\n && cd build \\\n && cmake -DBUILD_WITH_MARCH_NATIVE=ON -DUSE_PANGOLIN_VIEWER=ON -DUSE_SOCKET_PUBLISHER=OFF -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=OFF .. \\\n && make -j${NUM_THREADS} \\\n && rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake example src \\\n && chmod -R 777 ./*\nWORKDIR /openvslam/build/\nENTRYPOINT [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"ca8e6ab254f6ec21eabb3907d16e21ed","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c163564e3d9b8cf626140cf32c42b8e49b5003bf.dockerfile"}