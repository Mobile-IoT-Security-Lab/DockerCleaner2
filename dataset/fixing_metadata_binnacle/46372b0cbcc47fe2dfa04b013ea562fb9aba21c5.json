{"seed":1539953414,"processedDockerfileHash":"50d963b3db067fd715a74f03a4c2f447","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 autoconf=2.69-9 make=4.1-6 git=1:2.7.4-0ubuntu1.10 wget=1.17.1-1ubuntu1.5 pciutils=1:3.3.1-1.1ubuntu1.3 cpio=2.11+dfsg-5ubuntu1.1 libtool=2.4.6-0.1 lsb-release=9.20160110ubuntu0.2 ca-certificates=20210119~16.04.1 pkg-config=0.29.1-0ubuntu1 bison=2:3.0.4.dfsg-1 flex=2.6.0-11 libcurl4-gnutls-dev=7.47.0-1ubuntu2.19 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install --no-install-recommends automake=1:1.15-4ubuntu1 -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  build ISPC\nARG ISPC_VER=1.9.1\nARG ISPC_REPO=https://downloads.sourceforge.net/project/ispcmirror/v${ISPC_VER}/ispc-v${ISPC_VER}-linux.tar.gz\nRUN wget -O - ${ISPC_REPO} | tar xz\nENV ISPC_EXECUTABLE=\"/home/ispc-v${ISPC_VER}-linux/ispc\"\n#  build embree\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtbb-dev=4.4~20151115-0ubuntu3 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 -y -q\nARG EMBREE_REPO=https://github.com/embree/embree.git\nARG EMBREE_VER=df0b324\nRUN git clone ${EMBREE_REPO} \\\n && mkdir embree/build \\\n && cd embree/build \\\n && git checkout ${EMBREE_VER} \\\n && cmake .. -Wno-dev -DEMBREE_TUTORIALS=OFF \\\n && make -j 8 \\\n && make install\n#  build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtiff-dev zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libpng-dev libjpeg-dev=8c-2ubuntu8 libboost-python-dev=1.58.0.1ubuntu1 libboost-filesystem-dev=1.58.0.1ubuntu1 libboost-thread-dev=1.58.0.1ubuntu1 -y -q\nARG OpenEXR_VER=0ac2ea3\nARG OpenEXR_REPO=https://github.com/openexr/openexr.git\nRUN git clone ${OpenEXR_REPO} ; mkdir openexr/build ; cd openexr/build ; git checkout ${OpenEXR_VER} ; cmake .. ; make -j 8 ; make install\nARG OpenImageIO_VER=5daa9a1\nARG OpenImageIO_REPO=https://github.com/OpenImageIO/oiio.git\nRUN git clone ${OpenImageIO_REPO} ; mkdir oiio/build ; cd oiio/build ; git checkout ${OpenImageIO_VER} ; cmake .. ; make -j 8 ; make install\n#  build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglfw-dev=2.7.9-1 libgl1-mesa-dri=18.0.5-0ubuntu0~16.04.1 libxrandr-dev=2:1.5.0-1 libxinerama-dev=2:1.1.3-1 libxcursor-dev=1:1.1.14-1ubuntu0.16.04.2 libmpich-dev=3.2-6build1 mpich=3.2-6build1 openssh-server=1:7.2p2-4ubuntu2.10 openssh-client=1:7.2p2-4ubuntu2.10 -y -q\nENV PATH=\"$PATH:/usr/lib64/mpich/bin\"\nARG OSPRAY_VER=c42a885\nARG OSPRAY_REPO=https://github.com/ospray/ospray.git\nRUN git clone ${OSPRAY_REPO} ; mkdir ospray/build ; cd ospray/build ; git checkout ${OSPRAY_VER} ; cmake .. -DOSPRAY_MODULE_MPI=ON -DOSPRAY_SG_OPENIMAGEIO=ON ; make -j 8\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/ospray/build\"\nRUN mkdir -p /var/run/sshd ; sed -i 's/^#Port/Port/g' /etc/ssh/sshd_config ; sed -i 's/^Port 22/Port 2222/g' /etc/ssh/sshd_config ; sed -i 's/^#PermitRootLogin/PermitRootLogin/g' /etc/ssh/sshd_config ; sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config ; sed -i 's/# Port 22/Port 2222/g' /etc/ssh/ssh_config ; echo 'root:ospray' | chpasswd ; /usr/sbin/sshd-keygen ; sed -i 's/# StrictHostKeyChecking ask/ StrictHostKeyChecking no/g' /etc/ssh/ssh_config ; /usr/bin/ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa ; cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n#  include(ospray-example_san-miguel.m4)\n#  include(ospray-example_xfrog.m4)\nFROM build\nLABEL Description=\"This is the base image ospray-oiio-mpi Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#  COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#  Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#  Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#  Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n# build ISPC\nARG ISPC_VER=1.9.1\nARG ISPC_REPO=https://downloads.sourceforge.net/project/ispcmirror/v${ISPC_VER}/ispc-v${ISPC_VER}-linux.tar.gz\nRUN wget -O - ${ISPC_REPO} | tar xz\nENV ISPC_EXECUTABLE=\"/home/ispc-v${ISPC_VER}-linux/ispc\"\n# build embree\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtbb-dev libgl1-mesa-dev -y -q\nARG EMBREE_REPO=https://github.com/embree/embree.git\nARG EMBREE_VER=df0b324\nRUN git clone ${EMBREE_REPO} \\\n && mkdir embree/build \\\n && cd embree/build \\\n && git checkout ${EMBREE_VER} \\\n && cmake .. -Wno-dev -DEMBREE_TUTORIALS=OFF \\\n && make -j 8 \\\n && make install\n# build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtiff-dev zlib1g-dev libpng-dev libjpeg-dev libboost-python-dev libboost-filesystem-dev libboost-thread-dev -y -q\nARG OpenEXR_VER=0ac2ea3\nARG OpenEXR_REPO=https://github.com/openexr/openexr.git\nRUN git clone ${OpenEXR_REPO} ; mkdir openexr/build ; cd openexr/build ; git checkout ${OpenEXR_VER} ; cmake .. ; make -j 8 ; make install\nARG OpenImageIO_VER=5daa9a1\nARG OpenImageIO_REPO=https://github.com/OpenImageIO/oiio.git\nRUN git clone ${OpenImageIO_REPO} ; mkdir oiio/build ; cd oiio/build ; git checkout ${OpenImageIO_VER} ; cmake .. ; make -j 8 ; make install\n# build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglfw-dev libgl1-mesa-dri libxrandr-dev libxinerama-dev libxcursor-dev libmpich-dev mpich openssh-server openssh-client -y -q\nENV PATH=\"$PATH:/usr/lib64/mpich/bin\"\nARG OSPRAY_VER=c42a885\nARG OSPRAY_REPO=https://github.com/ospray/ospray.git\nRUN git clone ${OSPRAY_REPO} ; mkdir ospray/build ; cd ospray/build ; git checkout ${OSPRAY_VER} ; cmake .. -DOSPRAY_MODULE_MPI=ON -DOSPRAY_SG_OPENIMAGEIO=ON ; make -j 8\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/ospray/build\"\nRUN mkdir -p /var/run/sshd ; sed -i 's/^#Port/Port/g' /etc/ssh/sshd_config ; sed -i 's/^Port 22/Port 2222/g' /etc/ssh/sshd_config ; sed -i 's/^#PermitRootLogin/PermitRootLogin/g' /etc/ssh/sshd_config ; sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config ; sed -i 's/# Port 22/Port 2222/g' /etc/ssh/ssh_config ; echo 'root:ospray' | chpasswd ; /usr/sbin/sshd-keygen ; sed -i 's/# StrictHostKeyChecking ask/ StrictHostKeyChecking no/g' /etc/ssh/ssh_config ; /usr/bin/ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa ; cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n# include(ospray-example_san-miguel.m4)\n# include(ospray-example_xfrog.m4)\nFROM build\nLABEL Description=\"This is the base image ospray-oiio-mpi Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n","injectedSmells":[],"originalDockerfileHash":"5d6f5cd2939c4caa2c550c825bc9d306","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  build ISPC\nARG ISPC_VER=1.9.1\nARG ISPC_REPO=https://downloads.sourceforge.net/project/ispcmirror/v${ISPC_VER}/ispc-v${ISPC_VER}-linux.tar.gz\nRUN wget -O - ${ISPC_REPO} | tar xz\nENV ISPC_EXECUTABLE=\"/home/ispc-v${ISPC_VER}-linux/ispc\"\n#  build embree\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtbb-dev libgl1-mesa-dev -y -q\nARG EMBREE_REPO=https://github.com/embree/embree.git\nARG EMBREE_VER=df0b324\nRUN git clone ${EMBREE_REPO} \\\n && mkdir embree/build \\\n && cd embree/build \\\n && git checkout ${EMBREE_VER} \\\n && cmake .. -Wno-dev -DEMBREE_TUTORIALS=OFF \\\n && make -j 8 \\\n && make install\n#  build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libtiff-dev zlib1g-dev libpng-dev libjpeg-dev libboost-python-dev libboost-filesystem-dev libboost-thread-dev -y -q\nARG OpenEXR_VER=0ac2ea3\nARG OpenEXR_REPO=https://github.com/openexr/openexr.git\nRUN git clone ${OpenEXR_REPO} ; mkdir openexr/build ; cd openexr/build ; git checkout ${OpenEXR_VER} ; cmake .. ; make -j 8 ; make install\nARG OpenImageIO_VER=5daa9a1\nARG OpenImageIO_REPO=https://github.com/OpenImageIO/oiio.git\nRUN git clone ${OpenImageIO_REPO} ; mkdir oiio/build ; cd oiio/build ; git checkout ${OpenImageIO_VER} ; cmake .. ; make -j 8 ; make install\n#  build ospray\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libglfw-dev libgl1-mesa-dri libxrandr-dev libxinerama-dev libxcursor-dev libmpich-dev mpich openssh-server openssh-client -y -q\nENV PATH=\"$PATH:/usr/lib64/mpich/bin\"\nARG OSPRAY_VER=c42a885\nARG OSPRAY_REPO=https://github.com/ospray/ospray.git\nRUN git clone ${OSPRAY_REPO} ; mkdir ospray/build ; cd ospray/build ; git checkout ${OSPRAY_VER} ; cmake .. -DOSPRAY_MODULE_MPI=ON -DOSPRAY_SG_OPENIMAGEIO=ON ; make -j 8\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/home/ospray/build\"\nRUN mkdir -p /var/run/sshd ; sed -i 's/^#Port/Port/g' /etc/ssh/sshd_config ; sed -i 's/^Port 22/Port 2222/g' /etc/ssh/sshd_config ; sed -i 's/^#PermitRootLogin/PermitRootLogin/g' /etc/ssh/sshd_config ; sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config ; sed -i 's/# Port 22/Port 2222/g' /etc/ssh/ssh_config ; echo 'root:ospray' | chpasswd ; /usr/sbin/sshd-keygen ; sed -i 's/# StrictHostKeyChecking ask/ StrictHostKeyChecking no/g' /etc/ssh/ssh_config ; /usr/bin/ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa ; cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys\n#  include(ospray-example_san-miguel.m4)\n#  include(ospray-example_xfrog.m4)\nFROM build\nLABEL Description=\"This is the base image ospray-oiio-mpi Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n","originalDockerfileUglifiedHash":"4bd6c9fb1f92a6c0234dba2b4bf2dc39","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/46372b0cbcc47fe2dfa04b013ea562fb9aba21c5.dockerfile"}