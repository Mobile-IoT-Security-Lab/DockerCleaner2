{"seed":404771732,"processedDockerfileHash":"bb68096a8b1c81c555f5e9b35b51e994","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2019. TIBCO Software Inc.\n#   This file is subject to the license terms contained\n#   in the license file that is distributed with this file.\nFROM tomcat:9.0-jre8\n#   This Dockerfile requires the JasperReports Server WAR file installer file \n#   in the resources directory below the Dockerfile.\n#   COPY the JasperReports Server WAR file installer into the image \n#   JasperReports Server WAR file installer names for version 6.3 and prior\n#   were named jasperreports-server-<version number>-bin.zip\n#   COPY resources/jasperreports-server*zip /tmp/jasperserver.zip\n#   JasperReports Server WAR file installer names for version 6.4 and beyond\n#   are named TIB_js-jrs_<version number>_bin.zip\nCOPY resources/TIB_js-jrs_*_bin.zip /tmp/jasperserver.zip\nRUN echo \"apt-get\" \\\n && echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && apt-get update > /dev/null \\\n && apt-get install --no-install-recommends apt-utils -y > /dev/null \\\n && apt-get install --no-install-recommends postgresql-client unzip xmlstarlet -y > /dev/null \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf $CATALINA_HOME/webapps/ROOT \\\n && rm -rf $CATALINA_HOME/webapps/docs \\\n && rm -rf $CATALINA_HOME/webapps/examples \\\n && rm -rf $CATALINA_HOME/webapps/host-manager \\\n && rm -rf $CATALINA_HOME/webapps/manager \\\n && echo \"unzip WAR File installer\" \\\n && unzip /tmp/jasperserver.zip -d /usr/src/jasperreports-server > /dev/null \\\n && rm -rf /tmp/* \\\n && mv /usr/src/jasperreports-server/jasperreports-server-*/* /usr/src/jasperreports-server \\\n && echo \"unzip JasperReports Server WAR to Tomcat\" \\\n && unzip -o -q /usr/src/jasperreports-server/jasperserver-pro.war -d $CATALINA_HOME/webapps/jasperserver-pro > /dev/null \\\n && rm -f /usr/src/jasperreports-server/jasperserver-pro.war \\\n && rm -rf /usr/src/jasperreports-server/java \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/js-* \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/bin/*.sh \\\n && chmod +x /usr/src/jasperreports-server/apache-ant/bin/* \\\n && echo \"Check JAVA environment\" \\\n && env | grep JAVA \\\n && java -version\nENV PHANTOMJS_VERSION=\"2.1.1\"\n#   Extract phantomjs, move to /usr/local/share/phantomjs, link to /usr/local/bin.\n#   Comment out if phantomjs not required.\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" -O /tmp/phantomjs.tar.bz2 --no-verbose \\\n && tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp \\\n && rm -f /tmp/phantomjs.tar.bz2 \\\n && mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs \\\n && ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin \\\n && rm -rf /tmp/*\n#   In case you wish to download from a different location you can manually\n#   download the archive and copy from resources/ at build time. Note that you\n#   also # need to comment out the preceding RUN command\n#  COPY resources/phantomjs*bz2 /tmp/phantomjs.tar.bz2\n#  RUN tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp && \\\n#      rm -f /tmp/phantomjs.tar.bz2 && \\\n#      mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs && \\\n#      ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin && \\\n#      rm -rf /tmp/*\nENV POSTGRES_JDBC_DRIVER_VERSION=\"42.2.5\"\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://jdbc.postgresql.org/download/postgresql-${POSTGRES_JDBC_DRIVER_VERSION}.jar\" -P /usr/src/jasperreports-server/buildomatic/conf_source/db/postgresql/jdbc --no-verbose\n#   Set default Java options for Tomcat.\n#   using XX:+UseG1GC - default Java GC in later versions of Java 8\n#   use cool Java docker optimizations\nENV JAVA_OPTS=\"-XX:MaxMetaspaceSize=378m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\n#   Configure tomcat for SSL by default with a self-signed certificate.\n#   Option to set up JasperReports Server to use HTTPS only.\n#\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nENV DN_HOSTNAME=\"${DN_HOSTNAME:-localhost.localdomain}\" \\\n    JRS_HTTPS_ONLY=\"${JRS_HTTPS_ONLY:-false}\" \\\n    HTTPS_PORT=\"${HTTPS_PORT:-8443}\"\nRUN keytool -genkey -alias self_signed -dname \"CN=${DN_HOSTNAME}\" -storetype PKCS12 -storepass \"${KS_PASSWORD}\" -keypass \"${KS_PASSWORD}\" -keystore /root/.keystore.p12 \\\n && keytool -list -keystore /root/.keystore.p12 -storepass \"${KS_PASSWORD}\" -storetype PKCS12 \\\n && xmlstarlet ed --inplace --subnode \"/Server/Service\" --type elem -n Connector -v \"\" --var connector-ssl '$prev' --insert '$connector-ssl' --type attr -n port -v \"${HTTPS_PORT:-8443}\" --insert '$connector-ssl' --type attr -n protocol -v \"org.apache.coyote.http11.Http11NioProtocol\" --insert '$connector-ssl' --type attr -n maxThreads -v \"150\" --insert '$connector-ssl' --type attr -n SSLEnabled -v \"true\" --insert '$connector-ssl' --type attr -n scheme -v \"https\" --insert '$connector-ssl' --type attr -n secure -v \"true\" --insert '$connector-ssl' --type attr -n clientAuth -v \"false\" --insert '$connector-ssl' --type attr -n sslProtocol -v \"TLS\" --insert '$connector-ssl' --type attr -n keystorePass -v \"${KS_PASSWORD}\" --insert '$connector-ssl' --type attr -n keystoreFile -v \"/root/.keystore.p12\" ${CATALINA_HOME}/conf/server.xml\n#   Expose ports. Note that you must do one of the following:\n#   map them to local ports at container runtime via \"-p 8080:8080 -p 8443:8443\"\n#   or use dynamic ports.\nEXPOSE 8080/tcp ${HTTPS_PORT:-8443}\nCOPY scripts/entrypoint.sh /\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Default action executed by entrypoint script.\nCMD [\"run\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:8080 || exit 1\n","originalDockerfile":"#  Copyright (c) 2019. TIBCO Software Inc.\n#  This file is subject to the license terms contained\n#  in the license file that is distributed with this file.\nFROM tomcat:9.0-jre8\n#  This Dockerfile requires the JasperReports Server WAR file installer file \n#  in the resources directory below the Dockerfile.\n#  COPY the JasperReports Server WAR file installer into the image \n#  JasperReports Server WAR file installer names for version 6.3 and prior\n#  were named jasperreports-server-<version number>-bin.zip\n#  COPY resources/jasperreports-server*zip /tmp/jasperserver.zip\n#  JasperReports Server WAR file installer names for version 6.4 and beyond\n#  are named TIB_js-jrs_<version number>_bin.zip\nCOPY resources/TIB_js-jrs_*_bin.zip /tmp/jasperserver.zip\nRUN echo \"apt-get\" \\\n && echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && apt-get update > /dev/null \\\n && apt-get install --no-install-recommends apt-utils -y > /dev/null \\\n && apt-get install postgresql-client unzip xmlstarlet -y > /dev/null \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf $CATALINA_HOME/webapps/ROOT \\\n && rm -rf $CATALINA_HOME/webapps/docs \\\n && rm -rf $CATALINA_HOME/webapps/examples \\\n && rm -rf $CATALINA_HOME/webapps/host-manager \\\n && rm -rf $CATALINA_HOME/webapps/manager \\\n && echo \"unzip WAR File installer\" \\\n && unzip /tmp/jasperserver.zip -d /usr/src/jasperreports-server > /dev/null \\\n && rm -rf /tmp/* \\\n && mv /usr/src/jasperreports-server/jasperreports-server-*/* /usr/src/jasperreports-server \\\n && echo \"unzip JasperReports Server WAR to Tomcat\" \\\n && unzip -o -q /usr/src/jasperreports-server/jasperserver-pro.war -d $CATALINA_HOME/webapps/jasperserver-pro > /dev/null \\\n && rm -f /usr/src/jasperreports-server/jasperserver-pro.war \\\n && rm -rf /usr/src/jasperreports-server/java \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/js-* \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/bin/*.sh \\\n && chmod +x /usr/src/jasperreports-server/apache-ant/bin/* \\\n && echo \"Check JAVA environment\" \\\n && env | grep JAVA \\\n && java -version\nENV PHANTOMJS_VERSION=\"2.1.1\"\n#  Extract phantomjs, move to /usr/local/share/phantomjs, link to /usr/local/bin.\n#  Comment out if phantomjs not required.\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" -O /tmp/phantomjs.tar.bz2 --no-verbose \\\n && tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp \\\n && rm -f /tmp/phantomjs.tar.bz2 \\\n && mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs \\\n && ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin \\\n && rm -rf /tmp/*\n#  In case you wish to download from a different location you can manually\n#  download the archive and copy from resources/ at build time. Note that you\n#  also # need to comment out the preceding RUN command\n# COPY resources/phantomjs*bz2 /tmp/phantomjs.tar.bz2\n# RUN tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp && \\\n#     rm -f /tmp/phantomjs.tar.bz2 && \\\n#     mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs && \\\n#     ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin && \\\n#     rm -rf /tmp/*\nENV POSTGRES_JDBC_DRIVER_VERSION=\"42.2.5\"\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://jdbc.postgresql.org/download/postgresql-${POSTGRES_JDBC_DRIVER_VERSION}.jar\" -P /usr/src/jasperreports-server/buildomatic/conf_source/db/postgresql/jdbc --no-verbose\n#  Set default Java options for Tomcat.\n#  using XX:+UseG1GC - default Java GC in later versions of Java 8\n#  use cool Java docker optimizations\nENV JAVA_OPTS=\"-XX:MaxMetaspaceSize=378m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\n#  Configure tomcat for SSL by default with a self-signed certificate.\n#  Option to set up JasperReports Server to use HTTPS only.\n#\nENV DN_HOSTNAME=\"${DN_HOSTNAME:-localhost.localdomain}\" \\\n    KS_PASSWORD=\"${KS_PASSWORD:-changeit}\" \\\n    JRS_HTTPS_ONLY=\"${JRS_HTTPS_ONLY:-false}\" \\\n    HTTPS_PORT=\"${HTTPS_PORT:-8443}\"\nRUN keytool -genkey -alias self_signed -dname \"CN=${DN_HOSTNAME}\" -storetype PKCS12 -storepass \"${KS_PASSWORD}\" -keypass \"${KS_PASSWORD}\" -keystore /root/.keystore.p12 \\\n && keytool -list -keystore /root/.keystore.p12 -storepass \"${KS_PASSWORD}\" -storetype PKCS12 \\\n && xmlstarlet ed --inplace --subnode \"/Server/Service\" --type elem -n Connector -v \"\" --var connector-ssl '$prev' --insert '$connector-ssl' --type attr -n port -v \"${HTTPS_PORT:-8443}\" --insert '$connector-ssl' --type attr -n protocol -v \"org.apache.coyote.http11.Http11NioProtocol\" --insert '$connector-ssl' --type attr -n maxThreads -v \"150\" --insert '$connector-ssl' --type attr -n SSLEnabled -v \"true\" --insert '$connector-ssl' --type attr -n scheme -v \"https\" --insert '$connector-ssl' --type attr -n secure -v \"true\" --insert '$connector-ssl' --type attr -n clientAuth -v \"false\" --insert '$connector-ssl' --type attr -n sslProtocol -v \"TLS\" --insert '$connector-ssl' --type attr -n keystorePass -v \"${KS_PASSWORD}\" --insert '$connector-ssl' --type attr -n keystoreFile -v \"/root/.keystore.p12\" ${CATALINA_HOME}/conf/server.xml\n#  Expose ports. Note that you must do one of the following:\n#  map them to local ports at container runtime via \"-p 8080:8080 -p 8443:8443\"\n#  or use dynamic ports.\nEXPOSE 8080/tcp ${HTTPS_PORT:-8443}\nCOPY scripts/entrypoint.sh /\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#  Default action executed by entrypoint script.\nCMD [\"run\"]\n","injectedSmells":[],"originalDockerfileHash":"f0b7b41ce66514f21ed0a6c818205394","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2019. TIBCO Software Inc.\n#   This file is subject to the license terms contained\n#   in the license file that is distributed with this file.\nFROM tomcat:9.0-jre8\n#   This Dockerfile requires the JasperReports Server WAR file installer file \n#   in the resources directory below the Dockerfile.\n#   COPY the JasperReports Server WAR file installer into the image \n#   JasperReports Server WAR file installer names for version 6.3 and prior\n#   were named jasperreports-server-<version number>-bin.zip\n#   COPY resources/jasperreports-server*zip /tmp/jasperserver.zip\n#   JasperReports Server WAR file installer names for version 6.4 and beyond\n#   are named TIB_js-jrs_<version number>_bin.zip\nCOPY resources/TIB_js-jrs_*_bin.zip /tmp/jasperserver.zip\nRUN echo \"apt-get\" \\\n && echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && apt-get update > /dev/null \\\n && apt-get install --no-install-recommends apt-utils -y > /dev/null \\\n && apt-get install postgresql-client unzip xmlstarlet -y > /dev/null \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf $CATALINA_HOME/webapps/ROOT \\\n && rm -rf $CATALINA_HOME/webapps/docs \\\n && rm -rf $CATALINA_HOME/webapps/examples \\\n && rm -rf $CATALINA_HOME/webapps/host-manager \\\n && rm -rf $CATALINA_HOME/webapps/manager \\\n && echo \"unzip WAR File installer\" \\\n && unzip /tmp/jasperserver.zip -d /usr/src/jasperreports-server > /dev/null \\\n && rm -rf /tmp/* \\\n && mv /usr/src/jasperreports-server/jasperreports-server-*/* /usr/src/jasperreports-server \\\n && echo \"unzip JasperReports Server WAR to Tomcat\" \\\n && unzip -o -q /usr/src/jasperreports-server/jasperserver-pro.war -d $CATALINA_HOME/webapps/jasperserver-pro > /dev/null \\\n && rm -f /usr/src/jasperreports-server/jasperserver-pro.war \\\n && rm -rf /usr/src/jasperreports-server/java \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/js-* \\\n && chmod +x /usr/src/jasperreports-server/buildomatic/bin/*.sh \\\n && chmod +x /usr/src/jasperreports-server/apache-ant/bin/* \\\n && echo \"Check JAVA environment\" \\\n && env | grep JAVA \\\n && java -version\nENV PHANTOMJS_VERSION=\"2.1.1\"\n#   Extract phantomjs, move to /usr/local/share/phantomjs, link to /usr/local/bin.\n#   Comment out if phantomjs not required.\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\" -O /tmp/phantomjs.tar.bz2 --no-verbose \\\n && tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp \\\n && rm -f /tmp/phantomjs.tar.bz2 \\\n && mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs \\\n && ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin \\\n && rm -rf /tmp/*\n#   In case you wish to download from a different location you can manually\n#   download the archive and copy from resources/ at build time. Note that you\n#   also # need to comment out the preceding RUN command\n#  COPY resources/phantomjs*bz2 /tmp/phantomjs.tar.bz2\n#  RUN tar -xjf /tmp/phantomjs.tar.bz2 -C /tmp && \\\n#      rm -f /tmp/phantomjs.tar.bz2 && \\\n#      mv /tmp/phantomjs*linux-x86_64 /usr/local/share/phantomjs && \\\n#      ln -sf /usr/local/share/phantomjs/bin/phantomjs /usr/local/bin && \\\n#      rm -rf /tmp/*\nENV POSTGRES_JDBC_DRIVER_VERSION=\"42.2.5\"\nRUN echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf > /dev/null \\\n && wget \"https://jdbc.postgresql.org/download/postgresql-${POSTGRES_JDBC_DRIVER_VERSION}.jar\" -P /usr/src/jasperreports-server/buildomatic/conf_source/db/postgresql/jdbc --no-verbose\n#   Set default Java options for Tomcat.\n#   using XX:+UseG1GC - default Java GC in later versions of Java 8\n#   use cool Java docker optimizations\nENV JAVA_OPTS=\"-XX:MaxMetaspaceSize=378m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\n#   Configure tomcat for SSL by default with a self-signed certificate.\n#   Option to set up JasperReports Server to use HTTPS only.\n#\nENV DN_HOSTNAME=\"${DN_HOSTNAME:-localhost.localdomain}\" \\\n    KS_PASSWORD=\"${KS_PASSWORD:-changeit}\" \\\n    JRS_HTTPS_ONLY=\"${JRS_HTTPS_ONLY:-false}\" \\\n    HTTPS_PORT=\"${HTTPS_PORT:-8443}\"\nRUN keytool -genkey -alias self_signed -dname \"CN=${DN_HOSTNAME}\" -storetype PKCS12 -storepass \"${KS_PASSWORD}\" -keypass \"${KS_PASSWORD}\" -keystore /root/.keystore.p12 \\\n && keytool -list -keystore /root/.keystore.p12 -storepass \"${KS_PASSWORD}\" -storetype PKCS12 \\\n && xmlstarlet ed --inplace --subnode \"/Server/Service\" --type elem -n Connector -v \"\" --var connector-ssl '$prev' --insert '$connector-ssl' --type attr -n port -v \"${HTTPS_PORT:-8443}\" --insert '$connector-ssl' --type attr -n protocol -v \"org.apache.coyote.http11.Http11NioProtocol\" --insert '$connector-ssl' --type attr -n maxThreads -v \"150\" --insert '$connector-ssl' --type attr -n SSLEnabled -v \"true\" --insert '$connector-ssl' --type attr -n scheme -v \"https\" --insert '$connector-ssl' --type attr -n secure -v \"true\" --insert '$connector-ssl' --type attr -n clientAuth -v \"false\" --insert '$connector-ssl' --type attr -n sslProtocol -v \"TLS\" --insert '$connector-ssl' --type attr -n keystorePass -v \"${KS_PASSWORD}\" --insert '$connector-ssl' --type attr -n keystoreFile -v \"/root/.keystore.p12\" ${CATALINA_HOME}/conf/server.xml\n#   Expose ports. Note that you must do one of the following:\n#   map them to local ports at container runtime via \"-p 8080:8080 -p 8443:8443\"\n#   or use dynamic ports.\nEXPOSE 8080/tcp ${HTTPS_PORT:-8443}\nCOPY scripts/entrypoint.sh /\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Default action executed by entrypoint script.\nCMD [\"run\"]\n","originalDockerfileUglifiedHash":"f445baf4986c2743f6aba99bb4f5ae6a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2f0924c62136b1334c8baa950d7ae15db2f188bd.dockerfile"}