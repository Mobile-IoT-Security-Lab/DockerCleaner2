{"seed":764475673,"processedDockerfileHash":"26dc8982254786e7ff4ee2c461da5a4b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG BASE_TAG=staging\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04 AS nvidia\nFROM gcr.io/kaggle-images/python-tensorflow-whl:1.12.0-py36 AS tensorflow_whl\nFROM gcr.io/kaggle-images/python:${BASE_TAG}\nCOPY clean-layer.sh /tmp/clean-layer.sh\nRUN chmod +x /tmp/clean-layer.sh\n#   Cuda support\nCOPY --from=nvidia /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/cuda.gpg\n#   Ensure the cuda libraries are compatible with the custom Tensorflow wheels.\n#   TODO(b/120050292): Use templating to keep in sync or COPY installed binaries from it.\nENV CUDA_VERSION=\"9.2.148\"\nENV CUDA_PKG_VERSION=\"9-2=$CUDA_VERSION-1\"\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#   The stub is useful to us both for built-time linking and run-time linking, on CPU-only systems.\n#   When intended to be used with actual GPUs, make sure to (besides providing access to the host\n#   CUDA user libraries, either manually or through the use of nvidia-docker) exclude them. One\n#   convenient way to do so is to obscure its contents by a bind mount:\n#     docker run .... -v /non-existing-directory:/usr/local/cuda/lib64/stubs:ro ...\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"cuda>=9.2\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn7=7.4.1.5-1+cuda9.2 libcudnn7-dev=7.4.1.5-1+cuda9.2 libnccl2=2.3.7-1+cuda9.2 libnccl-dev=2.3.7-1+cuda9.2 cuda-cupti-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-libraries-$CUDA_PKG_VERSION cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION -y \\\n && ln -s /usr/local/cuda-9.2 /usr/local/cuda \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && /tmp/clean-layer.sh\n#   Reinstall packages with a separate version for GPU support\n#   Tensorflow\nCOPY --from=tensorflow_whl /tmp/tensorflow_gpu/*.whl /tmp/tensorflow_gpu/\nRUN pip uninstall -y tensorflow \\\n && pip install /tmp/tensorflow_gpu/tensorflow*.whl \\\n && rm -rf /tmp/tensorflow_gpu \\\n && conda uninstall -y pytorch-cpu torchvision-cpu \\\n && conda install -y pytorch torchvision cudatoolkit=9.2 -c pytorch \\\n && pip uninstall -y mxnet \\\n && pip install mxnet-cu92==1.7.0 --no-deps \\\n && /tmp/clean-layer.sh\n#   Install GPU-only packages\nRUN pip install pycuda==2022.2.2 \\\n && pip install cupy-cuda92==9.6.0 \\\n && pip install pynvrtc==9.2 \\\n && /tmp/clean-layer.sh\n#   Re-add TensorBoard Jupyter extension patch\nCOPY patches/tensorboard/notebook.py /opt/conda/lib/python3.6/site-packages/tensorboard/notebook.py\nRUN apt-get install --no-install-recommends openssh-server sudo screen -y\n#   netcore 2.0\nRUN apt-get install --no-install-recommends software-properties-common -y\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nRUN mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nRUN sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libicu55\nRUN apt-get install --no-install-recommends dotnet-sdk-2.2 -y\n#   RUN apt-get install -y aspnetcore-runtime-2.2  dotnet-runtime-2.2 dotnet-runtime-deps-2.2 dotnet-sdk-2.2\n#   Gdal\n#   RUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\n#   RUN apt-get update -y\n#   RUN apt-get install -y libgdal-dev gdal-bin python-gdal python3-gdal vim htop \n#   RUN conda remove -y ipykernel\n#   RUN conda install -y gdal ipykernel jupyterlab \n#   RUN conda install -y gdal\n#   RUN conda update -y conda\n#   RUN conda update -y jupyter \n#   RUN conda install -c conda-forge jupyterlab\n#   RUN conda create -n ipykernel_py2 python=2 ipykernel\n#   RUN conda create -n ipykernel_py3 python=3 ipykernel\n#   RUN source activate ipykernel_py2\n#   RUN source activate ipykernel_py3\n#   RUN python -m ipykernel install --user\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends python3-pycurl locales ssh-askpass python3-tk python3-pip python3-dev -y\nRUN pip install pip==23.1 --upgrade\nRUN pip install mechanize==0.4.8\nRUN apt-get install --no-install-recommends firefox unzip xvfb libxi6 libgconf-2-4 default-jdk -y\nRUN pip install selenium==4.8.3 PyVirtualDisplay==3.0\nRUN wget https://github.com/mozilla/geckodriver/releases/download/v0.14.0/geckodriver-v0.14.0-linux64.tar.gz -O /tmp/geckodriver.tar.gz \\\n && tar -C /opt -xzf /tmp/geckodriver.tar.gz\n#   project file\nRUN pip3 uninstall pil\nRUN pip3 install youtube-dl face_recognition glob3 opencv-python pillow\nENV APACHE_RUN_USER=\"www-data\"\nENV APACHE_RUN_GROUP=\"www-data\"\nENV APACHE_LOG_DIR=\"/var/log/apache2\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG BASE_TAG=staging\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04 AS nvidia\nFROM gcr.io/kaggle-images/python-tensorflow-whl:1.12.0-py36 AS tensorflow_whl\nFROM gcr.io/kaggle-images/python:${BASE_TAG}\nADD clean-layer.sh /tmp/clean-layer.sh\nRUN chmod +x /tmp/clean-layer.sh\n#  Cuda support\nCOPY --from=nvidia /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/cuda.gpg\n#  Ensure the cuda libraries are compatible with the custom Tensorflow wheels.\n#  TODO(b/120050292): Use templating to keep in sync or COPY installed binaries from it.\nENV CUDA_VERSION=\"9.2.148\"\nENV CUDA_PKG_VERSION=\"9-2=$CUDA_VERSION-1\"\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#  The stub is useful to us both for built-time linking and run-time linking, on CPU-only systems.\n#  When intended to be used with actual GPUs, make sure to (besides providing access to the host\n#  CUDA user libraries, either manually or through the use of nvidia-docker) exclude them. One\n#  convenient way to do so is to obscure its contents by a bind mount:\n#    docker run .... -v /non-existing-directory:/usr/local/cuda/lib64/stubs:ro ...\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"cuda>=9.2\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn7=7.4.1.5-1+cuda9.2 libcudnn7-dev=7.4.1.5-1+cuda9.2 libnccl2=2.3.7-1+cuda9.2 libnccl-dev=2.3.7-1+cuda9.2 cuda-cupti-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-libraries-$CUDA_PKG_VERSION cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION -y \\\n && ln -s /usr/local/cuda-9.2 /usr/local/cuda \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && /tmp/clean-layer.sh\n#  Reinstall packages with a separate version for GPU support\n#  Tensorflow\nCOPY --from=tensorflow_whl /tmp/tensorflow_gpu/*.whl /tmp/tensorflow_gpu/\nRUN pip uninstall -y tensorflow \\\n && pip install /tmp/tensorflow_gpu/tensorflow*.whl \\\n && rm -rf /tmp/tensorflow_gpu \\\n && conda uninstall -y pytorch-cpu torchvision-cpu \\\n && conda install -y pytorch torchvision cudatoolkit=9.2 -c pytorch \\\n && pip uninstall -y mxnet \\\n && pip install mxnet-cu92 --no-deps \\\n && /tmp/clean-layer.sh\n#  Install GPU-only packages\nRUN pip install pycuda \\\n && pip install cupy-cuda92 \\\n && pip install pynvrtc \\\n && /tmp/clean-layer.sh\n#  Re-add TensorBoard Jupyter extension patch\nADD patches/tensorboard/notebook.py /opt/conda/lib/python3.6/site-packages/tensorboard/notebook.py\nRUN apt-get install openssh-server sudo screen -y\n#  netcore 2.0\nRUN apt-get install software-properties-common -y\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nRUN mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nRUN sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"\nRUN apt-get update \\\n && apt-get install libicu55\nRUN apt-get install dotnet-sdk-2.2 -y\n#  RUN apt-get install -y aspnetcore-runtime-2.2  dotnet-runtime-2.2 dotnet-runtime-deps-2.2 dotnet-sdk-2.2\n#  Gdal\n#  RUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\n#  RUN apt-get update -y\n#  RUN apt-get install -y libgdal-dev gdal-bin python-gdal python3-gdal vim htop \n#  RUN conda remove -y ipykernel\n#  RUN conda install -y gdal ipykernel jupyterlab \n#  RUN conda install -y gdal\n#  RUN conda update -y conda\n#  RUN conda update -y jupyter \n#  RUN conda install -c conda-forge jupyterlab\n#  RUN conda create -n ipykernel_py2 python=2 ipykernel\n#  RUN conda create -n ipykernel_py3 python=3 ipykernel\n#  RUN source activate ipykernel_py2\n#  RUN source activate ipykernel_py3\n#  RUN python -m ipykernel install --user\nRUN apt-get update -y \\\n && apt-get install python3-pycurl locales ssh-askpass python3-tk python3-pip python3-dev -y\nRUN pip install pip --upgrade\nRUN pip install mechanize\nRUN apt-get install firefox unzip xvfb libxi6 libgconf-2-4 default-jdk -y\nRUN pip install selenium PyVirtualDisplay\nRUN wget https://github.com/mozilla/geckodriver/releases/download/v0.14.0/geckodriver-v0.14.0-linux64.tar.gz -O /tmp/geckodriver.tar.gz \\\n && tar -C /opt -xzf /tmp/geckodriver.tar.gz\n#  project file\nRUN pip3 uninstall pil\nRUN pip3 install youtube-dl face_recognition glob3 opencv-python pillow\nENV APACHE_RUN_USER=\"www-data\"\nENV APACHE_RUN_GROUP=\"www-data\"\nENV APACHE_LOG_DIR=\"/var/log/apache2\"\n","injectedSmells":[],"originalDockerfileHash":"bdf059ef68af2addea9084762d90f919","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG BASE_TAG=staging\nFROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04 AS nvidia\nFROM gcr.io/kaggle-images/python-tensorflow-whl:1.12.0-py36 AS tensorflow_whl\nFROM gcr.io/kaggle-images/python:${BASE_TAG}\nADD clean-layer.sh /tmp/clean-layer.sh\nRUN chmod +x /tmp/clean-layer.sh\n#   Cuda support\nCOPY --from=nvidia /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/\nCOPY --from=nvidia /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/cuda.gpg\n#   Ensure the cuda libraries are compatible with the custom Tensorflow wheels.\n#   TODO(b/120050292): Use templating to keep in sync or COPY installed binaries from it.\nENV CUDA_VERSION=\"9.2.148\"\nENV CUDA_PKG_VERSION=\"9-2=$CUDA_VERSION-1\"\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nENV PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\"\n#   The stub is useful to us both for built-time linking and run-time linking, on CPU-only systems.\n#   When intended to be used with actual GPUs, make sure to (besides providing access to the host\n#   CUDA user libraries, either manually or through the use of nvidia-docker) exclude them. One\n#   convenient way to do so is to obscure its contents by a bind mount:\n#     docker run .... -v /non-existing-directory:/usr/local/cuda/lib64/stubs:ro ...\nENV LD_LIBRARY_PATH=\"/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs\"\nENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"compute,utility\"\nENV NVIDIA_REQUIRE_CUDA=\"cuda>=9.2\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libcudnn7=7.4.1.5-1+cuda9.2 libcudnn7-dev=7.4.1.5-1+cuda9.2 libnccl2=2.3.7-1+cuda9.2 libnccl-dev=2.3.7-1+cuda9.2 cuda-cupti-$CUDA_PKG_VERSION cuda-cudart-$CUDA_PKG_VERSION cuda-cudart-dev-$CUDA_PKG_VERSION cuda-libraries-$CUDA_PKG_VERSION cuda-libraries-dev-$CUDA_PKG_VERSION cuda-nvml-dev-$CUDA_PKG_VERSION cuda-minimal-build-$CUDA_PKG_VERSION cuda-command-line-tools-$CUDA_PKG_VERSION -y \\\n && ln -s /usr/local/cuda-9.2 /usr/local/cuda \\\n && ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && /tmp/clean-layer.sh\n#   Reinstall packages with a separate version for GPU support\n#   Tensorflow\nCOPY --from=tensorflow_whl /tmp/tensorflow_gpu/*.whl /tmp/tensorflow_gpu/\nRUN pip uninstall -y tensorflow \\\n && pip install /tmp/tensorflow_gpu/tensorflow*.whl \\\n && rm -rf /tmp/tensorflow_gpu \\\n && conda uninstall -y pytorch-cpu torchvision-cpu \\\n && conda install -y pytorch torchvision cudatoolkit=9.2 -c pytorch \\\n && pip uninstall -y mxnet \\\n && pip install mxnet-cu92 --no-deps \\\n && /tmp/clean-layer.sh\n#   Install GPU-only packages\nRUN pip install pycuda \\\n && pip install cupy-cuda92 \\\n && pip install pynvrtc \\\n && /tmp/clean-layer.sh\n#   Re-add TensorBoard Jupyter extension patch\nADD patches/tensorboard/notebook.py /opt/conda/lib/python3.6/site-packages/tensorboard/notebook.py\nRUN apt-get install openssh-server sudo screen -y\n#   netcore 2.0\nRUN apt-get install software-properties-common -y\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\nRUN mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\nRUN sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nRUN add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"\nRUN apt-get update \\\n && apt-get install libicu55\nRUN apt-get install dotnet-sdk-2.2 -y\n#   RUN apt-get install -y aspnetcore-runtime-2.2  dotnet-runtime-2.2 dotnet-runtime-deps-2.2 dotnet-sdk-2.2\n#   Gdal\n#   RUN add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\n#   RUN apt-get update -y\n#   RUN apt-get install -y libgdal-dev gdal-bin python-gdal python3-gdal vim htop \n#   RUN conda remove -y ipykernel\n#   RUN conda install -y gdal ipykernel jupyterlab \n#   RUN conda install -y gdal\n#   RUN conda update -y conda\n#   RUN conda update -y jupyter \n#   RUN conda install -c conda-forge jupyterlab\n#   RUN conda create -n ipykernel_py2 python=2 ipykernel\n#   RUN conda create -n ipykernel_py3 python=3 ipykernel\n#   RUN source activate ipykernel_py2\n#   RUN source activate ipykernel_py3\n#   RUN python -m ipykernel install --user\nRUN apt-get update -y \\\n && apt-get install python3-pycurl locales ssh-askpass python3-tk python3-pip python3-dev -y\nRUN pip install pip --upgrade\nRUN pip install mechanize\nRUN apt-get install firefox unzip xvfb libxi6 libgconf-2-4 default-jdk -y\nRUN pip install selenium PyVirtualDisplay\nRUN wget https://github.com/mozilla/geckodriver/releases/download/v0.14.0/geckodriver-v0.14.0-linux64.tar.gz -O /tmp/geckodriver.tar.gz \\\n && tar -C /opt -xzf /tmp/geckodriver.tar.gz\n#   project file\nRUN pip3 uninstall pil\nRUN pip3 install youtube-dl face_recognition glob3 opencv-python pillow\nENV APACHE_RUN_USER=\"www-data\"\nENV APACHE_RUN_GROUP=\"www-data\"\nENV APACHE_LOG_DIR=\"/var/log/apache2\"\n","originalDockerfileUglifiedHash":"1b44fab94949b6b12f72f3b0cf29acc1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/67edea18f06ea48861a24b3aafe9f03638e094d6.dockerfile"}