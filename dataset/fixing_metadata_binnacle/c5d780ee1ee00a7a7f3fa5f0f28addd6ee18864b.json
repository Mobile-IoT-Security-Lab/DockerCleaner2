{"seed":1483700263,"processedDockerfileHash":"02b021d9e552f646a4c39bce0456862a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements. See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership. The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License. You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied. See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#\n#   First stage: the build environment\n#   Edge required for rocksdb\nFROM alpine:3.8 AS builder\nMAINTAINER Apache NiFi <dev@nifi.apache.org>\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#   Install the system dependencies needed for a build\nRUN apk --update --no-cache upgrade \\\n && apk add gcc=6.4.0-r9 g++=6.4.0-r9 make=4.2.1-r2 bison=3.0.4-r1 flex=2.6.4-r1 flex-dev=2.6.4-r1 maven=3.5.4-r1 openjdk8-jre-base=8.275.01-r0 openjdk8=8.275.01-r0 autoconf=2.69-r2 libtool=2.4.6-r5 wget=1.20.3-r0 gdb=8.0.1-r6 musl-dev=1.1.19-r11 boost-dev=1.66.0-r0 vim=8.1.1365-r0 util-linux-dev=2.32-r0 curl-dev=7.61.1-r3 cmake=3.11.1-r2 git=2.18.4-r0 nss=3.36.1-r1 nss-dev=3.36.1-r1 unzip=6.0-r6 gpsd-dev=3.17-r2 libressl-dev=2.7.5-r0 zlib-dev=1.2.11-r1 bzip2-dev=1.0.6-r7 python3-dev=3.6.9-r1 --update --no-cache\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\n#   Setup minificpp user\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nCOPY $MINIFI_SOURCE_CODE $MINIFI_BASE_DIR\nRUN chown -R $USER:$USER $MINIFI_BASE_DIR\nUSER $USER\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\n#   Perform the build\nRUN cd $MINIFI_BASE_DIR \\\n && mkdir build \\\n && cd build \\\n && cmake -DOPENSSL_FORCE_SHARED=true -DDISABLE_JEMALLOC=ON -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_JNI=ON .. \\\n && make -j8 package \\\n && tar -xzvf $MINIFI_BASE_DIR/build/nifi-minifi-cpp-$MINIFI_VERSION-bin.tar.gz -C $MINIFI_BASE_DIR\n#   Second stage: the runtime image\n#   Edge required for rocksdb\nFROM alpine:3.8\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#   Add testing repo for rocksdb\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories\nRUN apk --update --no-cache upgrade \\\n && apk add util-linux=2.32-r0 curl=7.61.1-r3 unzip=6.0-r6 gpsd=3.17-r2 openjdk8-jre-base=8.275.01-r0 openjdk8=8.275.01-r0 nss=3.36.1-r1 nss-dev=3.36.1-r1 libressl=2.7.5-r0 python3=3.6.9-r1 zlib=1.2.11-r1 --update --no-cache\n#   Start MiNiFi CPP in the foreground\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\n#   Copy built minifi distribution from builder\nCOPY --from=builder ${MINIFI_HOME} ${MINIFI_HOME}\nRUN chown -R ${USER}:${USER} /opt/minifi\nUSER $USER\nWORKDIR ${MINIFI_HOME}\nCMD ./bin/minifi.sh run\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements. See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership. The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License. You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied. See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n#\n#  First stage: the build environment\n#  Edge required for rocksdb\nFROM alpine:3.8 AS builder\nMAINTAINER Apache NiFi <dev@nifi.apache.org>\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#  Install the system dependencies needed for a build\nRUN apk --update --no-cache upgrade \\\n && apk --update --no-cache add gcc g++ make bison flex flex-dev maven openjdk8-jre-base openjdk8 autoconf libtool wget gdb musl-dev boost-dev vim util-linux-dev curl-dev cmake git nss nss-dev unzip gpsd-dev libressl-dev zlib-dev bzip2-dev python3-dev\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\n#  Setup minificpp user\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nADD $MINIFI_SOURCE_CODE $MINIFI_BASE_DIR\nRUN chown -R $USER:$USER $MINIFI_BASE_DIR\nUSER $USER\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\n#  Perform the build\nRUN cd $MINIFI_BASE_DIR \\\n && mkdir build \\\n && cd build \\\n && cmake -DOPENSSL_FORCE_SHARED=true -DDISABLE_JEMALLOC=ON -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_JNI=ON .. \\\n && make -j8 package \\\n && tar -xzvf $MINIFI_BASE_DIR/build/nifi-minifi-cpp-$MINIFI_VERSION-bin.tar.gz -C $MINIFI_BASE_DIR\n#  Second stage: the runtime image\n#  Edge required for rocksdb\nFROM alpine:3.8\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#  Add testing repo for rocksdb\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories\nRUN apk --update --no-cache upgrade \\\n && apk add --update --no-cache util-linux curl unzip gpsd openjdk8-jre-base openjdk8 nss nss-dev libressl python3 zlib\n#  Start MiNiFi CPP in the foreground\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\n#  Copy built minifi distribution from builder\nCOPY --from=builder ${MINIFI_HOME} ${MINIFI_HOME}\nRUN chown -R ${USER}:${USER} /opt/minifi\nUSER $USER\nWORKDIR ${MINIFI_HOME}\nCMD ./bin/minifi.sh run\n","injectedSmells":[],"originalDockerfileHash":"4f43fbbd5e15208b46439c4e586f7827","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements. See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership. The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License. You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied. See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#\n#   First stage: the build environment\n#   Edge required for rocksdb\nFROM alpine:3.8 AS builder\nMAINTAINER Apache NiFi <dev@nifi.apache.org>\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#   Install the system dependencies needed for a build\nRUN apk --update --no-cache upgrade \\\n && apk --update --no-cache add gcc g++ make bison flex flex-dev maven openjdk8-jre-base openjdk8 autoconf libtool wget gdb musl-dev boost-dev vim util-linux-dev curl-dev cmake git nss nss-dev unzip gpsd-dev libressl-dev zlib-dev bzip2-dev python3-dev\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\n#   Setup minificpp user\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nADD $MINIFI_SOURCE_CODE $MINIFI_BASE_DIR\nRUN chown -R $USER:$USER $MINIFI_BASE_DIR\nUSER $USER\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\n#   Perform the build\nRUN cd $MINIFI_BASE_DIR \\\n && mkdir build \\\n && cd build \\\n && cmake -DOPENSSL_FORCE_SHARED=true -DDISABLE_JEMALLOC=ON -DSTATIC_BUILD= -DSKIP_TESTS=true -DENABLE_JNI=ON .. \\\n && make -j8 package \\\n && tar -xzvf $MINIFI_BASE_DIR/build/nifi-minifi-cpp-$MINIFI_VERSION-bin.tar.gz -C $MINIFI_BASE_DIR\n#   Second stage: the runtime image\n#   Edge required for rocksdb\nFROM alpine:3.8\nARG UID\nARG GID\nARG MINIFI_VERSION\nARG MINIFI_SOURCE_CODE\n#   Add testing repo for rocksdb\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories\nRUN apk --update --no-cache upgrade \\\n && apk add --update --no-cache util-linux curl unzip gpsd openjdk8-jre-base openjdk8 nss nss-dev libressl python3 zlib\n#   Start MiNiFi CPP in the foreground\nENV USER=\"minificpp\"\nENV MINIFI_BASE_DIR=\"/opt/minifi\"\nENV MINIFI_HOME=\"$MINIFI_BASE_DIR/nifi-minifi-cpp-$MINIFI_VERSION\"\nENV JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nENV PATH=\"$PATH:/usr/lib/jvm/default-jvm/bin\"\nRUN addgroup -g $GID $USER \\\n && adduser -u $UID -D -G $USER -g \"\" $USER\nRUN mkdir -p $MINIFI_BASE_DIR\n#   Copy built minifi distribution from builder\nCOPY --from=builder ${MINIFI_HOME} ${MINIFI_HOME}\nRUN chown -R ${USER}:${USER} /opt/minifi\nUSER $USER\nWORKDIR ${MINIFI_HOME}\nCMD ./bin/minifi.sh run\n","originalDockerfileUglifiedHash":"323e8bb1ff31a7b3755b303c6dccb0d5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c5d780ee1ee00a7a7f3fa5f0f28addd6ee18864b.dockerfile"}