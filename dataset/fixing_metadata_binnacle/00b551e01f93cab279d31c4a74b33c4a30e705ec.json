{"seed":1570131244,"processedDockerfileHash":"99c0d6f8564efc82c004b97e9dbcc338","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker on s390x, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.s390x .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM s390x/gcc:5.3\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig git iptables jq net-tools libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial pkg-config python-dev python-mock python-pip python-websocket xfsprogs tar -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   fix platform enablement in lvm2 to support s390x properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Note: Go comes from the base image (gccgo, specifically)\n#   We can't compile Go proper because s390x isn't an officially supported architecture yet.\nENV PATH=\"/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   TODO update this sha when we upgrade to Go 1.5+\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images s390x/buildpack-deps:jessie@sha256:4d1381224acaca6c4bfe3604de3af6972083a8558a99672cb6989c7541780099 s390x/busybox:latest@sha256:dd61522c983884a66ed72d60301925889028c6d2d5e0220a8fe1d9b4c6a4f01b s390x/debian:jessie@sha256:b74c863400909eff3c5e196cac9bfd1f6333ce47aae6a38398d87d5875da170a s390x/hello-world:latest@sha256:780d80b3a7677c3788c0d5cd9168281320c8d4a6d9183892d8ee5cdd610f5699\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_VERSION=\"v2\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b \"$RSRC_VERSION\" https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#   Install containerd\nENV CONTAINERD_COMMIT=\"v0.2.1\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker on s390x, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker -f Dockerfile.s390x .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM s390x/gcc:5.3\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig git iptables jq net-tools libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial pkg-config python-dev python-mock python-pip python-websocket xfsprogs tar -y\n#  Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#  see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  fix platform enablement in lvm2 to support s390x properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#  \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Note: Go comes from the base image (gccgo, specifically)\n#  We can't compile Go proper because s390x isn't an officially supported architecture yet.\nENV PATH=\"/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#  This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#  ENV GOFMT_VERSION 1.3.3\n#  RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#  TODO update this sha when we upgrade to Go 1.5+\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#  Grab Go's cover tool for dead-simple code coverage testing\n#  Grab Go's vet tool for examining go code to find suspicious constructs\n#  and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images s390x/buildpack-deps:jessie@sha256:4d1381224acaca6c4bfe3604de3af6972083a8558a99672cb6989c7541780099 s390x/busybox:latest@sha256:dd61522c983884a66ed72d60301925889028c6d2d5e0220a8fe1d9b4c6a4f01b s390x/debian:jessie@sha256:b74c863400909eff3c5e196cac9bfd1f6333ce47aae6a38398d87d5875da170a s390x/hello-world:latest@sha256:780d80b3a7677c3788c0d5cd9168281320c8d4a6d9183892d8ee5cdd610f5699\n#  see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#  Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#  Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#  Build/install the tool for embedding resources in Windows binaries\nENV RSRC_VERSION=\"v2\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b \"$RSRC_VERSION\" https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#  Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#  Install containerd\nENV CONTAINERD_COMMIT=\"v0.2.1\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"013af37d7329e8e32a86889d5d964d2c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker on s390x, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker -f Dockerfile.s390x .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM s390x/gcc:5.3\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig git iptables jq net-tools libapparmor-dev libcap-dev libltdl-dev libsqlite3-dev libsystemd-journal-dev libtool mercurial pkg-config python-dev python-mock python-pip python-websocket xfsprogs tar -y\n#   Get lvm2 source for compiling statically\nENV LVM2_VERSION=\"2.02.103\"\nRUN mkdir -p /usr/local/lvm2 \\\n && curl -fsSL \"https://mirrors.kernel.org/sourceware/lvm2/LVM2.${LVM2_VERSION}.tgz\" | tar -xzC /usr/local/lvm2 --strip-components=1\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   fix platform enablement in lvm2 to support s390x properly\nRUN set -e \\\n && for f in config.guess config.sub; do curl -fsSL -o \"/usr/local/lvm2/autoconf/$f\" \"http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=$f;hb=HEAD\" ; done\n#   \"arch.c:78:2: error: #error the arch code needs to know about your machine type\"\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --build=\"$( gcc -print-multiarch ;)\" --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Note: Go comes from the base image (gccgo, specifically)\n#   We can't compile Go proper because s390x isn't an officially supported architecture yet.\nENV PATH=\"/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   TODO update this sha when we upgrade to Go 1.5+\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\nENV NOTARY_VERSION=\"docker-v1.11-3\"\nRUN set -x \\\n && export GO15VENDOREXPERIMENT=1 \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n && (cd \"$GOPATH/src/github.com/docker/notary\" \\\n && git checkout -q \"$NOTARY_VERSION\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/notary/vendor:$GOPATH\" go build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n && rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"e2878cbcc3a7eef99917adc1be252800b0e41ece\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor pkcs11 selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image-v2.sh /docker-frozen-images s390x/buildpack-deps:jessie@sha256:4d1381224acaca6c4bfe3604de3af6972083a8558a99672cb6989c7541780099 s390x/busybox:latest@sha256:dd61522c983884a66ed72d60301925889028c6d2d5e0220a8fe1d9b4c6a4f01b s390x/debian:jessie@sha256:b74c863400909eff3c5e196cac9bfd1f6333ce47aae6a38398d87d5875da170a s390x/hello-world:latest@sha256:780d80b3a7677c3788c0d5cd9168281320c8d4a6d9183892d8ee5cdd610f5699\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b v1.0.4 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone --depth 1 -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_VERSION=\"v2\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone --depth 1 -b \"$RSRC_VERSION\" https://github.com/akavel/rsrc.git \"$GOPATH/src/github.com/akavel/rsrc\" \\\n && go build -v -o /usr/local/bin/rsrc github.com/akavel/rsrc \\\n && rm -rf \"$GOPATH\"\n#   Install runc\nENV RUNC_COMMIT=\"baf6536d6259209c3edfa2b22237af82942d3dfa\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/opencontainers/runc.git \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && cd \"$GOPATH/src/github.com/opencontainers/runc\" \\\n && git checkout -q \"$RUNC_COMMIT\" \\\n && make static BUILDTAGS=\"seccomp apparmor selinux\" \\\n && cp runc /usr/local/bin/docker-runc\n#   Install containerd\nENV CONTAINERD_COMMIT=\"v0.2.1\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone git://github.com/docker/containerd.git \"$GOPATH/src/github.com/docker/containerd\" \\\n && cd \"$GOPATH/src/github.com/docker/containerd\" \\\n && git checkout -q \"$CONTAINERD_COMMIT\" \\\n && make static \\\n && cp bin/containerd /usr/local/bin/docker-containerd \\\n && cp bin/containerd-shim /usr/local/bin/docker-containerd-shim \\\n && cp bin/ctr /usr/local/bin/docker-containerd-ctr\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"ded4b016f2f118aefadad2744a63c534","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/00b551e01f93cab279d31c4a74b33c4a30e705ec.dockerfile"}