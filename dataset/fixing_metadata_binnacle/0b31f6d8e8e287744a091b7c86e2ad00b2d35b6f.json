{"seed":3595520674,"processedDockerfileHash":"8fe64dc9a5857cc8e4b555faa8c59499","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'php-fpm' base Image, visit its repository on Github\n#      https://github.com/Laradock/php-fpm\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/php-fpm:2.0-71\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n#   are installed on the base image 'laradock/php-fpm' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/php-fpm).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_ZIP_ARCHIVE=true\n#\n#  ####################################\n#   SOAP:\n#  ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends libxml2-dev php-soap -y ) \\\n && docker-php-ext-install soap ; fi\n#  ####################################\n#   pgsql\n#  ####################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then : \\\n && docker-php-ext-install pgsql ; fi\n#  ####################################\n#   pgsql client\n#  ####################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends postgresql-client -y ) ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then pecl install xdebug \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n#  ####################################\n#   Blackfire:\n#  ####################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ####################################\n#   PHP REDIS EXTENSION FOR PHP 7.0\n#  ####################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ####################################\n#   Swoole EXTENSION FOR PHP 7\n#  ####################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl install swoole \\\n && docker-php-ext-enable swoole ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ####################################\n#   ZipArchive:\n#  ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip ; fi\n#  ####################################\n#   bcmath:\n#  ####################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ####################################\n#   PHP Memcached:\n#  ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ####################################\n#   Exif:\n#  ####################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends sudo wget -y ) \\\n && curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /usr/local/etc/php/conf.d/aerospike.ini ; fi\n#  ####################################\n#   Opcache:\n#  ####################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ####################################\n#   Mysqli Modifications:\n#  ####################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ####################################\n#   Tokenizer Modifications:\n#  ####################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n#  ####################################\n#   Human Language and Character Encoding Support:\n#  ####################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends zlib1g-dev libicu-dev g++ -y ) \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ####################################\n#   GHOSTSCRIPT:\n#  ####################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends poppler-utils ghostscript -y ) ; fi\n#  ####################################\n#   LDAP:\n#  ####################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends libldap2-dev -y ) \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ####################################\n#   SQL SERVER:\n#  ####################################\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL=\"${INSTALL_MSSQL}\"\nRUN if [ ${INSTALL_MSSQL} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends apt-transport-https -y ) \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv ; fi\n#  ####################################\n#   Image optimizers:\n#  ####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS=\"${INSTALL_IMAGE_OPTIMIZERS}\"\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends jpegoptim optipng pngquant gifsicle -y --force-yes ) ; fi\n#  ####################################\n#   ImageMagick:\n#  ####################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nENV INSTALL_IMAGEMAGICK=\"${INSTALL_IMAGEMAGICK}\"\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends libmagickwand-dev imagemagick -y ) \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\n#  RUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\n#  To edit the 'php-fpm' base Image, visit its repository on Github\n#     https://github.com/Laradock/php-fpm\n#\n#  To change its version, see the available Tags on the Docker Hub:\n#     https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#  Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/php-fpm:2.0-71\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n# --------------------------------------------------------------------------\n#  Mandatory Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n#  are installed on the base image 'laradock/php-fpm' image. If you want\n#  to add more Software's or remove existing one, you need to edit the\n#  base image (https://github.com/Laradock/php-fpm).\n#\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#  Example:\n#    - INSTALL_ZIP_ARCHIVE=true\n#\n# ####################################\n#  SOAP:\n# ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get update -yqq \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n# ####################################\n#  pgsql\n# ####################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then apt-get update -yqq \\\n && docker-php-ext-install pgsql ; fi\n# ####################################\n#  pgsql client\n# ####################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get update -yqq \\\n && apt-get install postgresql-client -y ; fi\n# ####################################\n#  xDebug:\n# ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then pecl install xdebug \\\n && docker-php-ext-enable xdebug ; fi\n#  Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n# ####################################\n#  Blackfire:\n# ####################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n# ####################################\n#  PHP REDIS EXTENSION FOR PHP 7.0\n# ####################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n# ####################################\n#  Swoole EXTENSION FOR PHP 7\n# ####################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl install swoole \\\n && docker-php-ext-enable swoole ; fi\n# ####################################\n#  MongoDB:\n# ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n# ####################################\n#  ZipArchive:\n# ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip ; fi\n# ####################################\n#  bcmath:\n# ####################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n# ####################################\n#  PHP Memcached:\n# ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n# ####################################\n#  Exif:\n# ####################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n# ####################################\n#  PHP Aerospike:\n# ####################################\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#  Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get update -yqq \\\n && apt-get install sudo wget -y \\\n && curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /usr/local/etc/php/conf.d/aerospike.ini ; fi\n# ####################################\n#  Opcache:\n# ####################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#  Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n# ####################################\n#  Mysqli Modifications:\n# ####################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n# ####################################\n#  Tokenizer Modifications:\n# ####################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n# ####################################\n#  Human Language and Character Encoding Support:\n# ####################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get update -yqq \\\n && apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n# ####################################\n#  GHOSTSCRIPT:\n# ####################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get update -yqq \\\n && apt-get install poppler-utils ghostscript -y ; fi\n# ####################################\n#  LDAP:\n# ####################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get update -yqq \\\n && apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n# ####################################\n#  SQL SERVER:\n# ####################################\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL=\"${INSTALL_MSSQL}\"\nRUN if [ ${INSTALL_MSSQL} = true ] ; then apt-get update -yqq \\\n && apt-get install apt-transport-https -y \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv ; fi\n# ####################################\n#  Image optimizers:\n# ####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS=\"${INSTALL_IMAGE_OPTIMIZERS}\"\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get update -yqq \\\n && apt-get install jpegoptim optipng pngquant gifsicle -y --force-yes ; fi\n# ####################################\n#  ImageMagick:\n# ####################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nENV INSTALL_IMAGEMAGICK=\"${INSTALL_IMAGEMAGICK}\"\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update -y \\\n && apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nADD ./laravel.ini /usr/local/etc/php/conf.d\nADD ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\n# RUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","injectedSmells":[],"originalDockerfileHash":"30d7e163c4599bee28ea3319d64f4aa2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'php-fpm' base Image, visit its repository on Github\n#      https://github.com/Laradock/php-fpm\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/php-fpm:2.0-71\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"mcrypt\", \"pdo_mysql\", \"libssl-dev\", ....)\n#   are installed on the base image 'laradock/php-fpm' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/php-fpm).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_ZIP_ARCHIVE=true\n#\n#  ####################################\n#   SOAP:\n#  ####################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then apt-get update -yqq \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ####################################\n#   pgsql\n#  ####################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then apt-get update -yqq \\\n && docker-php-ext-install pgsql ; fi\n#  ####################################\n#   pgsql client\n#  ####################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then apt-get update -yqq \\\n && apt-get install postgresql-client -y ; fi\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then pecl install xdebug \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\n#  ####################################\n#   Blackfire:\n#  ####################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ####################################\n#   PHP REDIS EXTENSION FOR PHP 7.0\n#  ####################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ####################################\n#   Swoole EXTENSION FOR PHP 7\n#  ####################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then pecl install swoole \\\n && docker-php-ext-enable swoole ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ####################################\n#   ZipArchive:\n#  ####################################\nARG INSTALL_ZIP_ARCHIVE=false\nRUN if [ ${INSTALL_ZIP_ARCHIVE} = true ] ; then docker-php-ext-install zip ; fi\n#  ####################################\n#   bcmath:\n#  ####################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ####################################\n#   PHP Memcached:\n#  ####################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ####################################\n#   Exif:\n#  ####################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nARG INSTALL_AEROSPIKE=false\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get update -yqq \\\n && apt-get install sudo wget -y \\\n && curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /usr/local/etc/php/conf.d/aerospike.ini ; fi\n#  ####################################\n#   Opcache:\n#  ####################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ####################################\n#   Mysqli Modifications:\n#  ####################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ####################################\n#   Tokenizer Modifications:\n#  ####################################\nARG INSTALL_TOKENIZER=false\nRUN if [ ${INSTALL_TOKENIZER} = true ] ; then docker-php-ext-install tokenizer ; fi\n#  ####################################\n#   Human Language and Character Encoding Support:\n#  ####################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get update -yqq \\\n && apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ####################################\n#   GHOSTSCRIPT:\n#  ####################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get update -yqq \\\n && apt-get install poppler-utils ghostscript -y ; fi\n#  ####################################\n#   LDAP:\n#  ####################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get update -yqq \\\n && apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ####################################\n#   SQL SERVER:\n#  ####################################\nARG INSTALL_MSSQL=false\nENV INSTALL_MSSQL=\"${INSTALL_MSSQL}\"\nRUN if [ ${INSTALL_MSSQL} = true ] ; then apt-get update -yqq \\\n && apt-get install apt-transport-https -y \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen \\\n && pecl install pdo_sqlsrv-4.1.8preview sqlsrv-4.1.8preview \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv ; fi\n#  ####################################\n#   Image optimizers:\n#  ####################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nENV INSTALL_IMAGE_OPTIMIZERS=\"${INSTALL_IMAGE_OPTIMIZERS}\"\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get update -yqq \\\n && apt-get install jpegoptim optipng pngquant gifsicle -y --force-yes ; fi\n#  ####################################\n#   ImageMagick:\n#  ####################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nENV INSTALL_IMAGEMAGICK=\"${INSTALL_IMAGEMAGICK}\"\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get update -y \\\n && apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nADD ./laravel.ini /usr/local/etc/php/conf.d\nADD ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\n#  RUN rm -r /var/lib/apt/lists/*\nRUN usermod -u 1000 www-data\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","originalDockerfileUglifiedHash":"bd8a5309e43248b2ac18567b830ce23b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0b31f6d8e8e287744a091b7c86e2ad00b2d35b6f.dockerfile"}