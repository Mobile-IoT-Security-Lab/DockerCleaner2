{"seed":2519622457,"processedDockerfileHash":"90925450ef488a812ea9ce7beef8740a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04 AS glvnd\nMAINTAINER Eric Heiden <heiden@usc.edu>\n#   Set up libglvnd for OpenGL GUI support\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends git=1:2.7.4-0ubuntu1.10 ca-certificates=20210119~16.04.1 make=4.1-6 automake=1:1.15-4ubuntu1 autoconf=2.69-9 libtool=2.4.6-0.1 pkg-config=0.29.1-0ubuntu1 python=2.7.12-1~16.04 libxext-dev=2:1.3.3-1 libx11-dev=2:1.6.3-1ubuntu2.2 x11proto-gl-dev=1.4.17-1 -y ) \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /opt/libglvnd\nRUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends gcc-multilib=4:5.3.1-1ubuntu1 libxext-dev:i386 libx11-dev:i386 -y ) \\\n && rm -rf /var/lib/apt/lists/*\n#   32-bit libraries\nRUN make distclean \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/i386-linux-gnu --host=i386-linux-gnu \"CFLAGS=-m32\" \"CXXFLAGS=-m32\" \"LDFLAGS=-m32\" \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/i386-linux-gnu -type f -name 'lib*.la' -delete\nFROM tensorflow/tensorflow:1.8.0-gpu-py3\nCOPY --from=glvnd /usr/local/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu\nCOPY --from=glvnd /usr/local/lib/i386-linux-gnu /usr/local/lib/i386-linux-gnu\nCOPY internal/10_nvidia.json /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && echo '/usr/local/lib/i386-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/lib/x86_64-linux-gnu:/usr/local/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES},display\"\nARG USER\nARG HOME\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    USER=\"$USER\" \\\n    HOME=\"$HOME\"\nRUN echo \"The working directory is: $HOME\"\nRUN echo \"The user is: $USER\"\nRUN mkdir -p $HOME\nWORKDIR $HOME\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends sudo=1.8.16-0ubuntu1.10 git=1:2.7.4-0ubuntu1.10 -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install dependencies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential apt-utils curl nano vim libfreetype6-dev libpng12-dev libzmq3-dev git python-numpy python-dev python-opengl cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev libboost-all-dev libsdl2-dev swig libgtk2.0-dev wget ca-certificates unzip aptitude pkg-config qtbase5-dev libqt5opengl5-dev libassimp-dev libpython3.5-dev libboost-python-dev libtinyxml-dev golang python-opencv terminator tmux libcanberra-gtk-module libfuse2 libnss3 fuse python3-tk libglfw3-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev net-tools xpra xserver-xorg-dev libffi-dev libxslt1.1 feedgnuplot libglew-dev parallel htop apt-transport-https\n#   install Sublime Text\nRUN wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - \\\n && echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y sublime-text\nRUN pip3 install --upgrade pip\nCOPY ./internal/ /\n#   Install MuJoCo 1.50 and 1.31\nWORKDIR /opt\nRUN mkdir mujoco \\\n && cd mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip \\\n && unzip mjpro150_linux.zip \\\n && rm mjpro150_linux.zip \\\n && wget https://www.roboti.us/download/mjpro131_linux.zip \\\n && unzip mjpro131_linux.zip \\\n && rm mjpro131_linux.zip \\\n && if [ -f \"/mjkey.txt\" ] ; then mv /mjkey.txt . \\\n && cp mjkey.txt mjpro150/bin/ \\\n && cp mjkey.txt mjpro131/bin/ \\\n && echo \"Installed MuJoCo Key file.\" ; else echo \"Could not find MuJoCo key file (mjkey.txt) in ./internal!\\nPlease copy it manually to ~/.mujoco when inside the docker container.\" 1>&2; fi\nENV MUJOCO_PY_MJPRO_PATH=\"/opt/mujoco/mjpro150\"\nENV MUJOCO_LICENSE_KEY=\"/opt/mujoco/mjkey.txt\"\nENV MUJOCO_PY_MUJOCO_PATH=\"/opt/mujoco\"\nENV LD_LIBRARY_PATH=\"/opt/mujoco/mjpro150/bin:$LD_LIBRARY_PATH\"\n#   Temporarily copy MuJoCo to home folder to install mujoco-py\nRUN mkdir ~/.mujoco \\\n && cp -r /opt/mujoco/* ~/.mujoco\nRUN pip3 --no-cache-dir install gym[all]==0.10.3 mujoco-py scikit-image plotly ipykernel jupyter jupyterlab matplotlib numpy scipy sklearn pandas Pillow empy tqdm pyopengl ipdb cloudpickle imageio mpi4py jsonpickle gtimer path.py cached-property flask joblib lasagne PyOpenGL six pyprind virtualenv\n#   Set up permissions to use same UID and GID as host system user\n#   https://denibertovic.com/posts/handling-permissions-with-docker-volumes/\nRUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;).asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#   disable password prompt for sudo\nRUN echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo env EDITOR=\"tee -a\" visudo\n#   Install Anaconda 3\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b -p /opt/conda \\\n && rm ~/anaconda.sh\n#   Install Jupyter Lab\nRUN jupyter serverextension enable --py jupyterlab --sys-prefix\n#   Jupyter Lab Bokeh extension requires NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y )\nRUN jupyter labextension install jupyterlab_bokeh\n#   Install Baselines\n#   (Remove tensorflow from dependencies since we already installed the GPU version,\n#   installing tensorflow again would deactivate GPU support!)\nRUN cd /opt \\\n && git clone https://github.com/openai/baselines.git \\\n && cd baselines \\\n && sed -i '/tensorflow/d' setup.py \\\n && pip install -e .\n#   Install Roboschool\nENV ROBOSCHOOL_PATH=\"/opt/roboschool\"\nRUN git clone https://github.com/openai/roboschool.git /opt/roboschool\nRUN cd /opt \\\n && git clone https://github.com/olegklimov/bullet3 -b roboschool_self_collision \\\n && mkdir bullet3/build \\\n && cd bullet3/build \\\n && cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1 -DCMAKE_INSTALL_PREFIX:PATH=$ROBOSCHOOL_PATH/roboschool/cpp-household/bullet_local_install -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF -DBUILD_UNIT_TESTS=OFF -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF -DBUILD_OPENGL3_DEMOS=OFF .. \\\n && make -j4 \\\n && make install\nRUN pip3 install -e /opt/roboschool\nENV DOCKER_HOME=\"$HOME\"\n#   Install VirtualGL\nRUN dpkg -i /virtualgl_2.5.2_amd64.deb \\\n && rm /virtualgl_2.5.2_amd64.deb\nENV TERM=\"xterm-256color\"\n#   TensorBoard\nEXPOSE 6006/tcp\n#   Jupyter\nEXPOSE 8888/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04 AS glvnd\nMAINTAINER Eric Heiden <heiden@usc.edu>\n#  Set up libglvnd for OpenGL GUI support\nRUN apt-get update \\\n && apt-get install --no-install-recommends git ca-certificates make automake autoconf libtool pkg-config python libxext-dev libx11-dev x11proto-gl-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /opt/libglvnd\nRUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends gcc-multilib libxext-dev:i386 libx11-dev:i386 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  32-bit libraries\nRUN make distclean \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/i386-linux-gnu --host=i386-linux-gnu \"CFLAGS=-m32\" \"CXXFLAGS=-m32\" \"LDFLAGS=-m32\" \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/i386-linux-gnu -type f -name 'lib*.la' -delete\nFROM tensorflow/tensorflow:1.8.0-gpu-py3\nCOPY --from=glvnd /usr/local/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu\nCOPY --from=glvnd /usr/local/lib/i386-linux-gnu /usr/local/lib/i386-linux-gnu\nCOPY internal/10_nvidia.json /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && echo '/usr/local/lib/i386-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/lib/x86_64-linux-gnu:/usr/local/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES},display\"\nARG USER\nARG HOME\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    USER=\"$USER\" \\\n    HOME=\"$HOME\"\nRUN echo \"The working directory is: $HOME\"\nRUN echo \"The user is: $USER\"\nRUN mkdir -p $HOME\nWORKDIR $HOME\nRUN apt-get update \\\n && apt-get install sudo git -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  install dependencies\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential apt-utils curl nano vim libfreetype6-dev libpng12-dev libzmq3-dev git python-numpy python-dev python-opengl cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev libboost-all-dev libsdl2-dev swig libgtk2.0-dev wget ca-certificates unzip aptitude pkg-config qtbase5-dev libqt5opengl5-dev libassimp-dev libpython3.5-dev libboost-python-dev libtinyxml-dev golang python-opencv terminator tmux libcanberra-gtk-module libfuse2 libnss3 fuse python3-tk libglfw3-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev net-tools xpra xserver-xorg-dev libffi-dev libxslt1.1 feedgnuplot libglew-dev parallel htop apt-transport-https\n#  install Sublime Text\nRUN wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - \\\n && echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y sublime-text\nRUN pip3 install --upgrade pip\nCOPY ./internal/ /\n#  Install MuJoCo 1.50 and 1.31\nWORKDIR /opt\nRUN mkdir mujoco \\\n && cd mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip \\\n && unzip mjpro150_linux.zip \\\n && rm mjpro150_linux.zip \\\n && wget https://www.roboti.us/download/mjpro131_linux.zip \\\n && unzip mjpro131_linux.zip \\\n && rm mjpro131_linux.zip \\\n && if [ -f \"/mjkey.txt\" ] ; then mv /mjkey.txt . \\\n && cp mjkey.txt mjpro150/bin/ \\\n && cp mjkey.txt mjpro131/bin/ \\\n && echo \"Installed MuJoCo Key file.\" ; else echo \"Could not find MuJoCo key file (mjkey.txt) in ./internal!\\nPlease copy it manually to ~/.mujoco when inside the docker container.\" 1>&2; fi\nENV MUJOCO_PY_MJPRO_PATH=\"/opt/mujoco/mjpro150\"\nENV MUJOCO_LICENSE_KEY=\"/opt/mujoco/mjkey.txt\"\nENV MUJOCO_PY_MUJOCO_PATH=\"/opt/mujoco\"\nENV LD_LIBRARY_PATH=\"/opt/mujoco/mjpro150/bin:$LD_LIBRARY_PATH\"\n#  Temporarily copy MuJoCo to home folder to install mujoco-py\nRUN mkdir ~/.mujoco \\\n && cp -r /opt/mujoco/* ~/.mujoco\nRUN pip3 --no-cache-dir install gym[all]==0.10.3 mujoco-py scikit-image plotly ipykernel jupyter jupyterlab matplotlib numpy scipy sklearn pandas Pillow empy tqdm pyopengl ipdb cloudpickle imageio mpi4py jsonpickle gtimer path.py cached-property flask joblib lasagne PyOpenGL six pyprind virtualenv\n#  Set up permissions to use same UID and GID as host system user\n#  https://denibertovic.com/posts/handling-permissions-with-docker-volumes/\nRUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;).asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#  disable password prompt for sudo\nRUN echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo env EDITOR=\"tee -a\" visudo\n#  Install Anaconda 3\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b -p /opt/conda \\\n && rm ~/anaconda.sh\n#  Install Jupyter Lab\nRUN jupyter serverextension enable --py jupyterlab --sys-prefix\n#  Jupyter Lab Bokeh extension requires NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - \\\n && apt-get install nodejs -y\nRUN jupyter labextension install jupyterlab_bokeh\n#  Install Baselines\n#  (Remove tensorflow from dependencies since we already installed the GPU version,\n#  installing tensorflow again would deactivate GPU support!)\nRUN cd /opt \\\n && git clone https://github.com/openai/baselines.git \\\n && cd baselines \\\n && sed -i '/tensorflow/d' setup.py \\\n && pip install -e .\n#  Install Roboschool\nENV ROBOSCHOOL_PATH=\"/opt/roboschool\"\nRUN git clone https://github.com/openai/roboschool.git /opt/roboschool\nRUN cd /opt \\\n && git clone https://github.com/olegklimov/bullet3 -b roboschool_self_collision \\\n && mkdir bullet3/build \\\n && cd bullet3/build \\\n && cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1 -DCMAKE_INSTALL_PREFIX:PATH=$ROBOSCHOOL_PATH/roboschool/cpp-household/bullet_local_install -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF -DBUILD_UNIT_TESTS=OFF -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF -DBUILD_OPENGL3_DEMOS=OFF .. \\\n && make -j4 \\\n && make install\nRUN pip3 install -e /opt/roboschool\nENV DOCKER_HOME=\"$HOME\"\n#  Install VirtualGL\nRUN dpkg -i /virtualgl_2.5.2_amd64.deb \\\n && rm /virtualgl_2.5.2_amd64.deb\nENV TERM=\"xterm-256color\"\n#  TensorBoard\nEXPOSE 6006/tcp\n#  Jupyter\nEXPOSE 8888/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"ea22cc9d2af68a7d7ac20b9f962e6339","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04 AS glvnd\nMAINTAINER Eric Heiden <heiden@usc.edu>\n#   Set up libglvnd for OpenGL GUI support\nRUN apt-get update \\\n && apt-get install --no-install-recommends git ca-certificates make automake autoconf libtool pkg-config python libxext-dev libx11-dev x11proto-gl-dev -y \\\n && rm -rf /var/lib/apt/lists/*\nWORKDIR /opt/libglvnd\nRUN git clone --branch=v1.0.0 https://github.com/NVIDIA/libglvnd.git . \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/x86_64-linux-gnu -type f -name 'lib*.la' -delete\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends gcc-multilib libxext-dev:i386 libx11-dev:i386 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   32-bit libraries\nRUN make distclean \\\n && ./autogen.sh \\\n && ./configure --prefix=/usr/local --libdir=/usr/local/lib/i386-linux-gnu --host=i386-linux-gnu \"CFLAGS=-m32\" \"CXXFLAGS=-m32\" \"LDFLAGS=-m32\" \\\n && make -j\"$( nproc ;)\" install-strip \\\n && find /usr/local/lib/i386-linux-gnu -type f -name 'lib*.la' -delete\nFROM tensorflow/tensorflow:1.8.0-gpu-py3\nCOPY --from=glvnd /usr/local/lib/x86_64-linux-gnu /usr/local/lib/x86_64-linux-gnu\nCOPY --from=glvnd /usr/local/lib/i386-linux-gnu /usr/local/lib/i386-linux-gnu\nCOPY internal/10_nvidia.json /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json\nRUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && echo '/usr/local/lib/i386-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf \\\n && ldconfig\nENV LD_LIBRARY_PATH=\"/usr/local/lib/x86_64-linux-gnu:/usr/local/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES},display\"\nARG USER\nARG HOME\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    USER=\"$USER\" \\\n    HOME=\"$HOME\"\nRUN echo \"The working directory is: $HOME\"\nRUN echo \"The user is: $USER\"\nRUN mkdir -p $HOME\nWORKDIR $HOME\nRUN apt-get update \\\n && apt-get install sudo git -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install dependencies\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential apt-utils curl nano vim libfreetype6-dev libpng12-dev libzmq3-dev git python-numpy python-dev python-opengl cmake zlib1g-dev libjpeg-dev xvfb libav-tools xorg-dev libboost-all-dev libsdl2-dev swig libgtk2.0-dev wget ca-certificates unzip aptitude pkg-config qtbase5-dev libqt5opengl5-dev libassimp-dev libpython3.5-dev libboost-python-dev libtinyxml-dev golang python-opencv terminator tmux libcanberra-gtk-module libfuse2 libnss3 fuse python3-tk libglfw3-dev libgl1-mesa-dev libgl1-mesa-glx libglew-dev libosmesa6-dev net-tools xpra xserver-xorg-dev libffi-dev libxslt1.1 feedgnuplot libglew-dev parallel htop apt-transport-https\n#   install Sublime Text\nRUN wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - \\\n && echo \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y sublime-text\nRUN pip3 install --upgrade pip\nCOPY ./internal/ /\n#   Install MuJoCo 1.50 and 1.31\nWORKDIR /opt\nRUN mkdir mujoco \\\n && cd mujoco \\\n && wget https://www.roboti.us/download/mjpro150_linux.zip \\\n && unzip mjpro150_linux.zip \\\n && rm mjpro150_linux.zip \\\n && wget https://www.roboti.us/download/mjpro131_linux.zip \\\n && unzip mjpro131_linux.zip \\\n && rm mjpro131_linux.zip \\\n && if [ -f \"/mjkey.txt\" ] ; then mv /mjkey.txt . \\\n && cp mjkey.txt mjpro150/bin/ \\\n && cp mjkey.txt mjpro131/bin/ \\\n && echo \"Installed MuJoCo Key file.\" ; else echo \"Could not find MuJoCo key file (mjkey.txt) in ./internal!\\nPlease copy it manually to ~/.mujoco when inside the docker container.\" 1>&2; fi\nENV MUJOCO_PY_MJPRO_PATH=\"/opt/mujoco/mjpro150\"\nENV MUJOCO_LICENSE_KEY=\"/opt/mujoco/mjkey.txt\"\nENV MUJOCO_PY_MUJOCO_PATH=\"/opt/mujoco\"\nENV LD_LIBRARY_PATH=\"/opt/mujoco/mjpro150/bin:$LD_LIBRARY_PATH\"\n#   Temporarily copy MuJoCo to home folder to install mujoco-py\nRUN mkdir ~/.mujoco \\\n && cp -r /opt/mujoco/* ~/.mujoco\nRUN pip3 --no-cache-dir install gym[all]==0.10.3 mujoco-py scikit-image plotly ipykernel jupyter jupyterlab matplotlib numpy scipy sklearn pandas Pillow empy tqdm pyopengl ipdb cloudpickle imageio mpi4py jsonpickle gtimer path.py cached-property flask joblib lasagne PyOpenGL six pyprind virtualenv\n#   Set up permissions to use same UID and GID as host system user\n#   https://denibertovic.com/posts/handling-permissions-with-docker-volumes/\nRUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4\nRUN curl -o /usr/local/bin/gosu -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;)\" \\\n && curl -o /usr/local/bin/gosu.asc -SL \"https://github.com/tianon/gosu/releases/download/1.4/gosu-$( dpkg --print-architecture ;).asc\" \\\n && gpg --verify /usr/local/bin/gosu.asc \\\n && rm /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu\n#   disable password prompt for sudo\nRUN echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo env EDITOR=\"tee -a\" visudo\n#   Install Anaconda 3\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh -O ~/anaconda.sh \\\n && /bin/bash ~/anaconda.sh -b -p /opt/conda \\\n && rm ~/anaconda.sh\n#   Install Jupyter Lab\nRUN jupyter serverextension enable --py jupyterlab --sys-prefix\n#   Jupyter Lab Bokeh extension requires NodeJS\nRUN curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - \\\n && apt-get install nodejs -y\nRUN jupyter labextension install jupyterlab_bokeh\n#   Install Baselines\n#   (Remove tensorflow from dependencies since we already installed the GPU version,\n#   installing tensorflow again would deactivate GPU support!)\nRUN cd /opt \\\n && git clone https://github.com/openai/baselines.git \\\n && cd baselines \\\n && sed -i '/tensorflow/d' setup.py \\\n && pip install -e .\n#   Install Roboschool\nENV ROBOSCHOOL_PATH=\"/opt/roboschool\"\nRUN git clone https://github.com/openai/roboschool.git /opt/roboschool\nRUN cd /opt \\\n && git clone https://github.com/olegklimov/bullet3 -b roboschool_self_collision \\\n && mkdir bullet3/build \\\n && cd bullet3/build \\\n && cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1 -DCMAKE_INSTALL_PREFIX:PATH=$ROBOSCHOOL_PATH/roboschool/cpp-household/bullet_local_install -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF -DBUILD_UNIT_TESTS=OFF -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF -DBUILD_OPENGL3_DEMOS=OFF .. \\\n && make -j4 \\\n && make install\nRUN pip3 install -e /opt/roboschool\nENV DOCKER_HOME=\"$HOME\"\n#   Install VirtualGL\nRUN dpkg -i /virtualgl_2.5.2_amd64.deb \\\n && rm /virtualgl_2.5.2_amd64.deb\nENV TERM=\"xterm-256color\"\n#   TensorBoard\nEXPOSE 6006/tcp\n#   Jupyter\nEXPOSE 8888/tcp\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"c4e17e4802b730a32ad5f4be3db1ff9a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9cbcf97997b3263d71ba39b7d891eaae2cf994c3.dockerfile"}