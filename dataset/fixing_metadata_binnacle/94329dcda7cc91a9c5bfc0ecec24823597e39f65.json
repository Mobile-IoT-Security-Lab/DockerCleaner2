{"seed":1722999098,"processedDockerfileHash":"fcca2d58167b04c7b460246b1090d5d2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Docker is a fast & lightweight container-based virtualization framework.\n#\n#   General info:\n#     http://docker.io/\n#\n#   Dockerfile reference:\n#     http://docs.docker.io/reference/builder/\n#\n#   Quickstart:\n#\n#     # Build the image\n#     docker build -t my_changes .\n#\n#     # Create a new container called \"changes\" using the image built above\n#     docker run -d --name=changes -p 127.0.0.1:5000:5000 my_changes\n#   Ubuntu 14.04, with a proper init(8) for docker.\n#   https://phusion.github.io/baseimage-docker\nFROM phusion/baseimage:0.9.10\n#   Put your name here if you volunteer to maintain this. :)\n#  MAINTAINER nobody\n#   Before installing postgrsql, make sure the we're in a UTF-8 locale.\nRUN update-locale --reset LANG=en_US.UTF-8 LANGUAGE=en_US:en\n#   System-wide dependencies\n#  RUN echo 'Acquire::http::Proxy { \"http://172.17.42.1:3142\"; };' > /etc/apt/apt.conf.d/install-apt-proxy\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends python-all python-all-dev python-pip python-virtualenv python-tox python3-all python3-all-dev python3-pip libxml2-dev libev-dev libxslt1-dev nodejs npm postgresql libpq-dev redis-server git mercurial supervisor -qy ) \\\n && apt-get -qy upgrade \\\n && ln -s /usr/bin/nodejs /usr/local/bin/node \\\n && npm install bower@1.8.14 -g\n#  RUN rm -f /etc/apt/apt.conf.d/install-apt-proxy\n#   Wipe out any SSH host keys that may have been installed\nRUN rm -f /etc/ssh/ssh_host_*key*\n#   Early configuration (custom configuration should happen after the image is built)\nENV CHANGES_CONF=\"/etc/changes/config.py\"\nCOPY docs/examples/changes.conf.py /etc/changes/config.py\n#   Clone the repo\nRUN git clone -q https://github.com/dropbox/changes /srv/changes\n#  # Clone the repo more quickly using a copy of the local repo\n#  # NOTE: There could be privacy implications of shipping this in a public\n#  # image, so we delete it after we're done.\n#  ADD .git /tmp/changes.git\n#  RUN git clone -q --reference /tmp/changes.git https://github.com/dropbox/changes /srv/changes\n#\n#   Detach and remove the local repo copy\n#  RUN cd /srv/changes && \\\n#      git repack -a && \\\n#      rm -f .git/objects/info/alternates && \\\n#      git gc --aggressive --prune=all && \\\n#      rm -rf /tmp/changes.git\n#   Create user\nRUN adduser --gecos '' --disabled-password changes \\\n && /etc/init.d/postgresql start \\\n && su postgres -c \"createuser --createdb changes\" \\\n && /etc/init.d/postgresql stop\n#   Install application dependencies\nRUN chown -R changes:changes /srv/changes \\\n && su changes -c ' cd /srv/changes \\\n && virtualenv env \\\n && . env/bin/activate \\\n && make install-requirements install-test-requirements'\n#   Check out a more recent copy of the sources\n#   XXX - remove this once pushed; this really hurts performance\n#  ADD .git /tmp/changes.git\n#  RUN \\\n#      cd /srv/changes && \\\n#      git fetch /tmp/changes.git && \\\n#      git checkout -b dev-hack FETCH_HEAD && \\\n#      git repack -a && \\\n#      git gc --aggressive --prune=all && \\\n#      rm -rf /tmp/changes.git\n#   XXX - another hack -- adopt our Makefile changes without the docker/docker.mk stuff\n#   TODO remove this once pushed\n#  ADD Makefile /srv/changes/Makefile\n#  RUN mkdir /srv/changes/docker && touch /srv/changes/docker/docker.mk\n#   Populate the database and generate static assets\n#   TODO Replace 'createdb -E utf-8 changes' with 'make createdb' once the Makefile lands\nRUN /etc/init.d/postgresql start \\\n && su changes -c 'cd /srv/changes \\\n && . env/bin/activate \\\n && createdb -E utf-8 changes \\\n && make upgrade' \\\n && /etc/init.d/postgresql stop\n#   Add a few more helper scripts & config files\nCOPY docker/supervisord.conf /etc/supervisor/conf.d/changes.conf\nCOPY docker/supervisor-run /etc/service/supervisor/run\n#   Configure openssh server\n#   - HostKey algorithms:\n#     - rsa -- 2048-bit & used for compatibility\n#     - ed25519 -- used for speed & resistance to timing attacks\n#     - no dsa -- 1024-bit & showing signs of age\n#     - no ecdsa -- curve might not be secure (NIST secp256r1) and not particularly fast\n#   - Authentication: publickey only\n#   - Don't delay login with reverse DNS lookups\n#   - Get authorized_keys from the environment.\nRUN sed -E -i~ -e '/^(PasswordAuthentication|ChallengeResponseAuthentication|PermitRootLogin|UseDNS|HostKey|AuthorizedKeysFile)\\b/s/^/#/' /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_rsa_key' >> /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_ed25519_key' >> /etc/ssh/sshd_config \\\n && echo 'PermitRootLogin without-password' >> /etc/ssh/sshd_config \\\n && echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'ChallengeResponseAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'UseDNS no' >> /etc/ssh/sshd_config \\\n && echo 'AuthorizedKeysFile /etc/ssh/authorized_keys/%u /etc/ssh/authorized_keys.env.d/%u .ssh/authorized_keys .ssh/authorized_keys2' >> /etc/ssh/sshd_config\n#   Configure stuff from the container environment\nCOPY docker/10_changes_conf_from_env.py /etc/my_init.d/10_changes_conf_from_env.py\n#   Sanity check\nRUN if ls -l /etc/ssh/ssh_host_*key* > /dev/null 2>&1; then echo \"There should be no SSH host keys on this machine, found:\" >&2;ls -l /etc/ssh/ssh_host_*key* >&2;exit 1 ; fi\n#   Default environment\nENV WEB_BASE_URI=\"http://localhost:5000\"\nENV INTERNAL_BASE_URI=\"http://localhost:5000\"\nENV SERVER_NAME=\"localhost:5000\"\n#   Expose SSH & HTTP ports.  http://localhost:5000\nEXPOSE 22/tcp\nEXPOSE 5000/tcp\n#   Export volumes\n#  VOLUME /srv/changes\n#  VOLUME /var/lib/postgresql\n#  VOLUME /var/lib/redis\n#   Default invocation\nCMD [\"/sbin/my_init\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker is a fast & lightweight container-based virtualization framework.\n#\n#  General info:\n#    http://docker.io/\n#\n#  Dockerfile reference:\n#    http://docs.docker.io/reference/builder/\n#\n#  Quickstart:\n#\n#    # Build the image\n#    docker build -t my_changes .\n#\n#    # Create a new container called \"changes\" using the image built above\n#    docker run -d --name=changes -p 127.0.0.1:5000:5000 my_changes\n#  Ubuntu 14.04, with a proper init(8) for docker.\n#  https://phusion.github.io/baseimage-docker\nFROM phusion/baseimage:0.9.10\n#  Put your name here if you volunteer to maintain this. :)\n# MAINTAINER nobody\n#  Before installing postgrsql, make sure the we're in a UTF-8 locale.\nRUN update-locale --reset LANG=en_US.UTF-8 LANGUAGE=en_US:en\n#  System-wide dependencies\n# RUN echo 'Acquire::http::Proxy { \"http://172.17.42.1:3142\"; };' > /etc/apt/apt.conf.d/install-apt-proxy\nRUN apt-get update -qy\nRUN apt-get install python-all python-all-dev python-pip python-virtualenv python-tox python3-all python3-all-dev python3-pip libxml2-dev libev-dev libxslt1-dev nodejs npm postgresql libpq-dev redis-server git mercurial supervisor -qy \\\n && apt-get -qy upgrade \\\n && ln -s /usr/bin/nodejs /usr/local/bin/node \\\n && npm install bower -g\n# RUN rm -f /etc/apt/apt.conf.d/install-apt-proxy\n#  Wipe out any SSH host keys that may have been installed\nRUN rm -f /etc/ssh/ssh_host_*key*\n#  Early configuration (custom configuration should happen after the image is built)\nENV CHANGES_CONF=\"/etc/changes/config.py\"\nADD docs/examples/changes.conf.py /etc/changes/config.py\n#  Clone the repo\nRUN git clone -q https://github.com/dropbox/changes /srv/changes\n# # Clone the repo more quickly using a copy of the local repo\n# # NOTE: There could be privacy implications of shipping this in a public\n# # image, so we delete it after we're done.\n# ADD .git /tmp/changes.git\n# RUN git clone -q --reference /tmp/changes.git https://github.com/dropbox/changes /srv/changes\n#\n#  Detach and remove the local repo copy\n# RUN cd /srv/changes && \\\n#     git repack -a && \\\n#     rm -f .git/objects/info/alternates && \\\n#     git gc --aggressive --prune=all && \\\n#     rm -rf /tmp/changes.git\n#  Create user\nRUN adduser --gecos '' --disabled-password changes \\\n && /etc/init.d/postgresql start \\\n && su postgres -c \"createuser --createdb changes\" \\\n && /etc/init.d/postgresql stop\n#  Install application dependencies\nRUN chown -R changes:changes /srv/changes \\\n && su changes -c ' cd /srv/changes \\\n && virtualenv env \\\n && . env/bin/activate \\\n && make install-requirements install-test-requirements'\n#  Check out a more recent copy of the sources\n#  XXX - remove this once pushed; this really hurts performance\n# ADD .git /tmp/changes.git\n# RUN \\\n#     cd /srv/changes && \\\n#     git fetch /tmp/changes.git && \\\n#     git checkout -b dev-hack FETCH_HEAD && \\\n#     git repack -a && \\\n#     git gc --aggressive --prune=all && \\\n#     rm -rf /tmp/changes.git\n#  XXX - another hack -- adopt our Makefile changes without the docker/docker.mk stuff\n#  TODO remove this once pushed\n# ADD Makefile /srv/changes/Makefile\n# RUN mkdir /srv/changes/docker && touch /srv/changes/docker/docker.mk\n#  Populate the database and generate static assets\n#  TODO Replace 'createdb -E utf-8 changes' with 'make createdb' once the Makefile lands\nRUN /etc/init.d/postgresql start \\\n && su changes -c 'cd /srv/changes \\\n && . env/bin/activate \\\n && createdb -E utf-8 changes \\\n && make upgrade' \\\n && /etc/init.d/postgresql stop\n#  Add a few more helper scripts & config files\nADD docker/supervisord.conf /etc/supervisor/conf.d/changes.conf\nADD docker/supervisor-run /etc/service/supervisor/run\n#  Configure openssh server\n#  - HostKey algorithms:\n#    - rsa -- 2048-bit & used for compatibility\n#    - ed25519 -- used for speed & resistance to timing attacks\n#    - no dsa -- 1024-bit & showing signs of age\n#    - no ecdsa -- curve might not be secure (NIST secp256r1) and not particularly fast\n#  - Authentication: publickey only\n#  - Don't delay login with reverse DNS lookups\n#  - Get authorized_keys from the environment.\nRUN sed -E -i~ -e '/^(PasswordAuthentication|ChallengeResponseAuthentication|PermitRootLogin|UseDNS|HostKey|AuthorizedKeysFile)\\b/s/^/#/' /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_rsa_key' >> /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_ed25519_key' >> /etc/ssh/sshd_config \\\n && echo 'PermitRootLogin without-password' >> /etc/ssh/sshd_config \\\n && echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'ChallengeResponseAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'UseDNS no' >> /etc/ssh/sshd_config \\\n && echo 'AuthorizedKeysFile /etc/ssh/authorized_keys/%u /etc/ssh/authorized_keys.env.d/%u .ssh/authorized_keys .ssh/authorized_keys2' >> /etc/ssh/sshd_config\n#  Configure stuff from the container environment\nADD docker/10_changes_conf_from_env.py /etc/my_init.d/10_changes_conf_from_env.py\n#  Sanity check\nRUN if ls -l /etc/ssh/ssh_host_*key* > /dev/null 2>&1; then echo \"There should be no SSH host keys on this machine, found:\" >&2;ls -l /etc/ssh/ssh_host_*key* >&2;exit 1 ; fi\n#  Default environment\nENV WEB_BASE_URI=\"http://localhost:5000\"\nENV INTERNAL_BASE_URI=\"http://localhost:5000\"\nENV SERVER_NAME=\"localhost:5000\"\n#  Expose SSH & HTTP ports.  http://localhost:5000\nEXPOSE 22/tcp\nEXPOSE 5000/tcp\n#  Export volumes\n# VOLUME /srv/changes\n# VOLUME /var/lib/postgresql\n# VOLUME /var/lib/redis\n#  Default invocation\nCMD [\"/sbin/my_init\"]\n","injectedSmells":[],"originalDockerfileHash":"d6ad5a473d0dca66501473dc66b2e13a","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker is a fast & lightweight container-based virtualization framework.\n#\n#   General info:\n#     http://docker.io/\n#\n#   Dockerfile reference:\n#     http://docs.docker.io/reference/builder/\n#\n#   Quickstart:\n#\n#     # Build the image\n#     docker build -t my_changes .\n#\n#     # Create a new container called \"changes\" using the image built above\n#     docker run -d --name=changes -p 127.0.0.1:5000:5000 my_changes\n#   Ubuntu 14.04, with a proper init(8) for docker.\n#   https://phusion.github.io/baseimage-docker\nFROM phusion/baseimage:0.9.10\n#   Put your name here if you volunteer to maintain this. :)\n#  MAINTAINER nobody\n#   Before installing postgrsql, make sure the we're in a UTF-8 locale.\nRUN update-locale --reset LANG=en_US.UTF-8 LANGUAGE=en_US:en\n#   System-wide dependencies\n#  RUN echo 'Acquire::http::Proxy { \"http://172.17.42.1:3142\"; };' > /etc/apt/apt.conf.d/install-apt-proxy\nRUN apt-get update -qy\nRUN apt-get install python-all python-all-dev python-pip python-virtualenv python-tox python3-all python3-all-dev python3-pip libxml2-dev libev-dev libxslt1-dev nodejs npm postgresql libpq-dev redis-server git mercurial supervisor -qy \\\n && apt-get -qy upgrade \\\n && ln -s /usr/bin/nodejs /usr/local/bin/node \\\n && npm install bower -g\n#  RUN rm -f /etc/apt/apt.conf.d/install-apt-proxy\n#   Wipe out any SSH host keys that may have been installed\nRUN rm -f /etc/ssh/ssh_host_*key*\n#   Early configuration (custom configuration should happen after the image is built)\nENV CHANGES_CONF=\"/etc/changes/config.py\"\nADD docs/examples/changes.conf.py /etc/changes/config.py\n#   Clone the repo\nRUN git clone -q https://github.com/dropbox/changes /srv/changes\n#  # Clone the repo more quickly using a copy of the local repo\n#  # NOTE: There could be privacy implications of shipping this in a public\n#  # image, so we delete it after we're done.\n#  ADD .git /tmp/changes.git\n#  RUN git clone -q --reference /tmp/changes.git https://github.com/dropbox/changes /srv/changes\n#\n#   Detach and remove the local repo copy\n#  RUN cd /srv/changes && \\\n#      git repack -a && \\\n#      rm -f .git/objects/info/alternates && \\\n#      git gc --aggressive --prune=all && \\\n#      rm -rf /tmp/changes.git\n#   Create user\nRUN adduser --gecos '' --disabled-password changes \\\n && /etc/init.d/postgresql start \\\n && su postgres -c \"createuser --createdb changes\" \\\n && /etc/init.d/postgresql stop\n#   Install application dependencies\nRUN chown -R changes:changes /srv/changes \\\n && su changes -c ' cd /srv/changes \\\n && virtualenv env \\\n && . env/bin/activate \\\n && make install-requirements install-test-requirements'\n#   Check out a more recent copy of the sources\n#   XXX - remove this once pushed; this really hurts performance\n#  ADD .git /tmp/changes.git\n#  RUN \\\n#      cd /srv/changes && \\\n#      git fetch /tmp/changes.git && \\\n#      git checkout -b dev-hack FETCH_HEAD && \\\n#      git repack -a && \\\n#      git gc --aggressive --prune=all && \\\n#      rm -rf /tmp/changes.git\n#   XXX - another hack -- adopt our Makefile changes without the docker/docker.mk stuff\n#   TODO remove this once pushed\n#  ADD Makefile /srv/changes/Makefile\n#  RUN mkdir /srv/changes/docker && touch /srv/changes/docker/docker.mk\n#   Populate the database and generate static assets\n#   TODO Replace 'createdb -E utf-8 changes' with 'make createdb' once the Makefile lands\nRUN /etc/init.d/postgresql start \\\n && su changes -c 'cd /srv/changes \\\n && . env/bin/activate \\\n && createdb -E utf-8 changes \\\n && make upgrade' \\\n && /etc/init.d/postgresql stop\n#   Add a few more helper scripts & config files\nADD docker/supervisord.conf /etc/supervisor/conf.d/changes.conf\nADD docker/supervisor-run /etc/service/supervisor/run\n#   Configure openssh server\n#   - HostKey algorithms:\n#     - rsa -- 2048-bit & used for compatibility\n#     - ed25519 -- used for speed & resistance to timing attacks\n#     - no dsa -- 1024-bit & showing signs of age\n#     - no ecdsa -- curve might not be secure (NIST secp256r1) and not particularly fast\n#   - Authentication: publickey only\n#   - Don't delay login with reverse DNS lookups\n#   - Get authorized_keys from the environment.\nRUN sed -E -i~ -e '/^(PasswordAuthentication|ChallengeResponseAuthentication|PermitRootLogin|UseDNS|HostKey|AuthorizedKeysFile)\\b/s/^/#/' /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_rsa_key' >> /etc/ssh/sshd_config \\\n && echo 'HostKey /etc/ssh/ssh_host_ed25519_key' >> /etc/ssh/sshd_config \\\n && echo 'PermitRootLogin without-password' >> /etc/ssh/sshd_config \\\n && echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'ChallengeResponseAuthentication no' >> /etc/ssh/sshd_config \\\n && echo 'UseDNS no' >> /etc/ssh/sshd_config \\\n && echo 'AuthorizedKeysFile /etc/ssh/authorized_keys/%u /etc/ssh/authorized_keys.env.d/%u .ssh/authorized_keys .ssh/authorized_keys2' >> /etc/ssh/sshd_config\n#   Configure stuff from the container environment\nADD docker/10_changes_conf_from_env.py /etc/my_init.d/10_changes_conf_from_env.py\n#   Sanity check\nRUN if ls -l /etc/ssh/ssh_host_*key* > /dev/null 2>&1; then echo \"There should be no SSH host keys on this machine, found:\" >&2;ls -l /etc/ssh/ssh_host_*key* >&2;exit 1 ; fi\n#   Default environment\nENV WEB_BASE_URI=\"http://localhost:5000\"\nENV INTERNAL_BASE_URI=\"http://localhost:5000\"\nENV SERVER_NAME=\"localhost:5000\"\n#   Expose SSH & HTTP ports.  http://localhost:5000\nEXPOSE 22/tcp\nEXPOSE 5000/tcp\n#   Export volumes\n#  VOLUME /srv/changes\n#  VOLUME /var/lib/postgresql\n#  VOLUME /var/lib/redis\n#   Default invocation\nCMD [\"/sbin/my_init\"]\n","originalDockerfileUglifiedHash":"76542b9390c57a003b0922bb588a3287","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/94329dcda7cc91a9c5bfc0ecec24823597e39f65.dockerfile"}