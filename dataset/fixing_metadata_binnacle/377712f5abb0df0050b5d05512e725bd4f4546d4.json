{"seed":1980721412,"processedDockerfileHash":"a0b7f10598d8316b72c5d7d5acbfa2b3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Python Dependencies\n#\nFROM alpine:3.9.3 AS python\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories\nRUN apk add python python-dev libffi-dev=3.2.1-r6 gcc=8.3.0-r0 py-pip py-virtualenv=15.1.0-r0 linux-headers=4.18.13-r1 musl-dev=1.1.20-r6 openssl-dev=1.1.1k-r0 make=4.2.1-r2\nCOPY requirements.txt /requirements.txt\nRUN pip install --install-option=\"--prefix=/dist\" -r /requirements.txt --no-build-isolation\n#\n#   Google Cloud SDK\n#\nFROM google/cloud-sdk:244.0.0-alpine AS google-cloud-sdk\n#\n#   Cloud Posse Package Distribution\n#\nFROM cloudposse/packages:0.90.0 AS packages\nWORKDIR /packages\n#\n#   Install the select packages from the cloudposse package manager image\n#\n#   Repo: <https://github.com/cloudposse/packages>\n#\nARG PACKAGES=\"cfssl cfssljson\"\nENV PACKAGES=\"${PACKAGES}\"\nRUN make dist\n#\n#   Geodesic base image\n#\nFROM alpine:3.9.3\nENV BANNER=\"\\\"geodesic\\\"\"\nENV MOTD_URL=\"http://geodesic.sh/motd\"\nENV HOME=\"/conf\"\nENV KOPS_CLUSTER_NAME=\"example.foo.bar\"\n#   Install all packages as root\nUSER root\n#   Install the cloudposse alpine repository\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /etc/apk/keys/ https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub\nRUN echo \"@cloudposse https://apk.cloudposse.com/3.9/vendor\" >> /etc/apk/repositories\n#   Use TLS for alpine default repos\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories \\\n && echo \"@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing\" >> /etc/apk/repositories \\\n && echo \"@community https://alpine.global.ssl.fastly.net/alpine/edge/community\" >> /etc/apk/repositories\n#   Install alpine package manifest\nCOPY packages.txt /etc/apk/\n#   Install repo checksum in an attempt to ensure updates bust the Docker build cache\nCOPY geodesic_apkindex.md5 /var/cache/apk/\nCOPY rootfs/usr/local/bin/geodesic-apkindex-md5 /tmp/\nRUN apk add $( grep -v '^#' /etc/apk/packages.txt ;) --update \\\n && mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf \\\n && touch /conf/.gitconfig\nRUN [[ $( /tmp/geodesic-apkindex-md5 ;) == $( cat /var/cache/apk/geodesic_apkindex.md5 ;) ]] || echo \"WARNING: apk package repos mismatch: '$( /tmp/geodesic-apkindex-md5 ;)' != '$( cat /var/cache/apk/geodesic_apkindex.md5 ;)'\" 1>&2\nRUN rm -f /tmp/geodesic-apkindex-md5\nRUN echo \"net.ipv6.conf.all.disable_ipv6=0\" > /etc/sysctl.d/00-ipv6.conf\n#   Disable vim from reading a swapfile (incompatible with goofys)\nRUN echo 'set noswapfile' >> /etc/vim/vimrc\nWORKDIR /tmp\n#   Copy python dependencies\nCOPY --from=python /dist/ /usr/\n#   Copy installer over to make package upgrades easy\nCOPY --from=packages /packages/install/ /packages/install/\n#   Copy select binary packages\nCOPY --from=packages /dist/ /usr/local/bin/\n#\n#   Install Google Cloud SDK\n#\nENV CLOUDSDK_CONFIG=\"/localhost/.config/gcloud/\"\nCOPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/\nRUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh \\\n && ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ \\\n && gcloud config set core/disable_usage_reporting true --installation \\\n && gcloud config set component_manager/disable_update_check true --installation \\\n && gcloud config set metrics/environment github_docker_image --installation\n#\n#   Configure aws-okta to easily assume roles\n#\nENV AWS_OKTA_ENABLED=\"false\"\n#\n#   Install kubectl\n#\n#   Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc\nRUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh\nENV KUBECTX_COMPLETION_VERSION=\"0.6.2\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /etc/bash_completion.d/kubens.sh https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubens.bash\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /etc/bash_completion.d/kubectx.sh https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubectx.bash\n#\n#   Install kops\n#\nENV KOPS_MANIFEST=\"/conf/kops/manifest.yaml\"\nENV KOPS_TEMPLATE=\"/templates/kops/default.yaml\"\n#  # Set these to better values in child Dockerfile:\n#  ENV KOPS_STATE_STORE s3://undefined\n#  ENV KOPS_STATE_STORE_REGION us-east-1\n#  ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate\nENV KOPS_BASTION_PUBLIC_NAME=\"bastion\"\n#   Set the KOPS_BASE_IMAGE to match your kops version. See:\n#   https://github.com/kubernetes/kops/blob/master/channels/stable\n#   https://github.com/kubernetes/kops/blob/master/docs/images.md\n#\n#   Do not rely on KOPS_BASE_IMAGE being set in Geodesic. This will go away in future versions.\n#   Set it in your /conf/kops/kops.envrc file, along with KUBERNETES_VERSION\n#   ENV KOPS_BASE_IMAGE=kope.io/k8s-1.11-debian-stretch-amd64-hvm-ebs-2018-08-17\nENV KUBECONFIG=\"/dev/shm/kubecfg\"\nENV KUBECONFIG_TEMPLATE=\"/templates/kops/kubecfg.yaml\"\nRUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh\n#   Instance sizes\nENV BASTION_MACHINE_TYPE=\"\\\"t3.small\\\"\"\nENV MASTER_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\nENV NODE_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\n#   Min/Max number of nodes (aka workers)\nENV NODE_MAX_SIZE=\"2\"\nENV NODE_MIN_SIZE=\"2\"\n#\n#   Install helm\n#\nENV HELM_HOME=\"/var/lib/helm\"\nENV HELM_VALUES_PATH=\"${SECRETS_PATH}/helm/values\"\nRUN helm completion bash > /etc/bash_completion.d/helm.sh \\\n && mkdir -p ${HELM_HOME} \\\n && helm init --client-only \\\n && mkdir -p ${HELM_HOME}/plugins\n#\n#   Install helm repos\n#\nRUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \\\n && helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/ \\\n && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \\\n && helm repo update\n#\n#   Install helm plugins\n#\nENV HELM_APPR_VERSION=\"0.7.0\"\nENV HELM_DIFF_VERSION=\"2.11.0+2\"\nENV HELM_EDIT_VERSION=\"0.2.0\"\nENV HELM_GIT_VERSION=\"0.3.0\"\nENV HELM_SECRETS_VERSION=\"1.2.9\"\nENV HELM_S3_VERSION=\"0.7.0\"\nENV HELM_PUSH_VERSION=\"0.7.1\"\nRUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \\\n && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \\\n && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \\\n && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \\\n && helm plugin install https://github.com/aslafy-z/helm-git.git --version ${HELM_GIT_VERSION} \\\n && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \\\n && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}\n#   Enable Atlantis to manage helm\nRUN chmod -R 777 /var/lib/helm\n#   \n#   Install fancy Kube PS1 Prompt\n#\nENV KUBE_PS1_VERSION=\"0.6.0\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /etc/profile.d/prompt:kube-ps1.sh https://raw.githubusercontent.com/jonmosco/kube-ps1/${KUBE_PS1_VERSION}/kube-ps1.sh\n#\n#   AWS\n#\nENV AWS_DATA_PATH=\"/localhost/.aws\"\nENV AWS_CONFIG_FILE=\"${AWS_DATA_PATH}/config\"\nENV AWS_SHARED_CREDENTIALS_FILE=\"${AWS_DATA_PATH}/credentials\"\n#\n#   Configure aws-vault to easily assume roles (not related to HashiCorp Vault)\n#\nENV AWS_VAULT_ENABLED=\"true\"\nENV AWS_VAULT_SERVER_ENABLED=\"false\"\nENV AWS_VAULT_BACKEND=\"file\"\nENV AWS_VAULT_ASSUME_ROLE_TTL=\"1h\"\nENV AWS_VAULT_SESSION_TTL=\"12h\"\n#  ENV AWS_VAULT_FILE_PASSPHRASE=\n#\n#   Shell\n#\nENV SHELL=\"/bin/bash\"\nENV LESS=\"R\"\nENV SSH_AGENT_CONFIG=\"/var/tmp/.ssh-agent\"\n#   Set a default terminal to \"dumb\" (headless) to make `tput` happy\nENV TERM=\"dumb\"\n#   Reduce `make` verbosity\nENV MAKEFLAGS=\"--no-print-directory\"\nENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n#   This is not a \"multi-user\" system, so we'll use `/etc` as the global configuration dir\n#   Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\nENV XDG_CONFIG_HOME=\"/etc\"\n#   Clean up file modes for scripts\nRUN find ${XDG_CONFIG_HOME} -type f -name '*.sh' -exec chmod 755 {}\n#   Install \"root\" filesystem\nCOPY rootfs/ /\n#   Install documentation\nCOPY docs/ /usr/share/docs/\n#   Build man pages\nRUN /usr/local/bin/docs update\nWORKDIR /conf\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"-c\", \"init\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Python Dependencies\n#\nFROM alpine:3.9.3 AS python\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories\nRUN apk add python python-dev libffi-dev gcc py-pip py-virtualenv linux-headers musl-dev openssl-dev make\nCOPY requirements.txt /requirements.txt\nRUN pip install --install-option=\"--prefix=/dist\" -r /requirements.txt --no-build-isolation\n#\n#  Google Cloud SDK\n#\nFROM google/cloud-sdk:244.0.0-alpine AS google-cloud-sdk\n#\n#  Cloud Posse Package Distribution\n#\nFROM cloudposse/packages:0.90.0 AS packages\nWORKDIR /packages\n#\n#  Install the select packages from the cloudposse package manager image\n#\n#  Repo: <https://github.com/cloudposse/packages>\n#\nARG PACKAGES=\"cfssl cfssljson\"\nENV PACKAGES=\"${PACKAGES}\"\nRUN make dist\n#\n#  Geodesic base image\n#\nFROM alpine:3.9.3\nENV BANNER=\"\\\"geodesic\\\"\"\nENV MOTD_URL=\"http://geodesic.sh/motd\"\nENV HOME=\"/conf\"\nENV KOPS_CLUSTER_NAME=\"example.foo.bar\"\n#  Install all packages as root\nUSER root\n#  Install the cloudposse alpine repository\nADD https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub /etc/apk/keys/\nRUN echo \"@cloudposse https://apk.cloudposse.com/3.9/vendor\" >> /etc/apk/repositories\n#  Use TLS for alpine default repos\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories \\\n && echo \"@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing\" >> /etc/apk/repositories \\\n && echo \"@community https://alpine.global.ssl.fastly.net/alpine/edge/community\" >> /etc/apk/repositories\n#  Install alpine package manifest\nCOPY packages.txt /etc/apk/\n#  Install repo checksum in an attempt to ensure updates bust the Docker build cache\nCOPY geodesic_apkindex.md5 /var/cache/apk/\nCOPY rootfs/usr/local/bin/geodesic-apkindex-md5 /tmp/\nRUN apk add --update $( grep -v '^#' /etc/apk/packages.txt ;) \\\n && mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf \\\n && touch /conf/.gitconfig\nRUN [[ $( /tmp/geodesic-apkindex-md5 ;) == $( cat /var/cache/apk/geodesic_apkindex.md5 ;) ]] || echo \"WARNING: apk package repos mismatch: '$( /tmp/geodesic-apkindex-md5 ;)' != '$( cat /var/cache/apk/geodesic_apkindex.md5 ;)'\" 1>&2\nRUN rm -f /tmp/geodesic-apkindex-md5\nRUN echo \"net.ipv6.conf.all.disable_ipv6=0\" > /etc/sysctl.d/00-ipv6.conf\n#  Disable vim from reading a swapfile (incompatible with goofys)\nRUN echo 'set noswapfile' >> /etc/vim/vimrc\nWORKDIR /tmp\n#  Copy python dependencies\nCOPY --from=python /dist/ /usr/\n#  Copy installer over to make package upgrades easy\nCOPY --from=packages /packages/install/ /packages/install/\n#  Copy select binary packages\nCOPY --from=packages /dist/ /usr/local/bin/\n#\n#  Install Google Cloud SDK\n#\nENV CLOUDSDK_CONFIG=\"/localhost/.config/gcloud/\"\nCOPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/\nRUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh \\\n && ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ \\\n && gcloud config set core/disable_usage_reporting true --installation \\\n && gcloud config set component_manager/disable_update_check true --installation \\\n && gcloud config set metrics/environment github_docker_image --installation\n#\n#  Configure aws-okta to easily assume roles\n#\nENV AWS_OKTA_ENABLED=\"false\"\n#\n#  Install kubectl\n#\n#  Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc\nRUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh\nENV KUBECTX_COMPLETION_VERSION=\"0.6.2\"\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubens.bash /etc/bash_completion.d/kubens.sh\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubectx.bash /etc/bash_completion.d/kubectx.sh\n#\n#  Install kops\n#\nENV KOPS_MANIFEST=\"/conf/kops/manifest.yaml\"\nENV KOPS_TEMPLATE=\"/templates/kops/default.yaml\"\n# # Set these to better values in child Dockerfile:\n# ENV KOPS_STATE_STORE s3://undefined\n# ENV KOPS_STATE_STORE_REGION us-east-1\n# ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate\nENV KOPS_BASTION_PUBLIC_NAME=\"bastion\"\n#  Set the KOPS_BASE_IMAGE to match your kops version. See:\n#  https://github.com/kubernetes/kops/blob/master/channels/stable\n#  https://github.com/kubernetes/kops/blob/master/docs/images.md\n#\n#  Do not rely on KOPS_BASE_IMAGE being set in Geodesic. This will go away in future versions.\n#  Set it in your /conf/kops/kops.envrc file, along with KUBERNETES_VERSION\n#  ENV KOPS_BASE_IMAGE=kope.io/k8s-1.11-debian-stretch-amd64-hvm-ebs-2018-08-17\nENV KUBECONFIG=\"/dev/shm/kubecfg\"\nENV KUBECONFIG_TEMPLATE=\"/templates/kops/kubecfg.yaml\"\nRUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh\n#  Instance sizes\nENV BASTION_MACHINE_TYPE=\"\\\"t3.small\\\"\"\nENV MASTER_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\nENV NODE_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\n#  Min/Max number of nodes (aka workers)\nENV NODE_MAX_SIZE=\"2\"\nENV NODE_MIN_SIZE=\"2\"\n#\n#  Install helm\n#\nENV HELM_HOME=\"/var/lib/helm\"\nENV HELM_VALUES_PATH=\"${SECRETS_PATH}/helm/values\"\nRUN helm completion bash > /etc/bash_completion.d/helm.sh \\\n && mkdir -p ${HELM_HOME} \\\n && helm init --client-only \\\n && mkdir -p ${HELM_HOME}/plugins\n#\n#  Install helm repos\n#\nRUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \\\n && helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/ \\\n && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \\\n && helm repo update\n#\n#  Install helm plugins\n#\nENV HELM_APPR_VERSION=\"0.7.0\"\nENV HELM_DIFF_VERSION=\"2.11.0+2\"\nENV HELM_EDIT_VERSION=\"0.2.0\"\nENV HELM_GIT_VERSION=\"0.3.0\"\nENV HELM_SECRETS_VERSION=\"1.2.9\"\nENV HELM_S3_VERSION=\"0.7.0\"\nENV HELM_PUSH_VERSION=\"0.7.1\"\nRUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \\\n && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \\\n && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \\\n && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \\\n && helm plugin install https://github.com/aslafy-z/helm-git.git --version ${HELM_GIT_VERSION} \\\n && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \\\n && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}\n#  Enable Atlantis to manage helm\nRUN chmod -R 777 /var/lib/helm\n#  \n#  Install fancy Kube PS1 Prompt\n#\nENV KUBE_PS1_VERSION=\"0.6.0\"\nADD https://raw.githubusercontent.com/jonmosco/kube-ps1/${KUBE_PS1_VERSION}/kube-ps1.sh /etc/profile.d/prompt:kube-ps1.sh\n#\n#  AWS\n#\nENV AWS_DATA_PATH=\"/localhost/.aws\"\nENV AWS_CONFIG_FILE=\"${AWS_DATA_PATH}/config\"\nENV AWS_SHARED_CREDENTIALS_FILE=\"${AWS_DATA_PATH}/credentials\"\n#\n#  Configure aws-vault to easily assume roles (not related to HashiCorp Vault)\n#\nENV AWS_VAULT_ENABLED=\"true\"\nENV AWS_VAULT_SERVER_ENABLED=\"false\"\nENV AWS_VAULT_BACKEND=\"file\"\nENV AWS_VAULT_ASSUME_ROLE_TTL=\"1h\"\nENV AWS_VAULT_SESSION_TTL=\"12h\"\n# ENV AWS_VAULT_FILE_PASSPHRASE=\n#\n#  Shell\n#\nENV SHELL=\"/bin/bash\"\nENV LESS=\"R\"\nENV SSH_AGENT_CONFIG=\"/var/tmp/.ssh-agent\"\n#  Set a default terminal to \"dumb\" (headless) to make `tput` happy\nENV TERM=\"dumb\"\n#  Reduce `make` verbosity\nENV MAKEFLAGS=\"--no-print-directory\"\nENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n#  This is not a \"multi-user\" system, so we'll use `/etc` as the global configuration dir\n#  Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\nENV XDG_CONFIG_HOME=\"/etc\"\n#  Clean up file modes for scripts\nRUN find ${XDG_CONFIG_HOME} -type f -name '*.sh' -exec chmod 755 {} ;\n#  Install \"root\" filesystem\nCOPY rootfs/ /\n#  Install documentation\nCOPY docs/ /usr/share/docs/\n#  Build man pages\nRUN /usr/local/bin/docs update\nWORKDIR /conf\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"-c\", \"init\"]\n","injectedSmells":[],"originalDockerfileHash":"3fb5f218db25d700455847d2760f6904","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Python Dependencies\n#\nFROM alpine:3.9.3 AS python\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories\nRUN apk add python python-dev libffi-dev gcc py-pip py-virtualenv linux-headers musl-dev openssl-dev make\nCOPY requirements.txt /requirements.txt\nRUN pip install --install-option=\"--prefix=/dist\" -r /requirements.txt --no-build-isolation\n#\n#   Google Cloud SDK\n#\nFROM google/cloud-sdk:244.0.0-alpine AS google-cloud-sdk\n#\n#   Cloud Posse Package Distribution\n#\nFROM cloudposse/packages:0.90.0 AS packages\nWORKDIR /packages\n#\n#   Install the select packages from the cloudposse package manager image\n#\n#   Repo: <https://github.com/cloudposse/packages>\n#\nARG PACKAGES=\"cfssl cfssljson\"\nENV PACKAGES=\"${PACKAGES}\"\nRUN make dist\n#\n#   Geodesic base image\n#\nFROM alpine:3.9.3\nENV BANNER=\"\\\"geodesic\\\"\"\nENV MOTD_URL=\"http://geodesic.sh/motd\"\nENV HOME=\"/conf\"\nENV KOPS_CLUSTER_NAME=\"example.foo.bar\"\n#   Install all packages as root\nUSER root\n#   Install the cloudposse alpine repository\nADD https://apk.cloudposse.com/ops@cloudposse.com.rsa.pub /etc/apk/keys/\nRUN echo \"@cloudposse https://apk.cloudposse.com/3.9/vendor\" >> /etc/apk/repositories\n#   Use TLS for alpine default repos\nRUN sed -i 's|http://dl-cdn.alpinelinux.org|https://alpine.global.ssl.fastly.net|g' /etc/apk/repositories \\\n && echo \"@testing https://alpine.global.ssl.fastly.net/alpine/edge/testing\" >> /etc/apk/repositories \\\n && echo \"@community https://alpine.global.ssl.fastly.net/alpine/edge/community\" >> /etc/apk/repositories\n#   Install alpine package manifest\nCOPY packages.txt /etc/apk/\n#   Install repo checksum in an attempt to ensure updates bust the Docker build cache\nCOPY geodesic_apkindex.md5 /var/cache/apk/\nCOPY rootfs/usr/local/bin/geodesic-apkindex-md5 /tmp/\nRUN apk add --update $( grep -v '^#' /etc/apk/packages.txt ;) \\\n && mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf \\\n && touch /conf/.gitconfig\nRUN [[ $( /tmp/geodesic-apkindex-md5 ;) == $( cat /var/cache/apk/geodesic_apkindex.md5 ;) ]] || echo \"WARNING: apk package repos mismatch: '$( /tmp/geodesic-apkindex-md5 ;)' != '$( cat /var/cache/apk/geodesic_apkindex.md5 ;)'\" 1>&2\nRUN rm -f /tmp/geodesic-apkindex-md5\nRUN echo \"net.ipv6.conf.all.disable_ipv6=0\" > /etc/sysctl.d/00-ipv6.conf\n#   Disable vim from reading a swapfile (incompatible with goofys)\nRUN echo 'set noswapfile' >> /etc/vim/vimrc\nWORKDIR /tmp\n#   Copy python dependencies\nCOPY --from=python /dist/ /usr/\n#   Copy installer over to make package upgrades easy\nCOPY --from=packages /packages/install/ /packages/install/\n#   Copy select binary packages\nCOPY --from=packages /dist/ /usr/local/bin/\n#\n#   Install Google Cloud SDK\n#\nENV CLOUDSDK_CONFIG=\"/localhost/.config/gcloud/\"\nCOPY --from=google-cloud-sdk /google-cloud-sdk/ /usr/local/google-cloud-sdk/\nRUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh \\\n && ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ \\\n && ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ \\\n && gcloud config set core/disable_usage_reporting true --installation \\\n && gcloud config set component_manager/disable_update_check true --installation \\\n && gcloud config set metrics/environment github_docker_image --installation\n#\n#   Configure aws-okta to easily assume roles\n#\nENV AWS_OKTA_ENABLED=\"false\"\n#\n#   Install kubectl\n#\n#   Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc\nRUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh\nENV KUBECTX_COMPLETION_VERSION=\"0.6.2\"\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubens.bash /etc/bash_completion.d/kubens.sh\nADD https://raw.githubusercontent.com/ahmetb/kubectx/v${KUBECTX_COMPLETION_VERSION}/completion/kubectx.bash /etc/bash_completion.d/kubectx.sh\n#\n#   Install kops\n#\nENV KOPS_MANIFEST=\"/conf/kops/manifest.yaml\"\nENV KOPS_TEMPLATE=\"/templates/kops/default.yaml\"\n#  # Set these to better values in child Dockerfile:\n#  ENV KOPS_STATE_STORE s3://undefined\n#  ENV KOPS_STATE_STORE_REGION us-east-1\n#  ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate\nENV KOPS_BASTION_PUBLIC_NAME=\"bastion\"\n#   Set the KOPS_BASE_IMAGE to match your kops version. See:\n#   https://github.com/kubernetes/kops/blob/master/channels/stable\n#   https://github.com/kubernetes/kops/blob/master/docs/images.md\n#\n#   Do not rely on KOPS_BASE_IMAGE being set in Geodesic. This will go away in future versions.\n#   Set it in your /conf/kops/kops.envrc file, along with KUBERNETES_VERSION\n#   ENV KOPS_BASE_IMAGE=kope.io/k8s-1.11-debian-stretch-amd64-hvm-ebs-2018-08-17\nENV KUBECONFIG=\"/dev/shm/kubecfg\"\nENV KUBECONFIG_TEMPLATE=\"/templates/kops/kubecfg.yaml\"\nRUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh\n#   Instance sizes\nENV BASTION_MACHINE_TYPE=\"\\\"t3.small\\\"\"\nENV MASTER_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\nENV NODE_MACHINE_TYPE=\"\\\"t3.medium\\\"\"\n#   Min/Max number of nodes (aka workers)\nENV NODE_MAX_SIZE=\"2\"\nENV NODE_MIN_SIZE=\"2\"\n#\n#   Install helm\n#\nENV HELM_HOME=\"/var/lib/helm\"\nENV HELM_VALUES_PATH=\"${SECRETS_PATH}/helm/values\"\nRUN helm completion bash > /etc/bash_completion.d/helm.sh \\\n && mkdir -p ${HELM_HOME} \\\n && helm init --client-only \\\n && mkdir -p ${HELM_HOME}/plugins\n#\n#   Install helm repos\n#\nRUN helm repo add cloudposse-incubator https://charts.cloudposse.com/incubator/ \\\n && helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/ \\\n && helm repo add coreos-stable https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/ \\\n && helm repo update\n#\n#   Install helm plugins\n#\nENV HELM_APPR_VERSION=\"0.7.0\"\nENV HELM_DIFF_VERSION=\"2.11.0+2\"\nENV HELM_EDIT_VERSION=\"0.2.0\"\nENV HELM_GIT_VERSION=\"0.3.0\"\nENV HELM_SECRETS_VERSION=\"1.2.9\"\nENV HELM_S3_VERSION=\"0.7.0\"\nENV HELM_PUSH_VERSION=\"0.7.1\"\nRUN helm plugin install https://github.com/app-registry/appr-helm-plugin --version v${HELM_APPR_VERSION} \\\n && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_DIFF_VERSION} \\\n && helm plugin install https://github.com/mstrzele/helm-edit --version v${HELM_EDIT_VERSION} \\\n && helm plugin install https://github.com/futuresimple/helm-secrets --version ${HELM_SECRETS_VERSION} \\\n && helm plugin install https://github.com/aslafy-z/helm-git.git --version ${HELM_GIT_VERSION} \\\n && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_S3_VERSION} \\\n && helm plugin install https://github.com/chartmuseum/helm-push --version v${HELM_PUSH_VERSION}\n#   Enable Atlantis to manage helm\nRUN chmod -R 777 /var/lib/helm\n#   \n#   Install fancy Kube PS1 Prompt\n#\nENV KUBE_PS1_VERSION=\"0.6.0\"\nADD https://raw.githubusercontent.com/jonmosco/kube-ps1/${KUBE_PS1_VERSION}/kube-ps1.sh /etc/profile.d/prompt:kube-ps1.sh\n#\n#   AWS\n#\nENV AWS_DATA_PATH=\"/localhost/.aws\"\nENV AWS_CONFIG_FILE=\"${AWS_DATA_PATH}/config\"\nENV AWS_SHARED_CREDENTIALS_FILE=\"${AWS_DATA_PATH}/credentials\"\n#\n#   Configure aws-vault to easily assume roles (not related to HashiCorp Vault)\n#\nENV AWS_VAULT_ENABLED=\"true\"\nENV AWS_VAULT_SERVER_ENABLED=\"false\"\nENV AWS_VAULT_BACKEND=\"file\"\nENV AWS_VAULT_ASSUME_ROLE_TTL=\"1h\"\nENV AWS_VAULT_SESSION_TTL=\"12h\"\n#  ENV AWS_VAULT_FILE_PASSPHRASE=\n#\n#   Shell\n#\nENV SHELL=\"/bin/bash\"\nENV LESS=\"R\"\nENV SSH_AGENT_CONFIG=\"/var/tmp/.ssh-agent\"\n#   Set a default terminal to \"dumb\" (headless) to make `tput` happy\nENV TERM=\"dumb\"\n#   Reduce `make` verbosity\nENV MAKEFLAGS=\"--no-print-directory\"\nENV MAKE_INCLUDES=\"Makefile Makefile.*\"\n#   This is not a \"multi-user\" system, so we'll use `/etc` as the global configuration dir\n#   Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\nENV XDG_CONFIG_HOME=\"/etc\"\n#   Clean up file modes for scripts\nRUN find ${XDG_CONFIG_HOME} -type f -name '*.sh' -exec chmod 755 {}\n#   Install \"root\" filesystem\nCOPY rootfs/ /\n#   Install documentation\nCOPY docs/ /usr/share/docs/\n#   Build man pages\nRUN /usr/local/bin/docs update\nWORKDIR /conf\nENTRYPOINT [\"/bin/bash\"]\nCMD [\"-c\", \"init\"]\n","originalDockerfileUglifiedHash":"cd41d968508751b5c079f6940d0c9ad9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/377712f5abb0df0050b5d05512e725bd4f4546d4.dockerfile"}