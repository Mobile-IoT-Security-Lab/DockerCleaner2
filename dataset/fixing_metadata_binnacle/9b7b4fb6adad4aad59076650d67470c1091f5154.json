{"seed":699845454,"processedDockerfileHash":"ee47dae3b8a6e6c8010cc8217883aaaf","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This image is intended to be used with fdroidserver for the purpose\n#   of dynamic scanning of pre-built APKs during the fdroid build process.\n#   Start with ubuntu 12.04 (i386).\nFROM ubuntu:14.04\nMAINTAINER fdroid.dscanner <fdroid.dscanner@gmail.com>\nENV DROZER_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer_2.3.4.deb\"\nENV DROZER_DEB=\"drozer_2.3.4.deb\"\nENV AGENT_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk\"\nENV AGENT_APK=\"drozer-agent-2.3.4.apk\"\n#   Specially for SSH access and port redirection\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\n#   Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 5901/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections\n#   Update packages\nRUN :\n#   Drozer packages\nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.15-1ubuntu1.14.04.5 python2.7=2.7.6-8ubuntu0.5 python-dev=2.7.5-5ubuntu3 python2.7-dev=2.7.6-8ubuntu0.5 python-openssl=0.13-2ubuntu6 python-twisted=13.2.0-1ubuntu1.2 python-protobuf=2.5.0-9ubuntu1 bash-completion=1:2.1-4ubuntu0.2 -y )\n#   First, install add-apt-repository, sshd and bzip2\nRUN (apt-get update ;apt-get install --no-install-recommends python-software-properties=0.92.37.8 bzip2=1.0.6-5 ssh=1:6.6p1-2ubuntu2.13 net-tools=1.60-25ubuntu2.1 -y )\n#   ubuntu 14.04 needs this too\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.92.37.8 -y )\n#   Add oracle-jdk7 to repositories\nRUN add-apt-repository ppa:webupd8team/java\n#   Make sure the package repository is up to date\nRUN echo \"deb http://archive.ubuntu.com/ubuntu trusty main universe\" > /etc/apt/sources.list\n#   Update apt\nRUN :\n#   Add drozer\nRUN useradd -ms /bin/bash drozer\n#   Install oracle-jdk7\nRUN (apt-get update ;apt-get install --no-install-recommends oracle-java7-installer -y )\n#   Install android sdk\nRUN wget http://dl.google.com/android/android-sdk_r23-linux.tgz\nRUN tar -xvzf android-sdk_r23-linux.tgz\nRUN mv -v android-sdk-linux /usr/local/android-sdk\n#   Install apache ant\nRUN wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.8.4-bin.tar.gz\nRUN tar -xvzf apache-ant-1.8.4-bin.tar.gz\nRUN mv -v apache-ant-1.8.4 /usr/local/apache-ant\n#   Add android tools and platform tools to PATH\nENV ANDROID_HOME=\"/usr/local/android-sdk\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools\"\nENV PATH=\"$PATH:$ANDROID_HOME/platform-tools\"\n#   Add ant to PATH\nENV ANT_HOME=\"/usr/local/apache-ant\"\nENV PATH=\"$PATH:$ANT_HOME/bin\"\n#   Export JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-oracle\"\n#   Remove compressed files.\nRUN cd / ; rm android-sdk_r23-linux.tgz \\\n && rm apache-ant-1.8.4-bin.tar.gz\n#   Some preparation before update\nRUN chown -R root:root /usr/local/android-sdk/\n#   Install latest android tools and system images\nRUN echo \"y\" | android update sdk --filter platform-tool --no-ui --force\nRUN echo \"y\" | android update sdk --filter platform --no-ui --force\nRUN echo \"y\" | android update sdk --filter build-tools-22.0.1 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-x86-android-19 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-x86-android-21 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-x86-android-22 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-19 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-21 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-22 --no-ui -a\n#   Update ADB\nRUN echo \"y\" | android update adb\n#   Create fake keymap file\nRUN mkdir /usr/local/android-sdk/tools/keymaps\nRUN touch /usr/local/android-sdk/tools/keymaps/en-us\n#   Run sshd\nRUN (apt-get update ;apt-get install --no-install-recommends openssh-server=1:6.6p1-2ubuntu2.13 -y )\nRUN mkdir /var/run/sshd\nRUN echo \"root:$ROOTPASSWORD\" | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n#   Install socat\nRUN (apt-get update ;apt-get install --no-install-recommends socat=1.7.2.3-1 -y )\n#   symlink android bins\nRUN ln -sv /usr/local/android-sdk/tools/android /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/emulator /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/ddms /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/scheenshot2 /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monkeyrunner /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monitor /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/mksdcard /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/uiautomatorviewer /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/traceview /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/adb /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/fastboot /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/sqlite3 /usr/local/bin/\n#   Setup DROZER...\n#   https://labs.mwrinfosecurity.com/tools/drozer/\n#   Run as drozer user\nWORKDIR /home/drozer\n#   Site lists the shasums, however, I'm not sure the best way to integrate the\n#   checks here. No real idiomatic way for Dockerfile to do that and most of\n#   the examples online use chained commands but we want things to *BREAK* when\n#   the sha doesn't match. So far, I can't seem to reliably make Docker not\n#   finish the image build process.\n#   Download the console\nRUN wget -c $DROZER_URL\n#   Install the console\nRUN dpkg -i $DROZER_DEB\n#   Download agent\nRUN wget -c $AGENT_URL\n#   Keep it version agnostic for other scripts such as install_drozer.py\nRUN mv -v $AGENT_APK drozer-agent.apk\n#   Port forwarding required by drozer\nRUN echo 'adb forward tcp:31415 tcp:31415' >> /home/drozer/.bashrc\n#   Alias for Drozer\nRUN echo \"alias drozer='drozer console connect'\" >> /home/drozer/.bashrc\n#   add extra scripting\nCOPY install_agent.py /home/drozer/install_agent.py\nRUN chmod 755 /home/drozer/install_agent.py\nCOPY enable_service.py /home/drozer/enable_service.py\nRUN chmod 755 /home/drozer/enable_service.py\nCOPY drozer.py /home/drozer/drozer.py\nRUN chmod 755 /home/drozer/drozer.py\n#   fix ownerships\nRUN chown -R drozer.drozer /home/drozer\nRUN (apt-get update ;apt-get install --no-install-recommends python-pkg-resources=3.3-1ubuntu1 -y --force-yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip=1.5.4-1ubuntu4 python-setuptools=3.3-1ubuntu2 git=1:1.9.1-1ubuntu0.10 -y )\nRUN pip install \"git+https://github.com/dtmilano/AndroidViewClient.git#egg=androidviewclient\"\nRUN (apt-get update ;apt-get install --no-install-recommends python-pexpect=3.1-1ubuntu0.1 -y )\n#   Add entrypoint\nCOPY entrypoint.sh /home/drozer/entrypoint.sh\nRUN chmod +x /home/drozer/entrypoint.sh\nENTRYPOINT [\"/home/drozer/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This image is intended to be used with fdroidserver for the purpose\n#  of dynamic scanning of pre-built APKs during the fdroid build process.\n#  Start with ubuntu 12.04 (i386).\nFROM ubuntu:14.04\nMAINTAINER fdroid.dscanner <fdroid.dscanner@gmail.com>\nENV DROZER_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer_2.3.4.deb\"\nENV DROZER_DEB=\"drozer_2.3.4.deb\"\nENV AGENT_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk\"\nENV AGENT_APK=\"drozer-agent-2.3.4.apk\"\n#  Specially for SSH access and port redirection\nENV ROOTPASSWORD=\"android\"\n#  Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 5901/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections\n#  Update packages\nRUN apt-get update -y\n#  Drozer packages\nRUN apt-get install wget python2.7 python-dev python2.7-dev python-openssl python-twisted python-protobuf bash-completion -y\n#  First, install add-apt-repository, sshd and bzip2\nRUN apt-get install python-software-properties bzip2 ssh net-tools -y\n#  ubuntu 14.04 needs this too\nRUN apt-get install software-properties-common -y\n#  Add oracle-jdk7 to repositories\nRUN add-apt-repository ppa:webupd8team/java\n#  Make sure the package repository is up to date\nRUN echo \"deb http://archive.ubuntu.com/ubuntu trusty main universe\" > /etc/apt/sources.list\n#  Update apt\nRUN apt-get update\n#  Add drozer\nRUN useradd -ms /bin/bash drozer\n#  Install oracle-jdk7\nRUN apt-get install oracle-java7-installer -y\n#  Install android sdk\nRUN wget http://dl.google.com/android/android-sdk_r23-linux.tgz\nRUN tar -xvzf android-sdk_r23-linux.tgz\nRUN mv -v android-sdk-linux /usr/local/android-sdk\n#  Install apache ant\nRUN wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.8.4-bin.tar.gz\nRUN tar -xvzf apache-ant-1.8.4-bin.tar.gz\nRUN mv -v apache-ant-1.8.4 /usr/local/apache-ant\n#  Add android tools and platform tools to PATH\nENV ANDROID_HOME=\"/usr/local/android-sdk\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools\"\nENV PATH=\"$PATH:$ANDROID_HOME/platform-tools\"\n#  Add ant to PATH\nENV ANT_HOME=\"/usr/local/apache-ant\"\nENV PATH=\"$PATH:$ANT_HOME/bin\"\n#  Export JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-oracle\"\n#  Remove compressed files.\nRUN cd / ; rm android-sdk_r23-linux.tgz \\\n && rm apache-ant-1.8.4-bin.tar.gz\n#  Some preparation before update\nRUN chown -R root:root /usr/local/android-sdk/\n#  Install latest android tools and system images\nRUN echo \"y\" | android update sdk --filter platform-tool --no-ui --force\nRUN echo \"y\" | android update sdk --filter platform --no-ui --force\nRUN echo \"y\" | android update sdk --filter build-tools-22.0.1 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-x86-android-19 --no-ui -a\n# RUN echo \"y\" | android update sdk --filter sys-img-x86-android-21 --no-ui -a\n# RUN echo \"y\" | android update sdk --filter sys-img-x86-android-22 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-19 --no-ui -a\n# RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-21 --no-ui -a\n# RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-22 --no-ui -a\n#  Update ADB\nRUN echo \"y\" | android update adb\n#  Create fake keymap file\nRUN mkdir /usr/local/android-sdk/tools/keymaps\nRUN touch /usr/local/android-sdk/tools/keymaps/en-us\n#  Run sshd\nRUN apt-get install openssh-server -y\nRUN mkdir /var/run/sshd\nRUN echo \"root:$ROOTPASSWORD\" | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config\n#  SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n#  Install socat\nRUN apt-get install socat -y\n#  symlink android bins\nRUN ln -sv /usr/local/android-sdk/tools/android /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/emulator /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/ddms /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/scheenshot2 /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monkeyrunner /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monitor /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/mksdcard /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/uiautomatorviewer /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/traceview /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/adb /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/fastboot /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/sqlite3 /usr/local/bin/\n#  Setup DROZER...\n#  https://labs.mwrinfosecurity.com/tools/drozer/\n#  Run as drozer user\nWORKDIR /home/drozer\n#  Site lists the shasums, however, I'm not sure the best way to integrate the\n#  checks here. No real idiomatic way for Dockerfile to do that and most of\n#  the examples online use chained commands but we want things to *BREAK* when\n#  the sha doesn't match. So far, I can't seem to reliably make Docker not\n#  finish the image build process.\n#  Download the console\nRUN wget -c $DROZER_URL\n#  Install the console\nRUN dpkg -i $DROZER_DEB\n#  Download agent\nRUN wget -c $AGENT_URL\n#  Keep it version agnostic for other scripts such as install_drozer.py\nRUN mv -v $AGENT_APK drozer-agent.apk\n#  Port forwarding required by drozer\nRUN echo 'adb forward tcp:31415 tcp:31415' >> /home/drozer/.bashrc\n#  Alias for Drozer\nRUN echo \"alias drozer='drozer console connect'\" >> /home/drozer/.bashrc\n#  add extra scripting\nCOPY install_agent.py /home/drozer/install_agent.py\nRUN chmod 755 /home/drozer/install_agent.py\nCOPY enable_service.py /home/drozer/enable_service.py\nRUN chmod 755 /home/drozer/enable_service.py\nCOPY drozer.py /home/drozer/drozer.py\nRUN chmod 755 /home/drozer/drozer.py\n#  fix ownerships\nRUN chown -R drozer.drozer /home/drozer\nRUN apt-get install python-pkg-resources=3.3-1ubuntu1 -y --force-yes\nRUN apt-get install python-pip python-setuptools git -y\nRUN pip install \"git+https://github.com/dtmilano/AndroidViewClient.git#egg=androidviewclient\"\nRUN apt-get install python-pexpect -y\n#  Add entrypoint\nCOPY entrypoint.sh /home/drozer/entrypoint.sh\nRUN chmod +x /home/drozer/entrypoint.sh\nENTRYPOINT [\"/home/drozer/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"3a658adb13074f61161b339b29b6cb4e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This image is intended to be used with fdroidserver for the purpose\n#   of dynamic scanning of pre-built APKs during the fdroid build process.\n#   Start with ubuntu 12.04 (i386).\nFROM ubuntu:14.04\nMAINTAINER fdroid.dscanner <fdroid.dscanner@gmail.com>\nENV DROZER_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer_2.3.4.deb\"\nENV DROZER_DEB=\"drozer_2.3.4.deb\"\nENV AGENT_URL=\"https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk\"\nENV AGENT_APK=\"drozer-agent-2.3.4.apk\"\n#   Specially for SSH access and port redirection\nENV ROOTPASSWORD=\"android\"\n#   Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 5901/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\nRUN echo \"debconf shared/accepted-oracle-license-v1-1 seen true\" | debconf-set-selections\n#   Update packages\nRUN apt-get update -y\n#   Drozer packages\nRUN apt-get install wget python2.7 python-dev python2.7-dev python-openssl python-twisted python-protobuf bash-completion -y\n#   First, install add-apt-repository, sshd and bzip2\nRUN apt-get install python-software-properties bzip2 ssh net-tools -y\n#   ubuntu 14.04 needs this too\nRUN apt-get install software-properties-common -y\n#   Add oracle-jdk7 to repositories\nRUN add-apt-repository ppa:webupd8team/java\n#   Make sure the package repository is up to date\nRUN echo \"deb http://archive.ubuntu.com/ubuntu trusty main universe\" > /etc/apt/sources.list\n#   Update apt\nRUN apt-get update\n#   Add drozer\nRUN useradd -ms /bin/bash drozer\n#   Install oracle-jdk7\nRUN apt-get install oracle-java7-installer -y\n#   Install android sdk\nRUN wget http://dl.google.com/android/android-sdk_r23-linux.tgz\nRUN tar -xvzf android-sdk_r23-linux.tgz\nRUN mv -v android-sdk-linux /usr/local/android-sdk\n#   Install apache ant\nRUN wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.8.4-bin.tar.gz\nRUN tar -xvzf apache-ant-1.8.4-bin.tar.gz\nRUN mv -v apache-ant-1.8.4 /usr/local/apache-ant\n#   Add android tools and platform tools to PATH\nENV ANDROID_HOME=\"/usr/local/android-sdk\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools\"\nENV PATH=\"$PATH:$ANDROID_HOME/platform-tools\"\n#   Add ant to PATH\nENV ANT_HOME=\"/usr/local/apache-ant\"\nENV PATH=\"$PATH:$ANT_HOME/bin\"\n#   Export JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-7-oracle\"\n#   Remove compressed files.\nRUN cd / ; rm android-sdk_r23-linux.tgz \\\n && rm apache-ant-1.8.4-bin.tar.gz\n#   Some preparation before update\nRUN chown -R root:root /usr/local/android-sdk/\n#   Install latest android tools and system images\nRUN echo \"y\" | android update sdk --filter platform-tool --no-ui --force\nRUN echo \"y\" | android update sdk --filter platform --no-ui --force\nRUN echo \"y\" | android update sdk --filter build-tools-22.0.1 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-x86-android-19 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-x86-android-21 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-x86-android-22 --no-ui -a\nRUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-19 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-21 --no-ui -a\n#  RUN echo \"y\" | android update sdk --filter sys-img-armeabi-v7a-android-22 --no-ui -a\n#   Update ADB\nRUN echo \"y\" | android update adb\n#   Create fake keymap file\nRUN mkdir /usr/local/android-sdk/tools/keymaps\nRUN touch /usr/local/android-sdk/tools/keymaps/en-us\n#   Run sshd\nRUN apt-get install openssh-server -y\nRUN mkdir /var/run/sshd\nRUN echo \"root:$ROOTPASSWORD\" | chpasswd\nRUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nENV NOTVISIBLE=\"\\\"in users profile\\\"\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n#   Install socat\nRUN apt-get install socat -y\n#   symlink android bins\nRUN ln -sv /usr/local/android-sdk/tools/android /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/emulator /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/ddms /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/scheenshot2 /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monkeyrunner /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/monitor /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/mksdcard /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/uiautomatorviewer /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/tools/traceview /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/adb /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/fastboot /usr/local/bin/\nRUN ln -sv /usr/local/android-sdk/platform-tools/sqlite3 /usr/local/bin/\n#   Setup DROZER...\n#   https://labs.mwrinfosecurity.com/tools/drozer/\n#   Run as drozer user\nWORKDIR /home/drozer\n#   Site lists the shasums, however, I'm not sure the best way to integrate the\n#   checks here. No real idiomatic way for Dockerfile to do that and most of\n#   the examples online use chained commands but we want things to *BREAK* when\n#   the sha doesn't match. So far, I can't seem to reliably make Docker not\n#   finish the image build process.\n#   Download the console\nRUN wget -c $DROZER_URL\n#   Install the console\nRUN dpkg -i $DROZER_DEB\n#   Download agent\nRUN wget -c $AGENT_URL\n#   Keep it version agnostic for other scripts such as install_drozer.py\nRUN mv -v $AGENT_APK drozer-agent.apk\n#   Port forwarding required by drozer\nRUN echo 'adb forward tcp:31415 tcp:31415' >> /home/drozer/.bashrc\n#   Alias for Drozer\nRUN echo \"alias drozer='drozer console connect'\" >> /home/drozer/.bashrc\n#   add extra scripting\nCOPY install_agent.py /home/drozer/install_agent.py\nRUN chmod 755 /home/drozer/install_agent.py\nCOPY enable_service.py /home/drozer/enable_service.py\nRUN chmod 755 /home/drozer/enable_service.py\nCOPY drozer.py /home/drozer/drozer.py\nRUN chmod 755 /home/drozer/drozer.py\n#   fix ownerships\nRUN chown -R drozer.drozer /home/drozer\nRUN apt-get install python-pkg-resources=3.3-1ubuntu1 -y --force-yes\nRUN apt-get install python-pip python-setuptools git -y\nRUN pip install \"git+https://github.com/dtmilano/AndroidViewClient.git#egg=androidviewclient\"\nRUN apt-get install python-pexpect -y\n#   Add entrypoint\nCOPY entrypoint.sh /home/drozer/entrypoint.sh\nRUN chmod +x /home/drozer/entrypoint.sh\nENTRYPOINT [\"/home/drozer/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"d50b726298d2af736c1ff55a6e128297","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9b7b4fb6adad4aad59076650d67470c1091f5154.dockerfile"}