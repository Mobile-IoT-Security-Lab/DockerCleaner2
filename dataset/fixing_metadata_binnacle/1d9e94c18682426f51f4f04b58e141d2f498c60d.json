{"seed":3318774154,"processedDockerfileHash":"05391fc51f904b890ad59a823fb3d141","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda\n#   TODO REPLACE CUDA_ARCH_BIN with your GPU value: https://developer.nvidia.com/cuda-gpus\n#   For example my GeForce GTX 1050 is 6.1\n#   This is a dev image, needed to compile OpenCV with CUDA\n#   Install  Gstreamer and OpenCV Pre-requisite libs\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends libgstreamer1.0-0=1.22.0-2 gstreamer1.0-plugins-base=1.22.0-3 gstreamer1.0-plugins-good=1.22.0-4ubuntu1 gstreamer1.0-plugins-bad=1.22.0-3ubuntu2 gstreamer1.0-plugins-ugly=1.22.0-2 gstreamer1.0-libav=1.22.0-2 gstreamer1.0-doc gstreamer1.0-tools=1.22.0-2 libgstreamer1.0-dev=1.22.0-2 libgstreamer-plugins-base1.0-dev=1.22.0-3 -y\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends pkg-config=1.8.1-1ubuntu2 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 libwebp-dev=1.2.4-0.1build1 libtbb2 libtbb-dev=2021.8.0-1ubuntu2 libgtk2.0-dev=2.24.33-2ubuntu2 pkg-config=1.8.1-1ubuntu2 libavcodec-dev=7:5.1.2-3ubuntu1 libavformat-dev=7:5.1.2-3ubuntu1 libswscale-dev=7:5.1.2-3ubuntu1 cmake=3.25.1-1 -y\nRUN apt-get install --no-install-recommends autoconf=2.71-3 autotools-dev=20220109.1 build-essential=12.9ubuntu3 gcc=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 -y\nENV OPENCV_RELEASE_TAG=\"3.4.5\"\nRUN git clone --depth 1 -b ${OPENCV_RELEASE_TAG} https://github.com/opencv/opencv.git /var/local/git/opencv\nRUN cd /var/local/git/opencv\nRUN mkdir -p /var/local/git/opencv/build \\\n && cd /var/local/git/opencv/build $$ \\\n && cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_PNG=OFF -D BUILD_TIFF=OFF -D BUILD_TBB=OFF -D BUILD_JPEG=ON -D BUILD_JASPER=OFF -D BUILD_ZLIB=ON -D BUILD_EXAMPLES=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=OFF -D ENABLE_NEON=OFF -D WITH_OPENCL=OFF -D WITH_OPENMP=OFF -D WITH_FFMPEG=OFF -D WITH_GSTREAMER=ON -D WITH_GSTREAMER_0_10=OFF -D WITH_CUDA=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda/ -D WITH_GTK=ON -D WITH_VTK=OFF -D WITH_TBB=ON -D WITH_1394=OFF -D WITH_OPENEXR=OFF -D CUDA_ARCH_BIN=6.1 -D CUDA_ARCH_PTX=\"\" -D INSTALL_C_EXAMPLES=OFF -D INSTALL_TESTS=OFF ..\nRUN cd /var/local/git/opencv/build \\\n && make install\n#   Checkout and build darknet\n#   for debug\n#   apt-get install -y --no-install-recommends vim \nRUN git clone --depth 1 -b opendatacam https://github.com/opendatacam/darknet /var/local/darknet\nWORKDIR /var/local/darknet\nRUN sed -i -e s/GPU=0/GPU=1/ Makefile\n#   For some reason no need for a CUDNN=1 on my CUDA_ARCH_BIN=6.1\nRUN sed -i -e s/OPENCV=0/OPENCV=1/ Makefile\nRUN make\nRUN apt-get update ; apt-get install --no-install-recommends vim=2:9.0.1000-4ubuntu2 wget=1.21.3-1ubuntu1 -y\n#   Get weights files\nRUN wget https://pjreddie.com/media/files/yolov3.weights -O /var/local/darknet/yolov3.weights\nRUN wget https://pjreddie.com/media/files/yolov3-tiny.weights -O /var/local/darknet/yolov3-tiny.weights\nRUN mkdir /var/local/darknet/opendatacam_videos \\\n && wget https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4 -O /var/local/darknet/opendatacam_videos/demo.mp4\n#   wget -N https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4\n#   Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -ext_output -dont_show demo.mp4\n#   Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg yolov3-tiny.weights -ext_output -dont_show demo.mp4\n#   Install node.js\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install --no-install-recommends nodejs=18.13.0+dfsg1-1ubuntu2 -y\n#   Install mongodb\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4 \\\n && echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends openssl=3.0.8-1ubuntu1 libcurl3 mongodb-org -y\nVOLUME [\"/data/db\"]\n#   Technique to rebuild the docker file from here : https://stackoverflow.com/a/49831094/1228937\n#   Build using date > marker && docker build .\n#   date > marker && sudo docker build -t opendatacam .\nCOPY marker /dev/null\nRUN git clone --depth 1 https://github.com/opendatacam/opendatacam /var/local/opendatacam\nWORKDIR /var/local/opendatacam\nRUN sed -i -e s+/darknet+/var/local/darknet+ config.json\nRUN sed -i -e s+TO_REPLACE_VIDEO_INPUT+file+ config.json\nRUN sed -i -e s+TO_REPLACE_NEURAL_NETWORK+yolov3+ config.json\n#   Build\nRUN npm install\nRUN npm run build\nEXPOSE 8080/tcp 8070/tcp 8090/tcp 27017/tcp\nRUN wget https://raw.githubusercontent.com/opendatacam/opendatacam/v2/docker/run-jetson/docker-start-mongo-and-opendatacam.sh\nRUN chmod 777 docker-start-mongo-and-opendatacam.sh\nCMD ./docker-start-mongo-and-opendatacam.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda\n#  TODO REPLACE CUDA_ARCH_BIN with your GPU value: https://developer.nvidia.com/cuda-gpus\n#  For example my GeForce GTX 1050 is 6.1\n#  This is a dev image, needed to compile OpenCV with CUDA\n#  Install  Gstreamer and OpenCV Pre-requisite libs\nRUN apt-get update -y \\\n && apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev -y\nRUN apt-get update -y \\\n && apt-get install pkg-config zlib1g-dev libwebp-dev libtbb2 libtbb-dev libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev cmake -y\nRUN apt-get install autoconf autotools-dev build-essential gcc git -y\nENV OPENCV_RELEASE_TAG=\"3.4.5\"\nRUN git clone --depth 1 -b ${OPENCV_RELEASE_TAG} https://github.com/opencv/opencv.git /var/local/git/opencv\nRUN cd /var/local/git/opencv\nRUN mkdir -p /var/local/git/opencv/build \\\n && cd /var/local/git/opencv/build $$ \\\n && cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_PNG=OFF -D BUILD_TIFF=OFF -D BUILD_TBB=OFF -D BUILD_JPEG=ON -D BUILD_JASPER=OFF -D BUILD_ZLIB=ON -D BUILD_EXAMPLES=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=OFF -D ENABLE_NEON=OFF -D WITH_OPENCL=OFF -D WITH_OPENMP=OFF -D WITH_FFMPEG=OFF -D WITH_GSTREAMER=ON -D WITH_GSTREAMER_0_10=OFF -D WITH_CUDA=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda/ -D WITH_GTK=ON -D WITH_VTK=OFF -D WITH_TBB=ON -D WITH_1394=OFF -D WITH_OPENEXR=OFF -D CUDA_ARCH_BIN=6.1 -D CUDA_ARCH_PTX=\"\" -D INSTALL_C_EXAMPLES=OFF -D INSTALL_TESTS=OFF ..\nRUN cd /var/local/git/opencv/build \\\n && make install\n#  Checkout and build darknet\n#  for debug\n#  apt-get install -y --no-install-recommends vim \nRUN git clone --depth 1 -b opendatacam https://github.com/opendatacam/darknet /var/local/darknet\nWORKDIR /var/local/darknet\nRUN sed -i -e s/GPU=0/GPU=1/ Makefile\n#  For some reason no need for a CUDNN=1 on my CUDA_ARCH_BIN=6.1\nRUN sed -i -e s/OPENCV=0/OPENCV=1/ Makefile\nRUN make\nRUN apt-get update ; apt-get install --no-install-recommends vim wget -y\n#  Get weights files\nRUN wget https://pjreddie.com/media/files/yolov3.weights -O /var/local/darknet/yolov3.weights\nRUN wget https://pjreddie.com/media/files/yolov3-tiny.weights -O /var/local/darknet/yolov3-tiny.weights\nRUN mkdir /var/local/darknet/opendatacam_videos \\\n && wget https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4 -O /var/local/darknet/opendatacam_videos/demo.mp4\n#  wget -N https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4\n#  Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -ext_output -dont_show demo.mp4\n#  Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg yolov3-tiny.weights -ext_output -dont_show demo.mp4\n#  Install node.js\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install nodejs -y\n#  Install mongodb\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4 \\\n && echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends openssl libcurl3 mongodb-org -y\nVOLUME [\"/data/db\"]\n#  Technique to rebuild the docker file from here : https://stackoverflow.com/a/49831094/1228937\n#  Build using date > marker && docker build .\n#  date > marker && sudo docker build -t opendatacam .\nCOPY marker /dev/null\nRUN git clone --depth 1 https://github.com/opendatacam/opendatacam /var/local/opendatacam\nWORKDIR /var/local/opendatacam\nRUN sed -i -e s+/darknet+/var/local/darknet+ config.json\nRUN sed -i -e s+TO_REPLACE_VIDEO_INPUT+file+ config.json\nRUN sed -i -e s+TO_REPLACE_NEURAL_NETWORK+yolov3+ config.json\n#  Build\nRUN npm install\nRUN npm run build\nEXPOSE 8080/tcp 8070/tcp 8090/tcp 27017/tcp\nRUN wget https://raw.githubusercontent.com/opendatacam/opendatacam/v2/docker/run-jetson/docker-start-mongo-and-opendatacam.sh\nRUN chmod 777 docker-start-mongo-and-opendatacam.sh\nCMD ./docker-start-mongo-and-opendatacam.sh\n","injectedSmells":[],"originalDockerfileHash":"b5a271ed87b87501b5b70d29c5d0798a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda\n#   TODO REPLACE CUDA_ARCH_BIN with your GPU value: https://developer.nvidia.com/cuda-gpus\n#   For example my GeForce GTX 1050 is 6.1\n#   This is a dev image, needed to compile OpenCV with CUDA\n#   Install  Gstreamer and OpenCV Pre-requisite libs\nRUN apt-get update -y \\\n && apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev -y\nRUN apt-get update -y \\\n && apt-get install pkg-config zlib1g-dev libwebp-dev libtbb2 libtbb-dev libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev cmake -y\nRUN apt-get install autoconf autotools-dev build-essential gcc git -y\nENV OPENCV_RELEASE_TAG=\"3.4.5\"\nRUN git clone --depth 1 -b ${OPENCV_RELEASE_TAG} https://github.com/opencv/opencv.git /var/local/git/opencv\nRUN cd /var/local/git/opencv\nRUN mkdir -p /var/local/git/opencv/build \\\n && cd /var/local/git/opencv/build $$ \\\n && cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_PNG=OFF -D BUILD_TIFF=OFF -D BUILD_TBB=OFF -D BUILD_JPEG=ON -D BUILD_JASPER=OFF -D BUILD_ZLIB=ON -D BUILD_EXAMPLES=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=OFF -D ENABLE_NEON=OFF -D WITH_OPENCL=OFF -D WITH_OPENMP=OFF -D WITH_FFMPEG=OFF -D WITH_GSTREAMER=ON -D WITH_GSTREAMER_0_10=OFF -D WITH_CUDA=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda/ -D WITH_GTK=ON -D WITH_VTK=OFF -D WITH_TBB=ON -D WITH_1394=OFF -D WITH_OPENEXR=OFF -D CUDA_ARCH_BIN=6.1 -D CUDA_ARCH_PTX=\"\" -D INSTALL_C_EXAMPLES=OFF -D INSTALL_TESTS=OFF ..\nRUN cd /var/local/git/opencv/build \\\n && make install\n#   Checkout and build darknet\n#   for debug\n#   apt-get install -y --no-install-recommends vim \nRUN git clone --depth 1 -b opendatacam https://github.com/opendatacam/darknet /var/local/darknet\nWORKDIR /var/local/darknet\nRUN sed -i -e s/GPU=0/GPU=1/ Makefile\n#   For some reason no need for a CUDNN=1 on my CUDA_ARCH_BIN=6.1\nRUN sed -i -e s/OPENCV=0/OPENCV=1/ Makefile\nRUN make\nRUN apt-get update ; apt-get install --no-install-recommends vim wget -y\n#   Get weights files\nRUN wget https://pjreddie.com/media/files/yolov3.weights -O /var/local/darknet/yolov3.weights\nRUN wget https://pjreddie.com/media/files/yolov3-tiny.weights -O /var/local/darknet/yolov3-tiny.weights\nRUN mkdir /var/local/darknet/opendatacam_videos \\\n && wget https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4 -O /var/local/darknet/opendatacam_videos/demo.mp4\n#   wget -N https://github.com/opendatacam/opendatacam/raw/v2.0.0-beta.2/static/demo/demo.mp4\n#   Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -ext_output -dont_show demo.mp4\n#   Debug, test darknet : ./darknet detector demo cfg/coco.data cfg/yolov3-tiny.cfg yolov3-tiny.weights -ext_output -dont_show demo.mp4\n#   Install node.js\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash -\nRUN apt-get install nodejs -y\n#   Install mongodb\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4 \\\n && echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nRUN apt-get update \\\n && apt-get install --no-install-recommends openssl libcurl3 mongodb-org -y\nVOLUME [\"/data/db\"]\n#   Technique to rebuild the docker file from here : https://stackoverflow.com/a/49831094/1228937\n#   Build using date > marker && docker build .\n#   date > marker && sudo docker build -t opendatacam .\nCOPY marker /dev/null\nRUN git clone --depth 1 https://github.com/opendatacam/opendatacam /var/local/opendatacam\nWORKDIR /var/local/opendatacam\nRUN sed -i -e s+/darknet+/var/local/darknet+ config.json\nRUN sed -i -e s+TO_REPLACE_VIDEO_INPUT+file+ config.json\nRUN sed -i -e s+TO_REPLACE_NEURAL_NETWORK+yolov3+ config.json\n#   Build\nRUN npm install\nRUN npm run build\nEXPOSE 8080/tcp 8070/tcp 8090/tcp 27017/tcp\nRUN wget https://raw.githubusercontent.com/opendatacam/opendatacam/v2/docker/run-jetson/docker-start-mongo-and-opendatacam.sh\nRUN chmod 777 docker-start-mongo-and-opendatacam.sh\nCMD ./docker-start-mongo-and-opendatacam.sh\n","originalDockerfileUglifiedHash":"f3fe3dee3a33186617fbe779056d7676","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1d9e94c18682426f51f4f04b58e141d2f498c60d.dockerfile"}