{"seed":1533440527,"processedDockerfileHash":"374bc0295fb4026fb345e3b6bd3b314d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nMAINTAINER Sai Soundararaj <saip@outlook.com>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.12.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.0\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\nARG PYTHON_BASEDEPS=\"build-essential python-pip\"\nARG PYTHON_BUILDDEPS=\"libbz2-dev  libc6-dev  libgdbm-dev  libncursesw5-dev  libreadline-gplv2-dev  libsqlite3-dev  libssl-dev  tk-dev\"\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nARG PYTHON_TARFILE=\"Python-2.7.9.tgz\"\nARG PYTHON_TARHOST=\"https://www.python.org/ftp/python/2.7.9\"\nARG PYTHON_SRCDIR=\"Python-2.7.9\"\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends ${PYTHON_BASEDEPS} ${PYTHON_BUILDDEPS} -y )\nRUN wget \"${PYTHON_TARHOST}/${PYTHON_TARFILE}\"\nRUN tar xvf ${PYTHON_TARFILE}\nRUN cd ${PYTHON_SRCDIR} \\\n && ./configure \\\n && make \\\n && make install\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y )\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libffi-dev libssl-dev -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install pip==23.1 --upgrade\nRUN pip install pyopenssl==23.1.1 ndg-httpsclient==0.5.1 pyasn1==0.4.8\nRUN pip install ipython==8.12.0 --no-cache-dir --upgrade\nRUN pip install Cython==0.29.34 --no-cache-dir\nRUN pip install path.py==12.5.0 --no-cache-dir\nRUN pip install Pillow==9.5.0 --no-cache-dir\nRUN pip install pygments==2.15.0 --no-cache-dir\nRUN pip install six==1.16.0 --no-cache-dir\nRUN pip install sphinx==6.1.3 --no-cache-dir\nRUN pip install wheel==0.40.0 --no-cache-dir\nRUN pip install zmq==0.0.0 --no-cache-dir\n#  TODO move UP\nRUN wget https://www.openssl.org/source/openssl-1.0.2n.tar.gz\nRUN tar -xvzf openssl-1.0.2n.tar.gz\nRUN cd openssl-1.0.2n \\\n && ./config \\\n && sudo make \\\n && sudo make install\nRUN ln -sf /usr/local/ssl/bin/openssl `which openssl `\nRUN sleep 1\nRUN openssl version -v\nRUN pip install ipykernel==6.22.0 --no-cache-dir\nRUN pip install jupyter==1.0.0 --no-cache-dir\nRUN python -m ipykernel.kernelspec\n#  TODO take out if ipykernel gets installed\n#  RUN false\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install dependencies for Caffe\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y ) \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  ## Install Caffe\n#  RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe\n#  RUN\tcd /root/caffe && \\\n#    cat python/requirements.txt | xargs -n1  -L 1 pip install\n#  RUN pip install -r /root/caffe/python/requirements.txt\n#  RUN cd /root/caffe && \\\n#    mkdir build && cd build && \\\n#  \tcmake -DUSE_CUDNN=1 -DBLAS=Open .. && \\\n#  \tmake -j\"$(nproc)\" all\n#  RUN cd /root/caffe/build && \\\n#    make install\n#\n#  # Set up Caffe environment variables\n#  ENV CAFFE_ROOT=/root/caffe\n#  ENV PYCAFFE_ROOT=$CAFFE_ROOT/python\n#  ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \\\n#  \tPATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\n#\n#  RUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\n#   Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#   Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#   Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn \\\n && luarocks install cutorch \\\n && luarocks install cunn \\\n && luarocks install loadcaffe \\\n && cd /root \\\n && git clone https://github.com/soumith/cudnn.torch.git \\\n && cd cudnn.torch \\\n && git checkout R4 \\\n && luarocks make \\\n && cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n#  TODO# Install OpenCV\n#  RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n#  \tcd /root/opencv && \\\n#  \tmkdir build && \\\n#  \tcd build && \\\n#  \tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n#  \tmake -j\"$(nproc)\"  && \\\n#  \tmake install && \\\n#  \tldconfig && \\\n#  \techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nMAINTAINER Sai Soundararaj <saip@outlook.com>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.12.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.0\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\nARG PYTHON_BASEDEPS=\"build-essential python-pip\"\nARG PYTHON_BUILDDEPS=\"libbz2-dev  libc6-dev  libgdbm-dev  libncursesw5-dev  libreadline-gplv2-dev  libsqlite3-dev  libssl-dev  tk-dev\"\n# RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n# \tcat /proc/driver/nvidia/version && \\\n# \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n# \tnvcc -V && \\\n# \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#  Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nARG PYTHON_TARFILE=\"Python-2.7.9.tgz\"\nARG PYTHON_TARHOST=\"https://www.python.org/ftp/python/2.7.9\"\nARG PYTHON_SRCDIR=\"Python-2.7.9\"\nRUN apt-get update\nRUN apt-get install ${PYTHON_BASEDEPS} ${PYTHON_BUILDDEPS} -y\nRUN wget \"${PYTHON_TARHOST}/${PYTHON_TARFILE}\"\nRUN tar xvf ${PYTHON_TARFILE}\nRUN cd ${PYTHON_SRCDIR} \\\n && ./configure \\\n && make \\\n && make install\n#  Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#  Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#  Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#  especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y\nRUN apt-get update \\\n && apt-get install libffi-dev libssl-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  Install other useful Python packages using pip\nRUN pip install pip --upgrade\nRUN pip install pyopenssl ndg-httpsclient pyasn1\nRUN pip install ipython --no-cache-dir --upgrade\nRUN pip install Cython --no-cache-dir\nRUN pip install path.py --no-cache-dir\nRUN pip install Pillow --no-cache-dir\nRUN pip install pygments --no-cache-dir\nRUN pip install six --no-cache-dir\nRUN pip install sphinx --no-cache-dir\nRUN pip install wheel --no-cache-dir\nRUN pip install zmq --no-cache-dir\n# TODO move UP\nRUN wget https://www.openssl.org/source/openssl-1.0.2n.tar.gz\nRUN tar -xvzf openssl-1.0.2n.tar.gz\nRUN cd openssl-1.0.2n \\\n && ./config \\\n && sudo make \\\n && sudo make install\nRUN ln -sf /usr/local/ssl/bin/openssl `which openssl `\nRUN sleep 1\nRUN openssl version -v\nRUN pip install ipykernel --no-cache-dir\nRUN pip install jupyter --no-cache-dir\nRUN python -m ipykernel.kernelspec\n# TODO take out if ipykernel gets installed\n# RUN false\n#  Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#  Install dependencies for Caffe\nRUN apt-get update \\\n && apt-get install libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n# ## Install Caffe\n# RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe\n# RUN\tcd /root/caffe && \\\n#   cat python/requirements.txt | xargs -n1  -L 1 pip install\n# RUN pip install -r /root/caffe/python/requirements.txt\n# RUN cd /root/caffe && \\\n#   mkdir build && cd build && \\\n# \tcmake -DUSE_CUDNN=1 -DBLAS=Open .. && \\\n# \tmake -j\"$(nproc)\" all\n# RUN cd /root/caffe/build && \\\n#   make install\n#\n# # Set up Caffe environment variables\n# ENV CAFFE_ROOT=/root/caffe\n# ENV PYCAFFE_ROOT=$CAFFE_ROOT/python\n# ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \\\n# \tPATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\n#\n# RUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n#  Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#  Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#  Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\n#  Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#  Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#  Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn \\\n && luarocks install cutorch \\\n && luarocks install cunn \\\n && luarocks install loadcaffe \\\n && cd /root \\\n && git clone https://github.com/soumith/cudnn.torch.git \\\n && cd cudnn.torch \\\n && git checkout R4 \\\n && luarocks make \\\n && cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n# TODO# Install OpenCV\n# RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n# \tcd /root/opencv && \\\n# \tmkdir build && \\\n# \tcd build && \\\n# \tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n# \tmake -j\"$(nproc)\"  && \\\n# \tmake install && \\\n# \tldconfig && \\\n# \techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#  Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n#  Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"190492cd0ce4fa4b0476e50f5b66720f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu14.04\nMAINTAINER Sai Soundararaj <saip@outlook.com>\nARG THEANO_VERSION=rel-0.8.2\nARG TENSORFLOW_VERSION=0.12.1\nARG TENSORFLOW_ARCH=gpu\nARG KERAS_VERSION=1.2.0\nARG LASAGNE_VERSION=v0.1\nARG TORCH_VERSION=latest\nARG CAFFE_VERSION=master\nARG PYTHON_BASEDEPS=\"build-essential python-pip\"\nARG PYTHON_BUILDDEPS=\"libbz2-dev  libc6-dev  libgdbm-dev  libncursesw5-dev  libreadline-gplv2-dev  libsqlite3-dev  libssl-dev  tk-dev\"\n#  RUN echo -e \"\\n**********************\\nNVIDIA Driver Version\\n**********************\\n\" && \\\n#  \tcat /proc/driver/nvidia/version && \\\n#  \techo -e \"\\n**********************\\nCUDA Version\\n**********************\\n\" && \\\n#  \tnvcc -V && \\\n#  \techo -e \"\\n\\nBuilding your Deep Learning Docker Image...\\n\"\n#   Install some dependencies\nRUN apt-get update \\\n && apt-get install bc build-essential cmake curl g++ gfortran git libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblcms2-dev libopenblas-dev liblapack-dev libopenjpeg2 libpng12-dev libssl-dev libtiff5-dev libwebp-dev libzmq3-dev nano pkg-config python-dev software-properties-common unzip vim wget zlib1g-dev qt5-default libvtk6-dev zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev libeigen3-dev python-dev python-tk python-numpy python3-dev python3-tk python3-numpy ant default-jdk doxygen -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/* \\\n && update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3\nARG PYTHON_TARFILE=\"Python-2.7.9.tgz\"\nARG PYTHON_TARHOST=\"https://www.python.org/ftp/python/2.7.9\"\nARG PYTHON_SRCDIR=\"Python-2.7.9\"\nRUN apt-get update\nRUN apt-get install ${PYTHON_BASEDEPS} ${PYTHON_BUILDDEPS} -y\nRUN wget \"${PYTHON_TARHOST}/${PYTHON_TARFILE}\"\nRUN tar xvf ${PYTHON_TARFILE}\nRUN cd ${PYTHON_SRCDIR} \\\n && ./configure \\\n && make \\\n && make install\n#   Install pip\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\n#   Add SNI support to Python\nRUN pip install pyopenssl ndg-httpsclient pyasn1 --no-cache-dir\n#   Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary\n#   especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)\nRUN apt-get update \\\n && apt-get install python-numpy python-scipy python-nose python-h5py python-skimage python-matplotlib python-pandas python-sklearn python-sympy -y\nRUN apt-get update \\\n && apt-get install libffi-dev libssl-dev -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   Install other useful Python packages using pip\nRUN pip install pip --upgrade\nRUN pip install pyopenssl ndg-httpsclient pyasn1\nRUN pip install ipython --no-cache-dir --upgrade\nRUN pip install Cython --no-cache-dir\nRUN pip install path.py --no-cache-dir\nRUN pip install Pillow --no-cache-dir\nRUN pip install pygments --no-cache-dir\nRUN pip install six --no-cache-dir\nRUN pip install sphinx --no-cache-dir\nRUN pip install wheel --no-cache-dir\nRUN pip install zmq --no-cache-dir\n#  TODO move UP\nRUN wget https://www.openssl.org/source/openssl-1.0.2n.tar.gz\nRUN tar -xvzf openssl-1.0.2n.tar.gz\nRUN cd openssl-1.0.2n \\\n && ./config \\\n && sudo make \\\n && sudo make install\nRUN ln -sf /usr/local/ssl/bin/openssl `which openssl `\nRUN sleep 1\nRUN openssl version -v\nRUN pip install ipykernel --no-cache-dir\nRUN pip install jupyter --no-cache-dir\nRUN python -m ipykernel.kernelspec\n#  TODO take out if ipykernel gets installed\n#  RUN false\n#   Install TensorFlow\nRUN pip install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl --no-cache-dir\n#   Install dependencies for Caffe\nRUN apt-get update \\\n && apt-get install libboost-all-dev libgflags-dev libgoogle-glog-dev libhdf5-serial-dev libleveldb-dev liblmdb-dev libopencv-dev libprotobuf-dev libsnappy-dev protobuf-compiler -y \\\n && apt-get clean \\\n && apt-get autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  ## Install Caffe\n#  RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe\n#  RUN\tcd /root/caffe && \\\n#    cat python/requirements.txt | xargs -n1  -L 1 pip install\n#  RUN pip install -r /root/caffe/python/requirements.txt\n#  RUN cd /root/caffe && \\\n#    mkdir build && cd build && \\\n#  \tcmake -DUSE_CUDNN=1 -DBLAS=Open .. && \\\n#  \tmake -j\"$(nproc)\" all\n#  RUN cd /root/caffe/build && \\\n#    make install\n#\n#  # Set up Caffe environment variables\n#  ENV CAFFE_ROOT=/root/caffe\n#  ENV PYCAFFE_ROOT=$CAFFE_ROOT/python\n#  ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \\\n#  \tPATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH\n#\n#  RUN echo \"$CAFFE_ROOT/build/lib\" >> /etc/ld.so.conf.d/caffe.conf && ldconfig\n#   Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS\nRUN pip install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} --no-cache-dir \\\n && echo \"[global]\\ndevice=gpu\\nfloatX=float32\\noptimizer_including=cudnn\\nmode=FAST_RUN \\n[lib]\\ncnmem=0.95 \\n[nvcc]\\nfastmath=True \\n[blas]\\nldflag = -L/usr/lib/openblas-base -lopenblas \\n[DebugMode]\\ncheck_finite=1\" > /root/.theanorc\n#   Install Keras\nRUN pip install git+git://github.com/fchollet/keras.git@${KERAS_VERSION} --no-cache-dir\n#   Install Lasagne\nRUN pip install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION} --no-cache-dir\n#   Install Torch\nRUN git clone https://github.com/torch/distro.git /root/torch --recursive \\\n && cd /root/torch \\\n && bash install-deps \\\n && yes no | ./install.sh\n#   Export the LUA evironment variables manually\nENV LUA_PATH=\"/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\" \\\n    LUA_CPATH=\"/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so\" \\\n    PATH=\"/root/torch/install/bin:$PATH\" \\\n    LD_LIBRARY_PATH=\"/root/torch/install/lib:$LD_LIBRARY_PATH\" \\\n    DYLD_LIBRARY_PATH=\"/root/torch/install/lib:$DYLD_LIBRARY_PATH\"\nENV LUA_CPATH=\"/root/torch/install/lib/?.so;$LUA_CPATH\"\n#   Install the latest versions of nn, cutorch, cunn, cuDNN bindings and iTorch\nRUN luarocks install nn \\\n && luarocks install cutorch \\\n && luarocks install cunn \\\n && luarocks install loadcaffe \\\n && cd /root \\\n && git clone https://github.com/soumith/cudnn.torch.git \\\n && cd cudnn.torch \\\n && git checkout R4 \\\n && luarocks make \\\n && cd /root \\\n && git clone https://github.com/facebook/iTorch.git \\\n && cd iTorch \\\n && luarocks make\n#  TODO# Install OpenCV\n#  RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \\\n#  \tcd /root/opencv && \\\n#  \tmkdir build && \\\n#  \tcd build && \\\n#  \tcmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \\\n#  \tmake -j\"$(nproc)\"  && \\\n#  \tmake install && \\\n#  \tldconfig && \\\n#  \techo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   Set up notebook config\nCOPY jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\nCOPY run_jupyter.sh /root/\n#   Expose Ports for TensorBoard (6006), Ipython (8888)\nEXPOSE 6006/tcp 8888/tcp\nWORKDIR \"/root\"\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"c85394b5e450f6e0c816e2d7d7d2c37a","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b168939609b4675ee5dc2be3a6d9acda004f0876.dockerfile"}