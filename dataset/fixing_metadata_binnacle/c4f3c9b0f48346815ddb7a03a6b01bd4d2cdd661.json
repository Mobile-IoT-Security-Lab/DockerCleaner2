{"seed":3013773316,"processedDockerfileHash":"975a4b1a9c90403953ed20fcf260b7e7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"# escape = `\n#   -----------------------------------------------------------------------------------------\n#   This file describes the standard way to build Docker in a container on Windows\n#   Server 2016 or Windows 10.\n#\n#   Maintainer: @jhowardmsft\n#   -----------------------------------------------------------------------------------------\n#   Prerequisites:\n#   --------------\n#\n#   1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release\n#      versions of Windows are not supported (eg Windows Server 2016 TP5). The build\n#      number must be at least 14393. This can be confirmed, for example, by running\n#      the following from an elevated PowerShell prompt - this sample output is from a \n#      fully up to date machine as at late October 2016:\n#\n#      >> PS C:\\> $(gin).WindowsBuildLabEx\n#      >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338\n#\n#   2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#   3. The machine must be configured to run containers. For example, by following\n#      the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#      https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#   -----------------------------------------------------------------------------------------\n#   Usage:\n#   -----\n#\n#    The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#    (*In a default installation of containers on Windows following the quick-start guidance at\n#      https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#      the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#   1. Clone the sources from github.com:\n#\n#      >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#      >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#      >>   remote: Counting objects: 186216, done.\n#      >>   remote: Compressing objects: 100% (21/21), done.\n#      >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#      >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#      >>   Resolving deltas: 100% (123139/123139), done.\n#      >>   Checking connectivity... done.\n#      >>   Checking out files: 100% (3912/3912), done.\n#      >>   PS C:\\>\n#\n#\n#   2. Change directory to the cloned docker sources:\n#\n#      >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#   3. Build a docker image with the components required to build the docker binaries from source:\n#\n#      >>   docker build -t nativebuildimage -f Dockerfile.windows .\n#\n#\n#   4. Build the docker executable binaries in a container:\n#\n#      >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'\n#\n#\n#   5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination \n#      folder on the host system where you want the binaries to be located.\n#\n#      >>   $v=$(Get-Content \".\\VERSION\" -raw).ToString().Replace(\"`n\",\"\").Trim()\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-client\\docker-$v.exe C:\\HostPath\\docker.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\dockerd.exe C:\\HostPath\\dockerd.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\docker-proxy-$v.exe C:\\HostPath\\docker-proxy.exe\n#\n#\n#   6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#      >>    docker rm binaries\n#\n#\n#   7. (Optional) Remove the image used for the container in which the executable\n#      binaries are build. Tip - it may be useful to keep this image around if you need to\n#      build multiple times. Then you can take advantage of the builder cache to have an\n#      image which has all the components required to build the binaries already installed.\n#\n#      >>    docker rmi nativebuildimage\n#   -----------------------------------------------------------------------------------------\n#   Important notes:\n#   ---------------\n#\n#   The posix utilities from git aren't usable interactively as at October 2016. This\n#   is because they require a console window which isn't present in a container in Windows.\n#   See the example at the top of this file. Do NOT use -it in that docker run. It will not work.\n#\n#   Don't attempt to use a volume for passing the source through to the container. The posix utilities will\n#   balk at reparse points. \n#\n#   The downloaded files are not cleared from the image. go.zip is used by the Windows\n#   CI servers to ensure the host and image are running consistent versions of go.\n#\n#   The GIT installer isn't very good at unattended install. We use techniques described\n#   at the links below to force it to set the path and other options accordingly. \n#   >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments \n#   and follow through to installer at\n#   >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1\n#   -----------------------------------------------------------------------------------------\n#   The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#   Use PowerShell as the default shell\nSHELL [\"powershell\", \"-command\"]\n#   Environment variable notes:\n#    - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.7.3\" `\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.10.1.windows.1/Git-2.10.1-64-bit.exe\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nWORKDIR C:\\\nRUN setx /M Path $( $Env:PATH+';C:\\gcc\\bin;C:\\go\\bin' ;) ; $ErrorActionPreference = 'Stop' ; Function Download-File\n#   Prepare for building\nCOPY . C:\\go\\src\\github.com\\docker\\docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# escape = `\n#  -----------------------------------------------------------------------------------------\n#  This file describes the standard way to build Docker in a container on Windows\n#  Server 2016 or Windows 10.\n#\n#  Maintainer: @jhowardmsft\n#  -----------------------------------------------------------------------------------------\n#  Prerequisites:\n#  --------------\n#\n#  1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release\n#     versions of Windows are not supported (eg Windows Server 2016 TP5). The build\n#     number must be at least 14393. This can be confirmed, for example, by running\n#     the following from an elevated PowerShell prompt - this sample output is from a \n#     fully up to date machine as at late October 2016:\n#\n#     >> PS C:\\> $(gin).WindowsBuildLabEx\n#     >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338\n#\n#  2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#  3. The machine must be configured to run containers. For example, by following\n#     the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#     https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#  -----------------------------------------------------------------------------------------\n#  Usage:\n#  -----\n#\n#   The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#   (*In a default installation of containers on Windows following the quick-start guidance at\n#     https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#     the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#  1. Clone the sources from github.com:\n#\n#     >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#     >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#     >>   remote: Counting objects: 186216, done.\n#     >>   remote: Compressing objects: 100% (21/21), done.\n#     >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#     >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#     >>   Resolving deltas: 100% (123139/123139), done.\n#     >>   Checking connectivity... done.\n#     >>   Checking out files: 100% (3912/3912), done.\n#     >>   PS C:\\>\n#\n#\n#  2. Change directory to the cloned docker sources:\n#\n#     >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#  3. Build a docker image with the components required to build the docker binaries from source:\n#\n#     >>   docker build -t nativebuildimage -f Dockerfile.windows .\n#\n#\n#  4. Build the docker executable binaries in a container:\n#\n#     >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'\n#\n#\n#  5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination \n#     folder on the host system where you want the binaries to be located.\n#\n#     >>   $v=$(Get-Content \".\\VERSION\" -raw).ToString().Replace(\"`n\",\"\").Trim()\n#     >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-client\\docker-$v.exe C:\\HostPath\\docker.exe\n#     >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\dockerd.exe C:\\HostPath\\dockerd.exe\n#     >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\docker-proxy-$v.exe C:\\HostPath\\docker-proxy.exe\n#\n#\n#  6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#     >>    docker rm binaries\n#\n#\n#  7. (Optional) Remove the image used for the container in which the executable\n#     binaries are build. Tip - it may be useful to keep this image around if you need to\n#     build multiple times. Then you can take advantage of the builder cache to have an\n#     image which has all the components required to build the binaries already installed.\n#\n#     >>    docker rmi nativebuildimage\n#  -----------------------------------------------------------------------------------------\n#  Important notes:\n#  ---------------\n#\n#  The posix utilities from git aren't usable interactively as at October 2016. This\n#  is because they require a console window which isn't present in a container in Windows.\n#  See the example at the top of this file. Do NOT use -it in that docker run. It will not work.\n#\n#  Don't attempt to use a volume for passing the source through to the container. The posix utilities will\n#  balk at reparse points. \n#\n#  The downloaded files are not cleared from the image. go.zip is used by the Windows\n#  CI servers to ensure the host and image are running consistent versions of go.\n#\n#  The GIT installer isn't very good at unattended install. We use techniques described\n#  at the links below to force it to set the path and other options accordingly. \n#  >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments \n#  and follow through to installer at\n#  >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1\n#  -----------------------------------------------------------------------------------------\n#  The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#  Use PowerShell as the default shell\nSHELL [\"powershell\", \"-command\"]\n#  Environment variable notes:\n#   - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#   - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.7.3\" `\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.10.1.windows.1/Git-2.10.1-64-bit.exe\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nWORKDIR C:\\\nRUN setx /M Path $( $Env:PATH+';C:\\gcc\\bin;C:\\go\\bin' ;) ; $ErrorActionPreference = 'Stop' ; Function Download-File\n#  Prepare for building\nCOPY . C:\\go\\src\\github.com\\docker\\docker\n","injectedSmells":[],"originalDockerfileHash":"895e7d92c4fddb0e64c755e4b3a28804","successfullyInjectedSmells":[],"originalDockerfileUglified":"# escape = `\n#   -----------------------------------------------------------------------------------------\n#   This file describes the standard way to build Docker in a container on Windows\n#   Server 2016 or Windows 10.\n#\n#   Maintainer: @jhowardmsft\n#   -----------------------------------------------------------------------------------------\n#   Prerequisites:\n#   --------------\n#\n#   1. Windows 10 or Windows Server 2016 with all Windows updates applied. Pre-release\n#      versions of Windows are not supported (eg Windows Server 2016 TP5). The build\n#      number must be at least 14393. This can be confirmed, for example, by running\n#      the following from an elevated PowerShell prompt - this sample output is from a \n#      fully up to date machine as at late October 2016:\n#\n#      >> PS C:\\> $(gin).WindowsBuildLabEx\n#      >> 14393.321.amd64fre.rs1_release_inmarket.161004-2338\n#\n#   2. Git for Windows (or another git client) must be installed. https://git-scm.com/download/win.\n#\n#   3. The machine must be configured to run containers. For example, by following\n#      the quick start guidance at https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start or\n#      https://github.com/docker/labs/blob/master/windows/windows-containers/Setup.md\n#   -----------------------------------------------------------------------------------------\n#   Usage:\n#   -----\n#\n#    The following steps should be run from an (elevated*) Windows PowerShell prompt. \n#\n#    (*In a default installation of containers on Windows following the quick-start guidance at\n#      https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start,\n#      the docker.exe client must run elevated to be able to connect to the daemon).\n#\n#   1. Clone the sources from github.com:\n#\n#      >>   git clone https://github.com/docker/docker.git C:\\go\\src\\github.com\\docker\\docker\n#      >>   Cloning into 'C:\\go\\src\\github.com\\docker\\docker'...\n#      >>   remote: Counting objects: 186216, done.\n#      >>   remote: Compressing objects: 100% (21/21), done.\n#      >>   remote: Total 186216 (delta 5), reused 0 (delta 0), pack-reused 186195\n#      >>   Receiving objects: 100% (186216/186216), 104.32 MiB | 8.18 MiB/s, done.\n#      >>   Resolving deltas: 100% (123139/123139), done.\n#      >>   Checking connectivity... done.\n#      >>   Checking out files: 100% (3912/3912), done.\n#      >>   PS C:\\>\n#\n#\n#   2. Change directory to the cloned docker sources:\n#\n#      >>   cd C:\\go\\src\\github.com\\docker\\docker \n#\n#\n#   3. Build a docker image with the components required to build the docker binaries from source:\n#\n#      >>   docker build -t nativebuildimage -f Dockerfile.windows .\n#\n#\n#   4. Build the docker executable binaries in a container:\n#\n#      >>   docker run --name binaries nativebuildimage sh -c 'cd /c/go/src/github.com/docker/docker; hack/make.sh binary'\n#\n#\n#   5. Copy the binaries out of the above container, replacing HostPath with an appropriate destination \n#      folder on the host system where you want the binaries to be located.\n#\n#      >>   $v=$(Get-Content \".\\VERSION\" -raw).ToString().Replace(\"`n\",\"\").Trim()\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-client\\docker-$v.exe C:\\HostPath\\docker.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\dockerd.exe C:\\HostPath\\dockerd.exe\n#      >>   docker cp binaries:C:\\go\\src\\github.com\\docker\\docker\\bundles\\$v\\binary-daemon\\docker-proxy-$v.exe C:\\HostPath\\docker-proxy.exe\n#\n#\n#   6. (Optional) Remove the interim container holding the built executable binaries:\n#\n#      >>    docker rm binaries\n#\n#\n#   7. (Optional) Remove the image used for the container in which the executable\n#      binaries are build. Tip - it may be useful to keep this image around if you need to\n#      build multiple times. Then you can take advantage of the builder cache to have an\n#      image which has all the components required to build the binaries already installed.\n#\n#      >>    docker rmi nativebuildimage\n#   -----------------------------------------------------------------------------------------\n#   Important notes:\n#   ---------------\n#\n#   The posix utilities from git aren't usable interactively as at October 2016. This\n#   is because they require a console window which isn't present in a container in Windows.\n#   See the example at the top of this file. Do NOT use -it in that docker run. It will not work.\n#\n#   Don't attempt to use a volume for passing the source through to the container. The posix utilities will\n#   balk at reparse points. \n#\n#   The downloaded files are not cleared from the image. go.zip is used by the Windows\n#   CI servers to ensure the host and image are running consistent versions of go.\n#\n#   The GIT installer isn't very good at unattended install. We use techniques described\n#   at the links below to force it to set the path and other options accordingly. \n#   >> http://superuser.com/questions/944576/git-for-windows-silent-install-silent-arguments \n#   and follow through to installer at\n#   >> https://github.com/ferventcoder/chocolatey-packages/blob/master/automatic/git.install/tools/chocolateyInstall.ps1\n#   -----------------------------------------------------------------------------------------\n#   The number of build steps below are explicitly minimised to improve performance.\nFROM microsoft/windowsservercore\n#   Use PowerShell as the default shell\nSHELL [\"powershell\", \"-command\"]\n#   Environment variable notes:\n#    - GO_VERSION must be consistent with 'Dockerfile' used by Linux.\n#    - FROM_DOCKERFILE is used for detection of building within a container.\nENV GO_VERSION=\"1.7.3\" `\n    GIT_LOCATION=\"https://github.com/git-for-windows/git/releases/download/v2.10.1.windows.1/Git-2.10.1-64-bit.exe\" `\n    GOPATH=\"C:\\go\" `\n    FROM_DOCKERFILE=\"1\"\nWORKDIR C:\\\nRUN setx /M Path $( $Env:PATH+';C:\\gcc\\bin;C:\\go\\bin' ;) ; $ErrorActionPreference = 'Stop' ; Function Download-File\n#   Prepare for building\nCOPY . C:\\go\\src\\github.com\\docker\\docker\n","originalDockerfileUglifiedHash":"55696264d1830dfdd872f3c7d3ce5973","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c4f3c9b0f48346815ddb7a03a6b01bd4d2cdd661.dockerfile"}