{"seed":2533733239,"processedDockerfileHash":"4ecd65baa460bb3791d236dc76e33b1e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #########################\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.gpu\n#   https://gcr.io/tensorflow/tensorflow\nFROM gcr.io/tensorflow/tensorflow:1.3.0-py3\n#  #########################\n#  #########################\n#   Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n#  #########################\n#  #########################\n#   Update OS\n#   Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends build-essential gcc apt-utils pkg-config software-properties-common apt-transport-https libssl-dev sudo bash bash-completion tar unzip curl wget git libcupti-dev rsync python python-pip python-dev python3-pip libhdf5-dev python-tk python3-tk -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n#  #########################\n#  #########################\n#   built for CPU, no need to install cuda\n#  #########################\n#  #########################\n#   install basic packages\nRUN pip3 --no-cache-dir install requests glog humanize bcolz h5py\n#  #########################\n#  #########################\n#   install Keras\nRUN pip3 --no-cache-dir install theano keras==2.0.8 \\\n && echo $'[global]\\ndevice = cpu\\nfloatX = float32\\n[cuda]\\nroot = /usr/local/cuda\\n' > ${HOME}/.theanorc \\\n && cat ${HOME}/.theanorc \\\n && mkdir -p ${HOME}/.keras/datasets \\\n && mkdir -p ${HOME}/.keras/models \\\n && echo $'{\\n \"image_data_format\": \"channels_last\",\\n \"epsilon\": 1e-07,\\n \"floatx\": \"float32\",\\n \"backend\": \"tensorflow\"\\n}\\n' > ${HOME}/.keras/keras.json \\\n && cat ${HOME}/.keras/keras.json\n#  #########################\n#  #########################\n#   Clone source code, static assets\nCOPY ./datasets/parameters-cats.npy /root/datasets/parameters-cats.npy\nCOPY ./backend ${ROOT_DIR}/backend\nCOPY ./scripts/docker/run ${ROOT_DIR}/scripts/docker/run\nCOPY ./scripts/tests ${ROOT_DIR}/scripts/tests\n#  #########################\n#  #########################\n#   Configure Jupyter\nCOPY ./jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nCOPY ./run_jupyter.sh /\n#  #########################\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #########################\n#  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile\n#  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.gpu\n#  https://gcr.io/tensorflow/tensorflow\nFROM gcr.io/tensorflow/tensorflow:1.3.0-py3\n# #########################\n# #########################\n#  Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n# #########################\n# #########################\n#  Update OS\n#  Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install build-essential gcc apt-utils pkg-config software-properties-common apt-transport-https libssl-dev sudo bash bash-completion tar unzip curl wget git libcupti-dev rsync python python-pip python-dev python3-pip libhdf5-dev python-tk python3-tk -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n# #########################\n# #########################\n#  built for CPU, no need to install cuda\n# #########################\n# #########################\n#  install basic packages\nRUN pip3 --no-cache-dir install requests glog humanize bcolz h5py\n# #########################\n# #########################\n#  install Keras\nRUN pip3 --no-cache-dir install theano keras==2.0.8 \\\n && echo $'[global]\\ndevice = cpu\\nfloatX = float32\\n[cuda]\\nroot = /usr/local/cuda\\n' > ${HOME}/.theanorc \\\n && cat ${HOME}/.theanorc \\\n && mkdir -p ${HOME}/.keras/datasets \\\n && mkdir -p ${HOME}/.keras/models \\\n && echo $'{\\n \"image_data_format\": \"channels_last\",\\n \"epsilon\": 1e-07,\\n \"floatx\": \"float32\",\\n \"backend\": \"tensorflow\"\\n}\\n' > ${HOME}/.keras/keras.json \\\n && cat ${HOME}/.keras/keras.json\n# #########################\n# #########################\n#  Clone source code, static assets\nADD ./datasets/parameters-cats.npy /root/datasets/parameters-cats.npy\nADD ./backend ${ROOT_DIR}/backend\nADD ./scripts/docker/run ${ROOT_DIR}/scripts/docker/run\nADD ./scripts/tests ${ROOT_DIR}/scripts/tests\n# #########################\n# #########################\n#  Configure Jupyter\nADD ./jupyter_notebook_config.py /root/.jupyter/\n#  Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#  We just add a little wrapper script.\nADD ./run_jupyter.sh /\n# #########################\n","injectedSmells":[],"originalDockerfileHash":"0c12e11138b56aed27d9ef459705b377","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #########################\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.gpu\n#   https://gcr.io/tensorflow/tensorflow\nFROM gcr.io/tensorflow/tensorflow:1.3.0-py3\n#  #########################\n#  #########################\n#   Set working directory\nENV ROOT_DIR=\"/\"\nWORKDIR ${ROOT_DIR}\nENV HOME=\"/root\"\n#  #########################\n#  #########################\n#   Update OS\n#   Configure 'bash' for 'source' commands\nRUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections \\\n && apt-get update -y \\\n && apt-get install build-essential gcc apt-utils pkg-config software-properties-common apt-transport-https libssl-dev sudo bash bash-completion tar unzip curl wget git libcupti-dev rsync python python-pip python-dev python3-pip libhdf5-dev python-tk python3-tk -y \\\n && rm /bin/sh \\\n && ln -s /bin/bash /bin/sh \\\n && ls -l $( which bash ;) \\\n && echo \"root ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y dist-upgrade \\\n && apt-get update -y \\\n && apt-get -y upgrade \\\n && apt-get -y autoremove \\\n && apt-get -y autoclean\n#  #########################\n#  #########################\n#   built for CPU, no need to install cuda\n#  #########################\n#  #########################\n#   install basic packages\nRUN pip3 --no-cache-dir install requests glog humanize bcolz h5py\n#  #########################\n#  #########################\n#   install Keras\nRUN pip3 --no-cache-dir install theano keras==2.0.8 \\\n && echo $'[global]\\ndevice = cpu\\nfloatX = float32\\n[cuda]\\nroot = /usr/local/cuda\\n' > ${HOME}/.theanorc \\\n && cat ${HOME}/.theanorc \\\n && mkdir -p ${HOME}/.keras/datasets \\\n && mkdir -p ${HOME}/.keras/models \\\n && echo $'{\\n \"image_data_format\": \"channels_last\",\\n \"epsilon\": 1e-07,\\n \"floatx\": \"float32\",\\n \"backend\": \"tensorflow\"\\n}\\n' > ${HOME}/.keras/keras.json \\\n && cat ${HOME}/.keras/keras.json\n#  #########################\n#  #########################\n#   Clone source code, static assets\nADD ./datasets/parameters-cats.npy /root/datasets/parameters-cats.npy\nADD ./backend ${ROOT_DIR}/backend\nADD ./scripts/docker/run ${ROOT_DIR}/scripts/docker/run\nADD ./scripts/tests ${ROOT_DIR}/scripts/tests\n#  #########################\n#  #########################\n#   Configure Jupyter\nADD ./jupyter_notebook_config.py /root/.jupyter/\n#   Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#   We just add a little wrapper script.\nADD ./run_jupyter.sh /\n#  #########################\n","originalDockerfileUglifiedHash":"f712b9dd65f7b0e28361d2255ec453c9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/fa52f3ae7d0c2124912c7c5599addd81270e8896.dockerfile"}