{"seed":2754793825,"processedDockerfileHash":"96ea119d0daadac4c0c102bbc3a95446","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER nweir <nweir@iqt.org>\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#   prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#   install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim wget build-essential -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#   install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /usr/bin/tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /usr/bin/tini\n#   use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#   set up conda environment and add to $PATH\nRUN conda create -n space_base python=3.6 \\\n && echo \"source activate space_base\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/space_base/bin:$PATH\"\n#   install GPU version of tensorflow\nRUN source activate space_base \\\n && conda install -n space_base -c defaults tensorflow-gpu\n#   install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate space_base \\\n && conda install -n space_base keras\n#   install various conda dependencies into the space_base environment\nRUN conda install -n space_base awscli osmnx=0.7.3 affine pyproj pyhamcrest=1.9.0 cython fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy opencv pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio\n#   add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate space_base \\\n && python -m ipykernel.kernelspec\n#   open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\n#   switch to a temp working dir to get and install spacenetutilities V3\nWORKDIR /tmp/\nRUN git clone https://github.com/SpaceNetChallenge/utilities.git \\\n && cd utilities \\\n && git checkout spacenetV3 \\\n && source activate space_base \\\n && pip install --no-cache-dir --no-dependencies -e .\nRUN source activate space_base \\\n && pip install -e git+git://github.com/cosmiq/cosmiq_sn4_baseline.git@1.1.2#egg=cosmiq_sn4_baseline-1.1.2\nRUN [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER nweir <nweir@iqt.org>\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#  prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#  install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim wget build-essential -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#  install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n#  use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#  set up conda environment and add to $PATH\nRUN conda create -n space_base python=3.6 \\\n && echo \"source activate space_base\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/space_base/bin:$PATH\"\n#  install GPU version of tensorflow\nRUN source activate space_base \\\n && conda install -n space_base -c defaults tensorflow-gpu\n#  install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate space_base \\\n && conda install -n space_base keras\n#  install various conda dependencies into the space_base environment\nRUN conda install -n space_base awscli osmnx=0.7.3 affine pyproj pyhamcrest=1.9.0 cython fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy opencv pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio\n#  add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate space_base \\\n && python -m ipykernel.kernelspec\n#  open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\n#  switch to a temp working dir to get and install spacenetutilities V3\nWORKDIR /tmp/\nRUN git clone https://github.com/SpaceNetChallenge/utilities.git \\\n && cd utilities \\\n && git checkout spacenetV3 \\\n && source activate space_base \\\n && pip install --no-cache-dir --no-dependencies -e .\nRUN source activate space_base \\\n && pip install -e git+git://github.com/cosmiq/cosmiq_sn4_baseline.git@1.1.2#egg=cosmiq_sn4_baseline-1.1.2\nRUN [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"b9cc6f7b4118ff9cd3b8a265a432d161","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.0-devel-ubuntu16.04\nMAINTAINER nweir <nweir@iqt.org>\nENV CUDNN_VERSION=\"7.3.0.29\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n#   prep apt-get and cudnn\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils libcudnn7=$CUDNN_VERSION-1+cuda9.0 libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 -y \\\n && apt-mark hold libcudnn7 \\\n && rm -rf /var/lib/apt/lists/*\n#   install requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends bc bzip2 ca-certificates curl git libgdal-dev libssl-dev libffi-dev libncurses-dev libgl1 jq nfs-common parallel python-dev python-pip python-wheel python-setuptools unzip vim wget build-essential -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nSHELL [\"/bin/bash\", \"-c\"]\nENV PATH=\"/opt/conda/bin:$PATH\"\n#   install anaconda\nRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh \\\n && /opt/conda/bin/conda clean -tipsy \\\n && ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh \\\n && echo \". /opt/conda/etc/profile.d/conda.sh\" >> ~/.bashrc \\\n && echo \"conda activate base\" >> ~/.bashrc\nENV TINI_VERSION=\"v0.16.1\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini\nRUN chmod +x /usr/bin/tini\n#   use conda-forge instead of default channel\nRUN conda update conda \\\n && conda config --remove channels defaults \\\n && conda config --add channels conda-forge\n#   set up conda environment and add to $PATH\nRUN conda create -n space_base python=3.6 \\\n && echo \"source activate space_base\" > ~/.bashrc\nENV PATH=\"/opt/conda/envs/space_base/bin:$PATH\"\n#   install GPU version of tensorflow\nRUN source activate space_base \\\n && conda install -n space_base -c defaults tensorflow-gpu\n#   install keras with tf backend\nENV KERAS_BACKEND=\"tensorflow\"\nRUN source activate space_base \\\n && conda install -n space_base keras\n#   install various conda dependencies into the space_base environment\nRUN conda install -n space_base awscli osmnx=0.7.3 affine pyproj pyhamcrest=1.9.0 cython fiona h5py ncurses jupyter jupyterlab ipykernel libgdal matplotlib ncurses numpy opencv pandas pillow pip scipy scikit-image scikit-learn shapely gdal rtree testpath tqdm pandas geopandas rasterio\n#   add a jupyter kernel for the conda environment in case it's wanted\nRUN source activate space_base \\\n && python -m ipykernel.kernelspec\n#   open ports for jupyterlab and tensorboard\nEXPOSE 8888/tcp 6006/tcp\n#   switch to a temp working dir to get and install spacenetutilities V3\nWORKDIR /tmp/\nRUN git clone https://github.com/SpaceNetChallenge/utilities.git \\\n && cd utilities \\\n && git checkout spacenetV3 \\\n && source activate space_base \\\n && pip install --no-cache-dir --no-dependencies -e .\nRUN source activate space_base \\\n && pip install -e git+git://github.com/cosmiq/cosmiq_sn4_baseline.git@1.1.2#egg=cosmiq_sn4_baseline-1.1.2\nRUN [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"802ef2a38a88addd84754117e95d2d2c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5613d34ddd47aa87eea59d87a57600c73f2db201.dockerfile"}