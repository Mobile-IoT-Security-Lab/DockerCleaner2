{"seed":2906864441,"processedDockerfileHash":"adbf8b9af08e7066311474c28964d691","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.10\nRUN apk add bzip2=1.0.6-r7 coreutils=8.31-r0 curl=7.66.0-r4 gcc=8.3.0-r0 gnupg=2.2.19-r0 linux-headers=4.19.36-r0 make=4.2.1-r2 musl-dev=1.1.22-r4 tzdata=2021a-r0 --no-cache\n#   pub   1024D/ACC9965B 2006-12-12\n#         Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#   uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#   sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#   https://www.mail-archive.com/toybox@lists.landley.net/msg02528.html\n#   https://www.mail-archive.com/toybox@lists.landley.net/msg02526.html\nRUN sed -i 's/^struct kconf_id \\*$/static &/g' scripts/kconfig/zconf.hash.c_shipped\n#   CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#   see http://wiki.musl-libc.org/wiki/Building_Busybox\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 CONFIG_STATIC=y ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY CONFIG_FEATURE_HAVE_RPC CONFIG_FEATURE_INETD_RPC CONFIG_FEATURE_UTMP CONFIG_FEATURE_WTMP ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && chroot rootfs /bin/busybox --install /bin\n#   grab a simplified getconf port from Alpine we can statically compile\nRUN set -x \\\n && aportsVersion=\"v$( cat /etc/alpine-release ;)\" \\\n && curl -fsSL \"https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}\" -o /usr/src/getconf.c \\\n && gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN\n#   download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | sh -eux ; rm buildroot-device-table.txt\n#   create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#   test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#   ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#   test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.10\nRUN apk add --no-cache bzip2 coreutils curl gcc gnupg linux-headers make musl-dev tzdata\n#  pub   1024D/ACC9965B 2006-12-12\n#        Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#  uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#  sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#  https://www.mail-archive.com/toybox@lists.landley.net/msg02528.html\n#  https://www.mail-archive.com/toybox@lists.landley.net/msg02526.html\nRUN sed -i 's/^struct kconf_id \\*$/static &/g' scripts/kconfig/zconf.hash.c_shipped\n#  CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#  see http://wiki.musl-libc.org/wiki/Building_Busybox\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 CONFIG_STATIC=y ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY CONFIG_FEATURE_HAVE_RPC CONFIG_FEATURE_INETD_RPC CONFIG_FEATURE_UTMP CONFIG_FEATURE_WTMP ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && chroot rootfs /bin/busybox --install /bin\n#  grab a simplified getconf port from Alpine we can statically compile\nRUN set -x \\\n && aportsVersion=\"v$( cat /etc/alpine-release ;)\" \\\n && curl -fsSL \"https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}\" -o /usr/src/getconf.c \\\n && gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN\n#  download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | sh -eux ; rm buildroot-device-table.txt\n#  create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#  test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#  ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#  test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\n","injectedSmells":[],"originalDockerfileHash":"747c3e42e013d068ccbc8717ad433b39","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.10\nRUN apk add --no-cache bzip2 coreutils curl gcc gnupg linux-headers make musl-dev tzdata\n#   pub   1024D/ACC9965B 2006-12-12\n#         Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#   uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#   sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#   https://www.mail-archive.com/toybox@lists.landley.net/msg02528.html\n#   https://www.mail-archive.com/toybox@lists.landley.net/msg02526.html\nRUN sed -i 's/^struct kconf_id \\*$/static &/g' scripts/kconfig/zconf.hash.c_shipped\n#   CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#   see http://wiki.musl-libc.org/wiki/Building_Busybox\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 CONFIG_STATIC=y ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY CONFIG_FEATURE_HAVE_RPC CONFIG_FEATURE_INETD_RPC CONFIG_FEATURE_UTMP CONFIG_FEATURE_WTMP ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && chroot rootfs /bin/busybox --install /bin\n#   grab a simplified getconf port from Alpine we can statically compile\nRUN set -x \\\n && aportsVersion=\"v$( cat /etc/alpine-release ;)\" \\\n && curl -fsSL \"https://git.alpinelinux.org/cgit/aports/plain/main/musl/getconf.c?h=${aportsVersion}\" -o /usr/src/getconf.c \\\n && gcc -o rootfs/bin/getconf -static -Os /usr/src/getconf.c \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN\n#   download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | sh -eux ; rm buildroot-device-table.txt\n#   create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#   test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#   ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#   test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\n","originalDockerfileUglifiedHash":"96a7cd99d7c09ce34509aefb3c95ed7e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/51037ff39053a126c1ff2b054bbfb32bab327536.dockerfile"}