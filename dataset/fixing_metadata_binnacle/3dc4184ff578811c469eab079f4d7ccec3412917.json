{"seed":2837175632,"processedDockerfileHash":"e8f7d814e9357446a1a2774d64034ab3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   nZEDb Main Dockerfile\n#   Create a quick and clean dev environment\n#\nFROM alpine:3.3\nMAINTAINER razorgirl <https://github.com/razorgirl>\n#   Set correct environment variables.\nENV TZ=\"Europe/London\"\nENV HOME=\"/root\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   Make sure system is up-to-date.\nRUN apk update \\\n && apk upgrade\n#   Create www-data user.\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#   Install basic software.\nRUN apk add curl=7.55.0-r2 git=2.8.6-r0 man=1.13.3-r5 unzip=6.0-r1 vim=7.4.943-r5 wget=1.17.1-r2 tmux=2.1-r2 chrony=2.2.1-r0 build-base=0.4-r1\n#   Install additional software.\n#   (tcptrack and nmon won't work on Alpine Linux)\nRUN apk add htop=1.0.3-r2 bwm-ng=0.6.1-r3\n#   Install vnstat from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget http://humdi.net/vnstat/vnstat-1.16.tar.gz \\\n && tar zxf vnstat-1.16.tar.gz \\\n && cd vnstat-1.16 \\\n && ./configure \\\n && make \\\n && make install\n#   Install mytop from source, since not available as Alpine Linux package.\nRUN apk add perl=5.22.3-r0 perl-dbi=1.634-r0 perl-dbd-mysql=4.033-r0 perl-term-readkey=2.32-r2 \\\n && cd /tmp \\\n && wget http://jeremy.zawodny.com/mysql/mytop/mytop-1.6.tar.gz \\\n && tar zxf mytop-1.6.tar.gz \\\n && cd mytop-1.6 \\\n && perl Makefile.PL \\\n && make \\\n && make install\n#   Install MediaInfo from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget https://mediaarea.net/download/binary/mediainfo/0.7.91/MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && tar Jxf MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && cd MediaInfo_CLI_GNU_FromSource \\\n && ./CLI_Compile.sh \\\n && cd MediaInfo/Project/GNU/CLI \\\n && make install\n#   Install ffmpeg, p7zip, unrar and lame.\nRUN apk add ffmpeg=2.8.11-r0 unrar=5.3.4-r0 lame=3.99.5-r6 p7zip=9.38.1-r2\n#   Install Python modules.\nRUN apk add python=2.7.12-r0 python3=3.5.1-r0 py-pip=7.1.2-r0 \\\n && pip install pip==23.1 --upgrade \\\n && pip install cymysql==0.9.18 \\\n && pip install pynntp==1.0.2 \\\n && pip install socketpool==0.5.3 \\\n && pip list \\\n && pip3 install --upgrade pip \\\n && pip3 install cymysql \\\n && pip3 install pynntp \\\n && pip3 install socketpool \\\n && pip3 list\n#   Install PHP.\nRUN apk add php5 php5-pear php5-gd php5-mysql php5-curl php5-json php5-phar php5-imagick php5-pdo_mysql php5-mcrypt php5-common php5-xml php5-openssl php5-zlib php5-ctype php5-exif php5-iconv php5-sockets\nRUN sed -ri 's/(max_execution_time =) ([0-9]+)/\\1 120/' /etc/php5/php.ini\nRUN sed -ri 's/(memory_limit =) ([0-9]+)/\\1 -1/' /etc/php5/php.ini\nRUN sed -ri 's/;(date.timezone =)/\\1 Europe\\/London/' /etc/php5/php.ini\n#   Setup the Composer installer.\nRUN curl -o /tmp/composer-setup.php https://getcomposer.org/installer \\\n && curl -o /tmp/composer-setup.sig https://composer.github.io/installer.sig \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }\" \\\n && cd /tmp \\\n && php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n#   Clone nZEDb master.\nRUN git clone https://github.com/nZEDb/nZEDb.git /var/www/nZEDb\n#   Set directory permissions.\nRUN chmod -R 755 /var/www/nZEDb \\\n && chgrp www-data /var/www/nZEDb/resources/smarty/templates_c \\\n && chmod 775 /var/www/nZEDb/resources/smarty/templates_c \\\n && chgrp -R www-data /var/www/nZEDb/resources/covers \\\n && chmod -R 775 /var/www/nZEDb/resources/covers \\\n && chgrp www-data /var/www/nZEDb/www \\\n && chmod 775 /var/www/nZEDb/www \\\n && chgrp www-data /var/www/nZEDb/www/install \\\n && chmod 775 /var/www/nZEDb/www/install \\\n && chgrp -R www-data /var/www/nZEDb/resources/nzb \\\n && chmod -R 775 /var/www/nZEDb/resources/nzb \\\n && chmod -R 777 /var/www/nZEDb/nzedb/config\n#   Install dependencies.\nRUN cd /var/www/nZEDb \\\n && composer install --prefer-source\n#   Add pseudo run command.\nCOPY sleep.sh /run.sh\n#   Define mountable directories.\nVOLUME [\"/var/www/nZEDb\"]\n#   Run.\nCMD [\"/run.sh\"]\n#   Clean up when done.\nRUN rm -rf /tmp/* /var/tmp/*\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  nZEDb Main Dockerfile\n#  Create a quick and clean dev environment\n#\nFROM alpine:3.3\nMAINTAINER razorgirl <https://github.com/razorgirl>\n#  Set correct environment variables.\nENV TZ=\"Europe/London\"\nENV HOME=\"/root\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#  Make sure system is up-to-date.\nRUN apk update \\\n && apk upgrade\n#  Create www-data user.\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#  Install basic software.\nRUN apk add curl git man unzip vim wget tmux chrony build-base\n#  Install additional software.\n#  (tcptrack and nmon won't work on Alpine Linux)\nRUN apk add htop bwm-ng\n#  Install vnstat from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget http://humdi.net/vnstat/vnstat-1.16.tar.gz \\\n && tar zxf vnstat-1.16.tar.gz \\\n && cd vnstat-1.16 \\\n && ./configure \\\n && make \\\n && make install\n#  Install mytop from source, since not available as Alpine Linux package.\nRUN apk add perl perl-dbi perl-dbd-mysql perl-term-readkey \\\n && cd /tmp \\\n && wget http://jeremy.zawodny.com/mysql/mytop/mytop-1.6.tar.gz \\\n && tar zxf mytop-1.6.tar.gz \\\n && cd mytop-1.6 \\\n && perl Makefile.PL \\\n && make \\\n && make install\n#  Install MediaInfo from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget https://mediaarea.net/download/binary/mediainfo/0.7.91/MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && tar Jxf MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && cd MediaInfo_CLI_GNU_FromSource \\\n && ./CLI_Compile.sh \\\n && cd MediaInfo/Project/GNU/CLI \\\n && make install\n#  Install ffmpeg, p7zip, unrar and lame.\nRUN apk add ffmpeg unrar lame p7zip\n#  Install Python modules.\nRUN apk add python python3 py-pip \\\n && pip install pip --upgrade \\\n && pip install cymysql \\\n && pip install pynntp \\\n && pip install socketpool \\\n && pip list \\\n && pip3 install --upgrade pip \\\n && pip3 install cymysql \\\n && pip3 install pynntp \\\n && pip3 install socketpool \\\n && pip3 list\n#  Install PHP.\nRUN apk add php5 php5-pear php5-gd php5-mysql php5-curl php5-json php5-phar php5-imagick php5-pdo_mysql php5-mcrypt php5-common php5-xml php5-openssl php5-zlib php5-ctype php5-exif php5-iconv php5-sockets\nRUN sed -ri 's/(max_execution_time =) ([0-9]+)/\\1 120/' /etc/php5/php.ini\nRUN sed -ri 's/(memory_limit =) ([0-9]+)/\\1 -1/' /etc/php5/php.ini\nRUN sed -ri 's/;(date.timezone =)/\\1 Europe\\/London/' /etc/php5/php.ini\n#  Setup the Composer installer.\nRUN curl -o /tmp/composer-setup.php https://getcomposer.org/installer \\\n && curl -o /tmp/composer-setup.sig https://composer.github.io/installer.sig \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }\" \\\n && cd /tmp \\\n && php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n#  Clone nZEDb master.\nRUN git clone https://github.com/nZEDb/nZEDb.git /var/www/nZEDb\n#  Set directory permissions.\nRUN chmod -R 755 /var/www/nZEDb \\\n && chgrp www-data /var/www/nZEDb/resources/smarty/templates_c \\\n && chmod 775 /var/www/nZEDb/resources/smarty/templates_c \\\n && chgrp -R www-data /var/www/nZEDb/resources/covers \\\n && chmod -R 775 /var/www/nZEDb/resources/covers \\\n && chgrp www-data /var/www/nZEDb/www \\\n && chmod 775 /var/www/nZEDb/www \\\n && chgrp www-data /var/www/nZEDb/www/install \\\n && chmod 775 /var/www/nZEDb/www/install \\\n && chgrp -R www-data /var/www/nZEDb/resources/nzb \\\n && chmod -R 775 /var/www/nZEDb/resources/nzb \\\n && chmod -R 777 /var/www/nZEDb/nzedb/config\n#  Install dependencies.\nRUN cd /var/www/nZEDb \\\n && composer install --prefer-source\n#  Add pseudo run command.\nADD sleep.sh /run.sh\n#  Define mountable directories.\nVOLUME [\"/var/www/nZEDb\"]\n#  Run.\nCMD [\"/run.sh\"]\n#  Clean up when done.\nRUN rm -rf /tmp/* /var/tmp/*\n","injectedSmells":[],"originalDockerfileHash":"cd3c57a8d462ba567b0cf675a91bdd50","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   nZEDb Main Dockerfile\n#   Create a quick and clean dev environment\n#\nFROM alpine:3.3\nMAINTAINER razorgirl <https://github.com/razorgirl>\n#   Set correct environment variables.\nENV TZ=\"Europe/London\"\nENV HOME=\"/root\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\n#   Make sure system is up-to-date.\nRUN apk update \\\n && apk upgrade\n#   Create www-data user.\nRUN set -x \\\n && addgroup -g 82 -S www-data \\\n && adduser -u 82 -D -S -G www-data www-data\n#   Install basic software.\nRUN apk add curl git man unzip vim wget tmux chrony build-base\n#   Install additional software.\n#   (tcptrack and nmon won't work on Alpine Linux)\nRUN apk add htop bwm-ng\n#   Install vnstat from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget http://humdi.net/vnstat/vnstat-1.16.tar.gz \\\n && tar zxf vnstat-1.16.tar.gz \\\n && cd vnstat-1.16 \\\n && ./configure \\\n && make \\\n && make install\n#   Install mytop from source, since not available as Alpine Linux package.\nRUN apk add perl perl-dbi perl-dbd-mysql perl-term-readkey \\\n && cd /tmp \\\n && wget http://jeremy.zawodny.com/mysql/mytop/mytop-1.6.tar.gz \\\n && tar zxf mytop-1.6.tar.gz \\\n && cd mytop-1.6 \\\n && perl Makefile.PL \\\n && make \\\n && make install\n#   Install MediaInfo from source, since not available as Alpine Linux package.\nRUN cd /tmp \\\n && wget https://mediaarea.net/download/binary/mediainfo/0.7.91/MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && tar Jxf MediaInfo_CLI_0.7.91_GNU_FromSource.tar.xz \\\n && cd MediaInfo_CLI_GNU_FromSource \\\n && ./CLI_Compile.sh \\\n && cd MediaInfo/Project/GNU/CLI \\\n && make install\n#   Install ffmpeg, p7zip, unrar and lame.\nRUN apk add ffmpeg unrar lame p7zip\n#   Install Python modules.\nRUN apk add python python3 py-pip \\\n && pip install pip --upgrade \\\n && pip install cymysql \\\n && pip install pynntp \\\n && pip install socketpool \\\n && pip list \\\n && pip3 install --upgrade pip \\\n && pip3 install cymysql \\\n && pip3 install pynntp \\\n && pip3 install socketpool \\\n && pip3 list\n#   Install PHP.\nRUN apk add php5 php5-pear php5-gd php5-mysql php5-curl php5-json php5-phar php5-imagick php5-pdo_mysql php5-mcrypt php5-common php5-xml php5-openssl php5-zlib php5-ctype php5-exif php5-iconv php5-sockets\nRUN sed -ri 's/(max_execution_time =) ([0-9]+)/\\1 120/' /etc/php5/php.ini\nRUN sed -ri 's/(memory_limit =) ([0-9]+)/\\1 -1/' /etc/php5/php.ini\nRUN sed -ri 's/;(date.timezone =)/\\1 Europe\\/London/' /etc/php5/php.ini\n#   Setup the Composer installer.\nRUN curl -o /tmp/composer-setup.php https://getcomposer.org/installer \\\n && curl -o /tmp/composer-setup.sig https://composer.github.io/installer.sig \\\n && php -r \"if (hash('SHA384', file_get_contents('/tmp/composer-setup.php')) !== trim(file_get_contents('/tmp/composer-setup.sig'))) { unlink('/tmp/composer-setup.php'); echo 'Invalid installer' . PHP_EOL; exit(1); }\" \\\n && cd /tmp \\\n && php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n#   Clone nZEDb master.\nRUN git clone https://github.com/nZEDb/nZEDb.git /var/www/nZEDb\n#   Set directory permissions.\nRUN chmod -R 755 /var/www/nZEDb \\\n && chgrp www-data /var/www/nZEDb/resources/smarty/templates_c \\\n && chmod 775 /var/www/nZEDb/resources/smarty/templates_c \\\n && chgrp -R www-data /var/www/nZEDb/resources/covers \\\n && chmod -R 775 /var/www/nZEDb/resources/covers \\\n && chgrp www-data /var/www/nZEDb/www \\\n && chmod 775 /var/www/nZEDb/www \\\n && chgrp www-data /var/www/nZEDb/www/install \\\n && chmod 775 /var/www/nZEDb/www/install \\\n && chgrp -R www-data /var/www/nZEDb/resources/nzb \\\n && chmod -R 775 /var/www/nZEDb/resources/nzb \\\n && chmod -R 777 /var/www/nZEDb/nzedb/config\n#   Install dependencies.\nRUN cd /var/www/nZEDb \\\n && composer install --prefer-source\n#   Add pseudo run command.\nADD sleep.sh /run.sh\n#   Define mountable directories.\nVOLUME [\"/var/www/nZEDb\"]\n#   Run.\nCMD [\"/run.sh\"]\n#   Clean up when done.\nRUN rm -rf /tmp/* /var/tmp/*\n","originalDockerfileUglifiedHash":"70d3e690c28f95dfa29746379652b5fd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3dc4184ff578811c469eab079f4d7ccec3412917.dockerfile"}