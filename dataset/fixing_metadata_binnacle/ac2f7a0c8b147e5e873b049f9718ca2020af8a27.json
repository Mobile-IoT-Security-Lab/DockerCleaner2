{"seed":333934067,"processedDockerfileHash":"dcbdcf9a971523d8273b4572dd64b17e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  upstream: https://github.com/jenkinsci/docker\nFROM alpine:3.8\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#   Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash=4.4.19-r1 tzdata=2020a-r0 vim=8.1.1365-r0 tini=0.18.0-r0 su-exec=0.2-r0 gzip=1.9-r0 tar=1.32-r0 wget=1.20.3-r0 curl=7.61.1-r3 \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add wget=1.20.3-r0 ca-certificates=20191127-r2 --no-cache --virtual=.build-dependencies \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" --no-cache \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"191\" \\\n    JAVA_BUILD=\"12\" \\\n    JAVA_PATH=\"2787e4a523244c269598db4e85c51e0c\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add wget=1.20.3-r0 ca-certificates=20191127-r2 unzip=6.0-r6 --no-cache --virtual=build-dependencies \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nRUN apk add git=2.18.4-r0 openssh-client=7.7_p1-r4 curl=7.61.1-r3 unzip=6.0-r6 bash=4.4.19-r1 ttf-dejavu=2.37-r0 coreutils=8.29-r2 tini=0.18.0-r0 docker=18.06.1-r0 --no-cache\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN mkdir -p $JENKINS_HOME \\\n && chown ${uid}:${gid} $JENKINS_HOME \\\n && addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy\n#   jenkins version being bundled in this docker image\n#  ENV JENKINS_VERSION ${JENKINS_VERSION:-2.150.1}\n#   jenkins.war checksum, download will be validated using it\n#  ARG JENKINS_SHA=d8ed5a7033be57aa9a84a5342b355ef9f2ba6cdb490db042a6d03efb23ca1e83\n#   Can be used to customize where jenkins.war get downloaded from\n#  http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n#  ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nARG JENKINS_URL=http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war\n#    && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nUSER root\nWORKDIR /tmp\n#   Environment variables used throughout this Dockerfile\n#\n#   $JENKINS_HOME     will be the final destination that Jenkins will use as its\n#                     data directory. This cannot be populated before Marathon\n#                     has a chance to create the host-container volume mapping.\n#\nENV JENKINS_FOLDER=\"/usr/share/jenkins\"\n#   Build Args\nARG BLUEOCEAN_VERSION=latest\nARG JENKINS_STAGING=/usr/share/jenkins/ref/\nARG CURL_RETRY=20\nARG CURL_RETRY_MAX_TIME=900\n#   install dependencies\nRUN apk update \\\n && apk add python jq=1.6_rc1-r1 git=2.18.4-r0 bzip2=1.0.6-r7 openssh-client=7.7_p1-r4 unzip=6.0-r6 zip=3.0-r6\n#   Override the default property for DNS lookup caching\nRUN echo 'networkaddress.cache.ttl=60' >> ${JAVA_HOME}/jre/lib/security/java.security\nRUN mkdir -p \"$JENKINS_HOME\" \"${JENKINS_FOLDER}/war\"\n#   jenkins setup\nCOPY conf/jenkins/config.xml \"${JENKINS_STAGING}/config.xml\"\n#  COPY conf/jenkins/jenkins.model.JenkinsLocationConfiguration.xml \"${JENKINS_STAGING}/jenkins.model.JenkinsLocationConfiguration.xml\"\n#  COPY conf/jenkins/nodeMonitors.xml \"${JENKINS_STAGING}/nodeMonitors.xml\"\n#  COPY conf/jenkins/hudson.model.UpdateCenter.xml \"${JENKINS_HOME}/hudson.model.UpdateCenter.xml\"\n#   lets configure Jenkins with some defaults\n#  COPY config/*.xml /usr/share/jenkins/ref/\n#   add plugins\nRUN /usr/local/bin/install-plugins.sh blueocean-autofavorite:latest blueocean-commons:${BLUEOCEAN_VERSION} blueocean-config:${BLUEOCEAN_VERSION} blueocean-dashboard:${BLUEOCEAN_VERSION} blueocean-display-url:latest blueocean-events:${BLUEOCEAN_VERSION} blueocean-git-pipeline:${BLUEOCEAN_VERSION} blueocean-github-pipeline:${BLUEOCEAN_VERSION} blueocean-i18n:${BLUEOCEAN_VERSION} blueocean-jwt:${BLUEOCEAN_VERSION} blueocean-personalization:${BLUEOCEAN_VERSION} blueocean-pipeline-api-impl:${BLUEOCEAN_VERSION} blueocean-pipeline-editor:${BLUEOCEAN_VERSION} blueocean-pipeline-scm-api:${BLUEOCEAN_VERSION} blueocean-rest-impl:${BLUEOCEAN_VERSION} blueocean-rest:${BLUEOCEAN_VERSION} blueocean-web:${BLUEOCEAN_VERSION} blueocean:${BLUEOCEAN_VERSION} ace-editor:latest android-emulator:latest android-lint:latest ant:latest ansible:latest ansicolor:latest antisamy-markup-formatter:latest artifactory:latest audit-trail:latest authentication-tokens:latest azure-credentials:latest azure-vm-agents:latest bouncycastle-api:latest branch-api:latest build-failure-analyzer:latest build-name-setter:latest build-pipeline-plugin:latest build-timeout:latest build-token-root:latest cloudbees-folder:latest credentials:latest credentials-binding:latest cloverphp:latest conditional-buildstep:latest config-file-provider:latest copyartifact:latest cvs:latest dashboard-view:latest delivery-pipeline-plugin:latest description-setter:latest dingding-notifications:latest display-url-api:latest docker-commons:latest docker-build-publish:latest docker-workflow:latest durable-task:latest ec2:latest email-ext:latest embeddable-build-status:latest external-monitor-job:latest favorite:latest ghprb:latest git:latest git-client:latest git-changelog:latest git-server:latest github:latest github-api:latest github-branch-source:latest github-issues:latest github-oauth:latest github-organization-folder:latest github-pullrequest:latest github-pr-coverage-status:latest gitlab:latest gitlab-hook:latest gitlab-merge-request-jenkins:latest gitlab-oauth:latest gitlab-plugin:latest gradle:latest gravatar:latest greenballs:latest handlebars:latest icon-shim:latest ivy:latest jackson2-api:latest javadoc:latest jenkins-multijob-plugin:latest job-dsl:latest jquery:latest junit:latest kerberos-sso:latest kpp-management-plugin:latest kubernetes:latest kubernetes-ci:latest kubernetes-cd:latest ldap:latest mailer:latest mapdb-api:latest marathon:latest matrix-auth:latest matrix-project:latest maven-plugin:latest mercurial:latest mesos:latest metrics:latest momentjs:latest monitoring:latest msbuild:latest nant:latest node-iterator-api:latest oauth-credentials:latest oic-auth:latest openshift-login:latest pam-auth:latest parameterized-trigger:latest performance:latest pipeline-build-step:latest pipeline-github-lib:latest pipeline-githubnotify-step:latest pipeline-graph-analysis:latest pipeline-input-step:latest pipeline-milestone-step:latest pipeline-model-api:latest pipeline-model-definition:latest pipeline-model-extensions:latest pipeline-rest-api:latest pipeline-stage-step:latest pipeline-stage-tags-metadata:latest pipeline-stage-view:latest pipeline-utility-steps:latest plain-credentials:latest postbuildscript:latest publish-over-cifs:latest publish-over-ftp:latest publish-over-ssh:latest pubsub-light:latest puppet:latest rebuild:latest resource-disposer:latest role-strategy:latest run-condition:latest s3:latest saferestart:latest saml:latest saltstack:latest scm-api:latest script-security:latest sse-gateway:latest ssh-agent:latest ssh-credentials:latest ssh-slaves:latest ssh2easy:latest slave-setup:latest structs:latest subversion:latest timestamper:latest token-macro:latest translation:latest uno-choice:latest url-auth-sso:latest variant:latest view-job-filters:latest windows-slaves:latest workflow-aggregator:latest workflow-api:latest workflow-basic-steps:latest workflow-cps:latest workflow-cps-global-lib:latest workflow-durable-task-step:latest workflow-job:latest workflow-multibranch:latest workflow-scm-step:latest workflow-step-api:latest workflow-support:latest ws-cleanup:latest\n#   copy custom built plugins\n#  COPY plugins/*.hpi /usr/share/jenkins/ref/plugins/\n#   so we can use jenkins cli\n#  COPY config/jenkins.properties /usr/share/jenkins/ref/\n#   disable first-run wizard\nRUN echo 2.0 > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state\n#   remove executors in master\nCOPY src/main/docker/master-executors.groovy /usr/share/jenkins/ref/init.groovy.d/\n#   ENV JAVA_OPTS=\"-Djava.util.logging.config.file=/var/jenkins_home/log.properties\"\nENV JAVA_OPTS=\"-server -Djava.awt.headless=true -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=240M  -XX:MaxRAMFraction=2 -XshowSettings:vm -XX:+AggressiveOpts  -XX:-UseBiasedLocking -XX:+UseFastAccessorMethods -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:-UseLargePages -XX:+UseG1GC  -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+DisableExplicitGC -XX:G1ReservePercent=25  -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=25 -XX:MaxGCPauseMillis=20  -XX:-OmitStackTraceInFastThrow -XX:+ParallelRefProcEnabled -XX:ParallelGCThreads=8  -XX:MaxTenuringThreshold=1 -XX:G1HeapWastePercent=10 -XX:SurvivorRatio=8  -XX:G1MixedGCCountTarget=16 -XX:G1MixedGCLiveThresholdPercent=90  -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=32m  -XX:-ResizePLAB -Djenkins.install.runSetupWizard=false -Dhudson.udp=-1  -Dhudson.DNSMultiCast.disabled=true\"\nENV JENKINS_OPTS=\"--webroot=${JENKINS_FOLDER}/war --httpListenAddress=0.0.0.0\"\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# upstream: https://github.com/jenkinsci/docker\nFROM alpine:3.8\nMAINTAINER 若虚 <slpcat@qq.com>\n#  Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#  Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash tzdata vim tini su-exec gzip tar wget curl \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#  Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"191\" \\\n    JAVA_BUILD=\"12\" \\\n    JAVA_PATH=\"2787e4a523244c269598db4e85c51e0c\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nRUN apk add --no-cache git openssh-client curl unzip bash ttf-dejavu coreutils tini docker\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#  Jenkins is run with user `jenkins`, uid = 1000\n#  If you bind mount a volume from the host or a data container,\n#  ensure you use the same uid\nRUN mkdir -p $JENKINS_HOME \\\n && chown ${uid}:${gid} $JENKINS_HOME \\\n && addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#  Jenkins home directory is a volume, so configuration and build history\n#  can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\n#  `/usr/share/jenkins/ref/` contains all reference configuration we want\n#  to set on a fresh new installation. Use it to bundle additional plugins\n#  or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy\n#  jenkins version being bundled in this docker image\n# ENV JENKINS_VERSION ${JENKINS_VERSION:-2.150.1}\n#  jenkins.war checksum, download will be validated using it\n# ARG JENKINS_SHA=d8ed5a7033be57aa9a84a5342b355ef9f2ba6cdb490db042a6d03efb23ca1e83\n#  Can be used to customize where jenkins.war get downloaded from\n# http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n# ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nARG JENKINS_URL=http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n#  could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#  see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war\n#   && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n#  for main web interface:\nEXPOSE ${http_port}\n#  will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#  from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nUSER root\nWORKDIR /tmp\n#  Environment variables used throughout this Dockerfile\n#\n#  $JENKINS_HOME     will be the final destination that Jenkins will use as its\n#                    data directory. This cannot be populated before Marathon\n#                    has a chance to create the host-container volume mapping.\n#\nENV JENKINS_FOLDER=\"/usr/share/jenkins\"\n#  Build Args\nARG BLUEOCEAN_VERSION=latest\nARG JENKINS_STAGING=/usr/share/jenkins/ref/\nARG CURL_RETRY=20\nARG CURL_RETRY_MAX_TIME=900\n#  install dependencies\nRUN apk update \\\n && apk add python jq git bzip2 openssh-client unzip zip\n#  Override the default property for DNS lookup caching\nRUN echo 'networkaddress.cache.ttl=60' >> ${JAVA_HOME}/jre/lib/security/java.security\nRUN mkdir -p \"$JENKINS_HOME\" \"${JENKINS_FOLDER}/war\"\n#  jenkins setup\nCOPY conf/jenkins/config.xml \"${JENKINS_STAGING}/config.xml\"\n# COPY conf/jenkins/jenkins.model.JenkinsLocationConfiguration.xml \"${JENKINS_STAGING}/jenkins.model.JenkinsLocationConfiguration.xml\"\n# COPY conf/jenkins/nodeMonitors.xml \"${JENKINS_STAGING}/nodeMonitors.xml\"\n# COPY conf/jenkins/hudson.model.UpdateCenter.xml \"${JENKINS_HOME}/hudson.model.UpdateCenter.xml\"\n#  lets configure Jenkins with some defaults\n# COPY config/*.xml /usr/share/jenkins/ref/\n#  add plugins\nRUN /usr/local/bin/install-plugins.sh blueocean-autofavorite:latest blueocean-commons:${BLUEOCEAN_VERSION} blueocean-config:${BLUEOCEAN_VERSION} blueocean-dashboard:${BLUEOCEAN_VERSION} blueocean-display-url:latest blueocean-events:${BLUEOCEAN_VERSION} blueocean-git-pipeline:${BLUEOCEAN_VERSION} blueocean-github-pipeline:${BLUEOCEAN_VERSION} blueocean-i18n:${BLUEOCEAN_VERSION} blueocean-jwt:${BLUEOCEAN_VERSION} blueocean-personalization:${BLUEOCEAN_VERSION} blueocean-pipeline-api-impl:${BLUEOCEAN_VERSION} blueocean-pipeline-editor:${BLUEOCEAN_VERSION} blueocean-pipeline-scm-api:${BLUEOCEAN_VERSION} blueocean-rest-impl:${BLUEOCEAN_VERSION} blueocean-rest:${BLUEOCEAN_VERSION} blueocean-web:${BLUEOCEAN_VERSION} blueocean:${BLUEOCEAN_VERSION} ace-editor:latest android-emulator:latest android-lint:latest ant:latest ansible:latest ansicolor:latest antisamy-markup-formatter:latest artifactory:latest audit-trail:latest authentication-tokens:latest azure-credentials:latest azure-vm-agents:latest bouncycastle-api:latest branch-api:latest build-failure-analyzer:latest build-name-setter:latest build-pipeline-plugin:latest build-timeout:latest build-token-root:latest cloudbees-folder:latest credentials:latest credentials-binding:latest cloverphp:latest conditional-buildstep:latest config-file-provider:latest copyartifact:latest cvs:latest dashboard-view:latest delivery-pipeline-plugin:latest description-setter:latest dingding-notifications:latest display-url-api:latest docker-commons:latest docker-build-publish:latest docker-workflow:latest durable-task:latest ec2:latest email-ext:latest embeddable-build-status:latest external-monitor-job:latest favorite:latest ghprb:latest git:latest git-client:latest git-changelog:latest git-server:latest github:latest github-api:latest github-branch-source:latest github-issues:latest github-oauth:latest github-organization-folder:latest github-pullrequest:latest github-pr-coverage-status:latest gitlab:latest gitlab-hook:latest gitlab-merge-request-jenkins:latest gitlab-oauth:latest gitlab-plugin:latest gradle:latest gravatar:latest greenballs:latest handlebars:latest icon-shim:latest ivy:latest jackson2-api:latest javadoc:latest jenkins-multijob-plugin:latest job-dsl:latest jquery:latest junit:latest kerberos-sso:latest kpp-management-plugin:latest kubernetes:latest kubernetes-ci:latest kubernetes-cd:latest ldap:latest mailer:latest mapdb-api:latest marathon:latest matrix-auth:latest matrix-project:latest maven-plugin:latest mercurial:latest mesos:latest metrics:latest momentjs:latest monitoring:latest msbuild:latest nant:latest node-iterator-api:latest oauth-credentials:latest oic-auth:latest openshift-login:latest pam-auth:latest parameterized-trigger:latest performance:latest pipeline-build-step:latest pipeline-github-lib:latest pipeline-githubnotify-step:latest pipeline-graph-analysis:latest pipeline-input-step:latest pipeline-milestone-step:latest pipeline-model-api:latest pipeline-model-definition:latest pipeline-model-extensions:latest pipeline-rest-api:latest pipeline-stage-step:latest pipeline-stage-tags-metadata:latest pipeline-stage-view:latest pipeline-utility-steps:latest plain-credentials:latest postbuildscript:latest publish-over-cifs:latest publish-over-ftp:latest publish-over-ssh:latest pubsub-light:latest puppet:latest rebuild:latest resource-disposer:latest role-strategy:latest run-condition:latest s3:latest saferestart:latest saml:latest saltstack:latest scm-api:latest script-security:latest sse-gateway:latest ssh-agent:latest ssh-credentials:latest ssh-slaves:latest ssh2easy:latest slave-setup:latest structs:latest subversion:latest timestamper:latest token-macro:latest translation:latest uno-choice:latest url-auth-sso:latest variant:latest view-job-filters:latest windows-slaves:latest workflow-aggregator:latest workflow-api:latest workflow-basic-steps:latest workflow-cps:latest workflow-cps-global-lib:latest workflow-durable-task-step:latest workflow-job:latest workflow-multibranch:latest workflow-scm-step:latest workflow-step-api:latest workflow-support:latest ws-cleanup:latest\n#  copy custom built plugins\n# COPY plugins/*.hpi /usr/share/jenkins/ref/plugins/\n#  so we can use jenkins cli\n# COPY config/jenkins.properties /usr/share/jenkins/ref/\n#  disable first-run wizard\nRUN echo 2.0 > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state\n#  remove executors in master\nCOPY src/main/docker/master-executors.groovy /usr/share/jenkins/ref/init.groovy.d/\n#  ENV JAVA_OPTS=\"-Djava.util.logging.config.file=/var/jenkins_home/log.properties\"\nENV JAVA_OPTS=\"-server -Djava.awt.headless=true -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=240M  -XX:MaxRAMFraction=2 -XshowSettings:vm -XX:+AggressiveOpts  -XX:-UseBiasedLocking -XX:+UseFastAccessorMethods -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:-UseLargePages -XX:+UseG1GC  -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+DisableExplicitGC -XX:G1ReservePercent=25  -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=25 -XX:MaxGCPauseMillis=20  -XX:-OmitStackTraceInFastThrow -XX:+ParallelRefProcEnabled -XX:ParallelGCThreads=8  -XX:MaxTenuringThreshold=1 -XX:G1HeapWastePercent=10 -XX:SurvivorRatio=8  -XX:G1MixedGCCountTarget=16 -XX:G1MixedGCLiveThresholdPercent=90  -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=32m  -XX:-ResizePLAB -Djenkins.install.runSetupWizard=false -Dhudson.udp=-1  -Dhudson.DNSMultiCast.disabled=true\"\nENV JENKINS_OPTS=\"--webroot=${JENKINS_FOLDER}/war --httpListenAddress=0.0.0.0\"\n","injectedSmells":[],"originalDockerfileHash":"5817291022bdbef0a40ebc6413e76df3","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  upstream: https://github.com/jenkinsci/docker\nFROM alpine:3.8\nMAINTAINER 若虚 <slpcat@qq.com>\n#   Container variables\nENV TERM=\"xterm\" \\\n    LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US.UTF-8\" \\\n    LC_ALL=\"en_US.UTF-8\" \\\n    TIMEZONE=\"Asia/Shanghai\"\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/' /etc/apk/repositories\n#   Set timezone and locales\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && apk add bash tzdata vim tini su-exec gzip tar wget curl \\\n && echo \"${TIMEZONE}\" > /etc/TZ \\\n && ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Here we install GNU libc (aka glibc) and set en_US.UTF-8 locale as default.\nRUN ALPINE_GLIBC_BASE_URL=\"https://github.com/sgerrand/alpine-pkg-glibc/releases/download\" \\\n && ALPINE_GLIBC_PACKAGE_VERSION=\"2.28-r0\" \\\n && ALPINE_GLIBC_BASE_PACKAGE_FILENAME=\"glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_BIN_PACKAGE_FILENAME=\"glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && ALPINE_GLIBC_I18N_PACKAGE_FILENAME=\"glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk\" \\\n && apk add --no-cache --virtual=.build-dependencies wget ca-certificates \\\n && wget \"https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub\" -O \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && wget \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && apk add --no-cache \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\" \\\n && rm \"/etc/apk/keys/sgerrand.rsa.pub\" \\\n && /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 \"$LANG\" || true \\\n && echo \"export LANG=$LANG\" > /etc/profile.d/locale.sh \\\n && apk del glibc-i18n \\\n && rm \"/root/.wget-hsts\" \\\n && apk del .build-dependencies \\\n && rm \"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME\" \"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME\"\nENV JAVA_VERSION=\"8\" \\\n    JAVA_UPDATE=\"191\" \\\n    JAVA_BUILD=\"12\" \\\n    JAVA_PATH=\"2787e4a523244c269598db4e85c51e0c\" \\\n    JAVA_HOME=\"/usr/lib/jvm/default-jvm\"\nRUN apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip \\\n && cd \"/tmp\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/${JAVA_PATH}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && tar -xzf \"jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz\" \\\n && mkdir -p \"/usr/lib/jvm\" \\\n && mv \"/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}\" \"/usr/lib/jvm/java-${JAVA_VERSION}-oracle\" \\\n && ln -s \"java-${JAVA_VERSION}-oracle\" \"$JAVA_HOME\" \\\n && ln -s \"$JAVA_HOME/bin/\"* \"/usr/bin/\" \\\n && rm -rf \"$JAVA_HOME/\"*src.zip \\\n && rm -rf \"$JAVA_HOME/lib/missioncontrol\" \"$JAVA_HOME/lib/visualvm\" \"$JAVA_HOME/lib/\"*javafx* \"$JAVA_HOME/jre/lib/plugin.jar\" \"$JAVA_HOME/jre/lib/ext/jfxrt.jar\" \"$JAVA_HOME/jre/bin/javaws\" \"$JAVA_HOME/jre/lib/javaws.jar\" \"$JAVA_HOME/jre/lib/desktop\" \"$JAVA_HOME/jre/plugin\" \"$JAVA_HOME/jre/lib/\"deploy* \"$JAVA_HOME/jre/lib/\"*javafx* \"$JAVA_HOME/jre/lib/\"*jfx* \"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so\" \"$JAVA_HOME/jre/lib/amd64/\"libprism_*.so \"$JAVA_HOME/jre/lib/amd64/libfxplugins.so\" \"$JAVA_HOME/jre/lib/amd64/libglass.so\" \"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so\" \"$JAVA_HOME/jre/lib/amd64/\"libjavafx*.so \"$JAVA_HOME/jre/lib/amd64/\"libjfx*.so \\\n && rm -rf \"$JAVA_HOME/jre/bin/jjs\" \"$JAVA_HOME/jre/bin/keytool\" \"$JAVA_HOME/jre/bin/orbd\" \"$JAVA_HOME/jre/bin/pack200\" \"$JAVA_HOME/jre/bin/policytool\" \"$JAVA_HOME/jre/bin/rmid\" \"$JAVA_HOME/jre/bin/rmiregistry\" \"$JAVA_HOME/jre/bin/servertool\" \"$JAVA_HOME/jre/bin/tnameserv\" \"$JAVA_HOME/jre/bin/unpack200\" \"$JAVA_HOME/jre/lib/ext/nashorn.jar\" \"$JAVA_HOME/jre/lib/jfr.jar\" \"$JAVA_HOME/jre/lib/jfr\" \"$JAVA_HOME/jre/lib/oblique-fonts\" \\\n && wget --header \"Cookie: oraclelicense=accept-securebackup-cookie;\" \"http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION}/jce_policy-${JAVA_VERSION}.zip\" \\\n && unzip -jo -d \"${JAVA_HOME}/jre/lib/security\" \"jce_policy-${JAVA_VERSION}.zip\" \\\n && rm \"${JAVA_HOME}/jre/lib/security/README.txt\" \\\n && apk del build-dependencies \\\n && rm \"/tmp/\"*\nRUN apk add --no-cache git openssh-client curl unzip bash ttf-dejavu coreutils tini docker\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nARG JENKINS_HOME=/var/jenkins_home\nENV JENKINS_HOME=\"$JENKINS_HOME\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN mkdir -p $JENKINS_HOME \\\n && chown ${uid}:${gid} $JENKINS_HOME \\\n && addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME $JENKINS_HOME\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\nCOPY executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy\n#   jenkins version being bundled in this docker image\n#  ENV JENKINS_VERSION ${JENKINS_VERSION:-2.150.1}\n#   jenkins.war checksum, download will be validated using it\n#  ARG JENKINS_SHA=d8ed5a7033be57aa9a84a5342b355ef9f2ba6cdb490db042a6d03efb23ca1e83\n#   Can be used to customize where jenkins.war get downloaded from\n#  http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n#  ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\nARG JENKINS_URL=http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war\n#    && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nUSER ${user}\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\nUSER root\nWORKDIR /tmp\n#   Environment variables used throughout this Dockerfile\n#\n#   $JENKINS_HOME     will be the final destination that Jenkins will use as its\n#                     data directory. This cannot be populated before Marathon\n#                     has a chance to create the host-container volume mapping.\n#\nENV JENKINS_FOLDER=\"/usr/share/jenkins\"\n#   Build Args\nARG BLUEOCEAN_VERSION=latest\nARG JENKINS_STAGING=/usr/share/jenkins/ref/\nARG CURL_RETRY=20\nARG CURL_RETRY_MAX_TIME=900\n#   install dependencies\nRUN apk update \\\n && apk add python jq git bzip2 openssh-client unzip zip\n#   Override the default property for DNS lookup caching\nRUN echo 'networkaddress.cache.ttl=60' >> ${JAVA_HOME}/jre/lib/security/java.security\nRUN mkdir -p \"$JENKINS_HOME\" \"${JENKINS_FOLDER}/war\"\n#   jenkins setup\nCOPY conf/jenkins/config.xml \"${JENKINS_STAGING}/config.xml\"\n#  COPY conf/jenkins/jenkins.model.JenkinsLocationConfiguration.xml \"${JENKINS_STAGING}/jenkins.model.JenkinsLocationConfiguration.xml\"\n#  COPY conf/jenkins/nodeMonitors.xml \"${JENKINS_STAGING}/nodeMonitors.xml\"\n#  COPY conf/jenkins/hudson.model.UpdateCenter.xml \"${JENKINS_HOME}/hudson.model.UpdateCenter.xml\"\n#   lets configure Jenkins with some defaults\n#  COPY config/*.xml /usr/share/jenkins/ref/\n#   add plugins\nRUN /usr/local/bin/install-plugins.sh blueocean-autofavorite:latest blueocean-commons:${BLUEOCEAN_VERSION} blueocean-config:${BLUEOCEAN_VERSION} blueocean-dashboard:${BLUEOCEAN_VERSION} blueocean-display-url:latest blueocean-events:${BLUEOCEAN_VERSION} blueocean-git-pipeline:${BLUEOCEAN_VERSION} blueocean-github-pipeline:${BLUEOCEAN_VERSION} blueocean-i18n:${BLUEOCEAN_VERSION} blueocean-jwt:${BLUEOCEAN_VERSION} blueocean-personalization:${BLUEOCEAN_VERSION} blueocean-pipeline-api-impl:${BLUEOCEAN_VERSION} blueocean-pipeline-editor:${BLUEOCEAN_VERSION} blueocean-pipeline-scm-api:${BLUEOCEAN_VERSION} blueocean-rest-impl:${BLUEOCEAN_VERSION} blueocean-rest:${BLUEOCEAN_VERSION} blueocean-web:${BLUEOCEAN_VERSION} blueocean:${BLUEOCEAN_VERSION} ace-editor:latest android-emulator:latest android-lint:latest ant:latest ansible:latest ansicolor:latest antisamy-markup-formatter:latest artifactory:latest audit-trail:latest authentication-tokens:latest azure-credentials:latest azure-vm-agents:latest bouncycastle-api:latest branch-api:latest build-failure-analyzer:latest build-name-setter:latest build-pipeline-plugin:latest build-timeout:latest build-token-root:latest cloudbees-folder:latest credentials:latest credentials-binding:latest cloverphp:latest conditional-buildstep:latest config-file-provider:latest copyartifact:latest cvs:latest dashboard-view:latest delivery-pipeline-plugin:latest description-setter:latest dingding-notifications:latest display-url-api:latest docker-commons:latest docker-build-publish:latest docker-workflow:latest durable-task:latest ec2:latest email-ext:latest embeddable-build-status:latest external-monitor-job:latest favorite:latest ghprb:latest git:latest git-client:latest git-changelog:latest git-server:latest github:latest github-api:latest github-branch-source:latest github-issues:latest github-oauth:latest github-organization-folder:latest github-pullrequest:latest github-pr-coverage-status:latest gitlab:latest gitlab-hook:latest gitlab-merge-request-jenkins:latest gitlab-oauth:latest gitlab-plugin:latest gradle:latest gravatar:latest greenballs:latest handlebars:latest icon-shim:latest ivy:latest jackson2-api:latest javadoc:latest jenkins-multijob-plugin:latest job-dsl:latest jquery:latest junit:latest kerberos-sso:latest kpp-management-plugin:latest kubernetes:latest kubernetes-ci:latest kubernetes-cd:latest ldap:latest mailer:latest mapdb-api:latest marathon:latest matrix-auth:latest matrix-project:latest maven-plugin:latest mercurial:latest mesos:latest metrics:latest momentjs:latest monitoring:latest msbuild:latest nant:latest node-iterator-api:latest oauth-credentials:latest oic-auth:latest openshift-login:latest pam-auth:latest parameterized-trigger:latest performance:latest pipeline-build-step:latest pipeline-github-lib:latest pipeline-githubnotify-step:latest pipeline-graph-analysis:latest pipeline-input-step:latest pipeline-milestone-step:latest pipeline-model-api:latest pipeline-model-definition:latest pipeline-model-extensions:latest pipeline-rest-api:latest pipeline-stage-step:latest pipeline-stage-tags-metadata:latest pipeline-stage-view:latest pipeline-utility-steps:latest plain-credentials:latest postbuildscript:latest publish-over-cifs:latest publish-over-ftp:latest publish-over-ssh:latest pubsub-light:latest puppet:latest rebuild:latest resource-disposer:latest role-strategy:latest run-condition:latest s3:latest saferestart:latest saml:latest saltstack:latest scm-api:latest script-security:latest sse-gateway:latest ssh-agent:latest ssh-credentials:latest ssh-slaves:latest ssh2easy:latest slave-setup:latest structs:latest subversion:latest timestamper:latest token-macro:latest translation:latest uno-choice:latest url-auth-sso:latest variant:latest view-job-filters:latest windows-slaves:latest workflow-aggregator:latest workflow-api:latest workflow-basic-steps:latest workflow-cps:latest workflow-cps-global-lib:latest workflow-durable-task-step:latest workflow-job:latest workflow-multibranch:latest workflow-scm-step:latest workflow-step-api:latest workflow-support:latest ws-cleanup:latest\n#   copy custom built plugins\n#  COPY plugins/*.hpi /usr/share/jenkins/ref/plugins/\n#   so we can use jenkins cli\n#  COPY config/jenkins.properties /usr/share/jenkins/ref/\n#   disable first-run wizard\nRUN echo 2.0 > /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state\n#   remove executors in master\nCOPY src/main/docker/master-executors.groovy /usr/share/jenkins/ref/init.groovy.d/\n#   ENV JAVA_OPTS=\"-Djava.util.logging.config.file=/var/jenkins_home/log.properties\"\nENV JAVA_OPTS=\"-server -Djava.awt.headless=true -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=240M  -XX:MaxRAMFraction=2 -XshowSettings:vm -XX:+AggressiveOpts  -XX:-UseBiasedLocking -XX:+UseFastAccessorMethods -XX:+UnlockExperimentalVMOptions  -XX:+UseCGroupMemoryLimitForHeap -XX:-UseLargePages -XX:+UseG1GC  -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+DisableExplicitGC -XX:G1ReservePercent=25  -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=25 -XX:MaxGCPauseMillis=20  -XX:-OmitStackTraceInFastThrow -XX:+ParallelRefProcEnabled -XX:ParallelGCThreads=8  -XX:MaxTenuringThreshold=1 -XX:G1HeapWastePercent=10 -XX:SurvivorRatio=8  -XX:G1MixedGCCountTarget=16 -XX:G1MixedGCLiveThresholdPercent=90  -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=32m  -XX:-ResizePLAB -Djenkins.install.runSetupWizard=false -Dhudson.udp=-1  -Dhudson.DNSMultiCast.disabled=true\"\nENV JENKINS_OPTS=\"--webroot=${JENKINS_FOLDER}/war --httpListenAddress=0.0.0.0\"\n","originalDockerfileUglifiedHash":"ed8f2e694d8e61e5648feca8fc7e1316","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ac2f7a0c8b147e5e873b049f9718ca2020af8a27.dockerfile"}