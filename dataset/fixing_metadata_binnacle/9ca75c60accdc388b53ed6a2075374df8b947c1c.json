{"seed":4069994661,"processedDockerfileHash":"4856586c0ede71288f46db40d2d3405f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Mostly self contained setup to build a stage2 ghc for musl\nFROM debian:8.0\n#   Install stock bindist for cross compile\nENV ghc=\"7.10.3\"\nENV arch=\"x86_64\"\nENV llvm=\"3.7.1\"\nENV cabal=\"1.22.9.0\"\n#   all needed packages for compiling\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install --no-install-recommends binutils-gold musl-tools build-essential wget curl libncurses-dev autoconf elfutils libgmp-dev zlib1g-dev git libtool pkg-config libffi-dev cmake g++ python pixz openssl git bison flex -y\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/ http://llvm.org/releases/$llvm/llvm-$llvm.src.tar.xz\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/ http://llvm.org/releases/$llvm/polly-$llvm.src.tar.xz\n#   Install a non ancient version of llvm on debian, I'm purposefully ignoring\n#   debian repos in favor of compiling to not have to deal with\n#   \"what debian upstream has a current version of llvm\" nonsense, takes more\n#   time to do that than just build the right llvm from source.\nWORKDIR /tmp\nCOPY bootstrap/llvm-$llvm.sh /tmp/llvm.sh\nRUN openssl sha1 llvm-$llvm.src.tar.xz | grep \"SHA1(llvm-3.7.1.src.tar.xz)= 5dbdcafac105273dcbff94c68837a66c6dd78cef\" \\\n && openssl sha1 polly-$llvm.src.tar.xz | grep \"SHA1(polly-3.7.1.src.tar.xz)= 0e3a461907cde7505fbdb44bf61ff318aa9254f7\" \\\n && tar xJpf /tmp/llvm-$llvm.src.tar.xz \\\n && tar xJpf /tmp/polly-$llvm.src.tar.xz \\\n && /tmp/llvm.sh \\\n && rm -fr /tmp/llvm-$llvm.src /tmp/build\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/ https://downloads.haskell.org/~ghc/$ghc/ghc-$ghc-$arch-deb8-linux.tar.xz\n#   Install debian ghc binary from upstream.\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-$arch-deb8-linux.tar.xz | grep \"SHA1(ghc-7.10.3-x86_64-deb8-linux.tar.xz)= bab16f95ef4fe6b7cc2fb6b36a02dceeeb53faa4\" \\\n && tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz\nWORKDIR /tmp/ghc-$ghc\nRUN ./configure --prefix=/usr \\\n && make -j1 install \\\n && rm -fr /tmp/ghc-$ghc\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/ https://www.haskell.org/cabal/release/cabal-install-$cabal/cabal-install-$cabal.tar.gz\n#   Install cabal so we can install alex/happy to pull off of git\n#   bootstrap cabal and install alex/happy the same way apks are built\n#   only globally\nWORKDIR /tmp\nRUN openssl sha1 cabal-install-$cabal.tar.gz | grep \"SHA1(cabal-install-1.22.9.0.tar.gz)= f1375c928794f45f253b8ec92c2af4732fec597b\" \\\n && tar xzpf /tmp/cabal-install-$cabal.tar.gz\nWORKDIR /tmp/cabal-install-$cabal\nRUN ./bootstrap.sh --global --no-doc \\\n && cabal update \\\n && cabal install --global alex happy \\\n && rm -fr /tmp/cabal-install-$cabal\n#   Build our cross compiler with musl libc from the sabotage linux stuff\nWORKDIR /tmp\nRUN git clone --depth 1 https://github.com/GregorR/musl-cross.git musl-cross\nWORKDIR /tmp/musl-cross\nRUN echo GCC_BUILTIN_PREREQS=yes >> config.sh \\\n && echo ARCH=x86_64 >> config.sh \\\n && echo TRIPLE=x86_64-pc-linux-musl >> config.sh \\\n && echo GCC_STAGE1_NOOPT=1 >> config.sh \\\n && echo CC_BASE_PREFIX=/usr >> config.sh \\\n && echo MAKEFLAGS=-j$( grep -c processor /proc/cpuinfo ;) >> config.sh \\\n && echo \"BINUTILS_CONFFLAGS='CXXFLAGS=-fpermissive --enable-gold --enable-plugins --disable-werror'\" >> config.sh \\\n && echo \"CFLAGS='-g -O2 -fPIC -DPIC'\" >> config.sh \\\n && echo \"CPPFLAGS='-fPIC -DPIC'\" >> config.sh \\\n && echo \"LDFLAGS='-fPIC -DPIC'\" >> config.sh\nCOPY bootstrap/gmpurl.patch gmpurl.patch\nRUN patch -p1 < gmpurl.patch \\\n && ./build.sh \\\n && rm -fr /tmp/musl-cross\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tmp/ http://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-src.tar.xz\nENV tardir=\"/tmp/root\"\nENV destdir=\"/tmp/root/x86_64\"\nENV triple=\"x86_64-pc-linux-musl\"\nENV crosscc=\"$triple-gcc\"\nENV ghc=\"8.0.1\"\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-src.tar.xz | grep \"SHA1(ghc-8.0.1-src.tar.xz)= 585a2d34a17ce2452273147f2e3cef1a2efe1aa5\" \\\n && tar xJpf /tmp/ghc-$ghc-src.tar.xz\nWORKDIR /tmp/ghc-$ghc\nENV PATH=\"$PATH:/usr/$triple/bin\"\nCOPY bootstrap/$arch/bootstrap.patch bootstrap.patch\nRUN patch -p1 < bootstrap.patch\nRUN cp mk/build.mk.sample mk/build.mk \\\n && ./boot \\\n && echo \"BuildFlavour = quick-llvm\" >> mk/build.mk \\\n && echo \"INTEGER_LIBRARY = integer-simple\" >> mk/build.mk \\\n && echo \"HADDOCK_DOCS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_HTML = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PDF = NO\" >> mk/build.mk \\\n && ./configure --target=$triple --prefix=/usr\nRUN make -j$( grep -c processor /proc/cpuinfo ;) || make -j1\nRUN make -j1 install DESTDIR=$destdir\nRUN rm $( find $destdir -name \"*-hp2ps\" ;)\n#   remove target prefix from stage2 binaries\n#   HACK, just build unlit with the cross compiler and move it to /usr/bin in the install dir\nWORKDIR /tmp/ghc-$ghc/utils/unlit\nRUN $crosscc unlit.c -o $( find $destdir -name unlit ;)\n#   remove target prefix from stage2 binaries\nWORKDIR $destdir/usr/bin\nRUN (for i in $triple-*; do ln -s $i ${i#$triple-} ; done )\nCOPY bootstrap/$arch/settings /tmp/settings\nRUN mv /tmp/settings $( find $destdir -name settings -type f ;)\nRUN rm -fr $destdir/usr/share/doc\nWORKDIR $tardir\n#   Compress to xz via pixz because xz is normally too\n#   old for -TN multithreads\nRUN tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz .\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Mostly self contained setup to build a stage2 ghc for musl\nFROM debian:8.0\n#  Install stock bindist for cross compile\nENV ghc=\"7.10.3\"\nENV arch=\"x86_64\"\nENV llvm=\"3.7.1\"\nENV cabal=\"1.22.9.0\"\n#  all needed packages for compiling\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install binutils-gold musl-tools build-essential wget curl libncurses-dev autoconf elfutils libgmp-dev zlib1g-dev git libtool pkg-config libffi-dev cmake g++ python pixz openssl git bison flex -y\nADD http://llvm.org/releases/$llvm/llvm-$llvm.src.tar.xz /tmp/\nADD http://llvm.org/releases/$llvm/polly-$llvm.src.tar.xz /tmp/\n#  Install a non ancient version of llvm on debian, I'm purposefully ignoring\n#  debian repos in favor of compiling to not have to deal with\n#  \"what debian upstream has a current version of llvm\" nonsense, takes more\n#  time to do that than just build the right llvm from source.\nWORKDIR /tmp\nCOPY bootstrap/llvm-$llvm.sh /tmp/llvm.sh\nRUN openssl sha1 llvm-$llvm.src.tar.xz | grep \"SHA1(llvm-3.7.1.src.tar.xz)= 5dbdcafac105273dcbff94c68837a66c6dd78cef\" \\\n && openssl sha1 polly-$llvm.src.tar.xz | grep \"SHA1(polly-3.7.1.src.tar.xz)= 0e3a461907cde7505fbdb44bf61ff318aa9254f7\" \\\n && tar xJpf /tmp/llvm-$llvm.src.tar.xz \\\n && tar xJpf /tmp/polly-$llvm.src.tar.xz \\\n && /tmp/llvm.sh \\\n && rm -fr /tmp/llvm-$llvm.src /tmp/build\nADD https://downloads.haskell.org/~ghc/$ghc/ghc-$ghc-$arch-deb8-linux.tar.xz /tmp/\n#  Install debian ghc binary from upstream.\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-$arch-deb8-linux.tar.xz | grep \"SHA1(ghc-7.10.3-x86_64-deb8-linux.tar.xz)= bab16f95ef4fe6b7cc2fb6b36a02dceeeb53faa4\" \\\n && tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz\nWORKDIR /tmp/ghc-$ghc\nRUN ./configure --prefix=/usr \\\n && make -j1 install \\\n && rm -fr /tmp/ghc-$ghc\nADD https://www.haskell.org/cabal/release/cabal-install-$cabal/cabal-install-$cabal.tar.gz /tmp/\n#  Install cabal so we can install alex/happy to pull off of git\n#  bootstrap cabal and install alex/happy the same way apks are built\n#  only globally\nWORKDIR /tmp\nRUN openssl sha1 cabal-install-$cabal.tar.gz | grep \"SHA1(cabal-install-1.22.9.0.tar.gz)= f1375c928794f45f253b8ec92c2af4732fec597b\" \\\n && tar xzpf /tmp/cabal-install-$cabal.tar.gz\nWORKDIR /tmp/cabal-install-$cabal\nRUN ./bootstrap.sh --global --no-doc \\\n && cabal update \\\n && cabal install --global alex happy \\\n && rm -fr /tmp/cabal-install-$cabal\n#  Build our cross compiler with musl libc from the sabotage linux stuff\nWORKDIR /tmp\nRUN git clone --depth 1 https://github.com/GregorR/musl-cross.git musl-cross\nWORKDIR /tmp/musl-cross\nRUN echo GCC_BUILTIN_PREREQS=yes >> config.sh \\\n && echo ARCH=x86_64 >> config.sh \\\n && echo TRIPLE=x86_64-pc-linux-musl >> config.sh \\\n && echo GCC_STAGE1_NOOPT=1 >> config.sh \\\n && echo CC_BASE_PREFIX=/usr >> config.sh \\\n && echo MAKEFLAGS=-j$( grep -c processor /proc/cpuinfo ;) >> config.sh \\\n && echo \"BINUTILS_CONFFLAGS='CXXFLAGS=-fpermissive --enable-gold --enable-plugins --disable-werror'\" >> config.sh \\\n && echo \"CFLAGS='-g -O2 -fPIC -DPIC'\" >> config.sh \\\n && echo \"CPPFLAGS='-fPIC -DPIC'\" >> config.sh \\\n && echo \"LDFLAGS='-fPIC -DPIC'\" >> config.sh\nCOPY bootstrap/gmpurl.patch gmpurl.patch\nRUN patch -p1 < gmpurl.patch \\\n && ./build.sh \\\n && rm -fr /tmp/musl-cross\nADD http://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-src.tar.xz /tmp/\nENV tardir=\"/tmp/root\"\nENV destdir=\"/tmp/root/x86_64\"\nENV triple=\"x86_64-pc-linux-musl\"\nENV crosscc=\"$triple-gcc\"\nENV ghc=\"8.0.1\"\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-src.tar.xz | grep \"SHA1(ghc-8.0.1-src.tar.xz)= 585a2d34a17ce2452273147f2e3cef1a2efe1aa5\" \\\n && tar xJpf /tmp/ghc-$ghc-src.tar.xz\nWORKDIR /tmp/ghc-$ghc\nENV PATH=\"$PATH:/usr/$triple/bin\"\nCOPY bootstrap/$arch/bootstrap.patch bootstrap.patch\nRUN patch -p1 < bootstrap.patch\nRUN cp mk/build.mk.sample mk/build.mk \\\n && ./boot \\\n && echo \"BuildFlavour = quick-llvm\" >> mk/build.mk \\\n && echo \"INTEGER_LIBRARY = integer-simple\" >> mk/build.mk \\\n && echo \"HADDOCK_DOCS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_HTML = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PDF = NO\" >> mk/build.mk \\\n && ./configure --target=$triple --prefix=/usr\nRUN make -j$( grep -c processor /proc/cpuinfo ;) || make -j1\nRUN make -j1 install DESTDIR=$destdir\nRUN rm $( find $destdir -name \"*-hp2ps\" ;)\n#  remove target prefix from stage2 binaries\n#  HACK, just build unlit with the cross compiler and move it to /usr/bin in the install dir\nWORKDIR /tmp/ghc-$ghc/utils/unlit\nRUN $crosscc unlit.c -o $( find $destdir -name unlit ;)\n#  remove target prefix from stage2 binaries\nWORKDIR $destdir/usr/bin\nRUN (for i in $triple-*; do ln -s $i ${i#$triple-} ; done )\nCOPY bootstrap/$arch/settings /tmp/settings\nRUN mv /tmp/settings $( find $destdir -name settings -type f ;)\nRUN rm -fr $destdir/usr/share/doc\nWORKDIR $tardir\n#  Compress to xz via pixz because xz is normally too\n#  old for -TN multithreads\nRUN tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz .\n","injectedSmells":[],"originalDockerfileHash":"552481d4bc49c5ee1d735b07f29730a5","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Mostly self contained setup to build a stage2 ghc for musl\nFROM debian:8.0\n#   Install stock bindist for cross compile\nENV ghc=\"7.10.3\"\nENV arch=\"x86_64\"\nENV llvm=\"3.7.1\"\nENV cabal=\"1.22.9.0\"\n#   all needed packages for compiling\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install binutils-gold musl-tools build-essential wget curl libncurses-dev autoconf elfutils libgmp-dev zlib1g-dev git libtool pkg-config libffi-dev cmake g++ python pixz openssl git bison flex -y\nADD http://llvm.org/releases/$llvm/llvm-$llvm.src.tar.xz /tmp/\nADD http://llvm.org/releases/$llvm/polly-$llvm.src.tar.xz /tmp/\n#   Install a non ancient version of llvm on debian, I'm purposefully ignoring\n#   debian repos in favor of compiling to not have to deal with\n#   \"what debian upstream has a current version of llvm\" nonsense, takes more\n#   time to do that than just build the right llvm from source.\nWORKDIR /tmp\nCOPY bootstrap/llvm-$llvm.sh /tmp/llvm.sh\nRUN openssl sha1 llvm-$llvm.src.tar.xz | grep \"SHA1(llvm-3.7.1.src.tar.xz)= 5dbdcafac105273dcbff94c68837a66c6dd78cef\" \\\n && openssl sha1 polly-$llvm.src.tar.xz | grep \"SHA1(polly-3.7.1.src.tar.xz)= 0e3a461907cde7505fbdb44bf61ff318aa9254f7\" \\\n && tar xJpf /tmp/llvm-$llvm.src.tar.xz \\\n && tar xJpf /tmp/polly-$llvm.src.tar.xz \\\n && /tmp/llvm.sh \\\n && rm -fr /tmp/llvm-$llvm.src /tmp/build\nADD https://downloads.haskell.org/~ghc/$ghc/ghc-$ghc-$arch-deb8-linux.tar.xz /tmp/\n#   Install debian ghc binary from upstream.\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-$arch-deb8-linux.tar.xz | grep \"SHA1(ghc-7.10.3-x86_64-deb8-linux.tar.xz)= bab16f95ef4fe6b7cc2fb6b36a02dceeeb53faa4\" \\\n && tar xJpf /tmp/ghc-$ghc-$arch-deb8-linux.tar.xz\nWORKDIR /tmp/ghc-$ghc\nRUN ./configure --prefix=/usr \\\n && make -j1 install \\\n && rm -fr /tmp/ghc-$ghc\nADD https://www.haskell.org/cabal/release/cabal-install-$cabal/cabal-install-$cabal.tar.gz /tmp/\n#   Install cabal so we can install alex/happy to pull off of git\n#   bootstrap cabal and install alex/happy the same way apks are built\n#   only globally\nWORKDIR /tmp\nRUN openssl sha1 cabal-install-$cabal.tar.gz | grep \"SHA1(cabal-install-1.22.9.0.tar.gz)= f1375c928794f45f253b8ec92c2af4732fec597b\" \\\n && tar xzpf /tmp/cabal-install-$cabal.tar.gz\nWORKDIR /tmp/cabal-install-$cabal\nRUN ./bootstrap.sh --global --no-doc \\\n && cabal update \\\n && cabal install --global alex happy \\\n && rm -fr /tmp/cabal-install-$cabal\n#   Build our cross compiler with musl libc from the sabotage linux stuff\nWORKDIR /tmp\nRUN git clone --depth 1 https://github.com/GregorR/musl-cross.git musl-cross\nWORKDIR /tmp/musl-cross\nRUN echo GCC_BUILTIN_PREREQS=yes >> config.sh \\\n && echo ARCH=x86_64 >> config.sh \\\n && echo TRIPLE=x86_64-pc-linux-musl >> config.sh \\\n && echo GCC_STAGE1_NOOPT=1 >> config.sh \\\n && echo CC_BASE_PREFIX=/usr >> config.sh \\\n && echo MAKEFLAGS=-j$( grep -c processor /proc/cpuinfo ;) >> config.sh \\\n && echo \"BINUTILS_CONFFLAGS='CXXFLAGS=-fpermissive --enable-gold --enable-plugins --disable-werror'\" >> config.sh \\\n && echo \"CFLAGS='-g -O2 -fPIC -DPIC'\" >> config.sh \\\n && echo \"CPPFLAGS='-fPIC -DPIC'\" >> config.sh \\\n && echo \"LDFLAGS='-fPIC -DPIC'\" >> config.sh\nCOPY bootstrap/gmpurl.patch gmpurl.patch\nRUN patch -p1 < gmpurl.patch \\\n && ./build.sh \\\n && rm -fr /tmp/musl-cross\nADD http://downloads.haskell.org/~ghc/8.0.1/ghc-8.0.1-src.tar.xz /tmp/\nENV tardir=\"/tmp/root\"\nENV destdir=\"/tmp/root/x86_64\"\nENV triple=\"x86_64-pc-linux-musl\"\nENV crosscc=\"$triple-gcc\"\nENV ghc=\"8.0.1\"\nWORKDIR /tmp\nRUN openssl sha1 ghc-$ghc-src.tar.xz | grep \"SHA1(ghc-8.0.1-src.tar.xz)= 585a2d34a17ce2452273147f2e3cef1a2efe1aa5\" \\\n && tar xJpf /tmp/ghc-$ghc-src.tar.xz\nWORKDIR /tmp/ghc-$ghc\nENV PATH=\"$PATH:/usr/$triple/bin\"\nCOPY bootstrap/$arch/bootstrap.patch bootstrap.patch\nRUN patch -p1 < bootstrap.patch\nRUN cp mk/build.mk.sample mk/build.mk \\\n && ./boot \\\n && echo \"BuildFlavour = quick-llvm\" >> mk/build.mk \\\n && echo \"INTEGER_LIBRARY = integer-simple\" >> mk/build.mk \\\n && echo \"HADDOCK_DOCS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_HTML = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PS = NO\" >> mk/build.mk \\\n && echo \"BUILD_SPHINX_PDF = NO\" >> mk/build.mk \\\n && ./configure --target=$triple --prefix=/usr\nRUN make -j$( grep -c processor /proc/cpuinfo ;) || make -j1\nRUN make -j1 install DESTDIR=$destdir\nRUN rm $( find $destdir -name \"*-hp2ps\" ;)\n#   remove target prefix from stage2 binaries\n#   HACK, just build unlit with the cross compiler and move it to /usr/bin in the install dir\nWORKDIR /tmp/ghc-$ghc/utils/unlit\nRUN $crosscc unlit.c -o $( find $destdir -name unlit ;)\n#   remove target prefix from stage2 binaries\nWORKDIR $destdir/usr/bin\nRUN (for i in $triple-*; do ln -s $i ${i#$triple-} ; done )\nCOPY bootstrap/$arch/settings /tmp/settings\nRUN mv /tmp/settings $( find $destdir -name settings -type f ;)\nRUN rm -fr $destdir/usr/share/doc\nWORKDIR $tardir\n#   Compress to xz via pixz because xz is normally too\n#   old for -TN multithreads\nRUN tar -I'pixz -9' -cf /tmp/ghc-$ghc-$triple.tar.xz .\n","originalDockerfileUglifiedHash":"c44097c59cac0722f148d6968b319247","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9ca75c60accdc388b53ed6a2075374df8b947c1c.dockerfile"}