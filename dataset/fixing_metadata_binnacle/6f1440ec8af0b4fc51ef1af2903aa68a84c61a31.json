{"seed":66423765,"processedDockerfileHash":"068d18ece1d747225ce6d397d1398d13","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\n#   This buids cocalc-docker, but with no external AGPL software (like RStudio) installed.\n#   It does include **cocalc itself** which is AGPL licensed.  However, one may purchase\n#   an MIT-style license for cocalc if you want from SageMath, Inc.\nMAINTAINER William Stein <wstein@sagemath.com>\nUSER root\n#   See https://github.com/sagemathinc/cocalc/issues/921\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV TERM=\"screen\"\n#   So we can source (see http://goo.gl/oBPi5G)\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Ubuntu software that are used by CoCalc (latex, pandoc, sage, jupyter)\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common texlive texlive-latex-extra texlive-extra-utils texlive-xetex texlive-luatex texlive-bibtex-extra liblog-log4perl-perl\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y tmux flex bison libreadline-dev htop screen pandoc aspell poppler-utils net-tools wget git python python-pip make g++ sudo psmisc haproxy nginx yapf rsync tidy\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y vim bup inetutils-ping lynx telnet git emacs subversion ssh m4 latexmk libpq5 libpq-dev build-essential automake\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gfortran dpkg-dev libssl-dev imagemagick libcairo2-dev libcurl4-openssl-dev graphviz smem octave python3-yaml python3-matplotlib python3-jupyter* python-matplotlib* python-jupyter* python-ipywidgets python-ipywidgets-doc python3-ipywidgets jupyter locales locales-all postgresql postgresql-contrib clang-format yapf yapf3 golang r-cran-formatr\n#   The Octave kernel.\nRUN pip install octave_kernel==0.35.1\n#   Jupyter Lab\nRUN pip install jupyterlab==3.6.3\n#   Build and install Sage -- see https://github.com/sagemath/docker-images\nCOPY scripts/ /tmp/scripts\nRUN chmod -R +x /tmp/scripts\nRUN adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password sage \\\n && chown -R sage:sage /home/sage/\n#   make source checkout target, then run the install script\n#   see https://github.com/docker/docker/issues/9547 for the sync\nRUN mkdir -p /usr/local/ \\\n && /tmp/scripts/install_sage.sh /usr/local/ master \\\n && sync\nRUN /tmp/scripts/post_install_sage.sh \\\n && rm -rf /tmp/* \\\n && sync\n#   Install sage scripts system-wide\nRUN echo \"install_scripts('/usr/local/bin/')\" | sage\n#   Install SageTex\nRUN sudo -H -E -u sage sage -p sagetex \\\n && cp -rv /usr/local/sage/local/share/texmf/tex/latex/sagetex/ /usr/share/texmf/tex/latex/ \\\n && texhash\n#   Install LEAN proof assistant\nRUN export VERSION=3.4.1 \\\n && mkdir -p /opt/lean \\\n && cd /opt/lean \\\n && wget https://github.com/leanprover/lean/releases/download/v$VERSION/lean-$VERSION-linux.tar.gz \\\n && tar xf lean-$VERSION-linux.tar.gz \\\n && rm lean-$VERSION-linux.tar.gz \\\n && rm -f latest \\\n && ln -s lean-$VERSION-linux latest \\\n && ln -s /opt/lean/latest/bin/lean /usr/local/bin/lean\n#   Install all aspell dictionaries, so that spell check will work in all languages.  This is\n#   used by cocalc's spell checkers (for editors).  This takes about 80MB, which is well worth it.\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends aspell-* -y )\n#   Install Node.js and LATEST version of npm\nRUN wget -qO- https://deb.nodesource.com/setup_8.x | bash - \\\n && (apt-get update ;apt-get install --no-install-recommends nodejs=8.10.0~dfsg-2ubuntu0.4 -y ) \\\n && /usr/bin/npm install -g npm\n#   Install Julia\nARG JULIA=0.6.3\nRUN cd /tmp \\\n && wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-${JULIA}-linux-x86_64.tar.gz \\\n && tar xf julia-${JULIA}-linux-x86_64.tar.gz -C /opt \\\n && rm -f julia-${JULIA}-linux-x86_64.tar.gz \\\n && mv /opt/julia-* /opt/julia \\\n && ln -s /opt/julia/bin/julia /usr/local/bin\n#   Install R Jupyter Kernel package into R itself (so R kernel works)\nRUN echo \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'httr', 'devtools', 'uuid', 'digest'), repos='http://cran.us.r-project.org'); devtools::install_github('IRkernel/IRkernel')\" | sage -R --no-save\n#   Commit to checkout and build.\nARG commit=HEAD\n#   Pull latest source code for CoCalc and checkout requested commit (or HEAD)\nRUN git clone https://github.com/sagemathinc/cocalc.git \\\n && cd /cocalc \\\n && git pull \\\n && git fetch origin \\\n && git checkout ${commit:-HEAD}\n#   Build and install all deps\n#   CRITICAL to install first web, then compute, since compute precompiles all the .js\n#   for fast startup, but unfortunately doing so breaks ./install.py all --web, since\n#   the .js files laying around somehow mess up cjsx loading.\nRUN cd /cocalc/src \\\n && . ./smc-env \\\n && ./install.py all --web \\\n && ./install.py all --compute \\\n && rm -rf /root/.npm /root/.node-gyp/\n#   Install code into Sage\nRUN cd /cocalc/src \\\n && sage -pip install --upgrade smc_sagews/\nRUN echo \"umask 077\" >> /etc/bash.bashrc\n#   Install some Jupyter kernel definitions\nCOPY kernels /usr/local/share/jupyter/kernels\n#   Configure so that R kernel actually works -- see https://github.com/IRkernel/IRkernel/issues/388\nCOPY kernels/ir/Rprofile.site /usr/local/sage/local/lib/R/etc/Rprofile.site\n#   Move aside sage environment python3; this is needed for use of python3 from sagews\nRUN cd /usr/local/sage/local/bin \\\n && mv python3 python3-bkb\n#   Build a UTF-8 locale, so that tmux works -- see https://unix.stackexchange.com/questions/277909/updated-my-arch-linux-server-and-now-i-get-tmux-need-utf-8-locale-lc-ctype-bu\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install IJulia kernel\n#  RUN echo '\\\n#  ENV[\"JUPYTER\"] = \"/usr/local/bin/jupyter\"; \\\n#  ENV[\"JULIA_PKGDIR\"] = \"/opt/julia/share/julia/site\"; \\\n#  Pkg.init(); \\\n#  Pkg.add(\"IJulia\");' | julia \\\n#   && mv -i \"$HOME/.local/share/jupyter/kernels/julia-0.6\" \"/usr/local/share/jupyter/kernels/\"\n#  ## Configuration\nCOPY login.defs /etc/login.defs\nCOPY login /etc/defaults/login\nCOPY nginx.conf /etc/nginx/sites-available/default\nCOPY haproxy.conf /etc/haproxy/haproxy.cfg\nCOPY run.py /root/run.py\nCOPY bashrc /root/.bashrc\n#  # Xpra backend support -- we have to use the debs from xpra.org,\n#  # Since the official distro packages are ancient.\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xvfb websockify curl \\\n && curl https://xpra.org/gpg.asc | apt-key add - \\\n && echo \"deb http://xpra.org/ bionic main\" > /etc/apt/sources.list.d/xpra.list \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xpra\n#  # X11 apps to make x11 support useful.\n#  # Will move this up in Dockerfile once stable.\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y x11-apps dbus-x11 xdotool xclip x11-xkb-utils\n#   CoCalc Jupyter widgets\nRUN pip install ipyleaflet==0.17.2 --no-cache-dir\nRUN pip3 install --no-cache-dir ipyleaflet\nCMD /root/run.py\nEXPOSE 80/tcp 443/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\n#  This buids cocalc-docker, but with no external AGPL software (like RStudio) installed.\n#  It does include **cocalc itself** which is AGPL licensed.  However, one may purchase\n#  an MIT-style license for cocalc if you want from SageMath, Inc.\nMAINTAINER William Stein <wstein@sagemath.com>\nUSER root\n#  See https://github.com/sagemathinc/cocalc/issues/921\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV TERM=\"screen\"\n#  So we can source (see http://goo.gl/oBPi5G)\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#  Ubuntu software that are used by CoCalc (latex, pandoc, sage, jupyter)\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common texlive texlive-latex-extra texlive-extra-utils texlive-xetex texlive-luatex texlive-bibtex-extra liblog-log4perl-perl\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y tmux flex bison libreadline-dev htop screen pandoc aspell poppler-utils net-tools wget git python python-pip make g++ sudo psmisc haproxy nginx yapf rsync tidy\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y vim bup inetutils-ping lynx telnet git emacs subversion ssh m4 latexmk libpq5 libpq-dev build-essential automake\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gfortran dpkg-dev libssl-dev imagemagick libcairo2-dev libcurl4-openssl-dev graphviz smem octave python3-yaml python3-matplotlib python3-jupyter* python-matplotlib* python-jupyter* python-ipywidgets python-ipywidgets-doc python3-ipywidgets jupyter locales locales-all postgresql postgresql-contrib clang-format yapf yapf3 golang r-cran-formatr\n#  The Octave kernel.\nRUN pip install octave_kernel\n#  Jupyter Lab\nRUN pip install jupyterlab\n#  Build and install Sage -- see https://github.com/sagemath/docker-images\nCOPY scripts/ /tmp/scripts\nRUN chmod -R +x /tmp/scripts\nRUN adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password sage \\\n && chown -R sage:sage /home/sage/\n#  make source checkout target, then run the install script\n#  see https://github.com/docker/docker/issues/9547 for the sync\nRUN mkdir -p /usr/local/ \\\n && /tmp/scripts/install_sage.sh /usr/local/ master \\\n && sync\nRUN /tmp/scripts/post_install_sage.sh \\\n && rm -rf /tmp/* \\\n && sync\n#  Install sage scripts system-wide\nRUN echo \"install_scripts('/usr/local/bin/')\" | sage\n#  Install SageTex\nRUN sudo -H -E -u sage sage -p sagetex \\\n && cp -rv /usr/local/sage/local/share/texmf/tex/latex/sagetex/ /usr/share/texmf/tex/latex/ \\\n && texhash\n#  Install LEAN proof assistant\nRUN export VERSION=3.4.1 \\\n && mkdir -p /opt/lean \\\n && cd /opt/lean \\\n && wget https://github.com/leanprover/lean/releases/download/v$VERSION/lean-$VERSION-linux.tar.gz \\\n && tar xf lean-$VERSION-linux.tar.gz \\\n && rm lean-$VERSION-linux.tar.gz \\\n && rm -f latest \\\n && ln -s lean-$VERSION-linux latest \\\n && ln -s /opt/lean/latest/bin/lean /usr/local/bin/lean\n#  Install all aspell dictionaries, so that spell check will work in all languages.  This is\n#  used by cocalc's spell checkers (for editors).  This takes about 80MB, which is well worth it.\nRUN apt-get update \\\n && apt-get install aspell-* -y\n#  Install Node.js and LATEST version of npm\nRUN wget -qO- https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y \\\n && /usr/bin/npm install -g npm\n#  Install Julia\nARG JULIA=0.6.3\nRUN cd /tmp \\\n && wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-${JULIA}-linux-x86_64.tar.gz \\\n && tar xf julia-${JULIA}-linux-x86_64.tar.gz -C /opt \\\n && rm -f julia-${JULIA}-linux-x86_64.tar.gz \\\n && mv /opt/julia-* /opt/julia \\\n && ln -s /opt/julia/bin/julia /usr/local/bin\n#  Install R Jupyter Kernel package into R itself (so R kernel works)\nRUN echo \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'httr', 'devtools', 'uuid', 'digest'), repos='http://cran.us.r-project.org'); devtools::install_github('IRkernel/IRkernel')\" | sage -R --no-save\n#  Commit to checkout and build.\nARG commit=HEAD\n#  Pull latest source code for CoCalc and checkout requested commit (or HEAD)\nRUN git clone https://github.com/sagemathinc/cocalc.git \\\n && cd /cocalc \\\n && git pull \\\n && git fetch origin \\\n && git checkout ${commit:-HEAD}\n#  Build and install all deps\n#  CRITICAL to install first web, then compute, since compute precompiles all the .js\n#  for fast startup, but unfortunately doing so breaks ./install.py all --web, since\n#  the .js files laying around somehow mess up cjsx loading.\nRUN cd /cocalc/src \\\n && . ./smc-env \\\n && ./install.py all --web \\\n && ./install.py all --compute \\\n && rm -rf /root/.npm /root/.node-gyp/\n#  Install code into Sage\nRUN cd /cocalc/src \\\n && sage -pip install --upgrade smc_sagews/\nRUN echo \"umask 077\" >> /etc/bash.bashrc\n#  Install some Jupyter kernel definitions\nCOPY kernels /usr/local/share/jupyter/kernels\n#  Configure so that R kernel actually works -- see https://github.com/IRkernel/IRkernel/issues/388\nCOPY kernels/ir/Rprofile.site /usr/local/sage/local/lib/R/etc/Rprofile.site\n#  Move aside sage environment python3; this is needed for use of python3 from sagews\nRUN cd /usr/local/sage/local/bin \\\n && mv python3 python3-bkb\n#  Build a UTF-8 locale, so that tmux works -- see https://unix.stackexchange.com/questions/277909/updated-my-arch-linux-server-and-now-i-get-tmux-need-utf-8-locale-lc-ctype-bu\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#  Install IJulia kernel\n# RUN echo '\\\n# ENV[\"JUPYTER\"] = \"/usr/local/bin/jupyter\"; \\\n# ENV[\"JULIA_PKGDIR\"] = \"/opt/julia/share/julia/site\"; \\\n# Pkg.init(); \\\n# Pkg.add(\"IJulia\");' | julia \\\n#  && mv -i \"$HOME/.local/share/jupyter/kernels/julia-0.6\" \"/usr/local/share/jupyter/kernels/\"\n# ## Configuration\nCOPY login.defs /etc/login.defs\nCOPY login /etc/defaults/login\nCOPY nginx.conf /etc/nginx/sites-available/default\nCOPY haproxy.conf /etc/haproxy/haproxy.cfg\nCOPY run.py /root/run.py\nCOPY bashrc /root/.bashrc\n# # Xpra backend support -- we have to use the debs from xpra.org,\n# # Since the official distro packages are ancient.\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xvfb websockify curl \\\n && curl https://xpra.org/gpg.asc | apt-key add - \\\n && echo \"deb http://xpra.org/ bionic main\" > /etc/apt/sources.list.d/xpra.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xpra\n# # X11 apps to make x11 support useful.\n# # Will move this up in Dockerfile once stable.\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y x11-apps dbus-x11 xdotool xclip x11-xkb-utils\n#  CoCalc Jupyter widgets\nRUN pip install ipyleaflet --no-cache-dir\nRUN pip3 install --no-cache-dir ipyleaflet\nCMD /root/run.py\nEXPOSE 80/tcp 443/tcp\n","injectedSmells":[],"originalDockerfileHash":"6378367151bd5977c0b6cd4d03f58bd5","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\n#   This buids cocalc-docker, but with no external AGPL software (like RStudio) installed.\n#   It does include **cocalc itself** which is AGPL licensed.  However, one may purchase\n#   an MIT-style license for cocalc if you want from SageMath, Inc.\nMAINTAINER William Stein <wstein@sagemath.com>\nUSER root\n#   See https://github.com/sagemathinc/cocalc/issues/921\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV TERM=\"screen\"\n#   So we can source (see http://goo.gl/oBPi5G)\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Ubuntu software that are used by CoCalc (latex, pandoc, sage, jupyter)\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common texlive texlive-latex-extra texlive-extra-utils texlive-xetex texlive-luatex texlive-bibtex-extra liblog-log4perl-perl\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y tmux flex bison libreadline-dev htop screen pandoc aspell poppler-utils net-tools wget git python python-pip make g++ sudo psmisc haproxy nginx yapf rsync tidy\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y vim bup inetutils-ping lynx telnet git emacs subversion ssh m4 latexmk libpq5 libpq-dev build-essential automake\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gfortran dpkg-dev libssl-dev imagemagick libcairo2-dev libcurl4-openssl-dev graphviz smem octave python3-yaml python3-matplotlib python3-jupyter* python-matplotlib* python-jupyter* python-ipywidgets python-ipywidgets-doc python3-ipywidgets jupyter locales locales-all postgresql postgresql-contrib clang-format yapf yapf3 golang r-cran-formatr\n#   The Octave kernel.\nRUN pip install octave_kernel\n#   Jupyter Lab\nRUN pip install jupyterlab\n#   Build and install Sage -- see https://github.com/sagemath/docker-images\nCOPY scripts/ /tmp/scripts\nRUN chmod -R +x /tmp/scripts\nRUN adduser --quiet --shell /bin/bash --gecos \"Sage user,101,,\" --disabled-password sage \\\n && chown -R sage:sage /home/sage/\n#   make source checkout target, then run the install script\n#   see https://github.com/docker/docker/issues/9547 for the sync\nRUN mkdir -p /usr/local/ \\\n && /tmp/scripts/install_sage.sh /usr/local/ master \\\n && sync\nRUN /tmp/scripts/post_install_sage.sh \\\n && rm -rf /tmp/* \\\n && sync\n#   Install sage scripts system-wide\nRUN echo \"install_scripts('/usr/local/bin/')\" | sage\n#   Install SageTex\nRUN sudo -H -E -u sage sage -p sagetex \\\n && cp -rv /usr/local/sage/local/share/texmf/tex/latex/sagetex/ /usr/share/texmf/tex/latex/ \\\n && texhash\n#   Install LEAN proof assistant\nRUN export VERSION=3.4.1 \\\n && mkdir -p /opt/lean \\\n && cd /opt/lean \\\n && wget https://github.com/leanprover/lean/releases/download/v$VERSION/lean-$VERSION-linux.tar.gz \\\n && tar xf lean-$VERSION-linux.tar.gz \\\n && rm lean-$VERSION-linux.tar.gz \\\n && rm -f latest \\\n && ln -s lean-$VERSION-linux latest \\\n && ln -s /opt/lean/latest/bin/lean /usr/local/bin/lean\n#   Install all aspell dictionaries, so that spell check will work in all languages.  This is\n#   used by cocalc's spell checkers (for editors).  This takes about 80MB, which is well worth it.\nRUN apt-get update \\\n && apt-get install aspell-* -y\n#   Install Node.js and LATEST version of npm\nRUN wget -qO- https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y \\\n && /usr/bin/npm install -g npm\n#   Install Julia\nARG JULIA=0.6.3\nRUN cd /tmp \\\n && wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-${JULIA}-linux-x86_64.tar.gz \\\n && tar xf julia-${JULIA}-linux-x86_64.tar.gz -C /opt \\\n && rm -f julia-${JULIA}-linux-x86_64.tar.gz \\\n && mv /opt/julia-* /opt/julia \\\n && ln -s /opt/julia/bin/julia /usr/local/bin\n#   Install R Jupyter Kernel package into R itself (so R kernel works)\nRUN echo \"install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'httr', 'devtools', 'uuid', 'digest'), repos='http://cran.us.r-project.org'); devtools::install_github('IRkernel/IRkernel')\" | sage -R --no-save\n#   Commit to checkout and build.\nARG commit=HEAD\n#   Pull latest source code for CoCalc and checkout requested commit (or HEAD)\nRUN git clone https://github.com/sagemathinc/cocalc.git \\\n && cd /cocalc \\\n && git pull \\\n && git fetch origin \\\n && git checkout ${commit:-HEAD}\n#   Build and install all deps\n#   CRITICAL to install first web, then compute, since compute precompiles all the .js\n#   for fast startup, but unfortunately doing so breaks ./install.py all --web, since\n#   the .js files laying around somehow mess up cjsx loading.\nRUN cd /cocalc/src \\\n && . ./smc-env \\\n && ./install.py all --web \\\n && ./install.py all --compute \\\n && rm -rf /root/.npm /root/.node-gyp/\n#   Install code into Sage\nRUN cd /cocalc/src \\\n && sage -pip install --upgrade smc_sagews/\nRUN echo \"umask 077\" >> /etc/bash.bashrc\n#   Install some Jupyter kernel definitions\nCOPY kernels /usr/local/share/jupyter/kernels\n#   Configure so that R kernel actually works -- see https://github.com/IRkernel/IRkernel/issues/388\nCOPY kernels/ir/Rprofile.site /usr/local/sage/local/lib/R/etc/Rprofile.site\n#   Move aside sage environment python3; this is needed for use of python3 from sagews\nRUN cd /usr/local/sage/local/bin \\\n && mv python3 python3-bkb\n#   Build a UTF-8 locale, so that tmux works -- see https://unix.stackexchange.com/questions/277909/updated-my-arch-linux-server-and-now-i-get-tmux-need-utf-8-locale-lc-ctype-bu\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && locale-gen\n#   Install IJulia kernel\n#  RUN echo '\\\n#  ENV[\"JUPYTER\"] = \"/usr/local/bin/jupyter\"; \\\n#  ENV[\"JULIA_PKGDIR\"] = \"/opt/julia/share/julia/site\"; \\\n#  Pkg.init(); \\\n#  Pkg.add(\"IJulia\");' | julia \\\n#   && mv -i \"$HOME/.local/share/jupyter/kernels/julia-0.6\" \"/usr/local/share/jupyter/kernels/\"\n#  ## Configuration\nCOPY login.defs /etc/login.defs\nCOPY login /etc/defaults/login\nCOPY nginx.conf /etc/nginx/sites-available/default\nCOPY haproxy.conf /etc/haproxy/haproxy.cfg\nCOPY run.py /root/run.py\nCOPY bashrc /root/.bashrc\n#  # Xpra backend support -- we have to use the debs from xpra.org,\n#  # Since the official distro packages are ancient.\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xvfb websockify curl \\\n && curl https://xpra.org/gpg.asc | apt-key add - \\\n && echo \"deb http://xpra.org/ bionic main\" > /etc/apt/sources.list.d/xpra.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y xpra\n#  # X11 apps to make x11 support useful.\n#  # Will move this up in Dockerfile once stable.\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y x11-apps dbus-x11 xdotool xclip x11-xkb-utils\n#   CoCalc Jupyter widgets\nRUN pip install ipyleaflet --no-cache-dir\nRUN pip3 install --no-cache-dir ipyleaflet\nCMD /root/run.py\nEXPOSE 80/tcp 443/tcp\n","originalDockerfileUglifiedHash":"bf7f4441ded42f27e184b913a9cae5f5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6f1440ec8af0b4fc51ef1af2903aa68a84c61a31.dockerfile"}