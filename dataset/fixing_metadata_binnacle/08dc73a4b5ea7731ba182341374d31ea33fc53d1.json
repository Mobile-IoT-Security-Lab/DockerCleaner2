{"seed":664603544,"processedDockerfileHash":"16bf5a0e05458f65ee7f894f4d31eb1e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile provides a starting point for a ROCm installation of \n#   MIOpen and tensorflow.\n#   This Dockerfile uses a multi-stage build\n#   The first stage is to build the HCC, HIP and other tools we need for the TF build\n#   The second stage is to do the TF CI build itself\n#   The separation of stages allows to reduce the size of the final docker image\n#   by copying over only the packages built in the first stage over to the second one\n#  ##################################################\n#   Stage 1 : build the tools needed for the TF build\n#       Note: experimental! hip-clang build/install\n#  ##################################################\nFROM ubuntu:xenial\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/rocm-user\"\nRUN mkdir -p $HOME\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 software-properties-common=0.96.20.10 -y )\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install packages needed for this image\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends sudo=1.8.16-0ubuntu1.10 python=2.7.12-1~16.04 rpm=4.12.0.1+dfsg1-3build3 git=1:2.7.4-0ubuntu1.10 mercurial=3.7.3-1ubuntu1.2 libxml2=2.9.3+dfsg1-1ubuntu0.7 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 -y )\n#   Build and install LLVM with Clang and LLD. Checkout clang and lld into llvm/tools/ dir.\nRUN cd $HOME \\\n && git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/llvm.git\nWORKDIR $HOME/llvm/tools\nRUN git clone --single-branch -b amd-common http://github.com/radeonopencompute/clang.git\nRUN git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/lld.git\nRUN mkdir $HOME/llvm/build\nWORKDIR $HOME/llvm/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/rocm/llvm -DLLVM_TARGETS_TO_BUILD=\"AMDGPU;X86\" .. \\\n && make -j$( nproc ;) \\\n && sudo make -j$( nproc ;) install\n#   Build and install ROCDL\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-Device-Libs\nRUN mkdir -p $HOME/ROCm-Device-Libs/build\nWORKDIR $HOME/ROCm-Device-Libs/build\nENV LLVM_BUILD=\"$HOME/llvm/build\"\nRUN CC=$LLVM_BUILD/bin/clang cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_BUILD -DAMDHSACOD=/opt/rocm/hsa/bin/x86_64/amdhsacod .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Build and install comgr\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-CompilerSupport.git\nRUN mkdir $HOME/ROCm-CompilerSupport/build\nWORKDIR $HOME/ROCm-CompilerSupport/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=\"/opt/rocm/llvm;/opt/rocm/lib\" ../lib/comgr \\\n && make -j$( nproc ;) \\\n && cpack -G DEB \\\n && sudo dpkg -i ./*.deb\n#   Build and install HCC\nWORKDIR $HOME\nRUN git clone --recursive --single-branch -b clang_tot_upgrade https://github.com/RadeonOpenCompute/hcc.git\nRUN mkdir -p $HOME/hcc/build\nWORKDIR $HOME/hcc/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Build and install HIP-HCC-RT\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/ROCm-Developer-Tools/HIP\nRUN mkdir $HOME/HIP/build\nWORKDIR $HOME/HIP/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DHIP_COMPILER=clang .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\nENV HIP_CLANG_HCC_COMPAT_MODE=\"1\"\n#   Workaround : build MIOpen from source using fork of the public repo with the temporary fix for issue #1061 ($HOME env not set)\nRUN sudo apt-get install -y wget unzip libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev\nRUN cd $HOME \\\n && git clone https://github.com/RadeonOpenCompute/rocm-cmake.git\nRUN cd $HOME/rocm-cmake \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./rocm-cmake*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git\nRUN cd $HOME/MIOpenGEMM \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./miopengemm*.deb\nRUN cd $HOME \\\n && mkdir half \\\n && cd half \\\n && sudo wget https://downloads.sourceforge.net/project/half/half/1.12.0/half-1.12.0.zip \\\n && sudo unzip *.zip\n#   Build rocBLAS from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocBLAS.git \\\n && cd rocBLAS \\\n && ./install.sh -id --hip-clang\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/hipBLAS.git \\\n && cd hipBLAS \\\n && ./install.sh -id\n#   Build rocFFT from source\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/rocFFT.git \\\n && cd rocFFT \\\n && ./install.sh -id --hip-clang\n#   Build rocRAND from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocRAND.git \\\n && mkdir rocRAND/build \\\n && cd rocRAND/build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./rocrand*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpen.git\nRUN cd $HOME/MIOpen \\\n && mkdir build \\\n && cd build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -DCMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/ -I/opt/rocm/hcc/include\" -DHALF_INCLUDE_DIR=$HOME/half/include -DCMAKE_BUILD_TYPE=Release .. \\\n && sudo make package -j$( nproc ;)\n#  ##########################\n#   Stage 2 : do the TF build\n#  ##########################\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 software-properties-common=0.96.20.10 -y )\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   COPY and install llvm built in the previous stage\nRUN rm -rf /opt/rocm/llvm \\\n && mkdir -p /opt/rocm/llvm\nCOPY --from=tool_builder /opt/rocm/llvm/ /opt/rocm/llvm/\n#   COPY and install the ROCDL package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-Device-Libs\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-Device-Libs/\nRUN cd $HOME/pkgs/ROCm-Device-Libs \\\n && dpkg -i *.deb\n#   COPY and install the comgr package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-CompilerSupport\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-CompilerSupport/\nRUN cd $HOME/pkgs/ROCm-CompilerSupport \\\n && dpkg -i *.deb\n#   COPY and install the hcc package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hcc\nCOPY --from=tool_builder /home/rocm-user/hcc/build/*.deb $HOME/pkgs/hcc/\nRUN cd $HOME/pkgs/hcc \\\n && dpkg -i *.deb\n#   COPY and install the HIP package built in the previous stage\nRUN mkdir -p $HOME/pkgs/HIP\nCOPY --from=tool_builder /home/rocm-user/HIP/build/*.deb $HOME/pkgs/HIP/\nRUN cd $HOME/pkgs/HIP \\\n && dpkg -i *.deb\n#   COPY and install the rocBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocBLAS\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/release/*.deb $HOME/pkgs/rocBLAS/\nRUN cd $HOME/pkgs/rocBLAS \\\n && dpkg -i *.deb\n#   COPY and install the hipBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hipBLAS\nCOPY --from=tool_builder /home/rocm-user/hipBLAS/build/*.deb $HOME/pkgs/hipBLAS/\nRUN cd $HOME/pkgs/hipBLAS \\\n && dpkg -i *.deb\n#   COPY and install the rocFFT package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocFFT\nCOPY --from=tool_builder /home/rocm-user/rocFFT/build/*.deb $HOME/pkgs/rocFFT/\nRUN cd $HOME/pkgs/rocFFT \\\n && dpkg -i *.deb\n#   COPY and install the rocRAND package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocRAND\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/*.deb $HOME/pkgs/rocRAND/\nRUN cd $HOME/pkgs/rocRAND \\\n && dpkg -i *.deb\n#   COPY and install the MIOpenGEMM package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpenGEMM\nCOPY --from=tool_builder /home/rocm-user/MIOpenGEMM/build/*.deb $HOME/pkgs/MIOpenGEMM/\nRUN cd $HOME/pkgs/MIOpenGEMM \\\n && dpkg -i *.deb\n#   COPY and install the MIOpen package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpen\nCOPY --from=tool_builder /home/rocm-user/MIOpen/build/*.deb $HOME/pkgs/MIOpen/\nRUN cd $HOME/pkgs/MIOpen \\\n && dpkg -i *.deb\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\n#   Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#   Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our CUDA configuration.\nENV TF_NEED_ROCM=\"1\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile provides a starting point for a ROCm installation of \n#  MIOpen and tensorflow.\n#  This Dockerfile uses a multi-stage build\n#  The first stage is to build the HCC, HIP and other tools we need for the TF build\n#  The second stage is to do the TF CI build itself\n#  The separation of stages allows to reduce the size of the final docker image\n#  by copying over only the packages built in the first stage over to the second one\n# ##################################################\n#  Stage 1 : build the tools needed for the TF build\n#      Note: experimental! hip-clang build/install\n# ##################################################\nFROM ubuntu:xenial\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/rocm-user\"\nRUN mkdir -p $HOME\nRUN apt-get update \\\n && apt-get install -y wget software-properties-common\n#  Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#  Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  install packages needed for this image\nRUN apt-get update \\\n && apt-get install sudo python rpm git mercurial libxml2 libxml2-dev -y\n#  Build and install LLVM with Clang and LLD. Checkout clang and lld into llvm/tools/ dir.\nRUN cd $HOME \\\n && git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/llvm.git\nWORKDIR $HOME/llvm/tools\nRUN git clone --single-branch -b amd-common http://github.com/radeonopencompute/clang.git\nRUN git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/lld.git\nRUN mkdir $HOME/llvm/build\nWORKDIR $HOME/llvm/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/rocm/llvm -DLLVM_TARGETS_TO_BUILD=\"AMDGPU;X86\" .. \\\n && make -j$( nproc ;) \\\n && sudo make -j$( nproc ;) install\n#  Build and install ROCDL\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-Device-Libs\nRUN mkdir -p $HOME/ROCm-Device-Libs/build\nWORKDIR $HOME/ROCm-Device-Libs/build\nENV LLVM_BUILD=\"$HOME/llvm/build\"\nRUN CC=$LLVM_BUILD/bin/clang cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_BUILD -DAMDHSACOD=/opt/rocm/hsa/bin/x86_64/amdhsacod .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#  Build and install comgr\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-CompilerSupport.git\nRUN mkdir $HOME/ROCm-CompilerSupport/build\nWORKDIR $HOME/ROCm-CompilerSupport/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=\"/opt/rocm/llvm;/opt/rocm/lib\" ../lib/comgr \\\n && make -j$( nproc ;) \\\n && cpack -G DEB \\\n && sudo dpkg -i ./*.deb\n#  Build and install HCC\nWORKDIR $HOME\nRUN git clone --recursive --single-branch -b clang_tot_upgrade https://github.com/RadeonOpenCompute/hcc.git\nRUN mkdir -p $HOME/hcc/build\nWORKDIR $HOME/hcc/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#  Build and install HIP-HCC-RT\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/ROCm-Developer-Tools/HIP\nRUN mkdir $HOME/HIP/build\nWORKDIR $HOME/HIP/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DHIP_COMPILER=clang .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#  Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\nENV HIP_CLANG_HCC_COMPAT_MODE=\"1\"\n#  Workaround : build MIOpen from source using fork of the public repo with the temporary fix for issue #1061 ($HOME env not set)\nRUN sudo apt-get install -y wget unzip libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev\nRUN cd $HOME \\\n && git clone https://github.com/RadeonOpenCompute/rocm-cmake.git\nRUN cd $HOME/rocm-cmake \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./rocm-cmake*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git\nRUN cd $HOME/MIOpenGEMM \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./miopengemm*.deb\nRUN cd $HOME \\\n && mkdir half \\\n && cd half \\\n && sudo wget https://downloads.sourceforge.net/project/half/half/1.12.0/half-1.12.0.zip \\\n && sudo unzip *.zip\n#  Build rocBLAS from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocBLAS.git \\\n && cd rocBLAS \\\n && ./install.sh -id --hip-clang\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/hipBLAS.git \\\n && cd hipBLAS \\\n && ./install.sh -id\n#  Build rocFFT from source\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/rocFFT.git \\\n && cd rocFFT \\\n && ./install.sh -id --hip-clang\n#  Build rocRAND from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocRAND.git \\\n && mkdir rocRAND/build \\\n && cd rocRAND/build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./rocrand*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpen.git\nRUN cd $HOME/MIOpen \\\n && mkdir build \\\n && cd build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -DCMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/ -I/opt/rocm/hcc/include\" -DHALF_INCLUDE_DIR=$HOME/half/include -DCMAKE_BUILD_TYPE=Release .. \\\n && sudo make package -j$( nproc ;)\n# ##########################\n#  Stage 2 : do the TF build\n# ##########################\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install -y wget software-properties-common\n#  Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#  Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  COPY and install llvm built in the previous stage\nRUN rm -rf /opt/rocm/llvm \\\n && mkdir -p /opt/rocm/llvm\nCOPY --from=tool_builder /opt/rocm/llvm/ /opt/rocm/llvm/\n#  COPY and install the ROCDL package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-Device-Libs\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-Device-Libs/\nRUN cd $HOME/pkgs/ROCm-Device-Libs \\\n && dpkg -i *.deb\n#  COPY and install the comgr package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-CompilerSupport\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-CompilerSupport/\nRUN cd $HOME/pkgs/ROCm-CompilerSupport \\\n && dpkg -i *.deb\n#  COPY and install the hcc package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hcc\nCOPY --from=tool_builder /home/rocm-user/hcc/build/*.deb $HOME/pkgs/hcc/\nRUN cd $HOME/pkgs/hcc \\\n && dpkg -i *.deb\n#  COPY and install the HIP package built in the previous stage\nRUN mkdir -p $HOME/pkgs/HIP\nCOPY --from=tool_builder /home/rocm-user/HIP/build/*.deb $HOME/pkgs/HIP/\nRUN cd $HOME/pkgs/HIP \\\n && dpkg -i *.deb\n#  COPY and install the rocBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocBLAS\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/release/*.deb $HOME/pkgs/rocBLAS/\nRUN cd $HOME/pkgs/rocBLAS \\\n && dpkg -i *.deb\n#  COPY and install the hipBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hipBLAS\nCOPY --from=tool_builder /home/rocm-user/hipBLAS/build/*.deb $HOME/pkgs/hipBLAS/\nRUN cd $HOME/pkgs/hipBLAS \\\n && dpkg -i *.deb\n#  COPY and install the rocFFT package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocFFT\nCOPY --from=tool_builder /home/rocm-user/rocFFT/build/*.deb $HOME/pkgs/rocFFT/\nRUN cd $HOME/pkgs/rocFFT \\\n && dpkg -i *.deb\n#  COPY and install the rocRAND package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocRAND\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/*.deb $HOME/pkgs/rocRAND/\nRUN cd $HOME/pkgs/rocRAND \\\n && dpkg -i *.deb\n#  COPY and install the MIOpenGEMM package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpenGEMM\nCOPY --from=tool_builder /home/rocm-user/MIOpenGEMM/build/*.deb $HOME/pkgs/MIOpenGEMM/\nRUN cd $HOME/pkgs/MIOpenGEMM \\\n && dpkg -i *.deb\n#  COPY and install the MIOpen package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpen\nCOPY --from=tool_builder /home/rocm-user/MIOpen/build/*.deb $HOME/pkgs/MIOpen/\nRUN cd $HOME/pkgs/MIOpen \\\n && dpkg -i *.deb\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#  Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#  Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\n#  Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#  Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#  Configure the build for our CUDA configuration.\nENV TF_NEED_ROCM=\"1\"\n","injectedSmells":[],"originalDockerfileHash":"edc6cd0c16548baeb37b90d4279d0b98","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile provides a starting point for a ROCm installation of \n#   MIOpen and tensorflow.\n#   This Dockerfile uses a multi-stage build\n#   The first stage is to build the HCC, HIP and other tools we need for the TF build\n#   The second stage is to do the TF CI build itself\n#   The separation of stages allows to reduce the size of the final docker image\n#   by copying over only the packages built in the first stage over to the second one\n#  ##################################################\n#   Stage 1 : build the tools needed for the TF build\n#       Note: experimental! hip-clang build/install\n#  ##################################################\nFROM ubuntu:xenial\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/home/rocm-user\"\nRUN mkdir -p $HOME\nRUN apt-get update \\\n && apt-get install wget software-properties-common -y\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install packages needed for this image\nRUN apt-get update \\\n && apt-get install sudo python rpm git mercurial libxml2 libxml2-dev -y\n#   Build and install LLVM with Clang and LLD. Checkout clang and lld into llvm/tools/ dir.\nRUN cd $HOME \\\n && git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/llvm.git\nWORKDIR $HOME/llvm/tools\nRUN git clone --single-branch -b amd-common http://github.com/radeonopencompute/clang.git\nRUN git clone --single-branch -b amd-common https://github.com/RadeonOpenCompute/lld.git\nRUN mkdir $HOME/llvm/build\nWORKDIR $HOME/llvm/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/rocm/llvm -DLLVM_TARGETS_TO_BUILD=\"AMDGPU;X86\" .. \\\n && make -j$( nproc ;) \\\n && sudo make -j$( nproc ;) install\n#   Build and install ROCDL\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-Device-Libs\nRUN mkdir -p $HOME/ROCm-Device-Libs/build\nWORKDIR $HOME/ROCm-Device-Libs/build\nENV LLVM_BUILD=\"$HOME/llvm/build\"\nRUN CC=$LLVM_BUILD/bin/clang cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_BUILD -DAMDHSACOD=/opt/rocm/hsa/bin/x86_64/amdhsacod .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Build and install comgr\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/RadeonOpenCompute/ROCm-CompilerSupport.git\nRUN mkdir $HOME/ROCm-CompilerSupport/build\nWORKDIR $HOME/ROCm-CompilerSupport/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=\"/opt/rocm/llvm;/opt/rocm/lib\" ../lib/comgr \\\n && make -j$( nproc ;) \\\n && cpack -G DEB \\\n && sudo dpkg -i ./*.deb\n#   Build and install HCC\nWORKDIR $HOME\nRUN git clone --recursive --single-branch -b clang_tot_upgrade https://github.com/RadeonOpenCompute/hcc.git\nRUN mkdir -p $HOME/hcc/build\nWORKDIR $HOME/hcc/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Build and install HIP-HCC-RT\nWORKDIR $HOME\nRUN git clone --single-branch -b master https://github.com/ROCm-Developer-Tools/HIP\nRUN mkdir $HOME/HIP/build\nWORKDIR $HOME/HIP/build\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DHIP_COMPILER=clang .. \\\n && make -j$( nproc ;) package \\\n && sudo dpkg -i ./*.deb\n#   Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\nENV HIP_CLANG_HCC_COMPAT_MODE=\"1\"\n#   Workaround : build MIOpen from source using fork of the public repo with the temporary fix for issue #1061 ($HOME env not set)\nRUN sudo apt-get install -y wget unzip libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev\nRUN cd $HOME \\\n && git clone https://github.com/RadeonOpenCompute/rocm-cmake.git\nRUN cd $HOME/rocm-cmake \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./rocm-cmake*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git\nRUN cd $HOME/MIOpenGEMM \\\n && mkdir build \\\n && cd build \\\n && cmake .. \\\n && sudo make package -j$( nproc ;) \\\n && sudo dpkg -i ./miopengemm*.deb\nRUN cd $HOME \\\n && mkdir half \\\n && cd half \\\n && sudo wget https://downloads.sourceforge.net/project/half/half/1.12.0/half-1.12.0.zip \\\n && sudo unzip *.zip\n#   Build rocBLAS from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocBLAS.git \\\n && cd rocBLAS \\\n && ./install.sh -id --hip-clang\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/hipBLAS.git \\\n && cd hipBLAS \\\n && ./install.sh -id\n#   Build rocFFT from source\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/rocFFT.git \\\n && cd rocFFT \\\n && ./install.sh -id --hip-clang\n#   Build rocRAND from source\nRUN cd $HOME \\\n && git clone --single-branch -b master-rocm-2.3 https://github.com/ROCmSoftwarePlatform/rocRAND.git \\\n && mkdir rocRAND/build \\\n && cd rocRAND/build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./rocrand*.deb\nRUN cd $HOME \\\n && git clone --single-branch -b master https://github.com/ROCmSoftwarePlatform/MIOpen.git\nRUN cd $HOME/MIOpen \\\n && mkdir build \\\n && cd build \\\n && CXX=/opt/rocm/hip/bin/hipcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -DCMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/ -I/opt/rocm/hcc/include\" -DHALF_INCLUDE_DIR=$HOME/half/include -DCMAKE_BUILD_TYPE=Release .. \\\n && sudo make package -j$( nproc ;)\n#  ##########################\n#   Stage 2 : do the TF build\n#  ##########################\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install wget software-properties-common -y\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   COPY and install llvm built in the previous stage\nRUN rm -rf /opt/rocm/llvm \\\n && mkdir -p /opt/rocm/llvm\nCOPY --from=tool_builder /opt/rocm/llvm/ /opt/rocm/llvm/\n#   COPY and install the ROCDL package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-Device-Libs\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-Device-Libs/\nRUN cd $HOME/pkgs/ROCm-Device-Libs \\\n && dpkg -i *.deb\n#   COPY and install the comgr package built in the previous stage\nRUN mkdir -p $HOME/pkgs/ROCm-CompilerSupport\nCOPY --from=tool_builder /home/rocm-user/ROCm-Device-Libs/build/*.deb $HOME/pkgs/ROCm-CompilerSupport/\nRUN cd $HOME/pkgs/ROCm-CompilerSupport \\\n && dpkg -i *.deb\n#   COPY and install the hcc package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hcc\nCOPY --from=tool_builder /home/rocm-user/hcc/build/*.deb $HOME/pkgs/hcc/\nRUN cd $HOME/pkgs/hcc \\\n && dpkg -i *.deb\n#   COPY and install the HIP package built in the previous stage\nRUN mkdir -p $HOME/pkgs/HIP\nCOPY --from=tool_builder /home/rocm-user/HIP/build/*.deb $HOME/pkgs/HIP/\nRUN cd $HOME/pkgs/HIP \\\n && dpkg -i *.deb\n#   COPY and install the rocBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocBLAS\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/release/*.deb $HOME/pkgs/rocBLAS/\nRUN cd $HOME/pkgs/rocBLAS \\\n && dpkg -i *.deb\n#   COPY and install the hipBLAS package built in the previous stage\nRUN mkdir -p $HOME/pkgs/hipBLAS\nCOPY --from=tool_builder /home/rocm-user/hipBLAS/build/*.deb $HOME/pkgs/hipBLAS/\nRUN cd $HOME/pkgs/hipBLAS \\\n && dpkg -i *.deb\n#   COPY and install the rocFFT package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocFFT\nCOPY --from=tool_builder /home/rocm-user/rocFFT/build/*.deb $HOME/pkgs/rocFFT/\nRUN cd $HOME/pkgs/rocFFT \\\n && dpkg -i *.deb\n#   COPY and install the rocRAND package built in the previous stage\nRUN mkdir -p $HOME/pkgs/rocRAND\nCOPY --from=tool_builder /home/rocm-user/rocBLAS/build/*.deb $HOME/pkgs/rocRAND/\nRUN cd $HOME/pkgs/rocRAND \\\n && dpkg -i *.deb\n#   COPY and install the MIOpenGEMM package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpenGEMM\nCOPY --from=tool_builder /home/rocm-user/MIOpenGEMM/build/*.deb $HOME/pkgs/MIOpenGEMM/\nRUN cd $HOME/pkgs/MIOpenGEMM \\\n && dpkg -i *.deb\n#   COPY and install the MIOpen package built in the previous stage\nRUN mkdir -p $HOME/pkgs/MIOpen\nCOPY --from=tool_builder /home/rocm-user/MIOpen/build/*.deb $HOME/pkgs/MIOpen/\nRUN cd $HOME/pkgs/MIOpen \\\n && dpkg -i *.deb\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Set up environment for hip-clang\nENV HIP_CLANG_PATH=\"/opt/rocm/llvm/bin\"\nENV DEVICE_LIB_PATH=\"/opt/rocm/lib\"\n#   Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#   Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our CUDA configuration.\nENV TF_NEED_ROCM=\"1\"\n","originalDockerfileUglifiedHash":"2989d5482512d911117794cf4fc93c66","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/08dc73a4b5ea7731ba182341374d31ea33fc53d1.dockerfile"}