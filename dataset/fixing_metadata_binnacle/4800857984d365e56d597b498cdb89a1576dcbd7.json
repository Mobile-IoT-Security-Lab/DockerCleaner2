{"seed":4114919896,"processedDockerfileHash":"b7e670eb8abce6165a450ffc1df3cb77","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"ARG NODE_VERSION=${NODE_VERSION}\nFROM phusion/baseimage:latest\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   Bootstrapping the image:\n#  ##########################################################################\nRUN locale-gen en_US.UTF-8\nRUN (apt-get update ;apt-get install --no-install-recommends software-properties-common=0.99.35 -y )\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=12.9ubuntu3 pkg-config=1.8.1-1ubuntu2 libcurl4-openssl-dev=7.88.1-7ubuntu1 libedit-dev=3.1-20221030-2 libssl-dev=3.0.8-1ubuntu1 libxml2-dev=2.9.14+dfsg-1.1build2 xz-utils=5.4.1-0.2 libsqlite3-dev=3.40.1-1 sqlite3=3.40.1-1 git=1:2.39.2-1ubuntu1 curl=7.88.1-7ubuntu1 vim=2:9.0.1000-4ubuntu2 nano=7.2-1 -y --allow-downgrades --allow-remove-essential --allow-change-held-packages ) \\\n && apt-get clean\n#   Source the bash\nRUN . ~/.bashrc\n#  ##########################################################################\n#   Nodedock non-root user:\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN : \\\n && groupadd -g ${PGID} nodedock \\\n && useradd -u ${PUID} -g nodedock -m nodedock -G docker_env \\\n && usermod -p \"*\" nodedock\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\nUSER nodedock\n#   Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG NODE_ENV=development\nENV NODE_ENV=\"${NODE_ENV}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/nodedock/.nvm\"\n#   Install nvm (A Node Version Manager)\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/nodedock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#   Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   YARN:\n#  ##########################################################################\nUSER nodedock\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/nodedock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && (apt-get update ;apt-get install --no-install-recommends postgresql-client=15+248 -y ) ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then (apt-get update ;apt-get install --no-install-recommends zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 libicu-dev=72.1-3ubuntu1 g++=4:12.2.0-3ubuntu1 -y ) ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then (apt-get update ;apt-get install --no-install-recommends poppler-utils=22.12.0-2ubuntu1 ghostscript=10.0.0~dfsg1-0ubuntu1 -y ) ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then (apt-get update ;apt-get install --no-install-recommends jpegoptim=1.4.7-1 optipng=0.7.7-2build1 pngquant=2.17.0-1 gifsicle=1.93-2 -y ) ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then (apt-get update ;apt-get install --no-install-recommends libmagickwand-dev=8:6.9.11.60+dfsg-1.6 imagemagick=8:6.9.11.60+dfsg-1.6 -y ) ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nUSER nodedock\nWORKDIR /var/www\n#   Source the bash before running npm start\nRUN . ~/.bashrc\nARG NPM_START_SCRIPT=start\nENV NPM_START_SCRIPT=\"${NPM_START_SCRIPT}\"\nCMD [\"sh\", \"-c\", \"npm\", \"run\", \"${NPM_START_SCRIPT}\"]\nEXPOSE 9000/tcp\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG NODE_VERSION=${NODE_VERSION}\nFROM phusion/baseimage:latest\n#  Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#  Start as root\nUSER root\n# ##########################################################################\n#  Bootstrapping the image:\n# ##########################################################################\nRUN locale-gen en_US.UTF-8\nRUN apt-get install software-properties-common -y\nRUN apt-get update \\\n && apt-get install build-essential pkg-config libcurl4-openssl-dev libedit-dev libssl-dev libxml2-dev xz-utils libsqlite3-dev sqlite3 git curl vim nano -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \\\n && apt-get clean\n#  Source the bash\nRUN . ~/.bashrc\n# ##########################################################################\n#  Nodedock non-root user:\n# ##########################################################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#  always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && groupadd -g ${PGID} nodedock \\\n && useradd -u ${PUID} -g nodedock -m nodedock -G docker_env \\\n && usermod -p \"*\" nodedock\n# ##########################################################################\n#  Set Timezone\n# ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n# ##########################################################################\n#  Node / NVM:\n# ##########################################################################\nUSER nodedock\n#  Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG NODE_ENV=development\nENV NODE_ENV=\"${NODE_ENV}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/nodedock/.nvm\"\n#  Install nvm (A Node Version Manager)\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#  Add NVM binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/nodedock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#  Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n# ##########################################################################\n#  YARN:\n# ##########################################################################\nUSER nodedock\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc\n#  Add YARN binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/nodedock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc\n# ##########################################################################\n#  pgsql client\n# ##########################################################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install postgresql-client -y ; fi\n# ##########################################################################\n#  Human Language and Character Encoding Support:\n# ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y ; fi\n# ##########################################################################\n#  GHOSTSCRIPT:\n# ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n# ##########################################################################\n#  Image optimizers:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n# ##########################################################################\n#  ImageMagick:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y ; fi\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nUSER root\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nUSER nodedock\nWORKDIR /var/www\n#  Source the bash before running npm start\nRUN . ~/.bashrc\nARG NPM_START_SCRIPT=start\nENV NPM_START_SCRIPT=\"${NPM_START_SCRIPT}\"\nCMD [\"sh\", \"-c\", \"npm\", \"run\", \"${NPM_START_SCRIPT}\"]\nEXPOSE 9000/tcp\n","injectedSmells":[],"originalDockerfileHash":"0ead5f0f2f4b4980907a2482f544b1d8","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG NODE_VERSION=${NODE_VERSION}\nFROM phusion/baseimage:latest\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV LANGUAGE=\"en_US.UTF-8\"\nENV LC_ALL=\"en_US.UTF-8\"\nENV LC_CTYPE=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV TERM=\"xterm\"\n#   Start as root\nUSER root\n#  ##########################################################################\n#   Bootstrapping the image:\n#  ##########################################################################\nRUN locale-gen en_US.UTF-8\nRUN apt-get install software-properties-common -y\nRUN apt-get update \\\n && apt-get install build-essential pkg-config libcurl4-openssl-dev libedit-dev libssl-dev libxml2-dev xz-utils libsqlite3-dev sqlite3 git curl vim nano -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \\\n && apt-get clean\n#   Source the bash\nRUN . ~/.bashrc\n#  ##########################################################################\n#   Nodedock non-root user:\n#  ##########################################################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nENV PUID=\"${PUID}\"\nARG PGID=1000\nENV PGID=\"${PGID}\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN apt-get update -yqq \\\n && groupadd -g ${PGID} nodedock \\\n && useradd -u ${PUID} -g nodedock -m nodedock -G docker_env \\\n && usermod -p \"*\" nodedock\n#  ##########################################################################\n#   Set Timezone\n#  ##########################################################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ##########################################################################\n#   Node / NVM:\n#  ##########################################################################\nUSER nodedock\n#   Check if NVM needs to be installed\nARG NODE_VERSION=node\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG NODE_ENV=development\nENV NODE_ENV=\"${NODE_ENV}\"\nARG INSTALL_NODE=false\nARG NPM_REGISTRY\nENV NPM_REGISTRY=\"${NPM_REGISTRY}\"\nENV NVM_DIR=\"/home/nodedock/.nvm\"\n#   Install nvm (A Node Version Manager)\nRUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && if [ ${NPM_REGISTRY} ] ; then npm config set registry ${NPM_REGISTRY} ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/nodedock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc\n#   Add PATH for node\nENV PATH=\"$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin\"\nRUN if [ ${NPM_REGISTRY} ] ; then . ~/.bashrc \\\n && npm config set registry ${NPM_REGISTRY} ; fi\n#  ##########################################################################\n#   YARN:\n#  ##########################################################################\nUSER nodedock\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/nodedock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nARG INSTALL_PG_CLIENT=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install postgresql-client -y ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nUSER root\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nUSER nodedock\nWORKDIR /var/www\n#   Source the bash before running npm start\nRUN . ~/.bashrc\nARG NPM_START_SCRIPT=start\nENV NPM_START_SCRIPT=\"${NPM_START_SCRIPT}\"\nCMD [\"sh\", \"-c\", \"npm\", \"run\", \"${NPM_START_SCRIPT}\"]\nEXPOSE 9000/tcp\n","originalDockerfileUglifiedHash":"69947c5ef4be972904046e1fe788e4fc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4800857984d365e56d597b498cdb89a1576dcbd7.dockerfile"}