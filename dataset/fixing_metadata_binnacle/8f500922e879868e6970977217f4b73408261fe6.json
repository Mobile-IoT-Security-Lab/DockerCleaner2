{"seed":657279324,"processedDockerfileHash":"29670cbe1d0e93ecce5cdf399a3e0c25","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM armv7/armhf-ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\nENV HOME=\"/root\"\nENV MAKEFLAGS=\"-j4\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu utopic main > /etc/apt/sources.list.d/zfs.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig gcc-mingw-w64 git iptables libapparmor-dev libcap-dev libsqlite3-dev libsystemd-journal-dev mercurial parallel pkg-config python-mock python-pip python-websocket reprepro ruby1.9.1 ruby1.9.1-dev s3cmd=1.1.0* -y\n#   Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install lxc\nENV LXC_VERSION=\"1.1.2\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#   Install Go\nENV GO_VERSION=\"1.4.3\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/arm\"\n#  \tlinux/386 linux/arm \\\n#  \tdarwin/amd64 darwin/386 \\\n#  \tfreebsd/amd64 freebsd/386 freebsd/arm \\\n#  \twindows/amd64 windows/386\n#   (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"7\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   Update this sha when we upgrade to go 1.5.0\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#   Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\n#   ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7\n#   RUN set -x \\\n#  \t&& export GOPATH=\"$(mktemp -d)\" \\\n#  \t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n#  \t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_COMMIT\") \\\n#  \t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH\" \\\n#  \t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n#  \t&& rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"47ab89ec2bd3bddf1221b856ffbaff333edeabb4\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image.sh /docker-frozen-images busybox:latest@8c2e06607696bd4afb3d03b687e361cc43cf8ec1a4a725bc96e39f05ba97dd55 hello-world:frozen@91c95931e552b11604fea91c2f537284149ec32fff0f700a4769cfd31d7696ae jess/unshare@5c9f6ea50341a2a8eb6677527f2bdedbf331ae894a41714fda770fb130f3314d\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone -b v1.0.3 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"e48dbf1b7fc464a9e85fcec450dddf80816b76e0\"\nRUN set -x \\\n && git clone https://github.com/akavel/rsrc.git /go/src/github.com/akavel/rsrc \\\n && cd /go/src/github.com/akavel/rsrc \\\n && git checkout -q $RSRC_COMMIT \\\n && go install -v\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Assemble the full dev environment. This is slow the first time.\n#  docker build -t docker .\n#\n#  # Mount your source in an interactive container for quick testing:\n#  docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#  # Run the test suite:\n#  docker run --privileged docker hack/make.sh test\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM armv7/armhf-ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\nENV HOME=\"/root\"\nENV MAKEFLAGS=\"-j4\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu utopic main > /etc/apt/sources.list.d/zfs.list\n#  Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig gcc-mingw-w64 git iptables libapparmor-dev libcap-dev libsqlite3-dev libsystemd-journal-dev mercurial parallel pkg-config python-mock python-pip python-websocket reprepro ruby1.9.1 ruby1.9.1-dev s3cmd=1.1.0* -y\n#  Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#  see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#  Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#  see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#  Install lxc\nENV LXC_VERSION=\"1.1.2\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#  Install Go\nENV GO_VERSION=\"1.4.3\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#  Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/arm\"\n# \tlinux/386 linux/arm \\\n# \tdarwin/amd64 darwin/386 \\\n# \tfreebsd/amd64 freebsd/386 freebsd/arm \\\n# \twindows/amd64 windows/386\n#  (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"7\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#  This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#  ENV GOFMT_VERSION 1.3.3\n#  RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#  Update this sha when we upgrade to go 1.5.0\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#  Grab Go's cover tool for dead-simple code coverage testing\n#  Grab Go's vet tool for examining go code to find suspicious constructs\n#  and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#  Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#  TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#  Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#  Install notary server\n#  ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7\n#  RUN set -x \\\n# \t&& export GOPATH=\"$(mktemp -d)\" \\\n# \t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n# \t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_COMMIT\") \\\n# \t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH\" \\\n# \t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n# \t&& rm -rf \"$GOPATH\"\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"47ab89ec2bd3bddf1221b856ffbaff333edeabb4\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#  Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#  Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#  Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux\"\n#  Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#  Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image.sh /docker-frozen-images busybox:latest@8c2e06607696bd4afb3d03b687e361cc43cf8ec1a4a725bc96e39f05ba97dd55 hello-world:frozen@91c95931e552b11604fea91c2f537284149ec32fff0f700a4769cfd31d7696ae jess/unshare@5c9f6ea50341a2a8eb6677527f2bdedbf331ae894a41714fda770fb130f3314d\n#  see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#  Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone -b v1.0.3 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#  Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#  Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"e48dbf1b7fc464a9e85fcec450dddf80816b76e0\"\nRUN set -x \\\n && git clone https://github.com/akavel/rsrc.git /go/src/github.com/akavel/rsrc \\\n && cd /go/src/github.com/akavel/rsrc \\\n && git checkout -q $RSRC_COMMIT \\\n && go install -v\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"ab1b49345c0dd70e8eff299a272d495c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Assemble the full dev environment. This is slow the first time.\n#   docker build -t docker .\n#\n#   # Mount your source in an interactive container for quick testing:\n#   docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t docker bash\n#\n#   # Run the test suite:\n#   docker run --privileged docker hack/make.sh test\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM armv7/armhf-ubuntu:14.04\nMAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)\nENV HOME=\"/root\"\nENV MAKEFLAGS=\"-j4\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys E871F18B51E0147C77796AC81196BA81F6B0FC61\nRUN echo deb http://ppa.launchpad.net/zfs-native/stable/ubuntu utopic main > /etc/apt/sources.list.d/zfs.list\n#   Packaged dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools automake bash-completion btrfs-tools build-essential createrepo curl dpkg-sig gcc-mingw-w64 git iptables libapparmor-dev libcap-dev libsqlite3-dev libsystemd-journal-dev mercurial parallel pkg-config python-mock python-pip python-websocket reprepro ruby1.9.1 ruby1.9.1-dev s3cmd=1.1.0* -y\n#   Get lvm2 source for compiling statically\nRUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\n#   see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags\n#   Compile and install lvm2\nRUN cd /usr/local/lvm2 \\\n && ./configure --enable-static_link \\\n && make device-mapper \\\n && make install_device-mapper\n#   see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL\n#   Install lxc\nENV LXC_VERSION=\"1.1.2\"\nRUN mkdir -p /usr/src/lxc \\\n && curl -sSL https://linuxcontainers.org/downloads/lxc/lxc-${LXC_VERSION}.tar.gz | tar -v -C /usr/src/lxc/ -xz --strip-components=1\nRUN cd /usr/src/lxc \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig\n#   Install Go\nENV GO_VERSION=\"1.4.3\"\nRUN curl -sSL https://golang.org/dl/go${GO_VERSION}.src.tar.gz | tar -v -C /usr/local -xz \\\n && mkdir -p /go/bin\nENV PATH=\"/go/bin:/usr/local/go/bin:$PATH\"\nENV GOPATH=\"/go:/go/src/github.com/docker/docker/vendor\"\nRUN cd /usr/local/go/src \\\n && ./make.bash --no-clean 2>&1\n#   Compile Go for cross compilation\nENV DOCKER_CROSSPLATFORMS=\"linux/arm\"\n#  \tlinux/386 linux/arm \\\n#  \tdarwin/amd64 darwin/386 \\\n#  \tfreebsd/amd64 freebsd/386 freebsd/arm \\\n#  \twindows/amd64 windows/386\n#   (set an explicit GOARM of 5 for maximum compatibility)\nENV GOARM=\"7\"\nRUN cd /usr/local/go/src \\\n && set -x \\\n && for platform in $DOCKER_CROSSPLATFORMS; do GOOS=${platform%/*} GOARCH=${platform##*/} ./make.bash --no-clean 2>&1; done\n#   This has been commented out and kept as reference because we don't support compiling with older Go anymore.\n#   ENV GOFMT_VERSION 1.3.3\n#   RUN curl -sSL https://storage.googleapis.com/golang/go${GOFMT_VERSION}.$(go env GOOS)-$(go env GOARCH).tar.gz | tar -C /go/bin -xz --strip-components=2 go/bin/gofmt\n#   Update this sha when we upgrade to go 1.5.0\nENV GO_TOOLS_COMMIT=\"069d2f3bcb68257b627205f0486d6cc69a231ff9\"\n#   Grab Go's cover tool for dead-simple code coverage testing\n#   Grab Go's vet tool for examining go code to find suspicious constructs\n#   and help prevent errors that the compiler might not catch\nRUN git clone https://github.com/golang/tools.git /go/src/golang.org/x/tools \\\n && (cd /go/src/golang.org/x/tools \\\n && git checkout -q $GO_TOOLS_COMMIT ) \\\n && go install -v golang.org/x/tools/cmd/cover \\\n && go install -v golang.org/x/tools/cmd/vet\n#   Grab Go's lint tool\nENV GO_LINT_COMMIT=\"f42f5c1c440621302702cb0741e9d2ca547ae80f\"\nRUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint \\\n && (cd /go/src/github.com/golang/lint \\\n && git checkout -q $GO_LINT_COMMIT ) \\\n && go install -v github.com/golang/lint/golint\n#   TODO replace FPM with some very minimal debhelper stuff\nRUN gem install fpm --version 1.3.2 --no-rdoc --no-ri\n#   Install registry\nENV REGISTRY_COMMIT=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -o /usr/local/bin/registry-v2 github.com/docker/distribution/cmd/registry \\\n && rm -rf \"$GOPATH\"\n#   Install notary server\n#   ENV NOTARY_COMMIT 8e8122eb5528f621afcd4e2854c47302f17392f7\n#   RUN set -x \\\n#  \t&& export GOPATH=\"$(mktemp -d)\" \\\n#  \t&& git clone https://github.com/docker/notary.git \"$GOPATH/src/github.com/docker/notary\" \\\n#  \t&& (cd \"$GOPATH/src/github.com/docker/notary\" && git checkout -q \"$NOTARY_COMMIT\") \\\n#  \t&& GOPATH=\"$GOPATH/src/github.com/docker/notary/Godeps/_workspace:$GOPATH\" \\\n#  \t\tgo build -o /usr/local/bin/notary-server github.com/docker/notary/cmd/notary-server \\\n#  \t&& rm -rf \"$GOPATH\"\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"47ab89ec2bd3bddf1221b856ffbaff333edeabb4\"\nRUN git clone https://github.com/docker/docker-py.git /docker-py \\\n && cd /docker-py \\\n && git checkout -q $DOCKER_PY_COMMIT \\\n && pip install -r test-requirements.txt\n#   Setup s3cmd config\nRUN { echo '[default]' ;echo 'access_key=$AWS_ACCESS_KEY' ;echo 'secret_key=$AWS_SECRET_KEY' ; } > ~/.s3cfg\n#   Set user.email so crosbymichael's in-container merge commits go smoothly\nRUN git config --global user.email 'docker-dummy@example.com'\n#   Add an unprivileged user to be used for tests which need it\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\nVOLUME /var/lib/docker\nWORKDIR /go/src/github.com/docker/docker\nENV DOCKER_BUILDTAGS=\"apparmor selinux\"\n#   Let us use a .bashrc file\nRUN ln -sfv $PWD/.bashrc ~/.bashrc\n#   Register Docker's bash completion.\nRUN ln -sv $PWD/contrib/completion/bash/docker /etc/bash_completion.d/docker\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image.sh /go/src/github.com/docker/docker/contrib/\nRUN ./contrib/download-frozen-image.sh /docker-frozen-images busybox:latest@8c2e06607696bd4afb3d03b687e361cc43cf8ec1a4a725bc96e39f05ba97dd55 hello-world:frozen@91c95931e552b11604fea91c2f537284149ec32fff0f700a4769cfd31d7696ae jess/unshare@5c9f6ea50341a2a8eb6677527f2bdedbf331ae894a41714fda770fb130f3314d\n#   see also \"hack/make/.ensure-frozen-images\" (which needs to be updated any time this list is)\n#   Download man page generator\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone -b v1.0.3 https://github.com/cpuguy83/go-md2man.git \"$GOPATH/src/github.com/cpuguy83/go-md2man\" \\\n && git clone -b v1.4 https://github.com/russross/blackfriday.git \"$GOPATH/src/github.com/russross/blackfriday\" \\\n && go get -v -d github.com/cpuguy83/go-md2man \\\n && go build -v -o /usr/local/bin/go-md2man github.com/cpuguy83/go-md2man \\\n && rm -rf \"$GOPATH\"\n#   Download toml validator\nENV TOMLV_COMMIT=\"9baf8a8a9f2ed20a8e54160840c492f937eeaf9a\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/BurntSushi/toml.git \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && (cd \"$GOPATH/src/github.com/BurntSushi/toml\" \\\n && git checkout -q \"$TOMLV_COMMIT\" ) \\\n && go build -v -o /usr/local/bin/tomlv github.com/BurntSushi/toml/cmd/tomlv \\\n && rm -rf \"$GOPATH\"\n#   Build/install the tool for embedding resources in Windows binaries\nENV RSRC_COMMIT=\"e48dbf1b7fc464a9e85fcec450dddf80816b76e0\"\nRUN set -x \\\n && git clone https://github.com/akavel/rsrc.git /go/src/github.com/akavel/rsrc \\\n && cd /go/src/github.com/akavel/rsrc \\\n && git checkout -q $RSRC_COMMIT \\\n && go install -v\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"638c1eba2f1fac09830db389f6f19469","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8f500922e879868e6970977217f4b73408261fe6.dockerfile"}