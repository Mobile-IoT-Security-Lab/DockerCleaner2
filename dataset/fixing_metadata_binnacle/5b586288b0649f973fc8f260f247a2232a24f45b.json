{"seed":2417098954,"processedDockerfileHash":"847075c89ba7df98d7ec3dc5bda36548","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:xenial\n#   This DockerFile is looked after by\nMAINTAINER Tim Greaves <tim.greaves@imperial.ac.uk>\n#   Add the ubuntu-toolchain-r test ppa\nRUN echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main\" > /etc/apt/sources.list.d/ubuntu-toolchain-r-ppa-xenial.list\n#   Import the Launchpad PPA public key\nRUN gpg --keyserver keyserver.ubuntu.com --recv 1E9377A2BA9EF27F\nRUN gpg --export --armor BA9EF27F | apt-key add -\n#   Ensure UTF-8 environment is correct for documentation builds\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\n#   Use bash, not dash, or later conditionals fail\nRUN echo \"dash dash/sh boolean false\" | debconf-set-selections\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash\n#   Upgrade to the most recent package set\nRUN :\nRUN apt-get -y dist-upgrade\n#   Needed for the conda and devito installs later\nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 bzip2=1.0.6-8ubuntu0.2 git=1:2.7.4-0ubuntu1.10 make=4.1-6 -y )\n#   Default gcc version to install\nARG gccVersion=8\nENV DEVITO_ARCH=\"gcc-$gccVersion\"\n#   Set Yask variables in case they are needed\nENV YC_CXX=\"g++-$gccVersion\"\n#   Default devito install method\nARG installWithPip=false\nENV testWithPip=\"$installWithPip\"\n#   Use a different back-end?\nARG DEVITO_BACKEND=none\nENV DEVITO_BACKEND=\"$DEVITO_BACKEND\"\n#   Use OpenMP?\nARG DEVITO_OPENMP=0\nENV DEVITO_OPENMP=\"$DEVITO_OPENMP\"\nENV OMP_NUM_THREADS=\"2\"\n#   Use MPI?\nARG MPI_INSTALL=1\nENV MPI_INSTALL=\"$MPI_INSTALL\"\n#   Run examples?\nARG RUN_EXAMPLES='false'\nENV RUN_EXAMPLES=\"$RUN_EXAMPLES\"\n#   Ensure a non-interactive matplotlib backend\nENV MPLBACKEND=\"agg\"\n#   Install gcc/g++\nRUN (apt-get update ;apt-get install --no-install-recommends gcc-$gccVersion g++-$gccVersion -y )\n#   Set up alternatives\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$gccVersion 10\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$gccVersion 10\nRUN update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-$gccVersion 10\nRUN update-alternatives --install /usr/bin/nm nm /usr/bin/gcc-nm-$gccVersion 10\nRUN update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-$gccVersion 10\nRUN update-alternatives --install /usr/bin/ranlib ranlib /usr/bin/gcc-ranlib-$gccVersion 10\nRUN if [ -f /usr/bin/gcov-dump-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$gccVersion 10 ; fi\nRUN if [ -f /usr/bin/gcov-tool-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$gccVersion 10 ; fi\n#   Install MPI\nRUN if [ \"$MPI_INSTALL\" == \"1\" ] ; then (apt-get update ;apt-get install --no-install-recommends mpich=3.2-6build1 libmpich-dev=3.2-6build1 -y -q ) ; fi\n#   Set up conda\nRUN wget --no-verbose https://repo.continuum.io/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O /tmp/miniconda.sh\nRUN bash /tmp/miniconda.sh -b -p /usr/local/miniconda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\nRUN conda config --set always_yes yes --set changeps1 no\nRUN conda update -q conda\nRUN adduser --disabled-password --gecos \"\" devito\nCOPY . /home/devito\nRUN chown -R devito /home/devito\nUSER devito\nWORKDIR /home/devito\nRUN if [ $installWithPip == \"true\" ] ; then python setup.py install --user ;if [ $MPI_INSTALL == '1' ] ; then pip install --user -e .[extras] ; fi ; else conda env create -q -f environment.yml ;source activate devito ;echo $PATH ;pip install -e . ;if [ $MPI_INSTALL == '1' ] ; then pip install -r requirements-optional.txt ; fi ;pip install pytest-xdist==3.2.1 ;if [ $DEVITO_BACKEND == \"yask\" ] ; then conda install swig ;git clone https://github.com/opesci/yask.git /tmp/yask ;pushd /tmp/yask ;make compiler-api ;pip install -e . ;popd ; fi ;if [ $RUN_EXAMPLES == \"true\" ] ; then bash scripts/create_ipyparallel_mpi_profile.sh ; fi ; fi\nENTRYPOINT /home/devito/azure-pipelines.py\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:xenial\n#  This DockerFile is looked after by\nMAINTAINER Tim Greaves <tim.greaves@imperial.ac.uk>\n#  Add the ubuntu-toolchain-r test ppa\nRUN echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main\" > /etc/apt/sources.list.d/ubuntu-toolchain-r-ppa-xenial.list\n#  Import the Launchpad PPA public key\nRUN gpg --keyserver keyserver.ubuntu.com --recv 1E9377A2BA9EF27F\nRUN gpg --export --armor BA9EF27F | apt-key add -\n#  Ensure UTF-8 environment is correct for documentation builds\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\n#  Use bash, not dash, or later conditionals fail\nRUN echo \"dash dash/sh boolean false\" | debconf-set-selections\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash\n#  Upgrade to the most recent package set\nRUN apt-get update\nRUN apt-get -y dist-upgrade\n#  Needed for the conda and devito installs later\nRUN apt-get install wget bzip2 git make -y\n#  Default gcc version to install\nARG gccVersion=8\nENV DEVITO_ARCH=\"gcc-$gccVersion\"\n#  Set Yask variables in case they are needed\nENV YC_CXX=\"g++-$gccVersion\"\n#  Default devito install method\nARG installWithPip=false\nENV testWithPip=\"$installWithPip\"\n#  Use a different back-end?\nARG DEVITO_BACKEND=none\nENV DEVITO_BACKEND=\"$DEVITO_BACKEND\"\n#  Use OpenMP?\nARG DEVITO_OPENMP=0\nENV DEVITO_OPENMP=\"$DEVITO_OPENMP\"\nENV OMP_NUM_THREADS=\"2\"\n#  Use MPI?\nARG MPI_INSTALL=1\nENV MPI_INSTALL=\"$MPI_INSTALL\"\n#  Run examples?\nARG RUN_EXAMPLES='false'\nENV RUN_EXAMPLES=\"$RUN_EXAMPLES\"\n#  Ensure a non-interactive matplotlib backend\nENV MPLBACKEND=\"agg\"\n#  Install gcc/g++\nRUN apt-get install gcc-$gccVersion g++-$gccVersion -y\n#  Set up alternatives\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$gccVersion 10\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$gccVersion 10\nRUN update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-$gccVersion 10\nRUN update-alternatives --install /usr/bin/nm nm /usr/bin/gcc-nm-$gccVersion 10\nRUN update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-$gccVersion 10\nRUN update-alternatives --install /usr/bin/ranlib ranlib /usr/bin/gcc-ranlib-$gccVersion 10\nRUN if [ -f /usr/bin/gcov-dump-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$gccVersion 10 ; fi\nRUN if [ -f /usr/bin/gcov-tool-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$gccVersion 10 ; fi\n#  Install MPI\nRUN if [ \"$MPI_INSTALL\" == \"1\" ] ; then apt-get install mpich libmpich-dev -y -q ; fi\n#  Set up conda\nRUN wget --no-verbose https://repo.continuum.io/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O /tmp/miniconda.sh\nRUN bash /tmp/miniconda.sh -b -p /usr/local/miniconda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\nRUN conda config --set always_yes yes --set changeps1 no\nRUN conda update -q conda\nRUN adduser --disabled-password --gecos \"\" devito\nCOPY . /home/devito\nRUN chown -R devito /home/devito\nUSER devito\nWORKDIR /home/devito\nRUN if [ $installWithPip == \"true\" ] ; then python setup.py install --user ;if [ $MPI_INSTALL == '1' ] ; then pip install --user -e .[extras] ; fi ; else conda env create -q -f environment.yml ;source activate devito ;echo $PATH ;pip install -e . ;if [ $MPI_INSTALL == '1' ] ; then pip install -r requirements-optional.txt ; fi ;pip install pytest-xdist ;if [ $DEVITO_BACKEND == \"yask\" ] ; then conda install swig ;git clone https://github.com/opesci/yask.git /tmp/yask ;pushd /tmp/yask ;make compiler-api ;pip install -e . ;popd ; fi ;if [ $RUN_EXAMPLES == \"true\" ] ; then bash scripts/create_ipyparallel_mpi_profile.sh ; fi ; fi\nENTRYPOINT /home/devito/azure-pipelines.py\n","injectedSmells":[],"originalDockerfileHash":"2785f9457799a1d710b3b1e4901200ca","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:xenial\n#   This DockerFile is looked after by\nMAINTAINER Tim Greaves <tim.greaves@imperial.ac.uk>\n#   Add the ubuntu-toolchain-r test ppa\nRUN echo \"deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main\" > /etc/apt/sources.list.d/ubuntu-toolchain-r-ppa-xenial.list\n#   Import the Launchpad PPA public key\nRUN gpg --keyserver keyserver.ubuntu.com --recv 1E9377A2BA9EF27F\nRUN gpg --export --armor BA9EF27F | apt-key add -\n#   Ensure UTF-8 environment is correct for documentation builds\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\n#   Use bash, not dash, or later conditionals fail\nRUN echo \"dash dash/sh boolean false\" | debconf-set-selections\nRUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash\n#   Upgrade to the most recent package set\nRUN apt-get update\nRUN apt-get -y dist-upgrade\n#   Needed for the conda and devito installs later\nRUN apt-get install wget bzip2 git make -y\n#   Default gcc version to install\nARG gccVersion=8\nENV DEVITO_ARCH=\"gcc-$gccVersion\"\n#   Set Yask variables in case they are needed\nENV YC_CXX=\"g++-$gccVersion\"\n#   Default devito install method\nARG installWithPip=false\nENV testWithPip=\"$installWithPip\"\n#   Use a different back-end?\nARG DEVITO_BACKEND=none\nENV DEVITO_BACKEND=\"$DEVITO_BACKEND\"\n#   Use OpenMP?\nARG DEVITO_OPENMP=0\nENV DEVITO_OPENMP=\"$DEVITO_OPENMP\"\nENV OMP_NUM_THREADS=\"2\"\n#   Use MPI?\nARG MPI_INSTALL=1\nENV MPI_INSTALL=\"$MPI_INSTALL\"\n#   Run examples?\nARG RUN_EXAMPLES='false'\nENV RUN_EXAMPLES=\"$RUN_EXAMPLES\"\n#   Ensure a non-interactive matplotlib backend\nENV MPLBACKEND=\"agg\"\n#   Install gcc/g++\nRUN apt-get install gcc-$gccVersion g++-$gccVersion -y\n#   Set up alternatives\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-$gccVersion 10\nRUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$gccVersion 10\nRUN update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-$gccVersion 10\nRUN update-alternatives --install /usr/bin/nm nm /usr/bin/gcc-nm-$gccVersion 10\nRUN update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-$gccVersion 10\nRUN update-alternatives --install /usr/bin/ranlib ranlib /usr/bin/gcc-ranlib-$gccVersion 10\nRUN if [ -f /usr/bin/gcov-dump-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$gccVersion 10 ; fi\nRUN if [ -f /usr/bin/gcov-tool-$gccVersion ] ; then update-alternatives --install /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$gccVersion 10 ; fi\n#   Install MPI\nRUN if [ \"$MPI_INSTALL\" == \"1\" ] ; then apt-get install mpich libmpich-dev -y -q ; fi\n#   Set up conda\nRUN wget --no-verbose https://repo.continuum.io/miniconda/Miniconda3-4.5.4-Linux-x86_64.sh -O /tmp/miniconda.sh\nRUN bash /tmp/miniconda.sh -b -p /usr/local/miniconda\nENV PATH=\"/usr/local/miniconda/bin:$PATH\"\nRUN conda config --set always_yes yes --set changeps1 no\nRUN conda update -q conda\nRUN adduser --disabled-password --gecos \"\" devito\nCOPY . /home/devito\nRUN chown -R devito /home/devito\nUSER devito\nWORKDIR /home/devito\nRUN if [ $installWithPip == \"true\" ] ; then python setup.py install --user ;if [ $MPI_INSTALL == '1' ] ; then pip install --user -e .[extras] ; fi ; else conda env create -q -f environment.yml ;source activate devito ;echo $PATH ;pip install -e . ;if [ $MPI_INSTALL == '1' ] ; then pip install -r requirements-optional.txt ; fi ;pip install pytest-xdist ;if [ $DEVITO_BACKEND == \"yask\" ] ; then conda install swig ;git clone https://github.com/opesci/yask.git /tmp/yask ;pushd /tmp/yask ;make compiler-api ;pip install -e . ;popd ; fi ;if [ $RUN_EXAMPLES == \"true\" ] ; then bash scripts/create_ipyparallel_mpi_profile.sh ; fi ; fi\nENTRYPOINT /home/devito/azure-pipelines.py\n","originalDockerfileUglifiedHash":"3d3a9c90c2a7f24244bf4997b0daa24c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5b586288b0649f973fc8f260f247a2232a24f45b.dockerfile"}