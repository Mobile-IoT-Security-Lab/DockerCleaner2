{"seed":3401874913,"processedDockerfileHash":"f03378e2fcc2d0fe43bf2c07ef404558","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Highly-Optimized Docker Image of pyLoad (alpine variant)\n#   AUTHOR: vuolter\n#        ____________\n#     _ /       |    \\ ___________ _ _______________ _ ___ _______________\n#    /  |    ___/    |   _ __ _  _| |   ___  __ _ __| |   \\\\    ___  ___ _\\\n#   /   \\___/  ______/  | '_ \\ || | |__/ _ \\/ _` / _` |    \\\\  / _ \\/ _ `/ \\\n#   \\       |   o|      | .__/\\_, |____\\___/\\__,_\\__,_|    // /_//_/\\_, /  /\n#    \\______\\    /______|_|___|__/________________________//______ /___/__/\n#            \\  /\n#             \\/\nARG ALPINE_RELEASE=\"3.9\"\nFROM lsiobase/alpine:$ALPINE_RELEASE AS builder\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG APK_PACKAGES=\"python3 openssl\"\nARG PIP_PACKAGES=\"pip setuptools wheel\"\nRUN echo \"**** install Python ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && ln -sf python3 /usr/bin/python \\\n && echo \"**** install pip ****\" \\\n && pip3 install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && ln -sf pip3 /usr/bin/pip\nFROM builder AS wheels_builder\nCOPY setup.cfg /source/setup.cfg\nWORKDIR /wheels\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"gcc musl-dev python3-dev libffi-dev openssl-dev jpeg-dev zlib-dev libxml2-dev libxslt-dev\"\nRUN echo \"**** install build packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** build pyLoad dependencies ****\" \\\n && python -c \"import configparser as cp; c = cp.ConfigParser(); c.read('/source/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['extra'])\" | xargs pip wheel --wheel-dir=.\nFROM builder AS source_builder\nCOPY . /source\nWORKDIR /source\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG PIP_PACKAGES=\"Babel Jinja2\"\nRUN echo \"**** build pyLoad locales ****\" \\\n && pip install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && python setup.py build_locale\nFROM builder AS package_builder\nCOPY --from=wheels_builder /wheels /wheels\nCOPY --from=source_builder /source /source\nWORKDIR /package\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nRUN echo \"**** build pyLoad package ****\" \\\n && pip install $PIP_INSTALL_OPTIONS /source[extra] --find-links=/wheels --no-index --prefix=.\nFROM builder\nLABEL version=\"1.0\" \\\n      description=\"The free and open-source Download Manager written in pure Python\" \\\n      maintainer=\"vuolter@gmail.com\"\n#   Set Python to force stdin, stdout and stderr to be totally unbuffered.\nENV PYTHONUNBUFFERED=\"1\"\n#   Stop if any script (fix-attrs or cont-init) has failed.\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=\"2\"\n#   Set Python to use UTF-8 encoding rather than ASCII.\nENV LANG=\"C.UTF-8\"\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"sqlite tesseract-ocr unrar\"\nARG TEMP_PATHS=\"/root/.cache /tmp/* /var/tmp/*\"\nRUN echo \"**** install binary packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** create s6 fix-attr script ****\" \\\n && echo -e \"/config true abc 0644 0755\\n /downloads false abc 0644 0755\" > /etc/fix-attrs.d/10-run \\\n && echo \"**** create s6 service script ****\" \\\n && mkdir -p /etc/services.d/pyload \\\n && echo -e \"#!/usr/bin/with-contenv bash\\n\\n umask 022\\n exec s6-setuidgid abc pyload --userdir /config --storagedir /downloads\" > /etc/services.d/pyload/run \\\n && echo \"**** cleanup ****\" \\\n && rm -rf $TEMP_PATHS \\\n && echo \"**** finalize pyLoad ****\"\nCOPY --from=package_builder /package /usr/local\nEXPOSE 8001/tcp 9666/tcp\nVOLUME /config /downloads\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Highly-Optimized Docker Image of pyLoad (alpine variant)\n#  AUTHOR: vuolter\n#       ____________\n#    _ /       |    \\ ___________ _ _______________ _ ___ _______________\n#   /  |    ___/    |   _ __ _  _| |   ___  __ _ __| |   \\\\    ___  ___ _\\\n#  /   \\___/  ______/  | '_ \\ || | |__/ _ \\/ _` / _` |    \\\\  / _ \\/ _ `/ \\\n#  \\       |   o|      | .__/\\_, |____\\___/\\__,_\\__,_|    // /_//_/\\_, /  /\n#   \\______\\    /______|_|___|__/________________________//______ /___/__/\n#           \\  /\n#            \\/\nARG ALPINE_RELEASE=\"3.9\"\nFROM lsiobase/alpine:$ALPINE_RELEASE AS builder\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG APK_PACKAGES=\"python3 openssl\"\nARG PIP_PACKAGES=\"pip setuptools wheel\"\nRUN echo \"**** install Python ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && ln -sf python3 /usr/bin/python \\\n && echo \"**** install pip ****\" \\\n && pip3 install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && ln -sf pip3 /usr/bin/pip\nFROM builder AS wheels_builder\nCOPY setup.cfg /source/setup.cfg\nWORKDIR /wheels\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"gcc musl-dev python3-dev libffi-dev openssl-dev jpeg-dev zlib-dev libxml2-dev libxslt-dev\"\nRUN echo \"**** install build packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** build pyLoad dependencies ****\" \\\n && python -c \"import configparser as cp; c = cp.ConfigParser(); c.read('/source/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['extra'])\" | xargs pip wheel --wheel-dir=.\nFROM builder AS source_builder\nCOPY . /source\nWORKDIR /source\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG PIP_PACKAGES=\"Babel Jinja2\"\nRUN echo \"**** build pyLoad locales ****\" \\\n && pip install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && python setup.py build_locale\nFROM builder AS package_builder\nCOPY --from=wheels_builder /wheels /wheels\nCOPY --from=source_builder /source /source\nWORKDIR /package\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nRUN echo \"**** build pyLoad package ****\" \\\n && pip install $PIP_INSTALL_OPTIONS /source[extra] --find-links=/wheels --no-index --prefix=.\nFROM builder\nLABEL version=\"1.0\" \\\n      description=\"The free and open-source Download Manager written in pure Python\" \\\n      maintainer=\"vuolter@gmail.com\"\n#  Set Python to force stdin, stdout and stderr to be totally unbuffered.\nENV PYTHONUNBUFFERED=\"1\"\n#  Stop if any script (fix-attrs or cont-init) has failed.\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=\"2\"\n#  Set Python to use UTF-8 encoding rather than ASCII.\nENV LANG=\"C.UTF-8\"\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"sqlite tesseract-ocr unrar\"\nARG TEMP_PATHS=\"/root/.cache /tmp/* /var/tmp/*\"\nRUN echo \"**** install binary packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** create s6 fix-attr script ****\" \\\n && echo -e \"/config true abc 0644 0755\\n /downloads false abc 0644 0755\" > /etc/fix-attrs.d/10-run \\\n && echo \"**** create s6 service script ****\" \\\n && mkdir -p /etc/services.d/pyload \\\n && echo -e \"#!/usr/bin/with-contenv bash\\n\\n umask 022\\n exec s6-setuidgid abc pyload --userdir /config --storagedir /downloads\" > /etc/services.d/pyload/run \\\n && echo \"**** cleanup ****\" \\\n && rm -rf $TEMP_PATHS \\\n && echo \"**** finalize pyLoad ****\"\nCOPY --from=package_builder /package /usr/local\nEXPOSE 8001/tcp 9666/tcp\nVOLUME /config /downloads\n","injectedSmells":[],"originalDockerfileHash":"5e33e2d25caa9355f9cab1d1cac47de1","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Highly-Optimized Docker Image of pyLoad (alpine variant)\n#   AUTHOR: vuolter\n#        ____________\n#     _ /       |    \\ ___________ _ _______________ _ ___ _______________\n#    /  |    ___/    |   _ __ _  _| |   ___  __ _ __| |   \\\\    ___  ___ _\\\n#   /   \\___/  ______/  | '_ \\ || | |__/ _ \\/ _` / _` |    \\\\  / _ \\/ _ `/ \\\n#   \\       |   o|      | .__/\\_, |____\\___/\\__,_\\__,_|    // /_//_/\\_, /  /\n#    \\______\\    /______|_|___|__/________________________//______ /___/__/\n#            \\  /\n#             \\/\nARG ALPINE_RELEASE=\"3.9\"\nFROM lsiobase/alpine:$ALPINE_RELEASE AS builder\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG APK_PACKAGES=\"python3 openssl\"\nARG PIP_PACKAGES=\"pip setuptools wheel\"\nRUN echo \"**** install Python ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && ln -sf python3 /usr/bin/python \\\n && echo \"**** install pip ****\" \\\n && pip3 install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && ln -sf pip3 /usr/bin/pip\nFROM builder AS wheels_builder\nCOPY setup.cfg /source/setup.cfg\nWORKDIR /wheels\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"gcc musl-dev python3-dev libffi-dev openssl-dev jpeg-dev zlib-dev libxml2-dev libxslt-dev\"\nRUN echo \"**** install build packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** build pyLoad dependencies ****\" \\\n && python -c \"import configparser as cp; c = cp.ConfigParser(); c.read('/source/setup.cfg'); print(c['options']['install_requires'] + c['options.extras_require']['extra'])\" | xargs pip wheel --wheel-dir=.\nFROM builder AS source_builder\nCOPY . /source\nWORKDIR /source\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nARG PIP_PACKAGES=\"Babel Jinja2\"\nRUN echo \"**** build pyLoad locales ****\" \\\n && pip install $PIP_INSTALL_OPTIONS $PIP_PACKAGES \\\n && python setup.py build_locale\nFROM builder AS package_builder\nCOPY --from=wheels_builder /wheels /wheels\nCOPY --from=source_builder /source /source\nWORKDIR /package\nARG PIP_INSTALL_OPTIONS=\"--disable-pip-version-check --no-cache-dir --no-compile --upgrade\"\nRUN echo \"**** build pyLoad package ****\" \\\n && pip install $PIP_INSTALL_OPTIONS /source[extra] --find-links=/wheels --no-index --prefix=.\nFROM builder\nLABEL version=\"1.0\" \\\n      description=\"The free and open-source Download Manager written in pure Python\" \\\n      maintainer=\"vuolter@gmail.com\"\n#   Set Python to force stdin, stdout and stderr to be totally unbuffered.\nENV PYTHONUNBUFFERED=\"1\"\n#   Stop if any script (fix-attrs or cont-init) has failed.\nENV S6_BEHAVIOUR_IF_STAGE2_FAILS=\"2\"\n#   Set Python to use UTF-8 encoding rather than ASCII.\nENV LANG=\"C.UTF-8\"\nARG APK_INSTALL_OPTIONS=\"--no-cache\"\nARG APK_PACKAGES=\"sqlite tesseract-ocr unrar\"\nARG TEMP_PATHS=\"/root/.cache /tmp/* /var/tmp/*\"\nRUN echo \"**** install binary packages ****\" \\\n && apk add $APK_INSTALL_OPTIONS $APK_PACKAGES \\\n && echo \"**** create s6 fix-attr script ****\" \\\n && echo -e \"/config true abc 0644 0755\\n /downloads false abc 0644 0755\" > /etc/fix-attrs.d/10-run \\\n && echo \"**** create s6 service script ****\" \\\n && mkdir -p /etc/services.d/pyload \\\n && echo -e \"#!/usr/bin/with-contenv bash\\n\\n umask 022\\n exec s6-setuidgid abc pyload --userdir /config --storagedir /downloads\" > /etc/services.d/pyload/run \\\n && echo \"**** cleanup ****\" \\\n && rm -rf $TEMP_PATHS \\\n && echo \"**** finalize pyLoad ****\"\nCOPY --from=package_builder /package /usr/local\nEXPOSE 8001/tcp 9666/tcp\nVOLUME /config /downloads\n","originalDockerfileUglifiedHash":"07f1a84b889bd4e384dc9f25847b1e90","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cc14fe66342902ab9138503f373ac2ff86269bae.dockerfile"}