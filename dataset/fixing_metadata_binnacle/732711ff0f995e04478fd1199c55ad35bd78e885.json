{"seed":1581471492,"processedDockerfileHash":"124f0b8bafa48e241715176acccb16db","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   Start with the latest version of the Debian Docker container\nFROM debian:stretch\nRUN ls -la\n#   Fetch and install all outstanding updates\nRUN : \\\n && apt-get -y upgrade\n#   Install wget git cmake xz-utils\nRUN (apt-get update ;apt-get install --no-install-recommends wget=1.18-5+deb9u3 git=1:2.11.0-3+deb9u7 cmake=3.7.2-1 xz-utils=5.2.2-1.2+deb9u1 -y )\n#   Add a non-root user\nRUN useradd -d /home/builder -ms /bin/bash -G sudo -p builder builder\n#   Switch to new user\nUSER builder\nWORKDIR /home/builder\n#  WORKDIR /root\n#   Don't use RPiTools because gcc is old, use linaro's toolchain\n#  RUN mkdir RPiTools\n#  WORKDIR RPiTools\n#  RUN git clone https://github.com/raspberrypi/tools.git\nRUN mkdir RPiBuild\nENV WORK_ROOT=\"/home/builder/RPiBuild\"\nWORKDIR ${WORK_ROOT}\nRUN wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\nRUN tar -xvf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\n#   Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n#   Download OpenSSL source and expand it\nRUN wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz\nRUN tar -xvf openssl-1.1.0f.tar.gz\n#   Build OpenSSL\nWORKDIR openssl-1.1.0f\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR ..\n#   Download cURL source and expand it\nRUN wget http://curl.haxx.se/download/curl-7.60.0.tar.gz\nRUN tar -xvf curl-7.60.0.tar.gz\n#   Build cURL\n#   we need to set the path for openssl with --with-ssl=...\nWORKDIR curl-7.60.0\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR ..\n#   Download the Linux utilities for libuuid and expand it\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32-rc2.tar.gz\nRUN tar -xvf util-linux-2.32-rc2.tar.gz\n#   Build uuid\nWORKDIR util-linux-2.32-rc2\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR ..\n#   clone azure \nRUN git clone --recursive https://github.com/Azure/azure-iot-sdk-c.git\nWORKDIR azure-iot-sdk-c\n#   Create a working directory for the cmake operations\nRUN mkdir cmake\nWORKDIR cmake\n#   Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\n#   Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} ..\nRUN make -j 2\nRUN make install\n#   or RUN cmake --build .\nWORKDIR ../..\nCMD [\"/bin/bash\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Start with the latest version of the Debian Docker container\nFROM debian:stretch\nRUN ls -la\n#  Fetch and install all outstanding updates\nRUN apt-get update \\\n && apt-get -y upgrade\n#  Install wget git cmake xz-utils\nRUN apt-get install wget git cmake xz-utils -y\n#  Add a non-root user\nRUN useradd -d /home/builder -ms /bin/bash -G sudo -p builder builder\n#  Switch to new user\nUSER builder\nWORKDIR /home/builder\n# WORKDIR /root\n#  Don't use RPiTools because gcc is old, use linaro's toolchain\n# RUN mkdir RPiTools\n# WORKDIR RPiTools\n# RUN git clone https://github.com/raspberrypi/tools.git\nRUN mkdir RPiBuild\nENV WORK_ROOT=\"/home/builder/RPiBuild\"\nWORKDIR ${WORK_ROOT}\nRUN wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\nRUN tar -xvf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\n#  Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n#  Download OpenSSL source and expand it\nRUN wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz\nRUN tar -xvf openssl-1.1.0f.tar.gz\n#  Build OpenSSL\nWORKDIR openssl-1.1.0f\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR ..\n#  Download cURL source and expand it\nRUN wget http://curl.haxx.se/download/curl-7.60.0.tar.gz\nRUN tar -xvf curl-7.60.0.tar.gz\n#  Build cURL\n#  we need to set the path for openssl with --with-ssl=...\nWORKDIR curl-7.60.0\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR ..\n#  Download the Linux utilities for libuuid and expand it\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32-rc2.tar.gz\nRUN tar -xvf util-linux-2.32-rc2.tar.gz\n#  Build uuid\nWORKDIR util-linux-2.32-rc2\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR ..\n#  clone azure \nRUN git clone --recursive https://github.com/Azure/azure-iot-sdk-c.git\nWORKDIR azure-iot-sdk-c\n#  Create a working directory for the cmake operations\nRUN mkdir cmake\nWORKDIR cmake\n#  Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\n#  Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} ..\nRUN make -j 2\nRUN make install\n#  or RUN cmake --build .\nWORKDIR ../..\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"880131222a2c5715de3f5e975e435704","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Start with the latest version of the Debian Docker container\nFROM debian:stretch\nRUN ls -la\n#   Fetch and install all outstanding updates\nRUN apt-get update \\\n && apt-get -y upgrade\n#   Install wget git cmake xz-utils\nRUN apt-get install wget git cmake xz-utils -y\n#   Add a non-root user\nRUN useradd -d /home/builder -ms /bin/bash -G sudo -p builder builder\n#   Switch to new user\nUSER builder\nWORKDIR /home/builder\n#  WORKDIR /root\n#   Don't use RPiTools because gcc is old, use linaro's toolchain\n#  RUN mkdir RPiTools\n#  WORKDIR RPiTools\n#  RUN git clone https://github.com/raspberrypi/tools.git\nRUN mkdir RPiBuild\nENV WORK_ROOT=\"/home/builder/RPiBuild\"\nWORKDIR ${WORK_ROOT}\nRUN wget https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\nRUN tar -xvf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz\n#   Set up environment variables for builds\nENV TOOLCHAIN_ROOT=\"${WORK_ROOT}/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf\"\nENV TOOLCHAIN_SYSROOT=\"${TOOLCHAIN_ROOT}\"\nENV TOOLCHAIN_EXES=\"${TOOLCHAIN_SYSROOT}/bin\"\nENV TOOLCHAIN_NAME=\"arm-linux-gnueabihf\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV AR=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ar\"\nENV AS=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-as\"\nENV CC=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc\"\nENV LD=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-ld\"\nENV NM=\"${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-nm\"\nENV LDFLAGS=\"-L${TOOLCHAIN_SYSROOT}/usr/lib\"\nENV LIBS=\"-lssl -lcrypto -ldl -lpthread\"\nENV TOOLCHAIN_PREFIX=\"${TOOLCHAIN_SYSROOT}/usr\"\nENV STAGING_DIR=\"${TOOLCHAIN_SYSROOT}\"\n#   Download OpenSSL source and expand it\nRUN wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz\nRUN tar -xvf openssl-1.1.0f.tar.gz\n#   Build OpenSSL\nWORKDIR openssl-1.1.0f\nRUN ./Configure linux-generic32 shared --prefix=${TOOLCHAIN_PREFIX} --openssldir=${TOOLCHAIN_PREFIX}\nRUN make\nRUN make install\nWORKDIR ..\n#   Download cURL source and expand it\nRUN wget http://curl.haxx.se/download/curl-7.60.0.tar.gz\nRUN tar -xvf curl-7.60.0.tar.gz\n#   Build cURL\n#   we need to set the path for openssl with --with-ssl=...\nWORKDIR curl-7.60.0\nRUN ./configure --with-sysroot=${TOOLCHAIN_SYSROOT} --prefix=${TOOLCHAIN_PREFIX} --target=${TOOLCHAIN_NAME} --with-ssl=${TOOLCHAIN_PREFIX} --with-zlib --host=${TOOLCHAIN_NAME} --build=x86_64-linux-gnu\nRUN make\nRUN make install\nWORKDIR ..\n#   Download the Linux utilities for libuuid and expand it\nRUN wget https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.32/util-linux-2.32-rc2.tar.gz\nRUN tar -xvf util-linux-2.32-rc2.tar.gz\n#   Build uuid\nWORKDIR util-linux-2.32-rc2\nRUN ./configure --prefix=${TOOLCHAIN_PREFIX} --with-sysroot=${TOOLCHAIN_SYSROOT} --target=${TOOLCHAIN_NAME} --host=${TOOLCHAIN_NAME} --disable-all-programs --disable-bash-completion --enable-libuuid\nRUN make\nRUN make install\nWORKDIR ..\n#   clone azure \nRUN git clone --recursive https://github.com/Azure/azure-iot-sdk-c.git\nWORKDIR azure-iot-sdk-c\n#   Create a working directory for the cmake operations\nRUN mkdir cmake\nWORKDIR cmake\n#   Create a cmake toolchain file on the fly\nRUN echo \"SET(CMAKE_SYSTEM_NAME Linux) # this one is important\" > toolchain.cmake\nRUN echo \"SET(CMAKE_SYSTEM_VERSION 1) # this one not so much\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_C_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-gcc)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_EXES}/${TOOLCHAIN_NAME}-g++)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\" >> toolchain.cmake\nRUN echo \"SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\" >> toolchain.cmake\n#   Build the SDK. This will use the OpenSSL, cURL and uuid binaries that we built before\nRUN cmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -Duse_prov_client:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PREFIX} ..\nRUN make -j 2\nRUN make install\n#   or RUN cmake --build .\nWORKDIR ../..\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"2cf666121402a1fcf331bf8c0307d710","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/732711ff0f995e04478fd1199c55ad35bd78e885.dockerfile"}