{"seed":1972309361,"processedDockerfileHash":"21fb650e04fcb9cfba9747ea60f51c22","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM linuxkit/alpine:1b05307ae8152e3d38f79e297b0632697a30c65c AS build\n#   When changing kubernetes_version remember to also update:\n#   - scripts/mk-image-cache-lst and run `make refresh-image-caches` from top-level\n#   - pkg/e2e-test/Dockerfile\nENV kubernetes_version=\"v1.10.3\"\nENV cni_version=\"v0.7.1\"\nENV critools_version=\"v1.0.0-alpha.0\"\nRUN apk add bash coreutils curl findutils git go grep libc-dev linux-headers make rsync -U --no-cache \\\n && true\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\n#  ## Kubernetes (incl Kubelet)\nENV KUBERNETES_URL=\"https://github.com/kubernetes/kubernetes.git\"\n#  ENV KUBERNETES_BRANCH pull/NNN/head\nENV KUBERNETES_COMMIT=\"${kubernetes_version}\"\nRUN mkdir -p $GOPATH/src/github.com/kubernetes \\\n && cd $GOPATH/src/github.com/kubernetes \\\n && git clone $KUBERNETES_URL kubernetes\nWORKDIR $GOPATH/src/github.com/kubernetes/kubernetes\nRUN set -e ; if [ -n \"$KUBERNETES_BRANCH\" ] ; then git fetch origin \"$KUBERNETES_BRANCH\" ; fi ; git checkout -q $KUBERNETES_COMMIT\nRUN make WHAT=\"cmd/kubelet cmd/kubectl cmd/kubeadm\"\n#  ## CNI plugins\nENV CNI_URL=\"https://github.com/containernetworking/plugins\"\n#  ENV CNI_BRANCH pull/NNN/head\nENV CNI_COMMIT=\"${cni_version}\"\nRUN mkdir -p $GOPATH/github.com/containernetworking/ \\\n && cd $GOPATH/github.com/containernetworking/ \\\n && git clone $CNI_URL plugins\nWORKDIR $GOPATH/github.com/containernetworking/plugins\nRUN set -e ; if [ -n \"$CNI_BRANCH\" ] ; then git fetch origin \"CNI_BRANCH\" ; fi ; git checkout -q $CNI_COMMIT\nRUN ./build.sh\n#  ## critools\nENV CRITOOLS_URL=\"https://github.com/kubernetes-incubator/cri-tools\"\n#  ENV CRITOOLS_BRANCH pull/NNN/head\nENV CRITOOLS_COMMIT=\"${critools_version}\"\nRUN mkdir -p $GOPATH/github.com/kubernetes-incubator/ \\\n && cd $GOPATH/github.com/kubernetes-incubator/ \\\n && git clone $CRITOOLS_URL cri-tools\nWORKDIR $GOPATH/github.com/kubernetes-incubator/cri-tools\nRUN set -e ; if [ -n \"$CRITOOLS_BRANCH\" ] ; then git fetch origin \"CRITOOLS_BRANCH\" ; fi ; git checkout -q $CRITOOLS_COMMIT\nRUN make binaries\n#  # Construct final image\nRUN mkdir -p /out/etc/apk \\\n && cp -r /etc/apk/* /out/etc/apk/\n#  coreutils needed for du -B for disk image checks made by kubelet\n#   example: $ du -s -B 1 /var/lib/kubelet/pods/...\n#            du: unrecognized option: B\nRUN apk add alpine-baselayout busybox ca-certificates coreutils curl ebtables ethtool findutils iproute2 iptables musl openssl socat util-linux nfs-utils --no-cache --initdb -p /out \\\n && true\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubelet /out/usr/bin/kubelet\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubeadm /out/usr/bin/kubeadm\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubectl /out/usr/bin/kubectl\nRUN tar -czf /out/root/cni.tgz -C $GOPATH/github.com/containernetworking/plugins/bin .\nRUN cp $GOPATH/bin/crictl /out/usr/bin/crictl\nRUN cp $GOPATH/bin/critest /out/usr/bin/critest\n#   Remove apk residuals. We have a read-only rootfs, so apk is of no use.\nRUN rm -rf /out/etc/apk /out/lib/apk /out/var/cache\nCOPY kubelet.sh /out/usr/bin/kubelet.sh\nCOPY kubeadm-init.sh /kubeadm-init.sh\nRUN sed -e \"s/@KUBERNETES_VERSION@/${kubernetes_version}/g\" < /kubeadm-init.sh > /out/usr/bin/kubeadm-init.sh \\\n && chmod +x /out/usr/bin/kubeadm-init.sh\nFROM scratch\nWORKDIR /\nENTRYPOINT [\"/usr/bin/kubelet.sh\"]\nCOPY --from=build /out /\nENV KUBECONFIG=\"\\\"/etc/kubernetes/admin.conf\\\"\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM linuxkit/alpine:1b05307ae8152e3d38f79e297b0632697a30c65c AS build\n#  When changing kubernetes_version remember to also update:\n#  - scripts/mk-image-cache-lst and run `make refresh-image-caches` from top-level\n#  - pkg/e2e-test/Dockerfile\nENV kubernetes_version=\"v1.10.3\"\nENV cni_version=\"v0.7.1\"\nENV critools_version=\"v1.0.0-alpha.0\"\nRUN apk add -U --no-cache bash coreutils curl findutils git go grep libc-dev linux-headers make rsync \\\n && true\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\n# ## Kubernetes (incl Kubelet)\nENV KUBERNETES_URL=\"https://github.com/kubernetes/kubernetes.git\"\n# ENV KUBERNETES_BRANCH pull/NNN/head\nENV KUBERNETES_COMMIT=\"${kubernetes_version}\"\nRUN mkdir -p $GOPATH/src/github.com/kubernetes \\\n && cd $GOPATH/src/github.com/kubernetes \\\n && git clone $KUBERNETES_URL kubernetes\nWORKDIR $GOPATH/src/github.com/kubernetes/kubernetes\nRUN set -e ; if [ -n \"$KUBERNETES_BRANCH\" ] ; then git fetch origin \"$KUBERNETES_BRANCH\" ; fi ; git checkout -q $KUBERNETES_COMMIT\nRUN make WHAT=\"cmd/kubelet cmd/kubectl cmd/kubeadm\"\n# ## CNI plugins\nENV CNI_URL=\"https://github.com/containernetworking/plugins\"\n# ENV CNI_BRANCH pull/NNN/head\nENV CNI_COMMIT=\"${cni_version}\"\nRUN mkdir -p $GOPATH/github.com/containernetworking/ \\\n && cd $GOPATH/github.com/containernetworking/ \\\n && git clone $CNI_URL plugins\nWORKDIR $GOPATH/github.com/containernetworking/plugins\nRUN set -e ; if [ -n \"$CNI_BRANCH\" ] ; then git fetch origin \"CNI_BRANCH\" ; fi ; git checkout -q $CNI_COMMIT\nRUN ./build.sh\n# ## critools\nENV CRITOOLS_URL=\"https://github.com/kubernetes-incubator/cri-tools\"\n# ENV CRITOOLS_BRANCH pull/NNN/head\nENV CRITOOLS_COMMIT=\"${critools_version}\"\nRUN mkdir -p $GOPATH/github.com/kubernetes-incubator/ \\\n && cd $GOPATH/github.com/kubernetes-incubator/ \\\n && git clone $CRITOOLS_URL cri-tools\nWORKDIR $GOPATH/github.com/kubernetes-incubator/cri-tools\nRUN set -e ; if [ -n \"$CRITOOLS_BRANCH\" ] ; then git fetch origin \"CRITOOLS_BRANCH\" ; fi ; git checkout -q $CRITOOLS_COMMIT\nRUN make binaries\n# # Construct final image\nRUN mkdir -p /out/etc/apk \\\n && cp -r /etc/apk/* /out/etc/apk/\n# coreutils needed for du -B for disk image checks made by kubelet\n#  example: $ du -s -B 1 /var/lib/kubelet/pods/...\n#           du: unrecognized option: B\nRUN apk add --no-cache --initdb -p /out alpine-baselayout busybox ca-certificates coreutils curl ebtables ethtool findutils iproute2 iptables musl openssl socat util-linux nfs-utils \\\n && true\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubelet /out/usr/bin/kubelet\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubeadm /out/usr/bin/kubeadm\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubectl /out/usr/bin/kubectl\nRUN tar -czf /out/root/cni.tgz -C $GOPATH/github.com/containernetworking/plugins/bin .\nRUN cp $GOPATH/bin/crictl /out/usr/bin/crictl\nRUN cp $GOPATH/bin/critest /out/usr/bin/critest\n#  Remove apk residuals. We have a read-only rootfs, so apk is of no use.\nRUN rm -rf /out/etc/apk /out/lib/apk /out/var/cache\nADD kubelet.sh /out/usr/bin/kubelet.sh\nADD kubeadm-init.sh /kubeadm-init.sh\nRUN sed -e \"s/@KUBERNETES_VERSION@/${kubernetes_version}/g\" < /kubeadm-init.sh > /out/usr/bin/kubeadm-init.sh \\\n && chmod +x /out/usr/bin/kubeadm-init.sh\nFROM scratch\nWORKDIR /\nENTRYPOINT [\"/usr/bin/kubelet.sh\"]\nCOPY --from=build /out /\nENV KUBECONFIG=\"\\\"/etc/kubernetes/admin.conf\\\"\"\n","injectedSmells":[],"originalDockerfileHash":"2ff9dadc34ac302a2e3e58cc758f0d71","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM linuxkit/alpine:1b05307ae8152e3d38f79e297b0632697a30c65c AS build\n#   When changing kubernetes_version remember to also update:\n#   - scripts/mk-image-cache-lst and run `make refresh-image-caches` from top-level\n#   - pkg/e2e-test/Dockerfile\nENV kubernetes_version=\"v1.10.3\"\nENV cni_version=\"v0.7.1\"\nENV critools_version=\"v1.0.0-alpha.0\"\nRUN apk add -U --no-cache bash coreutils curl findutils git go grep libc-dev linux-headers make rsync \\\n && true\nENV GOPATH=\"/go\" \\\n    PATH=\"$PATH:/go/bin\"\n#  ## Kubernetes (incl Kubelet)\nENV KUBERNETES_URL=\"https://github.com/kubernetes/kubernetes.git\"\n#  ENV KUBERNETES_BRANCH pull/NNN/head\nENV KUBERNETES_COMMIT=\"${kubernetes_version}\"\nRUN mkdir -p $GOPATH/src/github.com/kubernetes \\\n && cd $GOPATH/src/github.com/kubernetes \\\n && git clone $KUBERNETES_URL kubernetes\nWORKDIR $GOPATH/src/github.com/kubernetes/kubernetes\nRUN set -e ; if [ -n \"$KUBERNETES_BRANCH\" ] ; then git fetch origin \"$KUBERNETES_BRANCH\" ; fi ; git checkout -q $KUBERNETES_COMMIT\nRUN make WHAT=\"cmd/kubelet cmd/kubectl cmd/kubeadm\"\n#  ## CNI plugins\nENV CNI_URL=\"https://github.com/containernetworking/plugins\"\n#  ENV CNI_BRANCH pull/NNN/head\nENV CNI_COMMIT=\"${cni_version}\"\nRUN mkdir -p $GOPATH/github.com/containernetworking/ \\\n && cd $GOPATH/github.com/containernetworking/ \\\n && git clone $CNI_URL plugins\nWORKDIR $GOPATH/github.com/containernetworking/plugins\nRUN set -e ; if [ -n \"$CNI_BRANCH\" ] ; then git fetch origin \"CNI_BRANCH\" ; fi ; git checkout -q $CNI_COMMIT\nRUN ./build.sh\n#  ## critools\nENV CRITOOLS_URL=\"https://github.com/kubernetes-incubator/cri-tools\"\n#  ENV CRITOOLS_BRANCH pull/NNN/head\nENV CRITOOLS_COMMIT=\"${critools_version}\"\nRUN mkdir -p $GOPATH/github.com/kubernetes-incubator/ \\\n && cd $GOPATH/github.com/kubernetes-incubator/ \\\n && git clone $CRITOOLS_URL cri-tools\nWORKDIR $GOPATH/github.com/kubernetes-incubator/cri-tools\nRUN set -e ; if [ -n \"$CRITOOLS_BRANCH\" ] ; then git fetch origin \"CRITOOLS_BRANCH\" ; fi ; git checkout -q $CRITOOLS_COMMIT\nRUN make binaries\n#  # Construct final image\nRUN mkdir -p /out/etc/apk \\\n && cp -r /etc/apk/* /out/etc/apk/\n#  coreutils needed for du -B for disk image checks made by kubelet\n#   example: $ du -s -B 1 /var/lib/kubelet/pods/...\n#            du: unrecognized option: B\nRUN apk add --no-cache --initdb -p /out alpine-baselayout busybox ca-certificates coreutils curl ebtables ethtool findutils iproute2 iptables musl openssl socat util-linux nfs-utils \\\n && true\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubelet /out/usr/bin/kubelet\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubeadm /out/usr/bin/kubeadm\nRUN cp $GOPATH/src/github.com/kubernetes/kubernetes/_output/bin/kubectl /out/usr/bin/kubectl\nRUN tar -czf /out/root/cni.tgz -C $GOPATH/github.com/containernetworking/plugins/bin .\nRUN cp $GOPATH/bin/crictl /out/usr/bin/crictl\nRUN cp $GOPATH/bin/critest /out/usr/bin/critest\n#   Remove apk residuals. We have a read-only rootfs, so apk is of no use.\nRUN rm -rf /out/etc/apk /out/lib/apk /out/var/cache\nADD kubelet.sh /out/usr/bin/kubelet.sh\nADD kubeadm-init.sh /kubeadm-init.sh\nRUN sed -e \"s/@KUBERNETES_VERSION@/${kubernetes_version}/g\" < /kubeadm-init.sh > /out/usr/bin/kubeadm-init.sh \\\n && chmod +x /out/usr/bin/kubeadm-init.sh\nFROM scratch\nWORKDIR /\nENTRYPOINT [\"/usr/bin/kubelet.sh\"]\nCOPY --from=build /out /\nENV KUBECONFIG=\"\\\"/etc/kubernetes/admin.conf\\\"\"\n","originalDockerfileUglifiedHash":"7d4bc7e366326a5c7cef9fea845944f6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6d131c4e1bd39a007cdd4e9fddac93c36a5b2492.dockerfile"}