{"seed":410502216,"processedDockerfileHash":"422955e4187bc6a6082f8aa95d39bc62","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   FRONTEND BUILD CONTAINER\nFROM ubuntu:18.04 AS ui-builder\nMAINTAINER Gigantum <support@gigantum.com>\n#   Install system level dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends git=1:2.17.1-1ubuntu0.17 curl=7.58.0-2ubuntu3.24 gosu=1.10-1ubuntu0.18.04.1 nodejs=8.10.0~dfsg-2ubuntu0.4 npm=3.5.2-0ubuntu4 -y\nRUN npm install yarn@1.22.19 -g\n#   Install babel-node\nRUN npm install @babel/cli@7.2.3 @babel/core@7.2.2 jest@24.0.0 relay-compiler@1.6.1 -g\n#   Make build location dir\nRUN mkdir /opt/ui\n#   Set the react port to match nginx\nENV PORT=\"\\\"10001\\\"\"\n#   Copy source to build\nCOPY ui /opt/ui\nCOPY resources/docker/ui_build_script.sh /opt/ui_build_script.sh\nRUN /bin/bash /opt/ui_build_script.sh\n#   PRODUCTION CONTAINER\nFROM ubuntu:18.04\nLABEL maintainer=\"Gigantum <support@gigantum.com>\"\n#   Copy requirements files\nCOPY packages/gtmcore/requirements.txt /opt/gtmcore/requirements.txt\nCOPY packages/gtmapi/requirements.txt /opt/gtmapi/requirements.txt\nCOPY packages/confhttpproxy /opt/confhttpproxy\nENV SHELL=\"/bin/bash\"\n#   Super instruction to install all dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends git=1:2.17.1-1ubuntu0.17 nginx=1.14.0-0ubuntu1.11 supervisor=3.3.1-1.1 wget=1.19.4-1ubuntu2.2 openssl=1.1.1-1ubuntu2.1~18.04.21 python3=3.6.7-1~18.04 python3-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-distutils=3.6.9-1~18.04 gcc=4:7.4.0-1ubuntu2.3 g++=4:7.4.0-1ubuntu2.3 gosu=1.10-1ubuntu0.18.04.1 redis-server=5:4.0.9-1ubuntu0.2 libjpeg-dev=8c-2ubuntu8 git-lfs=2.3.4-1 python3-setuptools=39.0.1-2ubuntu0.1 python3-dev=3.6.7-1~18.04 libdpkg-perl=1.19.0.5ubuntu2.4 zip=3.0-11build1 unzip=6.0-21ubuntu1.2 libsnappy-dev=1.1.7-1 -y \\\n && git lfs install \\\n && apt-get install --no-install-recommends curl=7.58.0-2ubuntu3.24 gnupg=2.2.4-1ubuntu1.6 gnupg1=1.4.22-3ubuntu2 gnupg2=2.2.4-1ubuntu1.6 -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install --no-install-recommends nodejs=8.10.0~dfsg-2ubuntu0.4 -y \\\n && npm install configurable-http-proxy@4.5.5 -g \\\n && cd /opt/confhttpproxy \\\n && pip3 install . \\\n && pip3 install wheel \\\n && pip3 install -r /opt/gtmcore/requirements.txt \\\n && pip3 install -r /opt/gtmapi/requirements.txt \\\n && pip3 install uwsgi \\\n && apt-get -qq -y remove gcc g++ python3-dev wget curl gnupg gnupg1 gnupg2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log\n#   Arguments, defaulted to production values\nARG CLIENT_CONFIG_FILE=build/client/labmanager-config.yaml\nARG NGINX_UI_CONFIG=resources/client/nginx_ui.conf\nARG NGINX_API_CONFIG=resources/client/nginx_api.conf\nARG SUPERVISOR_CONFIG=build/client/supervisord.conf\nARG ENTRYPOINT_FILE=resources/client/entrypoint.sh\nARG REDIS_CONFIG=resources/client/redis.conf\n#   Copy Libraries\n#   TODO: Make pip installs once refactor is completed\nCOPY packages/gtmapi /opt/gtmapi\nCOPY packages/gtmcore /opt/gtmcore\nRUN cd /opt/gtmcore/ \\\n && python3 setup.py install\n#   Install testing requirements (will essentially be a noop in production)\nCOPY build/requirements-testing.txt /opt/requirements-testing.txt\nRUN pip3 install -r /opt/requirements-testing.txt\n#   Setup lmcommon config file - should be written by automation before copy\nCOPY $CLIENT_CONFIG_FILE /etc/gigantum/labmanager.yaml\n#   Setup logging config file\nCOPY packages/gtmcore/gtmcore/logging/logging.json.default /etc/gigantum/logging.json\n#   Make needed directories\nRUN mkdir -p /mnt/gigantum \\\n && mkdir /opt/redis\n#   Copy frontend\nCOPY --from=ui-builder /opt/ui/build /var/www/\n#   Setup NGINX/uWSGI\nCOPY $NGINX_UI_CONFIG /etc/nginx/sites-enabled/\nCOPY $NGINX_API_CONFIG /etc/nginx/sites-enabled/\nRUN rm /etc/nginx/sites-enabled/default\n#   Setup Redis\nCOPY $REDIS_CONFIG /opt/redis/redis.conf\n#   Setup Supervisord to launch both uwsgi and nginx\nRUN mkdir -p /opt/log/supervisor \\\n && mkdir -p /opt/log/nginx \\\n && mkdir -p /opt/run \\\n && mkdir -p /opt/nginx \\\n && nginx \\\n && nginx -s reload \\\n && nginx -s quit\nCOPY resources/client/supervisord_base.conf /etc/supervisor/supervisord.conf\nCOPY $SUPERVISOR_CONFIG /etc/supervisor/conf.d/supervisord.conf\nCOPY $ENTRYPOINT_FILE /usr/local/bin/entrypoint.sh\nRUN chmod u+x /usr/local/bin/entrypoint.sh\n#   Setup demo labbook\nCOPY resources/my-first-project.zip /opt/my-first-project.zip\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#   Expose Ports\nEXPOSE 10000/tcp 10001/tcp 10002/tcp\n#   Start by firing up uwsgi, nginx, redis, and workers via supervisord\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  FRONTEND BUILD CONTAINER\nFROM ubuntu:18.04 AS ui-builder\nMAINTAINER Gigantum <support@gigantum.com>\n#  Install system level dependencies\nRUN apt-get update -y \\\n && apt-get install git curl gosu nodejs npm -y\nRUN npm install yarn -g\n#  Install babel-node\nRUN npm install @babel/cli@7.2.3 @babel/core@7.2.2 jest@24.0.0 relay-compiler@1.6.1 -g\n#  Make build location dir\nRUN mkdir /opt/ui\n#  Set the react port to match nginx\nENV PORT=\"\\\"10001\\\"\"\n#  Copy source to build\nCOPY ui /opt/ui\nCOPY resources/docker/ui_build_script.sh /opt/ui_build_script.sh\nRUN /bin/bash /opt/ui_build_script.sh\n#  PRODUCTION CONTAINER\nFROM ubuntu:18.04\nLABEL maintainer=\"Gigantum <support@gigantum.com>\"\n#  Copy requirements files\nCOPY packages/gtmcore/requirements.txt /opt/gtmcore/requirements.txt\nCOPY packages/gtmapi/requirements.txt /opt/gtmapi/requirements.txt\nCOPY packages/confhttpproxy /opt/confhttpproxy\nENV SHELL=\"/bin/bash\"\n#  Super instruction to install all dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends git nginx supervisor wget openssl python3 python3-pip python3-distutils gcc g++ gosu redis-server libjpeg-dev git-lfs python3-setuptools python3-dev libdpkg-perl zip unzip libsnappy-dev -y \\\n && git lfs install \\\n && apt-get install curl gnupg gnupg1 gnupg2 -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install nodejs -y \\\n && npm install configurable-http-proxy -g \\\n && cd /opt/confhttpproxy \\\n && pip3 install . \\\n && pip3 install wheel \\\n && pip3 install -r /opt/gtmcore/requirements.txt \\\n && pip3 install -r /opt/gtmapi/requirements.txt \\\n && pip3 install uwsgi \\\n && apt-get -qq -y remove gcc g++ python3-dev wget curl gnupg gnupg1 gnupg2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log\n#  Arguments, defaulted to production values\nARG CLIENT_CONFIG_FILE=build/client/labmanager-config.yaml\nARG NGINX_UI_CONFIG=resources/client/nginx_ui.conf\nARG NGINX_API_CONFIG=resources/client/nginx_api.conf\nARG SUPERVISOR_CONFIG=build/client/supervisord.conf\nARG ENTRYPOINT_FILE=resources/client/entrypoint.sh\nARG REDIS_CONFIG=resources/client/redis.conf\n#  Copy Libraries\n#  TODO: Make pip installs once refactor is completed\nCOPY packages/gtmapi /opt/gtmapi\nCOPY packages/gtmcore /opt/gtmcore\nRUN cd /opt/gtmcore/ \\\n && python3 setup.py install\n#  Install testing requirements (will essentially be a noop in production)\nCOPY build/requirements-testing.txt /opt/requirements-testing.txt\nRUN pip3 install -r /opt/requirements-testing.txt\n#  Setup lmcommon config file - should be written by automation before copy\nCOPY $CLIENT_CONFIG_FILE /etc/gigantum/labmanager.yaml\n#  Setup logging config file\nCOPY packages/gtmcore/gtmcore/logging/logging.json.default /etc/gigantum/logging.json\n#  Make needed directories\nRUN mkdir -p /mnt/gigantum \\\n && mkdir /opt/redis\n#  Copy frontend\nCOPY --from=ui-builder /opt/ui/build /var/www/\n#  Setup NGINX/uWSGI\nCOPY $NGINX_UI_CONFIG /etc/nginx/sites-enabled/\nCOPY $NGINX_API_CONFIG /etc/nginx/sites-enabled/\nRUN rm /etc/nginx/sites-enabled/default\n#  Setup Redis\nCOPY $REDIS_CONFIG /opt/redis/redis.conf\n#  Setup Supervisord to launch both uwsgi and nginx\nRUN mkdir -p /opt/log/supervisor \\\n && mkdir -p /opt/log/nginx \\\n && mkdir -p /opt/run \\\n && mkdir -p /opt/nginx \\\n && nginx \\\n && nginx -s reload \\\n && nginx -s quit\nCOPY resources/client/supervisord_base.conf /etc/supervisor/supervisord.conf\nCOPY $SUPERVISOR_CONFIG /etc/supervisor/conf.d/supervisord.conf\nCOPY $ENTRYPOINT_FILE /usr/local/bin/entrypoint.sh\nRUN chmod u+x /usr/local/bin/entrypoint.sh\n#  Setup demo labbook\nCOPY resources/my-first-project.zip /opt/my-first-project.zip\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#  Expose Ports\nEXPOSE 10000/tcp 10001/tcp 10002/tcp\n#  Start by firing up uwsgi, nginx, redis, and workers via supervisord\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\"]\n","injectedSmells":[],"originalDockerfileHash":"016b83a7ef600cda00f851e31877c448","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   FRONTEND BUILD CONTAINER\nFROM ubuntu:18.04 AS ui-builder\nMAINTAINER Gigantum <support@gigantum.com>\n#   Install system level dependencies\nRUN apt-get update -y \\\n && apt-get install git curl gosu nodejs npm -y\nRUN npm install yarn -g\n#   Install babel-node\nRUN npm install @babel/cli@7.2.3 @babel/core@7.2.2 jest@24.0.0 relay-compiler@1.6.1 -g\n#   Make build location dir\nRUN mkdir /opt/ui\n#   Set the react port to match nginx\nENV PORT=\"\\\"10001\\\"\"\n#   Copy source to build\nCOPY ui /opt/ui\nCOPY resources/docker/ui_build_script.sh /opt/ui_build_script.sh\nRUN /bin/bash /opt/ui_build_script.sh\n#   PRODUCTION CONTAINER\nFROM ubuntu:18.04\nLABEL maintainer=\"Gigantum <support@gigantum.com>\"\n#   Copy requirements files\nCOPY packages/gtmcore/requirements.txt /opt/gtmcore/requirements.txt\nCOPY packages/gtmapi/requirements.txt /opt/gtmapi/requirements.txt\nCOPY packages/confhttpproxy /opt/confhttpproxy\nENV SHELL=\"/bin/bash\"\n#   Super instruction to install all dependencies\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends git nginx supervisor wget openssl python3 python3-pip python3-distutils gcc g++ gosu redis-server libjpeg-dev git-lfs python3-setuptools python3-dev libdpkg-perl zip unzip libsnappy-dev -y \\\n && git lfs install \\\n && apt-get install curl gnupg gnupg1 gnupg2 -y \\\n && curl -sL https://deb.nodesource.com/setup_8.x | bash \\\n && apt-get install nodejs -y \\\n && npm install configurable-http-proxy -g \\\n && cd /opt/confhttpproxy \\\n && pip3 install . \\\n && pip3 install wheel \\\n && pip3 install -r /opt/gtmcore/requirements.txt \\\n && pip3 install -r /opt/gtmapi/requirements.txt \\\n && pip3 install uwsgi \\\n && apt-get -qq -y remove gcc g++ python3-dev wget curl gnupg gnupg1 gnupg2 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log\n#   Arguments, defaulted to production values\nARG CLIENT_CONFIG_FILE=build/client/labmanager-config.yaml\nARG NGINX_UI_CONFIG=resources/client/nginx_ui.conf\nARG NGINX_API_CONFIG=resources/client/nginx_api.conf\nARG SUPERVISOR_CONFIG=build/client/supervisord.conf\nARG ENTRYPOINT_FILE=resources/client/entrypoint.sh\nARG REDIS_CONFIG=resources/client/redis.conf\n#   Copy Libraries\n#   TODO: Make pip installs once refactor is completed\nCOPY packages/gtmapi /opt/gtmapi\nCOPY packages/gtmcore /opt/gtmcore\nRUN cd /opt/gtmcore/ \\\n && python3 setup.py install\n#   Install testing requirements (will essentially be a noop in production)\nCOPY build/requirements-testing.txt /opt/requirements-testing.txt\nRUN pip3 install -r /opt/requirements-testing.txt\n#   Setup lmcommon config file - should be written by automation before copy\nCOPY $CLIENT_CONFIG_FILE /etc/gigantum/labmanager.yaml\n#   Setup logging config file\nCOPY packages/gtmcore/gtmcore/logging/logging.json.default /etc/gigantum/logging.json\n#   Make needed directories\nRUN mkdir -p /mnt/gigantum \\\n && mkdir /opt/redis\n#   Copy frontend\nCOPY --from=ui-builder /opt/ui/build /var/www/\n#   Setup NGINX/uWSGI\nCOPY $NGINX_UI_CONFIG /etc/nginx/sites-enabled/\nCOPY $NGINX_API_CONFIG /etc/nginx/sites-enabled/\nRUN rm /etc/nginx/sites-enabled/default\n#   Setup Redis\nCOPY $REDIS_CONFIG /opt/redis/redis.conf\n#   Setup Supervisord to launch both uwsgi and nginx\nRUN mkdir -p /opt/log/supervisor \\\n && mkdir -p /opt/log/nginx \\\n && mkdir -p /opt/run \\\n && mkdir -p /opt/nginx \\\n && nginx \\\n && nginx -s reload \\\n && nginx -s quit\nCOPY resources/client/supervisord_base.conf /etc/supervisor/supervisord.conf\nCOPY $SUPERVISOR_CONFIG /etc/supervisor/conf.d/supervisord.conf\nCOPY $ENTRYPOINT_FILE /usr/local/bin/entrypoint.sh\nRUN chmod u+x /usr/local/bin/entrypoint.sh\n#   Setup demo labbook\nCOPY resources/my-first-project.zip /opt/my-first-project.zip\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n#   Expose Ports\nEXPOSE 10000/tcp 10001/tcp 10002/tcp\n#   Start by firing up uwsgi, nginx, redis, and workers via supervisord\nCMD [\"/usr/bin/supervisord\", \"--nodaemon\"]\n","originalDockerfileUglifiedHash":"30ebd81a58a1204f665bf670cf217755","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a4105d7eef2207d72c5ac556af59c663d840910f.dockerfile"}