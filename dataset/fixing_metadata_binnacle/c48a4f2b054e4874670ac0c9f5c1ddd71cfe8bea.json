{"seed":3648999476,"processedDockerfileHash":"5efcc3a99863fdc831ff771098fe1106","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   NOTE: This is only for Linux\n#   NOTE: This downloads Qt and builds it statically, so this can take a long time\n#   To run this, execute in the root of the repository\n#      docker build -t loki-gui-image .\n#   Then execute the script in the root of the repository to copy out the release\n#   binaries into build/release/bin\n#      ./collect_from_docker_container.sh\n#   This produces a loki-wallet-gui binary with the following dependencies\n#   linux-vdso.so.1\n#   libxcb-glx.so.0\n#   libX11-xcb.so.1\n#   libxcb.so.1\n#   libX11.so.6\n#   libfontconfig.so.1\n#   libfreetype.so.6\n#   libdl.so.2\n#   librt.so.1\n#   libGL.so.1\n#   libpthread.so.0\n#   libm.so.6\n#   libc.so.6\n#   /lib64/ld-linux-x86-64.so.2\n#   libXau.so.6\n#   libXdmcp.so.6\n#   libexpat.so.1\n#   libz.so.1\n#   libGLX.so.0\n#   libGLdispatch.so.0\n#   libbsd.so.0\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20210119~16.04.1 cmake=3.5.1-1ubuntu3 g++=4:5.3.1-1ubuntu1 make=4.1-6 pkg-config=0.29.1-0ubuntu1 graphviz=2.38.0-12ubuntu2.1 doxygen=1.8.11-1ubuntu0.1 git=1:2.7.4-0ubuntu1.10 curl=7.47.0-1ubuntu2.19 libtool-bin=2.4.6-0.1 autoconf=2.69-9 automake=1:1.15-4ubuntu1 --yes\nARG NUM_COMPILE_JOBS=1\nWORKDIR /usr/local\n#   NOTE: We install boost and openssl to their default locations because the GUI\n#   script is less flexible and it sets us up for success in the general case if\n#   it's in a common location.\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN set -ex \\\n && curl -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/ \\\n && ./b2 -j${NUM_COMPILE_JOBS} --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage install\nENV BOOST_ROOT=\"/usr/\"\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN set -ex \\\n && curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure --prefix=/usr/ linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl -j${NUM_COMPILE_JOBS} \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/\"\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install \\\n && ldconfig\nARG NCURSES_VERSION=6.1\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz \\\n && tar -xzf ncurses-${NCURSES_VERSION}.tar.gz \\\n && cd ncurses-${NCURSES_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-P -fPIC\" ./configure --prefix=/usr/ --enable-termcap --with-termlib \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && cp *.hpp /usr/local/include\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#   Setup gui dependencies\n#   QT External Dependencies\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libfontconfig1-dev=2.11.94-0ubuntu1.1 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libgl1-mesa-dev=18.0.5-0ubuntu0~16.04.1 libglu1-mesa-dev=9.0.0-2.1 libx11-dev=2:1.6.3-1ubuntu2.2 libx11-xcb-dev=2:1.6.3-1ubuntu2.2 libxfixes-dev=1:5.0.1-2 libxkbcommon-dev=0.5.0-1ubuntu2.1 libxrender-dev=1:0.9.9-0ubuntu1 p7zip-full=9.20.1~dfsg.1-4.2ubuntu0.1 python=2.7.12-1~16.04 ^libxcb.* --yes\n#   Setup QT in separate steps because its absurdly slow, so we can cache as much work as possible\nARG QT_VERSION=5.7.1\nRUN set -ex \\\n && curl -O -L https://download.qt.io/archive/qt/5.7/5.7.1/single/qt-everywhere-opensource-src-${QT_VERSION}.7z \\\n && 7z x qt-everywhere-opensource-src-${QT_VERSION}.7z\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && ./configure -prefix /usr/lib/x86_64-linux-gnu/qt5 -static -nomake tests -nomake examples -opensource -confirm-license -opengl desktop -qt-zlib -qt-libjpeg -qt-libpng -qt-xcb -qt-xkbcommon-x11 -qt-freetype -qt-pcre -qt-harfbuzz -fontconfig\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG QT_DIR=/usr/lib/x86_64-linux-gnu/qt5\nENV PATH=\"/usr/lib/x86_64-linux-gnu/qt5/bin:${PATH}\"\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION}/qtdeclarative \\\n && qmake \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#   I don't know why this is necessary for the GUI and not the daemon, but it works\nARG ZMQ_INCLUDE_PATH=/usr/local/include/\nARG ZMQ_LIBRARY=/usr/local/libzmq/src/.libs/libzmq.a\nARG LIBUNWIND_VERSION=1.2.1\nARG LIBUNWIND_HASH=3f3ecb90e28cbe53fba7a4a27ccce7aad188d3210bb1964a923a731a27a75acb\nRUN set -ex \\\n && curl -O -L http://download.savannah.nongnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && tar xvf libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && echo \"${LIBUNWIND_HASH} libunwind-${LIBUNWIND_VERSION}.tar.gz\" | sha256sum -c \\\n && cd libunwind-${LIBUNWIND_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-shared=no \\\n && make install\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends bzip2=1.0.6-8ubuntu0.2 xsltproc=1.1.28-2.1ubuntu0.3 gperf=3.0.4-2 --yes\n#   Udev\nARG UDEV_VERSION=v3.2.6\nARG UDEV_HASH=0c35b136c08d64064efa55087c54364608e65ed6\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} --depth=1 \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#   Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} --depth=1 \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ --enable-static=yes --enable-shared=no \\\n && make \\\n && make install\n#   Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} --depth=1 \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install\nCOPY . /src\nWORKDIR /src\nENV USE_SINGLE_BUILDDIR=\"1\"\nRUN set -ex \\\n && rm -rf build \\\n && ./build.sh release-static \\\n && cd build \\\n && make deploy\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  NOTE: This is only for Linux\n#  NOTE: This downloads Qt and builds it statically, so this can take a long time\n#  To run this, execute in the root of the repository\n#     docker build -t loki-gui-image .\n#  Then execute the script in the root of the repository to copy out the release\n#  binaries into build/release/bin\n#     ./collect_from_docker_container.sh\n#  This produces a loki-wallet-gui binary with the following dependencies\n#  linux-vdso.so.1\n#  libxcb-glx.so.0\n#  libX11-xcb.so.1\n#  libxcb.so.1\n#  libX11.so.6\n#  libfontconfig.so.1\n#  libfreetype.so.6\n#  libdl.so.2\n#  librt.so.1\n#  libGL.so.1\n#  libpthread.so.0\n#  libm.so.6\n#  libc.so.6\n#  /lib64/ld-linux-x86-64.so.2\n#  libXau.so.6\n#  libXdmcp.so.6\n#  libexpat.so.1\n#  libz.so.1\n#  libGLX.so.0\n#  libGLdispatch.so.0\n#  libbsd.so.0\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake --yes\nARG NUM_COMPILE_JOBS=1\nWORKDIR /usr/local\n#  NOTE: We install boost and openssl to their default locations because the GUI\n#  script is less flexible and it sets us up for success in the general case if\n#  it's in a common location.\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN set -ex \\\n && curl -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/ \\\n && ./b2 -j${NUM_COMPILE_JOBS} --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage install\nENV BOOST_ROOT=\"/usr/\"\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN set -ex \\\n && curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure --prefix=/usr/ linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl -j${NUM_COMPILE_JOBS} \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/\"\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install \\\n && ldconfig\nARG NCURSES_VERSION=6.1\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz \\\n && tar -xzf ncurses-${NCURSES_VERSION}.tar.gz \\\n && cd ncurses-${NCURSES_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-P -fPIC\" ./configure --prefix=/usr/ --enable-termcap --with-termlib \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && cp *.hpp /usr/local/include\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#  Setup gui dependencies\n#  QT External Dependencies\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev libx11-xcb-dev libxfixes-dev libxkbcommon-dev libxrender-dev p7zip-full python ^libxcb.* --yes\n#  Setup QT in separate steps because its absurdly slow, so we can cache as much work as possible\nARG QT_VERSION=5.7.1\nRUN set -ex \\\n && curl -O -L https://download.qt.io/archive/qt/5.7/5.7.1/single/qt-everywhere-opensource-src-${QT_VERSION}.7z \\\n && 7z x qt-everywhere-opensource-src-${QT_VERSION}.7z\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && ./configure -prefix /usr/lib/x86_64-linux-gnu/qt5 -static -nomake tests -nomake examples -opensource -confirm-license -opengl desktop -qt-zlib -qt-libjpeg -qt-libpng -qt-xcb -qt-xkbcommon-x11 -qt-freetype -qt-pcre -qt-harfbuzz -fontconfig\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG QT_DIR=/usr/lib/x86_64-linux-gnu/qt5\nENV PATH=\"/usr/lib/x86_64-linux-gnu/qt5/bin:${PATH}\"\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION}/qtdeclarative \\\n && qmake \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#  I don't know why this is necessary for the GUI and not the daemon, but it works\nARG ZMQ_INCLUDE_PATH=/usr/local/include/\nARG ZMQ_LIBRARY=/usr/local/libzmq/src/.libs/libzmq.a\nARG LIBUNWIND_VERSION=1.2.1\nARG LIBUNWIND_HASH=3f3ecb90e28cbe53fba7a4a27ccce7aad188d3210bb1964a923a731a27a75acb\nRUN set -ex \\\n && curl -O -L http://download.savannah.nongnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && tar xvf libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && echo \"${LIBUNWIND_HASH} libunwind-${LIBUNWIND_VERSION}.tar.gz\" | sha256sum -c \\\n && cd libunwind-${LIBUNWIND_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-shared=no \\\n && make install\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends bzip2 xsltproc gperf --yes\n#  Udev\nARG UDEV_VERSION=v3.2.6\nARG UDEV_HASH=0c35b136c08d64064efa55087c54364608e65ed6\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} --depth=1 \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#  Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} --depth=1 \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ --enable-static=yes --enable-shared=no \\\n && make \\\n && make install\n#  Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} --depth=1 \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install\nADD . /src\nWORKDIR /src\nENV USE_SINGLE_BUILDDIR=\"1\"\nRUN set -ex \\\n && rm -rf build \\\n && ./build.sh release-static \\\n && cd build \\\n && make deploy\n","injectedSmells":[],"originalDockerfileHash":"9805d4b939ebad7be197bb2ed97f5034","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   NOTE: This is only for Linux\n#   NOTE: This downloads Qt and builds it statically, so this can take a long time\n#   To run this, execute in the root of the repository\n#      docker build -t loki-gui-image .\n#   Then execute the script in the root of the repository to copy out the release\n#   binaries into build/release/bin\n#      ./collect_from_docker_container.sh\n#   This produces a loki-wallet-gui binary with the following dependencies\n#   linux-vdso.so.1\n#   libxcb-glx.so.0\n#   libX11-xcb.so.1\n#   libxcb.so.1\n#   libX11.so.6\n#   libfontconfig.so.1\n#   libfreetype.so.6\n#   libdl.so.2\n#   librt.so.1\n#   libGL.so.1\n#   libpthread.so.0\n#   libm.so.6\n#   libc.so.6\n#   /lib64/ld-linux-x86-64.so.2\n#   libXau.so.6\n#   libXdmcp.so.6\n#   libexpat.so.1\n#   libz.so.1\n#   libGLX.so.0\n#   libGLdispatch.so.0\n#   libbsd.so.0\nFROM ubuntu:16.04 AS builder\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake --yes\nARG NUM_COMPILE_JOBS=1\nWORKDIR /usr/local\n#   NOTE: We install boost and openssl to their default locations because the GUI\n#   script is less flexible and it sets us up for success in the general case if\n#   it's in a common location.\nARG BOOST_VERSION=1_66_0\nARG BOOST_VERSION_DOT=1.66.0\nARG BOOST_HASH=5721818253e6a0989583192f96782c4a98eb6204965316df9f5ad75819225ca9\nRUN set -ex \\\n && curl -L -o boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \\\n && echo \"${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2\" | sha256sum -c \\\n && tar -xvf boost_${BOOST_VERSION}.tar.bz2 \\\n && cd boost_${BOOST_VERSION} \\\n && ./bootstrap.sh --prefix=/usr/ \\\n && ./b2 -j${NUM_COMPILE_JOBS} --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags=\"-fPIC\" cxxflags=\"-fPIC\" stage install\nENV BOOST_ROOT=\"/usr/\"\nARG OPENSSL_VERSION=1.0.2n\nARG OPENSSL_HASH=370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe\nRUN set -ex \\\n && curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \\\n && echo \"${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \\\n && cd openssl-${OPENSSL_VERSION} \\\n && ./Configure --prefix=/usr/ linux-x86_64 no-shared --static -fPIC \\\n && make build_crypto build_ssl -j${NUM_COMPILE_JOBS} \\\n && make install\nENV OPENSSL_ROOT_DIR=\"/usr/\"\nARG ZMQ_VERSION=v4.2.3\nARG ZMQ_HASH=3226b8ebddd9c6c738ba42986822c26418a49afb\nRUN set -ex \\\n && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd libzmq \\\n && test `git rev-parse HEAD ` = ${ZMQ_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install \\\n && ldconfig\nARG NCURSES_VERSION=6.1\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz \\\n && tar -xzf ncurses-${NCURSES_VERSION}.tar.gz \\\n && cd ncurses-${NCURSES_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-P -fPIC\" ./configure --prefix=/usr/ --enable-termcap --with-termlib \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG CPPZMQ_HASH=6aa3ab686e916cb0e62df7fa7d12e0b13ae9fae6\nRUN set -ex \\\n && git clone https://github.com/zeromq/cppzmq.git -b ${ZMQ_VERSION} --depth=1 \\\n && cd cppzmq \\\n && test `git rev-parse HEAD ` = ${CPPZMQ_HASH} || exit 1 \\\n && cp *.hpp /usr/local/include\nARG READLINE_VERSION=7.0\nARG READLINE_HASH=750d437185286f40a369e1e4f4764eda932b9459b5ec9a731628393dd3d32334\nRUN set -ex \\\n && curl -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz \\\n && echo \"${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz\" | sha256sum -c \\\n && tar -xzf readline-${READLINE_VERSION}.tar.gz \\\n && cd readline-${READLINE_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG SODIUM_VERSION=1.0.16\nARG SODIUM_HASH=675149b9b8b66ff44152553fb3ebf9858128363d\nRUN set -ex \\\n && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \\\n && cd libsodium \\\n && test `git rev-parse HEAD ` = ${SODIUM_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#   Setup gui dependencies\n#   QT External Dependencies\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev libx11-xcb-dev libxfixes-dev libxkbcommon-dev libxrender-dev p7zip-full python ^libxcb.* --yes\n#   Setup QT in separate steps because its absurdly slow, so we can cache as much work as possible\nARG QT_VERSION=5.7.1\nRUN set -ex \\\n && curl -O -L https://download.qt.io/archive/qt/5.7/5.7.1/single/qt-everywhere-opensource-src-${QT_VERSION}.7z \\\n && 7z x qt-everywhere-opensource-src-${QT_VERSION}.7z\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && ./configure -prefix /usr/lib/x86_64-linux-gnu/qt5 -static -nomake tests -nomake examples -opensource -confirm-license -opengl desktop -qt-zlib -qt-libjpeg -qt-libpng -qt-xcb -qt-xkbcommon-x11 -qt-freetype -qt-pcre -qt-harfbuzz -fontconfig\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION} \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\nARG QT_DIR=/usr/lib/x86_64-linux-gnu/qt5\nENV PATH=\"/usr/lib/x86_64-linux-gnu/qt5/bin:${PATH}\"\nRUN set -ex \\\n && cd qt-everywhere-opensource-src-${QT_VERSION}/qtdeclarative \\\n && qmake \\\n && make -j${NUM_COMPILE_JOBS} \\\n && make install\n#   I don't know why this is necessary for the GUI and not the daemon, but it works\nARG ZMQ_INCLUDE_PATH=/usr/local/include/\nARG ZMQ_LIBRARY=/usr/local/libzmq/src/.libs/libzmq.a\nARG LIBUNWIND_VERSION=1.2.1\nARG LIBUNWIND_HASH=3f3ecb90e28cbe53fba7a4a27ccce7aad188d3210bb1964a923a731a27a75acb\nRUN set -ex \\\n && curl -O -L http://download.savannah.nongnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && tar xvf libunwind-${LIBUNWIND_VERSION}.tar.gz \\\n && echo \"${LIBUNWIND_HASH} libunwind-${LIBUNWIND_VERSION}.tar.gz\" | sha256sum -c \\\n && cd libunwind-${LIBUNWIND_VERSION} \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-shared=no \\\n && make install\nRUN set -ex \\\n && apt-get update \\\n && apt-get install --no-install-recommends bzip2 xsltproc gperf --yes\n#   Udev\nARG UDEV_VERSION=v3.2.6\nARG UDEV_HASH=0c35b136c08d64064efa55087c54364608e65ed6\nRUN set -ex \\\n && git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION} --depth=1 \\\n && cd eudev \\\n && test `git rev-parse HEAD ` = ${UDEV_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared \\\n && make \\\n && make install\n#   Libusb\nARG USB_VERSION=v1.0.22\nARG USB_HASH=0034b2afdcdb1614e78edaa2a9e22d5936aeae5d\nRUN set -ex \\\n && git clone https://github.com/libusb/libusb.git -b ${USB_VERSION} --depth=1 \\\n && cd libusb \\\n && test `git rev-parse HEAD ` = ${USB_HASH} || exit 1 \\\n && ./autogen.sh \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --prefix=/usr/ --enable-static=yes --enable-shared=no \\\n && make \\\n && make install\n#   Hidapi\nARG HIDAPI_VERSION=hidapi-0.8.0-rc1\nARG HIDAPI_HASH=40cf516139b5b61e30d9403a48db23d8f915f52c\nRUN set -ex \\\n && git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION} --depth=1 \\\n && cd hidapi \\\n && test `git rev-parse HEAD ` = ${HIDAPI_HASH} || exit 1 \\\n && ./bootstrap \\\n && CFLAGS=\"-fPIC\" CXXFLAGS=\"-fPIC\" ./configure --enable-static --disable-shared \\\n && make \\\n && make install\nADD . /src\nWORKDIR /src\nENV USE_SINGLE_BUILDDIR=\"1\"\nRUN set -ex \\\n && rm -rf build \\\n && ./build.sh release-static \\\n && cd build \\\n && make deploy\n","originalDockerfileUglifiedHash":"6fcc3d3f2b87e0f7865bfefa8071328b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c48a4f2b054e4874670ac0c9f5c1ddd71cfe8bea.dockerfile"}