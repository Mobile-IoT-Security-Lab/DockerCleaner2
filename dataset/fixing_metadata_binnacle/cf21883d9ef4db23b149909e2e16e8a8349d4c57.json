{"seed":454124988,"processedDockerfileHash":"e9114358f02c2bc8c80583b8dd62a7e0","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 autoconf=2.69-9 make=4.1-6 git=1:2.7.4-0ubuntu1.10 wget=1.17.1-1ubuntu1.5 pciutils=1:3.3.1-1.1ubuntu1.3 cpio=2.11+dfsg-5ubuntu1.1 libtool=2.4.6-0.1 lsb-release=9.20160110ubuntu0.2 ca-certificates=20210119~16.04.1 pkg-config=0.29.1-0ubuntu1 bison=2:3.0.4.dfsg-1 flex=2.6.0-11 libcurl4-gnutls-dev=7.47.0-1ubuntu2.19 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install --no-install-recommends automake=1:1.15-4ubuntu1 -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev=2.0.11-1ubuntu1.1 -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=v0.5.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#   Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  include(transform360.m4)\n#   Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libass-dev=0.13.1-1 libfreetype6-dev=2.6.1-0.1ubuntu2.5 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libssl-dev=1.0.2g-1ubuntu4.20 -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1\n#   Patch FFmpeg source for SVT-HEVC\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch\n#   Patch FFmpeg source for SVT-AV1\nRUN cd /home/FFmpeg ; patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch\n#   Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --disable-xlib --disable-sdl2 --enable-openssl --enable-nonfree --disable-vaapi --disable-hwaccels --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#   Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {}\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#   Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma1=2.0.11-1ubuntu1.1 libass5=0.13.1-1 libssl1.0.0=1.0.2g-1ubuntu4.20 -y -q ; rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#  COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#  Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#  Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#  Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Fetch SVT-AV1\nARG SVT_AV1_VER=v0.5.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n# Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#  Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n# include(transform360.m4)\n#  Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libass-dev libfreetype6-dev zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1\n#  Patch FFmpeg source for SVT-HEVC\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch\n#  Patch FFmpeg source for SVT-AV1\nRUN cd /home/FFmpeg ; patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch\n#  Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --disable-xlib --disable-sdl2 --enable-openssl --enable-nonfree --disable-vaapi --disable-hwaccels --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#  Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {} ;\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#  Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma1 libass5 libssl1.0.0 -y -q ; rm -rf /var/lib/apt/lists/*\n#  Install\nCOPY --from=build /home/build /\n","injectedSmells":[],"originalDockerfileHash":"b485d4b89d753e30ab2dab6e1b1165bc","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex libcurl4-gnutls-dev zlib1g-dev -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" --system-curl \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=20a47b0d904e9d99e089d93d7c33af92788cbfdb\nARG SVT_HEVC_REPO=https://github.com/intel/SVT-HEVC\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=v0.5.0\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1/Build/linux \\\n && git checkout ${SVT_AV1_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Remove build residue from SVT-AV1 build -- temp fix for bug\nRUN if [ -d \"build/home/\" ] ; then rm -rf build/home/ ; fi\n#   Fetch SVT-VP9\nARG SVT_VP9_VER=d18b4acf9139be2e83150e318ffd3dba1c432e74\nARG SVT_VP9_REPO=https://github.com/OpenVisualCloud/SVT-VP9\nRUN git clone ${SVT_VP9_REPO} \\\n && cd SVT-VP9/Build/linux \\\n && git checkout ${SVT_VP9_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  include(transform360.m4)\n#   Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libass-dev libfreetype6-dev zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1\n#   Patch FFmpeg source for SVT-HEVC\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch\n#   Patch FFmpeg source for SVT-AV1\nRUN cd /home/FFmpeg ; patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch\n#   Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-libass --enable-libfreetype --disable-xlib --disable-sdl2 --enable-openssl --enable-nonfree --disable-vaapi --disable-hwaccels --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#   Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {}\nFROM ubuntu:16.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 16.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#   Prerequisites\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma1 libass5 libssl1.0.0 -y -q ; rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\n","originalDockerfileUglifiedHash":"01e46c5d9081b77a8fddbe91f716e366","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cf21883d9ef4db23b149909e2e16e8a8349d4c57.dockerfile"}