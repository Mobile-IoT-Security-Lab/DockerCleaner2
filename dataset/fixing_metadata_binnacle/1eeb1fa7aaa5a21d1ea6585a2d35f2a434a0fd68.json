{"seed":209580010,"processedDockerfileHash":"ef0ca2ed696ac361aaaa14cd05d54190","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER Samuel \"samuel.zhao.yue@live.com\"\n#   Specially for SSH access and port redirection\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\n#   Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 80/tcp\nEXPOSE 443/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   kvm env\nENV RAM=\"2048\"\nENV SMP=\"1\"\nENV CPU=\"qemu64\"\nENV DISK_DEVICE=\"scsi\"\nENV IMAGE=\"/data/disk-image\"\nENV IMAGE_FORMAT=\"qcow2\"\nENV IMAGE_SIZE=\"10G\"\nENV IMAGE_CACHE=\"none\"\nENV IMAGE_DISCARD=\"unmap\"\nENV IMAGE_CREATE=\"0\"\nENV ISO_DOWNLOAD=\"0\"\nENV NETWORK=\"tap\"\nENV VNC=\"none\"\nENV VNC_IP=\"\\\"\nENV VNC_ID=\"0\"\nENV VNC_PORT=\"5500\"\nENV VNC_SOCK=\"/data/vnc.sock\"\nENV TCP_PORTS=\"\\\"\nENV UDP_PORTS=\"\\\"\nWORKDIR /root\n#  COPY ./etc/apt/sources.list_backup /etc/apt/sources.list\n#  RUN apt-get update\nRUN apt-get update \\\n && apt-get install --no-install-recommends qemu-kvm=1:2.5+dfsg-5ubuntu10.51 qemu-utils=1:2.5+dfsg-5ubuntu10.51 bridge-utils=1.5-9ubuntu1 dnsmasq=2.75-1ubuntu0.16.04.10 uml-utilities=20070815-1.4 iptables=1.6.0-2ubuntu3 wget=1.17.1-1ubuntu1.5 net-tools=1.60-26ubuntu1 -y \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 git=1:2.7.4-0ubuntu1.10 vim=2:7.4.1689-3ubuntu1.5 make=4.1-6 zip=3.0-11 unzip=6.0-20ubuntu1.1 curl=7.47.0-1ubuntu2.19 wget=1.17.1-1ubuntu1.5 bzip2=1.0.6-8ubuntu0.2 ssh=1:7.2p2-4ubuntu2.10 openssh-server=1:7.2p2-4ubuntu2.10 socat=1.7.3.1-1 -y \\\n && apt-get install --no-install-recommends openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 -y \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 -y \\\n && apt-get install --no-install-recommends net-tools=1.60-26ubuntu1 iputils-ping=3:20121221-5ubuntu2 dnsutils=1:9.10.3.dfsg.P4-8ubuntu1.19 -y \\\n && apt-get install --no-install-recommends python-dev=2.7.12-1~16.04 python-pip=8.1.1-2ubuntu0.6 -y \\\n && apt-get install --no-install-recommends apt-utils=1.2.35 usbutils=1:007-4 locales=2.23-0ubuntu11.3 udev=229-4ubuntu21.31 -y \\\n && apt-get autoremove -y \\\n && apt-get clean\n#   Install packages needed for android sdk tools\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install --no-install-recommends libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386 -y\n#   Java Environment Path\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV JRE_HOME=\"${JAVA_HOME}/jre\"\nENV CLASSPATH=\".:${JAVA_HOME}/lib:${JRE_HOME}/lib\"\nENV PATH=\"${JAVA_HOME}/bin:$PATH\"\n#   Install Android SDK\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV ANDROID_NDK_HOME=\"$ANDROID_HOME/android-ndk-r14b\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools/:$ANDROID_HOME/platform-tools:$ANDROID_NDK_HOME\"\nRUN curl -o android-sdk.tgz https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz \\\n && tar -C /opt -zxvf android-sdk.tgz > /dev/null\nRUN curl -o ndk-bundle.zip https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip \\\n && unzip ndk-bundle.zip -d $ANDROID_HOME > /dev/null\nRUN mkdir \"$ANDROID_HOME/licenses\" || true\nRUN echo -e \"\\n8933bad161af4178b1185d1a37fbf41ea5269c55\" > \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\d56f5187479451eabf01fb78af6dfcb131a6481e\" >> \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\n84831b9409646a918e30573bab4c9c91346d8abd\" > \"$ANDROID_HOME/licenses/android-sdk-preview-license\"\n#   Install Android Build Tools and the required version of Android SDK\n#   You can create several versions of the Dockerfile if you need to test several versions\nRUN (sleep 4 \\\n && while [ 1 ] ; do sleep 1 ;echo y ; done ) | android update sdk --no-ui --force -a --filter platform-tool,android-25,android-26,build-tools-25.0.2,build-tools-26.0.1,extra-android-support,extra-android-m2repository,extra-google-m2repository \\\n && echo \"y\" | android update adb\n#   RUN which adb\n#   RUN which android\n#   Gradle 4.2\nENV GRADLE_HOME=\"/usr/local/gradle-4.2\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\nRUN curl -o gradle-4.2-all.zip -L https://services.gradle.org/distributions/gradle-4.2-all.zip \\\n && unzip gradle-4.2-all.zip -d /usr/local > /dev/null\n#   Nodejs Environment Path\nENV PATH=\"$PATH:/opt/node-v6.11.4-linux-x64/bin\"\nRUN curl -o node-v6.11.4-linux-x64.tar.xz https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz \\\n && tar -C /opt -Jxvf node-v6.11.4-linux-x64.tar.xz > /dev/null\nRUN npm install cnpm@9.1.0 -g --registry=https://registry.npm.taobao.org\nRUN export CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver/\nRUN cnpm i -g macaca-cli\nRUN cnpm i -g macaca-android\nRUN cnpm i -g nosmoke\nRUN macaca -v\nRUN macaca doctor\n#   Run sshd\nRUN mkdir /var/run/sshd \\\n && echo \"root:$ROOTPASSWORD\" | chpasswd \\\n && sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \\\n && echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"y\" | android update sdk -a --no-ui --filter sys-img-x86_64-android-21,Android-21\nVOLUME /data\nCOPY entrypoint.sh /entrypoint.sh\nCOPY kvmconfig.sh /kvmconfig.sh\nRUN chmod +x /entrypoint.sh\nRUN chmod +x /kvmconfig.sh\n#   ENTRYPOINT [\"/entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER Samuel \"samuel.zhao.yue@live.com\"\n#  Specially for SSH access and port redirection\nENV ROOTPASSWORD=\"macaca\"\n#  Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 80/tcp\nEXPOSE 443/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  kvm env\nENV RAM=\"2048\"\nENV SMP=\"1\"\nENV CPU=\"qemu64\"\nENV DISK_DEVICE=\"scsi\"\nENV IMAGE=\"/data/disk-image\"\nENV IMAGE_FORMAT=\"qcow2\"\nENV IMAGE_SIZE=\"10G\"\nENV IMAGE_CACHE=\"none\"\nENV IMAGE_DISCARD=\"unmap\"\nENV IMAGE_CREATE=\"0\"\nENV ISO_DOWNLOAD=\"0\"\nENV NETWORK=\"tap\"\nENV VNC=\"none\"\nENV VNC_IP=\"\"\\\"\"\nENV VNC_ID=\"0\"\nENV VNC_PORT=\"5500\"\nENV VNC_SOCK=\"/data/vnc.sock\"\nENV TCP_PORTS=\"\"\\\"\"\nENV UDP_PORTS=\"\"\\\"\"\nWORKDIR /root\n# COPY ./etc/apt/sources.list_backup /etc/apt/sources.list\n# RUN apt-get update\nRUN apt-get update \\\n && apt-get install qemu-kvm qemu-utils bridge-utils dnsmasq uml-utilities iptables wget net-tools -y \\\n && apt-get install build-essential git vim make zip unzip curl wget bzip2 ssh openssh-server socat -y \\\n && apt-get install openjdk-8-jdk -y \\\n && apt-get install software-properties-common -y \\\n && apt-get install net-tools iputils-ping dnsutils -y \\\n && apt-get install python-dev python-pip -y \\\n && apt-get install apt-utils usbutils locales udev -y \\\n && apt-get autoremove -y \\\n && apt-get clean\n#  Install packages needed for android sdk tools\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386 -y\n#  Java Environment Path\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV JRE_HOME=\"${JAVA_HOME}/jre\"\nENV CLASSPATH=\".:${JAVA_HOME}/lib:${JRE_HOME}/lib\"\nENV PATH=\"${JAVA_HOME}/bin:$PATH\"\n#  Install Android SDK\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV ANDROID_NDK_HOME=\"$ANDROID_HOME/android-ndk-r14b\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools/:$ANDROID_HOME/platform-tools:$ANDROID_NDK_HOME\"\nRUN curl -o android-sdk.tgz https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz \\\n && tar -C /opt -zxvf android-sdk.tgz > /dev/null\nRUN curl -o ndk-bundle.zip https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip \\\n && unzip ndk-bundle.zip -d $ANDROID_HOME > /dev/null\nRUN mkdir \"$ANDROID_HOME/licenses\" || true\nRUN echo -e \"\\n8933bad161af4178b1185d1a37fbf41ea5269c55\" > \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\d56f5187479451eabf01fb78af6dfcb131a6481e\" >> \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\n84831b9409646a918e30573bab4c9c91346d8abd\" > \"$ANDROID_HOME/licenses/android-sdk-preview-license\"\n#  Install Android Build Tools and the required version of Android SDK\n#  You can create several versions of the Dockerfile if you need to test several versions\nRUN (sleep 4 \\\n && while [ 1 ] ; do sleep 1 ;echo y ; done ) | android update sdk --no-ui --force -a --filter platform-tool,android-25,android-26,build-tools-25.0.2,build-tools-26.0.1,extra-android-support,extra-android-m2repository,extra-google-m2repository \\\n && echo \"y\" | android update adb\n#  RUN which adb\n#  RUN which android\n#  Gradle 4.2\nENV GRADLE_HOME=\"/usr/local/gradle-4.2\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\nRUN curl -o gradle-4.2-all.zip -L https://services.gradle.org/distributions/gradle-4.2-all.zip \\\n && unzip gradle-4.2-all.zip -d /usr/local > /dev/null\n#  Nodejs Environment Path\nENV PATH=\"$PATH:/opt/node-v6.11.4-linux-x64/bin\"\nRUN curl -o node-v6.11.4-linux-x64.tar.xz https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz \\\n && tar -C /opt -Jxvf node-v6.11.4-linux-x64.tar.xz > /dev/null\nRUN npm install cnpm -g --registry=https://registry.npm.taobao.org\nRUN export CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver/\nRUN cnpm i -g macaca-cli\nRUN cnpm i -g macaca-android\nRUN cnpm i -g nosmoke\nRUN macaca -v\nRUN macaca doctor\n#  Run sshd\nRUN mkdir /var/run/sshd \\\n && echo \"root:$ROOTPASSWORD\" | chpasswd \\\n && sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \\\n && echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"y\" | android update sdk -a --no-ui --filter sys-img-x86_64-android-21,Android-21\nVOLUME /data\nADD entrypoint.sh /entrypoint.sh\nADD kvmconfig.sh /kvmconfig.sh\nRUN chmod +x /entrypoint.sh\nRUN chmod +x /kvmconfig.sh\n#  ENTRYPOINT [\"/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"59b786064bee890bccbd85e90c7defea","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER Samuel \"samuel.zhao.yue@live.com\"\n#   Specially for SSH access and port redirection\nENV ROOTPASSWORD=\"macaca\"\n#   Expose ADB, ADB control and VNC ports\nEXPOSE 22/tcp\nEXPOSE 5037/tcp\nEXPOSE 5554/tcp\nEXPOSE 5555/tcp\nEXPOSE 5900/tcp\nEXPOSE 80/tcp\nEXPOSE 443/tcp\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   kvm env\nENV RAM=\"2048\"\nENV SMP=\"1\"\nENV CPU=\"qemu64\"\nENV DISK_DEVICE=\"scsi\"\nENV IMAGE=\"/data/disk-image\"\nENV IMAGE_FORMAT=\"qcow2\"\nENV IMAGE_SIZE=\"10G\"\nENV IMAGE_CACHE=\"none\"\nENV IMAGE_DISCARD=\"unmap\"\nENV IMAGE_CREATE=\"0\"\nENV ISO_DOWNLOAD=\"0\"\nENV NETWORK=\"tap\"\nENV VNC=\"none\"\nENV VNC_IP=\"\\\"\nENV VNC_ID=\"0\"\nENV VNC_PORT=\"5500\"\nENV VNC_SOCK=\"/data/vnc.sock\"\nENV TCP_PORTS=\"\\\"\nENV UDP_PORTS=\"\\\"\nWORKDIR /root\n#  COPY ./etc/apt/sources.list_backup /etc/apt/sources.list\n#  RUN apt-get update\nRUN apt-get update \\\n && apt-get install qemu-kvm qemu-utils bridge-utils dnsmasq uml-utilities iptables wget net-tools -y \\\n && apt-get install build-essential git vim make zip unzip curl wget bzip2 ssh openssh-server socat -y \\\n && apt-get install openjdk-8-jdk -y \\\n && apt-get install software-properties-common -y \\\n && apt-get install net-tools iputils-ping dnsutils -y \\\n && apt-get install python-dev python-pip -y \\\n && apt-get install apt-utils usbutils locales udev -y \\\n && apt-get autoremove -y \\\n && apt-get clean\n#   Install packages needed for android sdk tools\nRUN dpkg --add-architecture i386 \\\n && apt-get update \\\n && apt-get install libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386 -y\n#   Java Environment Path\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\nENV JRE_HOME=\"${JAVA_HOME}/jre\"\nENV CLASSPATH=\".:${JAVA_HOME}/lib:${JRE_HOME}/lib\"\nENV PATH=\"${JAVA_HOME}/bin:$PATH\"\n#   Install Android SDK\nENV ANDROID_HOME=\"/opt/android-sdk-linux\"\nENV ANDROID_NDK_HOME=\"$ANDROID_HOME/android-ndk-r14b\"\nENV PATH=\"$PATH:$ANDROID_HOME/tools/:$ANDROID_HOME/platform-tools:$ANDROID_NDK_HOME\"\nRUN curl -o android-sdk.tgz https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz \\\n && tar -C /opt -zxvf android-sdk.tgz > /dev/null\nRUN curl -o ndk-bundle.zip https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip \\\n && unzip ndk-bundle.zip -d $ANDROID_HOME > /dev/null\nRUN mkdir \"$ANDROID_HOME/licenses\" || true\nRUN echo -e \"\\n8933bad161af4178b1185d1a37fbf41ea5269c55\" > \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\d56f5187479451eabf01fb78af6dfcb131a6481e\" >> \"$ANDROID_HOME/licenses/android-sdk-license\"\nRUN echo -e \"\\n84831b9409646a918e30573bab4c9c91346d8abd\" > \"$ANDROID_HOME/licenses/android-sdk-preview-license\"\n#   Install Android Build Tools and the required version of Android SDK\n#   You can create several versions of the Dockerfile if you need to test several versions\nRUN (sleep 4 \\\n && while [ 1 ] ; do sleep 1 ;echo y ; done ) | android update sdk --no-ui --force -a --filter platform-tool,android-25,android-26,build-tools-25.0.2,build-tools-26.0.1,extra-android-support,extra-android-m2repository,extra-google-m2repository \\\n && echo \"y\" | android update adb\n#   RUN which adb\n#   RUN which android\n#   Gradle 4.2\nENV GRADLE_HOME=\"/usr/local/gradle-4.2\"\nENV PATH=\"$GRADLE_HOME/bin:$PATH\"\nRUN curl -o gradle-4.2-all.zip -L https://services.gradle.org/distributions/gradle-4.2-all.zip \\\n && unzip gradle-4.2-all.zip -d /usr/local > /dev/null\n#   Nodejs Environment Path\nENV PATH=\"$PATH:/opt/node-v6.11.4-linux-x64/bin\"\nRUN curl -o node-v6.11.4-linux-x64.tar.xz https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz \\\n && tar -C /opt -Jxvf node-v6.11.4-linux-x64.tar.xz > /dev/null\nRUN npm install cnpm -g --registry=https://registry.npm.taobao.org\nRUN export CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver/\nRUN cnpm i -g macaca-cli\nRUN cnpm i -g macaca-android\nRUN cnpm i -g nosmoke\nRUN macaca -v\nRUN macaca doctor\n#   Run sshd\nRUN mkdir /var/run/sshd \\\n && echo \"root:$ROOTPASSWORD\" | chpasswd \\\n && sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \\\n && sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd \\\n && echo \"export VISIBLE=now\" >> /etc/profile\nRUN echo \"y\" | android update sdk -a --no-ui --filter sys-img-x86_64-android-21,Android-21\nVOLUME /data\nADD entrypoint.sh /entrypoint.sh\nADD kvmconfig.sh /kvmconfig.sh\nRUN chmod +x /entrypoint.sh\nRUN chmod +x /kvmconfig.sh\n#   ENTRYPOINT [\"/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"f02327877cbd48625cf2567958813ebb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1eeb1fa7aaa5a21d1ea6585a2d35f2a434a0fd68.dockerfile"}