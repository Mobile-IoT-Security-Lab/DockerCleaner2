{"seed":3754292032,"processedDockerfileHash":"34a3e4c713fc5182360cd7d0f25e7ff6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       https://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM nvidia/cuda-ppc64le:10.0-base-ubuntu18.04 AS base_build\nARG TF_SERVING_VERSION_GIT_BRANCH=master\nARG TF_SERVING_VERSION_GIT_COMMIT=head\nARG TF_WHEEL_FILE=tensorflow_gpu-1.13.1-cp27-cp27mu-linux_ppc64le.whl\nARG TF_WHEEL_URL=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_GPU_Release_Build/lastSuccessfulBuild/artifact/tensorflow_pkg\nLABEL maintainer=\"wdirons@us.ibm.com\"\nLABEL tensorflow_serving_github_branchtag=\"${TF_SERVING_VERSION_GIT_BRANCH}\"\nLABEL tensorflow_serving_github_commit=\"${TF_SERVING_VERSION_GIT_COMMIT}\"\nENV CUDNN_VERSION=\"7.4.1.5\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends automake build-essential ca-certificates cuda-command-line-tools-10-0 cuda-cublas-dev-10-0 cuda-cudart-dev-10-0 cuda-cufft-dev-10-0 cuda-curand-dev-10-0 cuda-cusolver-dev-10-0 cuda-cusparse-dev-10-0 curl git libfreetype6-dev libhdf5-dev libpng-dev libtool libcurl3-dev libzmq3-dev mlocate openjdk-8-jdk openjdk-8-jre-headless pkg-config python-dev software-properties-common swig unzip wget zip zlib1g-dev libcudnn7=${CUDNN_VERSION}-1+cuda10.0 libcudnn7-dev=${CUDNN_VERSION}-1+cuda10.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install grpcio==1.53.0 h5py==3.8.0 keras_applications==1.0.8 keras_preprocessing==1.1.2 mock==5.0.2 numpy==1.24.2 requests==2.28.2 --no-cache-dir\nRUN wget --no-verbose ${TF_WHEEL_URL}/${TF_WHEEL_FILE} \\\n && pip install ${TF_WHEEL_FILE} \\\n && rm -f ${TF_WHEEL_FILE}\n#   Set up Bazel\nENV BAZEL_VERSION=\"0.20.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --no-verbose https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip \\\n && unzip bazel-$BAZEL_VERSION-dist.zip \\\n && bash ./compile.sh \\\n && cp output/bazel /usr/local/bin \\\n && cd / \\\n && rm -rf /bazel\n#   Build TensorFlow with the CUDA configuration\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"0\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,7.0\"\nENV TF_CUDA_VERSION=\"10.0\"\nENV TF_CUDNN_VERSION=\"7\"\n#   Fix paths so that CUDNN can be found: https://github.com/tensorflow/tensorflow/issues/8264\nWORKDIR /\nRUN mkdir /usr/lib/powerpc64le-linux-gnu/include/ \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so.${TF_CUDNN_VERSION} /usr/local/cuda/lib64/libcudnn.so.${TF_CUDNN_VERSION}\n#   For backward compatibility we need this line. After 1.13 we can safely remove\n#   it.\nENV TF_NCCL_VERSION=\"\"\n#   Set TMP for nvidia build environment\nENV TMP=\"/tmp\"\n#   Download TF Serving sources (optionally at specific commit).\nWORKDIR /tensorflow-serving\nRUN git clone --branch=${TF_SERVING_VERSION_GIT_BRANCH} https://github.com/tensorflow/serving . \\\n && git remote add upstream https://github.com/tensorflow/serving.git \\\n && if [ \"${TF_SERVING_VERSION_GIT_COMMIT}\" != \"head\" ] ; then git checkout ${TF_SERVING_VERSION_GIT_COMMIT} ; fi\nFROM base_build AS binary_build\n#   Build, and install TensorFlow Serving\nARG TF_SERVING_BUILD_OPTIONS=\"--copt=-mcpu=power8 --copt=-mtune=power8\"\nRUN echo \"Building with build options: ${TF_SERVING_BUILD_OPTIONS}\"\nARG TF_SERVING_BAZEL_OPTIONS=\"\"\nRUN echo \"Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build --color=yes --curses=yes --config=cuda --copt=\"-fPIC\" ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1\n#   Build and install TensorFlow Serving API\nRUN bazel build --color=yes --curses=yes ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow_serving_api_gpu-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip\nFROM binary_build AS clean_build\n#   Clean up Bazel cache when done.\nRUN bazel clean --expunge --color=yes \\\n && rm -rf /root/.cache\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 Google LLC\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nFROM nvidia/cuda-ppc64le:10.0-base-ubuntu18.04 AS base_build\nARG TF_SERVING_VERSION_GIT_BRANCH=master\nARG TF_SERVING_VERSION_GIT_COMMIT=head\nARG TF_WHEEL_FILE=tensorflow_gpu-1.13.1-cp27-cp27mu-linux_ppc64le.whl\nARG TF_WHEEL_URL=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_GPU_Release_Build/lastSuccessfulBuild/artifact/tensorflow_pkg\nLABEL maintainer=\"wdirons@us.ibm.com\"\nLABEL tensorflow_serving_github_branchtag=\"${TF_SERVING_VERSION_GIT_BRANCH}\"\nLABEL tensorflow_serving_github_commit=\"${TF_SERVING_VERSION_GIT_COMMIT}\"\nENV CUDNN_VERSION=\"7.4.1.5\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends automake build-essential ca-certificates cuda-command-line-tools-10-0 cuda-cublas-dev-10-0 cuda-cudart-dev-10-0 cuda-cufft-dev-10-0 cuda-curand-dev-10-0 cuda-cusolver-dev-10-0 cuda-cusparse-dev-10-0 curl git libfreetype6-dev libhdf5-dev libpng-dev libtool libcurl3-dev libzmq3-dev mlocate openjdk-8-jdk openjdk-8-jre-headless pkg-config python-dev software-properties-common swig unzip wget zip zlib1g-dev libcudnn7=${CUDNN_VERSION}-1+cuda10.0 libcudnn7-dev=${CUDNN_VERSION}-1+cuda10.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install grpcio h5py keras_applications keras_preprocessing mock numpy requests --no-cache-dir\nRUN wget --no-verbose ${TF_WHEEL_URL}/${TF_WHEEL_FILE} \\\n && pip install ${TF_WHEEL_FILE} \\\n && rm -f ${TF_WHEEL_FILE}\n#  Set up Bazel\nENV BAZEL_VERSION=\"0.20.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --no-verbose https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip \\\n && unzip bazel-$BAZEL_VERSION-dist.zip \\\n && bash ./compile.sh \\\n && cp output/bazel /usr/local/bin \\\n && cd / \\\n && rm -rf /bazel\n#  Build TensorFlow with the CUDA configuration\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"0\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,7.0\"\nENV TF_CUDA_VERSION=\"10.0\"\nENV TF_CUDNN_VERSION=\"7\"\n#  Fix paths so that CUDNN can be found: https://github.com/tensorflow/tensorflow/issues/8264\nWORKDIR /\nRUN mkdir /usr/lib/powerpc64le-linux-gnu/include/ \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so.${TF_CUDNN_VERSION} /usr/local/cuda/lib64/libcudnn.so.${TF_CUDNN_VERSION}\n#  For backward compatibility we need this line. After 1.13 we can safely remove\n#  it.\nENV TF_NCCL_VERSION=\"\"\n#  Set TMP for nvidia build environment\nENV TMP=\"/tmp\"\n#  Download TF Serving sources (optionally at specific commit).\nWORKDIR /tensorflow-serving\nRUN git clone --branch=${TF_SERVING_VERSION_GIT_BRANCH} https://github.com/tensorflow/serving . \\\n && git remote add upstream https://github.com/tensorflow/serving.git \\\n && if [ \"${TF_SERVING_VERSION_GIT_COMMIT}\" != \"head\" ] ; then git checkout ${TF_SERVING_VERSION_GIT_COMMIT} ; fi\nFROM base_build AS binary_build\n#  Build, and install TensorFlow Serving\nARG TF_SERVING_BUILD_OPTIONS=\"--copt=-mcpu=power8 --copt=-mtune=power8\"\nRUN echo \"Building with build options: ${TF_SERVING_BUILD_OPTIONS}\"\nARG TF_SERVING_BAZEL_OPTIONS=\"\"\nRUN echo \"Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build --color=yes --curses=yes --config=cuda --copt=\"-fPIC\" ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1\n#  Build and install TensorFlow Serving API\nRUN bazel build --color=yes --curses=yes ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow_serving_api_gpu-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip\nFROM binary_build AS clean_build\n#  Clean up Bazel cache when done.\nRUN bazel clean --expunge --color=yes \\\n && rm -rf /root/.cache\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"a8f2eb4b1915f956947a7db4dfc5f340","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       https://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nFROM nvidia/cuda-ppc64le:10.0-base-ubuntu18.04 AS base_build\nARG TF_SERVING_VERSION_GIT_BRANCH=master\nARG TF_SERVING_VERSION_GIT_COMMIT=head\nARG TF_WHEEL_FILE=tensorflow_gpu-1.13.1-cp27-cp27mu-linux_ppc64le.whl\nARG TF_WHEEL_URL=https://powerci.osuosl.org/job/TensorFlow_PPC64LE_GPU_Release_Build/lastSuccessfulBuild/artifact/tensorflow_pkg\nLABEL maintainer=\"wdirons@us.ibm.com\"\nLABEL tensorflow_serving_github_branchtag=\"${TF_SERVING_VERSION_GIT_BRANCH}\"\nLABEL tensorflow_serving_github_commit=\"${TF_SERVING_VERSION_GIT_COMMIT}\"\nENV CUDNN_VERSION=\"7.4.1.5\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends automake build-essential ca-certificates cuda-command-line-tools-10-0 cuda-cublas-dev-10-0 cuda-cudart-dev-10-0 cuda-cufft-dev-10-0 cuda-curand-dev-10-0 cuda-cusolver-dev-10-0 cuda-cusparse-dev-10-0 curl git libfreetype6-dev libhdf5-dev libpng-dev libtool libcurl3-dev libzmq3-dev mlocate openjdk-8-jdk openjdk-8-jre-headless pkg-config python-dev software-properties-common swig unzip wget zip zlib1g-dev libcudnn7=${CUDNN_VERSION}-1+cuda10.0 libcudnn7-dev=${CUDNN_VERSION}-1+cuda10.0 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install grpcio h5py keras_applications keras_preprocessing mock numpy requests --no-cache-dir\nRUN wget --no-verbose ${TF_WHEEL_URL}/${TF_WHEEL_FILE} \\\n && pip install ${TF_WHEEL_FILE} \\\n && rm -f ${TF_WHEEL_FILE}\n#   Set up Bazel\nENV BAZEL_VERSION=\"0.20.0\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && wget --no-verbose https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip \\\n && unzip bazel-$BAZEL_VERSION-dist.zip \\\n && bash ./compile.sh \\\n && cp output/bazel /usr/local/bin \\\n && cd / \\\n && rm -rf /bazel\n#   Build TensorFlow with the CUDA configuration\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_NEED_TENSORRT=\"0\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.5,3.7,5.2,6.0,7.0\"\nENV TF_CUDA_VERSION=\"10.0\"\nENV TF_CUDNN_VERSION=\"7\"\n#   Fix paths so that CUDNN can be found: https://github.com/tensorflow/tensorflow/issues/8264\nWORKDIR /\nRUN mkdir /usr/lib/powerpc64le-linux-gnu/include/ \\\n && ln -s /usr/include/cudnn.h /usr/local/cuda/include/cudnn.h \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so \\\n && ln -s /usr/lib/powerpc64le-linux-gnu/libcudnn.so.${TF_CUDNN_VERSION} /usr/local/cuda/lib64/libcudnn.so.${TF_CUDNN_VERSION}\n#   For backward compatibility we need this line. After 1.13 we can safely remove\n#   it.\nENV TF_NCCL_VERSION=\"\"\n#   Set TMP for nvidia build environment\nENV TMP=\"/tmp\"\n#   Download TF Serving sources (optionally at specific commit).\nWORKDIR /tensorflow-serving\nRUN git clone --branch=${TF_SERVING_VERSION_GIT_BRANCH} https://github.com/tensorflow/serving . \\\n && git remote add upstream https://github.com/tensorflow/serving.git \\\n && if [ \"${TF_SERVING_VERSION_GIT_COMMIT}\" != \"head\" ] ; then git checkout ${TF_SERVING_VERSION_GIT_COMMIT} ; fi\nFROM base_build AS binary_build\n#   Build, and install TensorFlow Serving\nARG TF_SERVING_BUILD_OPTIONS=\"--copt=-mcpu=power8 --copt=-mtune=power8\"\nRUN echo \"Building with build options: ${TF_SERVING_BUILD_OPTIONS}\"\nARG TF_SERVING_BAZEL_OPTIONS=\"\"\nRUN echo \"Building with Bazel options: ${TF_SERVING_BAZEL_OPTIONS}\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \\\n && LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} bazel build --color=yes --curses=yes --config=cuda --copt=\"-fPIC\" ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/model_servers:tensorflow_model_server \\\n && cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server /usr/local/bin/ \\\n && rm /usr/local/cuda/lib64/stubs/libcuda.so.1\n#   Build and install TensorFlow Serving API\nRUN bazel build --color=yes --curses=yes ${TF_SERVING_BAZEL_OPTIONS} --verbose_failures --output_filter=DONT_MATCH_ANYTHING ${TF_SERVING_BUILD_OPTIONS} tensorflow_serving/tools/pip_package:build_pip_package \\\n && bazel-bin/tensorflow_serving/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow_serving_api_gpu-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip\nFROM binary_build AS clean_build\n#   Clean up Bazel cache when done.\nRUN bazel clean --expunge --color=yes \\\n && rm -rf /root/.cache\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"208cd13c2a03266e26bd0f413b7879ea","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ef2bf807d55c2185288b503f4980b46ee17083f6.dockerfile"}