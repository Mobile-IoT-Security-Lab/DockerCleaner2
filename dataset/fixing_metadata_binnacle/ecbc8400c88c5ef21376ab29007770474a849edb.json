{"seed":3161762705,"processedDockerfileHash":"1acee14d9bcbba2c3d337bf25e5b3915","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","have-a-healthcheck"],"processedDockerfile":"FROM buildpack-deps:cosmic\n#  ## base ###\nRUN yes | unminimize \\\n && (apt-get update ;apt-get install --no-install-recommends asciidoctor bash-completion build-essential htop jq less locales man-db nano software-properties-common sudo vim multitail -yq ) \\\n && locale-gen en_US.UTF-8 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\nENV LANG=\"en_US.UTF-8\"\n#  ## Gitpod user ###\n#   '-l': see https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod \\\n && sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers\nENV HOME=\"/home/gitpod\"\nWORKDIR $HOME\n#   custom Bash prompt\nRUN { echo \\\n && echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] $ '\" ; } >> .bashrc\n#  ## C/C++ ###\nRUN curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository -yu \"deb http://apt.llvm.org/cosmic/ llvm-toolchain-cosmic main\" \\\n && (apt-get update ;apt-get install --no-install-recommends clang-format-9 clang-tidy-9 clang-tools-9 cmake gdb lld-9 -yq ) \\\n && ln -s /usr/bin/clangd-9 /usr/bin/clangd \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n#  ## Apache and Nginx ###\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends apache2 nginx nginx-extras -yq ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* \\\n && mkdir /var/run/apache2 \\\n && mkdir /var/lock/apache2 \\\n && mkdir /var/run/nginx \\\n && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \\\n && chown -R gitpod:gitpod /etc/apache2 /var/run/apache2 /var/lock/apache2 /var/log/apache2 \\\n && chown -R gitpod:gitpod /etc/nginx /var/run/nginx /var/lib/nginx/ /var/log/nginx/\nCOPY apache2/ /etc/apache2/\nCOPY nginx /etc/nginx/\n#  # The directory relative to your git repository that will be served by Apache / Nginx\nENV APACHE_DOCROOT_IN_REPO=\"public\"\nENV NGINX_DOCROOT_IN_REPO=\"public\"\n#  ## PHP ###\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq composer php php-all-dev php-ctype php-curl php-date php-gd php-gettext php-intl php-json php-mbstring php-mysql php-net-ftp php-pgsql php-sqlite3 php-tokenizer php-xml php-zip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n#   PHP language server is installed by theia-php-extension\n#  ## Gitpod user (2) ###\nUSER gitpod\n#   use sudo so that user does not get sudo usage info on (the first) login\nRUN sudo echo \"Running 'sudo' for Gitpod: success\"\n#  ## Go ###\nENV GO_VERSION=\"1.12\" \\\n    GOPATH=\"$HOME/go-packages\" \\\n    GOROOT=\"$HOME/go\"\nENV PATH=\"$GOROOT/bin:$GOPATH/bin:$PATH\"\nRUN curl -fsSL https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -xzv \\\n && go get -u -v github.com/mdempsky/gocode github.com/uudashr/gopkgs/cmd/gopkgs github.com/ramya-rao-a/go-outline github.com/acroca/go-symbols golang.org/x/tools/cmd/guru golang.org/x/tools/cmd/gorename github.com/fatih/gomodifytags github.com/haya14busa/goplay/cmd/goplay github.com/josharian/impl github.com/tylerb/gotype-live github.com/rogpeppe/godef github.com/zmb3/gogetdoc golang.org/x/tools/cmd/goimports github.com/sqs/goreturns winterdrache.de/goformat/goformat golang.org/x/lint/golint github.com/cweill/gotests/... github.com/alecthomas/gometalinter honnef.co/go/tools/... github.com/golangci/golangci-lint/cmd/golangci-lint github.com/mgechev/revive github.com/sourcegraph/go-langserver golang.org/x/tools/cmd/gopls github.com/go-delve/delve/cmd/dlv github.com/davidrjenni/reftools/cmd/fillstruct github.com/godoctor/godoctor \\\n && go get -u -v -d github.com/stamblerre/gocode \\\n && go build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode \\\n && rm -rf $GOPATH/src \\\n && rm -rf $GOPATH/pkg\n#   user Go packages\nENV GOPATH=\"/workspace/go\" \\\n    PATH=\"/workspace/go/bin:$PATH\"\n#  ## Java ###\n#  # Place '.gradle' and 'm2-repository' in /workspace because (1) that's a fast volume, (2) it survives workspace-restarts and (3) it can be warmed-up by pre-builds.\nRUN curl -s \"https://get.sdkman.io\" | bash \\\n && bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh \\\n && sdk install java 8.0.202-zulufx \\\n && sdk install java 11.0.2-zulufx \\\n && sdk default java 8.0.202-zulufx \\\n && sdk install gradle \\\n && sdk install maven \\\n && mkdir /home/gitpod/.m2 \\\n && printf '<settings>\\n <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\"\nENV GRADLE_USER_HOME=\"/workspace/.gradle/\"\n#  ## Node.js ###\nARG NODE_VERSION=10.15.3\nRUN curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash \\\n && bash -c \". .nvm/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && npm config set python /usr/bin/python --global \\\n && npm config set python /usr/bin/python \\\n && npm install -g typescript yarn\"\nENV PATH=\"/home/gitpod/.nvm/versions/node/v${NODE_VERSION}/bin:$PATH\"\n#  ## Python ###\nENV PATH=\"$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH\"\nRUN curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash \\\n && { echo ;echo 'eval \"$(pyenv init -)\"' ;echo 'eval \"$(pyenv virtualenv-init -)\"' ; } >> .bashrc \\\n && pyenv install 2.7.15 \\\n && pyenv install 3.7.2 \\\n && pyenv global 2.7.15 3.7.2 \\\n && pip2 install --upgrade pip \\\n && pip2 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && pip3 install --upgrade pip \\\n && pip3 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && rm -rf /tmp/*\n#   Gitpod will automatically add user site under `/workspace` to persist your packages.\n#   ENV PYTHONUSERBASE=/workspace/.pip-modules \\\n#      PIP_USER=yes\n#  ## Ruby ###\nRUN curl -sSL https://rvm.io/mpapis.asc | gpg --import - \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg --import - \\\n && curl -fsSL https://get.rvm.io | bash -s stable \\\n && bash -lc \" rvm requirements \\\n && rvm install 2.4 \\\n && rvm install 2.5 \\\n && rvm install 2.6 \\\n && rvm use 2.6 --default \\\n && rvm rubygems current \\\n && gem install bundler --no-document \\\n && gem install solargraph --no-document\"\nENV GEM_HOME=\"/workspace/.rvm\"\n#  ## Rust ###\nRUN sudo apt-get update \\\n && DEBIAN_FRONTEND=noninteractive sudo apt-get install -yq musl musl-dev musl-tools \\\n && sudo apt-get clean \\\n && sudo rm -rf /var/lib/apt/lists/* /tmp/*\nRUN curl -fsSL https://sh.rustup.rs | sh -s -- -y \\\n && .cargo/bin/rustup update \\\n && .cargo/bin/rustup component add rls-preview rust-analysis rust-src \\\n && .cargo/bin/rustup completions bash | sudo tee /etc/bash_completion.d/rustup.bash-completion > /dev/null \\\n && .cargo/bin/rustup target add x86_64-unknown-linux-musl\nRUN bash -lc \"cargo install cargo-watch\"\n#  ## checks ###\n#   no root-owned files in the home directory\nRUN notOwnedFile=$( find . -not \"(\" -user gitpod -and -group gitpod \")\" -print -quit ;) \\\n && { [ -z \"$notOwnedFile\" ] || { echo \"Error: not all files/dirs in $HOME are owned by 'gitpod' user & group\" ;exit 1 ; } ; }\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM buildpack-deps:cosmic\n# ## base ###\nRUN yes | unminimize \\\n && apt-get install asciidoctor bash-completion build-essential htop jq less locales man-db nano software-properties-common sudo vim multitail -yq \\\n && locale-gen en_US.UTF-8 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\nENV LANG=\"en_US.UTF-8\"\n# ## Gitpod user ###\n#  '-l': see https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod \\\n && sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers\nENV HOME=\"/home/gitpod\"\nWORKDIR $HOME\n#  custom Bash prompt\nRUN { echo \\\n && echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\$ '\" ; } >> .bashrc\n# ## C/C++ ###\nRUN curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository -yu \"deb http://apt.llvm.org/cosmic/ llvm-toolchain-cosmic main\" \\\n && apt-get install clang-format-9 clang-tidy-9 clang-tools-9 cmake gdb lld-9 -yq \\\n && ln -s /usr/bin/clangd-9 /usr/bin/clangd \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n# ## Apache and Nginx ###\nRUN apt-get update \\\n && apt-get install apache2 nginx nginx-extras -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* \\\n && mkdir /var/run/apache2 \\\n && mkdir /var/lock/apache2 \\\n && mkdir /var/run/nginx \\\n && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \\\n && chown -R gitpod:gitpod /etc/apache2 /var/run/apache2 /var/lock/apache2 /var/log/apache2 \\\n && chown -R gitpod:gitpod /etc/nginx /var/run/nginx /var/lib/nginx/ /var/log/nginx/\nCOPY apache2/ /etc/apache2/\nCOPY nginx /etc/nginx/\n# # The directory relative to your git repository that will be served by Apache / Nginx\nENV APACHE_DOCROOT_IN_REPO=\"public\"\nENV NGINX_DOCROOT_IN_REPO=\"public\"\n# ## PHP ###\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq composer php php-all-dev php-ctype php-curl php-date php-gd php-gettext php-intl php-json php-mbstring php-mysql php-net-ftp php-pgsql php-sqlite3 php-tokenizer php-xml php-zip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n#  PHP language server is installed by theia-php-extension\n# ## Gitpod user (2) ###\nUSER gitpod\n#  use sudo so that user does not get sudo usage info on (the first) login\nRUN sudo echo \"Running 'sudo' for Gitpod: success\"\n# ## Go ###\nENV GO_VERSION=\"1.12\" \\\n    GOPATH=\"$HOME/go-packages\" \\\n    GOROOT=\"$HOME/go\"\nENV PATH=\"$GOROOT/bin:$GOPATH/bin:$PATH\"\nRUN curl -fsSL https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -xzv \\\n && go get -u -v github.com/mdempsky/gocode github.com/uudashr/gopkgs/cmd/gopkgs github.com/ramya-rao-a/go-outline github.com/acroca/go-symbols golang.org/x/tools/cmd/guru golang.org/x/tools/cmd/gorename github.com/fatih/gomodifytags github.com/haya14busa/goplay/cmd/goplay github.com/josharian/impl github.com/tylerb/gotype-live github.com/rogpeppe/godef github.com/zmb3/gogetdoc golang.org/x/tools/cmd/goimports github.com/sqs/goreturns winterdrache.de/goformat/goformat golang.org/x/lint/golint github.com/cweill/gotests/... github.com/alecthomas/gometalinter honnef.co/go/tools/... github.com/golangci/golangci-lint/cmd/golangci-lint github.com/mgechev/revive github.com/sourcegraph/go-langserver golang.org/x/tools/cmd/gopls github.com/go-delve/delve/cmd/dlv github.com/davidrjenni/reftools/cmd/fillstruct github.com/godoctor/godoctor \\\n && go get -u -v -d github.com/stamblerre/gocode \\\n && go build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode \\\n && rm -rf $GOPATH/src \\\n && rm -rf $GOPATH/pkg\n#  user Go packages\nENV GOPATH=\"/workspace/go\" \\\n    PATH=\"/workspace/go/bin:$PATH\"\n# ## Java ###\n# # Place '.gradle' and 'm2-repository' in /workspace because (1) that's a fast volume, (2) it survives workspace-restarts and (3) it can be warmed-up by pre-builds.\nRUN curl -s \"https://get.sdkman.io\" | bash \\\n && bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh \\\n && sdk install java 8.0.202-zulufx \\\n && sdk install java 11.0.2-zulufx \\\n && sdk default java 8.0.202-zulufx \\\n && sdk install gradle \\\n && sdk install maven \\\n && mkdir /home/gitpod/.m2 \\\n && printf '<settings>\\n <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\"\nENV GRADLE_USER_HOME=\"/workspace/.gradle/\"\n# ## Node.js ###\nARG NODE_VERSION=10.15.3\nRUN curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash \\\n && bash -c \". .nvm/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && npm config set python /usr/bin/python --global \\\n && npm config set python /usr/bin/python \\\n && npm install -g typescript yarn\"\nENV PATH=\"/home/gitpod/.nvm/versions/node/v${NODE_VERSION}/bin:$PATH\"\n# ## Python ###\nENV PATH=\"$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH\"\nRUN curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash \\\n && { echo ;echo 'eval \"$(pyenv init -)\"' ;echo 'eval \"$(pyenv virtualenv-init -)\"' ; } >> .bashrc \\\n && pyenv install 2.7.15 \\\n && pyenv install 3.7.2 \\\n && pyenv global 2.7.15 3.7.2 \\\n && pip2 install --upgrade pip \\\n && pip2 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && pip3 install --upgrade pip \\\n && pip3 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && rm -rf /tmp/*\n#  Gitpod will automatically add user site under `/workspace` to persist your packages.\n#  ENV PYTHONUSERBASE=/workspace/.pip-modules \\\n#     PIP_USER=yes\n# ## Ruby ###\nRUN curl -sSL https://rvm.io/mpapis.asc | gpg --import - \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg --import - \\\n && curl -fsSL https://get.rvm.io | bash -s stable \\\n && bash -lc \" rvm requirements \\\n && rvm install 2.4 \\\n && rvm install 2.5 \\\n && rvm install 2.6 \\\n && rvm use 2.6 --default \\\n && rvm rubygems current \\\n && gem install bundler --no-document \\\n && gem install solargraph --no-document\"\nENV GEM_HOME=\"/workspace/.rvm\"\n# ## Rust ###\nRUN sudo apt-get update \\\n && DEBIAN_FRONTEND=noninteractive sudo apt-get install -yq musl musl-dev musl-tools \\\n && sudo apt-get clean \\\n && sudo rm -rf /var/lib/apt/lists/* /tmp/*\nRUN curl -fsSL https://sh.rustup.rs | sh -s -- -y \\\n && .cargo/bin/rustup update \\\n && .cargo/bin/rustup component add rls-preview rust-analysis rust-src \\\n && .cargo/bin/rustup completions bash | sudo tee /etc/bash_completion.d/rustup.bash-completion > /dev/null \\\n && .cargo/bin/rustup target add x86_64-unknown-linux-musl\nRUN bash -lc \"cargo install cargo-watch\"\n# ## checks ###\n#  no root-owned files in the home directory\nRUN notOwnedFile=$( find . -not \"(\" -user gitpod -and -group gitpod \")\" -print -quit ;) \\\n && { [ -z \"$notOwnedFile\" ] || { echo \"Error: not all files/dirs in $HOME are owned by 'gitpod' user & group\" ;exit 1 ; } ; }\n","injectedSmells":[],"originalDockerfileHash":"1be3487b225b41b4e62b71f6bc74ab91","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM buildpack-deps:cosmic\n#  ## base ###\nRUN yes | unminimize \\\n && apt-get install asciidoctor bash-completion build-essential htop jq less locales man-db nano software-properties-common sudo vim multitail -yq \\\n && locale-gen en_US.UTF-8 \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\nENV LANG=\"en_US.UTF-8\"\n#  ## Gitpod user ###\n#   '-l': see https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod \\\n && sed -i.bkp -e 's/%sudo\\s\\+ALL=(ALL\\(:ALL\\)\\?)\\s\\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers\nENV HOME=\"/home/gitpod\"\nWORKDIR $HOME\n#   custom Bash prompt\nRUN { echo \\\n && echo \"PS1='\\[\\e]0;\\u \\w\\a\\]\\[\\033[01;32m\\]\\u\\[\\033[00m\\] \\[\\033[01;34m\\]\\w\\[\\033[00m\\] $ '\" ; } >> .bashrc\n#  ## C/C++ ###\nRUN curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-add-repository -yu \"deb http://apt.llvm.org/cosmic/ llvm-toolchain-cosmic main\" \\\n && apt-get install clang-format-9 clang-tidy-9 clang-tools-9 cmake gdb lld-9 -yq \\\n && ln -s /usr/bin/clangd-9 /usr/bin/clangd \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n#  ## Apache and Nginx ###\nRUN apt-get update \\\n && apt-get install apache2 nginx nginx-extras -yq \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* \\\n && mkdir /var/run/apache2 \\\n && mkdir /var/lock/apache2 \\\n && mkdir /var/run/nginx \\\n && ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \\\n && chown -R gitpod:gitpod /etc/apache2 /var/run/apache2 /var/lock/apache2 /var/log/apache2 \\\n && chown -R gitpod:gitpod /etc/nginx /var/run/nginx /var/lib/nginx/ /var/log/nginx/\nCOPY apache2/ /etc/apache2/\nCOPY nginx /etc/nginx/\n#  # The directory relative to your git repository that will be served by Apache / Nginx\nENV APACHE_DOCROOT_IN_REPO=\"public\"\nENV NGINX_DOCROOT_IN_REPO=\"public\"\n#  ## PHP ###\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -yq composer php php-all-dev php-ctype php-curl php-date php-gd php-gettext php-intl php-json php-mbstring php-mysql php-net-ftp php-pgsql php-sqlite3 php-tokenizer php-xml php-zip \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/*\n#   PHP language server is installed by theia-php-extension\n#  ## Gitpod user (2) ###\nUSER gitpod\n#   use sudo so that user does not get sudo usage info on (the first) login\nRUN sudo echo \"Running 'sudo' for Gitpod: success\"\n#  ## Go ###\nENV GO_VERSION=\"1.12\" \\\n    GOPATH=\"$HOME/go-packages\" \\\n    GOROOT=\"$HOME/go\"\nENV PATH=\"$GOROOT/bin:$GOPATH/bin:$PATH\"\nRUN curl -fsSL https://storage.googleapis.com/golang/go$GO_VERSION.linux-amd64.tar.gz | tar -xzv \\\n && go get -u -v github.com/mdempsky/gocode github.com/uudashr/gopkgs/cmd/gopkgs github.com/ramya-rao-a/go-outline github.com/acroca/go-symbols golang.org/x/tools/cmd/guru golang.org/x/tools/cmd/gorename github.com/fatih/gomodifytags github.com/haya14busa/goplay/cmd/goplay github.com/josharian/impl github.com/tylerb/gotype-live github.com/rogpeppe/godef github.com/zmb3/gogetdoc golang.org/x/tools/cmd/goimports github.com/sqs/goreturns winterdrache.de/goformat/goformat golang.org/x/lint/golint github.com/cweill/gotests/... github.com/alecthomas/gometalinter honnef.co/go/tools/... github.com/golangci/golangci-lint/cmd/golangci-lint github.com/mgechev/revive github.com/sourcegraph/go-langserver golang.org/x/tools/cmd/gopls github.com/go-delve/delve/cmd/dlv github.com/davidrjenni/reftools/cmd/fillstruct github.com/godoctor/godoctor \\\n && go get -u -v -d github.com/stamblerre/gocode \\\n && go build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode \\\n && rm -rf $GOPATH/src \\\n && rm -rf $GOPATH/pkg\n#   user Go packages\nENV GOPATH=\"/workspace/go\" \\\n    PATH=\"/workspace/go/bin:$PATH\"\n#  ## Java ###\n#  # Place '.gradle' and 'm2-repository' in /workspace because (1) that's a fast volume, (2) it survives workspace-restarts and (3) it can be warmed-up by pre-builds.\nRUN curl -s \"https://get.sdkman.io\" | bash \\\n && bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh \\\n && sdk install java 8.0.202-zulufx \\\n && sdk install java 11.0.2-zulufx \\\n && sdk default java 8.0.202-zulufx \\\n && sdk install gradle \\\n && sdk install maven \\\n && mkdir /home/gitpod/.m2 \\\n && printf '<settings>\\n <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\"\nENV GRADLE_USER_HOME=\"/workspace/.gradle/\"\n#  ## Node.js ###\nARG NODE_VERSION=10.15.3\nRUN curl -fsSL https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash \\\n && bash -c \". .nvm/nvm.sh \\\n && nvm install $NODE_VERSION \\\n && npm config set python /usr/bin/python --global \\\n && npm config set python /usr/bin/python \\\n && npm install -g typescript yarn\"\nENV PATH=\"/home/gitpod/.nvm/versions/node/v${NODE_VERSION}/bin:$PATH\"\n#  ## Python ###\nENV PATH=\"$HOME/.pyenv/bin:$HOME/.pyenv/shims:$PATH\"\nRUN curl -fsSL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash \\\n && { echo ;echo 'eval \"$(pyenv init -)\"' ;echo 'eval \"$(pyenv virtualenv-init -)\"' ; } >> .bashrc \\\n && pyenv install 2.7.15 \\\n && pyenv install 3.7.2 \\\n && pyenv global 2.7.15 3.7.2 \\\n && pip2 install --upgrade pip \\\n && pip2 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && pip3 install --upgrade pip \\\n && pip3 install virtualenv pipenv pylint rope flake8 autopep8 pep8 pylama pydocstyle bandit python-language-server[all]==0.25.0 \\\n && rm -rf /tmp/*\n#   Gitpod will automatically add user site under `/workspace` to persist your packages.\n#   ENV PYTHONUSERBASE=/workspace/.pip-modules \\\n#      PIP_USER=yes\n#  ## Ruby ###\nRUN curl -sSL https://rvm.io/mpapis.asc | gpg --import - \\\n && curl -sSL https://rvm.io/pkuczynski.asc | gpg --import - \\\n && curl -fsSL https://get.rvm.io | bash -s stable \\\n && bash -lc \" rvm requirements \\\n && rvm install 2.4 \\\n && rvm install 2.5 \\\n && rvm install 2.6 \\\n && rvm use 2.6 --default \\\n && rvm rubygems current \\\n && gem install bundler --no-document \\\n && gem install solargraph --no-document\"\nENV GEM_HOME=\"/workspace/.rvm\"\n#  ## Rust ###\nRUN sudo apt-get update \\\n && DEBIAN_FRONTEND=noninteractive sudo apt-get install -yq musl musl-dev musl-tools \\\n && sudo apt-get clean \\\n && sudo rm -rf /var/lib/apt/lists/* /tmp/*\nRUN curl -fsSL https://sh.rustup.rs | sh -s -- -y \\\n && .cargo/bin/rustup update \\\n && .cargo/bin/rustup component add rls-preview rust-analysis rust-src \\\n && .cargo/bin/rustup completions bash | sudo tee /etc/bash_completion.d/rustup.bash-completion > /dev/null \\\n && .cargo/bin/rustup target add x86_64-unknown-linux-musl\nRUN bash -lc \"cargo install cargo-watch\"\n#  ## checks ###\n#   no root-owned files in the home directory\nRUN notOwnedFile=$( find . -not \"(\" -user gitpod -and -group gitpod \")\" -print -quit ;) \\\n && { [ -z \"$notOwnedFile\" ] || { echo \"Error: not all files/dirs in $HOME are owned by 'gitpod' user & group\" ;exit 1 ; } ; }\n","originalDockerfileUglifiedHash":"c1c6bc1e93f7c6e8c5597bbe724324eb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ecbc8400c88c5ef21376ab29007770474a849edb.dockerfile"}