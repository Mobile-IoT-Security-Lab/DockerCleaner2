{"seed":2236523509,"processedDockerfileHash":"8081b3bfa2c1f5bee047b3f9ca64a8cc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim:set ft=dockerfile:\nFROM debian:stretch\nRUN set -ex ; if ! command -v gpg > /dev/null; then apt-get update ;apt-get install --no-install-recommends gnupg=2.1.18-8~deb9u4 dirmngr=2.1.18-8~deb9u4 -y ;rm -rf /var/lib/apt/lists/* ; fi\n#   explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\n#  RUN set -x \\\n#  \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n#  \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n#  \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n#  \t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n#  \t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n#  \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n#  \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n#  \t&& chmod +x /usr/local/bin/gosu \\\n#  \t&& gosu nobody true \\\n#  \t&& apt-get purge -y --auto-remove ca-certificates wget\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN apt-get update \\\n && apt-get install --no-install-recommends locales=2.24-11+deb9u4 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nCOPY 1_schema.sql /docker-entrypoint-initdb.d/\nCOPY 2_data.sql /docker-entrypoint-initdb.d/\nRUN set -ex ; key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8' ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; gpg --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; rm -rf \"$GNUPGHOME\" ; apt-key list\nENV PG_MAJOR=\"10\"\n#  ENV PG_VERSION 10.2-1.pgdg90+1\nENV PG_VERSION=\"10.5-2.pgdg90+1\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64|i386|ppc64el) echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; apt-get update ;;(*) echo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; tempDir=\"$( mktemp -d ;)\" ; cd \"$tempDir\" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get build-dep -y postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; ls -lAFh ; dpkg-scanpackages . > Packages; grep '^Package: ' Packages ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install --no-install-recommends postgresql-common=181+deb9u3 -y ; sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf ; apt-get install --no-install-recommends \"postgresql-$PG_MAJOR=$PG_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   make the sample config easier to munge (and \"correct by default\")\nRUN mv -v \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\" /usr/share/postgresql/ \\\n && ln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\" \\\n && sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PATH=\"$PATH:/usr/lib/postgresql/$PG_MAJOR/bin\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim:set ft=dockerfile:\nFROM debian:stretch\nRUN set -ex ; if ! command -v gpg > /dev/null; then apt-get update ;apt-get install --no-install-recommends gnupg dirmngr -y ;rm -rf /var/lib/apt/lists/* ; fi\n#  explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\n#  grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\n# RUN set -x \\\n# \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n# \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n# \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n# \t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n# \t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n# \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n# \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n# \t&& chmod +x /usr/local/bin/gosu \\\n# \t&& gosu nobody true \\\n# \t&& apt-get purge -y --auto-remove ca-certificates wget\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN apt-get update \\\n && apt-get install locales -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nCOPY 1_schema.sql /docker-entrypoint-initdb.d/\nCOPY 2_data.sql /docker-entrypoint-initdb.d/\nRUN set -ex ; key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8' ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; gpg --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; rm -rf \"$GNUPGHOME\" ; apt-key list\nENV PG_MAJOR=\"10\"\n# ENV PG_VERSION 10.2-1.pgdg90+1\nENV PG_VERSION=\"10.5-2.pgdg90+1\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64|i386|ppc64el) echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; apt-get update ;;(*) echo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; tempDir=\"$( mktemp -d ;)\" ; cd \"$tempDir\" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get build-dep -y postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; ls -lAFh ; dpkg-scanpackages . > Packages; grep '^Package: ' Packages ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install postgresql-common -y ; sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf ; apt-get install \"postgresql-$PG_MAJOR=$PG_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#  make the sample config easier to munge (and \"correct by default\")\nRUN mv -v \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\" /usr/share/postgresql/ \\\n && ln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\" \\\n && sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PATH=\"$PATH:/usr/lib/postgresql/$PG_MAJOR/bin\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\n","injectedSmells":[],"originalDockerfileHash":"0aaf593586ef8409d4821abf854ea3f5","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim:set ft=dockerfile:\nFROM debian:stretch\nRUN set -ex ; if ! command -v gpg > /dev/null; then apt-get update ;apt-get install --no-install-recommends gnupg dirmngr -y ;rm -rf /var/lib/apt/lists/* ; fi\n#   explicitly set user/group IDs\nRUN groupadd -r postgres --gid=999 \\\n && useradd -r -g postgres --uid=999 postgres\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\n#  RUN set -x \\\n#  \t&& apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \\\n#  \t&& wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)\" \\\n#  \t&& wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc\" \\\n#  \t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n#  \t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n#  \t&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n#  \t&& rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n#  \t&& chmod +x /usr/local/bin/gosu \\\n#  \t&& gosu nobody true \\\n#  \t&& apt-get purge -y --auto-remove ca-certificates wget\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN apt-get update \\\n && apt-get install locales -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nCOPY 1_schema.sql /docker-entrypoint-initdb.d/\nCOPY 2_data.sql /docker-entrypoint-initdb.d/\nRUN set -ex ; key='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8' ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; gpg --export \"$key\" > /etc/apt/trusted.gpg.d/postgres.gpg; rm -rf \"$GNUPGHOME\" ; apt-key list\nENV PG_MAJOR=\"10\"\n#  ENV PG_VERSION 10.2-1.pgdg90+1\nENV PG_VERSION=\"10.5-2.pgdg90+1\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (amd64|i386|ppc64el) echo \"deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; apt-get update ;;(*) echo \"deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main $PG_MAJOR\" > /etc/apt/sources.list.d/pgdg.list; tempDir=\"$( mktemp -d ;)\" ; cd \"$tempDir\" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get build-dep -y postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; DEB_BUILD_OPTIONS=\"nocheck parallel=$( nproc ;)\" apt-get source --compile postgresql-common pgdg-keyring \"postgresql-$PG_MAJOR=$PG_VERSION\" ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; ls -lAFh ; dpkg-scanpackages . > Packages; grep '^Package: ' Packages ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install postgresql-common -y ; sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf ; apt-get install \"postgresql-$PG_MAJOR=$PG_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\n#   make the sample config easier to munge (and \"correct by default\")\nRUN mv -v \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\" /usr/share/postgresql/ \\\n && ln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\" \\\n && sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PATH=\"$PATH:/usr/lib/postgresql/$PG_MAJOR/bin\"\nENV PGDATA=\"/var/lib/postgresql/data\"\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\n","originalDockerfileUglifiedHash":"bc951f14d489d341cc0b29795a9184ff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/617cf8e242d0a264722e1c347f9d78bc8583d47f.dockerfile"}