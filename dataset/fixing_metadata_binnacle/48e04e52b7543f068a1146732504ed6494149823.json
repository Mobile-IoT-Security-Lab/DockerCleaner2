{"seed":3248549064,"processedDockerfileHash":"c2e9fb110e25b9cd44eb7195a2736b36","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   - - build (from parent directory)\n#   docker build -t fraudmarc-ce-install -f installer/Dockerfile .\n#   - - run\n#   docker run -it --env-file env.list --env-file installer/env.list fraudmarc-ce-install\n#   OR run pre-built image from public repository https://hub.docker.com/r/fraudmarc/fraudmarc-ce-install/:\n#   docker run -it --env-file env.list --env-file installer/env.list fraudmarc/fraudmarc-ce-install\n#   - - stop & remove all of your docker images in case you wasted a lot of space\n#   docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi -f $(docker images -q); docker images\nFROM golang:alpine AS builder\nRUN apk add git=2.38.4-r1 zip=3.0-r10 -Uuv \\\n && rm /var/cache/apk/*\nRUN (go get -d gopkg.in/mgutz/dat.v1 ;exit 0 )\nCOPY /database/dat.patch /\nWORKDIR $GOPATH/src/gopkg.in/mgutz/dat.v1\nRUN patch -p1 < /dat.patch\nCOPY /functions /\nRUN go get github.com/aws/aws-lambda-go/lambda github.com/aws/aws-sdk-go/service/lambda github.com/fraudmarc/fraudmarc-ce/backend/lib github.com/fraudmarc/fraudmarc-ce/database golang.org/x/text/encoding\nWORKDIR /receive\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o receive .\nRUN zip ../fraudmarc-ce-receive.zip ./receive\nWORKDIR /process\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o process .\nRUN zip ../fraudmarc-ce-process.zip ./process\nFROM alpine AS installer\nRUN apk add python py-pip jq=1.6-r2 -Uuv \\\n && pip install awscli==1.27.114 \\\n && apk --purge -v del py-pip \\\n && rm /var/cache/apk/*\nCOPY --from=builder /fraudmarc-ce-receive.zip /fraudmarc-ce-process.zip /\nCOPY /installer/lambda-assume-policy.json /\nCOPY /installer/inline-policy.json /\nCMD aws rds create-db-instance --db-name $REPORTING_DB_NAME --db-instance-identifier $REPORTING_DB_IDENTIFIER --allocated-storage 20 --db-instance-class db.t2.micro --engine postgres --master-username $REPORTING_DB_USER --master-user-password $REPORTING_DB_PASSWORD > /dev/null \\\n && echo \"Your Database has been launched! Check the AWS RDS Console -> Instances tab (fraudmarcce)\" \\\n && export AWS_ROLE_ARN=$( aws iam create-role --role-name FraudmarcCE --assume-role-policy-document file:///lambda-assume-policy.json | jq \".Role.Arn\" | tr -d \"\\\"\" ;) \\\n && sleep 6 \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess --role-name FraudmarcCE \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess --role-name FraudmarcCE \\\n && echo \"Your IAM Role has been created! Check the AWS IAM Console (FraudmarcCE)\" \\\n && export PROCESS_ARN=$( aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-process --memory 128 --timeout 300 --description \"Process DMARC Reports with IP Intelligence\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-process.zip --handler process | jq \".FunctionArn\" ;) \\\n && aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-receive --memory 1536 --timeout 300 --description \"Receive DMARC RUA Reports\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, ArnLambdaDmarcARResolveBulk=$PROCESS_ARN, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-receive.zip --handler receive | jq \".FunctionArn\" | xargs -I {} sed -i \"s/ARN/$PROCESS_ARN/g\" inline-policy.json \\\n && echo \"Your Lambda functions have been created! Check the AWS Lambda Console (fraudmarc-ce-receive/process)\" \\\n && aws iam put-role-policy --role-name FraudmarcCE --policy-name invokeProcessLambda --policy-document file:///inline-policy.json \\\n && echo \"Your inline-policy has been added to the FraudmarcCE role! Check the IAM Console\" \\\n && echo \"Your AWS Role, RDS, Lambdas has been setup. Fraudmarc CE installation complete.\"\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  - - build (from parent directory)\n#  docker build -t fraudmarc-ce-install -f installer/Dockerfile .\n#  - - run\n#  docker run -it --env-file env.list --env-file installer/env.list fraudmarc-ce-install\n#  OR run pre-built image from public repository https://hub.docker.com/r/fraudmarc/fraudmarc-ce-install/:\n#  docker run -it --env-file env.list --env-file installer/env.list fraudmarc/fraudmarc-ce-install\n#  - - stop & remove all of your docker images in case you wasted a lot of space\n#  docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi -f $(docker images -q); docker images\nFROM golang:alpine AS builder\nRUN apk -Uuv add git zip \\\n && rm /var/cache/apk/*\nRUN (go get -d gopkg.in/mgutz/dat.v1 ;exit 0 )\nCOPY /database/dat.patch /\nWORKDIR $GOPATH/src/gopkg.in/mgutz/dat.v1\nRUN patch -p1 < /dat.patch\nCOPY /functions /\nRUN go get github.com/aws/aws-lambda-go/lambda github.com/aws/aws-sdk-go/service/lambda github.com/fraudmarc/fraudmarc-ce/backend/lib github.com/fraudmarc/fraudmarc-ce/database golang.org/x/text/encoding\nWORKDIR /receive\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o receive .\nRUN zip ../fraudmarc-ce-receive.zip ./receive\nWORKDIR /process\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o process .\nRUN zip ../fraudmarc-ce-process.zip ./process\nFROM alpine AS installer\nRUN apk -Uuv add python py-pip jq \\\n && pip install awscli \\\n && apk --purge -v del py-pip \\\n && rm /var/cache/apk/*\nCOPY --from=builder /fraudmarc-ce-receive.zip /fraudmarc-ce-process.zip /\nCOPY /installer/lambda-assume-policy.json /\nCOPY /installer/inline-policy.json /\nCMD aws rds create-db-instance --db-name $REPORTING_DB_NAME --db-instance-identifier $REPORTING_DB_IDENTIFIER --allocated-storage 20 --db-instance-class db.t2.micro --engine postgres --master-username $REPORTING_DB_USER --master-user-password $REPORTING_DB_PASSWORD > /dev/null \\\n && echo \"Your Database has been launched! Check the AWS RDS Console -> Instances tab (fraudmarcce)\" \\\n && export AWS_ROLE_ARN=$( aws iam create-role --role-name FraudmarcCE --assume-role-policy-document file:///lambda-assume-policy.json | jq \".Role.Arn\" | tr -d \"\\\"\" ;) \\\n && sleep 6 \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess --role-name FraudmarcCE \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess --role-name FraudmarcCE \\\n && echo \"Your IAM Role has been created! Check the AWS IAM Console (FraudmarcCE)\" \\\n && export PROCESS_ARN=$( aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-process --memory 128 --timeout 300 --description \"Process DMARC Reports with IP Intelligence\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-process.zip --handler process | jq \".FunctionArn\" ;) \\\n && aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-receive --memory 1536 --timeout 300 --description \"Receive DMARC RUA Reports\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, ArnLambdaDmarcARResolveBulk=$PROCESS_ARN, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-receive.zip --handler receive | jq \".FunctionArn\" | xargs -I {} sed -i \"s/ARN/$PROCESS_ARN/g\" inline-policy.json \\\n && echo \"Your Lambda functions have been created! Check the AWS Lambda Console (fraudmarc-ce-receive/process)\" \\\n && aws iam put-role-policy --role-name FraudmarcCE --policy-name invokeProcessLambda --policy-document file:///inline-policy.json \\\n && echo \"Your inline-policy has been added to the FraudmarcCE role! Check the IAM Console\" \\\n && echo \"Your AWS Role, RDS, Lambdas has been setup. Fraudmarc CE installation complete.\"\n","injectedSmells":[],"originalDockerfileHash":"c0b6e9febfacff949ef5dcf4c1a0ecc8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   - - build (from parent directory)\n#   docker build -t fraudmarc-ce-install -f installer/Dockerfile .\n#   - - run\n#   docker run -it --env-file env.list --env-file installer/env.list fraudmarc-ce-install\n#   OR run pre-built image from public repository https://hub.docker.com/r/fraudmarc/fraudmarc-ce-install/:\n#   docker run -it --env-file env.list --env-file installer/env.list fraudmarc/fraudmarc-ce-install\n#   - - stop & remove all of your docker images in case you wasted a lot of space\n#   docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi -f $(docker images -q); docker images\nFROM golang:alpine AS builder\nRUN apk -Uuv add git zip \\\n && rm /var/cache/apk/*\nRUN (go get -d gopkg.in/mgutz/dat.v1 ;exit 0 )\nCOPY /database/dat.patch /\nWORKDIR $GOPATH/src/gopkg.in/mgutz/dat.v1\nRUN patch -p1 < /dat.patch\nCOPY /functions /\nRUN go get github.com/aws/aws-lambda-go/lambda github.com/aws/aws-sdk-go/service/lambda github.com/fraudmarc/fraudmarc-ce/backend/lib github.com/fraudmarc/fraudmarc-ce/database golang.org/x/text/encoding\nWORKDIR /receive\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o receive .\nRUN zip ../fraudmarc-ce-receive.zip ./receive\nWORKDIR /process\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-s -w -extldflags \"-static\"' -o process .\nRUN zip ../fraudmarc-ce-process.zip ./process\nFROM alpine AS installer\nRUN apk -Uuv add python py-pip jq \\\n && pip install awscli \\\n && apk --purge -v del py-pip \\\n && rm /var/cache/apk/*\nCOPY --from=builder /fraudmarc-ce-receive.zip /fraudmarc-ce-process.zip /\nCOPY /installer/lambda-assume-policy.json /\nCOPY /installer/inline-policy.json /\nCMD aws rds create-db-instance --db-name $REPORTING_DB_NAME --db-instance-identifier $REPORTING_DB_IDENTIFIER --allocated-storage 20 --db-instance-class db.t2.micro --engine postgres --master-username $REPORTING_DB_USER --master-user-password $REPORTING_DB_PASSWORD > /dev/null \\\n && echo \"Your Database has been launched! Check the AWS RDS Console -> Instances tab (fraudmarcce)\" \\\n && export AWS_ROLE_ARN=$( aws iam create-role --role-name FraudmarcCE --assume-role-policy-document file:///lambda-assume-policy.json | jq \".Role.Arn\" | tr -d \"\\\"\" ;) \\\n && sleep 6 \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess --role-name FraudmarcCE \\\n && aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess --role-name FraudmarcCE \\\n && echo \"Your IAM Role has been created! Check the AWS IAM Console (FraudmarcCE)\" \\\n && export PROCESS_ARN=$( aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-process --memory 128 --timeout 300 --description \"Process DMARC Reports with IP Intelligence\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-process.zip --handler process | jq \".FunctionArn\" ;) \\\n && aws lambda create-function --region $AWS_DEFAULT_REGION --function-name fraudmarc-ce-receive --memory 1536 --timeout 300 --description \"Receive DMARC RUA Reports\" --role $AWS_ROLE_ARN --environment Variables=\"{ ARRTable=$ARRTable, ARTable=$ARTable, BUCKET_NAME=$BUCKET_NAME, DRE_TABLE=$DRE_TABLE, ArnLambdaDmarcARResolveBulk=$PROCESS_ARN, REPORTING_DB_NAME=$REPORTING_DB_NAME, REPORTING_DB_USER=$REPORTING_DB_USER, REPORTING_DB_PASSWORD=$REPORTING_DB_PASSWORD, REPORTING_DB_HOST=$REPORTING_DB_HOST, REPORTING_DB_SSL=$REPORTING_DB_SSL, REPORTING_DB_MAX_TIME=$REPORTING_DB_MAX_TIME }\" --runtime go1.x --zip-file fileb://fraudmarc-ce-receive.zip --handler receive | jq \".FunctionArn\" | xargs -I {} sed -i \"s/ARN/$PROCESS_ARN/g\" inline-policy.json \\\n && echo \"Your Lambda functions have been created! Check the AWS Lambda Console (fraudmarc-ce-receive/process)\" \\\n && aws iam put-role-policy --role-name FraudmarcCE --policy-name invokeProcessLambda --policy-document file:///inline-policy.json \\\n && echo \"Your inline-policy has been added to the FraudmarcCE role! Check the IAM Console\" \\\n && echo \"Your AWS Role, RDS, Lambdas has been setup. Fraudmarc CE installation complete.\"\n","originalDockerfileUglifiedHash":"03ee408c7183911e878b9cc59c7988fc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/48e04e52b7543f068a1146732504ed6494149823.dockerfile"}