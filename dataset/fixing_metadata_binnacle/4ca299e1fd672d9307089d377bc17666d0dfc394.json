{"seed":877136883,"processedDockerfileHash":"9a12d23fa274ca618d28cae10f6af7cd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM buildpack-deps:xenial\nMAINTAINER Kenta Murata mrkn\n#  ##############################################################\n#   Ruby based on docker-library/ruby\n#  ##############################################################\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.4\"\nENV RUBY_VERSION=\"2.4.0\"\nENV RUBY_DOWNLOAD_SHA256=\"3a87fef45cba48b9322236be60c455c13fd4220184ce7287600361319bb63690\"\nENV RUBYGEMS_VERSION=\"2.6.10\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc --enable-shared \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.14.5\"\nRUN gem install bundler --version 2.4.12\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n#  ##############################################################\n#   Python based on docker-library/python\n#  ##############################################################\n#   ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#   runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl=8.6.0+9 tk=8.6.0+9 -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.0\"\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n#  ##############################################################\n#   pycall\n#  ##############################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends libczmq-dev=3.0.2-5 -y\nRUN pip3 install jupyter\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install pandas\nRUN pip3 install matplotlib\nRUN pip3 install seaborn\nRUN pip3 install scikit-learn\nRUN pip3 install gensim\nRUN pip3 install nltk\nRUN pip3 install statsmodels\nRUN pip3 install xray\nRUN mkdir -p /app /notebooks/examples /notebooks/local\nWORKDIR /app\nCOPY docker/Gemfile /app\nCOPY docker/start.sh /app\nRUN bundle install\nRUN bundle exec iruby register\n#   Deploy matplotlib's examples\nRUN mkdir -p /tmp \\\n && curl -fsSL https://github.com/mrkn/matplotlib.rb/archive/master.tar.gz | tar -xzf - -C /tmp \\\n && mv /tmp/matplotlib.rb-master/examples /notebooks/examples/matplotlib \\\n && rm -rf /tmp/matplotlib.rb-master\nCMD sh /app/start.sh\nEXPOSE 8888/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM buildpack-deps:xenial\nMAINTAINER Kenta Murata mrkn\n# ##############################################################\n#  Ruby based on docker-library/ruby\n# ##############################################################\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.4\"\nENV RUBY_VERSION=\"2.4.0\"\nENV RUBY_DOWNLOAD_SHA256=\"3a87fef45cba48b9322236be60c455c13fd4220184ce7287600361319bb63690\"\nENV RUBYGEMS_VERSION=\"2.6.10\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc --enable-shared \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.14.5\"\nRUN gem install bundler\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n# ##############################################################\n#  Python based on docker-library/python\n# ##############################################################\n#  ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#  http://bugs.python.org/issue19846\n#  > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#  runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl tk -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.0\"\n#  if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth ( ( -type d -a -name test -o -name tests ) -o ( -type f -a -name '*.pyc' -o -name '*.pyo' ) ) -exec rm -rf '{}' + \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && rm -rf /usr/src/python ~/.cache\n#  make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n# ##############################################################\n#  pycall\n# ##############################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends libczmq-dev -y\nRUN pip3 install jupyter\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install pandas\nRUN pip3 install matplotlib\nRUN pip3 install seaborn\nRUN pip3 install scikit-learn\nRUN pip3 install gensim\nRUN pip3 install nltk\nRUN pip3 install statsmodels\nRUN pip3 install xray\nRUN mkdir -p /app /notebooks/examples /notebooks/local\nWORKDIR /app\nADD docker/Gemfile /app\nADD docker/start.sh /app\nRUN bundle install\nRUN bundle exec iruby register\n#  Deploy matplotlib's examples\nRUN mkdir -p /tmp \\\n && curl -fsSL https://github.com/mrkn/matplotlib.rb/archive/master.tar.gz | tar -xzf - -C /tmp \\\n && mv /tmp/matplotlib.rb-master/examples /notebooks/examples/matplotlib \\\n && rm -rf /tmp/matplotlib.rb-master\nCMD sh /app/start.sh\nEXPOSE 8888/tcp\n","injectedSmells":[],"originalDockerfileHash":"4d98e9713e00cac9d4bc518a34480bf3","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM buildpack-deps:xenial\nMAINTAINER Kenta Murata mrkn\n#  ##############################################################\n#   Ruby based on docker-library/ruby\n#  ##############################################################\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.4\"\nENV RUBY_VERSION=\"2.4.0\"\nENV RUBY_DOWNLOAD_SHA256=\"3a87fef45cba48b9322236be60c455c13fd4220184ce7287600361319bb63690\"\nENV RUBYGEMS_VERSION=\"2.6.10\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\nRUN set -ex \\\n && buildDeps=' bison libgdbm-dev ruby ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && ./configure --disable-install-doc --enable-shared \\\n && make -j\"$( nproc ;)\" \\\n && make install \\\n && apt-get purge -y --auto-remove $buildDeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && gem update --system \"$RUBYGEMS_VERSION\"\nENV BUNDLER_VERSION=\"1.14.5\"\nRUN gem install bundler\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_BIN=\"$GEM_HOME/bin\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\nENV PATH=\"$BUNDLE_BIN:$PATH\"\nRUN mkdir -p \"$GEM_HOME\" \"$BUNDLE_BIN\" \\\n && chmod 777 \"$GEM_HOME\" \"$BUNDLE_BIN\"\n#  ##############################################################\n#   Python based on docker-library/python\n#  ##############################################################\n#   ensure local python is preferred over distribution python\nENV PATH=\"/usr/local/bin:$PATH\"\n#   http://bugs.python.org/issue19846\n#   > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG=\"C.UTF-8\"\n#   runtime dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends tcl tk -y \\\n && rm -rf /var/lib/apt/lists/*\nENV GPG_KEY=\"0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\"\nENV PYTHON_VERSION=\"3.6.0\"\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"9.0.1\"\nRUN set -ex \\\n && buildDeps=' tcl-dev tk-dev ' \\\n && apt-get update \\\n && apt-get install --no-install-recommends $buildDeps -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n && gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n && rm -r \"$GNUPGHOME\" python.tar.xz.asc \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && ./configure --enable-loadable-sqlite-extensions --enable-shared \\\n && make -j$( nproc ;) \\\n && make install \\\n && ldconfig \\\n && if [ ! -e /usr/local/bin/pip3 ] ; then : \\\n && wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \\\n && python3 /tmp/get-pip.py \"pip==$PYTHON_PIP_VERSION\" \\\n && rm /tmp/get-pip.py ; fi \\\n && pip3 install --no-cache-dir --upgrade --force-reinstall \"pip==$PYTHON_PIP_VERSION\" \\\n && [ \"$( pip list | tac | tac | awk -F '[ ()]+' '$1 == \"pip\" { print $2; exit }' ;)\" = \"$PYTHON_PIP_VERSION\" ] \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && { [ -e easy_install ] || ln -s easy_install-* easy_install ; } \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n#  ##############################################################\n#   pycall\n#  ##############################################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends libczmq-dev -y\nRUN pip3 install jupyter\nRUN pip3 install numpy\nRUN pip3 install scipy\nRUN pip3 install pandas\nRUN pip3 install matplotlib\nRUN pip3 install seaborn\nRUN pip3 install scikit-learn\nRUN pip3 install gensim\nRUN pip3 install nltk\nRUN pip3 install statsmodels\nRUN pip3 install xray\nRUN mkdir -p /app /notebooks/examples /notebooks/local\nWORKDIR /app\nADD docker/Gemfile /app\nADD docker/start.sh /app\nRUN bundle install\nRUN bundle exec iruby register\n#   Deploy matplotlib's examples\nRUN mkdir -p /tmp \\\n && curl -fsSL https://github.com/mrkn/matplotlib.rb/archive/master.tar.gz | tar -xzf - -C /tmp \\\n && mv /tmp/matplotlib.rb-master/examples /notebooks/examples/matplotlib \\\n && rm -rf /tmp/matplotlib.rb-master\nCMD sh /app/start.sh\nEXPOSE 8888/tcp\n","originalDockerfileUglifiedHash":"96543ded2371b77cf390e9ef1abd9ff4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4ca299e1fd672d9307089d377bc17666d0dfc394.dockerfile"}