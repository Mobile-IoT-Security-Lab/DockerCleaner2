{"seed":684219238,"processedDockerfileHash":"a91a567989ccf24c9d93aae74f8405ab","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 autoconf=2.69-11 make=4.1-9.1ubuntu1 git=1:2.17.1-1ubuntu0.17 wget=1.19.4-1ubuntu2.2 pciutils=1:3.5.2-1ubuntu1.1 cpio=2.12+dfsg-6ubuntu0.18.04.4 libtool=2.4.6-2 lsb-release=9.20170808ubuntu1 ca-certificates=20211016ubuntu0.18.04.1 pkg-config=0.29.1-0ubuntu2 bison=2:3.0.4.dfsg-1build1 flex=2.6.4-6 -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install --no-install-recommends automake=1:1.15.1-3ubuntu2 -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev=2.0.11-2.1ubuntu0.1 -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=252ff3d18bc1997a5af989ad4e67e025c93dbf68\nARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC.git\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=3009e99f32e3476e028aadd17a265630f80a8e36\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1.git\nARG SVT_AV1_MP4_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-mp4-and-mkv-webm-container-support-on-SVT-AV1.patch\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1 \\\n && git checkout ${SVT_AV1_VER} \\\n && wget -O - ${SVT_AV1_MP4_PATCH_REPO} | patch -p1 \\\n && cd Build/linux \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  include(transform360.m4)\n#   Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-18.3.0\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\nRUN wget -O - ${GMMLIB_REPO} | tar xz \\\n && mv gmmlib-${GMMLIB_VER} gmmlib\n#   Build libva\nARG LIBVA_VER=2.3.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev=2.4.101-2~18.04.1 libx11-dev=2:1.6.4-3ubuntu0.4 xorg-dev=1:7.7+19ubuntu7.1 libgl1-mesa-dev=20.0.8-0ubuntu1~18.04.1 -y -q\nRUN wget -O - ${LIBVA_REPO} | tar xz \\\n && cd libva-${LIBVA_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build media driver\nARG MEDIA_DRIVER_VER=intel-media-kbl-19.1.0\nARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev=2.4.101-2~18.04.1 libpciaccess-dev=0.14-1 libx11-dev=2:1.6.4-3ubuntu0.4 xorg-dev=1:7.7+19ubuntu7.1 libgl1-mesa-dev=20.0.8-0ubuntu1~18.04.1 -y -q\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz \\\n && mv media-driver-${MEDIA_DRIVER_VER} media-driver \\\n && mkdir -p media-driver/build \\\n && cd media-driver/build \\\n && cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && mv MediaSDK-${MSDK_VER} MediaSDK \\\n && mkdir -p MediaSDK/build \\\n && cd MediaSDK/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include/mfx -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && rm -rf /home/build/usr/samples \\\n && rm -rf /home/build/usr/plugins \\\n && make install\n#   Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nARG FFMPEG_HW_LOOP_PATCH_REPO=https://patchwork.ffmpeg.org/patch/8173/raw\nARG FFMPEG_ENCODE_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11179/raw\nARG FFMPEG_SVT_AV1_MP4_PATHC_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-SVT-AV1-mp4-and-mkv-webm-container-support-on-FFmpeg.patch\n#   ARG FFMPEG_RTMP_WORKAROUD_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/Check_rtmp_packet_timestamp_workaround_ffmpeg.patch\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libvdpau-dev=1.1.1-3ubuntu1 libsdl2-dev=2.0.8+dfsg1-1ubuntu1.18.04.4 libxcb1-dev=1.13-2~ubuntu18.04 libxcb-shm0-dev=1.13-2~ubuntu18.04 libxcb-xfixes0-dev=1.13-2~ubuntu18.04 zlib1g-dev=1:1.2.11.dfsg-0ubuntu2.2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_HW_LOOP_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_ENCODE_THREAD_PATCH_REPO} | patch -p1\n#     wget -O - ${FFMPEG_RTMP_WORKAROUD_REPO} | patch -p1\n#   Patch FFmpeg source for SVT-HEVC and SVT-AV1\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch \\\n && patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch \\\n && wget -O - ${FFMPEG_SVT_AV1_MP4_PATHC_REPO} | patch -p1\n#   Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-openssl --enable-nonfree --enable-libdrm --enable-libmfx --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#   Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {}\nFROM ubuntu:18.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#   Prerequisites\nRUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1=2:1.0.11-1 libxcb-shm0=1.13-2~ubuntu18.04 libxcb-shape0=1.13-2~ubuntu18.04 libxcb-xfixes0=1.13-2~ubuntu18.04 libsdl2-2.0-0=2.0.8+dfsg1-1ubuntu1.18.04.4 libasound2=1.1.3-5ubuntu0.6 libvdpau1=1.1.1-3ubuntu1 libnuma1=2.0.11-2.1ubuntu0.1 libssl1.1=1.1.1-1ubuntu2.1~18.04.21 libpciaccess0=0.14-1 libdrm-dev=2.4.101-2~18.04.1 python3-tornado=4.5.3-1ubuntu0.2 python3-kafka=1.3.2-0ubuntu1 python3-bs4=4.6.0-1 python3-kazoo=2.2.1-1ubuntu1 vim=2:8.0.1453-1ubuntu1.11 -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\nCOPY *.ini /home/\nCOPY *.py /home/\nENV LIBVA_DRIVERS_PATH=\"/usr/lib/x86_64-linux-gnu/dri\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nCMD [\"/bin/bash\", \"-c\", \"/home/main.py\"]\nVOLUME [\"/var/www/archive\",\"/var/www/dash\",\"/var/www/hls\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04 AS build\nWORKDIR /home\n#  COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex -y -q\n#  Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" \\\n && make -j8 \\\n && make install\n#  Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#  Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#  Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#  Fetch SVT-HEVC\nARG SVT_HEVC_VER=252ff3d18bc1997a5af989ad4e67e025c93dbf68\nARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC.git\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Fetch SVT-AV1\nARG SVT_AV1_VER=3009e99f32e3476e028aadd17a265630f80a8e36\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1.git\nARG SVT_AV1_MP4_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-mp4-and-mkv-webm-container-support-on-SVT-AV1.patch\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1 \\\n && git checkout ${SVT_AV1_VER} \\\n && wget -O - ${SVT_AV1_MP4_PATCH_REPO} | patch -p1 \\\n && cd Build/linux \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n# include(transform360.m4)\n#  Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-18.3.0\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\nRUN wget -O - ${GMMLIB_REPO} | tar xz \\\n && mv gmmlib-${GMMLIB_VER} gmmlib\n#  Build libva\nARG LIBVA_VER=2.3.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev libx11-dev xorg-dev libgl1-mesa-dev -y -q\nRUN wget -O - ${LIBVA_REPO} | tar xz \\\n && cd libva-${LIBVA_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build media driver\nARG MEDIA_DRIVER_VER=intel-media-kbl-19.1.0\nARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev libpciaccess-dev libx11-dev xorg-dev libgl1-mesa-dev -y -q\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz \\\n && mv media-driver-${MEDIA_DRIVER_VER} media-driver \\\n && mkdir -p media-driver/build \\\n && cd media-driver/build \\\n && cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && mv MediaSDK-${MSDK_VER} MediaSDK \\\n && mkdir -p MediaSDK/build \\\n && cd MediaSDK/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include/mfx -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && rm -rf /home/build/usr/samples \\\n && rm -rf /home/build/usr/plugins \\\n && make install\n#  Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nARG FFMPEG_HW_LOOP_PATCH_REPO=https://patchwork.ffmpeg.org/patch/8173/raw\nARG FFMPEG_ENCODE_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11179/raw\nARG FFMPEG_SVT_AV1_MP4_PATHC_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-SVT-AV1-mp4-and-mkv-webm-container-support-on-FFmpeg.patch\n#  ARG FFMPEG_RTMP_WORKAROUD_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/Check_rtmp_packet_timestamp_workaround_ffmpeg.patch\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libvdpau-dev libsdl2-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_HW_LOOP_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_ENCODE_THREAD_PATCH_REPO} | patch -p1\n#    wget -O - ${FFMPEG_RTMP_WORKAROUD_REPO} | patch -p1\n#  Patch FFmpeg source for SVT-HEVC and SVT-AV1\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch \\\n && patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch \\\n && wget -O - ${FFMPEG_SVT_AV1_MP4_PATHC_REPO} | patch -p1\n#  Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-openssl --enable-nonfree --enable-libdrm --enable-libmfx --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#  Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {} ;\nFROM ubuntu:18.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#  Prerequisites\nRUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libssl1.1 libpciaccess0 libdrm-dev python3-tornado python3-kafka python3-bs4 python3-kazoo vim -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#  Install\nCOPY --from=build /home/build /\nCOPY *.ini /home/\nCOPY *.py /home/\nENV LIBVA_DRIVERS_PATH=\"/usr/lib/x86_64-linux-gnu/dri\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nCMD [\"/bin/bash\", \"-c\", \"/home/main.py\"]\nVOLUME [\"/var/www/archive\",\"/var/www/dash\",\"/var/www/hls\"]\n","injectedSmells":[],"originalDockerfileHash":"28f8fd08309616ed94de88d728c85b66","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04 AS build\nWORKDIR /home\n#   COMMON BUILD TOOLS\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends build-essential autoconf make git wget pciutils cpio libtool lsb-release ca-certificates pkg-config bison flex -y -q\n#   Install cmake\nARG CMAKE_VER=3.13.1\nARG CMAKE_REPO=https://cmake.org/files\nRUN wget -O - ${CMAKE_REPO}/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz | tar xz \\\n && cd cmake-${CMAKE_VER} \\\n && ./bootstrap --prefix=\"/usr\" \\\n && make -j8 \\\n && make install\n#   Install automake, use version 1.14 on CentOS\nARG AUTOMAKE_VER=1.14\nARG AUTOMAKE_REPO=https://ftp.gnu.org/pub/gnu/automake/automake-${AUTOMAKE_VER}.tar.xz\nRUN apt-get install automake -y -q\n#   Build NASM\nARG NASM_VER=2.13.03\nARG NASM_REPO=https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2\nRUN wget ${NASM_REPO} \\\n && tar -xaf nasm* \\\n && cd nasm-${NASM_VER} \\\n && ./autogen.sh \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build YASM\nARG YASM_VER=1.3.0\nARG YASM_REPO=https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz\nRUN wget -O - ${YASM_REPO} | tar xz \\\n && cd yasm-${YASM_VER} \\\n && sed -i \"s/) ytasm.*/)/\" Makefile.in \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install\n#   Build ogg\nARG OGG_VER=1.3.3\nARG OGG_REPO=https://downloads.xiph.org/releases/ogg/libogg-${OGG_VER}.tar.xz\nRUN wget -O - ${OGG_REPO} | tar xJ \\\n && cd libogg-${OGG_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vorbis\nARG VORBIS_VER=1.3.6\nARG VORBIS_REPO=https://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VER}.tar.xz\nRUN wget -O - ${VORBIS_REPO} | tar xJ \\\n && cd libvorbis-${VORBIS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build mp3lame\nARG MP3LAME_VER=3.100\nARG MP3LAME_REPO=https://sourceforge.net/projects/lame/files/lame/${MP3LAME_VER}/lame-${MP3LAME_VER}.tar.gz\nRUN wget -O - ${MP3LAME_REPO} | tar xz \\\n && cd lame-${MP3LAME_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --enable-nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build fdk-aac\nARG FDK_AAC_VER=v0.1.6\nARG FDK_AAC_REPO=https://github.com/mstorsjo/fdk-aac/archive/${FDK_AAC_VER}.tar.gz\nRUN wget -O - ${FDK_AAC_REPO} | tar xz \\\n && mv fdk-aac-${FDK_AAC_VER#v} fdk-aac \\\n && cd fdk-aac \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build opus\nARG OPUS_VER=1.2.1\nARG OPUS_REPO=https://archive.mozilla.org/pub/opus/opus-${OPUS_VER}.tar.gz\nRUN wget -O - ${OPUS_REPO} | tar xz \\\n && cd opus-${OPUS_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build vpx\nARG VPX_VER=tags/v1.7.0\nARG VPX_REPO=https://chromium.googlesource.com/webm/libvpx.git\nRUN git clone ${VPX_REPO} \\\n && cd libvpx \\\n && git checkout ${VPX_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build AOM\nARG AOM_VER=b6f1767eedbaddeb1ff5aa409a710ef61078640e\nARG AOM_REPO=https://aomedia.googlesource.com/aom\nRUN git clone ${AOM_REPO} \\\n && mkdir aom/aom_build \\\n && cd aom/aom_build \\\n && git checkout ${AOM_VER} \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_NASM=ON -DENABLE_TESTS=OFF -DENABLE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=\"/usr\" -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu .. \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x264\nARG X264_VER=stable\nARG X264_REPO=https://github.com/mirror/x264\nRUN git clone ${X264_REPO} \\\n && cd x264 \\\n && git checkout ${X264_VER} \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --enable-shared \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Build x265\nARG X265_VER=2.9\nARG X265_REPO=https://github.com/videolan/x265/archive/${X265_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libnuma-dev -y -q\nRUN wget -O - ${X265_REPO} | tar xz \\\n && mv x265-${X265_VER} x265 \\\n && cd x265/build/linux \\\n && cmake -DBUILD_SHARED_LIBS=ON -DENABLE_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib/x86_64-linux-gnu ../../source \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\" \\\n && make install\n#   Fetch SVT-HEVC\nARG SVT_HEVC_VER=252ff3d18bc1997a5af989ad4e67e025c93dbf68\nARG SVT_HEVC_REPO=https://github.com/OpenVisualCloud/SVT-HEVC.git\nRUN git clone ${SVT_HEVC_REPO} \\\n && cd SVT-HEVC/Build/linux \\\n && git checkout ${SVT_HEVC_VER} \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Fetch SVT-AV1\nARG SVT_AV1_VER=3009e99f32e3476e028aadd17a265630f80a8e36\nARG SVT_AV1_REPO=https://github.com/OpenVisualCloud/SVT-AV1.git\nARG SVT_AV1_MP4_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-mp4-and-mkv-webm-container-support-on-SVT-AV1.patch\nRUN git clone ${SVT_AV1_REPO} \\\n && cd SVT-AV1 \\\n && git checkout ${SVT_AV1_VER} \\\n && wget -O - ${SVT_AV1_MP4_PATCH_REPO} | patch -p1 \\\n && cd Build/linux \\\n && mkdir -p ../../Bin/Release \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu -DCMAKE_ASM_NASM_COMPILER=yasm ../.. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#  include(transform360.m4)\n#   Fetch gmmlib\nARG GMMLIB_VER=intel-gmmlib-18.3.0\nARG GMMLIB_REPO=https://github.com/intel/gmmlib/archive/${GMMLIB_VER}.tar.gz\nRUN wget -O - ${GMMLIB_REPO} | tar xz \\\n && mv gmmlib-${GMMLIB_VER} gmmlib\n#   Build libva\nARG LIBVA_VER=2.3.0\nARG LIBVA_REPO=https://github.com/intel/libva/archive/${LIBVA_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev libx11-dev xorg-dev libgl1-mesa-dev -y -q\nRUN wget -O - ${LIBVA_REPO} | tar xz \\\n && cd libva-${LIBVA_VER} \\\n && ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build media driver\nARG MEDIA_DRIVER_VER=intel-media-kbl-19.1.0\nARG MEDIA_DRIVER_REPO=https://github.com/VCDP/media-driver/archive/${MEDIA_DRIVER_VER}.tar.gz\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libdrm-dev libpciaccess-dev libx11-dev xorg-dev libgl1-mesa-dev -y -q\nRUN wget -O - ${MEDIA_DRIVER_REPO} | tar xz \\\n && mv media-driver-${MEDIA_DRIVER_VER} media-driver \\\n && mkdir -p media-driver/build \\\n && cd media-driver/build \\\n && cmake -DBUILD_TYPE=release -DBUILD_ALONG_WITH_CMRTLIB=1 -DMEDIA_VERSION=\"2.0.0\" -DBS_DIR_GMMLIB=/home/gmmlib/Source/GmmLib -DBS_DIR_COMMON=/home/gmmlib/Source/Common -DBS_DIR_INC=/home/gmmlib/Source/inc -DBS_DIR_MEDIA=/home/media-driver -Wno-dev -DCMAKE_INSTALL_PREFIX=/usr .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && make install\n#   Build Intel(R) Media SDK\nARG MSDK_VER=MSS-KBL-2019-R1\nARG MSDK_REPO=https://github.com/Intel-Media-SDK/MediaSDK/archive/${MSDK_VER}.tar.gz\nRUN wget -O - ${MSDK_REPO} | tar xz \\\n && mv MediaSDK-${MSDK_VER} MediaSDK \\\n && mkdir -p MediaSDK/build \\\n && cd MediaSDK/build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_INCLUDEDIR=include/mfx -DBUILD_SAMPLES=OFF -DENABLE_OPENCL=OFF -Wno-dev .. \\\n && make -j8 \\\n && make install DESTDIR=/home/build \\\n && rm -rf /home/build/usr/samples \\\n && rm -rf /home/build/usr/plugins \\\n && make install\n#   Fetch FFmpeg source\nARG FFMPEG_VER=n4.1\nARG FFMPEG_REPO=https://github.com/FFmpeg/FFmpeg/archive/${FFMPEG_VER}.tar.gz\nARG FFMPEG_FLV_PATCH_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/The-RTMP-protocol-extensions-for-H.265-HEVC.patch\nARG FFMPEG_1TN_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11625/raw\nARG FFMPEG_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11035/raw\nARG FFMPEG_HW_LOOP_PATCH_REPO=https://patchwork.ffmpeg.org/patch/8173/raw\nARG FFMPEG_ENCODE_THREAD_PATCH_REPO=https://patchwork.ffmpeg.org/patch/11179/raw\nARG FFMPEG_SVT_AV1_MP4_PATHC_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/0001-Enable-SVT-AV1-mp4-and-mkv-webm-container-support-on-FFmpeg.patch\n#   ARG FFMPEG_RTMP_WORKAROUD_REPO=https://raw.githubusercontent.com/VCDP/CDN/master/Check_rtmp_packet_timestamp_workaround_ffmpeg.patch\nRUN DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libvdpau-dev libsdl2-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev zlib1g-dev libssl-dev -y -q\nRUN wget -O - ${FFMPEG_REPO} | tar xz \\\n && mv FFmpeg-${FFMPEG_VER} FFmpeg \\\n && cd FFmpeg \\\n && wget -O - ${FFMPEG_FLV_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_1TN_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_THREAD_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_HW_LOOP_PATCH_REPO} | patch -p1 \\\n && wget -O - ${FFMPEG_ENCODE_THREAD_PATCH_REPO} | patch -p1\n#     wget -O - ${FFMPEG_RTMP_WORKAROUD_REPO} | patch -p1\n#   Patch FFmpeg source for SVT-HEVC and SVT-AV1\nRUN cd /home/FFmpeg \\\n && patch -p1 < ../SVT-HEVC/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch \\\n && patch -p1 < ../SVT-AV1/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1-with-svt-hevc.patch \\\n && wget -O - ${FFMPEG_SVT_AV1_MP4_PATHC_REPO} | patch -p1\n#   Compile FFmpeg\nRUN cd /home/FFmpeg \\\n && ./configure --prefix=\"/usr\" --libdir=/usr/lib/x86_64-linux-gnu --extra-libs=\"-lpthread -lm\" --enable-shared --enable-gpl --enable-openssl --enable-nonfree --enable-libdrm --enable-libmfx --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libaom --enable-libsvthevc --enable-libsvtav1 \\\n && make -j8 \\\n && make install DESTDIR=\"/home/build\"\n#   Clean up after build\nRUN rm -rf /home/build/usr/include \\\n && rm -rf /home/build/usr/share/doc \\\n && rm -rf /home/build/usr/share/gtk-doc \\\n && rm -rf /home/build/usr/share/man \\\n && find /home/build -name \"*.a\" -exec rm -f {}\nFROM ubuntu:18.04\nLABEL Description=\"This is the base image for FFMPEG Ubuntu 18.04 LTS\"\nLABEL Vendor=\"Intel Corporation\"\nWORKDIR /home\n#   Prerequisites\nRUN ln -sf /usr/share/zoneinfo/UTC /etc/localtime \\\n && DEBIAN_FRONTEND=noninteractive apt-get update \\\n && apt-get install --no-install-recommends libxv1 libxcb-shm0 libxcb-shape0 libxcb-xfixes0 libsdl2-2.0-0 libasound2 libvdpau1 libnuma1 libssl1.1 libpciaccess0 libdrm-dev python3-tornado python3-kafka python3-bs4 python3-kazoo vim -y -q \\\n && rm -rf /var/lib/apt/lists/*\n#   Install\nCOPY --from=build /home/build /\nCOPY *.ini /home/\nCOPY *.py /home/\nENV LIBVA_DRIVERS_PATH=\"/usr/lib/x86_64-linux-gnu/dri\"\nENV LIBVA_DRIVER_NAME=\"iHD\"\nCMD [\"/bin/bash\", \"-c\", \"/home/main.py\"]\nVOLUME [\"/var/www/archive\",\"/var/www/dash\",\"/var/www/hls\"]\n","originalDockerfileUglifiedHash":"b3bb57a18d4ec228dbb67de0266ad49b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/64bbb4d1977fca9af4e3baf9742bd0f21c15d7ee.dockerfile"}