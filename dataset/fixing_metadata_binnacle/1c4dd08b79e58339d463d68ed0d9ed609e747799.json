{"seed":4216138751,"processedDockerfileHash":"ca50d082b3c109a059cb7f1a9d6f1d15","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Define Base Image\n#   FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends git cmake build-essential libboost-program-options-dev libboost-filesystem-dev libboost-graph-dev libboost-regex-dev libboost-system-dev libboost-test-dev libeigen3-dev libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev qtbase5-dev libqt5opengl5-dev libcgal-dev libcgal-qt5-dev -y\n#   Install ceres solver\nRUN cd /opt\nWORKDIR /opt\nRUN apt-get install --no-install-recommends libatlas-base-dev libsuitesparse-dev libgoogle-glog-dev libeigen3-dev libsuitesparse-dev -y\nRUN git clone https://ceres-solver.googlesource.com/ceres-solver\nRUN cd ceres-solver\nWORKDIR /opt/ceres-solver\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/ceres-solver/build\nRUN cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF\nRUN make\nRUN make install\n#   Install Colmap\nRUN cd /opt\nWORKDIR /opt\nRUN git clone https://github.com/colmap/colmap\nRUN cd colmap\nWORKDIR /opt/colmap\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/colmap/build\nRUN cmake ..\nRUN make\nRUN make install\nRUN cd /\n#   RUN mkdir -p /home/app\n#   RUN mkdir /home/app/data\n#   # Specify working directory\n#   WORKDIR /home/app\n#   # Copy script from Host machine to working directory of the container\n#   COPY colmap.sh .\n#   # Specify entry point of the container\n#   ENTRYPOINT [\"sh\", \"colmap.sh\"]\n#   Pick up some TF dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl libfreetype6-dev libpng12-dev libzmq3-dev ffmpeg pkg-config python python-dev rsync software-properties-common unzip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipython==8.12.0 --no-cache-dir --upgrade \\\n && pip install ipykernel==6.22.0 jupyter==1.0.0 jupyterlab==3.6.3 matplotlib==3.7.1 numpy==1.24.2 scipy==1.10.1 sklearn==0.0.post4 pandas==2.0.0 Pillow==9.5.0 scikit-image==0.20.0 imageio==2.4.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow CPU version from central repo\nRUN pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.13.1-cp27-none-linux_x86_64.whl --no-cache-dir\n#   https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.0.1-cp27-none-linux_x86_64.whl\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\n#   Install OpenCV\nRUN apt-get update \\\n && apt-get install --no-install-recommends libopencv-dev python-opencv -y \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   Install GLFW\nRUN apt-get update \\\n && apt-get install --no-install-recommends libglfw3-dev -y\nRUN apt-get install --no-install-recommends imagemagick -y\n#   Expose Ports for Tensorboard (6006)\nEXPOSE 6006/tcp\n#   #Jupyter notebook related configs\n#   COPY jupyter_notebook_config.py /root/.jupyter/\nEXPOSE 8888/tcp\n#   # Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#   COPY run_jupyter.sh /home/\n#   #Adding flask\n#   RUN pip install flask\n#   EXPOSE 5000\nRUN mkdir -p /workspace\nWORKDIR /workspace\nRUN chmod -R a+w /workspace\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Define Base Image\n#  FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n#  Install dependencies\nRUN apt-get update \\\n && apt-get install git cmake build-essential libboost-program-options-dev libboost-filesystem-dev libboost-graph-dev libboost-regex-dev libboost-system-dev libboost-test-dev libeigen3-dev libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev qtbase5-dev libqt5opengl5-dev libcgal-dev libcgal-qt5-dev -y\n#  Install ceres solver\nRUN cd /opt\nWORKDIR /opt\nRUN apt-get install libatlas-base-dev libsuitesparse-dev libgoogle-glog-dev libeigen3-dev libsuitesparse-dev -y\nRUN git clone https://ceres-solver.googlesource.com/ceres-solver\nRUN cd ceres-solver\nWORKDIR /opt/ceres-solver\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/ceres-solver/build\nRUN cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF\nRUN make\nRUN make install\n#  Install Colmap\nRUN cd /opt\nWORKDIR /opt\nRUN git clone https://github.com/colmap/colmap\nRUN cd colmap\nWORKDIR /opt/colmap\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/colmap/build\nRUN cmake ..\nRUN make\nRUN make install\nRUN cd /\n#  RUN mkdir -p /home/app\n#  RUN mkdir /home/app/data\n#  # Specify working directory\n#  WORKDIR /home/app\n#  # Copy script from Host machine to working directory of the container\n#  COPY colmap.sh .\n#  # Specify entry point of the container\n#  ENTRYPOINT [\"sh\", \"colmap.sh\"]\n#  Pick up some TF dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl libfreetype6-dev libpng12-dev libzmq3-dev ffmpeg pkg-config python python-dev rsync software-properties-common unzip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install ipykernel jupyter jupyterlab matplotlib numpy scipy sklearn pandas Pillow scikit-image imageio==2.4.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Install TensorFlow CPU version from central repo\nRUN pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.13.1-cp27-none-linux_x86_64.whl --no-cache-dir\n#  https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.0.1-cp27-none-linux_x86_64.whl\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\n#  Install OpenCV\nRUN apt-get update \\\n && apt-get install libopencv-dev python-opencv -y \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#  Install GLFW\nRUN apt-get update \\\n && apt-get install libglfw3-dev -y\nRUN apt-get install imagemagick -y\n#  Expose Ports for Tensorboard (6006)\nEXPOSE 6006/tcp\n#  #Jupyter notebook related configs\n#  COPY jupyter_notebook_config.py /root/.jupyter/\nEXPOSE 8888/tcp\n#  # Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#  COPY run_jupyter.sh /home/\n#  #Adding flask\n#  RUN pip install flask\n#  EXPOSE 5000\nRUN mkdir -p /workspace\nWORKDIR /workspace\nRUN chmod -R a+w /workspace\n","injectedSmells":[],"originalDockerfileHash":"c783d0035252bc8de1b4f803fb4d2bff","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Define Base Image\n#   FROM nvidia/cuda:9.1-cudnn7-devel-ubuntu16.04\nFROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04\n#   Install dependencies\nRUN apt-get update \\\n && apt-get install git cmake build-essential libboost-program-options-dev libboost-filesystem-dev libboost-graph-dev libboost-regex-dev libboost-system-dev libboost-test-dev libeigen3-dev libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev qtbase5-dev libqt5opengl5-dev libcgal-dev libcgal-qt5-dev -y\n#   Install ceres solver\nRUN cd /opt\nWORKDIR /opt\nRUN apt-get install libatlas-base-dev libsuitesparse-dev libgoogle-glog-dev libeigen3-dev libsuitesparse-dev -y\nRUN git clone https://ceres-solver.googlesource.com/ceres-solver\nRUN cd ceres-solver\nWORKDIR /opt/ceres-solver\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/ceres-solver/build\nRUN cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF\nRUN make\nRUN make install\n#   Install Colmap\nRUN cd /opt\nWORKDIR /opt\nRUN git clone https://github.com/colmap/colmap\nRUN cd colmap\nWORKDIR /opt/colmap\nRUN mkdir build\nRUN cd build\nWORKDIR /opt/colmap/build\nRUN cmake ..\nRUN make\nRUN make install\nRUN cd /\n#   RUN mkdir -p /home/app\n#   RUN mkdir /home/app/data\n#   # Specify working directory\n#   WORKDIR /home/app\n#   # Copy script from Host machine to working directory of the container\n#   COPY colmap.sh .\n#   # Specify entry point of the container\n#   ENTRYPOINT [\"sh\", \"colmap.sh\"]\n#   Pick up some TF dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl libfreetype6-dev libpng12-dev libzmq3-dev ffmpeg pkg-config python python-dev rsync software-properties-common unzip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipython --no-cache-dir --upgrade \\\n && pip install ipykernel jupyter jupyterlab matplotlib numpy scipy sklearn pandas Pillow scikit-image imageio==2.4.0 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Install TensorFlow CPU version from central repo\nRUN pip install https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.13.1-cp27-none-linux_x86_64.whl --no-cache-dir\n#   https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.0.1-cp27-none-linux_x86_64.whl\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\n#   Install OpenCV\nRUN apt-get update \\\n && apt-get install libopencv-dev python-opencv -y \\\n && echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc\n#   Install GLFW\nRUN apt-get update \\\n && apt-get install libglfw3-dev -y\nRUN apt-get install imagemagick -y\n#   Expose Ports for Tensorboard (6006)\nEXPOSE 6006/tcp\n#   #Jupyter notebook related configs\n#   COPY jupyter_notebook_config.py /root/.jupyter/\nEXPOSE 8888/tcp\n#   # Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062\n#   COPY run_jupyter.sh /home/\n#   #Adding flask\n#   RUN pip install flask\n#   EXPOSE 5000\nRUN mkdir -p /workspace\nWORKDIR /workspace\nRUN chmod -R a+w /workspace\n","originalDockerfileUglifiedHash":"f45ff91b77c6b666e9543e4e99457835","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1c4dd08b79e58339d463d68ed0d9ed609e747799.dockerfile"}