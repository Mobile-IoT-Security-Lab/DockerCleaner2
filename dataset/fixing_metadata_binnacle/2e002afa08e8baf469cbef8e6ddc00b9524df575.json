{"seed":4010392349,"processedDockerfileHash":"b542755292722b12d0656a994d3d2f9c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:xenial\nMAINTAINER The Crossbar.io Project <support@crossbario.com>\n#   Metadata\nARG BUILD_DATE\nARG AUTOBAHN_CPP_VERSION\nARG AUTOBAHN_CPP_VCS_REF\n#   Metadata labeling\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"AutobahnCpp Starter Template\" \\\n      org.label-schema.description=\"Quickstart template for application development with AutobahnCpp\" \\\n      org.label-schema.url=\"http://crossbar.io\" \\\n      org.label-schema.vcs-ref=\"$AUTOBAHN_CPP_VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/crossbario/autobahn-cpp\" \\\n      org.label-schema.vendor=\"The Crossbar.io Project\" \\\n      org.label-schema.version=\"$AUTOBAHN_CPP_VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n#   Crossbar.io connection defaults\nENV CBURL=\"ws://localhost:8080/ws\"\nENV CBREALM=\"realm1\"\n#   user env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/autobahn\"\nENV PATH=\"/autobahn:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#   env vars to configure websocketpp\nENV WSPP_ENABLE_CPP11=\"1\"\n#   update system, get dev tools and libs\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 curl=7.47.0-1ubuntu2.19 unzip=6.0-20ubuntu1.1 git-core=1:2.7.4-0ubuntu1.10 clang=1:3.8-33ubuntu3.1 libc++1=3.7.0-1ubuntu0.1 libc++-dev=3.7.0-1ubuntu0.1 libc++abi-dev=3.7.0-1ubuntu0.1 build-essential=12.1ubuntu2 autotools-dev=20150820.1 autoconf=2.69-9 libtool=2.4.6-0.1 cmake=3.5.1-1ubuntu3 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.3 libbz2-dev=1.0.6-8ubuntu0.2 libssl-dev=1.0.2g-1ubuntu4.20 libboost-all-dev=1.58.0.1ubuntu1 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#   use clang, not gcc\nENV CC=\"/usr/bin/clang\"\nENV CXX=\"/usr/bin/clang++\"\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100 \\\n && update-alternatives --query c++ \\\n && update-alternatives --query cc\n#   get, build and install Boost from upstream\n#   RUN    cd /tmp \\\n#       && wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.bz2 \\\n#       && tar xvjf boost_1_69_0.tar.bz2\n#   RUN    cd /tmp/boost_1_69_0 \\\n#       && ./bootstrap.sh --with-toolset=clang \\\n#       && ./b2 toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" link=shared link=static threading=single threading=multi --layout=tagged --without-python -j 8 install \\\n#       && cd / \\\n#       && rm -rf /tmp/boost*\n#   https://askubuntu.com/a/486184\n#   RUN cd /usr/local/lib && \\\n#       ln -s libboost_thread-mt.a libboost_thread.a\n#   get, build and install msgpack-c from upstream\nRUN cd /tmp \\\n && wget https://github.com/msgpack/msgpack-c/archive/cpp-1.4.2.zip -O msgpack-c.zip \\\n && unzip msgpack-c.zip \\\n && cd msgpack-c-cpp-1.4.2 \\\n && export CXXFLAGS=\"$CXXFLAGS -std=c++11\" \\\n && ./bootstrap \\\n && ./configure \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/msgpack*\n#   get and install websocketpp from upstream\nRUN cd /tmp \\\n && wget https://github.com/zaphoyd/websocketpp/archive/master.zip -O websocketpp.zip \\\n && unzip websocketpp.zip \\\n && cp -r /tmp/websocketpp-master/websocketpp/ /usr/local/include/ \\\n && cd / \\\n && rm -rf /tmp/websocketpp*\n#   get and install cmake from upstream\n#   RUN cd /tmp \\\n#       && wget https://cmake.org/files/v3.11/cmake-3.11.0-Linux-x86_64.sh \\\n#       && sh cmake-3.11.0-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n#       && which cmake && cmake --version\n#  ### all dependencies and tools are now in place\n#   setup and build example project\nRUN mkdir -p /autobahn/build\nWORKDIR /autobahn\nCOPY autobahn /autobahn/autobahn\nCOPY examples /autobahn/examples\nCOPY cmake /autobahn/cmake\nCOPY cmake/Modules /autobahn/cmake/Modules\nCOPY cmake/Includes /autobahn/cmake/Includes\nCOPY CMakeLists.txt /autobahn/CMakeLists.txt\nRUN cd build \\\n && cmake .. \\\n && make -j4 \\\n && find examples/ -executable -type f -exec file {}\n#   drop into shell by default\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:xenial\nMAINTAINER The Crossbar.io Project <support@crossbario.com>\n#  Metadata\nARG BUILD_DATE\nARG AUTOBAHN_CPP_VERSION\nARG AUTOBAHN_CPP_VCS_REF\n#  Metadata labeling\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"AutobahnCpp Starter Template\" \\\n      org.label-schema.description=\"Quickstart template for application development with AutobahnCpp\" \\\n      org.label-schema.url=\"http://crossbar.io\" \\\n      org.label-schema.vcs-ref=\"$AUTOBAHN_CPP_VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/crossbario/autobahn-cpp\" \\\n      org.label-schema.vendor=\"The Crossbar.io Project\" \\\n      org.label-schema.version=\"$AUTOBAHN_CPP_VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n#  Crossbar.io connection defaults\nENV CBURL=\"ws://localhost:8080/ws\"\nENV CBREALM=\"realm1\"\n#  user env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/autobahn\"\nENV PATH=\"/autobahn:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#  env vars to configure websocketpp\nENV WSPP_ENABLE_CPP11=\"1\"\n#  update system, get dev tools and libs\nRUN apt-get update \\\n && apt-get install wget curl unzip git-core clang libc++1 libc++-dev libc++abi-dev build-essential autotools-dev autoconf libtool cmake zlib1g-dev libbz2-dev libssl-dev libboost-all-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#  use clang, not gcc\nENV CC=\"/usr/bin/clang\"\nENV CXX=\"/usr/bin/clang++\"\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100 \\\n && update-alternatives --query c++ \\\n && update-alternatives --query cc\n#  get, build and install Boost from upstream\n#  RUN    cd /tmp \\\n#      && wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.bz2 \\\n#      && tar xvjf boost_1_69_0.tar.bz2\n#  RUN    cd /tmp/boost_1_69_0 \\\n#      && ./bootstrap.sh --with-toolset=clang \\\n#      && ./b2 toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" link=shared link=static threading=single threading=multi --layout=tagged --without-python -j 8 install \\\n#      && cd / \\\n#      && rm -rf /tmp/boost*\n#  https://askubuntu.com/a/486184\n#  RUN cd /usr/local/lib && \\\n#      ln -s libboost_thread-mt.a libboost_thread.a\n#  get, build and install msgpack-c from upstream\nRUN cd /tmp \\\n && wget https://github.com/msgpack/msgpack-c/archive/cpp-1.4.2.zip -O msgpack-c.zip \\\n && unzip msgpack-c.zip \\\n && cd msgpack-c-cpp-1.4.2 \\\n && export CXXFLAGS=\"$CXXFLAGS -std=c++11\" \\\n && ./bootstrap \\\n && ./configure \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/msgpack*\n#  get and install websocketpp from upstream\nRUN cd /tmp \\\n && wget https://github.com/zaphoyd/websocketpp/archive/master.zip -O websocketpp.zip \\\n && unzip websocketpp.zip \\\n && cp -r /tmp/websocketpp-master/websocketpp/ /usr/local/include/ \\\n && cd / \\\n && rm -rf /tmp/websocketpp*\n#  get and install cmake from upstream\n#  RUN cd /tmp \\\n#      && wget https://cmake.org/files/v3.11/cmake-3.11.0-Linux-x86_64.sh \\\n#      && sh cmake-3.11.0-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n#      && which cmake && cmake --version\n# ### all dependencies and tools are now in place\n#  setup and build example project\nRUN mkdir -p /autobahn/build\nWORKDIR /autobahn\nCOPY autobahn /autobahn/autobahn\nCOPY examples /autobahn/examples\nCOPY cmake /autobahn/cmake\nCOPY cmake/Modules /autobahn/cmake/Modules\nCOPY cmake/Includes /autobahn/cmake/Includes\nCOPY CMakeLists.txt /autobahn/CMakeLists.txt\nRUN cd build \\\n && cmake .. \\\n && make -j4 \\\n && find examples/ -executable -type f -exec file {} ;\n#  drop into shell by default\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"396173fd48243abc45b198dfef09bb1d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:xenial\nMAINTAINER The Crossbar.io Project <support@crossbario.com>\n#   Metadata\nARG BUILD_DATE\nARG AUTOBAHN_CPP_VERSION\nARG AUTOBAHN_CPP_VCS_REF\n#   Metadata labeling\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"AutobahnCpp Starter Template\" \\\n      org.label-schema.description=\"Quickstart template for application development with AutobahnCpp\" \\\n      org.label-schema.url=\"http://crossbar.io\" \\\n      org.label-schema.vcs-ref=\"$AUTOBAHN_CPP_VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/crossbario/autobahn-cpp\" \\\n      org.label-schema.vendor=\"The Crossbar.io Project\" \\\n      org.label-schema.version=\"$AUTOBAHN_CPP_VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n#   Crossbar.io connection defaults\nENV CBURL=\"ws://localhost:8080/ws\"\nENV CBREALM=\"realm1\"\n#   user env\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV HOME=\"/autobahn\"\nENV PATH=\"/autobahn:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\n#   env vars to configure websocketpp\nENV WSPP_ENABLE_CPP11=\"1\"\n#   update system, get dev tools and libs\nRUN apt-get update \\\n && apt-get install wget curl unzip git-core clang libc++1 libc++-dev libc++abi-dev build-essential autotools-dev autoconf libtool cmake zlib1g-dev libbz2-dev libssl-dev libboost-all-dev -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && apt-get clean\n#   use clang, not gcc\nENV CC=\"/usr/bin/clang\"\nENV CXX=\"/usr/bin/clang++\"\nRUN update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100 \\\n && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100 \\\n && update-alternatives --query c++ \\\n && update-alternatives --query cc\n#   get, build and install Boost from upstream\n#   RUN    cd /tmp \\\n#       && wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.bz2 \\\n#       && tar xvjf boost_1_69_0.tar.bz2\n#   RUN    cd /tmp/boost_1_69_0 \\\n#       && ./bootstrap.sh --with-toolset=clang \\\n#       && ./b2 toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" link=shared link=static threading=single threading=multi --layout=tagged --without-python -j 8 install \\\n#       && cd / \\\n#       && rm -rf /tmp/boost*\n#   https://askubuntu.com/a/486184\n#   RUN cd /usr/local/lib && \\\n#       ln -s libboost_thread-mt.a libboost_thread.a\n#   get, build and install msgpack-c from upstream\nRUN cd /tmp \\\n && wget https://github.com/msgpack/msgpack-c/archive/cpp-1.4.2.zip -O msgpack-c.zip \\\n && unzip msgpack-c.zip \\\n && cd msgpack-c-cpp-1.4.2 \\\n && export CXXFLAGS=\"$CXXFLAGS -std=c++11\" \\\n && ./bootstrap \\\n && ./configure \\\n && make install \\\n && cd / \\\n && rm -rf /tmp/msgpack*\n#   get and install websocketpp from upstream\nRUN cd /tmp \\\n && wget https://github.com/zaphoyd/websocketpp/archive/master.zip -O websocketpp.zip \\\n && unzip websocketpp.zip \\\n && cp -r /tmp/websocketpp-master/websocketpp/ /usr/local/include/ \\\n && cd / \\\n && rm -rf /tmp/websocketpp*\n#   get and install cmake from upstream\n#   RUN cd /tmp \\\n#       && wget https://cmake.org/files/v3.11/cmake-3.11.0-Linux-x86_64.sh \\\n#       && sh cmake-3.11.0-Linux-x86_64.sh --skip-license --prefix=/usr/local \\\n#       && which cmake && cmake --version\n#  ### all dependencies and tools are now in place\n#   setup and build example project\nRUN mkdir -p /autobahn/build\nWORKDIR /autobahn\nCOPY autobahn /autobahn/autobahn\nCOPY examples /autobahn/examples\nCOPY cmake /autobahn/cmake\nCOPY cmake/Modules /autobahn/cmake/Modules\nCOPY cmake/Includes /autobahn/cmake/Includes\nCOPY CMakeLists.txt /autobahn/CMakeLists.txt\nRUN cd build \\\n && cmake .. \\\n && make -j4 \\\n && find examples/ -executable -type f -exec file {}\n#   drop into shell by default\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"be822b7d3833659a7376f41d8cb75409","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2e002afa08e8baf469cbef8e6ddc00b9524df575.dockerfile"}