{"seed":1164954094,"processedDockerfileHash":"8e2854170d151ae5bd6180036b1aeac8","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:%%ALPINE_VERSION%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; addgroup -S varnish ; for user in varnish vcache; do adduser -S -G varnish $user ; done\n#   dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf  automake  libtool  make  pkgconf  python3\"\n#   persistent / runtime deps\nRUN apk add gcc libc-dev libgcc --no-cache --virtual .persistent-deps\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nCOPY *.patch /varnish-alpine-patches/\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS coreutils dpkg dpkg-dev libedit-dev libexecinfo-dev linux-headers ncurses-dev patch pcre-dev \" ; apk add $fetchDeps $buildDeps --no-cache --virtual .build-deps ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; for p in /varnish-alpine-patches/*.patch; do [ -f \"$p\" ] || continue ;patch -p1 -i \"$p\" ; done ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --without-jemalloc --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; cd / ; rm -r /usr/src/varnish ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ] || [ -e /usr/local/lib/varnish/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add $runDeps --no-cache --virtual .varnish-rundeps ; apk del .build-deps ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:%%ALPINE_VERSION%%\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; addgroup -S varnish ; for user in varnish vcache; do adduser -S -G varnish $user ; done\n#  dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf  automake  libtool  make  pkgconf  python3\"\n#  persistent / runtime deps\nRUN apk add --no-cache --virtual .persistent-deps gcc libc-dev libgcc\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nCOPY *.patch /varnish-alpine-patches/\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS coreutils dpkg dpkg-dev libedit-dev libexecinfo-dev linux-headers ncurses-dev patch pcre-dev \" ; apk add --no-cache --virtual .build-deps $fetchDeps $buildDeps ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; for p in /varnish-alpine-patches/*.patch; do [ -f \"$p\" ] || continue ;patch -p1 -i \"$p\" ; done ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --without-jemalloc --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; cd / ; rm -r /usr/src/varnish ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ] || [ -e /usr/local/lib/varnish/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .varnish-rundeps $runDeps ; apk del .build-deps ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\n","injectedSmells":[],"originalDockerfileHash":"78e57cf3c3e1cc09ca4ae12e456fc9ee","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:%%ALPINE_VERSION%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; addgroup -S varnish ; for user in varnish vcache; do adduser -S -G varnish $user ; done\n#   dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf  automake  libtool  make  pkgconf  python3\"\n#   persistent / runtime deps\nRUN apk add --no-cache --virtual .persistent-deps gcc libc-dev libgcc\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nCOPY *.patch /varnish-alpine-patches/\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS coreutils dpkg dpkg-dev libedit-dev libexecinfo-dev linux-headers ncurses-dev patch pcre-dev \" ; apk add --no-cache --virtual .build-deps $fetchDeps $buildDeps ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; for p in /varnish-alpine-patches/*.patch; do [ -f \"$p\" ] || continue ;patch -p1 -i \"$p\" ; done ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --without-jemalloc --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; cd / ; rm -r /usr/src/varnish ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ] || [ -e /usr/local/lib/varnish/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-cache --virtual .varnish-rundeps $runDeps ; apk del .build-deps ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\n","originalDockerfileUglifiedHash":"14c8373ba7d71fee9851c5bc36091882","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e346b597fdd5080bfe6c0d2951615c39f0109c73.dockerfile"}