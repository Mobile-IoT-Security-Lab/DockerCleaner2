{"seed":1410429366,"processedDockerfileHash":"5e632d247cd6b2da6ba8288eb905d5cc","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Docker image for running E2E tests using Argo.\nFROM ubuntu:xenial\nMAINTAINER Jeremy Lewi\n#   Never prompt the user for choices on installation/configuration of packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\nENV KUSTOMIZE_VERSION=\"2.0.3\"\n#   gcc & python-dev are needed so we can install crcmod for gsutil\n#   also includes installations for Python3\nRUN set -ex \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 cmake=3.5.1-1ubuntu3 curl=7.47.0-1ubuntu2.19 locales=2.23-0ubuntu11.3 uuid-runtime=2.27.1-6ubuntu3.10 wget=1.17.1-1ubuntu1.5 ca-certificates=20210119~16.04.1 ca-certificates-java=20160321ubuntu1 git=1:2.7.4-0ubuntu1.10 emacs=46.1 jq=1.5+dfsg-1ubuntu0.1 zip=3.0-11 unzip=6.0-20ubuntu1.1 gcc=4:5.3.1-1ubuntu1 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 ssh=1:7.2p2-4ubuntu2.10 mercurial=3.7.3-1ubuntu1.2 python-dev=2.7.12-1~16.04 python-setuptools=20.7.0-1 python-pip=8.1.1-2ubuntu0.6 python3-dev=3.5.1-3 python3-setuptools=20.7.0-1 python3-pip=8.1.1-2ubuntu0.6 -yqq \\\n && python -V \\\n && python3 -V \\\n && update-ca-certificates -f \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man /usr/share/doc /usr/share/doc-base\n#   Install go\nRUN cd /tmp \\\n && wget -O /tmp/go.tar.gz https://redirector.gvt1.com/edgedl/go/go1.12.linux-amd64.tar.gz \\\n && tar -C /usr/local -xzf go.tar.gz\n#   Install gcloud\nENV PATH=\"/root/go/bin:/usr/local/go/bin:/google-cloud-sdk/bin:/workspace:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\nRUN go get github.com/kelseyhightower/kube-rsa\nRUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz \\\n && tar xzf google-cloud-sdk.tar.gz -C / \\\n && rm google-cloud-sdk.tar.gz \\\n && /google-cloud-sdk/install.sh --disable-installation-options --bash-completion=false --path-update=false --usage-reporting=false \\\n && gcloud components install alpha beta\n#   Install Helm\nRUN wget -O /tmp/get_helm.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get \\\n && chmod 700 /tmp/get_helm.sh \\\n && /tmp/get_helm.sh \\\n && rm /tmp/get_helm.sh\n#   Initialize helm\nRUN helm init --client-only\n#   Install  Node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install --no-install-recommends nodejs=4.2.6~dfsg-1ubuntu4.2 -y\n#   Install yarn\nRUN curl -sS http://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends yarn -yqq\n#   Install glide\nRUN cd /tmp \\\n && wget -O glide-v0.13.0-linux-amd64.tar.gz https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-linux-amd64.tar.gz \\\n && tar -xvf glide-v0.13.0-linux-amd64.tar.gz \\\n && mv ./linux-amd64/glide /usr/local/bin/\n#   Install ksonnet. We install multiple versions of ks to support different versions\n#   of ksonnet applications. Newer versions of ksonnet are backwards compatible but\n#   that can require upgrading the app which isn't something we want to be forced to.\n#   (see https://github.com/kubeflow/testing/issues/220).\nRUN cd /tmp \\\n && wget -O ks.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.11.0/ks_0.11.0_linux_amd64.tar.gz \\\n && tar -xvf ks.tar.gz \\\n && mv ks_0.11.0_linux_amd64/ks /usr/local/bin \\\n && chmod a+x /usr/local/bin/ks\nRUN cd /tmp \\\n && wget -O ks-12.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.12.0/ks_0.12.0_linux_amd64.tar.gz \\\n && tar -xvf ks-12.tar.gz \\\n && mv ks_0.12.0_linux_amd64/ks /usr/local/bin/ks-12 \\\n && chmod a+x /usr/local/bin/ks-12\nRUN cd /tmp \\\n && wget -O ks-13.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz \\\n && tar -xvf ks-13.tar.gz \\\n && mv ks_0.13.1_linux_amd64/ks /usr/local/bin/ks-13 \\\n && chmod a+x /usr/local/bin/ks-13\nRUN wget -O /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 \\\n && chmod a+x /usr/local/bin/kustomize\nRUN cd /tmp \\\n && wget https://github.com/google/jsonnet/archive/v0.11.2.tar.gz \\\n && tar -xvf v0.11.2.tar.gz \\\n && cd jsonnet-0.11.2 \\\n && make \\\n && mv jsonnet /usr/local/bin \\\n && rm -rf /tmp/v0.11.2.tar.gz \\\n && rm -rf /tmp/jsonnet-0.11.2\nCOPY ./Pipfile ./Pipfile.lock /tmp/\n#   Install various python libraries for both Python 2 and 3 (for now)\n#   Don't upgrade pip for now because it seems to be broken\n#   https://github.com/pypa/pip/issues/5240\nRUN cd /tmp/ \\\n && pip2 install -U wheel filelock \\\n && pip2 install pipenv \\\n && pip2 install requests \\\n && pip2 install prometheus_client fire \\\n && pipenv install --system --two \\\n && pip3 install -U wheel filelock gitpython fire\nRUN pip3 install pipenv==2018.10.9\nRUN cd /tmp/ \\\n && pipenv install --system --three\n#   Force update of googleapipython client\n#   Do this after pipenv because we want to override what pipenv installs.\nRUN pip2 install --upgrade google-api-python-client==1.7.0\n#   Install the hub CLI for git\nRUN cd /tmp \\\n && curl -LO https://github.com/github/hub/releases/download/v2.11.2/hub-linux-amd64-2.11.2.tgz \\\n && tar -xvf hub-linux-amd64-2.11.2.tgz \\\n && mv hub-linux-amd64-2.11.2 /usr/local \\\n && ln -sf /usr/local/hub-linux-amd64-2.11.2/bin/hub /usr/local/bin/hub\nRUN pip install yq==3.2.1\nCOPY checkout.sh /usr/local/bin\nCOPY checkout_repos.sh /usr/local/bin\nCOPY setup_ssh.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/checkout* /usr/local/bin/setup_ssh.sh\nCOPY run_workflows.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_workflows.sh\nCOPY run_release.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_release.sh\n#   Install docker.\nRUN curl https://get.docker.com/ | sh\n#   Install kubectl\n#   We don't install via gcloud because we want 1.10 which is newer than what's in gcloud.\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl \\\n && mv kubectl /usr/local/bin \\\n && chmod a+x /usr/local/bin/kubectl\n#   Work around for https://github.com/ksonnet/ksonnet/issues/298\nENV USER=\"root\"\n#   Install Bazel\nRUN cd /tmp \\\n && wget -O /tmp/bazel-installer.sh https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh \\\n && chmod +x bazel-installer.sh \\\n && ./bazel-installer.sh --user\nENV PATH=\"root/bin:${PATH}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#   Add the directory where we will checkout kubeflow/testing\n#   which contains shared scripts.\nENV PYTHONPATH=\"/src/kubeflow/testing/py\"\nENTRYPOINT [\"/usr/local/bin/run_workflows.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Docker image for running E2E tests using Argo.\nFROM ubuntu:xenial\nMAINTAINER Jeremy Lewi\n#  Never prompt the user for choices on installation/configuration of packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\nENV KUSTOMIZE_VERSION=\"2.0.3\"\n#  gcc & python-dev are needed so we can install crcmod for gsutil\n#  also includes installations for Python3\nRUN set -ex \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends build-essential cmake curl locales uuid-runtime wget ca-certificates ca-certificates-java git emacs jq zip unzip gcc openjdk-8-jdk ssh mercurial python-dev python-setuptools python-pip python3-dev python3-setuptools python3-pip -yqq \\\n && python -V \\\n && python3 -V \\\n && update-ca-certificates -f \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man /usr/share/doc /usr/share/doc-base\n#  Install go\nRUN cd /tmp \\\n && wget -O /tmp/go.tar.gz https://redirector.gvt1.com/edgedl/go/go1.12.linux-amd64.tar.gz \\\n && tar -C /usr/local -xzf go.tar.gz\n#  Install gcloud\nENV PATH=\"/root/go/bin:/usr/local/go/bin:/google-cloud-sdk/bin:/workspace:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\nRUN go get github.com/kelseyhightower/kube-rsa\nRUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz \\\n && tar xzf google-cloud-sdk.tar.gz -C / \\\n && rm google-cloud-sdk.tar.gz \\\n && /google-cloud-sdk/install.sh --disable-installation-options --bash-completion=false --path-update=false --usage-reporting=false \\\n && gcloud components install alpha beta\n#  Install Helm\nRUN wget -O /tmp/get_helm.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get \\\n && chmod 700 /tmp/get_helm.sh \\\n && /tmp/get_helm.sh \\\n && rm /tmp/get_helm.sh\n#  Initialize helm\nRUN helm init --client-only\n#  Install  Node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y\n#  Install yarn\nRUN curl -sS http://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends yarn -yqq\n#  Install glide\nRUN cd /tmp \\\n && wget -O glide-v0.13.0-linux-amd64.tar.gz https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-linux-amd64.tar.gz \\\n && tar -xvf glide-v0.13.0-linux-amd64.tar.gz \\\n && mv ./linux-amd64/glide /usr/local/bin/\n#  Install ksonnet. We install multiple versions of ks to support different versions\n#  of ksonnet applications. Newer versions of ksonnet are backwards compatible but\n#  that can require upgrading the app which isn't something we want to be forced to.\n#  (see https://github.com/kubeflow/testing/issues/220).\nRUN cd /tmp \\\n && wget -O ks.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.11.0/ks_0.11.0_linux_amd64.tar.gz \\\n && tar -xvf ks.tar.gz \\\n && mv ks_0.11.0_linux_amd64/ks /usr/local/bin \\\n && chmod a+x /usr/local/bin/ks\nRUN cd /tmp \\\n && wget -O ks-12.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.12.0/ks_0.12.0_linux_amd64.tar.gz \\\n && tar -xvf ks-12.tar.gz \\\n && mv ks_0.12.0_linux_amd64/ks /usr/local/bin/ks-12 \\\n && chmod a+x /usr/local/bin/ks-12\nRUN cd /tmp \\\n && wget -O ks-13.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz \\\n && tar -xvf ks-13.tar.gz \\\n && mv ks_0.13.1_linux_amd64/ks /usr/local/bin/ks-13 \\\n && chmod a+x /usr/local/bin/ks-13\nRUN wget -O /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 \\\n && chmod a+x /usr/local/bin/kustomize\nRUN cd /tmp \\\n && wget https://github.com/google/jsonnet/archive/v0.11.2.tar.gz \\\n && tar -xvf v0.11.2.tar.gz \\\n && cd jsonnet-0.11.2 \\\n && make \\\n && mv jsonnet /usr/local/bin \\\n && rm -rf /tmp/v0.11.2.tar.gz \\\n && rm -rf /tmp/jsonnet-0.11.2\nCOPY ./Pipfile ./Pipfile.lock /tmp/\n#  Install various python libraries for both Python 2 and 3 (for now)\n#  Don't upgrade pip for now because it seems to be broken\n#  https://github.com/pypa/pip/issues/5240\nRUN cd /tmp/ \\\n && pip2 install -U wheel filelock \\\n && pip2 install pipenv \\\n && pip2 install requests \\\n && pip2 install prometheus_client fire \\\n && pipenv install --system --two \\\n && pip3 install -U wheel filelock gitpython fire\nRUN pip3 install pipenv==2018.10.9\nRUN cd /tmp/ \\\n && pipenv install --system --three\n#  Force update of googleapipython client\n#  Do this after pipenv because we want to override what pipenv installs.\nRUN pip2 install --upgrade google-api-python-client==1.7.0\n#  Install the hub CLI for git\nRUN cd /tmp \\\n && curl -LO https://github.com/github/hub/releases/download/v2.11.2/hub-linux-amd64-2.11.2.tgz \\\n && tar -xvf hub-linux-amd64-2.11.2.tgz \\\n && mv hub-linux-amd64-2.11.2 /usr/local \\\n && ln -sf /usr/local/hub-linux-amd64-2.11.2/bin/hub /usr/local/bin/hub\nRUN pip install yq\nCOPY checkout.sh /usr/local/bin\nCOPY checkout_repos.sh /usr/local/bin\nCOPY setup_ssh.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/checkout* /usr/local/bin/setup_ssh.sh\nCOPY run_workflows.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_workflows.sh\nCOPY run_release.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_release.sh\n#  Install docker.\nRUN curl https://get.docker.com/ | sh\n#  Install kubectl\n#  We don't install via gcloud because we want 1.10 which is newer than what's in gcloud.\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl \\\n && mv kubectl /usr/local/bin \\\n && chmod a+x /usr/local/bin/kubectl\n#  Work around for https://github.com/ksonnet/ksonnet/issues/298\nENV USER=\"root\"\n#  Install Bazel\nRUN cd /tmp \\\n && wget -O /tmp/bazel-installer.sh https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh \\\n && chmod +x bazel-installer.sh \\\n && ./bazel-installer.sh --user\nENV PATH=\"root/bin:${PATH}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#  Add the directory where we will checkout kubeflow/testing\n#  which contains shared scripts.\nENV PYTHONPATH=\"/src/kubeflow/testing/py\"\nENTRYPOINT [\"/usr/local/bin/run_workflows.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"b4b7ad03c21efd1a4eae202d541171b6","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Docker image for running E2E tests using Argo.\nFROM ubuntu:xenial\nMAINTAINER Jeremy Lewi\n#   Never prompt the user for choices on installation/configuration of packages\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TERM=\"linux\"\nENV LC_ALL=\"C.UTF-8\"\nENV LANG=\"C.UTF-8\"\nENV KUSTOMIZE_VERSION=\"2.0.3\"\n#   gcc & python-dev are needed so we can install crcmod for gsutil\n#   also includes installations for Python3\nRUN set -ex \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends build-essential cmake curl locales uuid-runtime wget ca-certificates ca-certificates-java git emacs jq zip unzip gcc openjdk-8-jdk ssh mercurial python-dev python-setuptools python-pip python3-dev python3-setuptools python3-pip -yqq \\\n && python -V \\\n && python3 -V \\\n && update-ca-certificates -f \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/man /usr/share/doc /usr/share/doc-base\n#   Install go\nRUN cd /tmp \\\n && wget -O /tmp/go.tar.gz https://redirector.gvt1.com/edgedl/go/go1.12.linux-amd64.tar.gz \\\n && tar -C /usr/local -xzf go.tar.gz\n#   Install gcloud\nENV PATH=\"/root/go/bin:/usr/local/go/bin:/google-cloud-sdk/bin:/workspace:${PATH}\" \\\n    CLOUDSDK_CORE_DISABLE_PROMPTS=\"1\"\nRUN go get github.com/kelseyhightower/kube-rsa\nRUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz \\\n && tar xzf google-cloud-sdk.tar.gz -C / \\\n && rm google-cloud-sdk.tar.gz \\\n && /google-cloud-sdk/install.sh --disable-installation-options --bash-completion=false --path-update=false --usage-reporting=false \\\n && gcloud components install alpha beta\n#   Install Helm\nRUN wget -O /tmp/get_helm.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get \\\n && chmod 700 /tmp/get_helm.sh \\\n && /tmp/get_helm.sh \\\n && rm /tmp/get_helm.sh\n#   Initialize helm\nRUN helm init --client-only\n#   Install  Node.js\nRUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \\\n && apt-get install nodejs -y\n#   Install yarn\nRUN curl -sS http://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n && apt-get update -yqq \\\n && apt-get install --no-install-recommends yarn -yqq\n#   Install glide\nRUN cd /tmp \\\n && wget -O glide-v0.13.0-linux-amd64.tar.gz https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-linux-amd64.tar.gz \\\n && tar -xvf glide-v0.13.0-linux-amd64.tar.gz \\\n && mv ./linux-amd64/glide /usr/local/bin/\n#   Install ksonnet. We install multiple versions of ks to support different versions\n#   of ksonnet applications. Newer versions of ksonnet are backwards compatible but\n#   that can require upgrading the app which isn't something we want to be forced to.\n#   (see https://github.com/kubeflow/testing/issues/220).\nRUN cd /tmp \\\n && wget -O ks.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.11.0/ks_0.11.0_linux_amd64.tar.gz \\\n && tar -xvf ks.tar.gz \\\n && mv ks_0.11.0_linux_amd64/ks /usr/local/bin \\\n && chmod a+x /usr/local/bin/ks\nRUN cd /tmp \\\n && wget -O ks-12.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.12.0/ks_0.12.0_linux_amd64.tar.gz \\\n && tar -xvf ks-12.tar.gz \\\n && mv ks_0.12.0_linux_amd64/ks /usr/local/bin/ks-12 \\\n && chmod a+x /usr/local/bin/ks-12\nRUN cd /tmp \\\n && wget -O ks-13.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz \\\n && tar -xvf ks-13.tar.gz \\\n && mv ks_0.13.1_linux_amd64/ks /usr/local/bin/ks-13 \\\n && chmod a+x /usr/local/bin/ks-13\nRUN wget -O /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 \\\n && chmod a+x /usr/local/bin/kustomize\nRUN cd /tmp \\\n && wget https://github.com/google/jsonnet/archive/v0.11.2.tar.gz \\\n && tar -xvf v0.11.2.tar.gz \\\n && cd jsonnet-0.11.2 \\\n && make \\\n && mv jsonnet /usr/local/bin \\\n && rm -rf /tmp/v0.11.2.tar.gz \\\n && rm -rf /tmp/jsonnet-0.11.2\nCOPY ./Pipfile ./Pipfile.lock /tmp/\n#   Install various python libraries for both Python 2 and 3 (for now)\n#   Don't upgrade pip for now because it seems to be broken\n#   https://github.com/pypa/pip/issues/5240\nRUN cd /tmp/ \\\n && pip2 install -U wheel filelock \\\n && pip2 install pipenv \\\n && pip2 install requests \\\n && pip2 install prometheus_client fire \\\n && pipenv install --system --two \\\n && pip3 install -U wheel filelock gitpython fire\nRUN pip3 install pipenv==2018.10.9\nRUN cd /tmp/ \\\n && pipenv install --system --three\n#   Force update of googleapipython client\n#   Do this after pipenv because we want to override what pipenv installs.\nRUN pip2 install --upgrade google-api-python-client==1.7.0\n#   Install the hub CLI for git\nRUN cd /tmp \\\n && curl -LO https://github.com/github/hub/releases/download/v2.11.2/hub-linux-amd64-2.11.2.tgz \\\n && tar -xvf hub-linux-amd64-2.11.2.tgz \\\n && mv hub-linux-amd64-2.11.2 /usr/local \\\n && ln -sf /usr/local/hub-linux-amd64-2.11.2/bin/hub /usr/local/bin/hub\nRUN pip install yq\nCOPY checkout.sh /usr/local/bin\nCOPY checkout_repos.sh /usr/local/bin\nCOPY setup_ssh.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/checkout* /usr/local/bin/setup_ssh.sh\nCOPY run_workflows.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_workflows.sh\nCOPY run_release.sh /usr/local/bin\nRUN chmod a+x /usr/local/bin/run_release.sh\n#   Install docker.\nRUN curl https://get.docker.com/ | sh\n#   Install kubectl\n#   We don't install via gcloud because we want 1.10 which is newer than what's in gcloud.\nRUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl \\\n && mv kubectl /usr/local/bin \\\n && chmod a+x /usr/local/bin/kubectl\n#   Work around for https://github.com/ksonnet/ksonnet/issues/298\nENV USER=\"root\"\n#   Install Bazel\nRUN cd /tmp \\\n && wget -O /tmp/bazel-installer.sh https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh \\\n && chmod +x bazel-installer.sh \\\n && ./bazel-installer.sh --user\nENV PATH=\"root/bin:${PATH}\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#   Add the directory where we will checkout kubeflow/testing\n#   which contains shared scripts.\nENV PYTHONPATH=\"/src/kubeflow/testing/py\"\nENTRYPOINT [\"/usr/local/bin/run_workflows.sh\"]\n","originalDockerfileUglifiedHash":"759e701eea677419266eca4413066b9f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2cf89fb5bba935e2ca10d6d2bccbe63d61abe984.dockerfile"}