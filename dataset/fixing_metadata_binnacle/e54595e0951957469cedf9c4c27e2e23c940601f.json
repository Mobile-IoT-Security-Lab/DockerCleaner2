{"seed":1367104565,"processedDockerfileHash":"78247bf4da050dc25fff5f22b084d1f1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\n#  ################################################################################################################\n#             Global\n#  ################################################################################################################\n#   apt-get to skip any interactive post-install configuration steps with DEBIAN_FRONTEND=noninteractive and apt-get install -y\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG DEBIAN_FRONTEND=noninteractive\n#  ################################################################################################################\n#             Global Path Setting\n#  ################################################################################################################\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV OPENCL_LIBRARIES=\"/usr/local/cuda/lib64\"\nENV OPENCL_INCLUDE_DIR=\"/usr/local/cuda/include\"\n#  ################################################################################################################\n#             TINI\n#  ################################################################################################################\n#   Install tini\nENV TINI_VERSION=\"v0.14.0\"\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini\nRUN chmod +x /tini\n#  ################################################################################################################\n#             SYSTEM\n#  ################################################################################################################\n#   update: downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their \n#   dependencies. It will do this for all repositories and PPAs. \nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential curl wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git vim mercurial subversion cmake libboost-dev libboost-system-dev libboost-filesystem-dev gcc g++ -y\n#   Add OpenCL ICD files for LightGBM\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n#  ################################################################################################################\n#             CONDA\n#  ################################################################################################################\nARG CONDA_DIR=/opt/conda\n#   add to path\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\n#   Install miniconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN conda create -q -n py2 python=2.7 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\nRUN conda create -q -n py3 python=3.5 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\n#  ################################################################################################################\n#             LightGBM\n#  ################################################################################################################\nRUN cd /usr/local/src \\\n && mkdir lightgbm \\\n && cd lightgbm \\\n && git clone --recursive https://github.com/Microsoft/LightGBM \\\n && cd LightGBM \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. \\\n && make OPENCL_HEADERS=/usr/local/cuda-8.0/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-8.0/targets/x86_64-linux/lib\nENV PATH=\"/usr/local/src/lightgbm/LightGBM:${PATH}\"\nRUN /bin/bash -c \"source activate py2 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\nRUN /bin/bash -c \"source activate py3 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\n#  ################################################################################################################\n#             System CleanUp\n#  ################################################################################################################\n#   apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n#   apt-get clean: removes the aptitude cache in /var/cache/apt/archives. You'd be amazed how much is in there! the only drawback is that the packages \n#   have to be downloaded again if you reinstall them.\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && conda clean -i -l -t -y\n#  ################################################################################################################\n#             JUPYTER \n#  ################################################################################################################\n#   password: keras \n#   password key: --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n#   Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\nVOLUME /home\nWORKDIR /home\n#   IPython\nEXPOSE 8888/tcp\nENTRYPOINT [\"/tini\", \"--\"]\nCMD /bin/bash -c \"source activate py3 \\\n && jupyter notebook --allow-root --no-browser --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824' \\\n && source deactivate\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn5-devel\n# ################################################################################################################\n#            Global\n# ################################################################################################################\n#  apt-get to skip any interactive post-install configuration steps with DEBIAN_FRONTEND=noninteractive and apt-get install -y\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG DEBIAN_FRONTEND=noninteractive\n# ################################################################################################################\n#            Global Path Setting\n# ################################################################################################################\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV OPENCL_LIBRARIES=\"/usr/local/cuda/lib64\"\nENV OPENCL_INCLUDE_DIR=\"/usr/local/cuda/include\"\n# ################################################################################################################\n#            TINI\n# ################################################################################################################\n#  Install tini\nENV TINI_VERSION=\"v0.14.0\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n# ################################################################################################################\n#            SYSTEM\n# ################################################################################################################\n#  update: downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their \n#  dependencies. It will do this for all repositories and PPAs. \nRUN apt-get update \\\n && apt-get install build-essential curl wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git vim mercurial subversion cmake libboost-dev libboost-system-dev libboost-filesystem-dev gcc g++ -y\n#  Add OpenCL ICD files for LightGBM\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n# ################################################################################################################\n#            CONDA\n# ################################################################################################################\nARG CONDA_DIR=/opt/conda\n#  add to path\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\n#  Install miniconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN conda create -q -n py2 python=2.7 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\nRUN conda create -q -n py3 python=3.5 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\n# ################################################################################################################\n#            LightGBM\n# ################################################################################################################\nRUN cd /usr/local/src \\\n && mkdir lightgbm \\\n && cd lightgbm \\\n && git clone --recursive https://github.com/Microsoft/LightGBM \\\n && cd LightGBM \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. \\\n && make OPENCL_HEADERS=/usr/local/cuda-8.0/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-8.0/targets/x86_64-linux/lib\nENV PATH=\"/usr/local/src/lightgbm/LightGBM:${PATH}\"\nRUN /bin/bash -c \"source activate py2 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\nRUN /bin/bash -c \"source activate py3 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\n# ################################################################################################################\n#            System CleanUp\n# ################################################################################################################\n#  apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n#  apt-get clean: removes the aptitude cache in /var/cache/apt/archives. You'd be amazed how much is in there! the only drawback is that the packages \n#  have to be downloaded again if you reinstall them.\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && conda clean -i -l -t -y\n# ################################################################################################################\n#            JUPYTER \n# ################################################################################################################\n#  password: keras \n#  password key: --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n#  Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\nVOLUME /home\nWORKDIR /home\n#  IPython\nEXPOSE 8888/tcp\nENTRYPOINT [\"/tini\", \"--\"]\nCMD /bin/bash -c \"source activate py3 \\\n && jupyter notebook --allow-root --no-browser --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824' \\\n && source deactivate\"\n","injectedSmells":[],"originalDockerfileHash":"52d2c3ee402c1e66c25fb1bf517c5c35","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn5-devel\n#  ################################################################################################################\n#             Global\n#  ################################################################################################################\n#   apt-get to skip any interactive post-install configuration steps with DEBIAN_FRONTEND=noninteractive and apt-get install -y\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nARG DEBIAN_FRONTEND=noninteractive\n#  ################################################################################################################\n#             Global Path Setting\n#  ################################################################################################################\nENV CUDA_HOME=\"/usr/local/cuda\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/usr/local/lib\"\nENV OPENCL_LIBRARIES=\"/usr/local/cuda/lib64\"\nENV OPENCL_INCLUDE_DIR=\"/usr/local/cuda/include\"\n#  ################################################################################################################\n#             TINI\n#  ################################################################################################################\n#   Install tini\nENV TINI_VERSION=\"v0.14.0\"\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\nRUN chmod +x /tini\n#  ################################################################################################################\n#             SYSTEM\n#  ################################################################################################################\n#   update: downloads the package lists from the repositories and \"updates\" them to get information on the newest versions of packages and their \n#   dependencies. It will do this for all repositories and PPAs. \nRUN apt-get update \\\n && apt-get install build-essential curl wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git vim mercurial subversion cmake libboost-dev libboost-system-dev libboost-filesystem-dev gcc g++ -y\n#   Add OpenCL ICD files for LightGBM\nRUN mkdir -p /etc/OpenCL/vendors \\\n && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd\n#  ################################################################################################################\n#             CONDA\n#  ################################################################################################################\nARG CONDA_DIR=/opt/conda\n#   add to path\nENV PATH=\"$CONDA_DIR/bin:$PATH\"\n#   Install miniconda\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \\\n && wget --quiet https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O ~/miniconda.sh \\\n && /bin/bash ~/miniconda.sh -b -p /opt/conda \\\n && rm ~/miniconda.sh\nRUN conda create -q -n py2 python=2.7 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\nRUN conda create -q -n py3 python=3.5 mkl numpy scipy scikit-learn jupyter notebook ipython pandas matplotlib\n#  ################################################################################################################\n#             LightGBM\n#  ################################################################################################################\nRUN cd /usr/local/src \\\n && mkdir lightgbm \\\n && cd lightgbm \\\n && git clone --recursive https://github.com/Microsoft/LightGBM \\\n && cd LightGBM \\\n && mkdir build \\\n && cd build \\\n && cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. \\\n && make OPENCL_HEADERS=/usr/local/cuda-8.0/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-8.0/targets/x86_64-linux/lib\nENV PATH=\"/usr/local/src/lightgbm/LightGBM:${PATH}\"\nRUN /bin/bash -c \"source activate py2 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\nRUN /bin/bash -c \"source activate py3 \\\n && cd /usr/local/src/lightgbm/LightGBM/python-package \\\n && python setup.py install --precompile \\\n && source deactivate\"\n#  ################################################################################################################\n#             System CleanUp\n#  ################################################################################################################\n#   apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.\n#   apt-get clean: removes the aptitude cache in /var/cache/apt/archives. You'd be amazed how much is in there! the only drawback is that the packages \n#   have to be downloaded again if you reinstall them.\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && conda clean -i -l -t -y\n#  ################################################################################################################\n#             JUPYTER \n#  ################################################################################################################\n#   password: keras \n#   password key: --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n#   Add a notebook profile.\nRUN mkdir -p -m 700 /root/.jupyter/ \\\n && echo \"c.NotebookApp.ip = '*'\" >> /root/.jupyter/jupyter_notebook_config.py\nVOLUME /home\nWORKDIR /home\n#   IPython\nEXPOSE 8888/tcp\nENTRYPOINT [\"/tini\", \"--\"]\nCMD /bin/bash -c \"source activate py3 \\\n && jupyter notebook --allow-root --no-browser --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824' \\\n && source deactivate\"\n","originalDockerfileUglifiedHash":"3a061cb253804454fad620d481ea142e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e54595e0951957469cedf9c4c27e2e23c940601f.dockerfile"}