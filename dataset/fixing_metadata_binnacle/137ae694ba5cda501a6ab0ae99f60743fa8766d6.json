{"seed":2263686925,"processedDockerfileHash":"9639dadb945476085e5a1b09b886002f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   Dockerfile for SeaHorn\n#   This produces package in /seahorn/build\n#   Arguments:\n#    - UBUNTU:     trusty, xenial\n#    - BUILD_TYPE: Debug, Release\n#\nARG UBUNTU\n#   Pull base image.\nFROM buildpack-deps:$UBUNTU\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\"\n#   Install deps.\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common python-software-properties -yqq \\\n && add-apt-repository --yes ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get upgrade -yqq \\\n && apt-get install --no-install-recommends binutils-gold cmake cmake-data xdot g++-5 ninja-build libgraphviz-dev libstdc++5 libgmp-dev libmpfr-dev clang-3.8 libiomp-dev python-dev python-pip python-setuptools -yqq\nRUN pip install lit==16.0.1 OutputCheck==0.4.2\nRUN easy_install networkx pygraphviz\n#   Use gold instead of bfd for much faster linking.\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 \\\n && update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\nWORKDIR /tmp/dockerutils\n#   Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n#   This is to work around docker limitations and pass right correct flag to the\n#   python configuration script.\nRUN echo '#!/bin/sh' > switch.sh \\\n && echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh \\\n && chmod +x switch.sh\nRUN /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" > /tmp/dockerutils/dt_out.txt\nRUN export BT=$( cat /tmp/dockerutils/dt_out.txt ;) \\\n && export UB=$( lsb_release --a 2>&1 | cut -f2 | tail -n 1 ;) \\\n && echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt \\\n && cat /tmp/dockerutils/prefix.txt\nRUN mkdir -p /deps\nWORKDIR /deps\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_LINK=$( echo https://github.com/kuhar/seahorn_deps/releases/download/v0.1/\"$PREFIX\".tar.gz ;) \\\n && wget $DEPS_LINK\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_TAR=$( echo \"$PREFIX\".tar.gz ;) \\\n && tar -xvf $DEPS_TAR \\\n && tar -xvf boost162.tar.gz \\\n && tar -xvf z3.tar.gz \\\n && tar -xvf llvm38.tar.gz \\\n && rm *.tar.gz\nRUN ls -al --block-size=M 1>&2\nRUN mkdir -p /seahorn\nWORKDIR /seahorn\n#   Checkout SeaHorn.\nRUN git clone https://github.com/seahorn/seahorn ./ -b master --depth=10\nRUN mkdir -p /seahorn/build\nWORKDIR /seahorn/build\n#   Build configuration.\nRUN cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBOOST_ROOT=/deps/boost -DZ3_ROOT=/deps/z3 -DLLVM_DIR=/deps/LLVM-3.8.1-Linux/share/llvm/cmake -DCMAKE_INSTALL_PREFIX=run -DCMAKE_CXX_COMPILER=g++-5 -DCPACK_GENERATOR=\"TGZ\" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ../\nRUN cmake --build . --target extra \\\n && cmake ..\nRUN cmake --build . --target crab \\\n && cmake ..\nRUN cmake --build . --target install\nRUN cmake --build . --target package\nENV PATH=\"\\\"/seahorn/build/run/bin:$PATH\\\"\"\nWORKDIR /seahorn\nRUN echo '#!/bin/sh' > /tmp/cpy.sh \\\n && echo 'cp /seahorn/build/*.tar.gz /host/ \\\n && bash' >> /tmp/cpy.sh \\\n && chmod +x /tmp/cpy.sh\n#   Define default command.\nCMD [\"/tmp/cpy.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  Dockerfile for SeaHorn\n#  This produces package in /seahorn/build\n#  Arguments:\n#   - UBUNTU:     trusty, xenial\n#   - BUILD_TYPE: Debug, Release\n#\nARG UBUNTU\n#  Pull base image.\nFROM buildpack-deps:$UBUNTU\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\"\n#  Install deps.\nRUN apt-get update \\\n && apt-get install software-properties-common python-software-properties -yqq \\\n && add-apt-repository --yes ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get upgrade -yqq \\\n && apt-get install binutils-gold cmake cmake-data xdot g++-5 ninja-build libgraphviz-dev libstdc++5 libgmp-dev libmpfr-dev clang-3.8 libiomp-dev python-dev python-pip python-setuptools -yqq\nRUN pip install lit OutputCheck\nRUN easy_install networkx pygraphviz\n#  Use gold instead of bfd for much faster linking.\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 \\\n && update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\nWORKDIR /tmp/dockerutils\n#  Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n#  This is to work around docker limitations and pass right correct flag to the\n#  python configuration script.\nRUN echo '#!/bin/sh' > switch.sh \\\n && echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh \\\n && chmod +x switch.sh\nRUN /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" > /tmp/dockerutils/dt_out.txt\nRUN export BT=$( cat /tmp/dockerutils/dt_out.txt ;) \\\n && export UB=$( lsb_release --a 2>&1 | cut -f2 | tail -n 1 ;) \\\n && echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt \\\n && cat /tmp/dockerutils/prefix.txt\nRUN mkdir -p /deps\nWORKDIR /deps\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_LINK=$( echo https://github.com/kuhar/seahorn_deps/releases/download/v0.1/\"$PREFIX\".tar.gz ;) \\\n && wget $DEPS_LINK\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_TAR=$( echo \"$PREFIX\".tar.gz ;) \\\n && tar -xvf $DEPS_TAR \\\n && tar -xvf boost162.tar.gz \\\n && tar -xvf z3.tar.gz \\\n && tar -xvf llvm38.tar.gz \\\n && rm *.tar.gz\nRUN ls -al --block-size=M 1>&2\nRUN mkdir -p /seahorn\nWORKDIR /seahorn\n#  Checkout SeaHorn.\nRUN git clone https://github.com/seahorn/seahorn ./ -b master --depth=10\nRUN mkdir -p /seahorn/build\nWORKDIR /seahorn/build\n#  Build configuration.\nRUN cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBOOST_ROOT=/deps/boost -DZ3_ROOT=/deps/z3 -DLLVM_DIR=/deps/LLVM-3.8.1-Linux/share/llvm/cmake -DCMAKE_INSTALL_PREFIX=run -DCMAKE_CXX_COMPILER=g++-5 -DCPACK_GENERATOR=\"TGZ\" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ../\nRUN cmake --build . --target extra \\\n && cmake ..\nRUN cmake --build . --target crab \\\n && cmake ..\nRUN cmake --build . --target install\nRUN cmake --build . --target package\nENV PATH=\"\\\"/seahorn/build/run/bin:$PATH\\\"\"\nWORKDIR /seahorn\nRUN echo '#!/bin/sh' > /tmp/cpy.sh \\\n && echo 'cp /seahorn/build/*.tar.gz /host/ \\\n && bash' >> /tmp/cpy.sh \\\n && chmod +x /tmp/cpy.sh\n#  Define default command.\nCMD [\"/tmp/cpy.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"5f13c99e2322b4c64017661e86ed1f0d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   Dockerfile for SeaHorn\n#   This produces package in /seahorn/build\n#   Arguments:\n#    - UBUNTU:     trusty, xenial\n#    - BUILD_TYPE: Debug, Release\n#\nARG UBUNTU\n#   Pull base image.\nFROM buildpack-deps:$UBUNTU\nARG BUILD_TYPE\nRUN echo \"Build type set to: $BUILD_TYPE\"\n#   Install deps.\nRUN apt-get update \\\n && apt-get install software-properties-common python-software-properties -yqq \\\n && add-apt-repository --yes ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get upgrade -yqq \\\n && apt-get install binutils-gold cmake cmake-data xdot g++-5 ninja-build libgraphviz-dev libstdc++5 libgmp-dev libmpfr-dev clang-3.8 libiomp-dev python-dev python-pip python-setuptools -yqq\nRUN pip install lit OutputCheck\nRUN easy_install networkx pygraphviz\n#   Use gold instead of bfd for much faster linking.\nRUN update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.gold\" 20 \\\n && update-alternatives --install \"/usr/bin/ld\" \"ld\" \"/usr/bin/ld.bfd\" 10\nWORKDIR /tmp/dockerutils\n#   Create a helper script that works as switch (VAL) { Key0 : Val0, ...}.\n#   This is to work around docker limitations and pass right correct flag to the\n#   python configuration script.\nRUN echo '#!/bin/sh' > switch.sh \\\n && echo 'VAL=$1;shift;while test $# -gt 0;do if [ \"$1\" = \"$VAL\" ];then echo $2;exit 0;fi;shift;shift;done' >> switch.sh \\\n && chmod +x switch.sh\nRUN /tmp/dockerutils/switch.sh $BUILD_TYPE Debug \"debug\" Release \"rel\" > /tmp/dockerutils/dt_out.txt\nRUN export BT=$( cat /tmp/dockerutils/dt_out.txt ;) \\\n && export UB=$( lsb_release --a 2>&1 | cut -f2 | tail -n 1 ;) \\\n && echo \"$UB\"_\"$BT\" > /tmp/dockerutils/prefix.txt \\\n && cat /tmp/dockerutils/prefix.txt\nRUN mkdir -p /deps\nWORKDIR /deps\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_LINK=$( echo https://github.com/kuhar/seahorn_deps/releases/download/v0.1/\"$PREFIX\".tar.gz ;) \\\n && wget $DEPS_LINK\nRUN export PREFIX=$( cat /tmp/dockerutils/prefix.txt ;) \\\n && export DEPS_TAR=$( echo \"$PREFIX\".tar.gz ;) \\\n && tar -xvf $DEPS_TAR \\\n && tar -xvf boost162.tar.gz \\\n && tar -xvf z3.tar.gz \\\n && tar -xvf llvm38.tar.gz \\\n && rm *.tar.gz\nRUN ls -al --block-size=M 1>&2\nRUN mkdir -p /seahorn\nWORKDIR /seahorn\n#   Checkout SeaHorn.\nRUN git clone https://github.com/seahorn/seahorn ./ -b master --depth=10\nRUN mkdir -p /seahorn/build\nWORKDIR /seahorn/build\n#   Build configuration.\nRUN cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBOOST_ROOT=/deps/boost -DZ3_ROOT=/deps/z3 -DLLVM_DIR=/deps/LLVM-3.8.1-Linux/share/llvm/cmake -DCMAKE_INSTALL_PREFIX=run -DCMAKE_CXX_COMPILER=g++-5 -DCPACK_GENERATOR=\"TGZ\" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ../\nRUN cmake --build . --target extra \\\n && cmake ..\nRUN cmake --build . --target crab \\\n && cmake ..\nRUN cmake --build . --target install\nRUN cmake --build . --target package\nENV PATH=\"\\\"/seahorn/build/run/bin:$PATH\\\"\"\nWORKDIR /seahorn\nRUN echo '#!/bin/sh' > /tmp/cpy.sh \\\n && echo 'cp /seahorn/build/*.tar.gz /host/ \\\n && bash' >> /tmp/cpy.sh \\\n && chmod +x /tmp/cpy.sh\n#   Define default command.\nCMD [\"/tmp/cpy.sh\"]\n","originalDockerfileUglifiedHash":"e0dda43d7ce5e33f0efa45ed3d95408f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/137ae694ba5cda501a6ab0ae99f60743fa8766d6.dockerfile"}