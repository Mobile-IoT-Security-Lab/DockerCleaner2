{"seed":2672259063,"processedDockerfileHash":"8c00521072c1da3a7cca2f14585c4115","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"#  #######\n#   assets builder and dev server\n#\nFROM node:8-slim AS assets\nENV PATH=\"/app/node_modules/.bin:$PATH\"\nWORKDIR /app\n#   copy dependency definitions\nCOPY package.json yarn.lock ./\n#   install dependencies\nRUN yarn install --pure-lockfile\nRUN yarn global add gulp-cli@2.0.1\n#   copy supporting files and media\nCOPY .eslintrc.js .stylelintrc gulpfile.js ./\nCOPY ./media ./media\nRUN gulp build --production\n#  #######\n#   Python dependencies builder\n#\nFROM python:2-stretch AS python-builder\nWORKDIR /app\nENV LANG=\"C.UTF-8\"\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext build-essential libxml2-dev libxslt1-dev libxslt1.1\nRUN virtualenv /venv\nCOPY requirements/base.txt requirements/prod.txt ./requirements/\n#   Install Python deps\nRUN pip install --no-cache-dir -r requirements/prod.txt\n#  #######\n#   django app container\n#\nFROM python:2-slim-stretch AS app-base\n#   Extra python env\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\n#   add non-priviledged user\nRUN adduser --uid 1000 --disabled-password --gecos '' --no-create-home webdev\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"./bin/run.sh\"]\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext libxslt1.1 git\n#   copy in Python environment\nCOPY --from=python-builder /venv /venv\n#   changes infrequently\nCOPY ./bin ./bin\nCOPY ./etc ./etc\nCOPY ./lib ./lib\nCOPY ./root_files ./root_files\nCOPY ./scripts ./scripts\nCOPY ./wsgi ./wsgi\nCOPY manage.py LICENSE newrelic.ini contribute.json ./\n#   changes more frequently\nCOPY ./docker ./docker\nCOPY ./vendor-local ./vendor-local\nCOPY ./bedrock ./bedrock\nCOPY ./media ./media\n#  #######\n#   expanded webapp image for testing and dev\n#\nFROM app-base AS devapp\nCMD [\"./bin/run-tests.sh\"]\nRUN apt-install make\nCOPY requirements/base.txt requirements/dev.txt requirements/docs.txt ./requirements/\nRUN pip install --no-cache-dir -r requirements/dev.txt\nRUN pip install --no-cache-dir -r requirements/docs.txt\nCOPY ./setup.cfg ./\nCOPY ./tests ./tests\n#   build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#   get fresh database\nRUN ./bin/run-db-download.py --force\n#   rely on build args\nRUN bin/run-sync-all.sh\n#   get fresh l10n files\nRUN ./manage.py l10n_update\nRUN chown webdev.webdev -R .\nUSER webdev\n#  #######\n#   final image for deployment\n#\nFROM app-base AS release\nCOPY --from=assets /app/static_final /app/static_final\nRUN honcho run --env docker/envfiles/prod.env docker/bin/build_staticfiles.sh\n#   build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#   rely on build args\nRUN bin/run-sync-all.sh\nRUN echo \"${GIT_SHA}\" > ./root_files/revision.txt\n#   Change User\nRUN chown webdev.webdev -R .\nUSER webdev\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"# #######\n#  assets builder and dev server\n#\nFROM node:8-slim AS assets\nENV PATH=\"/app/node_modules/.bin:$PATH\"\nWORKDIR /app\n#  copy dependency definitions\nCOPY package.json yarn.lock ./\n#  install dependencies\nRUN yarn install --pure-lockfile\nRUN yarn global add gulp-cli@2.0.1\n#  copy supporting files and media\nCOPY .eslintrc.js .stylelintrc gulpfile.js ./\nCOPY ./media ./media\nRUN gulp build --production\n# #######\n#  Python dependencies builder\n#\nFROM python:2-stretch AS python-builder\nWORKDIR /app\nENV LANG=\"C.UTF-8\"\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext build-essential libxml2-dev libxslt1-dev libxslt1.1\nRUN virtualenv /venv\nCOPY requirements/base.txt requirements/prod.txt ./requirements/\n#  Install Python deps\nRUN pip install --no-cache-dir -r requirements/prod.txt\n# #######\n#  django app container\n#\nFROM python:2-slim-stretch AS app-base\n#  Extra python env\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\n#  add non-priviledged user\nRUN adduser --uid 1000 --disabled-password --gecos '' --no-create-home webdev\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"./bin/run.sh\"]\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext libxslt1.1 git\n#  copy in Python environment\nCOPY --from=python-builder /venv /venv\n#  changes infrequently\nCOPY ./bin ./bin\nCOPY ./etc ./etc\nCOPY ./lib ./lib\nCOPY ./root_files ./root_files\nCOPY ./scripts ./scripts\nCOPY ./wsgi ./wsgi\nCOPY manage.py LICENSE newrelic.ini contribute.json ./\n#  changes more frequently\nCOPY ./docker ./docker\nCOPY ./vendor-local ./vendor-local\nCOPY ./bedrock ./bedrock\nCOPY ./media ./media\n# #######\n#  expanded webapp image for testing and dev\n#\nFROM app-base AS devapp\nCMD [\"./bin/run-tests.sh\"]\nRUN apt-install make\nCOPY requirements/base.txt requirements/dev.txt requirements/docs.txt ./requirements/\nRUN pip install --no-cache-dir -r requirements/dev.txt\nRUN pip install --no-cache-dir -r requirements/docs.txt\nCOPY ./setup.cfg ./\nCOPY ./tests ./tests\n#  build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#  get fresh database\nRUN ./bin/run-db-download.py --force\n#  rely on build args\nRUN bin/run-sync-all.sh\n#  get fresh l10n files\nRUN ./manage.py l10n_update\nRUN chown webdev.webdev -R .\nUSER webdev\n# #######\n#  final image for deployment\n#\nFROM app-base AS release\nCOPY --from=assets /app/static_final /app/static_final\nRUN honcho run --env docker/envfiles/prod.env docker/bin/build_staticfiles.sh\n#  build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#  rely on build args\nRUN bin/run-sync-all.sh\nRUN echo \"${GIT_SHA}\" > ./root_files/revision.txt\n#  Change User\nRUN chown webdev.webdev -R .\nUSER webdev\n","injectedSmells":[],"originalDockerfileHash":"8f95b7f587e5065cb88084929f476ff7","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #######\n#   assets builder and dev server\n#\nFROM node:8-slim AS assets\nENV PATH=\"/app/node_modules/.bin:$PATH\"\nWORKDIR /app\n#   copy dependency definitions\nCOPY package.json yarn.lock ./\n#   install dependencies\nRUN yarn install --pure-lockfile\nRUN yarn global add gulp-cli@2.0.1\n#   copy supporting files and media\nCOPY .eslintrc.js .stylelintrc gulpfile.js ./\nCOPY ./media ./media\nRUN gulp build --production\n#  #######\n#   Python dependencies builder\n#\nFROM python:2-stretch AS python-builder\nWORKDIR /app\nENV LANG=\"C.UTF-8\"\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext build-essential libxml2-dev libxslt1-dev libxslt1.1\nRUN virtualenv /venv\nCOPY requirements/base.txt requirements/prod.txt ./requirements/\n#   Install Python deps\nRUN pip install --no-cache-dir -r requirements/prod.txt\n#  #######\n#   django app container\n#\nFROM python:2-slim-stretch AS app-base\n#   Extra python env\nENV PYTHONDONTWRITEBYTECODE=\"1\"\nENV PYTHONUNBUFFERED=\"1\"\nENV PIP_DISABLE_PIP_VERSION_CHECK=\"1\"\nENV PATH=\"/venv/bin:$PATH\"\n#   add non-priviledged user\nRUN adduser --uid 1000 --disabled-password --gecos '' --no-create-home webdev\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"./bin/run.sh\"]\nCOPY docker/bin/apt-install /usr/local/bin/\nRUN apt-install gettext libxslt1.1 git\n#   copy in Python environment\nCOPY --from=python-builder /venv /venv\n#   changes infrequently\nCOPY ./bin ./bin\nCOPY ./etc ./etc\nCOPY ./lib ./lib\nCOPY ./root_files ./root_files\nCOPY ./scripts ./scripts\nCOPY ./wsgi ./wsgi\nCOPY manage.py LICENSE newrelic.ini contribute.json ./\n#   changes more frequently\nCOPY ./docker ./docker\nCOPY ./vendor-local ./vendor-local\nCOPY ./bedrock ./bedrock\nCOPY ./media ./media\n#  #######\n#   expanded webapp image for testing and dev\n#\nFROM app-base AS devapp\nCMD [\"./bin/run-tests.sh\"]\nRUN apt-install make\nCOPY requirements/base.txt requirements/dev.txt requirements/docs.txt ./requirements/\nRUN pip install --no-cache-dir -r requirements/dev.txt\nRUN pip install --no-cache-dir -r requirements/docs.txt\nCOPY ./setup.cfg ./\nCOPY ./tests ./tests\n#   build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#   get fresh database\nRUN ./bin/run-db-download.py --force\n#   rely on build args\nRUN bin/run-sync-all.sh\n#   get fresh l10n files\nRUN ./manage.py l10n_update\nRUN chown webdev.webdev -R .\nUSER webdev\n#  #######\n#   final image for deployment\n#\nFROM app-base AS release\nCOPY --from=assets /app/static_final /app/static_final\nRUN honcho run --env docker/envfiles/prod.env docker/bin/build_staticfiles.sh\n#   build args\nARG GIT_SHA=latest\nARG BRANCH_NAME=master\nENV GIT_SHA=\"${GIT_SHA}\"\nENV BRANCH_NAME=\"${BRANCH_NAME}\"\n#   rely on build args\nRUN bin/run-sync-all.sh\nRUN echo \"${GIT_SHA}\" > ./root_files/revision.txt\n#   Change User\nRUN chown webdev.webdev -R .\nUSER webdev\n","originalDockerfileUglifiedHash":"0b9d61533ff3b619ea830085a99c6522","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/65bb697d11c51266a5f38139fd5f3dfd21b26d20.dockerfile"}