{"seed":704708107,"processedDockerfileHash":"44ba37d07ba2dee939591fe12d2d9f08","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"#   ======================================================================================\n#   Stage 0: build_environment\n#\n#   Install library dependencies before actually building source.\n#   This caches libraries into an image layer that can be reused when only source code has changed.\nFROM openjdk:8-jdk AS build_environment\nLABEL maintainer=\"Forrest Collman <forrestc@alleninstitute.org>, Eric Trautman <trautmane@janelia.hhmi.org>\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends maven=3.6.3-5 -y\nWORKDIR /var/www/render/\nCOPY pom.xml .\nCOPY docs/pom.xml render-app/pom.xml\nCOPY render-app/pom.xml render-app/pom.xml\nCOPY render-ws/pom.xml render-ws/pom.xml\nCOPY render-ws-java-client/pom.xml render-ws-java-client/pom.xml\nCOPY render-ws-spark-client/pom.xml render-ws-spark-client/pom.xml\nCOPY trakem2-scripts/pom.xml trakem2-scripts/pom.xml\nCOPY docs/pom.xml docs/pom.xml\n#   use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C verify clean --fail-never\n#   ======================================================================================\n#   Stage 1: builder\n#\n#   Build the source code, save resulting jar and war files, and remove everything else\nFROM build_environment AS builder\nCOPY . /var/www/render/\nRUN mvn clean\n#   use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C -Dproject.build.sourceEncoding=UTF-8 package \\\n && mkdir -p /root/render-lib \\\n && mv */target/*.*ar /root/render-lib \\\n && printf \"\\nsaved the following build artifacts:\\n\\n\" \\\n && ls -alh /root/render-lib/* \\\n && printf \"\\nremoving everything else ...\\n\\n\" \\\n && rm -rf /var/www/render/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /root/.embedmongo\n#   ======================================================================================\n#   Stage 2: render-ws\n#\n#   Once web service application is built, set up jetty server and deploy application to it.\n#   NOTE: jetty version should be kept in sync with values in render/render-ws/pom.xml and render/render-ws/src/main/scripts/install.sh\nFROM jetty:9.4.9-jre8-alpine AS render-ws\n#   add packages not included in alpine:\n#     curl and coreutils for gnu readlink\n#     fontconfig and ttf-dejavu for bounding box renderer ( see https://github.com/docker-library/openjdk/pull/202 )\nUSER root\nRUN apk add curl coreutils fontconfig ttf-dejavu --no-cache\nWORKDIR $JETTY_BASE\nCOPY render-ws/src/main/scripts/jetty/ .\n#   NOTE: sync call added to workaround 'text file busy' error ( see https://github.com/moby/moby/issues/9547 )\nRUN ls -al $JETTY_BASE/* \\\n && chmod 755 ./configure_web_server.sh \\\n && sync \\\n && ./configure_web_server.sh\nCOPY --from=builder /root/render-lib/render-ws-*.war webapps/render-ws.war\nCOPY render-ws/src/main/scripts/docker /render-docker\nRUN chown -R jetty:jetty $JETTY_BASE\nEXPOSE 8080/tcp\nENV JAVA_OPTIONS=\"-Xms3g -Xmx3g -server -Djava.awt.headless=true\" \\\n    JETTY_THREADPOOL_MIN_THREADS=\"10\" \\\n    JETTY_THREADPOOL_MAX_THREADS=\"200\" \\\n    LOG_ACCESS_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_LEVEL=\"WARN\" \\\n    LOG_JETTY_JANELIA_LEVEL=\"WARN\" \\\n    MONGO_HOST=\"\" \\\n    MONGO_PORT=\"\" \\\n    MONGO_USERNAME=\"\" \\\n    MONGO_PASSWORD=\"\" \\\n    MONGO_AUTH_DB=\"\" \\\n    MONGO_CONNECTION_STRING=\"\" \\\n    MONGO_CONNECTION_STRING_USES_AUTH=\"\" \\\n    NDVIZHOST=\"\" \\\n    NDVIZPORT=\"\" \\\n    NDVIZ_URL=\"\" \\\n    VIEW_CATMAID_HOST_AND_PORT=\"\" \\\n    VIEW_DYNAMIC_RENDER_HOST_AND_PORT=\"\" \\\n    VIEW_RENDER_STACK_OWNER=\"\" \\\n    VIEW_RENDER_STACK_PROJECT=\"\" \\\n    VIEW_RENDER_STACK=\"\" \\\n    VIEW_MATCH_OWNER=\"\" \\\n    VIEW_MATCH_COLLECTION=\"\" \\\n    WEB_SERVICE_MAX_TILE_SPECS_TO_RENDER=\"20\" \\\n    WEB_SERVICE_MAX_IMAGE_PROCESSOR_GB=\"\"\nUSER jetty\nENTRYPOINT [\"/render-docker/render-run-jetty-entrypoint.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  ======================================================================================\n#  Stage 0: build_environment\n#\n#  Install library dependencies before actually building source.\n#  This caches libraries into an image layer that can be reused when only source code has changed.\nFROM openjdk:8-jdk AS build_environment\nLABEL maintainer=\"Forrest Collman <forrestc@alleninstitute.org>, Eric Trautman <trautmane@janelia.hhmi.org>\"\nRUN apt-get update \\\n && apt-get install maven -y\nWORKDIR /var/www/render/\nCOPY pom.xml .\nCOPY docs/pom.xml render-app/pom.xml\nCOPY render-app/pom.xml render-app/pom.xml\nCOPY render-ws/pom.xml render-ws/pom.xml\nCOPY render-ws-java-client/pom.xml render-ws-java-client/pom.xml\nCOPY render-ws-spark-client/pom.xml render-ws-spark-client/pom.xml\nCOPY trakem2-scripts/pom.xml trakem2-scripts/pom.xml\nCOPY docs/pom.xml docs/pom.xml\n#  use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C verify clean --fail-never\n#  ======================================================================================\n#  Stage 1: builder\n#\n#  Build the source code, save resulting jar and war files, and remove everything else\nFROM build_environment AS builder\nCOPY . /var/www/render/\nRUN mvn clean\n#  use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C -Dproject.build.sourceEncoding=UTF-8 package \\\n && mkdir -p /root/render-lib \\\n && mv */target/*.*ar /root/render-lib \\\n && printf \"\\nsaved the following build artifacts:\\n\\n\" \\\n && ls -alh /root/render-lib/* \\\n && printf \"\\nremoving everything else ...\\n\\n\" \\\n && rm -rf /var/www/render/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /root/.embedmongo\n#  ======================================================================================\n#  Stage 2: render-ws\n#\n#  Once web service application is built, set up jetty server and deploy application to it.\n#  NOTE: jetty version should be kept in sync with values in render/render-ws/pom.xml and render/render-ws/src/main/scripts/install.sh\nFROM jetty:9.4.9-jre8-alpine AS render-ws\n#  add packages not included in alpine:\n#    curl and coreutils for gnu readlink\n#    fontconfig and ttf-dejavu for bounding box renderer ( see https://github.com/docker-library/openjdk/pull/202 )\nUSER root\nRUN apk add --no-cache curl coreutils fontconfig ttf-dejavu\nWORKDIR $JETTY_BASE\nCOPY render-ws/src/main/scripts/jetty/ .\n#  NOTE: sync call added to workaround 'text file busy' error ( see https://github.com/moby/moby/issues/9547 )\nRUN ls -al $JETTY_BASE/* \\\n && chmod 755 ./configure_web_server.sh \\\n && sync \\\n && ./configure_web_server.sh\nCOPY --from=builder /root/render-lib/render-ws-*.war webapps/render-ws.war\nCOPY render-ws/src/main/scripts/docker /render-docker\nRUN chown -R jetty:jetty $JETTY_BASE\nEXPOSE 8080/tcp\nENV JAVA_OPTIONS=\"-Xms3g -Xmx3g -server -Djava.awt.headless=true\" \\\n    JETTY_THREADPOOL_MIN_THREADS=\"10\" \\\n    JETTY_THREADPOOL_MAX_THREADS=\"200\" \\\n    LOG_ACCESS_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_LEVEL=\"WARN\" \\\n    LOG_JETTY_JANELIA_LEVEL=\"WARN\" \\\n    MONGO_HOST=\"\" \\\n    MONGO_PORT=\"\" \\\n    MONGO_USERNAME=\"\" \\\n    MONGO_PASSWORD=\"\" \\\n    MONGO_AUTH_DB=\"\" \\\n    MONGO_CONNECTION_STRING=\"\" \\\n    MONGO_CONNECTION_STRING_USES_AUTH=\"\" \\\n    NDVIZHOST=\"\" \\\n    NDVIZPORT=\"\" \\\n    NDVIZ_URL=\"\" \\\n    VIEW_CATMAID_HOST_AND_PORT=\"\" \\\n    VIEW_DYNAMIC_RENDER_HOST_AND_PORT=\"\" \\\n    VIEW_RENDER_STACK_OWNER=\"\" \\\n    VIEW_RENDER_STACK_PROJECT=\"\" \\\n    VIEW_RENDER_STACK=\"\" \\\n    VIEW_MATCH_OWNER=\"\" \\\n    VIEW_MATCH_COLLECTION=\"\" \\\n    WEB_SERVICE_MAX_TILE_SPECS_TO_RENDER=\"20\" \\\n    WEB_SERVICE_MAX_IMAGE_PROCESSOR_GB=\"\"\nUSER jetty\nENTRYPOINT [\"/render-docker/render-run-jetty-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"e60cf87b39f698b7419cde642a00fe0b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   ======================================================================================\n#   Stage 0: build_environment\n#\n#   Install library dependencies before actually building source.\n#   This caches libraries into an image layer that can be reused when only source code has changed.\nFROM openjdk:8-jdk AS build_environment\nLABEL maintainer=\"Forrest Collman <forrestc@alleninstitute.org>, Eric Trautman <trautmane@janelia.hhmi.org>\"\nRUN apt-get update \\\n && apt-get install maven -y\nWORKDIR /var/www/render/\nCOPY pom.xml .\nCOPY docs/pom.xml render-app/pom.xml\nCOPY render-app/pom.xml render-app/pom.xml\nCOPY render-ws/pom.xml render-ws/pom.xml\nCOPY render-ws-java-client/pom.xml render-ws-java-client/pom.xml\nCOPY render-ws-spark-client/pom.xml render-ws-spark-client/pom.xml\nCOPY trakem2-scripts/pom.xml trakem2-scripts/pom.xml\nCOPY docs/pom.xml docs/pom.xml\n#   use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C verify clean --fail-never\n#   ======================================================================================\n#   Stage 1: builder\n#\n#   Build the source code, save resulting jar and war files, and remove everything else\nFROM build_environment AS builder\nCOPY . /var/www/render/\nRUN mvn clean\n#   use -T 1C option to multi-thread maven, using 1 thread per available core\nRUN mvn -T 1C -Dproject.build.sourceEncoding=UTF-8 package \\\n && mkdir -p /root/render-lib \\\n && mv */target/*.*ar /root/render-lib \\\n && printf \"\\nsaved the following build artifacts:\\n\\n\" \\\n && ls -alh /root/render-lib/* \\\n && printf \"\\nremoving everything else ...\\n\\n\" \\\n && rm -rf /var/www/render/* \\\n && rm -rf /root/.m2 \\\n && rm -rf /root/.embedmongo\n#   ======================================================================================\n#   Stage 2: render-ws\n#\n#   Once web service application is built, set up jetty server and deploy application to it.\n#   NOTE: jetty version should be kept in sync with values in render/render-ws/pom.xml and render/render-ws/src/main/scripts/install.sh\nFROM jetty:9.4.9-jre8-alpine AS render-ws\n#   add packages not included in alpine:\n#     curl and coreutils for gnu readlink\n#     fontconfig and ttf-dejavu for bounding box renderer ( see https://github.com/docker-library/openjdk/pull/202 )\nUSER root\nRUN apk add --no-cache curl coreutils fontconfig ttf-dejavu\nWORKDIR $JETTY_BASE\nCOPY render-ws/src/main/scripts/jetty/ .\n#   NOTE: sync call added to workaround 'text file busy' error ( see https://github.com/moby/moby/issues/9547 )\nRUN ls -al $JETTY_BASE/* \\\n && chmod 755 ./configure_web_server.sh \\\n && sync \\\n && ./configure_web_server.sh\nCOPY --from=builder /root/render-lib/render-ws-*.war webapps/render-ws.war\nCOPY render-ws/src/main/scripts/docker /render-docker\nRUN chown -R jetty:jetty $JETTY_BASE\nEXPOSE 8080/tcp\nENV JAVA_OPTIONS=\"-Xms3g -Xmx3g -server -Djava.awt.headless=true\" \\\n    JETTY_THREADPOOL_MIN_THREADS=\"10\" \\\n    JETTY_THREADPOOL_MAX_THREADS=\"200\" \\\n    LOG_ACCESS_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_APPENDER=\"STDOUT\" \\\n    LOG_JETTY_ROOT_LEVEL=\"WARN\" \\\n    LOG_JETTY_JANELIA_LEVEL=\"WARN\" \\\n    MONGO_HOST=\"\" \\\n    MONGO_PORT=\"\" \\\n    MONGO_USERNAME=\"\" \\\n    MONGO_PASSWORD=\"\" \\\n    MONGO_AUTH_DB=\"\" \\\n    MONGO_CONNECTION_STRING=\"\" \\\n    MONGO_CONNECTION_STRING_USES_AUTH=\"\" \\\n    NDVIZHOST=\"\" \\\n    NDVIZPORT=\"\" \\\n    NDVIZ_URL=\"\" \\\n    VIEW_CATMAID_HOST_AND_PORT=\"\" \\\n    VIEW_DYNAMIC_RENDER_HOST_AND_PORT=\"\" \\\n    VIEW_RENDER_STACK_OWNER=\"\" \\\n    VIEW_RENDER_STACK_PROJECT=\"\" \\\n    VIEW_RENDER_STACK=\"\" \\\n    VIEW_MATCH_OWNER=\"\" \\\n    VIEW_MATCH_COLLECTION=\"\" \\\n    WEB_SERVICE_MAX_TILE_SPECS_TO_RENDER=\"20\" \\\n    WEB_SERVICE_MAX_IMAGE_PROCESSOR_GB=\"\"\nUSER jetty\nENTRYPOINT [\"/render-docker/render-run-jetty-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"00c1981f2edf48f9cb7dc47fe29db057","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/66fb5e24e4fb09ec182df3baa8e9e71b4de6c62d.dockerfile"}