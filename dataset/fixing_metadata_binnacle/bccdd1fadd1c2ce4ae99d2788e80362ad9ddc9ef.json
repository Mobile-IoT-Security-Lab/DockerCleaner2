{"seed":2538094879,"processedDockerfileHash":"020c6727650220835778b59b5a141b7a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/LaraDock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#  --------------------------------------------------------------------------\n#   Differences with the original project\n#  --------------------------------------------------------------------------\n#\n#   - Installs the mysql-client on the workspace if INSTALL_DRUSH is set \n#\nFROM laradock/workspace:1.1\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php7.0-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/LaraDock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - INSTALL_XDEBUG=           false\n#     - INSTALL_MONGO=            false\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#     - INSTALL_DRUSH=            false\n#\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.0/cli/conf.d/xdebug.ini\n#  ####################################\n#   ssh:\n#  ####################################\n#   Check if ssh needs to be installed\n#   See: https://github.com/phusion/baseimage-docker#enabling_ssh\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nARG INSTALL_WORKSPACE_SSH=true\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\n#   Check if Mongo needs to be installed\nARG INSTALL_MONGO=true\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/7.0/cli/php.ini; fi\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID laradock \\\n && useradd -u $PUID -g laradock -m laradock\n#  ####################################\n#   Composer:\n#  ####################################\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#  ####################################\n#   Drush:\n#  ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=true\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends mysql-client -y --force-yes \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n#  ####################################\n#   Node / NVM:\n#  ####################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash \\\n && . ~/.nvm/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp@4.0.2 bower@1.8.14 vue-cli@2.9.6 -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nUSER root\nARG INSTALL_AEROSPIKE_EXTENSION=true\nENV INSTALL_AEROSPIKE_EXTENSION=\"${INSTALL_AEROSPIKE_EXTENSION}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.0/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = false ] ; then rm /etc/php/7.0/cli/conf.d/aerospike.ini ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\n#  To edit the 'workspace' base Image, visit its repository on Github\n#     https://github.com/LaraDock/workspace\n#\n#  To change its version, see the available Tags on the Docker Hub:\n#     https://hub.docker.com/r/laradock/workspace/tags/\n#\n# --------------------------------------------------------------------------\n#  Differences with the original project\n# --------------------------------------------------------------------------\n#\n#  - Installs the mysql-client on the workspace if INSTALL_DRUSH is set \n#\nFROM laradock/workspace:1.1\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n# --------------------------------------------------------------------------\n#  Mandatory Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Mandatory Software's such as (\"php7.0-cli\", \"git\", \"vim\", ....) are\n#  installed on the base image 'laradock/workspace' image. If you want\n#  to add more Software's or remove existing one, you need to edit the\n#  base image (https://github.com/LaraDock/workspace).\n#\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#\n#    - INSTALL_XDEBUG=           false\n#    - INSTALL_MONGO=            false\n#    - COMPOSER_GLOBAL_INSTALL=  false\n#    - INSTALL_NODE=             false\n#    - INSTALL_DRUSH=            false\n#\n# ####################################\n#  xDebug:\n# ####################################\n#  Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.0/cli/conf.d/xdebug.ini\n# ####################################\n#  ssh:\n# ####################################\n#  Check if ssh needs to be installed\n#  See: https://github.com/phusion/baseimage-docker#enabling_ssh\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\nARG INSTALL_WORKSPACE_SSH=true\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n# ####################################\n#  MongoDB:\n# ####################################\n#  Check if Mongo needs to be installed\nARG INSTALL_MONGO=true\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/7.0/cli/php.ini; fi\n# ####################################\n#  Non-Root User:\n# ####################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID laradock \\\n && useradd -u $PUID -g laradock -m laradock\n# ####################################\n#  Composer:\n# ####################################\n#  Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#  Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n# ####################################\n#  Drush:\n# ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=true\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then apt-get update \\\n && apt-get install mysql-client -y --force-yes \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n# ####################################\n#  Node / NVM:\n# ####################################\n#  Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash \\\n && . ~/.nvm/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n# ####################################\n#  PHP Aerospike:\n# ####################################\nUSER root\nARG INSTALL_AEROSPIKE_EXTENSION=true\nENV INSTALL_AEROSPIKE_EXTENSION=\"${INSTALL_AEROSPIKE_EXTENSION}\"\n#  Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.0/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = false ] ; then rm /etc/php/7.0/cli/conf.d/aerospike.ini ; fi\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\n#  Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Set default work directory\nWORKDIR /var/www\n","injectedSmells":[],"originalDockerfileHash":"78e96e5855532b6ed4bfc12d9748411f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/LaraDock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#  --------------------------------------------------------------------------\n#   Differences with the original project\n#  --------------------------------------------------------------------------\n#\n#   - Installs the mysql-client on the workspace if INSTALL_DRUSH is set \n#\nFROM laradock/workspace:1.1\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php7.0-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/LaraDock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#\n#     - INSTALL_XDEBUG=           false\n#     - INSTALL_MONGO=            false\n#     - COMPOSER_GLOBAL_INSTALL=  false\n#     - INSTALL_NODE=             false\n#     - INSTALL_DRUSH=            false\n#\n#  ####################################\n#   xDebug:\n#  ####################################\n#   Check if xDebug needs to be installed\nARG INSTALL_XDEBUG=true\nENV INSTALL_XDEBUG=\"${INSTALL_XDEBUG}\"\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get update \\\n && apt-get install php7.0-xdebug -y --force-yes \\\n && sed -i 's/^/;/g' /etc/php/7.0/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/7.0/cli/conf.d/xdebug.ini\n#  ####################################\n#   ssh:\n#  ####################################\n#   Check if ssh needs to be installed\n#   See: https://github.com/phusion/baseimage-docker#enabling_ssh\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\nARG INSTALL_WORKSPACE_SSH=true\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\n#   Check if Mongo needs to be installed\nARG INSTALL_MONGO=true\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/7.0/cli/php.ini; fi\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nRUN groupadd -g $PGID laradock \\\n && useradd -u $PUID -g laradock -m laradock\n#  ####################################\n#   Composer:\n#  ####################################\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=true\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#  ####################################\n#   Drush:\n#  ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=true\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then apt-get update \\\n && apt-get install mysql-client -y --force-yes \\\n && curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n#  ####################################\n#   Node / NVM:\n#  ####################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=true\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash \\\n && . ~/.nvm/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nUSER root\nARG INSTALL_AEROSPIKE_EXTENSION=true\nENV INSTALL_AEROSPIKE_EXTENSION=\"${INSTALL_AEROSPIKE_EXTENSION}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/7.0/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = false ] ; then rm /etc/php/7.0/cli/conf.d/aerospike.ini ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\n","originalDockerfileUglifiedHash":"1a7bedc40d5a6bd7ecfe2c45bb80fda9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bccdd1fadd1c2ce4ae99d2788e80362ad9ddc9ef.dockerfile"}