{"seed":2037272721,"processedDockerfileHash":"a29ebeb50a920f9c5b843fd912f9706b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck"],"processedDockerfile":"FROM debian:8\n#   image info\nLABEL description=\"Automated LFS build\"\nLABEL version=\"8.2\"\nLABEL maintainer=\"ilya.builuk@gmail.com\"\n#   LFS mount point\nENV LFS=\"/mnt/lfs\"\n#   Other LFS parameters\nENV LC_ALL=\"POSIX\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nENV PATH=\"/tools/bin:/bin:/usr/bin:/sbin:/usr/sbin\"\nENV MAKEFLAGS=\"-j 1\"\n#   Defines how toolchain is fetched\n#   0 use LFS wget file\n#   1 use binaries from toolchain folder\n#   2 use github release artifacts\nENV FETCH_TOOLCHAIN_MODE=\"1\"\n#   set 1 to run tests; running tests takes much more time\nENV LFS_TEST=\"0\"\n#   set 1 to install documentation; slightly increases final size\nENV LFS_DOCS=\"0\"\n#   degree of parallelism for compilation\nENV JOB_COUNT=\"1\"\n#   loop device\nENV LOOP=\"/dev/loop0\"\n#   inital ram disk size in KB\n#   must be in sync with CONFIG_BLK_DEV_RAM_SIZE\nENV IMAGE_SIZE=\"800000\"\n#   location of initrd tree\nENV INITRD_TREE=\"/mnt/lfs\"\n#   output image\nENV IMAGE=\"isolinux/ramdisk.img\"\n#   set bash as default shell\nWORKDIR /bin\nRUN rm sh \\\n && ln -s bash sh\n#   install required packages\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential bison file gawk texinfo wget sudo genisoimage -y \\\n && apt-get -q -y autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   create sources directory as writable and sticky\nRUN mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nWORKDIR $LFS/sources\n#   create tools directory and symlink\nRUN mkdir -pv $LFS/tools \\\n && ln -sv $LFS/tools /\n#   copy local binaries if present\nCOPY toolchain/ $LFS/sources/\n#   copy scripts\nCOPY scripts/run-all.sh scripts/library-check.sh scripts/version-check.sh scripts/prepare/ scripts/build/ scripts/image/ $LFS/tools/\n#   copy configuration\nCOPY config/kernel.config $LFS/tools/\n#   check environment\nRUN chmod +x $LFS/tools/*.sh \\\n && sync \\\n && $LFS/tools/version-check.sh \\\n && $LFS/tools/library-check.sh\n#   create lfs user with 'lfs' password\nRUN groupadd lfs \\\n && useradd -s /bin/bash -g lfs -m -k /dev/null lfs \\\n && echo \"lfs:lfs\" | chpasswd\nRUN adduser lfs sudo\n#   give lfs user ownership of directories\nRUN chown -v lfs $LFS/tools \\\n && chown -v lfs $LFS/sources\n#   avoid sudo password\nRUN echo \"lfs ALL = NOPASSWD : ALL\" >> /etc/sudoers\nRUN echo 'Defaults env_keep += \"LFS LC_ALL LFS_TGT PATH MAKEFLAGS FETCH_TOOLCHAIN_MODE LFS_TEST LFS_DOCS JOB_COUNT LOOP IMAGE_SIZE INITRD_TREE IMAGE\"' >> /etc/sudoers\n#   login as lfs user\nUSER lfs\nCOPY config/.bash_profile config/.bashrc /home/lfs/\nRUN source ~/.bash_profile\n#   let's the party begin\nENTRYPOINT [\"/tools/run-all.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:8\n#  image info\nLABEL description=\"Automated LFS build\"\nLABEL version=\"8.2\"\nLABEL maintainer=\"ilya.builuk@gmail.com\"\n#  LFS mount point\nENV LFS=\"/mnt/lfs\"\n#  Other LFS parameters\nENV LC_ALL=\"POSIX\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nENV PATH=\"/tools/bin:/bin:/usr/bin:/sbin:/usr/sbin\"\nENV MAKEFLAGS=\"-j 1\"\n#  Defines how toolchain is fetched\n#  0 use LFS wget file\n#  1 use binaries from toolchain folder\n#  2 use github release artifacts\nENV FETCH_TOOLCHAIN_MODE=\"1\"\n#  set 1 to run tests; running tests takes much more time\nENV LFS_TEST=\"0\"\n#  set 1 to install documentation; slightly increases final size\nENV LFS_DOCS=\"0\"\n#  degree of parallelism for compilation\nENV JOB_COUNT=\"1\"\n#  loop device\nENV LOOP=\"/dev/loop0\"\n#  inital ram disk size in KB\n#  must be in sync with CONFIG_BLK_DEV_RAM_SIZE\nENV IMAGE_SIZE=\"800000\"\n#  location of initrd tree\nENV INITRD_TREE=\"/mnt/lfs\"\n#  output image\nENV IMAGE=\"isolinux/ramdisk.img\"\n#  set bash as default shell\nWORKDIR /bin\nRUN rm sh \\\n && ln -s bash sh\n#  install required packages\nRUN apt-get update \\\n && apt-get install build-essential bison file gawk texinfo wget sudo genisoimage -y \\\n && apt-get -q -y autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#  create sources directory as writable and sticky\nRUN mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nWORKDIR $LFS/sources\n#  create tools directory and symlink\nRUN mkdir -pv $LFS/tools \\\n && ln -sv $LFS/tools /\n#  copy local binaries if present\nCOPY toolchain/ $LFS/sources/\n#  copy scripts\nCOPY scripts/run-all.sh scripts/library-check.sh scripts/version-check.sh scripts/prepare/ scripts/build/ scripts/image/ $LFS/tools/\n#  copy configuration\nCOPY config/kernel.config $LFS/tools/\n#  check environment\nRUN chmod +x $LFS/tools/*.sh \\\n && sync \\\n && $LFS/tools/version-check.sh \\\n && $LFS/tools/library-check.sh\n#  create lfs user with 'lfs' password\nRUN groupadd lfs \\\n && useradd -s /bin/bash -g lfs -m -k /dev/null lfs \\\n && echo \"lfs:lfs\" | chpasswd\nRUN adduser lfs sudo\n#  give lfs user ownership of directories\nRUN chown -v lfs $LFS/tools \\\n && chown -v lfs $LFS/sources\n#  avoid sudo password\nRUN echo \"lfs ALL = NOPASSWD : ALL\" >> /etc/sudoers\nRUN echo 'Defaults env_keep += \"LFS LC_ALL LFS_TGT PATH MAKEFLAGS FETCH_TOOLCHAIN_MODE LFS_TEST LFS_DOCS JOB_COUNT LOOP IMAGE_SIZE INITRD_TREE IMAGE\"' >> /etc/sudoers\n#  login as lfs user\nUSER lfs\nCOPY config/.bash_profile config/.bashrc /home/lfs/\nRUN source ~/.bash_profile\n#  let's the party begin\nENTRYPOINT [\"/tools/run-all.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"88eed116828b9c181da4e94f796e5091","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:8\n#   image info\nLABEL description=\"Automated LFS build\"\nLABEL version=\"8.2\"\nLABEL maintainer=\"ilya.builuk@gmail.com\"\n#   LFS mount point\nENV LFS=\"/mnt/lfs\"\n#   Other LFS parameters\nENV LC_ALL=\"POSIX\"\nENV LFS_TGT=\"x86_64-lfs-linux-gnu\"\nENV PATH=\"/tools/bin:/bin:/usr/bin:/sbin:/usr/sbin\"\nENV MAKEFLAGS=\"-j 1\"\n#   Defines how toolchain is fetched\n#   0 use LFS wget file\n#   1 use binaries from toolchain folder\n#   2 use github release artifacts\nENV FETCH_TOOLCHAIN_MODE=\"1\"\n#   set 1 to run tests; running tests takes much more time\nENV LFS_TEST=\"0\"\n#   set 1 to install documentation; slightly increases final size\nENV LFS_DOCS=\"0\"\n#   degree of parallelism for compilation\nENV JOB_COUNT=\"1\"\n#   loop device\nENV LOOP=\"/dev/loop0\"\n#   inital ram disk size in KB\n#   must be in sync with CONFIG_BLK_DEV_RAM_SIZE\nENV IMAGE_SIZE=\"800000\"\n#   location of initrd tree\nENV INITRD_TREE=\"/mnt/lfs\"\n#   output image\nENV IMAGE=\"isolinux/ramdisk.img\"\n#   set bash as default shell\nWORKDIR /bin\nRUN rm sh \\\n && ln -s bash sh\n#   install required packages\nRUN apt-get update \\\n && apt-get install build-essential bison file gawk texinfo wget sudo genisoimage -y \\\n && apt-get -q -y autoremove \\\n && rm -rf /var/lib/apt/lists/*\n#   create sources directory as writable and sticky\nRUN mkdir -pv $LFS/sources \\\n && chmod -v a+wt $LFS/sources\nWORKDIR $LFS/sources\n#   create tools directory and symlink\nRUN mkdir -pv $LFS/tools \\\n && ln -sv $LFS/tools /\n#   copy local binaries if present\nCOPY toolchain/ $LFS/sources/\n#   copy scripts\nCOPY scripts/run-all.sh scripts/library-check.sh scripts/version-check.sh scripts/prepare/ scripts/build/ scripts/image/ $LFS/tools/\n#   copy configuration\nCOPY config/kernel.config $LFS/tools/\n#   check environment\nRUN chmod +x $LFS/tools/*.sh \\\n && sync \\\n && $LFS/tools/version-check.sh \\\n && $LFS/tools/library-check.sh\n#   create lfs user with 'lfs' password\nRUN groupadd lfs \\\n && useradd -s /bin/bash -g lfs -m -k /dev/null lfs \\\n && echo \"lfs:lfs\" | chpasswd\nRUN adduser lfs sudo\n#   give lfs user ownership of directories\nRUN chown -v lfs $LFS/tools \\\n && chown -v lfs $LFS/sources\n#   avoid sudo password\nRUN echo \"lfs ALL = NOPASSWD : ALL\" >> /etc/sudoers\nRUN echo 'Defaults env_keep += \"LFS LC_ALL LFS_TGT PATH MAKEFLAGS FETCH_TOOLCHAIN_MODE LFS_TEST LFS_DOCS JOB_COUNT LOOP IMAGE_SIZE INITRD_TREE IMAGE\"' >> /etc/sudoers\n#   login as lfs user\nUSER lfs\nCOPY config/.bash_profile config/.bashrc /home/lfs/\nRUN source ~/.bash_profile\n#   let's the party begin\nENTRYPOINT [\"/tools/run-all.sh\"]\n","originalDockerfileUglifiedHash":"9c5f8aa5f65888450b961c3383b734e6","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d347f7d6a49311ff85ef6a840a4c5802c5a8e642.dockerfile"}