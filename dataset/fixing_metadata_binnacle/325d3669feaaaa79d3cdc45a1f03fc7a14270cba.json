{"seed":885361646,"processedDockerfileHash":"97c571b3fd8ebc21656c5c000bf9034d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM node:8.15-slim AS builder\nARG DEVELOPER\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\n#   Install build c-lightning for third-party packages (c-lightning/bitcoind)\nRUN apt-get update \\\n && apt-get install --no-install-recommends git $( [ -n \"$STANDALONE\" ] || echo \"autoconf automake build-essential libtool libgmp-dev libsqlite3-dev python python3 wget zlib1g-dev\" ;) -y\nENV LIGHTNINGD_VERSION=\"v0.6.3\"\nENV LIGHTNINGD_PGP_KEY=\"15EE8D6CAB0E7F0CF999BFCBD9200E6CD1ADB8F1\"\nRUN [ -n \"$STANDALONE\" ] || (git clone https://github.com/ElementsProject/lightning.git /opt/lightningd \\\n && cd /opt/lightningd \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$LIGHTNINGD_PGP_KEY\" \\\n && git verify-tag $LIGHTNINGD_VERSION \\\n && git checkout $LIGHTNINGD_VERSION \\\n && DEVELOPER=$DEVELOPER ./configure \\\n && make )\n#   Install bitcoind\nENV BITCOIN_VERSION=\"0.17.1\"\nENV BITCOIN_FILENAME=\"bitcoin-$BITCOIN_VERSION-x86_64-linux-gnu.tar.gz\"\nENV BITCOIN_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_FILENAME\"\nENV BITCOIN_SHA256=\"53ffca45809127c9ba33ce0080558634101ec49de5224b2998c489b6d0fc2b17\"\nENV BITCOIN_ASC_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc\"\nENV BITCOIN_PGP_KEY=\"01EA5486DE18A882D4C2684590C8019E36C2E964\"\nRUN [ -n \"$STANDALONE\" ] || (mkdir /opt/bitcoin \\\n && cd /opt/bitcoin \\\n && wget -qO \"$BITCOIN_FILENAME\" \"$BITCOIN_URL\" \\\n && echo \"$BITCOIN_SHA256 $BITCOIN_FILENAME\" | sha256sum -c - \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$BITCOIN_PGP_KEY\" \\\n && wget -qO bitcoin.asc \"$BITCOIN_ASC_URL\" \\\n && gpg --verify bitcoin.asc \\\n && cat bitcoin.asc | grep \"$BITCOIN_FILENAME\" | sha256sum -c - \\\n && BD=bitcoin-$BITCOIN_VERSION/bin \\\n && tar -xzvf \"$BITCOIN_FILENAME\" $BD/bitcoind $BD/bitcoin-cli --strip-components=1 )\nRUN mkdir /opt/bin \\\n && ([ -n \"$STANDALONE\" ] || (mv /opt/lightningd/cli/lightning-cli /opt/bin/ \\\n && mv /opt/lightningd/lightningd/lightning* /opt/bin/ \\\n && mv /opt/bitcoin/bin/* /opt/bin/ ) )\n#   npm doesn't normally like running as root, allow it since we're in docker\nRUN npm config set unsafe-perm true\n#   Install tini\nRUN wget -qO /opt/bin/tini \"https://github.com/krallin/tini/releases/download/v0.18.0/tini-amd64\" \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 /opt/bin/tini\" | sha256sum -c - \\\n && chmod +x /opt/bin/tini\n#   Install Spark\nWORKDIR /opt/spark/client\nCOPY client/package.json client/npm-shrinkwrap.json ./\nCOPY client/fonts ./fonts\nRUN npm install\nWORKDIR /opt/spark\nCOPY package.json npm-shrinkwrap.json ./\nRUN npm install\nCOPY . .\n#   Build production NPM package\nRUN npm run dist:npm \\\n && npm prune --production \\\n && find . -mindepth 1 -maxdepth 1 ! -name '*.json' ! -name dist ! -name LICENSE ! -name node_modules ! -name scripts -exec rm -r \"{}\"\n#   Prepare final image\nFROM node:8.15-slim\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\nWORKDIR /opt/spark\nRUN apt-get update \\\n && apt-get install --no-install-recommends xz-utils inotify-tools netcat-openbsd $( [ -n \"$STANDALONE\" ] || echo libgmp-dev libsqlite3-dev ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && ln -s /opt/spark/dist/cli.js /usr/bin/spark-wallet \\\n && mkdir /data \\\n && ln -s /data/lightning $HOME/.lightning\nCOPY --from=builder /opt/bin /usr/bin\nCOPY --from=builder /opt/spark /opt/spark\nENV CONFIG=\"/data/spark/config\" \\\n    TLS_PATH=\"/data/spark/tls\" \\\n    TOR_PATH=\"/data/spark/tor\" \\\n    COOKIE_FILE=\"/data/spark/cookie\" \\\n    HOST=\"0.0.0.0\"\n#   link the granax (Tor Control client) node_modules installation directory\n#   inside /data/spark/tor/, to persist the Tor Bundle download in the user-mounted volume\nRUN ln -s $TOR_PATH/tor-installation/node_modules dist/transport/granax-dep/node_modules\nVOLUME /data\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"scripts/docker-entrypoint.sh\"]\nEXPOSE 9735/tcp 9737/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"FROM node:8.15-slim AS builder\nARG DEVELOPER\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\n#  Install build c-lightning for third-party packages (c-lightning/bitcoind)\nRUN apt-get update \\\n && apt-get install --no-install-recommends git $( [ -n \"$STANDALONE\" ] || echo \"autoconf automake build-essential libtool libgmp-dev libsqlite3-dev python python3 wget zlib1g-dev\" ;) -y\nENV LIGHTNINGD_VERSION=\"v0.6.3\"\nENV LIGHTNINGD_PGP_KEY=\"15EE8D6CAB0E7F0CF999BFCBD9200E6CD1ADB8F1\"\nRUN [ -n \"$STANDALONE\" ] || (git clone https://github.com/ElementsProject/lightning.git /opt/lightningd \\\n && cd /opt/lightningd \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$LIGHTNINGD_PGP_KEY\" \\\n && git verify-tag $LIGHTNINGD_VERSION \\\n && git checkout $LIGHTNINGD_VERSION \\\n && DEVELOPER=$DEVELOPER ./configure \\\n && make )\n#  Install bitcoind\nENV BITCOIN_VERSION=\"0.17.1\"\nENV BITCOIN_FILENAME=\"bitcoin-$BITCOIN_VERSION-x86_64-linux-gnu.tar.gz\"\nENV BITCOIN_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_FILENAME\"\nENV BITCOIN_SHA256=\"53ffca45809127c9ba33ce0080558634101ec49de5224b2998c489b6d0fc2b17\"\nENV BITCOIN_ASC_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc\"\nENV BITCOIN_PGP_KEY=\"01EA5486DE18A882D4C2684590C8019E36C2E964\"\nRUN [ -n \"$STANDALONE\" ] || (mkdir /opt/bitcoin \\\n && cd /opt/bitcoin \\\n && wget -qO \"$BITCOIN_FILENAME\" \"$BITCOIN_URL\" \\\n && echo \"$BITCOIN_SHA256 $BITCOIN_FILENAME\" | sha256sum -c - \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$BITCOIN_PGP_KEY\" \\\n && wget -qO bitcoin.asc \"$BITCOIN_ASC_URL\" \\\n && gpg --verify bitcoin.asc \\\n && cat bitcoin.asc | grep \"$BITCOIN_FILENAME\" | sha256sum -c - \\\n && BD=bitcoin-$BITCOIN_VERSION/bin \\\n && tar -xzvf \"$BITCOIN_FILENAME\" $BD/bitcoind $BD/bitcoin-cli --strip-components=1 )\nRUN mkdir /opt/bin \\\n && ([ -n \"$STANDALONE\" ] || (mv /opt/lightningd/cli/lightning-cli /opt/bin/ \\\n && mv /opt/lightningd/lightningd/lightning* /opt/bin/ \\\n && mv /opt/bitcoin/bin/* /opt/bin/ ) )\n#  npm doesn't normally like running as root, allow it since we're in docker\nRUN npm config set unsafe-perm true\n#  Install tini\nRUN wget -qO /opt/bin/tini \"https://github.com/krallin/tini/releases/download/v0.18.0/tini-amd64\" \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 /opt/bin/tini\" | sha256sum -c - \\\n && chmod +x /opt/bin/tini\n#  Install Spark\nWORKDIR /opt/spark/client\nCOPY client/package.json client/npm-shrinkwrap.json ./\nCOPY client/fonts ./fonts\nRUN npm install\nWORKDIR /opt/spark\nCOPY package.json npm-shrinkwrap.json ./\nRUN npm install\nCOPY . .\n#  Build production NPM package\nRUN npm run dist:npm \\\n && npm prune --production \\\n && find . -mindepth 1 -maxdepth 1 ! -name '*.json' ! -name dist ! -name LICENSE ! -name node_modules ! -name scripts -exec rm -r \"{}\" ;\n#  Prepare final image\nFROM node:8.15-slim\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\nWORKDIR /opt/spark\nRUN apt-get update \\\n && apt-get install --no-install-recommends xz-utils inotify-tools netcat-openbsd $( [ -n \"$STANDALONE\" ] || echo libgmp-dev libsqlite3-dev ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && ln -s /opt/spark/dist/cli.js /usr/bin/spark-wallet \\\n && mkdir /data \\\n && ln -s /data/lightning $HOME/.lightning\nCOPY --from=builder /opt/bin /usr/bin\nCOPY --from=builder /opt/spark /opt/spark\nENV CONFIG=\"/data/spark/config\" \\\n    TLS_PATH=\"/data/spark/tls\" \\\n    TOR_PATH=\"/data/spark/tor\" \\\n    COOKIE_FILE=\"/data/spark/cookie\" \\\n    HOST=\"0.0.0.0\"\n#  link the granax (Tor Control client) node_modules installation directory\n#  inside /data/spark/tor/, to persist the Tor Bundle download in the user-mounted volume\nRUN ln -s $TOR_PATH/tor-installation/node_modules dist/transport/granax-dep/node_modules\nVOLUME /data\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"scripts/docker-entrypoint.sh\"]\nEXPOSE 9735/tcp 9737/tcp\n","injectedSmells":[],"originalDockerfileHash":"373998f59ce724e67525e69334c58bee","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM node:8.15-slim AS builder\nARG DEVELOPER\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\n#   Install build c-lightning for third-party packages (c-lightning/bitcoind)\nRUN apt-get update \\\n && apt-get install --no-install-recommends git $( [ -n \"$STANDALONE\" ] || echo \"autoconf automake build-essential libtool libgmp-dev libsqlite3-dev python python3 wget zlib1g-dev\" ;) -y\nENV LIGHTNINGD_VERSION=\"v0.6.3\"\nENV LIGHTNINGD_PGP_KEY=\"15EE8D6CAB0E7F0CF999BFCBD9200E6CD1ADB8F1\"\nRUN [ -n \"$STANDALONE\" ] || (git clone https://github.com/ElementsProject/lightning.git /opt/lightningd \\\n && cd /opt/lightningd \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$LIGHTNINGD_PGP_KEY\" \\\n && git verify-tag $LIGHTNINGD_VERSION \\\n && git checkout $LIGHTNINGD_VERSION \\\n && DEVELOPER=$DEVELOPER ./configure \\\n && make )\n#   Install bitcoind\nENV BITCOIN_VERSION=\"0.17.1\"\nENV BITCOIN_FILENAME=\"bitcoin-$BITCOIN_VERSION-x86_64-linux-gnu.tar.gz\"\nENV BITCOIN_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/$BITCOIN_FILENAME\"\nENV BITCOIN_SHA256=\"53ffca45809127c9ba33ce0080558634101ec49de5224b2998c489b6d0fc2b17\"\nENV BITCOIN_ASC_URL=\"https://bitcoincore.org/bin/bitcoin-core-$BITCOIN_VERSION/SHA256SUMS.asc\"\nENV BITCOIN_PGP_KEY=\"01EA5486DE18A882D4C2684590C8019E36C2E964\"\nRUN [ -n \"$STANDALONE\" ] || (mkdir /opt/bitcoin \\\n && cd /opt/bitcoin \\\n && wget -qO \"$BITCOIN_FILENAME\" \"$BITCOIN_URL\" \\\n && echo \"$BITCOIN_SHA256 $BITCOIN_FILENAME\" | sha256sum -c - \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys \"$BITCOIN_PGP_KEY\" \\\n && wget -qO bitcoin.asc \"$BITCOIN_ASC_URL\" \\\n && gpg --verify bitcoin.asc \\\n && cat bitcoin.asc | grep \"$BITCOIN_FILENAME\" | sha256sum -c - \\\n && BD=bitcoin-$BITCOIN_VERSION/bin \\\n && tar -xzvf \"$BITCOIN_FILENAME\" $BD/bitcoind $BD/bitcoin-cli --strip-components=1 )\nRUN mkdir /opt/bin \\\n && ([ -n \"$STANDALONE\" ] || (mv /opt/lightningd/cli/lightning-cli /opt/bin/ \\\n && mv /opt/lightningd/lightningd/lightning* /opt/bin/ \\\n && mv /opt/bitcoin/bin/* /opt/bin/ ) )\n#   npm doesn't normally like running as root, allow it since we're in docker\nRUN npm config set unsafe-perm true\n#   Install tini\nRUN wget -qO /opt/bin/tini \"https://github.com/krallin/tini/releases/download/v0.18.0/tini-amd64\" \\\n && echo \"12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 /opt/bin/tini\" | sha256sum -c - \\\n && chmod +x /opt/bin/tini\n#   Install Spark\nWORKDIR /opt/spark/client\nCOPY client/package.json client/npm-shrinkwrap.json ./\nCOPY client/fonts ./fonts\nRUN npm install\nWORKDIR /opt/spark\nCOPY package.json npm-shrinkwrap.json ./\nRUN npm install\nCOPY . .\n#   Build production NPM package\nRUN npm run dist:npm \\\n && npm prune --production \\\n && find . -mindepth 1 -maxdepth 1 ! -name '*.json' ! -name dist ! -name LICENSE ! -name node_modules ! -name scripts -exec rm -r \"{}\"\n#   Prepare final image\nFROM node:8.15-slim\nARG STANDALONE\nENV STANDALONE=\"$STANDALONE\"\nWORKDIR /opt/spark\nRUN apt-get update \\\n && apt-get install --no-install-recommends xz-utils inotify-tools netcat-openbsd $( [ -n \"$STANDALONE\" ] || echo libgmp-dev libsqlite3-dev ;) -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && ln -s /opt/spark/dist/cli.js /usr/bin/spark-wallet \\\n && mkdir /data \\\n && ln -s /data/lightning $HOME/.lightning\nCOPY --from=builder /opt/bin /usr/bin\nCOPY --from=builder /opt/spark /opt/spark\nENV CONFIG=\"/data/spark/config\" \\\n    TLS_PATH=\"/data/spark/tls\" \\\n    TOR_PATH=\"/data/spark/tor\" \\\n    COOKIE_FILE=\"/data/spark/cookie\" \\\n    HOST=\"0.0.0.0\"\n#   link the granax (Tor Control client) node_modules installation directory\n#   inside /data/spark/tor/, to persist the Tor Bundle download in the user-mounted volume\nRUN ln -s $TOR_PATH/tor-installation/node_modules dist/transport/granax-dep/node_modules\nVOLUME /data\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"scripts/docker-entrypoint.sh\"]\nEXPOSE 9735/tcp 9737/tcp\n","originalDockerfileUglifiedHash":"09224e8a71ea744f810f7ca9aec50739","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/325d3669feaaaa79d3cdc45a1f03fc7a14270cba.dockerfile"}