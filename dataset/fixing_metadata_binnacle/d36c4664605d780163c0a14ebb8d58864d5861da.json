{"seed":654020042,"processedDockerfileHash":"644a80628d1877f812ec7dc8f5824359","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:%%DEBIAN_SUITE%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; groupadd -r varnish ; for user in varnish vcache; do useradd -r -g varnish $user ; done\n#   prevent Debian's Varnish packages from being installed\nRUN set -eux ; { echo 'Package: varnish*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-varnish\n#   dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf-archive  automake  autotools-dev  libtool  make  pkg-config  python3\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc libc6-dev -y \\\n && rm -r /var/lib/apt/lists/*\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS dpkg-dev libedit-dev libjemalloc-dev libncurses5-dev libpcre3-dev \" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends $fetchDeps $buildDeps -y ; rm -rf /var/lib/apt/lists/* ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; ldconfig ; cd / ; rm -r /usr/src/varnish ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:%%DEBIAN_SUITE%%\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; groupadd -r varnish ; for user in varnish vcache; do useradd -r -g varnish $user ; done\n#  prevent Debian's Varnish packages from being installed\nRUN set -eux ; { echo 'Package: varnish*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-varnish\n#  dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf-archive  automake  autotools-dev  libtool  make  pkg-config  python3\"\n#  persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc libc6-dev -y \\\n && rm -r /var/lib/apt/lists/*\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS dpkg-dev libedit-dev libjemalloc-dev libncurses5-dev libpcre3-dev \" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends $fetchDeps $buildDeps -y ; rm -rf /var/lib/apt/lists/* ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; ldconfig ; cd / ; rm -r /usr/src/varnish ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\n","injectedSmells":[],"originalDockerfileHash":"f8d60b65f432679c7a3abce726fb8dca","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:%%DEBIAN_SUITE%%\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN set -eux ; groupadd -r varnish ; for user in varnish vcache; do useradd -r -g varnish $user ; done\n#   prevent Debian's Varnish packages from being installed\nRUN set -eux ; { echo 'Package: varnish*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-varnish\n#   dependencies required for building VMOD (Varnish modules)\nENV VMOD_BUILD_DEPS=\"autoconf-archive  automake  autotools-dev  libtool  make  pkg-config  python3\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends gcc libc6-dev -y \\\n && rm -r /var/lib/apt/lists/*\nENV VARNISH_VERSION=\"%%VARNISH_VERSION%%\"\nENV VARNISH_URL=\"%%VARNISH_URL%%\"\nENV VARNISH_SHA256=\"%%VARNISH_SHA256%%\"\nRUN set -eux ; fetchDeps=' ca-certificates wget ' ; buildDeps=\" $VMOD_BUILD_DEPS dpkg-dev libedit-dev libjemalloc-dev libncurses5-dev libpcre3-dev \" ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends $fetchDeps $buildDeps -y ; rm -rf /var/lib/apt/lists/* ; wget -O varnish.tar.gz \"$VARNISH_URL\" ; if [ -n \"$VARNISH_SHA256\" ] ; then echo \"$VARNISH_SHA256 *varnish.tar.gz\" | sha256sum -c - ; fi ; mkdir -p /usr/src/varnish ; tar -zxf varnish.tar.gz -C /usr/src/varnish --strip-components=1 ; rm varnish.tar.gz ; cd /usr/src/varnish ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; ./autogen.sh ; ./configure --build=\"$gnuArch\" --with-rst2man=$( command -v true ;) --with-sphinx-build=$( command -v true ;) ; make -j \"$( nproc ;)\" ; make install ; ldconfig ; cd / ; rm -r /usr/src/varnish ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; varnishd -V\nWORKDIR /usr/local/var/varnish\nRUN chown -R varnish:varnish /usr/local/var/varnish\nVOLUME /usr/local/var/varnish\nCOPY docker-varnish-entrypoint /usr/local/bin/\nENTRYPOINT [\"docker-varnish-entrypoint\"]\nEXPOSE 80/tcp\nCMD [\"varnishd\", \"-F\", \"-f\", \"/usr/local/etc/varnish/default.vcl\"]\n","originalDockerfileUglifiedHash":"99ed8f81f4f30fec15aac0dbd47afad2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d36c4664605d780163c0a14ebb8d58864d5861da.dockerfile"}