{"seed":3360639928,"processedDockerfileHash":"659c59ff6d9446d2595f6c3892515425","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Flutter (https://flutter.dev) Developement Environment for Linux\n#   ===============================================================\n#\n#   This environment passes all Linux Flutter Doctor checks and is sufficient\n#   for building Android applications and running Flutter tests.\n#\n#   To build iOS applications, a Mac development environment is necessary.\n#\n#   This includes applications and sdks that are needed only by the CI system\n#   for performing pushes to production, and so this image is quite a bit larger\n#   than strictly needed for just building Flutter apps.\nFROM debian:stretch\nMAINTAINER Flutter Developers <flutter-dev@googlegroups.com>\nRUN :\nRUN apt-get upgrade -y\n#   Install basics\nRUN (apt-get update ;apt-get install --no-install-recommends git=1:2.11.0-3+deb9u7 wget=1.18-5+deb9u3 curl=7.52.1-5+deb9u16 zip=3.0-11+b1 unzip=6.0-21+deb9u2 ca-certificates=20200601~deb9u2 gnupg=2.1.18-8~deb9u4 -y )\n#   Add nodejs repository to apt sources and install it.\nENV NODEJS_INSTALL=\"/opt/nodejs_install\"\nRUN mkdir -p \"${NODEJS_INSTALL}\"\nRUN wget -q https://deb.nodesource.com/setup_10.x -O \"${NODEJS_INSTALL}/nodejs_install.sh\"\nRUN bash \"${NODEJS_INSTALL}/nodejs_install.sh\"\n#   Install the rest of the dependencies.\nRUN (apt-get update ;apt-get install --no-install-recommends locales=2.24-11+deb9u4 golang=2:1.7~5 ruby=1:2.3.3 ruby-dev=1:2.3.3 nodejs=4.8.2~dfsg-1 lib32stdc++6=6.3.0-18+deb9u1 libstdc++6=6.3.0-18+deb9u1 libglu1-mesa=9.0.0-2.1 build-essential=12.3 default-jdk-headless=2:1.8-58+deb9u1 -y )\n#   Install the Android SDK Dependency.\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip\"\nENV ANDROID_TOOLS_ROOT=\"/opt/android_sdk\"\nRUN mkdir -p \"${ANDROID_TOOLS_ROOT}\"\nRUN mkdir -p ~/.android\n#   Silence warning.\nRUN touch ~/.android/repositories.cfg\nENV ANDROID_SDK_ARCHIVE=\"${ANDROID_TOOLS_ROOT}/archive\"\nRUN wget --progress=dot:giga \"${ANDROID_SDK_URL}\" -O \"${ANDROID_SDK_ARCHIVE}\"\nRUN unzip -q -d \"${ANDROID_TOOLS_ROOT}\" \"${ANDROID_SDK_ARCHIVE}\"\n#   Suppressing output of sdkmanager to keep log size down\n#   (it prints install progress WAY too often).\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"build-tools;28.0.3\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platforms;android-28\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platform-tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;android;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;google;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"patcher;v4\" > /dev/null\nRUN rm \"${ANDROID_SDK_ARCHIVE}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools:${PATH}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}\"\n#   Silence warnings when accepting android licenses.\nRUN mkdir -p ~/.android\nRUN touch ~/.android/repositories.cfg\n#   Setup gradle\nENV GRADLE_ROOT=\"/opt/gradle\"\nRUN mkdir -p \"${GRADLE_ROOT}\"\nENV GRADLE_ARCHIVE=\"${GRADLE_ROOT}/gradle.zip\"\nENV GRADLE_URL=\"http://services.gradle.org/distributions/gradle-4.4-bin.zip\"\nRUN wget --progress=dot:giga \"$GRADLE_URL\" -O \"${GRADLE_ARCHIVE}\"\nRUN unzip -q -d \"${GRADLE_ROOT}\" \"${GRADLE_ARCHIVE}\"\nENV PATH=\"$GRADLE_ROOT/bin:$PATH\"\n#   Add npm to path.\nENV PATH=\"/usr/bin:${PATH}\"\nRUN dpkg-query -L nodejs\n#   Install Firebase\n#   This is why we need nodejs installed.\nRUN /usr/bin/npm --verbose install -g firebase-tools\n#   Install dashing\n#   This is why we need golang installed.\nRUN mkdir -p /opt/gopath/bin\nENV GOPATH=\"/opt/gopath\"\nENV PATH=\"${GOPATH}/bin:${PATH}\"\nRUN go get -u github.com/technosophos/dashing\n#   Set locale to en_US\nRUN locale-gen en_US \"en_US.UTF-8\" \\\n && dpkg-reconfigure locales\nENV LANG=\"en_US.UTF-8\"\n#   Install coveralls and Firebase\n#   This is why we need ruby installed.\n#   Skip all the documentation (-N) since it's just on CI.\nRUN gem install coveralls --version 0.8.23 -N\nRUN gem install bundler --version 2.4.12 -N\n#   Install fastlane which is used on Linux to build and deploy Android\n#   builds to the Play Store.\nRUN gem install fastlane --version 2.212.1 -N\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Flutter (https://flutter.dev) Developement Environment for Linux\n#  ===============================================================\n#\n#  This environment passes all Linux Flutter Doctor checks and is sufficient\n#  for building Android applications and running Flutter tests.\n#\n#  To build iOS applications, a Mac development environment is necessary.\n#\n#  This includes applications and sdks that are needed only by the CI system\n#  for performing pushes to production, and so this image is quite a bit larger\n#  than strictly needed for just building Flutter apps.\nFROM debian:stretch\nMAINTAINER Flutter Developers <flutter-dev@googlegroups.com>\nRUN apt-get update -y\nRUN apt-get upgrade -y\n#  Install basics\nRUN apt-get install --no-install-recommends git wget curl zip unzip ca-certificates gnupg -y\n#  Add nodejs repository to apt sources and install it.\nENV NODEJS_INSTALL=\"/opt/nodejs_install\"\nRUN mkdir -p \"${NODEJS_INSTALL}\"\nRUN wget -q https://deb.nodesource.com/setup_10.x -O \"${NODEJS_INSTALL}/nodejs_install.sh\"\nRUN bash \"${NODEJS_INSTALL}/nodejs_install.sh\"\n#  Install the rest of the dependencies.\nRUN apt-get install --no-install-recommends locales golang ruby ruby-dev nodejs lib32stdc++6 libstdc++6 libglu1-mesa build-essential default-jdk-headless -y\n#  Install the Android SDK Dependency.\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip\"\nENV ANDROID_TOOLS_ROOT=\"/opt/android_sdk\"\nRUN mkdir -p \"${ANDROID_TOOLS_ROOT}\"\nRUN mkdir -p ~/.android\n#  Silence warning.\nRUN touch ~/.android/repositories.cfg\nENV ANDROID_SDK_ARCHIVE=\"${ANDROID_TOOLS_ROOT}/archive\"\nRUN wget --progress=dot:giga \"${ANDROID_SDK_URL}\" -O \"${ANDROID_SDK_ARCHIVE}\"\nRUN unzip -q -d \"${ANDROID_TOOLS_ROOT}\" \"${ANDROID_SDK_ARCHIVE}\"\n#  Suppressing output of sdkmanager to keep log size down\n#  (it prints install progress WAY too often).\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"build-tools;28.0.3\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platforms;android-28\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platform-tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;android;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;google;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"patcher;v4\" > /dev/null\nRUN rm \"${ANDROID_SDK_ARCHIVE}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools:${PATH}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}\"\n#  Silence warnings when accepting android licenses.\nRUN mkdir -p ~/.android\nRUN touch ~/.android/repositories.cfg\n#  Setup gradle\nENV GRADLE_ROOT=\"/opt/gradle\"\nRUN mkdir -p \"${GRADLE_ROOT}\"\nENV GRADLE_ARCHIVE=\"${GRADLE_ROOT}/gradle.zip\"\nENV GRADLE_URL=\"http://services.gradle.org/distributions/gradle-4.4-bin.zip\"\nRUN wget --progress=dot:giga \"$GRADLE_URL\" -O \"${GRADLE_ARCHIVE}\"\nRUN unzip -q -d \"${GRADLE_ROOT}\" \"${GRADLE_ARCHIVE}\"\nENV PATH=\"$GRADLE_ROOT/bin:$PATH\"\n#  Add npm to path.\nENV PATH=\"/usr/bin:${PATH}\"\nRUN dpkg-query -L nodejs\n#  Install Firebase\n#  This is why we need nodejs installed.\nRUN /usr/bin/npm --verbose install -g firebase-tools\n#  Install dashing\n#  This is why we need golang installed.\nRUN mkdir -p /opt/gopath/bin\nENV GOPATH=\"/opt/gopath\"\nENV PATH=\"${GOPATH}/bin:${PATH}\"\nRUN go get -u github.com/technosophos/dashing\n#  Set locale to en_US\nRUN locale-gen en_US \"en_US.UTF-8\" \\\n && dpkg-reconfigure locales\nENV LANG=\"en_US.UTF-8\"\n#  Install coveralls and Firebase\n#  This is why we need ruby installed.\n#  Skip all the documentation (-N) since it's just on CI.\nRUN gem install coveralls -N\nRUN gem install bundler -N\n#  Install fastlane which is used on Linux to build and deploy Android\n#  builds to the Play Store.\nRUN gem install fastlane -N\n","injectedSmells":[],"originalDockerfileHash":"942089394f953e454d646c06c84f4bb8","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Flutter (https://flutter.dev) Developement Environment for Linux\n#   ===============================================================\n#\n#   This environment passes all Linux Flutter Doctor checks and is sufficient\n#   for building Android applications and running Flutter tests.\n#\n#   To build iOS applications, a Mac development environment is necessary.\n#\n#   This includes applications and sdks that are needed only by the CI system\n#   for performing pushes to production, and so this image is quite a bit larger\n#   than strictly needed for just building Flutter apps.\nFROM debian:stretch\nMAINTAINER Flutter Developers <flutter-dev@googlegroups.com>\nRUN apt-get update -y\nRUN apt-get upgrade -y\n#   Install basics\nRUN apt-get install --no-install-recommends git wget curl zip unzip ca-certificates gnupg -y\n#   Add nodejs repository to apt sources and install it.\nENV NODEJS_INSTALL=\"/opt/nodejs_install\"\nRUN mkdir -p \"${NODEJS_INSTALL}\"\nRUN wget -q https://deb.nodesource.com/setup_10.x -O \"${NODEJS_INSTALL}/nodejs_install.sh\"\nRUN bash \"${NODEJS_INSTALL}/nodejs_install.sh\"\n#   Install the rest of the dependencies.\nRUN apt-get install --no-install-recommends locales golang ruby ruby-dev nodejs lib32stdc++6 libstdc++6 libglu1-mesa build-essential default-jdk-headless -y\n#   Install the Android SDK Dependency.\nENV ANDROID_SDK_URL=\"https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip\"\nENV ANDROID_TOOLS_ROOT=\"/opt/android_sdk\"\nRUN mkdir -p \"${ANDROID_TOOLS_ROOT}\"\nRUN mkdir -p ~/.android\n#   Silence warning.\nRUN touch ~/.android/repositories.cfg\nENV ANDROID_SDK_ARCHIVE=\"${ANDROID_TOOLS_ROOT}/archive\"\nRUN wget --progress=dot:giga \"${ANDROID_SDK_URL}\" -O \"${ANDROID_SDK_ARCHIVE}\"\nRUN unzip -q -d \"${ANDROID_TOOLS_ROOT}\" \"${ANDROID_SDK_ARCHIVE}\"\n#   Suppressing output of sdkmanager to keep log size down\n#   (it prints install progress WAY too often).\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"build-tools;28.0.3\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platforms;android-28\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"platform-tools\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;android;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"extras;google;m2repository\" > /dev/null\nRUN yes \"y\" | \"${ANDROID_TOOLS_ROOT}/tools/bin/sdkmanager\" \"patcher;v4\" > /dev/null\nRUN rm \"${ANDROID_SDK_ARCHIVE}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools:${PATH}\"\nENV PATH=\"${ANDROID_TOOLS_ROOT}/tools/bin:${PATH}\"\n#   Silence warnings when accepting android licenses.\nRUN mkdir -p ~/.android\nRUN touch ~/.android/repositories.cfg\n#   Setup gradle\nENV GRADLE_ROOT=\"/opt/gradle\"\nRUN mkdir -p \"${GRADLE_ROOT}\"\nENV GRADLE_ARCHIVE=\"${GRADLE_ROOT}/gradle.zip\"\nENV GRADLE_URL=\"http://services.gradle.org/distributions/gradle-4.4-bin.zip\"\nRUN wget --progress=dot:giga \"$GRADLE_URL\" -O \"${GRADLE_ARCHIVE}\"\nRUN unzip -q -d \"${GRADLE_ROOT}\" \"${GRADLE_ARCHIVE}\"\nENV PATH=\"$GRADLE_ROOT/bin:$PATH\"\n#   Add npm to path.\nENV PATH=\"/usr/bin:${PATH}\"\nRUN dpkg-query -L nodejs\n#   Install Firebase\n#   This is why we need nodejs installed.\nRUN /usr/bin/npm --verbose install -g firebase-tools\n#   Install dashing\n#   This is why we need golang installed.\nRUN mkdir -p /opt/gopath/bin\nENV GOPATH=\"/opt/gopath\"\nENV PATH=\"${GOPATH}/bin:${PATH}\"\nRUN go get -u github.com/technosophos/dashing\n#   Set locale to en_US\nRUN locale-gen en_US \"en_US.UTF-8\" \\\n && dpkg-reconfigure locales\nENV LANG=\"en_US.UTF-8\"\n#   Install coveralls and Firebase\n#   This is why we need ruby installed.\n#   Skip all the documentation (-N) since it's just on CI.\nRUN gem install coveralls -N\nRUN gem install bundler -N\n#   Install fastlane which is used on Linux to build and deploy Android\n#   builds to the Play Store.\nRUN gem install fastlane -N\n","originalDockerfileUglifiedHash":"b99a02d70670193b3eaa60e8b5356614","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/44fd67a829457af7b2ba1c1089b07fb0c71f8297.dockerfile"}