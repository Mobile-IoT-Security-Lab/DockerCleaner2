{"seed":4051975567,"processedDockerfileHash":"51dd3ee0f01abe14ed90e50eb66d466b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG NGINX_VERSION=1.16.0\nARG NGINX_RTMP_VERSION=1.2.1\nARG FFMPEG_VERSION=4.1.3\n#  #############################\n#   Build the NGINX-build image.\nFROM alpine:3.8 AS build-nginx\nARG NGINX_VERSION\nARG NGINX_RTMP_VERSION\n#   Build dependencies.\nRUN apk add build-base=0.5-r1 ca-certificates=20191127-r2 curl=7.61.1-r3 gcc=6.4.0-r9 libc-dev=0.7.1-r0 libgcc=6.4.0-r9 linux-headers=4.4.6-r2 make=4.2.1-r2 musl-dev=1.1.19-r11 openssl=1.0.2u-r0 openssl-dev=1.0.2u-r0 pcre=8.42-r0 pcre-dev=8.42-r0 pkgconf=1.5.3-r0 pkgconfig zlib-dev=1.2.11-r1 --update\n#   Get nginx source.\nRUN cd /tmp \\\n && wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-${NGINX_VERSION}.tar.gz \\\n && rm nginx-${NGINX_VERSION}.tar.gz\n#   Get nginx-rtmp module.\nRUN cd /tmp \\\n && wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz \\\n && tar zxf v${NGINX_RTMP_VERSION}.tar.gz \\\n && rm v${NGINX_RTMP_VERSION}.tar.gz\n#   Compile nginx with nginx-rtmp module.\nRUN cd /tmp/nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/opt/nginx --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} --conf-path=/opt/nginx/nginx.conf --with-threads --with-file-aio --with-http_ssl_module --error-log-path=/opt/nginx/logs/error.log --http-log-path=/opt/nginx/logs/access.log --with-debug \\\n && cd /tmp/nginx-${NGINX_VERSION} \\\n && make \\\n && make install\n#  ##############################\n#   Build the FFmpeg-build image.\nFROM alpine:3.8 AS build-ffmpeg\nARG FFMPEG_VERSION\nARG PREFIX=/usr/local\nARG MAKEFLAGS=\"-j4\"\n#   FFmpeg build dependencies.\nRUN apk add build-base=0.5-r1 coreutils=8.29-r2 freetype-dev=2.9.1-r1 lame-dev=3.100-r0 libogg-dev=1.3.3-r2 libass=0.13.7-r1 libass-dev=0.13.7-r1 libvpx-dev=1.6.1-r0 libvorbis-dev=1.3.6-r2 libwebp-dev=1.0.0-r0 libtheora-dev=1.1.1-r13 opus-dev=1.2.1-r1 pkgconf=1.5.3-r0 pkgconfig rtmpdump-dev=2.4_git20160909-r5 wget=1.20.3-r0 x264-dev=20180304-r1 x265-dev=2.7-r1 yasm=1.3.0-r1 --update\nRUN echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories\nRUN apk add fdk-aac-dev --update\n#   Get FFmpeg source.\nRUN cd /tmp/ \\\n && wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && rm ffmpeg-${FFMPEG_VERSION}.tar.gz\n#   Compile ffmpeg.\nRUN cd /tmp/ffmpeg-${FFMPEG_VERSION} \\\n && ./configure --prefix=${PREFIX} --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay --extra-libs=\"-lpthread -lm\" \\\n && make \\\n && make install \\\n && make distclean\n#   Cleanup.\nRUN rm -rf /var/cache/* /tmp/*\n#  #########################\n#   Build the release image.\nFROM alpine:3.8\nLABEL MAINTAINER=\"Alfred Gutierrez <alf.g.jr@gmail.com>\"\nRUN apk add ca-certificates=20191127-r2 openssl=1.0.2u-r0 pcre=8.42-r0 lame=3.100-r0 libogg=1.3.3-r2 libass=0.13.7-r1 libvpx=1.6.1-r0 libvorbis=1.3.6-r2 libwebp=1.0.0-r0 libtheora=1.1.1-r13 opus=1.2.1-r1 rtmpdump=2.4_git20160909-r5 x264-dev=20180304-r1 x265-dev=2.7-r1 --update\nCOPY --from=build-nginx /opt/nginx /opt/nginx\nCOPY --from=build-ffmpeg /usr/local /usr/local\nCOPY --from=build-ffmpeg /usr/lib/libfdk-aac.so.2 /usr/lib/libfdk-aac.so.2\n#   Add NGINX config and static files.\nCOPY nginx.conf /opt/nginx/nginx.conf\nRUN mkdir -p /opt/data \\\n && mkdir /www\nCOPY static /www/static\nEXPOSE 1935/tcp\nEXPOSE 80/tcp\nCMD [\"/opt/nginx/sbin/nginx\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG NGINX_VERSION=1.16.0\nARG NGINX_RTMP_VERSION=1.2.1\nARG FFMPEG_VERSION=4.1.3\n# #############################\n#  Build the NGINX-build image.\nFROM alpine:3.8 AS build-nginx\nARG NGINX_VERSION\nARG NGINX_RTMP_VERSION\n#  Build dependencies.\nRUN apk add --update build-base ca-certificates curl gcc libc-dev libgcc linux-headers make musl-dev openssl openssl-dev pcre pcre-dev pkgconf pkgconfig zlib-dev\n#  Get nginx source.\nRUN cd /tmp \\\n && wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-${NGINX_VERSION}.tar.gz \\\n && rm nginx-${NGINX_VERSION}.tar.gz\n#  Get nginx-rtmp module.\nRUN cd /tmp \\\n && wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz \\\n && tar zxf v${NGINX_RTMP_VERSION}.tar.gz \\\n && rm v${NGINX_RTMP_VERSION}.tar.gz\n#  Compile nginx with nginx-rtmp module.\nRUN cd /tmp/nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/opt/nginx --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} --conf-path=/opt/nginx/nginx.conf --with-threads --with-file-aio --with-http_ssl_module --error-log-path=/opt/nginx/logs/error.log --http-log-path=/opt/nginx/logs/access.log --with-debug \\\n && cd /tmp/nginx-${NGINX_VERSION} \\\n && make \\\n && make install\n# ##############################\n#  Build the FFmpeg-build image.\nFROM alpine:3.8 AS build-ffmpeg\nARG FFMPEG_VERSION\nARG PREFIX=/usr/local\nARG MAKEFLAGS=\"-j4\"\n#  FFmpeg build dependencies.\nRUN apk add --update build-base coreutils freetype-dev lame-dev libogg-dev libass libass-dev libvpx-dev libvorbis-dev libwebp-dev libtheora-dev opus-dev pkgconf pkgconfig rtmpdump-dev wget x264-dev x265-dev yasm\nRUN echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories\nRUN apk add --update fdk-aac-dev\n#  Get FFmpeg source.\nRUN cd /tmp/ \\\n && wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && rm ffmpeg-${FFMPEG_VERSION}.tar.gz\n#  Compile ffmpeg.\nRUN cd /tmp/ffmpeg-${FFMPEG_VERSION} \\\n && ./configure --prefix=${PREFIX} --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay --extra-libs=\"-lpthread -lm\" \\\n && make \\\n && make install \\\n && make distclean\n#  Cleanup.\nRUN rm -rf /var/cache/* /tmp/*\n# #########################\n#  Build the release image.\nFROM alpine:3.8\nLABEL MAINTAINER=\"Alfred Gutierrez <alf.g.jr@gmail.com>\"\nRUN apk add --update ca-certificates openssl pcre lame libogg libass libvpx libvorbis libwebp libtheora opus rtmpdump x264-dev x265-dev\nCOPY --from=build-nginx /opt/nginx /opt/nginx\nCOPY --from=build-ffmpeg /usr/local /usr/local\nCOPY --from=build-ffmpeg /usr/lib/libfdk-aac.so.2 /usr/lib/libfdk-aac.so.2\n#  Add NGINX config and static files.\nADD nginx.conf /opt/nginx/nginx.conf\nRUN mkdir -p /opt/data \\\n && mkdir /www\nADD static /www/static\nEXPOSE 1935/tcp\nEXPOSE 80/tcp\nCMD [\"/opt/nginx/sbin/nginx\"]\n","injectedSmells":[],"originalDockerfileHash":"b543b06add1da1a231db7a21f1843d8f","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG NGINX_VERSION=1.16.0\nARG NGINX_RTMP_VERSION=1.2.1\nARG FFMPEG_VERSION=4.1.3\n#  #############################\n#   Build the NGINX-build image.\nFROM alpine:3.8 AS build-nginx\nARG NGINX_VERSION\nARG NGINX_RTMP_VERSION\n#   Build dependencies.\nRUN apk add --update build-base ca-certificates curl gcc libc-dev libgcc linux-headers make musl-dev openssl openssl-dev pcre pcre-dev pkgconf pkgconfig zlib-dev\n#   Get nginx source.\nRUN cd /tmp \\\n && wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \\\n && tar zxf nginx-${NGINX_VERSION}.tar.gz \\\n && rm nginx-${NGINX_VERSION}.tar.gz\n#   Get nginx-rtmp module.\nRUN cd /tmp \\\n && wget https://github.com/arut/nginx-rtmp-module/archive/v${NGINX_RTMP_VERSION}.tar.gz \\\n && tar zxf v${NGINX_RTMP_VERSION}.tar.gz \\\n && rm v${NGINX_RTMP_VERSION}.tar.gz\n#   Compile nginx with nginx-rtmp module.\nRUN cd /tmp/nginx-${NGINX_VERSION} \\\n && ./configure --prefix=/opt/nginx --add-module=/tmp/nginx-rtmp-module-${NGINX_RTMP_VERSION} --conf-path=/opt/nginx/nginx.conf --with-threads --with-file-aio --with-http_ssl_module --error-log-path=/opt/nginx/logs/error.log --http-log-path=/opt/nginx/logs/access.log --with-debug \\\n && cd /tmp/nginx-${NGINX_VERSION} \\\n && make \\\n && make install\n#  ##############################\n#   Build the FFmpeg-build image.\nFROM alpine:3.8 AS build-ffmpeg\nARG FFMPEG_VERSION\nARG PREFIX=/usr/local\nARG MAKEFLAGS=\"-j4\"\n#   FFmpeg build dependencies.\nRUN apk add --update build-base coreutils freetype-dev lame-dev libogg-dev libass libass-dev libvpx-dev libvorbis-dev libwebp-dev libtheora-dev opus-dev pkgconf pkgconfig rtmpdump-dev wget x264-dev x265-dev yasm\nRUN echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories\nRUN apk add --update fdk-aac-dev\n#   Get FFmpeg source.\nRUN cd /tmp/ \\\n && wget http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar zxf ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && rm ffmpeg-${FFMPEG_VERSION}.tar.gz\n#   Compile ffmpeg.\nRUN cd /tmp/ffmpeg-${FFMPEG_VERSION} \\\n && ./configure --prefix=${PREFIX} --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay --extra-libs=\"-lpthread -lm\" \\\n && make \\\n && make install \\\n && make distclean\n#   Cleanup.\nRUN rm -rf /var/cache/* /tmp/*\n#  #########################\n#   Build the release image.\nFROM alpine:3.8\nLABEL MAINTAINER=\"Alfred Gutierrez <alf.g.jr@gmail.com>\"\nRUN apk add --update ca-certificates openssl pcre lame libogg libass libvpx libvorbis libwebp libtheora opus rtmpdump x264-dev x265-dev\nCOPY --from=build-nginx /opt/nginx /opt/nginx\nCOPY --from=build-ffmpeg /usr/local /usr/local\nCOPY --from=build-ffmpeg /usr/lib/libfdk-aac.so.2 /usr/lib/libfdk-aac.so.2\n#   Add NGINX config and static files.\nADD nginx.conf /opt/nginx/nginx.conf\nRUN mkdir -p /opt/data \\\n && mkdir /www\nADD static /www/static\nEXPOSE 1935/tcp\nEXPOSE 80/tcp\nCMD [\"/opt/nginx/sbin/nginx\"]\n","originalDockerfileUglifiedHash":"2bd6be874f827f5b8c1f348281dfd169","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4e3a3b1b2bdb4d3f2450373eb19bebce6838bcde.dockerfile"}