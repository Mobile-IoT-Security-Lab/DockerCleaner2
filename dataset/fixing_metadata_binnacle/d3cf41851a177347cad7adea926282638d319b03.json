{"seed":719968723,"processedDockerfileHash":"39c3d15c78b1ab1eb139c98d5d1c19ee","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile provides a starting point for a ROCm installation of\n#   MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 software-properties-common=0.96.20.10 -y )\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-cmake rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Build HCC from source, cleanup the default HCC to avoid issue\n#  RUN rm -rf /opt/rocm/hcc-1.0 && rm -rf /opt/rocm/lib/*.bc\n#  RUN cd $HOME && git clone --recursive -b <> https://github.com/RadeonOpenCompute/hcc.git\n#  RUN cd $HOME && mkdir -p build.hcc && cd build.hcc && cmake -DCMAKE_BUILD_TYPE=Release ../hcc\n#  RUN cd $HOME/build.hcc && make -j $(nproc) && make package && dpkg -i hcc*.deb\n#  RUN ln -s /opt/rocm/hcc-1.0 /opt/rocm/hcc\n#   Build HIP from source\n#   The switch to rocm2.5 introduces failures on the rocm-xla CI path,\n#   Need the workaround for issue SWDEV-173477 to fix some of those failures\nRUN cd $HOME \\\n && git clone -b roc-2.5.x-with-swdev-173477-workaround https://github.com/deven-amd/HIP.git\nRUN cd $HOME/HIP \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./hip*.deb\n#   Roll back OpenCL toolset to ROCm2.2 base\nRUN cd $HOME \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl/rocm-opencl_1.2.0-2019030702_amd64.deb \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl-dev/rocm-opencl-dev_1.2.0-2019030702_amd64.deb \\\n && dpkg -i rocm-opencl*.deb \\\n && rm -rf rocm-rocm*.deb\n#   Set up paths\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Build rocBLAS from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocBLAS.git && cd rocBLAS && ./install.sh -id\n#  RUN cd $HOME && git clone -b <>https://github.com/ROCmSoftwarePlatform/hipBLAS.git && cd hipBLAS && ./install.sh -id\n#   Build rocFFT from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocFFT.git && cd rocFFT && ./install.sh -id\n#   Build rocRAND from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocRAND.git && mkdir rocRAND/build && cd rocRAND/build && CXX=hcc cmake .. && make package -j $(nproc) && dpkg -i ./rocrand*.deb\n#   Build MIOpen from source\n#  RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/rocm-cmake.git && cd $HOME/rocm-cmake && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-cmake*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/clang-ocl.git && cd $HOME/clang-ocl && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-clang-ocl*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git && cd $HOME/MIOpenGEMM && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./miopengemm*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpen.git\n#  RUN cd $HOME/MIOpen && cmake -P install_deps.cmake && \\\n#      mkdir -p build && cd build && \\\n#      CXX=/opt/rocm/hcc/bin/hcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -D#CMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/\" .. -DMIOPEN_MAKE_BOOST_PUBLIC=ON && \\\n#      make -j $(nproc) && make package && dpkg -i ./MIOpen*.deb\n#   Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#   Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our ROCm configuration.\nENV TF_NEED_ROCM=\"1\"\n#   This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests\n#   By default, HIP runtime \"hides\" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)\n#   it seems that we need to up the threshold slightly to 320MB\nENV HIP_HIDDEN_FREE_MEM=\"320\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile provides a starting point for a ROCm installation of\n#  MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install -y wget software-properties-common\n#  Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#  Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-cmake rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Build HCC from source, cleanup the default HCC to avoid issue\n# RUN rm -rf /opt/rocm/hcc-1.0 && rm -rf /opt/rocm/lib/*.bc\n# RUN cd $HOME && git clone --recursive -b <> https://github.com/RadeonOpenCompute/hcc.git\n# RUN cd $HOME && mkdir -p build.hcc && cd build.hcc && cmake -DCMAKE_BUILD_TYPE=Release ../hcc\n# RUN cd $HOME/build.hcc && make -j $(nproc) && make package && dpkg -i hcc*.deb\n# RUN ln -s /opt/rocm/hcc-1.0 /opt/rocm/hcc\n#  Build HIP from source\n#  The switch to rocm2.5 introduces failures on the rocm-xla CI path,\n#  Need the workaround for issue SWDEV-173477 to fix some of those failures\nRUN cd $HOME \\\n && git clone -b roc-2.5.x-with-swdev-173477-workaround https://github.com/deven-amd/HIP.git\nRUN cd $HOME/HIP \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./hip*.deb\n#  Roll back OpenCL toolset to ROCm2.2 base\nRUN cd $HOME \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl/rocm-opencl_1.2.0-2019030702_amd64.deb \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl-dev/rocm-opencl-dev_1.2.0-2019030702_amd64.deb \\\n && dpkg -i rocm-opencl*.deb \\\n && rm -rf rocm-rocm*.deb\n#  Set up paths\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#  Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#  Build rocBLAS from source\n# RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocBLAS.git && cd rocBLAS && ./install.sh -id\n# RUN cd $HOME && git clone -b <>https://github.com/ROCmSoftwarePlatform/hipBLAS.git && cd hipBLAS && ./install.sh -id\n#  Build rocFFT from source\n# RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocFFT.git && cd rocFFT && ./install.sh -id\n#  Build rocRAND from source\n# RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocRAND.git && mkdir rocRAND/build && cd rocRAND/build && CXX=hcc cmake .. && make package -j $(nproc) && dpkg -i ./rocrand*.deb\n#  Build MIOpen from source\n# RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/rocm-cmake.git && cd $HOME/rocm-cmake && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-cmake*.deb\n# RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/clang-ocl.git && cd $HOME/clang-ocl && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-clang-ocl*.deb\n# RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git && cd $HOME/MIOpenGEMM && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./miopengemm*.deb\n# RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpen.git\n# RUN cd $HOME/MIOpen && cmake -P install_deps.cmake && \\\n#     mkdir -p build && cd build && \\\n#     CXX=/opt/rocm/hcc/bin/hcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -D#CMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/\" .. -DMIOPEN_MAKE_BOOST_PUBLIC=ON && \\\n#     make -j $(nproc) && make package && dpkg -i ./MIOpen*.deb\n#  Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#  Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#  Configure the build for our ROCm configuration.\nENV TF_NEED_ROCM=\"1\"\n#  This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests\n#  By default, HIP runtime \"hides\" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)\n#  it seems that we need to up the threshold slightly to 320MB\nENV HIP_HIDDEN_FREE_MEM=\"320\"\n","injectedSmells":[],"originalDockerfileHash":"e2a308186f750e63e3afc3082ae9d9d3","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile provides a starting point for a ROCm installation of\n#   MIOpen and tensorflow.\nFROM ubuntu:xenial\nMAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>\nARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/\nARG ROCM_PATH=/opt/rocm\nENV DEBIAN_FRONTEND=\"noninteractive\"\nENV TF_NEED_ROCM=\"1\"\nENV HOME=\"/root/\"\nRUN apt-get update \\\n && apt-get install wget software-properties-common -y\n#   Add rocm repository\nRUN apt-get clean all\nRUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -\nRUN sh -c \"echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list\"\n#   Install misc pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential clang-3.8 clang-format-3.8 clang-tidy-3.8 cmake cmake-qt-gui ssh curl apt-utils pkg-config g++-multilib git libunwind-dev libfftw3-dev libelf-dev libncurses5-dev libpthread-stubs0-dev vim gfortran libboost-program-options-dev libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev rpm libnuma-dev pciutils virtualenv python-pip python3-pip libxml2 libxml2-dev wget \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Install rocm pkgs\nRUN apt-get update --allow-insecure-repositories \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated rocm-dev rocm-libs rocm-utils rocm-cmake rocfft miopen-hip miopengemm rocblas hipblas rocrand rocm-profiler cxlactivitylogger \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Build HCC from source, cleanup the default HCC to avoid issue\n#  RUN rm -rf /opt/rocm/hcc-1.0 && rm -rf /opt/rocm/lib/*.bc\n#  RUN cd $HOME && git clone --recursive -b <> https://github.com/RadeonOpenCompute/hcc.git\n#  RUN cd $HOME && mkdir -p build.hcc && cd build.hcc && cmake -DCMAKE_BUILD_TYPE=Release ../hcc\n#  RUN cd $HOME/build.hcc && make -j $(nproc) && make package && dpkg -i hcc*.deb\n#  RUN ln -s /opt/rocm/hcc-1.0 /opt/rocm/hcc\n#   Build HIP from source\n#   The switch to rocm2.5 introduces failures on the rocm-xla CI path,\n#   Need the workaround for issue SWDEV-173477 to fix some of those failures\nRUN cd $HOME \\\n && git clone -b roc-2.5.x-with-swdev-173477-workaround https://github.com/deven-amd/HIP.git\nRUN cd $HOME/HIP \\\n && mkdir -p build \\\n && cd build \\\n && cmake .. \\\n && make package -j $( nproc ;) \\\n && dpkg -i ./hip*.deb\n#   Roll back OpenCL toolset to ROCm2.2 base\nRUN cd $HOME \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl/rocm-opencl_1.2.0-2019030702_amd64.deb \\\n && wget http://repo.radeon.com/rocm/apt/2.2/pool/main/r/rocm-opencl-dev/rocm-opencl-dev_1.2.0-2019030702_amd64.deb \\\n && dpkg -i rocm-opencl*.deb \\\n && rm -rf rocm-rocm*.deb\n#   Set up paths\nENV HCC_HOME=\"$ROCM_PATH/hcc\"\nENV HIP_PATH=\"$ROCM_PATH/hip\"\nENV OPENCL_ROOT=\"$ROCM_PATH/opencl\"\nENV PATH=\"$HCC_HOME/bin:$HIP_PATH/bin:${PATH}\"\nENV PATH=\"$ROCM_PATH/bin:${PATH}\"\nENV PATH=\"$OPENCL_ROOT/bin:${PATH}\"\n#   Add target file to help determine which device(s) to build for\nRUN bash -c 'echo -e \"gfx803\\ngfx900\\ngfx906\" >> /opt/rocm/bin/target.lst'\n#   Build rocBLAS from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocBLAS.git && cd rocBLAS && ./install.sh -id\n#  RUN cd $HOME && git clone -b <>https://github.com/ROCmSoftwarePlatform/hipBLAS.git && cd hipBLAS && ./install.sh -id\n#   Build rocFFT from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocFFT.git && cd rocFFT && ./install.sh -id\n#   Build rocRAND from source\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/rocRAND.git && mkdir rocRAND/build && cd rocRAND/build && CXX=hcc cmake .. && make package -j $(nproc) && dpkg -i ./rocrand*.deb\n#   Build MIOpen from source\n#  RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/rocm-cmake.git && cd $HOME/rocm-cmake && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-cmake*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/RadeonOpenCompute/clang-ocl.git && cd $HOME/clang-ocl && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./rocm-clang-ocl*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git && cd $HOME/MIOpenGEMM && mkdir -p build && cd build && cmake .. && make package -j$(nproc) && dpkg -i ./miopengemm*.deb\n#  RUN cd $HOME && git clone -b <> https://github.com/ROCmSoftwarePlatform/MIOpen.git\n#  RUN cd $HOME/MIOpen && cmake -P install_deps.cmake && \\\n#      mkdir -p build && cd build && \\\n#      CXX=/opt/rocm/hcc/bin/hcc cmake -DMIOPEN_BACKEND=HIP -DCMAKE_PREFIX_PATH=\"/opt/rocm/hcc;/opt/rocm/hip\" -D#CMAKE_CXX_FLAGS=\"-isystem /usr/include/x86_64-linux-gnu/\" .. -DMIOPEN_MAKE_BOOST_PUBLIC=ON && \\\n#      make -j $(nproc) && make package && dpkg -i ./MIOpen*.deb\n#   Copy and run the install scripts.\nCOPY install/*.sh /install/\nARG DEBIAN_FRONTEND=noninteractive\nRUN /install/install_bootstrap_deb_packages.sh\nRUN add-apt-repository -y ppa:openjdk-r/ppa \\\n && add-apt-repository -y ppa:george-edison55/cmake-3.x\nRUN /install/install_deb_packages.sh\nRUN /install/install_pip_packages.sh\nRUN /install/install_bazel.sh\nRUN /install/install_golang.sh\n#   Set up the master bazelrc configuration file.\nCOPY install/.bazelrc /etc/bazel.bazelrc\n#   Configure the build for our ROCm configuration.\nENV TF_NEED_ROCM=\"1\"\n#   This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests\n#   By default, HIP runtime \"hides\" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)\n#   it seems that we need to up the threshold slightly to 320MB\nENV HIP_HIDDEN_FREE_MEM=\"320\"\n","originalDockerfileUglifiedHash":"7457695924f5cd9e42c640ceb5f7bf11","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d3cf41851a177347cad7adea926282638d319b03.dockerfile"}