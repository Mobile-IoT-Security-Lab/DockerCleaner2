{"seed":410236140,"processedDockerfileHash":"efb9bc0b67b7debddb2b17369028e1a9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  +++++++++++++++++++++++++++++++++++++++\n#   Dockerfile for webdevops/samson-deployment:latest\n#      -- automatically generated  --\n#  +++++++++++++++++++++++++++++++++++++++\n#   Staged baselayout builder\nFROM webdevops/toolbox AS baselayout\nRUN mkdir -p /baselayout/sbin /baselayout/usr/local/bin \\\n && wget -O /tmp/baselayout-install.sh https://raw.githubusercontent.com/webdevops/Docker-Image-Baselayout/master/install.sh \\\n && sh /tmp/baselayout-install.sh /baselayout \\\n && wget -O \"/baselayout/usr/local/bin/go-replace\" \"https://github.com/webdevops/goreplace/releases/download/1.1.2/gr-64-linux\" \\\n && chmod +x \"/baselayout/usr/local/bin/go-replace\" \\\n && \"/baselayout/usr/local/bin/go-replace\" --version \\\n && wget -O \"/baselayout/sbin/gosu\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\" \\\n && wget -O \"/tmp/gosu.asc\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /tmp/gosu.asc \"/baselayout/sbin/gosu\" \\\n && rm -rf \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x \"/baselayout/sbin/gosu\" \\\n && \"/baselayout/sbin/gosu\" nobody true\nFROM zendesk/samson:latest\nENV TERM=\"xterm\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV DOCKER_CONF_HOME=\"/opt/docker/\" \\\n    LOG_STDOUT=\"\" \\\n    LOG_STDERR=\"\"\nENV APPLICATION_USER=\"application\" \\\n    APPLICATION_GROUP=\"application\" \\\n    APPLICATION_PATH=\"/app\" \\\n    APPLICATION_UID=\"1000\" \\\n    APPLICATION_GID=\"1000\"\n#  ##############################################################################\n#   Bootstrap\n#  ##############################################################################\n#   Baselayout copy (from staged image)\nCOPY --from=baselayout /baselayout /\nRUN set -x \\\n && apt-update \\\n && /usr/local/bin/generate-dockerimage-info \\\n && sed -ri \"s/(deb.*\\/debian $( docker-image-info dist-codename ;) main)/\\1 contrib non-free /\" -- /etc/apt/sources.list \\\n && apt-update \\\n && /usr/local/bin/apt-upgrade \\\n && apt-install apt-transport-https ca-certificates locales gnupg \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Base\n#  ##############################################################################\nCOPY conf/ /opt/docker/\nRUN set -x \\\n && apt-install python-minimal python-setuptools python-pip python-paramiko python-jinja2 python-dev libffi-dev libssl-dev build-essential openssh-client \\\n && pip install pip==23.1 --upgrade \\\n && hash -r \\\n && pip install ansible==7.4.0 --no-cache-dir \\\n && chmod 750 /usr/local/bin/ansible* \\\n && apt-get purge -y -f --force-yes python-dev build-essential libssl-dev libffi-dev \\\n && docker-image-cleanup\nRUN set -x \\\n && chmod +x /opt/docker/bin/* \\\n && apt-install supervisor wget curl vim net-tools tzdata \\\n && chmod +s /sbin/gosu \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Base-app\n#  ##############################################################################\nRUN set -x \\\n && apt-install zip unzip bzip2 moreutils dnsutils openssh-client rsync git patch \\\n && /usr/local/bin/generate-locales \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Samson\n#  ##############################################################################\nRUN set -x ENV RAILS_ENV=\"production\"\nENV SQLITE_CLEANUP_DAYS=\"0\"\n#   NGINX reverse proxy\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && set -x \\\n && echo deb https://apt.dockerproject.org/repo debian-jessie main > /etc/apt/sources.list.d/docker.list \\\n && curl -fsSL https://yum.dockerproject.org/gpg | apt-key add - \\\n && apt-install nginx docker-engine php-cli php-mysqlnd php-mcrypt php-curl php-recode php-json openjdk-8-jre sqlite3 \\\n && pip install docker-compose==1.29.2 python-dotenv==1.0.0 -U \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \\\n && chmod 755 /usr/local/bin/ansible* \\\n && docker-image-cleanup\n#   NPM stack\nRUN curl -sL https://deb.nodesource.com/setup_9.x | bash - \\\n && apt-get install --no-install-recommends nodejs=18.13.0+dfsg1-1ubuntu2 -y \\\n && npm install gulp@4.0.2 -g \\\n && npm install grunt-cli@1.4.3 -g \\\n && npm install bower@1.8.14 -g \\\n && npm install npm-cache@0.7.0 -g \\\n && docker-image-cleanup\n#   Deployer stack\nRUN set -x \\\n && apt-install build-essential \\\n && ansible-galaxy install --force ansistrano.deploy ansistrano.rollback \\\n && wget --quiet -O/usr/local/bin/dep http://deployer.org/deployer.phar \\\n && chmod +x /usr/local/bin/dep \\\n && gem install capistrano --version 3.17.2 \\\n && docker-image-cleanup\n#   Upload\nCOPY database.yml /app/config/database.yml\nCOPY web/ /app/public/assets/\nCOPY crontab /etc/cron.d/webdevops-samson-deployment\nRUN rake assets:precompile \\\n && docker-service enable cron \\\n && /opt/docker/bin/provision run --tag bootstrap --role webdevops-samson-deployment \\\n && /opt/docker/bin/bootstrap.sh \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\nEXPOSE 80/tcp\nVOLUME /storage\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"supervisord\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# +++++++++++++++++++++++++++++++++++++++\n#  Dockerfile for webdevops/samson-deployment:latest\n#     -- automatically generated  --\n# +++++++++++++++++++++++++++++++++++++++\n#  Staged baselayout builder\nFROM webdevops/toolbox AS baselayout\nRUN mkdir -p /baselayout/sbin /baselayout/usr/local/bin \\\n && wget -O /tmp/baselayout-install.sh https://raw.githubusercontent.com/webdevops/Docker-Image-Baselayout/master/install.sh \\\n && sh /tmp/baselayout-install.sh /baselayout \\\n && wget -O \"/baselayout/usr/local/bin/go-replace\" \"https://github.com/webdevops/goreplace/releases/download/1.1.2/gr-64-linux\" \\\n && chmod +x \"/baselayout/usr/local/bin/go-replace\" \\\n && \"/baselayout/usr/local/bin/go-replace\" --version \\\n && wget -O \"/baselayout/sbin/gosu\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\" \\\n && wget -O \"/tmp/gosu.asc\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /tmp/gosu.asc \"/baselayout/sbin/gosu\" \\\n && rm -rf \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x \"/baselayout/sbin/gosu\" \\\n && \"/baselayout/sbin/gosu\" nobody true\nFROM zendesk/samson:latest\nENV TERM=\"xterm\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV DOCKER_CONF_HOME=\"/opt/docker/\" \\\n    LOG_STDOUT=\"\" \\\n    LOG_STDERR=\"\"\nENV APPLICATION_USER=\"application\" \\\n    APPLICATION_GROUP=\"application\" \\\n    APPLICATION_PATH=\"/app\" \\\n    APPLICATION_UID=\"1000\" \\\n    APPLICATION_GID=\"1000\"\n# ##############################################################################\n#  Bootstrap\n# ##############################################################################\n#  Baselayout copy (from staged image)\nCOPY --from=baselayout /baselayout /\nRUN set -x \\\n && apt-update \\\n && /usr/local/bin/generate-dockerimage-info \\\n && sed -ri \"s/(deb.*\\/debian $( docker-image-info dist-codename ;) main)/\\1 contrib non-free /\" -- /etc/apt/sources.list \\\n && apt-update \\\n && /usr/local/bin/apt-upgrade \\\n && apt-install apt-transport-https ca-certificates locales gnupg \\\n && docker-image-cleanup\n# ##############################################################################\n#  Base\n# ##############################################################################\nCOPY conf/ /opt/docker/\nRUN set -x \\\n && apt-install python-minimal python-setuptools python-pip python-paramiko python-jinja2 python-dev libffi-dev libssl-dev build-essential openssh-client \\\n && pip install pip --upgrade \\\n && hash -r \\\n && pip install ansible --no-cache-dir \\\n && chmod 750 /usr/local/bin/ansible* \\\n && apt-get purge -y -f --force-yes python-dev build-essential libssl-dev libffi-dev \\\n && docker-image-cleanup\nRUN set -x \\\n && chmod +x /opt/docker/bin/* \\\n && apt-install supervisor wget curl vim net-tools tzdata \\\n && chmod +s /sbin/gosu \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n# ##############################################################################\n#  Base-app\n# ##############################################################################\nRUN set -x \\\n && apt-install zip unzip bzip2 moreutils dnsutils openssh-client rsync git patch \\\n && /usr/local/bin/generate-locales \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n# ##############################################################################\n#  Samson\n# ##############################################################################\nRUN set -x ENV RAILS_ENV=\"production\"\nENV SQLITE_CLEANUP_DAYS=\"0\"\n#  NGINX reverse proxy\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && set -x \\\n && echo deb https://apt.dockerproject.org/repo debian-jessie main > /etc/apt/sources.list.d/docker.list \\\n && curl -fsSL https://yum.dockerproject.org/gpg | apt-key add - \\\n && apt-install nginx docker-engine php-cli php-mysqlnd php-mcrypt php-curl php-recode php-json openjdk-8-jre sqlite3 \\\n && pip install docker-compose python-dotenv -U \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \\\n && chmod 755 /usr/local/bin/ansible* \\\n && docker-image-cleanup\n#  NPM stack\nRUN curl -sL https://deb.nodesource.com/setup_9.x | bash - \\\n && apt-get install nodejs -y \\\n && npm install gulp -g \\\n && npm install grunt-cli -g \\\n && npm install bower -g \\\n && npm install npm-cache -g \\\n && docker-image-cleanup\n#  Deployer stack\nRUN set -x \\\n && apt-install build-essential \\\n && ansible-galaxy install --force ansistrano.deploy ansistrano.rollback \\\n && wget --quiet -O/usr/local/bin/dep http://deployer.org/deployer.phar \\\n && chmod +x /usr/local/bin/dep \\\n && gem install capistrano \\\n && docker-image-cleanup\n#  Upload\nADD database.yml /app/config/database.yml\nADD web/ /app/public/assets/\nADD crontab /etc/cron.d/webdevops-samson-deployment\nRUN rake assets:precompile \\\n && docker-service enable cron \\\n && /opt/docker/bin/provision run --tag bootstrap --role webdevops-samson-deployment \\\n && /opt/docker/bin/bootstrap.sh \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\nEXPOSE 80/tcp\nVOLUME /storage\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"supervisord\"]\n","injectedSmells":[],"originalDockerfileHash":"02faf4c8f56c6a9ec19484771873b4ec","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  +++++++++++++++++++++++++++++++++++++++\n#   Dockerfile for webdevops/samson-deployment:latest\n#      -- automatically generated  --\n#  +++++++++++++++++++++++++++++++++++++++\n#   Staged baselayout builder\nFROM webdevops/toolbox AS baselayout\nRUN mkdir -p /baselayout/sbin /baselayout/usr/local/bin \\\n && wget -O /tmp/baselayout-install.sh https://raw.githubusercontent.com/webdevops/Docker-Image-Baselayout/master/install.sh \\\n && sh /tmp/baselayout-install.sh /baselayout \\\n && wget -O \"/baselayout/usr/local/bin/go-replace\" \"https://github.com/webdevops/goreplace/releases/download/1.1.2/gr-64-linux\" \\\n && chmod +x \"/baselayout/usr/local/bin/go-replace\" \\\n && \"/baselayout/usr/local/bin/go-replace\" --version \\\n && wget -O \"/baselayout/sbin/gosu\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64\" \\\n && wget -O \"/tmp/gosu.asc\" \"https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64.asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /tmp/gosu.asc \"/baselayout/sbin/gosu\" \\\n && rm -rf \"$GNUPGHOME\" /tmp/gosu.asc \\\n && chmod +x \"/baselayout/sbin/gosu\" \\\n && \"/baselayout/sbin/gosu\" nobody true\nFROM zendesk/samson:latest\nENV TERM=\"xterm\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nENV DOCKER_CONF_HOME=\"/opt/docker/\" \\\n    LOG_STDOUT=\"\" \\\n    LOG_STDERR=\"\"\nENV APPLICATION_USER=\"application\" \\\n    APPLICATION_GROUP=\"application\" \\\n    APPLICATION_PATH=\"/app\" \\\n    APPLICATION_UID=\"1000\" \\\n    APPLICATION_GID=\"1000\"\n#  ##############################################################################\n#   Bootstrap\n#  ##############################################################################\n#   Baselayout copy (from staged image)\nCOPY --from=baselayout /baselayout /\nRUN set -x \\\n && apt-update \\\n && /usr/local/bin/generate-dockerimage-info \\\n && sed -ri \"s/(deb.*\\/debian $( docker-image-info dist-codename ;) main)/\\1 contrib non-free /\" -- /etc/apt/sources.list \\\n && apt-update \\\n && /usr/local/bin/apt-upgrade \\\n && apt-install apt-transport-https ca-certificates locales gnupg \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Base\n#  ##############################################################################\nCOPY conf/ /opt/docker/\nRUN set -x \\\n && apt-install python-minimal python-setuptools python-pip python-paramiko python-jinja2 python-dev libffi-dev libssl-dev build-essential openssh-client \\\n && pip install pip --upgrade \\\n && hash -r \\\n && pip install ansible --no-cache-dir \\\n && chmod 750 /usr/local/bin/ansible* \\\n && apt-get purge -y -f --force-yes python-dev build-essential libssl-dev libffi-dev \\\n && docker-image-cleanup\nRUN set -x \\\n && chmod +x /opt/docker/bin/* \\\n && apt-install supervisor wget curl vim net-tools tzdata \\\n && chmod +s /sbin/gosu \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Base-app\n#  ##############################################################################\nRUN set -x \\\n && apt-install zip unzip bzip2 moreutils dnsutils openssh-client rsync git patch \\\n && /usr/local/bin/generate-locales \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\n#  ##############################################################################\n#   Samson\n#  ##############################################################################\nRUN set -x ENV RAILS_ENV=\"production\"\nENV SQLITE_CLEANUP_DAYS=\"0\"\n#   NGINX reverse proxy\nRUN export DEBIAN_FRONTEND=noninteractive \\\n && set -x \\\n && echo deb https://apt.dockerproject.org/repo debian-jessie main > /etc/apt/sources.list.d/docker.list \\\n && curl -fsSL https://yum.dockerproject.org/gpg | apt-key add - \\\n && apt-install nginx docker-engine php-cli php-mysqlnd php-mcrypt php-curl php-recode php-json openjdk-8-jre sqlite3 \\\n && pip install docker-compose python-dotenv -U \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin/ --filename=composer \\\n && chmod 755 /usr/local/bin/ansible* \\\n && docker-image-cleanup\n#   NPM stack\nRUN curl -sL https://deb.nodesource.com/setup_9.x | bash - \\\n && apt-get install nodejs -y \\\n && npm install gulp -g \\\n && npm install grunt-cli -g \\\n && npm install bower -g \\\n && npm install npm-cache -g \\\n && docker-image-cleanup\n#   Deployer stack\nRUN set -x \\\n && apt-install build-essential \\\n && ansible-galaxy install --force ansistrano.deploy ansistrano.rollback \\\n && wget --quiet -O/usr/local/bin/dep http://deployer.org/deployer.phar \\\n && chmod +x /usr/local/bin/dep \\\n && gem install capistrano \\\n && docker-image-cleanup\n#   Upload\nADD database.yml /app/config/database.yml\nADD web/ /app/public/assets/\nADD crontab /etc/cron.d/webdevops-samson-deployment\nRUN rake assets:precompile \\\n && docker-service enable cron \\\n && /opt/docker/bin/provision run --tag bootstrap --role webdevops-samson-deployment \\\n && /opt/docker/bin/bootstrap.sh \\\n && docker-run-bootstrap \\\n && docker-image-cleanup\nEXPOSE 80/tcp\nVOLUME /storage\nENTRYPOINT [\"/entrypoint\"]\nCMD [\"supervisord\"]\n","originalDockerfileUglifiedHash":"983d097dcf065c1b6e8c664e631c3a84","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/62761dbfa09af54d8b19b1fea047c3249f34e8d2.dockerfile"}