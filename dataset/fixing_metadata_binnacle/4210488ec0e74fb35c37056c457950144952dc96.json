{"seed":1894970892,"processedDockerfileHash":"8ff6001ee4562209d53519ad3d431dca","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"#   docker-keras-full - Deep learning environment with *Keras* and *Jupyter* using CPU or GPU\nFROM gw000/keras:2.1.4-gpu\nMAINTAINER gw0 [http://gw.tnode.com/] <gw.2018@ena.one>\n#   install py2-tf-cpu/gpu (Python 2, TensorFlow, CPU/GPU)\n#   (already installed in upstream image)\n#   install py2-th-cpu (Python 2, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION} --no-cache-dir\n#   install py2-cntk-cpu (Python 2, CNTK, CPU/GPU)\n#   requirements from old ubuntu repositories for cntk\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse' > /etc/apt/sources.list.d/ubuntu-16.04.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ubuntu-archive-keyring -y \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends openmpi-bin=1.10.2-8ubuntu1 openmpi-common=1.10.2-8ubuntu1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=CPU-Only\nRUN pip install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp27-cp27mu-linux_x86_64.whl --no-cache-dir\n#   install Keras for Python 2\n#   (already installed in upstream image)\n#   install py3-tf-cpu/gpu (Python 3, TensorFlow, CPU/GPU)\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3 python3-dev python3-pip python3-setuptools python3-virtualenv python3-wheel pkg-config libopenblas-base python3-numpy python3-scipy python3-h5py python3-yaml python3-pydot -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   manually update numpy\nRUN pip3 --no-cache-dir install -U numpy==1.13.3\nARG TENSORFLOW_VERSION=1.5.0\nARG TENSORFLOW_DEVICE=gpu\nARG TENSORFLOW_APPEND=_gpu\nRUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n#   install py3-th-cpu/gpu (Python 3, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip3 --no-cache-dir install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION}\n#   install py3-cntk-cpu/gpu (Python 3, CNTK, CPU/GPU)\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=GPU\nRUN pip3 --no-cache-dir install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp35-cp35m-linux_x86_64.whl\n#   install Keras for Python 3\nARG KERAS_VERSION=2.1.4\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n#   install additional debian packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends less procps vim-tiny build-essential libffi-dev python-matplotlib python-pillow python3-matplotlib python3-pillow -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install additional python packages\nRUN pip install ipython==8.12.0 ipykernel==6.22.0 jupyter==1.0.0 jupyter-kernel-gateway==2.5.2 jupyter-tensorboard==0.2.0 pandas==2.0.0 scikit-learn==1.2.2 statsmodels==0.13.5 --no-cache-dir \\\n && python -m ipykernel.kernelspec \\\n && pip3 --no-cache-dir install ipython ipykernel pandas scikit-learn statsmodels \\\n && python3 -m ipykernel.kernelspec\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\nENV SHELL=\"/bin/bash\"\n#   quick test and dump package lists\nRUN jupyter notebook --version \\\n && jupyter nbextension list 2>&1 \\\n && python -c \"import numpy; print(numpy.__version__)\" \\\n && python -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python -c \"import theano; print(theano.__version__)\" \\\n && python -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" \\\n && python3 -c \"import numpy; print(numpy.__version__)\" \\\n && python3 -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python3 -c \"import theano; print(theano.__version__)\" \\\n && python3 -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python3 -c \"import matplotlib.pyplot\" \\\n && rm -rf /tmp/* \\\n && dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt \\\n && pip3 freeze > /pip3-freeze.txt\n#   run as user 1000\nRUN useradd --create-home --uid 1000 --user-group --groups video --shell /bin/bash user \\\n && cp -a /root/.jupyter /root/.local /home/user \\\n && chown -R user:user /home/user /srv\nUSER user\n#   publicly accessible on any IP\nENV IP=\"*\"\n#   accessible only from localhost\n#  ENV IP=127.0.0.1\n#   only password authentication (password: keras)\n#  ENV PASSWD='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n#  unset ENV TOKEN=\n#   password and token authentication (password and token: keras)\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\nENV TOKEN=\"keras\"\n#   random token authentication\n#  unset ENV PASSWD=\n#  unset ENV TOKEN=\nEXPOSE 8888/tcp\nWORKDIR /srv/\nCMD /bin/bash -c 'jupyter notebook --NotebookApp.open_browser=False --NotebookApp.allow_root=True --NotebookApp.ip=\"$IP\" ${PASSWD+--NotebookApp.password=\\\"$PASSWD\\\"} ${TOKEN+--NotebookApp.token=\\\"$TOKEN\\\"} --NotebookApp.allow_password_change=False --JupyterWebsocketPersonality.list_kernels=True \"$@\"'\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  docker-keras-full - Deep learning environment with *Keras* and *Jupyter* using CPU or GPU\nFROM gw000/keras:2.1.4-gpu\nMAINTAINER gw0 [http://gw.tnode.com/] <gw.2018@ena.one>\n#  install py2-tf-cpu/gpu (Python 2, TensorFlow, CPU/GPU)\n#  (already installed in upstream image)\n#  install py2-th-cpu (Python 2, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION} --no-cache-dir\n#  install py2-cntk-cpu (Python 2, CNTK, CPU/GPU)\n#  requirements from old ubuntu repositories for cntk\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse' > /etc/apt/sources.list.d/ubuntu-16.04.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ubuntu-archive-keyring -y \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends openmpi-bin=1.10.2-8ubuntu1 openmpi-common=1.10.2-8ubuntu1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=CPU-Only\nRUN pip install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp27-cp27mu-linux_x86_64.whl --no-cache-dir\n#  install Keras for Python 2\n#  (already installed in upstream image)\n#  install py3-tf-cpu/gpu (Python 3, TensorFlow, CPU/GPU)\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3 python3-dev python3-pip python3-setuptools python3-virtualenv python3-wheel pkg-config libopenblas-base python3-numpy python3-scipy python3-h5py python3-yaml python3-pydot -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  manually update numpy\nRUN pip3 --no-cache-dir install -U numpy==1.13.3\nARG TENSORFLOW_VERSION=1.5.0\nARG TENSORFLOW_DEVICE=gpu\nARG TENSORFLOW_APPEND=_gpu\nRUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n#  install py3-th-cpu/gpu (Python 3, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip3 --no-cache-dir install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION}\n#  install py3-cntk-cpu/gpu (Python 3, CNTK, CPU/GPU)\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=GPU\nRUN pip3 --no-cache-dir install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp35-cp35m-linux_x86_64.whl\n#  install Keras for Python 3\nARG KERAS_VERSION=2.1.4\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n#  install additional debian packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends less procps vim-tiny build-essential libffi-dev python-matplotlib python-pillow python3-matplotlib python3-pillow -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  install additional python packages\nRUN pip install ipython ipykernel jupyter jupyter-kernel-gateway jupyter-tensorboard pandas scikit-learn statsmodels --no-cache-dir \\\n && python -m ipykernel.kernelspec \\\n && pip3 --no-cache-dir install ipython ipykernel pandas scikit-learn statsmodels \\\n && python3 -m ipykernel.kernelspec\n#  configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\nENV SHELL=\"/bin/bash\"\n#  quick test and dump package lists\nRUN jupyter notebook --version \\\n && jupyter nbextension list 2>&1 \\\n && python -c \"import numpy; print(numpy.__version__)\" \\\n && python -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python -c \"import theano; print(theano.__version__)\" \\\n && python -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" \\\n && python3 -c \"import numpy; print(numpy.__version__)\" \\\n && python3 -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python3 -c \"import theano; print(theano.__version__)\" \\\n && python3 -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python3 -c \"import matplotlib.pyplot\" \\\n && rm -rf /tmp/* \\\n && dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt \\\n && pip3 freeze > /pip3-freeze.txt\n#  run as user 1000\nRUN useradd --create-home --uid 1000 --user-group --groups video --shell /bin/bash user \\\n && cp -a /root/.jupyter /root/.local /home/user \\\n && chown -R user:user /home/user /srv\nUSER user\n#  publicly accessible on any IP\nENV IP=\"*\"\n#  accessible only from localhost\n# ENV IP=127.0.0.1\n#  only password authentication (password: keras)\n# ENV PASSWD='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n# unset ENV TOKEN=\n#  password and token authentication (password and token: keras)\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\nENV TOKEN=\"keras\"\n#  random token authentication\n# unset ENV PASSWD=\n# unset ENV TOKEN=\nEXPOSE 8888/tcp\nWORKDIR /srv/\nCMD /bin/bash -c 'jupyter notebook --NotebookApp.open_browser=False --NotebookApp.allow_root=True --NotebookApp.ip=\"$IP\" ${PASSWD+--NotebookApp.password=\\\"$PASSWD\\\"} ${TOKEN+--NotebookApp.token=\\\"$TOKEN\\\"} --NotebookApp.allow_password_change=False --JupyterWebsocketPersonality.list_kernels=True \"$@\"'\n","injectedSmells":[],"originalDockerfileHash":"166fece797d63ea04106e86070f2f60c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   docker-keras-full - Deep learning environment with *Keras* and *Jupyter* using CPU or GPU\nFROM gw000/keras:2.1.4-gpu\nMAINTAINER gw0 [http://gw.tnode.com/] <gw.2018@ena.one>\n#   install py2-tf-cpu/gpu (Python 2, TensorFlow, CPU/GPU)\n#   (already installed in upstream image)\n#   install py2-th-cpu (Python 2, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION} --no-cache-dir\n#   install py2-cntk-cpu (Python 2, CNTK, CPU/GPU)\n#   requirements from old ubuntu repositories for cntk\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse' > /etc/apt/sources.list.d/ubuntu-16.04.list\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends ubuntu-archive-keyring -y \\\n && apt-get update -qq \\\n && apt-get install --no-install-recommends openmpi-bin=1.10.2-8ubuntu1 openmpi-common=1.10.2-8ubuntu1 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=CPU-Only\nRUN pip install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp27-cp27mu-linux_x86_64.whl --no-cache-dir\n#   install Keras for Python 2\n#   (already installed in upstream image)\n#   install py3-tf-cpu/gpu (Python 3, TensorFlow, CPU/GPU)\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends python3 python3-dev python3-pip python3-setuptools python3-virtualenv python3-wheel pkg-config libopenblas-base python3-numpy python3-scipy python3-h5py python3-yaml python3-pydot -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   manually update numpy\nRUN pip3 --no-cache-dir install -U numpy==1.13.3\nARG TENSORFLOW_VERSION=1.5.0\nARG TENSORFLOW_DEVICE=gpu\nARG TENSORFLOW_APPEND=_gpu\nRUN pip3 --no-cache-dir install https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_DEVICE}/tensorflow${TENSORFLOW_APPEND}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl\n#   install py3-th-cpu/gpu (Python 3, Theano, CPU/GPU)\nARG THEANO_VERSION=1.0.1\nENV THEANO_FLAGS=\"device=cpu,floatX=float32\"\nRUN pip3 --no-cache-dir install git+https://github.com/Theano/Theano.git@rel-${THEANO_VERSION}\n#   install py3-cntk-cpu/gpu (Python 3, CNTK, CPU/GPU)\nARG CNTK_VERSION=2.4\nARG CNTK_DEVICE=GPU\nRUN pip3 --no-cache-dir install https://cntk.ai/PythonWheel/${CNTK_DEVICE}/cntk-${CNTK_VERSION}-cp35-cp35m-linux_x86_64.whl\n#   install Keras for Python 3\nARG KERAS_VERSION=2.1.4\nENV KERAS_BACKEND=\"tensorflow\"\nRUN pip3 --no-cache-dir install --no-dependencies git+https://github.com/fchollet/keras.git@${KERAS_VERSION}\n#   install additional debian packages\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends less procps vim-tiny build-essential libffi-dev python-matplotlib python-pillow python3-matplotlib python3-pillow -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   install additional python packages\nRUN pip install ipython ipykernel jupyter jupyter-kernel-gateway jupyter-tensorboard pandas scikit-learn statsmodels --no-cache-dir \\\n && python -m ipykernel.kernelspec \\\n && pip3 --no-cache-dir install ipython ipykernel pandas scikit-learn statsmodels \\\n && python3 -m ipykernel.kernelspec\n#   configure console\nRUN echo 'alias ll=\"ls --color=auto -lA\"' >> /root/.bashrc \\\n && echo '\"\\e[5~\": history-search-backward' >> /root/.inputrc \\\n && echo '\"\\e[6~\": history-search-forward' >> /root/.inputrc\nENV SHELL=\"/bin/bash\"\n#   quick test and dump package lists\nRUN jupyter notebook --version \\\n && jupyter nbextension list 2>&1 \\\n && python -c \"import numpy; print(numpy.__version__)\" \\\n && python -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python -c \"import theano; print(theano.__version__)\" \\\n && python -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python -c \"import matplotlib.pyplot\" \\\n && python3 -c \"import numpy; print(numpy.__version__)\" \\\n && python3 -c \"import tensorflow; print(tensorflow.__version__)\" \\\n && python3 -c \"import theano; print(theano.__version__)\" \\\n && python3 -c \"import cntk; print(cntk.__version__)\" \\\n && MPLBACKEND=Agg python3 -c \"import matplotlib.pyplot\" \\\n && rm -rf /tmp/* \\\n && dpkg-query -l > /dpkg-query-l.txt \\\n && pip2 freeze > /pip2-freeze.txt \\\n && pip3 freeze > /pip3-freeze.txt\n#   run as user 1000\nRUN useradd --create-home --uid 1000 --user-group --groups video --shell /bin/bash user \\\n && cp -a /root/.jupyter /root/.local /home/user \\\n && chown -R user:user /home/user /srv\nUSER user\n#   publicly accessible on any IP\nENV IP=\"*\"\n#   accessible only from localhost\n#  ENV IP=127.0.0.1\n#   only password authentication (password: keras)\n#  ENV PASSWD='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'\n#  unset ENV TOKEN=\n#   password and token authentication (password and token: keras)\nENV PASSWD=\"sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824\"\nENV TOKEN=\"keras\"\n#   random token authentication\n#  unset ENV PASSWD=\n#  unset ENV TOKEN=\nEXPOSE 8888/tcp\nWORKDIR /srv/\nCMD /bin/bash -c 'jupyter notebook --NotebookApp.open_browser=False --NotebookApp.allow_root=True --NotebookApp.ip=\"$IP\" ${PASSWD+--NotebookApp.password=\\\"$PASSWD\\\"} ${TOKEN+--NotebookApp.token=\\\"$TOKEN\\\"} --NotebookApp.allow_password_change=False --JupyterWebsocketPersonality.list_kernels=True \"$@\"'\n","originalDockerfileUglifiedHash":"ccfc0ee6bba78ade38e2ac8f19a615ae","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4210488ec0e74fb35c37056c457950144952dc96.dockerfile"}