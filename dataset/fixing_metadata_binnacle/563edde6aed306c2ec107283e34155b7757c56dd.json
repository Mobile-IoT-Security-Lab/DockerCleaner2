{"seed":1102645152,"processedDockerfileHash":"24154d44439640ea3d599e20d5f125f7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stretch-slim\nRUN apt-get update \\\n && apt-get install --no-install-recommends bzip2 curl gcc gnupg dirmngr make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   pub   1024D/ACC9965B 2006-12-12\n#         Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#   uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#   sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#   CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#   As long as we rely on libnss, we have to have libc.so anyhow, so\n#   we've removed CONFIG_STATIC here for now... :cry:\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && ln -vL \"$( which getconf ;)\" rootfs/bin/getconf \\\n && mkdir -p rootfs/etc \\\n && cp /etc/nsswitch.conf rootfs/etc/ \\\n && mkdir -p rootfs/lib \\\n && ln -sT lib rootfs/lib64 \\\n && set -- rootfs/bin/busybox rootfs/bin/getconf /lib/\"$( gcc -print-multiarch ;)\"/libnss*.so.* /lib/\"$( gcc -print-multiarch ;)\"/libpthread*.so.* \\\n && while [ \"$#\" -gt 0 ] ; do f=\"$1\" ;shift ;fn=\"$( basename \"$f\" ;)\" ;if [ -e \"rootfs/lib/$fn\" ] ; then continue ; fi ;if [ \"${f#rootfs/}\" = \"$f\" ] ; then if [ \"${fn#ld-}\" = \"$fn\" ] ; then ln -vL \"$f\" \"rootfs/lib/$fn\" ; else cp -v \"$f\" \"rootfs/lib/$fn\" ; fi ; fi ;set -- \"$@\" $( ldd \"$f\" | awk ' $1 ~ /^\\// { print $1; next } $2 == \"=>\" \\\n && $3 ~ /^\\// { print $3; next } ' ;) ; done \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN \\\n && chroot rootfs /bin/busybox --install /bin\n#   download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | bash -Eeuo pipefail -x ; rm buildroot-device-table.txt\n#   create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#   test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#   ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#   test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch-slim\nRUN apt-get update \\\n && apt-get install bzip2 curl gcc gnupg dirmngr make -y \\\n && rm -rf /var/lib/apt/lists/*\n#  pub   1024D/ACC9965B 2006-12-12\n#        Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#  uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#  sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#  CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#  As long as we rely on libnss, we have to have libc.so anyhow, so\n#  we've removed CONFIG_STATIC here for now... :cry:\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && ln -vL \"$( which getconf ;)\" rootfs/bin/getconf \\\n && mkdir -p rootfs/etc \\\n && cp /etc/nsswitch.conf rootfs/etc/ \\\n && mkdir -p rootfs/lib \\\n && ln -sT lib rootfs/lib64 \\\n && set -- rootfs/bin/busybox rootfs/bin/getconf /lib/\"$( gcc -print-multiarch ;)\"/libnss*.so.* /lib/\"$( gcc -print-multiarch ;)\"/libpthread*.so.* \\\n && while [ \"$#\" -gt 0 ] ; do f=\"$1\" ;shift ;fn=\"$( basename \"$f\" ;)\" ;if [ -e \"rootfs/lib/$fn\" ] ; then continue ; fi ;if [ \"${f#rootfs/}\" = \"$f\" ] ; then if [ \"${fn#ld-}\" = \"$fn\" ] ; then ln -vL \"$f\" \"rootfs/lib/$fn\" ; else cp -v \"$f\" \"rootfs/lib/$fn\" ; fi ; fi ;set -- \"$@\" $( ldd \"$f\" | awk ' $1 ~ /^\\// { print $1; next } $2 == \"=>\" \\\n && $3 ~ /^\\// { print $3; next } ' ;) ; done \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN \\\n && chroot rootfs /bin/busybox --install /bin\n#  download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | bash -Eeuo pipefail -x ; rm buildroot-device-table.txt\n#  create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#  test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#  ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#  test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\n","injectedSmells":[],"originalDockerfileHash":"06fcaebb921c8f6ef99b518441b907a0","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch-slim\nRUN apt-get update \\\n && apt-get install bzip2 curl gcc gnupg dirmngr make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   pub   1024D/ACC9965B 2006-12-12\n#         Key fingerprint = C9E9 416F 76E6 10DB D09D  040F 47B7 0C55 ACC9 965B\n#   uid                  Denis Vlasenko <vda.linux@googlemail.com>\n#   sub   1024g/2C766641 2006-12-12\nRUN gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys C9E9416F76E610DBD09D040F47B70C55ACC9965B\nENV BUSYBOX_VERSION=\"1.31.0\"\nRUN set -ex ; tarball=\"busybox-${BUSYBOX_VERSION}.tar.bz2\" ; curl -fL -o busybox.tar.bz2 \"https://busybox.net/downloads/$tarball\" ; curl -fL -o busybox.tar.bz2.sig \"https://busybox.net/downloads/$tarball.sig\" ; gpg --batch --verify busybox.tar.bz2.sig busybox.tar.bz2 ; mkdir -p /usr/src/busybox ; tar -xf busybox.tar.bz2 -C /usr/src/busybox --strip-components 1 ; rm busybox.tar.bz2*\nWORKDIR /usr/src/busybox\n#   CONFIG_LAST_SUPPORTED_WCHAR: see https://github.com/docker-library/busybox/issues/13 (UTF-8 input)\n#   As long as we rely on libnss, we have to have libc.so anyhow, so\n#   we've removed CONFIG_STATIC here for now... :cry:\nRUN set -ex ; setConfs=' CONFIG_AR=y CONFIG_FEATURE_AR_CREATE=y CONFIG_FEATURE_AR_LONG_FILENAMES=y CONFIG_LAST_SUPPORTED_WCHAR=0 ' ; unsetConfs=' CONFIG_FEATURE_SYNC_FANCY ' ; make defconfig ; for conf in $unsetConfs; do sed -i -e \"s!^$conf=.*$!# $conf is not set!\" .config ; done ; for confV in $setConfs; do conf=\"${confV%=*}\" ;sed -i -e \"s!^$conf=.*$!$confV!\" -e \"s!^# $conf is not set$!$confV!\" .config ;if ! grep -q \"^$confV$\" .config ; then echo \"$confV\" >> .config; fi ; done ; make oldconfig ; for conf in $unsetConfs; do ! grep -q \"^$conf=\" .config ; done ; for confV in $setConfs; do grep -q \"^$confV$\" .config ; done\nRUN set -ex \\\n && make -j \"$( nproc ;)\" busybox \\\n && ./busybox --help \\\n && mkdir -p rootfs/bin \\\n && ln -vL busybox rootfs/bin/ \\\n && ln -vL \"$( which getconf ;)\" rootfs/bin/getconf \\\n && mkdir -p rootfs/etc \\\n && cp /etc/nsswitch.conf rootfs/etc/ \\\n && mkdir -p rootfs/lib \\\n && ln -sT lib rootfs/lib64 \\\n && set -- rootfs/bin/busybox rootfs/bin/getconf /lib/\"$( gcc -print-multiarch ;)\"/libnss*.so.* /lib/\"$( gcc -print-multiarch ;)\"/libpthread*.so.* \\\n && while [ \"$#\" -gt 0 ] ; do f=\"$1\" ;shift ;fn=\"$( basename \"$f\" ;)\" ;if [ -e \"rootfs/lib/$fn\" ] ; then continue ; fi ;if [ \"${f#rootfs/}\" = \"$f\" ] ; then if [ \"${fn#ld-}\" = \"$fn\" ] ; then ln -vL \"$f\" \"rootfs/lib/$fn\" ; else cp -v \"$f\" \"rootfs/lib/$fn\" ; fi ; fi ;set -- \"$@\" $( ldd \"$f\" | awk ' $1 ~ /^\\// { print $1; next } $2 == \"=>\" \\\n && $3 ~ /^\\// { print $3; next } ' ;) ; done \\\n && chroot rootfs /bin/getconf _NPROCESSORS_ONLN \\\n && chroot rootfs /bin/busybox --install /bin\n#   download a few extra files from buildroot (/etc/passwd, etc)\nRUN set -ex ; buildrootVersion='2019.05' ; mkdir -p rootfs/etc ; for f in passwd shadow group; do curl -fL -o \"rootfs/etc/$f\" \"https://git.busybox.net/buildroot/plain/system/skeleton/etc/$f?id=$buildrootVersion\" ; done ; grep -E '^root::' rootfs/etc/shadow ; sed -ri -e 's/^root::/root:*:/' rootfs/etc/shadow ; grep -E '^root:[*]:' rootfs/etc/shadow ; curl -fL -o buildroot-device-table.txt \"https://git.busybox.net/buildroot/plain/system/device_table.txt?id=$buildrootVersion\" ; awk ' !/^#/ { if ($2 != \"d\" \\\n && $2 != \"f\") { printf \"error: unknown type \\\"%s\\\" encountered in line %d: %s\\n\", $2, NR, $0 > \"/dev/stderr\"; exit 1; } sub(/^\\/?/, \"rootfs/\", $1); if ($2 == \"d\") { printf \"mkdir -p %s\\n\", $1; } printf \"chmod %s %s\\n\", $3, $1; } ' buildroot-device-table.txt | bash -Eeuo pipefail -x ; rm buildroot-device-table.txt\n#   create missing home directories\nRUN set -ex \\\n && cd rootfs \\\n && for userHome in $( awk -F ':' '{ print $3 \":\" $4 \"=\" $6 }' etc/passwd ;); do user=\"${userHome%%=*}\" ;home=\"${userHome#*=}\" ;home=\"./${home#/}\" ;if [ ! -d \"$home\" ] ; then mkdir -p \"$home\" ;chown \"$user\" \"$home\" ;chmod 755 \"$home\" ; fi ; done\n#   test and make sure it works\nRUN chroot rootfs /bin/sh -xec 'true'\n#   ensure correct timezone (UTC)\nRUN set -ex ; ln -vL /usr/share/zoneinfo/UTC rootfs/etc/localtime ; [ \"$( chroot rootfs date +%Z ;)\" = 'UTC' ]\n#   test and make sure DNS works too\nRUN cp -L /etc/resolv.conf rootfs/etc/ \\\n && chroot rootfs /bin/sh -xec 'nslookup google.com' \\\n && rm rootfs/etc/resolv.conf\n","originalDockerfileUglifiedHash":"1a2567d976db4206579c102ba26dfb4c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/563edde6aed306c2ec107283e34155b7757c56dd.dockerfile"}