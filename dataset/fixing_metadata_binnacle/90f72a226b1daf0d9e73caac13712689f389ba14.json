{"seed":2422270212,"processedDockerfileHash":"85b782704b0d46af5ca0d96da7109341","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\n#  Fix default ceres package on 16.04 is broken\nRUN apt-get update --quiet \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common --no-install-suggests --yes )\nRUN add-apt-repository ppa:lkoppel/ceres\nRUN apt-get update --quiet \\\n && (apt-get update ;apt-get install --no-install-recommends apt-utils wget build-essential emacs python-dev python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libfftw3-dev h5utils jq libzmq-dev hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libace-dev gcc-multilib libgtest-dev python-dev liblapack-dev liblapacke-dev libatlas-base-dev libplplot-dev libdcmtk-dev libceres-dev supervisor net-tools cpio --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends libopenblas-base libopenblas-dev --no-install-suggests --yes )\n#  Update gcc to something remotely recent\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends gcc-6 g++-6 -y )\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n#  Python stuff\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN (apt-get update ;apt-get install --no-install-recommends python3-psutil python3-pyxb python3-lxml --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-pil --no-install-suggests --yes )\nRUN (apt-get update ;apt-get install --no-install-recommends python3-configargparse --no-install-suggests --yes )\nRUN pip3 install numpy==1.15.4 Cython scipy tk-tools matplotlib==2.2.3 scikit-image opencv_python pydicom scikit-learn\nRUN (apt-get update ;apt-get install --no-install-recommends python3-tk --no-install-suggests --yes )\nRUN pip3 uninstall -y h5py\nRUN (apt-get update ;apt-get install --no-install-recommends python3-h5py -y )\nRUN pip3 install --upgrade tensorflow\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#   for embedded python plot, we need agg backend\nRUN mkdir -p /root/.config/matplotlib \\\n && touch /root/.config/matplotlib/matplotlibrc\nRUN echo \"backend : agg\" >> /root/.config/matplotlib/matplotlibrc\n#   Compile boost\nRUN cd /opt \\\n && wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz \\\n && tar -xzvf boost_1_67_0.tar.gz \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh --with-python=/usr/bin/python3 --prefix=/usr \\\n && ./b2 -j$( nproc ;) address-model=64 stage \\\n && ./b2 install\n#   since cmake has problems to find python3 and boost-python3\nRUN ln -s /usr/lib/libboost_python35.so /usr/lib/libboost_python3.so\n#   Compile armadillo\nRUN cd /opt \\\n && wget http://sourceforge.net/projects/arma/files/armadillo-8.600.0.tar.xz \\\n && tar xvf armadillo-8.600.0.tar.xz \\\n && cd armadillo-8.600.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release ../ \\\n && make -j$( nproc ;) \\\n && make install\n#   fix the  qhull reentrant problem\n#   RUN pip uninstall -y scipy\n#  ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#   BART\nRUN cd /opt \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n#  Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.2/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.2/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#   Clean up packages.\n#  RUN  apt-get clean && \\\n#     rm -rf /var/lib/apt/lists/*\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\n# Fix default ceres package on 16.04 is broken\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends software-properties-common --no-install-suggests --yes\nRUN add-apt-repository ppa:lkoppel/ceres\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends apt-utils wget build-essential emacs python-dev python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libfftw3-dev h5utils jq libzmq-dev hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libace-dev gcc-multilib libgtest-dev python-dev liblapack-dev liblapacke-dev libatlas-base-dev libplplot-dev libdcmtk-dev libceres-dev supervisor net-tools cpio --no-install-suggests --yes\nRUN apt-get install --no-install-recommends libopenblas-base libopenblas-dev --no-install-suggests --yes\n# Update gcc to something remotely recent\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN apt-get update\nRUN apt-get install gcc-6 g++-6 -y\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n# Python stuff\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN apt-get install --no-install-recommends python3-psutil python3-pyxb python3-lxml --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-pil --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-configargparse --no-install-suggests --yes\nRUN pip3 install numpy==1.15.4 Cython scipy tk-tools matplotlib==2.2.3 scikit-image opencv_python pydicom scikit-learn\nRUN apt-get install --no-install-recommends python3-tk --no-install-suggests --yes\nRUN pip3 uninstall -y h5py\nRUN apt-get install python3-h5py -y\nRUN pip3 install --upgrade tensorflow\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#  for embedded python plot, we need agg backend\nRUN mkdir -p /root/.config/matplotlib \\\n && touch /root/.config/matplotlib/matplotlibrc\nRUN echo \"backend : agg\" >> /root/.config/matplotlib/matplotlibrc\n#  Compile boost\nRUN cd /opt \\\n && wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz \\\n && tar -xzvf boost_1_67_0.tar.gz \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh --with-python=/usr/bin/python3 --prefix=/usr \\\n && ./b2 -j$( nproc ;) address-model=64 stage \\\n && ./b2 install\n#  since cmake has problems to find python3 and boost-python3\nRUN ln -s /usr/lib/libboost_python35.so /usr/lib/libboost_python3.so\n#  Compile armadillo\nRUN cd /opt \\\n && wget http://sourceforge.net/projects/arma/files/armadillo-8.600.0.tar.xz \\\n && tar xvf armadillo-8.600.0.tar.xz \\\n && cd armadillo-8.600.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release ../ \\\n && make -j$( nproc ;) \\\n && make install\n#  fix the  qhull reentrant problem\n#  RUN pip uninstall -y scipy\n# ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#  BART\nRUN cd /opt \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n# Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.2/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.2/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#  Clean up packages.\n# RUN  apt-get clean && \\\n#    rm -rf /var/lib/apt/lists/*\n","injectedSmells":[],"originalDockerfileHash":"e7c1f2ae03300d1ecd592fbc9060e904","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04\nARG BART_URL=https://github.com/mrirecon/bart\nARG BART_BRANCH=master\n#  Fix default ceres package on 16.04 is broken\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends software-properties-common --no-install-suggests --yes\nRUN add-apt-repository ppa:lkoppel/ceres\nRUN apt-get update --quiet \\\n && apt-get install --no-install-recommends apt-utils wget build-essential emacs python-dev python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libfftw3-dev h5utils jq libzmq-dev hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libace-dev gcc-multilib libgtest-dev python-dev liblapack-dev liblapacke-dev libatlas-base-dev libplplot-dev libdcmtk-dev libceres-dev supervisor net-tools cpio --no-install-suggests --yes\nRUN apt-get install --no-install-recommends libopenblas-base libopenblas-dev --no-install-suggests --yes\n#  Update gcc to something remotely recent\nRUN add-apt-repository ppa:ubuntu-toolchain-r/test\nRUN apt-get update\nRUN apt-get install gcc-6 g++-6 -y\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n#  Python stuff\nRUN pip3 install --upgrade pip\nRUN pip3 install -U pip setuptools\nRUN apt-get install --no-install-recommends python3-psutil python3-pyxb python3-lxml --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-pil --no-install-suggests --yes\nRUN apt-get install --no-install-recommends python3-configargparse --no-install-suggests --yes\nRUN pip3 install numpy==1.15.4 Cython scipy tk-tools matplotlib==2.2.3 scikit-image opencv_python pydicom scikit-learn\nRUN apt-get install --no-install-recommends python3-tk --no-install-suggests --yes\nRUN pip3 uninstall -y h5py\nRUN apt-get install python3-h5py -y\nRUN pip3 install --upgrade tensorflow\nRUN pip3 install torch\nRUN pip3 install torchvision\nRUN pip3 install tensorboardx visdom\n#   for embedded python plot, we need agg backend\nRUN mkdir -p /root/.config/matplotlib \\\n && touch /root/.config/matplotlib/matplotlibrc\nRUN echo \"backend : agg\" >> /root/.config/matplotlib/matplotlibrc\n#   Compile boost\nRUN cd /opt \\\n && wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz \\\n && tar -xzvf boost_1_67_0.tar.gz \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh --with-python=/usr/bin/python3 --prefix=/usr \\\n && ./b2 -j$( nproc ;) address-model=64 stage \\\n && ./b2 install\n#   since cmake has problems to find python3 and boost-python3\nRUN ln -s /usr/lib/libboost_python35.so /usr/lib/libboost_python3.so\n#   Compile armadillo\nRUN cd /opt \\\n && wget http://sourceforge.net/projects/arma/files/armadillo-8.600.0.tar.xz \\\n && tar xvf armadillo-8.600.0.tar.xz \\\n && cd armadillo-8.600.0 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release ../ \\\n && make -j$( nproc ;) \\\n && make install\n#   fix the  qhull reentrant problem\n#   RUN pip uninstall -y scipy\n#  ZFP\nRUN cd /opt \\\n && git clone https://github.com/hansenms/ZFP.git \\\n && cd ZFP \\\n && mkdir lib \\\n && make \\\n && make shared \\\n && make -j $( nproc ;) install\n#   BART\nRUN cd /opt \\\n && git clone ${BART_URL} --branch ${BART_BRANCH} --single-branch \\\n && cd bart \\\n && mkdir build \\\n && cd build \\\n && cmake .. -DBART_FPIC=ON -DBART_ENABLE_MEM_CFL=ON -DBART_REDEFINE_PRINTF_FOR_TRACE=ON -DBART_LOG_BACKEND=ON -DBART_LOG_GADGETRON_BACKEND=ON \\\n && make -j $( nproc ;) \\\n && make install\n#  Set more environment variables in preparation for Gadgetron installation\nENV GADGETRON_HOME=\"/usr/local\" \\\n    ISMRMRD_HOME=\"/usr/local\"\nENV PATH=\"$PATH:/usr/local/cuda-9.2/bin;$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda-9.2/lib64:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64/stubs:${LIBRARY_PATH}\"\n#   Clean up packages.\n#  RUN  apt-get clean && \\\n#     rm -rf /var/lib/apt/lists/*\n","originalDockerfileUglifiedHash":"1ee623fb63034dd8cce2d70e89356bff","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/90f72a226b1daf0d9e73caac13712689f389ba14.dockerfile"}