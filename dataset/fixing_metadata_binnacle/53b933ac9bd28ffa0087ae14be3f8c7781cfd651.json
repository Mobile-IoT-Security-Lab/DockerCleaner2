{"seed":3923929722,"processedDockerfileHash":"10c5fc646305f96190be5111b6d562db","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\" AND UPDATED VIA openssl-gost\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM rnix/openssl-gost AS openssl-gost\nFROM debian:stretch-slim\nCOPY --from=openssl-gost /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl /usr/local/curl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\nCOPY --from=openssl-gost /usr/local/bin/gostsum /usr/local/bin/gostsum\nCOPY --from=openssl-gost /usr/local/bin/gost12sum /usr/local/bin/gost12sum\n#   pkgconfig is used to compile php\nCOPY --from=openssl-gost /usr/local/ssl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\nCOPY --from=openssl-gost /usr/local/curl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\n#   prevent Debian's PHP packages from being installed\n#   https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#   dependencies required for running \"phpize\"\n#   (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20230311 curl=7.88.1-7ubuntu1 xz-utils=5.4.1-0.2 $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.4\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libargon2-0-dev libedit-dev=3.1-20221030-2 libsodium-dev=1.0.18-1build2 libsqlite3-dev=3.40.1-1 libxml2-dev=2.9.14+dfsg-1.1build2 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd /usr/src/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl=/usr/local/curl --with-libedit --with-openssl --with-openssl-dir=/usr/local/ssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\n#  #</autogenerated>##\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\" AND UPDATED VIA openssl-gost\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM rnix/openssl-gost AS openssl-gost\nFROM debian:stretch-slim\nCOPY --from=openssl-gost /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl /usr/local/curl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\nCOPY --from=openssl-gost /usr/local/bin/gostsum /usr/local/bin/gostsum\nCOPY --from=openssl-gost /usr/local/bin/gost12sum /usr/local/bin/gost12sum\n#  pkgconfig is used to compile php\nCOPY --from=openssl-gost /usr/local/ssl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\nCOPY --from=openssl-gost /usr/local/curl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\n#  prevent Debian's PHP packages from being installed\n#  https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#  dependencies required for running \"phpize\"\n#  (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#  persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl xz-utils $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n# #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\n# #</autogenerated>##\n#  Apply stack smash protection to functions using local buffers and alloca()\n#  Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#  Enable optimization (-O2)\n#  Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#  Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#  https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.4\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libargon2-0-dev libedit-dev libsodium-dev libsqlite3-dev libxml2-dev zlib1g-dev ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd /usr/src/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl=/usr/local/curl --with-libedit --with-openssl --with-openssl-dir=/usr/local/ssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#  sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n# #<autogenerated>##\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\n# #</autogenerated>##\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\n","injectedSmells":[],"originalDockerfileHash":"5cc5b95a5db4aa09bfab5edfe9e26a7a","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\" AND UPDATED VIA openssl-gost\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM rnix/openssl-gost AS openssl-gost\nFROM debian:stretch-slim\nCOPY --from=openssl-gost /usr/local/ssl /usr/local/ssl\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl /usr/local/curl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\nCOPY --from=openssl-gost /usr/local/bin/gostsum /usr/local/bin/gostsum\nCOPY --from=openssl-gost /usr/local/bin/gost12sum /usr/local/bin/gost12sum\n#   pkgconfig is used to compile php\nCOPY --from=openssl-gost /usr/local/ssl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\nCOPY --from=openssl-gost /usr/local/curl/lib/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/\n#   prevent Debian's PHP packages from being installed\n#   https://github.com/docker-library/php/pull/542\nRUN set -eux ; { echo 'Package: php*' ;echo 'Pin: release *' ;echo 'Pin-Priority: -1' ; } > /etc/apt/preferences.d/no-debian-php\n#   dependencies required for running \"phpize\"\n#   (see persistent deps below)\nENV PHPIZE_DEPS=\"autoconf  dpkg-dev  file  g++  gcc  libc-dev  make  pkg-config  re2c\"\n#   persistent / runtime deps\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates curl xz-utils $PHPIZE_DEPS -y \\\n && rm -r /var/lib/apt/lists/*\nENV PHP_INI_DIR=\"/usr/local/etc/php\"\nRUN mkdir -p $PHP_INI_DIR/conf.d\n#  #<autogenerated>##\nENV PHP_EXTRA_CONFIGURE_ARGS=\"--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\"\n#  #</autogenerated>##\n#   Apply stack smash protection to functions using local buffers and alloca()\n#   Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)\n#   Enable optimization (-O2)\n#   Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)\n#   Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)\n#   https://github.com/docker-library/php/issues/272\nENV PHP_CFLAGS=\"-fstack-protector-strong -fpic -fpie -O2\"\nENV PHP_CPPFLAGS=\"$PHP_CFLAGS\"\nENV PHP_LDFLAGS=\"-Wl,-O1 -Wl,--hash-style=both -pie\"\nENV GPG_KEYS=\"1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F\"\nENV PHP_VERSION=\"7.2.4\"\nENV PHP_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz/from/this/mirror\" \\\n    PHP_ASC_URL=\"https://secure.php.net/get/php-7.2.4.tar.xz.asc/from/this/mirror\"\nENV PHP_SHA256=\"7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88\" \\\n    PHP_MD5=\"\"\nRUN set -xe ; fetchDeps=' wget ' ; if ! command -v gpg > /dev/null; then fetchDeps=\"$fetchDeps dirmngr gnupg \" ; fi ; apt-get update ; apt-get install --no-install-recommends $fetchDeps -y ; rm -rf /var/lib/apt/lists/* ; mkdir -p /usr/src ; cd /usr/src ; wget -O php.tar.xz \"$PHP_URL\" ; if [ -n \"$PHP_SHA256\" ] ; then echo \"$PHP_SHA256 *php.tar.xz\" | sha256sum -c - ; fi ; if [ -n \"$PHP_MD5\" ] ; then echo \"$PHP_MD5 *php.tar.xz\" | md5sum -c - ; fi ; if [ -n \"$PHP_ASC_URL\" ] ; then wget -O php.tar.xz.asc \"$PHP_ASC_URL\" ;export GNUPGHOME=\"$( mktemp -d ;)\" ;for key in $GPG_KEYS; do gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\" ; done ;gpg --batch --verify php.tar.xz.asc php.tar.xz ;rm -rf \"$GNUPGHOME\" ; fi ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $fetchDeps\nCOPY docker-php-source /usr/local/bin/\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends libargon2-0-dev libedit-dev libsodium-dev libsqlite3-dev libxml2-dev zlib1g-dev ${PHP_EXTRA_BUILD_DEPS:-} -y ; rm -rf /var/lib/apt/lists/* ; export CFLAGS=\"$PHP_CFLAGS\" CPPFLAGS=\"$PHP_CPPFLAGS\" LDFLAGS=\"$PHP_LDFLAGS\" ; docker-php-source extract ; cd /usr/src/php ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; debMultiarch=\"$( dpkg-architecture --query DEB_BUILD_MULTIARCH ;)\" ; if [ ! -d /usr/include/curl ] ; then ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl ; fi ; ./configure --build=\"$gnuArch\" --with-config-file-path=\"$PHP_INI_DIR\" --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\" --disable-cgi --enable-ftp --enable-mbstring --enable-mysqlnd --with-password-argon2 --with-sodium=shared --with-curl=/usr/local/curl --with-libedit --with-openssl --with-openssl-dir=/usr/local/ssl --with-zlib $( test \"$gnuArch\" = 's390x-linux-gnu' \\\n && echo '--without-pcre-jit' ;) --with-libdir=\"lib/$debMultiarch\" ${PHP_EXTRA_CONFIGURE_ARGS:-} ; make -j \"$( nproc ;)\" ; make install ; find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true ; make clean ; cd / ; docker-php-source delete ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ; find /usr/local -type f -executable -exec ldd '{}' ';' | awk '/=>/ { print $(NF-1) }' | sort -u | xargs -r dpkg-query --search | cut -d: -f1 | sort -u | xargs -r apt-mark manual ; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; php --version ; pecl update-channels ; rm -rf /tmp/pear ~/.pearrc\nCOPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/\n#   sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)\nRUN docker-php-ext-enable sodium\nENTRYPOINT [\"docker-php-entrypoint\"]\n#  #<autogenerated>##\nWORKDIR /var/www/html\nRUN set -ex \\\n && cd /usr/local/etc \\\n && if [ -d php-fpm.d ] ; then sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null;cp php-fpm.d/www.conf.default php-fpm.d/www.conf ; else mkdir php-fpm.d ;cp php-fpm.conf.default php-fpm.d/www.conf ;{ echo '[global]' ;echo 'include=etc/php-fpm.d/*.conf' ; } | tee php-fpm.conf ; fi \\\n && { echo '[global]' ;echo 'error_log = /proc/self/fd/2' ;echo ;echo '[www]' ;echo '; if we send this to /proc/self/fd/1, it never appears' ;echo 'access.log = /proc/self/fd/2' ;echo ;echo 'clear_env = no' ;echo ;echo '; Ensure worker stdout and stderr are sent to the main error log.' ;echo 'catch_workers_output = yes' ; } | tee php-fpm.d/docker.conf \\\n && { echo '[global]' ;echo 'daemonize = no' ;echo ;echo '[www]' ;echo 'listen = 9000' ; } | tee php-fpm.d/zz-docker.conf\nEXPOSE 9000/tcp\nCMD [\"php-fpm\"]\n#  #</autogenerated>##\nCOPY --from=openssl-gost /usr/local/ssl/bin/openssl /usr/bin/openssl\nCOPY --from=openssl-gost /usr/local/curl/bin/curl /usr/bin/curl\n","originalDockerfileUglifiedHash":"145e9fe64b0bd1687687f4910785dd9f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/53b933ac9bd28ffa0087ae14be3f8c7781cfd651.dockerfile"}