{"seed":3658821992,"processedDockerfileHash":"b78aec3edd75a7a63b19dafde57d72f2","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM intelpython/intelpython3_core AS TENSORFLOW\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk=8u362-ga-0ubuntu2 openjdk-8-jre-headless=8u362-ga-0ubuntu2 build-essential=12.9ubuntu3 curl=7.88.1-7ubuntu1 git=1:2.39.2-1ubuntu1 libcurl3-dev libfreetype6-dev=2.12.1+dfsg-4 libhdf5-serial-dev libpng-dev=1.6.39-2 libzmq3-dev=4.3.4-6 pkg-config=1.8.1-1ubuntu2 rsync=3.2.7-1 software-properties-common=0.99.35 unzip=6.0-27ubuntu1 zip=3.0-13 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 -y \\\n && apt-get clean\nRUN git clone -b r1.14 --depth 1 https://github.com/tensorflow/tensorflow\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.24.1\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nRUN cd tensorflow \\\n && bazel build tensorflow/tools/graph_transforms:summarize_graph\nFROM intelpython/intelpython3_core AS IE\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.71-3 automake=1:1.16.5-1.3 build-essential=12.9ubuntu3 ca-certificates=20230311 curl=7.88.1-7ubuntu1 git=1:2.39.2-1ubuntu1 gstreamer1.0-plugins-base=1.22.0-3 libavcodec-dev=7:5.1.2-3ubuntu1 libavformat-dev=7:5.1.2-3ubuntu1 libboost-regex-dev=1.74.0.3ubuntu7 libcairo2-dev=1.16.0-7 libgfortran3 libglib2.0-dev=2.76.0-1ubuntu1 libgstreamer1.0-0=1.22.0-2 libgtk2.0-dev=2.24.33-2ubuntu2 libopenblas-dev=0.3.21+ds-4 libpango1.0-dev=1.50.12+ds-1 libpng-dev=1.6.39-2 libssl-dev=3.0.8-1ubuntu1 libswscale-dev=7:5.1.2-3ubuntu1 libtool=2.4.7-5 libusb-1.0-0-dev=2:1.0.26-1 pkg-config=1.8.1-1ubuntu2 unzip=6.0-27ubuntu1 vim=2:9.0.1000-4ubuntu2 wget=1.21.3-1ubuntu1 -y\nRUN wget https://cmake.org/files/v3.14/cmake-3.14.3.tar.gz \\\n && tar -xvzf cmake-3.14.3.tar.gz \\\n && cd cmake-3.14.3/ \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install\nRUN echo \"deb http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install --no-install-recommends g++-4.9 -y\nENV CXX=\"/usr/bin/g++-4.9\"\nRUN pip install cython==0.29.34 numpy==1.24.2\nARG DLDT_DIR=/dldt-2019_R1.0.1\nRUN git clone --depth=1 -b 2019_R1.0.1 https://github.com/opencv/dldt.git ${DLDT_DIR} \\\n && cd ${DLDT_DIR} \\\n && git submodule init \\\n && git submodule update --recursive \\\n && rm -Rf .git \\\n && rm -Rf model-optimizer\nWORKDIR ${DLDT_DIR}\nRUN curl -L https://github.com/intel/mkl-dnn/releases/download/v0.18/mklml_lnx_2019.0.3.20190220.tgz | tar -xz\nWORKDIR ${DLDT_DIR}/inference-engine/build\nRUN cmake -DGEMM=MKL -DMKLROOT=${DLDT_DIR}/mklml_lnx_2019.0.3.20190220 -DENABLE_MKL_DNN=ON -DTHREADING=OMP -DCMAKE_BUILD_TYPE=Release ..\nRUN make -j$( nproc ;)\nWORKDIR ${DLDT_DIR}/inference-engine/ie_bridges/python/build\nRUN cmake -DInferenceEngine_DIR=${DLDT_DIR}/inference-engine/build -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m ${DLDT_DIR}/inference-engine/ie_bridges/python \\\n && make -j$( nproc ;)\nFROM intelpython/intelpython3_core AS FINAL\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.88.1-7ubuntu1 ca-certificates=20230311 python3-pip=23.0.1+dfsg-1 gcc=4:12.2.0-3ubuntu1 python-setuptools python3-setuptools=66.1.1-1 libgfortran3 unzip=6.0-27ubuntu1 vim=2:9.0.1000-4ubuntu2 -y \\\n && apt-get clean\nRUN curl -L -o 2019_R1.0.1.tar.gz https://github.com/opencv/dldt/archive/2019_R1.0.1.tar.gz \\\n && tar -zxf 2019_R1.0.1.tar.gz \\\n && rm 2019_R1.0.1.tar.gz \\\n && rm -Rf dldt-2019_R1.0.1/inference-engine\nWORKDIR dldt-2019_R1.0.1/model-optimizer\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\nRUN pip install pip==23.1 setuptools==67.6.1 --upgrade\nRUN pip install -r requirements.txt\nRUN curl -L -o google-cloud-sdk.zip https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip -qq google-cloud-sdk.zip -d tools \\\n && rm google-cloud-sdk.zip \\\n && tools/google-cloud-sdk/install.sh --usage-reporting=false --path-update=true --bash-completion=false --disable-installation-options \\\n && tools/google-cloud-sdk/bin/gcloud -q components update gcloud core gsutil \\\n && tools/google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true \\\n && touch tools/google-cloud-sdk/lib/third_party/google.py \\\n && pip install crcmod==1.7 -U\nENV PATH=\"${PATH}:/dldt-2019_R1.0.1/model-optimizer:/dldt-2019_R1.0.1/model-optimizer/tools/google-cloud-sdk/bin\"\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/bin/intel64/Release/lib/*.so /usr/local/lib/\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/ie_bridges/python/bin/intel64/Release/python_api/python3.6/openvino/ /usr/local/lib/openvino/\nCOPY --from=IE /dldt-2019_R1.0.1/mklml_lnx_2019.0.3.20190220/lib/lib*.so /usr/local/lib/\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nWORKDIR /slim\nRUN git clone --depth 1 https://github.com/tensorflow/models \\\n && rm -Rf models/.git \\\n && git clone --depth 1 -b r1.14 https://github.com/tensorflow/tensorflow \\\n && rm -Rf tensorflow/.git\nENV PYTHONPATH=\"/usr/local/lib:/slim/models/research/slim:/slim/tensorflow/python/tools\"\nCOPY --from=TENSORFLOW /tensorflow/bazel-bin/tensorflow/tools/graph_transforms/summarize_graph /usr/bin/summarize_graph\nCOPY --from=TENSORFLOW /root/.cache/bazel/_bazel_root/*/execroot/org_tensorflow/bazel-out/k8-opt/bin/_solib_k8/_U_S_Stensorflow_Stools_Sgraph_Utransforms_Csummarize_Ugraph___Utensorflow/libtensorflow_framework.so.1 /usr/local/lib/libtensorflow_framework.so.1\nWORKDIR /scripts\nCOPY classes.py convert_model.py predict.py slim_model.py requirements.txt ./\nRUN pip install -r requirements.txt\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM intelpython/intelpython3_core AS TENSORFLOW\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless build-essential curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng-dev libzmq3-dev pkg-config rsync software-properties-common unzip zip zlib1g-dev -y \\\n && apt-get clean\nRUN git clone -b r1.14 --depth 1 https://github.com/tensorflow/tensorflow\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.24.1\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nRUN cd tensorflow \\\n && bazel build tensorflow/tools/graph_transforms:summarize_graph\nFROM intelpython/intelpython3_core AS IE\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential ca-certificates curl git gstreamer1.0-plugins-base libavcodec-dev libavformat-dev libboost-regex-dev libcairo2-dev libgfortran3 libglib2.0-dev libgstreamer1.0-0 libgtk2.0-dev libopenblas-dev libpango1.0-dev libpng-dev libssl-dev libswscale-dev libtool libusb-1.0-0-dev pkg-config unzip vim wget -y\nRUN wget https://cmake.org/files/v3.14/cmake-3.14.3.tar.gz \\\n && tar -xvzf cmake-3.14.3.tar.gz \\\n && cd cmake-3.14.3/ \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install\nRUN echo \"deb http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install g++-4.9 -y\nENV CXX=\"/usr/bin/g++-4.9\"\nRUN pip install cython numpy\nARG DLDT_DIR=/dldt-2019_R1.0.1\nRUN git clone --depth=1 -b 2019_R1.0.1 https://github.com/opencv/dldt.git ${DLDT_DIR} \\\n && cd ${DLDT_DIR} \\\n && git submodule init \\\n && git submodule update --recursive \\\n && rm -Rf .git \\\n && rm -Rf model-optimizer\nWORKDIR ${DLDT_DIR}\nRUN curl -L https://github.com/intel/mkl-dnn/releases/download/v0.18/mklml_lnx_2019.0.3.20190220.tgz | tar -xz\nWORKDIR ${DLDT_DIR}/inference-engine/build\nRUN cmake -DGEMM=MKL -DMKLROOT=${DLDT_DIR}/mklml_lnx_2019.0.3.20190220 -DENABLE_MKL_DNN=ON -DTHREADING=OMP -DCMAKE_BUILD_TYPE=Release ..\nRUN make -j$( nproc ;)\nWORKDIR ${DLDT_DIR}/inference-engine/ie_bridges/python/build\nRUN cmake -DInferenceEngine_DIR=${DLDT_DIR}/inference-engine/build -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m ${DLDT_DIR}/inference-engine/ie_bridges/python \\\n && make -j$( nproc ;)\nFROM intelpython/intelpython3_core AS FINAL\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl ca-certificates python3-pip gcc python-setuptools python3-setuptools libgfortran3 unzip vim -y \\\n && apt-get clean\nRUN curl -L -o 2019_R1.0.1.tar.gz https://github.com/opencv/dldt/archive/2019_R1.0.1.tar.gz \\\n && tar -zxf 2019_R1.0.1.tar.gz \\\n && rm 2019_R1.0.1.tar.gz \\\n && rm -Rf dldt-2019_R1.0.1/inference-engine\nWORKDIR dldt-2019_R1.0.1/model-optimizer\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\nRUN pip install pip setuptools --upgrade\nRUN pip install -r requirements.txt\nRUN curl -L -o google-cloud-sdk.zip https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip -qq google-cloud-sdk.zip -d tools \\\n && rm google-cloud-sdk.zip \\\n && tools/google-cloud-sdk/install.sh --usage-reporting=false --path-update=true --bash-completion=false --disable-installation-options \\\n && tools/google-cloud-sdk/bin/gcloud -q components update gcloud core gsutil \\\n && tools/google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true \\\n && touch tools/google-cloud-sdk/lib/third_party/google.py \\\n && pip install crcmod -U\nENV PATH=\"${PATH}:/dldt-2019_R1.0.1/model-optimizer:/dldt-2019_R1.0.1/model-optimizer/tools/google-cloud-sdk/bin\"\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/bin/intel64/Release/lib/*.so /usr/local/lib/\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/ie_bridges/python/bin/intel64/Release/python_api/python3.6/openvino/ /usr/local/lib/openvino/\nCOPY --from=IE /dldt-2019_R1.0.1/mklml_lnx_2019.0.3.20190220/lib/lib*.so /usr/local/lib/\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nWORKDIR /slim\nRUN git clone --depth 1 https://github.com/tensorflow/models \\\n && rm -Rf models/.git \\\n && git clone --depth 1 -b r1.14 https://github.com/tensorflow/tensorflow \\\n && rm -Rf tensorflow/.git\nENV PYTHONPATH=\"/usr/local/lib:/slim/models/research/slim:/slim/tensorflow/python/tools\"\nCOPY --from=TENSORFLOW /tensorflow/bazel-bin/tensorflow/tools/graph_transforms/summarize_graph /usr/bin/summarize_graph\nCOPY --from=TENSORFLOW /root/.cache/bazel/_bazel_root/*/execroot/org_tensorflow/bazel-out/k8-opt/bin/_solib_k8/_U_S_Stensorflow_Stools_Sgraph_Utransforms_Csummarize_Ugraph___Utensorflow/libtensorflow_framework.so.1 /usr/local/lib/libtensorflow_framework.so.1\nWORKDIR /scripts\nCOPY classes.py convert_model.py predict.py slim_model.py requirements.txt ./\nRUN pip install -r requirements.txt\n","injectedSmells":[],"originalDockerfileHash":"28919097000700086096205bda153168","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM intelpython/intelpython3_core AS TENSORFLOW\nRUN apt-get update \\\n && apt-get install --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless build-essential curl git libcurl3-dev libfreetype6-dev libhdf5-serial-dev libpng-dev libzmq3-dev pkg-config rsync software-properties-common unzip zip zlib1g-dev -y \\\n && apt-get clean\nRUN git clone -b r1.14 --depth 1 https://github.com/tensorflow/tensorflow\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.24.1\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\nRUN cd tensorflow \\\n && bazel build tensorflow/tools/graph_transforms:summarize_graph\nFROM intelpython/intelpython3_core AS IE\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential ca-certificates curl git gstreamer1.0-plugins-base libavcodec-dev libavformat-dev libboost-regex-dev libcairo2-dev libgfortran3 libglib2.0-dev libgstreamer1.0-0 libgtk2.0-dev libopenblas-dev libpango1.0-dev libpng-dev libssl-dev libswscale-dev libtool libusb-1.0-0-dev pkg-config unzip vim wget -y\nRUN wget https://cmake.org/files/v3.14/cmake-3.14.3.tar.gz \\\n && tar -xvzf cmake-3.14.3.tar.gz \\\n && cd cmake-3.14.3/ \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install\nRUN echo \"deb http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && echo \"deb-src http://ftp.us.debian.org/debian/ jessie main contrib non-free\" >> /etc/apt/sources.list \\\n && apt-get update \\\n && apt-get install g++-4.9 -y\nENV CXX=\"/usr/bin/g++-4.9\"\nRUN pip install cython numpy\nARG DLDT_DIR=/dldt-2019_R1.0.1\nRUN git clone --depth=1 -b 2019_R1.0.1 https://github.com/opencv/dldt.git ${DLDT_DIR} \\\n && cd ${DLDT_DIR} \\\n && git submodule init \\\n && git submodule update --recursive \\\n && rm -Rf .git \\\n && rm -Rf model-optimizer\nWORKDIR ${DLDT_DIR}\nRUN curl -L https://github.com/intel/mkl-dnn/releases/download/v0.18/mklml_lnx_2019.0.3.20190220.tgz | tar -xz\nWORKDIR ${DLDT_DIR}/inference-engine/build\nRUN cmake -DGEMM=MKL -DMKLROOT=${DLDT_DIR}/mklml_lnx_2019.0.3.20190220 -DENABLE_MKL_DNN=ON -DTHREADING=OMP -DCMAKE_BUILD_TYPE=Release ..\nRUN make -j$( nproc ;)\nWORKDIR ${DLDT_DIR}/inference-engine/ie_bridges/python/build\nRUN cmake -DInferenceEngine_DIR=${DLDT_DIR}/inference-engine/build -DPYTHON_EXECUTABLE=$( which python ;) -DPYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m ${DLDT_DIR}/inference-engine/ie_bridges/python \\\n && make -j$( nproc ;)\nFROM intelpython/intelpython3_core AS FINAL\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl ca-certificates python3-pip gcc python-setuptools python3-setuptools libgfortran3 unzip vim -y \\\n && apt-get clean\nRUN curl -L -o 2019_R1.0.1.tar.gz https://github.com/opencv/dldt/archive/2019_R1.0.1.tar.gz \\\n && tar -zxf 2019_R1.0.1.tar.gz \\\n && rm 2019_R1.0.1.tar.gz \\\n && rm -Rf dldt-2019_R1.0.1/inference-engine\nWORKDIR dldt-2019_R1.0.1/model-optimizer\nRUN conda create --name myenv -y\nENV PATH=\"/opt/conda/envs/myenv/bin:$PATH\"\nRUN pip install pip setuptools --upgrade\nRUN pip install -r requirements.txt\nRUN curl -L -o google-cloud-sdk.zip https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip \\\n && unzip -qq google-cloud-sdk.zip -d tools \\\n && rm google-cloud-sdk.zip \\\n && tools/google-cloud-sdk/install.sh --usage-reporting=false --path-update=true --bash-completion=false --disable-installation-options \\\n && tools/google-cloud-sdk/bin/gcloud -q components update gcloud core gsutil \\\n && tools/google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true \\\n && touch tools/google-cloud-sdk/lib/third_party/google.py \\\n && pip install crcmod -U\nENV PATH=\"${PATH}:/dldt-2019_R1.0.1/model-optimizer:/dldt-2019_R1.0.1/model-optimizer/tools/google-cloud-sdk/bin\"\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/bin/intel64/Release/lib/*.so /usr/local/lib/\nCOPY --from=IE /dldt-2019_R1.0.1/inference-engine/ie_bridges/python/bin/intel64/Release/python_api/python3.6/openvino/ /usr/local/lib/openvino/\nCOPY --from=IE /dldt-2019_R1.0.1/mklml_lnx_2019.0.3.20190220/lib/lib*.so /usr/local/lib/\nENV LD_LIBRARY_PATH=\"/usr/local/lib\"\nWORKDIR /slim\nRUN git clone --depth 1 https://github.com/tensorflow/models \\\n && rm -Rf models/.git \\\n && git clone --depth 1 -b r1.14 https://github.com/tensorflow/tensorflow \\\n && rm -Rf tensorflow/.git\nENV PYTHONPATH=\"/usr/local/lib:/slim/models/research/slim:/slim/tensorflow/python/tools\"\nCOPY --from=TENSORFLOW /tensorflow/bazel-bin/tensorflow/tools/graph_transforms/summarize_graph /usr/bin/summarize_graph\nCOPY --from=TENSORFLOW /root/.cache/bazel/_bazel_root/*/execroot/org_tensorflow/bazel-out/k8-opt/bin/_solib_k8/_U_S_Stensorflow_Stools_Sgraph_Utransforms_Csummarize_Ugraph___Utensorflow/libtensorflow_framework.so.1 /usr/local/lib/libtensorflow_framework.so.1\nWORKDIR /scripts\nCOPY classes.py convert_model.py predict.py slim_model.py requirements.txt ./\nRUN pip install -r requirements.txt\n","originalDockerfileUglifiedHash":"1c1a58c02c5e85ba0caacd448e039583","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/58a453e5b320901fea421ee178e0a3cdd38aa7e1.dockerfile"}