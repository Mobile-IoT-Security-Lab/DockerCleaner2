{"seed":4145954350,"processedDockerfileHash":"8f3e9ccd4d6df17020a081ede83f5a9f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ppc64le/centos:centos7\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN yum -y update \\\n && yum -y install alsa-lib-devel bind-utils bison bzip2 ca-certificates cups-devel cpio curl-devel `` elfutils-libelf-devel expat-devel `` file-devel file-libs flex fontconfig fontconfig-devel freetype-devel gettext gettext-devel `` glibc glibc-common glibc-devel gmp-devel lbzip2 libdwarf libstdc++-static libX11-devel libXext-devel libXi-devel libXrandr-devel libXrender-devel libXt-devel libXtst-devel mesa-libGL-devel mpfr-devel numactl-devel ntp openssl-devel `` openssh-server openssh-clients perl-CPAN perl-DBI perl-devel perl-ExtUtils-MakeMaker `` perl-GD perl-libwww-perl perl-Time-HiRes unzip vim wget xorg-x11-server-Xvfb xz zip zlib-devel `` libdwarf-devel \\\n && yum clean all\n#   Install autoconf version 2.69\nRUN cd /usr/src/ \\\n && wget https://fossies.org/linux/misc/autoconf-2.69.tar.gz \\\n && tar -xzf autoconf-2.69.tar.gz \\\n && rm -f autoconf-2.69.tar.gz \\\n && cd autoconf-2.69 \\\n && ./configure --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/autoconf-2.69\n#   Install GCC-7.3.1\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc730+ccache.ppc64le.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/cc \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/gcc \\\n && ln -s /usr/local/bin/g++-7.3 /usr/bin/g++\n#   Edit ldconfig to connect this library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#   Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#   Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n#  Building and setting up git version 2.5.3\nRUN cd /usr/src \\\n && wget https://www.kernel.org/pub/software/scm/git/git-2.5.3.tar.gz \\\n && tar xzf git-2.5.3.tar.gz \\\n && rm git-2.5.3.tar.gz \\\n && cd git-2.5.3 \\\n && make prefix=/usr/local all \\\n && make prefix=/usr/local install \\\n && cd .. \\\n && rm -rf /usr/src/git-2.5.3\n#   Install ant version 1.10.5.\nRUN wget http://www.us.apache.org/dist/ant/binaries/apache-ant-1.10.5-bin.tar.gz \\\n && tar xvfz apache-ant-1.10.5-bin.tar.gz -C /opt \\\n && rm apache-ant-1.10.5-bin.tar.gz \\\n && ln -s /opt/apache-ant-1.10.5 /opt/ant \\\n && ln -s /opt/ant/bin/ant /usr/bin/ant \\\n && cd /opt/ant/lib \\\n && wget https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\n && tar xfvz ant-contrib-1.0b3-bin.tar.gz -C . \\\n && rm ant-contrib-1.0b3-bin.tar.gz \\\n && cd ant-contrib \\\n && mv ant-contrib-1.0b3.jar .. \\\n && cd .. \\\n && rm -rf ant-contrib\n#   Install Cuda version 7.5.18\nRUN cd /usr/src/ \\\n && wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run \\\n && chmod +x cuda_7.5.18_linux.run \\\n && /usr/src/cuda_7.5.18_linux.run --silent --toolkit --override \\\n && rm -f /usr/src/cuda_7.5.18_linux.run\n#   add user home/jenkins\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#   Install make 4.1 so can compile on java 8\nRUN cd /tmp \\\n && wget -O make-4.1.tar.gz \"http://ftp.gnu.org/gnu/make/make-4.1.tar.gz\" \\\n && tar xvf make-4.1.tar.gz \\\n && rm -f make-4.1.tar.gz \\\n && cd make-4.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -f /usr/local/bin/gmake \\\n && ln -s /usr/local/bin/make /usr/local/bin/gmake \\\n && cd .. \\\n && rm -rf /tmp/make-4.1\n#   Setup boot JDK for building Java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#   Allow jenkins to find JDK8\nRUN ln -s /usr/lib/jvm/adoptojdk-java-80/bin/java /usr/bin/java\n#   Setup boot JDK for building Java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#   Setup boot JDK for building Java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#   Install Freemaker for building OpenJ9. Used in bash ./configure --with-freemarker-jar=<path-to-freemaker-jar>\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#   Install Curl version 7.29.0.\nRUN cd /usr/src \\\n && wget http://curl.haxx.se/download/curl-7.29.0.tar.bz2 \\\n && tar xfj curl-7.29.0.tar.bz2 \\\n && rm -f curl-7.29.0.tar.bz2 \\\n && cd curl-7.29.0 \\\n && ./configure --prefix=/usr/local --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/curl-7.29.0\n#   Install Python3 v3.7.3\nRUN yum -y update \\\n && yum -y install zlib-devel libffi-devel \\\n && yum clean all \\\n && cd /tmp \\\n && wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz \\\n && tar -xJf Python-3.7.3.tar.xz \\\n && rm -f Python-3.7.3.tar.xz \\\n && cd /tmp/Python-3.7.3 \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf Python-3.7.3\n#   Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#   set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Expose SSH port and run SSHD\nEXPOSE 22/tcp\n#   Generate ssh host keys\nRUN /usr/bin/ssh-keygen -A\n#   Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#  This program and the accompanying materials are made available under\n#  the terms of the Eclipse Public License 2.0 which accompanies this\n#  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#  or the Apache License, Version 2.0 which accompanies this distribution and\n#  is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#  This Source Code may also be made available under the following\n#  Secondary Licenses when the conditions for such availability set\n#  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#  General Public License, version 2 with the GNU Classpath\n#  Exception [1] and GNU General Public License, version 2 with the\n#  OpenJDK Assembly Exception [2].\n#\n#  [1] https://www.gnu.org/software/classpath/license.html\n#  [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#  To use this docker file:\n#  First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#  Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#  This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#  Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#  Then run:\n#    docker build -t openj9 -f Dockerfile .\n#    docker run -it openj9\nFROM ppc64le/centos:centos7\n#  Install required OS tools\nENV USER=\"jenkins\"\nRUN yum -y update \\\n && yum -y install alsa-lib-devel bind-utils bison bzip2 ca-certificates cups-devel cpio curl-devel `` elfutils-libelf-devel expat-devel `` file-devel file-libs flex fontconfig fontconfig-devel freetype-devel gettext gettext-devel `` glibc glibc-common glibc-devel gmp-devel lbzip2 libdwarf libstdc++-static libX11-devel libXext-devel libXi-devel libXrandr-devel libXrender-devel libXt-devel libXtst-devel mesa-libGL-devel mpfr-devel numactl-devel ntp openssl-devel `` openssh-server openssh-clients perl-CPAN perl-DBI perl-devel perl-ExtUtils-MakeMaker `` perl-GD perl-libwww-perl perl-Time-HiRes unzip vim wget xorg-x11-server-Xvfb xz zip zlib-devel `` libdwarf-devel \\\n && yum clean all\n#  Install autoconf version 2.69\nRUN cd /usr/src/ \\\n && wget https://fossies.org/linux/misc/autoconf-2.69.tar.gz \\\n && tar -xzf autoconf-2.69.tar.gz \\\n && rm -f autoconf-2.69.tar.gz \\\n && cd autoconf-2.69 \\\n && ./configure --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/autoconf-2.69\n#  Install GCC-7.3.1\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc730+ccache.ppc64le.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/cc \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/gcc \\\n && ln -s /usr/local/bin/g++-7.3 /usr/bin/g++\n#  Edit ldconfig to connect this library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#  Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#  Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n# Building and setting up git version 2.5.3\nRUN cd /usr/src \\\n && wget https://www.kernel.org/pub/software/scm/git/git-2.5.3.tar.gz \\\n && tar xzf git-2.5.3.tar.gz \\\n && rm git-2.5.3.tar.gz \\\n && cd git-2.5.3 \\\n && make prefix=/usr/local all \\\n && make prefix=/usr/local install \\\n && cd .. \\\n && rm -rf /usr/src/git-2.5.3\n#  Install ant version 1.10.5.\nRUN wget http://www.us.apache.org/dist/ant/binaries/apache-ant-1.10.5-bin.tar.gz \\\n && tar xvfz apache-ant-1.10.5-bin.tar.gz -C /opt \\\n && rm apache-ant-1.10.5-bin.tar.gz \\\n && ln -s /opt/apache-ant-1.10.5 /opt/ant \\\n && ln -s /opt/ant/bin/ant /usr/bin/ant \\\n && cd /opt/ant/lib \\\n && wget https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\n && tar xfvz ant-contrib-1.0b3-bin.tar.gz -C . \\\n && rm ant-contrib-1.0b3-bin.tar.gz \\\n && cd ant-contrib \\\n && mv ant-contrib-1.0b3.jar .. \\\n && cd .. \\\n && rm -rf ant-contrib\n#  Install Cuda version 7.5.18\nRUN cd /usr/src/ \\\n && wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run \\\n && chmod +x cuda_7.5.18_linux.run \\\n && /usr/src/cuda_7.5.18_linux.run --silent --toolkit --override \\\n && rm -f /usr/src/cuda_7.5.18_linux.run\n#  add user home/jenkins\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#  Install make 4.1 so can compile on java 8\nRUN cd /tmp \\\n && wget -O make-4.1.tar.gz \"http://ftp.gnu.org/gnu/make/make-4.1.tar.gz\" \\\n && tar xvf make-4.1.tar.gz \\\n && rm -f make-4.1.tar.gz \\\n && cd make-4.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -f /usr/local/bin/gmake \\\n && ln -s /usr/local/bin/make /usr/local/bin/gmake \\\n && cd .. \\\n && rm -rf /tmp/make-4.1\n#  Setup boot JDK for building Java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#  Allow jenkins to find JDK8\nRUN ln -s /usr/lib/jvm/adoptojdk-java-80/bin/java /usr/bin/java\n#  Setup boot JDK for building Java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#  Setup boot JDK for building Java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#  Install Freemaker for building OpenJ9. Used in bash ./configure --with-freemarker-jar=<path-to-freemaker-jar>\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#  Install Curl version 7.29.0.\nRUN cd /usr/src \\\n && wget http://curl.haxx.se/download/curl-7.29.0.tar.bz2 \\\n && tar xfj curl-7.29.0.tar.bz2 \\\n && rm -f curl-7.29.0.tar.bz2 \\\n && cd curl-7.29.0 \\\n && ./configure --prefix=/usr/local --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/curl-7.29.0\n#  Install Python3 v3.7.3\nRUN yum -y update \\\n && yum -y install zlib-devel libffi-devel \\\n && yum clean all \\\n && cd /tmp \\\n && wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz \\\n && tar -xJf Python-3.7.3.tar.xz \\\n && rm -f Python-3.7.3.tar.xz \\\n && cd /tmp/Python-3.7.3 \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf Python-3.7.3\n#  Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#  set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#  SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#  Expose SSH port and run SSHD\nEXPOSE 22/tcp\n#  Generate ssh host keys\nRUN /usr/bin/ssh-keygen -A\n#  Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\n","injectedSmells":[],"originalDockerfileHash":"1b296097f0747d3fa90d7340f71e3e2e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ppc64le/centos:centos7\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN yum -y update \\\n && yum -y install alsa-lib-devel bind-utils bison bzip2 ca-certificates cups-devel cpio curl-devel `` elfutils-libelf-devel expat-devel `` file-devel file-libs flex fontconfig fontconfig-devel freetype-devel gettext gettext-devel `` glibc glibc-common glibc-devel gmp-devel lbzip2 libdwarf libstdc++-static libX11-devel libXext-devel libXi-devel libXrandr-devel libXrender-devel libXt-devel libXtst-devel mesa-libGL-devel mpfr-devel numactl-devel ntp openssl-devel `` openssh-server openssh-clients perl-CPAN perl-DBI perl-devel perl-ExtUtils-MakeMaker `` perl-GD perl-libwww-perl perl-Time-HiRes unzip vim wget xorg-x11-server-Xvfb xz zip zlib-devel `` libdwarf-devel \\\n && yum clean all\n#   Install autoconf version 2.69\nRUN cd /usr/src/ \\\n && wget https://fossies.org/linux/misc/autoconf-2.69.tar.gz \\\n && tar -xzf autoconf-2.69.tar.gz \\\n && rm -f autoconf-2.69.tar.gz \\\n && cd autoconf-2.69 \\\n && ./configure --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/autoconf-2.69\n#   Install GCC-7.3.1\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc730+ccache.ppc64le.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/cc \\\n && ln -s /usr/local/bin/gcc-7.3 /usr/bin/gcc \\\n && ln -s /usr/local/bin/g++-7.3 /usr/bin/g++\n#   Edit ldconfig to connect this library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#   Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#   Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n#  Building and setting up git version 2.5.3\nRUN cd /usr/src \\\n && wget https://www.kernel.org/pub/software/scm/git/git-2.5.3.tar.gz \\\n && tar xzf git-2.5.3.tar.gz \\\n && rm git-2.5.3.tar.gz \\\n && cd git-2.5.3 \\\n && make prefix=/usr/local all \\\n && make prefix=/usr/local install \\\n && cd .. \\\n && rm -rf /usr/src/git-2.5.3\n#   Install ant version 1.10.5.\nRUN wget http://www.us.apache.org/dist/ant/binaries/apache-ant-1.10.5-bin.tar.gz \\\n && tar xvfz apache-ant-1.10.5-bin.tar.gz -C /opt \\\n && rm apache-ant-1.10.5-bin.tar.gz \\\n && ln -s /opt/apache-ant-1.10.5 /opt/ant \\\n && ln -s /opt/ant/bin/ant /usr/bin/ant \\\n && cd /opt/ant/lib \\\n && wget https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz \\\n && tar xfvz ant-contrib-1.0b3-bin.tar.gz -C . \\\n && rm ant-contrib-1.0b3-bin.tar.gz \\\n && cd ant-contrib \\\n && mv ant-contrib-1.0b3.jar .. \\\n && cd .. \\\n && rm -rf ant-contrib\n#   Install Cuda version 7.5.18\nRUN cd /usr/src/ \\\n && wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run \\\n && chmod +x cuda_7.5.18_linux.run \\\n && /usr/src/cuda_7.5.18_linux.run --silent --toolkit --override \\\n && rm -f /usr/src/cuda_7.5.18_linux.run\n#   add user home/jenkins\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts\n#   Install make 4.1 so can compile on java 8\nRUN cd /tmp \\\n && wget -O make-4.1.tar.gz \"http://ftp.gnu.org/gnu/make/make-4.1.tar.gz\" \\\n && tar xvf make-4.1.tar.gz \\\n && rm -f make-4.1.tar.gz \\\n && cd make-4.1/ \\\n && ./configure \\\n && make \\\n && make install \\\n && rm -f /usr/local/bin/gmake \\\n && ln -s /usr/local/bin/make /usr/local/bin/gmake \\\n && cd .. \\\n && rm -rf /tmp/make-4.1\n#   Setup boot JDK for building Java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#   Allow jenkins to find JDK8\nRUN ln -s /usr/lib/jvm/adoptojdk-java-80/bin/java /usr/bin/java\n#   Setup boot JDK for building Java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#   Setup boot JDK for building Java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=ppc64le&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#   Install Freemaker for building OpenJ9. Used in bash ./configure --with-freemarker-jar=<path-to-freemaker-jar>\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#   Install Curl version 7.29.0.\nRUN cd /usr/src \\\n && wget http://curl.haxx.se/download/curl-7.29.0.tar.bz2 \\\n && tar xfj curl-7.29.0.tar.bz2 \\\n && rm -f curl-7.29.0.tar.bz2 \\\n && cd curl-7.29.0 \\\n && ./configure --prefix=/usr/local --build=$( rpm --eval %{_host} ;) \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf /usr/src/curl-7.29.0\n#   Install Python3 v3.7.3\nRUN yum -y update \\\n && yum -y install zlib-devel libffi-devel \\\n && yum clean all \\\n && cd /tmp \\\n && wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz \\\n && tar -xJf Python-3.7.3.tar.xz \\\n && rm -f Python-3.7.3.tar.xz \\\n && cd /tmp/Python-3.7.3 \\\n && ./configure --prefix=/usr/local \\\n && make \\\n && make install \\\n && cd .. \\\n && rm -rf Python-3.7.3\n#   Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#   set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Expose SSH port and run SSHD\nEXPOSE 22/tcp\n#   Generate ssh host keys\nRUN /usr/bin/ssh-keygen -A\n#   Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\n","originalDockerfileUglifiedHash":"25e5a7d94c35d91e71ca9ad6cf78b3fd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e127b428df5e4abeca0e9e342ee783e62b090f40.dockerfile"}