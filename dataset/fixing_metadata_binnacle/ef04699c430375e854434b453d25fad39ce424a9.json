{"seed":3119722407,"processedDockerfileHash":"dffe1d71a3b04e412ebe7f30cf952648","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ##################################\n#   PK (Proxy kernel) builder image #\n#  ##################################\nFROM ubuntu:18.10 AS pkbuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build pk\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates gcc-riscv64-linux-gnu git libc-dev-riscv64-cross make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-pk\n#   set build flags compatible with Ubuntu's riscv64-* build flags,\n#   otherwise compilation fails with linker errors related to stack protection\n#   also, use multiple cores to speed up compilation\nENV CFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    CPPFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    MAKEFLAGS=\"-j4\"\n#   build proxy kernel\n#   note that at the end, we move the compiled binaries from riscv64-linux-gnu to riscv64-unknown-elf,\n#   because when running the proxy kernel with 'spike pk', it looks at that path by default\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-pk/build \\\n && cd riscv-pk/build \\\n && ../configure --prefix=$RISCV --host=riscv64-linux-gnu \\\n && make \\\n && make install \\\n && mv $RISCV/riscv64-linux-gnu $RISCV/riscv64-unknown-elf\n#  ######################################\n#   Spike (ISA simulator) builder image #\n#  ######################################\nFROM ubuntu:18.04 AS spikebuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build RISC-V spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates device-tree-compiler g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-isa-sim.git\n#   use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#   build spike ISA simulator\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-isa-sim/build \\\n && cd riscv-isa-sim/build \\\n && ../configure --prefix=$RISCV \\\n && make \\\n && make install\n#  #####################\n#   QEMU builder image #\n#  #####################\nFROM ubuntu:18.10 AS qemubuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install statically linked QEMU (so it's easier to move it to another image)\nRUN apt-get update \\\n && apt-get install --no-install-recommends qemu-user-static -y \\\n && rm -rf /var/lib/apt/lists/*\n#   copy QEMU RISC-V statically linked binary to common output folder\nRUN mkdir -p $RISCV/bin \\\n && cp /usr/bin/qemu-riscv64-static $RISCV/bin\n#  #######################################\n#   Boolector (SMT solver) builder image #\n#  #######################################\nFROM ubuntu:18.04 AS boolectorbuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build boolector\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/Boolector/boolector\n#   use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#   build boolector and dependencies\nRUN mkdir -p $RISCV \\\n && cd boolector \\\n && ./contrib/setup-lingeling.sh \\\n && ./contrib/setup-btor2tools.sh \\\n && ./configure.sh --prefix $RISCV \\\n && cd build \\\n && make \\\n && make install\n#  #################################\n#   Selfie interactive final image #\n#  #################################\nFROM ubuntu:18.04\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install git and basic build tools (gcc, make) for working with selfie,\n#   and device-tree-compiler which is required for spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates gcc-riscv64-linux-gnu libc-dev-riscv64-cross make device-tree-compiler git python3.6 -y \\\n && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 \\\n && rm -rf /var/lib/apt/lists/*\n#   copy spike, pk, qemu and boolector from builder images\nCOPY --from=pkbuilder $RISCV/ $RISCV/\nCOPY --from=spikebuilder $RISCV/ $RISCV/\nCOPY --from=qemubuilder $RISCV/ $RISCV/\nCOPY --from=boolectorbuilder $RISCV/ $RISCV/\n#   add selfie sources to the image\nCOPY . /opt/selfie/\n#   specify user work directory\nWORKDIR /opt/selfie\n#   build selfie\nRUN make selfie\n#   default command\nCMD /bin/bash\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ##################################\n#  PK (Proxy kernel) builder image #\n# ##################################\nFROM ubuntu:18.10 AS pkbuilder\n#  specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#  install tools to build pk\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates gcc-riscv64-linux-gnu git libc-dev-riscv64-cross make -y \\\n && rm -rf /var/lib/apt/lists/*\n#  get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-pk\n#  set build flags compatible with Ubuntu's riscv64-* build flags,\n#  otherwise compilation fails with linker errors related to stack protection\n#  also, use multiple cores to speed up compilation\nENV CFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    CPPFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    MAKEFLAGS=\"-j4\"\n#  build proxy kernel\n#  note that at the end, we move the compiled binaries from riscv64-linux-gnu to riscv64-unknown-elf,\n#  because when running the proxy kernel with 'spike pk', it looks at that path by default\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-pk/build \\\n && cd riscv-pk/build \\\n && ../configure --prefix=$RISCV --host=riscv64-linux-gnu \\\n && make \\\n && make install \\\n && mv $RISCV/riscv64-linux-gnu $RISCV/riscv64-unknown-elf\n# ######################################\n#  Spike (ISA simulator) builder image #\n# ######################################\nFROM ubuntu:18.04 AS spikebuilder\n#  specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#  install tools to build RISC-V spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates device-tree-compiler g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#  get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-isa-sim.git\n#  use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#  build spike ISA simulator\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-isa-sim/build \\\n && cd riscv-isa-sim/build \\\n && ../configure --prefix=$RISCV \\\n && make \\\n && make install\n# #####################\n#  QEMU builder image #\n# #####################\nFROM ubuntu:18.10 AS qemubuilder\n#  specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#  install statically linked QEMU (so it's easier to move it to another image)\nRUN apt-get update \\\n && apt-get install --no-install-recommends qemu-user-static -y \\\n && rm -rf /var/lib/apt/lists/*\n#  copy QEMU RISC-V statically linked binary to common output folder\nRUN mkdir -p $RISCV/bin \\\n && cp /usr/bin/qemu-riscv64-static $RISCV/bin\n# #######################################\n#  Boolector (SMT solver) builder image #\n# #######################################\nFROM ubuntu:18.04 AS boolectorbuilder\n#  specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#  install tools to build boolector\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#  get sources from HEAD\nRUN git clone https://github.com/Boolector/boolector\n#  use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#  build boolector and dependencies\nRUN mkdir -p $RISCV \\\n && cd boolector \\\n && ./contrib/setup-lingeling.sh \\\n && ./contrib/setup-btor2tools.sh \\\n && ./configure.sh --prefix $RISCV \\\n && cd build \\\n && make \\\n && make install\n# #################################\n#  Selfie interactive final image #\n# #################################\nFROM ubuntu:18.04\n#  specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#  install git and basic build tools (gcc, make) for working with selfie,\n#  and device-tree-compiler which is required for spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates gcc-riscv64-linux-gnu libc-dev-riscv64-cross make device-tree-compiler git python3.6 -y \\\n && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 \\\n && rm -rf /var/lib/apt/lists/*\n#  copy spike, pk, qemu and boolector from builder images\nCOPY --from=pkbuilder $RISCV/ $RISCV/\nCOPY --from=spikebuilder $RISCV/ $RISCV/\nCOPY --from=qemubuilder $RISCV/ $RISCV/\nCOPY --from=boolectorbuilder $RISCV/ $RISCV/\n#  add selfie sources to the image\nCOPY . /opt/selfie/\n#  specify user work directory\nWORKDIR /opt/selfie\n#  build selfie\nRUN make selfie\n#  default command\nCMD /bin/bash\n","injectedSmells":[],"originalDockerfileHash":"0453a2360fad4554b8c9b52fb9f32fa7","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ##################################\n#   PK (Proxy kernel) builder image #\n#  ##################################\nFROM ubuntu:18.10 AS pkbuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build pk\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates gcc-riscv64-linux-gnu git libc-dev-riscv64-cross make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-pk\n#   set build flags compatible with Ubuntu's riscv64-* build flags,\n#   otherwise compilation fails with linker errors related to stack protection\n#   also, use multiple cores to speed up compilation\nENV CFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    CPPFLAGS=\"-fstack-protector -fstack-protector-explicit -U_FORTIFY_SOURCE\" \\\n    MAKEFLAGS=\"-j4\"\n#   build proxy kernel\n#   note that at the end, we move the compiled binaries from riscv64-linux-gnu to riscv64-unknown-elf,\n#   because when running the proxy kernel with 'spike pk', it looks at that path by default\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-pk/build \\\n && cd riscv-pk/build \\\n && ../configure --prefix=$RISCV --host=riscv64-linux-gnu \\\n && make \\\n && make install \\\n && mv $RISCV/riscv64-linux-gnu $RISCV/riscv64-unknown-elf\n#  ######################################\n#   Spike (ISA simulator) builder image #\n#  ######################################\nFROM ubuntu:18.04 AS spikebuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build RISC-V spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates device-tree-compiler g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/riscv/riscv-isa-sim.git\n#   use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#   build spike ISA simulator\nRUN mkdir -p $RISCV \\\n && mkdir -p riscv-isa-sim/build \\\n && cd riscv-isa-sim/build \\\n && ../configure --prefix=$RISCV \\\n && make \\\n && make install\n#  #####################\n#   QEMU builder image #\n#  #####################\nFROM ubuntu:18.10 AS qemubuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install statically linked QEMU (so it's easier to move it to another image)\nRUN apt-get update \\\n && apt-get install --no-install-recommends qemu-user-static -y \\\n && rm -rf /var/lib/apt/lists/*\n#   copy QEMU RISC-V statically linked binary to common output folder\nRUN mkdir -p $RISCV/bin \\\n && cp /usr/bin/qemu-riscv64-static $RISCV/bin\n#  #######################################\n#   Boolector (SMT solver) builder image #\n#  #######################################\nFROM ubuntu:18.04 AS boolectorbuilder\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install tools to build boolector\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates cmake g++ gcc git libc-dev make -y \\\n && rm -rf /var/lib/apt/lists/*\n#   get sources from HEAD\nRUN git clone https://github.com/Boolector/boolector\n#   use multiple cores to speed up compilation\nENV MAKEFLAGS=\"-j4\"\n#   build boolector and dependencies\nRUN mkdir -p $RISCV \\\n && cd boolector \\\n && ./contrib/setup-lingeling.sh \\\n && ./contrib/setup-btor2tools.sh \\\n && ./configure.sh --prefix $RISCV \\\n && cd build \\\n && make \\\n && make install\n#  #################################\n#   Selfie interactive final image #\n#  #################################\nFROM ubuntu:18.04\n#   specify work directory and RISC-V install directory\nENV TOP=\"/opt\" \\\n    RISCV=\"/opt/riscv\" \\\n    PATH=\"$PATH:/opt/riscv/bin\"\nWORKDIR $TOP\n#   install git and basic build tools (gcc, make) for working with selfie,\n#   and device-tree-compiler which is required for spike\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential ca-certificates gcc-riscv64-linux-gnu libc-dev-riscv64-cross make device-tree-compiler git python3.6 -y \\\n && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 \\\n && rm -rf /var/lib/apt/lists/*\n#   copy spike, pk, qemu and boolector from builder images\nCOPY --from=pkbuilder $RISCV/ $RISCV/\nCOPY --from=spikebuilder $RISCV/ $RISCV/\nCOPY --from=qemubuilder $RISCV/ $RISCV/\nCOPY --from=boolectorbuilder $RISCV/ $RISCV/\n#   add selfie sources to the image\nCOPY . /opt/selfie/\n#   specify user work directory\nWORKDIR /opt/selfie\n#   build selfie\nRUN make selfie\n#   default command\nCMD /bin/bash\n","originalDockerfileUglifiedHash":"efb29f0a8410dfbc8c5dc78689689d71","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/ef04699c430375e854434b453d25fad39ce424a9.dockerfile"}