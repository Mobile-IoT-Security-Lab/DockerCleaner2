{"seed":1976284157,"processedDockerfileHash":"8d5efad662ad02d87220832391d5913e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04@sha256:238cc73e12c381e1469815f7ee149028a2ee3d557b68ff9b12d907c2d3ea3c04\nMAINTAINER Shiva Manne <manneshiva@gmail.com>\n#   Compile Tensorflow from source for better performance/speed\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.devel-gpu\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.5 git=1:2.7.4-0ubuntu1.3 libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.3 libpng12-dev=1.2.54-1ubuntu1 libzmq3-dev=4.1.4-7 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.11-1 rsync=3.1.1-3ubuntu1 software-properties-common=0.96.20.7 unzip=6.0-20ubuntu1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.1 openjdk-8-jdk=8u151-b12-0ubuntu0.16.04.2 openjdk-8-jre-headless=8u151-b12-0ubuntu0.16.04.2 vim=2:7.4.1689-3ubuntu1.2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipykernel==4.6.1 jupyter==1.0.0 matplotlib==2.0.2 numpy==1.13.1 scipy==0.19.1 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.4\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"8.0\"\nENV TF_CUDNN_VERSION=\"6\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.1 --copt=-msse4.2 tensorflow/tools/pip_package:build_pip_package\nRUN rm /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nWORKDIR /\n#   Install python packages\nRUN pip install gensim==2.1.0 memory_profiler==0.47 psutil==5.2.2 snowballstemmer==1.2.1 PyStemmer==1.3.0 keras==2.1.3 tqdm==4.19.5 gputil==1.2.3 --no-cache-dir\n#   set python hash seed\nENV PYTHONHASHSEED=\"12345\"\nCOPY ./benchmark-GPU-platforms /benchmark-GPU-platforms\nWORKDIR /\nCMD [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04@sha256:238cc73e12c381e1469815f7ee149028a2ee3d557b68ff9b12d907c2d3ea3c04\nMAINTAINER Shiva Manne <manneshiva@gmail.com>\n#  Compile Tensorflow from source for better performance/speed\n#  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.devel-gpu\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.5 git=1:2.7.4-0ubuntu1.3 libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.3 libpng12-dev=1.2.54-1ubuntu1 libzmq3-dev=4.1.4-7 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.11-1 rsync=3.1.1-3ubuntu1 software-properties-common=0.96.20.7 unzip=6.0-20ubuntu1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.1 openjdk-8-jdk=8u151-b12-0ubuntu0.16.04.2 openjdk-8-jre-headless=8u151-b12-0ubuntu0.16.04.2 vim=2:7.4.1689-3ubuntu1.2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipykernel==4.6.1 jupyter==1.0.0 matplotlib==2.0.2 numpy==1.13.1 scipy==0.19.1 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#  Set up Bazel.\n#  Running bazel inside a `docker build` command causes trouble, cf:\n#    https://github.com/bazelbuild/bazel/issues/134\n#  The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#  Similarly, we need to workaround sandboxing issues:\n#    https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#  Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#  Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.4\nWORKDIR /tensorflow\n#  Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"8.0\"\nENV TF_CUDNN_VERSION=\"6\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.1 --copt=-msse4.2 tensorflow/tools/pip_package:build_pip_package\nRUN rm /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#  Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#  TensorBoard\nEXPOSE 6006/tcp\n#  IPython\nEXPOSE 8888/tcp\nWORKDIR /\n#  Install python packages\nRUN pip install gensim==2.1.0 memory_profiler==0.47 psutil==5.2.2 snowballstemmer==1.2.1 PyStemmer==1.3.0 keras==2.1.3 tqdm==4.19.5 gputil==1.2.3 --no-cache-dir\n#  set python hash seed\nENV PYTHONHASHSEED=\"12345\"\nCOPY ./benchmark-GPU-platforms /benchmark-GPU-platforms\nWORKDIR /\nCMD [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"f44ce91e1cf5a35f1e45a11175cbb3fd","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04@sha256:238cc73e12c381e1469815f7ee149028a2ee3d557b68ff9b12d907c2d3ea3c04\nMAINTAINER Shiva Manne <manneshiva@gmail.com>\n#   Compile Tensorflow from source for better performance/speed\n#   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile.devel-gpu\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.1ubuntu2 curl=7.47.0-1ubuntu2.5 git=1:2.7.4-0ubuntu1.3 libcurl3-dev libfreetype6-dev=2.6.1-0.1ubuntu2.3 libpng12-dev=1.2.54-1ubuntu1 libzmq3-dev=4.1.4-7 pkg-config=0.29.1-0ubuntu1 python-dev=2.7.11-1 rsync=3.1.1-3ubuntu1 software-properties-common=0.96.20.7 unzip=6.0-20ubuntu1 zip=3.0-11 zlib1g-dev=1:1.2.8.dfsg-2ubuntu4.1 openjdk-8-jdk=8u151-b12-0ubuntu0.16.04.2 openjdk-8-jre-headless=8u151-b12-0ubuntu0.16.04.2 vim=2:7.4.1689-3ubuntu1.2 -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nRUN pip install ipykernel==4.6.1 jupyter==1.0.0 matplotlib==2.0.2 numpy==1.13.1 scipy==0.19.1 --no-cache-dir \\\n && python -m ipykernel.kernelspec\n#   Set up Bazel.\n#   Running bazel inside a `docker build` command causes trouble, cf:\n#     https://github.com/bazelbuild/bazel/issues/134\n#   The easiest solution is to set up a bazelrc file forcing --batch.\nRUN echo \"startup --batch\" >> /etc/bazel.bazelrc\n#   Similarly, we need to workaround sandboxing issues:\n#     https://github.com/bazelbuild/bazel/issues/418\nRUN echo \"build --spawn_strategy=standalone --genrule_strategy=standalone\" >> /etc/bazel.bazelrc\n#   Install the most recent bazel release.\nENV BAZEL_VERSION=\"0.5.4\"\nWORKDIR /\nRUN mkdir /bazel \\\n && cd /bazel \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && curl -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE \\\n && chmod +x bazel-*.sh \\\n && ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh \\\n && cd / \\\n && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh\n#   Download and build TensorFlow.\nRUN git clone https://github.com/tensorflow/tensorflow.git \\\n && cd tensorflow \\\n && git checkout r1.4\nWORKDIR /tensorflow\n#   Configure the build for our CUDA configuration.\nENV CI_BUILD_PYTHON=\"python\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\nENV TF_NEED_CUDA=\"1\"\nENV TF_CUDA_COMPUTE_CAPABILITIES=\"3.0,3.5,5.2,6.0,6.1\"\nENV TF_CUDA_VERSION=\"8.0\"\nENV TF_CUDNN_VERSION=\"6\"\nRUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} tensorflow/tools/ci_build/builds/configured GPU bazel build -c opt --config=cuda --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.1 --copt=-msse4.2 tensorflow/tools/pip_package:build_pip_package\nRUN rm /usr/local/cuda/lib64/stubs/libcuda.so.1\nRUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \\\n && pip install /tmp/pip/tensorflow-*.whl --no-cache-dir --upgrade \\\n && rm -rf /tmp/pip \\\n && rm -rf /root/.cache\n#   Clean up pip wheel and Bazel cache when done.\nWORKDIR /root\n#   TensorBoard\nEXPOSE 6006/tcp\n#   IPython\nEXPOSE 8888/tcp\nWORKDIR /\n#   Install python packages\nRUN pip install gensim==2.1.0 memory_profiler==0.47 psutil==5.2.2 snowballstemmer==1.2.1 PyStemmer==1.3.0 keras==2.1.3 tqdm==4.19.5 gputil==1.2.3 --no-cache-dir\n#   set python hash seed\nENV PYTHONHASHSEED=\"12345\"\nCOPY ./benchmark-GPU-platforms /benchmark-GPU-platforms\nWORKDIR /\nCMD [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"6f16b5a87e55c62d6d7c7d018c5fb415","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b7722d7095bce4b0ba210cf6548cab1dafc34291.dockerfile"}