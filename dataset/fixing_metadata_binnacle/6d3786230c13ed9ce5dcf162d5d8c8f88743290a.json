{"seed":2906378415,"processedDockerfileHash":"fbaa47df3a9039185d76122bf0f9162d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM jenkins/jenkins:latest\nUSER root\nRUN : \\\n && apt-get -y upgrade\nRUN (apt-get update ;apt-get install --no-install-recommends build-essential=12.9ubuntu3 software-properties-common=0.99.35 git=1:2.39.2-1ubuntu1 vim=2:9.0.1000-4ubuntu2 python python-dev python3=3.11.2-1 python3-dev=3.11.2-1 python-setuptools python-virtualenv python-pip net-tools=2.10-0.1ubuntu3 gcc=4:12.2.0-3ubuntu1 vim=2:9.0.1000-4ubuntu2 openssl=3.0.8-1ubuntu1 libssl-dev=3.0.8-1ubuntu1 make=4.3-4.1build1 cmake=3.25.1-1 autoconf=2.71-3 mono-runtime=6.8.0.105+dfsg-3.3 mono-devel=6.8.0.105+dfsg-3.3 libcurl4-openssl-dev=7.88.1-7ubuntu1 libffi6 libffi-dev=3.4.4-1 ruby=1:3.1 curl=7.88.1-7ubuntu1 php-cli=2:8.1+92ubuntu1 php-mbstring=2:8.1+92ubuntu1 unzip=6.0-27ubuntu1 -y )\nRUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n && gem install bundler-audit --version 0.9.1 \\\n && bundle-audit update\n#   Install ansible in the system's pips for jenkins\n#   and in the virtual env for python3\nRUN mkdir -p -m 777 /opt/owasp \\\n && pip install pip==23.1 --upgrade \\\n && pip install setuptools==67.6.1 --upgrade \\\n && pip install cryptography==40.0.2 --upgrade > =2.1.4 \\\n && pip install ansible==7.4.0 --upgrade \\\n && virtualenv -p python3 /opt/owasp/venv \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install pip==23.1 --upgrade \\\n && pip install setuptools==67.6.1 --upgrade \\\n && pip install cryptography==40.0.2 --upgrade > =2.1.4 \\\n && pip install ansible==7.4.0 --upgrade \\\n && pip list\nENV PROJECT_NAME=\"owasp\"\nENV LOG_DIR=\"/opt/logs\"\nENV CONFIG_DIR=\"/opt/logs\"\nENV DATA_DIR=\"/opt/logs\"\nENV PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"\nENV JAVA_OPTS=\"-Djenkins.install.runSetupWizard=false\"\nRUN mkdir -p -m 777 /opt/owasp /opt/shared /opt/logs /opt/data /opt/configs /opt/nvd /opt/depchecker /opt/jenkins /opt/certs /opt/reports /opt/scanthisdir\nRUN /bin/echo \"Installing Plugins\"\nCOPY ./docker/data/jenkins/ref/plugins.txt /usr/share/jenkins/ref/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\nWORKDIR /opt/owasp/ansible\nCOPY ./ansible /opt/owasp/ansible\nRUN chmod 777 /opt/owasp/ansible \\\n && ls -l /opt/owasp/ansible\nRUN /bin/echo \"Starting OWASP build\"\n#   default user is jenkins with home dir in /var/jenkins_home\nRUN /bin/echo 'PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"' >> /var/jenkins_home/.bashrc\nRUN /bin/echo \"Installing Maven using Ansible\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-maven.yml -e install_maven=1 -vvvv\nRUN /bin/echo \"Installing NIST National Vulnerability Database and NVD Dependency Checker using Ansible and Maven\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-tools.yml -e clone_depchecker=1 -e clone_nvd_dl=1 -vvvv\nRUN /bin/echo \"Downloading NIST National Vulnerability Database file\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev download-nvd.yml -vvvv\nRUN /bin/echo \"Generating National Vulnerability H2 Database for increasing OWASP analysis performance\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev run-owasp-analysis.yml -e rebuild_nvd=1 -e owasp_scan_dir=\"/opt/owasp/venv/bin\" -vvvv\nRUN /bin/echo \"Installing ZAP community scripts in: /opt/zapscripts\" \\\n && git clone https://github.com/zaproxy/community-scripts.git /opt/zapscripts\nRUN /bin/echo \"Installing Certs\"\nCOPY ./docker/bashrc /root/.bashrc\nCOPY docker/certs /opt/certs\nRUN /bin/echo \"Installing Python Utilities\"\nCOPY owasp-jenkins-latest.tgz /opt/owasp\nRUN cd /opt/owasp \\\n && tar xvf owasp-jenkins-latest.tgz \\\n && ls /opt/owasp\nRUN cd /opt/owasp \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install -e . \\\n && pip list\nENTRYPOINT /opt/owasp/owasp_jenkins/scripts/start-container.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM jenkins/jenkins:latest\nUSER root\nRUN apt-get update \\\n && apt-get -y upgrade\nRUN apt-get install build-essential software-properties-common git vim python python-dev python3 python3-dev python-setuptools python-virtualenv python-pip net-tools gcc vim openssl libssl-dev make cmake autoconf mono-runtime mono-devel libcurl4-openssl-dev libffi6 libffi-dev ruby curl php-cli php-mbstring unzip -y\nRUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n && gem install bundler-audit \\\n && bundle-audit update\n#  Install ansible in the system's pips for jenkins\n#  and in the virtual env for python3\nRUN mkdir -p -m 777 /opt/owasp \\\n && pip install pip --upgrade \\\n && pip install setuptools --upgrade \\\n && pip install cryptography --upgrade > =2.1.4 \\\n && pip install ansible --upgrade \\\n && virtualenv -p python3 /opt/owasp/venv \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install pip --upgrade \\\n && pip install setuptools --upgrade \\\n && pip install cryptography --upgrade > =2.1.4 \\\n && pip install ansible --upgrade \\\n && pip list\nENV PROJECT_NAME=\"owasp\"\nENV LOG_DIR=\"/opt/logs\"\nENV CONFIG_DIR=\"/opt/logs\"\nENV DATA_DIR=\"/opt/logs\"\nENV PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"\nENV JAVA_OPTS=\"-Djenkins.install.runSetupWizard=false\"\nRUN mkdir -p -m 777 /opt/owasp /opt/shared /opt/logs /opt/data /opt/configs /opt/nvd /opt/depchecker /opt/jenkins /opt/certs /opt/reports /opt/scanthisdir\nRUN /bin/echo \"Installing Plugins\"\nCOPY ./docker/data/jenkins/ref/plugins.txt /usr/share/jenkins/ref/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\nWORKDIR /opt/owasp/ansible\nCOPY ./ansible /opt/owasp/ansible\nRUN chmod 777 /opt/owasp/ansible \\\n && ls -l /opt/owasp/ansible\nRUN /bin/echo \"Starting OWASP build\"\n#  default user is jenkins with home dir in /var/jenkins_home\nRUN /bin/echo 'PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"' >> /var/jenkins_home/.bashrc\nRUN /bin/echo \"Installing Maven using Ansible\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-maven.yml -e install_maven=1 -vvvv\nRUN /bin/echo \"Installing NIST National Vulnerability Database and NVD Dependency Checker using Ansible and Maven\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-tools.yml -e clone_depchecker=1 -e clone_nvd_dl=1 -vvvv\nRUN /bin/echo \"Downloading NIST National Vulnerability Database file\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev download-nvd.yml -vvvv\nRUN /bin/echo \"Generating National Vulnerability H2 Database for increasing OWASP analysis performance\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev run-owasp-analysis.yml -e rebuild_nvd=1 -e owasp_scan_dir=\"/opt/owasp/venv/bin\" -vvvv\nRUN /bin/echo \"Installing ZAP community scripts in: /opt/zapscripts\" \\\n && git clone https://github.com/zaproxy/community-scripts.git /opt/zapscripts\nRUN /bin/echo \"Installing Certs\"\nCOPY ./docker/bashrc /root/.bashrc\nADD docker/certs /opt/certs\nRUN /bin/echo \"Installing Python Utilities\"\nCOPY owasp-jenkins-latest.tgz /opt/owasp\nRUN cd /opt/owasp \\\n && tar xvf owasp-jenkins-latest.tgz \\\n && ls /opt/owasp\nRUN cd /opt/owasp \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install -e . \\\n && pip list\nENTRYPOINT /opt/owasp/owasp_jenkins/scripts/start-container.sh\n","injectedSmells":[],"originalDockerfileHash":"94451a92db413ee95a2a0bc6ad3bd0af","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM jenkins/jenkins:latest\nUSER root\nRUN apt-get update \\\n && apt-get -y upgrade\nRUN apt-get install build-essential software-properties-common git vim python python-dev python3 python3-dev python-setuptools python-virtualenv python-pip net-tools gcc vim openssl libssl-dev make cmake autoconf mono-runtime mono-devel libcurl4-openssl-dev libffi6 libffi-dev ruby curl php-cli php-mbstring unzip -y\nRUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n && gem install bundler-audit \\\n && bundle-audit update\n#   Install ansible in the system's pips for jenkins\n#   and in the virtual env for python3\nRUN mkdir -p -m 777 /opt/owasp \\\n && pip install pip --upgrade \\\n && pip install setuptools --upgrade \\\n && pip install cryptography --upgrade > =2.1.4 \\\n && pip install ansible --upgrade \\\n && virtualenv -p python3 /opt/owasp/venv \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install pip --upgrade \\\n && pip install setuptools --upgrade \\\n && pip install cryptography --upgrade > =2.1.4 \\\n && pip install ansible --upgrade \\\n && pip list\nENV PROJECT_NAME=\"owasp\"\nENV LOG_DIR=\"/opt/logs\"\nENV CONFIG_DIR=\"/opt/logs\"\nENV DATA_DIR=\"/opt/logs\"\nENV PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"\nENV JAVA_OPTS=\"-Djenkins.install.runSetupWizard=false\"\nRUN mkdir -p -m 777 /opt/owasp /opt/shared /opt/logs /opt/data /opt/configs /opt/nvd /opt/depchecker /opt/jenkins /opt/certs /opt/reports /opt/scanthisdir\nRUN /bin/echo \"Installing Plugins\"\nCOPY ./docker/data/jenkins/ref/plugins.txt /usr/share/jenkins/ref/plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\nWORKDIR /opt/owasp/ansible\nCOPY ./ansible /opt/owasp/ansible\nRUN chmod 777 /opt/owasp/ansible \\\n && ls -l /opt/owasp/ansible\nRUN /bin/echo \"Starting OWASP build\"\n#   default user is jenkins with home dir in /var/jenkins_home\nRUN /bin/echo 'PATH=\"/opt/tools/apache-maven/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/sbin:/bin\"' >> /var/jenkins_home/.bashrc\nRUN /bin/echo \"Installing Maven using Ansible\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-maven.yml -e install_maven=1 -vvvv\nRUN /bin/echo \"Installing NIST National Vulnerability Database and NVD Dependency Checker using Ansible and Maven\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev install-tools.yml -e clone_depchecker=1 -e clone_nvd_dl=1 -vvvv\nRUN /bin/echo \"Downloading NIST National Vulnerability Database file\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev download-nvd.yml -vvvv\nRUN /bin/echo \"Generating National Vulnerability H2 Database for increasing OWASP analysis performance\" \\\n && . /opt/owasp/venv/bin/activate \\\n && cd /opt/owasp/ansible \\\n && ansible-playbook -i inventories/inventory_dev run-owasp-analysis.yml -e rebuild_nvd=1 -e owasp_scan_dir=\"/opt/owasp/venv/bin\" -vvvv\nRUN /bin/echo \"Installing ZAP community scripts in: /opt/zapscripts\" \\\n && git clone https://github.com/zaproxy/community-scripts.git /opt/zapscripts\nRUN /bin/echo \"Installing Certs\"\nCOPY ./docker/bashrc /root/.bashrc\nADD docker/certs /opt/certs\nRUN /bin/echo \"Installing Python Utilities\"\nCOPY owasp-jenkins-latest.tgz /opt/owasp\nRUN cd /opt/owasp \\\n && tar xvf owasp-jenkins-latest.tgz \\\n && ls /opt/owasp\nRUN cd /opt/owasp \\\n && . /opt/owasp/venv/bin/activate \\\n && pip install -e . \\\n && pip list\nENTRYPOINT /opt/owasp/owasp_jenkins/scripts/start-container.sh\n","originalDockerfileUglifiedHash":"3d9f3d8bc7ab77805f03b3c843e29de4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6d3786230c13ed9ce5dcf162d5d8c8f88743290a.dockerfile"}