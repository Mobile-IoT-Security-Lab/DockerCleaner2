{"seed":3988145192,"processedDockerfileHash":"6aec27399f14873db666c84eef756f1f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.2.9-fpm-alpine3.7\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#   ========\n#   ENV vars\n#   ========\n#   ssh\nENV SSH_PASSWD=\"\\\"root:Docker!\\\"\"\n#  nginx\nENV NGINX_VERSION=\"1.14.0\"\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n#  php\n#  /usr/local/etc/php/php.ini\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#   mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#   phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/var/www/phpmyadmin\\\"\"\n#  Web Site Home\nENV HOME_SITE=\"\\\"/var/www/html\\\"\"\n#   redis\nENV PHPREDIS_VERSION=\"3.1.2\"\n#   --------\n#   ~. tools\n#   --------\nRUN set -ex \\\n && apk update \\\n && apk add openssl git net-tools tcpdump tcptraceroute vim curl wget bash --no-cache \\\n && cd /usr/bin \\\n && wget http://www.vdberg.org/~richard/tcpping \\\n && chmod 777 tcpping \\\n && apk add icu-dev libxml2-dev freetype-dev libpng-dev libjpeg-turbo-dev g++ make autoconf --no-cache --virtual build-dependencies \\\n && docker-php-source extract \\\n && pecl install xdebug-beta \\\n && docker-php-ext-install mysqli \\\n && docker-php-source delete \\\n && apk del build-dependencies \\\n && apk del libmcrypt-dev \\\n && apk add openssh-server --no-cache \\\n && echo \"$SSH_PASSWD\" | chpasswd \\\n && apk add mariadb mariadb-client --no-cache \\\n && apk add openrc --no-cache \\\n && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh\n#   ----------\n#   Nginx\n#   ----------   \nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev --no-cache --virtual .build-deps \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add gettext --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   -------------\n#   phpmyadmin\n#   -------------\nRUN mkdir -p $PHPMYADMIN_SOURCE\nCOPY phpMyAdmin.tar.gz $PHPMYADMIN_SOURCE/phpMyAdmin.tar.gz\n#   ----------\n#   ~. upgrade/clean up\n#   ----------\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf /tmp/*\n#   =========\n#   Configure\n#   =========\nRUN set -ex \\\n && mkdir -p /var/www \\\n && chown -R www-data:www-data /var/www \\\n && rm -rf /var/log/mysql \\\n && ln -s $MARIADB_LOG_DIR /var/log/mysql \\\n && rm -rf /var/log/nginx \\\n && ln -s $NGINX_LOG_DIR /var/log/nginx\n#  #\n#   && ln -s ${HOME_SITE} /var/www/html \\\n#  #\t\n#   && ln -s ${PHPMYADMIN_HOME} /var/www/phpmyadmin\n#  \t\n#   ssh\nCOPY sshd_config /etc/ssh/\n#   php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nCOPY www.conf /usr/local/etc/php/conf.d/www.conf\n#   nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\n#  COPY default.conf /etc/nginx/conf.d/default.conf\nCOPY hostingstart.html /var/www/html/index.html\n#   phpmyadmin\nCOPY phpmyadmin-config.inc.php $PHPMYADMIN_SOURCE/\nCOPY mariadb.cnf /etc/mysql/\nCOPY phpmyadmin-nginx.conf $PHPMYADMIN_SOURCE/phpmyadmin-nginx.conf\nRUN echo \"<?php phpinfo();\" > /var/www/html/index.php\n#   =====\n#   final\n#   =====\nCOPY init_container.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/init_container.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"init_container.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.2.9-fpm-alpine3.7\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#  ========\n#  ENV vars\n#  ========\n#  ssh\nENV SSH_PASSWD=\"\\\"root:Docker!\\\"\"\n# nginx\nENV NGINX_VERSION=\"1.14.0\"\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n# php\n# /usr/local/etc/php/php.ini\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#  mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#  phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/var/www/phpmyadmin\\\"\"\n# Web Site Home\nENV HOME_SITE=\"\\\"/var/www/html\\\"\"\n#  redis\nENV PHPREDIS_VERSION=\"3.1.2\"\n#  --------\n#  ~. tools\n#  --------\nRUN set -ex \\\n && apk update \\\n && apk add --no-cache openssl git net-tools tcpdump tcptraceroute vim curl wget bash \\\n && cd /usr/bin \\\n && wget http://www.vdberg.org/~richard/tcpping \\\n && chmod 777 tcpping \\\n && apk add --no-cache --virtual build-dependencies icu-dev libxml2-dev freetype-dev libpng-dev libjpeg-turbo-dev g++ make autoconf \\\n && docker-php-source extract \\\n && pecl install xdebug-beta \\\n && docker-php-ext-install mysqli \\\n && docker-php-source delete \\\n && apk del build-dependencies \\\n && apk del libmcrypt-dev \\\n && apk add --no-cache openssh-server \\\n && echo \"$SSH_PASSWD\" | chpasswd \\\n && apk add --no-cache mariadb mariadb-client \\\n && apk add --no-cache openrc \\\n && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh\n#  ----------\n#  Nginx\n#  ----------   \nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#  -------------\n#  phpmyadmin\n#  -------------\nRUN mkdir -p $PHPMYADMIN_SOURCE\nCOPY phpMyAdmin.tar.gz $PHPMYADMIN_SOURCE/phpMyAdmin.tar.gz\n#  ----------\n#  ~. upgrade/clean up\n#  ----------\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf /tmp/*\n#  =========\n#  Configure\n#  =========\nRUN set -ex \\\n && mkdir -p /var/www \\\n && chown -R www-data:www-data /var/www \\\n && rm -rf /var/log/mysql \\\n && ln -s $MARIADB_LOG_DIR /var/log/mysql \\\n && rm -rf /var/log/nginx \\\n && ln -s $NGINX_LOG_DIR /var/log/nginx\n# #\n#  && ln -s ${HOME_SITE} /var/www/html \\\n# #\t\n#  && ln -s ${PHPMYADMIN_HOME} /var/www/phpmyadmin\n# \t\n#  ssh\nCOPY sshd_config /etc/ssh/\n#  php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nCOPY www.conf /usr/local/etc/php/conf.d/www.conf\n#  nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\n# COPY default.conf /etc/nginx/conf.d/default.conf\nCOPY hostingstart.html /var/www/html/index.html\n#  phpmyadmin\nCOPY phpmyadmin-config.inc.php $PHPMYADMIN_SOURCE/\nCOPY mariadb.cnf /etc/mysql/\nCOPY phpmyadmin-nginx.conf $PHPMYADMIN_SOURCE/phpmyadmin-nginx.conf\nRUN echo \"<?php phpinfo();\" > /var/www/html/index.php\n#  =====\n#  final\n#  =====\nCOPY init_container.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/init_container.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"init_container.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"4d00a9f689167ebb48d667b8edb64428","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.2.9-fpm-alpine3.7\nMAINTAINER Azure App Service Container Images <appsvc-images@microsoft.com>\n#   ========\n#   ENV vars\n#   ========\n#   ssh\nENV SSH_PASSWD=\"\\\"root:Docker!\\\"\"\n#  nginx\nENV NGINX_VERSION=\"1.14.0\"\nENV NGINX_LOG_DIR=\"\\\"/home/LogFiles/nginx\\\"\"\n#  php\n#  /usr/local/etc/php/php.ini\nENV PHP_HOME=\"\\\"/usr/local/etc/php\\\"\"\nENV PHP_CONF_DIR=\"$PHP_HOME\"\nENV PHP_CONF_FILE=\"$PHP_CONF_DIR\\\"/php.ini\\\"\"\n#   mariadb\nENV MARIADB_DATA_DIR=\"\\\"/home/data/mysql\\\"\"\nENV MARIADB_LOG_DIR=\"\\\"/home/LogFiles/mysql\\\"\"\n#   phpmyadmin\nENV PHPMYADMIN_SOURCE=\"\\\"/usr/src/phpmyadmin\\\"\"\nENV PHPMYADMIN_HOME=\"\\\"/var/www/phpmyadmin\\\"\"\n#  Web Site Home\nENV HOME_SITE=\"\\\"/var/www/html\\\"\"\n#   redis\nENV PHPREDIS_VERSION=\"3.1.2\"\n#   --------\n#   ~. tools\n#   --------\nRUN set -ex \\\n && apk update \\\n && apk add --no-cache openssl git net-tools tcpdump tcptraceroute vim curl wget bash \\\n && cd /usr/bin \\\n && wget http://www.vdberg.org/~richard/tcpping \\\n && chmod 777 tcpping \\\n && apk add --no-cache --virtual build-dependencies icu-dev libxml2-dev freetype-dev libpng-dev libjpeg-turbo-dev g++ make autoconf \\\n && docker-php-source extract \\\n && pecl install xdebug-beta \\\n && docker-php-ext-install mysqli \\\n && docker-php-source delete \\\n && apk del build-dependencies \\\n && apk del libmcrypt-dev \\\n && apk add --no-cache openssh-server \\\n && echo \"$SSH_PASSWD\" | chpasswd \\\n && apk add --no-cache mariadb mariadb-client \\\n && apk add --no-cache openrc \\\n && sed -i 's/\"cgroup_add_service/\" # cgroup_add_service/g' /lib/rc/sh/openrc-run.sh\n#   ----------\n#   Nginx\n#   ----------   \nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\n#   -------------\n#   phpmyadmin\n#   -------------\nRUN mkdir -p $PHPMYADMIN_SOURCE\nCOPY phpMyAdmin.tar.gz $PHPMYADMIN_SOURCE/phpMyAdmin.tar.gz\n#   ----------\n#   ~. upgrade/clean up\n#   ----------\nRUN set -ex \\\n && apk update \\\n && apk upgrade \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf /tmp/*\n#   =========\n#   Configure\n#   =========\nRUN set -ex \\\n && mkdir -p /var/www \\\n && chown -R www-data:www-data /var/www \\\n && rm -rf /var/log/mysql \\\n && ln -s $MARIADB_LOG_DIR /var/log/mysql \\\n && rm -rf /var/log/nginx \\\n && ln -s $NGINX_LOG_DIR /var/log/nginx\n#  #\n#   && ln -s ${HOME_SITE} /var/www/html \\\n#  #\t\n#   && ln -s ${PHPMYADMIN_HOME} /var/www/phpmyadmin\n#  \t\n#   ssh\nCOPY sshd_config /etc/ssh/\n#   php\nCOPY php.ini /usr/local/etc/php/php.ini\nCOPY xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nCOPY www.conf /usr/local/etc/php/conf.d/www.conf\n#   nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\n#  COPY default.conf /etc/nginx/conf.d/default.conf\nCOPY hostingstart.html /var/www/html/index.html\n#   phpmyadmin\nCOPY phpmyadmin-config.inc.php $PHPMYADMIN_SOURCE/\nCOPY mariadb.cnf /etc/mysql/\nCOPY phpmyadmin-nginx.conf $PHPMYADMIN_SOURCE/phpmyadmin-nginx.conf\nRUN echo \"<?php phpinfo();\" > /var/www/html/index.php\n#   =====\n#   final\n#   =====\nCOPY init_container.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/init_container.sh\nEXPOSE 2222/tcp 80/tcp\nENTRYPOINT [\"init_container.sh\"]\n","originalDockerfileUglifiedHash":"a0de801ea05db798846c5a19f8db26e2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/66e961763c15e8c60ba7523846b0ed22d1035210.dockerfile"}