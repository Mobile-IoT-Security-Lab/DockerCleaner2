{"seed":4001102494,"processedDockerfileHash":"7f710f54e5fd897d14cfcdbabdaf77cd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   https://index.docker.io/_/fedora/\nFROM fedora:21\n#   http://jumanjiman.github.io/\nMAINTAINER Paul Morgan <jumanjiman@gmail.com>\n#   Allow to install docs since this is a dev environment.\nRUN sed -i '/tsflags=nodocs/d' /etc/yum.conf\nRUN yum update -y ; yum clean all\n#   Work around https://bugzilla.redhat.com/show_bug.cgi?id=1066983\n#   and remove prohibited packages.\nRUN yum remove -y vim-minimal at sudo ; yum clean all\n#   Install dependencies.\nRUN yum install -y asciinema bind-utils bc devscripts-minimal dictd diction ftp tftp hostname openssh-server openssh-clients man-db man-pages mlocate gcc gcc-c++ glibc-static gflags gflags-devel gnupg ruby ruby-devel rubygem-bundler sqlite-devel libcurl-devel libxslt-devel libxml2-devel nano vim-enhanced bash-completion java-1.8.0-openjdk-headless jq openssl openssl-devel crypto-utils tree php python-devel python-nose python-setuptools python-pep8 rpm-python python3-devel python3-nose python3-setuptools python3-pep8 rpm-python3 pylint python3-pylint pykickstart rpm-build libxslt createrepo git-annex scap-security-guide strace tmux tmux-powerline reptyr golang golang-cover golang-github-coreos-go-systemd-devel golang-godoc golang-vim golang-github-coreos-go-log-devel npm nodeunit bzr tito git tar patch diffutils which git-remote-hg git-svn make mutt jwhois xmlstarlet python-pygraphviz-doc python-pygraphviz python-xdot python3-pygraphviz python-lxml-docs python-lxml python3-lxml python-requests-kerberos python-requests-mock python-requests-oauthlib python3-requests-mock python3-requests-oauthlib python-CacheControl python-pyramid-tm python-requests python3-CacheControl python3-pyramid-tm python3-requests python-pyasn1-modules python3-pyasn1-modules python-pyasn1 python3-pyasn1 python-psycopg2 python-psycopg2-debug python-psycopg2-doc python3-psycopg2.x86_64 python3-psycopg2-debug python-scp python-paramiko numpy python3-numpydoc python3-numpy python3-PyYAML python3-scipy python-numpydoc PyYAML scipy python-matplotlib-data-fonts python-matplotlib-doc python-matplotlib python3-matplotlib wget ; yum clean all\n#   Break su for everybody but root.\n#   Break cron for everybody.\n#   Populate /etc/skel\n#   Annoy user if they forget to set their username and email in git.\n#   Configure security.\n#   Install tools for validating xml.\nCOPY . /\nRUN chmod 0400 /usr/bin/crontab\nRUN chmod 0400 /usr/sbin/crond\n#   Install duo for multifactor authentication.\nRUN rpm --import https://www.duosecurity.com/RPM-GPG-KEY-DUO ; yum -y install duo_unix ; yum clean all\n#   Avoid error `Only root may specify -c or -f` when using\n#   ForceCommand with `-f` option at non-root ssh login.\n#   https://www.duosecurity.com/docs/duounix-faq#can-i-use-login_duo-to-protect-non-root-shared-accounts,-or-can-i-do-an-install-without-root-privileges?\nRUN chmod u-s /usr/sbin/login_duo\n#   Create sandbox user.\nRUN useradd user\n#   Ugly workaround. Really ugly.\nRUN usermod -aG slocate user\n#   Install latest docker client.\nRUN curl -sS -L -o /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-latest ; curl -sS -L -o /usr/bin/docker-compose https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s `-`uname -m ` ; chmod 0755 /usr/bin/docker*\n#   https://www.npmjs.com/package/dockerlint\nRUN npm install dockerlint@0.3.9 -g\n#   Do not track changes in volumes.\nVOLUME [\"/home/user\", \"/media/state/etc/ssh\"]\n#   Be informative after successful login.\nRUN echo \"App container image built on $( date ;).\" > /etc/motd\nRUN /usr/local/sbin/install-jing.sh\n#   Update system databases for user convenience.\nRUN mandb &> /dev/null\nRUN updatedb &> /dev/null\n#   Remediate security after all packages are installed.\nRUN /usr/sbin/oscap-remediate.sh\n#   Run oval security scan after remediation.\n#   This script exits non-zero if container is non-compliant,\n#   so 'docker build' fails if container has known vulnerabilities.\n#   IOW it's impossible to build an image with known vulnerabilities.\nRUN /usr/sbin/oval-vulnerability-scan.sh\nEXPOSE 22/tcp\nENV LANG=\"C\"\nCMD /usr/sbin/start.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  https://index.docker.io/_/fedora/\nFROM fedora:21\n#  http://jumanjiman.github.io/\nMAINTAINER Paul Morgan <jumanjiman@gmail.com>\n#  Allow to install docs since this is a dev environment.\nRUN sed -i '/tsflags=nodocs/d' /etc/yum.conf\nRUN yum update -y ; yum clean all\n#  Work around https://bugzilla.redhat.com/show_bug.cgi?id=1066983\n#  and remove prohibited packages.\nRUN yum remove -y vim-minimal at sudo ; yum clean all\n#  Install dependencies.\nRUN yum install -y asciinema bind-utils bc devscripts-minimal dictd diction ftp tftp hostname openssh-server openssh-clients man-db man-pages mlocate gcc gcc-c++ glibc-static gflags gflags-devel gnupg ruby ruby-devel rubygem-bundler sqlite-devel libcurl-devel libxslt-devel libxml2-devel nano vim-enhanced bash-completion java-1.8.0-openjdk-headless jq openssl openssl-devel crypto-utils tree php python-devel python-nose python-setuptools python-pep8 rpm-python python3-devel python3-nose python3-setuptools python3-pep8 rpm-python3 pylint python3-pylint pykickstart rpm-build libxslt createrepo git-annex scap-security-guide strace tmux tmux-powerline reptyr golang golang-cover golang-github-coreos-go-systemd-devel golang-godoc golang-vim golang-github-coreos-go-log-devel npm nodeunit bzr tito git tar patch diffutils which git-remote-hg git-svn make mutt jwhois xmlstarlet python-pygraphviz-doc python-pygraphviz python-xdot python3-pygraphviz python-lxml-docs python-lxml python3-lxml python-requests-kerberos python-requests-mock python-requests-oauthlib python3-requests-mock python3-requests-oauthlib python-CacheControl python-pyramid-tm python-requests python3-CacheControl python3-pyramid-tm python3-requests python-pyasn1-modules python3-pyasn1-modules python-pyasn1 python3-pyasn1 python-psycopg2 python-psycopg2-debug python-psycopg2-doc python3-psycopg2.x86_64 python3-psycopg2-debug python-scp python-paramiko numpy python3-numpydoc python3-numpy python3-PyYAML python3-scipy python-numpydoc PyYAML scipy python-matplotlib-data-fonts python-matplotlib-doc python-matplotlib python3-matplotlib wget ; yum clean all\n#  Break su for everybody but root.\n#  Break cron for everybody.\n#  Populate /etc/skel\n#  Annoy user if they forget to set their username and email in git.\n#  Configure security.\n#  Install tools for validating xml.\nCOPY . /\nRUN chmod 0400 /usr/bin/crontab\nRUN chmod 0400 /usr/sbin/crond\n#  Install duo for multifactor authentication.\nRUN rpm --import https://www.duosecurity.com/RPM-GPG-KEY-DUO ; yum -y install duo_unix ; yum clean all\n#  Avoid error `Only root may specify -c or -f` when using\n#  ForceCommand with `-f` option at non-root ssh login.\n#  https://www.duosecurity.com/docs/duounix-faq#can-i-use-login_duo-to-protect-non-root-shared-accounts,-or-can-i-do-an-install-without-root-privileges?\nRUN chmod u-s /usr/sbin/login_duo\n#  Create sandbox user.\nRUN useradd user\n#  Ugly workaround. Really ugly.\nRUN usermod -aG slocate user\n#  Install latest docker client.\nRUN curl -sS -L -o /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-latest ; curl -sS -L -o /usr/bin/docker-compose https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s `-`uname -m ` ; chmod 0755 /usr/bin/docker*\n#  https://www.npmjs.com/package/dockerlint\nRUN npm install dockerlint -g\n#  Do not track changes in volumes.\nVOLUME [\"/home/user\", \"/media/state/etc/ssh\"]\n#  Be informative after successful login.\nRUN echo \"App container image built on $( date ;).\" > /etc/motd\nRUN /usr/local/sbin/install-jing.sh\n#  Update system databases for user convenience.\nRUN mandb &> /dev/null\nRUN updatedb &> /dev/null\n#  Remediate security after all packages are installed.\nRUN /usr/sbin/oscap-remediate.sh\n#  Run oval security scan after remediation.\n#  This script exits non-zero if container is non-compliant,\n#  so 'docker build' fails if container has known vulnerabilities.\n#  IOW it's impossible to build an image with known vulnerabilities.\nRUN /usr/sbin/oval-vulnerability-scan.sh\nEXPOSE 22/tcp\nENV LANG=\"C\"\nCMD /usr/sbin/start.sh\n","injectedSmells":[],"originalDockerfileHash":"aeea3d9653e488d116de5b19ee7bfa9e","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://index.docker.io/_/fedora/\nFROM fedora:21\n#   http://jumanjiman.github.io/\nMAINTAINER Paul Morgan <jumanjiman@gmail.com>\n#   Allow to install docs since this is a dev environment.\nRUN sed -i '/tsflags=nodocs/d' /etc/yum.conf\nRUN yum update -y ; yum clean all\n#   Work around https://bugzilla.redhat.com/show_bug.cgi?id=1066983\n#   and remove prohibited packages.\nRUN yum remove -y vim-minimal at sudo ; yum clean all\n#   Install dependencies.\nRUN yum install -y asciinema bind-utils bc devscripts-minimal dictd diction ftp tftp hostname openssh-server openssh-clients man-db man-pages mlocate gcc gcc-c++ glibc-static gflags gflags-devel gnupg ruby ruby-devel rubygem-bundler sqlite-devel libcurl-devel libxslt-devel libxml2-devel nano vim-enhanced bash-completion java-1.8.0-openjdk-headless jq openssl openssl-devel crypto-utils tree php python-devel python-nose python-setuptools python-pep8 rpm-python python3-devel python3-nose python3-setuptools python3-pep8 rpm-python3 pylint python3-pylint pykickstart rpm-build libxslt createrepo git-annex scap-security-guide strace tmux tmux-powerline reptyr golang golang-cover golang-github-coreos-go-systemd-devel golang-godoc golang-vim golang-github-coreos-go-log-devel npm nodeunit bzr tito git tar patch diffutils which git-remote-hg git-svn make mutt jwhois xmlstarlet python-pygraphviz-doc python-pygraphviz python-xdot python3-pygraphviz python-lxml-docs python-lxml python3-lxml python-requests-kerberos python-requests-mock python-requests-oauthlib python3-requests-mock python3-requests-oauthlib python-CacheControl python-pyramid-tm python-requests python3-CacheControl python3-pyramid-tm python3-requests python-pyasn1-modules python3-pyasn1-modules python-pyasn1 python3-pyasn1 python-psycopg2 python-psycopg2-debug python-psycopg2-doc python3-psycopg2.x86_64 python3-psycopg2-debug python-scp python-paramiko numpy python3-numpydoc python3-numpy python3-PyYAML python3-scipy python-numpydoc PyYAML scipy python-matplotlib-data-fonts python-matplotlib-doc python-matplotlib python3-matplotlib wget ; yum clean all\n#   Break su for everybody but root.\n#   Break cron for everybody.\n#   Populate /etc/skel\n#   Annoy user if they forget to set their username and email in git.\n#   Configure security.\n#   Install tools for validating xml.\nCOPY . /\nRUN chmod 0400 /usr/bin/crontab\nRUN chmod 0400 /usr/sbin/crond\n#   Install duo for multifactor authentication.\nRUN rpm --import https://www.duosecurity.com/RPM-GPG-KEY-DUO ; yum -y install duo_unix ; yum clean all\n#   Avoid error `Only root may specify -c or -f` when using\n#   ForceCommand with `-f` option at non-root ssh login.\n#   https://www.duosecurity.com/docs/duounix-faq#can-i-use-login_duo-to-protect-non-root-shared-accounts,-or-can-i-do-an-install-without-root-privileges?\nRUN chmod u-s /usr/sbin/login_duo\n#   Create sandbox user.\nRUN useradd user\n#   Ugly workaround. Really ugly.\nRUN usermod -aG slocate user\n#   Install latest docker client.\nRUN curl -sS -L -o /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-latest ; curl -sS -L -o /usr/bin/docker-compose https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s `-`uname -m ` ; chmod 0755 /usr/bin/docker*\n#   https://www.npmjs.com/package/dockerlint\nRUN npm install dockerlint -g\n#   Do not track changes in volumes.\nVOLUME [\"/home/user\", \"/media/state/etc/ssh\"]\n#   Be informative after successful login.\nRUN echo \"App container image built on $( date ;).\" > /etc/motd\nRUN /usr/local/sbin/install-jing.sh\n#   Update system databases for user convenience.\nRUN mandb &> /dev/null\nRUN updatedb &> /dev/null\n#   Remediate security after all packages are installed.\nRUN /usr/sbin/oscap-remediate.sh\n#   Run oval security scan after remediation.\n#   This script exits non-zero if container is non-compliant,\n#   so 'docker build' fails if container has known vulnerabilities.\n#   IOW it's impossible to build an image with known vulnerabilities.\nRUN /usr/sbin/oval-vulnerability-scan.sh\nEXPOSE 22/tcp\nENV LANG=\"C\"\nCMD /usr/sbin/start.sh\n","originalDockerfileUglifiedHash":"7350cb10828666ba7314b53c7feb7d24","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bc30436fa5ee1760e121b61d7c4ef8d013febbc5.dockerfile"}