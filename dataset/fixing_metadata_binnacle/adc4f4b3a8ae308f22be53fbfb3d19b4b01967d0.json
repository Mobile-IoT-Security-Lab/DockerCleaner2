{"seed":1654125383,"processedDockerfileHash":"5a52ea92e0724ed419c9243265272c0d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'php-fpm' base Image, visit its repository on Github\n#      https://github.com/Laradock/php-fpm\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nARG LARADOCK_PHP_VERSION\n#   FROM laradock/php-fpm:2.2-${LARADOCK_PHP_VERSION}\nFROM letsdockerize/laradock-php-fpm:2.4-${LARADOCK_PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\nARG LARADOCK_PHP_VERSION\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install --no-install-recommends apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_SOAP=true\n#\n#  ##########################################################################\n#   SSH2:\n#  ##########################################################################\nARG INSTALL_SSH2=false\nRUN if [ ${INSTALL_SSH2} = true ] ; then apt-get install --no-install-recommends libssh2-1-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a ssh2-0.13 ; else pecl install -a ssh2-1.1.2 ; fi \\\n && docker-php-ext-enable ssh2 ; fi\n#  ##########################################################################\n#   libfaketime:\n#  ##########################################################################\nUSER root\nARG INSTALL_FAKETIME=false\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then apt-get install --no-install-recommends libfaketime -y ; fi\n#  ####################################\n#   gd:\n#  ####################################\nRUN apt-get update \\\n && apt-get install --no-install-recommends libwebp-dev -y\n#   Install the PHP gd library\nRUN docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-webp-dir=/usr/include --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install --no-install-recommends libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ##########################################################################\n#   XSL:\n#  ##########################################################################\nARG INSTALL_XSL=false\nRUN if [ ${INSTALL_XSL} = true ] ; then apt-get install --no-install-recommends libxslt-dev -y \\\n && docker-php-ext-install xsl ; fi\n#  ##########################################################################\n#   pgsql\n#  ##########################################################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then docker-php-ext-install pgsql ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nARG INSTALL_PG_CLIENT=false\nARG INSTALL_POSTGIS=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install --no-install-recommends postgresql-client -y \\\n && if [ ${INSTALL_POSTGIS} = true ] ; then apt-get install --no-install-recommends postgis -y ; fi ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nARG INSTALL_PHPDBG=false\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install --no-install-recommends php${LARADOCK_PHP_VERSION}-phpdbg -y --force-yes ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n#  ##########################################################################\n#   Taint EXTENSION\n#  ##########################################################################\nARG INSTALL_TAINT=false\nRUN if [ ${INSTALL_TAINT} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"7\" ] ; then pecl install taint \\\n && docker-php-ext-enable taint \\\n && php -m | grep -q 'taint' ; fi ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   Xhprof:\n#  ##########################################################################\nARG INSTALL_XHPROF=false\nRUN if [ ${INSTALL_XHPROF} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = 7 ] ; then curl -L -o /tmp/xhprof.tar.gz \"https://github.com/tideways/php-xhprof-extension/archive/v4.1.6.tar.gz\" ; else curl -L -o /tmp/xhprof.tar.gz \"https://codeload.github.com/phacility/xhprof/tar.gz/master\" ; fi \\\n && mkdir -p xhprof \\\n && tar -C xhprof -zxvf /tmp/xhprof.tar.gz --strip 1 \\\n && (cd xhprof \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install ) \\\n && rm -r xhprof \\\n && rm /tmp/xhprof.tar.gz ; fi\nCOPY ./xhprof.ini /usr/local/etc/php/conf.d\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends cmake -y \\\n && curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz \\\n && mkdir -p rabbitmq-c \\\n && tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 \\\n && cd rabbitmq-c/ \\\n && mkdir _build \\\n && cd _build/ \\\n && cmake .. \\\n && cmake --build . --target install \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && docker-php-ext-install sockets ; fi\n#  ##########################################################################\n#   pcntl\n#  ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n#  ##########################################################################\n#   bcmath:\n#  ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ##########################################################################\n#   GMP (GNU Multiple Precision):\n#  ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install --no-install-recommends libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n#  ##########################################################################\n#   PHP Memcached:\n#  ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ##########################################################################\n#   Exif:\n#  ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ##########################################################################\n#   PHP Aerospike:\n#  ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nRUN set -xe ; if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install --no-install-recommends sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz ; fi \\\n && mkdir -p /tmp/aerospike-client-php \\\n && tar -C /tmp/aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd /tmp/aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd /tmp/aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n#  ##########################################################################\n#   IonCube Loader:\n#  ##########################################################################\nARG INSTALL_IONCUBE=false\nRUN if [ ${INSTALL_IONCUBE} = true ] ; then curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz \\\n && tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp \\\n && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so $( php -r \"echo ini_get('extension_dir');\" ;)/ioncube_loader.so \\\n && printf \"zend_extension=ioncube_loader.so\\n\" > $PHP_INI_DIR/conf.d/0ioncube.ini \\\n && rm -rf /tmp/ioncube* ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Mysqli Modifications:\n#  ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install --no-install-recommends zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install --no-install-recommends poppler-utils ghostscript -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install --no-install-recommends libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ##########################################################################\n#   SQL SERVER:\n#  ##########################################################################\nARG INSTALL_MSSQL=false\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then apt-get install --no-install-recommends freetds-dev libsybdb5 -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \\\n && docker-php-ext-install mssql pdo_dblib \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else apt-get install --no-install-recommends apt-transport-https gnupg -y \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql17 locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && ln -sfn /etc/locale.alias /usr/share/locale/locale.alias \\\n && locale-gen \\\n && if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install pdo_sqlsrv-5.3.0 sqlsrv-5.3.0 ; else pecl install pdo_sqlsrv sqlsrv ; fi \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv \\\n && php -m | grep -q 'pdo_sqlsrv' \\\n && php -m | grep -q 'sqlsrv' ; fi ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install --no-install-recommends jpegoptim optipng pngquant gifsicle -y ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install --no-install-recommends libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install --no-install-recommends libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n#  ##########################################################################\n#   Calendar:\n#  ##########################################################################\nUSER root\nARG INSTALL_CALENDAR=false\nRUN if [ ${INSTALL_CALENDAR} = true ] ; then docker-php-ext-configure calendar \\\n && docker-php-ext-install calendar ; fi\n#  ##########################################################################\n#   Phalcon:\n#  ##########################################################################\nARG INSTALL_PHALCON=false\nARG LARADOCK_PHALCON_VERSION\nENV LARADOCK_PHALCON_VERSION=\"${LARADOCK_PHALCON_VERSION}\"\n#   Copy phalcon configration\nCOPY ./phalcon.ini /usr/local/etc/php/conf.d/phalcon.ini.disable\nRUN if [ $INSTALL_PHALCON = true ] ; then apt-get update \\\n && apt-get install --no-install-recommends unzip libpcre3-dev gcc make re2c -y \\\n && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip \\\n && unzip -d /tmp/ /tmp/cphalcon.zip \\\n && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build \\\n && ./install \\\n && mv /usr/local/etc/php/conf.d/phalcon.ini.disable /usr/local/etc/php/conf.d/phalcon.ini \\\n && rm -rf /tmp/cphalcon* ; fi\n#  ##########################################################################\n#   APCU:\n#  ##########################################################################\nARG INSTALL_APCU=false\nRUN if [ ${INSTALL_APCU} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a apcu-4.0.11 ; else pecl install apcu ; fi \\\n && docker-php-ext-enable apcu ; fi\n#  ##########################################################################\n#   YAML:\n#  ##########################################################################\nUSER root\nARG INSTALL_YAML=false\nRUN if [ ${INSTALL_YAML} = true ] ; then apt-get install --no-install-recommends libyaml-dev -y ;if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a yaml-1.3.2 ; else pecl install yaml ; fi \\\n && docker-php-ext-enable yaml ; fi\n#  ##########################################################################\n#   RDKAFKA:\n#  ##########################################################################\nARG INSTALL_RDKAFKA=false\nRUN if [ ${INSTALL_RDKAFKA} = true ] ; then apt-get install --no-install-recommends librdkafka-dev -y \\\n && pecl install rdkafka \\\n && docker-php-ext-enable rdkafka ; fi\n#  ##########################################################################\n#   Install additional locales:\n#  ##########################################################################\nARG INSTALL_ADDITIONAL_LOCALES=false\nARG ADDITIONAL_LOCALES\nRUN if [ ${INSTALL_ADDITIONAL_LOCALES} = true ] ; then apt-get install --no-install-recommends locales -y \\\n && echo '' >> /usr/share/locale/locale.alias \\\n && temp=\"${ADDITIONAL_LOCALES%\\\"}\" \\\n && temp=\"${temp#\\\"}\" \\\n && for i in ${temp}; do sed -i \"/$i/s/^#//g\" /etc/locale.gen ; done \\\n && locale-gen ; fi\n#  ##########################################################################\n#   MySQL Client:\n#  ##########################################################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update -yqq \\\n && apt-get install --no-install-recommends mysql-client -y ; fi\n#  ##########################################################################\n#   ping:\n#  ##########################################################################\nUSER root\nARG INSTALL_PING=false\nRUN if [ ${INSTALL_PING} = true ] ; then apt-get update -yqq \\\n && apt-get install --no-install-recommends inetutils-ping -y ; fi\n#  ##########################################################################\n#   sshpass:\n#  ##########################################################################\nUSER root\nARG INSTALL_SSHPASS=false\nRUN if [ ${INSTALL_SSHPASS} = true ] ; then apt-get update -yqq \\\n && apt-get install --no-install-recommends sshpass -y ; fi\n#  ##########################################################################\n#   FFMPEG:\n#  ##########################################################################\nUSER root\nARG INSTALL_FFMPEG=false\nRUN if [ ${INSTALL_FFMPEG} = true ] ; then apt-get update -yqq \\\n && apt-get install --no-install-recommends ffmpeg -y ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${LARADOCK_PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nARG PUID=1000\nENV PUID=\"${PUID}\"\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u ${PUID} www-data\n#   Adding the faketime library to the preload file needs to be done last\n#   otherwise it will preload it for all commands that follow in this file\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then echo \"/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1\" > /etc/ld.so.preload; fi\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\n#  To edit the 'php-fpm' base Image, visit its repository on Github\n#     https://github.com/Laradock/php-fpm\n#\n#  To change its version, see the available Tags on the Docker Hub:\n#     https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#  Note: Base Image name format {image-tag}-{php-version}\n#\nARG LARADOCK_PHP_VERSION\n#  FROM laradock/php-fpm:2.2-${LARADOCK_PHP_VERSION}\nFROM letsdockerize/laradock-php-fpm:2.4-${LARADOCK_PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\nARG LARADOCK_PHP_VERSION\n#  Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#  Example:\n#    - INSTALL_SOAP=true\n#\n# ##########################################################################\n#  SSH2:\n# ##########################################################################\nARG INSTALL_SSH2=false\nRUN if [ ${INSTALL_SSH2} = true ] ; then apt-get install libssh2-1-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a ssh2-0.13 ; else pecl install -a ssh2-1.1.2 ; fi \\\n && docker-php-ext-enable ssh2 ; fi\n# ##########################################################################\n#  libfaketime:\n# ##########################################################################\nUSER root\nARG INSTALL_FAKETIME=false\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then apt-get install libfaketime -y ; fi\n# ####################################\n#  gd:\n# ####################################\nRUN apt-get update \\\n && apt-get install libwebp-dev -y\n#  Install the PHP gd library\nRUN docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-webp-dir=/usr/include --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n# ##########################################################################\n#  SOAP:\n# ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n# ##########################################################################\n#  XSL:\n# ##########################################################################\nARG INSTALL_XSL=false\nRUN if [ ${INSTALL_XSL} = true ] ; then apt-get install libxslt-dev -y \\\n && docker-php-ext-install xsl ; fi\n# ##########################################################################\n#  pgsql\n# ##########################################################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then docker-php-ext-install pgsql ; fi\n# ##########################################################################\n#  pgsql client\n# ##########################################################################\nARG INSTALL_PG_CLIENT=false\nARG INSTALL_POSTGIS=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install postgresql-client -y \\\n && if [ ${INSTALL_POSTGIS} = true ] ; then apt-get install postgis -y ; fi ; fi\n# ##########################################################################\n#  xDebug:\n# ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#  Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n# ##########################################################################\n#  Phpdbg:\n# ##########################################################################\nARG INSTALL_PHPDBG=false\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${LARADOCK_PHP_VERSION}-phpdbg -y --force-yes ; fi\n# ##########################################################################\n#  Blackfire:\n# ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n# ##########################################################################\n#  PHP REDIS EXTENSION\n# ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n# ##########################################################################\n#  Swoole EXTENSION\n# ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n# ##########################################################################\n#  Taint EXTENSION\n# ##########################################################################\nARG INSTALL_TAINT=false\nRUN if [ ${INSTALL_TAINT} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"7\" ] ; then pecl install taint \\\n && docker-php-ext-enable taint \\\n && php -m | grep -q 'taint' ; fi ; fi\n# ##########################################################################\n#  MongoDB:\n# ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n# ##########################################################################\n#  Xhprof:\n# ##########################################################################\nARG INSTALL_XHPROF=false\nRUN if [ ${INSTALL_XHPROF} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = 7 ] ; then curl -L -o /tmp/xhprof.tar.gz \"https://github.com/tideways/php-xhprof-extension/archive/v4.1.6.tar.gz\" ; else curl -L -o /tmp/xhprof.tar.gz \"https://codeload.github.com/phacility/xhprof/tar.gz/master\" ; fi \\\n && mkdir -p xhprof \\\n && tar -C xhprof -zxvf /tmp/xhprof.tar.gz --strip 1 \\\n && (cd xhprof \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install ) \\\n && rm -r xhprof \\\n && rm /tmp/xhprof.tar.gz ; fi\nCOPY ./xhprof.ini /usr/local/etc/php/conf.d\n# ##########################################################################\n#  AMQP:\n# ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get update \\\n && apt-get install cmake -y \\\n && curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz \\\n && mkdir -p rabbitmq-c \\\n && tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 \\\n && cd rabbitmq-c/ \\\n && mkdir _build \\\n && cd _build/ \\\n && cmake .. \\\n && cmake --build . --target install \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && docker-php-ext-install sockets ; fi\n# ##########################################################################\n#  pcntl\n# ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n# ##########################################################################\n#  bcmath:\n# ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n# ##########################################################################\n#  GMP (GNU Multiple Precision):\n# ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n# ##########################################################################\n#  PHP Memcached:\n# ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n# ##########################################################################\n#  Exif:\n# ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n# ##########################################################################\n#  PHP Aerospike:\n# ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nRUN set -xe ; if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz ; fi \\\n && mkdir -p /tmp/aerospike-client-php \\\n && tar -C /tmp/aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd /tmp/aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd /tmp/aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n# ##########################################################################\n#  IonCube Loader:\n# ##########################################################################\nARG INSTALL_IONCUBE=false\nRUN if [ ${INSTALL_IONCUBE} = true ] ; then curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz \\\n && tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp \\\n && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so $( php -r \"echo ini_get('extension_dir');\" ;)/ioncube_loader.so \\\n && printf \"zend_extension=ioncube_loader.so\\n\" > $PHP_INI_DIR/conf.d/0ioncube.ini \\\n && rm -rf /tmp/ioncube* ; fi\n# ##########################################################################\n#  Opcache:\n# ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#  Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n# ##########################################################################\n#  Mysqli Modifications:\n# ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n# ##########################################################################\n#  Human Language and Character Encoding Support:\n# ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n# ##########################################################################\n#  GHOSTSCRIPT:\n# ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n# ##########################################################################\n#  LDAP:\n# ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n# ##########################################################################\n#  SQL SERVER:\n# ##########################################################################\nARG INSTALL_MSSQL=false\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then apt-get install freetds-dev libsybdb5 -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \\\n && docker-php-ext-install mssql pdo_dblib \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else apt-get install apt-transport-https gnupg -y \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql17 locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && ln -sfn /etc/locale.alias /usr/share/locale/locale.alias \\\n && locale-gen \\\n && if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install pdo_sqlsrv-5.3.0 sqlsrv-5.3.0 ; else pecl install pdo_sqlsrv sqlsrv ; fi \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv \\\n && php -m | grep -q 'pdo_sqlsrv' \\\n && php -m | grep -q 'sqlsrv' ; fi ; fi\n# ##########################################################################\n#  Image optimizers:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n# ##########################################################################\n#  ImageMagick:\n# ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n# ##########################################################################\n#  IMAP:\n# ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n# ##########################################################################\n#  Calendar:\n# ##########################################################################\nUSER root\nARG INSTALL_CALENDAR=false\nRUN if [ ${INSTALL_CALENDAR} = true ] ; then docker-php-ext-configure calendar \\\n && docker-php-ext-install calendar ; fi\n# ##########################################################################\n#  Phalcon:\n# ##########################################################################\nARG INSTALL_PHALCON=false\nARG LARADOCK_PHALCON_VERSION\nENV LARADOCK_PHALCON_VERSION=\"${LARADOCK_PHALCON_VERSION}\"\n#  Copy phalcon configration\nCOPY ./phalcon.ini /usr/local/etc/php/conf.d/phalcon.ini.disable\nRUN if [ $INSTALL_PHALCON = true ] ; then apt-get update \\\n && apt-get install unzip libpcre3-dev gcc make re2c -y \\\n && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip \\\n && unzip -d /tmp/ /tmp/cphalcon.zip \\\n && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build \\\n && ./install \\\n && mv /usr/local/etc/php/conf.d/phalcon.ini.disable /usr/local/etc/php/conf.d/phalcon.ini \\\n && rm -rf /tmp/cphalcon* ; fi\n# ##########################################################################\n#  APCU:\n# ##########################################################################\nARG INSTALL_APCU=false\nRUN if [ ${INSTALL_APCU} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a apcu-4.0.11 ; else pecl install apcu ; fi \\\n && docker-php-ext-enable apcu ; fi\n# ##########################################################################\n#  YAML:\n# ##########################################################################\nUSER root\nARG INSTALL_YAML=false\nRUN if [ ${INSTALL_YAML} = true ] ; then apt-get install libyaml-dev -y ;if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a yaml-1.3.2 ; else pecl install yaml ; fi \\\n && docker-php-ext-enable yaml ; fi\n# ##########################################################################\n#  RDKAFKA:\n# ##########################################################################\nARG INSTALL_RDKAFKA=false\nRUN if [ ${INSTALL_RDKAFKA} = true ] ; then apt-get install librdkafka-dev -y \\\n && pecl install rdkafka \\\n && docker-php-ext-enable rdkafka ; fi\n# ##########################################################################\n#  Install additional locales:\n# ##########################################################################\nARG INSTALL_ADDITIONAL_LOCALES=false\nARG ADDITIONAL_LOCALES\nRUN if [ ${INSTALL_ADDITIONAL_LOCALES} = true ] ; then apt-get install locales -y \\\n && echo '' >> /usr/share/locale/locale.alias \\\n && temp=\"${ADDITIONAL_LOCALES%\\\"}\" \\\n && temp=\"${temp#\\\"}\" \\\n && for i in ${temp}; do sed -i \"/$i/s/^#//g\" /etc/locale.gen ; done \\\n && locale-gen ; fi\n# ##########################################################################\n#  MySQL Client:\n# ##########################################################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update -yqq \\\n && apt-get install mysql-client -y ; fi\n# ##########################################################################\n#  ping:\n# ##########################################################################\nUSER root\nARG INSTALL_PING=false\nRUN if [ ${INSTALL_PING} = true ] ; then apt-get update -yqq \\\n && apt-get install inetutils-ping -y ; fi\n# ##########################################################################\n#  sshpass:\n# ##########################################################################\nUSER root\nARG INSTALL_SSHPASS=false\nRUN if [ ${INSTALL_SSHPASS} = true ] ; then apt-get update -yqq \\\n && apt-get install sshpass -y ; fi\n# ##########################################################################\n#  FFMPEG:\n# ##########################################################################\nUSER root\nARG INSTALL_FFMPEG=false\nRUN if [ ${INSTALL_FFMPEG} = true ] ; then apt-get update -yqq \\\n && apt-get install ffmpeg -y ; fi\n# ##########################################################################\n#  Check PHP version:\n# ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${LARADOCK_PHP_VERSION}.\"\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nARG PUID=1000\nENV PUID=\"${PUID}\"\n#  Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u ${PUID} www-data\n#  Adding the faketime library to the preload file needs to be done last\n#  otherwise it will preload it for all commands that follow in this file\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then echo \"/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1\" > /etc/ld.so.preload; fi\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","injectedSmells":[],"originalDockerfileHash":"d71f34bbb8966adb29ab43ec6297f347","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'php-fpm' base Image, visit its repository on Github\n#      https://github.com/Laradock/php-fpm\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/php-fpm/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nARG LARADOCK_PHP_VERSION\n#   FROM laradock/php-fpm:2.2-${LARADOCK_PHP_VERSION}\nFROM letsdockerize/laradock-php-fpm:2.4-${LARADOCK_PHP_VERSION}\nLABEL maintainer=\"Mahmoud Zalt <mahmoud@zalt.me>\"\nARG LARADOCK_PHP_VERSION\n#   Set Environment Variables\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   always run apt update when start and after add new source list, then clean up at end.\nRUN set -xe ; apt-get update -yqq \\\n && pecl channel-update pecl.php.net \\\n && apt-get install apt-utils libzip-dev zip unzip -yqq \\\n && docker-php-ext-configure zip --with-libzip \\\n && docker-php-ext-install zip \\\n && php -m | grep -q 'zip'\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_SOAP=true\n#\n#  ##########################################################################\n#   SSH2:\n#  ##########################################################################\nARG INSTALL_SSH2=false\nRUN if [ ${INSTALL_SSH2} = true ] ; then apt-get install libssh2-1-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a ssh2-0.13 ; else pecl install -a ssh2-1.1.2 ; fi \\\n && docker-php-ext-enable ssh2 ; fi\n#  ##########################################################################\n#   libfaketime:\n#  ##########################################################################\nUSER root\nARG INSTALL_FAKETIME=false\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then apt-get install libfaketime -y ; fi\n#  ####################################\n#   gd:\n#  ####################################\nRUN apt-get update \\\n && apt-get install libwebp-dev -y\n#   Install the PHP gd library\nRUN docker-php-ext-configure gd --enable-gd-native-ttf --with-jpeg-dir=/usr/lib --with-webp-dir=/usr/include --with-freetype-dir=/usr/include/freetype2 \\\n && docker-php-ext-install gd\n#  ##########################################################################\n#   SOAP:\n#  ##########################################################################\nARG INSTALL_SOAP=false\nRUN if [ ${INSTALL_SOAP} = true ] ; then rm /etc/apt/preferences.d/no-debian-php \\\n && apt-get install libxml2-dev php-soap -y \\\n && docker-php-ext-install soap ; fi\n#  ##########################################################################\n#   XSL:\n#  ##########################################################################\nARG INSTALL_XSL=false\nRUN if [ ${INSTALL_XSL} = true ] ; then apt-get install libxslt-dev -y \\\n && docker-php-ext-install xsl ; fi\n#  ##########################################################################\n#   pgsql\n#  ##########################################################################\nARG INSTALL_PGSQL=false\nRUN if [ ${INSTALL_PGSQL} = true ] ; then docker-php-ext-install pgsql ; fi\n#  ##########################################################################\n#   pgsql client\n#  ##########################################################################\nARG INSTALL_PG_CLIENT=false\nARG INSTALL_POSTGIS=false\nRUN if [ ${INSTALL_PG_CLIENT} = true ] ; then mkdir -p /usr/share/man/man1 \\\n && mkdir -p /usr/share/man/man7 \\\n && apt-get install postgresql-client -y \\\n && if [ ${INSTALL_POSTGIS} = true ] ; then apt-get install postgis -y ; fi ; fi\n#  ##########################################################################\n#   xDebug:\n#  ##########################################################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install xdebug-2.5.5 ; else pecl install xdebug ; fi \\\n && docker-php-ext-enable xdebug ; fi\n#   Copy xdebug configuration for remote debugging\nCOPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini\nRUN sed -i \"s/xdebug.remote_autostart=0/xdebug.remote_autostart=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.remote_enable=0/xdebug.remote_enable=1/\" /usr/local/etc/php/conf.d/xdebug.ini \\\n && sed -i \"s/xdebug.cli_color=0/xdebug.cli_color=1/\" /usr/local/etc/php/conf.d/xdebug.ini\n#  ##########################################################################\n#   Phpdbg:\n#  ##########################################################################\nARG INSTALL_PHPDBG=false\nRUN if [ ${INSTALL_PHPDBG} = true ] ; then apt-get install php${LARADOCK_PHP_VERSION}-phpdbg -y --force-yes ; fi\n#  ##########################################################################\n#   Blackfire:\n#  ##########################################################################\nARG INSTALL_BLACKFIRE=false\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then version=$( php -r \"echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;\" ;) \\\n && curl -A \"Docker\" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$version \\\n && tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp \\\n && mv /tmp/blackfire-*.so $( php -r \"echo ini_get('extension_dir');\" ;)/blackfire.so \\\n && printf \"extension=blackfire.so\\nblackfire.agent_socket=tcp://blackfire:8707\\n\" > $PHP_INI_DIR/conf.d/blackfire.ini; fi\n#  ##########################################################################\n#   PHP REDIS EXTENSION\n#  ##########################################################################\nARG INSTALL_PHPREDIS=false\nRUN if [ ${INSTALL_PHPREDIS} = true ] ; then printf \"\\n\" | pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && docker-php-ext-enable redis ; fi\n#  ##########################################################################\n#   Swoole EXTENSION\n#  ##########################################################################\nARG INSTALL_SWOOLE=false\nRUN if [ ${INSTALL_SWOOLE} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install swoole-2.0.10 ; else if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install swoole-2.2.0 ; else pecl install swoole ; fi ; fi \\\n && docker-php-ext-enable swoole \\\n && php -m | grep -q 'swoole' ; fi\n#  ##########################################################################\n#   Taint EXTENSION\n#  ##########################################################################\nARG INSTALL_TAINT=false\nRUN if [ ${INSTALL_TAINT} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"7\" ] ; then pecl install taint \\\n && docker-php-ext-enable taint \\\n && php -m | grep -q 'taint' ; fi ; fi\n#  ##########################################################################\n#   MongoDB:\n#  ##########################################################################\nARG INSTALL_MONGO=false\nRUN if [ ${INSTALL_MONGO} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install mongo \\\n && docker-php-ext-enable mongo ; fi \\\n && pecl install mongodb \\\n && docker-php-ext-enable mongodb ; fi\n#  ##########################################################################\n#   Xhprof:\n#  ##########################################################################\nARG INSTALL_XHPROF=false\nRUN if [ ${INSTALL_XHPROF} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = 7 ] ; then curl -L -o /tmp/xhprof.tar.gz \"https://github.com/tideways/php-xhprof-extension/archive/v4.1.6.tar.gz\" ; else curl -L -o /tmp/xhprof.tar.gz \"https://codeload.github.com/phacility/xhprof/tar.gz/master\" ; fi \\\n && mkdir -p xhprof \\\n && tar -C xhprof -zxvf /tmp/xhprof.tar.gz --strip 1 \\\n && (cd xhprof \\\n && phpize \\\n && ./configure \\\n && make \\\n && make install ) \\\n && rm -r xhprof \\\n && rm /tmp/xhprof.tar.gz ; fi\nCOPY ./xhprof.ini /usr/local/etc/php/conf.d\n#  ##########################################################################\n#   AMQP:\n#  ##########################################################################\nARG INSTALL_AMQP=false\nRUN if [ ${INSTALL_AMQP} = true ] ; then apt-get update \\\n && apt-get install cmake -y \\\n && curl -L -o /tmp/rabbitmq-c.tar.gz https://github.com/alanxz/rabbitmq-c/archive/master.tar.gz \\\n && mkdir -p rabbitmq-c \\\n && tar -C rabbitmq-c -zxvf /tmp/rabbitmq-c.tar.gz --strip 1 \\\n && cd rabbitmq-c/ \\\n && mkdir _build \\\n && cd _build/ \\\n && cmake .. \\\n && cmake --build . --target install \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && docker-php-ext-install sockets ; fi\n#  ##########################################################################\n#   pcntl\n#  ##########################################################################\nARG INSTALL_PCNTL=false\nRUN if [ ${INSTALL_PCNTL} = true ] ; then docker-php-ext-install pcntl ; fi\n#  ##########################################################################\n#   bcmath:\n#  ##########################################################################\nARG INSTALL_BCMATH=false\nRUN if [ ${INSTALL_BCMATH} = true ] ; then docker-php-ext-install bcmath ; fi\n#  ##########################################################################\n#   GMP (GNU Multiple Precision):\n#  ##########################################################################\nARG INSTALL_GMP=false\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install libgmp-dev -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h ; fi \\\n && docker-php-ext-install gmp ; fi\n#  ##########################################################################\n#   PHP Memcached:\n#  ##########################################################################\nARG INSTALL_MEMCACHED=false\nRUN if [ ${INSTALL_MEMCACHED} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/2.2.0.tar.gz\" ; else curl -L -o /tmp/memcached.tar.gz \"https://github.com/php-memcached-dev/php-memcached/archive/php7.tar.gz\" ; fi \\\n && mkdir -p memcached \\\n && tar -C memcached -zxvf /tmp/memcached.tar.gz --strip 1 \\\n && (cd memcached \\\n && phpize \\\n && ./configure \\\n && make -j$( nproc ;) \\\n && make install ) \\\n && rm -r memcached \\\n && rm /tmp/memcached.tar.gz \\\n && docker-php-ext-enable memcached ; fi\n#  ##########################################################################\n#   Exif:\n#  ##########################################################################\nARG INSTALL_EXIF=false\nRUN if [ ${INSTALL_EXIF} = true ] ; then docker-php-ext-install exif ; fi\n#  ##########################################################################\n#   PHP Aerospike:\n#  ##########################################################################\nUSER root\nARG INSTALL_AEROSPIKE=false\nRUN set -xe ; if [ ${INSTALL_AEROSPIKE} = true ] ; then apt-get install sudo wget -y \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php5/archive/master.tar.gz ; else curl -L -o /tmp/aerospike-client-php.tar.gz https://github.com/aerospike/aerospike-client-php/archive/master.tar.gz ; fi \\\n && mkdir -p /tmp/aerospike-client-php \\\n && tar -C /tmp/aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then (cd /tmp/aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; else (cd /tmp/aerospike-client-php/src \\\n && phpize \\\n && ./build.sh \\\n && make install ) ; fi \\\n && rm /tmp/aerospike-client-php.tar.gz \\\n && docker-php-ext-enable aerospike ; fi\n#  ##########################################################################\n#   IonCube Loader:\n#  ##########################################################################\nARG INSTALL_IONCUBE=false\nRUN if [ ${INSTALL_IONCUBE} = true ] ; then curl -L -o /tmp/ioncube_loaders_lin_x86-64.tar.gz https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz \\\n && tar zxpf /tmp/ioncube_loaders_lin_x86-64.tar.gz -C /tmp \\\n && mv /tmp/ioncube/ioncube_loader_lin_${LARADOCK_PHP_VERSION}.so $( php -r \"echo ini_get('extension_dir');\" ;)/ioncube_loader.so \\\n && printf \"zend_extension=ioncube_loader.so\\n\" > $PHP_INI_DIR/conf.d/0ioncube.ini \\\n && rm -rf /tmp/ioncube* ; fi\n#  ##########################################################################\n#   Opcache:\n#  ##########################################################################\nARG INSTALL_OPCACHE=false\nRUN if [ ${INSTALL_OPCACHE} = true ] ; then docker-php-ext-install opcache ; fi\n#   Copy opcache configration\nCOPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini\n#  ##########################################################################\n#   Mysqli Modifications:\n#  ##########################################################################\nARG INSTALL_MYSQLI=false\nRUN if [ ${INSTALL_MYSQLI} = true ] ; then docker-php-ext-install mysqli ; fi\n#  ##########################################################################\n#   Human Language and Character Encoding Support:\n#  ##########################################################################\nARG INSTALL_INTL=false\nRUN if [ ${INSTALL_INTL} = true ] ; then apt-get install zlib1g-dev libicu-dev g++ -y \\\n && docker-php-ext-configure intl \\\n && docker-php-ext-install intl ; fi\n#  ##########################################################################\n#   GHOSTSCRIPT:\n#  ##########################################################################\nARG INSTALL_GHOSTSCRIPT=false\nRUN if [ ${INSTALL_GHOSTSCRIPT} = true ] ; then apt-get install poppler-utils ghostscript -y ; fi\n#  ##########################################################################\n#   LDAP:\n#  ##########################################################################\nARG INSTALL_LDAP=false\nRUN if [ ${INSTALL_LDAP} = true ] ; then apt-get install libldap2-dev -y \\\n && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \\\n && docker-php-ext-install ldap ; fi\n#  ##########################################################################\n#   SQL SERVER:\n#  ##########################################################################\nARG INSTALL_MSSQL=false\nRUN set -eux ; if [ ${INSTALL_MSSQL} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then apt-get install freetds-dev libsybdb5 -y \\\n && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \\\n && docker-php-ext-install mssql pdo_dblib \\\n && php -m | grep -q 'mssql' \\\n && php -m | grep -q 'pdo_dblib' ; else apt-get install apt-transport-https gnupg -y \\\n && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \\\n && curl https://packages.microsoft.com/config/debian/9/prod.list > /etc/apt/sources.list.d/mssql-release.list \\\n && apt-get update -yqq \\\n && ACCEPT_EULA=Y apt-get install -y unixodbc unixodbc-dev libgss3 odbcinst msodbcsql17 locales \\\n && echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen \\\n && ln -sfn /etc/locale.alias /usr/share/locale/locale.alias \\\n && locale-gen \\\n && if [ $( php -r \"echo PHP_MINOR_VERSION;\" ;) = \"0\" ] ; then pecl install pdo_sqlsrv-5.3.0 sqlsrv-5.3.0 ; else pecl install pdo_sqlsrv sqlsrv ; fi \\\n && docker-php-ext-enable pdo_sqlsrv sqlsrv \\\n && php -m | grep -q 'pdo_sqlsrv' \\\n && php -m | grep -q 'sqlsrv' ; fi ; fi\n#  ##########################################################################\n#   Image optimizers:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGE_OPTIMIZERS=false\nRUN if [ ${INSTALL_IMAGE_OPTIMIZERS} = true ] ; then apt-get install jpegoptim optipng pngquant gifsicle -y ; fi\n#  ##########################################################################\n#   ImageMagick:\n#  ##########################################################################\nUSER root\nARG INSTALL_IMAGEMAGICK=false\nRUN if [ ${INSTALL_IMAGEMAGICK} = true ] ; then apt-get install libmagickwand-dev imagemagick -y \\\n && pecl install imagick \\\n && docker-php-ext-enable imagick ; fi\n#  ##########################################################################\n#   IMAP:\n#  ##########################################################################\nARG INSTALL_IMAP=false\nRUN if [ ${INSTALL_IMAP} = true ] ; then apt-get install libc-client-dev libkrb5-dev -y \\\n && rm -r /var/lib/apt/lists/* \\\n && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \\\n && docker-php-ext-install imap ; fi\n#  ##########################################################################\n#   Calendar:\n#  ##########################################################################\nUSER root\nARG INSTALL_CALENDAR=false\nRUN if [ ${INSTALL_CALENDAR} = true ] ; then docker-php-ext-configure calendar \\\n && docker-php-ext-install calendar ; fi\n#  ##########################################################################\n#   Phalcon:\n#  ##########################################################################\nARG INSTALL_PHALCON=false\nARG LARADOCK_PHALCON_VERSION\nENV LARADOCK_PHALCON_VERSION=\"${LARADOCK_PHALCON_VERSION}\"\n#   Copy phalcon configration\nCOPY ./phalcon.ini /usr/local/etc/php/conf.d/phalcon.ini.disable\nRUN if [ $INSTALL_PHALCON = true ] ; then apt-get update \\\n && apt-get install unzip libpcre3-dev gcc make re2c -y \\\n && curl -L -o /tmp/cphalcon.zip https://github.com/phalcon/cphalcon/archive/v${LARADOCK_PHALCON_VERSION}.zip \\\n && unzip -d /tmp/ /tmp/cphalcon.zip \\\n && cd /tmp/cphalcon-${LARADOCK_PHALCON_VERSION}/build \\\n && ./install \\\n && mv /usr/local/etc/php/conf.d/phalcon.ini.disable /usr/local/etc/php/conf.d/phalcon.ini \\\n && rm -rf /tmp/cphalcon* ; fi\n#  ##########################################################################\n#   APCU:\n#  ##########################################################################\nARG INSTALL_APCU=false\nRUN if [ ${INSTALL_APCU} = true ] ; then if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a apcu-4.0.11 ; else pecl install apcu ; fi \\\n && docker-php-ext-enable apcu ; fi\n#  ##########################################################################\n#   YAML:\n#  ##########################################################################\nUSER root\nARG INSTALL_YAML=false\nRUN if [ ${INSTALL_YAML} = true ] ; then apt-get install libyaml-dev -y ;if [ $( php -r \"echo PHP_MAJOR_VERSION;\" ;) = \"5\" ] ; then pecl install -a yaml-1.3.2 ; else pecl install yaml ; fi \\\n && docker-php-ext-enable yaml ; fi\n#  ##########################################################################\n#   RDKAFKA:\n#  ##########################################################################\nARG INSTALL_RDKAFKA=false\nRUN if [ ${INSTALL_RDKAFKA} = true ] ; then apt-get install librdkafka-dev -y \\\n && pecl install rdkafka \\\n && docker-php-ext-enable rdkafka ; fi\n#  ##########################################################################\n#   Install additional locales:\n#  ##########################################################################\nARG INSTALL_ADDITIONAL_LOCALES=false\nARG ADDITIONAL_LOCALES\nRUN if [ ${INSTALL_ADDITIONAL_LOCALES} = true ] ; then apt-get install locales -y \\\n && echo '' >> /usr/share/locale/locale.alias \\\n && temp=\"${ADDITIONAL_LOCALES%\\\"}\" \\\n && temp=\"${temp#\\\"}\" \\\n && for i in ${temp}; do sed -i \"/$i/s/^#//g\" /etc/locale.gen ; done \\\n && locale-gen ; fi\n#  ##########################################################################\n#   MySQL Client:\n#  ##########################################################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update -yqq \\\n && apt-get install mysql-client -y ; fi\n#  ##########################################################################\n#   ping:\n#  ##########################################################################\nUSER root\nARG INSTALL_PING=false\nRUN if [ ${INSTALL_PING} = true ] ; then apt-get update -yqq \\\n && apt-get install inetutils-ping -y ; fi\n#  ##########################################################################\n#   sshpass:\n#  ##########################################################################\nUSER root\nARG INSTALL_SSHPASS=false\nRUN if [ ${INSTALL_SSHPASS} = true ] ; then apt-get update -yqq \\\n && apt-get install sshpass -y ; fi\n#  ##########################################################################\n#   FFMPEG:\n#  ##########################################################################\nUSER root\nARG INSTALL_FFMPEG=false\nRUN if [ ${INSTALL_FFMPEG} = true ] ; then apt-get update -yqq \\\n && apt-get install ffmpeg -y ; fi\n#  ##########################################################################\n#   Check PHP version:\n#  ##########################################################################\nRUN set -xe ; php -v | head -n 1 | grep -q \"PHP ${LARADOCK_PHP_VERSION}.\"\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\nCOPY ./laravel.ini /usr/local/etc/php/conf.d\nCOPY ./xlaravel.pool.conf /usr/local/etc/php-fpm.d/\nUSER root\nARG PUID=1000\nENV PUID=\"${PUID}\"\n#   Clean up\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && rm /var/log/lastlog /var/log/faillog\nRUN usermod -u ${PUID} www-data\n#   Adding the faketime library to the preload file needs to be done last\n#   otherwise it will preload it for all commands that follow in this file\nRUN if [ ${INSTALL_FAKETIME} = true ] ; then echo \"/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1\" > /etc/ld.so.preload; fi\nWORKDIR /var/www\nCMD [\"php-fpm\"]\nEXPOSE 9000/tcp\n","originalDockerfileUglifiedHash":"478c12c8a3adf351c0c31dfb36285a68","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/adc4f4b3a8ae308f22be53fbfb3d19b4b01967d0.dockerfile"}