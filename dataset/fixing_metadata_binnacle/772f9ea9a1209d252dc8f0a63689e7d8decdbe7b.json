{"seed":1302045726,"processedDockerfileHash":"2cb680fed0c1a0d859d5d998e487330d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM node:10.15.3-stretch-slim\n#   Get key and repo for google chrome stable\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends git-core build-essential vim python python-pip -y )\n#   Timezone\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#   get fonts for chrome (for screenshots etc\nRUN (apt-get update ;apt-get install --no-install-recommends fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont -y )\nRUN npm install npm@9.6.4 -g\n#   Gigantic list of deps to run chromium headless on debian (see https://github.com/GoogleChrome/puppeteer/issues/290#issuecomment-322838700)\nRUN (apt-get update ;apt-get install --no-install-recommends gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget -y )\n#   Install regular Chrome as an alternative - add selection in web frontend later?\nRUN (apt-get update ;apt-get install --no-install-recommends google-chrome-stable -y )\nRUN mkdir -p /archive\nRUN mkdir -p /scripts\n#   Get squidwarc w puppeteer support\nRUN mkdir -p /usr/src/app\nRUN mkdir -p /jobs\nWORKDIR /usr/src/app\n#   install squidwarc while we have access to python 2.7\nRUN git clone https://github.com/N0taN3rd/Squidwarc.git\nWORKDIR Squidwarc\n#   Temporary fix for node-warc submodule\nRUN git submodule deinit -f node-warc\nRUN npm install\nRUN git clone https://github.com/N0taN3rd/node-warc.git\nWORKDIR node-warc\nRUN npm install\nWORKDIR Squidwarc\n#   get python 3.6.6 (build from source)\nENV LANG=\"C.UTF-8\"\nRUN (apt-get update ;apt-get install --no-install-recommends tk-dev libssl-dev -y )\nENV PYTHON_VERSION=\"3.6.6\"\nRUN set -ex \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"19.0\"\nRUN python --version\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python get-pip.py --disable-pip-version-check \"pip==$PYTHON_PIP_VERSION\" ; pip --version ; find /usr/local -depth\n#   Continue with rest of archiver app\nCOPY scripts/* /scripts/\nWORKDIR /usr/src/app\nCOPY ./requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY ./worker.py worker.py\nCOPY ./wait-for.sh wait-for.sh\nRUN (apt-get update ;apt-get install --no-install-recommends netcat -y )\nCMD [\"python\", \"worker.py\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"FROM node:10.15.3-stretch-slim\n#  Get key and repo for google chrome stable\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list\nRUN apt-get update\nRUN apt-get install git-core build-essential vim python python-pip -y\n#  Timezone\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  get fonts for chrome (for screenshots etc\nRUN apt-get install --no-install-recommends fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont -y\nRUN npm install npm -g\n#  Gigantic list of deps to run chromium headless on debian (see https://github.com/GoogleChrome/puppeteer/issues/290#issuecomment-322838700)\nRUN apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget -y\n#  Install regular Chrome as an alternative - add selection in web frontend later?\nRUN apt-get install google-chrome-stable -y\nRUN mkdir -p /archive\nRUN mkdir -p /scripts\n#  Get squidwarc w puppeteer support\nRUN mkdir -p /usr/src/app\nRUN mkdir -p /jobs\nWORKDIR /usr/src/app\n#  install squidwarc while we have access to python 2.7\nRUN git clone https://github.com/N0taN3rd/Squidwarc.git\nWORKDIR Squidwarc\n#  Temporary fix for node-warc submodule\nRUN git submodule deinit -f node-warc\nRUN npm install\nRUN git clone https://github.com/N0taN3rd/node-warc.git\nWORKDIR node-warc\nRUN npm install\nWORKDIR Squidwarc\n#  get python 3.6.6 (build from source)\nENV LANG=\"C.UTF-8\"\nRUN apt-get install --no-install-recommends tk-dev libssl-dev -y\nENV PYTHON_VERSION=\"3.6.6\"\nRUN set -ex \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth ( ( -type d -a ( -name test -o -name tests ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' ) ) ) -exec rm -rf '{}' + \\\n && rm -rf /usr/src/python \\\n && python3 --version\n#  make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n#  if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"19.0\"\nRUN python --version\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python get-pip.py --disable-pip-version-check \"pip==$PYTHON_PIP_VERSION\" ; pip --version ; find /usr/local -depth ( ( -type d -a ( -name test -o -name tests ) ) -o ( -type f -a ( -name '*.pyc' -o -name '*.pyo' ) ) ) -exec rm -rf '{}' + ; rm -f get-pip.py\n#  Continue with rest of archiver app\nADD scripts/* /scripts/\nWORKDIR /usr/src/app\nCOPY ./requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY ./worker.py worker.py\nCOPY ./wait-for.sh wait-for.sh\nRUN apt-get install netcat -y\nCMD [\"python\", \"worker.py\"]\n","injectedSmells":[],"originalDockerfileHash":"daead30da3a7fff3ca5a97f94d9ba41e","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM node:10.15.3-stretch-slim\n#   Get key and repo for google chrome stable\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list\nRUN apt-get update\nRUN apt-get install git-core build-essential vim python python-pip -y\n#   Timezone\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#   get fonts for chrome (for screenshots etc\nRUN apt-get install --no-install-recommends fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst ttf-freefont -y\nRUN npm install npm -g\n#   Gigantic list of deps to run chromium headless on debian (see https://github.com/GoogleChrome/puppeteer/issues/290#issuecomment-322838700)\nRUN apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget -y\n#   Install regular Chrome as an alternative - add selection in web frontend later?\nRUN apt-get install google-chrome-stable -y\nRUN mkdir -p /archive\nRUN mkdir -p /scripts\n#   Get squidwarc w puppeteer support\nRUN mkdir -p /usr/src/app\nRUN mkdir -p /jobs\nWORKDIR /usr/src/app\n#   install squidwarc while we have access to python 2.7\nRUN git clone https://github.com/N0taN3rd/Squidwarc.git\nWORKDIR Squidwarc\n#   Temporary fix for node-warc submodule\nRUN git submodule deinit -f node-warc\nRUN npm install\nRUN git clone https://github.com/N0taN3rd/node-warc.git\nWORKDIR node-warc\nRUN npm install\nWORKDIR Squidwarc\n#   get python 3.6.6 (build from source)\nENV LANG=\"C.UTF-8\"\nRUN apt-get install --no-install-recommends tk-dev libssl-dev -y\nENV PYTHON_VERSION=\"3.6.6\"\nRUN set -ex \\\n && wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n && wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n && mkdir -p /usr/src/python \\\n && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n && rm python.tar.xz \\\n && cd /usr/src/python \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && ./configure --build=\"$gnuArch\" --enable-loadable-sqlite-extensions --enable-shared --with-system-expat --with-system-ffi --without-ensurepip \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && ldconfig \\\n && find /usr/local -depth\n#   make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n && ln -s idle3 idle \\\n && ln -s pydoc3 pydoc \\\n && ln -s python3 python \\\n && ln -s python3-config python-config\n#   if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION=\"19.0\"\nRUN python --version\nRUN set -ex ; wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py' ; python get-pip.py --disable-pip-version-check \"pip==$PYTHON_PIP_VERSION\" ; pip --version ; find /usr/local -depth\n#   Continue with rest of archiver app\nADD scripts/* /scripts/\nWORKDIR /usr/src/app\nCOPY ./requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nCOPY ./worker.py worker.py\nCOPY ./wait-for.sh wait-for.sh\nRUN apt-get install netcat -y\nCMD [\"python\", \"worker.py\"]\n","originalDockerfileUglifiedHash":"d19c37730f5a147ef8a6aee51e501741","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/772f9ea9a1209d252dc8f0a63689e7d8decdbe7b.dockerfile"}