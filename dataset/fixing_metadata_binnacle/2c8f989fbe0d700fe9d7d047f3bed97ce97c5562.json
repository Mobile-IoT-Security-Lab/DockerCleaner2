{"seed":2319353274,"processedDockerfileHash":"fee927ce38e5f17846544a353c473630","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2017 Intel Corporation\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   ------------------------------------------------------------------------------\n#   Description:\n#     Builds the environment with all prerequistes needed to build Private Data Objects.\n#\n#    Configuration (build) paramaters\n#    - proxy configuration: \thttps_proxy http_proxy ftp_proxy, no_proxy  (default: undefined)\n#    - ubuntu base image to use: \tUBUNTU_VERSION (default: bionic)\n#    - sgx sdk version: \t\tSGX_SDK (default: sgx_2.4)\n#    - openssl version: \t\tOPENSSL (default: 1.1.0j)\n#    - sgxssl version: \t\tSGXSSL  (default: v2.4.1)\n#    - additional apt packages:\tADD_APT_PKGS (default: )\n#   Build:\n#     $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-dev\n#     if behind a proxy, you might want to add also below options\n#     --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy --build-arg=$no_proxy\n#     if you want to build with different version than 16.04/xenial, add a build arg UBUNTU_VERSION, e.g., for 18.04 do --build-arg UBUNTU_VERSION=bionic\n#\n#   Run:\n#     $ cd <directory where you checked out private-data-objects>\n#     $ docker run -it pdo-dev\n#     - to run with SGX HW, add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#       then you can build system as \"usual\", e.g., to build it as\n#          . /project/pdo/src/build/common-config.sh\n#          make -C /project/pdo/src/build/\n#       etc etc\n#       Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#       or the PSW/aesmd might cause enclave launch problems\n#     - if behind a proxy, you might want to add also below options\n#       --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy --env no_proxy=$no_proxy\n#     - if you want to debug with gdb and alike, you also might want to add options\n#       '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#     - for develooping based on source in host you might map source into container with an option\n#       like -v $(pwd):/project/pdo/src/private-data-objects/\nARG UBUNTU_VERSION=bionic\n#   16.04 -> xenial, 17.10 -> artful, 18.04 -> bionic\n#   NOTE: xenial might not work anymore (see below), preferred choice is bionic ..\nFROM ubuntu:${UBUNTU_VERSION}\nARG UBUNTU_VERSION=bionic\n#   for bizare docker reason, we have to redefine it here ...\nARG SGX_SDK=sgx_2.4\nARG OPENSSL=1.1.0j\nARG SGXSSL=v2.4.1\nARG ADD_APT_PKGS\n#   Add necessary packages\n#   TODO(xenial): we need to namnually install protobuf 3 as xenial has v2\n#   Note: ocamlbuild is required by PREREQ but does not exist for xenial. However, the relevant componets are part of 'ocaml' package, later ubuntu split up that package ...\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential ca-certificates cmake curl dh-autoreconf git libcurl4-openssl-dev liblmdb-dev libprotobuf-dev libssl-dev libtool make ocaml pkg-config protobuf-compiler python python3-dev python3-venv python3-virtualenv software-properties-common swig tar unzip virtualenv wget $ADD_APT_PKGS -y -q \\\n && if [ \"$UBUNTU_VERSION\" = \"bionic\" ] || [ \"$UBUNTU_VERSION\" = \"artful\" ] ; then apt-get install --no-install-recommends libsecp256k1-dev ocamlbuild xxd -y -q ; fi \\\n && apt-get -y -q upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && sed -i '1s;^;. /etc/profile.d/pdo.sh\\n;' /etc/bash.bashrc\n#   Install SGX SDK\n#   we install from source as with binary distribution it's difficult to get library dependencies correct\n#   and work-around the somewhat hacky way we have to install PSW (where we really only need the rts libs\n#   but not the aesmd service which we assume to run in the host)\n#   Notes:\n#   - to make PSW installer work we have to\n#     - disable test for presence of kernel modules (as during build we are not really seeing them)\n#     - skip install and configure of aesmd service\n#   - install before openssl as this might cause additional trouble\nRUN mkdir -p /opt/intel\nWORKDIR /opt/intel\nRUN git clone --branch ${SGX_SDK} https://github.com/01org/linux-sgx.git \\\n && cd linux-sgx \\\n && ./download_prebuilt.sh \\\n && sed -i '1,$s;grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;true # grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && sed -i '1,$s;${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;# ${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && make \\\n && make sdk_install_pkg \\\n && make psw_install_pkg \\\n && cd .. \\\n && echo \"yes\" | ./linux-sgx/linux/installer/bin/sgx_linux_x64_sdk_*.bin \\\n && ./linux-sgx/linux/installer/bin/sgx_linux_x64_psw_*.bin \\\n && rm -rf linux-sgx \\\n && echo \". /opt/intel/sgxsdk/environment\" >> /etc/profile.d/pdo.sh\n#   (\"Untrusted\") OpenSSL\nWORKDIR /tmp\nRUN wget https://www.openssl.org/source/openssl-${OPENSSL}.tar.gz\n#   && tar -zxvf openssl-${OPENSSL}.tar.gz \\\n#   && cd openssl-${OPENSSL}/ \\\n#   && ./config \\\n#   && THREADS=8 \\\n#   && make -j$THREADS \\\n#   && make test \\\n#   && make install -j$THREADS \\\n#   && ldconfig \\\n#   && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/ \\\n#   && cd .. \\\n#   && rm -rf openssl-${OPENSSL}\n#   Note: we do _not_ delete openssl-${OPENSSL}.tar.gz as we re-use it below ..\n#   (\"trusted\") SGX OpenSSL\n#   Note: This will compile in HW or SIM mode depending on the availability of\n#   /dev/isgx and /var/run/aesmd/aesm.socket\n#   Notes: there is no way to pass device /dev/isgx and socket (volume) /var/run/aesmd:/var/run/aesmd to docker\n#   at build time, However, as we only build libraries here, the mode does not matter for the actual build\n#   artifact and so we build with the safe SGX_MODE=SIM.  (It also means the build tests are run only in\n#   simulator but we count on the sgxssl team hopefully releasing only versions which work on both cases :-)\nWORKDIR /tmp\nRUN git clone --branch ${SGXSSL} https://github.com/intel/intel-sgx-ssl.git \\\n && . /opt/intel/sgxsdk/environment \\\n && (cd intel-sgx-ssl/openssl_source ;mv /tmp/openssl-${OPENSSL}.tar.gz . ) \\\n && (cd intel-sgx-ssl/Linux ;make SGX_MODE=SIM DESTDIR=/opt/intel/sgxssl all test ) \\\n && (cd intel-sgx-ssl/Linux ;make install ) \\\n && rm -rf /tmp/intel-sgx-ssl \\\n && echo \"export SGX_SSL=/opt/intel/sgxssl\" >> /etc/profile.d/pdo.sh\n#   Install Tinyscheme\nRUN mkdir -p /opt/tinyscheme\nWORKDIR /opt/tinyscheme\nRUN wget https://downloads.sourceforge.net/project/tinyscheme/tinyscheme/tinyscheme-1.41/tinyscheme-1.41.zip \\\n && unzip tinyscheme-1.41.zip \\\n && rm tinyscheme-1.41.zip \\\n && cd tinyscheme-1.41 \\\n && make FEATURES='-DUSE_DL=1 -DUSE_PLIST=1' \\\n && echo \"export TINY_SCHEME_SRC=$( pwd ;)\" >> /etc/profile.d/pdo.sh\n#   environment setup as required by PDO\n#   Note\n#   - though this works though only for docker run, if you derive images from\n#     this one you might have to specify explicitly variables like PDO_HOME,\n#     PDO_ENCLAVE & SGX_MODE!\n#   - make sure /etc/environment is always included for bash\nRUN mkdir -p /project/pdo \\\n && echo \"export PDO_INSTALL_ROOT=/project/pdo/build\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_HOME=/project/pdo/build/opt/pdo\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_ENCLAVE_CODE_SIGN_PEM=/project/pdo/enclave.pem\" >> /etc/profile.d/pdo.sh \\\n && openssl genrsa -3 3072 > /project/pdo/enclave.pem \\\n && echo \"if ([ -c /dev/isgx ] \\\n && [ -S /var/run/aesmd/aesm.socket ]); then export SGX_MODE=HW; else export SGX_MODE=SIM; fi;\" >> /root/.bashrc\nWORKDIR /project/pdo/\nENTRYPOINT [\"/bin/bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2017 Intel Corporation\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#  ------------------------------------------------------------------------------\n#  Description:\n#    Builds the environment with all prerequistes needed to build Private Data Objects.\n#\n#   Configuration (build) paramaters\n#   - proxy configuration: \thttps_proxy http_proxy ftp_proxy, no_proxy  (default: undefined)\n#   - ubuntu base image to use: \tUBUNTU_VERSION (default: bionic)\n#   - sgx sdk version: \t\tSGX_SDK (default: sgx_2.4)\n#   - openssl version: \t\tOPENSSL (default: 1.1.0j)\n#   - sgxssl version: \t\tSGXSSL  (default: v2.4.1)\n#   - additional apt packages:\tADD_APT_PKGS (default: )\n#  Build:\n#    $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-dev\n#    if behind a proxy, you might want to add also below options\n#    --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy --build-arg=$no_proxy\n#    if you want to build with different version than 16.04/xenial, add a build arg UBUNTU_VERSION, e.g., for 18.04 do --build-arg UBUNTU_VERSION=bionic\n#\n#  Run:\n#    $ cd <directory where you checked out private-data-objects>\n#    $ docker run -it pdo-dev\n#    - to run with SGX HW, add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#      then you can build system as \"usual\", e.g., to build it as\n#         . /project/pdo/src/build/common-config.sh\n#         make -C /project/pdo/src/build/\n#      etc etc\n#      Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#      or the PSW/aesmd might cause enclave launch problems\n#    - if behind a proxy, you might want to add also below options\n#      --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy --env no_proxy=$no_proxy\n#    - if you want to debug with gdb and alike, you also might want to add options\n#      '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#    - for develooping based on source in host you might map source into container with an option\n#      like -v $(pwd):/project/pdo/src/private-data-objects/\nARG UBUNTU_VERSION=bionic\n#  16.04 -> xenial, 17.10 -> artful, 18.04 -> bionic\n#  NOTE: xenial might not work anymore (see below), preferred choice is bionic ..\nFROM ubuntu:${UBUNTU_VERSION}\nARG UBUNTU_VERSION=bionic\n#  for bizare docker reason, we have to redefine it here ...\nARG SGX_SDK=sgx_2.4\nARG OPENSSL=1.1.0j\nARG SGXSSL=v2.4.1\nARG ADD_APT_PKGS\n#  Add necessary packages\n#  TODO(xenial): we need to namnually install protobuf 3 as xenial has v2\n#  Note: ocamlbuild is required by PREREQ but does not exist for xenial. However, the relevant componets are part of 'ocaml' package, later ubuntu split up that package ...\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential ca-certificates cmake curl dh-autoreconf git libcurl4-openssl-dev liblmdb-dev libprotobuf-dev libssl-dev libtool make ocaml pkg-config protobuf-compiler python python3-dev python3-venv python3-virtualenv software-properties-common swig tar unzip virtualenv wget $ADD_APT_PKGS -y -q \\\n && if [ \"$UBUNTU_VERSION\" = \"bionic\" ] || [ \"$UBUNTU_VERSION\" = \"artful\" ] ; then apt-get install libsecp256k1-dev ocamlbuild xxd -y -q ; fi \\\n && apt-get -y -q upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && sed -i '1s;^;. /etc/profile.d/pdo.sh\\n;' /etc/bash.bashrc\n#  Install SGX SDK\n#  we install from source as with binary distribution it's difficult to get library dependencies correct\n#  and work-around the somewhat hacky way we have to install PSW (where we really only need the rts libs\n#  but not the aesmd service which we assume to run in the host)\n#  Notes:\n#  - to make PSW installer work we have to\n#    - disable test for presence of kernel modules (as during build we are not really seeing them)\n#    - skip install and configure of aesmd service\n#  - install before openssl as this might cause additional trouble\nRUN mkdir -p /opt/intel\nWORKDIR /opt/intel\nRUN git clone --branch ${SGX_SDK} https://github.com/01org/linux-sgx.git \\\n && cd linux-sgx \\\n && ./download_prebuilt.sh \\\n && sed -i '1,$s;grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;true # grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && sed -i '1,$s;${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;# ${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && make \\\n && make sdk_install_pkg \\\n && make psw_install_pkg \\\n && cd .. \\\n && echo \"yes\" | ./linux-sgx/linux/installer/bin/sgx_linux_x64_sdk_*.bin \\\n && ./linux-sgx/linux/installer/bin/sgx_linux_x64_psw_*.bin \\\n && rm -rf linux-sgx \\\n && echo \". /opt/intel/sgxsdk/environment\" >> /etc/profile.d/pdo.sh\n#  (\"Untrusted\") OpenSSL\nWORKDIR /tmp\nRUN wget https://www.openssl.org/source/openssl-${OPENSSL}.tar.gz\n#  && tar -zxvf openssl-${OPENSSL}.tar.gz \\\n#  && cd openssl-${OPENSSL}/ \\\n#  && ./config \\\n#  && THREADS=8 \\\n#  && make -j$THREADS \\\n#  && make test \\\n#  && make install -j$THREADS \\\n#  && ldconfig \\\n#  && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/ \\\n#  && cd .. \\\n#  && rm -rf openssl-${OPENSSL}\n#  Note: we do _not_ delete openssl-${OPENSSL}.tar.gz as we re-use it below ..\n#  (\"trusted\") SGX OpenSSL\n#  Note: This will compile in HW or SIM mode depending on the availability of\n#  /dev/isgx and /var/run/aesmd/aesm.socket\n#  Notes: there is no way to pass device /dev/isgx and socket (volume) /var/run/aesmd:/var/run/aesmd to docker\n#  at build time, However, as we only build libraries here, the mode does not matter for the actual build\n#  artifact and so we build with the safe SGX_MODE=SIM.  (It also means the build tests are run only in\n#  simulator but we count on the sgxssl team hopefully releasing only versions which work on both cases :-)\nWORKDIR /tmp\nRUN git clone --branch ${SGXSSL} https://github.com/intel/intel-sgx-ssl.git \\\n && . /opt/intel/sgxsdk/environment \\\n && (cd intel-sgx-ssl/openssl_source ;mv /tmp/openssl-${OPENSSL}.tar.gz . ) \\\n && (cd intel-sgx-ssl/Linux ;make SGX_MODE=SIM DESTDIR=/opt/intel/sgxssl all test ) \\\n && (cd intel-sgx-ssl/Linux ;make install ) \\\n && rm -rf /tmp/intel-sgx-ssl \\\n && echo \"export SGX_SSL=/opt/intel/sgxssl\" >> /etc/profile.d/pdo.sh\n#  Install Tinyscheme\nRUN mkdir -p /opt/tinyscheme\nWORKDIR /opt/tinyscheme\nRUN wget https://downloads.sourceforge.net/project/tinyscheme/tinyscheme/tinyscheme-1.41/tinyscheme-1.41.zip \\\n && unzip tinyscheme-1.41.zip \\\n && rm tinyscheme-1.41.zip \\\n && cd tinyscheme-1.41 \\\n && make FEATURES='-DUSE_DL=1 -DUSE_PLIST=1' \\\n && echo \"export TINY_SCHEME_SRC=$( pwd ;)\" >> /etc/profile.d/pdo.sh\n#  environment setup as required by PDO\n#  Note\n#  - though this works though only for docker run, if you derive images from\n#    this one you might have to specify explicitly variables like PDO_HOME,\n#    PDO_ENCLAVE & SGX_MODE!\n#  - make sure /etc/environment is always included for bash\nRUN mkdir -p /project/pdo \\\n && echo \"export PDO_INSTALL_ROOT=/project/pdo/build\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_HOME=/project/pdo/build/opt/pdo\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_ENCLAVE_CODE_SIGN_PEM=/project/pdo/enclave.pem\" >> /etc/profile.d/pdo.sh \\\n && openssl genrsa -3 3072 > /project/pdo/enclave.pem \\\n && echo \"if ([ -c /dev/isgx ] \\\n && [ -S /var/run/aesmd/aesm.socket ]); then export SGX_MODE=HW; else export SGX_MODE=SIM; fi;\" >> /root/.bashrc\nWORKDIR /project/pdo/\nENTRYPOINT [\"/bin/bash\"]\n","injectedSmells":[],"originalDockerfileHash":"a0c769a720c2cda1820384488a3e85ba","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2017 Intel Corporation\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#   ------------------------------------------------------------------------------\n#   Description:\n#     Builds the environment with all prerequistes needed to build Private Data Objects.\n#\n#    Configuration (build) paramaters\n#    - proxy configuration: \thttps_proxy http_proxy ftp_proxy, no_proxy  (default: undefined)\n#    - ubuntu base image to use: \tUBUNTU_VERSION (default: bionic)\n#    - sgx sdk version: \t\tSGX_SDK (default: sgx_2.4)\n#    - openssl version: \t\tOPENSSL (default: 1.1.0j)\n#    - sgxssl version: \t\tSGXSSL  (default: v2.4.1)\n#    - additional apt packages:\tADD_APT_PKGS (default: )\n#   Build:\n#     $ docker build docker -f docker/Dockerfile.pdo-dev -t pdo-dev\n#     if behind a proxy, you might want to add also below options\n#     --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg ftp_proxy=$ftp_proxy --build-arg=$no_proxy\n#     if you want to build with different version than 16.04/xenial, add a build arg UBUNTU_VERSION, e.g., for 18.04 do --build-arg UBUNTU_VERSION=bionic\n#\n#   Run:\n#     $ cd <directory where you checked out private-data-objects>\n#     $ docker run -it pdo-dev\n#     - to run with SGX HW, add options '--device=/dev/isgx -v /var/run/aesmd:/var/run/aesmd ')\n#       then you can build system as \"usual\", e.g., to build it as\n#          . /project/pdo/src/build/common-config.sh\n#          make -C /project/pdo/src/build/\n#       etc etc\n#       Note: your host SGX PSW runtime should be at a similar level than the one in the container\n#       or the PSW/aesmd might cause enclave launch problems\n#     - if behind a proxy, you might want to add also below options\n#       --env https_proxy=$https_proxy --env http_proxy=$http_proxy --env ftp_proxy=$ftp_proxy --env no_proxy=$no_proxy\n#     - if you want to debug with gdb and alike, you also might want to add options\n#       '--security-opt seccomp=unconfined --security-opt apparmor=unconfined --cap-add=SYS_PTRACE '\n#     - for develooping based on source in host you might map source into container with an option\n#       like -v $(pwd):/project/pdo/src/private-data-objects/\nARG UBUNTU_VERSION=bionic\n#   16.04 -> xenial, 17.10 -> artful, 18.04 -> bionic\n#   NOTE: xenial might not work anymore (see below), preferred choice is bionic ..\nFROM ubuntu:${UBUNTU_VERSION}\nARG UBUNTU_VERSION=bionic\n#   for bizare docker reason, we have to redefine it here ...\nARG SGX_SDK=sgx_2.4\nARG OPENSSL=1.1.0j\nARG SGXSSL=v2.4.1\nARG ADD_APT_PKGS\n#   Add necessary packages\n#   TODO(xenial): we need to namnually install protobuf 3 as xenial has v2\n#   Note: ocamlbuild is required by PREREQ but does not exist for xenial. However, the relevant componets are part of 'ocaml' package, later ubuntu split up that package ...\nRUN apt-get update \\\n && apt-get install autoconf automake build-essential ca-certificates cmake curl dh-autoreconf git libcurl4-openssl-dev liblmdb-dev libprotobuf-dev libssl-dev libtool make ocaml pkg-config protobuf-compiler python python3-dev python3-venv python3-virtualenv software-properties-common swig tar unzip virtualenv wget $ADD_APT_PKGS -y -q \\\n && if [ \"$UBUNTU_VERSION\" = \"bionic\" ] || [ \"$UBUNTU_VERSION\" = \"artful\" ] ; then apt-get install libsecp256k1-dev ocamlbuild xxd -y -q ; fi \\\n && apt-get -y -q upgrade \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && sed -i '1s;^;. /etc/profile.d/pdo.sh\\n;' /etc/bash.bashrc\n#   Install SGX SDK\n#   we install from source as with binary distribution it's difficult to get library dependencies correct\n#   and work-around the somewhat hacky way we have to install PSW (where we really only need the rts libs\n#   but not the aesmd service which we assume to run in the host)\n#   Notes:\n#   - to make PSW installer work we have to\n#     - disable test for presence of kernel modules (as during build we are not really seeing them)\n#     - skip install and configure of aesmd service\n#   - install before openssl as this might cause additional trouble\nRUN mkdir -p /opt/intel\nWORKDIR /opt/intel\nRUN git clone --branch ${SGX_SDK} https://github.com/01org/linux-sgx.git \\\n && cd linux-sgx \\\n && ./download_prebuilt.sh \\\n && sed -i '1,$s;grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;true # grep intel_sgx /lib/modules/$(uname -r)/modules.builtin &> /dev/null;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && sed -i '1,$s;${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;# ${SGX_PACKAGES_PATH}/${PSW_PKG_NAME}/scripts/install.sh;' linux/installer/bin/install-sgx-psw.bin.tmpl \\\n && make \\\n && make sdk_install_pkg \\\n && make psw_install_pkg \\\n && cd .. \\\n && echo \"yes\" | ./linux-sgx/linux/installer/bin/sgx_linux_x64_sdk_*.bin \\\n && ./linux-sgx/linux/installer/bin/sgx_linux_x64_psw_*.bin \\\n && rm -rf linux-sgx \\\n && echo \". /opt/intel/sgxsdk/environment\" >> /etc/profile.d/pdo.sh\n#   (\"Untrusted\") OpenSSL\nWORKDIR /tmp\nRUN wget https://www.openssl.org/source/openssl-${OPENSSL}.tar.gz\n#   && tar -zxvf openssl-${OPENSSL}.tar.gz \\\n#   && cd openssl-${OPENSSL}/ \\\n#   && ./config \\\n#   && THREADS=8 \\\n#   && make -j$THREADS \\\n#   && make test \\\n#   && make install -j$THREADS \\\n#   && ldconfig \\\n#   && ln -s /etc/ssl/certs/* /usr/local/ssl/certs/ \\\n#   && cd .. \\\n#   && rm -rf openssl-${OPENSSL}\n#   Note: we do _not_ delete openssl-${OPENSSL}.tar.gz as we re-use it below ..\n#   (\"trusted\") SGX OpenSSL\n#   Note: This will compile in HW or SIM mode depending on the availability of\n#   /dev/isgx and /var/run/aesmd/aesm.socket\n#   Notes: there is no way to pass device /dev/isgx and socket (volume) /var/run/aesmd:/var/run/aesmd to docker\n#   at build time, However, as we only build libraries here, the mode does not matter for the actual build\n#   artifact and so we build with the safe SGX_MODE=SIM.  (It also means the build tests are run only in\n#   simulator but we count on the sgxssl team hopefully releasing only versions which work on both cases :-)\nWORKDIR /tmp\nRUN git clone --branch ${SGXSSL} https://github.com/intel/intel-sgx-ssl.git \\\n && . /opt/intel/sgxsdk/environment \\\n && (cd intel-sgx-ssl/openssl_source ;mv /tmp/openssl-${OPENSSL}.tar.gz . ) \\\n && (cd intel-sgx-ssl/Linux ;make SGX_MODE=SIM DESTDIR=/opt/intel/sgxssl all test ) \\\n && (cd intel-sgx-ssl/Linux ;make install ) \\\n && rm -rf /tmp/intel-sgx-ssl \\\n && echo \"export SGX_SSL=/opt/intel/sgxssl\" >> /etc/profile.d/pdo.sh\n#   Install Tinyscheme\nRUN mkdir -p /opt/tinyscheme\nWORKDIR /opt/tinyscheme\nRUN wget https://downloads.sourceforge.net/project/tinyscheme/tinyscheme/tinyscheme-1.41/tinyscheme-1.41.zip \\\n && unzip tinyscheme-1.41.zip \\\n && rm tinyscheme-1.41.zip \\\n && cd tinyscheme-1.41 \\\n && make FEATURES='-DUSE_DL=1 -DUSE_PLIST=1' \\\n && echo \"export TINY_SCHEME_SRC=$( pwd ;)\" >> /etc/profile.d/pdo.sh\n#   environment setup as required by PDO\n#   Note\n#   - though this works though only for docker run, if you derive images from\n#     this one you might have to specify explicitly variables like PDO_HOME,\n#     PDO_ENCLAVE & SGX_MODE!\n#   - make sure /etc/environment is always included for bash\nRUN mkdir -p /project/pdo \\\n && echo \"export PDO_INSTALL_ROOT=/project/pdo/build\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_HOME=/project/pdo/build/opt/pdo\" >> /etc/profile.d/pdo.sh \\\n && echo \"export PDO_ENCLAVE_CODE_SIGN_PEM=/project/pdo/enclave.pem\" >> /etc/profile.d/pdo.sh \\\n && openssl genrsa -3 3072 > /project/pdo/enclave.pem \\\n && echo \"if ([ -c /dev/isgx ] \\\n && [ -S /var/run/aesmd/aesm.socket ]); then export SGX_MODE=HW; else export SGX_MODE=SIM; fi;\" >> /root/.bashrc\nWORKDIR /project/pdo/\nENTRYPOINT [\"/bin/bash\"]\n","originalDockerfileUglifiedHash":"85edfa06bb0f3d047c41db7f62a5051d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2c8f989fbe0d700fe9d7d047f3bed97ce97c5562.dockerfile"}