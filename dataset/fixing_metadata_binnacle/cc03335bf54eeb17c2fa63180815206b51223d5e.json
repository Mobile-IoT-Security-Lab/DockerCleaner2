{"seed":1085033674,"processedDockerfileHash":"25d67310a306b416d4b01e537b8deb01","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=bionic\nFROM ubuntu:${DISTRO_VERSION} AS devtools\n#   Please keep the formatting in these commands, it is optimized to cut & paste\n#   into the README.md file.\n#  # [START INSTALL.md]\n#   Install the minimal development tools:\n#  # [START README.md]\n#   ```bash\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential cmake git gcc g++ cmake libc-ares-dev libc-ares2 libcurl4-openssl-dev libssl-dev make pkg-config tar wget zlib1g-dev -y\n#   ```\n#  # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n#  # [START IGNORED]\n#   Verify that the tools above are enough to compile google-cloud-cpp when using\n#   external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n#  # [END IGNORED]\n#   #### crc32c\n#   There is no Ubuntu package for this library. To install it use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### Protobuf\n#   While protobuf-3.0 is distributed with Ubuntu, the Google Cloud Plaform proto\n#   files require more recent versions (circa 3.4.x). To manually install a more\n#   recent version use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### gRPC\n#   Likewise, Ubuntu has packages for grpc-1.3.x, but this version is too old for\n#   the Google Cloud Platform APIs:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN make -j $( nproc ;)\nRUN make install\nRUN ldconfig\n#   ```\n#   #### google-cloud-cpp\n#   Finally we can install `google-cloud-cpp`.\n#   ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#   ```\n#  # [END INSTALL.md]\n#   Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2018 Google LLC\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nARG DISTRO_VERSION=bionic\nFROM ubuntu:${DISTRO_VERSION} AS devtools\n#  Please keep the formatting in these commands, it is optimized to cut & paste\n#  into the README.md file.\n# # [START INSTALL.md]\n#  Install the minimal development tools:\n# # [START README.md]\n#  ```bash\nRUN apt-get update \\\n && apt-get install -y build-essential cmake git gcc g++ cmake libc-ares-dev libc-ares2 libcurl4-openssl-dev libssl-dev make pkg-config tar wget zlib1g-dev\n#  ```\n# # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n# # [START IGNORED]\n#  Verify that the tools above are enough to compile google-cloud-cpp when using\n#  external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n# # [END IGNORED]\n#  #### crc32c\n#  There is no Ubuntu package for this library. To install it use:\n#  ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#  ```\n#  #### Protobuf\n#  While protobuf-3.0 is distributed with Ubuntu, the Google Cloud Plaform proto\n#  files require more recent versions (circa 3.4.x). To manually install a more\n#  recent version use:\n#  ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $( nproc ;)\nRUN ldconfig\n#  ```\n#  #### gRPC\n#  Likewise, Ubuntu has packages for grpc-1.3.x, but this version is too old for\n#  the Google Cloud Platform APIs:\n#  ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN make -j $( nproc ;)\nRUN make install\nRUN ldconfig\n#  ```\n#  #### google-cloud-cpp\n#  Finally we can install `google-cloud-cpp`.\n#  ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#  ```\n# # [END INSTALL.md]\n#  Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\n","injectedSmells":[],"originalDockerfileHash":"2bfe89134059aca4bece9a8140ac4cca","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2018 Google LLC\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\nARG DISTRO_VERSION=bionic\nFROM ubuntu:${DISTRO_VERSION} AS devtools\n#   Please keep the formatting in these commands, it is optimized to cut & paste\n#   into the README.md file.\n#  # [START INSTALL.md]\n#   Install the minimal development tools:\n#  # [START README.md]\n#   ```bash\nRUN apt-get update \\\n && apt-get install build-essential cmake git gcc g++ cmake libc-ares-dev libc-ares2 libcurl4-openssl-dev libssl-dev make pkg-config tar wget zlib1g-dev -y\n#   ```\n#  # [END README.md]\nFROM devtools\nCOPY ci/install-retry.sh /retry3\n#  # [START IGNORED]\n#   Verify that the tools above are enough to compile google-cloud-cpp when using\n#   external projects.\nWORKDIR /home/build/external\nCOPY . /home/build/external\nRUN cmake -H. -Bcmake-out -DCMAKE_BUILD_TYPE=Debug\nRUN cmake --build cmake-out -- -j $( nproc ;)\nRUN (cd cmake-out \\\n && ctest --output-on-failure )\n#  # [END IGNORED]\n#   #### crc32c\n#   There is no Ubuntu package for this library. To install it use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/crc32c/archive/1.0.6.tar.gz\nRUN tar -xf 1.0.6.tar.gz\nWORKDIR /var/tmp/build/crc32c-1.0.6\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -DCRC32C_BUILD_TESTS=OFF -DCRC32C_BUILD_BENCHMARKS=OFF -DCRC32C_USE_GLOG=OFF -H. -Bcmake-out/crc32c\nRUN cmake --build cmake-out/crc32c --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### Protobuf\n#   While protobuf-3.0 is distributed with Ubuntu, the Google Cloud Plaform proto\n#   files require more recent versions (circa 3.4.x). To manually install a more\n#   recent version use:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz\nRUN tar -xf v3.6.1.tar.gz\nWORKDIR /var/tmp/build/protobuf-3.6.1/cmake\nRUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=yes -Dprotobuf_BUILD_TESTS=OFF -H. -Bcmake-out\nRUN cmake --build cmake-out --target install -- -j $( nproc ;)\nRUN ldconfig\n#   ```\n#   #### gRPC\n#   Likewise, Ubuntu has packages for grpc-1.3.x, but this version is too old for\n#   the Google Cloud Platform APIs:\n#   ```bash\nWORKDIR /var/tmp/build\nRUN /retry3 wget -q https://github.com/grpc/grpc/archive/v1.19.1.tar.gz\nRUN tar -xf v1.19.1.tar.gz\nWORKDIR /var/tmp/build/grpc-1.19.1\nRUN make -j $( nproc ;)\nRUN make install\nRUN ldconfig\n#   ```\n#   #### google-cloud-cpp\n#   Finally we can install `google-cloud-cpp`.\n#   ```bash\nWORKDIR /home/build/google-cloud-cpp\nCOPY . /home/build/google-cloud-cpp\nRUN cmake -H. -Bcmake-out -DGOOGLE_CLOUD_CPP_DEPENDENCY_PROVIDER=package -DGOOGLE_CLOUD_CPP_GMOCK_PROVIDER=external\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/google-cloud-cpp/cmake-out\nRUN ctest --output-on-failure\nRUN cmake --build . --target install\n#   ```\n#  # [END INSTALL.md]\n#   Verify that the installed files are actually usable\nWORKDIR /home/build/test-install-plain-make\nENV PKG_CONFIG_PATH=\"/usr/local/lib64/pkgconfig\"\nCOPY ci/test-install /home/build/test-install-plain-make\nRUN make\nWORKDIR /home/build/test-install-cmake-bigtable\nCOPY ci/test-install/bigtable /home/build/test-install-cmake-bigtable\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-install-cmake-storage\nCOPY ci/test-install/storage /home/build/test-install-cmake-storage\nRUN env -u PKG_CONFIG_PATH cmake -H. -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\nWORKDIR /home/build/test-submodule\nCOPY ci/test-install /home/build/test-submodule\nCOPY . /home/build/test-submodule/submodule/google-cloud-cpp\nRUN cmake -Hsubmodule -Bcmake-out\nRUN cmake --build cmake-out -- -j $( nproc ;)\n","originalDockerfileUglifiedHash":"8f3fe5e2cd0341f9d70b2cdb8b6e7797","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/cc03335bf54eeb17c2fa63180815206b51223d5e.dockerfile"}