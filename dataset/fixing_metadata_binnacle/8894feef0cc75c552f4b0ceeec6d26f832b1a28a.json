{"seed":1777231322,"processedDockerfileHash":"e03a17399f2a8536a9b68090db7ea5e7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:14.04\nMAINTAINER Open State Foundation <developers@openstate.eu>\n#   Use bash as default shell\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Add multiverse to sources\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ trusty multiverse' >> etc/apt/sources.list\n#   Set Dutch locale, needed to parse Dutch time data\nRUN locale-gen nl_NL.UTF-8\n#  Set Timezone\nRUN echo \"Europe/Amsterdam\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends python-dev=2.7.5-5ubuntu3 python-setuptools=3.3-1ubuntu2 python-software-properties=0.92.37.8 openjdk-7-jre-headless=7u211-2.6.17-0ubuntu0.1 wget=1.15-1ubuntu1.14.04.5 curl=7.35.0-1ubuntu2.20 poppler-utils=0.24.5-2ubuntu4.17 software-properties-common=0.92.37.8 gettext=0.18.3.1-1ubuntu3.1 git=1:1.9.1-1ubuntu0.10 dnsutils=1:9.9.5.dfsg-3ubuntu0.19 vim=2:7.4.052-1ubuntu3.1 -y )\nRUN add-apt-repository ppa:mc3man/trusty-media \\\n && : \\\n && apt-get dist-upgrade -y\n#   according to http://www.monblocnotes.com/node/2057\nRUN sed -i 's/exit 101/exit 0/' /usr/sbin/policy-rc.d\nRUN (apt-get update ;apt-get install --no-install-recommends redis-server=2:2.8.4-2ubuntu0.2 -y )\nRUN service redis-server start\n#   Install elasticsearch\nENV ES_VERSION=\"1.4.2\"\nRUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.deb\nRUN dpkg -i elasticsearch-${ES_VERSION}.deb > /dev/null\nRUN service elasticsearch start\nRUN rm elasticsearch-${ES_VERSION}.deb\n#   Install elasticsearch head plugin\nRUN /usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head\nRUN (apt-get update ;apt-get install --no-install-recommends make=3.81-8.2ubuntu3 libxml2-dev=2.9.1+dfsg1-3ubuntu4.13 libxslt1-dev=1.1.28-2ubuntu0.2 libssl-dev=1.0.1f-1ubuntu2.27 libffi-dev=3.1~rc1+r3.0.13-12ubuntu0.2 libtiff4-dev=4.0.3-7ubuntu0.11 libjpeg8-dev=8c-2ubuntu8 liblcms2-dev=2.5-0ubuntu4.2 python-dev=2.7.5-5ubuntu3 python-setuptools=3.3-1ubuntu2 python-virtualenv=1.11.4-1ubuntu1 git=1:1.9.1-1ubuntu0.10 supervisor=3.0b2-1ubuntu0.1 vim=2:7.4.052-1ubuntu3.1 -y )\nRUN easy_install pip\n#  #### Install dependencies for pyav #####\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libfaac-dev=1.28-6 libgpac-dev=0.5.0+svn4288~dfsg1-4ubuntu1 checkinstall=1.6.2-4ubuntu1 libmp3lame-dev=3.99.5+repack1-3ubuntu1 libopencore-amrnb-dev=0.1.3-2ubuntu1 libopencore-amrwb-dev=0.1.3-2ubuntu1 librtmp-dev=2.4+20121230.gitdf6c518-1ubuntu0.1 libtheora-dev=1.1.1+dfsg.1-3.2 libvorbis-dev=1.3.2-1.3ubuntu1.2 libx264-dev=2:0.142.2389+git956c8d8-2 libfdk-aac-dev=0.1.2-1 libvpx-dev=1.3.0-2 libxvidcore-dev=2:1.3.2-9ubuntu1 pkg-config=0.26-1ubuntu4 yasm=1.2.0-1ubuntu1 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 libavformat-dev=6:9.20-0ubuntu0.14.04.1 libavcodec-dev=6:9.20-0ubuntu0.14.04.1 libavdevice-dev=6:9.20-0ubuntu0.14.04.1 libavutil-dev=6:9.20-0ubuntu0.14.04.1 libswscale-dev=6:9.20-0ubuntu0.14.04.1 libavresample-dev=6:9.20-0ubuntu0.14.04.1 -y )\n#   Temporarily use /tmp as workdir for the pyav dependencies\n#   WORKDIR /tmp\nRUN (apt-get update ;apt-get install --no-install-recommends ffmpeg -y )\n#  #########\nWORKDIR /opt/ocd\n#   Create a virtualenv project\nRUN echo 'ok'\nRUN virtualenv -q /opt\nRUN source ../bin/activate \\\n && pip install pip==23.1 --upgrade\nRUN echo \"source /opt/bin/activate; cd /opt/ocd;\" >> ~/.bashrc\n#   Temporarily add files on the host to the container\n#   as it contains files needed to finish the base installation\nCOPY . /opt/ocd\n#   Install Python requirements\n#   Install Python requirements\nRUN source ../bin/activate \\\n && pip install pycparser==2.13 \\\n && pip install Cython==0.21.2 \\\n && pip install -r requirements.txt\n#   Initialize\nRUN source ../bin/activate \\\n && service elasticsearch start \\\n && sleep 20 \\\n && ./manage.py elasticsearch create_indexes es_mappings/ \\\n && ./manage.py elasticsearch put_template\nRUN (apt-get update ;apt-get install --no-install-recommends supervisor=3.0b2-1ubuntu0.1 -y )\n#   Generate documentation\nRUN source ../bin/activate \\\n && cd docs \\\n && make html\n#   Delete all files again\nRUN find . -delete\n#   When the container is created or started run start.sh which starts\n#   all required services and supervisor which starts celery and celerycam\nCMD /opt/ocd/start.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:14.04\nMAINTAINER Open State Foundation <developers@openstate.eu>\n#  Use bash as default shell\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#  Add multiverse to sources\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ trusty multiverse' >> etc/apt/sources.list\n#  Set Dutch locale, needed to parse Dutch time data\nRUN locale-gen nl_NL.UTF-8\n# Set Timezone\nRUN echo \"Europe/Amsterdam\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\nRUN apt-get update \\\n && apt-get install python-dev python-setuptools python-software-properties openjdk-7-jre-headless wget curl poppler-utils software-properties-common gettext git dnsutils vim -y\nRUN add-apt-repository ppa:mc3man/trusty-media \\\n && apt-get update \\\n && apt-get dist-upgrade -y\n#  according to http://www.monblocnotes.com/node/2057\nRUN sed -i 's/exit 101/exit 0/' /usr/sbin/policy-rc.d\nRUN apt-get install redis-server -y\nRUN service redis-server start\n#  Install elasticsearch\nENV ES_VERSION=\"1.4.2\"\nRUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.deb\nRUN dpkg -i elasticsearch-${ES_VERSION}.deb > /dev/null\nRUN service elasticsearch start\nRUN rm elasticsearch-${ES_VERSION}.deb\n#  Install elasticsearch head plugin\nRUN /usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head\nRUN apt-get install make libxml2-dev libxslt1-dev libssl-dev libffi-dev libtiff4-dev libjpeg8-dev liblcms2-dev python-dev python-setuptools python-virtualenv git supervisor vim -y\nRUN easy_install pip\n# #### Install dependencies for pyav #####\nRUN apt-get update \\\n && apt-get install libfaac-dev libgpac-dev checkinstall libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev librtmp-dev libtheora-dev libvorbis-dev libx264-dev libfdk-aac-dev libvpx-dev libxvidcore-dev pkg-config yasm zlib1g-dev libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libswscale-dev libavresample-dev -y\n#  Temporarily use /tmp as workdir for the pyav dependencies\n#  WORKDIR /tmp\nRUN apt-get install ffmpeg -y\n# #########\nWORKDIR /opt/ocd\n#  Create a virtualenv project\nRUN echo 'ok'\nRUN virtualenv -q /opt\nRUN source ../bin/activate \\\n && pip install pip --upgrade\nRUN echo \"source /opt/bin/activate; cd /opt/ocd;\" >> ~/.bashrc\n#  Temporarily add files on the host to the container\n#  as it contains files needed to finish the base installation\nADD . /opt/ocd\n#  Install Python requirements\n#  Install Python requirements\nRUN source ../bin/activate \\\n && pip install pycparser==2.13 \\\n && pip install Cython==0.21.2 \\\n && pip install -r requirements.txt\n#  Initialize\nRUN source ../bin/activate \\\n && service elasticsearch start \\\n && sleep 20 \\\n && ./manage.py elasticsearch create_indexes es_mappings/ \\\n && ./manage.py elasticsearch put_template\nRUN apt-get install supervisor -y\n#  Generate documentation\nRUN source ../bin/activate \\\n && cd docs \\\n && make html\n#  Delete all files again\nRUN find . -delete\n#  When the container is created or started run start.sh which starts\n#  all required services and supervisor which starts celery and celerycam\nCMD /opt/ocd/start.sh\n","injectedSmells":[],"originalDockerfileHash":"d0e9f8e09da25e414ae6292569ee65da","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:14.04\nMAINTAINER Open State Foundation <developers@openstate.eu>\n#   Use bash as default shell\nRUN rm /bin/sh \\\n && ln -s /bin/bash /bin/sh\n#   Add multiverse to sources\nRUN echo 'deb http://archive.ubuntu.com/ubuntu/ trusty multiverse' >> etc/apt/sources.list\n#   Set Dutch locale, needed to parse Dutch time data\nRUN locale-gen nl_NL.UTF-8\n#  Set Timezone\nRUN echo \"Europe/Amsterdam\" > /etc/timezone \\\n && dpkg-reconfigure -f noninteractive tzdata\nRUN apt-get update \\\n && apt-get install python-dev python-setuptools python-software-properties openjdk-7-jre-headless wget curl poppler-utils software-properties-common gettext git dnsutils vim -y\nRUN add-apt-repository ppa:mc3man/trusty-media \\\n && apt-get update \\\n && apt-get dist-upgrade -y\n#   according to http://www.monblocnotes.com/node/2057\nRUN sed -i 's/exit 101/exit 0/' /usr/sbin/policy-rc.d\nRUN apt-get install redis-server -y\nRUN service redis-server start\n#   Install elasticsearch\nENV ES_VERSION=\"1.4.2\"\nRUN wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-${ES_VERSION}.deb\nRUN dpkg -i elasticsearch-${ES_VERSION}.deb > /dev/null\nRUN service elasticsearch start\nRUN rm elasticsearch-${ES_VERSION}.deb\n#   Install elasticsearch head plugin\nRUN /usr/share/elasticsearch/bin/plugin --install mobz/elasticsearch-head\nRUN apt-get install make libxml2-dev libxslt1-dev libssl-dev libffi-dev libtiff4-dev libjpeg8-dev liblcms2-dev python-dev python-setuptools python-virtualenv git supervisor vim -y\nRUN easy_install pip\n#  #### Install dependencies for pyav #####\nRUN apt-get update \\\n && apt-get install libfaac-dev libgpac-dev checkinstall libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev librtmp-dev libtheora-dev libvorbis-dev libx264-dev libfdk-aac-dev libvpx-dev libxvidcore-dev pkg-config yasm zlib1g-dev libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libswscale-dev libavresample-dev -y\n#   Temporarily use /tmp as workdir for the pyav dependencies\n#   WORKDIR /tmp\nRUN apt-get install ffmpeg -y\n#  #########\nWORKDIR /opt/ocd\n#   Create a virtualenv project\nRUN echo 'ok'\nRUN virtualenv -q /opt\nRUN source ../bin/activate \\\n && pip install pip --upgrade\nRUN echo \"source /opt/bin/activate; cd /opt/ocd;\" >> ~/.bashrc\n#   Temporarily add files on the host to the container\n#   as it contains files needed to finish the base installation\nADD . /opt/ocd\n#   Install Python requirements\n#   Install Python requirements\nRUN source ../bin/activate \\\n && pip install pycparser==2.13 \\\n && pip install Cython==0.21.2 \\\n && pip install -r requirements.txt\n#   Initialize\nRUN source ../bin/activate \\\n && service elasticsearch start \\\n && sleep 20 \\\n && ./manage.py elasticsearch create_indexes es_mappings/ \\\n && ./manage.py elasticsearch put_template\nRUN apt-get install supervisor -y\n#   Generate documentation\nRUN source ../bin/activate \\\n && cd docs \\\n && make html\n#   Delete all files again\nRUN find . -delete\n#   When the container is created or started run start.sh which starts\n#   all required services and supervisor which starts celery and celerycam\nCMD /opt/ocd/start.sh\n","originalDockerfileUglifiedHash":"3b55302c6344f14e27d0ef74fea52aa5","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8894feef0cc75c552f4b0ceeec6d26f832b1a28a.dockerfile"}