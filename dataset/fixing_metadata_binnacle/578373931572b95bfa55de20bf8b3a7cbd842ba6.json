{"seed":3227055643,"processedDockerfileHash":"641e6b133257f6ccf57bdbfdbec7f0d4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu\nMAINTAINER syu_cream\nWORKDIR /opt\n#\n#   Prepare build environment\n#\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends git=1:2.39.2-1ubuntu1 build-essential=12.9ubuntu3 autoconf=2.71-3 automake=1:1.16.5-1.3 autotools-dev=20220109.1 libtool=2.4.7-5 pkg-config=1.8.1-1ubuntu2 -y )\n#\n#   Prepare build environment for mruby and ts_mruby\n#\nRUN (apt-get update ;apt-get install --no-install-recommends bison=2:3.8.2+dfsg-1build1 libreadline6 libreadline6-dev ncurses-dev ruby=1:3.1 unzip=6.0-27ubuntu1 -y )\n#\n#   Prepare develop environment\n#\nRUN (apt-get update ;apt-get install --no-install-recommends curl=7.88.1-7ubuntu1 vim=2:9.0.1000-4ubuntu2 valgrind=1:3.19.0-1ubuntu1 wget=1.21.3-1ubuntu1 -y )\n#\n#   Install nginx to test trafficserver's proxy features\n#\nRUN (apt-get update ;apt-get install --no-install-recommends nginx=1.22.0-1ubuntu3 -y )\n#\n#   Install packages required by trafficserver\n#\nRUN (apt-get update ;apt-get install --no-install-recommends g++=4:12.2.0-3ubuntu1 libssl-dev=3.0.8-1ubuntu1 tcl-dev=8.6.13 libpcre3-dev=2:8.39-15 -y )\nRUN ldconfig\n#\n#   Prepare HTTP server as origin server of trafficserver\n#\nRUN mkdir /opt/htdocs\nRUN echo \"TEST\" > /opt/htdocs/index.html\n#\n#   Build and install latest opnessl\n#\nRUN git clone https://github.com/openssl/openssl.git\nRUN cd openssl \\\n && git checkout -b OpenSSL_1_0_2h refs/tags/OpenSSL_1_0_2h \\\n && ./config \\\n && make \\\n && make install\n#\n#   Build and install trafficserver\n#\nRUN wget -O trafficserver-7.0.0.tar.bz2 http://ftp.meisei-u.ac.jp/mirror/apache/dist/trafficserver/trafficserver-7.0.0.tar.bz2\nRUN tar xf trafficserver-7.0.0.tar.bz2 \\\n && cd trafficserver-7.0.0 \\\n && ./configure --enable-debug \\\n && make \\\n && make install\nRUN ldconfig\n#\n#   Configure trafficserver to listen http and https\n#\nRUN openssl genrsa 2048 > server.key \\\n && yes \"\" | openssl req -new -key server.key > server.csr \\\n && openssl x509 -days 3650 -req -signkey server.key < server.csr > server.crt \\\n && cp server.crt /usr/local/etc/trafficserver/ \\\n && cp server.key /usr/local/etc/trafficserver/\nRUN echo \"CONFIG proxy.config.http.server_ports STRING 8080 443:ssl\" >> /usr/local/etc/trafficserver/records.config\nRUN echo \"dest_ip=* ssl_cert_name=server.crt ssl_key_name=server.key\" >> /usr/local/etc/trafficserver/ssl_multicert.config\n#\n#   Build and install ts_mruby\n#\nRUN git clone https://github.com/syucream/ts_mruby.git\nRUN cd ts_mruby \\\n && git submodule init \\\n && git submodule update \\\n && autoreconf -if \\\n && ./configure --with-ts-prefix-root=/usr/local/ \\\n && make build_mruby \\\n && make \\\n && make install\n#\n#   Configure ts_mruby test script\n#\nRUN echo \"ATS::echo 'ts_mruby test'\" >> /usr/local/etc/trafficserver/echo.rb\nRUN echo \"map / http://127.0.0.1/ @plugin=ts_mruby.so @pparam=/usr/local/etc/trafficserver/echo.rb\" >> /usr/local/etc/trafficserver/remap.config\n#\n#   Finish preparing!\n#\n#   You can access to '/' then you'll get ts_mruby's response after '$ trafficserver start'\n#   RUN trafficserver start\n#   RUN curl -v http://localhost:8080/ #=> 'ts_mruby test'\n#\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu\nMAINTAINER syu_cream\nWORKDIR /opt\n#\n#  Prepare build environment\n#\nRUN apt-get update -y\nRUN apt-get install git build-essential autoconf automake autotools-dev libtool pkg-config -y\n#\n#  Prepare build environment for mruby and ts_mruby\n#\nRUN apt-get install bison libreadline6 libreadline6-dev ncurses-dev ruby unzip -y\n#\n#  Prepare develop environment\n#\nRUN apt-get install curl vim valgrind wget -y\n#\n#  Install nginx to test trafficserver's proxy features\n#\nRUN apt-get install nginx -y\n#\n#  Install packages required by trafficserver\n#\nRUN apt-get install g++ libssl-dev tcl-dev libpcre3-dev -y\nRUN ldconfig\n#\n#  Prepare HTTP server as origin server of trafficserver\n#\nRUN mkdir /opt/htdocs\nRUN echo \"TEST\" > /opt/htdocs/index.html\n#\n#  Build and install latest opnessl\n#\nRUN git clone https://github.com/openssl/openssl.git\nRUN cd openssl \\\n && git checkout -b OpenSSL_1_0_2h refs/tags/OpenSSL_1_0_2h \\\n && ./config \\\n && make \\\n && make install\n#\n#  Build and install trafficserver\n#\nRUN wget -O trafficserver-7.0.0.tar.bz2 http://ftp.meisei-u.ac.jp/mirror/apache/dist/trafficserver/trafficserver-7.0.0.tar.bz2\nRUN tar xf trafficserver-7.0.0.tar.bz2 \\\n && cd trafficserver-7.0.0 \\\n && ./configure --enable-debug \\\n && make \\\n && make install\nRUN ldconfig\n#\n#  Configure trafficserver to listen http and https\n#\nRUN openssl genrsa 2048 > server.key \\\n && yes \"\" | openssl req -new -key server.key > server.csr \\\n && openssl x509 -days 3650 -req -signkey server.key < server.csr > server.crt \\\n && cp server.crt /usr/local/etc/trafficserver/ \\\n && cp server.key /usr/local/etc/trafficserver/\nRUN echo \"CONFIG proxy.config.http.server_ports STRING 8080 443:ssl\" >> /usr/local/etc/trafficserver/records.config\nRUN echo \"dest_ip=* ssl_cert_name=server.crt ssl_key_name=server.key\" >> /usr/local/etc/trafficserver/ssl_multicert.config\n#\n#  Build and install ts_mruby\n#\nRUN git clone https://github.com/syucream/ts_mruby.git\nRUN cd ts_mruby \\\n && git submodule init \\\n && git submodule update \\\n && autoreconf -if \\\n && ./configure --with-ts-prefix-root=/usr/local/ \\\n && make build_mruby \\\n && make \\\n && make install\n#\n#  Configure ts_mruby test script\n#\nRUN echo \"ATS::echo 'ts_mruby test'\" >> /usr/local/etc/trafficserver/echo.rb\nRUN echo \"map / http://127.0.0.1/ @plugin=ts_mruby.so @pparam=/usr/local/etc/trafficserver/echo.rb\" >> /usr/local/etc/trafficserver/remap.config\n#\n#  Finish preparing!\n#\n#  You can access to '/' then you'll get ts_mruby's response after '$ trafficserver start'\n#  RUN trafficserver start\n#  RUN curl -v http://localhost:8080/ #=> 'ts_mruby test'\n#\n","injectedSmells":[],"originalDockerfileHash":"cc7efdf8d573d0b0f171d440c058f61b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu\nMAINTAINER syu_cream\nWORKDIR /opt\n#\n#   Prepare build environment\n#\nRUN apt-get update -y\nRUN apt-get install git build-essential autoconf automake autotools-dev libtool pkg-config -y\n#\n#   Prepare build environment for mruby and ts_mruby\n#\nRUN apt-get install bison libreadline6 libreadline6-dev ncurses-dev ruby unzip -y\n#\n#   Prepare develop environment\n#\nRUN apt-get install curl vim valgrind wget -y\n#\n#   Install nginx to test trafficserver's proxy features\n#\nRUN apt-get install nginx -y\n#\n#   Install packages required by trafficserver\n#\nRUN apt-get install g++ libssl-dev tcl-dev libpcre3-dev -y\nRUN ldconfig\n#\n#   Prepare HTTP server as origin server of trafficserver\n#\nRUN mkdir /opt/htdocs\nRUN echo \"TEST\" > /opt/htdocs/index.html\n#\n#   Build and install latest opnessl\n#\nRUN git clone https://github.com/openssl/openssl.git\nRUN cd openssl \\\n && git checkout -b OpenSSL_1_0_2h refs/tags/OpenSSL_1_0_2h \\\n && ./config \\\n && make \\\n && make install\n#\n#   Build and install trafficserver\n#\nRUN wget -O trafficserver-7.0.0.tar.bz2 http://ftp.meisei-u.ac.jp/mirror/apache/dist/trafficserver/trafficserver-7.0.0.tar.bz2\nRUN tar xf trafficserver-7.0.0.tar.bz2 \\\n && cd trafficserver-7.0.0 \\\n && ./configure --enable-debug \\\n && make \\\n && make install\nRUN ldconfig\n#\n#   Configure trafficserver to listen http and https\n#\nRUN openssl genrsa 2048 > server.key \\\n && yes \"\" | openssl req -new -key server.key > server.csr \\\n && openssl x509 -days 3650 -req -signkey server.key < server.csr > server.crt \\\n && cp server.crt /usr/local/etc/trafficserver/ \\\n && cp server.key /usr/local/etc/trafficserver/\nRUN echo \"CONFIG proxy.config.http.server_ports STRING 8080 443:ssl\" >> /usr/local/etc/trafficserver/records.config\nRUN echo \"dest_ip=* ssl_cert_name=server.crt ssl_key_name=server.key\" >> /usr/local/etc/trafficserver/ssl_multicert.config\n#\n#   Build and install ts_mruby\n#\nRUN git clone https://github.com/syucream/ts_mruby.git\nRUN cd ts_mruby \\\n && git submodule init \\\n && git submodule update \\\n && autoreconf -if \\\n && ./configure --with-ts-prefix-root=/usr/local/ \\\n && make build_mruby \\\n && make \\\n && make install\n#\n#   Configure ts_mruby test script\n#\nRUN echo \"ATS::echo 'ts_mruby test'\" >> /usr/local/etc/trafficserver/echo.rb\nRUN echo \"map / http://127.0.0.1/ @plugin=ts_mruby.so @pparam=/usr/local/etc/trafficserver/echo.rb\" >> /usr/local/etc/trafficserver/remap.config\n#\n#   Finish preparing!\n#\n#   You can access to '/' then you'll get ts_mruby's response after '$ trafficserver start'\n#   RUN trafficserver start\n#   RUN curl -v http://localhost:8080/ #=> 'ts_mruby test'\n#\n","originalDockerfileUglifiedHash":"e02c380ab3b0d6e5dfa5d09ec80bcc9b","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/578373931572b95bfa55de20bf8b3a7cbd842ba6.dockerfile"}