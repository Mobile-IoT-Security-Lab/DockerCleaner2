{"seed":589916335,"processedDockerfileHash":"2262581dcdc29b4b943b94340fa704ea","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.7\n#   VERSIONS\nENV ALPINE_VERSION=\"3.7\" \\\n    PYTHON_VERSION=\"3.6.5\"\n#   PATHS\nENV PYTHON_PATH=\"/usr/lib/python$PYTHON_VERSION\" \\\n    PATH=\"/usr/lib/python$PYTHON_VERSION/bin/:${PATH}\"\n#   PACKAGES\n#     * dumb-init: a proper init system for containers, to reap zombie children\n#     * musl: standard C library\n#     * lib6-compat: compatibility libraries for glibc\n#     * linux-headers: commonly needed, and an unusual package name from Alpine.\n#     * build-base: used so we include the basic development packages (gcc)\n#     * bash: so we can access /bin/bash\n#     * git: to ease up clones of repos\n#     * ca-certificates: for SSL verification during Pip and easy_install\nENV PACKAGES=\" dumb-init  musl  libc6-compat  linux-headers  build-base  bash  git  ca-certificates \"\n#   PACKAGES needed to built python\nENV PYTHON_BUILD_PACKAGES=\" readline-dev  zlib-dev  bzip2-dev  sqlite-dev  libressl-dev \"\nRUN set -ex ; export PYTHON_MAJOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f3- | rev ;) ; export PYTHON_MINOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f2- | rev ;) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" >> /etc/apk/repositories; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main\" >> /etc/apk/repositories; apk add $PACKAGES --no-cache || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add $PACKAGES --no-cache ) ; apk add $PYTHON_BUILD_PACKAGES --no-cache --virtual .build-deps || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add $PYTHON_BUILD_PACKAGES --no-cache --virtual .build-deps ) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main/\" > /etc/apk/repositories; git clone --depth 1 https://github.com/pyenv/pyenv /usr/lib/pyenv ; PYENV_ROOT=/usr/lib/pyenv /usr/lib/pyenv/bin/pyenv install $PYTHON_VERSION ; mv /usr/lib/pyenv/versions/$PYTHON_VERSION/ $PYTHON_PATH ; rm -rfv /usr/lib/pyenv ; cd $PYTHON_PATH/bin/ \\\n && sed -i \"s+/usr/lib/pyenv/versions/$PYTHON_VERSION/+$PYTHON_PATH/+g\" * ; rm -f $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; find /usr/lib/python$PYTHON_VERSION -depth\n#   pip  install package\nRUN pip install pip==23.1 --upgrade ; pip install numpy==1.24.2 ; pip install aiobotocore==2.5.0 ; pip install pytz==2023.3 ; pip install requests==2.28.2 ; pip install psutil==5.9.4\n#   since we will be \"always\" mounting the volume, we can set this up\nENTRYPOINT [\"/usr/bin/dumb-init\"]\n#  CMD [\"python\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.7\n#  VERSIONS\nENV ALPINE_VERSION=\"3.7\" \\\n    PYTHON_VERSION=\"3.6.5\"\n#  PATHS\nENV PYTHON_PATH=\"/usr/lib/python$PYTHON_VERSION\" \\\n    PATH=\"/usr/lib/python$PYTHON_VERSION/bin/:${PATH}\"\n#  PACKAGES\n#    * dumb-init: a proper init system for containers, to reap zombie children\n#    * musl: standard C library\n#    * lib6-compat: compatibility libraries for glibc\n#    * linux-headers: commonly needed, and an unusual package name from Alpine.\n#    * build-base: used so we include the basic development packages (gcc)\n#    * bash: so we can access /bin/bash\n#    * git: to ease up clones of repos\n#    * ca-certificates: for SSL verification during Pip and easy_install\nENV PACKAGES=\" dumb-init  musl  libc6-compat  linux-headers  build-base  bash  git  ca-certificates \"\n#  PACKAGES needed to built python\nENV PYTHON_BUILD_PACKAGES=\" readline-dev  zlib-dev  bzip2-dev  sqlite-dev  libressl-dev \"\nRUN set -ex ; export PYTHON_MAJOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f3- | rev ;) ; export PYTHON_MINOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f2- | rev ;) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" >> /etc/apk/repositories; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main\" >> /etc/apk/repositories; apk add --no-cache $PACKAGES || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add --no-cache $PACKAGES ) ; apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES ) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main/\" > /etc/apk/repositories; git clone --depth 1 https://github.com/pyenv/pyenv /usr/lib/pyenv ; PYENV_ROOT=/usr/lib/pyenv /usr/lib/pyenv/bin/pyenv install $PYTHON_VERSION ; mv /usr/lib/pyenv/versions/$PYTHON_VERSION/ $PYTHON_PATH ; rm -rfv /usr/lib/pyenv ; cd $PYTHON_PATH/bin/ \\\n && sed -i \"s+/usr/lib/pyenv/versions/$PYTHON_VERSION/+$PYTHON_PATH/+g\" * ; rm -f $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; find /usr/lib/python$PYTHON_VERSION -depth ( -name '*.pyo' -o -name '*.pyc' -o -name 'test' -o -name 'tests' ) -exec rm -rf '{}' + ; apk del --no-cache --purge .build-deps ; rm -rf /var/cache/apk/* ; apk add --no-cache sqlite-dev\n#  pip  install package\nRUN pip install pip --upgrade ; pip install numpy ; pip install aiobotocore ; pip install pytz ; pip install requests ; pip install psutil\n#  since we will be \"always\" mounting the volume, we can set this up\nENTRYPOINT [\"/usr/bin/dumb-init\"]\n# CMD [\"python\"]\n","injectedSmells":[],"originalDockerfileHash":"5787be65d3f2cd63f35f7202232968af","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.7\n#   VERSIONS\nENV ALPINE_VERSION=\"3.7\" \\\n    PYTHON_VERSION=\"3.6.5\"\n#   PATHS\nENV PYTHON_PATH=\"/usr/lib/python$PYTHON_VERSION\" \\\n    PATH=\"/usr/lib/python$PYTHON_VERSION/bin/:${PATH}\"\n#   PACKAGES\n#     * dumb-init: a proper init system for containers, to reap zombie children\n#     * musl: standard C library\n#     * lib6-compat: compatibility libraries for glibc\n#     * linux-headers: commonly needed, and an unusual package name from Alpine.\n#     * build-base: used so we include the basic development packages (gcc)\n#     * bash: so we can access /bin/bash\n#     * git: to ease up clones of repos\n#     * ca-certificates: for SSL verification during Pip and easy_install\nENV PACKAGES=\" dumb-init  musl  libc6-compat  linux-headers  build-base  bash  git  ca-certificates \"\n#   PACKAGES needed to built python\nENV PYTHON_BUILD_PACKAGES=\" readline-dev  zlib-dev  bzip2-dev  sqlite-dev  libressl-dev \"\nRUN set -ex ; export PYTHON_MAJOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f3- | rev ;) ; export PYTHON_MINOR_VERSION=$( echo \"${PYTHON_VERSION}\" | rev | cut -d\".\" -f2- | rev ;) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" >> /etc/apk/repositories; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main\" >> /etc/apk/repositories; apk add --no-cache $PACKAGES || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add --no-cache $PACKAGES ) ; apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES || (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories \\\n && apk add --no-cache --virtual .build-deps $PYTHON_BUILD_PACKAGES ) ; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main/\" > /etc/apk/repositories; git clone --depth 1 https://github.com/pyenv/pyenv /usr/lib/pyenv ; PYENV_ROOT=/usr/lib/pyenv /usr/lib/pyenv/bin/pyenv install $PYTHON_VERSION ; mv /usr/lib/pyenv/versions/$PYTHON_VERSION/ $PYTHON_PATH ; rm -rfv /usr/lib/pyenv ; cd $PYTHON_PATH/bin/ \\\n && sed -i \"s+/usr/lib/pyenv/versions/$PYTHON_VERSION/+$PYTHON_PATH/+g\" * ; rm -f $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION ; ln -sf $PYTHON_PATH/bin/python $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MAJOR_VERSION-config ; ln -sf $PYTHON_PATH/bin/python-config $PYTHON_PATH/bin/python$PYTHON_MINOR_VERSION-config ; find /usr/lib/python$PYTHON_VERSION -depth\n#   pip  install package\nRUN pip install pip --upgrade ; pip install numpy ; pip install aiobotocore ; pip install pytz ; pip install requests ; pip install psutil\n#   since we will be \"always\" mounting the volume, we can set this up\nENTRYPOINT [\"/usr/bin/dumb-init\"]\n#  CMD [\"python\"]\n","originalDockerfileUglifiedHash":"325d83a807917326ec8e7306921cd6dc","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2404002e0cec58c8d5dc61ce2ea9a3420078a3d1.dockerfile"}