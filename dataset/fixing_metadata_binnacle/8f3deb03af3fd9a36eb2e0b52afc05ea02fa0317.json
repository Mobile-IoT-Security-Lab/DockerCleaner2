{"seed":2024921116,"processedDockerfileHash":"dd8152023ebe2e83c375887d70ac6241","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied.  See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#   CI docker GPU env\n#   tag: v0.50\nFROM nvidia/cuda:8.0-cudnn7-devel\n#   Base scripts\nRUN :\nCOPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh\nRUN bash /install/ubuntu_install_core.sh\nCOPY install/ubuntu_install_python.sh /install/ubuntu_install_python.sh\nRUN bash /install/ubuntu_install_python.sh\nCOPY install/ubuntu_install_llvm.sh /install/ubuntu_install_llvm.sh\nRUN bash /install/ubuntu_install_llvm.sh\nCOPY install/ubuntu_install_opencl.sh /install/ubuntu_install_opencl.sh\nRUN bash /install/ubuntu_install_opencl.sh\nCOPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh\nRUN bash /install/ubuntu_install_python_package.sh\nCOPY install/ubuntu_install_sphinx.sh /install/ubuntu_install_sphinx.sh\nRUN bash /install/ubuntu_install_sphinx.sh\n#   Fix recommonmark to latest version\nRUN git clone --depth=1 https://github.com/rtfd/recommonmark\nRUN cd recommonmark ; python3 setup.py install\n#   Enable doxygen for c++ doc build\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends doxygen graphviz libprotobuf-dev protobuf-compiler -y )\nCOPY install/ubuntu_install_java.sh /install/ubuntu_install_java.sh\nRUN bash /install/ubuntu_install_java.sh\nCOPY install/ubuntu_install_nodejs.sh /install/ubuntu_install_nodejs.sh\nRUN bash /install/ubuntu_install_nodejs.sh\nCOPY install/ubuntu_install_rocm.sh /install/ubuntu_install_rocm.sh\nRUN bash /install/ubuntu_install_rocm.sh\nCOPY install/ubuntu_install_opengl.sh /install/ubuntu_install_opengl.sh\nRUN bash /install/ubuntu_install_opengl.sh\n#   DL Frameworks\nCOPY install/ubuntu_install_mxnet.sh /install/ubuntu_install_mxnet.sh\nRUN bash /install/ubuntu_install_mxnet.sh\nCOPY install/ubuntu_install_gluoncv.sh /install/ubuntu_install_gluoncv.sh\nRUN bash /install/ubuntu_install_gluoncv.sh\nCOPY install/ubuntu_install_coreml.sh /install/ubuntu_install_coreml.sh\nRUN bash /install/ubuntu_install_coreml.sh\nCOPY install/ubuntu_install_tensorflow.sh /install/ubuntu_install_tensorflow.sh\nRUN bash /install/ubuntu_install_tensorflow.sh\nCOPY install/ubuntu_install_keras.sh /install/ubuntu_install_keras.sh\nRUN bash /install/ubuntu_install_keras.sh\nCOPY install/ubuntu_install_darknet.sh /install/ubuntu_install_darknet.sh\nRUN bash /install/ubuntu_install_darknet.sh\nCOPY install/ubuntu_install_onnx.sh /install/ubuntu_install_onnx.sh\nRUN bash /install/ubuntu_install_onnx.sh\nCOPY install/ubuntu_install_tflite.sh /install/ubuntu_install_tflite.sh\nRUN bash /install/ubuntu_install_tflite.sh\nCOPY install/ubuntu_install_caffe2.sh /install/ubuntu_install_caffe2.sh\nRUN bash /install/ubuntu_install_caffe2.sh\nRUN pip3 install Pillow\nCOPY install/ubuntu_install_vulkan.sh /install/ubuntu_install_vulkan.sh\nRUN bash /install/ubuntu_install_vulkan.sh\n#   AutoTVM deps\nCOPY install/ubuntu_install_redis.sh /install/ubuntu_install_redis.sh\nRUN bash /install/ubuntu_install_redis.sh\nCOPY install/ubuntu_install_antlr.sh /install/ubuntu_install_antlr.sh\nRUN bash /install/ubuntu_install_antlr.sh\n#   NNPACK deps\nCOPY install/ubuntu_install_nnpack.sh /install/ubuntu_install_nnpack.sh\nRUN bash /install/ubuntu_install_nnpack.sh\n#   Environment variables\nENV PATH=\"/usr/local/nvidia/bin:${PATH}\"\nENV PATH=\"/usr/local/cuda/bin:${PATH}\"\nENV CPLUS_INCLUDE_PATH=\"/usr/local/cuda/include:${CPLUS_INCLUDE_PATH}\"\nENV C_INCLUDE_PATH=\"/usr/local/cuda/include:${C_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/opt/rocm/lib:${LD_LIBRARY_PATH}\"\nENV PATH=\"/node_modules/.bin:${PATH}\"\nENV VULKAN_SDK=\"/usr/local/VulkanSDK/1.0.65.0/x86_64\"\nENV PATH=\"${PATH}:${VULKAN_SDK}/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${VULKAN_SDK}/lib\"\nENV VK_LAYER_PATH=\"${VULKAN_SDK}/etc/explicit_layer.d\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements.  See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n#  CI docker GPU env\n#  tag: v0.50\nFROM nvidia/cuda:8.0-cudnn7-devel\n#  Base scripts\nRUN apt-get update --fix-missing\nCOPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh\nRUN bash /install/ubuntu_install_core.sh\nCOPY install/ubuntu_install_python.sh /install/ubuntu_install_python.sh\nRUN bash /install/ubuntu_install_python.sh\nCOPY install/ubuntu_install_llvm.sh /install/ubuntu_install_llvm.sh\nRUN bash /install/ubuntu_install_llvm.sh\nCOPY install/ubuntu_install_opencl.sh /install/ubuntu_install_opencl.sh\nRUN bash /install/ubuntu_install_opencl.sh\nCOPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh\nRUN bash /install/ubuntu_install_python_package.sh\nCOPY install/ubuntu_install_sphinx.sh /install/ubuntu_install_sphinx.sh\nRUN bash /install/ubuntu_install_sphinx.sh\n#  Fix recommonmark to latest version\nRUN git clone --depth=1 https://github.com/rtfd/recommonmark\nRUN cd recommonmark ; python3 setup.py install\n#  Enable doxygen for c++ doc build\nRUN apt-get update \\\n && apt-get install doxygen graphviz libprotobuf-dev protobuf-compiler -y\nCOPY install/ubuntu_install_java.sh /install/ubuntu_install_java.sh\nRUN bash /install/ubuntu_install_java.sh\nCOPY install/ubuntu_install_nodejs.sh /install/ubuntu_install_nodejs.sh\nRUN bash /install/ubuntu_install_nodejs.sh\nCOPY install/ubuntu_install_rocm.sh /install/ubuntu_install_rocm.sh\nRUN bash /install/ubuntu_install_rocm.sh\nCOPY install/ubuntu_install_opengl.sh /install/ubuntu_install_opengl.sh\nRUN bash /install/ubuntu_install_opengl.sh\n#  DL Frameworks\nCOPY install/ubuntu_install_mxnet.sh /install/ubuntu_install_mxnet.sh\nRUN bash /install/ubuntu_install_mxnet.sh\nCOPY install/ubuntu_install_gluoncv.sh /install/ubuntu_install_gluoncv.sh\nRUN bash /install/ubuntu_install_gluoncv.sh\nCOPY install/ubuntu_install_coreml.sh /install/ubuntu_install_coreml.sh\nRUN bash /install/ubuntu_install_coreml.sh\nCOPY install/ubuntu_install_tensorflow.sh /install/ubuntu_install_tensorflow.sh\nRUN bash /install/ubuntu_install_tensorflow.sh\nCOPY install/ubuntu_install_keras.sh /install/ubuntu_install_keras.sh\nRUN bash /install/ubuntu_install_keras.sh\nCOPY install/ubuntu_install_darknet.sh /install/ubuntu_install_darknet.sh\nRUN bash /install/ubuntu_install_darknet.sh\nCOPY install/ubuntu_install_onnx.sh /install/ubuntu_install_onnx.sh\nRUN bash /install/ubuntu_install_onnx.sh\nCOPY install/ubuntu_install_tflite.sh /install/ubuntu_install_tflite.sh\nRUN bash /install/ubuntu_install_tflite.sh\nCOPY install/ubuntu_install_caffe2.sh /install/ubuntu_install_caffe2.sh\nRUN bash /install/ubuntu_install_caffe2.sh\nRUN pip3 install Pillow\nCOPY install/ubuntu_install_vulkan.sh /install/ubuntu_install_vulkan.sh\nRUN bash /install/ubuntu_install_vulkan.sh\n#  AutoTVM deps\nCOPY install/ubuntu_install_redis.sh /install/ubuntu_install_redis.sh\nRUN bash /install/ubuntu_install_redis.sh\nCOPY install/ubuntu_install_antlr.sh /install/ubuntu_install_antlr.sh\nRUN bash /install/ubuntu_install_antlr.sh\n#  NNPACK deps\nCOPY install/ubuntu_install_nnpack.sh /install/ubuntu_install_nnpack.sh\nRUN bash /install/ubuntu_install_nnpack.sh\n#  Environment variables\nENV PATH=\"/usr/local/nvidia/bin:${PATH}\"\nENV PATH=\"/usr/local/cuda/bin:${PATH}\"\nENV CPLUS_INCLUDE_PATH=\"/usr/local/cuda/include:${CPLUS_INCLUDE_PATH}\"\nENV C_INCLUDE_PATH=\"/usr/local/cuda/include:${C_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/opt/rocm/lib:${LD_LIBRARY_PATH}\"\nENV PATH=\"/node_modules/.bin:${PATH}\"\nENV VULKAN_SDK=\"/usr/local/VulkanSDK/1.0.65.0/x86_64\"\nENV PATH=\"${PATH}:${VULKAN_SDK}/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${VULKAN_SDK}/lib\"\nENV VK_LAYER_PATH=\"${VULKAN_SDK}/etc/explicit_layer.d\"\n","injectedSmells":[],"originalDockerfileHash":"7fe36414261b13120f34dfb578b1d81c","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied.  See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#   CI docker GPU env\n#   tag: v0.50\nFROM nvidia/cuda:8.0-cudnn7-devel\n#   Base scripts\nRUN apt-get update --fix-missing\nCOPY install/ubuntu_install_core.sh /install/ubuntu_install_core.sh\nRUN bash /install/ubuntu_install_core.sh\nCOPY install/ubuntu_install_python.sh /install/ubuntu_install_python.sh\nRUN bash /install/ubuntu_install_python.sh\nCOPY install/ubuntu_install_llvm.sh /install/ubuntu_install_llvm.sh\nRUN bash /install/ubuntu_install_llvm.sh\nCOPY install/ubuntu_install_opencl.sh /install/ubuntu_install_opencl.sh\nRUN bash /install/ubuntu_install_opencl.sh\nCOPY install/ubuntu_install_python_package.sh /install/ubuntu_install_python_package.sh\nRUN bash /install/ubuntu_install_python_package.sh\nCOPY install/ubuntu_install_sphinx.sh /install/ubuntu_install_sphinx.sh\nRUN bash /install/ubuntu_install_sphinx.sh\n#   Fix recommonmark to latest version\nRUN git clone --depth=1 https://github.com/rtfd/recommonmark\nRUN cd recommonmark ; python3 setup.py install\n#   Enable doxygen for c++ doc build\nRUN apt-get update \\\n && apt-get install doxygen graphviz libprotobuf-dev protobuf-compiler -y\nCOPY install/ubuntu_install_java.sh /install/ubuntu_install_java.sh\nRUN bash /install/ubuntu_install_java.sh\nCOPY install/ubuntu_install_nodejs.sh /install/ubuntu_install_nodejs.sh\nRUN bash /install/ubuntu_install_nodejs.sh\nCOPY install/ubuntu_install_rocm.sh /install/ubuntu_install_rocm.sh\nRUN bash /install/ubuntu_install_rocm.sh\nCOPY install/ubuntu_install_opengl.sh /install/ubuntu_install_opengl.sh\nRUN bash /install/ubuntu_install_opengl.sh\n#   DL Frameworks\nCOPY install/ubuntu_install_mxnet.sh /install/ubuntu_install_mxnet.sh\nRUN bash /install/ubuntu_install_mxnet.sh\nCOPY install/ubuntu_install_gluoncv.sh /install/ubuntu_install_gluoncv.sh\nRUN bash /install/ubuntu_install_gluoncv.sh\nCOPY install/ubuntu_install_coreml.sh /install/ubuntu_install_coreml.sh\nRUN bash /install/ubuntu_install_coreml.sh\nCOPY install/ubuntu_install_tensorflow.sh /install/ubuntu_install_tensorflow.sh\nRUN bash /install/ubuntu_install_tensorflow.sh\nCOPY install/ubuntu_install_keras.sh /install/ubuntu_install_keras.sh\nRUN bash /install/ubuntu_install_keras.sh\nCOPY install/ubuntu_install_darknet.sh /install/ubuntu_install_darknet.sh\nRUN bash /install/ubuntu_install_darknet.sh\nCOPY install/ubuntu_install_onnx.sh /install/ubuntu_install_onnx.sh\nRUN bash /install/ubuntu_install_onnx.sh\nCOPY install/ubuntu_install_tflite.sh /install/ubuntu_install_tflite.sh\nRUN bash /install/ubuntu_install_tflite.sh\nCOPY install/ubuntu_install_caffe2.sh /install/ubuntu_install_caffe2.sh\nRUN bash /install/ubuntu_install_caffe2.sh\nRUN pip3 install Pillow\nCOPY install/ubuntu_install_vulkan.sh /install/ubuntu_install_vulkan.sh\nRUN bash /install/ubuntu_install_vulkan.sh\n#   AutoTVM deps\nCOPY install/ubuntu_install_redis.sh /install/ubuntu_install_redis.sh\nRUN bash /install/ubuntu_install_redis.sh\nCOPY install/ubuntu_install_antlr.sh /install/ubuntu_install_antlr.sh\nRUN bash /install/ubuntu_install_antlr.sh\n#   NNPACK deps\nCOPY install/ubuntu_install_nnpack.sh /install/ubuntu_install_nnpack.sh\nRUN bash /install/ubuntu_install_nnpack.sh\n#   Environment variables\nENV PATH=\"/usr/local/nvidia/bin:${PATH}\"\nENV PATH=\"/usr/local/cuda/bin:${PATH}\"\nENV CPLUS_INCLUDE_PATH=\"/usr/local/cuda/include:${CPLUS_INCLUDE_PATH}\"\nENV C_INCLUDE_PATH=\"/usr/local/cuda/include:${C_INCLUDE_PATH}\"\nENV LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}\"\nENV LD_LIBRARY_PATH=\"/opt/rocm/lib:${LD_LIBRARY_PATH}\"\nENV PATH=\"/node_modules/.bin:${PATH}\"\nENV VULKAN_SDK=\"/usr/local/VulkanSDK/1.0.65.0/x86_64\"\nENV PATH=\"${PATH}:${VULKAN_SDK}/bin\"\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${VULKAN_SDK}/lib\"\nENV VK_LAYER_PATH=\"${VULKAN_SDK}/etc/explicit_layer.d\"\n","originalDockerfileUglifiedHash":"c6df3e5512bb8e224da3cb54f2f7cbcd","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8f3deb03af3fd9a36eb2e0b52afc05ea02fa0317.dockerfile"}