{"seed":527448433,"processedDockerfileHash":"287fd526284bbd55af85d29ea4c2a388","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   A image for building paddle binaries\n#   Use cuda devel base image for both cpu and gpu environment\n#   When you modify it, please be aware of cudnn-runtime version\nFROM nvidia/cuda:<baseimg>\nMAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>\nARG UBUNTU_MIRROR\nRUN /bin/bash -c 'if [[ -n ${UBUNTU_MIRROR} ]]; then sed -i 's#http://archive.ubuntu.com/ubuntu#${UBUNTU_MIRROR}#g' /etc/apt/sources.list; fi'\n#   ENV variables\nARG WITH_GPU\nARG WITH_AVX\nENV WOBOQ=\"OFF\"\nENV WITH_GPU=\"${WITH_GPU:-ON}\"\nENV WITH_AVX=\"${WITH_AVX:-ON}\"\nENV HOME=\"/root\"\n#   Add bash enhancements\nCOPY ./docker/root/ /root/\n#   Prepare packages for Python\nRUN apt-get update \\\n && apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget=1.17.1-1ubuntu1.5 curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev -y\n#   Install Python3.6\nRUN mkdir -p /root/python_build/ \\\n && wget -q https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz \\\n && tar -zxf sqlite-autoconf-3250300.tar.gz \\\n && cd sqlite-autoconf-3250300 \\\n && ./configure -prefix=/usr/local \\\n && make -j8 \\\n && make install \\\n && cd ../ \\\n && rm sqlite-autoconf-3250300.tar.gz \\\n && wget -q https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz \\\n && tar -xzf Python-3.6.0.tgz \\\n && cd Python-3.6.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\n#   Install Python3.7\nRUN wget -q https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz \\\n && tar -xzf Python-3.7.0.tgz \\\n && cd Python-3.7.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\nRUN rm -r /root/python_build\nRUN apt-get update \\\n && apt-get install --no-install-recommends patchelf python3 python3-dev python3-pip git=1:2.7.4-0ubuntu1.10 python-pip python-dev python-opencv openssh-server bison libnccl2 unzip unrar tar xz-utils bzip2 gzip coreutils ntp curl sed grep graphviz libjpeg-dev zlib1g-dev python-matplotlib gcc-4.8 g++-4.8 automake locales clang-format swig cmake liblapack-dev liblapacke-dev clang-3.8 llvm-3.8 libclang-3.8-dev net-tools libtool ccache -y --allow-downgrades --allow-change-held-packages < nccl_version > libnccl-dev= < nccl_version > wget \\\n && apt-get clean -y\n#   Install Go and glide\nRUN wget -qO- https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && mkdir /root/gopath \\\n && mkdir /root/gopath/bin \\\n && mkdir /root/gopath/src\nENV GOROOT=\"/usr/local/go\" \\\n    GOPATH=\"/root/gopath\"\n#   should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.\nENV PATH=\"${PATH}:${GOROOT}/bin:${GOPATH}/bin\"\n#   install glide\nRUN curl -s -q https://glide.sh/get | sh\n#   Install TensorRT\n#   following TensorRT.tar.gz is not the default official one, we do two miny changes:\n#   1. Remove the unnecessary files to make the library small. TensorRT.tar.gz only contains include and lib now,\n#      and its size is only one-third of the official one.\n#   2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.\n#      See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.\nRUN wget -q https://paddlepaddledeps.bj.bcebos.com/TensorRT_ --no-check-certificate < tensor_rt_version > .tar.gz \\\n && tar -zxf TensorRT_ -C /usr/local < tensor_rt_version > .tar.gz \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /include \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /lib\n#   git credential to skip password typing\nRUN git config --global credential.helper store\n#   Fix locales to en_US.UTF-8\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n#   FIXME: due to temporary ipykernel dependency issue, specify ipykernel jupyter\n#   version util jupyter fixes this issue.\n#   specify sphinx version as 1.5.6 and remove -U option for [pip install -U\n#   sphinx-rtd-theme] since -U option will cause sphinx being updated to newest\n#   version(1.7.1 for now), which causes building documentation failed.\nRUN pip3 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.6 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.6 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.6 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.7 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.7 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.7 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && easy_install -U pip \\\n && pip install pip==23.1 setuptools==67.6.1 wheel==0.40.0 py-cpuinfo==5.0.0 --no-cache-dir -U \\\n && pip install docopt==0.6.2 PyYAML==6.0 sphinx==1.5.6 --no-cache-dir -U \\\n && pip install sphinx-rtd-theme==0.1.9 recommonmark==0.7.1 --no-cache-dir\nRUN pip3 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3 --no-cache-dir install opencv-python \\\n && pip3.6 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.6 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.6 --no-cache-dir install opencv-python \\\n && pip3.7 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.7 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.7 --no-cache-dir install opencv-python \\\n && pip install 'pre-commit==1.10.4' 'ipython==5.3.0' --no-cache-dir \\\n && pip install 'ipykernel==4.6.0' 'jupyter==1.0.0' --no-cache-dir \\\n && pip install opencv-python==4.7.0.72 --no-cache-dir\n#  For docstring checker\nRUN pip3 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.6 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.7 --no-cache-dir install pylint pytest astroid isort\nRUN pip install pylint==2.17.2 pytest==7.3.1 astroid==2.15.2 isort==5.12.0 LinkChecker==10.2.1 --no-cache-dir\nRUN pip3 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.6 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.7 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip install requests==2.9.2 numpy==1.24.2 protobuf==4.22.3 recordio==0.1.7 matplotlib==2.2.3 rarfile==4.0 scipy==1.10.1 Pillow==9.5.0 nltk==3.8.1 graphviz==0.20.1 six==1.16.0 funcsigs==1.0.2 pyyaml==6.0 decorator==5.1.1 prettytable==3.7.0 --no-cache-dir\n#   To fix https://github.com/PaddlePaddle/Paddle/issues/1954, we use\n#   the solution in https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2\nRUN apt-get install --no-install-recommends libssl-dev libffi-dev -y \\\n && apt-get clean -y\nRUN pip3 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.6 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.7 --no-cache-dir install certifi urllib3[secure]\nRUN pip install certifi==2022.12.7 urllib3[secure] --no-cache-dir\n#   Install woboq_codebrowser to /woboq\nRUN git clone https://github.com/woboq/woboq_codebrowser /woboq \\\n && (cd /woboq cmake -DLLVM_CONFIG_EXECUTABLE=/usr/bin/llvm-config-3.8 -DCMAKE_BUILD_TYPE=Release . make )\n#   ar mishandles 4GB files\n#   https://sourceware.org/bugzilla/show_bug.cgi?id=14625\n#   remove them when apt-get support 2.27 and higher version\nRUN wget -q https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/binutils/2.27-9ubuntu1/binutils_2.27.orig.tar.gz \\\n && tar -xzf binutils_2.27.orig.tar.gz \\\n && cd binutils-2.27 \\\n && ./configure \\\n && make -j \\\n && make install \\\n && cd .. \\\n && rm -rf binutils-2.27 binutils_2.27.orig.tar.gz\n#   Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service\nRUN mkdir /var/run/sshd\nRUN echo 'root:root' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nEXPOSE 22/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  A image for building paddle binaries\n#  Use cuda devel base image for both cpu and gpu environment\n#  When you modify it, please be aware of cudnn-runtime version\nFROM nvidia/cuda:<baseimg>\nMAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>\nARG UBUNTU_MIRROR\nRUN /bin/bash -c 'if [[ -n ${UBUNTU_MIRROR} ]]; then sed -i 's#http://archive.ubuntu.com/ubuntu#${UBUNTU_MIRROR}#g' /etc/apt/sources.list; fi'\n#  ENV variables\nARG WITH_GPU\nARG WITH_AVX\nENV WOBOQ=\"OFF\"\nENV WITH_GPU=\"${WITH_GPU:-ON}\"\nENV WITH_AVX=\"${WITH_AVX:-ON}\"\nENV HOME=\"/root\"\n#  Add bash enhancements\nCOPY ./docker/root/ /root/\n#  Prepare packages for Python\nRUN apt-get update \\\n && apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev -y\n#  Install Python3.6\nRUN mkdir -p /root/python_build/ \\\n && wget -q https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz \\\n && tar -zxf sqlite-autoconf-3250300.tar.gz \\\n && cd sqlite-autoconf-3250300 \\\n && ./configure -prefix=/usr/local \\\n && make -j8 \\\n && make install \\\n && cd ../ \\\n && rm sqlite-autoconf-3250300.tar.gz \\\n && wget -q https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz \\\n && tar -xzf Python-3.6.0.tgz \\\n && cd Python-3.6.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\n#  Install Python3.7\nRUN wget -q https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz \\\n && tar -xzf Python-3.7.0.tgz \\\n && cd Python-3.7.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\nRUN rm -r /root/python_build\nRUN apt-get update \\\n && apt-get install patchelf python3 python3-dev python3-pip git python-pip python-dev python-opencv openssh-server bison libnccl2 unzip unrar tar xz-utils bzip2 gzip coreutils ntp curl sed grep graphviz libjpeg-dev zlib1g-dev python-matplotlib gcc-4.8 g++-4.8 automake locales clang-format swig cmake liblapack-dev liblapacke-dev clang-3.8 llvm-3.8 libclang-3.8-dev net-tools libtool ccache -y --allow-downgrades --allow-change-held-packages < nccl_version > libnccl-dev= < nccl_version > wget \\\n && apt-get clean -y\n#  Install Go and glide\nRUN wget -qO- https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && mkdir /root/gopath \\\n && mkdir /root/gopath/bin \\\n && mkdir /root/gopath/src\nENV GOROOT=\"/usr/local/go\" \\\n    GOPATH=\"/root/gopath\"\n#  should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.\nENV PATH=\"${PATH}:${GOROOT}/bin:${GOPATH}/bin\"\n#  install glide\nRUN curl -s -q https://glide.sh/get | sh\n#  Install TensorRT\n#  following TensorRT.tar.gz is not the default official one, we do two miny changes:\n#  1. Remove the unnecessary files to make the library small. TensorRT.tar.gz only contains include and lib now,\n#     and its size is only one-third of the official one.\n#  2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.\n#     See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.\nRUN wget -q https://paddlepaddledeps.bj.bcebos.com/TensorRT_ --no-check-certificate < tensor_rt_version > .tar.gz \\\n && tar -zxf TensorRT_ -C /usr/local < tensor_rt_version > .tar.gz \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /include \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /lib\n#  git credential to skip password typing\nRUN git config --global credential.helper store\n#  Fix locales to en_US.UTF-8\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n#  FIXME: due to temporary ipykernel dependency issue, specify ipykernel jupyter\n#  version util jupyter fixes this issue.\n#  specify sphinx version as 1.5.6 and remove -U option for [pip install -U\n#  sphinx-rtd-theme] since -U option will cause sphinx being updated to newest\n#  version(1.7.1 for now), which causes building documentation failed.\nRUN pip3 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.6 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.6 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.6 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.7 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.7 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.7 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && easy_install -U pip \\\n && pip install pip setuptools wheel py-cpuinfo==5.0.0 --no-cache-dir -U \\\n && pip install docopt PyYAML sphinx==1.5.6 --no-cache-dir -U \\\n && pip install sphinx-rtd-theme==0.1.9 recommonmark --no-cache-dir\nRUN pip3 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3 --no-cache-dir install opencv-python \\\n && pip3.6 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.6 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.6 --no-cache-dir install opencv-python \\\n && pip3.7 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.7 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.7 --no-cache-dir install opencv-python \\\n && pip install 'pre-commit==1.10.4' 'ipython==5.3.0' --no-cache-dir \\\n && pip install 'ipykernel==4.6.0' 'jupyter==1.0.0' --no-cache-dir \\\n && pip install opencv-python --no-cache-dir\n# For docstring checker\nRUN pip3 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.6 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.7 --no-cache-dir install pylint pytest astroid isort\nRUN pip install pylint pytest astroid isort LinkChecker --no-cache-dir\nRUN pip3 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.6 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.7 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable --no-cache-dir\n#  To fix https://github.com/PaddlePaddle/Paddle/issues/1954, we use\n#  the solution in https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2\nRUN apt-get install libssl-dev libffi-dev -y \\\n && apt-get clean -y\nRUN pip3 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.6 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.7 --no-cache-dir install certifi urllib3[secure]\nRUN pip install certifi urllib3[secure] --no-cache-dir\n#  Install woboq_codebrowser to /woboq\nRUN git clone https://github.com/woboq/woboq_codebrowser /woboq \\\n && (cd /woboq cmake -DLLVM_CONFIG_EXECUTABLE=/usr/bin/llvm-config-3.8 -DCMAKE_BUILD_TYPE=Release . make )\n#  ar mishandles 4GB files\n#  https://sourceware.org/bugzilla/show_bug.cgi?id=14625\n#  remove them when apt-get support 2.27 and higher version\nRUN wget -q https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/binutils/2.27-9ubuntu1/binutils_2.27.orig.tar.gz \\\n && tar -xzf binutils_2.27.orig.tar.gz \\\n && cd binutils-2.27 \\\n && ./configure \\\n && make -j \\\n && make install \\\n && cd .. \\\n && rm -rf binutils-2.27 binutils_2.27.orig.tar.gz\n#  Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service\nRUN mkdir /var/run/sshd\nRUN echo 'root:root' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nEXPOSE 22/tcp\n","injectedSmells":[],"originalDockerfileHash":"e87b0d3188e080483cb5dbbf1f703971","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   A image for building paddle binaries\n#   Use cuda devel base image for both cpu and gpu environment\n#   When you modify it, please be aware of cudnn-runtime version\nFROM nvidia/cuda:<baseimg>\nMAINTAINER PaddlePaddle Authors <paddle-dev@baidu.com>\nARG UBUNTU_MIRROR\nRUN /bin/bash -c 'if [[ -n ${UBUNTU_MIRROR} ]]; then sed -i 's#http://archive.ubuntu.com/ubuntu#${UBUNTU_MIRROR}#g' /etc/apt/sources.list; fi'\n#   ENV variables\nARG WITH_GPU\nARG WITH_AVX\nENV WOBOQ=\"OFF\"\nENV WITH_GPU=\"${WITH_GPU:-ON}\"\nENV WITH_AVX=\"${WITH_AVX:-ON}\"\nENV HOME=\"/root\"\n#   Add bash enhancements\nCOPY ./docker/root/ /root/\n#   Prepare packages for Python\nRUN apt-get update \\\n && apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev -y\n#   Install Python3.6\nRUN mkdir -p /root/python_build/ \\\n && wget -q https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz \\\n && tar -zxf sqlite-autoconf-3250300.tar.gz \\\n && cd sqlite-autoconf-3250300 \\\n && ./configure -prefix=/usr/local \\\n && make -j8 \\\n && make install \\\n && cd ../ \\\n && rm sqlite-autoconf-3250300.tar.gz \\\n && wget -q https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz \\\n && tar -xzf Python-3.6.0.tgz \\\n && cd Python-3.6.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\n#   Install Python3.7\nRUN wget -q https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz \\\n && tar -xzf Python-3.7.0.tgz \\\n && cd Python-3.7.0 \\\n && CFLAGS=\"-Wformat\" ./configure --prefix=/usr/local/ --enable-shared > /dev/null \\\n && make -j8 > /dev/null \\\n && make altinstall > /dev/null\nRUN rm -r /root/python_build\nRUN apt-get update \\\n && apt-get install patchelf python3 python3-dev python3-pip git python-pip python-dev python-opencv openssh-server bison libnccl2 unzip unrar tar xz-utils bzip2 gzip coreutils ntp curl sed grep graphviz libjpeg-dev zlib1g-dev python-matplotlib gcc-4.8 g++-4.8 automake locales clang-format swig cmake liblapack-dev liblapacke-dev clang-3.8 llvm-3.8 libclang-3.8-dev net-tools libtool ccache -y --allow-downgrades --allow-change-held-packages < nccl_version > libnccl-dev= < nccl_version > wget \\\n && apt-get clean -y\n#   Install Go and glide\nRUN wget -qO- https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz | tar -xz -C /usr/local \\\n && mkdir /root/gopath \\\n && mkdir /root/gopath/bin \\\n && mkdir /root/gopath/src\nENV GOROOT=\"/usr/local/go\" \\\n    GOPATH=\"/root/gopath\"\n#   should not be in the same line with GOROOT definition, otherwise docker build could not find GOROOT.\nENV PATH=\"${PATH}:${GOROOT}/bin:${GOPATH}/bin\"\n#   install glide\nRUN curl -s -q https://glide.sh/get | sh\n#   Install TensorRT\n#   following TensorRT.tar.gz is not the default official one, we do two miny changes:\n#   1. Remove the unnecessary files to make the library small. TensorRT.tar.gz only contains include and lib now,\n#      and its size is only one-third of the official one.\n#   2. Manually add ~IPluginFactory() in IPluginFactory class of NvInfer.h, otherwise, it couldn't work in paddle.\n#      See https://github.com/PaddlePaddle/Paddle/issues/10129 for details.\nRUN wget -q https://paddlepaddledeps.bj.bcebos.com/TensorRT_ --no-check-certificate < tensor_rt_version > .tar.gz \\\n && tar -zxf TensorRT_ -C /usr/local < tensor_rt_version > .tar.gz \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /include \\\n && cp -rf /usr/local/TensorRT_ /usr < tensor_rt_version > /lib\n#   git credential to skip password typing\nRUN git config --global credential.helper store\n#   Fix locales to en_US.UTF-8\nRUN localedef -i en_US -f UTF-8 en_US.UTF-8\n#   FIXME: due to temporary ipykernel dependency issue, specify ipykernel jupyter\n#   version util jupyter fixes this issue.\n#   specify sphinx version as 1.5.6 and remove -U option for [pip install -U\n#   sphinx-rtd-theme] since -U option will cause sphinx being updated to newest\n#   version(1.7.1 for now), which causes building documentation failed.\nRUN pip3 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.6 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.6 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.6 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && pip3.7 --no-cache-dir install -U wheel py-cpuinfo==5.0.0 \\\n && pip3.7 --no-cache-dir install -U docopt PyYAML sphinx==1.5.6 \\\n && pip3.7 --no-cache-dir install sphinx-rtd-theme==0.1.9 recommonmark \\\n && easy_install -U pip \\\n && pip install pip setuptools wheel py-cpuinfo==5.0.0 --no-cache-dir -U \\\n && pip install docopt PyYAML sphinx==1.5.6 --no-cache-dir -U \\\n && pip install sphinx-rtd-theme==0.1.9 recommonmark --no-cache-dir\nRUN pip3 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3 --no-cache-dir install opencv-python \\\n && pip3.6 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.6 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.6 --no-cache-dir install opencv-python \\\n && pip3.7 --no-cache-dir install 'pre-commit==1.10.4' 'ipython==5.3.0' \\\n && pip3.7 --no-cache-dir install 'ipykernel==4.6.0' 'jupyter==1.0.0' \\\n && pip3.7 --no-cache-dir install opencv-python \\\n && pip install 'pre-commit==1.10.4' 'ipython==5.3.0' --no-cache-dir \\\n && pip install 'ipykernel==4.6.0' 'jupyter==1.0.0' --no-cache-dir \\\n && pip install opencv-python --no-cache-dir\n#  For docstring checker\nRUN pip3 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.6 --no-cache-dir install pylint pytest astroid isort\nRUN pip3.7 --no-cache-dir install pylint pytest astroid isort\nRUN pip install pylint pytest astroid isort LinkChecker --no-cache-dir\nRUN pip3 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.6 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip3.7 --no-cache-dir install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable\nRUN pip install requests==2.9.2 numpy protobuf recordio matplotlib==2.2.3 rarfile scipy Pillow nltk graphviz six funcsigs pyyaml decorator prettytable --no-cache-dir\n#   To fix https://github.com/PaddlePaddle/Paddle/issues/1954, we use\n#   the solution in https://urllib3.readthedocs.io/en/latest/user-guide.html#ssl-py2\nRUN apt-get install libssl-dev libffi-dev -y \\\n && apt-get clean -y\nRUN pip3 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.6 --no-cache-dir install certifi urllib3[secure]\nRUN pip3.7 --no-cache-dir install certifi urllib3[secure]\nRUN pip install certifi urllib3[secure] --no-cache-dir\n#   Install woboq_codebrowser to /woboq\nRUN git clone https://github.com/woboq/woboq_codebrowser /woboq \\\n && (cd /woboq cmake -DLLVM_CONFIG_EXECUTABLE=/usr/bin/llvm-config-3.8 -DCMAKE_BUILD_TYPE=Release . make )\n#   ar mishandles 4GB files\n#   https://sourceware.org/bugzilla/show_bug.cgi?id=14625\n#   remove them when apt-get support 2.27 and higher version\nRUN wget -q https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/binutils/2.27-9ubuntu1/binutils_2.27.orig.tar.gz \\\n && tar -xzf binutils_2.27.orig.tar.gz \\\n && cd binutils-2.27 \\\n && ./configure \\\n && make -j \\\n && make install \\\n && cd .. \\\n && rm -rf binutils-2.27 binutils_2.27.orig.tar.gz\n#   Configure OpenSSH server. c.f. https://docs.docker.com/engine/examples/running_ssh_service\nRUN mkdir /var/run/sshd\nRUN echo 'root:root' | chpasswd\nRUN sed -ri 's/^PermitRootLogin\\s+.*/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config\nEXPOSE 22/tcp\n","originalDockerfileUglifiedHash":"1d38394676356cd0c013fffe70c56863","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4783b62a44fc71434fa3909f4416f3ab5e693e54.dockerfile"}