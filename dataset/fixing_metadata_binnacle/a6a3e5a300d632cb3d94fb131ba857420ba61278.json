{"seed":2853839275,"processedDockerfileHash":"fd09c838d575fc1c55e58c9ae1d5078a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM php:7.2-fpm\n#   Install tini (init handler)\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document /tini https://github.com/krallin/tini/releases/download/v0.9.0/tini\nRUN chmod +x /tini\n#   For running APT in non-interactive mode\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Define build requirements, which can be removed after setup from the container\nENV PHPIZE_DEPS=\"autoconf             build-essential      file                 g++                  gcc                  libbz2-dev           libc-client-dev      libc-dev             libcurl4-gnutls-dev  libedit-dev          libfreetype6-dev     libgmp-dev           libicu-dev           libjpeg62-turbo-dev  libkrb5-dev          libmcrypt-dev        libpng-dev           libpq-dev            libsqlite3-dev       libssh2-1-dev        libxml2-dev          libxslt1-dev         make                 pkg-config           re2c                 librabbitmq-dev      libssl-dev\"\n#   Set Debian sources\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.20.1-1.1 gnupg=2.2.12-1+deb10u2 apt-transport-https=1.8.2.3 -q -y \\\n && echo \"deb https://deb.nodesource.com/node_9.x stretch main\" > /etc/apt/sources.list.d/node.list \\\n && wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n#  Fixing the postgresql-client installation issue\nRUN mkdir -p /usr/share/man/man7/ \\\n && touch /usr/share/man/man7/ABORT.7.gz.dpkg-tmp \\\n && mkdir -p /usr/share/man/man1/ \\\n && touch /usr/share/man/man1/psql.1.gz\n#   Install Debian packages\nRUN apt-get update -qy \\\n && apt-get install --no-install-recommends apt-utils=1.8.2.3 ca-certificates=20200601~deb10u2 curl=7.64.0-4+deb10u5 debconf=1.5.71+deb10u1 debconf-utils=1.5.71+deb10u1 git=1:2.20.1-2+deb10u8 git-core graphviz=2.40.1-6+deb10u1 libedit2=3.1-20181209-1 libpq5=11.19-0+deb10u1 libsqlite3-0=3.27.2-3+deb10u2 mc=3:4.8.22-1 netcat=1.10-41.1 nginx=1.14.2-2+deb10u5 nginx-extras=1.14.2-2+deb10u5 nodejs=10.24.0~dfsg-1~deb10u3 patch=2.7.6-3+deb10u1 postgresql-client=11+200+deb10u5 psmisc=23.2-1+deb10u1 python-dev=2.7.16-1 python-setuptools=40.8.0-1 redis-tools=5:5.0.14-1+deb10u3 rsync=3.1.3-6 ssmtp sudo=1.8.27-1+deb10u5 supervisor=3.3.5-1 unzip=6.0-23+deb10u3 vim=2:8.1.0875-5+deb10u4 wget=1.20.1-1.1 zip=3.0-11+b1 openssh-server=1:7.9p1-10+deb10u2 $PHPIZE_DEPS -q -y \\\n && mkdir /var/run/sshd \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\n && docker-php-ext-install -j$( nproc ;) bcmath bz2 gd gmp iconv intl mbstring mysqli pdo pdo_mysql pdo_pgsql pgsql readline soap xmlrpc xsl zip sockets \\\n && pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && echo \"extension=redis.so\" > $PHP_INI_DIR/conf.d/docker-php-ext-redis.ini \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && easy_install j2cli \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && apt-get -qy autoremove \\\n && apt-get -qy purge $PHPIZE_DEPS \\\n && rm -rf /var/lib/apt/lists/*\n#   Nginx configuration\nCOPY docker/nginx/conf.d /etc/nginx/conf.d\nCOPY docker/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY docker/nginx/fastcgi_params /etc/nginx/fastcgi_params\n#   PHP-FPM configuration\nRUN rm -f /usr/local/etc/php-fpm.d/*\nCOPY docker/php/php-fpm.conf /usr/local/etc/php-fpm.conf\nCOPY docker/php/pool.d/*.conf /usr/local/etc/php-fpm.d/\nRUN echo \"memory_limit = 512M\" >> /usr/local/etc/php/php.ini\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nRUN install -d -o www-data -g www-data -m 0755 /var/www\nRUN chown -R www-data:www-data /var/www\nWORKDIR /var/www\n#   supervisord configuration\nCOPY docker/supervisord.conf /etc/supervisor/supervisord.conf\nRUN mkdir -p /etc/nginx/waiting\nCOPY docker/nginx/waiting/waiting_vhost.conf /etc/nginx/waiting/waiting_vhost.conf\nCOPY docker/nginx/waiting/nginx_waiting.conf /etc/nginx/nginx_waiting.conf\n#   Run app with entrypoints\nENTRYPOINT [\"/tini\", \"--\", \"/entrypoint.sh\"]\nEXPOSE 8080/tcp 8081/tcp 22/tcp\n#  STOPSIGNAL SIGQUIT\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\", \"--nodaemon\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:80 || exit 1\n","originalDockerfile":"FROM php:7.2-fpm\n#  Install tini (init handler)\nADD https://github.com/krallin/tini/releases/download/v0.9.0/tini /tini\nRUN chmod +x /tini\n#  For running APT in non-interactive mode\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Define build requirements, which can be removed after setup from the container\nENV PHPIZE_DEPS=\"autoconf             build-essential      file                 g++                  gcc                  libbz2-dev           libc-client-dev      libc-dev             libcurl4-gnutls-dev  libedit-dev          libfreetype6-dev     libgmp-dev           libicu-dev           libjpeg62-turbo-dev  libkrb5-dev          libmcrypt-dev        libpng-dev           libpq-dev            libsqlite3-dev       libssh2-1-dev        libxml2-dev          libxslt1-dev         make                 pkg-config           re2c                 librabbitmq-dev      libssl-dev\"\n#  Set Debian sources\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget gnupg apt-transport-https -q -y \\\n && echo \"deb https://deb.nodesource.com/node_9.x stretch main\" > /etc/apt/sources.list.d/node.list \\\n && wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n# Fixing the postgresql-client installation issue\nRUN mkdir -p /usr/share/man/man7/ \\\n && touch /usr/share/man/man7/ABORT.7.gz.dpkg-tmp \\\n && mkdir -p /usr/share/man/man1/ \\\n && touch /usr/share/man/man1/psql.1.gz\n#  Install Debian packages\nRUN apt-get update -qy \\\n && apt-get install --no-install-recommends apt-utils ca-certificates curl debconf debconf-utils git git-core graphviz libedit2 libpq5 libsqlite3-0 mc netcat nginx nginx-extras nodejs patch postgresql-client psmisc python-dev python-setuptools redis-tools rsync ssmtp sudo supervisor unzip vim wget zip openssh-server $PHPIZE_DEPS -q -y \\\n && mkdir /var/run/sshd \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\n && docker-php-ext-install -j$( nproc ;) bcmath bz2 gd gmp iconv intl mbstring mysqli pdo pdo_mysql pdo_pgsql pgsql readline soap xmlrpc xsl zip sockets \\\n && pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && echo \"extension=redis.so\" > $PHP_INI_DIR/conf.d/docker-php-ext-redis.ini \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && easy_install j2cli \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && apt-get -qy autoremove \\\n && apt-get -qy purge $PHPIZE_DEPS \\\n && rm -rf /var/lib/apt/lists/*\n#  Nginx configuration\nCOPY docker/nginx/conf.d /etc/nginx/conf.d\nCOPY docker/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY docker/nginx/fastcgi_params /etc/nginx/fastcgi_params\n#  PHP-FPM configuration\nRUN rm -f /usr/local/etc/php-fpm.d/*\nCOPY docker/php/php-fpm.conf /usr/local/etc/php-fpm.conf\nCOPY docker/php/pool.d/*.conf /usr/local/etc/php-fpm.d/\nRUN echo \"memory_limit = 512M\" >> /usr/local/etc/php/php.ini\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nRUN install -d -o www-data -g www-data -m 0755 /var/www\nRUN chown -R www-data:www-data /var/www\nWORKDIR /var/www\n#  supervisord configuration\nCOPY docker/supervisord.conf /etc/supervisor/supervisord.conf\nRUN mkdir -p /etc/nginx/waiting\nCOPY docker/nginx/waiting/waiting_vhost.conf /etc/nginx/waiting/waiting_vhost.conf\nCOPY docker/nginx/waiting/nginx_waiting.conf /etc/nginx/nginx_waiting.conf\n#  Run app with entrypoints\nENTRYPOINT [\"/tini\", \"--\", \"/entrypoint.sh\"]\nEXPOSE 8080/tcp 8081/tcp 22/tcp\n# STOPSIGNAL SIGQUIT\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\", \"--nodaemon\"]\n","injectedSmells":[],"originalDockerfileHash":"22240dc9e48038592c77a224aa1a21ab","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM php:7.2-fpm\n#   Install tini (init handler)\nADD https://github.com/krallin/tini/releases/download/v0.9.0/tini /tini\nRUN chmod +x /tini\n#   For running APT in non-interactive mode\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Define build requirements, which can be removed after setup from the container\nENV PHPIZE_DEPS=\"autoconf             build-essential      file                 g++                  gcc                  libbz2-dev           libc-client-dev      libc-dev             libcurl4-gnutls-dev  libedit-dev          libfreetype6-dev     libgmp-dev           libicu-dev           libjpeg62-turbo-dev  libkrb5-dev          libmcrypt-dev        libpng-dev           libpq-dev            libsqlite3-dev       libssh2-1-dev        libxml2-dev          libxslt1-dev         make                 pkg-config           re2c                 librabbitmq-dev      libssl-dev\"\n#   Set Debian sources\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget gnupg apt-transport-https -q -y \\\n && echo \"deb https://deb.nodesource.com/node_9.x stretch main\" > /etc/apt/sources.list.d/node.list \\\n && wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -\n#  Fixing the postgresql-client installation issue\nRUN mkdir -p /usr/share/man/man7/ \\\n && touch /usr/share/man/man7/ABORT.7.gz.dpkg-tmp \\\n && mkdir -p /usr/share/man/man1/ \\\n && touch /usr/share/man/man1/psql.1.gz\n#   Install Debian packages\nRUN apt-get update -qy \\\n && apt-get install --no-install-recommends apt-utils ca-certificates curl debconf debconf-utils git git-core graphviz libedit2 libpq5 libsqlite3-0 mc netcat nginx nginx-extras nodejs patch postgresql-client psmisc python-dev python-setuptools redis-tools rsync ssmtp sudo supervisor unzip vim wget zip openssh-server $PHPIZE_DEPS -q -y \\\n && mkdir /var/run/sshd \\\n && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \\\n && docker-php-ext-install -j$( nproc ;) bcmath bz2 gd gmp iconv intl mbstring mysqli pdo pdo_mysql pdo_pgsql pgsql readline soap xmlrpc xsl zip sockets \\\n && pecl install -o -f redis \\\n && rm -rf /tmp/pear \\\n && echo \"extension=redis.so\" > $PHP_INI_DIR/conf.d/docker-php-ext-redis.ini \\\n && pecl install amqp \\\n && docker-php-ext-enable amqp \\\n && easy_install j2cli \\\n && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer \\\n && apt-get -qy autoremove \\\n && apt-get -qy purge $PHPIZE_DEPS \\\n && rm -rf /var/lib/apt/lists/*\n#   Nginx configuration\nCOPY docker/nginx/conf.d /etc/nginx/conf.d\nCOPY docker/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY docker/nginx/fastcgi_params /etc/nginx/fastcgi_params\n#   PHP-FPM configuration\nRUN rm -f /usr/local/etc/php-fpm.d/*\nCOPY docker/php/php-fpm.conf /usr/local/etc/php-fpm.conf\nCOPY docker/php/pool.d/*.conf /usr/local/etc/php-fpm.d/\nRUN echo \"memory_limit = 512M\" >> /usr/local/etc/php/php.ini\nCOPY docker/entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nRUN install -d -o www-data -g www-data -m 0755 /var/www\nRUN chown -R www-data:www-data /var/www\nWORKDIR /var/www\n#   supervisord configuration\nCOPY docker/supervisord.conf /etc/supervisor/supervisord.conf\nRUN mkdir -p /etc/nginx/waiting\nCOPY docker/nginx/waiting/waiting_vhost.conf /etc/nginx/waiting/waiting_vhost.conf\nCOPY docker/nginx/waiting/nginx_waiting.conf /etc/nginx/nginx_waiting.conf\n#   Run app with entrypoints\nENTRYPOINT [\"/tini\", \"--\", \"/entrypoint.sh\"]\nEXPOSE 8080/tcp 8081/tcp 22/tcp\n#  STOPSIGNAL SIGQUIT\nCMD [\"supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\", \"--nodaemon\"]\n","originalDockerfileUglifiedHash":"84c5d91603d3d5a96cd891d798aef392","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a6a3e5a300d632cb3d94fb131ba857420ba61278.dockerfile"}