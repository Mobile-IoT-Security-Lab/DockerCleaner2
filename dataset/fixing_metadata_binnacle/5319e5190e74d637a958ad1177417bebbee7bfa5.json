{"seed":703952424,"processedDockerfileHash":"6185b8d779037f5031100e587e2d6133","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   The base OS\nFROM ubuntu:14.04\nMAINTAINER Bo Liu <bol@pinterest.com>\nLABEL version=\"0.1\"\nARG BUILD_JOBS=10\nENV BUILD_JOBS=\"${BUILD_JOBS}\"\nRUN apt-get update -q -y \\\n && (apt-get update ;apt-get install --no-install-recommends python-software-properties=0.92.37.8 wget=1.15-1ubuntu1.14.04.5 git=1:1.9.1-1ubuntu0.10 software-properties-common=0.92.37.8 -q -y )\n#   For gcc 6\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\n#   For open jdk 8\nRUN add-apt-repository ppa:openjdk-r/ppa \\\n && :\n#   For HDFS debian libs\nRUN wget 'https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/cloudera.list' -O /etc/apt/sources.list.d/cloudera.list \\\n && wget https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/archive.key -O archive.key \\\n && apt-key add archive.key apt-get update apt-get install --force-yes -q -y hadoop-hdfs\nRUN apt-get update -q -y \\\n && (apt-get update ;apt-get install --no-install-recommends automake=1:1.14.1-2ubuntu1 autoconf=2.69-6 autoconf-archive=20131101-1 binutils-dev=2.24-5ubuntu14.2 bison=2:3.0.2.dfsg-2 curl=7.35.0-1ubuntu2.20 flex=2.5.35-10.1ubuntu2 gcc-6 g++-6 gdb=7.7.1-0ubuntu5~14.04.3 ghostscript=9.26~dfsg+0-0ubuntu0.14.04.8 git=1:1.9.1-1ubuntu0.10 google-perftools=2.1-2ubuntu1.1 graphviz=2.36.0-0ubuntu3.2 hadoop hadoop-hdfs hadoop-client libapr1-dev=1.5.0-1 libboost-all-dev=1.54.0.1ubuntu1 libbz2-dev=1.0.6-5 libcap-dev=1:2.24-0ubuntu2 libcppunit-dev=1.13.1-2ubuntu1 libcurl4-openssl-dev=7.35.0-1ubuntu2.20 libdouble-conversion-dev=2.0.1-1 libdwarf-dev=20120410-2+deb7u2build0.14.04.1 libevent-dev=2.0.21-stable-1ubuntu1.14.04.2 libfftw3-dev=3.3.3-7ubuntu3 libgflags-dev=2.0-1.1ubuntu1 libgtest-dev=1.6.0-1ubuntu6 libhdf5-serial-dev=1.8.11-5ubuntu7.1 libhdfs0 libhdfs0-dev libiberty-dev=20131116-1ubuntu0.2 libkrb5-dev=1.12+dfsg-2ubuntu5.4 libleveldb-dev=1.15.0-2 liblua5.2-dev=5.2.3-1 liblzma-dev=5.1.1alpha+20120614-2ubuntu2 libnuma-dev=2.0.9~rc5-1ubuntu3.14.04.2 libpcap-dev=1.5.3-2 libsasl2-dev=2.1.25.dfsg1-17build1 libsnappy-dev=1.1.0-1ubuntu1 libssl-dev=1.0.1f-1ubuntu2.27 libsvn-dev=1.8.8-1ubuntu3.3 libtool=2.4.2-1.7ubuntu1 linux-tools-generic=3.13.0.170.181 make=3.81-8.2ubuntu3 openjdk-8-jdk python-setuptools=3.3-1ubuntu2 python-pip=1.5.4-1ubuntu4 scons=2.3.0-2ubuntu1 sparsehash=1.10-1ubuntu1 subversion=1.8.8-1ubuntu3.3 unzip=6.0-9ubuntu1.5 uuid-dev=2.20.1-5.1ubuntu20.9 vim=2:7.4.052-1ubuntu3.1 zlib1g-dev=1:1.2.8.dfsg-1ubuntu1.1 --force-yes -q -y )\n#   Downgrade zookeeper to cdh5's version. trusty's default zookeeper version is 3.4.5+dfsg-1\n#   which is higher than cdh5's version. We need to downgrade to cdh5's version, otherwise hadoop\n#   package is broken.\nRUN (apt-get update ;apt-get install --no-install-recommends zookeeper=3.4.5+cdh5* --force-yes -q -y )\n#   Install awscli\nRUN cd /opt \\\n && wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm awscli-bundle.zip \\\n && rm -rf awscli-bundle\n#   Change the gcc/g++ aliases to point to 6\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n#   Set fake git credentials, otherwise git cherry-pick would throw fatal error.\nRUN git config --global user.email \"you@example.com\" \\\n && git config --global user.name \"Your Name\"\n#   LZ4\nRUN cd /opt \\\n && git clone https://github.com/lz4/lz4.git \\\n && (cd lz4 \\\n && git reset --hard c10863b98e1503af90616ae99725ecd120265dfb \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf lz4\n#   glog\nRUN cd /opt \\\n && wget https://github.com/google/glog/archive/v0.3.3.zip \\\n && unzip v0.3.3.zip \\\n && (cd /opt/glog-0.3.3/ \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf glog-0.3.3.tar.gz glog-0.3.3\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends libunwind8-dev=1.1-2.2ubuntu3 --force-yes -q -y )\n#   Adding Java lib path ld.so searching path configuration\nRUN JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n && echo $JAVA_HOME/jre/lib/amd64/ >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/server >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/jamvm >> /etc/ld.so.conf.d/realpin.conf\n#   numa\nRUN cd /opt \\\n && wget https://github.com/numactl/numactl/archive/v2.0.11.zip \\\n && unzip v2.0.11.zip \\\n && (cd numactl-2.0.11 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf v2.0.11.zip numactl-2.0.11/\n#   newer version of cmake\nRUN cd /opt \\\n && wget https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz --no-check-certificate \\\n && tar zxvf cmake-3.4.3-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local \\\n && rm cmake-3.4.3-Linux-x86_64.tar.gz\n#   jemalloc\nRUN cd /opt \\\n && wget https://github.com/jemalloc/jemalloc/archive/4.5.0.tar.gz \\\n && tar -zxvf 4.5.0.tar.gz \\\n && (cd jemalloc-4.5.0 \\\n && autoconf \\\n && ./configure --enable-prof \\\n && make \\\n && (make install ;exit 0 ) \\\n && ldconfig ) \\\n && rm -rf 4.5.0.tar.gz jemalloc-4.5.0\n#   microhttpd\nRUN cd /opt \\\n && wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.42.tar.gz \\\n && tar -zxvf libmicrohttpd-0.9.42.tar.gz \\\n && (cd libmicrohttpd-0.9.42 \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install ) \\\n && rm -rf libmicrohttpd-0.9.42.tar.gz libmicrohttpd-0.9.42\n#   download zstd\nRUN cd /opt \\\n && git clone https://github.com/facebook/zstd.git \\\n && (cd zstd \\\n && git reset --hard f405b8acbe8be70aa05e0a7bf035fe1efe20b99f ) \\\n && (cd zstd/build/cmake \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf zstd\n#   download folly\nRUN cd /opt \\\n && git clone https://github.com/facebook/folly \\\n && (cd folly \\\n && git reset --hard b59ee6802a2454e854a52535d31598aa967e33c0 \\\n && cd folly \\\n && autoreconf -ivf \\\n && ./configure LDFLAGS='-ljemalloc' CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CXXFLAGS='-gdwarf-2 -O3 -fno-omit-frame-pointer' \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf folly\n#   wangle\nRUN cd /opt \\\n && git clone https://github.com/facebook/wangle \\\n && (cd wangle \\\n && git reset --hard 52f08ff480931fcba1b7fa9b3eebd45d220a68de ) \\\n && (cd wangle/wangle \\\n && CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf wangle\n#   git clone https://github.com/no1msd/mstch\nRUN cd /opt \\\n && git clone https://github.com/no1msd/mstch \\\n && (cd mstch \\\n && git reset --hard 0fde1cf94c26ede7fa267f4b64c0efe5da81a77a ) \\\n && (cd mstch \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf mstch\n#   download fbthrift\nRUN cd /opt \\\n && git clone https://github.com/facebook/fbthrift \\\n && (cd fbthrift \\\n && git reset --hard 8e1a1e1eedbf5b551b4fe4799dab8b36267638ba \\\n && cd thrift \\\n && sed 's/PKG_CHECK_MODULES.*$/true/g' -i configure.ac \\\n && (cd compiler \\\n && ln -sf thrifty.h thrifty.hh ) \\\n && autoreconf --install \\\n && LDFLAGS=\"-ljemalloc\" CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && (cd compiler \\\n && make ) \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf fbthrift\n#   rocksdb\nRUN cd /opt/ \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && (cd rocksdb \\\n && git checkout -b 5.7.fb origin/5.7.fb \\\n && git reset --hard cfaeb5846bec0ac90d8da15dc11f53eafbbfd537 \\\n && git cherry-pick c5f0c6cc660f1f4a8051db2aac3b8afc17818e70 \\\n && git cherry-pick ba3c58cab6c691c53c7f98589651233695da1f62 \\\n && git cherry-pick 204af1ecccb6ed8110ee04cf9130594cfcb3af27 \\\n && sed -i -- 's/std::rindex/rindex/g' ./env/env_hdfs.cc \\\n && sed -i -- '/\"util\\/string_util.h\"/a #include \"util\\/logging.h\"' ./env/env_hdfs.cc \\\n && export CLASSPATH= \\\n && for f in `find /usr/lib/hadoop-hdfs | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop/client | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && USE_SSE=1 USE_HDFS=1 JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server:$JAVA_HOME/jre/lib/amd64:/usr/lib/hadoop/lib/native JEMALLOC_LIB=\" /usr/local/lib/libjemalloc.a\" JEMALLOC_INCLUDE=\" -I /usr/local/include/\" EXTRA_CXXFLAGS=\"-gdwarf-2 -std=c++1y -O3 -fno-omit-frame-pointer\" make -j ${BUILD_JOBS} shared_lib \\\n && make install-shared \\\n && ldconfig ) \\\n && rm -rf rocksdb\n#   farmhash\nRUN cd /opt \\\n && git clone https://github.com/google/farmhash.git \\\n && (cd farmhash \\\n && git reset --hard 059cf991 \\\n && autoreconf --install \\\n && ./configure CXXFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" \\\n && make all check \\\n && make install \\\n && ldconfig ) \\\n && rm -rf farmhash\n#   libprotobuf\nRUN cd /opt \\\n && git clone https://github.com/google/protobuf.git \\\n && (cd protobuf \\\n && git reset --hard b04e5cba356212e4e8c66c61bbe0c3a20537c5b9 \\\n && ./autogen.sh \\\n && LDFLAGS=\"-ljemalloc\" CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf protobuf\n#   libbf (bloom filter)\n#   remove this once we migrate to use third_party/libbf\nRUN cd /opt \\\n && git clone https://github.com/mavam/libbf.git \\\n && (cd libbf \\\n && git reset --hard f2509db1442e8fc7c3dd5117b739886f76a4eb80 \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf libbf\n#   aws sdk\nRUN cd /opt \\\n && git clone https://github.com/aws/aws-sdk-cpp.git \\\n && (cd aws-sdk-cpp \\\n && git checkout 1.2.7 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=1 -DBUILD_ONLY=\"s3\" .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && rm -rf /usr/local/lib/cmake/aws-cpp-* \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=0 -DBUILD_ONLY=\"s3\" .. \\\n && cd .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf aws-sdk-cpp\n#   yaml-cpp\nRUN cd /opt \\\n && git clone https://github.com/jbeder/yaml-cpp \\\n && (cd yaml-cpp \\\n && git reset --hard 562aefc114938e388457e6a531ed7b54d9dc1b62 \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_SHARED_LIBS=ON .. \\\n && make -j \\\n && make install \\\n && cmake -DBUILD_SHARED_LIBS=OFF .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf /opt/yaml-cpp\n#   kafka\nRUN cd /opt \\\n && git clone https://github.com/edenhill/librdkafka.git \\\n && (cd librdkafka \\\n && git reset --hard v0.11.4 \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf librdkafka\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  The base OS\nFROM ubuntu:14.04\nMAINTAINER Bo Liu <bol@pinterest.com>\nLABEL version=\"0.1\"\nARG BUILD_JOBS=10\nENV BUILD_JOBS=\"${BUILD_JOBS}\"\nRUN apt-get update -q -y \\\n && apt-get install python-software-properties wget git software-properties-common -q -y\n#  For gcc 6\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\n#  For open jdk 8\nRUN add-apt-repository ppa:openjdk-r/ppa \\\n && apt-get update\n#  For HDFS debian libs\nRUN wget 'https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/cloudera.list' -O /etc/apt/sources.list.d/cloudera.list \\\n && wget https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/archive.key -O archive.key \\\n && apt-key add archive.key apt-get update apt-get install --force-yes -q -y hadoop-hdfs\nRUN apt-get update -q -y \\\n && apt-get install automake autoconf autoconf-archive binutils-dev bison curl flex gcc-6 g++-6 gdb ghostscript git google-perftools graphviz hadoop hadoop-hdfs hadoop-client libapr1-dev libboost-all-dev libbz2-dev libcap-dev libcppunit-dev libcurl4-openssl-dev libdouble-conversion-dev libdwarf-dev libevent-dev libfftw3-dev libgflags-dev libgtest-dev libhdf5-serial-dev libhdfs0 libhdfs0-dev libiberty-dev libkrb5-dev libleveldb-dev liblua5.2-dev liblzma-dev libnuma-dev libpcap-dev libsasl2-dev libsnappy-dev libssl-dev libsvn-dev libtool linux-tools-generic make openjdk-8-jdk python-setuptools python-pip scons sparsehash subversion unzip uuid-dev vim zlib1g-dev --force-yes -q -y\n#  Downgrade zookeeper to cdh5's version. trusty's default zookeeper version is 3.4.5+dfsg-1\n#  which is higher than cdh5's version. We need to downgrade to cdh5's version, otherwise hadoop\n#  package is broken.\nRUN apt-get install zookeeper=3.4.5+cdh5* --force-yes -q -y\n#  Install awscli\nRUN cd /opt \\\n && wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm awscli-bundle.zip \\\n && rm -rf awscli-bundle\n#  Change the gcc/g++ aliases to point to 6\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n#  Set fake git credentials, otherwise git cherry-pick would throw fatal error.\nRUN git config --global user.email \"you@example.com\" \\\n && git config --global user.name \"Your Name\"\n#  LZ4\nRUN cd /opt \\\n && git clone https://github.com/lz4/lz4.git \\\n && (cd lz4 \\\n && git reset --hard c10863b98e1503af90616ae99725ecd120265dfb \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf lz4\n#  glog\nRUN cd /opt \\\n && wget https://github.com/google/glog/archive/v0.3.3.zip \\\n && unzip v0.3.3.zip \\\n && (cd /opt/glog-0.3.3/ \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf glog-0.3.3.tar.gz glog-0.3.3\nRUN apt-get update \\\n && apt-get install libunwind8-dev --force-yes -q -y\n#  Adding Java lib path ld.so searching path configuration\nRUN JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n && echo $JAVA_HOME/jre/lib/amd64/ >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/server >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/jamvm >> /etc/ld.so.conf.d/realpin.conf\n#  numa\nRUN cd /opt \\\n && wget https://github.com/numactl/numactl/archive/v2.0.11.zip \\\n && unzip v2.0.11.zip \\\n && (cd numactl-2.0.11 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf v2.0.11.zip numactl-2.0.11/\n#  newer version of cmake\nRUN cd /opt \\\n && wget https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz --no-check-certificate \\\n && tar zxvf cmake-3.4.3-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local \\\n && rm cmake-3.4.3-Linux-x86_64.tar.gz\n#  jemalloc\nRUN cd /opt \\\n && wget https://github.com/jemalloc/jemalloc/archive/4.5.0.tar.gz \\\n && tar -zxvf 4.5.0.tar.gz \\\n && (cd jemalloc-4.5.0 \\\n && autoconf \\\n && ./configure --enable-prof \\\n && make \\\n && (make install ;exit 0 ) \\\n && ldconfig ) \\\n && rm -rf 4.5.0.tar.gz jemalloc-4.5.0\n#  microhttpd\nRUN cd /opt \\\n && wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.42.tar.gz \\\n && tar -zxvf libmicrohttpd-0.9.42.tar.gz \\\n && (cd libmicrohttpd-0.9.42 \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install ) \\\n && rm -rf libmicrohttpd-0.9.42.tar.gz libmicrohttpd-0.9.42\n#  download zstd\nRUN cd /opt \\\n && git clone https://github.com/facebook/zstd.git \\\n && (cd zstd \\\n && git reset --hard f405b8acbe8be70aa05e0a7bf035fe1efe20b99f ) \\\n && (cd zstd/build/cmake \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf zstd\n#  download folly\nRUN cd /opt \\\n && git clone https://github.com/facebook/folly \\\n && (cd folly \\\n && git reset --hard b59ee6802a2454e854a52535d31598aa967e33c0 \\\n && cd folly \\\n && autoreconf -ivf \\\n && ./configure LDFLAGS='-ljemalloc' CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CXXFLAGS='-gdwarf-2 -O3 -fno-omit-frame-pointer' \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf folly\n#  wangle\nRUN cd /opt \\\n && git clone https://github.com/facebook/wangle \\\n && (cd wangle \\\n && git reset --hard 52f08ff480931fcba1b7fa9b3eebd45d220a68de ) \\\n && (cd wangle/wangle \\\n && CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf wangle\n#  git clone https://github.com/no1msd/mstch\nRUN cd /opt \\\n && git clone https://github.com/no1msd/mstch \\\n && (cd mstch \\\n && git reset --hard 0fde1cf94c26ede7fa267f4b64c0efe5da81a77a ) \\\n && (cd mstch \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf mstch\n#  download fbthrift\nRUN cd /opt \\\n && git clone https://github.com/facebook/fbthrift \\\n && (cd fbthrift \\\n && git reset --hard 8e1a1e1eedbf5b551b4fe4799dab8b36267638ba \\\n && cd thrift \\\n && sed 's/PKG_CHECK_MODULES.*$/true/g' -i configure.ac \\\n && (cd compiler \\\n && ln -sf thrifty.h thrifty.hh ) \\\n && autoreconf --install \\\n && LDFLAGS=\"-ljemalloc\" CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && (cd compiler \\\n && make ) \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf fbthrift\n#  rocksdb\nRUN cd /opt/ \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && (cd rocksdb \\\n && git checkout -b 5.7.fb origin/5.7.fb \\\n && git reset --hard cfaeb5846bec0ac90d8da15dc11f53eafbbfd537 \\\n && git cherry-pick c5f0c6cc660f1f4a8051db2aac3b8afc17818e70 \\\n && git cherry-pick ba3c58cab6c691c53c7f98589651233695da1f62 \\\n && git cherry-pick 204af1ecccb6ed8110ee04cf9130594cfcb3af27 \\\n && sed -i -- 's/std::rindex/rindex/g' ./env/env_hdfs.cc \\\n && sed -i -- '/\"util\\/string_util.h\"/a #include \"util\\/logging.h\"' ./env/env_hdfs.cc \\\n && export CLASSPATH= \\\n && for f in `find /usr/lib/hadoop-hdfs | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop/client | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && USE_SSE=1 USE_HDFS=1 JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server:$JAVA_HOME/jre/lib/amd64:/usr/lib/hadoop/lib/native JEMALLOC_LIB=\" /usr/local/lib/libjemalloc.a\" JEMALLOC_INCLUDE=\" -I /usr/local/include/\" EXTRA_CXXFLAGS=\"-gdwarf-2 -std=c++1y -O3 -fno-omit-frame-pointer\" make -j ${BUILD_JOBS} shared_lib \\\n && make install-shared \\\n && ldconfig ) \\\n && rm -rf rocksdb\n#  farmhash\nRUN cd /opt \\\n && git clone https://github.com/google/farmhash.git \\\n && (cd farmhash \\\n && git reset --hard 059cf991 \\\n && autoreconf --install \\\n && ./configure CXXFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" \\\n && make all check \\\n && make install \\\n && ldconfig ) \\\n && rm -rf farmhash\n#  libprotobuf\nRUN cd /opt \\\n && git clone https://github.com/google/protobuf.git \\\n && (cd protobuf \\\n && git reset --hard b04e5cba356212e4e8c66c61bbe0c3a20537c5b9 \\\n && ./autogen.sh \\\n && LDFLAGS=\"-ljemalloc\" CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf protobuf\n#  libbf (bloom filter)\n#  remove this once we migrate to use third_party/libbf\nRUN cd /opt \\\n && git clone https://github.com/mavam/libbf.git \\\n && (cd libbf \\\n && git reset --hard f2509db1442e8fc7c3dd5117b739886f76a4eb80 \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf libbf\n#  aws sdk\nRUN cd /opt \\\n && git clone https://github.com/aws/aws-sdk-cpp.git \\\n && (cd aws-sdk-cpp \\\n && git checkout 1.2.7 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=1 -DBUILD_ONLY=\"s3\" .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && rm -rf /usr/local/lib/cmake/aws-cpp-* \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=0 -DBUILD_ONLY=\"s3\" .. \\\n && cd .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf aws-sdk-cpp\n#  yaml-cpp\nRUN cd /opt \\\n && git clone https://github.com/jbeder/yaml-cpp \\\n && (cd yaml-cpp \\\n && git reset --hard 562aefc114938e388457e6a531ed7b54d9dc1b62 \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_SHARED_LIBS=ON .. \\\n && make -j \\\n && make install \\\n && cmake -DBUILD_SHARED_LIBS=OFF .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf /opt/yaml-cpp\n#  kafka\nRUN cd /opt \\\n && git clone https://github.com/edenhill/librdkafka.git \\\n && (cd librdkafka \\\n && git reset --hard v0.11.4 \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf librdkafka\n","injectedSmells":[],"originalDockerfileHash":"075d72e1483f5fd57a2fcf3429f57628","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   The base OS\nFROM ubuntu:14.04\nMAINTAINER Bo Liu <bol@pinterest.com>\nLABEL version=\"0.1\"\nARG BUILD_JOBS=10\nENV BUILD_JOBS=\"${BUILD_JOBS}\"\nRUN apt-get update -q -y \\\n && apt-get install python-software-properties wget git software-properties-common -q -y\n#   For gcc 6\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test\n#   For open jdk 8\nRUN add-apt-repository ppa:openjdk-r/ppa \\\n && apt-get update\n#   For HDFS debian libs\nRUN wget 'https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/cloudera.list' -O /etc/apt/sources.list.d/cloudera.list \\\n && wget https://archive.cloudera.com/cdh5/ubuntu/trusty/amd64/cdh/archive.key -O archive.key \\\n && apt-key add archive.key apt-get update apt-get install --force-yes -q -y hadoop-hdfs\nRUN apt-get update -q -y \\\n && apt-get install automake autoconf autoconf-archive binutils-dev bison curl flex gcc-6 g++-6 gdb ghostscript git google-perftools graphviz hadoop hadoop-hdfs hadoop-client libapr1-dev libboost-all-dev libbz2-dev libcap-dev libcppunit-dev libcurl4-openssl-dev libdouble-conversion-dev libdwarf-dev libevent-dev libfftw3-dev libgflags-dev libgtest-dev libhdf5-serial-dev libhdfs0 libhdfs0-dev libiberty-dev libkrb5-dev libleveldb-dev liblua5.2-dev liblzma-dev libnuma-dev libpcap-dev libsasl2-dev libsnappy-dev libssl-dev libsvn-dev libtool linux-tools-generic make openjdk-8-jdk python-setuptools python-pip scons sparsehash subversion unzip uuid-dev vim zlib1g-dev --force-yes -q -y\n#   Downgrade zookeeper to cdh5's version. trusty's default zookeeper version is 3.4.5+dfsg-1\n#   which is higher than cdh5's version. We need to downgrade to cdh5's version, otherwise hadoop\n#   package is broken.\nRUN apt-get install zookeeper=3.4.5+cdh5* --force-yes -q -y\n#   Install awscli\nRUN cd /opt \\\n && wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip \\\n && unzip awscli-bundle.zip \\\n && ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws \\\n && rm awscli-bundle.zip \\\n && rm -rf awscli-bundle\n#   Change the gcc/g++ aliases to point to 6\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6\n#   Set fake git credentials, otherwise git cherry-pick would throw fatal error.\nRUN git config --global user.email \"you@example.com\" \\\n && git config --global user.name \"Your Name\"\n#   LZ4\nRUN cd /opt \\\n && git clone https://github.com/lz4/lz4.git \\\n && (cd lz4 \\\n && git reset --hard c10863b98e1503af90616ae99725ecd120265dfb \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf lz4\n#   glog\nRUN cd /opt \\\n && wget https://github.com/google/glog/archive/v0.3.3.zip \\\n && unzip v0.3.3.zip \\\n && (cd /opt/glog-0.3.3/ \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf glog-0.3.3.tar.gz glog-0.3.3\nRUN apt-get update \\\n && apt-get install libunwind8-dev --force-yes -q -y\n#   Adding Java lib path ld.so searching path configuration\nRUN JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n && echo $JAVA_HOME/jre/lib/amd64/ >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/server >> /etc/ld.so.conf.d/realpin.conf \\\n && echo $JAVA_HOME/jre/lib/amd64/jamvm >> /etc/ld.so.conf.d/realpin.conf\n#   numa\nRUN cd /opt \\\n && wget https://github.com/numactl/numactl/archive/v2.0.11.zip \\\n && unzip v2.0.11.zip \\\n && (cd numactl-2.0.11 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf v2.0.11.zip numactl-2.0.11/\n#   newer version of cmake\nRUN cd /opt \\\n && wget https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz --no-check-certificate \\\n && tar zxvf cmake-3.4.3-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local \\\n && rm cmake-3.4.3-Linux-x86_64.tar.gz\n#   jemalloc\nRUN cd /opt \\\n && wget https://github.com/jemalloc/jemalloc/archive/4.5.0.tar.gz \\\n && tar -zxvf 4.5.0.tar.gz \\\n && (cd jemalloc-4.5.0 \\\n && autoconf \\\n && ./configure --enable-prof \\\n && make \\\n && (make install ;exit 0 ) \\\n && ldconfig ) \\\n && rm -rf 4.5.0.tar.gz jemalloc-4.5.0\n#   microhttpd\nRUN cd /opt \\\n && wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.42.tar.gz \\\n && tar -zxvf libmicrohttpd-0.9.42.tar.gz \\\n && (cd libmicrohttpd-0.9.42 \\\n && CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install ) \\\n && rm -rf libmicrohttpd-0.9.42.tar.gz libmicrohttpd-0.9.42\n#   download zstd\nRUN cd /opt \\\n && git clone https://github.com/facebook/zstd.git \\\n && (cd zstd \\\n && git reset --hard f405b8acbe8be70aa05e0a7bf035fe1efe20b99f ) \\\n && (cd zstd/build/cmake \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf zstd\n#   download folly\nRUN cd /opt \\\n && git clone https://github.com/facebook/folly \\\n && (cd folly \\\n && git reset --hard b59ee6802a2454e854a52535d31598aa967e33c0 \\\n && cd folly \\\n && autoreconf -ivf \\\n && ./configure LDFLAGS='-ljemalloc' CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CXXFLAGS='-gdwarf-2 -O3 -fno-omit-frame-pointer' \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf folly\n#   wangle\nRUN cd /opt \\\n && git clone https://github.com/facebook/wangle \\\n && (cd wangle \\\n && git reset --hard 52f08ff480931fcba1b7fa9b3eebd45d220a68de ) \\\n && (cd wangle/wangle \\\n && CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf wangle\n#   git clone https://github.com/no1msd/mstch\nRUN cd /opt \\\n && git clone https://github.com/no1msd/mstch \\\n && (cd mstch \\\n && git reset --hard 0fde1cf94c26ede7fa267f4b64c0efe5da81a77a ) \\\n && (cd mstch \\\n && cmake . \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf mstch\n#   download fbthrift\nRUN cd /opt \\\n && git clone https://github.com/facebook/fbthrift \\\n && (cd fbthrift \\\n && git reset --hard 8e1a1e1eedbf5b551b4fe4799dab8b36267638ba \\\n && cd thrift \\\n && sed 's/PKG_CHECK_MODULES.*$/true/g' -i configure.ac \\\n && (cd compiler \\\n && ln -sf thrifty.h thrifty.hh ) \\\n && autoreconf --install \\\n && LDFLAGS=\"-ljemalloc\" CC=/usr/bin/gcc-6 CXX=/usr/bin/g++-6 CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && (cd compiler \\\n && make ) \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf fbthrift\n#   rocksdb\nRUN cd /opt/ \\\n && git clone https://github.com/facebook/rocksdb.git \\\n && (cd rocksdb \\\n && git checkout -b 5.7.fb origin/5.7.fb \\\n && git reset --hard cfaeb5846bec0ac90d8da15dc11f53eafbbfd537 \\\n && git cherry-pick c5f0c6cc660f1f4a8051db2aac3b8afc17818e70 \\\n && git cherry-pick ba3c58cab6c691c53c7f98589651233695da1f62 \\\n && git cherry-pick 204af1ecccb6ed8110ee04cf9130594cfcb3af27 \\\n && sed -i -- 's/std::rindex/rindex/g' ./env/env_hdfs.cc \\\n && sed -i -- '/\"util\\/string_util.h\"/a #include \"util\\/logging.h\"' ./env/env_hdfs.cc \\\n && export CLASSPATH= \\\n && for f in `find /usr/lib/hadoop-hdfs | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && for f in `find /usr/lib/hadoop/client | grep jar `; do export CLASSPATH=$CLASSPATH:$f ; done \\\n && USE_SSE=1 USE_HDFS=1 JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/amd64/server:$JAVA_HOME/jre/lib/amd64:/usr/lib/hadoop/lib/native JEMALLOC_LIB=\" /usr/local/lib/libjemalloc.a\" JEMALLOC_INCLUDE=\" -I /usr/local/include/\" EXTRA_CXXFLAGS=\"-gdwarf-2 -std=c++1y -O3 -fno-omit-frame-pointer\" make -j ${BUILD_JOBS} shared_lib \\\n && make install-shared \\\n && ldconfig ) \\\n && rm -rf rocksdb\n#   farmhash\nRUN cd /opt \\\n && git clone https://github.com/google/farmhash.git \\\n && (cd farmhash \\\n && git reset --hard 059cf991 \\\n && autoreconf --install \\\n && ./configure CXXFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" \\\n && make all check \\\n && make install \\\n && ldconfig ) \\\n && rm -rf farmhash\n#   libprotobuf\nRUN cd /opt \\\n && git clone https://github.com/google/protobuf.git \\\n && (cd protobuf \\\n && git reset --hard b04e5cba356212e4e8c66c61bbe0c3a20537c5b9 \\\n && ./autogen.sh \\\n && LDFLAGS=\"-ljemalloc\" CPPFLAGS=\"-gdwarf-2 -O3 -fno-omit-frame-pointer\" ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf protobuf\n#   libbf (bloom filter)\n#   remove this once we migrate to use third_party/libbf\nRUN cd /opt \\\n && git clone https://github.com/mavam/libbf.git \\\n && (cd libbf \\\n && git reset --hard f2509db1442e8fc7c3dd5117b739886f76a4eb80 \\\n && ./configure \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf libbf\n#   aws sdk\nRUN cd /opt \\\n && git clone https://github.com/aws/aws-sdk-cpp.git \\\n && (cd aws-sdk-cpp \\\n && git checkout 1.2.7 \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=1 -DBUILD_ONLY=\"s3\" .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && rm -rf /usr/local/lib/cmake/aws-cpp-* \\\n && rm -rf build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DCUSTOM_MEMORY_MANAGEMENT=0 -DSTATIC_LINKING=0 -DBUILD_ONLY=\"s3\" .. \\\n && cd .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf aws-sdk-cpp\n#   yaml-cpp\nRUN cd /opt \\\n && git clone https://github.com/jbeder/yaml-cpp \\\n && (cd yaml-cpp \\\n && git reset --hard 562aefc114938e388457e6a531ed7b54d9dc1b62 \\\n && mkdir build \\\n && cd build \\\n && cmake -DBUILD_SHARED_LIBS=ON .. \\\n && make -j \\\n && make install \\\n && cmake -DBUILD_SHARED_LIBS=OFF .. \\\n && make -j ${BUILD_JOBS} \\\n && make install \\\n && ldconfig ) \\\n && rm -rf /opt/yaml-cpp\n#   kafka\nRUN cd /opt \\\n && git clone https://github.com/edenhill/librdkafka.git \\\n && (cd librdkafka \\\n && git reset --hard v0.11.4 \\\n && ./configure \\\n && make \\\n && make install \\\n && ldconfig ) \\\n && rm -rf librdkafka\n","originalDockerfileUglifiedHash":"0824aff2cfbe282e89d87033555bb0e8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5319e5190e74d637a958ad1177417bebbee7bfa5.dockerfile"}