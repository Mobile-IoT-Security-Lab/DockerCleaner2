{"seed":322663520,"processedDockerfileHash":"6342c77507dd5516c1c9a57a5cfe728d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#   Disable prompts from apt.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  #############################################################################\n#   install apt-utils and locales, set up language\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-utils=1.2.35 locales=2.23-0ubuntu11.3 locales-all=2.23-0ubuntu11.3 -y\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  #############################################################################\n#   Install Java 8.\n#   Based on:\n#      https://github.com/dockerfile/java/blob/master/oracle-java8/Dockerfile\n#      https://stackoverflow.com/questions/49914574/install-jdk-8-update-172-in-dockerfile-with-ubuntu-image\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update \\\n && apt-get install --no-install-recommends oracle-java8-installer -y \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#   Define JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-oracle\"\n#  ##############################################################################\n#   Install SSH and OpenMPI\n#\n#   ssh and MPI installation is based on the Dockerfile from\n#      https://github.com/everpeace\nARG OPENMPI_VERSION=\"3.1.2\"\nARG WITH_CUDA=\"false\"\n#\n#   install ssh and basic dependencies\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget=1.17.1-1ubuntu1.5 ca-certificates=20210119~16.04.1 ssh=1:7.2p2-4ubuntu2.10 build-essential=12.1ubuntu2 -yq \\\n && rm -rf /var/cache/apt/archives/*\n#\n#   install openmpi\n#\nRUN cd /tmp \\\n && echo \"WITH_CUDA=$WITH_CUDA\" \\\n && wget -q https://www.open-mpi.org/software/ompi/v$( echo $OPENMPI_VERSION | sed -e s'/\\(.*\\)\\.[0-9]/\\1/' ;)/downloads/openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && tar -xjf openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && cd /tmp/openmpi-$OPENMPI_VERSION \\\n && if [ \"$WITH_CUDA\" = \"true\" ] ; then export WITH_CUDA_OPT=\"--with-cuda\" ; else export WITH_CUDA_OPT=\"\" ; fi \\\n && echo \"WITH_CUDA_OPT=$WITH_CUDA_OPT\" \\\n && ./configure --prefix=/usr --enable-mpi-java $WITH_CUDA_OPT \\\n && make -j2 \\\n && make install \\\n && rm -rf /tmp/openmpi-$OPENMPI_VERSION /tmp/openmpi-$OPENMPI_VERSION.tar.bz2\n#   set LD_LIBRARY_PATH environment variable\nENV LD_LIBRARY_PATH=\"/usr/lib\"\n#\n#   Create ssh user(openmpi) and setup ssh key dir\n#   - ssh identity file and authorized key file is expected to\n#     be mounted at /ssh-keys/$SSH_USER\n#\nARG SSH_USER=openmpi\nENV SSH_USER=\"$SSH_USER\"\nARG SSH_UID=1000\nARG SSH_GID=1000\nVOLUME /ssh-key/$SSH_USER\nARG HOME=/home/$SSH_USER\nRUN addgroup --gid $SSH_GID $SSH_USER \\\n && adduser -q --gecos \"\" --disabled-password --uid $SSH_UID --gid $SSH_GID $SSH_USER \\\n && mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER \\\n && mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys \\\n && mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER \\\n && mkdir -p $HOME \\\n && chown $SSH_USER:$SSH_USER $HOME \\\n && chmod 755 $HOME\nVOLUME $HOME\n#   check if open mpi was successfully built with cuda support.\nRUN if [ \"$WITH_CUDA\" = \"true\" ] ; then if ! ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\" ; then exit 1 ; fi ; fi\n#  ##############################################################################\n#   install python\n#   clear apt-get cache, no more apt usage after this point\nRUN apt-get update \\\n && apt-get install --no-install-recommends python=2.7.12-1~16.04 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  ##############################################################################\n#   Install Twister2 files and packages\n#\nENV CLASSPATH=\"/twister2/lib/*\"\nCOPY docker/kubernetes/image/rootfs /\nCOPY twister2-0.2.2/lib /twister2/lib\nCOPY twister2-0.2.2/bin /twister2/bin\n#   expose 2022 for ssh server (password free ssh support)\n#   expose 8080 for dashboard server if it runs\nEXPOSE 2022/tcp 8080/tcp\nWORKDIR /twister2/\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  Disable prompts from apt.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# #############################################################################\n#  install apt-utils and locales, set up language\nRUN apt-get update \\\n && apt-get install apt-utils locales locales-all -y\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n# #############################################################################\n#  Install Java 8.\n#  Based on:\n#     https://github.com/dockerfile/java/blob/master/oracle-java8/Dockerfile\n#     https://stackoverflow.com/questions/49914574/install-jdk-8-update-172-in-dockerfile-with-ubuntu-image\n#\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update \\\n && apt-get install oracle-java8-installer -y \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#  Define JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-oracle\"\n# ##############################################################################\n#  Install SSH and OpenMPI\n#\n#  ssh and MPI installation is based on the Dockerfile from\n#     https://github.com/everpeace\nARG OPENMPI_VERSION=\"3.1.2\"\nARG WITH_CUDA=\"false\"\n#\n#  install ssh and basic dependencies\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget ca-certificates ssh build-essential -yq \\\n && rm -rf /var/cache/apt/archives/*\n#\n#  install openmpi\n#\nRUN cd /tmp \\\n && echo \"WITH_CUDA=$WITH_CUDA\" \\\n && wget -q https://www.open-mpi.org/software/ompi/v$( echo $OPENMPI_VERSION | sed -e s'/\\(.*\\)\\.[0-9]/\\1/' ;)/downloads/openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && tar -xjf openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && cd /tmp/openmpi-$OPENMPI_VERSION \\\n && if [ \"$WITH_CUDA\" = \"true\" ] ; then export WITH_CUDA_OPT=\"--with-cuda\" ; else export WITH_CUDA_OPT=\"\" ; fi \\\n && echo \"WITH_CUDA_OPT=$WITH_CUDA_OPT\" \\\n && ./configure --prefix=/usr --enable-mpi-java $WITH_CUDA_OPT \\\n && make -j2 \\\n && make install \\\n && rm -rf /tmp/openmpi-$OPENMPI_VERSION /tmp/openmpi-$OPENMPI_VERSION.tar.bz2\n#  set LD_LIBRARY_PATH environment variable\nENV LD_LIBRARY_PATH=\"/usr/lib\"\n#\n#  Create ssh user(openmpi) and setup ssh key dir\n#  - ssh identity file and authorized key file is expected to\n#    be mounted at /ssh-keys/$SSH_USER\n#\nARG SSH_USER=openmpi\nENV SSH_USER=\"$SSH_USER\"\nARG SSH_UID=1000\nARG SSH_GID=1000\nVOLUME /ssh-key/$SSH_USER\nARG HOME=/home/$SSH_USER\nRUN addgroup --gid $SSH_GID $SSH_USER \\\n && adduser -q --gecos \"\" --disabled-password --uid $SSH_UID --gid $SSH_GID $SSH_USER \\\n && mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER \\\n && mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys \\\n && mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER \\\n && mkdir -p $HOME \\\n && chown $SSH_USER:$SSH_USER $HOME \\\n && chmod 755 $HOME\nVOLUME $HOME\n#  check if open mpi was successfully built with cuda support.\nRUN if [ \"$WITH_CUDA\" = \"true\" ] ; then if ! ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\" ; then exit 1 ; fi ; fi\n# ##############################################################################\n#  install python\n#  clear apt-get cache, no more apt usage after this point\nRUN apt-get update \\\n && apt-get install python -y \\\n && rm -rf /var/lib/apt/lists/*\n# ##############################################################################\n#  Install Twister2 files and packages\n#\nENV CLASSPATH=\"/twister2/lib/*\"\nCOPY docker/kubernetes/image/rootfs /\nCOPY twister2-0.2.2/lib /twister2/lib\nCOPY twister2-0.2.2/bin /twister2/bin\n#  expose 2022 for ssh server (password free ssh support)\n#  expose 8080 for dashboard server if it runs\nEXPOSE 2022/tcp 8080/tcp\nWORKDIR /twister2/\n","injectedSmells":[],"originalDockerfileHash":"98d74c14678c0ae9c9e1c4ca133b7460","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   Disable prompts from apt.\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  #############################################################################\n#   install apt-utils and locales, set up language\nRUN apt-get update \\\n && apt-get install apt-utils locales locales-all -y\nENV LC_ALL=\"en_US.UTF-8\"\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US.UTF-8\"\n#  #############################################################################\n#   Install Java 8.\n#   Based on:\n#      https://github.com/dockerfile/java/blob/master/oracle-java8/Dockerfile\n#      https://stackoverflow.com/questions/49914574/install-jdk-8-update-172-in-dockerfile-with-ubuntu-image\n#\nRUN apt-get update \\\n && apt-get install software-properties-common -y \\\n && echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections \\\n && add-apt-repository -y ppa:webupd8team/java \\\n && apt-get update \\\n && apt-get install oracle-java8-installer -y \\\n && rm -rf /var/cache/oracle-jdk8-installer\n#   Define JAVA_HOME variable\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-oracle\"\n#  ##############################################################################\n#   Install SSH and OpenMPI\n#\n#   ssh and MPI installation is based on the Dockerfile from\n#      https://github.com/everpeace\nARG OPENMPI_VERSION=\"3.1.2\"\nARG WITH_CUDA=\"false\"\n#\n#   install ssh and basic dependencies\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends wget ca-certificates ssh build-essential -yq \\\n && rm -rf /var/cache/apt/archives/*\n#\n#   install openmpi\n#\nRUN cd /tmp \\\n && echo \"WITH_CUDA=$WITH_CUDA\" \\\n && wget -q https://www.open-mpi.org/software/ompi/v$( echo $OPENMPI_VERSION | sed -e s'/\\(.*\\)\\.[0-9]/\\1/' ;)/downloads/openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && tar -xjf openmpi-$OPENMPI_VERSION.tar.bz2 \\\n && cd /tmp/openmpi-$OPENMPI_VERSION \\\n && if [ \"$WITH_CUDA\" = \"true\" ] ; then export WITH_CUDA_OPT=\"--with-cuda\" ; else export WITH_CUDA_OPT=\"\" ; fi \\\n && echo \"WITH_CUDA_OPT=$WITH_CUDA_OPT\" \\\n && ./configure --prefix=/usr --enable-mpi-java $WITH_CUDA_OPT \\\n && make -j2 \\\n && make install \\\n && rm -rf /tmp/openmpi-$OPENMPI_VERSION /tmp/openmpi-$OPENMPI_VERSION.tar.bz2\n#   set LD_LIBRARY_PATH environment variable\nENV LD_LIBRARY_PATH=\"/usr/lib\"\n#\n#   Create ssh user(openmpi) and setup ssh key dir\n#   - ssh identity file and authorized key file is expected to\n#     be mounted at /ssh-keys/$SSH_USER\n#\nARG SSH_USER=openmpi\nENV SSH_USER=\"$SSH_USER\"\nARG SSH_UID=1000\nARG SSH_GID=1000\nVOLUME /ssh-key/$SSH_USER\nARG HOME=/home/$SSH_USER\nRUN addgroup --gid $SSH_GID $SSH_USER \\\n && adduser -q --gecos \"\" --disabled-password --uid $SSH_UID --gid $SSH_GID $SSH_USER \\\n && mkdir -p /ssh-key/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /ssh-key/$SSH_USER \\\n && mkdir -p /.sshd/host_keys \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/host_keys \\\n && chmod 700 /.sshd/host_keys \\\n && mkdir -p /.sshd/user_keys/$SSH_USER \\\n && chown -R $SSH_USER:$SSH_USER /.sshd/user_keys/$SSH_USER \\\n && chmod 700 /.sshd/user_keys/$SSH_USER \\\n && mkdir -p $HOME \\\n && chown $SSH_USER:$SSH_USER $HOME \\\n && chmod 755 $HOME\nVOLUME $HOME\n#   check if open mpi was successfully built with cuda support.\nRUN if [ \"$WITH_CUDA\" = \"true\" ] ; then if ! ompi_info --parsable --all | grep -q \"mpi_built_with_cuda_support:value:true\" ; then exit 1 ; fi ; fi\n#  ##############################################################################\n#   install python\n#   clear apt-get cache, no more apt usage after this point\nRUN apt-get update \\\n && apt-get install python -y \\\n && rm -rf /var/lib/apt/lists/*\n#  ##############################################################################\n#   Install Twister2 files and packages\n#\nENV CLASSPATH=\"/twister2/lib/*\"\nCOPY docker/kubernetes/image/rootfs /\nCOPY twister2-0.2.2/lib /twister2/lib\nCOPY twister2-0.2.2/bin /twister2/bin\n#   expose 2022 for ssh server (password free ssh support)\n#   expose 8080 for dashboard server if it runs\nEXPOSE 2022/tcp 8080/tcp\nWORKDIR /twister2/\n","originalDockerfileUglifiedHash":"0aa6aec54426db23f041baf9c1add052","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/75fe9e14317b68b3502ce5b97214cfb87e9d1b1e.dockerfile"}