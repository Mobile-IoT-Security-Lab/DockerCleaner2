{"seed":2837353992,"processedDockerfileHash":"bf8bdc25b6f1391df15a5c061c7f9a5b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied.  See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#   This docker file defines a multistage build that supports creating\n#   various docker images for Apache Kudu development.\n#\n#   Note: When editing this file, please follow the best practices laid out here:\n#     https://docs.docker.com/develop/develop-images/dockerfile_best-practices\n#\n#   Note: This file uses the shared label namespace for common labels. See:\n#     http://label-schema.org/rc1/\n#\n#   ---- Runtime ----\n#   Builds a base image that has all the runtime libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS runtime\nCOPY ./docker/bootstrap-runtime-env.sh /\nRUN ./bootstrap-runtime-env.sh \\\n && rm bootstrap-runtime-env.sh\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Runtime Base\" \\\n      org.label-schema.description=\"A base image that has all the runtime  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Dev ----\n#   Builds a base image that has all the development libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS dev\nCOPY ./docker/bootstrap-dev-env.sh /\nRUN ./bootstrap-dev-env.sh \\\n && rm bootstrap-dev-env.sh\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Development Base\" \\\n      org.label-schema.description=\"A base image that has all the development  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Thirdparty ----\n#   Builds an image that has Kudu's thirdparty dependencies built.\n#   This is done in its own stage so that docker can cache it and only\n#   run it when thirdparty has changes.\n#\nFROM dev AS thirdparty\nWORKDIR /kudu\n#   We only copy the needed files for thirdparty so docker can handle caching.\nCOPY ./thirdparty thirdparty\nCOPY ./build-support/enable_devtoolset.sh ./build-support/enable_devtoolset_inner.sh build-support/\nRUN build-support/enable_devtoolset.sh thirdparty/build-if-necessary.sh \\\n && find thirdparty/src/* -maxdepth 0 -type d\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Thirdparty\" \\\n      description=\"An image that has Kudu's thirdparty dependencies pre-built.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Build ----\n#   Builds an image that has the Kudu source code pre-built.\n#   This is useful for generating a runtime image, but can also be a\n#   useful base development image.\n#\nFROM thirdparty AS build\nARG BUILD_TYPE=release\nARG LINK_TYPE=static\nARG STRIP=1\nARG PARALLEL=4\n#   This is a common label argument, but also used in the build invocation.\nARG VCS_REF\n#   Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /kudu\n#   Copy the C++ build source.\n#   We copy the minimal source to optimize docker cache hits.\nCOPY ./build-support build-support\nCOPY ./docs/support docs/support\nCOPY ./cmake_modules cmake_modules\nCOPY ./examples/cpp examples/cpp\nCOPY ./java/kudu-hive/ java/kudu-hive/\nCOPY ./src src\nCOPY ./CMakeLists.txt ./version.txt ./\n#   Build the c++ code.\nWORKDIR /kudu/build/$BUILD_TYPE\n#   Ensure we don't rebuild thirdparty. Instead let docker handle caching.\nENV NO_REBUILD_THIRDPARTY=\"1\"\nRUN\n#   Copy the java build source.\nCOPY ./java /kudu/java\n#   Build the java code.\nWORKDIR /kudu/java\nRUN ./gradlew jar\n#   Copy the python build source.\nCOPY ./python /kudu/python\n#   Build the python code.\nWORKDIR /kudu/python\nRUN pip install -r requirements.txt \\\n && python setup.py sdist\n#   Copy any remaining source files.\nCOPY . /kudu\n#   Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Build\" \\\n      description=\"An image that has the Kudu source code pre-built.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.apache.kudu.build.link=\"$LINK_TYPE\" \\\n      org.apache.kudu.build.stripped=\"$STRIP\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Kudu ----\n#   Builds a runtime image with the Kudu binaries pre-installed.\n#\nFROM runtime AS kudu\nARG UID=1000\nARG GID=1000\nARG INSTALL_DIR=\"/opt/kudu\"\nARG DATA_DIR=\"/var/lib/kudu\"\n#   Copy the binaries.\nWORKDIR $INSTALL_DIR/bin\nCOPY --from=build /kudu/build/latest/bin/kudu /kudu/build/latest/bin/kudu-master /kudu/build/latest/bin/kudu-tserver ./\n#   Add to the binaries to the path.\nENV PATH=\"$INSTALL_DIR/bin/:$PATH\"\nWORKDIR $INSTALL_DIR\n#   Copy the web files.\nCOPY --from=build /kudu/www ./www\nCOPY ./docker/kudu-entrypoint.sh /\n#   Setup the kudu user and create the neccessary directories.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $( getent group ${GID} | cut -d: -f1 ;) \\\n && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n && chown -R kudu:kudu ${INSTALL_DIR} \\\n && mkdir -p ${DATA_DIR} \\\n && chown -R kudu:kudu ${DATA_DIR}\nUSER kudu\n#   Add the entrypoint.\nENTRYPOINT [\"/kudu-entrypoint.sh\"]\nCMD [\"help\"]\n#   Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu\" \\\n      description=\"An image with the Kudu binaries and clients pre-installed.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Licensed to the Apache Software Foundation (ASF) under one\n#  or more contributor license agreements.  See the NOTICE file\n#  distributed with this work for additional information\n#  regarding copyright ownership.  The ASF licenses this file\n#  to you under the Apache License, Version 2.0 (the\n#  \"License\"); you may not use this file except in compliance\n#  with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing,\n#  software distributed under the License is distributed on an\n#  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n#  specific language governing permissions and limitations\n#  under the License.\n#  This docker file defines a multistage build that supports creating\n#  various docker images for Apache Kudu development.\n#\n#  Note: When editing this file, please follow the best practices laid out here:\n#    https://docs.docker.com/develop/develop-images/dockerfile_best-practices\n#\n#  Note: This file uses the shared label namespace for common labels. See:\n#    http://label-schema.org/rc1/\n#\n#  ---- Runtime ----\n#  Builds a base image that has all the runtime libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS runtime\nCOPY ./docker/bootstrap-runtime-env.sh /\nRUN ./bootstrap-runtime-env.sh \\\n && rm bootstrap-runtime-env.sh\n#  Common label arguments.\n#  VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Runtime Base\" \\\n      org.label-schema.description=\"A base image that has all the runtime  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#  ---- Dev ----\n#  Builds a base image that has all the development libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS dev\nCOPY ./docker/bootstrap-dev-env.sh /\nRUN ./bootstrap-dev-env.sh \\\n && rm bootstrap-dev-env.sh\n#  Common label arguments.\n#  VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Development Base\" \\\n      org.label-schema.description=\"A base image that has all the development  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#  ---- Thirdparty ----\n#  Builds an image that has Kudu's thirdparty dependencies built.\n#  This is done in its own stage so that docker can cache it and only\n#  run it when thirdparty has changes.\n#\nFROM dev AS thirdparty\nWORKDIR /kudu\n#  We only copy the needed files for thirdparty so docker can handle caching.\nCOPY ./thirdparty thirdparty\nCOPY ./build-support/enable_devtoolset.sh ./build-support/enable_devtoolset_inner.sh build-support/\nRUN build-support/enable_devtoolset.sh thirdparty/build-if-necessary.sh \\\n && find thirdparty/src/* -maxdepth 0 -type d ( ! -name 'hadoop-*' ! -name 'hive-*' ! -name 'apache-sentry-*' ) -prune -exec rm -rf {} ; \\\n && find thirdparty/build/* -maxdepth 0 -type d ! -name 'llvm-*' -prune -exec rm -rf {} ;\n#  Common label arguments.\n#  VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Thirdparty\" \\\n      description=\"An image that has Kudu's thirdparty dependencies pre-built.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#  ---- Build ----\n#  Builds an image that has the Kudu source code pre-built.\n#  This is useful for generating a runtime image, but can also be a\n#  useful base development image.\n#\nFROM thirdparty AS build\nARG BUILD_TYPE=release\nARG LINK_TYPE=static\nARG STRIP=1\nARG PARALLEL=4\n#  This is a common label argument, but also used in the build invocation.\nARG VCS_REF\n#  Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /kudu\n#  Copy the C++ build source.\n#  We copy the minimal source to optimize docker cache hits.\nCOPY ./build-support build-support\nCOPY ./docs/support docs/support\nCOPY ./cmake_modules cmake_modules\nCOPY ./examples/cpp examples/cpp\nCOPY ./java/kudu-hive/ java/kudu-hive/\nCOPY ./src src\nCOPY ./CMakeLists.txt ./version.txt ./\n#  Build the c++ code.\nWORKDIR /kudu/build/$BUILD_TYPE\n#  Ensure we don't rebuild thirdparty. Instead let docker handle caching.\nENV NO_REBUILD_THIRDPARTY=\"1\"\nRUN ../../build-support/enable_devtoolset.sh ../../thirdparty/installed/common/bin/cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DKUDU_LINK=$LINK_TYPE -DKUDU_GIT_HASH=$VCS_REF -DNO_TESTS=1 ../.. \\\n && make -j${PARALLEL} \\\n && make install \\\n && if [ \"$STRIP\" == \"1\" ] ; then find \"bin\" -name \"kudu*\" -type f -exec strip {} ; ; fi \\\n && if [[ \"$STRIP\" == \"1\" ]] ; then find \"/usr/local\" -name \"libkudu*\" -type f -exec strip {} ; ; fi\n#  Copy the java build source.\nCOPY ./java /kudu/java\n#  Build the java code.\nWORKDIR /kudu/java\nRUN ./gradlew jar\n#  Copy the python build source.\nCOPY ./python /kudu/python\n#  Build the python code.\nWORKDIR /kudu/python\nRUN pip install -r requirements.txt \\\n && python setup.py sdist\n#  Copy any remaining source files.\nCOPY . /kudu\n#  Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Build\" \\\n      description=\"An image that has the Kudu source code pre-built.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.apache.kudu.build.link=\"$LINK_TYPE\" \\\n      org.apache.kudu.build.stripped=\"$STRIP\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#  ---- Kudu ----\n#  Builds a runtime image with the Kudu binaries pre-installed.\n#\nFROM runtime AS kudu\nARG UID=1000\nARG GID=1000\nARG INSTALL_DIR=\"/opt/kudu\"\nARG DATA_DIR=\"/var/lib/kudu\"\n#  Copy the binaries.\nWORKDIR $INSTALL_DIR/bin\nCOPY --from=build /kudu/build/latest/bin/kudu /kudu/build/latest/bin/kudu-master /kudu/build/latest/bin/kudu-tserver ./\n#  Add to the binaries to the path.\nENV PATH=\"$INSTALL_DIR/bin/:$PATH\"\nWORKDIR $INSTALL_DIR\n#  Copy the web files.\nCOPY --from=build /kudu/www ./www\nCOPY ./docker/kudu-entrypoint.sh /\n#  Setup the kudu user and create the neccessary directories.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $( getent group ${GID} | cut -d: -f1 ;) \\\n && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n && chown -R kudu:kudu ${INSTALL_DIR} \\\n && mkdir -p ${DATA_DIR} \\\n && chown -R kudu:kudu ${DATA_DIR}\nUSER kudu\n#  Add the entrypoint.\nENTRYPOINT [\"/kudu-entrypoint.sh\"]\nCMD [\"help\"]\n#  Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu\" \\\n      description=\"An image with the Kudu binaries and clients pre-installed.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n","injectedSmells":[],"originalDockerfileHash":"9d2b7379e855d7ff48251388a91e9608","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Licensed to the Apache Software Foundation (ASF) under one\n#   or more contributor license agreements.  See the NOTICE file\n#   distributed with this work for additional information\n#   regarding copyright ownership.  The ASF licenses this file\n#   to you under the Apache License, Version 2.0 (the\n#   \"License\"); you may not use this file except in compliance\n#   with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing,\n#   software distributed under the License is distributed on an\n#   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#   KIND, either express or implied.  See the License for the\n#   specific language governing permissions and limitations\n#   under the License.\n#   This docker file defines a multistage build that supports creating\n#   various docker images for Apache Kudu development.\n#\n#   Note: When editing this file, please follow the best practices laid out here:\n#     https://docs.docker.com/develop/develop-images/dockerfile_best-practices\n#\n#   Note: This file uses the shared label namespace for common labels. See:\n#     http://label-schema.org/rc1/\n#\n#   ---- Runtime ----\n#   Builds a base image that has all the runtime libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS runtime\nCOPY ./docker/bootstrap-runtime-env.sh /\nRUN ./bootstrap-runtime-env.sh \\\n && rm bootstrap-runtime-env.sh\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Runtime Base\" \\\n      org.label-schema.description=\"A base image that has all the runtime  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Dev ----\n#   Builds a base image that has all the development libraries for Kudu pre-installed.\n#\nARG BASE_OS\nFROM $BASE_OS AS dev\nCOPY ./docker/bootstrap-dev-env.sh /\nRUN ./bootstrap-dev-env.sh \\\n && rm bootstrap-dev-env.sh\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL org.label-schema.name=\"Apache Kudu Development Base\" \\\n      org.label-schema.description=\"A base image that has all the development  libraries for Kudu pre-installed.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Thirdparty ----\n#   Builds an image that has Kudu's thirdparty dependencies built.\n#   This is done in its own stage so that docker can cache it and only\n#   run it when thirdparty has changes.\n#\nFROM dev AS thirdparty\nWORKDIR /kudu\n#   We only copy the needed files for thirdparty so docker can handle caching.\nCOPY ./thirdparty thirdparty\nCOPY ./build-support/enable_devtoolset.sh ./build-support/enable_devtoolset_inner.sh build-support/\nRUN build-support/enable_devtoolset.sh thirdparty/build-if-necessary.sh \\\n && find thirdparty/src/* -maxdepth 0 -type d\n#   Common label arguments.\n#   VCS_REF is not specified to improve docker caching.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Thirdparty\" \\\n      description=\"An image that has Kudu's thirdparty dependencies pre-built.\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Build ----\n#   Builds an image that has the Kudu source code pre-built.\n#   This is useful for generating a runtime image, but can also be a\n#   useful base development image.\n#\nFROM thirdparty AS build\nARG BUILD_TYPE=release\nARG LINK_TYPE=static\nARG STRIP=1\nARG PARALLEL=4\n#   This is a common label argument, but also used in the build invocation.\nARG VCS_REF\n#   Use the bash shell for all RUN commands.\nSHELL [\"/bin/bash\", \"-c\"]\nWORKDIR /kudu\n#   Copy the C++ build source.\n#   We copy the minimal source to optimize docker cache hits.\nCOPY ./build-support build-support\nCOPY ./docs/support docs/support\nCOPY ./cmake_modules cmake_modules\nCOPY ./examples/cpp examples/cpp\nCOPY ./java/kudu-hive/ java/kudu-hive/\nCOPY ./src src\nCOPY ./CMakeLists.txt ./version.txt ./\n#   Build the c++ code.\nWORKDIR /kudu/build/$BUILD_TYPE\n#   Ensure we don't rebuild thirdparty. Instead let docker handle caching.\nENV NO_REBUILD_THIRDPARTY=\"1\"\nRUN\n#   Copy the java build source.\nCOPY ./java /kudu/java\n#   Build the java code.\nWORKDIR /kudu/java\nRUN ./gradlew jar\n#   Copy the python build source.\nCOPY ./python /kudu/python\n#   Build the python code.\nWORKDIR /kudu/python\nRUN pip install -r requirements.txt \\\n && python setup.py sdist\n#   Copy any remaining source files.\nCOPY . /kudu\n#   Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu Build\" \\\n      description=\"An image that has the Kudu source code pre-built.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.apache.kudu.build.link=\"$LINK_TYPE\" \\\n      org.apache.kudu.build.stripped=\"$STRIP\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n#\n#   ---- Kudu ----\n#   Builds a runtime image with the Kudu binaries pre-installed.\n#\nFROM runtime AS kudu\nARG UID=1000\nARG GID=1000\nARG INSTALL_DIR=\"/opt/kudu\"\nARG DATA_DIR=\"/var/lib/kudu\"\n#   Copy the binaries.\nWORKDIR $INSTALL_DIR/bin\nCOPY --from=build /kudu/build/latest/bin/kudu /kudu/build/latest/bin/kudu-master /kudu/build/latest/bin/kudu-tserver ./\n#   Add to the binaries to the path.\nENV PATH=\"$INSTALL_DIR/bin/:$PATH\"\nWORKDIR $INSTALL_DIR\n#   Copy the web files.\nCOPY --from=build /kudu/www ./www\nCOPY ./docker/kudu-entrypoint.sh /\n#   Setup the kudu user and create the neccessary directories.\nRUN groupadd -g ${GID} kudu || groupmod -n kudu $( getent group ${GID} | cut -d: -f1 ;) \\\n && useradd --shell /bin/bash -u ${UID} -g ${GID} -m kudu \\\n && chown -R kudu:kudu ${INSTALL_DIR} \\\n && mkdir -p ${DATA_DIR} \\\n && chown -R kudu:kudu ${DATA_DIR}\nUSER kudu\n#   Add the entrypoint.\nENTRYPOINT [\"/kudu-entrypoint.sh\"]\nCMD [\"help\"]\n#   Common label arguments.\nARG DOCKERFILE\nARG MAINTAINER\nARG URL\nARG VCS_REF\nARG VCS_TYPE\nARG VCS_URL\nARG VERSION\nLABEL name=\"Apache Kudu\" \\\n      description=\"An image with the Kudu binaries and clients pre-installed.\" \\\n      org.apache.kudu.build.type=\"$BUILD_TYPE\" \\\n      org.label-schema.dockerfile=\"$DOCKERFILE\" \\\n      org.label-schema.maintainer=\"$MAINTAINER\" \\\n      org.label-schema.url=\"$URL\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-type=\"$VCS_TYPE\" \\\n      org.label-schema.vcs-url=\"$VCS_URL\" \\\n      org.label-schema.version=\"$VERSION\"\n","originalDockerfileUglifiedHash":"5c3885657298f6fa0e21653223efc70c","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/7e99ee5fcd31dc73bc3c4d4d8bedcd593f09149c.dockerfile"}