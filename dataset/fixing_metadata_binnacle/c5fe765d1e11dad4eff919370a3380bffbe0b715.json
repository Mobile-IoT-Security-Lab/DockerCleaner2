{"seed":930032516,"processedDockerfileHash":"193d44720d78a984eef4d755fa72972b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.7\nWORKDIR /build\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add git=2.15.4-r0 --no-cache\nRUN git config --global user.name \"Mingw\" \\\n && git config --global user.email root@localhost\nRUN git clone -b release_60 https://github.com/llvm-mirror/llvm.git \\\n && cd llvm/tools \\\n && git clone -b release_60 https://github.com/llvm-mirror/clang.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/lld.git\nRUN apk add clang=5.0.0-r0 clang-dev=5.0.0-r0 linux-headers=4.4.6-r2 cmake=3.9.5-r0 build-base=0.5-r0 ninja=1.8.2-r0 make=4.2.1-r0 python2=2.7.15-r3 python2-dev=2.7.15-r3 tar=1.32-r0 --no-cache\nENV TOOLCHAIN_PREFIX=\"/build/prefix\"\nENV CMAKE_BUILD_TYPE=\"MinSizeRel\"\nCOPY ./scripts/build-llvm.sh build-llvm.sh\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX $CMAKE_BUILD_TYPE\nENV ORIG_PATH=\"$PATH\"\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$ORIG_PATH\"\nRUN git clone git://git.code.sf.net/p/mingw-w64/mingw-w64\nENV TOOLCHAIN_ARCHS=\"i686 x86_64 armv7\"\n#   configure of the mingw-w64 crt needs bash :/\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add bash=4.4.19-r1 --no-cache\n#   Install the wrapper scripts\nCOPY wrappers/clang-target-wrapper $TOOLCHAIN_PREFIX/bin\nRUN cd $TOOLCHAIN_PREFIX/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done\nCOPY ./scripts/build-mingw-w64.sh build-mingw-w64.sh\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX $TOOLCHAIN_ARCHS\n#  TODO: rework compiler-rt libunwind and native mingw-w64 toolchain into scripts\nRUN git clone -b release_60 https://github.com/llvm-mirror/compiler-rt.git\n#  TODO: Support i686 for mingw-w64\n#        Martell is working on a patch to force i686 like android does\nRUN cd $TOOLCHAIN_PREFIX \\\n && ln -s i686-w64-mingw32 i386-w64-mingw32\n#   Manually build compiler-rt as a standalone project\nRUN cd compiler-rt \\\n && for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_C_COMPILER_TARGET=$buildarchname-windows-gnu -DCOMPILER_RT_DEFAULT_TARGET_ONLY=TRUE ../lib/builtins \\\n && ninja \\\n && mkdir -p $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows \\\n && cp lib/windows/libclang_rt.builtins-$buildarchname.a $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nCOPY tests/test.c tests/test-tors.c /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test-tors.c -o test-tors-$arch.exe || exit 1 ; done\nRUN git clone -b release_60 https://github.com/llvm-mirror/libcxx.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libcxxabi.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libunwind.git\nRUN cd libunwind \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DLIBUNWIND_USE_COMPILER_RT=TRUE -DLIBUNWIND_ENABLE_THREADS=TRUE -DLIBUNWIND_ENABLE_SHARED=FALSE -DLIBUNWIND_ENABLE_CROSS_UNWINDING=FALSE -DCMAKE_CXX_FLAGS=\"-I/build/libcxx/include\" .. \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nRUN cd libcxxabi \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXXABI_USE_COMPILER_RT=ON -DLIBCXXABI_ENABLE_EXCEPTIONS=ON -DLIBCXXABI_ENABLE_THREADS=ON -DLIBCXXABI_INCLUDE_TESTS=OFF -DLIBCXXABI_TARGET_TRIPLE=$arch-w64-mingw32 -DLIBCXXABI_ENABLE_SHARED=OFF -DLIBCXXABI_LIBCXX_INCLUDES=../../libcxx/include -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DCMAKE_CXX_FLAGS=\"-D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && cd .. || exit 1 ; done\nCOPY patches/libcxx/0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch /build/\nRUN cd libcxx \\\n && git am ../0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch\nRUN cd libcxx \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXX_USE_COMPILER_RT=ON -DLIBCXX_INSTALL_HEADERS=ON -DLIBCXX_ENABLE_EXCEPTIONS=ON -DLIBCXX_ENABLE_THREADS=ON -DLIBCXX_ENABLE_MONOTONIC_CLOCK=ON -DLIBCXX_ENABLE_SHARED=OFF -DLIBCXX_SUPPORTS_STD_EQ_CXX11_FLAG=TRUE -DLIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB=TRUE -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF -DLIBCXX_ENABLE_FILESYSTEM=OFF -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_CXX_ABI_INCLUDE_PATHS=../../libcxxabi/include -DLIBCXX_CXX_ABI_LIBRARY_PATH=../../libcxxabi/build-$arch/lib -DCMAKE_CXX_FLAGS=\"-D_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && ninja install \\\n && ../utils/merge_archives.py --ar llvm-ar -o $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libunwind.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\n#   TODO: actually install c++ headers into c++\nRUN cd $TOOLCHAIN_PREFIX/include \\\n && ln -s ../$( echo $TOOLCHAIN_ARCHS | awk '{print $1}' ;)-w64-mingw32/include/c++ .\nCOPY tests/test.cpp tests/test-exception.cpp /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test.cpp -o test-cpp-$arch.exe -fno-exceptions -lpsapi || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test-exception.cpp -o test-exception-$arch.exe -lpsapi || exit 1 ; done\nENV CROSS_TOOLCHAIN_PREFIX=\"/build/cross\"\n#   ENV PATH=$CROSS_TOOLCHAIN_PREFIX-$arch/bin:$ORIG_PATH\nENV AR=\"llvm-ar\"\nENV RANLIB=\"llvm-ranlib\"\nENV AS=\"llvm-as\"\nENV NM=\"llvm-nm\"\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add wine=2.0.3-r0 --no-cache\nCOPY patches/llvm/0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch /build/\nRUN cd llvm \\\n && git am ../0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch\n#  COPY patches/llvm/0001-fixup-tblgen.patch /build/\n#  RUN cd llvm && git am ../0001-fixup-tblgen.patch\nCOPY patches/llvm/0002-CMAKE-apply-O3-for-mingw-clang.patch /build/\nRUN cd llvm \\\n && git am ../0002-CMAKE-apply-O3-for-mingw-clang.patch\nCOPY patches/llvm/0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch /build/\nRUN cd llvm \\\n && git am ../0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch\n#  COPY patches/lld/0001-LLD-Protect-COFF.h-from-winnt-defines.patch /build/\n#  RUN cd llvm/tools/lld && git am ../../../0001-LLD-Protect-COFF.h-from-winnt-defines.patch\n#   Only cross building to x86_64 for now, change this to add i386/i686 if you wish.\nENV HOST_TOOLCHAIN_ARCHS=\"x86_64\"\n#   Build LLVM, Clang and LLD for mingw-w64\nRUN cd llvm \\\n && for arch in $HOST_TOOLCHAIN_ARCHS; do mkdir build-cross-$arch \\\n && cd build-cross-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang++ -DCMAKE_INSTALL_PREFIX=$CROSS_TOOLCHAIN_PREFIX-$arch -DCMAKE_BUILD_TYPE=Release -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_TARGETS_TO_BUILD=\"ARM;X86\" -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS=\"-D_GNU_SOURCE -Wl,-lpsapi\" -DLLVM_CONFIG_PATH=$TOOLCHAIN_PREFIX/bin/llvm-config -DLLVM_TABLEGEN=$TOOLCHAIN_PREFIX/bin/llvm-tblgen -DCLANG_TABLEGEN=$TOOLCHAIN_PREFIX/bin/clang-tblgen -DCMAKE_SYSTEM_PROGRAM_PATH=$TOOLCHAIN_PREFIX/bin -DCMAKE_FIND_ROOT_PATH=$TOOLCHAIN_PREFIX -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY ../ \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-cross-$arch || exit 1 ; done\n#   Transfer mingw-w64-headers\nRUN cd mingw-w64/mingw-w64-headers \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#   Install the $TUPLE-clang binaries\nCOPY wrappers/clang-target-wrapper $CROSS_TOOLCHAIN_PREFIX-i686/bin\nRUN for host in $HOST_TOOLCHAIN_ARCHS; do cd $CROSS_TOOLCHAIN_PREFIX-$host/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done ; done\n#   Transfer mingw-w64-crt, libcxx and libcxxabi\nRUN cd mingw-w64/mingw-w64-crt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#   Transfer compiler-rt\nRUN cd compiler-rt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir -p $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows \\\n && cp $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done ; done\nRUN apk add wine=2.0.3-r0 freetype=2.8.1-r4 --no-cache\nRUN WINEARCH=win64 winecfg\nCOPY tests/test.c tests/test-tors.c /build/test/\n#   wine currently fails when calling clang\n#   https://bugs.winehq.org/show_bug.cgi?id=44061\n#   fixme:crypt:CRYPT_LoadProvider Failed to load dll L\"C:\\\\windows\\\\system32\\\\rsaenh.dll\"\n#   LLVM ERROR: Could not acquire a cryptographic context: Unknown error (0x8009001D)\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test-tors.c -o test-tors-$arch.exe || exit 1 ; done\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.7\nWORKDIR /build\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache git\nRUN git config --global user.name \"Mingw\" \\\n && git config --global user.email root@localhost\nRUN git clone -b release_60 https://github.com/llvm-mirror/llvm.git \\\n && cd llvm/tools \\\n && git clone -b release_60 https://github.com/llvm-mirror/clang.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/lld.git\nRUN apk add --no-cache clang clang-dev linux-headers cmake build-base ninja make python2 python2-dev tar\nENV TOOLCHAIN_PREFIX=\"/build/prefix\"\nENV CMAKE_BUILD_TYPE=\"MinSizeRel\"\nCOPY ./scripts/build-llvm.sh build-llvm.sh\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX $CMAKE_BUILD_TYPE\nENV ORIG_PATH=\"$PATH\"\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$ORIG_PATH\"\nRUN git clone git://git.code.sf.net/p/mingw-w64/mingw-w64\nENV TOOLCHAIN_ARCHS=\"i686 x86_64 armv7\"\n#  configure of the mingw-w64 crt needs bash :/\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache bash\n#  Install the wrapper scripts\nCOPY wrappers/clang-target-wrapper $TOOLCHAIN_PREFIX/bin\nRUN cd $TOOLCHAIN_PREFIX/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done\nCOPY ./scripts/build-mingw-w64.sh build-mingw-w64.sh\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX $TOOLCHAIN_ARCHS\n# TODO: rework compiler-rt libunwind and native mingw-w64 toolchain into scripts\nRUN git clone -b release_60 https://github.com/llvm-mirror/compiler-rt.git\n# TODO: Support i686 for mingw-w64\n#       Martell is working on a patch to force i686 like android does\nRUN cd $TOOLCHAIN_PREFIX \\\n && ln -s i686-w64-mingw32 i386-w64-mingw32\n#  Manually build compiler-rt as a standalone project\nRUN cd compiler-rt \\\n && for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_C_COMPILER_TARGET=$buildarchname-windows-gnu -DCOMPILER_RT_DEFAULT_TARGET_ONLY=TRUE ../lib/builtins \\\n && ninja \\\n && mkdir -p $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows \\\n && cp lib/windows/libclang_rt.builtins-$buildarchname.a $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nCOPY tests/test.c tests/test-tors.c /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test-tors.c -o test-tors-$arch.exe || exit 1 ; done\nRUN git clone -b release_60 https://github.com/llvm-mirror/libcxx.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libcxxabi.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libunwind.git\nRUN cd libunwind \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DLIBUNWIND_USE_COMPILER_RT=TRUE -DLIBUNWIND_ENABLE_THREADS=TRUE -DLIBUNWIND_ENABLE_SHARED=FALSE -DLIBUNWIND_ENABLE_CROSS_UNWINDING=FALSE -DCMAKE_CXX_FLAGS=\"-I/build/libcxx/include\" .. \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nRUN cd libcxxabi \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXXABI_USE_COMPILER_RT=ON -DLIBCXXABI_ENABLE_EXCEPTIONS=ON -DLIBCXXABI_ENABLE_THREADS=ON -DLIBCXXABI_INCLUDE_TESTS=OFF -DLIBCXXABI_TARGET_TRIPLE=$arch-w64-mingw32 -DLIBCXXABI_ENABLE_SHARED=OFF -DLIBCXXABI_LIBCXX_INCLUDES=../../libcxx/include -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DCMAKE_CXX_FLAGS=\"-D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && cd .. || exit 1 ; done\nCOPY patches/libcxx/0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch /build/\nRUN cd libcxx \\\n && git am ../0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch\nRUN cd libcxx \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXX_USE_COMPILER_RT=ON -DLIBCXX_INSTALL_HEADERS=ON -DLIBCXX_ENABLE_EXCEPTIONS=ON -DLIBCXX_ENABLE_THREADS=ON -DLIBCXX_ENABLE_MONOTONIC_CLOCK=ON -DLIBCXX_ENABLE_SHARED=OFF -DLIBCXX_SUPPORTS_STD_EQ_CXX11_FLAG=TRUE -DLIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB=TRUE -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF -DLIBCXX_ENABLE_FILESYSTEM=OFF -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_CXX_ABI_INCLUDE_PATHS=../../libcxxabi/include -DLIBCXX_CXX_ABI_LIBRARY_PATH=../../libcxxabi/build-$arch/lib -DCMAKE_CXX_FLAGS=\"-D_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && ninja install \\\n && ../utils/merge_archives.py --ar llvm-ar -o $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libunwind.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\n#  TODO: actually install c++ headers into c++\nRUN cd $TOOLCHAIN_PREFIX/include \\\n && ln -s ../$( echo $TOOLCHAIN_ARCHS | awk '{print $1}' ;)-w64-mingw32/include/c++ .\nCOPY tests/test.cpp tests/test-exception.cpp /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test.cpp -o test-cpp-$arch.exe -fno-exceptions -lpsapi || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test-exception.cpp -o test-exception-$arch.exe -lpsapi || exit 1 ; done\nENV CROSS_TOOLCHAIN_PREFIX=\"/build/cross\"\n#  ENV PATH=$CROSS_TOOLCHAIN_PREFIX-$arch/bin:$ORIG_PATH\nENV AR=\"llvm-ar\"\nENV RANLIB=\"llvm-ranlib\"\nENV AS=\"llvm-as\"\nENV NM=\"llvm-nm\"\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache wine\nCOPY patches/llvm/0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch /build/\nRUN cd llvm \\\n && git am ../0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch\n# COPY patches/llvm/0001-fixup-tblgen.patch /build/\n# RUN cd llvm && git am ../0001-fixup-tblgen.patch\nCOPY patches/llvm/0002-CMAKE-apply-O3-for-mingw-clang.patch /build/\nRUN cd llvm \\\n && git am ../0002-CMAKE-apply-O3-for-mingw-clang.patch\nCOPY patches/llvm/0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch /build/\nRUN cd llvm \\\n && git am ../0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch\n# COPY patches/lld/0001-LLD-Protect-COFF.h-from-winnt-defines.patch /build/\n# RUN cd llvm/tools/lld && git am ../../../0001-LLD-Protect-COFF.h-from-winnt-defines.patch\n#  Only cross building to x86_64 for now, change this to add i386/i686 if you wish.\nENV HOST_TOOLCHAIN_ARCHS=\"x86_64\"\n#  Build LLVM, Clang and LLD for mingw-w64\nRUN cd llvm \\\n && for arch in $HOST_TOOLCHAIN_ARCHS; do mkdir build-cross-$arch \\\n && cd build-cross-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang++ -DCMAKE_INSTALL_PREFIX=$CROSS_TOOLCHAIN_PREFIX-$arch -DCMAKE_BUILD_TYPE=Release -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_TARGETS_TO_BUILD=\"ARM;X86\" -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS=\"-D_GNU_SOURCE -Wl,-lpsapi\" -DLLVM_CONFIG_PATH=$TOOLCHAIN_PREFIX/bin/llvm-config -DLLVM_TABLEGEN=$TOOLCHAIN_PREFIX/bin/llvm-tblgen -DCLANG_TABLEGEN=$TOOLCHAIN_PREFIX/bin/clang-tblgen -DCMAKE_SYSTEM_PROGRAM_PATH=$TOOLCHAIN_PREFIX/bin -DCMAKE_FIND_ROOT_PATH=$TOOLCHAIN_PREFIX -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY ../ \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-cross-$arch || exit 1 ; done\n#  Transfer mingw-w64-headers\nRUN cd mingw-w64/mingw-w64-headers \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#  Install the $TUPLE-clang binaries\nCOPY wrappers/clang-target-wrapper $CROSS_TOOLCHAIN_PREFIX-i686/bin\nRUN for host in $HOST_TOOLCHAIN_ARCHS; do cd $CROSS_TOOLCHAIN_PREFIX-$host/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done ; done\n#  Transfer mingw-w64-crt, libcxx and libcxxabi\nRUN cd mingw-w64/mingw-w64-crt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#  Transfer compiler-rt\nRUN cd compiler-rt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir -p $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows \\\n && cp $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done ; done\nRUN apk add --no-cache wine freetype\nRUN WINEARCH=win64 winecfg\nCOPY tests/test.c tests/test-tors.c /build/test/\n#  wine currently fails when calling clang\n#  https://bugs.winehq.org/show_bug.cgi?id=44061\n#  fixme:crypt:CRYPT_LoadProvider Failed to load dll L\"C:\\\\windows\\\\system32\\\\rsaenh.dll\"\n#  LLVM ERROR: Could not acquire a cryptographic context: Unknown error (0x8009001D)\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test-tors.c -o test-tors-$arch.exe || exit 1 ; done\n","injectedSmells":[],"originalDockerfileHash":"2a01a602874ff0d0fcb8476e376f2b84","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.7\nWORKDIR /build\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache git\nRUN git config --global user.name \"Mingw\" \\\n && git config --global user.email root@localhost\nRUN git clone -b release_60 https://github.com/llvm-mirror/llvm.git \\\n && cd llvm/tools \\\n && git clone -b release_60 https://github.com/llvm-mirror/clang.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/lld.git\nRUN apk add --no-cache clang clang-dev linux-headers cmake build-base ninja make python2 python2-dev tar\nENV TOOLCHAIN_PREFIX=\"/build/prefix\"\nENV CMAKE_BUILD_TYPE=\"MinSizeRel\"\nCOPY ./scripts/build-llvm.sh build-llvm.sh\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX $CMAKE_BUILD_TYPE\nENV ORIG_PATH=\"$PATH\"\nENV PATH=\"$TOOLCHAIN_PREFIX/bin:$ORIG_PATH\"\nRUN git clone git://git.code.sf.net/p/mingw-w64/mingw-w64\nENV TOOLCHAIN_ARCHS=\"i686 x86_64 armv7\"\n#   configure of the mingw-w64 crt needs bash :/\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache bash\n#   Install the wrapper scripts\nCOPY wrappers/clang-target-wrapper $TOOLCHAIN_PREFIX/bin\nRUN cd $TOOLCHAIN_PREFIX/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done\nCOPY ./scripts/build-mingw-w64.sh build-mingw-w64.sh\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX $TOOLCHAIN_ARCHS\n#  TODO: rework compiler-rt libunwind and native mingw-w64 toolchain into scripts\nRUN git clone -b release_60 https://github.com/llvm-mirror/compiler-rt.git\n#  TODO: Support i686 for mingw-w64\n#        Martell is working on a patch to force i686 like android does\nRUN cd $TOOLCHAIN_PREFIX \\\n && ln -s i686-w64-mingw32 i386-w64-mingw32\n#   Manually build compiler-rt as a standalone project\nRUN cd compiler-rt \\\n && for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_C_COMPILER_TARGET=$buildarchname-windows-gnu -DCOMPILER_RT_DEFAULT_TARGET_ONLY=TRUE ../lib/builtins \\\n && ninja \\\n && mkdir -p $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows \\\n && cp lib/windows/libclang_rt.builtins-$buildarchname.a $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nCOPY tests/test.c tests/test-tors.c /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang test-tors.c -o test-tors-$arch.exe || exit 1 ; done\nRUN git clone -b release_60 https://github.com/llvm-mirror/libcxx.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libcxxabi.git \\\n && git clone -b release_60 https://github.com/llvm-mirror/libunwind.git\nRUN cd libunwind \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DLIBUNWIND_USE_COMPILER_RT=TRUE -DLIBUNWIND_ENABLE_THREADS=TRUE -DLIBUNWIND_ENABLE_SHARED=FALSE -DLIBUNWIND_ENABLE_CROSS_UNWINDING=FALSE -DCMAKE_CXX_FLAGS=\"-I/build/libcxx/include\" .. \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\nRUN cd libcxxabi \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXXABI_USE_COMPILER_RT=ON -DLIBCXXABI_ENABLE_EXCEPTIONS=ON -DLIBCXXABI_ENABLE_THREADS=ON -DLIBCXXABI_INCLUDE_TESTS=OFF -DLIBCXXABI_TARGET_TRIPLE=$arch-w64-mingw32 -DLIBCXXABI_ENABLE_SHARED=OFF -DLIBCXXABI_LIBCXX_INCLUDES=../../libcxx/include -DLLVM_NO_OLD_LIBSTDCXX=TRUE -DCXX_SUPPORTS_CXX11=TRUE -DCMAKE_CXX_FLAGS=\"-D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && cd .. || exit 1 ; done\nCOPY patches/libcxx/0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch /build/\nRUN cd libcxx \\\n && git am ../0001-libcxx-Move-Windows-threading-support-into-a-.cpp-fi.patch\nRUN cd libcxx \\\n && for arch in $TOOLCHAIN_ARCHS; do mkdir build-$arch \\\n && cd build-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_PREFIX/$arch-w64-mingw32 -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER_WORKS=TRUE -DCMAKE_CXX_COMPILER_WORKS=TRUE -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLIBCXX_USE_COMPILER_RT=ON -DLIBCXX_INSTALL_HEADERS=ON -DLIBCXX_ENABLE_EXCEPTIONS=ON -DLIBCXX_ENABLE_THREADS=ON -DLIBCXX_ENABLE_MONOTONIC_CLOCK=ON -DLIBCXX_ENABLE_SHARED=OFF -DLIBCXX_SUPPORTS_STD_EQ_CXX11_FLAG=TRUE -DLIBCXX_HAVE_CXX_ATOMICS_WITHOUT_LIB=TRUE -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF -DLIBCXX_ENABLE_FILESYSTEM=OFF -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_CXX_ABI_INCLUDE_PATHS=../../libcxxabi/include -DLIBCXX_CXX_ABI_LIBRARY_PATH=../../libcxxabi/build-$arch/lib -DCMAKE_CXX_FLAGS=\"-D_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS\" .. \\\n && ninja \\\n && ninja install \\\n && ../utils/merge_archives.py --ar llvm-ar -o $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libc++.a $TOOLCHAIN_PREFIX/$arch-w64-mingw32/lib/libunwind.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done\n#   TODO: actually install c++ headers into c++\nRUN cd $TOOLCHAIN_PREFIX/include \\\n && ln -s ../$( echo $TOOLCHAIN_ARCHS | awk '{print $1}' ;)-w64-mingw32/include/c++ .\nCOPY tests/test.cpp tests/test-exception.cpp /build/test/\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test.cpp -o test-cpp-$arch.exe -fno-exceptions -lpsapi || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do $arch-w64-mingw32-clang++ test-exception.cpp -o test-exception-$arch.exe -lpsapi || exit 1 ; done\nENV CROSS_TOOLCHAIN_PREFIX=\"/build/cross\"\n#   ENV PATH=$CROSS_TOOLCHAIN_PREFIX-$arch/bin:$ORIG_PATH\nENV AR=\"llvm-ar\"\nENV RANLIB=\"llvm-ranlib\"\nENV AS=\"llvm-as\"\nENV NM=\"llvm-nm\"\nRUN apk --no-cache update \\\n && apk --no-cache upgrade \\\n && apk add --no-cache wine\nCOPY patches/llvm/0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch /build/\nRUN cd llvm \\\n && git am ../0001-cmake-Don-t-build-Native-llvm-config-when-cross-comp.patch\n#  COPY patches/llvm/0001-fixup-tblgen.patch /build/\n#  RUN cd llvm && git am ../0001-fixup-tblgen.patch\nCOPY patches/llvm/0002-CMAKE-apply-O3-for-mingw-clang.patch /build/\nRUN cd llvm \\\n && git am ../0002-CMAKE-apply-O3-for-mingw-clang.patch\nCOPY patches/llvm/0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch /build/\nRUN cd llvm \\\n && git am ../0003-CMAKE-disable-mbig-obj-for-mingw-clang-asm.patch\n#  COPY patches/lld/0001-LLD-Protect-COFF.h-from-winnt-defines.patch /build/\n#  RUN cd llvm/tools/lld && git am ../../../0001-LLD-Protect-COFF.h-from-winnt-defines.patch\n#   Only cross building to x86_64 for now, change this to add i386/i686 if you wish.\nENV HOST_TOOLCHAIN_ARCHS=\"x86_64\"\n#   Build LLVM, Clang and LLD for mingw-w64\nRUN cd llvm \\\n && for arch in $HOST_TOOLCHAIN_ARCHS; do mkdir build-cross-$arch \\\n && cd build-cross-$arch \\\n && cmake -G\"Ninja\" -DCMAKE_C_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang -DCMAKE_CXX_COMPILER=$TOOLCHAIN_PREFIX/bin/$arch-w64-mingw32-clang++ -DCMAKE_INSTALL_PREFIX=$CROSS_TOOLCHAIN_PREFIX-$arch -DCMAKE_BUILD_TYPE=Release -DCMAKE_CROSSCOMPILING=TRUE -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_AR=$TOOLCHAIN_PREFIX/bin/llvm-ar -DCMAKE_RANLIB=$TOOLCHAIN_PREFIX/bin/llvm-ranlib -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_TARGETS_TO_BUILD=\"ARM;X86\" -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS=\"-D_GNU_SOURCE -Wl,-lpsapi\" -DLLVM_CONFIG_PATH=$TOOLCHAIN_PREFIX/bin/llvm-config -DLLVM_TABLEGEN=$TOOLCHAIN_PREFIX/bin/llvm-tblgen -DCLANG_TABLEGEN=$TOOLCHAIN_PREFIX/bin/clang-tblgen -DCMAKE_SYSTEM_PROGRAM_PATH=$TOOLCHAIN_PREFIX/bin -DCMAKE_FIND_ROOT_PATH=$TOOLCHAIN_PREFIX -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY ../ \\\n && ninja \\\n && ninja install \\\n && cd .. \\\n && rm -rf build-cross-$arch || exit 1 ; done\n#   Transfer mingw-w64-headers\nRUN cd mingw-w64/mingw-w64-headers \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#   Install the $TUPLE-clang binaries\nCOPY wrappers/clang-target-wrapper $CROSS_TOOLCHAIN_PREFIX-i686/bin\nRUN for host in $HOST_TOOLCHAIN_ARCHS; do cd $CROSS_TOOLCHAIN_PREFIX-$host/bin \\\n && for arch in $TOOLCHAIN_ARCHS; do for exec in clang clang++; do ln -s clang-target-wrapper $arch-w64-mingw32-$exec ; done ; done ; done\n#   Transfer mingw-w64-crt, libcxx and libcxxabi\nRUN cd mingw-w64/mingw-w64-crt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do cd build-$arch \\\n && DESTDIR=$CROSS_TOOLCHAIN_PREFIX-$host/$arch-w64-mingw32 make install \\\n && cd .. || exit 1 ; done ; done\n#   Transfer compiler-rt\nRUN cd compiler-rt \\\n && for host in $HOST_TOOLCHAIN_ARCHS; do for arch in $TOOLCHAIN_ARCHS; do buildarchname=$arch \\\n && libarchname=$arch \\\n && case $arch in (armv7) libarchname=arm ;;(i686) buildarchname=i386 libarchname=i386 ;; esac \\\n && mkdir -p $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows \\\n && cp $TOOLCHAIN_PREFIX/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a $CROSS_TOOLCHAIN_PREFIX-$host/lib/clang/6.0.0/lib/windows/libclang_rt.builtins-$libarchname.a \\\n && cd .. \\\n && rm -rf build-$arch || exit 1 ; done ; done\nRUN apk add --no-cache wine freetype\nRUN WINEARCH=win64 winecfg\nCOPY tests/test.c tests/test-tors.c /build/test/\n#   wine currently fails when calling clang\n#   https://bugs.winehq.org/show_bug.cgi?id=44061\n#   fixme:crypt:CRYPT_LoadProvider Failed to load dll L\"C:\\\\windows\\\\system32\\\\rsaenh.dll\"\n#   LLVM ERROR: Could not acquire a cryptographic context: Unknown error (0x8009001D)\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test.c -o test-c-$arch.exe || exit 1 ; done\nRUN cd test \\\n && for arch in $TOOLCHAIN_ARCHS; do wine64 $CROSS_TOOLCHAIN_PREFIX-x86_64/bin/clang -target x86_64-windows-gnu test-tors.c -o test-tors-$arch.exe || exit 1 ; done\n","originalDockerfileUglifiedHash":"920363d49aace276b81d18828fae4c2d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c5fe765d1e11dad4eff919370a3380bffbe0b715.dockerfile"}