{"seed":2871457371,"processedDockerfileHash":"8326d61e226e0ab3dcdf2569ecccf24d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM openjdk:8-jdk-alpine\nENV JENKINS_OPTS=\"JENKINS_USER=root\"\nUSER root\n#   Install Python3.6 \nRUN apk add python3 libffi-dev openssl-dev --no-cache \\\n && python3 -m ensurepip \\\n && rm -r /usr/lib/python*/ensurepip \\\n && pip3 install --upgrade pip setuptools \\\n && if [ ! -e /usr/bin/pip ] ; then ln -s pip3 /usr/bin/pip ; fi \\\n && pip install pip==23.1 --upgrade \\\n && pip install python-jenkins==1.1.0 jinja2==2.10 hvac==0.6.2 argparse==1.4.0 requests==2.19.1 pyyaml==3.13 kubernetes==6.0.0 \\\n && if [[ ! -e /usr/bin/python ]] ; then ln -sf /usr/bin/python3 /usr/bin/python ; fi \\\n && rm -r /root/.cache\n#   Install Jenkins \nRUN apk add gcc musl-dev git openssh-client curl unzip bash ttf-dejavu coreutils tini --no-cache\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.107.3}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=902d670e3a57670202e01402ca5ea1142c08d187636dd979d33ef317dbe7c6eb\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\n#  RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n#    && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref \\\n && mkdir $JENKINS_HOME/users\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n#   Workaround to install active parameter plugin\nCOPY ./plugins/scriptler-2.9.hpi /usr/share/jenkins\nCOPY ./plugins/uno-choice-1.5.3.hpi /usr/share/jenkins\n#   Deploy Customzied jenkins config.xml and add admin user \nCOPY ./config.xml $JENKINS_HOME/\nCOPY ./users/ $JENKINS_HOME/users/\n#   Add WCS Continous Deploy Job \n#   Create the job workspaces\nRUN mkdir -p \"$JENKINS_HOME\"/workspace/DeployWCSCloud_Base\n#   Create the jobs folder recursively\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base\n#   Add the custom configs to the container\nCOPY ./setup/jobs/DeployWCSCloud_Base.xml \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/config.xml\nCOPY ./setup/jobs/BuildDockerImage_Base.xml \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/config.xml\nCOPY ./setup/jobs/ManageConfigMap_Base.xml \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/config.xml\nCOPY ./setup/jobs/ManageDockerfile_Base.xml \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/config.xml\nCOPY ./setup/jobs/ManageVaultConfig_Base.xml \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/config.xml\nCOPY ./setup/jobs/AddCert_Base.xml \"$JENKINS_HOME\"/jobs/AddCert_Base/config.xml\nCOPY ./setup/jobs/BundleCert_Base.xml \"$JENKINS_HOME\"/jobs/BundleCert_Base/config.xml\nCOPY ./setup/jobs/TriggerBuildIndex_Base.xml \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/config.xml\nCOPY ./setup/jobs/TriggerIndexReplica_Base.xml \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/config.xml\nCOPY ./setup/jobs/CreateTenant_Base.xml \"$JENKINS_HOME\"/jobs/CreateTenant_Base/config.xml\nCOPY ./setup/jobs/Utilities_DBClean_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DBClean_Base/config.xml\nCOPY ./setup/jobs/Utilities_UpdateDB_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/config.xml\nCOPY ./setup/jobs/Utilities_VersionInfo_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/config.xml\nCOPY ./setup/jobs/Utilities_StagingProp_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/config.xml\nCOPY ./setup/jobs/KubeExec_Base.xml \"$JENKINS_HOME\"/jobs/KubeExec_Base/config.xml\nCOPY ./setup/jobs/BuildCustomizationPackage_Base.xml \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/config.xml\nCOPY ./setup/jobs/Utilities_DeployData_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/config.xml\n#   Create KubeExec_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/builds/1/\n#   Create DeployWCSCloud_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/builds/1/\n#   Create BuildDockerImage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/builds/1/\n#   Create ManageConfigMap_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/builds/1/\n#   Create ManageDockerfile_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/builds/1/\n#   Create AddCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/builds/1/\n#   Create BundleCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/builds/1/\n#   Create TriggerBuildIndex_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/builds/1/\n#   Create TriggerIndexReplica_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/builds/1/\n#   Create ManageVaultConfig_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/builds/1/\n#   Create CreateTenant_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/builds/1/\n#   Create Utilities_DBClean job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/builds/1/\n#   Create Utilities_UpdateDB_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/builds/1/\n#   Create Utilities_VersionInfo job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/builds/1/\n#   Create Utilities_StagingProp job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/builds/1/\n#   Create Utilities_DeployData job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/builds/1/\n#   Create BuildCustomizationPackage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/builds/1/\n#   Add Jenkins Plugin Reference\nCOPY ./plugins.txt /usr/share/jenkins/ref\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\n#   Copy scirpt which used to detect the Vault\nCOPY ./vault.py /usr/local/bin\n#   Prime commerce-devops-utilites folder for utilities\nCOPY ./commerce-devops-utilities /commerce-devops-utilities\nRUN chmod -R 755 /commerce-devops-utilities\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM openjdk:8-jdk-alpine\nENV JENKINS_OPTS=\"JENKINS_USER=root\"\nUSER root\n#  Install Python3.6 \nRUN apk add --no-cache python3 libffi-dev openssl-dev \\\n && python3 -m ensurepip \\\n && rm -r /usr/lib/python*/ensurepip \\\n && pip3 install --upgrade pip setuptools \\\n && if [ ! -e /usr/bin/pip ] ; then ln -s pip3 /usr/bin/pip ; fi \\\n && pip install pip --upgrade \\\n && pip install python-jenkins==1.1.0 jinja2==2.10 hvac==0.6.2 argparse==1.4.0 requests==2.19.1 pyyaml==3.13 kubernetes==6.0.0 \\\n && if [[ ! -e /usr/bin/python ]] ; then ln -sf /usr/bin/python3 /usr/bin/python ; fi \\\n && rm -r /root/.cache\n#  Install Jenkins \nRUN apk add --no-cache gcc musl-dev git openssh-client curl unzip bash ttf-dejavu coreutils tini\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#  Jenkins is run with user `jenkins`, uid = 1000\n#  If you bind mount a volume from the host or a data container,\n#  ensure you use the same uid\nRUN addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#  Jenkins home directory is a volume, so configuration and build history\n#  can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#  `/usr/share/jenkins/ref/` contains all reference configuration we want\n#  to set on a fresh new installation. Use it to bundle additional plugins\n#  or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#  jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.107.3}\"\n#  jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=902d670e3a57670202e01402ca5ea1142c08d187636dd979d33ef317dbe7c6eb\n#  Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#  could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#  see https://github.com/docker/docker/issues/8331\n# RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n#   && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref \\\n && mkdir $JENKINS_HOME/users\n#  for main web interface:\nEXPOSE ${http_port}\n#  will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#  from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n#  Workaround to install active parameter plugin\nCOPY ./plugins/scriptler-2.9.hpi /usr/share/jenkins\nCOPY ./plugins/uno-choice-1.5.3.hpi /usr/share/jenkins\n#  Deploy Customzied jenkins config.xml and add admin user \nCOPY ./config.xml $JENKINS_HOME/\nCOPY ./users/ $JENKINS_HOME/users/\n#  Add WCS Continous Deploy Job \n#  Create the job workspaces\nRUN mkdir -p \"$JENKINS_HOME\"/workspace/DeployWCSCloud_Base\n#  Create the jobs folder recursively\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base\n#  Add the custom configs to the container\nCOPY ./setup/jobs/DeployWCSCloud_Base.xml \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/config.xml\nCOPY ./setup/jobs/BuildDockerImage_Base.xml \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/config.xml\nCOPY ./setup/jobs/ManageConfigMap_Base.xml \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/config.xml\nCOPY ./setup/jobs/ManageDockerfile_Base.xml \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/config.xml\nCOPY ./setup/jobs/ManageVaultConfig_Base.xml \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/config.xml\nCOPY ./setup/jobs/AddCert_Base.xml \"$JENKINS_HOME\"/jobs/AddCert_Base/config.xml\nCOPY ./setup/jobs/BundleCert_Base.xml \"$JENKINS_HOME\"/jobs/BundleCert_Base/config.xml\nCOPY ./setup/jobs/TriggerBuildIndex_Base.xml \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/config.xml\nCOPY ./setup/jobs/TriggerIndexReplica_Base.xml \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/config.xml\nCOPY ./setup/jobs/CreateTenant_Base.xml \"$JENKINS_HOME\"/jobs/CreateTenant_Base/config.xml\nCOPY ./setup/jobs/Utilities_DBClean_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DBClean_Base/config.xml\nCOPY ./setup/jobs/Utilities_UpdateDB_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/config.xml\nCOPY ./setup/jobs/Utilities_VersionInfo_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/config.xml\nCOPY ./setup/jobs/Utilities_StagingProp_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/config.xml\nCOPY ./setup/jobs/KubeExec_Base.xml \"$JENKINS_HOME\"/jobs/KubeExec_Base/config.xml\nCOPY ./setup/jobs/BuildCustomizationPackage_Base.xml \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/config.xml\nCOPY ./setup/jobs/Utilities_DeployData_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/config.xml\n#  Create KubeExec_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/builds/1/\n#  Create DeployWCSCloud_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/builds/1/\n#  Create BuildDockerImage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/builds/1/\n#  Create ManageConfigMap_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/builds/1/\n#  Create ManageDockerfile_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/builds/1/\n#  Create AddCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/builds/1/\n#  Create BundleCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/builds/1/\n#  Create TriggerBuildIndex_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/builds/1/\n#  Create TriggerIndexReplica_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/builds/1/\n#  Create ManageVaultConfig_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/builds/1/\n#  Create CreateTenant_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/builds/1/\n#  Create Utilities_DBClean job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/builds/1/\n#  Create Utilities_UpdateDB_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/builds/1/\n#  Create Utilities_VersionInfo job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/builds/1/\n#  Create Utilities_StagingProp job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/builds/1/\n#  Create Utilities_DeployData job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/builds/1/\n#  Create BuildCustomizationPackage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/builds/1/\n#  Add Jenkins Plugin Reference\nCOPY ./plugins.txt /usr/share/jenkins/ref\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\n#  Copy scirpt which used to detect the Vault\nCOPY ./vault.py /usr/local/bin\n#  Prime commerce-devops-utilites folder for utilities\nCOPY ./commerce-devops-utilities /commerce-devops-utilities\nRUN chmod -R 755 /commerce-devops-utilities\n","injectedSmells":[],"originalDockerfileHash":"708c645b1db4b47995a21bc3ab26f65b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM openjdk:8-jdk-alpine\nENV JENKINS_OPTS=\"JENKINS_USER=root\"\nUSER root\n#   Install Python3.6 \nRUN apk add --no-cache python3 libffi-dev openssl-dev \\\n && python3 -m ensurepip \\\n && rm -r /usr/lib/python*/ensurepip \\\n && pip3 install --upgrade pip setuptools \\\n && if [ ! -e /usr/bin/pip ] ; then ln -s pip3 /usr/bin/pip ; fi \\\n && pip install pip --upgrade \\\n && pip install python-jenkins==1.1.0 jinja2==2.10 hvac==0.6.2 argparse==1.4.0 requests==2.19.1 pyyaml==3.13 kubernetes==6.0.0 \\\n && if [[ ! -e /usr/bin/python ]] ; then ln -sf /usr/bin/python3 /usr/bin/python ; fi \\\n && rm -r /root/.cache\n#   Install Jenkins \nRUN apk add --no-cache gcc musl-dev git openssh-client curl unzip bash ttf-dejavu coreutils tini\nARG user=jenkins\nARG group=jenkins\nARG uid=1000\nARG gid=1000\nARG http_port=8080\nARG agent_port=50000\nENV JENKINS_HOME=\"/var/jenkins_home\"\nENV JENKINS_SLAVE_AGENT_PORT=\"${agent_port}\"\n#   Jenkins is run with user `jenkins`, uid = 1000\n#   If you bind mount a volume from the host or a data container,\n#   ensure you use the same uid\nRUN addgroup -g ${gid} ${group} \\\n && adduser -h \"$JENKINS_HOME\" -u ${uid} -G ${group} -s /bin/bash -D ${user}\n#   Jenkins home directory is a volume, so configuration and build history\n#   can be persisted and survive image upgrades\nVOLUME /var/jenkins_home\n#   `/usr/share/jenkins/ref/` contains all reference configuration we want\n#   to set on a fresh new installation. Use it to bundle additional plugins\n#   or config file with your custom jenkins Docker image.\nRUN mkdir -p /usr/share/jenkins/ref/init.groovy.d\nCOPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy\n#   jenkins version being bundled in this docker image\nARG JENKINS_VERSION\nENV JENKINS_VERSION=\"${JENKINS_VERSION:-2.107.3}\"\n#   jenkins.war checksum, download will be validated using it\nARG JENKINS_SHA=902d670e3a57670202e01402ca5ea1142c08d187636dd979d33ef317dbe7c6eb\n#   Can be used to customize where jenkins.war get downloaded from\nARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war\n#   could use ADD but this one does not check Last-Modified header neither does it allow to control checksum\n#   see https://github.com/docker/docker/issues/8331\n#  RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n#    && echo \"${JENKINS_SHA}  /usr/share/jenkins/jenkins.war\" | sha256sum -c -\nRUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \\\n && echo \"${JENKINS_SHA} /usr/share/jenkins/jenkins.war\"\nENV JENKINS_UC=\"https://updates.jenkins.io\"\nENV JENKINS_UC_EXPERIMENTAL=\"https://updates.jenkins.io/experimental\"\nRUN chown -R ${user} \"$JENKINS_HOME\" /usr/share/jenkins/ref \\\n && mkdir $JENKINS_HOME/users\n#   for main web interface:\nEXPOSE ${http_port}\n#   will be used by attached slave agents:\nEXPOSE ${agent_port}\nENV COPY_REFERENCE_FILE_LOG=\"$JENKINS_HOME/copy_reference_file.log\"\nCOPY jenkins-support /usr/local/bin/jenkins-support\nCOPY jenkins.sh /usr/local/bin/jenkins.sh\nCOPY tini-shim.sh /bin/tini\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/usr/local/bin/jenkins.sh\"]\n#   from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle\nCOPY plugins.sh /usr/local/bin/plugins.sh\nCOPY install-plugins.sh /usr/local/bin/install-plugins.sh\n#   Workaround to install active parameter plugin\nCOPY ./plugins/scriptler-2.9.hpi /usr/share/jenkins\nCOPY ./plugins/uno-choice-1.5.3.hpi /usr/share/jenkins\n#   Deploy Customzied jenkins config.xml and add admin user \nCOPY ./config.xml $JENKINS_HOME/\nCOPY ./users/ $JENKINS_HOME/users/\n#   Add WCS Continous Deploy Job \n#   Create the job workspaces\nRUN mkdir -p \"$JENKINS_HOME\"/workspace/DeployWCSCloud_Base\n#   Create the jobs folder recursively\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base\n#   Add the custom configs to the container\nCOPY ./setup/jobs/DeployWCSCloud_Base.xml \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/config.xml\nCOPY ./setup/jobs/BuildDockerImage_Base.xml \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/config.xml\nCOPY ./setup/jobs/ManageConfigMap_Base.xml \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/config.xml\nCOPY ./setup/jobs/ManageDockerfile_Base.xml \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/config.xml\nCOPY ./setup/jobs/ManageVaultConfig_Base.xml \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/config.xml\nCOPY ./setup/jobs/AddCert_Base.xml \"$JENKINS_HOME\"/jobs/AddCert_Base/config.xml\nCOPY ./setup/jobs/BundleCert_Base.xml \"$JENKINS_HOME\"/jobs/BundleCert_Base/config.xml\nCOPY ./setup/jobs/TriggerBuildIndex_Base.xml \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/config.xml\nCOPY ./setup/jobs/TriggerIndexReplica_Base.xml \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/config.xml\nCOPY ./setup/jobs/CreateTenant_Base.xml \"$JENKINS_HOME\"/jobs/CreateTenant_Base/config.xml\nCOPY ./setup/jobs/Utilities_DBClean_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DBClean_Base/config.xml\nCOPY ./setup/jobs/Utilities_UpdateDB_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/config.xml\nCOPY ./setup/jobs/Utilities_VersionInfo_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/config.xml\nCOPY ./setup/jobs/Utilities_StagingProp_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/config.xml\nCOPY ./setup/jobs/KubeExec_Base.xml \"$JENKINS_HOME\"/jobs/KubeExec_Base/config.xml\nCOPY ./setup/jobs/BuildCustomizationPackage_Base.xml \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/config.xml\nCOPY ./setup/jobs/Utilities_DeployData_Base.xml \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/config.xml\n#   Create KubeExec_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/KubeExec_Base/builds/1/\n#   Create DeployWCSCloud_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/DeployWCSCloud_Base/builds/1/\n#   Create BuildDockerImage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildDockerImage_Base/builds/1/\n#   Create ManageConfigMap_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageConfigMap_Base/builds/1/\n#   Create ManageDockerfile_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageDockerfile_Base/builds/1/\n#   Create AddCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/AddCert_Base/builds/1/\n#   Create BundleCert_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BundleCert_Base/builds/1/\n#   Create TriggerBuildIndex_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerBuildIndex_Base/builds/1/\n#   Create TriggerIndexReplica_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/TriggerIndexReplica_Base/builds/1/\n#   Create ManageVaultConfig_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/ManageVaultConfig_Base/builds/1/\n#   Create CreateTenant_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/CreateTenant_Base/builds/1/\n#   Create Utilities_DBClean job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DBClean/builds/1/\n#   Create Utilities_UpdateDB_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_UpdateDB_Base/builds/1/\n#   Create Utilities_VersionInfo job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_VersionInfo_Base/builds/1/\n#   Create Utilities_StagingProp job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_StagingProp_Base/builds/1/\n#   Create Utilities_DeployData job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/Utilities_DeployData_Base/builds/1/\n#   Create BuildCustomizationPackage_Base job build number\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/latest/\nRUN mkdir -p \"$JENKINS_HOME\"/jobs/BuildCustomizationPackage_Base/builds/1/\n#   Add Jenkins Plugin Reference\nCOPY ./plugins.txt /usr/share/jenkins/ref\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt\n#   Copy scirpt which used to detect the Vault\nCOPY ./vault.py /usr/local/bin\n#   Prime commerce-devops-utilites folder for utilities\nCOPY ./commerce-devops-utilities /commerce-devops-utilities\nRUN chmod -R 755 /commerce-devops-utilities\n","originalDockerfileUglifiedHash":"054b90cd5fb3d6ebc1dc05482a944bf8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8570eed18a5f5524f922712c62deb0d3bf1b7152.dockerfile"}