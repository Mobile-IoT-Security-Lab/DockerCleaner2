{"seed":3924911778,"processedDockerfileHash":"59b5a06e3b7025abe5b315df084d8328","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ###################################################################################################\n#   Builder image\n#   Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n#   Also used as the image in CI jobs so needs all dependencies\n#  ###################################################################################################\nFROM golang:1.11.5 AS builder\nRUN apt-get update \\\n && apt-get install --no-install-recommends git make wget gcc zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR /tmp\n#   Install docker\nENV DOCKER_CHANNEL=\"stable\"\nENV DOCKER_VERSION=\"18.09.1\"\nRUN wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz\n#   Install dep\nENV DEP_VERSION=\"0.5.0\"\nRUN wget https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -O /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep\n#   Install golangci-lint\nENV GOLANGCI_LINT_VERSION=\"1.16.0\"\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/v$GOLANGCI_LINT_VERSION/install.sh | sh -s -- -b $( go env GOPATH ;)/bin v$GOLANGCI_LINT_VERSION\n#   Install gometalinter\n#   Keep gometalinter to avoid CI failures during the linter migration.\n#   We can remove it after enough time has passed.\nENV GOMETALINTER_VERSION=\"2.0.12\"\nRUN curl -sLo- https://github.com/alecthomas/gometalinter/releases/download/v${GOMETALINTER_VERSION}/gometalinter-${GOMETALINTER_VERSION}-linux-amd64.tar.gz | tar -xzC \"$GOPATH/bin\" --exclude COPYING --exclude README.md --strip-components 1 -f- \\\n && ln -s $GOPATH/bin/gometalinter $GOPATH/bin/gometalinter.v2\n#  ###################################################################################################\n#   argoexec-base\n#   Used as the base for both the release and development version of argoexec\n#  ###################################################################################################\nFROM debian:9.6-slim AS argoexec-base\n#   NOTE: keep the version synced with https://storage.googleapis.com/kubernetes-release/release/stable.txt\nENV KUBECTL_VERSION=\"1.13.4\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl jq procps git tar mime-support -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && curl -L -o /usr/local/bin/kubectl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl \\\n && chmod +x /usr/local/bin/kubectl\nCOPY hack/ssh_known_hosts /etc/ssh/ssh_known_hosts\nCOPY --from=builder /usr/local/bin/docker /usr/local/bin/\n#  ###################################################################################################\n#   Argo Build stage which performs the actual build of Argo binaries\n#  ###################################################################################################\nFROM builder AS argo-build\n#   A dummy directory is created under $GOPATH/src/dummy so we are able to use dep\n#   to install all the packages of our dep lock file\nCOPY Gopkg.toml ${GOPATH}/src/dummy/Gopkg.toml\nCOPY Gopkg.lock ${GOPATH}/src/dummy/Gopkg.lock\nRUN cd ${GOPATH}/src/dummy \\\n && dep ensure -vendor-only \\\n && mv vendor/* ${GOPATH}/src/ \\\n && rmdir vendor\n#   Perform the build\nWORKDIR /go/src/github.com/argoproj/argo\nCOPY . .\nARG MAKE_TARGET=\"controller executor cli-linux-amd64\"\nRUN make $MAKE_TARGET\n#  ###################################################################################################\n#   argoexec\n#  ###################################################################################################\nFROM argoexec-base AS argoexec\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argoexec /usr/local/bin/\n#  ###################################################################################################\n#   workflow-controller\n#  ###################################################################################################\nFROM scratch AS workflow-controller\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/workflow-controller /bin/\nENTRYPOINT [\"workflow-controller\"]\n#  ###################################################################################################\n#   argocli\n#  ###################################################################################################\nFROM scratch AS argocli\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argo-linux-amd64 /bin/argo\nENTRYPOINT [\"argo\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ###################################################################################################\n#  Builder image\n#  Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n#  Also used as the image in CI jobs so needs all dependencies\n# ###################################################################################################\nFROM golang:1.11.5 AS builder\nRUN apt-get update \\\n && apt-get install git make wget gcc zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR /tmp\n#  Install docker\nENV DOCKER_CHANNEL=\"stable\"\nENV DOCKER_VERSION=\"18.09.1\"\nRUN wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz\n#  Install dep\nENV DEP_VERSION=\"0.5.0\"\nRUN wget https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -O /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep\n#  Install golangci-lint\nENV GOLANGCI_LINT_VERSION=\"1.16.0\"\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/v$GOLANGCI_LINT_VERSION/install.sh | sh -s -- -b $( go env GOPATH ;)/bin v$GOLANGCI_LINT_VERSION\n#  Install gometalinter\n#  Keep gometalinter to avoid CI failures during the linter migration.\n#  We can remove it after enough time has passed.\nENV GOMETALINTER_VERSION=\"2.0.12\"\nRUN curl -sLo- https://github.com/alecthomas/gometalinter/releases/download/v${GOMETALINTER_VERSION}/gometalinter-${GOMETALINTER_VERSION}-linux-amd64.tar.gz | tar -xzC \"$GOPATH/bin\" --exclude COPYING --exclude README.md --strip-components 1 -f- \\\n && ln -s $GOPATH/bin/gometalinter $GOPATH/bin/gometalinter.v2\n# ###################################################################################################\n#  argoexec-base\n#  Used as the base for both the release and development version of argoexec\n# ###################################################################################################\nFROM debian:9.6-slim AS argoexec-base\n#  NOTE: keep the version synced with https://storage.googleapis.com/kubernetes-release/release/stable.txt\nENV KUBECTL_VERSION=\"1.13.4\"\nRUN apt-get update \\\n && apt-get install curl jq procps git tar mime-support -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && curl -L -o /usr/local/bin/kubectl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl \\\n && chmod +x /usr/local/bin/kubectl\nCOPY hack/ssh_known_hosts /etc/ssh/ssh_known_hosts\nCOPY --from=builder /usr/local/bin/docker /usr/local/bin/\n# ###################################################################################################\n#  Argo Build stage which performs the actual build of Argo binaries\n# ###################################################################################################\nFROM builder AS argo-build\n#  A dummy directory is created under $GOPATH/src/dummy so we are able to use dep\n#  to install all the packages of our dep lock file\nCOPY Gopkg.toml ${GOPATH}/src/dummy/Gopkg.toml\nCOPY Gopkg.lock ${GOPATH}/src/dummy/Gopkg.lock\nRUN cd ${GOPATH}/src/dummy \\\n && dep ensure -vendor-only \\\n && mv vendor/* ${GOPATH}/src/ \\\n && rmdir vendor\n#  Perform the build\nWORKDIR /go/src/github.com/argoproj/argo\nCOPY . .\nARG MAKE_TARGET=\"controller executor cli-linux-amd64\"\nRUN make $MAKE_TARGET\n# ###################################################################################################\n#  argoexec\n# ###################################################################################################\nFROM argoexec-base AS argoexec\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argoexec /usr/local/bin/\n# ###################################################################################################\n#  workflow-controller\n# ###################################################################################################\nFROM scratch AS workflow-controller\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/workflow-controller /bin/\nENTRYPOINT [\"workflow-controller\"]\n# ###################################################################################################\n#  argocli\n# ###################################################################################################\nFROM scratch AS argocli\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argo-linux-amd64 /bin/argo\nENTRYPOINT [\"argo\"]\n","injectedSmells":[],"originalDockerfileHash":"143ff71e84bd58ce9e16dc58e9f166a2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ###################################################################################################\n#   Builder image\n#   Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image\n#   Also used as the image in CI jobs so needs all dependencies\n#  ###################################################################################################\nFROM golang:1.11.5 AS builder\nRUN apt-get update \\\n && apt-get install git make wget gcc zip -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nWORKDIR /tmp\n#   Install docker\nENV DOCKER_CHANNEL=\"stable\"\nENV DOCKER_VERSION=\"18.09.1\"\nRUN wget -O docker.tgz \"https://download.docker.com/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz\" \\\n && tar --extract --file docker.tgz --strip-components 1 --directory /usr/local/bin/ \\\n && rm docker.tgz\n#   Install dep\nENV DEP_VERSION=\"0.5.0\"\nRUN wget https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -O /usr/local/bin/dep \\\n && chmod +x /usr/local/bin/dep\n#   Install golangci-lint\nENV GOLANGCI_LINT_VERSION=\"1.16.0\"\nRUN curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/v$GOLANGCI_LINT_VERSION/install.sh | sh -s -- -b $( go env GOPATH ;)/bin v$GOLANGCI_LINT_VERSION\n#   Install gometalinter\n#   Keep gometalinter to avoid CI failures during the linter migration.\n#   We can remove it after enough time has passed.\nENV GOMETALINTER_VERSION=\"2.0.12\"\nRUN curl -sLo- https://github.com/alecthomas/gometalinter/releases/download/v${GOMETALINTER_VERSION}/gometalinter-${GOMETALINTER_VERSION}-linux-amd64.tar.gz | tar -xzC \"$GOPATH/bin\" --exclude COPYING --exclude README.md --strip-components 1 -f- \\\n && ln -s $GOPATH/bin/gometalinter $GOPATH/bin/gometalinter.v2\n#  ###################################################################################################\n#   argoexec-base\n#   Used as the base for both the release and development version of argoexec\n#  ###################################################################################################\nFROM debian:9.6-slim AS argoexec-base\n#   NOTE: keep the version synced with https://storage.googleapis.com/kubernetes-release/release/stable.txt\nENV KUBECTL_VERSION=\"1.13.4\"\nRUN apt-get update \\\n && apt-get install curl jq procps git tar mime-support -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && curl -L -o /usr/local/bin/kubectl -LO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl \\\n && chmod +x /usr/local/bin/kubectl\nCOPY hack/ssh_known_hosts /etc/ssh/ssh_known_hosts\nCOPY --from=builder /usr/local/bin/docker /usr/local/bin/\n#  ###################################################################################################\n#   Argo Build stage which performs the actual build of Argo binaries\n#  ###################################################################################################\nFROM builder AS argo-build\n#   A dummy directory is created under $GOPATH/src/dummy so we are able to use dep\n#   to install all the packages of our dep lock file\nCOPY Gopkg.toml ${GOPATH}/src/dummy/Gopkg.toml\nCOPY Gopkg.lock ${GOPATH}/src/dummy/Gopkg.lock\nRUN cd ${GOPATH}/src/dummy \\\n && dep ensure -vendor-only \\\n && mv vendor/* ${GOPATH}/src/ \\\n && rmdir vendor\n#   Perform the build\nWORKDIR /go/src/github.com/argoproj/argo\nCOPY . .\nARG MAKE_TARGET=\"controller executor cli-linux-amd64\"\nRUN make $MAKE_TARGET\n#  ###################################################################################################\n#   argoexec\n#  ###################################################################################################\nFROM argoexec-base AS argoexec\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argoexec /usr/local/bin/\n#  ###################################################################################################\n#   workflow-controller\n#  ###################################################################################################\nFROM scratch AS workflow-controller\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/workflow-controller /bin/\nENTRYPOINT [\"workflow-controller\"]\n#  ###################################################################################################\n#   argocli\n#  ###################################################################################################\nFROM scratch AS argocli\nCOPY --from=argo-build /go/src/github.com/argoproj/argo/dist/argo-linux-amd64 /bin/argo\nENTRYPOINT [\"argo\"]\n","originalDockerfileUglifiedHash":"bdc7606a8cd909abf5dc4966d6e76fb3","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/8aa6b550b492904179d4eb9fe68f8a1c420bfbd8.dockerfile"}