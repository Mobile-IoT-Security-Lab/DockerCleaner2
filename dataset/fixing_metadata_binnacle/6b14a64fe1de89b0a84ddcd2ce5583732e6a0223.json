{"seed":3087887,"processedDockerfileHash":"191e8171474b4238f05e16a1127f461d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-gem","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile is based on: https://docs.docker.com/examples/postgresql_service/\nFROM ubuntu:16.04\nMAINTAINER fredrik@averpil.com\n#   Add the PostgreSQL PGP key to verify their Debian packages.\n#   It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#   Add PostgreSQL's repository. It contains the most recent stable release\n#       of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n#   Install everything in one enormous RUN command\n#    There are some warnings (in red) that show up during the build. You can hide\n#    them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install --no-install-recommends python-software-properties=0.96.20.10 python-pip=8.1.1-2ubuntu0.6 software-properties-common=0.96.20.10 postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3 rubygems -y \\\n && gem install taskjuggler --version 3.7.2 \\\n && pip install pip==23.1 -U \\\n && pip install sqlalchemy==2.0.9 psycopg2==2.9.6 jinja2==3.1.2 alembic==1.10.3 mako==1.2.4 markupsafe==2.1.2 python-editor==1.0.4 nose==1.3.7 coverage==7.2.3\n#   Note: The official Debian and Ubuntu images automatically ``apt-get clean``\n#   after each ``apt-get``\n#   Run commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER postgres\nRUN /etc/init.d/postgresql start \\\n && psql -c \"CREATE DATABASE stalker_test;\" -U postgres \\\n && psql -c \"CREATE USER stalker_admin WITH PASSWORD 'stalker';\" -U postgres \\\n && /etc/init.d/postgresql stop\n#   Adjust PostgreSQL configuration so that remote connections to the\n#   database are possible.\n#   RUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\n#   RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#   Expose the PostgreSQL port\n#   EXPOSE 5432\n#   Add VOLUMEs to allow backup of config, logs and databases\n#   VOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nUSER root\n#   Create symlink to TaskJuggler\n#   RUN ln -s $(which tj3) /usr/local/bin/tj3\n#   Set working directory\nWORKDIR /workspace\n#   Embed wait-for-postgres.sh script into Dockerfile\nRUN echo '\\n\\nset -e\\n\\ncmd=\"$@\"\\ntimer=\"5\"\\n\\nuntil runuser -l postgres -c 'pg_isready' 2>/dev/null; do\\n >&2 echo \"Postgres is unavailable - sleeping for $timer seconds\"\\n sleep $timer\\ndone\\n\\n>&2 echo \"Postgres is up - executing command\"\\nexec $cmd\\n' >> /workspace/wait-for-postgres.sh\n#   Make script executable\nRUN chmod +x /workspace/wait-for-postgres.sh\n#   Execute this when running container\nENTRYPOINT cp -r /stalker /workspace \\\n && chmod -R -x /workspace/stalker \\\n && runuser -l postgres -c '/usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf & ' \\\n && ./wait-for-postgres.sh nosetests /workspace/stalker --verbosity=1 --cover-erase --with-coverage --cover-package=stalker \\\n && /etc/init.d/postgresql stop\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile is based on: https://docs.docker.com/examples/postgresql_service/\nFROM ubuntu:16.04\nMAINTAINER fredrik@averpil.com\n#  Add the PostgreSQL PGP key to verify their Debian packages.\n#  It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#  Add PostgreSQL's repository. It contains the most recent stable release\n#      of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n#  Install everything in one enormous RUN command\n#   There are some warnings (in red) that show up during the build. You can hide\n#   them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install python-software-properties python-pip software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3 rubygems -y \\\n && gem install taskjuggler \\\n && pip install pip -U \\\n && pip install sqlalchemy psycopg2 jinja2 alembic mako markupsafe python-editor nose coverage\n#  Note: The official Debian and Ubuntu images automatically ``apt-get clean``\n#  after each ``apt-get``\n#  Run commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER postgres\nRUN /etc/init.d/postgresql start \\\n && psql -c \"CREATE DATABASE stalker_test;\" -U postgres \\\n && psql -c \"CREATE USER stalker_admin WITH PASSWORD 'stalker';\" -U postgres \\\n && /etc/init.d/postgresql stop\n#  Adjust PostgreSQL configuration so that remote connections to the\n#  database are possible.\n#  RUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#  And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\n#  RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#  Expose the PostgreSQL port\n#  EXPOSE 5432\n#  Add VOLUMEs to allow backup of config, logs and databases\n#  VOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nUSER root\n#  Create symlink to TaskJuggler\n#  RUN ln -s $(which tj3) /usr/local/bin/tj3\n#  Set working directory\nWORKDIR /workspace\n#  Embed wait-for-postgres.sh script into Dockerfile\nRUN echo '\\n\\nset -e\\n\\ncmd=\"$@\"\\ntimer=\"5\"\\n\\nuntil runuser -l postgres -c 'pg_isready' 2>/dev/null; do\\n >&2 echo \"Postgres is unavailable - sleeping for $timer seconds\"\\n sleep $timer\\ndone\\n\\n>&2 echo \"Postgres is up - executing command\"\\nexec $cmd\\n' >> /workspace/wait-for-postgres.sh\n#  Make script executable\nRUN chmod +x /workspace/wait-for-postgres.sh\n#  Execute this when running container\nENTRYPOINT cp -r /stalker /workspace \\\n && chmod -R -x /workspace/stalker \\\n && runuser -l postgres -c '/usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf & ' \\\n && ./wait-for-postgres.sh nosetests /workspace/stalker --verbosity=1 --cover-erase --with-coverage --cover-package=stalker \\\n && /etc/init.d/postgresql stop\n","injectedSmells":[],"originalDockerfileHash":"ecb5fd06ad45682458ddd26f002f1e0f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile is based on: https://docs.docker.com/examples/postgresql_service/\nFROM ubuntu:16.04\nMAINTAINER fredrik@averpil.com\n#   Add the PostgreSQL PGP key to verify their Debian packages.\n#   It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n#   Add PostgreSQL's repository. It contains the most recent stable release\n#       of PostgreSQL, ``9.3``.\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n#   Install everything in one enormous RUN command\n#    There are some warnings (in red) that show up during the build. You can hide\n#    them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n && apt-get install python-software-properties python-pip software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3 postgresql-server-dev-9.3 rubygems -y \\\n && gem install taskjuggler \\\n && pip install pip -U \\\n && pip install sqlalchemy psycopg2 jinja2 alembic mako markupsafe python-editor nose coverage\n#   Note: The official Debian and Ubuntu images automatically ``apt-get clean``\n#   after each ``apt-get``\n#   Run commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``\nUSER postgres\nRUN /etc/init.d/postgresql start \\\n && psql -c \"CREATE DATABASE stalker_test;\" -U postgres \\\n && psql -c \"CREATE USER stalker_admin WITH PASSWORD 'stalker';\" -U postgres \\\n && /etc/init.d/postgresql stop\n#   Adjust PostgreSQL configuration so that remote connections to the\n#   database are possible.\n#   RUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n#   And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``\n#   RUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n#   Expose the PostgreSQL port\n#   EXPOSE 5432\n#   Add VOLUMEs to allow backup of config, logs and databases\n#   VOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\nUSER root\n#   Create symlink to TaskJuggler\n#   RUN ln -s $(which tj3) /usr/local/bin/tj3\n#   Set working directory\nWORKDIR /workspace\n#   Embed wait-for-postgres.sh script into Dockerfile\nRUN echo '\\n\\nset -e\\n\\ncmd=\"$@\"\\ntimer=\"5\"\\n\\nuntil runuser -l postgres -c 'pg_isready' 2>/dev/null; do\\n >&2 echo \"Postgres is unavailable - sleeping for $timer seconds\"\\n sleep $timer\\ndone\\n\\n>&2 echo \"Postgres is up - executing command\"\\nexec $cmd\\n' >> /workspace/wait-for-postgres.sh\n#   Make script executable\nRUN chmod +x /workspace/wait-for-postgres.sh\n#   Execute this when running container\nENTRYPOINT cp -r /stalker /workspace \\\n && chmod -R -x /workspace/stalker \\\n && runuser -l postgres -c '/usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf & ' \\\n && ./wait-for-postgres.sh nosetests /workspace/stalker --verbosity=1 --cover-erase --with-coverage --cover-package=stalker \\\n && /etc/init.d/postgresql stop\n","originalDockerfileUglifiedHash":"fa6a00178a18d0e4ba0735c538bb8552","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6b14a64fe1de89b0a84ddcd2ce5583732e6a0223.dockerfile"}