{"seed":458478578,"processedDockerfileHash":"890f841bc8f44a4f240be863805ee68b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim:set ft=dockerfile:\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\nLABEL maintainer=\"support@strapdata.com\"\nLABEL description=\"Elassandra docker image\"\n#   explicitly set user/group IDs\nRUN groupadd -r cassandra --gid=999 \\\n && useradd -r -g cassandra --uid=999 cassandra\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends libjemalloc1 procps=2:4.0.3-1ubuntu1 iproute2=6.1.0-1ubuntu2 curl=7.88.1-7ubuntu1 python python-pip python-setuptools jq=1.6-2.1ubuntu3 -y ; pip install pip==23.1 yq==3.2.1 -U ; if ! command -v gpg > /dev/null; then apt-get install --no-install-recommends dirmngr=2.2.40-1ubuntu2 gnupg=2.2.40-1ubuntu2 -y ; fi ; rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates=20230311 wget=1.21.3-1ubuntu1 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   https://wiki.apache.org/cassandra/DebianPackaging#Adding_Repository_Keys\nENV GPG_KEYS=\"514A2AD631A57A16DD0047EC749D6EEC0353B12C  A26E528B271F19B9E5D8E19EA278B781FE4B2BDA\"\n#  RUN set -ex; \\\n#  \texport GNUPGHOME=\"$(mktemp -d)\"; \\\n#  \tfor key in $GPG_KEYS; do \\\n#  \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n#  \tdone; \\\n#  \tgpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \\\n#  \tcommand -v gpgconf && gpgconf --kill all || :; \\\n#  \trm -rf \"$GNUPGHOME\"; \\\n#  \tapt-key list\n#   build-time arguments\nARG ELASSANDRA_VERSION\nENV ELASSANDRA_VERSION=\"${ELASSANDRA_VERSION}\"\n#   optional sha1 of the commit\nARG ELASSANDRA_COMMIT\nENV ELASSANDRA_COMMIT=\"${ELASSANDRA_COMMIT}\"\n#   location of the elassandra package on the building machine\nARG ELASSANDRA_PACKAGE\n#   copy the elassandra package into the image\nCOPY ${ELASSANDRA_PACKAGE} /elassandra-${ELASSANDRA_VERSION}.deb\nRUN set -ex ; mkdir -p /usr/share/man/man1/ ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (*) savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends wget=1.21.3-1ubuntu1 ca-certificates=20230311 dpkg-dev=1.21.21ubuntu1 -y ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; tempDir=\"$( mktemp -d ;)\" ; cp /elassandra-${ELASSANDRA_VERSION}.deb $tempDir/ ; ls -lAFh \"$tempDir\" ; (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) ; grep '^Package: ' \"$tempDir/Packages\" ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install --no-install-recommends elassandra=\"$ELASSANDRA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; rm /elassandra-${ELASSANDRA_VERSION}.deb ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\nENV CASSANDRA_CONFIG=\"/etc/cassandra\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (ppc64el) if grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\" ; then grep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\" ;sed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\" ;grep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\" ; elif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; then sed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ;grep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; fi ;; esac ; sed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\"\n#   copy readiness probe script for kubernetes\nCOPY ready-probe.sh /\n#   Add custom logback.xml including variables.\nCOPY logback.xml $CASSANDRA_CONFIG/\n#   Add default JMX password file\nCOPY jmxremote.password $CASSANDRA_CONFIG/\n#   Can't use COPY --chown here because it is not supported on old docker versions\nRUN chown cassandra:cassandra ready-probe.sh $CASSANDRA_CONFIG/logback.xml $CASSANDRA_CONFIG/jmxremote.password \\\n && chmod 0400 $CASSANDRA_CONFIG/jmxremote.password\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   create the entrypoint init.d directory\nRUN mkdir -p /docker-entrypoint-init.d \\\n && chown cassandra:cassandra /docker-entrypoint-init.d\nVOLUME /var/lib/cassandra\n#   elassandra installation directories\nENV CASSANDRA_HOME=\"/usr/share/cassandra\"\nENV CASSANDRA_CONF=\"/etc/cassandra\"\nENV CASSANDRA_LOGDIR=\"/var/log/cassandra\"\nENV CASSANDRA_DATA=\"/var/lib/cassandra\"\n#   docker-entrypoint.sh defines some default env vars when starting the container.\n#   But those vars are not available from other entrypoint, such as ready-probe.sh, or 'docker exec'.\n#   A workaround is to define important defaults right in the Dockerfile\nENV CASSANDRA_DAEMON=\"org.apache.cassandra.service.ElassandraDaemon\"\n#   7000: intra-node communication\n#   7001: TLS intra-node communication\n#   7199: JMX\n#   9042: CQL\n#   9142 : encrypted CQL\n#   9160: thrift service\n#   9200: elassandra HTTP\n#   9300: elasticsearch transport\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 9042/tcp 9142/tcp 9160/tcp 9200/tcp 9300/tcp\nCMD [\"cassandra\", \"-f\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim:set ft=dockerfile:\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\nLABEL maintainer=\"support@strapdata.com\"\nLABEL description=\"Elassandra docker image\"\n#  explicitly set user/group IDs\nRUN groupadd -r cassandra --gid=999 \\\n && useradd -r -g cassandra --uid=999 cassandra\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends libjemalloc1 procps iproute2 curl python python-pip python-setuptools jq -y ; pip install pip yq -U ; if ! command -v gpg > /dev/null; then apt-get install --no-install-recommends dirmngr gnupg -y ; fi ; rm -rf /var/lib/apt/lists/*\n#  grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#  https://wiki.apache.org/cassandra/DebianPackaging#Adding_Repository_Keys\nENV GPG_KEYS=\"514A2AD631A57A16DD0047EC749D6EEC0353B12C  A26E528B271F19B9E5D8E19EA278B781FE4B2BDA\"\n# RUN set -ex; \\\n# \texport GNUPGHOME=\"$(mktemp -d)\"; \\\n# \tfor key in $GPG_KEYS; do \\\n# \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n# \tdone; \\\n# \tgpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \\\n# \tcommand -v gpgconf && gpgconf --kill all || :; \\\n# \trm -rf \"$GNUPGHOME\"; \\\n# \tapt-key list\n#  build-time arguments\nARG ELASSANDRA_VERSION\nENV ELASSANDRA_VERSION=\"${ELASSANDRA_VERSION}\"\n#  optional sha1 of the commit\nARG ELASSANDRA_COMMIT\nENV ELASSANDRA_COMMIT=\"${ELASSANDRA_COMMIT}\"\n#  location of the elassandra package on the building machine\nARG ELASSANDRA_PACKAGE\n#  copy the elassandra package into the image\nCOPY ${ELASSANDRA_PACKAGE} /elassandra-${ELASSANDRA_VERSION}.deb\nRUN set -ex ; mkdir -p /usr/share/man/man1/ ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (*) savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends wget ca-certificates dpkg-dev -y ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; tempDir=\"$( mktemp -d ;)\" ; cp /elassandra-${ELASSANDRA_VERSION}.deb $tempDir/ ; ls -lAFh \"$tempDir\" ; (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) ; grep '^Package: ' \"$tempDir/Packages\" ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install elassandra=\"$ELASSANDRA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; rm /elassandra-${ELASSANDRA_VERSION}.deb ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\nENV CASSANDRA_CONFIG=\"/etc/cassandra\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (ppc64el) if grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\" ; then grep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\" ;sed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\" ;grep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\" ; elif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; then sed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ;grep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; fi ;; esac ; sed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\"\n#  copy readiness probe script for kubernetes\nCOPY ready-probe.sh /\n#  Add custom logback.xml including variables.\nCOPY logback.xml $CASSANDRA_CONFIG/\n#  Add default JMX password file\nCOPY jmxremote.password $CASSANDRA_CONFIG/\n#  Can't use COPY --chown here because it is not supported on old docker versions\nRUN chown cassandra:cassandra ready-probe.sh $CASSANDRA_CONFIG/logback.xml $CASSANDRA_CONFIG/jmxremote.password \\\n && chmod 0400 $CASSANDRA_CONFIG/jmxremote.password\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  create the entrypoint init.d directory\nRUN mkdir -p /docker-entrypoint-init.d \\\n && chown cassandra:cassandra /docker-entrypoint-init.d\nVOLUME /var/lib/cassandra\n#  elassandra installation directories\nENV CASSANDRA_HOME=\"/usr/share/cassandra\"\nENV CASSANDRA_CONF=\"/etc/cassandra\"\nENV CASSANDRA_LOGDIR=\"/var/log/cassandra\"\nENV CASSANDRA_DATA=\"/var/lib/cassandra\"\n#  docker-entrypoint.sh defines some default env vars when starting the container.\n#  But those vars are not available from other entrypoint, such as ready-probe.sh, or 'docker exec'.\n#  A workaround is to define important defaults right in the Dockerfile\nENV CASSANDRA_DAEMON=\"org.apache.cassandra.service.ElassandraDaemon\"\n#  7000: intra-node communication\n#  7001: TLS intra-node communication\n#  7199: JMX\n#  9042: CQL\n#  9142 : encrypted CQL\n#  9160: thrift service\n#  9200: elassandra HTTP\n#  9300: elasticsearch transport\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 9042/tcp 9142/tcp 9160/tcp 9200/tcp 9300/tcp\nCMD [\"cassandra\", \"-f\"]\n","injectedSmells":[],"originalDockerfileHash":"6f917721c58b19333fcb2ff51b53d3f2","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim:set ft=dockerfile:\nARG BASE_IMAGE\nFROM ${BASE_IMAGE}\nLABEL maintainer=\"support@strapdata.com\"\nLABEL description=\"Elassandra docker image\"\n#   explicitly set user/group IDs\nRUN groupadd -r cassandra --gid=999 \\\n && useradd -r -g cassandra --uid=999 cassandra\nRUN set -ex ; apt-get update ; apt-get install --no-install-recommends libjemalloc1 procps iproute2 curl python python-pip python-setuptools jq -y ; pip install pip yq -U ; if ! command -v gpg > /dev/null; then apt-get install --no-install-recommends dirmngr gnupg -y ; fi ; rm -rf /var/lib/apt/lists/*\n#   grab gosu for easy step-down from root\nENV GOSU_VERSION=\"1.10\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --no-tty --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --no-tty --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && { command -v gpgconf \\\n && gpgconf --kill all || : ; } \\\n && rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   https://wiki.apache.org/cassandra/DebianPackaging#Adding_Repository_Keys\nENV GPG_KEYS=\"514A2AD631A57A16DD0047EC749D6EEC0353B12C  A26E528B271F19B9E5D8E19EA278B781FE4B2BDA\"\n#  RUN set -ex; \\\n#  \texport GNUPGHOME=\"$(mktemp -d)\"; \\\n#  \tfor key in $GPG_KEYS; do \\\n#  \t\tgpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$key\"; \\\n#  \tdone; \\\n#  \tgpg --export $GPG_KEYS > /etc/apt/trusted.gpg.d/cassandra.gpg; \\\n#  \tcommand -v gpgconf && gpgconf --kill all || :; \\\n#  \trm -rf \"$GNUPGHOME\"; \\\n#  \tapt-key list\n#   build-time arguments\nARG ELASSANDRA_VERSION\nENV ELASSANDRA_VERSION=\"${ELASSANDRA_VERSION}\"\n#   optional sha1 of the commit\nARG ELASSANDRA_COMMIT\nENV ELASSANDRA_COMMIT=\"${ELASSANDRA_COMMIT}\"\n#   location of the elassandra package on the building machine\nARG ELASSANDRA_PACKAGE\n#   copy the elassandra package into the image\nCOPY ${ELASSANDRA_PACKAGE} /elassandra-${ELASSANDRA_VERSION}.deb\nRUN set -ex ; mkdir -p /usr/share/man/man1/ ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (*) savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends wget ca-certificates dpkg-dev -y ; apt-mark showmanual | xargs apt-mark auto > /dev/null; apt-mark manual $savedAptMark ; tempDir=\"$( mktemp -d ;)\" ; cp /elassandra-${ELASSANDRA_VERSION}.deb $tempDir/ ; ls -lAFh \"$tempDir\" ; (cd \"$tempDir\" \\\n && dpkg-scanpackages . > Packages) ; grep '^Package: ' \"$tempDir/Packages\" ; echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; apt-get -o Acquire::GzipIndexes=false update ;; esac ; apt-get install elassandra=\"$ELASSANDRA_VERSION\" -y ; rm -rf /var/lib/apt/lists/* ; rm /elassandra-${ELASSANDRA_VERSION}.deb ; if [ -n \"$tempDir\" ] ; then apt-get purge -y --auto-remove ;rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list ; fi\nENV CASSANDRA_CONFIG=\"/etc/cassandra\"\nRUN set -ex ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"$dpkgArch\" in (ppc64el) if grep -q -- '^-Xss' \"$CASSANDRA_CONFIG/jvm.options\" ; then grep -- '^-Xss256k$' \"$CASSANDRA_CONFIG/jvm.options\" ;sed -ri 's/^-Xss256k$/-Xss512k/' \"$CASSANDRA_CONFIG/jvm.options\" ;grep -- '^-Xss512k$' \"$CASSANDRA_CONFIG/jvm.options\" ; elif grep -q -- '-Xss256k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; then sed -ri 's/-Xss256k/-Xss512k/g' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ;grep -- '-Xss512k' \"$CASSANDRA_CONFIG/cassandra-env.sh\" ; fi ;; esac ; sed -ri 's/^(JVM_PATCH_VERSION)=.*/\\1=25/' \"$CASSANDRA_CONFIG/cassandra-env.sh\"\n#   copy readiness probe script for kubernetes\nCOPY ready-probe.sh /\n#   Add custom logback.xml including variables.\nCOPY logback.xml $CASSANDRA_CONFIG/\n#   Add default JMX password file\nCOPY jmxremote.password $CASSANDRA_CONFIG/\n#   Can't use COPY --chown here because it is not supported on old docker versions\nRUN chown cassandra:cassandra ready-probe.sh $CASSANDRA_CONFIG/logback.xml $CASSANDRA_CONFIG/jmxremote.password \\\n && chmod 0400 $CASSANDRA_CONFIG/jmxremote.password\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   create the entrypoint init.d directory\nRUN mkdir -p /docker-entrypoint-init.d \\\n && chown cassandra:cassandra /docker-entrypoint-init.d\nVOLUME /var/lib/cassandra\n#   elassandra installation directories\nENV CASSANDRA_HOME=\"/usr/share/cassandra\"\nENV CASSANDRA_CONF=\"/etc/cassandra\"\nENV CASSANDRA_LOGDIR=\"/var/log/cassandra\"\nENV CASSANDRA_DATA=\"/var/lib/cassandra\"\n#   docker-entrypoint.sh defines some default env vars when starting the container.\n#   But those vars are not available from other entrypoint, such as ready-probe.sh, or 'docker exec'.\n#   A workaround is to define important defaults right in the Dockerfile\nENV CASSANDRA_DAEMON=\"org.apache.cassandra.service.ElassandraDaemon\"\n#   7000: intra-node communication\n#   7001: TLS intra-node communication\n#   7199: JMX\n#   9042: CQL\n#   9142 : encrypted CQL\n#   9160: thrift service\n#   9200: elassandra HTTP\n#   9300: elasticsearch transport\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 9042/tcp 9142/tcp 9160/tcp 9200/tcp 9300/tcp\nCMD [\"cassandra\", \"-f\"]\n","originalDockerfileUglifiedHash":"abdf5cb584dbe1160b0804bd517626bb","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/5b94022b031b97c86bdad279dd3319bc5a239a14.dockerfile"}