{"seed":2815458766,"processedDockerfileHash":"629d0058860c8f7c89a48a17de1c6c23","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential=12.1ubuntu2 g++=4:5.3.1-1ubuntu1 make=4.1-6 cmake=3.5.1-1ubuntu3 curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 psmisc=22.21-2.1ubuntu0.1 libgoogle-perftools-dev=2.4-0ubuntu5.16.04.1 libsnappy-dev=1.1.3-2 libleveldb-dev=1.18-5 -y )\n#   Install golang and go tools\nRUN curl -L https://storage.googleapis.com/golang/go1.9.2.linux-amd64.tar.gz | tar xzv -C /usr/local\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/go\"\nENV PATH=\"$PATH:$GOROOT/bin:$GOPATH/bin\"\n#   Install Google Test framework\nRUN git clone https://github.com/google/googletest.git \\\n && cd googletest \\\n && cmake -DBUILD_GMOCK=OFF -DBUILD_GTEST=ON . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf googletest\n#   Install Google Benchmark framework\nRUN git clone https://github.com/google/benchmark.git \\\n && cd benchmark \\\n && cmake -DBENCHMARK_ENABLE_TESTING=OFF cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_LTO=true . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf benchmark\nRUN go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/onsi/gomega \\\n && go get github.com/cheggaaa/deepcopy\nENV LANG=\"en_US.UTF-8\"\nRUN go get github.com/buaazp/fasthttprouter \\\n && go get github.com/valyala/fasthttp\nRUN git clone https://github.com/wg/wrk.git \\\n && cd wrk \\\n && make -j8 \\\n && cp wrk /usr/bin \\\n && cd .. \\\n && rm -rf wrk\n#   Install Benchmark's golang dependencies\n#  ########################################\nRUN go get -insecure github.com/restream/reindexer \\\n && go get github.com/tarantool/go-tarantool \\\n && go get github.com/yunge/sphinx \\\n && go get gopkg.in/mgo.v2 \\\n && go get gopkg.in/olivere/elastic.v5 \\\n && go get github.com/go-redis/redis \\\n && go get github.com/go-sql-driver/mysql \\\n && go get github.com/jmoiron/sqlx \\\n && go get github.com/mailru/easyjson/...\nRUN go get github.com/boltdb/bolt \\\n && go get github.com/kshvakov/clickhouse \\\n && go get -tags fts5 github.com/mattn/go-sqlite3 \\\n && go get github.com/labstack/echo\n#   Build Reindexer\nRUN make -C /go/src/github.com/restream/reindexer/cpp_src -j8 EXTRA_CFLAGS=-DNDEBUG\n#   Install elastic search\n#  #######################\nRUN curl https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - \\\n && (apt-get update ;apt-get install --no-install-recommends apt-transport-https=1.2.35 -y ) \\\n && echo \"deb https://artifacts.elastic.co/packages/6.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-6.x.list \\\n && apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends elasticsearch=1.7.3+dfsg-3 openjdk-8-jre-headless=8u292-b10-0ubuntu1~16.04.1 -y )\n#   Install Redis\n#  ##############\nRUN (apt-get update ;apt-get install --no-install-recommends redis-server=2:3.0.6-1ubuntu0.4 -y )\n#   Install MongoDB\n#  ################\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 \\\n && echo \"deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.6.list \\\n && apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends mongodb-org-server -y )\n#   Install MySQL\n#  ##############\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-server\n#   Install Tarantool\n#  ##################\nRUN curl http://download.tarantool.org/tarantool/1.7/gpgkey | apt-key add - \\\n && echo \"deb http://download.tarantool.org/tarantool/1.7/ubuntu/ xenial main\" > /etc/apt/sources.list.d/tarantool_1_7.list \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends tarantool=1.6.7.588.g76bbd9c-1build1 -y )\nRUN echo \"space = box.space.items\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"if not space then\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space = box.schema.create_space('items')\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('primary', { type = 'hash', parts = {1, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name', { type = 'tree', unique = false, parts = {2, 'string'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('year', { type = 'tree', unique = false, parts = {3, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name_year', { type = 'tree', unique = false, parts = {{2, 'string'},{3,'int'}} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('description', { type = 'tree', unique = false, parts = {4, 'string'}} )\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"end\" >> /etc/tarantool/instances.enabled/example.lua\n#   Install Sphinx search\n#  ######################\nRUN (apt-get update ;apt-get install --no-install-recommends sphinxsearch=2.2.9-1build1 -y )\nRUN echo \"source src1\" > /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" type = mysql\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_host = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_user = root\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_pass =\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_db = test\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_port = 3306\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_query = SELECT id, description FROM items\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"index test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" source = src1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" path = /var/lib/sphinxsearch/data/test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" docinfo = extern\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" min_infix_len = 2\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" morphology = libstemmer_en,libstemmer_ru\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"searchd\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" listen = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" read_timeout = 5\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" max_children = 30\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" pid_file = /var/run/sphinxsearch/searchd.pid\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" seamless_rotate = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" preopen_indexes = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" unlink_old = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" binlog_path = /var/lib/sphinxsearch/\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" persistent_connections_limit = 20\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf\n#   Install Clickhouse\n#  ###################\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && echo \"deb http://repo.yandex.ru/clickhouse/trusty stable main\" > /etc/apt/sources.list.d/clickhouse.list \\\n && echo '#!/bin/sh' > /bin/systemctl \\\n && chmod +x /bin/systemctl \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends clickhouse-client clickhouse-server-common -y )\nRUN sed -i_ \"s/<listen_host>::1<\\/listen_host>//\" /etc/clickhouse-server/config.xml\n#   Install arangoDB \nRUN curl -L https://download.arangodb.com/arangodb33/xUbuntu_16.04/Release.key | apt-key add - \\\n && echo 'deb https://download.arangodb.com/arangodb33/xUbuntu_16.04/ /' | tee /etc/apt/sources.list.d/arangodb.list \\\n && : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y arangodb3=3.3.3\nRUN go get github.com/arangodb/go-driver\n#   Install rethink DB\nRUN echo \"deb http://download.rethinkdb.com/apt xenial main\" | tee /etc/apt/sources.list.d/rethinkdb.list \\\n && curl -L https://download.rethinkdb.com/apt/pubkey.gpg | apt-key add - \\\n && apt-get update -y \\\n && (apt-get update ;apt-get install --no-install-recommends rethinkdb -y )\nRUN cp /etc/rethinkdb/default.conf.sample /etc/rethinkdb/instances.d/instance1.conf\nRUN go get gopkg.in/gorethink/gorethink.v4\n#   Create entrypoint\n#  ##################\nRUN echo \"#!/bin/sh\" > /entrypoint.sh \\\n && echo \"/etc/init.d/elasticsearch start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/redis-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/mysql start\" >> /entrypoint.sh \\\n && echo \"echo 'create database test CHARACTER SET utf8 ' | mysql -h127.0.0.1 -P3306 -uroot\" >> /entrypoint.sh \\\n && echo \"mongod --config /etc/mongod.conf --fork\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/tarantool start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/clickhouse-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/rethinkdb start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/arangodb3 start &\" >> /entrypoint.sh \\\n && echo \"exec \\\"$@\\\"\" >> /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install build-essential g++ make cmake curl git psmisc libgoogle-perftools-dev libsnappy-dev libleveldb-dev -y\n#  Install golang and go tools\nRUN curl -L https://storage.googleapis.com/golang/go1.9.2.linux-amd64.tar.gz | tar xzv -C /usr/local\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/go\"\nENV PATH=\"$PATH:$GOROOT/bin:$GOPATH/bin\"\n#  Install Google Test framework\nRUN git clone https://github.com/google/googletest.git \\\n && cd googletest \\\n && cmake -DBUILD_GMOCK=OFF -DBUILD_GTEST=ON . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf googletest\n#  Install Google Benchmark framework\nRUN git clone https://github.com/google/benchmark.git \\\n && cd benchmark \\\n && cmake -DBENCHMARK_ENABLE_TESTING=OFF cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_LTO=true . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf benchmark\nRUN go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/onsi/gomega \\\n && go get github.com/cheggaaa/deepcopy\nENV LANG=\"en_US.UTF-8\"\nRUN go get github.com/buaazp/fasthttprouter \\\n && go get github.com/valyala/fasthttp\nRUN git clone https://github.com/wg/wrk.git \\\n && cd wrk \\\n && make -j8 \\\n && cp wrk /usr/bin \\\n && cd .. \\\n && rm -rf wrk\n#  Install Benchmark's golang dependencies\n# ########################################\nRUN go get -insecure github.com/restream/reindexer \\\n && go get github.com/tarantool/go-tarantool \\\n && go get github.com/yunge/sphinx \\\n && go get gopkg.in/mgo.v2 \\\n && go get gopkg.in/olivere/elastic.v5 \\\n && go get github.com/go-redis/redis \\\n && go get github.com/go-sql-driver/mysql \\\n && go get github.com/jmoiron/sqlx \\\n && go get github.com/mailru/easyjson/...\nRUN go get github.com/boltdb/bolt \\\n && go get github.com/kshvakov/clickhouse \\\n && go get -tags fts5 github.com/mattn/go-sqlite3 \\\n && go get github.com/labstack/echo\n#  Build Reindexer\nRUN make -C /go/src/github.com/restream/reindexer/cpp_src -j8 EXTRA_CFLAGS=-DNDEBUG\n#  Install elastic search\n# #######################\nRUN curl https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - \\\n && apt-get install apt-transport-https -y \\\n && echo \"deb https://artifacts.elastic.co/packages/6.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-6.x.list \\\n && apt-get update -y \\\n && apt-get install elasticsearch openjdk-8-jre-headless -y\n#  Install Redis\n# ##############\nRUN apt-get install redis-server -y\n#  Install MongoDB\n# ################\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 \\\n && echo \"deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.6.list \\\n && apt-get update -y \\\n && apt-get install mongodb-org-server -y\n#  Install MySQL\n# ##############\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-server\n#  Install Tarantool\n# ##################\nRUN curl http://download.tarantool.org/tarantool/1.7/gpgkey | apt-key add - \\\n && echo \"deb http://download.tarantool.org/tarantool/1.7/ubuntu/ xenial main\" > /etc/apt/sources.list.d/tarantool_1_7.list \\\n && apt-get update \\\n && apt-get install tarantool -y\nRUN echo \"space = box.space.items\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"if not space then\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space = box.schema.create_space('items')\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('primary', { type = 'hash', parts = {1, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name', { type = 'tree', unique = false, parts = {2, 'string'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('year', { type = 'tree', unique = false, parts = {3, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name_year', { type = 'tree', unique = false, parts = {{2, 'string'},{3,'int'}} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('description', { type = 'tree', unique = false, parts = {4, 'string'}} )\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"end\" >> /etc/tarantool/instances.enabled/example.lua\n#  Install Sphinx search\n# ######################\nRUN apt-get install sphinxsearch -y\nRUN echo \"source src1\" > /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" type = mysql\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_host = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_user = root\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_pass =\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_db = test\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_port = 3306\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_query = SELECT id, description FROM items\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"index test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" source = src1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" path = /var/lib/sphinxsearch/data/test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" docinfo = extern\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" min_infix_len = 2\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" morphology = libstemmer_en,libstemmer_ru\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"searchd\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" listen = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" read_timeout = 5\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" max_children = 30\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" pid_file = /var/run/sphinxsearch/searchd.pid\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" seamless_rotate = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" preopen_indexes = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" unlink_old = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" binlog_path = /var/lib/sphinxsearch/\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" persistent_connections_limit = 20\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf\n#  Install Clickhouse\n# ###################\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && echo \"deb http://repo.yandex.ru/clickhouse/trusty stable main\" > /etc/apt/sources.list.d/clickhouse.list \\\n && echo '#!/bin/sh' > /bin/systemctl \\\n && chmod +x /bin/systemctl \\\n && apt-get update \\\n && apt-get install clickhouse-client clickhouse-server-common -y\nRUN sed -i_ \"s/<listen_host>::1<\\/listen_host>//\" /etc/clickhouse-server/config.xml\n#  Install arangoDB \nRUN curl -L https://download.arangodb.com/arangodb33/xUbuntu_16.04/Release.key | apt-key add - \\\n && echo 'deb https://download.arangodb.com/arangodb33/xUbuntu_16.04/ /' | tee /etc/apt/sources.list.d/arangodb.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y arangodb3=3.3.3\nRUN go get github.com/arangodb/go-driver\n#  Install rethink DB\nRUN echo \"deb http://download.rethinkdb.com/apt xenial main\" | tee /etc/apt/sources.list.d/rethinkdb.list \\\n && curl -L https://download.rethinkdb.com/apt/pubkey.gpg | apt-key add - \\\n && apt-get update -y \\\n && apt-get install rethinkdb -y\nRUN cp /etc/rethinkdb/default.conf.sample /etc/rethinkdb/instances.d/instance1.conf\nRUN go get gopkg.in/gorethink/gorethink.v4\n#  Create entrypoint\n# ##################\nRUN echo \"#!/bin/sh\" > /entrypoint.sh \\\n && echo \"/etc/init.d/elasticsearch start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/redis-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/mysql start\" >> /entrypoint.sh \\\n && echo \"echo 'create database test CHARACTER SET utf8 ' | mysql -h127.0.0.1 -P3306 -uroot\" >> /entrypoint.sh \\\n && echo \"mongod --config /etc/mongod.conf --fork\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/tarantool start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/clickhouse-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/rethinkdb start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/arangodb3 start &\" >> /entrypoint.sh \\\n && echo \"exec \\\"$@\\\"\" >> /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"a6b1feb0d469ae489db93f0fa7d07dce","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nRUN apt-get update \\\n && apt-get install build-essential g++ make cmake curl git psmisc libgoogle-perftools-dev libsnappy-dev libleveldb-dev -y\n#   Install golang and go tools\nRUN curl -L https://storage.googleapis.com/golang/go1.9.2.linux-amd64.tar.gz | tar xzv -C /usr/local\nENV GOROOT=\"/usr/local/go\"\nENV GOPATH=\"/go\"\nENV PATH=\"$PATH:$GOROOT/bin:$GOPATH/bin\"\n#   Install Google Test framework\nRUN git clone https://github.com/google/googletest.git \\\n && cd googletest \\\n && cmake -DBUILD_GMOCK=OFF -DBUILD_GTEST=ON . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf googletest\n#   Install Google Benchmark framework\nRUN git clone https://github.com/google/benchmark.git \\\n && cd benchmark \\\n && cmake -DBENCHMARK_ENABLE_TESTING=OFF cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_LTO=true . \\\n && make -j4 \\\n && make install \\\n && cd .. \\\n && rm -rf benchmark\nRUN go get github.com/onsi/ginkgo/ginkgo \\\n && go get github.com/onsi/gomega \\\n && go get github.com/cheggaaa/deepcopy\nENV LANG=\"en_US.UTF-8\"\nRUN go get github.com/buaazp/fasthttprouter \\\n && go get github.com/valyala/fasthttp\nRUN git clone https://github.com/wg/wrk.git \\\n && cd wrk \\\n && make -j8 \\\n && cp wrk /usr/bin \\\n && cd .. \\\n && rm -rf wrk\n#   Install Benchmark's golang dependencies\n#  ########################################\nRUN go get -insecure github.com/restream/reindexer \\\n && go get github.com/tarantool/go-tarantool \\\n && go get github.com/yunge/sphinx \\\n && go get gopkg.in/mgo.v2 \\\n && go get gopkg.in/olivere/elastic.v5 \\\n && go get github.com/go-redis/redis \\\n && go get github.com/go-sql-driver/mysql \\\n && go get github.com/jmoiron/sqlx \\\n && go get github.com/mailru/easyjson/...\nRUN go get github.com/boltdb/bolt \\\n && go get github.com/kshvakov/clickhouse \\\n && go get -tags fts5 github.com/mattn/go-sqlite3 \\\n && go get github.com/labstack/echo\n#   Build Reindexer\nRUN make -C /go/src/github.com/restream/reindexer/cpp_src -j8 EXTRA_CFLAGS=-DNDEBUG\n#   Install elastic search\n#  #######################\nRUN curl https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - \\\n && apt-get install apt-transport-https -y \\\n && echo \"deb https://artifacts.elastic.co/packages/6.x/apt stable main\" | tee -a /etc/apt/sources.list.d/elastic-6.x.list \\\n && apt-get update -y \\\n && apt-get install elasticsearch openjdk-8-jre-headless -y\n#   Install Redis\n#  ##############\nRUN apt-get install redis-server -y\n#   Install MongoDB\n#  ################\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 \\\n && echo \"deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-3.6.list \\\n && apt-get update -y \\\n && apt-get install mongodb-org-server -y\n#   Install MySQL\n#  ##############\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install mysql-server\n#   Install Tarantool\n#  ##################\nRUN curl http://download.tarantool.org/tarantool/1.7/gpgkey | apt-key add - \\\n && echo \"deb http://download.tarantool.org/tarantool/1.7/ubuntu/ xenial main\" > /etc/apt/sources.list.d/tarantool_1_7.list \\\n && apt-get update \\\n && apt-get install tarantool -y\nRUN echo \"space = box.space.items\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"if not space then\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space = box.schema.create_space('items')\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('primary', { type = 'hash', parts = {1, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name', { type = 'tree', unique = false, parts = {2, 'string'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('year', { type = 'tree', unique = false, parts = {3, 'int'} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('name_year', { type = 'tree', unique = false, parts = {{2, 'string'},{3,'int'}} })\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \" space:create_index('description', { type = 'tree', unique = false, parts = {4, 'string'}} )\" >> /etc/tarantool/instances.enabled/example.lua \\\n && echo \"end\" >> /etc/tarantool/instances.enabled/example.lua\n#   Install Sphinx search\n#  ######################\nRUN apt-get install sphinxsearch -y\nRUN echo \"source src1\" > /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" type = mysql\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_host = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_user = root\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_pass =\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_db = test\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_port = 3306\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" sql_query = SELECT id, description FROM items\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"index test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" source = src1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" path = /var/lib/sphinxsearch/data/test1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" docinfo = extern\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" min_infix_len = 2\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" morphology = libstemmer_en,libstemmer_ru\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"searchd\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"{\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" listen = localhost\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" read_timeout = 5\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" max_children = 30\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" pid_file = /var/run/sphinxsearch/searchd.pid\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" seamless_rotate = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" preopen_indexes = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" unlink_old = 1\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" binlog_path = /var/lib/sphinxsearch/\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \" persistent_connections_limit = 20\" >> /etc/sphinxsearch/sphinx.conf \\\n && echo \"}\" >> /etc/sphinxsearch/sphinx.conf\n#   Install Clickhouse\n#  ###################\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\\n && echo \"deb http://repo.yandex.ru/clickhouse/trusty stable main\" > /etc/apt/sources.list.d/clickhouse.list \\\n && echo '#!/bin/sh' > /bin/systemctl \\\n && chmod +x /bin/systemctl \\\n && apt-get update \\\n && apt-get install clickhouse-client clickhouse-server-common -y\nRUN sed -i_ \"s/<listen_host>::1<\\/listen_host>//\" /etc/clickhouse-server/config.xml\n#   Install arangoDB \nRUN curl -L https://download.arangodb.com/arangodb33/xUbuntu_16.04/Release.key | apt-key add - \\\n && echo 'deb https://download.arangodb.com/arangodb33/xUbuntu_16.04/ /' | tee /etc/apt/sources.list.d/arangodb.list \\\n && apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y arangodb3=3.3.3\nRUN go get github.com/arangodb/go-driver\n#   Install rethink DB\nRUN echo \"deb http://download.rethinkdb.com/apt xenial main\" | tee /etc/apt/sources.list.d/rethinkdb.list \\\n && curl -L https://download.rethinkdb.com/apt/pubkey.gpg | apt-key add - \\\n && apt-get update -y \\\n && apt-get install rethinkdb -y\nRUN cp /etc/rethinkdb/default.conf.sample /etc/rethinkdb/instances.d/instance1.conf\nRUN go get gopkg.in/gorethink/gorethink.v4\n#   Create entrypoint\n#  ##################\nRUN echo \"#!/bin/sh\" > /entrypoint.sh \\\n && echo \"/etc/init.d/elasticsearch start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/redis-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/mysql start\" >> /entrypoint.sh \\\n && echo \"echo 'create database test CHARACTER SET utf8 ' | mysql -h127.0.0.1 -P3306 -uroot\" >> /entrypoint.sh \\\n && echo \"mongod --config /etc/mongod.conf --fork\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/tarantool start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/clickhouse-server start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/rethinkdb start\" >> /entrypoint.sh \\\n && echo \"/etc/init.d/arangodb3 start &\" >> /entrypoint.sh \\\n && echo \"exec \\\"$@\\\"\" >> /entrypoint.sh \\\n && chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"11c64868c1870b2230febc5aef157aca","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/11062f593e17a070caf3342f18127ffc6c19e670.dockerfile"}