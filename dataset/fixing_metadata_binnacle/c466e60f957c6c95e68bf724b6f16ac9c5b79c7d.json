{"seed":1160687922,"processedDockerfileHash":"319e35beb49d9ec4b2f71f326ce8af70","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM golang:1.8.3-alpine\n#   Building ffmpeg 3.3 alpine binaries\n#   ---------------------------------\n#   ffmpeg - http://ffmpeg.org/download.html\n#\n#   https://hub.docker.com/r/jrottenberg/ffmpeg/\n#\n#\n#   FROM        alpine:3.4\n#   MAINTAINER  Julien Rottenberg <julien@rottenberg.info>\nWORKDIR /tmp/workdir\nENV FFMPEG_VERSION=\"3.3.1\" \\\n    FDKAAC_VERSION=\"0.1.5\" \\\n    LAME_VERSION=\"3.99.5\" \\\n    OGG_VERSION=\"1.3.2\" \\\n    OPENCOREAMR_VERSION=\"0.1.4\" \\\n    OPUS_VERSION=\"1.1.4\" \\\n    THEORA_VERSION=\"1.1.1\" \\\n    VORBIS_VERSION=\"1.3.5\" \\\n    VPX_VERSION=\"1.6.1\" \\\n    X264_VERSION=\"20170226-2245-stable\" \\\n    X265_VERSION=\"2.3\" \\\n    XVID_VERSION=\"1.3.4\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    SRC=\"/usr/local\"\nARG OGG_SHA256SUM=\"e19ee34711d7af328cb26287f4137e70630e7261b17cbe3cd41011d73a654692  libogg-1.3.2.tar.gz\"\nARG OPUS_SHA256SUM=\"9122b6b380081dd2665189f97bfd777f04f92dc3ab6698eea1dbb27ad59d8692  opus-1.1.4.tar.gz\"\nARG VORBIS_SHA256SUM=\"6efbcecdd3e5dfbf090341b485da9d176eb250d893e3eb378c428a2db38301ce  libvorbis-1.3.5.tar.gz\"\nARG THEORA_SHA256SUM=\"40952956c47811928d1e7922cda3bc1f427eb75680c3c37249c91e949054916b  libtheora-1.1.1.tar.gz\"\nARG XVID_SHA256SUM=\"4e9fd62728885855bc5007fe1be58df42e5e274497591fec37249e1052ae316f  xvidcore-1.3.4.tar.gz\"\nARG FFMPEG_KEY=\"D67658D8\"\nRUN buildDeps=\"autoconf automake bash binutils bzip2 cmake curl coreutils g++ gcc gnupg libtool make python openssl-dev tar yasm zlib-dev\" \\\n && export MAKEFLAGS=\"-j$(($( grep -c ^processor /proc/cpuinfo ;) + 1))\" \\\n && apk add libgcc=6.2.1-r1 libstdc++=6.2.1-r1 ca-certificates=20161130-r1 ${buildDeps} --update\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/opencore-amr/opencore-amr/opencore-amr-${OPENCOREAMR_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared --datadir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | tar -jx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-pic --enable-shared --disable-cli \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://download.videolan.org/pub/videolan/x265/x265_${X265_VERSION}.tar.gz | tar -zx \\\n && cd x265_${X265_VERSION}/build/linux \\\n && ./multilib.sh \\\n && make -C 8bit install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz \\\n && echo ${OGG_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libogg-${OGG_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datarootdir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/opus/opus-${OPUS_VERSION}.tar.gz \\\n && echo ${OPUS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f opus-${OPUS_VERSION}.tar.gz \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.gz \\\n && echo ${VORBIS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libvorbis-${VORBIS_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/theora/libtheora-${THEORA_VERSION}.tar.gz \\\n && echo ${THEORA_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libtheora-${THEORA_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --enable-vp8 --enable-vp9 --enable-pic --disable-debug --disable-examples --disable-docs --disable-install-bins --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/lame/lame/${LAME_VERSION%.*}/lame-${LAME_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --enable-nasm --datarootdir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xvid.org/downloads/xvidcore-${XVID_VERSION}.tar.gz \\\n && echo ${XVID_SHA256SUM} | sha256sum --check \\\n && tar -zx -f xvidcore-${XVID_VERSION}.tar.gz \\\n && cd xvidcore/build/generic \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --datadir=\"${DIR}\" --disable-static --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && gpg --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys ${FFMPEG_KEY} \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz.asc \\\n && gpg --batch --verify ffmpeg-${FFMPEG_VERSION}.tar.gz.asc ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar -zx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && ./configure --bindir=\"${SRC}/bin\" --disable-debug --disable-doc --disable-ffplay --disable-static --enable-avresample --enable-gpl --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libfdk_aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libxvid --enable-nonfree --enable-openssl --enable-postproc --enable-shared --enable-small --enable-version3 --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --extra-libs=-ldl --prefix=\"${SRC}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && hash -r \\\n && cd tools \\\n && make qt-faststart \\\n && cp qt-faststart ${SRC}/bin \\\n && rm -rf ${DIR}\nRUN cd \\\n && apk del ${buildDeps} \\\n && rm -rf /var/cache/apk/* \\\n && ffmpeg -buildconf\n#   Let's make sure the app built correctly\n#   Convenient to verify on https://hub.docker.com/r/jrottenberg/ffmpeg/builds/ console output\n#   ---------------------------------\nENV GOBIN=\"/go/bin\"\nRUN apk add git=2.11.3-r2 jpeg-dev=8-r6 zlib-dev=1.2.11-r0 libpng-dev=1.6.25-r0 --no-cache\nRUN git clone https://github.com/gpac/gpac.git\nRUN gpac/configure --static-mp4box\nRUN make -j4\nRUN make install\nRUN cp /tmp/workdir/bin/gcc/MP4Box /bin/MP4Box\nRUN go get -u github.com/satori/go.uuid\nRUN go get -u github.com/gin-gonic/gin\nRUN go get -u github.com/nareix/joy4\nRUN go get -u github.com/nareix/bits\nRUN go get -u github.com/jinzhu/gorm\nRUN go get -u github.com/jinzhu/gorm/dialects/postgres\nRUN go get -u go.uber.org/zap\nRUN mkdir -p /home/dev/lib\nENV CGO_LDFLAGS=\"-L${SRC}/lib -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice -lavfilter\"\nENV CGO_CFLAGS=\"-I${SRC}/include\"\nENV LD_LIBRARY_PATH=\"/home/dev/lib\"\nCOPY common /go/src/github.com/n1207n/video-transcode-queue/api/common\nCOPY transcode /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nWORKDIR /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nRUN go build\nRUN go install\nENTRYPOINT /go/bin/transcode\nEXPOSE 8800/tcp\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM golang:1.8.3-alpine\n#  Building ffmpeg 3.3 alpine binaries\n#  ---------------------------------\n#  ffmpeg - http://ffmpeg.org/download.html\n#\n#  https://hub.docker.com/r/jrottenberg/ffmpeg/\n#\n#\n#  FROM        alpine:3.4\n#  MAINTAINER  Julien Rottenberg <julien@rottenberg.info>\nWORKDIR /tmp/workdir\nENV FFMPEG_VERSION=\"3.3.1\" \\\n    FDKAAC_VERSION=\"0.1.5\" \\\n    LAME_VERSION=\"3.99.5\" \\\n    OGG_VERSION=\"1.3.2\" \\\n    OPENCOREAMR_VERSION=\"0.1.4\" \\\n    OPUS_VERSION=\"1.1.4\" \\\n    THEORA_VERSION=\"1.1.1\" \\\n    VORBIS_VERSION=\"1.3.5\" \\\n    VPX_VERSION=\"1.6.1\" \\\n    X264_VERSION=\"20170226-2245-stable\" \\\n    X265_VERSION=\"2.3\" \\\n    XVID_VERSION=\"1.3.4\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    SRC=\"/usr/local\"\nARG OGG_SHA256SUM=\"e19ee34711d7af328cb26287f4137e70630e7261b17cbe3cd41011d73a654692  libogg-1.3.2.tar.gz\"\nARG OPUS_SHA256SUM=\"9122b6b380081dd2665189f97bfd777f04f92dc3ab6698eea1dbb27ad59d8692  opus-1.1.4.tar.gz\"\nARG VORBIS_SHA256SUM=\"6efbcecdd3e5dfbf090341b485da9d176eb250d893e3eb378c428a2db38301ce  libvorbis-1.3.5.tar.gz\"\nARG THEORA_SHA256SUM=\"40952956c47811928d1e7922cda3bc1f427eb75680c3c37249c91e949054916b  libtheora-1.1.1.tar.gz\"\nARG XVID_SHA256SUM=\"4e9fd62728885855bc5007fe1be58df42e5e274497591fec37249e1052ae316f  xvidcore-1.3.4.tar.gz\"\nARG FFMPEG_KEY=\"D67658D8\"\nRUN buildDeps=\"autoconf automake bash binutils bzip2 cmake curl coreutils g++ gcc gnupg libtool make python openssl-dev tar yasm zlib-dev\" \\\n && export MAKEFLAGS=\"-j$(($( grep -c ^processor /proc/cpuinfo ;) + 1))\" \\\n && apk add --update ${buildDeps} libgcc libstdc++ ca-certificates\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/opencore-amr/opencore-amr/opencore-amr-${OPENCOREAMR_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared --datadir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | tar -jx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-pic --enable-shared --disable-cli \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://download.videolan.org/pub/videolan/x265/x265_${X265_VERSION}.tar.gz | tar -zx \\\n && cd x265_${X265_VERSION}/build/linux \\\n && ./multilib.sh \\\n && make -C 8bit install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz \\\n && echo ${OGG_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libogg-${OGG_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datarootdir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/opus/opus-${OPUS_VERSION}.tar.gz \\\n && echo ${OPUS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f opus-${OPUS_VERSION}.tar.gz \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.gz \\\n && echo ${VORBIS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libvorbis-${VORBIS_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/theora/libtheora-${THEORA_VERSION}.tar.gz \\\n && echo ${THEORA_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libtheora-${THEORA_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --enable-vp8 --enable-vp9 --enable-pic --disable-debug --disable-examples --disable-docs --disable-install-bins --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/lame/lame/${LAME_VERSION%.*}/lame-${LAME_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --enable-nasm --datarootdir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xvid.org/downloads/xvidcore-${XVID_VERSION}.tar.gz \\\n && echo ${XVID_SHA256SUM} | sha256sum --check \\\n && tar -zx -f xvidcore-${XVID_VERSION}.tar.gz \\\n && cd xvidcore/build/generic \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --datadir=\"${DIR}\" --disable-static --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && gpg --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys ${FFMPEG_KEY} \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz.asc \\\n && gpg --batch --verify ffmpeg-${FFMPEG_VERSION}.tar.gz.asc ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar -zx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && ./configure --bindir=\"${SRC}/bin\" --disable-debug --disable-doc --disable-ffplay --disable-static --enable-avresample --enable-gpl --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libfdk_aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libxvid --enable-nonfree --enable-openssl --enable-postproc --enable-shared --enable-small --enable-version3 --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --extra-libs=-ldl --prefix=\"${SRC}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && hash -r \\\n && cd tools \\\n && make qt-faststart \\\n && cp qt-faststart ${SRC}/bin \\\n && rm -rf ${DIR}\nRUN cd \\\n && apk del ${buildDeps} \\\n && rm -rf /var/cache/apk/* \\\n && ffmpeg -buildconf\n#  Let's make sure the app built correctly\n#  Convenient to verify on https://hub.docker.com/r/jrottenberg/ffmpeg/builds/ console output\n#  ---------------------------------\nENV GOBIN=\"/go/bin\"\nRUN apk add --no-cache git jpeg-dev zlib-dev libpng-dev\nRUN git clone https://github.com/gpac/gpac.git\nRUN gpac/configure --static-mp4box\nRUN make -j4\nRUN make install\nRUN cp /tmp/workdir/bin/gcc/MP4Box /bin/MP4Box\nRUN go get -u github.com/satori/go.uuid\nRUN go get -u github.com/gin-gonic/gin\nRUN go get -u github.com/nareix/joy4\nRUN go get -u github.com/nareix/bits\nRUN go get -u github.com/jinzhu/gorm\nRUN go get -u github.com/jinzhu/gorm/dialects/postgres\nRUN go get -u go.uber.org/zap\nRUN mkdir -p /home/dev/lib\nENV CGO_LDFLAGS=\"-L${SRC}/lib -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice -lavfilter\"\nENV CGO_CFLAGS=\"-I${SRC}/include\"\nENV LD_LIBRARY_PATH=\"/home/dev/lib\"\nADD common /go/src/github.com/n1207n/video-transcode-queue/api/common\nADD transcode /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nWORKDIR /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nRUN go build\nRUN go install\nENTRYPOINT /go/bin/transcode\nEXPOSE 8800/tcp\n","injectedSmells":[],"originalDockerfileHash":"289e4c960ab0c1a5e33a509c452eb132","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM golang:1.8.3-alpine\n#   Building ffmpeg 3.3 alpine binaries\n#   ---------------------------------\n#   ffmpeg - http://ffmpeg.org/download.html\n#\n#   https://hub.docker.com/r/jrottenberg/ffmpeg/\n#\n#\n#   FROM        alpine:3.4\n#   MAINTAINER  Julien Rottenberg <julien@rottenberg.info>\nWORKDIR /tmp/workdir\nENV FFMPEG_VERSION=\"3.3.1\" \\\n    FDKAAC_VERSION=\"0.1.5\" \\\n    LAME_VERSION=\"3.99.5\" \\\n    OGG_VERSION=\"1.3.2\" \\\n    OPENCOREAMR_VERSION=\"0.1.4\" \\\n    OPUS_VERSION=\"1.1.4\" \\\n    THEORA_VERSION=\"1.1.1\" \\\n    VORBIS_VERSION=\"1.3.5\" \\\n    VPX_VERSION=\"1.6.1\" \\\n    X264_VERSION=\"20170226-2245-stable\" \\\n    X265_VERSION=\"2.3\" \\\n    XVID_VERSION=\"1.3.4\" \\\n    PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" \\\n    SRC=\"/usr/local\"\nARG OGG_SHA256SUM=\"e19ee34711d7af328cb26287f4137e70630e7261b17cbe3cd41011d73a654692  libogg-1.3.2.tar.gz\"\nARG OPUS_SHA256SUM=\"9122b6b380081dd2665189f97bfd777f04f92dc3ab6698eea1dbb27ad59d8692  opus-1.1.4.tar.gz\"\nARG VORBIS_SHA256SUM=\"6efbcecdd3e5dfbf090341b485da9d176eb250d893e3eb378c428a2db38301ce  libvorbis-1.3.5.tar.gz\"\nARG THEORA_SHA256SUM=\"40952956c47811928d1e7922cda3bc1f427eb75680c3c37249c91e949054916b  libtheora-1.1.1.tar.gz\"\nARG XVID_SHA256SUM=\"4e9fd62728885855bc5007fe1be58df42e5e274497591fec37249e1052ae316f  xvidcore-1.3.4.tar.gz\"\nARG FFMPEG_KEY=\"D67658D8\"\nRUN buildDeps=\"autoconf automake bash binutils bzip2 cmake curl coreutils g++ gcc gnupg libtool make python openssl-dev tar yasm zlib-dev\" \\\n && export MAKEFLAGS=\"-j$(($( grep -c ^processor /proc/cpuinfo ;) + 1))\" \\\n && apk add --update ${buildDeps} libgcc libstdc++ ca-certificates\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/opencore-amr/opencore-amr/opencore-amr-${OPENCOREAMR_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-shared --datadir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://ftp.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | tar -jx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --enable-pic --enable-shared --disable-cli \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://download.videolan.org/pub/videolan/x265/x265_${X265_VERSION}.tar.gz | tar -zx \\\n && cd x265_${X265_VERSION}/build/linux \\\n && ./multilib.sh \\\n && make -C 8bit install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz \\\n && echo ${OGG_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libogg-${OGG_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datarootdir=${DIR} \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/opus/opus-${OPUS_VERSION}.tar.gz \\\n && echo ${OPUS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f opus-${OPUS_VERSION}.tar.gz \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.gz \\\n && echo ${VORBIS_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libvorbis-${VORBIS_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xiph.org/releases/theora/libtheora-${THEORA_VERSION}.tar.gz \\\n && echo ${THEORA_SHA256SUM} | sha256sum --check \\\n && tar -zx --strip-components=1 -f libtheora-${THEORA_VERSION}.tar.gz \\\n && ./configure --prefix=\"${SRC}\" --with-ogg=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --enable-vp8 --enable-vp9 --enable-pic --disable-debug --disable-examples --disable-docs --disable-install-bins --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://downloads.sf.net/project/lame/lame/${LAME_VERSION%.*}/lame-${LAME_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --disable-static --enable-nasm --datarootdir=\"${DIR}\" \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sLO http://downloads.xvid.org/downloads/xvidcore-${XVID_VERSION}.tar.gz \\\n && echo ${XVID_SHA256SUM} | sha256sum --check \\\n && tar -zx -f xvidcore-${XVID_VERSION}.tar.gz \\\n && cd xvidcore/build/generic \\\n && ./configure --prefix=\"${SRC}\" --bindir=\"${SRC}/bin\" --datadir=\"${DIR}\" --disable-static --enable-shared \\\n && make \\\n && make install \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && curl -sL https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | tar -zx --strip-components=1 \\\n && autoreconf -fiv \\\n && ./configure --prefix=\"${SRC}\" --disable-static --datadir=\"${DIR}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && rm -rf ${DIR}\nRUN DIR=$( mktemp -d ;) \\\n && cd ${DIR} \\\n && gpg --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys ${FFMPEG_KEY} \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && curl -sLO http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz.asc \\\n && gpg --batch --verify ffmpeg-${FFMPEG_VERSION}.tar.gz.asc ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && tar -zx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.gz \\\n && ./configure --bindir=\"${SRC}/bin\" --disable-debug --disable-doc --disable-ffplay --disable-static --enable-avresample --enable-gpl --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libfdk_aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libxvid --enable-nonfree --enable-openssl --enable-postproc --enable-shared --enable-small --enable-version3 --extra-cflags=\"-I${SRC}/include\" --extra-ldflags=\"-L${SRC}/lib\" --extra-libs=-ldl --prefix=\"${SRC}\" \\\n && make \\\n && make install \\\n && make distclean \\\n && hash -r \\\n && cd tools \\\n && make qt-faststart \\\n && cp qt-faststart ${SRC}/bin \\\n && rm -rf ${DIR}\nRUN cd \\\n && apk del ${buildDeps} \\\n && rm -rf /var/cache/apk/* \\\n && ffmpeg -buildconf\n#   Let's make sure the app built correctly\n#   Convenient to verify on https://hub.docker.com/r/jrottenberg/ffmpeg/builds/ console output\n#   ---------------------------------\nENV GOBIN=\"/go/bin\"\nRUN apk add --no-cache git jpeg-dev zlib-dev libpng-dev\nRUN git clone https://github.com/gpac/gpac.git\nRUN gpac/configure --static-mp4box\nRUN make -j4\nRUN make install\nRUN cp /tmp/workdir/bin/gcc/MP4Box /bin/MP4Box\nRUN go get -u github.com/satori/go.uuid\nRUN go get -u github.com/gin-gonic/gin\nRUN go get -u github.com/nareix/joy4\nRUN go get -u github.com/nareix/bits\nRUN go get -u github.com/jinzhu/gorm\nRUN go get -u github.com/jinzhu/gorm/dialects/postgres\nRUN go get -u go.uber.org/zap\nRUN mkdir -p /home/dev/lib\nENV CGO_LDFLAGS=\"-L${SRC}/lib -lavcodec -lavformat -lavutil -lswscale -lswresample -lavdevice -lavfilter\"\nENV CGO_CFLAGS=\"-I${SRC}/include\"\nENV LD_LIBRARY_PATH=\"/home/dev/lib\"\nADD common /go/src/github.com/n1207n/video-transcode-queue/api/common\nADD transcode /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nWORKDIR /go/src/github.com/n1207n/video-transcode-queue/api/transcode\nRUN go build\nRUN go install\nENTRYPOINT /go/bin/transcode\nEXPOSE 8800/tcp\n","originalDockerfileUglifiedHash":"95a0f52e6930380cf491578f8f6984c7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c466e60f957c6c95e68bf724b6f16ac9c5b79c7d.dockerfile"}