{"seed":73283140,"processedDockerfileHash":"22292787969e3c987daf070734d9a744","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:bionic AS base\nLABEL maintainer=\"devel@jochenbauer.net\"\nLABEL stage=\"qt-build-base\"\n#   UID/GID injection on build if wanted\nARG USER_UID\nARG USER_GID\n#   In case you have to build behind a proxy\nARG PROXY\nENV http_proxy=\"$PROXY\"\nENV https_proxy=\"$PROXY\"\n#   Name of the regular user. Does not look useful but can save a bit time when changing\nENV QT_USERNAME=\"qt\"\n#   Needed in both builder and qt stages, so has to be defined here\nENV QT_PREFIX=\"/usr/local\"\n#   Install all build dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends ca-certificates=20211016ubuntu0.18.04.1 curl=7.58.0-2ubuntu3.24 python=2.7.15~rc1-1 gperf=3.1-1 bison=2:3.0.4.dfsg-1build1 flex=2.6.4-6 build-essential=12.4ubuntu1 pkg-config=0.29.1-0ubuntu2 libgl1-mesa-dev=20.0.8-0ubuntu1~18.04.1 libicu-dev=60.2-3ubuntu3.2 bc=1.07.1-2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 git=1:2.17.1-1ubuntu0.17 libfontconfig1-dev=2.12.6-0ubuntu2 libfreetype6-dev=2.8.1-2ubuntu2.2 libx11-dev=2:1.6.4-3ubuntu0.4 libxext-dev=2:1.3.3-1 libxfixes-dev=1:5.0.3-1 libxi-dev=2:1.7.9-1 libxrender-dev=1:0.9.10-1 libxcb1-dev=1.13-2~ubuntu18.04 libx11-xcb-dev=2:1.6.4-3ubuntu0.4 libxcb-glx0-dev=1.13-2~ubuntu18.04 bash=4.4.18-2ubuntu1.3 -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && printf \"#!/bin/sh\\nls -lah\" > /usr/local/bin/ll \\\n && chmod +x /usr/local/bin/ll\n#   Adding regular user\nRUN if [ ${USER_GID} ] ; then addgroup -g ${USER_GID} ${QT_USERNAME} ; else addgroup ${QT_USERNAME} ; fi \\\n && if [ ${USER_UID} ] ; then useradd -u ${USER_UID} -g ${QT_USERNAME} ${QT_USERNAME} ; else useradd -g ${QT_USERNAME} ${QT_USERNAME} ; fi\n#   build stage\nFROM base AS builder\nLABEL stage=\"qt-build-builder\"\n#   QT Version\nARG QT_VERSION_MAJOR=5\nARG QT_VERSION_MINOR=11\nARG QT_VERSION_PATCH=3\nENV QT_BUILD_ROOT=\"/tmp/qt_build\"\n#   They switched the tarball naming scheme from 5.9 to 5.10. This ARG shall provide a possibility to reflect that\nARG QT_TARBALL_NAMING_SCHEME=everywhere\n#   Providing flag for archived or stable versions\nARG QT_DOWNLOAD_BRANCH=official_releases\nENV QT_BUILD_DIR=\"${QT_BUILD_ROOT}/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/build\"\n#   Installing from here\nWORKDIR ${QT_BUILD_ROOT}\n#   Download sources\nRUN curl -sSL https://download.qt.io/${QT_DOWNLOAD_BRANCH}/qt/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/single/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.tar.xz | tar xJ\nWORKDIR ${QT_BUILD_DIR}\n#   Possibility to make outputs less verbose when required for a ci build\nARG CI_BUILD\nENV CI_BUILD=\"${CI_BUILD}\"\n#   Speeding up make depending of your system\nARG CORE_COUNT=1\nENV CORE_COUNT=\"${CORE_COUNT}\"\n#   Configure, make, install\nCOPY buildconfig/configure-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.sh configure.sh\n#   before running the configuration, adding a directory to copy additional contents to the final image\nRUN mkdir /opt/extra-dependencies \\\n && chmod +x ./configure.sh \\\n && ./configure.sh ${CORE_COUNT} ${CI_BUILD}\nCOPY buildconfig/build.sh build.sh\nRUN ./build.sh ${CI_BUILD} ${CORE_COUNT}\n#   install it\nRUN make install\n#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   resulting image with environment\n#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFROM base AS qt\nENV ENTRYPOINT_DIR=\"/usr/local/bin\"\nENV APP_BUILDDIR=\"/var/build\"\nCOPY --from=builder ${QT_PREFIX} ${QT_PREFIX}\nCOPY --from=builder /opt/extra-dependencies/ /\n#   the next copy statement failed often. My only guess is, that the extra dependencies are not existent and somehow that\n#   triggers a failure here.... A workaround for similar issues is to put an empty run statement in between: https://github.com/moby/moby/issues/37965\nRUN true\nCOPY entrypoint.sh ${ENTRYPOINT_DIR}\nRUN chmod +x ${ENTRYPOINT_DIR}/entrypoint.sh\nVOLUME [\"${APP_BUILDDIR}\"]\nUSER ${QT_USERNAME}\nENTRYPOINT [\"entrypoint.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:bionic AS base\nLABEL maintainer=\"devel@jochenbauer.net\"\nLABEL stage=\"qt-build-base\"\n#  UID/GID injection on build if wanted\nARG USER_UID\nARG USER_GID\n#  In case you have to build behind a proxy\nARG PROXY\nENV http_proxy=\"$PROXY\"\nENV https_proxy=\"$PROXY\"\n#  Name of the regular user. Does not look useful but can save a bit time when changing\nENV QT_USERNAME=\"qt\"\n#  Needed in both builder and qt stages, so has to be defined here\nENV QT_PREFIX=\"/usr/local\"\n#  Install all build dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends ca-certificates curl python gperf bison flex build-essential pkg-config libgl1-mesa-dev libicu-dev bc libssl-dev git libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev bash -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && printf \"#!/bin/sh\\nls -lah\" > /usr/local/bin/ll \\\n && chmod +x /usr/local/bin/ll\n#  Adding regular user\nRUN if [ ${USER_GID} ] ; then addgroup -g ${USER_GID} ${QT_USERNAME} ; else addgroup ${QT_USERNAME} ; fi \\\n && if [ ${USER_UID} ] ; then useradd -u ${USER_UID} -g ${QT_USERNAME} ${QT_USERNAME} ; else useradd -g ${QT_USERNAME} ${QT_USERNAME} ; fi\n#  build stage\nFROM base AS builder\nLABEL stage=\"qt-build-builder\"\n#  QT Version\nARG QT_VERSION_MAJOR=5\nARG QT_VERSION_MINOR=11\nARG QT_VERSION_PATCH=3\nENV QT_BUILD_ROOT=\"/tmp/qt_build\"\n#  They switched the tarball naming scheme from 5.9 to 5.10. This ARG shall provide a possibility to reflect that\nARG QT_TARBALL_NAMING_SCHEME=everywhere\n#  Providing flag for archived or stable versions\nARG QT_DOWNLOAD_BRANCH=official_releases\nENV QT_BUILD_DIR=\"${QT_BUILD_ROOT}/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/build\"\n#  Installing from here\nWORKDIR ${QT_BUILD_ROOT}\n#  Download sources\nRUN curl -sSL https://download.qt.io/${QT_DOWNLOAD_BRANCH}/qt/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/single/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.tar.xz | tar xJ\nWORKDIR ${QT_BUILD_DIR}\n#  Possibility to make outputs less verbose when required for a ci build\nARG CI_BUILD\nENV CI_BUILD=\"${CI_BUILD}\"\n#  Speeding up make depending of your system\nARG CORE_COUNT=1\nENV CORE_COUNT=\"${CORE_COUNT}\"\n#  Configure, make, install\nADD buildconfig/configure-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.sh configure.sh\n#  before running the configuration, adding a directory to copy additional contents to the final image\nRUN mkdir /opt/extra-dependencies \\\n && chmod +x ./configure.sh \\\n && ./configure.sh ${CORE_COUNT} ${CI_BUILD}\nCOPY buildconfig/build.sh build.sh\nRUN ./build.sh ${CI_BUILD} ${CORE_COUNT}\n#  install it\nRUN make install\n#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#  resulting image with environment\n#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFROM base AS qt\nENV ENTRYPOINT_DIR=\"/usr/local/bin\"\nENV APP_BUILDDIR=\"/var/build\"\nCOPY --from=builder ${QT_PREFIX} ${QT_PREFIX}\nCOPY --from=builder /opt/extra-dependencies/ /\n#  the next copy statement failed often. My only guess is, that the extra dependencies are not existent and somehow that\n#  triggers a failure here.... A workaround for similar issues is to put an empty run statement in between: https://github.com/moby/moby/issues/37965\nRUN true\nCOPY entrypoint.sh ${ENTRYPOINT_DIR}\nRUN chmod +x ${ENTRYPOINT_DIR}/entrypoint.sh\nVOLUME [\"${APP_BUILDDIR}\"]\nUSER ${QT_USERNAME}\nENTRYPOINT [\"entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"813ea36c57a3463a43512213045e3644","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:bionic AS base\nLABEL maintainer=\"devel@jochenbauer.net\"\nLABEL stage=\"qt-build-base\"\n#   UID/GID injection on build if wanted\nARG USER_UID\nARG USER_GID\n#   In case you have to build behind a proxy\nARG PROXY\nENV http_proxy=\"$PROXY\"\nENV https_proxy=\"$PROXY\"\n#   Name of the regular user. Does not look useful but can save a bit time when changing\nENV QT_USERNAME=\"qt\"\n#   Needed in both builder and qt stages, so has to be defined here\nENV QT_PREFIX=\"/usr/local\"\n#   Install all build dependencies\nRUN apt-get update \\\n && apt-get -y dist-upgrade \\\n && apt-get install --no-install-recommends ca-certificates curl python gperf bison flex build-essential pkg-config libgl1-mesa-dev libicu-dev bc libssl-dev git libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev bash -y \\\n && apt-get -qq clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && printf \"#!/bin/sh\\nls -lah\" > /usr/local/bin/ll \\\n && chmod +x /usr/local/bin/ll\n#   Adding regular user\nRUN if [ ${USER_GID} ] ; then addgroup -g ${USER_GID} ${QT_USERNAME} ; else addgroup ${QT_USERNAME} ; fi \\\n && if [ ${USER_UID} ] ; then useradd -u ${USER_UID} -g ${QT_USERNAME} ${QT_USERNAME} ; else useradd -g ${QT_USERNAME} ${QT_USERNAME} ; fi\n#   build stage\nFROM base AS builder\nLABEL stage=\"qt-build-builder\"\n#   QT Version\nARG QT_VERSION_MAJOR=5\nARG QT_VERSION_MINOR=11\nARG QT_VERSION_PATCH=3\nENV QT_BUILD_ROOT=\"/tmp/qt_build\"\n#   They switched the tarball naming scheme from 5.9 to 5.10. This ARG shall provide a possibility to reflect that\nARG QT_TARBALL_NAMING_SCHEME=everywhere\n#   Providing flag for archived or stable versions\nARG QT_DOWNLOAD_BRANCH=official_releases\nENV QT_BUILD_DIR=\"${QT_BUILD_ROOT}/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/build\"\n#   Installing from here\nWORKDIR ${QT_BUILD_ROOT}\n#   Download sources\nRUN curl -sSL https://download.qt.io/${QT_DOWNLOAD_BRANCH}/qt/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}/${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}/single/qt-${QT_TARBALL_NAMING_SCHEME}-src-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.tar.xz | tar xJ\nWORKDIR ${QT_BUILD_DIR}\n#   Possibility to make outputs less verbose when required for a ci build\nARG CI_BUILD\nENV CI_BUILD=\"${CI_BUILD}\"\n#   Speeding up make depending of your system\nARG CORE_COUNT=1\nENV CORE_COUNT=\"${CORE_COUNT}\"\n#   Configure, make, install\nADD buildconfig/configure-${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}.sh configure.sh\n#   before running the configuration, adding a directory to copy additional contents to the final image\nRUN mkdir /opt/extra-dependencies \\\n && chmod +x ./configure.sh \\\n && ./configure.sh ${CORE_COUNT} ${CI_BUILD}\nCOPY buildconfig/build.sh build.sh\nRUN ./build.sh ${CI_BUILD} ${CORE_COUNT}\n#   install it\nRUN make install\n#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   resulting image with environment\n#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nFROM base AS qt\nENV ENTRYPOINT_DIR=\"/usr/local/bin\"\nENV APP_BUILDDIR=\"/var/build\"\nCOPY --from=builder ${QT_PREFIX} ${QT_PREFIX}\nCOPY --from=builder /opt/extra-dependencies/ /\n#   the next copy statement failed often. My only guess is, that the extra dependencies are not existent and somehow that\n#   triggers a failure here.... A workaround for similar issues is to put an empty run statement in between: https://github.com/moby/moby/issues/37965\nRUN true\nCOPY entrypoint.sh ${ENTRYPOINT_DIR}\nRUN chmod +x ${ENTRYPOINT_DIR}/entrypoint.sh\nVOLUME [\"${APP_BUILDDIR}\"]\nUSER ${QT_USERNAME}\nENTRYPOINT [\"entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"94a5decf48687d79e78b0ed0d937ce50","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/efb31533cb0501961a6936acc6857e34a3a6ed5f.dockerfile"}