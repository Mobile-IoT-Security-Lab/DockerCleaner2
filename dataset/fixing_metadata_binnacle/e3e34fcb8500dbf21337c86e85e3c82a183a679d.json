{"seed":1044530998,"processedDockerfileHash":"d0fbcb355ec4643c69a66b78ec57f7a4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   docker build -t find3 .\n#   mkdir /tmp/find3\n#   docker run -p 11883:1883 -p 8003:8003 -v /tmp/find3:/data -t find3\nFROM ubuntu:18.04\nENV GOLANG_VERSION=\"1.11\"\nENV PATH=\"/usr/local/go/bin:/usr/local/work/bin:${PATH}\"\nENV GOPATH=\"/usr/local/work\"\nENV GO111MODULE=\"on\"\n#   RUN apt-get update && apt-get -y upgrade && \\\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y wget git libc6-dev make pkg-config g++ gcc mosquitto-clients mosquitto python3 python3-dev python3-pip python3-setuptools python3-wheel supervisor libfreetype6-dev python3-matplotlib python3-scipy python3-numpy libopenblas-dev libblas-dev liblapack-dev gfortran \\\n && mkdir /usr/local/work \\\n && rm -rf /var/lib/apt/lists/* \\\n && set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='8ffeb3577d8ca5477064f1cb8739835973c866487f2bf81df1227eaa96826acd' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='e4853168f41d0bea65e4d38f992a2d44b58552605f623640c5ead89d515c56c9' ;;(i386) goRelArch='linux-386' ; goRelSha256='1a91932b65b4af2f84ef2dce10d790e6a0d3d22c9ea1bdf3d8c4d9279dfa680e' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e874d617f0e322f8c2dda8c23ea3a2ea21d5dfe7177abb1f8b6a0ac7cd653272' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='c113495fbb175d6beb1b881750de1dd034c7ae8657c30b3de8808032c9af0a15' ;;(*) goRelArch='src' ; goRelSha256='afc1e12f5fe49a471e3aae7d906c73e9d5b1fdd36d52d72652dde8f6250152fb' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version \\\n && mkdir /build \\\n && cd /build \\\n && git clone https://github.com/schollz/find3 \\\n && mkdir /data \\\n && mkdir /app \\\n && echo '#!/bin/bash\\npkill -9 mosquitto\\ncp -R -u -p /app/mosquitto_config /data\\nmosquitto -d -c /data/mosquitto_config/mosquitto.conf\\nmkdir -p /data/logs\\n/usr/bin/supervisord\\n' > /app/startup.sh \\\n && chmod +x /app/startup.sh \\\n && echo '[supervisord]\\nnodaemon=true\\n[program:main]\\ndirectory=/app/main\\ncommand=/app/main/main -debug -data /data/data -mqtt-dir /data/mosquitto_config\\npriority=1\\nstdout_logfile=/data/logs/main.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/main.stderr\\nstderr_logfile_maxbytes=0\\n[program:ai]\\ndirectory=/app/ai\\ncommand=make production\\npriority=2\\nstdout_logfile=/data/logs/ai.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/ai.stderr\\nstderr_logfile_maxbytes=0\\n' > /etc/supervisor/conf.d/supervisord.conf \\\n && mkdir /app/mosquitto_config \\\n && touch /app/mosquitto_config/acl \\\n && touch /app/mosquitto_config/passwd \\\n && echo 'allow_anonymous false\\nacl_file /data/mosquitto_config/acl\\npassword_file /data/mosquitto_config/passwd\\npid_file /data/mosquitto_config/pid\\n' > /app/mosquitto_config/mosquitto.conf \\\n && echo \"moving to find3\" \\\n && cd /build/find3/server/main \\\n && go build -v \\\n && echo \"moving main\" \\\n && mv /build/find3/server/main /app/main \\\n && echo \"moving to ai\" \\\n && cd /build/find3/server/ai \\\n && python3 -m pip install -r requirements.txt \\\n && echo \"moving ai\" \\\n && mv /build/find3/server/ai /app/ai \\\n && echo \"removing go srces\" \\\n && rm -rf /usr/local/work/src \\\n && echo \"purging packages\" \\\n && apt-get remove -y --auto-remove git libc6-dev pkg-config g++ gcc \\\n && echo \"autoclean\" \\\n && apt-get autoclean \\\n && echo \"clean\" \\\n && apt-get clean \\\n && echo \"autoremove\" \\\n && apt-get autoremove \\\n && echo \"rm trash\" \\\n && rm -rf ~/.local/share/Trash/* \\\n && echo \"rm go\" \\\n && rm -rf /usr/local/go* \\\n && echo \"rm perl\" \\\n && rm -rf /usr/share/perl* \\\n && echo \"rm build\" \\\n && rm -rf /build* \\\n && echo \"rm doc\" \\\n && rm -rf /usr/share/doc*\nWORKDIR /app\nCMD [\"/app/startup.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  docker build -t find3 .\n#  mkdir /tmp/find3\n#  docker run -p 11883:1883 -p 8003:8003 -v /tmp/find3:/data -t find3\nFROM ubuntu:18.04\nENV GOLANG_VERSION=\"1.11\"\nENV PATH=\"/usr/local/go/bin:/usr/local/work/bin:${PATH}\"\nENV GOPATH=\"/usr/local/work\"\nENV GO111MODULE=\"on\"\n#  RUN apt-get update && apt-get -y upgrade && \\\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y wget git libc6-dev make pkg-config g++ gcc mosquitto-clients mosquitto python3 python3-dev python3-pip python3-setuptools python3-wheel supervisor libfreetype6-dev python3-matplotlib python3-scipy python3-numpy libopenblas-dev libblas-dev liblapack-dev gfortran \\\n && mkdir /usr/local/work \\\n && rm -rf /var/lib/apt/lists/* \\\n && set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='8ffeb3577d8ca5477064f1cb8739835973c866487f2bf81df1227eaa96826acd' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='e4853168f41d0bea65e4d38f992a2d44b58552605f623640c5ead89d515c56c9' ;;(i386) goRelArch='linux-386' ; goRelSha256='1a91932b65b4af2f84ef2dce10d790e6a0d3d22c9ea1bdf3d8c4d9279dfa680e' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e874d617f0e322f8c2dda8c23ea3a2ea21d5dfe7177abb1f8b6a0ac7cd653272' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='c113495fbb175d6beb1b881750de1dd034c7ae8657c30b3de8808032c9af0a15' ;;(*) goRelArch='src' ; goRelSha256='afc1e12f5fe49a471e3aae7d906c73e9d5b1fdd36d52d72652dde8f6250152fb' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version \\\n && mkdir /build \\\n && cd /build \\\n && git clone https://github.com/schollz/find3 \\\n && mkdir /data \\\n && mkdir /app \\\n && echo '#!/bin/bash\\npkill -9 mosquitto\\ncp -R -u -p /app/mosquitto_config /data\\nmosquitto -d -c /data/mosquitto_config/mosquitto.conf\\nmkdir -p /data/logs\\n/usr/bin/supervisord\\n' > /app/startup.sh \\\n && chmod +x /app/startup.sh \\\n && echo '[supervisord]\\nnodaemon=true\\n[program:main]\\ndirectory=/app/main\\ncommand=/app/main/main -debug -data /data/data -mqtt-dir /data/mosquitto_config\\npriority=1\\nstdout_logfile=/data/logs/main.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/main.stderr\\nstderr_logfile_maxbytes=0\\n[program:ai]\\ndirectory=/app/ai\\ncommand=make production\\npriority=2\\nstdout_logfile=/data/logs/ai.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/ai.stderr\\nstderr_logfile_maxbytes=0\\n' > /etc/supervisor/conf.d/supervisord.conf \\\n && mkdir /app/mosquitto_config \\\n && touch /app/mosquitto_config/acl \\\n && touch /app/mosquitto_config/passwd \\\n && echo 'allow_anonymous false\\nacl_file /data/mosquitto_config/acl\\npassword_file /data/mosquitto_config/passwd\\npid_file /data/mosquitto_config/pid\\n' > /app/mosquitto_config/mosquitto.conf \\\n && echo \"moving to find3\" \\\n && cd /build/find3/server/main \\\n && go build -v \\\n && echo \"moving main\" \\\n && mv /build/find3/server/main /app/main \\\n && echo \"moving to ai\" \\\n && cd /build/find3/server/ai \\\n && python3 -m pip install -r requirements.txt \\\n && echo \"moving ai\" \\\n && mv /build/find3/server/ai /app/ai \\\n && echo \"removing go srces\" \\\n && rm -rf /usr/local/work/src \\\n && echo \"purging packages\" \\\n && apt-get remove -y --auto-remove git libc6-dev pkg-config g++ gcc \\\n && echo \"autoclean\" \\\n && apt-get autoclean \\\n && echo \"clean\" \\\n && apt-get clean \\\n && echo \"autoremove\" \\\n && apt-get autoremove \\\n && echo \"rm trash\" \\\n && rm -rf ~/.local/share/Trash/* \\\n && echo \"rm go\" \\\n && rm -rf /usr/local/go* \\\n && echo \"rm perl\" \\\n && rm -rf /usr/share/perl* \\\n && echo \"rm build\" \\\n && rm -rf /build* \\\n && echo \"rm doc\" \\\n && rm -rf /usr/share/doc*\nWORKDIR /app\nCMD [\"/app/startup.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"c1a3e5e096905afa1869e1923e424736","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   docker build -t find3 .\n#   mkdir /tmp/find3\n#   docker run -p 11883:1883 -p 8003:8003 -v /tmp/find3:/data -t find3\nFROM ubuntu:18.04\nENV GOLANG_VERSION=\"1.11\"\nENV PATH=\"/usr/local/go/bin:/usr/local/work/bin:${PATH}\"\nENV GOPATH=\"/usr/local/work\"\nENV GO111MODULE=\"on\"\n#   RUN apt-get update && apt-get -y upgrade && \\\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y wget git libc6-dev make pkg-config g++ gcc mosquitto-clients mosquitto python3 python3-dev python3-pip python3-setuptools python3-wheel supervisor libfreetype6-dev python3-matplotlib python3-scipy python3-numpy libopenblas-dev libblas-dev liblapack-dev gfortran \\\n && mkdir /usr/local/work \\\n && rm -rf /var/lib/apt/lists/* \\\n && set -eux ; dpkgArch=\"$( dpkg --print-architecture ;)\" ; case \"${dpkgArch##*-}\" in (amd64) goRelArch='linux-amd64' ; goRelSha256='b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499' ;;(armhf) goRelArch='linux-armv6l' ; goRelSha256='8ffeb3577d8ca5477064f1cb8739835973c866487f2bf81df1227eaa96826acd' ;;(arm64) goRelArch='linux-arm64' ; goRelSha256='e4853168f41d0bea65e4d38f992a2d44b58552605f623640c5ead89d515c56c9' ;;(i386) goRelArch='linux-386' ; goRelSha256='1a91932b65b4af2f84ef2dce10d790e6a0d3d22c9ea1bdf3d8c4d9279dfa680e' ;;(ppc64el) goRelArch='linux-ppc64le' ; goRelSha256='e874d617f0e322f8c2dda8c23ea3a2ea21d5dfe7177abb1f8b6a0ac7cd653272' ;;(s390x) goRelArch='linux-s390x' ; goRelSha256='c113495fbb175d6beb1b881750de1dd034c7ae8657c30b3de8808032c9af0a15' ;;(*) goRelArch='src' ; goRelSha256='afc1e12f5fe49a471e3aae7d906c73e9d5b1fdd36d52d72652dde8f6250152fb' ; echo >&2; echo \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\" >&2; echo >&2;; esac ; url=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\" ; wget -O go.tgz \"$url\" ; echo \"${goRelSha256} *go.tgz\" | sha256sum -c - ; tar -C /usr/local -xzf go.tgz ; rm go.tgz ; if [ \"$goRelArch\" = 'src' ] ; then echo >&2;echo 'error: UNIMPLEMENTED' >&2;echo 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)' >&2;echo >&2;exit 1 ; fi ; export PATH=\"/usr/local/go/bin:$PATH\" ; go version \\\n && mkdir /build \\\n && cd /build \\\n && git clone https://github.com/schollz/find3 \\\n && mkdir /data \\\n && mkdir /app \\\n && echo '#!/bin/bash\\npkill -9 mosquitto\\ncp -R -u -p /app/mosquitto_config /data\\nmosquitto -d -c /data/mosquitto_config/mosquitto.conf\\nmkdir -p /data/logs\\n/usr/bin/supervisord\\n' > /app/startup.sh \\\n && chmod +x /app/startup.sh \\\n && echo '[supervisord]\\nnodaemon=true\\n[program:main]\\ndirectory=/app/main\\ncommand=/app/main/main -debug -data /data/data -mqtt-dir /data/mosquitto_config\\npriority=1\\nstdout_logfile=/data/logs/main.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/main.stderr\\nstderr_logfile_maxbytes=0\\n[program:ai]\\ndirectory=/app/ai\\ncommand=make production\\npriority=2\\nstdout_logfile=/data/logs/ai.stdout\\nstdout_logfile_maxbytes=0\\nstderr_logfile=/data/logs/ai.stderr\\nstderr_logfile_maxbytes=0\\n' > /etc/supervisor/conf.d/supervisord.conf \\\n && mkdir /app/mosquitto_config \\\n && touch /app/mosquitto_config/acl \\\n && touch /app/mosquitto_config/passwd \\\n && echo 'allow_anonymous false\\nacl_file /data/mosquitto_config/acl\\npassword_file /data/mosquitto_config/passwd\\npid_file /data/mosquitto_config/pid\\n' > /app/mosquitto_config/mosquitto.conf \\\n && echo \"moving to find3\" \\\n && cd /build/find3/server/main \\\n && go build -v \\\n && echo \"moving main\" \\\n && mv /build/find3/server/main /app/main \\\n && echo \"moving to ai\" \\\n && cd /build/find3/server/ai \\\n && python3 -m pip install -r requirements.txt \\\n && echo \"moving ai\" \\\n && mv /build/find3/server/ai /app/ai \\\n && echo \"removing go srces\" \\\n && rm -rf /usr/local/work/src \\\n && echo \"purging packages\" \\\n && apt-get remove -y --auto-remove git libc6-dev pkg-config g++ gcc \\\n && echo \"autoclean\" \\\n && apt-get autoclean \\\n && echo \"clean\" \\\n && apt-get clean \\\n && echo \"autoremove\" \\\n && apt-get autoremove \\\n && echo \"rm trash\" \\\n && rm -rf ~/.local/share/Trash/* \\\n && echo \"rm go\" \\\n && rm -rf /usr/local/go* \\\n && echo \"rm perl\" \\\n && rm -rf /usr/share/perl* \\\n && echo \"rm build\" \\\n && rm -rf /build* \\\n && echo \"rm doc\" \\\n && rm -rf /usr/share/doc*\nWORKDIR /app\nCMD [\"/app/startup.sh\"]\n","originalDockerfileUglifiedHash":"2551254445e683e0572a7b58e9050633","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e3e34fcb8500dbf21337c86e85e3c82a183a679d.dockerfile"}