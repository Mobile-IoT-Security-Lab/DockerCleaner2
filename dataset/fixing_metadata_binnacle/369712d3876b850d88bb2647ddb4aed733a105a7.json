{"seed":117675492,"processedDockerfileHash":"8216cf4d35735d1047c90ef21ee333c9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/Laradock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/workspace:1.8-56\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php5.6-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_NODE=false\n#     - ...\n#\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock \\\n && :\n#  ####################################\n#   SOAP:\n#  ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends libxml2-dev php5.6-soap -y ) ; fi\n#  ####################################\n#   PHP GMP\n#  ####################################\nARG INSTALL_GMP=false\nENV INSTALL_GMP=\"${INSTALL_GMP}\"\nRUN if [ ${INSTALL_GMP} = true ] ; then (apt-get update ;apt-get install --no-install-recommends php-gmp -y ) ; fi\n#  ####################################\n#   Set Timezone\n#  ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ####################################\n#   Composer:\n#  ####################################\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Crontab\n#  ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ####################################\n#   User Aliases\n#  ####################################\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then (apt-get update ;apt-get install --no-install-recommends php5.6-xdebug -y --force-yes ) \\\n && sed -i 's/^;//g' /etc/php/5.6/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/5.6/cli/conf.d/xdebug.ini\n#  ####################################\n#   Blackfire:\n#  ####################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && (apt-get update ;apt-get install --no-install-recommends blackfire-agent ) ; fi\n#  ####################################\n#   ssh:\n#  ####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nCOPY insecure_id_rsa /tmp/id_rsa\nCOPY insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\n#   Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/5.6/cli/conf.d/30-mongodb.ini; fi\n#  ####################################\n#   Drush:\n#  ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n#  ####################################\n#   Node / NVM:\n#  ####################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp@4.0.2 bower@1.8.14 vue-cli@2.9.6 -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   YARN:\n#  ####################################\nUSER laradock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nUSER root\nARG INSTALL_AEROSPIKE=true\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/5.6/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /etc/php/5.6/cli/conf.d/aerospike.ini ; fi\n#  ####################################\n#   Non-root user : PHPUnit path\n#  ####################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Laravel Artisan Alias\n#  ####################################\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'alias art=\"php artisan\"' >> ~/.bashrc\n#  ####################################\n#   Laravel Envoy:\n#  ####################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY=\"${INSTALL_LARAVEL_ENVOY}\"\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ####################################\n#   Deployer:\n#  ####################################\nUSER laradock\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER=\"${INSTALL_DEPLOYER}\"\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then composer global require \"deployer/deployer\" ; fi\n#  ####################################\n#   Linuxbrew:\n#  ####################################\nUSER root\nARG INSTALL_LINUXBREW=true\nENV INSTALL_LINUXBREW=\"${INSTALL_LINUXBREW}\"\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && (apt-get update ;apt-get install --no-install-recommends build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y ) \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   Minio:\n#  ####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC=\"${INSTALL_MC}\"\nCOPY mc/config.json /root/.mc/config.json\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\nUSER laradock\n#  ####################################\n#   MySQL client\n#  ####################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nENV INSTALL_MYSQL_CLIENT=\"${INSTALL_MYSQL_CLIENT}\"\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends mysql-client -y ) ; fi\n#  ####################################\n#   PostgreSQL client\n#  ####################################\nUSER root\nARG INSTALL_PGSQL_CLIENT=false\nENV INSTALL_PGSQL_CLIENT=\"${INSTALL_PGSQL_CLIENT}\"\nRUN if [ ${INSTALL_PGSQL_CLIENT} = true ] ; then apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends postgresql-client -y ) ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# --------------------------------------------------------------------------\n#  Image Setup\n# --------------------------------------------------------------------------\n#\n#  To edit the 'workspace' base Image, visit its repository on Github\n#     https://github.com/Laradock/workspace\n#\n#  To change its version, see the available Tags on the Docker Hub:\n#     https://hub.docker.com/r/laradock/workspace/tags/\n#\n#  Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/workspace:1.8-56\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n# --------------------------------------------------------------------------\n#  Mandatory Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Mandatory Software's such as (\"php5.6-cli\", \"git\", \"vim\", ....) are\n#  installed on the base image 'laradock/workspace' image. If you want\n#  to add more Software's or remove existing one, you need to edit the\n#  base image (https://github.com/Laradock/workspace).\n#\n#\n# --------------------------------------------------------------------------\n#  Optional Software's Installation\n# --------------------------------------------------------------------------\n#\n#  Optional Software's will only be installed if you set them to `true`\n#  in the `docker-compose.yml` before the build.\n#  Example:\n#    - INSTALL_NODE=false\n#    - ...\n#\n# ####################################\n#  Non-Root User:\n# ####################################\n#  Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock \\\n && apt-get update -yqq\n# ####################################\n#  SOAP:\n# ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && apt-get install libxml2-dev php5.6-soap -y ; fi\n# ####################################\n#  PHP GMP\n# ####################################\nARG INSTALL_GMP=false\nENV INSTALL_GMP=\"${INSTALL_GMP}\"\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install php-gmp -y ; fi\n# ####################################\n#  Set Timezone\n# ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n# ####################################\n#  Composer:\n# ####################################\n#  Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#  Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#  Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#  Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n# ####################################\n#  Crontab\n# ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n# ####################################\n#  User Aliases\n# ####################################\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n# ####################################\n#  xDebug:\n# ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php5.6-xdebug -y --force-yes \\\n && sed -i 's/^;//g' /etc/php/5.6/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#  ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/5.6/cli/conf.d/xdebug.ini\n# ####################################\n#  Blackfire:\n# ####################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && apt-get install blackfire-agent ; fi\n# ####################################\n#  ssh:\n# ####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n# ####################################\n#  MongoDB:\n# ####################################\n#  Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/5.6/cli/conf.d/30-mongodb.ini; fi\n# ####################################\n#  Drush:\n# ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n# ####################################\n#  Node / NVM:\n# ####################################\n#  Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#  Wouldn't execute when added to the RUN statement in the above block\n#  Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n# ####################################\n#  YARN:\n# ####################################\nUSER laradock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#  Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n# ####################################\n#  PHP Aerospike:\n# ####################################\nUSER root\nARG INSTALL_AEROSPIKE=true\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#  Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/5.6/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /etc/php/5.6/cli/conf.d/aerospike.ini ; fi\n# ####################################\n#  Non-root user : PHPUnit path\n# ####################################\n#  add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n# ####################################\n#  Laravel Artisan Alias\n# ####################################\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'alias art=\"php artisan\"' >> ~/.bashrc\n# ####################################\n#  Laravel Envoy:\n# ####################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY=\"${INSTALL_LARAVEL_ENVOY}\"\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n# ####################################\n#  Deployer:\n# ####################################\nUSER laradock\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER=\"${INSTALL_DEPLOYER}\"\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then composer global require \"deployer/deployer\" ; fi\n# ####################################\n#  Linuxbrew:\n# ####################################\nUSER root\nARG INSTALL_LINUXBREW=true\nENV INSTALL_LINUXBREW=\"${INSTALL_LINUXBREW}\"\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n# ####################################\n#  Minio:\n# ####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC=\"${INSTALL_MC}\"\nCOPY mc/config.json /root/.mc/config.json\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\nUSER laradock\n# ####################################\n#  MySQL client\n# ####################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nENV INSTALL_MYSQL_CLIENT=\"${INSTALL_MYSQL_CLIENT}\"\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update \\\n && apt-get install mysql-client -y ; fi\n# ####################################\n#  PostgreSQL client\n# ####################################\nUSER root\nARG INSTALL_PGSQL_CLIENT=false\nENV INSTALL_PGSQL_CLIENT=\"${INSTALL_PGSQL_CLIENT}\"\nRUN if [ ${INSTALL_PGSQL_CLIENT} = true ] ; then apt-get update \\\n && apt-get install postgresql-client -y ; fi\n#\n# --------------------------------------------------------------------------\n#  Final Touch\n# --------------------------------------------------------------------------\n#\n#  Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  Set default work directory\nWORKDIR /var/www\n","injectedSmells":[],"originalDockerfileHash":"4360642a7efeba86d06e4147070395e4","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  --------------------------------------------------------------------------\n#   Image Setup\n#  --------------------------------------------------------------------------\n#\n#   To edit the 'workspace' base Image, visit its repository on Github\n#      https://github.com/Laradock/workspace\n#\n#   To change its version, see the available Tags on the Docker Hub:\n#      https://hub.docker.com/r/laradock/workspace/tags/\n#\n#   Note: Base Image name format {image-tag}-{php-version}\n#\nFROM laradock/workspace:1.8-56\nMAINTAINER Mahmoud Zalt <mahmoud@zalt.me>\n#\n#  --------------------------------------------------------------------------\n#   Mandatory Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Mandatory Software's such as (\"php5.6-cli\", \"git\", \"vim\", ....) are\n#   installed on the base image 'laradock/workspace' image. If you want\n#   to add more Software's or remove existing one, you need to edit the\n#   base image (https://github.com/Laradock/workspace).\n#\n#\n#  --------------------------------------------------------------------------\n#   Optional Software's Installation\n#  --------------------------------------------------------------------------\n#\n#   Optional Software's will only be installed if you set them to `true`\n#   in the `docker-compose.yml` before the build.\n#   Example:\n#     - INSTALL_NODE=false\n#     - ...\n#\n#  ####################################\n#   Non-Root User:\n#  ####################################\n#   Add a non-root user to prevent files being created with root permissions on host machine.\nARG PUID=1000\nARG PGID=1000\nENV PUID=\"${PUID}\"\nENV PGID=\"${PGID}\"\nRUN groupadd -g ${PGID} laradock \\\n && useradd -u ${PUID} -g laradock -m laradock \\\n && apt-get update -yqq\n#  ####################################\n#   SOAP:\n#  ####################################\nUSER root\nARG INSTALL_SOAP=false\nENV INSTALL_SOAP=\"${INSTALL_SOAP}\"\nRUN if [ ${INSTALL_SOAP} = true ] ; then add-apt-repository -y ppa:ondrej/php \\\n && apt-get update -yqq \\\n && apt-get install libxml2-dev php5.6-soap -y ; fi\n#  ####################################\n#   PHP GMP\n#  ####################################\nARG INSTALL_GMP=false\nENV INSTALL_GMP=\"${INSTALL_GMP}\"\nRUN if [ ${INSTALL_GMP} = true ] ; then apt-get install php-gmp -y ; fi\n#  ####################################\n#   Set Timezone\n#  ####################################\nARG TZ=UTC\nENV TZ=\"${TZ}\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\n#  ####################################\n#   Composer:\n#  ####################################\n#   Add the composer.json\nCOPY ./composer.json /home/laradock/.composer/composer.json\n#   Make sure that ~/.composer belongs to laradock\nRUN chown -R laradock:laradock /home/laradock/.composer\nUSER laradock\n#   Check if global install need to be ran\nARG COMPOSER_GLOBAL_INSTALL=false\nENV COMPOSER_GLOBAL_INSTALL=\"${COMPOSER_GLOBAL_INSTALL}\"\nRUN if [ ${COMPOSER_GLOBAL_INSTALL} = true ] ; then composer global install ; fi\n#   Export composer vendor path\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"~/.composer/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Crontab\n#  ####################################\nUSER root\nCOPY ./crontab /etc/cron.d\nRUN chmod -R 644 /etc/cron.d\n#  ####################################\n#   User Aliases\n#  ####################################\nUSER laradock\nCOPY ./aliases.sh /home/laradock/aliases.sh\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo \"# Load Custom Aliases\" >> ~/.bashrc \\\n && echo \"source /home/laradock/aliases.sh\" >> ~/.bashrc \\\n && echo \"\" >> ~/.bashrc\n#  ####################################\n#   xDebug:\n#  ####################################\nARG INSTALL_XDEBUG=false\nRUN if [ ${INSTALL_XDEBUG} = true ] ; then apt-get install php5.6-xdebug -y --force-yes \\\n && sed -i 's/^;//g' /etc/php/5.6/cli/conf.d/20-xdebug.ini \\\n && echo \"alias phpunit='php -dzend_extension=xdebug.so /var/www/vendor/bin/phpunit'\" >> ~/.bashrc; fi\n#   ADD for REMOTE debugging\nCOPY ./xdebug.ini /etc/php/5.6/cli/conf.d/xdebug.ini\n#  ####################################\n#   Blackfire:\n#  ####################################\nARG INSTALL_BLACKFIRE=false\nARG BLACKFIRE_CLIENT_ID\nARG BLACKFIRE_CLIENT_TOKEN\nENV BLACKFIRE_CLIENT_ID=\"${BLACKFIRE_CLIENT_ID}\"\nENV BLACKFIRE_CLIENT_TOKEN=\"${BLACKFIRE_CLIENT_TOKEN}\"\nRUN if [ ${INSTALL_XDEBUG} = false -a ${INSTALL_BLACKFIRE} = true ] ; then curl -L https://packagecloud.io/gpg.key | apt-key add - \\\n && echo \"deb http://packages.blackfire.io/debian any main\" | tee /etc/apt/sources.list.d/blackfire.list \\\n && apt-get update -yqq \\\n && apt-get install blackfire-agent ; fi\n#  ####################################\n#   ssh:\n#  ####################################\nARG INSTALL_WORKSPACE_SSH=false\nENV INSTALL_WORKSPACE_SSH=\"${INSTALL_WORKSPACE_SSH}\"\nADD insecure_id_rsa /tmp/id_rsa\nADD insecure_id_rsa.pub /tmp/id_rsa.pub\nRUN if [ ${INSTALL_WORKSPACE_SSH} = true ] ; then rm -f /etc/service/sshd/down \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/authorized_keys \\\n && cat /tmp/id_rsa.pub >> /root/.ssh/id_rsa.pub \\\n && cat /tmp/id_rsa >> /root/.ssh/id_rsa \\\n && rm -f /tmp/id_rsa* \\\n && chmod 644 /root/.ssh/authorized_keys /root/.ssh/id_rsa.pub \\\n && chmod 400 /root/.ssh/id_rsa ; fi\n#  ####################################\n#   MongoDB:\n#  ####################################\n#   Check if Mongo needs to be installed\nARG INSTALL_MONGO=false\nENV INSTALL_MONGO=\"${INSTALL_MONGO}\"\nRUN if [ ${INSTALL_MONGO} = true ] ; then pecl install mongodb \\\n && echo \"extension=mongodb.so\" >> /etc/php/5.6/cli/conf.d/30-mongodb.ini; fi\n#  ####################################\n#   Drush:\n#  ####################################\nUSER root\nENV DRUSH_VERSION=\"8.1.2\"\nARG INSTALL_DRUSH=false\nENV INSTALL_DRUSH=\"${INSTALL_DRUSH}\"\nRUN if [ ${INSTALL_DRUSH} = true ] ; then curl -fsSL -o /usr/local/bin/drush https://github.com/drush-ops/drush/releases/download/$DRUSH_VERSION/drush.phar | bash \\\n && chmod +x /usr/local/bin/drush \\\n && drush core-status ; fi\nUSER laradock\n#  ####################################\n#   Node / NVM:\n#  ####################################\n#   Check if NVM needs to be installed\nARG NODE_VERSION=stable\nENV NODE_VERSION=\"${NODE_VERSION}\"\nARG INSTALL_NODE=false\nENV INSTALL_NODE=\"${INSTALL_NODE}\"\nENV NVM_DIR=\"/home/laradock/.nvm\"\nRUN if [ ${INSTALL_NODE} = true ] ; then curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash \\\n && . $NVM_DIR/nvm.sh \\\n && nvm install ${NODE_VERSION} \\\n && nvm use ${NODE_VERSION} \\\n && nvm alias ${NODE_VERSION} \\\n && npm install gulp bower vue-cli -g ; fi\n#   Wouldn't execute when added to the RUN statement in the above block\n#   Source NVM when loading bash since ~/.profile isn't loaded on non-login shell\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#   Add NVM binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_NODE} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export NVM_DIR=\"/home/laradock/.nvm\"' >> ~/.bashrc \\\n && echo '[ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" # This loads nvm' >> ~/.bashrc; fi\n#  ####################################\n#   YARN:\n#  ####################################\nUSER laradock\nARG INSTALL_YARN=false\nENV INSTALL_YARN=\"${INSTALL_YARN}\"\nARG YARN_VERSION=latest\nENV YARN_VERSION=\"${YARN_VERSION}\"\nRUN if [ ${INSTALL_YARN} = true ] ; then [ -s \"$NVM_DIR/nvm.sh\" ] \\\n && . \"$NVM_DIR/nvm.sh\" \\\n && if [ ${YARN_VERSION} = \"latest\" ] ; then curl -o- -L https://yarnpkg.com/install.sh | bash ; else curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION} ; fi \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"$HOME/.yarn/bin:$PATH\"' >> ~/.bashrc; fi\n#   Add YARN binaries to root's .bashrc\nUSER root\nRUN if [ ${INSTALL_YARN} = true ] ; then echo \"\" >> ~/.bashrc \\\n && echo 'export YARN_DIR=\"/home/laradock/.yarn\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$YARN_DIR/bin:$PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   PHP Aerospike:\n#  ####################################\nUSER root\nARG INSTALL_AEROSPIKE=true\nENV INSTALL_AEROSPIKE=\"${INSTALL_AEROSPIKE}\"\n#   Copy aerospike configration for remote debugging\nCOPY ./aerospike.ini /etc/php/5.6/cli/conf.d/aerospike.ini\nRUN if [ ${INSTALL_AEROSPIKE} = true ] ; then curl -L -o /tmp/aerospike-client-php.tar.gz \"https://github.com/aerospike/aerospike-client-php/archive/3.4.14.tar.gz\" \\\n && mkdir -p aerospike-client-php \\\n && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \\\n && (cd aerospike-client-php/src/aerospike \\\n && phpize \\\n && ./build.sh \\\n && make install ) \\\n && rm /tmp/aerospike-client-php.tar.gz ; fi\nRUN if [ ${INSTALL_AEROSPIKE} = false ] ; then rm /etc/php/5.6/cli/conf.d/aerospike.ini ; fi\n#  ####################################\n#   Non-root user : PHPUnit path\n#  ####################################\n#   add ./vendor/bin to non-root user's bashrc (needed for phpunit)\nUSER laradock\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'export PATH=\"/var/www/vendor/bin:$PATH\"' >> ~/.bashrc\n#  ####################################\n#   Laravel Artisan Alias\n#  ####################################\nUSER root\nRUN echo \"\" >> ~/.bashrc \\\n && echo 'alias art=\"php artisan\"' >> ~/.bashrc\n#  ####################################\n#   Laravel Envoy:\n#  ####################################\nUSER laradock\nARG INSTALL_LARAVEL_ENVOY=true\nENV INSTALL_LARAVEL_ENVOY=\"${INSTALL_LARAVEL_ENVOY}\"\nRUN if [ ${INSTALL_LARAVEL_ENVOY} = true ] ; then composer global require \"laravel/envoy=~1.0\" ; fi\n#  ####################################\n#   Deployer:\n#  ####################################\nUSER laradock\nARG INSTALL_DEPLOYER=false\nENV INSTALL_DEPLOYER=\"${INSTALL_DEPLOYER}\"\nRUN if [ ${INSTALL_DEPLOYER} = true ] ; then composer global require \"deployer/deployer\" ; fi\n#  ####################################\n#   Linuxbrew:\n#  ####################################\nUSER root\nARG INSTALL_LINUXBREW=true\nENV INSTALL_LINUXBREW=\"${INSTALL_LINUXBREW}\"\nRUN if [ ${INSTALL_LINUXBREW} = true ] ; then apt-get upgrade -y \\\n && apt-get install build-essential make cmake scons curl git ruby autoconf automake autoconf-archive gettext libtool flex bison libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev -y \\\n && git clone --depth=1 https://github.com/Homebrew/linuxbrew.git ~/.linuxbrew \\\n && echo \"\" >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH\"=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LINUXBREWHOME=\"$HOME/.linuxbrew\"' >> ~/.bashrc \\\n && echo 'export PATH=\"$LINUXBREWHOME/bin:$PATH\"' >> ~/.bashrc \\\n && echo 'export MANPATH=\"$LINUXBREWHOME/man:$MANPATH\"' >> ~/.bashrc \\\n && echo 'export PKG_CONFIG_PATH=\"$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH\"' >> ~/.bashrc \\\n && echo 'export LD_LIBRARY_PATH=\"$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH\"' >> ~/.bashrc; fi\n#  ####################################\n#   Minio:\n#  ####################################\nUSER root\nARG INSTALL_MC=false\nENV INSTALL_MC=\"${INSTALL_MC}\"\nCOPY mc/config.json /root/.mc/config.json\nRUN if [ ${INSTALL_MC} = true ] ; then curl -fsSL -o /usr/local/bin/mc https://dl.minio.io/client/mc/release/linux-amd64/mc \\\n && chmod +x /usr/local/bin/mc ; fi\nUSER laradock\n#  ####################################\n#   MySQL client\n#  ####################################\nUSER root\nARG INSTALL_MYSQL_CLIENT=false\nENV INSTALL_MYSQL_CLIENT=\"${INSTALL_MYSQL_CLIENT}\"\nRUN if [ ${INSTALL_MYSQL_CLIENT} = true ] ; then apt-get update \\\n && apt-get install mysql-client -y ; fi\n#  ####################################\n#   PostgreSQL client\n#  ####################################\nUSER root\nARG INSTALL_PGSQL_CLIENT=false\nENV INSTALL_PGSQL_CLIENT=\"${INSTALL_PGSQL_CLIENT}\"\nRUN if [ ${INSTALL_PGSQL_CLIENT} = true ] ; then apt-get update \\\n && apt-get install postgresql-client -y ; fi\n#\n#  --------------------------------------------------------------------------\n#   Final Touch\n#  --------------------------------------------------------------------------\n#\n#   Clean up\nUSER root\nRUN apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#   Set default work directory\nWORKDIR /var/www\n","originalDockerfileUglifiedHash":"be03bb1bd7eb23d6ef03c392542d01e2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/369712d3876b850d88bb2647ddb4aed733a105a7.dockerfile"}