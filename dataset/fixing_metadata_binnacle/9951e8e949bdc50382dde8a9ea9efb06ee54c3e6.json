{"seed":3125069729,"processedDockerfileHash":"855b740a2991455f99ca6e935100a419","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ##################################################\n#   Stage 1 - docker container to build ensembl-vep #\n#  ##################################################\nFROM ubuntu:18.04 AS builder\n#   Update aptitude and install some required packages\n#   a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 git=1:2.17.1-1ubuntu0.17 libpng-dev=1.6.34-1ubuntu0.18.04.2 perl=5.26.1-6ubuntu0.6 perl-base=5.26.1-6ubuntu0.6 unzip=6.0-21ubuntu1.2 wget=1.19.4-1ubuntu2.2 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\n#   Branch to clone, e.g. \"-b release/96\"\nENV BRANCH=\"\\\"\n#   Working directory\nWORKDIR $OPT_SRC\n#   Clone/download repositories/libraries\n#   Clone ensembl git repository and extract useful ensemb core file\nRUN git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl.git \\\n && cp ensembl/cpanfile ensembl_cpanfile \\\n && rm -rf ensembl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-vep.git \\\n && chmod u+x ensembl-vep/*.pl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-variation.git \\\n && mkdir var_c_code \\\n && cp ensembl-variation/C_code/*.c ensembl-variation/C_code/Makefile var_c_code/ \\\n && rm -rf ensembl-variation \\\n && chmod u+x var_c_code/* \\\n && git clone --depth 1 https://github.com/bioperl/bioperl-ext.git \\\n && wget https://github.com/Ensembl/ensembl-xs/archive/2.3.2.zip -O ensembl-xs.zip \\\n && unzip -q ensembl-xs.zip \\\n && mv ensembl-xs-2.3.2 ensembl-xs \\\n && rm -rf ensembl-xs.zip \\\n && ensembl-vep/travisci/get_dependencies.sh \\\n && mv bioperl-live bioperl-live_bak \\\n && mkdir bioperl-live \\\n && mv bioperl-live_bak/Bio bioperl-live/ \\\n && rm -rf bioperl-live_bak \\\n && rm -rf Bio-HTS/.??* Bio-HTS/Changes Bio-HTS/DISCLAIMER Bio-HTS/MANIFEST* Bio-HTS/README Bio-HTS/scripts Bio-HTS/t Bio-HTS/travisci bioperl-ext/.??* bioperl-ext/Bio/SeqIO bioperl-ext/Bio/Tools bioperl-ext/Makefile.PL bioperl-ext/README* bioperl-ext/t bioperl-ext/examples ensembl-vep/.??* ensembl-vep/docker ensembl-xs/.??* ensembl-xs/Changes ensembl-xs/INSTALL ensembl-xs/MANIFEST ensembl-xs/README ensembl-xs/t ensembl-xs/travisci htslib/.??* htslib/INSTALL htslib/NEWS htslib/README* htslib/test \\\n && mv kent-335_base kent-335_base_bak \\\n && mkdir -p kent-335_base/src \\\n && cp -R kent-335_base_bak/confs kent-335_base/ \\\n && cp -R kent-335_base_bak/src/lib kent-335_base_bak/src/inc kent-335_base_bak/src/jkOwnLib kent-335_base/src/ \\\n && cp kent-335_base_bak/src/*.sh kent-335_base/src/ \\\n && rm -rf kent-335_base_bak\n#   Setup bioperl-ext\nWORKDIR bioperl-ext/Bio/Ext/Align/\nRUN perl -pi -e\"s|(cd libs.+)CFLAGS=\\'|$1CFLAGS=\\'-fPIC |\" Makefile.PL\n#   Install htslib binaries (need bgzip, tabix)\nWORKDIR $HTSLIB_DIR\nRUN make install \\\n && rm -f Makefile *.c cram/*.c\n#   Compile Variation LD C scripts\nWORKDIR $OPT_SRC/var_c_code\nRUN make \\\n && rm -f Makefile *.c\n#  ##################################################\n#   Stage 2 - docker container to build ensembl-vep #\n#  ##################################################\nFROM ubuntu:18.04\n#   Update aptitude and install some required packages\n#   a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 cpanminus=1.7043-1 curl=7.58.0-2ubuntu3.24 libmysqlclient-dev=5.7.41-0ubuntu0.18.04.1 libpng-dev=1.6.34-1ubuntu0.18.04.2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 locales=2.27-3ubuntu1.6 openssl=1.1.1-1ubuntu2.1~18.04.21 perl=5.26.1-6ubuntu0.6 perl-base=5.26.1-6ubuntu0.6 unzip=6.0-21ubuntu1.2 vim=2:8.0.1453-1ubuntu1.11 -y \\\n && apt-get -y purge manpages-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV PERL5LIB_TMP=\"$PERL5LIB:$OPT_SRC/ensembl-vep:$OPT_SRC/ensembl-vep/modules\"\nENV PERL5LIB=\"$PERL5LIB_TMP:$OPT_SRC/bioperl-live\"\nENV KENT_SRC=\"$OPT/src/kent-335_base/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\nENV MACHTYPE=\"x86_64\"\nENV DEPS=\"$OPT_SRC\"\nENV PATH=\"$OPT_SRC/ensembl-vep:$OPT_SRC/var_c_code:$PATH\"\nENV LANG_VAR=\"en_US.UTF-8\"\n#   Create vep user\nRUN useradd -r -m -U -d \"$OPT\" -s /bin/bash -c \"VEP User\" -p '' vep \\\n && usermod -a -G sudo vep \\\n && mkdir -p $OPT_SRC\nUSER vep\n#   Copy downloaded libraries (stage 1) to this image (stage 2)\nCOPY --chown=vep:vep --from=builder $OPT_SRC $OPT_SRC\n#  ############################################################\n#   Change user to root for the following complilations/installations\nUSER root\n#   Install bioperl-ext, faster alignments for haplo (XS-based BioPerl extensions to C libraries)\nWORKDIR $OPT_SRC/bioperl-ext/Bio/Ext/Align/\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\n#   Install ensembl-xs, faster run using re-implementation in C of some of the Perl subroutines\nWORKDIR $OPT_SRC/ensembl-xs\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\nWORKDIR $OPT_SRC\n#   Install/compile more libraries\nRUN ensembl-vep/travisci/build_c.sh \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl_cpanfile . \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl-vep/cpanfile . \\\n && rm -rf bioperl-live \\\n && echo \"$LANG_VAR UTF-8\" >> /etc/locale.gen \\\n && locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=$LANG_VAR \\\n && cp $HTSLIB_DIR/bgzip $HTSLIB_DIR/tabix $HTSLIB_DIR/htsfile /usr/local/bin/\nENV LC_ALL=\"$LANG_VAR\"\nENV LANG=\"$LANG_VAR\"\n#   Switch back to vep user\nUSER vep\nENV PERL5LIB=\"$PERL5LIB_TMP\"\n#   Final steps\nWORKDIR $OPT_SRC/ensembl-vep\n#   Update bash profile\nRUN echo >> $OPT/.profile \\\n && echo PATH=$PATH:$PATH >> $OPT/.profile \\\n && echo export PATH >> $OPT/.profile \\\n && ./INSTALL.pl -a ap -g miRNA,LoF -l \\\n && rm -rf t travisci .travis.yml\nWORKDIR /\nCOPY loftee.tgz $OPT/src/ensembl-vep/modules\n#  ###################################################\n#   Stage 3 - adding functionality for PCGR analysis #\n#  ###################################################\nUSER root\nRUN apt-get update \\\n && apt-get install --no-install-recommends python3-pip=9.0.1-2.3~ubuntu1.18.04.8 python3-dev=3.6.7-1~18.04 -y \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN apt-get update \\\n && apt-get install --no-install-recommends apache2=2.4.29-1ubuntu4.27 apt-utils=1.6.14 build-essential=12.4ubuntu1 cpanminus=1.7043-1 curl=7.58.0-2ubuntu3.24 git=1:2.17.1-1ubuntu0.17 libmysqlclient-dev=5.7.41-0ubuntu0.18.04.1 libpng-dev=1.6.34-1ubuntu0.18.04.2 libssl-dev=1.1.1-1ubuntu2.1~18.04.21 manpages=4.15-1 mysql-client=5.7.41-0ubuntu0.18.04.1 openssl=1.1.1-1ubuntu2.1~18.04.21 perl=5.26.1-6ubuntu0.6 perl-base=5.26.1-6ubuntu0.6 unzip=6.0-21ubuntu1.2 vim=2:8.0.1453-1ubuntu1.11 wget=1.19.4-1ubuntu2.2 sudo=1.8.21p2-3ubuntu1.5 -y\n#   install ensembl dependencies\nRUN cpanm Test::Object PPI::Document Task::Weaken Test::SubCalls Test::Object DBI DBD::mysql Archive::Zip Perl::Critic Set::IntervalTree\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=1.6.14\nRUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\nRUN sudo apt-get update \\\n && sudo apt-get -y install software-properties-common\nENV TZ=\"Europe/Minsk\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\nRUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'\n#  RUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'\nRUN apt-get update \\\n && apt-get install --no-install-recommends r-base=3.4.4-1ubuntu1 -y\nUSER root\nWORKDIR /\nENV PACKAGE_BIO=\"libhts2 bedtools\"\nENV PACKAGE_DEV=\"gfortran gcc-multilib autoconf liblzma-dev libncurses5-dev libblas-dev liblapack-dev libssh2-1-dev libxml2-dev vim libssl-dev libcairo2-dev libbz2-dev libcurl4-openssl-dev\"\nENV PYTHON_MODULES=\"numpy cython scipy pandas cyvcf2 toml\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends nano=2.9.3-2 ed=1.10-2.1 locales=2.27-3ubuntu1.6 vim-tiny=2:8.0.1453-1ubuntu1.11 fonts-texgyre=20160520-1 $PACKAGE_DEV $PACKAGE_BIO -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get autoremove\nRUN apt-get update \\\n && apt-get install --no-install-recommends r-base-core=3.4.4-1ubuntu1 r-recommended=3.4.4-1ubuntu1 r-base=3.4.4-1ubuntu1 -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpq-dev=10.23-0ubuntu0.18.04.1 libxt-dev=1:1.1.5-1 libudunits2-dev=2.2.26-1 -y\nRUN wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\nRUN bunzip2 -dc samtools-1.9.tar.bz2 | tar xvf -\nRUN cd samtools-1.9 \\\n && ./configure --prefix=/usr/local/bin \\\n && make \\\n && make install\nWORKDIR /\nRUN R -e \"install.packages(c('BiocManager','devtools'))\"\nRUN R -e \"BiocManager::install(\\\"ComplexHeatmap\\\")\"\nRUN R -e \"BiocManager::install(\\\"VariantAnnotation\\\")\"\nRUN R -e \"BiocManager::install(\\\"Biostrings\\\")\"\n#  # Install maftools from github repository.\nRUN R -e \"library(\\\"devtools\\\")\"\nRUN R -e \"devtools::install_github(repo = \\\"PoisonAlien/maftools\\\")\"\n#  # Install other bioconductor/cran packages\nRUN R -e \"BiocManager::install(c('regioneR','MutationalPatterns','deconstructSigs', 'BSgenome.Hsapiens.UCSC.hg19','BSgenome.Hsapiens.UCSC.hg38','GenomeInfoDb','GenomicRanges','S4Vectors','karyoploteR'))\"\nRUN R -e \"install.packages(c('configr','rmarkdown','httr','git2r','data.table','tidyverse','htmltools','caret','randomForest','plotly','RcppTOML','SeqKat'), dependencies = T, repos = 'http://cran.us.r-project.org')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/DT'); devtools::install_github('mjkallen/rlogging'); devtools::install_github('kent37/summarywidget')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/crosstalk')\"\nRUN rm -rf /tmp/R*\n#  # Install vcfanno version 0.3.1\nRUN wget https://github.com/brentp/vcfanno/releases/download/v0.3.1/vcfanno_linux64 \\\n && mv vcfanno_linux64 vcfanno \\\n && mv vcfanno /usr/local/bin \\\n && chmod 755 /usr/local/bin/vcfanno\n#  # Install Ensembl's Vcf-validator\nRUN wget https://github.com/EBIvariation/vcf-validator/releases/download/v0.6/vcf_validator \\\n && mv vcf_validator /usr/local/bin/ \\\n && chmod 755 /usr/local/bin/vcf_validator\n#  # Install pandoc (for HTML report generation)\nRUN wget https://github.com/jgm/pandoc/releases/download/2.6/pandoc-2.6-1-amd64.deb \\\n && dpkg -i pandoc* \\\n && rm pandoc* \\\n && apt-get clean\nUSER root\nWORKDIR /\n#  # Install tools used for compilation\nRUN sudo -H pip install --upgrade pip\nRUN sudo -H pip install -U setuptools\nRUN sudo -H pip install $PYTHON_MODULES\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake=3.10.2-1ubuntu2.18.04.2 -y\nRUN wget https://github.com/stevengj/nlopt/archive/v2.5.0.tar.gz \\\n && gzip -dc v2.5.0.tar.gz | tar xvf - \\\n && cd nlopt-2.5.0 \\\n && cmake . \\\n && make \\\n && make install\nUSER root\nWORKDIR /\nRUN git clone https://github.com/atks/vt.git\nWORKDIR vt\nRUN make\nRUN make test\nRUN cp vt /usr/local/bin\nRUN export PATH=/usr/local/bin:$PATH\n#  # Install mosdepth through miniconda\nWORKDIR /\nENV HOME=\"/usr/local\"\nRUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b\nENV PATH=\"$PATH:/usr/local/miniconda3/bin:\"\nRUN conda config --add channels bioconda\nRUN conda install mosdepth\nRUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n#  # Add local PCGR R package\nWORKDIR /\nCOPY R/ /\nRUN R -e \"devtools::install_github('mjkallen/rlogging')\"\nRUN R -e \"devtools::install('pcgrr')\"\nRUN R -e \"devtools::install_github('hms-dbmi/UpSetR')\"\nRUN R -e \"devtools::install_github('kassambara/ggpubr')\"\n#   Add local PCGR Python scripts/libraries\nCOPY pcgr.tgz /\nENV PATH=\"$PATH:/pcgr\"\nENV PYTHONPATH=\":/pcgr/lib:${PYTHONPATH}\"\n#  ENV VCFANNO_DATA_DOCKER=\"/data\"\nWORKDIR /\nRUN curl -L -o mskcc-vcf2maf.tar.gz https://api.github.com/repos/mskcc/vcf2maf/tarball/v1.6.16\nRUN tar -zxf mskcc-vcf2maf.tar.gz\nRUN chmod 755 /mskcc-vcf2maf-*/*.pl\nRUN ln -s /mskcc-vcf2maf-*/vcf2maf.pl /usr/local/bin/vcf2maf.pl\n#  # Clean Up\nRUN apt-get clean autoclean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm -rf /var/lib/{dpkg,cache,log}\nVOLUME /workdir\nWORKDIR /workdir/\nUSER root\nRUN mkdir /data \\\n && chmod 777 /data\nWORKDIR /data\nVOLUME /data\nWORKDIR /\nCOPY pcgr.R /\nCOPY cpsr.R /\nUSER root\nWORKDIR /\nRUN rm -f nlopt-2.5.0.tar.gz\nRUN rm -rf $HOME/src/ensembl-vep/t/\nRUN rm -f $HOME/src/v335_base.tar.gz\nRUN rm -f $HOME/src/release-1-6-924.zip\nRUN rm -rf /vt\nRUN rm -rf /samtools-1.9.tar.bz2\nRUN rm -rf /mskcc-vcf2maf.tar.gz\nENV PATH=\"/usr/local/bin/bin:$PATH\"\n#   WORKDIR /\n#   ENV HOME=/usr/local\n#   RUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n#   RUN bash Miniconda3-latest-Linux-x86_64.sh -b\n#   ENV PATH=$PATH:/usr/local/miniconda3/bin:\n#   RUN conda config --add channels bioconda\n#   RUN conda install mosdepth\n#   RUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ##################################################\n#  Stage 1 - docker container to build ensembl-vep #\n# ##################################################\nFROM ubuntu:18.04 AS builder\n#  Update aptitude and install some required packages\n#  a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install build-essential git libpng-dev perl perl-base unzip wget -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\n#  Branch to clone, e.g. \"-b release/96\"\nENV BRANCH=\"\"\\\"\"\n#  Working directory\nWORKDIR $OPT_SRC\n#  Clone/download repositories/libraries\n#  Clone ensembl git repository and extract useful ensemb core file\nRUN git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl.git \\\n && cp ensembl/cpanfile ensembl_cpanfile \\\n && rm -rf ensembl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-vep.git \\\n && chmod u+x ensembl-vep/*.pl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-variation.git \\\n && mkdir var_c_code \\\n && cp ensembl-variation/C_code/*.c ensembl-variation/C_code/Makefile var_c_code/ \\\n && rm -rf ensembl-variation \\\n && chmod u+x var_c_code/* \\\n && git clone --depth 1 https://github.com/bioperl/bioperl-ext.git \\\n && wget https://github.com/Ensembl/ensembl-xs/archive/2.3.2.zip -O ensembl-xs.zip \\\n && unzip -q ensembl-xs.zip \\\n && mv ensembl-xs-2.3.2 ensembl-xs \\\n && rm -rf ensembl-xs.zip \\\n && ensembl-vep/travisci/get_dependencies.sh \\\n && mv bioperl-live bioperl-live_bak \\\n && mkdir bioperl-live \\\n && mv bioperl-live_bak/Bio bioperl-live/ \\\n && rm -rf bioperl-live_bak \\\n && rm -rf Bio-HTS/.??* Bio-HTS/Changes Bio-HTS/DISCLAIMER Bio-HTS/MANIFEST* Bio-HTS/README Bio-HTS/scripts Bio-HTS/t Bio-HTS/travisci bioperl-ext/.??* bioperl-ext/Bio/SeqIO bioperl-ext/Bio/Tools bioperl-ext/Makefile.PL bioperl-ext/README* bioperl-ext/t bioperl-ext/examples ensembl-vep/.??* ensembl-vep/docker ensembl-xs/.??* ensembl-xs/Changes ensembl-xs/INSTALL ensembl-xs/MANIFEST ensembl-xs/README ensembl-xs/t ensembl-xs/travisci htslib/.??* htslib/INSTALL htslib/NEWS htslib/README* htslib/test \\\n && mv kent-335_base kent-335_base_bak \\\n && mkdir -p kent-335_base/src \\\n && cp -R kent-335_base_bak/confs kent-335_base/ \\\n && cp -R kent-335_base_bak/src/lib kent-335_base_bak/src/inc kent-335_base_bak/src/jkOwnLib kent-335_base/src/ \\\n && cp kent-335_base_bak/src/*.sh kent-335_base/src/ \\\n && rm -rf kent-335_base_bak\n#  Setup bioperl-ext\nWORKDIR bioperl-ext/Bio/Ext/Align/\nRUN perl -pi -e\"s|(cd libs.+)CFLAGS=\\\\'|$1CFLAGS=\\\\'-fPIC |\" Makefile.PL\n#  Install htslib binaries (need bgzip, tabix)\nWORKDIR $HTSLIB_DIR\nRUN make install \\\n && rm -f Makefile *.c cram/*.c\n#  Compile Variation LD C scripts\nWORKDIR $OPT_SRC/var_c_code\nRUN make \\\n && rm -f Makefile *.c\n# ##################################################\n#  Stage 2 - docker container to build ensembl-vep #\n# ##################################################\nFROM ubuntu:18.04\n#  Update aptitude and install some required packages\n#  a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install build-essential cpanminus curl libmysqlclient-dev libpng-dev libssl-dev locales openssl perl perl-base unzip vim -y \\\n && apt-get -y purge manpages-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#  Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV PERL5LIB_TMP=\"$PERL5LIB:$OPT_SRC/ensembl-vep:$OPT_SRC/ensembl-vep/modules\"\nENV PERL5LIB=\"$PERL5LIB_TMP:$OPT_SRC/bioperl-live\"\nENV KENT_SRC=\"$OPT/src/kent-335_base/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\nENV MACHTYPE=\"x86_64\"\nENV DEPS=\"$OPT_SRC\"\nENV PATH=\"$OPT_SRC/ensembl-vep:$OPT_SRC/var_c_code:$PATH\"\nENV LANG_VAR=\"en_US.UTF-8\"\n#  Create vep user\nRUN useradd -r -m -U -d \"$OPT\" -s /bin/bash -c \"VEP User\" -p '' vep \\\n && usermod -a -G sudo vep \\\n && mkdir -p $OPT_SRC\nUSER vep\n#  Copy downloaded libraries (stage 1) to this image (stage 2)\nCOPY --chown=vep:vep --from=builder $OPT_SRC $OPT_SRC\n# ############################################################\n#  Change user to root for the following complilations/installations\nUSER root\n#  Install bioperl-ext, faster alignments for haplo (XS-based BioPerl extensions to C libraries)\nWORKDIR $OPT_SRC/bioperl-ext/Bio/Ext/Align/\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\n#  Install ensembl-xs, faster run using re-implementation in C of some of the Perl subroutines\nWORKDIR $OPT_SRC/ensembl-xs\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\nWORKDIR $OPT_SRC\n#  Install/compile more libraries\nRUN ensembl-vep/travisci/build_c.sh \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl_cpanfile . \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl-vep/cpanfile . \\\n && rm -rf bioperl-live \\\n && echo \"$LANG_VAR UTF-8\" >> /etc/locale.gen \\\n && locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=$LANG_VAR \\\n && cp $HTSLIB_DIR/bgzip $HTSLIB_DIR/tabix $HTSLIB_DIR/htsfile /usr/local/bin/\nENV LC_ALL=\"$LANG_VAR\"\nENV LANG=\"$LANG_VAR\"\n#  Switch back to vep user\nUSER vep\nENV PERL5LIB=\"$PERL5LIB_TMP\"\n#  Final steps\nWORKDIR $OPT_SRC/ensembl-vep\n#  Update bash profile\nRUN echo >> $OPT/.profile \\\n && echo PATH=$PATH:$PATH >> $OPT/.profile \\\n && echo export PATH >> $OPT/.profile \\\n && ./INSTALL.pl -a ap -g miRNA,LoF -l \\\n && rm -rf t travisci .travis.yml\nWORKDIR /\nADD loftee.tgz $OPT/src/ensembl-vep/modules\n# ###################################################\n#  Stage 3 - adding functionality for PCGR analysis #\n# ###################################################\nUSER root\nRUN apt-get update \\\n && apt-get install python3-pip python3-dev -y \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN apt-get update \\\n && apt-get install apache2 apt-utils build-essential cpanminus curl git libmysqlclient-dev libpng-dev libssl-dev manpages mysql-client openssl perl perl-base unzip vim wget sudo -y\n#  install ensembl dependencies\nRUN cpanm Test::Object PPI::Document Task::Weaken Test::SubCalls Test::Object DBI DBD::mysql Archive::Zip Perl::Critic Set::IntervalTree\nRUN apt-get update \\\n && apt-get install apt-transport-https\nRUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\nRUN sudo apt-get update \\\n && sudo apt-get -y install software-properties-common\nENV TZ=\"Europe/Minsk\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\nRUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'\n# RUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'\nRUN apt-get update \\\n && apt-get install r-base -y\nUSER root\nWORKDIR /\nENV PACKAGE_BIO=\"libhts2 bedtools\"\nENV PACKAGE_DEV=\"gfortran gcc-multilib autoconf liblzma-dev libncurses5-dev libblas-dev liblapack-dev libssh2-1-dev libxml2-dev vim libssl-dev libcairo2-dev libbz2-dev libcurl4-openssl-dev\"\nENV PYTHON_MODULES=\"numpy cython scipy pandas cyvcf2 toml\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends nano ed locales vim-tiny fonts-texgyre $PACKAGE_DEV $PACKAGE_BIO -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get autoremove\nRUN apt-get update \\\n && apt-get install --no-install-recommends r-base-core r-recommended r-base -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpq-dev libxt-dev libudunits2-dev -y\nRUN wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\nRUN bunzip2 -dc samtools-1.9.tar.bz2 | tar xvf -\nRUN cd samtools-1.9 \\\n && ./configure --prefix=/usr/local/bin \\\n && make \\\n && make install\nWORKDIR /\nRUN R -e \"install.packages(c('BiocManager','devtools'))\"\nRUN R -e \"BiocManager::install(\\\"ComplexHeatmap\\\")\"\nRUN R -e \"BiocManager::install(\\\"VariantAnnotation\\\")\"\nRUN R -e \"BiocManager::install(\\\"Biostrings\\\")\"\n# # Install maftools from github repository.\nRUN R -e \"library(\\\"devtools\\\")\"\nRUN R -e \"devtools::install_github(repo = \\\"PoisonAlien/maftools\\\")\"\n# # Install other bioconductor/cran packages\nRUN R -e \"BiocManager::install(c('regioneR','MutationalPatterns','deconstructSigs', 'BSgenome.Hsapiens.UCSC.hg19','BSgenome.Hsapiens.UCSC.hg38','GenomeInfoDb','GenomicRanges','S4Vectors','karyoploteR'))\"\nRUN R -e \"install.packages(c('configr','rmarkdown','httr','git2r','data.table','tidyverse','htmltools','caret','randomForest','plotly','RcppTOML','SeqKat'), dependencies = T, repos = 'http://cran.us.r-project.org')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/DT'); devtools::install_github('mjkallen/rlogging'); devtools::install_github('kent37/summarywidget')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/crosstalk')\"\nRUN rm -rf /tmp/R*\n# # Install vcfanno version 0.3.1\nRUN wget https://github.com/brentp/vcfanno/releases/download/v0.3.1/vcfanno_linux64 \\\n && mv vcfanno_linux64 vcfanno \\\n && mv vcfanno /usr/local/bin \\\n && chmod 755 /usr/local/bin/vcfanno\n# # Install Ensembl's Vcf-validator\nRUN wget https://github.com/EBIvariation/vcf-validator/releases/download/v0.6/vcf_validator \\\n && mv vcf_validator /usr/local/bin/ \\\n && chmod 755 /usr/local/bin/vcf_validator\n# # Install pandoc (for HTML report generation)\nRUN wget https://github.com/jgm/pandoc/releases/download/2.6/pandoc-2.6-1-amd64.deb \\\n && dpkg -i pandoc* \\\n && rm pandoc* \\\n && apt-get clean\nUSER root\nWORKDIR /\n# # Install tools used for compilation\nRUN sudo -H pip install --upgrade pip\nRUN sudo -H pip install -U setuptools\nRUN sudo -H pip install $PYTHON_MODULES\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake -y\nRUN wget https://github.com/stevengj/nlopt/archive/v2.5.0.tar.gz \\\n && gzip -dc v2.5.0.tar.gz | tar xvf - \\\n && cd nlopt-2.5.0 \\\n && cmake . \\\n && make \\\n && make install\nUSER root\nWORKDIR /\nRUN git clone https://github.com/atks/vt.git\nWORKDIR vt\nRUN make\nRUN make test\nRUN cp vt /usr/local/bin\nRUN export PATH=/usr/local/bin:$PATH\n# # Install mosdepth through miniconda\nWORKDIR /\nENV HOME=\"/usr/local\"\nRUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b\nENV PATH=\"$PATH:/usr/local/miniconda3/bin:\"\nRUN conda config --add channels bioconda\nRUN conda install mosdepth\nRUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n# # Add local PCGR R package\nWORKDIR /\nADD R/ /\nRUN R -e \"devtools::install_github('mjkallen/rlogging')\"\nRUN R -e \"devtools::install('pcgrr')\"\nRUN R -e \"devtools::install_github('hms-dbmi/UpSetR')\"\nRUN R -e \"devtools::install_github('kassambara/ggpubr')\"\n#  Add local PCGR Python scripts/libraries\nADD pcgr.tgz /\nENV PATH=\"$PATH:/pcgr\"\nENV PYTHONPATH=\":/pcgr/lib:${PYTHONPATH}\"\n# ENV VCFANNO_DATA_DOCKER=\"/data\"\nWORKDIR /\nRUN curl -L -o mskcc-vcf2maf.tar.gz https://api.github.com/repos/mskcc/vcf2maf/tarball/v1.6.16\nRUN tar -zxf mskcc-vcf2maf.tar.gz\nRUN chmod 755 /mskcc-vcf2maf-*/*.pl\nRUN ln -s /mskcc-vcf2maf-*/vcf2maf.pl /usr/local/bin/vcf2maf.pl\n# # Clean Up\nRUN apt-get clean autoclean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm -rf /var/lib/{dpkg,cache,log}\nVOLUME /workdir\nWORKDIR /workdir/\nUSER root\nRUN mkdir /data \\\n && chmod 777 /data\nWORKDIR /data\nVOLUME /data\nWORKDIR /\nADD pcgr.R /\nADD cpsr.R /\nUSER root\nWORKDIR /\nRUN rm -f nlopt-2.5.0.tar.gz\nRUN rm -rf $HOME/src/ensembl-vep/t/\nRUN rm -f $HOME/src/v335_base.tar.gz\nRUN rm -f $HOME/src/release-1-6-924.zip\nRUN rm -rf /vt\nRUN rm -rf /samtools-1.9.tar.bz2\nRUN rm -rf /mskcc-vcf2maf.tar.gz\nENV PATH=\"/usr/local/bin/bin:$PATH\"\n#  WORKDIR /\n#  ENV HOME=/usr/local\n#  RUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n#  RUN bash Miniconda3-latest-Linux-x86_64.sh -b\n#  ENV PATH=$PATH:/usr/local/miniconda3/bin:\n#  RUN conda config --add channels bioconda\n#  RUN conda install mosdepth\n#  RUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n","injectedSmells":[],"originalDockerfileHash":"5ad274cc8e28e53e576d7d61ba44c7a1","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ##################################################\n#   Stage 1 - docker container to build ensembl-vep #\n#  ##################################################\nFROM ubuntu:18.04 AS builder\n#   Update aptitude and install some required packages\n#   a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install build-essential git libpng-dev perl perl-base unzip wget -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\n#   Branch to clone, e.g. \"-b release/96\"\nENV BRANCH=\"\\\"\n#   Working directory\nWORKDIR $OPT_SRC\n#   Clone/download repositories/libraries\n#   Clone ensembl git repository and extract useful ensemb core file\nRUN git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl.git \\\n && cp ensembl/cpanfile ensembl_cpanfile \\\n && rm -rf ensembl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-vep.git \\\n && chmod u+x ensembl-vep/*.pl \\\n && git clone $BRANCH --depth 1 https://github.com/Ensembl/ensembl-variation.git \\\n && mkdir var_c_code \\\n && cp ensembl-variation/C_code/*.c ensembl-variation/C_code/Makefile var_c_code/ \\\n && rm -rf ensembl-variation \\\n && chmod u+x var_c_code/* \\\n && git clone --depth 1 https://github.com/bioperl/bioperl-ext.git \\\n && wget https://github.com/Ensembl/ensembl-xs/archive/2.3.2.zip -O ensembl-xs.zip \\\n && unzip -q ensembl-xs.zip \\\n && mv ensembl-xs-2.3.2 ensembl-xs \\\n && rm -rf ensembl-xs.zip \\\n && ensembl-vep/travisci/get_dependencies.sh \\\n && mv bioperl-live bioperl-live_bak \\\n && mkdir bioperl-live \\\n && mv bioperl-live_bak/Bio bioperl-live/ \\\n && rm -rf bioperl-live_bak \\\n && rm -rf Bio-HTS/.??* Bio-HTS/Changes Bio-HTS/DISCLAIMER Bio-HTS/MANIFEST* Bio-HTS/README Bio-HTS/scripts Bio-HTS/t Bio-HTS/travisci bioperl-ext/.??* bioperl-ext/Bio/SeqIO bioperl-ext/Bio/Tools bioperl-ext/Makefile.PL bioperl-ext/README* bioperl-ext/t bioperl-ext/examples ensembl-vep/.??* ensembl-vep/docker ensembl-xs/.??* ensembl-xs/Changes ensembl-xs/INSTALL ensembl-xs/MANIFEST ensembl-xs/README ensembl-xs/t ensembl-xs/travisci htslib/.??* htslib/INSTALL htslib/NEWS htslib/README* htslib/test \\\n && mv kent-335_base kent-335_base_bak \\\n && mkdir -p kent-335_base/src \\\n && cp -R kent-335_base_bak/confs kent-335_base/ \\\n && cp -R kent-335_base_bak/src/lib kent-335_base_bak/src/inc kent-335_base_bak/src/jkOwnLib kent-335_base/src/ \\\n && cp kent-335_base_bak/src/*.sh kent-335_base/src/ \\\n && rm -rf kent-335_base_bak\n#   Setup bioperl-ext\nWORKDIR bioperl-ext/Bio/Ext/Align/\nRUN perl -pi -e\"s|(cd libs.+)CFLAGS=\\'|$1CFLAGS=\\'-fPIC |\" Makefile.PL\n#   Install htslib binaries (need bgzip, tabix)\nWORKDIR $HTSLIB_DIR\nRUN make install \\\n && rm -f Makefile *.c cram/*.c\n#   Compile Variation LD C scripts\nWORKDIR $OPT_SRC/var_c_code\nRUN make \\\n && rm -f Makefile *.c\n#  ##################################################\n#   Stage 2 - docker container to build ensembl-vep #\n#  ##################################################\nFROM ubuntu:18.04\n#   Update aptitude and install some required packages\n#   a lot of them are required for Bio::DB::BigFile\nRUN apt-get update \\\n && apt-get install build-essential cpanminus curl libmysqlclient-dev libpng-dev libssl-dev locales openssl perl perl-base unzip vim -y \\\n && apt-get -y purge manpages-dev \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n#   Setup VEP environment\nENV OPT=\"/opt/vep\"\nENV OPT_SRC=\"$OPT/src\"\nENV PERL5LIB_TMP=\"$PERL5LIB:$OPT_SRC/ensembl-vep:$OPT_SRC/ensembl-vep/modules\"\nENV PERL5LIB=\"$PERL5LIB_TMP:$OPT_SRC/bioperl-live\"\nENV KENT_SRC=\"$OPT/src/kent-335_base/src\"\nENV HTSLIB_DIR=\"$OPT_SRC/htslib\"\nENV MACHTYPE=\"x86_64\"\nENV DEPS=\"$OPT_SRC\"\nENV PATH=\"$OPT_SRC/ensembl-vep:$OPT_SRC/var_c_code:$PATH\"\nENV LANG_VAR=\"en_US.UTF-8\"\n#   Create vep user\nRUN useradd -r -m -U -d \"$OPT\" -s /bin/bash -c \"VEP User\" -p '' vep \\\n && usermod -a -G sudo vep \\\n && mkdir -p $OPT_SRC\nUSER vep\n#   Copy downloaded libraries (stage 1) to this image (stage 2)\nCOPY --chown=vep:vep --from=builder $OPT_SRC $OPT_SRC\n#  ############################################################\n#   Change user to root for the following complilations/installations\nUSER root\n#   Install bioperl-ext, faster alignments for haplo (XS-based BioPerl extensions to C libraries)\nWORKDIR $OPT_SRC/bioperl-ext/Bio/Ext/Align/\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\n#   Install ensembl-xs, faster run using re-implementation in C of some of the Perl subroutines\nWORKDIR $OPT_SRC/ensembl-xs\nRUN perl Makefile.PL \\\n && make \\\n && make install \\\n && rm -f Makefile*\nWORKDIR $OPT_SRC\n#   Install/compile more libraries\nRUN ensembl-vep/travisci/build_c.sh \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl_cpanfile . \\\n && cpanm --installdeps --with-recommends --notest --cpanfile ensembl-vep/cpanfile . \\\n && rm -rf bioperl-live \\\n && echo \"$LANG_VAR UTF-8\" >> /etc/locale.gen \\\n && locale-gen en_US.utf8 \\\n && /usr/sbin/update-locale LANG=$LANG_VAR \\\n && cp $HTSLIB_DIR/bgzip $HTSLIB_DIR/tabix $HTSLIB_DIR/htsfile /usr/local/bin/\nENV LC_ALL=\"$LANG_VAR\"\nENV LANG=\"$LANG_VAR\"\n#   Switch back to vep user\nUSER vep\nENV PERL5LIB=\"$PERL5LIB_TMP\"\n#   Final steps\nWORKDIR $OPT_SRC/ensembl-vep\n#   Update bash profile\nRUN echo >> $OPT/.profile \\\n && echo PATH=$PATH:$PATH >> $OPT/.profile \\\n && echo export PATH >> $OPT/.profile \\\n && ./INSTALL.pl -a ap -g miRNA,LoF -l \\\n && rm -rf t travisci .travis.yml\nWORKDIR /\nADD loftee.tgz $OPT/src/ensembl-vep/modules\n#  ###################################################\n#   Stage 3 - adding functionality for PCGR analysis #\n#  ###################################################\nUSER root\nRUN apt-get update \\\n && apt-get install python3-pip python3-dev -y \\\n && cd /usr/local/bin \\\n && ln -s /usr/bin/python3 python \\\n && pip3 install --upgrade pip\nRUN apt-get update \\\n && apt-get install apache2 apt-utils build-essential cpanminus curl git libmysqlclient-dev libpng-dev libssl-dev manpages mysql-client openssl perl perl-base unzip vim wget sudo -y\n#   install ensembl dependencies\nRUN cpanm Test::Object PPI::Document Task::Weaken Test::SubCalls Test::Object DBI DBD::mysql Archive::Zip Perl::Critic Set::IntervalTree\nRUN apt-get update \\\n && apt-get install apt-transport-https\nRUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\nRUN sudo apt-get update \\\n && sudo apt-get -y install software-properties-common\nENV TZ=\"Europe/Minsk\"\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone\nRUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'\n#  RUN sudo add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'\nRUN apt-get update \\\n && apt-get install r-base -y\nUSER root\nWORKDIR /\nENV PACKAGE_BIO=\"libhts2 bedtools\"\nENV PACKAGE_DEV=\"gfortran gcc-multilib autoconf liblzma-dev libncurses5-dev libblas-dev liblapack-dev libssh2-1-dev libxml2-dev vim libssl-dev libcairo2-dev libbz2-dev libcurl4-openssl-dev\"\nENV PYTHON_MODULES=\"numpy cython scipy pandas cyvcf2 toml\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends nano ed locales vim-tiny fonts-texgyre $PACKAGE_DEV $PACKAGE_BIO -y \\\n && rm -rf /var/lib/apt/lists/*\nRUN apt-get autoremove\nRUN apt-get update \\\n && apt-get install --no-install-recommends r-base-core r-recommended r-base -y\nRUN apt-get update \\\n && apt-get install --no-install-recommends libpq-dev libxt-dev libudunits2-dev -y\nRUN wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\nRUN bunzip2 -dc samtools-1.9.tar.bz2 | tar xvf -\nRUN cd samtools-1.9 \\\n && ./configure --prefix=/usr/local/bin \\\n && make \\\n && make install\nWORKDIR /\nRUN R -e \"install.packages(c('BiocManager','devtools'))\"\nRUN R -e \"BiocManager::install(\\\"ComplexHeatmap\\\")\"\nRUN R -e \"BiocManager::install(\\\"VariantAnnotation\\\")\"\nRUN R -e \"BiocManager::install(\\\"Biostrings\\\")\"\n#  # Install maftools from github repository.\nRUN R -e \"library(\\\"devtools\\\")\"\nRUN R -e \"devtools::install_github(repo = \\\"PoisonAlien/maftools\\\")\"\n#  # Install other bioconductor/cran packages\nRUN R -e \"BiocManager::install(c('regioneR','MutationalPatterns','deconstructSigs', 'BSgenome.Hsapiens.UCSC.hg19','BSgenome.Hsapiens.UCSC.hg38','GenomeInfoDb','GenomicRanges','S4Vectors','karyoploteR'))\"\nRUN R -e \"install.packages(c('configr','rmarkdown','httr','git2r','data.table','tidyverse','htmltools','caret','randomForest','plotly','RcppTOML','SeqKat'), dependencies = T, repos = 'http://cran.us.r-project.org')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/DT'); devtools::install_github('mjkallen/rlogging'); devtools::install_github('kent37/summarywidget')\"\nRUN R -e \"library(devtools); devtools::install_github('rstudio/crosstalk')\"\nRUN rm -rf /tmp/R*\n#  # Install vcfanno version 0.3.1\nRUN wget https://github.com/brentp/vcfanno/releases/download/v0.3.1/vcfanno_linux64 \\\n && mv vcfanno_linux64 vcfanno \\\n && mv vcfanno /usr/local/bin \\\n && chmod 755 /usr/local/bin/vcfanno\n#  # Install Ensembl's Vcf-validator\nRUN wget https://github.com/EBIvariation/vcf-validator/releases/download/v0.6/vcf_validator \\\n && mv vcf_validator /usr/local/bin/ \\\n && chmod 755 /usr/local/bin/vcf_validator\n#  # Install pandoc (for HTML report generation)\nRUN wget https://github.com/jgm/pandoc/releases/download/2.6/pandoc-2.6-1-amd64.deb \\\n && dpkg -i pandoc* \\\n && rm pandoc* \\\n && apt-get clean\nUSER root\nWORKDIR /\n#  # Install tools used for compilation\nRUN sudo -H pip install --upgrade pip\nRUN sudo -H pip install -U setuptools\nRUN sudo -H pip install $PYTHON_MODULES\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake -y\nRUN wget https://github.com/stevengj/nlopt/archive/v2.5.0.tar.gz \\\n && gzip -dc v2.5.0.tar.gz | tar xvf - \\\n && cd nlopt-2.5.0 \\\n && cmake . \\\n && make \\\n && make install\nUSER root\nWORKDIR /\nRUN git clone https://github.com/atks/vt.git\nWORKDIR vt\nRUN make\nRUN make test\nRUN cp vt /usr/local/bin\nRUN export PATH=/usr/local/bin:$PATH\n#  # Install mosdepth through miniconda\nWORKDIR /\nENV HOME=\"/usr/local\"\nRUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nRUN bash Miniconda3-latest-Linux-x86_64.sh -b\nENV PATH=\"$PATH:/usr/local/miniconda3/bin:\"\nRUN conda config --add channels bioconda\nRUN conda install mosdepth\nRUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n#  # Add local PCGR R package\nWORKDIR /\nADD R/ /\nRUN R -e \"devtools::install_github('mjkallen/rlogging')\"\nRUN R -e \"devtools::install('pcgrr')\"\nRUN R -e \"devtools::install_github('hms-dbmi/UpSetR')\"\nRUN R -e \"devtools::install_github('kassambara/ggpubr')\"\n#   Add local PCGR Python scripts/libraries\nADD pcgr.tgz /\nENV PATH=\"$PATH:/pcgr\"\nENV PYTHONPATH=\":/pcgr/lib:${PYTHONPATH}\"\n#  ENV VCFANNO_DATA_DOCKER=\"/data\"\nWORKDIR /\nRUN curl -L -o mskcc-vcf2maf.tar.gz https://api.github.com/repos/mskcc/vcf2maf/tarball/v1.6.16\nRUN tar -zxf mskcc-vcf2maf.tar.gz\nRUN chmod 755 /mskcc-vcf2maf-*/*.pl\nRUN ln -s /mskcc-vcf2maf-*/vcf2maf.pl /usr/local/bin/vcf2maf.pl\n#  # Clean Up\nRUN apt-get clean autoclean\nRUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nRUN rm -rf /var/lib/{dpkg,cache,log}\nVOLUME /workdir\nWORKDIR /workdir/\nUSER root\nRUN mkdir /data \\\n && chmod 777 /data\nWORKDIR /data\nVOLUME /data\nWORKDIR /\nADD pcgr.R /\nADD cpsr.R /\nUSER root\nWORKDIR /\nRUN rm -f nlopt-2.5.0.tar.gz\nRUN rm -rf $HOME/src/ensembl-vep/t/\nRUN rm -f $HOME/src/v335_base.tar.gz\nRUN rm -f $HOME/src/release-1-6-924.zip\nRUN rm -rf /vt\nRUN rm -rf /samtools-1.9.tar.bz2\nRUN rm -rf /mskcc-vcf2maf.tar.gz\nENV PATH=\"/usr/local/bin/bin:$PATH\"\n#   WORKDIR /\n#   ENV HOME=/usr/local\n#   RUN curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n#   RUN bash Miniconda3-latest-Linux-x86_64.sh -b\n#   ENV PATH=$PATH:/usr/local/miniconda3/bin:\n#   RUN conda config --add channels bioconda\n#   RUN conda install mosdepth\n#   RUN rm -rf /Miniconda3-latest-Linux-x86_64.sh\n","originalDockerfileUglifiedHash":"b7b6595b716de6f9a62a1b5c442789e2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9951e8e949bdc50382dde8a9ea9efb06ee54c3e6.dockerfile"}