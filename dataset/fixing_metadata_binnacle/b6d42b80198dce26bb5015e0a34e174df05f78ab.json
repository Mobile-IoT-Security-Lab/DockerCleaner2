{"seed":2531064584,"processedDockerfileHash":"7def3604b32971a25d602c541e45d133","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lablup/common-tensorflow:1.2-py36-cuda8 AS tf-binary\nFROM nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget curl git-core vim-tiny zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support gcc g++ make xz-utils libsqlite3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\n#  install Python 3\nRUN curl https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz -o /opt/python.tar.xz \\\n && cd /opt \\\n && tar xvf python.tar.xz \\\n && cd /opt/*/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ln -s -f /usr/local/bin/python3.6 /usr/bin/python\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#   Install CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\n#   As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#   we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir versioneer==0.17 \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir pillow \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#   Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.2 on Python 3.6 (CUDA 8.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#   Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#   Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#   vim: ft=dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lablup/common-tensorflow:1.2-py36-cuda8 AS tf-binary\nFROM nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update \\\n && apt-get install ca-certificates wget curl git-core vim-tiny zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support gcc g++ make xz-utils libsqlite3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\n# install Python 3\nRUN curl https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz -o /opt/python.tar.xz \\\n && cd /opt \\\n && tar xvf python.tar.xz \\\n && cd /opt/*/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ln -s -f /usr/local/bin/python3.6 /usr/bin/python\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#  Install CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\n#  As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#  we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir versioneer==0.17 \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir pillow \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#  Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.2 on Python 3.6 (CUDA 8.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#  Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#  Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#  vim: ft=dockerfile\n","injectedSmells":[],"originalDockerfileHash":"ba3d800fe975fbe3a67bc61f96dcfb08","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lablup/common-tensorflow:1.2-py36-cuda8 AS tf-binary\nFROM nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update \\\n && apt-get install ca-certificates wget curl git-core vim-tiny zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support gcc g++ make xz-utils libsqlite3-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\n#  install Python 3\nRUN curl https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz -o /opt/python.tar.xz \\\n && cd /opt \\\n && tar xvf python.tar.xz \\\n && cd /opt/*/ \\\n && ./configure \\\n && make \\\n && make install \\\n && ln -s -f /usr/local/bin/python3.6 /usr/bin/python\nRUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py \\\n && python get-pip.py \\\n && rm get-pip.py\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#   Install CUDA-8.0 + cuDNN 6.0\nRUN ln -s /usr/local/cuda-8.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6.0.21 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\n#   As we mostly have \"manylinux\" glibc-compatible binary packaes,\n#   we don't have to rebuild these!\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir versioneer==0.17 \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy==0.16 \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir pillow \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#   Install ipython kernelspec\nRUN python -m ipykernel install --display-name \"TensorFlow 1.2 on Python 3.6 (CUDA 8.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#   Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#   Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\n#   vim: ft=dockerfile\n","originalDockerfileUglifiedHash":"d78ce0c426497fc2627315948f7ec1b4","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b6d42b80198dce26bb5015e0a34e174df05f78ab.dockerfile"}