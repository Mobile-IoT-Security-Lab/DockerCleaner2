{"seed":2633076989,"processedDockerfileHash":"13d402d8809359bf009b1048a165071c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"ARG BASE_IMG\nFROM golang AS verify-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends patch=2.7.6-7 python3-pip=20.3.4-4+deb11u1 python3=3.9.2-3 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip3 install ply\nARG VPP_REPO_URL\nARG VPP_COMMIT\nRUN git clone ${VPP_REPO_URL} /opt/vpp \\\n && cd /opt/vpp \\\n && git checkout ${VPP_COMMIT}\nCOPY scripts/genjsonapi.sh /opt/genjsonapi.sh\nRUN /opt/genjsonapi.sh\nWORKDIR /go/src/github.com/ligato/vpp-agent\nCOPY plugins/vpp/binapi plugins/vpp/binapi\nCOPY vendor vendor\nCOPY Makefile vpp.env ./\nRUN cp -r plugins/vpp/binapi /tmp/orig_binapi \\\n && make generate-binapi \\\n && diff -r plugins/vpp/binapi /tmp/orig_binapi\nFROM ${BASE_IMG} AS dev-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.69-14 automake=1:1.16.3-2 build-essential=12.9 ca-certificates=20210119 curl=7.74.0-1.3+deb11u7 gdb=10.1-1.7 git=1:2.30.2-1+deb11u2 graphviz=2.42.2-5 inetutils-traceroute=2:2.0-1+deb11u1 iproute2=5.10.0-4 ipsec-tools iputils-ping=3:20210202-1 libapr1=1.7.0-6+deb11u2 libmbedcrypto1 libmbedtls10 libmbedx509-0=2.16.9-0.1 libtool=2.4.6-15 make=4.3-4.1 mc=3:4.8.26-1.1 nano=5.4-2+deb11u2 netcat=1.10-46 python software-properties-common=0.96.20.2-2.1 sudo=1.9.5p2-3+deb11u1 supervisor=4.2.2-2 telnet=0.17-42 unzip=6.0-26+deb11u1 wget=1.21-1+deb11u1 python-cffi python3-cffi=1.14.5-1 gcc-8 g++-8 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /usr/bin/gcc \\\n && rm /usr/bin/g++ \\\n && ln -s /usr/bin/gcc-8 /usr/bin/gcc \\\n && ln -s /usr/bin/g++-8 /usr/bin/g++\n#   install Protobuf\nARG PROTOC_VERSION=3.6.1\nARG PROTOC_OS_ARCH=linux_x86_64\nRUN wget -q https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip \\\n && unzip protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip -d protoc3 \\\n && mv protoc3/bin/protoc /usr/local/bin \\\n && mv protoc3/include/google /usr/local/include \\\n && rm -rf protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip protoc3\nRUN mkdir -p /opt/vpp-agent/dev /opt/vpp-agent/plugin\nWORKDIR /opt/vpp-agent/dev\nARG VPP_REPO_URL\nARG VPP_COMMIT\nARG VPP_DEBUG_DEB\nRUN set -eux ; git clone \"${VPP_REPO_URL}\" vpp ; cd vpp ; git checkout \"${VPP_COMMIT}\" ; sed -i -e 's/vpp vom/vpp/g' build-data/platforms/vpp.mk ; export UNATTENDED=y ; make install-dep dpdk-install-dev ; if [ -n \"${VPP_DEBUG_DEB}\" ] ; then make build ;make -C build-root PLATFORM=vpp TAG=vpp_debug install-deb ; else make build-release pkg-deb ; fi ; cd build-root ; dpkg -i *.deb ; rm -rf .ccache /var/lib/apt/lists/* ; find . -type f -name '*.o' -exec rm -rf '{}'\n#   install Go\nENV GOLANG_VERSION=\"1.11.8\"\nARG GOLANG_OS_ARCH=linux-amd64\nRUN wget -O go.tgz \"https://golang.org/dl/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz\" \\\n && tar -C /usr/local -xzf go.tgz \\\n && rm go.tgz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   install debugger\nRUN go get -u github.com/go-delve/delve/cmd/dlv \\\n && dlv version ; go get -u github.com/golang/dep/cmd/dep \\\n && dep version\n#   copy configs\nCOPY docker/dev/etcd.conf docker/dev/vpp-ifplugin.conf docker/dev/linux-ifplugin.conf docker/dev/logs.conf ./\nCOPY docker/dev/vpp.conf /etc/vpp/vpp.conf\nCOPY docker/dev/supervisord.conf /etc/supervisord/supervisord.conf\n#   copy scripts\nCOPY docker/dev/exec_vpp.sh docker/dev/exec_agent.sh docker/dev/supervisord_kill.py /usr/bin/\nARG VERSION\nARG COMMIT\nARG DATE\n#   copy & build agent\nCOPY . $GOPATH/src/github.com/ligato/vpp-agent\nRUN cd $GOPATH/src/github.com/ligato/vpp-agent \\\n && VERSION=$VERSION COMMIT=$COMMIT DATE=$DATE make install\nWORKDIR /\n#   run supervisor as the default executable\nCMD rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api \\\n && exec /usr/bin/supervisord -c /etc/supervisord/supervisord.conf\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"ARG BASE_IMG\nFROM golang AS verify-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends patch python3-pip python3 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip3 install ply\nARG VPP_REPO_URL\nARG VPP_COMMIT\nRUN git clone ${VPP_REPO_URL} /opt/vpp \\\n && cd /opt/vpp \\\n && git checkout ${VPP_COMMIT}\nCOPY scripts/genjsonapi.sh /opt/genjsonapi.sh\nRUN /opt/genjsonapi.sh\nWORKDIR /go/src/github.com/ligato/vpp-agent\nCOPY plugins/vpp/binapi plugins/vpp/binapi\nCOPY vendor vendor\nCOPY Makefile vpp.env ./\nRUN cp -r plugins/vpp/binapi /tmp/orig_binapi \\\n && make generate-binapi \\\n && diff -r plugins/vpp/binapi /tmp/orig_binapi\nFROM ${BASE_IMG} AS dev-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential ca-certificates curl gdb git graphviz inetutils-traceroute iproute2 ipsec-tools iputils-ping libapr1 libmbedcrypto1 libmbedtls10 libmbedx509-0 libtool make mc nano netcat python software-properties-common sudo supervisor telnet unzip wget python-cffi python3-cffi gcc-8 g++-8 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /usr/bin/gcc \\\n && rm /usr/bin/g++ \\\n && ln -s /usr/bin/gcc-8 /usr/bin/gcc \\\n && ln -s /usr/bin/g++-8 /usr/bin/g++\n#  install Protobuf\nARG PROTOC_VERSION=3.6.1\nARG PROTOC_OS_ARCH=linux_x86_64\nRUN wget -q https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip \\\n && unzip protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip -d protoc3 \\\n && mv protoc3/bin/protoc /usr/local/bin \\\n && mv protoc3/include/google /usr/local/include \\\n && rm -rf protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip protoc3\nRUN mkdir -p /opt/vpp-agent/dev /opt/vpp-agent/plugin\nWORKDIR /opt/vpp-agent/dev\nARG VPP_REPO_URL\nARG VPP_COMMIT\nARG VPP_DEBUG_DEB\nRUN set -eux ; git clone \"${VPP_REPO_URL}\" vpp ; cd vpp ; git checkout \"${VPP_COMMIT}\" ; sed -i -e 's/vpp vom/vpp/g' build-data/platforms/vpp.mk ; export UNATTENDED=y ; make install-dep dpdk-install-dev ; if [ -n \"${VPP_DEBUG_DEB}\" ] ; then make build ;make -C build-root PLATFORM=vpp TAG=vpp_debug install-deb ; else make build-release pkg-deb ; fi ; cd build-root ; dpkg -i *.deb ; rm -rf .ccache /var/lib/apt/lists/* ; find . -type f -name '*.o' -exec rm -rf '{}' ;\n#  install Go\nENV GOLANG_VERSION=\"1.11.8\"\nARG GOLANG_OS_ARCH=linux-amd64\nRUN wget -O go.tgz \"https://golang.org/dl/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz\" \\\n && tar -C /usr/local -xzf go.tgz \\\n && rm go.tgz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#  install debugger\nRUN go get -u github.com/go-delve/delve/cmd/dlv \\\n && dlv version ; go get -u github.com/golang/dep/cmd/dep \\\n && dep version\n#  copy configs\nCOPY docker/dev/etcd.conf docker/dev/vpp-ifplugin.conf docker/dev/linux-ifplugin.conf docker/dev/logs.conf ./\nCOPY docker/dev/vpp.conf /etc/vpp/vpp.conf\nCOPY docker/dev/supervisord.conf /etc/supervisord/supervisord.conf\n#  copy scripts\nCOPY docker/dev/exec_vpp.sh docker/dev/exec_agent.sh docker/dev/supervisord_kill.py /usr/bin/\nARG VERSION\nARG COMMIT\nARG DATE\n#  copy & build agent\nCOPY . $GOPATH/src/github.com/ligato/vpp-agent\nRUN cd $GOPATH/src/github.com/ligato/vpp-agent \\\n && VERSION=$VERSION COMMIT=$COMMIT DATE=$DATE make install\nWORKDIR /\n#  run supervisor as the default executable\nCMD rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api \\\n && exec /usr/bin/supervisord -c /etc/supervisord/supervisord.conf\n","injectedSmells":[],"originalDockerfileHash":"d4648a100291350b1c6312a69cf190fd","successfullyInjectedSmells":[],"originalDockerfileUglified":"ARG BASE_IMG\nFROM golang AS verify-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends patch python3-pip python3 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && pip3 install ply\nARG VPP_REPO_URL\nARG VPP_COMMIT\nRUN git clone ${VPP_REPO_URL} /opt/vpp \\\n && cd /opt/vpp \\\n && git checkout ${VPP_COMMIT}\nCOPY scripts/genjsonapi.sh /opt/genjsonapi.sh\nRUN /opt/genjsonapi.sh\nWORKDIR /go/src/github.com/ligato/vpp-agent\nCOPY plugins/vpp/binapi plugins/vpp/binapi\nCOPY vendor vendor\nCOPY Makefile vpp.env ./\nRUN cp -r plugins/vpp/binapi /tmp/orig_binapi \\\n && make generate-binapi \\\n && diff -r plugins/vpp/binapi /tmp/orig_binapi\nFROM ${BASE_IMG} AS dev-stage\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake build-essential ca-certificates curl gdb git graphviz inetutils-traceroute iproute2 ipsec-tools iputils-ping libapr1 libmbedcrypto1 libmbedtls10 libmbedx509-0 libtool make mc nano netcat python software-properties-common sudo supervisor telnet unzip wget python-cffi python3-cffi gcc-8 g++-8 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /usr/bin/gcc \\\n && rm /usr/bin/g++ \\\n && ln -s /usr/bin/gcc-8 /usr/bin/gcc \\\n && ln -s /usr/bin/g++-8 /usr/bin/g++\n#   install Protobuf\nARG PROTOC_VERSION=3.6.1\nARG PROTOC_OS_ARCH=linux_x86_64\nRUN wget -q https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip \\\n && unzip protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip -d protoc3 \\\n && mv protoc3/bin/protoc /usr/local/bin \\\n && mv protoc3/include/google /usr/local/include \\\n && rm -rf protoc-${PROTOC_VERSION}-${PROTOC_OS_ARCH}.zip protoc3\nRUN mkdir -p /opt/vpp-agent/dev /opt/vpp-agent/plugin\nWORKDIR /opt/vpp-agent/dev\nARG VPP_REPO_URL\nARG VPP_COMMIT\nARG VPP_DEBUG_DEB\nRUN set -eux ; git clone \"${VPP_REPO_URL}\" vpp ; cd vpp ; git checkout \"${VPP_COMMIT}\" ; sed -i -e 's/vpp vom/vpp/g' build-data/platforms/vpp.mk ; export UNATTENDED=y ; make install-dep dpdk-install-dev ; if [ -n \"${VPP_DEBUG_DEB}\" ] ; then make build ;make -C build-root PLATFORM=vpp TAG=vpp_debug install-deb ; else make build-release pkg-deb ; fi ; cd build-root ; dpkg -i *.deb ; rm -rf .ccache /var/lib/apt/lists/* ; find . -type f -name '*.o' -exec rm -rf '{}'\n#   install Go\nENV GOLANG_VERSION=\"1.11.8\"\nARG GOLANG_OS_ARCH=linux-amd64\nRUN wget -O go.tgz \"https://golang.org/dl/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz\" \\\n && tar -C /usr/local -xzf go.tgz \\\n && rm go.tgz\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \\\n && chmod -R 777 \"$GOPATH\"\n#   install debugger\nRUN go get -u github.com/go-delve/delve/cmd/dlv \\\n && dlv version ; go get -u github.com/golang/dep/cmd/dep \\\n && dep version\n#   copy configs\nCOPY docker/dev/etcd.conf docker/dev/vpp-ifplugin.conf docker/dev/linux-ifplugin.conf docker/dev/logs.conf ./\nCOPY docker/dev/vpp.conf /etc/vpp/vpp.conf\nCOPY docker/dev/supervisord.conf /etc/supervisord/supervisord.conf\n#   copy scripts\nCOPY docker/dev/exec_vpp.sh docker/dev/exec_agent.sh docker/dev/supervisord_kill.py /usr/bin/\nARG VERSION\nARG COMMIT\nARG DATE\n#   copy & build agent\nCOPY . $GOPATH/src/github.com/ligato/vpp-agent\nRUN cd $GOPATH/src/github.com/ligato/vpp-agent \\\n && VERSION=$VERSION COMMIT=$COMMIT DATE=$DATE make install\nWORKDIR /\n#   run supervisor as the default executable\nCMD rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api \\\n && exec /usr/bin/supervisord -c /etc/supervisord/supervisord.conf\n","originalDockerfileUglifiedHash":"dff5e909694d7539299bc67d74c14ddf","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9951d52e0f011bfe12a5ce7d099fdd8e061b49a1.dockerfile"}