{"seed":3711410029,"processedDockerfileHash":"35f14d0ca502faa5a52459609379c1cd","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM centos:5\nWORKDIR /build\n#   Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n#   to http://vault.centos.org/\nRUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\nRUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\nRUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\nRUN yum upgrade -y \\\n && yum install -y curl bzip2 gcc gcc-c++ make glibc-devel perl zlib-devel file xz which pkgconfig wget autoconf gettext\nENV PATH=\"/rustroot/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/rustroot/lib64:/rustroot/lib\"\nENV PKG_CONFIG_PATH=\"/rustroot/lib/pkgconfig\"\nWORKDIR /tmp\nCOPY dist-x86_64-linux/shared.sh /tmp/\n#   We need a build of openssl which supports SNI to download artifacts from\n#   static.rust-lang.org. This'll be used to link into libcurl below (and used\n#   later as well), so build a copy of OpenSSL with dynamic libraries into our\n#   generic root.\nCOPY dist-x86_64-linux/build-openssl.sh /tmp/\nRUN ./build-openssl.sh\n#   The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n#   some https urls we have, so install a new version of libcurl + curl which is\n#   using the openssl we just built previously.\n#\n#   Note that we also disable a bunch of optional features of curl that we don't\n#   really need.\nCOPY dist-x86_64-linux/build-curl.sh /tmp/\nRUN ./build-curl.sh\n#   binutils < 2.22 has a bug where the 32-bit executables it generates\n#   immediately segfault in Rust, so we need to install our own binutils.\n#\n#   See https://github.com/rust-lang/rust/issues/20440 for more info\nCOPY dist-x86_64-linux/build-binutils.sh /tmp/\nRUN ./build-binutils.sh\n#   libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n#   only has 2.6.4, so build our own\nCOPY dist-x86_64-linux/build-cmake.sh /tmp/\nRUN ./build-cmake.sh\n#   Build a version of gcc capable of building LLVM 6\nCOPY dist-x86_64-linux/build-gcc.sh /tmp/\nRUN ./build-gcc.sh\n#   CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\nCOPY dist-x86_64-linux/build-python.sh /tmp/\nRUN ./build-python.sh\n#   Now build LLVM+Clang 7, afterwards configuring further compilations to use the\n#   clang/clang++ compilers.\nCOPY dist-x86_64-linux/build-clang.sh /tmp/\nRUN ./build-clang.sh\nENV CC=\"clang\" \\\n    CXX=\"clang++\"\n#   Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n#   cloning, so download and build it here.\nCOPY dist-x86_64-linux/build-git.sh /tmp/\nRUN ./build-git.sh\n#   for sanitizers, we need kernel headers files newer than the ones CentOS ships\n#   with so we install newer ones here\nCOPY dist-x86_64-linux/build-headers.sh /tmp/\nRUN ./build-headers.sh\n#   OpenSSL requires a more recent version of perl\n#   with so we install newer ones here\nCOPY dist-x86_64-linux/build-perl.sh /tmp/\nRUN ./build-perl.sh\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\nENV HOSTS=\"x86_64-unknown-linux-gnu\"\nENV RUST_CONFIGURE_ARGS=\"--enable-full-tools  --enable-sanitizers  --enable-profiler  --enable-compiler-docs  --set target.x86_64-unknown-linux-gnu.linker=clang  --set target.x86_64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar  --set target.x86_64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib  --set llvm.thin-lto=true  --set rust.jemalloc\"\nENV SCRIPT=\"python2.7 ../x.py dist --host $HOSTS --target $HOSTS\"\nENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=\"clang\"\n#   This is the only builder which will create source tarballs\nENV DIST_SRC=\"1\"\n#   When we build cargo in this container, we don't want it to use the system\n#   libcurl, instead it should compile its own.\nENV LIBCURL_NO_PKG_CONFIG=\"1\"\nENV DIST_REQUIRE_ALL_TOOLS=\"1\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM centos:5\nWORKDIR /build\n#  Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n#  to http://vault.centos.org/\nRUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\nRUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\nRUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\nRUN yum upgrade -y \\\n && yum install -y curl bzip2 gcc gcc-c++ make glibc-devel perl zlib-devel file xz which pkgconfig wget autoconf gettext\nENV PATH=\"/rustroot/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/rustroot/lib64:/rustroot/lib\"\nENV PKG_CONFIG_PATH=\"/rustroot/lib/pkgconfig\"\nWORKDIR /tmp\nCOPY dist-x86_64-linux/shared.sh /tmp/\n#  We need a build of openssl which supports SNI to download artifacts from\n#  static.rust-lang.org. This'll be used to link into libcurl below (and used\n#  later as well), so build a copy of OpenSSL with dynamic libraries into our\n#  generic root.\nCOPY dist-x86_64-linux/build-openssl.sh /tmp/\nRUN ./build-openssl.sh\n#  The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n#  some https urls we have, so install a new version of libcurl + curl which is\n#  using the openssl we just built previously.\n#\n#  Note that we also disable a bunch of optional features of curl that we don't\n#  really need.\nCOPY dist-x86_64-linux/build-curl.sh /tmp/\nRUN ./build-curl.sh\n#  binutils < 2.22 has a bug where the 32-bit executables it generates\n#  immediately segfault in Rust, so we need to install our own binutils.\n#\n#  See https://github.com/rust-lang/rust/issues/20440 for more info\nCOPY dist-x86_64-linux/build-binutils.sh /tmp/\nRUN ./build-binutils.sh\n#  libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n#  only has 2.6.4, so build our own\nCOPY dist-x86_64-linux/build-cmake.sh /tmp/\nRUN ./build-cmake.sh\n#  Build a version of gcc capable of building LLVM 6\nCOPY dist-x86_64-linux/build-gcc.sh /tmp/\nRUN ./build-gcc.sh\n#  CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\nCOPY dist-x86_64-linux/build-python.sh /tmp/\nRUN ./build-python.sh\n#  Now build LLVM+Clang 7, afterwards configuring further compilations to use the\n#  clang/clang++ compilers.\nCOPY dist-x86_64-linux/build-clang.sh /tmp/\nRUN ./build-clang.sh\nENV CC=\"clang\" \\\n    CXX=\"clang++\"\n#  Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n#  cloning, so download and build it here.\nCOPY dist-x86_64-linux/build-git.sh /tmp/\nRUN ./build-git.sh\n#  for sanitizers, we need kernel headers files newer than the ones CentOS ships\n#  with so we install newer ones here\nCOPY dist-x86_64-linux/build-headers.sh /tmp/\nRUN ./build-headers.sh\n#  OpenSSL requires a more recent version of perl\n#  with so we install newer ones here\nCOPY dist-x86_64-linux/build-perl.sh /tmp/\nRUN ./build-perl.sh\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\nENV HOSTS=\"x86_64-unknown-linux-gnu\"\nENV RUST_CONFIGURE_ARGS=\"--enable-full-tools  --enable-sanitizers  --enable-profiler  --enable-compiler-docs  --set target.x86_64-unknown-linux-gnu.linker=clang  --set target.x86_64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar  --set target.x86_64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib  --set llvm.thin-lto=true  --set rust.jemalloc\"\nENV SCRIPT=\"python2.7 ../x.py dist --host $HOSTS --target $HOSTS\"\nENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=\"clang\"\n#  This is the only builder which will create source tarballs\nENV DIST_SRC=\"1\"\n#  When we build cargo in this container, we don't want it to use the system\n#  libcurl, instead it should compile its own.\nENV LIBCURL_NO_PKG_CONFIG=\"1\"\nENV DIST_REQUIRE_ALL_TOOLS=\"1\"\n","injectedSmells":[],"originalDockerfileHash":"36c01cef5e8d37ccdfd9e22add379f6d","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM centos:5\nWORKDIR /build\n#   Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n#   to http://vault.centos.org/\nRUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\nRUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\nRUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\nRUN yum upgrade -y \\\n && yum install -y curl bzip2 gcc gcc-c++ make glibc-devel perl zlib-devel file xz which pkgconfig wget autoconf gettext\nENV PATH=\"/rustroot/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/rustroot/lib64:/rustroot/lib\"\nENV PKG_CONFIG_PATH=\"/rustroot/lib/pkgconfig\"\nWORKDIR /tmp\nCOPY dist-x86_64-linux/shared.sh /tmp/\n#   We need a build of openssl which supports SNI to download artifacts from\n#   static.rust-lang.org. This'll be used to link into libcurl below (and used\n#   later as well), so build a copy of OpenSSL with dynamic libraries into our\n#   generic root.\nCOPY dist-x86_64-linux/build-openssl.sh /tmp/\nRUN ./build-openssl.sh\n#   The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n#   some https urls we have, so install a new version of libcurl + curl which is\n#   using the openssl we just built previously.\n#\n#   Note that we also disable a bunch of optional features of curl that we don't\n#   really need.\nCOPY dist-x86_64-linux/build-curl.sh /tmp/\nRUN ./build-curl.sh\n#   binutils < 2.22 has a bug where the 32-bit executables it generates\n#   immediately segfault in Rust, so we need to install our own binutils.\n#\n#   See https://github.com/rust-lang/rust/issues/20440 for more info\nCOPY dist-x86_64-linux/build-binutils.sh /tmp/\nRUN ./build-binutils.sh\n#   libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n#   only has 2.6.4, so build our own\nCOPY dist-x86_64-linux/build-cmake.sh /tmp/\nRUN ./build-cmake.sh\n#   Build a version of gcc capable of building LLVM 6\nCOPY dist-x86_64-linux/build-gcc.sh /tmp/\nRUN ./build-gcc.sh\n#   CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\nCOPY dist-x86_64-linux/build-python.sh /tmp/\nRUN ./build-python.sh\n#   Now build LLVM+Clang 7, afterwards configuring further compilations to use the\n#   clang/clang++ compilers.\nCOPY dist-x86_64-linux/build-clang.sh /tmp/\nRUN ./build-clang.sh\nENV CC=\"clang\" \\\n    CXX=\"clang++\"\n#   Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n#   cloning, so download and build it here.\nCOPY dist-x86_64-linux/build-git.sh /tmp/\nRUN ./build-git.sh\n#   for sanitizers, we need kernel headers files newer than the ones CentOS ships\n#   with so we install newer ones here\nCOPY dist-x86_64-linux/build-headers.sh /tmp/\nRUN ./build-headers.sh\n#   OpenSSL requires a more recent version of perl\n#   with so we install newer ones here\nCOPY dist-x86_64-linux/build-perl.sh /tmp/\nRUN ./build-perl.sh\nCOPY scripts/sccache.sh /scripts/\nRUN sh /scripts/sccache.sh\nENV HOSTS=\"x86_64-unknown-linux-gnu\"\nENV RUST_CONFIGURE_ARGS=\"--enable-full-tools  --enable-sanitizers  --enable-profiler  --enable-compiler-docs  --set target.x86_64-unknown-linux-gnu.linker=clang  --set target.x86_64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar  --set target.x86_64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib  --set llvm.thin-lto=true  --set rust.jemalloc\"\nENV SCRIPT=\"python2.7 ../x.py dist --host $HOSTS --target $HOSTS\"\nENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=\"clang\"\n#   This is the only builder which will create source tarballs\nENV DIST_SRC=\"1\"\n#   When we build cargo in this container, we don't want it to use the system\n#   libcurl, instead it should compile its own.\nENV LIBCURL_NO_PKG_CONFIG=\"1\"\nENV DIST_REQUIRE_ALL_TOOLS=\"1\"\n","originalDockerfileUglifiedHash":"432640583737a44281dc941e2b719317","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a1a778c2b2c619bcd57e6b8c3c20fb7ba1600318.dockerfile"}