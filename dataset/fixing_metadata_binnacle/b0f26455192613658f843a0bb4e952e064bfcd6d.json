{"seed":1641881536,"processedDockerfileHash":"56d7dd74f0c82a7dfe94841adfc85d69","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck"],"processedDockerfile":"FROM rhel7\n#   This image provides a .NET Core 1.0 environment you can use to run your .NET\n#   applications.\nEXPOSE 8080/tcp\nENV DOTNET_CORE_VERSION=\"1.0\"\nENV HOME=\"/opt/app-root\" \\\n    PATH=\"/opt/app-root/src/.local/bin:/opt/app-root/src/bin:/opt/app-root/bin:/opt/app-root/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    STI_SCRIPTS_PATH=\"/usr/libexec/s2i\" \\\n    DOTNET_PUBLISH_PATH=\"/opt/app-root/publish\" \\\n    DOTNET_RUN_SCRIPT=\"/opt/app-root/publish/s2i_run\"\nLABEL io.k8s.description=\"Platform for building and running .NET Core 1.0 applications\" \\\n      io.k8s.display-name=\".NET Core 1.0\" \\\n      io.openshift.s2i.scripts-url=\"image:///usr/libexec/s2i\" \\\n      io.openshift.tags=\"builder,.net,dotnet,dotnetcore,rh-dotnetcore10\" \\\n      io.openshift.expose-services=\"8080:http\" \\\n      io.s2i.scripts-url=\"image:///usr/libexec/s2i\"\n#   Labels consumed by Red Hat build service\nLABEL name=\"dotnet/dotnetcore-10-rhel7\" \\\n      com.redhat.component=\"rh-dotnetcore10-container\" \\\n      version=\"1.0\" \\\n      release=\"47\" \\\n      architecture=\"x86_64\"\nCOPY ./root/usr/bin /usr/bin\n#   Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH.\nCOPY ./s2i/bin/ /usr/libexec/s2i\n#   Each language image can have 'contrib' a directory with extra files needed to\n#   run and build the applications.\nCOPY ./contrib/ /opt/app-root\nRUN INSTALL_PKGS=\"rh-dotnetcore10 nss_wrapper tar rh-nodejs4-npm\" \\\n && yum install -y --setopt=tsflags=nodocs --disablerepo=* --enablerepo=rhel-7-server-rpms,rhel-server-rhscl-7-rpms,rhel-7-server-dotnet-rpms $INSTALL_PKGS \\\n && rpm -V $INSTALL_PKGS \\\n && rpm -e --nodeps glibc-headers glibc-devel gcc gcc-c++ kernel-headers \\\n && yum clean all -y \\\n && rm -rf /var/cache/yum/* \\\n && mkdir -p /opt/app-root/src /opt/app-root/publish \\\n && useradd -u 1001 -r -g 0 -d /opt/app-root/src -s /sbin/nologin -c \"Default Application User\" default \\\n && chown -R 1001:0 /opt/app-root\n#   Switch to default app-user for cache population\nUSER 1001\n#   Don't download/extract docs for nuget packages\nENV NUGET_XMLDOC_MODE=\"skip\"\n#   - Initialize the .Net cache via 'scl enable rh-dotnetcore10 -- dotnet new'\n#     Move to the proper command to do this once https://github.com/dotnet/cli/issues/3692 is fixed.\n#   - Removal of /tmp/NuGetScratch is needed due to:\n#     https://github.com/NuGet/Home/issues/2793\nRUN cd /opt/app-root/src \\\n && mkdir cache-warmup \\\n && cd cache-warmup \\\n && scl enable rh-dotnetcore10 -- dotnet new \\\n && cd .. \\\n && rm -rf cache-warmup \\\n && rm -rf /tmp/NuGetScratch\n#   Switch back to root for changing dir ownership/permissions\nUSER 0\n#   In order to drop the root user, we have to make some directories world\n#   writable as OpenShift default security model is to run the container under\n#   random UID.\nRUN chown -R 1001:0 /opt/app-root \\\n && chmod -R og+rwx /opt/app-root\n#   Get prefix path and path to scripts rather than hard-code them in scripts\nENV CONTAINER_SCRIPTS_PATH=\"/opt/app-root\" \\\n    ENABLED_COLLECTIONS=\"rh-dotnetcore10 rh-nodejs4\"\n#   When bash is started non-interactively, to run a shell script, for example it\n#   looks for this variable and source the content of this file. This will enable\n#   the SCL for all scripts without need to do 'scl enable'.\nENV BASH_ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    PROMPT_COMMAND=\". ${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\"\n#   Directory with the sources is set as the working directory. This should\n#   be a folder outside $HOME as this might cause issues when compiling sources.\n#   See https://github.com/redhat-developer/s2i-dotnetcore/issues/28\nWORKDIR /opt/app-root/src\n#   Run container by default as user with id 1001 (default)\nUSER 1001\n#   By default, ASP.NET Core runs on port 5000. We configure it to match\n#   the container port.\nENV ASPNETCORE_URLS=\"http://*:8080\"\nENTRYPOINT [\"container-entrypoint\"]\n#   Set the default CMD to print the usage of the language image.\nCMD /usr/libexec/s2i/usage\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM rhel7\n#  This image provides a .NET Core 1.0 environment you can use to run your .NET\n#  applications.\nEXPOSE 8080/tcp\nENV DOTNET_CORE_VERSION=\"1.0\"\nENV HOME=\"/opt/app-root\" \\\n    PATH=\"/opt/app-root/src/.local/bin:/opt/app-root/src/bin:/opt/app-root/bin:/opt/app-root/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    STI_SCRIPTS_PATH=\"/usr/libexec/s2i\" \\\n    DOTNET_PUBLISH_PATH=\"/opt/app-root/publish\" \\\n    DOTNET_RUN_SCRIPT=\"/opt/app-root/publish/s2i_run\"\nLABEL io.k8s.description=\"Platform for building and running .NET Core 1.0 applications\" \\\n      io.k8s.display-name=\".NET Core 1.0\" \\\n      io.openshift.s2i.scripts-url=\"image:///usr/libexec/s2i\" \\\n      io.openshift.tags=\"builder,.net,dotnet,dotnetcore,rh-dotnetcore10\" \\\n      io.openshift.expose-services=\"8080:http\" \\\n      io.s2i.scripts-url=\"image:///usr/libexec/s2i\"\n#  Labels consumed by Red Hat build service\nLABEL name=\"dotnet/dotnetcore-10-rhel7\" \\\n      com.redhat.component=\"rh-dotnetcore10-container\" \\\n      version=\"1.0\" \\\n      release=\"47\" \\\n      architecture=\"x86_64\"\nCOPY ./root/usr/bin /usr/bin\n#  Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH.\nCOPY ./s2i/bin/ /usr/libexec/s2i\n#  Each language image can have 'contrib' a directory with extra files needed to\n#  run and build the applications.\nCOPY ./contrib/ /opt/app-root\nRUN INSTALL_PKGS=\"rh-dotnetcore10 nss_wrapper tar rh-nodejs4-npm\" \\\n && yum install -y --setopt=tsflags=nodocs --disablerepo=* --enablerepo=rhel-7-server-rpms,rhel-server-rhscl-7-rpms,rhel-7-server-dotnet-rpms $INSTALL_PKGS \\\n && rpm -V $INSTALL_PKGS \\\n && rpm -e --nodeps glibc-headers glibc-devel gcc gcc-c++ kernel-headers \\\n && yum clean all -y \\\n && rm -rf /var/cache/yum/* \\\n && mkdir -p /opt/app-root/src /opt/app-root/publish \\\n && useradd -u 1001 -r -g 0 -d /opt/app-root/src -s /sbin/nologin -c \"Default Application User\" default \\\n && chown -R 1001:0 /opt/app-root\n#  Switch to default app-user for cache population\nUSER 1001\n#  Don't download/extract docs for nuget packages\nENV NUGET_XMLDOC_MODE=\"skip\"\n#  - Initialize the .Net cache via 'scl enable rh-dotnetcore10 -- dotnet new'\n#    Move to the proper command to do this once https://github.com/dotnet/cli/issues/3692 is fixed.\n#  - Removal of /tmp/NuGetScratch is needed due to:\n#    https://github.com/NuGet/Home/issues/2793\nRUN cd /opt/app-root/src \\\n && mkdir cache-warmup \\\n && cd cache-warmup \\\n && scl enable rh-dotnetcore10 -- dotnet new \\\n && cd .. \\\n && rm -rf cache-warmup \\\n && rm -rf /tmp/NuGetScratch\n#  Switch back to root for changing dir ownership/permissions\nUSER 0\n#  In order to drop the root user, we have to make some directories world\n#  writable as OpenShift default security model is to run the container under\n#  random UID.\nRUN chown -R 1001:0 /opt/app-root \\\n && chmod -R og+rwx /opt/app-root\n#  Get prefix path and path to scripts rather than hard-code them in scripts\nENV CONTAINER_SCRIPTS_PATH=\"/opt/app-root\" \\\n    ENABLED_COLLECTIONS=\"rh-dotnetcore10 rh-nodejs4\"\n#  When bash is started non-interactively, to run a shell script, for example it\n#  looks for this variable and source the content of this file. This will enable\n#  the SCL for all scripts without need to do 'scl enable'.\nENV BASH_ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    PROMPT_COMMAND=\". ${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\"\n#  Directory with the sources is set as the working directory. This should\n#  be a folder outside $HOME as this might cause issues when compiling sources.\n#  See https://github.com/redhat-developer/s2i-dotnetcore/issues/28\nWORKDIR /opt/app-root/src\n#  Run container by default as user with id 1001 (default)\nUSER 1001\n#  By default, ASP.NET Core runs on port 5000. We configure it to match\n#  the container port.\nENV ASPNETCORE_URLS=\"http://*:8080\"\nENTRYPOINT [\"container-entrypoint\"]\n#  Set the default CMD to print the usage of the language image.\nCMD /usr/libexec/s2i/usage\n","injectedSmells":[],"originalDockerfileHash":"e2d9499367aab800a37722f261dd1fc0","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM rhel7\n#   This image provides a .NET Core 1.0 environment you can use to run your .NET\n#   applications.\nEXPOSE 8080/tcp\nENV DOTNET_CORE_VERSION=\"1.0\"\nENV HOME=\"/opt/app-root\" \\\n    PATH=\"/opt/app-root/src/.local/bin:/opt/app-root/src/bin:/opt/app-root/bin:/opt/app-root/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    STI_SCRIPTS_PATH=\"/usr/libexec/s2i\" \\\n    DOTNET_PUBLISH_PATH=\"/opt/app-root/publish\" \\\n    DOTNET_RUN_SCRIPT=\"/opt/app-root/publish/s2i_run\"\nLABEL io.k8s.description=\"Platform for building and running .NET Core 1.0 applications\" \\\n      io.k8s.display-name=\".NET Core 1.0\" \\\n      io.openshift.s2i.scripts-url=\"image:///usr/libexec/s2i\" \\\n      io.openshift.tags=\"builder,.net,dotnet,dotnetcore,rh-dotnetcore10\" \\\n      io.openshift.expose-services=\"8080:http\" \\\n      io.s2i.scripts-url=\"image:///usr/libexec/s2i\"\n#   Labels consumed by Red Hat build service\nLABEL name=\"dotnet/dotnetcore-10-rhel7\" \\\n      com.redhat.component=\"rh-dotnetcore10-container\" \\\n      version=\"1.0\" \\\n      release=\"47\" \\\n      architecture=\"x86_64\"\nCOPY ./root/usr/bin /usr/bin\n#   Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH.\nCOPY ./s2i/bin/ /usr/libexec/s2i\n#   Each language image can have 'contrib' a directory with extra files needed to\n#   run and build the applications.\nCOPY ./contrib/ /opt/app-root\nRUN INSTALL_PKGS=\"rh-dotnetcore10 nss_wrapper tar rh-nodejs4-npm\" \\\n && yum install -y --setopt=tsflags=nodocs --disablerepo=* --enablerepo=rhel-7-server-rpms,rhel-server-rhscl-7-rpms,rhel-7-server-dotnet-rpms $INSTALL_PKGS \\\n && rpm -V $INSTALL_PKGS \\\n && rpm -e --nodeps glibc-headers glibc-devel gcc gcc-c++ kernel-headers \\\n && yum clean all -y \\\n && rm -rf /var/cache/yum/* \\\n && mkdir -p /opt/app-root/src /opt/app-root/publish \\\n && useradd -u 1001 -r -g 0 -d /opt/app-root/src -s /sbin/nologin -c \"Default Application User\" default \\\n && chown -R 1001:0 /opt/app-root\n#   Switch to default app-user for cache population\nUSER 1001\n#   Don't download/extract docs for nuget packages\nENV NUGET_XMLDOC_MODE=\"skip\"\n#   - Initialize the .Net cache via 'scl enable rh-dotnetcore10 -- dotnet new'\n#     Move to the proper command to do this once https://github.com/dotnet/cli/issues/3692 is fixed.\n#   - Removal of /tmp/NuGetScratch is needed due to:\n#     https://github.com/NuGet/Home/issues/2793\nRUN cd /opt/app-root/src \\\n && mkdir cache-warmup \\\n && cd cache-warmup \\\n && scl enable rh-dotnetcore10 -- dotnet new \\\n && cd .. \\\n && rm -rf cache-warmup \\\n && rm -rf /tmp/NuGetScratch\n#   Switch back to root for changing dir ownership/permissions\nUSER 0\n#   In order to drop the root user, we have to make some directories world\n#   writable as OpenShift default security model is to run the container under\n#   random UID.\nRUN chown -R 1001:0 /opt/app-root \\\n && chmod -R og+rwx /opt/app-root\n#   Get prefix path and path to scripts rather than hard-code them in scripts\nENV CONTAINER_SCRIPTS_PATH=\"/opt/app-root\" \\\n    ENABLED_COLLECTIONS=\"rh-dotnetcore10 rh-nodejs4\"\n#   When bash is started non-interactively, to run a shell script, for example it\n#   looks for this variable and source the content of this file. This will enable\n#   the SCL for all scripts without need to do 'scl enable'.\nENV BASH_ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    ENV=\"${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\" \\\n    PROMPT_COMMAND=\". ${CONTAINER_SCRIPTS_PATH}/etc/scl_enable\"\n#   Directory with the sources is set as the working directory. This should\n#   be a folder outside $HOME as this might cause issues when compiling sources.\n#   See https://github.com/redhat-developer/s2i-dotnetcore/issues/28\nWORKDIR /opt/app-root/src\n#   Run container by default as user with id 1001 (default)\nUSER 1001\n#   By default, ASP.NET Core runs on port 5000. We configure it to match\n#   the container port.\nENV ASPNETCORE_URLS=\"http://*:8080\"\nENTRYPOINT [\"container-entrypoint\"]\n#   Set the default CMD to print the usage of the language image.\nCMD /usr/libexec/s2i/usage\n","originalDockerfileUglifiedHash":"241f5e6691457027ac8b25391b045d59","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b0f26455192613658f843a0bb4e952e064bfcd6d.dockerfile"}