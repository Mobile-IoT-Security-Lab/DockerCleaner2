{"seed":808423557,"processedDockerfileHash":"8cc5120e373e9e34c88542eee246392f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lsiobase/alpine:arm32v7-3.8\n#   set version label\nARG BUILD_DATE\nARG VERSION\nARG MUSICBRAINZ_RELEASE\nLABEL build_version=\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\"\nLABEL maintainer=\"sparklyballs\"\n#   copy files required in build stage\nCOPY prebuilds/ /defaults/\n#   package versions\nARG BRAINZ_VER=\"v-2019-01-22\"\n#   global environment settings\nENV BABEL_DISABLE_CACHE=\"1\" \\\n    HOME=\"/root\" \\\n    LANG=\"en_US.utf8\" \\\n    MBDATA=\"/data/import\" \\\n    PGCONF=\"/config\" \\\n    PGDATA=\"/data/dbase\" \\\n    UPDATE_SLAVE_LOGDIR=\"/config/log/musicbrainz\" \\\n    URL_ROOT=\"ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport\"\nRUN echo \"**** install build packages ****\" \\\n && apk add db-dev expat-dev g++ gcc git icu-dev libxml2-dev make perl-dev --no-cache --virtual=build-dependencies --upgrade \\\n && echo \"**** install runtime packages ****\" \\\n && apk add bzip2 curl db expat git icu-libs nginx nodejs patch logrotate perl perl-crypt-rijndael perl-dbd-pg perl-db_file perl-net-ssleay postgresql postgresql-contrib postgresql-dev procps redis tar wget yarn --no-cache --upgrade \\\n && echo \"**** fetch musicbrainz and install perl and node packages ****\" \\\n && if [ -z ${MUSICBRAINZ_RELEASE+x} ] ; then MUSICBRAINZ_RELEASE=$( git ls-remote --tags https://github.com/metabrainz/musicbrainz-server.git | grep -v '{}' | tail -n 1 | awk -F / '{print $3}' ;) ; fi \\\n && mkdir -p /app/musicbrainz \\\n && curl -o /tmp/musicbrainz.tar.gz -L \"https://github.com/metabrainz/musicbrainz-server/archive/${MUSICBRAINZ_RELEASE}.tar.gz\" \\\n && tar xf /tmp/musicbrainz.tar.gz -C /app/musicbrainz --strip-components=1 \\\n && sed -i 's#$MB_SERVER_ROOT/#$UPDATE_SLAVE_LOGDIR/#g' /app/musicbrainz/admin/cron/slave.sh \\\n && cp /defaults/DBDefs.pm /app/musicbrainz/lib/DBDefs.pm \\\n && cd /app/musicbrainz \\\n && curl -L http://cpanmin.us | perl - App::cpanminus \\\n && sed -i '/Test::Magpie/d' cpanfile \\\n && cpanm --installdeps --notest . \\\n && cpanm --notest Cache::Memcached::Fast Cache::Memory Catalyst::Plugin::Cache::HTTP Catalyst::Plugin::StackTrace Digest::MD5::File FCGI FCGI::ProcManager Plack::Handler::Starlet Plack::Middleware::Debug::Base Server::Starter Starlet Starlet::Server Term::Size::Any \\\n && yarn install \\\n && yarn cache clean \\\n && ./script/compile_resources.sh \\\n && echo \"**** compile musicbrainz postgresql addons ****\" \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-unaccent /tmp/postgresql-musicbrainz-unaccent \\\n && cd /tmp/postgresql-musicbrainz-unaccent \\\n && make \\\n && make install \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-collate.git /tmp/postgresql-musicbrainz-collate \\\n && cd /tmp/postgresql-musicbrainz-collate \\\n && make \\\n && make install \\\n && echo \"**** configure nginx ****\" \\\n && echo 'fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' >> /etc/nginx/fastcgi_params \\\n && rm -f /etc/nginx/conf.d/default.conf \\\n && echo \"**** cleanup ****\" \\\n && apk del --purge build-dependencies \\\n && rm -rf /root/.cpanm /tmp/*\n#   add local files\nCOPY root/ /\n#   volumes and ports\nVOLUME /config /data\nEXPOSE 5000/tcp\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lsiobase/alpine:arm32v7-3.8\n#  set version label\nARG BUILD_DATE\nARG VERSION\nARG MUSICBRAINZ_RELEASE\nLABEL build_version=\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\"\nLABEL maintainer=\"sparklyballs\"\n#  copy files required in build stage\nCOPY prebuilds/ /defaults/\n#  package versions\nARG BRAINZ_VER=\"v-2019-01-22\"\n#  global environment settings\nENV BABEL_DISABLE_CACHE=\"1\" \\\n    HOME=\"/root\" \\\n    LANG=\"en_US.utf8\" \\\n    MBDATA=\"/data/import\" \\\n    PGCONF=\"/config\" \\\n    PGDATA=\"/data/dbase\" \\\n    UPDATE_SLAVE_LOGDIR=\"/config/log/musicbrainz\" \\\n    URL_ROOT=\"ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport\"\nRUN echo \"**** install build packages ****\" \\\n && apk add --no-cache --virtual=build-dependencies --upgrade db-dev expat-dev g++ gcc git icu-dev libxml2-dev make perl-dev \\\n && echo \"**** install runtime packages ****\" \\\n && apk add --no-cache --upgrade bzip2 curl db expat git icu-libs nginx nodejs patch logrotate perl perl-crypt-rijndael perl-dbd-pg perl-db_file perl-net-ssleay postgresql postgresql-contrib postgresql-dev procps redis tar wget yarn \\\n && echo \"**** fetch musicbrainz and install perl and node packages ****\" \\\n && if [ -z ${MUSICBRAINZ_RELEASE+x} ] ; then MUSICBRAINZ_RELEASE=$( git ls-remote --tags https://github.com/metabrainz/musicbrainz-server.git | grep -v '{}' | tail -n 1 | awk -F / '{print $3}' ;) ; fi \\\n && mkdir -p /app/musicbrainz \\\n && curl -o /tmp/musicbrainz.tar.gz -L \"https://github.com/metabrainz/musicbrainz-server/archive/${MUSICBRAINZ_RELEASE}.tar.gz\" \\\n && tar xf /tmp/musicbrainz.tar.gz -C /app/musicbrainz --strip-components=1 \\\n && sed -i 's#$MB_SERVER_ROOT/#$UPDATE_SLAVE_LOGDIR/#g' /app/musicbrainz/admin/cron/slave.sh \\\n && cp /defaults/DBDefs.pm /app/musicbrainz/lib/DBDefs.pm \\\n && cd /app/musicbrainz \\\n && curl -L http://cpanmin.us | perl - App::cpanminus \\\n && sed -i '/Test::Magpie/d' cpanfile \\\n && cpanm --installdeps --notest . \\\n && cpanm --notest Cache::Memcached::Fast Cache::Memory Catalyst::Plugin::Cache::HTTP Catalyst::Plugin::StackTrace Digest::MD5::File FCGI FCGI::ProcManager Plack::Handler::Starlet Plack::Middleware::Debug::Base Server::Starter Starlet Starlet::Server Term::Size::Any \\\n && yarn install \\\n && yarn cache clean \\\n && ./script/compile_resources.sh \\\n && echo \"**** compile musicbrainz postgresql addons ****\" \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-unaccent /tmp/postgresql-musicbrainz-unaccent \\\n && cd /tmp/postgresql-musicbrainz-unaccent \\\n && make \\\n && make install \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-collate.git /tmp/postgresql-musicbrainz-collate \\\n && cd /tmp/postgresql-musicbrainz-collate \\\n && make \\\n && make install \\\n && echo \"**** configure nginx ****\" \\\n && echo 'fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' >> /etc/nginx/fastcgi_params \\\n && rm -f /etc/nginx/conf.d/default.conf \\\n && echo \"**** cleanup ****\" \\\n && apk del --purge build-dependencies \\\n && rm -rf /root/.cpanm /tmp/*\n#  add local files\nCOPY root/ /\n#  volumes and ports\nVOLUME /config /data\nEXPOSE 5000/tcp\n","injectedSmells":[],"originalDockerfileHash":"9e2d60e55320a67529a7acef302f9085","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lsiobase/alpine:arm32v7-3.8\n#   set version label\nARG BUILD_DATE\nARG VERSION\nARG MUSICBRAINZ_RELEASE\nLABEL build_version=\"Linuxserver.io version:- ${VERSION} Build-date:- ${BUILD_DATE}\"\nLABEL maintainer=\"sparklyballs\"\n#   copy files required in build stage\nCOPY prebuilds/ /defaults/\n#   package versions\nARG BRAINZ_VER=\"v-2019-01-22\"\n#   global environment settings\nENV BABEL_DISABLE_CACHE=\"1\" \\\n    HOME=\"/root\" \\\n    LANG=\"en_US.utf8\" \\\n    MBDATA=\"/data/import\" \\\n    PGCONF=\"/config\" \\\n    PGDATA=\"/data/dbase\" \\\n    UPDATE_SLAVE_LOGDIR=\"/config/log/musicbrainz\" \\\n    URL_ROOT=\"ftp://ftp.musicbrainz.org/pub/musicbrainz/data/fullexport\"\nRUN echo \"**** install build packages ****\" \\\n && apk add --no-cache --virtual=build-dependencies --upgrade db-dev expat-dev g++ gcc git icu-dev libxml2-dev make perl-dev \\\n && echo \"**** install runtime packages ****\" \\\n && apk add --no-cache --upgrade bzip2 curl db expat git icu-libs nginx nodejs patch logrotate perl perl-crypt-rijndael perl-dbd-pg perl-db_file perl-net-ssleay postgresql postgresql-contrib postgresql-dev procps redis tar wget yarn \\\n && echo \"**** fetch musicbrainz and install perl and node packages ****\" \\\n && if [ -z ${MUSICBRAINZ_RELEASE+x} ] ; then MUSICBRAINZ_RELEASE=$( git ls-remote --tags https://github.com/metabrainz/musicbrainz-server.git | grep -v '{}' | tail -n 1 | awk -F / '{print $3}' ;) ; fi \\\n && mkdir -p /app/musicbrainz \\\n && curl -o /tmp/musicbrainz.tar.gz -L \"https://github.com/metabrainz/musicbrainz-server/archive/${MUSICBRAINZ_RELEASE}.tar.gz\" \\\n && tar xf /tmp/musicbrainz.tar.gz -C /app/musicbrainz --strip-components=1 \\\n && sed -i 's#$MB_SERVER_ROOT/#$UPDATE_SLAVE_LOGDIR/#g' /app/musicbrainz/admin/cron/slave.sh \\\n && cp /defaults/DBDefs.pm /app/musicbrainz/lib/DBDefs.pm \\\n && cd /app/musicbrainz \\\n && curl -L http://cpanmin.us | perl - App::cpanminus \\\n && sed -i '/Test::Magpie/d' cpanfile \\\n && cpanm --installdeps --notest . \\\n && cpanm --notest Cache::Memcached::Fast Cache::Memory Catalyst::Plugin::Cache::HTTP Catalyst::Plugin::StackTrace Digest::MD5::File FCGI FCGI::ProcManager Plack::Handler::Starlet Plack::Middleware::Debug::Base Server::Starter Starlet Starlet::Server Term::Size::Any \\\n && yarn install \\\n && yarn cache clean \\\n && ./script/compile_resources.sh \\\n && echo \"**** compile musicbrainz postgresql addons ****\" \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-unaccent /tmp/postgresql-musicbrainz-unaccent \\\n && cd /tmp/postgresql-musicbrainz-unaccent \\\n && make \\\n && make install \\\n && git clone git://github.com/metabrainz/postgresql-musicbrainz-collate.git /tmp/postgresql-musicbrainz-collate \\\n && cd /tmp/postgresql-musicbrainz-collate \\\n && make \\\n && make install \\\n && echo \"**** configure nginx ****\" \\\n && echo 'fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' >> /etc/nginx/fastcgi_params \\\n && rm -f /etc/nginx/conf.d/default.conf \\\n && echo \"**** cleanup ****\" \\\n && apk del --purge build-dependencies \\\n && rm -rf /root/.cpanm /tmp/*\n#   add local files\nCOPY root/ /\n#   volumes and ports\nVOLUME /config /data\nEXPOSE 5000/tcp\n","originalDockerfileUglifiedHash":"79eb209b220b8929dbea741f157bd9a1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/78b86287cd20f622406ca884646b81b5994e3d02.dockerfile"}