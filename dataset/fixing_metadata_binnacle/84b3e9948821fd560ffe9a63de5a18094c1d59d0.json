{"seed":2242747227,"processedDockerfileHash":"9f02b07647f5c2e9bd2f2625dc52dabf","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n#   Installing Neurodebian packages (FSL, AFNI, git)\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL \"http://neuro.debian.net/lists/xenial.us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\n#   Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential bzip2 ca-certificates curl cython3 ed git git-annex-standalone graphviz=2.38.0-12ubuntu2 gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libtool libxm4 netpbm pkg-config tcsh xfonts-base xvfb fsl-core=5.0.9-5~nd16.04+1 fsl-mni152-templates -y \\\n && curl -sSL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && echo \"Install libxp (not in all ubuntu/debian repositories)\" \\\n && apt-get install --no-install-recommends libxp6 -yq || /bin/bash -c \" curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb\" \\\n && echo \"Install libpng12 (not in all ubuntu/debian repositories\" \\\n && apt-get install --no-install-recommends libpng12-0 -yq || /bin/bash -c \" curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n && dpkg -i /tmp/libpng12.deb \\\n && rm -f /tmp/libpng12.deb\" \\\n && ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.19 /usr/lib/x86_64-linux-gnu/libgsl.so.0 \\\n && ldconfig \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#   Installing AFNI (version 17_3_03 archived on OSF)\nRUN mkdir -p /opt/afni \\\n && curl -o afni.tar.gz -sSLO \"https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/5a0dd9a7b83f69027512a12b\" \\\n && tar zxv -C /opt/afni --strip-components=1 -f afni.tar.gz \\\n && rm -rf afni.tar.gz\nENV PATH=\"/opt/afni:$PATH\" \\\n    AFNI_MODELPATH=\"/opt/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/opt/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/opt/afni/plugins\"\n#   Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users bidsapp\nWORKDIR /home/bidsapp\nENV HOME=\"/home/bidsapp\"\n#   Installing SVGO\nRUN npm install svgo@3.0.2 -g\n#   Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\n#   Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#   Installing precomputed python packages\nRUN conda install -y python=3.7.1 graphviz=2.40.1 libxml2=2.9.8 libxslt=1.1.32 matplotlib=2.2.2 mkl-service mkl=2018.0.3 numpy=1.15.4 pandas=0.23.4 scikit-learn=0.19.1 scipy=1.1.0 setuptools traits=4.6.0 zlib > =40.0.0; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda build purge-all ; sync \\\n && conda clean -tipsy \\\n && sync\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n#   Precaching atlases\nENV TEMPLATEFLOW_HOME=\"/opt/templateflow\"\nRUN mkdir -p $TEMPLATEFLOW_HOME\nRUN python -c \"from templateflow import api as tfapi; tfapi.get('MNI152NLin2009cAsym')\"\n#   Installing MRIQC\nCOPY . /src/mriqc\nARG VERSION\n#   Force static versioning within container\nRUN echo \"${VERSION}\" > /src/mriqc/mriqc/VERSION \\\n && echo \"include mriqc/VERSION\" >> /src/mriqc/MANIFEST.in \\\n && cd /src/mriqc \\\n && pip install .[all] --no-cache-dir\nRUN find $HOME -type d -exec chmod go=u {} + \\\n && find $HOME -type f -exec chmod go=u {} +\n#   Best practices\nRUN ldconfig\nWORKDIR /tmp/\n#   Run mriqc by default\nENTRYPOINT [\"/usr/local/miniconda/bin/mriqc\"]\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"MRIQC\" \\\n      org.label-schema.description=\"MRIQC - Automated Quality Control and visual reports for Quality Assesment of structural (T1w, T2w) and functional MRI of the brain\" \\\n      org.label-schema.url=\"http://mriqc.readthedocs.io\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/mriqc\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#  Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n#  Installing Neurodebian packages (FSL, AFNI, git)\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL \"http://neuro.debian.net/lists/xenial.us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\n#  Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential bzip2 ca-certificates curl cython3 ed git git-annex-standalone graphviz=2.38.0-12ubuntu2 gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libtool libxm4 netpbm pkg-config tcsh xfonts-base xvfb fsl-core=5.0.9-5~nd16.04+1 fsl-mni152-templates -y \\\n && curl -sSL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && echo \"Install libxp (not in all ubuntu/debian repositories)\" \\\n && apt-get install --no-install-recommends libxp6 -yq || /bin/bash -c \" curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb\" \\\n && echo \"Install libpng12 (not in all ubuntu/debian repositories\" \\\n && apt-get install --no-install-recommends libpng12-0 -yq || /bin/bash -c \" curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n && dpkg -i /tmp/libpng12.deb \\\n && rm -f /tmp/libpng12.deb\" \\\n && ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.19 /usr/lib/x86_64-linux-gnu/libgsl.so.0 \\\n && ldconfig \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#  Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#  Installing AFNI (version 17_3_03 archived on OSF)\nRUN mkdir -p /opt/afni \\\n && curl -o afni.tar.gz -sSLO \"https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/5a0dd9a7b83f69027512a12b\" \\\n && tar zxv -C /opt/afni --strip-components=1 -f afni.tar.gz \\\n && rm -rf afni.tar.gz\nENV PATH=\"/opt/afni:$PATH\" \\\n    AFNI_MODELPATH=\"/opt/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/opt/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/opt/afni/plugins\"\n#  Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users bidsapp\nWORKDIR /home/bidsapp\nENV HOME=\"/home/bidsapp\"\n#  Installing SVGO\nRUN npm install svgo -g\n#  Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\n#  Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#  Installing precomputed python packages\nRUN conda install -y python=3.7.1 graphviz=2.40.1 libxml2=2.9.8 libxslt=1.1.32 matplotlib=2.2.2 mkl-service mkl=2018.0.3 numpy=1.15.4 pandas=0.23.4 scikit-learn=0.19.1 scipy=1.1.0 setuptools traits=4.6.0 zlib > =40.0.0; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda build purge-all ; sync \\\n && conda clean -tipsy \\\n && sync\n#  Unless otherwise specified each process should only use one thread - nipype\n#  will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#  Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#  Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n#  Precaching atlases\nENV TEMPLATEFLOW_HOME=\"/opt/templateflow\"\nRUN mkdir -p $TEMPLATEFLOW_HOME\nRUN python -c \"from templateflow import api as tfapi; tfapi.get('MNI152NLin2009cAsym')\"\n#  Installing MRIQC\nCOPY . /src/mriqc\nARG VERSION\n#  Force static versioning within container\nRUN echo \"${VERSION}\" > /src/mriqc/mriqc/VERSION \\\n && echo \"include mriqc/VERSION\" >> /src/mriqc/MANIFEST.in \\\n && cd /src/mriqc \\\n && pip install .[all] --no-cache-dir\nRUN find $HOME -type d -exec chmod go=u {} + \\\n && find $HOME -type f -exec chmod go=u {} +\n#  Best practices\nRUN ldconfig\nWORKDIR /tmp/\n#  Run mriqc by default\nENTRYPOINT [\"/usr/local/miniconda/bin/mriqc\"]\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"MRIQC\" \\\n      org.label-schema.description=\"MRIQC - Automated Quality Control and visual reports for Quality Assesment of structural (T1w, T2w) and functional MRI of the brain\" \\\n      org.label-schema.url=\"http://mriqc.readthedocs.io\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/mriqc\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n","injectedSmells":[],"originalDockerfileHash":"872b1d8c8385aa39333ef05f85ad9b5b","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Use Ubuntu 16.04 LTS\nFROM ubuntu:xenial-20161213\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /usr/local/etc/neurodebian.gpg\n#   Installing Neurodebian packages (FSL, AFNI, git)\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -sSL \"http://neuro.debian.net/lists/xenial.us-ca.full\" >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /usr/local/etc/neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true )\n#   Prepare environment\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf build-essential bzip2 ca-certificates curl cython3 ed git git-annex-standalone graphviz=2.38.0-12ubuntu2 gsl-bin libglib2.0-0 libglu1-mesa-dev libglw1-mesa libgomp1 libjpeg62 libtool libxm4 netpbm pkg-config tcsh xfonts-base xvfb fsl-core=5.0.9-5~nd16.04+1 fsl-mni152-templates -y \\\n && curl -sSL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get install --no-install-recommends nodejs -y \\\n && echo \"Install libxp (not in all ubuntu/debian repositories)\" \\\n && apt-get install --no-install-recommends libxp6 -yq || /bin/bash -c \" curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb\" \\\n && echo \"Install libpng12 (not in all ubuntu/debian repositories\" \\\n && apt-get install --no-install-recommends libpng12-0 -yq || /bin/bash -c \" curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \\\n && dpkg -i /tmp/libpng12.deb \\\n && rm -f /tmp/libpng12.deb\" \\\n && ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.19 /usr/lib/x86_64-linux-gnu/libgsl.so.0 \\\n && ldconfig \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\nENV FSLDIR=\"/usr/share/fsl/5.0\" \\\n    FSLOUTPUTTYPE=\"NIFTI_GZ\" \\\n    FSLMULTIFILEQUIT=\"TRUE\" \\\n    POSSUMDIR=\"/usr/share/fsl/5.0\" \\\n    LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\" \\\n    FSLTCLSH=\"/usr/bin/tclsh\" \\\n    FSLWISH=\"/usr/bin/wish\"\nENV PATH=\"/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH\"\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nENV PATH=\"$ANTSPATH:$PATH\"\n#   Installing AFNI (version 17_3_03 archived on OSF)\nRUN mkdir -p /opt/afni \\\n && curl -o afni.tar.gz -sSLO \"https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/5a0dd9a7b83f69027512a12b\" \\\n && tar zxv -C /opt/afni --strip-components=1 -f afni.tar.gz \\\n && rm -rf afni.tar.gz\nENV PATH=\"/opt/afni:$PATH\" \\\n    AFNI_MODELPATH=\"/opt/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/opt/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/opt/afni/plugins\"\n#   Create a shared $HOME directory\nRUN useradd -m -s /bin/bash -G users bidsapp\nWORKDIR /home/bidsapp\nENV HOME=\"/home/bidsapp\"\n#   Installing SVGO\nRUN npm install svgo -g\n#   Installing and setting up miniconda\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh \\\n && bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda \\\n && rm Miniconda3-4.5.11-Linux-x86_64.sh\n#   Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)\nENV PATH=\"/usr/local/miniconda/bin:$PATH\" \\\n    CPATH=\"/usr/local/miniconda/include/:$CPATH\" \\\n    LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\" \\\n    PYTHONNOUSERSITE=\"1\"\n#   Installing precomputed python packages\nRUN conda install -y python=3.7.1 graphviz=2.40.1 libxml2=2.9.8 libxslt=1.1.32 matplotlib=2.2.2 mkl-service mkl=2018.0.3 numpy=1.15.4 pandas=0.23.4 scikit-learn=0.19.1 scipy=1.1.0 setuptools traits=4.6.0 zlib > =40.0.0; sync \\\n && chmod -R a+rX /usr/local/miniconda ; sync \\\n && chmod +x /usr/local/miniconda/bin/* ; sync \\\n && conda build purge-all ; sync \\\n && conda clean -tipsy \\\n && sync\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   Installing dev requirements (packages that are not in pypi)\nWORKDIR /src/\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n#   Precaching atlases\nENV TEMPLATEFLOW_HOME=\"/opt/templateflow\"\nRUN mkdir -p $TEMPLATEFLOW_HOME\nRUN python -c \"from templateflow import api as tfapi; tfapi.get('MNI152NLin2009cAsym')\"\n#   Installing MRIQC\nCOPY . /src/mriqc\nARG VERSION\n#   Force static versioning within container\nRUN echo \"${VERSION}\" > /src/mriqc/mriqc/VERSION \\\n && echo \"include mriqc/VERSION\" >> /src/mriqc/MANIFEST.in \\\n && cd /src/mriqc \\\n && pip install .[all] --no-cache-dir\nRUN find $HOME -type d -exec chmod go=u {} + \\\n && find $HOME -type f -exec chmod go=u {} +\n#   Best practices\nRUN ldconfig\nWORKDIR /tmp/\n#   Run mriqc by default\nENTRYPOINT [\"/usr/local/miniconda/bin/mriqc\"]\nARG BUILD_DATE\nARG VCS_REF\nLABEL org.label-schema.build-date=\"$BUILD_DATE\" \\\n      org.label-schema.name=\"MRIQC\" \\\n      org.label-schema.description=\"MRIQC - Automated Quality Control and visual reports for Quality Assesment of structural (T1w, T2w) and functional MRI of the brain\" \\\n      org.label-schema.url=\"http://mriqc.readthedocs.io\" \\\n      org.label-schema.vcs-ref=\"$VCS_REF\" \\\n      org.label-schema.vcs-url=\"https://github.com/poldracklab/mriqc\" \\\n      org.label-schema.version=\"$VERSION\" \\\n      org.label-schema.schema-version=\"1.0\"\n","originalDockerfileUglifiedHash":"6fc411707a301dcf9e0fe42257e22f2d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/84b3e9948821fd560ffe9a63de5a18094c1d59d0.dockerfile"}