{"seed":3207374463,"processedDockerfileHash":"6c4b85201056b7a5b4d81d9aabcb496a","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM phusion/baseimage:0.9.19\nARG CONTENTOS_STATIC_BUILD=ON\nENV CONTENTOS_STATIC_BUILD=\"${CONTENTOS_STATIC_BUILD}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen git libboost-all-dev libreadline-dev libssl-dev libtool ncurses-dev pbzip2 pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget gdb -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nCOPY . /usr/local/src/contentos\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) test_fixed_string \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/contentos \\\n && doxygen \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/contentos \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-default -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/contentosd-default/bin/contentosd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/contentosdversion \\\n && cat /etc/contentosdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/contentos\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev git libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/contentosd contentosd\nRUN mkdir /var/cache/contentosd \\\n && chown contentosd:contentosd -R /var/cache/contentosd\nENV HOME=\"/var/lib/contentosd\"\nRUN chown contentosd:contentosd -R /var/lib/contentosd\nVOLUME [\"/var/lib/contentosd\"]\n#   rpc service:\nEXPOSE 8090/tcp\n#   p2p service:\nEXPOSE 2001/tcp\n#   add seednodes from documentation to image\nCOPY doc/seednodes.txt /etc/contentosd/seednodes.txt\n#   the following adds lots of logging info to stdout\nCOPY contrib/config-for-docker.ini /etc/contentosd/config.ini\nCOPY contrib/fullnode.config.ini /etc/contentosd/fullnode.config.ini\nCOPY contrib/config-for-broadcaster.ini /etc/contentosd/config-for-broadcaster.ini\nCOPY contrib/config-for-ahnode.ini /etc/contentosd/config-for-ahnode.ini\n#   add normal startup script that starts via sv\nCOPY contrib/contentosd.run /usr/local/bin/contentos-sv-run.sh\nRUN chmod +x /usr/local/bin/contentos-sv-run.sh\n#   add nginx templates\nCOPY contrib/contentosd.nginx.conf /etc/nginx/contentosd.nginx.conf\nCOPY contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#   add PaaS startup script and service script\nCOPY contrib/startpaascontentosd.sh /usr/local/bin/startpaascontentosd.sh\nCOPY contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nCOPY contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nCOPY contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaascontentosd.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#   new entrypoint for all instances\n#   this enables exitting of the container when the writer node dies\n#   for PaaS mode (elasticbeanstalk, etc)\n#   AWS EB Docker requires a non-daemonized entrypoint\nCOPY contrib/contentosdentrypoint.sh /usr/local/bin/contentosdentrypoint.sh\nRUN chmod +x /usr/local/bin/contentosdentrypoint.sh\nCMD /usr/local/bin/contentosdentrypoint.sh\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM phusion/baseimage:0.9.19\nARG CONTENTOS_STATIC_BUILD=ON\nENV CONTENTOS_STATIC_BUILD=\"${CONTENTOS_STATIC_BUILD}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen git libboost-all-dev libreadline-dev libssl-dev libtool ncurses-dev pbzip2 pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget gdb -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nADD . /usr/local/src/contentos\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) test_fixed_string \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/contentos \\\n && doxygen \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/contentos \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-default -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/contentosd-default/bin/contentosd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/contentosdversion \\\n && cat /etc/contentosdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/contentos\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev git libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/contentosd contentosd\nRUN mkdir /var/cache/contentosd \\\n && chown contentosd:contentosd -R /var/cache/contentosd\nENV HOME=\"/var/lib/contentosd\"\nRUN chown contentosd:contentosd -R /var/lib/contentosd\nVOLUME [\"/var/lib/contentosd\"]\n#  rpc service:\nEXPOSE 8090/tcp\n#  p2p service:\nEXPOSE 2001/tcp\n#  add seednodes from documentation to image\nADD doc/seednodes.txt /etc/contentosd/seednodes.txt\n#  the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/contentosd/config.ini\nADD contrib/fullnode.config.ini /etc/contentosd/fullnode.config.ini\nADD contrib/config-for-broadcaster.ini /etc/contentosd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/contentosd/config-for-ahnode.ini\n#  add normal startup script that starts via sv\nADD contrib/contentosd.run /usr/local/bin/contentos-sv-run.sh\nRUN chmod +x /usr/local/bin/contentos-sv-run.sh\n#  add nginx templates\nADD contrib/contentosd.nginx.conf /etc/nginx/contentosd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#  add PaaS startup script and service script\nADD contrib/startpaascontentosd.sh /usr/local/bin/startpaascontentosd.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaascontentosd.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#  new entrypoint for all instances\n#  this enables exitting of the container when the writer node dies\n#  for PaaS mode (elasticbeanstalk, etc)\n#  AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/contentosdentrypoint.sh /usr/local/bin/contentosdentrypoint.sh\nRUN chmod +x /usr/local/bin/contentosdentrypoint.sh\nCMD /usr/local/bin/contentosdentrypoint.sh\n","injectedSmells":[],"originalDockerfileHash":"3fcd35a19509a8a3e365fb7bbf2ca67f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM phusion/baseimage:0.9.19\nARG CONTENTOS_STATIC_BUILD=ON\nENV CONTENTOS_STATIC_BUILD=\"${CONTENTOS_STATIC_BUILD}\"\nENV LANG=\"en_US.UTF-8\"\nRUN apt-get update \\\n && apt-get install autoconf automake autotools-dev bsdmainutils build-essential cmake doxygen git libboost-all-dev libreadline-dev libssl-dev libtool ncurses-dev pbzip2 pkg-config python3 python3-dev python3-jinja2 python3-pip nginx fcgiwrap awscli jq wget gdb -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && pip3 install gcovr\nADD . /usr/local/src/contentos\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON .. \\\n && make -j$( nproc ;) test_fixed_string \\\n && ./programs/util/test_fixed_string \\\n && cd /usr/local/src/contentos \\\n && doxygen \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE_TESTING=ON -DBUILD_CONTENTOS_TESTNET=ON -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=ON -DSKIP_BY_TX_ID=ON -DCHAINBASE_CHECK_LOCKING=OFF .. \\\n && mkdir -p /var/cobertura \\\n && gcovr --object-directory=\"../\" --root=../ --xml-pretty --gcov-exclude=\".*tests.*\" --gcov-exclude=\".*fc.*\" --gcov-exclude=\".*app*\" --gcov-exclude=\".*net*\" --gcov-exclude=\".*plugins*\" --gcov-exclude=\".*schema*\" --gcov-exclude=\".*time*\" --gcov-exclude=\".*utilities*\" --gcov-exclude=\".*wallet*\" --gcov-exclude=\".*programs*\" --output=\"/var/cobertura/coverage.xml\" \\\n && cd /usr/local/src/contentos \\\n && rm -rf /usr/local/src/contentos/build\nRUN cd /usr/local/src/contentos \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-default -DCMAKE_BUILD_TYPE=Release -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && cd .. \\\n && (/usr/local/contentosd-default/bin/contentosd --version | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*' \\\n && echo '_' \\\n && git rev-parse --short HEAD ) | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g' > /etc/contentosdversion \\\n && cat /etc/contentosdversion \\\n && rm -rfv build \\\n && mkdir build \\\n && cd build \\\n && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/contentosd-full -DCMAKE_BUILD_TYPE=Release -DLOW_MEMORY_NODE=OFF -DCLEAR_VOTES=OFF -DSKIP_BY_TX_ID=ON -DBUILD_CONTENTOS_TESTNET=OFF -DCONTENTOS_STATIC_BUILD=${CONTENTOS_STATIC_BUILD} .. \\\n && make -j$( nproc ;) \\\n && make install \\\n && rm -rf /usr/local/src/contentos\nRUN apt-get remove -y automake autotools-dev bsdmainutils build-essential cmake doxygen dpkg-dev git libboost-all-dev libc6-dev libexpat1-dev libgcc-5-dev libhwloc-dev libibverbs-dev libicu-dev libltdl-dev libncurses5-dev libnuma-dev libopenmpi-dev libpython-dev libpython2.7-dev libreadline-dev libreadline6-dev libssl-dev libstdc++-5-dev libtinfo-dev libtool linux-libc-dev m4 make manpages manpages-dev mpi-default-dev python-dev python2.7-dev python3-dev \\\n && apt-get autoremove -y \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/* /usr/include /usr/local/include\nRUN useradd -s /bin/bash -m -d /var/lib/contentosd contentosd\nRUN mkdir /var/cache/contentosd \\\n && chown contentosd:contentosd -R /var/cache/contentosd\nENV HOME=\"/var/lib/contentosd\"\nRUN chown contentosd:contentosd -R /var/lib/contentosd\nVOLUME [\"/var/lib/contentosd\"]\n#   rpc service:\nEXPOSE 8090/tcp\n#   p2p service:\nEXPOSE 2001/tcp\n#   add seednodes from documentation to image\nADD doc/seednodes.txt /etc/contentosd/seednodes.txt\n#   the following adds lots of logging info to stdout\nADD contrib/config-for-docker.ini /etc/contentosd/config.ini\nADD contrib/fullnode.config.ini /etc/contentosd/fullnode.config.ini\nADD contrib/config-for-broadcaster.ini /etc/contentosd/config-for-broadcaster.ini\nADD contrib/config-for-ahnode.ini /etc/contentosd/config-for-ahnode.ini\n#   add normal startup script that starts via sv\nADD contrib/contentosd.run /usr/local/bin/contentos-sv-run.sh\nRUN chmod +x /usr/local/bin/contentos-sv-run.sh\n#   add nginx templates\nADD contrib/contentosd.nginx.conf /etc/nginx/contentosd.nginx.conf\nADD contrib/healthcheck.conf.template /etc/nginx/healthcheck.conf.template\n#   add PaaS startup script and service script\nADD contrib/startpaascontentosd.sh /usr/local/bin/startpaascontentosd.sh\nADD contrib/paas-sv-run.sh /usr/local/bin/paas-sv-run.sh\nADD contrib/sync-sv-run.sh /usr/local/bin/sync-sv-run.sh\nADD contrib/healthcheck.sh /usr/local/bin/healthcheck.sh\nRUN chmod +x /usr/local/bin/startpaascontentosd.sh\nRUN chmod +x /usr/local/bin/paas-sv-run.sh\nRUN chmod +x /usr/local/bin/sync-sv-run.sh\nRUN chmod +x /usr/local/bin/healthcheck.sh\n#   new entrypoint for all instances\n#   this enables exitting of the container when the writer node dies\n#   for PaaS mode (elasticbeanstalk, etc)\n#   AWS EB Docker requires a non-daemonized entrypoint\nADD contrib/contentosdentrypoint.sh /usr/local/bin/contentosdentrypoint.sh\nRUN chmod +x /usr/local/bin/contentosdentrypoint.sh\nCMD /usr/local/bin/contentosdentrypoint.sh\n","originalDockerfileUglifiedHash":"1b87709faee61f6548cd96768037ed3f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/17cddb1823b4c3ee2825c181fa777ed28c88c947.dockerfile"}