{"seed":1430549414,"processedDockerfileHash":"fab36f71c212d1129bd523b47edf7726","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   vim:set ft=dockerfile:\nFROM alpine:3.10\n#   alpine includes \"postgres\" user/group in base install\n#     /etc/passwd:22:postgres:x:70:70::/var/lib/postgresql:/bin/sh\n#     /etc/group:34:postgres:x:70:\n#   the home directory for the postgres user, however, is not created by default\n#   see https://github.com/docker-library/postgres/issues/274\nRUN set -ex ; postgresHome=\"$( getent passwd postgres ;)\" ; postgresHome=\"$( echo \"$postgresHome\" | cut -d: -f6 ;)\" ; [ \"$postgresHome\" = '/var/lib/postgresql' ] ; mkdir -p \"$postgresHome\" ; chown -R postgres:postgres \"$postgresHome\"\n#   su-exec (gosu-compatible) is installed further down\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#   alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"9.4\"\nENV PG_VERSION=\"9.4.23\"\nENV PG_SHA256=\"0d009c08b0c82b12484950bba10ae8bfd6f0c7bafd8f086ab756c483dd231d9b\"\nRUN set -ex \\\n && apk add ca-certificates=20191127-r2 openssl=1.1.1k-r0 tar=1.32-r1 --no-cache --virtual .fetch-deps \\\n && wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \\\n && echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \\\n && mkdir -p /usr/src/postgresql \\\n && tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 \\\n && rm postgresql.tar.bz2 \\\n && apk add bison=3.3.2-r0 coreutils=8.31-r0 dpkg-dev=1.19.7-r0 dpkg=1.19.7-r0 flex=2.6.4-r2 gcc=8.3.0-r0 libc-dev=0.7.1-r0 libedit-dev=20190324.3.1-r0 libxml2-dev=2.9.9-r5 libxslt-dev=1.1.33-r3 linux-headers=4.19.36-r0 make=4.2.1-r2 openssl-dev=1.1.1k-r0 perl-utils=5.28.3-r0 perl-ipc-run=20180523.0-r1 util-linux-dev=2.33.2-r0 zlib-dev=1.2.11-r1 --no-cache --virtual .build-deps \\\n && cd /usr/src/postgresql \\\n && awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \\\n && grep '/var/run/postgresql' src/include/pg_config_manual.h.new \\\n && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-openssl --with-libxml --with-libxslt \\\n && make -j \"$( nproc ;)\" world \\\n && make install-world \\\n && make -C contrib install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add bash=5.0.0-r0 su-exec=0.2-r0 tzdata=2021a-r0 $runDeps --no-cache --virtual .postgresql-rundeps \\\n && apk del .fetch-deps .build-deps \\\n && cd / \\\n && rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man \\\n && find /usr/local -name '*.a' -delete\n#   make the sample config easier to munge (and \"correct by default\")\nRUN sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#   this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  vim:set ft=dockerfile:\nFROM alpine:3.10\n#  alpine includes \"postgres\" user/group in base install\n#    /etc/passwd:22:postgres:x:70:70::/var/lib/postgresql:/bin/sh\n#    /etc/group:34:postgres:x:70:\n#  the home directory for the postgres user, however, is not created by default\n#  see https://github.com/docker-library/postgres/issues/274\nRUN set -ex ; postgresHome=\"$( getent passwd postgres ;)\" ; postgresHome=\"$( echo \"$postgresHome\" | cut -d: -f6 ;)\" ; [ \"$postgresHome\" = '/var/lib/postgresql' ] ; mkdir -p \"$postgresHome\" ; chown -R postgres:postgres \"$postgresHome\"\n#  su-exec (gosu-compatible) is installed further down\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#  alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"9.4\"\nENV PG_VERSION=\"9.4.23\"\nENV PG_SHA256=\"0d009c08b0c82b12484950bba10ae8bfd6f0c7bafd8f086ab756c483dd231d9b\"\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates openssl tar \\\n && wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \\\n && echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \\\n && mkdir -p /usr/src/postgresql \\\n && tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 \\\n && rm postgresql.tar.bz2 \\\n && apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg flex gcc libc-dev libedit-dev libxml2-dev libxslt-dev linux-headers make openssl-dev perl-utils perl-ipc-run util-linux-dev zlib-dev \\\n && cd /usr/src/postgresql \\\n && awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \\\n && grep '/var/run/postgresql' src/include/pg_config_manual.h.new \\\n && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-openssl --with-libxml --with-libxslt \\\n && make -j \"$( nproc ;)\" world \\\n && make install-world \\\n && make -C contrib install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .postgresql-rundeps $runDeps bash su-exec tzdata \\\n && apk del .fetch-deps .build-deps \\\n && cd / \\\n && rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man \\\n && find /usr/local -name '*.a' -delete\n#  make the sample config easier to munge (and \"correct by default\")\nRUN sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#  this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\n","injectedSmells":[],"originalDockerfileHash":"062f2f9053ee8175f67c31b9554473a6","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   vim:set ft=dockerfile:\nFROM alpine:3.10\n#   alpine includes \"postgres\" user/group in base install\n#     /etc/passwd:22:postgres:x:70:70::/var/lib/postgresql:/bin/sh\n#     /etc/group:34:postgres:x:70:\n#   the home directory for the postgres user, however, is not created by default\n#   see https://github.com/docker-library/postgres/issues/274\nRUN set -ex ; postgresHome=\"$( getent passwd postgres ;)\" ; postgresHome=\"$( echo \"$postgresHome\" | cut -d: -f6 ;)\" ; [ \"$postgresHome\" = '/var/lib/postgresql' ] ; mkdir -p \"$postgresHome\" ; chown -R postgres:postgres \"$postgresHome\"\n#   su-exec (gosu-compatible) is installed further down\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#   alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"9.4\"\nENV PG_VERSION=\"9.4.23\"\nENV PG_SHA256=\"0d009c08b0c82b12484950bba10ae8bfd6f0c7bafd8f086ab756c483dd231d9b\"\nRUN set -ex \\\n && apk add --no-cache --virtual .fetch-deps ca-certificates openssl tar \\\n && wget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" \\\n && echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - \\\n && mkdir -p /usr/src/postgresql \\\n && tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 \\\n && rm postgresql.tar.bz2 \\\n && apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg flex gcc libc-dev libedit-dev libxml2-dev libxslt-dev linux-headers make openssl-dev perl-utils perl-ipc-run util-linux-dev zlib-dev \\\n && cd /usr/src/postgresql \\\n && awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new \\\n && grep '/var/run/postgresql' src/include/pg_config_manual.h.new \\\n && mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && wget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && wget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' \\\n && ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-openssl --with-libxml --with-libxslt \\\n && make -j \"$( nproc ;)\" world \\\n && make install-world \\\n && make -C contrib install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .postgresql-rundeps $runDeps bash su-exec tzdata \\\n && apk del .fetch-deps .build-deps \\\n && cd / \\\n && rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man \\\n && find /usr/local -name '*.a' -delete\n#   make the sample config easier to munge (and \"correct by default\")\nRUN sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#   this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 5432/tcp\nCMD [\"postgres\"]\n","originalDockerfileUglifiedHash":"c9e2bcc8b7261e8cda2dfeafc2a15d53","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/550f0bdf52bb00deca42440760eae0492511d913.dockerfile"}