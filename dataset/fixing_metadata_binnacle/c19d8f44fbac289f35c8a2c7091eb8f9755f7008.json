{"seed":3892256032,"processedDockerfileHash":"803234036a362b3f28b6a9393deeb6d4","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck"],"processedDockerfile":"#  !/usr/bin/docker build --force-rm --rm -f\n#  ? USAGE\n#  ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n#  ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n#  ?\n#  ?          OSAFT_VERSION\n#  ?              Version of this build (should be used as image tag also).\n#  ?\n#  ?          OSAFT_VM_FROM\n#  ?              Base image to be used for this build. Tested images are:\n#  ?                  (2017) alpine:3.6  alpine:edge  debian:stretch-slim  debian\n#  ?                  (2018) alpine:3.8  debian\n#  ?\n#  ?          OSAFT_VM_APT_INSTALL\n#  ?              Additional packages  to be installed in the image.\n#  ?              Note that the package names depend on the used base image.\n#  ?              Tested packages are:  tcl  tk  xvfb  openssl\n#  ?\n#  ?          OSAFT_VM_SRC_OSAFT\n#  ?              URL to fetch o-saft.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_OSAFT\n#  ?              SHA256 checksum for the o-saft.tgz archive.\n#  ?              Note that the checksum in the Dockerfile provided by this .tgz\n#  ?              archive is wrong (due to hen-egg-problem).\n#  ?              https://github.com/OWASP/O-Saft/blob/master/Dockerfile  is the\n#  ?              most current version and contains proper checksums.\n#  ?\n#  ?          OSAFT_VM_TAR_OSAFT\n#  ?              Name of archive file for O-Saft (during build).\n#  ?\n#  ?          OSAFT_VM_SRC_OPENSSL\n#  ?              URL to fetch openssl.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_OPENSSL\n#  ?              SHA256 checksum for the openssl-1.0.2-chacha.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_OPENSSL\n#  ?              Name of archive file for OpenSSL (during build).\n#  ?\n#  ?          OSAFT_VM_DYN_OPENSSL\n#  ?              Build (link) mode of openssl executable: --static or --shared\n#  ?\n#  ?          OSAFT_VM_SRC_SSLEAY\n#  ?              URL to fetch Net-SSLeay.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_SSLEAY\n#  ?              SHA256 checksum for the Net-SSLeay.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_SSLEAY\n#  ?              Name of archive file for Net-SSLeay.tgz (during build).\n#  ?\n#  ?          OSAFT_VM_SRC_SOCKET\n#  ?              URL to fetch IO-Socket-SSL.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_SOCKET\n#  ?              SHA256 checksum for the IO-Socket-SSL.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_SOCKET\n#  ?              Name of archive file for IO-Socket-SSL.tgz (during build).\n#  ?\n#  ? ENVIRONMENT VARIABLES\n#  ?      The build image sets environment variables. They are mainly used for\n#  ?      documentation or by other programs to check for the right build.\n#  ?\n#  ?      Following environment variables are set inside the docker image:\n#  ?\n#  ?          osaft_vm_build\n#  ?              Build version of this image, used by o-saft-docker.\n#  ?          OSAFT_DIR\n#  ?              Directory where O-Saft  is installed.\n#  ?          OPENSSL_DIR\n#  ?              Directory where OpenSSL is installed.\n#  ?          OPENSSL_VERSION\n#  ?              Version of installed OpenSSL\n#  ?          TERM\n#  ?              Prefered X-Terminal program.\n#  ?          LD_RUN_PATH\n#  ?              Additional paths for runtime loader, used while linking with\n#  ?              \"ld -rpath=...\"\n#  ?              Linking of openssl, libssl.so and SSLeay.so will use  -rpath\n#  ?              in LDFLAGS to ensure that the special library will be used.\n#  ?              Default:${OPENSSL_DIR}/lib\n#  ?          PATH\n#  ?              PATH for shell, set to:\n#  ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$OPENSSL_DIR/bin:$PATH\n#  ?          WORK_DIR\n#  ?              Directory where to build the packages (used for Dockerfile's\n#  ?              WORKDIR  dierective.\n#  ?\n#  ? EXAMPLES\n#  ?      Simple build with defaults:  alpine:edge, o-saft.tgz, openssl-chacha\n#  ?          docker build --force-rm --rm \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Simple build with base image alpine:3.8\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.8\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with base image alpine:3.6 and Tcl/Tk\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.6\" \\ \n#  ?                  --build-arg \"OSAFT_VM_APT_INSTALL=tcl tk xvfb\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with other SHA256 checksum for o-saft.tgz\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_SHA_OSAFT=caffee\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with development O-Saft download from github\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_SRC_OSAFT=https://github.com/OWASP/O-Saft/archive/master.tar.gz\" \\ \n#  ?                  --build-arg \"OSAFT_VERSION=latest-development\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Note that  o-saft-docker  searches for a Docker image  owasp/o-saft\n#  ?      so don't forget to tag at least one image with this name.\n#  ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#   Parameters passed to build\n#   OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_OSAFT=\"https://github.com/OWASP/O-Saft/raw/master/o-saft.tgz\"\nARG OSAFT_VM_SHA_OSAFT=\"29d4faa2ed3025ed18d31175e868d6be9312b36ba486c6e5f305afeb34947f68\"\nARG OSAFT_VM_TAR_OSAFT=\"o-saft.tgz\"\nARG OSAFT_VM_SRC_SSLEAY=\"http://search.cpan.org/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.85.tar.gz\"\nARG OSAFT_VM_SHA_SSLEAY=\"9d8188b9fb1cae3bd791979c20554925d5e94a138d00414f1a6814549927b0c8\"\nARG OSAFT_VM_TAR_SSLEAY=\"Net-SSLeay.tgz\"\nARG OSAFT_VM_SRC_SOCKET=\"http://search.cpan.org/CPAN/authors/id/S/SU/SULLR/IO-Socket-SSL-2.052.tar.gz\"\nARG OSAFT_VM_SHA_SOCKET=\"e4897a9b17cb18a3c44aa683980d52cef534cdfcb8063d6877c879bfa2f26673\"\nARG OSAFT_VM_TAR_SOCKET=\"IO-Socket-SSL.tgz\"\nARG OSAFT_VM_SRC_OPENSSL=\"https://github.com/PeterMosmans/openssl/archive/1.0.2-chacha.tar.gz\"\nARG OSAFT_VM_SHA_OPENSSL=\"ad3d99ec091e403a3a7a678ddda38b392e3204515425827c53dc5baa92d61d67\"\nARG OSAFT_VM_TAR_OPENSSL=\"openssl.tgz\"\nARG OSAFT_VM_DYN_OPENSSL=\"--shared\"\n#                               --static  not yet (2017) working 'cause of libkrb5\nARG OSAFT_VM_APT_INSTALL\nARG OSAFT_VERSION=\"undefined\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build O-Saft docker image (with Peter Mosman's openssl)\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile -t owasp/o-saft:$OSAFT_VERSION -t owasp/o-saft .\" \\\n      DETAILS=\"Please see https://github.com/OWASP/O-Saft/raw/master/o-saft-docker\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/Dockerfile\" \\\n      SOURCE1=\"$OSAFT_VM_SRC_OSAFT\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_OPENSSL\" \\\n      SID=\"@(#) Dockerfile 1.29 19/01/20 23:25:44\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV OSAFT_DIR=\"/O-Saft\"\nENV OPENSSL_DIR=\"/openssl\"\nENV OPENSSL_VERSION=\"1.0.2-chacha\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${OPENSSL_DIR}/lib\"\nENV PATH=\"${OSAFT_DIR}:${OSAFT_DIR}/contrib:${OPENSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\nRUN apk add wget=1.21.3-r2 ncurses=6.3_p20221119-r0 gcc=12.2.1_git20220924-r4 make=4.3-r1 musl-dev=1.2.3-r4 linux-headers=5.19.5-r0 krb5-dev=1.20.1-r0 zlib-dev=1.2.13-r0 perl=5.36.0-r0 perl-readonly=2.05-r2 perl-dev=5.36.0-r0 ca-certificates=20220614-r4 $OSAFT_VM_APT_INSTALL --no-cache \\\n && apk add gmp-dev=6.2.1-r2 lksctp-tools-dev=1.0.19-r1 --no-cache \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $OPENSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OPENSSL -O $OSAFT_VM_TAR_OPENSSL \\\n && [ -n \"$OSAFT_VM_SHA_OPENSSL\" ] \\\n && echo \"$OSAFT_VM_SHA_OPENSSL $OSAFT_VM_TAR_OPENSSL\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OPENSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && sed -i '/RANDFILE/a openssl_conf=openssl_def' apps/openssl.cnf \\\n && (echo 'openssl_conf=openssl_def' ;echo '[openssl_def]' ;echo 'engines=engine_section' ;echo '[engine_section]' ;echo 'gost=gost_section' ;echo '[gost_section]' ;echo 'engine_id = gost' ;echo 'default_algorithms=ALL' ;echo 'CRYPT_PARAMS=id-Gost28147-89-CryptoPro-A-ParamSet' ) >> apps/openssl.cnf \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./config --prefix=$OPENSSL_DIR --openssldir=$OPENSSL_DIR/ssl $OSAFT_VM_DYN_OPENSSL --with-krb5-flavor=MIT --with-krb5-dir=/usr/include/krb5/ -fPIC zlib zlib-dynamic enable-zlib enable-npn sctp enable-deprecated enable-weak-ssl-ciphers enable-heartbeats enable-unit-test enable-ssl-trace enable-ssl3 enable-ssl3-method enable-ssl2 enable-tls1 enable-tls1-method enable-tls enable-tls1-1 enable-tls1-1-method enable-tlsext enable-tls1-2 enable-tls1-2-method enable-tls1-2-client enable-dtls1 enable-dtls1-method enable-dtls1-2 enable-dtls1-2-method enable-md2 enable-md4 enable-mdc2 enable-rc2 enable-rc4 enable-rc5 enable-sha0 enable-sha1 enable-sha256 enable-sha512 enable-aes enable-cms enable-dh enable-egd enable-des enable-dsa enable-rsa enable-rsax enable-ec enable-ec2m enable-ecdh enable-ecdsa enable-blake2 enable-bf enable-cast enable-camellia enable-gmp enable-gost enable-GOST enable-idea enable-poly1305 enable-krb5 enable-rdrand enable-rmd160 enable-seed enable-srp enable-whirlpool enable-rfc3779 enable-ec_nistp_64_gcc_128 experimental-jpake -DOPENSSL_USE_BUILD_DATE -DTLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES -DTEMP_GOST_TLS \\\n && make depend \\\n && make \\\n && make report -i \\\n && make install \\\n && echo -n \"# number of ciphers $OPENSSL_DIR/bin/openssl: \" \\\n && $OPENSSL_DIR/bin/openssl ciphers -V ALL:COMPLEMENTOFALL:aNULL | wc -l \\\n && apk del --purge gmp-dev lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_OPENSSL \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SSLEAY -O $OSAFT_VM_TAR_SSLEAY \\\n && [ -n \"$OSAFT_VM_SHA_SSLEAY\" ] \\\n && echo \"$OSAFT_VM_SHA_SSLEAY $OSAFT_VM_TAR_SSLEAY\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SSLEAY -C $BUILD_DIR --strip-components=1 \\\n && apk add perl-net-dns=1.35-r0 perl-net-libidn=0.12-r11 perl-mozilla-ca=20221114-r0 --no-cache \\\n && cd $BUILD_DIR \\\n && perl -i.orig -pe 'if (m/^#define\\s*REM_AUTOMATICALLY_GENERATED_1_09/){print \"const SSL_METHOD * SSLv2_method()\\n\\nconst SSL_METHOD * SSLv3_method()\\n\\n\";}' SSLeay.xs \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && echo \"n\" | env OPENSSL_PREFIX=$OPENSSL_DIR perl Makefile.PL INC=-I$OPENSSL_DIR/include DEFINE=-DOPENSSL_BUILD_UNSAFE=1 \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_SSLEAY \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SOCKET -O $OSAFT_VM_TAR_SOCKET \\\n && [ -n \"$OSAFT_VM_SHA_SOCKET\" ] \\\n && echo \"$OSAFT_VM_SHA_SOCKET $OSAFT_VM_TAR_SOCKET\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SOCKET -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && echo \"n\" | perl Makefile.PL INC=-I$OPENSSL_DIR/include \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -r $BUILD_DIR $OSAFT_VM_TAR_SOCKET \\\n && cd $WORK_DIR \\\n && mkdir -p $OSAFT_DIR \\\n && adduser -D -h ${OSAFT_DIR} osaft \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OSAFT -O $OSAFT_VM_TAR_OSAFT \\\n && [ -n \"$OSAFT_VM_SHA_OSAFT\" ] \\\n && echo \"$OSAFT_VM_SHA_OSAFT $OSAFT_VM_TAR_OSAFT\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OSAFT \\\n && ([ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/.[a-zA-Z]* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && rm -rf ./O-Saft-master/ ;exit 0 ) \\\n && chown -R root:root $OSAFT_DIR \\\n && chown -R osaft:osaft $OSAFT_DIR/contrib \\\n && chown osaft:osaft $OSAFT_DIR/.o-saft.pl \\\n && cp $OSAFT_DIR/.o-saft.pl $OSAFT_DIR/.o-saft.pl-orig \\\n && perl -i.bak -pe \"s:^#?\\s*--openssl=.*:--openssl=$OPENSSL_DIR/bin/openssl:;s:^#?\\s*--openssl-cnf=.*:--openssl-cnf=$OPENSSL_DIR/ssl/openssl.cnf:;s:^#?\\s*--ca-path=.*:--ca-path=/etc/ssl/certs/:;s:^#?\\s*--ca-file=.*:--ca-file=/etc/ssl/certs/ca-certificates.crt:\" $OSAFT_DIR/.o-saft.pl \\\n && chmod 666 $OSAFT_DIR/.o-saft.pl \\\n && rm -f $OSAFT_VM_TAR_OSAFT \\\n && apk del --purge gcc make musl-dev linux-headers perl-dev\n#   do not delete  krb5-dev zlib-dev  because we need\n#    libkrb5.so.3, libk5crypto.so.3 and libz.so to run openssl\nWORKDIR $OSAFT_DIR\nUSER osaft\nRUN o-saft-docker usage\nENTRYPOINT [\"/O-Saft/o-saft\"]\nCMD [\"--norc\", \"--help=docker\"]\n#   vim:set ft=dockerfile:\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# !/usr/bin/docker build --force-rm --rm -f\n# ? USAGE\n# ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n# ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n# ?\n# ?          OSAFT_VERSION\n# ?              Version of this build (should be used as image tag also).\n# ?\n# ?          OSAFT_VM_FROM\n# ?              Base image to be used for this build. Tested images are:\n# ?                  (2017) alpine:3.6  alpine:edge  debian:stretch-slim  debian\n# ?                  (2018) alpine:3.8  debian\n# ?\n# ?          OSAFT_VM_APT_INSTALL\n# ?              Additional packages  to be installed in the image.\n# ?              Note that the package names depend on the used base image.\n# ?              Tested packages are:  tcl  tk  xvfb  openssl\n# ?\n# ?          OSAFT_VM_SRC_OSAFT\n# ?              URL to fetch o-saft.tgz archive.\n# ?\n# ?          OSAFT_VM_SHA_OSAFT\n# ?              SHA256 checksum for the o-saft.tgz archive.\n# ?              Note that the checksum in the Dockerfile provided by this .tgz\n# ?              archive is wrong (due to hen-egg-problem).\n# ?              https://github.com/OWASP/O-Saft/blob/master/Dockerfile  is the\n# ?              most current version and contains proper checksums.\n# ?\n# ?          OSAFT_VM_TAR_OSAFT\n# ?              Name of archive file for O-Saft (during build).\n# ?\n# ?          OSAFT_VM_SRC_OPENSSL\n# ?              URL to fetch openssl.tgz archive.\n# ?\n# ?          OSAFT_VM_SHA_OPENSSL\n# ?              SHA256 checksum for the openssl-1.0.2-chacha.tar.gz archive.\n# ?\n# ?          OSAFT_VM_TAR_OPENSSL\n# ?              Name of archive file for OpenSSL (during build).\n# ?\n# ?          OSAFT_VM_DYN_OPENSSL\n# ?              Build (link) mode of openssl executable: --static or --shared\n# ?\n# ?          OSAFT_VM_SRC_SSLEAY\n# ?              URL to fetch Net-SSLeay.tar.gz archive.\n# ?\n# ?          OSAFT_VM_SHA_SSLEAY\n# ?              SHA256 checksum for the Net-SSLeay.tar.gz archive.\n# ?\n# ?          OSAFT_VM_TAR_SSLEAY\n# ?              Name of archive file for Net-SSLeay.tgz (during build).\n# ?\n# ?          OSAFT_VM_SRC_SOCKET\n# ?              URL to fetch IO-Socket-SSL.tar.gz archive.\n# ?\n# ?          OSAFT_VM_SHA_SOCKET\n# ?              SHA256 checksum for the IO-Socket-SSL.tar.gz archive.\n# ?\n# ?          OSAFT_VM_TAR_SOCKET\n# ?              Name of archive file for IO-Socket-SSL.tgz (during build).\n# ?\n# ? ENVIRONMENT VARIABLES\n# ?      The build image sets environment variables. They are mainly used for\n# ?      documentation or by other programs to check for the right build.\n# ?\n# ?      Following environment variables are set inside the docker image:\n# ?\n# ?          osaft_vm_build\n# ?              Build version of this image, used by o-saft-docker.\n# ?          OSAFT_DIR\n# ?              Directory where O-Saft  is installed.\n# ?          OPENSSL_DIR\n# ?              Directory where OpenSSL is installed.\n# ?          OPENSSL_VERSION\n# ?              Version of installed OpenSSL\n# ?          TERM\n# ?              Prefered X-Terminal program.\n# ?          LD_RUN_PATH\n# ?              Additional paths for runtime loader, used while linking with\n# ?              \"ld -rpath=...\"\n# ?              Linking of openssl, libssl.so and SSLeay.so will use  -rpath\n# ?              in LDFLAGS to ensure that the special library will be used.\n# ?              Default:${OPENSSL_DIR}/lib\n# ?          PATH\n# ?              PATH for shell, set to:\n# ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$OPENSSL_DIR/bin:$PATH\n# ?          WORK_DIR\n# ?              Directory where to build the packages (used for Dockerfile's\n# ?              WORKDIR  dierective.\n# ?\n# ? EXAMPLES\n# ?      Simple build with defaults:  alpine:edge, o-saft.tgz, openssl-chacha\n# ?          docker build --force-rm --rm \\ \n# ?                  -f Dockerfile -t owasp/o-saft .\n# ?\n# ?      Simple build with base image alpine:3.8\n# ?          docker build --force-rm --rm \\ \n# ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.8\" \\ \n# ?                  -f Dockerfile -t owasp/o-saft .\n# ?\n# ?      Build with base image alpine:3.6 and Tcl/Tk\n# ?          docker build --force-rm --rm \\ \n# ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.6\" \\ \n# ?                  --build-arg \"OSAFT_VM_APT_INSTALL=tcl tk xvfb\" \\ \n# ?                  -f Dockerfile -t owasp/o-saft .\n# ?\n# ?      Build with other SHA256 checksum for o-saft.tgz\n# ?          docker build --force-rm --rm \\ \n# ?                  --build-arg \"OSAFT_VM_SHA_OSAFT=caffee\" \\ \n# ?                  -f Dockerfile -t owasp/o-saft .\n# ?\n# ?      Build with development O-Saft download from github\n# ?          docker build --force-rm --rm \\ \n# ?                  --build-arg \"OSAFT_VM_SRC_OSAFT=https://github.com/OWASP/O-Saft/archive/master.tar.gz\" \\ \n# ?                  --build-arg \"OSAFT_VERSION=latest-development\" \\ \n# ?                  -f Dockerfile -t owasp/o-saft .\n# ?\n# ?      Note that  o-saft-docker  searches for a Docker image  owasp/o-saft\n# ?      so don't forget to tag at least one image with this name.\n# ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#  Parameters passed to build\n#  OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_OSAFT=\"https://github.com/OWASP/O-Saft/raw/master/o-saft.tgz\"\nARG OSAFT_VM_SHA_OSAFT=\"29d4faa2ed3025ed18d31175e868d6be9312b36ba486c6e5f305afeb34947f68\"\nARG OSAFT_VM_TAR_OSAFT=\"o-saft.tgz\"\nARG OSAFT_VM_SRC_SSLEAY=\"http://search.cpan.org/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.85.tar.gz\"\nARG OSAFT_VM_SHA_SSLEAY=\"9d8188b9fb1cae3bd791979c20554925d5e94a138d00414f1a6814549927b0c8\"\nARG OSAFT_VM_TAR_SSLEAY=\"Net-SSLeay.tgz\"\nARG OSAFT_VM_SRC_SOCKET=\"http://search.cpan.org/CPAN/authors/id/S/SU/SULLR/IO-Socket-SSL-2.052.tar.gz\"\nARG OSAFT_VM_SHA_SOCKET=\"e4897a9b17cb18a3c44aa683980d52cef534cdfcb8063d6877c879bfa2f26673\"\nARG OSAFT_VM_TAR_SOCKET=\"IO-Socket-SSL.tgz\"\nARG OSAFT_VM_SRC_OPENSSL=\"https://github.com/PeterMosmans/openssl/archive/1.0.2-chacha.tar.gz\"\nARG OSAFT_VM_SHA_OPENSSL=\"ad3d99ec091e403a3a7a678ddda38b392e3204515425827c53dc5baa92d61d67\"\nARG OSAFT_VM_TAR_OPENSSL=\"openssl.tgz\"\nARG OSAFT_VM_DYN_OPENSSL=\"--shared\"\n#                              --static  not yet (2017) working 'cause of libkrb5\nARG OSAFT_VM_APT_INSTALL\nARG OSAFT_VERSION=\"undefined\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build O-Saft docker image (with Peter Mosman's openssl)\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile -t owasp/o-saft:$OSAFT_VERSION -t owasp/o-saft .\" \\\n      DETAILS=\"Please see https://github.com/OWASP/O-Saft/raw/master/o-saft-docker\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/Dockerfile\" \\\n      SOURCE1=\"$OSAFT_VM_SRC_OSAFT\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_OPENSSL\" \\\n      SID=\"@(#) Dockerfile 1.29 19/01/20 23:25:44\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV OSAFT_DIR=\"/O-Saft\"\nENV OPENSSL_DIR=\"/openssl\"\nENV OPENSSL_VERSION=\"1.0.2-chacha\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${OPENSSL_DIR}/lib\"\nENV PATH=\"${OSAFT_DIR}:${OSAFT_DIR}/contrib:${OPENSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\nRUN apk add --no-cache wget ncurses $OSAFT_VM_APT_INSTALL gcc make musl-dev linux-headers krb5-dev zlib-dev perl perl-readonly perl-dev ca-certificates \\\n && apk add --no-cache gmp-dev lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $OPENSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OPENSSL -O $OSAFT_VM_TAR_OPENSSL \\\n && [ -n \"$OSAFT_VM_SHA_OPENSSL\" ] \\\n && echo \"$OSAFT_VM_SHA_OPENSSL $OSAFT_VM_TAR_OPENSSL\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OPENSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && sed -i '/RANDFILE/a openssl_conf=openssl_def' apps/openssl.cnf \\\n && (echo 'openssl_conf=openssl_def' ;echo '[openssl_def]' ;echo 'engines=engine_section' ;echo '[engine_section]' ;echo 'gost=gost_section' ;echo '[gost_section]' ;echo 'engine_id = gost' ;echo 'default_algorithms=ALL' ;echo 'CRYPT_PARAMS=id-Gost28147-89-CryptoPro-A-ParamSet' ) >> apps/openssl.cnf \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./config --prefix=$OPENSSL_DIR --openssldir=$OPENSSL_DIR/ssl $OSAFT_VM_DYN_OPENSSL --with-krb5-flavor=MIT --with-krb5-dir=/usr/include/krb5/ -fPIC zlib zlib-dynamic enable-zlib enable-npn sctp enable-deprecated enable-weak-ssl-ciphers enable-heartbeats enable-unit-test enable-ssl-trace enable-ssl3 enable-ssl3-method enable-ssl2 enable-tls1 enable-tls1-method enable-tls enable-tls1-1 enable-tls1-1-method enable-tlsext enable-tls1-2 enable-tls1-2-method enable-tls1-2-client enable-dtls1 enable-dtls1-method enable-dtls1-2 enable-dtls1-2-method enable-md2 enable-md4 enable-mdc2 enable-rc2 enable-rc4 enable-rc5 enable-sha0 enable-sha1 enable-sha256 enable-sha512 enable-aes enable-cms enable-dh enable-egd enable-des enable-dsa enable-rsa enable-rsax enable-ec enable-ec2m enable-ecdh enable-ecdsa enable-blake2 enable-bf enable-cast enable-camellia enable-gmp enable-gost enable-GOST enable-idea enable-poly1305 enable-krb5 enable-rdrand enable-rmd160 enable-seed enable-srp enable-whirlpool enable-rfc3779 enable-ec_nistp_64_gcc_128 experimental-jpake -DOPENSSL_USE_BUILD_DATE -DTLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES -DTEMP_GOST_TLS \\\n && make depend \\\n && make \\\n && make report -i \\\n && make install \\\n && echo -n \"# number of ciphers $OPENSSL_DIR/bin/openssl: \" \\\n && $OPENSSL_DIR/bin/openssl ciphers -V ALL:COMPLEMENTOFALL:aNULL | wc -l \\\n && apk del --purge gmp-dev lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_OPENSSL \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SSLEAY -O $OSAFT_VM_TAR_SSLEAY \\\n && [ -n \"$OSAFT_VM_SHA_SSLEAY\" ] \\\n && echo \"$OSAFT_VM_SHA_SSLEAY $OSAFT_VM_TAR_SSLEAY\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SSLEAY -C $BUILD_DIR --strip-components=1 \\\n && apk add --no-cache perl-net-dns perl-net-libidn perl-mozilla-ca \\\n && cd $BUILD_DIR \\\n && perl -i.orig -pe 'if (m/^#define\\s*REM_AUTOMATICALLY_GENERATED_1_09/){print \"const SSL_METHOD * SSLv2_method()\\n\\nconst SSL_METHOD * SSLv3_method()\\n\\n\";}' SSLeay.xs \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && echo \"n\" | env OPENSSL_PREFIX=$OPENSSL_DIR perl Makefile.PL INC=-I$OPENSSL_DIR/include DEFINE=-DOPENSSL_BUILD_UNSAFE=1 \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_SSLEAY \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SOCKET -O $OSAFT_VM_TAR_SOCKET \\\n && [ -n \"$OSAFT_VM_SHA_SOCKET\" ] \\\n && echo \"$OSAFT_VM_SHA_SOCKET $OSAFT_VM_TAR_SOCKET\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SOCKET -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && echo \"n\" | perl Makefile.PL INC=-I$OPENSSL_DIR/include \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -r $BUILD_DIR $OSAFT_VM_TAR_SOCKET \\\n && cd $WORK_DIR \\\n && mkdir -p $OSAFT_DIR \\\n && adduser -D -h ${OSAFT_DIR} osaft \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OSAFT -O $OSAFT_VM_TAR_OSAFT \\\n && [ -n \"$OSAFT_VM_SHA_OSAFT\" ] \\\n && echo \"$OSAFT_VM_SHA_OSAFT $OSAFT_VM_TAR_OSAFT\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OSAFT \\\n && ([ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/.[a-zA-Z]* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && rm -rf ./O-Saft-master/ ;exit 0 ) \\\n && chown -R root:root $OSAFT_DIR \\\n && chown -R osaft:osaft $OSAFT_DIR/contrib \\\n && chown osaft:osaft $OSAFT_DIR/.o-saft.pl \\\n && cp $OSAFT_DIR/.o-saft.pl $OSAFT_DIR/.o-saft.pl-orig \\\n && perl -i.bak -pe \"s:^#?\\s*--openssl=.*:--openssl=$OPENSSL_DIR/bin/openssl:;s:^#?\\s*--openssl-cnf=.*:--openssl-cnf=$OPENSSL_DIR/ssl/openssl.cnf:;s:^#?\\s*--ca-path=.*:--ca-path=/etc/ssl/certs/:;s:^#?\\s*--ca-file=.*:--ca-file=/etc/ssl/certs/ca-certificates.crt:\" $OSAFT_DIR/.o-saft.pl \\\n && chmod 666 $OSAFT_DIR/.o-saft.pl \\\n && rm -f $OSAFT_VM_TAR_OSAFT \\\n && apk del --purge gcc make musl-dev linux-headers perl-dev\n#  do not delete  krb5-dev zlib-dev  because we need\n#   libkrb5.so.3, libk5crypto.so.3 and libz.so to run openssl\nWORKDIR $OSAFT_DIR\nUSER osaft\nRUN o-saft-docker usage\nENTRYPOINT [\"/O-Saft/o-saft\"]\nCMD [\"--norc\", \"--help=docker\"]\n#  vim:set ft=dockerfile:\n","injectedSmells":[],"originalDockerfileHash":"d16c28123cb6617ef321390ee7ff1d20","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  !/usr/bin/docker build --force-rm --rm -f\n#  ? USAGE\n#  ?      This Dockerfile uses \"buildargs\" variables to build the Docker image.\n#  ?      For default settings, please use:  awk '/^ARG/{print $2}' Dockerfile\n#  ?\n#  ?          OSAFT_VERSION\n#  ?              Version of this build (should be used as image tag also).\n#  ?\n#  ?          OSAFT_VM_FROM\n#  ?              Base image to be used for this build. Tested images are:\n#  ?                  (2017) alpine:3.6  alpine:edge  debian:stretch-slim  debian\n#  ?                  (2018) alpine:3.8  debian\n#  ?\n#  ?          OSAFT_VM_APT_INSTALL\n#  ?              Additional packages  to be installed in the image.\n#  ?              Note that the package names depend on the used base image.\n#  ?              Tested packages are:  tcl  tk  xvfb  openssl\n#  ?\n#  ?          OSAFT_VM_SRC_OSAFT\n#  ?              URL to fetch o-saft.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_OSAFT\n#  ?              SHA256 checksum for the o-saft.tgz archive.\n#  ?              Note that the checksum in the Dockerfile provided by this .tgz\n#  ?              archive is wrong (due to hen-egg-problem).\n#  ?              https://github.com/OWASP/O-Saft/blob/master/Dockerfile  is the\n#  ?              most current version and contains proper checksums.\n#  ?\n#  ?          OSAFT_VM_TAR_OSAFT\n#  ?              Name of archive file for O-Saft (during build).\n#  ?\n#  ?          OSAFT_VM_SRC_OPENSSL\n#  ?              URL to fetch openssl.tgz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_OPENSSL\n#  ?              SHA256 checksum for the openssl-1.0.2-chacha.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_OPENSSL\n#  ?              Name of archive file for OpenSSL (during build).\n#  ?\n#  ?          OSAFT_VM_DYN_OPENSSL\n#  ?              Build (link) mode of openssl executable: --static or --shared\n#  ?\n#  ?          OSAFT_VM_SRC_SSLEAY\n#  ?              URL to fetch Net-SSLeay.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_SSLEAY\n#  ?              SHA256 checksum for the Net-SSLeay.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_SSLEAY\n#  ?              Name of archive file for Net-SSLeay.tgz (during build).\n#  ?\n#  ?          OSAFT_VM_SRC_SOCKET\n#  ?              URL to fetch IO-Socket-SSL.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_SHA_SOCKET\n#  ?              SHA256 checksum for the IO-Socket-SSL.tar.gz archive.\n#  ?\n#  ?          OSAFT_VM_TAR_SOCKET\n#  ?              Name of archive file for IO-Socket-SSL.tgz (during build).\n#  ?\n#  ? ENVIRONMENT VARIABLES\n#  ?      The build image sets environment variables. They are mainly used for\n#  ?      documentation or by other programs to check for the right build.\n#  ?\n#  ?      Following environment variables are set inside the docker image:\n#  ?\n#  ?          osaft_vm_build\n#  ?              Build version of this image, used by o-saft-docker.\n#  ?          OSAFT_DIR\n#  ?              Directory where O-Saft  is installed.\n#  ?          OPENSSL_DIR\n#  ?              Directory where OpenSSL is installed.\n#  ?          OPENSSL_VERSION\n#  ?              Version of installed OpenSSL\n#  ?          TERM\n#  ?              Prefered X-Terminal program.\n#  ?          LD_RUN_PATH\n#  ?              Additional paths for runtime loader, used while linking with\n#  ?              \"ld -rpath=...\"\n#  ?              Linking of openssl, libssl.so and SSLeay.so will use  -rpath\n#  ?              in LDFLAGS to ensure that the special library will be used.\n#  ?              Default:${OPENSSL_DIR}/lib\n#  ?          PATH\n#  ?              PATH for shell, set to:\n#  ?                  $OSAFT_DIR:$OSAFT_DIR/contrib:$OPENSSL_DIR/bin:$PATH\n#  ?          WORK_DIR\n#  ?              Directory where to build the packages (used for Dockerfile's\n#  ?              WORKDIR  dierective.\n#  ?\n#  ? EXAMPLES\n#  ?      Simple build with defaults:  alpine:edge, o-saft.tgz, openssl-chacha\n#  ?          docker build --force-rm --rm \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Simple build with base image alpine:3.8\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.8\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with base image alpine:3.6 and Tcl/Tk\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_FROM=alpine:3.6\" \\ \n#  ?                  --build-arg \"OSAFT_VM_APT_INSTALL=tcl tk xvfb\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with other SHA256 checksum for o-saft.tgz\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_SHA_OSAFT=caffee\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Build with development O-Saft download from github\n#  ?          docker build --force-rm --rm \\ \n#  ?                  --build-arg \"OSAFT_VM_SRC_OSAFT=https://github.com/OWASP/O-Saft/archive/master.tar.gz\" \\ \n#  ?                  --build-arg \"OSAFT_VERSION=latest-development\" \\ \n#  ?                  -f Dockerfile -t owasp/o-saft .\n#  ?\n#  ?      Note that  o-saft-docker  searches for a Docker image  owasp/o-saft\n#  ?      so don't forget to tag at least one image with this name.\n#  ?\nARG OSAFT_VM_FROM=alpine:3.8\nFROM $OSAFT_VM_FROM\nMAINTAINER Achim <achim@owasp.org>\n#   Parameters passed to build\n#   OSAFT_VM_FROM must be defined again, otherwise its value is not available\nARG OSAFT_VM_FROM\nARG OSAFT_VM_SRC_OSAFT=\"https://github.com/OWASP/O-Saft/raw/master/o-saft.tgz\"\nARG OSAFT_VM_SHA_OSAFT=\"29d4faa2ed3025ed18d31175e868d6be9312b36ba486c6e5f305afeb34947f68\"\nARG OSAFT_VM_TAR_OSAFT=\"o-saft.tgz\"\nARG OSAFT_VM_SRC_SSLEAY=\"http://search.cpan.org/CPAN/authors/id/M/MI/MIKEM/Net-SSLeay-1.85.tar.gz\"\nARG OSAFT_VM_SHA_SSLEAY=\"9d8188b9fb1cae3bd791979c20554925d5e94a138d00414f1a6814549927b0c8\"\nARG OSAFT_VM_TAR_SSLEAY=\"Net-SSLeay.tgz\"\nARG OSAFT_VM_SRC_SOCKET=\"http://search.cpan.org/CPAN/authors/id/S/SU/SULLR/IO-Socket-SSL-2.052.tar.gz\"\nARG OSAFT_VM_SHA_SOCKET=\"e4897a9b17cb18a3c44aa683980d52cef534cdfcb8063d6877c879bfa2f26673\"\nARG OSAFT_VM_TAR_SOCKET=\"IO-Socket-SSL.tgz\"\nARG OSAFT_VM_SRC_OPENSSL=\"https://github.com/PeterMosmans/openssl/archive/1.0.2-chacha.tar.gz\"\nARG OSAFT_VM_SHA_OPENSSL=\"ad3d99ec091e403a3a7a678ddda38b392e3204515425827c53dc5baa92d61d67\"\nARG OSAFT_VM_TAR_OPENSSL=\"openssl.tgz\"\nARG OSAFT_VM_DYN_OPENSSL=\"--shared\"\n#                               --static  not yet (2017) working 'cause of libkrb5\nARG OSAFT_VM_APT_INSTALL\nARG OSAFT_VERSION=\"undefined\"\nLABEL VERSION=\"$OSAFT_VERSION\" \\\n      DESCRIPTION=\"Build O-Saft docker image (with Peter Mosman's openssl)\" \\\n      SYNOPSIS=\"docker build --force-rm --rm -f ./Dockerfile -t owasp/o-saft:$OSAFT_VERSION -t owasp/o-saft .\" \\\n      DETAILS=\"Please see https://github.com/OWASP/O-Saft/raw/master/o-saft-docker\" \\\n      SOURCE0=\"https://github.com/OWASP/O-Saft/raw/master/Dockerfile\" \\\n      SOURCE1=\"$OSAFT_VM_SRC_OSAFT\" \\\n      SOURCE2=\"$OSAFT_VM_SRC_OPENSSL\" \\\n      SID=\"@(#) Dockerfile 1.29 19/01/20 23:25:44\" \\\n      AUTHOR=\"Achim Hoffmann\"\nENV osaft_vm_build=\"\\\"Dockerfile $OSAFT_VERSION; FROM $OSAFT_VM_FROM\\\"\"\nENV OSAFT_DIR=\"/O-Saft\"\nENV OPENSSL_DIR=\"/openssl\"\nENV OPENSSL_VERSION=\"1.0.2-chacha\"\nENV TERM=\"xterm\"\nENV LD_RUN_PATH=\"${OPENSSL_DIR}/lib\"\nENV PATH=\"${OSAFT_DIR}:${OSAFT_DIR}/contrib:${OPENSSL_DIR}/bin:$PATH\"\nENV BUILD_DIR=\"/tmp_src\"\nENV WORK_DIR=\"/\"\nWORKDIR $WORK_DIR\nRUN apk add --no-cache wget ncurses $OSAFT_VM_APT_INSTALL gcc make musl-dev linux-headers krb5-dev zlib-dev perl perl-readonly perl-dev ca-certificates \\\n && apk add --no-cache gmp-dev lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR $OPENSSL_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OPENSSL -O $OSAFT_VM_TAR_OPENSSL \\\n && [ -n \"$OSAFT_VM_SHA_OPENSSL\" ] \\\n && echo \"$OSAFT_VM_SHA_OPENSSL $OSAFT_VM_TAR_OPENSSL\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OPENSSL -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && sed -i '/RANDFILE/a openssl_conf=openssl_def' apps/openssl.cnf \\\n && (echo 'openssl_conf=openssl_def' ;echo '[openssl_def]' ;echo 'engines=engine_section' ;echo '[engine_section]' ;echo 'gost=gost_section' ;echo '[gost_section]' ;echo 'engine_id = gost' ;echo 'default_algorithms=ALL' ;echo 'CRYPT_PARAMS=id-Gost28147-89-CryptoPro-A-ParamSet' ) >> apps/openssl.cnf \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && ./config --prefix=$OPENSSL_DIR --openssldir=$OPENSSL_DIR/ssl $OSAFT_VM_DYN_OPENSSL --with-krb5-flavor=MIT --with-krb5-dir=/usr/include/krb5/ -fPIC zlib zlib-dynamic enable-zlib enable-npn sctp enable-deprecated enable-weak-ssl-ciphers enable-heartbeats enable-unit-test enable-ssl-trace enable-ssl3 enable-ssl3-method enable-ssl2 enable-tls1 enable-tls1-method enable-tls enable-tls1-1 enable-tls1-1-method enable-tlsext enable-tls1-2 enable-tls1-2-method enable-tls1-2-client enable-dtls1 enable-dtls1-method enable-dtls1-2 enable-dtls1-2-method enable-md2 enable-md4 enable-mdc2 enable-rc2 enable-rc4 enable-rc5 enable-sha0 enable-sha1 enable-sha256 enable-sha512 enable-aes enable-cms enable-dh enable-egd enable-des enable-dsa enable-rsa enable-rsax enable-ec enable-ec2m enable-ecdh enable-ecdsa enable-blake2 enable-bf enable-cast enable-camellia enable-gmp enable-gost enable-GOST enable-idea enable-poly1305 enable-krb5 enable-rdrand enable-rmd160 enable-seed enable-srp enable-whirlpool enable-rfc3779 enable-ec_nistp_64_gcc_128 experimental-jpake -DOPENSSL_USE_BUILD_DATE -DTLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES -DTEMP_GOST_TLS \\\n && make depend \\\n && make \\\n && make report -i \\\n && make install \\\n && echo -n \"# number of ciphers $OPENSSL_DIR/bin/openssl: \" \\\n && $OPENSSL_DIR/bin/openssl ciphers -V ALL:COMPLEMENTOFALL:aNULL | wc -l \\\n && apk del --purge gmp-dev lksctp-tools-dev \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_OPENSSL \\\n && cd $WORK_DIR \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SSLEAY -O $OSAFT_VM_TAR_SSLEAY \\\n && [ -n \"$OSAFT_VM_SHA_SSLEAY\" ] \\\n && echo \"$OSAFT_VM_SHA_SSLEAY $OSAFT_VM_TAR_SSLEAY\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SSLEAY -C $BUILD_DIR --strip-components=1 \\\n && apk add --no-cache perl-net-dns perl-net-libidn perl-mozilla-ca \\\n && cd $BUILD_DIR \\\n && perl -i.orig -pe 'if (m/^#define\\s*REM_AUTOMATICALLY_GENERATED_1_09/){print \"const SSL_METHOD * SSLv2_method()\\n\\nconst SSL_METHOD * SSLv3_method()\\n\\n\";}' SSLeay.xs \\\n && LDFLAGS=\"-rpath=$LD_RUN_PATH\" \\\n && export LDFLAGS \\\n && echo \"n\" | env OPENSSL_PREFIX=$OPENSSL_DIR perl Makefile.PL INC=-I$OPENSSL_DIR/include DEFINE=-DOPENSSL_BUILD_UNSAFE=1 \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -rf $BUILD_DIR $OSAFT_VM_TAR_SSLEAY \\\n && mkdir -p $BUILD_DIR \\\n && wget --no-check-certificate $OSAFT_VM_SRC_SOCKET -O $OSAFT_VM_TAR_SOCKET \\\n && [ -n \"$OSAFT_VM_SHA_SOCKET\" ] \\\n && echo \"$OSAFT_VM_SHA_SOCKET $OSAFT_VM_TAR_SOCKET\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_SOCKET -C $BUILD_DIR --strip-components=1 \\\n && cd $BUILD_DIR \\\n && echo \"n\" | perl Makefile.PL INC=-I$OPENSSL_DIR/include \\\n && make \\\n && make test \\\n && make install \\\n && cd $WORK_DIR \\\n && rm -r $BUILD_DIR $OSAFT_VM_TAR_SOCKET \\\n && cd $WORK_DIR \\\n && mkdir -p $OSAFT_DIR \\\n && adduser -D -h ${OSAFT_DIR} osaft \\\n && wget --no-check-certificate $OSAFT_VM_SRC_OSAFT -O $OSAFT_VM_TAR_OSAFT \\\n && [ -n \"$OSAFT_VM_SHA_OSAFT\" ] \\\n && echo \"$OSAFT_VM_SHA_OSAFT $OSAFT_VM_TAR_OSAFT\" | sha256sum -c ; tar -xzf $OSAFT_VM_TAR_OSAFT \\\n && ([ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && mv ./O-Saft-master/.[a-zA-Z]* $OSAFT_DIR/ ;[ -d \"./O-Saft-master\" ] \\\n && rm -rf ./O-Saft-master/ ;exit 0 ) \\\n && chown -R root:root $OSAFT_DIR \\\n && chown -R osaft:osaft $OSAFT_DIR/contrib \\\n && chown osaft:osaft $OSAFT_DIR/.o-saft.pl \\\n && cp $OSAFT_DIR/.o-saft.pl $OSAFT_DIR/.o-saft.pl-orig \\\n && perl -i.bak -pe \"s:^#?\\s*--openssl=.*:--openssl=$OPENSSL_DIR/bin/openssl:;s:^#?\\s*--openssl-cnf=.*:--openssl-cnf=$OPENSSL_DIR/ssl/openssl.cnf:;s:^#?\\s*--ca-path=.*:--ca-path=/etc/ssl/certs/:;s:^#?\\s*--ca-file=.*:--ca-file=/etc/ssl/certs/ca-certificates.crt:\" $OSAFT_DIR/.o-saft.pl \\\n && chmod 666 $OSAFT_DIR/.o-saft.pl \\\n && rm -f $OSAFT_VM_TAR_OSAFT \\\n && apk del --purge gcc make musl-dev linux-headers perl-dev\n#   do not delete  krb5-dev zlib-dev  because we need\n#    libkrb5.so.3, libk5crypto.so.3 and libz.so to run openssl\nWORKDIR $OSAFT_DIR\nUSER osaft\nRUN o-saft-docker usage\nENTRYPOINT [\"/O-Saft/o-saft\"]\nCMD [\"--norc\", \"--help=docker\"]\n#   vim:set ft=dockerfile:\n","originalDockerfileUglifiedHash":"dbcdb4351ea58b051fd3d04c6e45780d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c19d8f44fbac289f35c8a2c7091eb8f9755f7008.dockerfile"}