{"seed":2679152614,"processedDockerfileHash":"b798725e89b36c35f06f4de2ba861a8d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-gem","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ####################################################\n#\n#   Alpine container with\n#   (this is used in DEV mode)\n#\n#   + ruby:2.6.3\n#   + node:8.15.0\n#   + yarn:1.12.3\n#\n#  ####################################################\nFROM node:8.15.1-alpine AS alpine-ruby-node\n#  ------------------------------------------------------------------------------------------\n#\n#   Ruby installation, taken from the official ruby alpine dockerfile\n#   see : https://github.com/docker-library/ruby/blob/9ae0943fa2935b3a13c72ae7d6afa2439145d7fa/2.6/alpine3.9/Dockerfile\n#\n#  ------------------------------------------------------------------------------------------\nRUN apk add gmp-dev --no-cache\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.6\"\nENV RUBY_VERSION=\"2.6.3\"\nENV RUBY_DOWNLOAD_SHA256=\"11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN set -ex \\\n && apk add autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev procps readline-dev ruby tar xz yaml-dev zlib-dev --no-cache --virtual .ruby-builddeps \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \\\n && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \\\n && patch -p1 -i thread-stack-fix.patch \\\n && rm thread-stack-fix.patch \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add bzip2 ca-certificates libffi-dev procps yaml-dev zlib-dev $runDeps --no-network --virtual .ruby-rundeps \\\n && apk del --no-network .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#  ------------------------------------------------------------------------------------------\n#\n#   End of ruby installation\n#\n#  ------------------------------------------------------------------------------------------\n#   Install alpine equivalent for \"build-essential\"\n#\n#   and other dependencies required by dev.to various\n#   ruby dependencies (postgresql-dev, tzdata)\nRUN apk add alpine-sdk postgresql-dev tzdata --no-cache\n#   Im installing bash, as im a bash addict (not that great with sh)\nRUN apk add bash\n#   Let's setup the rails directory\n#   (@TODO - consider a production version?)\nWORKDIR /usr/src/app\nENV RAILS_ENV=\"development\"\n#  ####################################################\n#\n#   Let's prepare the dev.to source code files\n#   WITHOUT docker related files\n#\n#   This allow us to modify the docker\n#   entrypoint / run file without recompiling\n#   the entire application\n#   (especially when creating this build script =| )\n#\n#   (@TODO - improve and review ignore to blacklist unneeded items)\n#\n#  ####################################################\n#\n#   Prepare the source code and remove any unneeded files\n#\nFROM alpine-ruby-node AS source-code-repo\n#   The workdir\nWORKDIR /usr/src/app\n#   Copy source code\nCOPY ./ /usr/src/app/\n#   remove docker related files\nRUN rm Dockerfile \\\n && rm docker-*\n#\n#   Does the source code build\n#\nFROM alpine-ruby-node AS source-code-build\n#   Copy over files\nCOPY --from=source-code-repo /usr/src/app/ /usr/src/app/\n#   Run the various installer\nRUN gem install bundler --version 2.4.12\nRUN bundle install --jobs 20 --retry 5\nRUN yarn install \\\n && yarn check --integrity\n#  ####################################################\n#\n#   Let's build the DEMO dev.to image\n#\n#  ####################################################\nFROM alpine-ruby-node\n#   Copy over the application code (without docker related files)\nCOPY --from=source-code-build /usr/src/app/ /usr/src/app/\n#   Copy over docker related files\nCOPY Dockerfile [(docker-)]* /usr/src/app/\n#\n#   Execution environment variables\n#\n#   timeout extension requried to ensure\n#   system work properly on first time load\nENV RACK_TIMEOUT_WAIT_TIMEOUT=\"10000\" \\\n    RACK_TIMEOUT_SERVICE_TIMEOUT=\"10000\" \\\n    STATEMENT_TIMEOUT=\"10000\"\n#   Run mode configuration between dev / demo\n#   for entrypoint script behaviour\nENV RUN_MODE=\"demo\"\n#   Database URL configuration - with user/pass\nENV DATABASE_URL=\"postgresql://devto:devto@db:5432/PracticalDeveloper_development\"\n#   DB setup / migrate script triggers on boot\nENV DB_SETUP=\"true\" \\\n    DB_MIGRATE=\"true\"\n#\n#   Let's setup the public uploads folder volume\n#\nRUN mkdir -p /usr/src/app/public/uploads\nVOLUME /usr/src/app/public/uploads\n#   Entrypoint and command to start the server\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD []\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"# ####################################################\n#\n#  Alpine container with\n#  (this is used in DEV mode)\n#\n#  + ruby:2.6.3\n#  + node:8.15.0\n#  + yarn:1.12.3\n#\n# ####################################################\nFROM node:8.15.1-alpine AS alpine-ruby-node\n# ------------------------------------------------------------------------------------------\n#\n#  Ruby installation, taken from the official ruby alpine dockerfile\n#  see : https://github.com/docker-library/ruby/blob/9ae0943fa2935b3a13c72ae7d6afa2439145d7fa/2.6/alpine3.9/Dockerfile\n#\n# ------------------------------------------------------------------------------------------\nRUN apk add --no-cache gmp-dev\n#  skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.6\"\nENV RUBY_VERSION=\"2.6.3\"\nENV RUBY_DOWNLOAD_SHA256=\"11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1\"\n#  some of ruby's build scripts are written in ruby\n#    we purge system ruby later to make sure our final image uses what we just built\n#  readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN set -ex \\\n && apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev procps readline-dev ruby tar xz yaml-dev zlib-dev \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \\\n && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \\\n && patch -p1 -i thread-stack-fix.patch \\\n && rm thread-stack-fix.patch \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-network --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev procps yaml-dev zlib-dev \\\n && apk del --no-network .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#  install things globally, for great justice\n#  and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#  path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#  adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#  (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n# ------------------------------------------------------------------------------------------\n#\n#  End of ruby installation\n#\n# ------------------------------------------------------------------------------------------\n#  Install alpine equivalent for \"build-essential\"\n#\n#  and other dependencies required by dev.to various\n#  ruby dependencies (postgresql-dev, tzdata)\nRUN apk add --no-cache alpine-sdk postgresql-dev tzdata\n#  Im installing bash, as im a bash addict (not that great with sh)\nRUN apk add bash\n#  Let's setup the rails directory\n#  (@TODO - consider a production version?)\nWORKDIR /usr/src/app\nENV RAILS_ENV=\"development\"\n# ####################################################\n#\n#  Let's prepare the dev.to source code files\n#  WITHOUT docker related files\n#\n#  This allow us to modify the docker\n#  entrypoint / run file without recompiling\n#  the entire application\n#  (especially when creating this build script =| )\n#\n#  (@TODO - improve and review ignore to blacklist unneeded items)\n#\n# ####################################################\n#\n#  Prepare the source code and remove any unneeded files\n#\nFROM alpine-ruby-node AS source-code-repo\n#  The workdir\nWORKDIR /usr/src/app\n#  Copy source code\nCOPY ./ /usr/src/app/\n#  remove docker related files\nRUN rm Dockerfile \\\n && rm docker-*\n#\n#  Does the source code build\n#\nFROM alpine-ruby-node AS source-code-build\n#  Copy over files\nCOPY --from=source-code-repo /usr/src/app/ /usr/src/app/\n#  Run the various installer\nRUN gem install bundler\nRUN bundle install --jobs 20 --retry 5\nRUN yarn install \\\n && yarn check --integrity\n# ####################################################\n#\n#  Let's build the DEMO dev.to image\n#\n# ####################################################\nFROM alpine-ruby-node\n#  Copy over the application code (without docker related files)\nCOPY --from=source-code-build /usr/src/app/ /usr/src/app/\n#  Copy over docker related files\nCOPY Dockerfile [(docker-)]* /usr/src/app/\n#\n#  Execution environment variables\n#\n#  timeout extension requried to ensure\n#  system work properly on first time load\nENV RACK_TIMEOUT_WAIT_TIMEOUT=\"10000\" \\\n    RACK_TIMEOUT_SERVICE_TIMEOUT=\"10000\" \\\n    STATEMENT_TIMEOUT=\"10000\"\n#  Run mode configuration between dev / demo\n#  for entrypoint script behaviour\nENV RUN_MODE=\"demo\"\n#  Database URL configuration - with user/pass\nENV DATABASE_URL=\"postgresql://devto:devto@db:5432/PracticalDeveloper_development\"\n#  DB setup / migrate script triggers on boot\nENV DB_SETUP=\"true\" \\\n    DB_MIGRATE=\"true\"\n#\n#  Let's setup the public uploads folder volume\n#\nRUN mkdir -p /usr/src/app/public/uploads\nVOLUME /usr/src/app/public/uploads\n#  Entrypoint and command to start the server\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD []\n","injectedSmells":[],"originalDockerfileHash":"d5cbd41fbbcae8c72052be989fb09fe6","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ####################################################\n#\n#   Alpine container with\n#   (this is used in DEV mode)\n#\n#   + ruby:2.6.3\n#   + node:8.15.0\n#   + yarn:1.12.3\n#\n#  ####################################################\nFROM node:8.15.1-alpine AS alpine-ruby-node\n#  ------------------------------------------------------------------------------------------\n#\n#   Ruby installation, taken from the official ruby alpine dockerfile\n#   see : https://github.com/docker-library/ruby/blob/9ae0943fa2935b3a13c72ae7d6afa2439145d7fa/2.6/alpine3.9/Dockerfile\n#\n#  ------------------------------------------------------------------------------------------\nRUN apk add --no-cache gmp-dev\n#   skip installing gem documentation\nRUN mkdir -p /usr/local/etc \\\n && { echo 'install: --no-document' ;echo 'update: --no-document' ; } >> /usr/local/etc/gemrc\nENV RUBY_MAJOR=\"2.6\"\nENV RUBY_VERSION=\"2.6.3\"\nENV RUBY_DOWNLOAD_SHA256=\"11a83f85c03d3f0fc9b8a9b6cad1b2674f26c5aaa43ba858d4b0fcc2b54171e1\"\n#   some of ruby's build scripts are written in ruby\n#     we purge system ruby later to make sure our final image uses what we just built\n#   readline-dev vs libedit-dev: https://bugs.ruby-lang.org/issues/11869 and https://github.com/docker-library/ruby/issues/75\nRUN set -ex \\\n && apk add --no-cache --virtual .ruby-builddeps autoconf bison bzip2 bzip2-dev ca-certificates coreutils dpkg-dev dpkg gcc gdbm-dev glib-dev libc-dev libffi-dev libxml2-dev libxslt-dev linux-headers make ncurses-dev openssl openssl-dev procps readline-dev ruby tar xz yaml-dev zlib-dev \\\n && wget -O ruby.tar.xz \"https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz\" \\\n && echo \"$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz\" | sha256sum -c - \\\n && mkdir -p /usr/src/ruby \\\n && tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \\\n && rm ruby.tar.xz \\\n && cd /usr/src/ruby \\\n && wget -O 'thread-stack-fix.patch' 'https://bugs.ruby-lang.org/attachments/download/7081/0001-thread_pthread.c-make-get_main_stack-portable-on-lin.patch' \\\n && echo '3ab628a51d92fdf0d2b5835e93564857aea73e0c1de00313864a94a6255cb645 *thread-stack-fix.patch' | sha256sum -c - \\\n && patch -p1 -i thread-stack-fix.patch \\\n && rm thread-stack-fix.patch \\\n && { echo '#define ENABLE_PATH_CHECK 0' ;echo ;cat file.c ; } > file.c.new \\\n && mv file.c.new file.c \\\n && autoconf \\\n && gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" \\\n && export ac_cv_func_isnan=yes ac_cv_func_isinf=yes \\\n && ./configure --build=\"$gnuArch\" --disable-install-doc --enable-shared \\\n && make -j \"$( nproc ;)\" \\\n && make install \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-network --virtual .ruby-rundeps $runDeps bzip2 ca-certificates libffi-dev procps yaml-dev zlib-dev \\\n && apk del --no-network .ruby-builddeps \\\n && cd / \\\n && rm -r /usr/src/ruby \\\n && ruby --version \\\n && gem --version \\\n && bundle --version\n#   install things globally, for great justice\n#   and don't create \".bundle\" in all our apps\nENV GEM_HOME=\"/usr/local/bundle\"\nENV BUNDLE_PATH=\"$GEM_HOME\" \\\n    BUNDLE_SILENCE_ROOT_WARNING=\"1\" \\\n    BUNDLE_APP_CONFIG=\"$GEM_HOME\"\n#   path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438\nENV PATH=\"$GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH\"\n#   adjust permissions of a few directories for running \"gem install\" as an arbitrary user\nRUN mkdir -p \"$GEM_HOME\" \\\n && chmod 777 \"$GEM_HOME\"\n#   (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)\n#  ------------------------------------------------------------------------------------------\n#\n#   End of ruby installation\n#\n#  ------------------------------------------------------------------------------------------\n#   Install alpine equivalent for \"build-essential\"\n#\n#   and other dependencies required by dev.to various\n#   ruby dependencies (postgresql-dev, tzdata)\nRUN apk add --no-cache alpine-sdk postgresql-dev tzdata\n#   Im installing bash, as im a bash addict (not that great with sh)\nRUN apk add bash\n#   Let's setup the rails directory\n#   (@TODO - consider a production version?)\nWORKDIR /usr/src/app\nENV RAILS_ENV=\"development\"\n#  ####################################################\n#\n#   Let's prepare the dev.to source code files\n#   WITHOUT docker related files\n#\n#   This allow us to modify the docker\n#   entrypoint / run file without recompiling\n#   the entire application\n#   (especially when creating this build script =| )\n#\n#   (@TODO - improve and review ignore to blacklist unneeded items)\n#\n#  ####################################################\n#\n#   Prepare the source code and remove any unneeded files\n#\nFROM alpine-ruby-node AS source-code-repo\n#   The workdir\nWORKDIR /usr/src/app\n#   Copy source code\nCOPY ./ /usr/src/app/\n#   remove docker related files\nRUN rm Dockerfile \\\n && rm docker-*\n#\n#   Does the source code build\n#\nFROM alpine-ruby-node AS source-code-build\n#   Copy over files\nCOPY --from=source-code-repo /usr/src/app/ /usr/src/app/\n#   Run the various installer\nRUN gem install bundler\nRUN bundle install --jobs 20 --retry 5\nRUN yarn install \\\n && yarn check --integrity\n#  ####################################################\n#\n#   Let's build the DEMO dev.to image\n#\n#  ####################################################\nFROM alpine-ruby-node\n#   Copy over the application code (without docker related files)\nCOPY --from=source-code-build /usr/src/app/ /usr/src/app/\n#   Copy over docker related files\nCOPY Dockerfile [(docker-)]* /usr/src/app/\n#\n#   Execution environment variables\n#\n#   timeout extension requried to ensure\n#   system work properly on first time load\nENV RACK_TIMEOUT_WAIT_TIMEOUT=\"10000\" \\\n    RACK_TIMEOUT_SERVICE_TIMEOUT=\"10000\" \\\n    STATEMENT_TIMEOUT=\"10000\"\n#   Run mode configuration between dev / demo\n#   for entrypoint script behaviour\nENV RUN_MODE=\"demo\"\n#   Database URL configuration - with user/pass\nENV DATABASE_URL=\"postgresql://devto:devto@db:5432/PracticalDeveloper_development\"\n#   DB setup / migrate script triggers on boot\nENV DB_SETUP=\"true\" \\\n    DB_MIGRATE=\"true\"\n#\n#   Let's setup the public uploads folder volume\n#\nRUN mkdir -p /usr/src/app/public/uploads\nVOLUME /usr/src/app/public/uploads\n#   Entrypoint and command to start the server\nENTRYPOINT [\"/usr/src/app/docker-entrypoint.sh\"]\nCMD []\n","originalDockerfileUglifiedHash":"f7c88a586c30d65f368c1d6f6b45ca1e","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4388b80629197d645c9fac34158be53ff4ed0c97.dockerfile"}