{"seed":3530034262,"processedDockerfileHash":"9d10429fae9af830e38b982ae4b2800d","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:3.9\nENV NGINX_VERSION=\"1.17.0\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ipv6 --with-cc-opt=-I/usr/src/boringssl/.openssl/include --with-ld-opt=-L/usr/src/boringssl/.openssl/lib --add-dynamic-module=/usr/src/ngx_headers_more --add-dynamic-module=/usr/src/ngx_brotli \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add autoconf=2.69-r2 automake=1.16.1-r0 bind-tools=9.12.4_p2-r0 binutils=2.31.1-r2 build-base=0.5-r1 ca-certificates=20191127-r2 cmake=3.13.0-r0 curl=7.64.0-r5 gcc=8.3.0-r0 gd-dev=2.2.5-r4 geoip-dev=1.6.12-r1 git=2.20.4-r0 gnupg=2.2.19-r0 gnupg=2.2.19-r0 go=1.11.5-r0 libc-dev=0.7.1-r0 libgcc=8.3.0-r0 libstdc++=8.3.0-r0 libtool=2.4.6-r5 libxslt-dev=1.1.33-r3 linux-headers=4.18.13-r1 make=4.2.1-r2 pcre=8.42-r2 pcre-dev=8.42-r2 perl-dev=5.26.3-r1 su-exec=0.2-r0 tar=1.32-r0 tzdata=2020c-r1 zlib=1.2.11-r1 zlib-dev=1.2.11-r1 --no-cache --virtual .build-deps \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && git clone --depth=1 --recurse-submodules https://github.com/eustas/ngx_brotli /usr/src/ngx_brotli \\\n && git clone --depth=1 https://github.com/openresty/headers-more-nginx-module /usr/src/ngx_headers_more \\\n && (git clone --depth=1 https://boringssl.googlesource.com/boringssl /usr/src/boringssl \\\n && sed -i 's@out \\([>=]\\) TLS1_2_VERSION@out \\1 TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_lib.cc \\\n && sed -i 's@ssl->version[ ]*=[ ]*TLS1_2_VERSION@ssl->version = TLS1_3_VERSION@' /usr/src/boringssl/ssl/s3_lib.cc \\\n && sed -i 's@(SSL3_VERSION, TLS1_2_VERSION@(SSL3_VERSION, TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_test.cc \\\n && sed -i 's@\\$shaext[ ]*=[ ]*0;@\\$shaext = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$avx[ ]*=[ ]*[0|1];@\\$avx = 2;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$addx[ ]*=[ ]*0;@\\$addx = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && mkdir -p /usr/src/boringssl/build /usr/src/boringssl/.openssl/lib /usr/src/boringssl/.openssl/include \\\n && ln -sf /usr/src/boringssl/include/openssl /usr/src/boringssl/.openssl/include/openssl \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && cmake -B/usr/src/boringssl/build -H/usr/src/boringssl \\\n && make -C/usr/src/boringssl/build -j$( getconf _NPROCESSORS_ONLN ;) \\\n && cp /usr/src/boringssl/build/crypto/libcrypto.a /usr/src/boringssl/build/ssl/libssl.a /usr/src/boringssl/.openssl/lib ) \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && curl -fSL https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/0.4/nginx__dynamic_tls_records_1.15.5%2B.patch -o dynamic_tls_records.patch \\\n && patch -p1 < dynamic_tls_records.patch \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/boringssl /usr/src/ngx_* \\\n && apk add gettext=0.19.8.1-r4 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;) tzdata ca-certificates\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.no-default.conf /etc/nginx/conf.d/default.conf\nLABEL description=\"NGINX Docker built top of rolling release BoringSSL\" \\\n      maintainer=\"Denis Denisov <denji0k@gmail.com>\" \\\n      openssl=\"BoringSSL\" \\\n      nginx=\"nginx $NGINX_VERSION\"\nEXPOSE 80/tcp 443/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.9\nENV NGINX_VERSION=\"1.17.0\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ipv6 --with-cc-opt=-I/usr/src/boringssl/.openssl/include --with-ld-opt=-L/usr/src/boringssl/.openssl/lib --add-dynamic-module=/usr/src/ngx_headers_more --add-dynamic-module=/usr/src/ngx_brotli \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf automake bind-tools binutils build-base ca-certificates cmake curl gcc gd-dev geoip-dev git gnupg gnupg go libc-dev libgcc libstdc++ libtool libxslt-dev linux-headers make pcre pcre-dev perl-dev su-exec tar tzdata zlib zlib-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && git clone --depth=1 --recurse-submodules https://github.com/eustas/ngx_brotli /usr/src/ngx_brotli \\\n && git clone --depth=1 https://github.com/openresty/headers-more-nginx-module /usr/src/ngx_headers_more \\\n && (git clone --depth=1 https://boringssl.googlesource.com/boringssl /usr/src/boringssl \\\n && sed -i 's@out \\([>=]\\) TLS1_2_VERSION@out \\1 TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_lib.cc \\\n && sed -i 's@ssl->version[ ]*=[ ]*TLS1_2_VERSION@ssl->version = TLS1_3_VERSION@' /usr/src/boringssl/ssl/s3_lib.cc \\\n && sed -i 's@(SSL3_VERSION, TLS1_2_VERSION@(SSL3_VERSION, TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_test.cc \\\n && sed -i 's@\\$shaext[ ]*=[ ]*0;@\\$shaext = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$avx[ ]*=[ ]*[0|1];@\\$avx = 2;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$addx[ ]*=[ ]*0;@\\$addx = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && mkdir -p /usr/src/boringssl/build /usr/src/boringssl/.openssl/lib /usr/src/boringssl/.openssl/include \\\n && ln -sf /usr/src/boringssl/include/openssl /usr/src/boringssl/.openssl/include/openssl \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && cmake -B/usr/src/boringssl/build -H/usr/src/boringssl \\\n && make -C/usr/src/boringssl/build -j$( getconf _NPROCESSORS_ONLN ;) \\\n && cp /usr/src/boringssl/build/crypto/libcrypto.a /usr/src/boringssl/build/ssl/libssl.a /usr/src/boringssl/.openssl/lib ) \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && curl -fSL https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/0.4/nginx__dynamic_tls_records_1.15.5%2B.patch -o dynamic_tls_records.patch \\\n && patch -p1 < dynamic_tls_records.patch \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/boringssl /usr/src/ngx_* \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;) tzdata ca-certificates\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.no-default.conf /etc/nginx/conf.d/default.conf\nLABEL description=\"NGINX Docker built top of rolling release BoringSSL\" \\\n      maintainer=\"Denis Denisov <denji0k@gmail.com>\" \\\n      openssl=\"BoringSSL\" \\\n      nginx=\"nginx $NGINX_VERSION\"\nEXPOSE 80/tcp 443/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"8966e45af81ea59b288924f6d2680c56","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.9\nENV NGINX_VERSION=\"1.17.0\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_perl_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ipv6 --with-cc-opt=-I/usr/src/boringssl/.openssl/include --with-ld-opt=-L/usr/src/boringssl/.openssl/lib --add-dynamic-module=/usr/src/ngx_headers_more --add-dynamic-module=/usr/src/ngx_brotli \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf automake bind-tools binutils build-base ca-certificates cmake curl gcc gd-dev geoip-dev git gnupg gnupg go libc-dev libgcc libstdc++ libtool libxslt-dev linux-headers make pcre pcre-dev perl-dev su-exec tar tzdata zlib zlib-dev \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && git clone --depth=1 --recurse-submodules https://github.com/eustas/ngx_brotli /usr/src/ngx_brotli \\\n && git clone --depth=1 https://github.com/openresty/headers-more-nginx-module /usr/src/ngx_headers_more \\\n && (git clone --depth=1 https://boringssl.googlesource.com/boringssl /usr/src/boringssl \\\n && sed -i 's@out \\([>=]\\) TLS1_2_VERSION@out \\1 TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_lib.cc \\\n && sed -i 's@ssl->version[ ]*=[ ]*TLS1_2_VERSION@ssl->version = TLS1_3_VERSION@' /usr/src/boringssl/ssl/s3_lib.cc \\\n && sed -i 's@(SSL3_VERSION, TLS1_2_VERSION@(SSL3_VERSION, TLS1_3_VERSION@' /usr/src/boringssl/ssl/ssl_test.cc \\\n && sed -i 's@\\$shaext[ ]*=[ ]*0;@\\$shaext = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$avx[ ]*=[ ]*[0|1];@\\$avx = 2;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && sed -i 's@\\$addx[ ]*=[ ]*0;@\\$addx = 1;@' /usr/src/boringssl/crypto/*/asm/*.pl \\\n && mkdir -p /usr/src/boringssl/build /usr/src/boringssl/.openssl/lib /usr/src/boringssl/.openssl/include \\\n && ln -sf /usr/src/boringssl/include/openssl /usr/src/boringssl/.openssl/include/openssl \\\n && touch /usr/src/boringssl/.openssl/include/openssl/ssl.h \\\n && cmake -B/usr/src/boringssl/build -H/usr/src/boringssl \\\n && make -C/usr/src/boringssl/build -j$( getconf _NPROCESSORS_ONLN ;) \\\n && cp /usr/src/boringssl/build/crypto/libcrypto.a /usr/src/boringssl/build/ssl/libssl.a /usr/src/boringssl/.openssl/lib ) \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && curl -fSL https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/0.4/nginx__dynamic_tls_records_1.15.5%2B.patch -o dynamic_tls_records.patch \\\n && patch -p1 < dynamic_tls_records.patch \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_http_perl_module.so objs/ngx_http_perl_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_http_perl_module-debug.so /usr/lib/nginx/modules/ngx_http_perl_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && rm -rf /usr/src/boringssl /usr/src/ngx_* \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;) tzdata ca-certificates\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY nginx.vh.no-default.conf /etc/nginx/conf.d/default.conf\nLABEL description=\"NGINX Docker built top of rolling release BoringSSL\" \\\n      maintainer=\"Denis Denisov <denji0k@gmail.com>\" \\\n      openssl=\"BoringSSL\" \\\n      nginx=\"nginx $NGINX_VERSION\"\nEXPOSE 80/tcp 443/tcp\nSTOPSIGNAL SIGTERM\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"8966e45af81ea59b288924f6d2680c56","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/72700fdccdad76f2c51c0b0f0270147b30663b88.dockerfile"}