{"seed":3331222944,"processedDockerfileHash":"39f81c0e0e8f8e85ae1d134622183d28","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:18.04\nWORKDIR /usr/src/minsql\nCOPY . .\n#   The Rust toolchain to use when building our image.  Set by `hooks/build`.\nARG TOOLCHAIN=stable\n#   The OpenSSL version to use. We parameterize this because many Rust\n#   projects will fail to build with 1.1.\nARG OPENSSL_VERSION=1.0.2r\nENV HOME=\"/root\"\nENV RUST_BACKTRACE=\"1\"\nENV BOOST_VERSION_MINOR=\"67\"\nENV BOOST_ROOT=\"$HOME/boost-1.$BOOST_VERSION_MINOR\"\nENV HYPERSCAN_VERSION=\"5.0.0\"\nENV HYPERSCAN_ROOT=\"$HOME/hyperscan-$HYPERSCAN_VERSION\"\nENV LLVM_VERSION=\"6.0\"\nENV LLVM_ROOT=\"$HOME/llvm-$LLVM_VERSION\"\nENV LLVM_CONFIG_PATH=\"$LLVM_ROOT/bin/llvm-config\"\nRUN apt-get update -y \\\n && apt-get upgrade -y \\\n && apt-get install --no-install-recommends build-essential=12.4ubuntu1 wget=1.19.4-1ubuntu2.2 cmake=3.10.2-1ubuntu2.18.04.2 curl=7.58.0-2ubuntu3.24 file=1:5.32-2ubuntu0.4 git=1:2.17.1-1ubuntu0.17 musl-dev=1.1.19-1 musl-tools=1.1.19-1 libpq-dev=10.23-0ubuntu0.18.04.1 libsqlite-dev libssl-dev=1.1.1-1ubuntu2.1~18.04.21 linux-libc-dev=4.15.0-208.220 pkgconf=0.9.12-6 xutils-dev=1:7.7+5ubuntu1 gcc-multilib-arm-linux-gnueabihf=4:7.4.0-1ubuntu2.3 cmake-data=3.10.2-1ubuntu2.18.04.2 g++=4:7.4.0-1ubuntu2.3 pkgconf=0.9.12-6 ragel=6.10-1 libpcap-dev=1.8.1-6ubuntu1.18.04.2 sqlite3=3.22.0-1ubuntu0.7 libsqlite3-dev=3.22.0-1ubuntu0.7 python-dev=2.7.15~rc1-1 -y \\\n && MDBOOK_VERSION=0.2.1 \\\n && curl -LO \"https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\" \\\n && tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz \\\n && mv mdbook /usr/local/bin/ \\\n && rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\n#   Static linking for C++ code\nRUN ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\"\nRUN mkdir -p /root/libs /root/src\n#   Set up our path with all our binary directories, including those for the\n#   musl-gcc toolchain and for our Rust toolchain.\nENV PATH=\"$HOME/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   Install our Rust toolchain and the `musl` target.  We patch the\n#   command-line we pass to the installer so that it won't attempt to\n#   interact with the user or fool around with TTYs.  We also set the default\n#   `--target` to musl so that our users don't need to keep overriding it\n#   manually.\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN \\\n && rustup target add x86_64-unknown-linux-musl \\\n && rustup target add armv7-unknown-linux-musleabihf\nCOPY cargo-config.toml /root/.cargo/config\n#   Set up a `git credentials` helper for using GH_USER and GH_TOKEN to access\n#   private repositories if desired.\nCOPY git-credential-ghtoken /usr/local/bin\nRUN git config --global credential.https://github.com.helper ghtoken\n#   Build a static library version of OpenSSL using musl-libc.  This is needed by\n#   the popular Rust `hyper` crate.\n#\n#   We point /usr/local/musl/include/linux at some Linux kernel headers (not\n#   necessarily the right ones) in an effort to compile OpenSSL 1.1's \"engine\"\n#   component. It's possible that this will cause bizarre and terrible things to\n#   happen. There may be \"sanitized\" header\nRUN echo \"Building OpenSSL\" \\\n && ls /usr/include/linux \\\n && mkdir -p /usr/local/musl/include \\\n && ln -s /usr/include/linux /usr/local/musl/include/linux \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm \\\n && ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic \\\n && cd /tmp \\\n && curl -LO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" \\\n && tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" \\\n && cd \"openssl-$OPENSSL_VERSION\" \\\n && env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make depend \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make \\\n && make install \\\n && rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic \\\n && rm -r /tmp/*\nRUN echo \"Building zlib\" \\\n && cd /tmp \\\n && ZLIB_VERSION=1.2.11 \\\n && curl -LO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" \\\n && tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" \\\n && cd \"zlib-$ZLIB_VERSION\" \\\n && CC=musl-gcc ./configure --static --prefix=/usr/local/musl \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nRUN echo \"Building libpq\" \\\n && cd /tmp \\\n && POSTGRESQL_VERSION=11.2 \\\n && curl -LO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && cd \"postgresql-$POSTGRESQL_VERSION\" \\\n && CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --with-openssl --without-readline --prefix=/usr/local/musl \\\n && cd src/interfaces/libpq \\\n && make all-static-lib \\\n && make install-lib-static \\\n && cd ../../bin/pg_config \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nENV OPENSSL_DIR=\"/usr/local/musl/\" \\\n    OPENSSL_INCLUDE_DIR=\"/usr/local/musl/include/\" \\\n    DEP_OPENSSL_INCLUDE=\"/usr/local/musl/include/\" \\\n    OPENSSL_LIB_DIR=\"/usr/local/musl/lib/\" \\\n    OPENSSL_STATIC=\"1\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"1\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    LIBZ_SYS_STATIC=\"1\" \\\n    TARGET=\"musl\"\n#   (Please feel free to submit pull requests for musl-libc builds of other C\n#   libraries needed by the most popular and common Rust crates, to avoid\n#   everybody needing to build them manually.)\n#   Install some useful Rust tools from source. This will use the static linking\n#   toolchain, but that should be OK.\nRUN cargo install -f cargo-audit \\\n && rm -rf /root/.cargo/registry/\nRUN .travis/setup-travis.sh\nRUN .travis/build-hyperscan.sh\nRUN cargo install --path .\nFROM alpine:3.9\nCOPY --from=0 /root/.cargo/bin/minsql /usr/bin/minsql\nCMD [\"minsql\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:18.04\nWORKDIR /usr/src/minsql\nCOPY . .\n#  The Rust toolchain to use when building our image.  Set by `hooks/build`.\nARG TOOLCHAIN=stable\n#  The OpenSSL version to use. We parameterize this because many Rust\n#  projects will fail to build with 1.1.\nARG OPENSSL_VERSION=1.0.2r\nENV HOME=\"/root\"\nENV RUST_BACKTRACE=\"1\"\nENV BOOST_VERSION_MINOR=\"67\"\nENV BOOST_ROOT=\"$HOME/boost-1.$BOOST_VERSION_MINOR\"\nENV HYPERSCAN_VERSION=\"5.0.0\"\nENV HYPERSCAN_ROOT=\"$HOME/hyperscan-$HYPERSCAN_VERSION\"\nENV LLVM_VERSION=\"6.0\"\nENV LLVM_ROOT=\"$HOME/llvm-$LLVM_VERSION\"\nENV LLVM_CONFIG_PATH=\"$LLVM_ROOT/bin/llvm-config\"\nRUN apt-get update -y \\\n && apt-get upgrade -y \\\n && apt-get install -y build-essential wget cmake curl file git musl-dev musl-tools libpq-dev libsqlite-dev libssl-dev linux-libc-dev pkgconf xutils-dev gcc-multilib-arm-linux-gnueabihf cmake-data g++ pkgconf ragel libpcap-dev sqlite3 libsqlite3-dev python-dev \\\n && MDBOOK_VERSION=0.2.1 \\\n && curl -LO \"https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\" \\\n && tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz \\\n && mv mdbook /usr/local/bin/ \\\n && rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\n#  Static linking for C++ code\nRUN ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\"\nRUN mkdir -p /root/libs /root/src\n#  Set up our path with all our binary directories, including those for the\n#  musl-gcc toolchain and for our Rust toolchain.\nENV PATH=\"$HOME/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#  Install our Rust toolchain and the `musl` target.  We patch the\n#  command-line we pass to the installer so that it won't attempt to\n#  interact with the user or fool around with TTYs.  We also set the default\n#  `--target` to musl so that our users don't need to keep overriding it\n#  manually.\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN \\\n && rustup target add x86_64-unknown-linux-musl \\\n && rustup target add armv7-unknown-linux-musleabihf\nADD cargo-config.toml /root/.cargo/config\n#  Set up a `git credentials` helper for using GH_USER and GH_TOKEN to access\n#  private repositories if desired.\nADD git-credential-ghtoken /usr/local/bin\nRUN git config --global credential.https://github.com.helper ghtoken\n#  Build a static library version of OpenSSL using musl-libc.  This is needed by\n#  the popular Rust `hyper` crate.\n#\n#  We point /usr/local/musl/include/linux at some Linux kernel headers (not\n#  necessarily the right ones) in an effort to compile OpenSSL 1.1's \"engine\"\n#  component. It's possible that this will cause bizarre and terrible things to\n#  happen. There may be \"sanitized\" header\nRUN echo \"Building OpenSSL\" \\\n && ls /usr/include/linux \\\n && mkdir -p /usr/local/musl/include \\\n && ln -s /usr/include/linux /usr/local/musl/include/linux \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm \\\n && ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic \\\n && cd /tmp \\\n && curl -LO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" \\\n && tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" \\\n && cd \"openssl-$OPENSSL_VERSION\" \\\n && env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make depend \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make \\\n && make install \\\n && rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic \\\n && rm -r /tmp/*\nRUN echo \"Building zlib\" \\\n && cd /tmp \\\n && ZLIB_VERSION=1.2.11 \\\n && curl -LO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" \\\n && tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" \\\n && cd \"zlib-$ZLIB_VERSION\" \\\n && CC=musl-gcc ./configure --static --prefix=/usr/local/musl \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nRUN echo \"Building libpq\" \\\n && cd /tmp \\\n && POSTGRESQL_VERSION=11.2 \\\n && curl -LO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && cd \"postgresql-$POSTGRESQL_VERSION\" \\\n && CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --with-openssl --without-readline --prefix=/usr/local/musl \\\n && cd src/interfaces/libpq \\\n && make all-static-lib \\\n && make install-lib-static \\\n && cd ../../bin/pg_config \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nENV OPENSSL_DIR=\"/usr/local/musl/\" \\\n    OPENSSL_INCLUDE_DIR=\"/usr/local/musl/include/\" \\\n    DEP_OPENSSL_INCLUDE=\"/usr/local/musl/include/\" \\\n    OPENSSL_LIB_DIR=\"/usr/local/musl/lib/\" \\\n    OPENSSL_STATIC=\"1\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"1\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    LIBZ_SYS_STATIC=\"1\" \\\n    TARGET=\"musl\"\n#  (Please feel free to submit pull requests for musl-libc builds of other C\n#  libraries needed by the most popular and common Rust crates, to avoid\n#  everybody needing to build them manually.)\n#  Install some useful Rust tools from source. This will use the static linking\n#  toolchain, but that should be OK.\nRUN cargo install -f cargo-audit \\\n && rm -rf /root/.cargo/registry/\nRUN .travis/setup-travis.sh\nRUN .travis/build-hyperscan.sh\nRUN cargo install --path .\nFROM alpine:3.9\nCOPY --from=0 /root/.cargo/bin/minsql /usr/bin/minsql\nCMD [\"minsql\"]\n","injectedSmells":[],"originalDockerfileHash":"7805e2c3f1bd9f0b4864d256c68e6da0","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:18.04\nWORKDIR /usr/src/minsql\nCOPY . .\n#   The Rust toolchain to use when building our image.  Set by `hooks/build`.\nARG TOOLCHAIN=stable\n#   The OpenSSL version to use. We parameterize this because many Rust\n#   projects will fail to build with 1.1.\nARG OPENSSL_VERSION=1.0.2r\nENV HOME=\"/root\"\nENV RUST_BACKTRACE=\"1\"\nENV BOOST_VERSION_MINOR=\"67\"\nENV BOOST_ROOT=\"$HOME/boost-1.$BOOST_VERSION_MINOR\"\nENV HYPERSCAN_VERSION=\"5.0.0\"\nENV HYPERSCAN_ROOT=\"$HOME/hyperscan-$HYPERSCAN_VERSION\"\nENV LLVM_VERSION=\"6.0\"\nENV LLVM_ROOT=\"$HOME/llvm-$LLVM_VERSION\"\nENV LLVM_CONFIG_PATH=\"$LLVM_ROOT/bin/llvm-config\"\nRUN apt-get update -y \\\n && apt-get upgrade -y \\\n && apt-get install build-essential wget cmake curl file git musl-dev musl-tools libpq-dev libsqlite-dev libssl-dev linux-libc-dev pkgconf xutils-dev gcc-multilib-arm-linux-gnueabihf cmake-data g++ pkgconf ragel libpcap-dev sqlite3 libsqlite3-dev python-dev -y \\\n && MDBOOK_VERSION=0.2.1 \\\n && curl -LO \"https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\" \\\n && tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz \\\n && mv mdbook /usr/local/bin/ \\\n && rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-musl.tar.gz\n#   Static linking for C++ code\nRUN ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\"\nRUN mkdir -p /root/libs /root/src\n#   Set up our path with all our binary directories, including those for the\n#   musl-gcc toolchain and for our Rust toolchain.\nENV PATH=\"$HOME/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n#   Install our Rust toolchain and the `musl` target.  We patch the\n#   command-line we pass to the installer so that it won't attempt to\n#   interact with the user or fool around with TTYs.  We also set the default\n#   `--target` to musl so that our users don't need to keep overriding it\n#   manually.\nRUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN \\\n && rustup target add x86_64-unknown-linux-musl \\\n && rustup target add armv7-unknown-linux-musleabihf\nADD cargo-config.toml /root/.cargo/config\n#   Set up a `git credentials` helper for using GH_USER and GH_TOKEN to access\n#   private repositories if desired.\nADD git-credential-ghtoken /usr/local/bin\nRUN git config --global credential.https://github.com.helper ghtoken\n#   Build a static library version of OpenSSL using musl-libc.  This is needed by\n#   the popular Rust `hyper` crate.\n#\n#   We point /usr/local/musl/include/linux at some Linux kernel headers (not\n#   necessarily the right ones) in an effort to compile OpenSSL 1.1's \"engine\"\n#   component. It's possible that this will cause bizarre and terrible things to\n#   happen. There may be \"sanitized\" header\nRUN echo \"Building OpenSSL\" \\\n && ls /usr/include/linux \\\n && mkdir -p /usr/local/musl/include \\\n && ln -s /usr/include/linux /usr/local/musl/include/linux \\\n && ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm \\\n && ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic \\\n && cd /tmp \\\n && curl -LO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" \\\n && tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" \\\n && cd \"openssl-$OPENSSL_VERSION\" \\\n && env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make depend \\\n && env C_INCLUDE_PATH=/usr/local/musl/include/ make \\\n && make install \\\n && rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic \\\n && rm -r /tmp/*\nRUN echo \"Building zlib\" \\\n && cd /tmp \\\n && ZLIB_VERSION=1.2.11 \\\n && curl -LO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" \\\n && tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" \\\n && cd \"zlib-$ZLIB_VERSION\" \\\n && CC=musl-gcc ./configure --static --prefix=/usr/local/musl \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nRUN echo \"Building libpq\" \\\n && cd /tmp \\\n && POSTGRESQL_VERSION=11.2 \\\n && curl -LO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" \\\n && cd \"postgresql-$POSTGRESQL_VERSION\" \\\n && CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --with-openssl --without-readline --prefix=/usr/local/musl \\\n && cd src/interfaces/libpq \\\n && make all-static-lib \\\n && make install-lib-static \\\n && cd ../../bin/pg_config \\\n && make \\\n && make install \\\n && rm -r /tmp/*\nENV OPENSSL_DIR=\"/usr/local/musl/\" \\\n    OPENSSL_INCLUDE_DIR=\"/usr/local/musl/include/\" \\\n    DEP_OPENSSL_INCLUDE=\"/usr/local/musl/include/\" \\\n    OPENSSL_LIB_DIR=\"/usr/local/musl/lib/\" \\\n    OPENSSL_STATIC=\"1\" \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=\"1\" \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=\"/usr/bin/pg_config\" \\\n    PKG_CONFIG_ALLOW_CROSS=\"true\" \\\n    PKG_CONFIG_ALL_STATIC=\"true\" \\\n    LIBZ_SYS_STATIC=\"1\" \\\n    TARGET=\"musl\"\n#   (Please feel free to submit pull requests for musl-libc builds of other C\n#   libraries needed by the most popular and common Rust crates, to avoid\n#   everybody needing to build them manually.)\n#   Install some useful Rust tools from source. This will use the static linking\n#   toolchain, but that should be OK.\nRUN cargo install -f cargo-audit \\\n && rm -rf /root/.cargo/registry/\nRUN .travis/setup-travis.sh\nRUN .travis/build-hyperscan.sh\nRUN cargo install --path .\nFROM alpine:3.9\nCOPY --from=0 /root/.cargo/bin/minsql /usr/bin/minsql\nCMD [\"minsql\"]\n","originalDockerfileUglifiedHash":"a58f2314c304ebe520af3df5e3516464","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/2843454c4b70ed071271aa9943a2462d3ffcc3db.dockerfile"}