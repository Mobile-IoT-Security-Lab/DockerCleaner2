{"seed":2633619944,"processedDockerfileHash":"814c035dbc64f282f3f170a9e4aa1284","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:latest\nRUN apk add lua5.1-cjson=2.1.0-r10 luajit=2.1_p20210510-r3 --no-cache\nENV NGINX_VERSION=\"1.15.0\"\n#   https://github.com/simplresty/ngx_devel_kit/releases\nENV NGX_DEVEL_KIT_VERSION=\"v0.3.1rc1\"\n#   https://github.com/openresty/lua-nginx-module/releases\nENV LUA_NGINX_MODULE_VERSION=\"v0.10.13\"\n#   https://github.com/leev/ngx_http_geoip2_module/releases\nENV NGX_HTTP_GEOIP2_MODULE_VERSION=\"2.0\"\n#   https://github.com/maxmind/libmaxminddb/releases\nENV LIBMAXMINDDB_VERSION=\"1.3.2\"\n#   Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/usr/lib/\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1/\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ld-opt='-Wl,-rpath,/usr/lib/' --add-module=/usr/src/ngx_devel_kit --add-module=/usr/src/lua-nginx-module --add-module=/usr/src/ngx_http_geoip2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add autoconf=2.71-r1 automake=1.16.5-r1 gcc=12.2.1_git20220924-r4 git=2.38.4-r1 libc-dev=0.7.2-r3 make=4.3-r1 openssl-dev=3.0.8-r3 pcre-dev=8.45-r2 zlib-dev=1.2.13-r0 linux-headers=5.19.5-r0 curl=7.88.1-r1 gnupg=2.2.40-r0 libxslt-dev=1.1.37-r1 gd-dev=2.3.3-r3 geoip-dev=1.6.12-r3 luajit-dev=2.1_p20210510-r3 musl-utils=1.2.3-r4 file=5.43-r0 --no-cache --virtual .build-deps \\\n && git clone --depth 1 --branch \"${NGX_DEVEL_KIT_VERSION}\" https://github.com/simplresty/ngx_devel_kit.git /usr/src/ngx_devel_kit \\\n && git clone --depth 1 --branch \"${LUA_NGINX_MODULE_VERSION}\" https://github.com/openresty/lua-nginx-module.git /usr/src/lua-nginx-module \\\n && git clone --depth 1 --branch \"${NGX_HTTP_GEOIP2_MODULE_VERSION}\" https://github.com/leev/ngx_http_geoip2_module.git /usr/src/ngx_http_geoip2_module \\\n && mkdir -p /usr/src/libmaxminddb \\\n && curl -sSL \"https://github.com/maxmind/libmaxminddb/releases/download/${LIBMAXMINDDB_VERSION}/libmaxminddb-${LIBMAXMINDDB_VERSION}.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/src/libmaxminddb \\\n && (cd /usr/src/libmaxminddb \\\n && ./configure \\\n && make \\\n && make check \\\n && make install \\\n && ldconfig || true ) \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && (cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so ) \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION /usr/src/ngx_devel_kit /usr/src/lua-nginx-module /usr/src/ngx_http_geoip2_module /usr/src/libmaxminddb \\\n && apk add gettext=0.21.1-r1 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nSTOPSIGNAL SIGTERM\nEXPOSE 80/tcp 443/tcp\nENV TELIZE_VERSION=\"master\"\nRUN set -x \\\n && apk add curl=7.88.1-r1 git=2.38.4-r1 --no-cache --virtual .build-deps \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && git clone --depth 1 --branch \"${TELIZE_VERSION}\" https://github.com/fcambus/telize.git /usr/src/telize \\\n && (cd /usr/src/telize \\\n && cp *.conf /etc/nginx/ ) \\\n && rm -rf /usr/src/telize \\\n && apk del .build-deps\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY mime.types /etc/nginx/mime.types\nCOPY telize.conf /etc/nginx/conf.d/telize.conf\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:latest\nRUN apk add --no-cache lua5.1-cjson luajit\nENV NGINX_VERSION=\"1.15.0\"\n#  https://github.com/simplresty/ngx_devel_kit/releases\nENV NGX_DEVEL_KIT_VERSION=\"v0.3.1rc1\"\n#  https://github.com/openresty/lua-nginx-module/releases\nENV LUA_NGINX_MODULE_VERSION=\"v0.10.13\"\n#  https://github.com/leev/ngx_http_geoip2_module/releases\nENV NGX_HTTP_GEOIP2_MODULE_VERSION=\"2.0\"\n#  https://github.com/maxmind/libmaxminddb/releases\nENV LIBMAXMINDDB_VERSION=\"1.3.2\"\n#  Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/usr/lib/\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1/\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ld-opt='-Wl,-rpath,/usr/lib/' --add-module=/usr/src/ngx_devel_kit --add-module=/usr/src/lua-nginx-module --add-module=/usr/src/ngx_http_geoip2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf automake gcc git libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev luajit-dev musl-utils file \\\n && git clone --depth 1 --branch \"${NGX_DEVEL_KIT_VERSION}\" https://github.com/simplresty/ngx_devel_kit.git /usr/src/ngx_devel_kit \\\n && git clone --depth 1 --branch \"${LUA_NGINX_MODULE_VERSION}\" https://github.com/openresty/lua-nginx-module.git /usr/src/lua-nginx-module \\\n && git clone --depth 1 --branch \"${NGX_HTTP_GEOIP2_MODULE_VERSION}\" https://github.com/leev/ngx_http_geoip2_module.git /usr/src/ngx_http_geoip2_module \\\n && mkdir -p /usr/src/libmaxminddb \\\n && curl -sSL \"https://github.com/maxmind/libmaxminddb/releases/download/${LIBMAXMINDDB_VERSION}/libmaxminddb-${LIBMAXMINDDB_VERSION}.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/src/libmaxminddb \\\n && (cd /usr/src/libmaxminddb \\\n && ./configure \\\n && make \\\n && make check \\\n && make install \\\n && ldconfig || true ) \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && (cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so ) \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION /usr/src/ngx_devel_kit /usr/src/lua-nginx-module /usr/src/ngx_http_geoip2_module /usr/src/libmaxminddb \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nSTOPSIGNAL SIGTERM\nEXPOSE 80/tcp 443/tcp\nENV TELIZE_VERSION=\"master\"\nRUN set -x \\\n && apk add --no-cache --virtual .build-deps curl git \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && git clone --depth 1 --branch \"${TELIZE_VERSION}\" https://github.com/fcambus/telize.git /usr/src/telize \\\n && (cd /usr/src/telize \\\n && cp *.conf /etc/nginx/ ) \\\n && rm -rf /usr/src/telize \\\n && apk del .build-deps\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY mime.types /etc/nginx/mime.types\nCOPY telize.conf /etc/nginx/conf.d/telize.conf\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","injectedSmells":[],"originalDockerfileHash":"2686be6890ed7eacc9d75e709cf9d9e8","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:latest\nRUN apk add --no-cache lua5.1-cjson luajit\nENV NGINX_VERSION=\"1.15.0\"\n#   https://github.com/simplresty/ngx_devel_kit/releases\nENV NGX_DEVEL_KIT_VERSION=\"v0.3.1rc1\"\n#   https://github.com/openresty/lua-nginx-module/releases\nENV LUA_NGINX_MODULE_VERSION=\"v0.10.13\"\n#   https://github.com/leev/ngx_http_geoip2_module/releases\nENV NGX_HTTP_GEOIP2_MODULE_VERSION=\"2.0\"\n#   https://github.com/maxmind/libmaxminddb/releases\nENV LIBMAXMINDDB_VERSION=\"1.3.2\"\n#   Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/usr/lib/\"\nENV LUAJIT_INC=\"/usr/include/luajit-2.1/\"\nRUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \\\n && CONFIG=\" --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-threads --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-http_slice_module --with-mail --with-mail_ssl_module --with-compat --with-file-aio --with-http_v2_module --with-ld-opt='-Wl,-rpath,/usr/lib/' --add-module=/usr/src/ngx_devel_kit --add-module=/usr/src/lua-nginx-module --add-module=/usr/src/ngx_http_geoip2_module \" \\\n && addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps autoconf automake gcc git libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg libxslt-dev gd-dev geoip-dev luajit-dev musl-utils file \\\n && git clone --depth 1 --branch \"${NGX_DEVEL_KIT_VERSION}\" https://github.com/simplresty/ngx_devel_kit.git /usr/src/ngx_devel_kit \\\n && git clone --depth 1 --branch \"${LUA_NGINX_MODULE_VERSION}\" https://github.com/openresty/lua-nginx-module.git /usr/src/lua-nginx-module \\\n && git clone --depth 1 --branch \"${NGX_HTTP_GEOIP2_MODULE_VERSION}\" https://github.com/leev/ngx_http_geoip2_module.git /usr/src/ngx_http_geoip2_module \\\n && mkdir -p /usr/src/libmaxminddb \\\n && curl -sSL \"https://github.com/maxmind/libmaxminddb/releases/download/${LIBMAXMINDDB_VERSION}/libmaxminddb-${LIBMAXMINDDB_VERSION}.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/src/libmaxminddb \\\n && (cd /usr/src/libmaxminddb \\\n && ./configure \\\n && make \\\n && make check \\\n && make install \\\n && ldconfig || true ) \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -r \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && (cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \\\n && mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \\\n && mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \\\n && mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \\\n && ./configure $CONFIG \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && mkdir /etc/nginx/conf.d/ \\\n && mkdir -p /usr/share/nginx/html/ \\\n && install -m644 html/index.html /usr/share/nginx/html/ \\\n && install -m644 html/50x.html /usr/share/nginx/html/ \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \\\n && install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \\\n && install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \\\n && install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \\\n && ln -s ../../usr/lib/nginx/modules /etc/nginx/modules \\\n && strip /usr/sbin/nginx* \\\n && strip /usr/lib/nginx/modules/*.so ) \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION /usr/src/ngx_devel_kit /usr/src/lua-nginx-module /usr/src/ngx_http_geoip2_module /usr/src/libmaxminddb \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nSTOPSIGNAL SIGTERM\nEXPOSE 80/tcp 443/tcp\nENV TELIZE_VERSION=\"master\"\nRUN set -x \\\n && apk add --no-cache --virtual .build-deps curl git \\\n && rm -rf /var/lib/apt/lists/* \\\n && mkdir -p /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && curl -sSL \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-ASN.tar.gz\" | tar -xzf - --strip-components 1 -C /usr/share/GeoIP \\\n && git clone --depth 1 --branch \"${TELIZE_VERSION}\" https://github.com/fcambus/telize.git /usr/src/telize \\\n && (cd /usr/src/telize \\\n && cp *.conf /etc/nginx/ ) \\\n && rm -rf /usr/src/telize \\\n && apk del .build-deps\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY mime.types /etc/nginx/mime.types\nCOPY telize.conf /etc/nginx/conf.d/telize.conf\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"f80547e205a16964831a43ff19a16091","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0f1203fe9ce209745c00d241e017b120cd707250.dockerfile"}