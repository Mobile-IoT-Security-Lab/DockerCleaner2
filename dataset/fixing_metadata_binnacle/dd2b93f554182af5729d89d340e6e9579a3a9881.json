{"seed":1195588940,"processedDockerfileHash":"d6613baa0ae338681c2ec5c780cac169","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM node:10.15.2-alpine\nLABEL maintainer=\"\\\"https://github.com/blacktop\\\"\"\nRUN apk add openjdk8-jre tini su-exec --no-cache\nENV STACK=\"7.1.1\"\nRUN apk add libzmq bash nodejs nginx apache2-utils openssl nss --no-cache\nRUN mkdir -p /usr/local/lib \\\n && ln -s /usr/lib/*/libzmq.so.3 /usr/local/lib/libzmq.so\nRUN apk add wget ca-certificates --no-cache -t .build-deps \\\n && set -x \\\n && cd /tmp \\\n && echo \"Download Elastic Stack ======================================================\" \\\n && echo \"Download Elasticsearch...\" \\\n && wget --progress=bar:force -O elasticsearch-$STACK.tar.gz https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf elasticsearch-$STACK.tar.gz \\\n && mv elasticsearch-$STACK /usr/share/elasticsearch \\\n && echo \"Download Logstash...\" \\\n && wget --progress=bar:force -O logstash-$STACK.tar.gz https://artifacts.elastic.co/downloads/logstash/logstash-oss-$STACK.tar.gz \\\n && tar -xzf logstash-$STACK.tar.gz \\\n && mv logstash-$STACK /usr/share/logstash \\\n && echo \"Download Kibana...\" \\\n && wget --progress=bar:force -O kibana-$STACK.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf kibana-$STACK.tar.gz \\\n && mv kibana-$STACK-linux-x86_64 /usr/share/kibana \\\n && echo \"Configure [Elasticsearch] ===================================================\" \\\n && for path in /usr/share/elasticsearch/data /usr/share/elasticsearch/logs /usr/share/elasticsearch/config /usr/share/elasticsearch/config/scripts /usr/share/elasticsearch/plugins /usr/share/elasticsearch/tmp; do mkdir -p \"$path\" ; done \\\n && echo \"Configure [Logstash] ========================================================\" \\\n && if [ -f \"$LS_SETTINGS_DIR/logstash.yml\" ] ; then sed -ri 's!^(path.log|path.config):!#&!g' \"$LS_SETTINGS_DIR/logstash.yml\" ; fi \\\n && echo \"Configure [Kibana] ==========================================================\" \\\n && sed -ri \"s!^(\\#\\s*)?(server\\.host:).*!\\2 '0.0.0.0'!\" /usr/share/kibana/config/kibana.yml \\\n && grep -q \"^server\\.host: '0.0.0.0'$\" /usr/share/kibana/config/kibana.yml \\\n && bundled='NODE=\"${DIR}/node/bin/node\"' \\\n && alpine_node='NODE=\"/usr/local/bin/node\"' \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana-plugin \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana \\\n && rm -rf /usr/share/kibana/node \\\n && echo \"Make Nginx SSL directory...\" \\\n && mkdir -p /etc/nginx/ssl \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo \"Create elstack user...\" \\\n && adduser -DH -s /sbin/nologin elstack \\\n && chown -R elstack:elstack /usr/share/elasticsearch \\\n && chown -R elstack:elstack /usr/share/logstash \\\n && chown -R elstack:elstack /usr/share/kibana \\\n && echo \"Clean Up...\" \\\n && rm -rf /tmp/* \\\n && apk del --purge .build-deps\nRUN apk add supervisor libc6-compat --no-cache\nENV PATH=\"/usr/share/elasticsearch/bin:$PATH\"\nENV PATH=\"/usr/share/logstash/bin:$PATH\"\nENV PATH=\"/usr/share/kibana/bin:$PATH\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"\n#   Add custom elasticsearch config\nCOPY config/elastic /usr/share/elasticsearch/config\nCOPY config/elastic/logrotate /etc/logrotate.d/elasticsearch\n#   Add custom logstash config\nCOPY config/logstash/conf.d/ /etc/logstash/conf.d/\nCOPY config/logstash/patterns/ /opt/logstash/patterns/\nCOPY config/logstash/logstash.yml /etc/logstash/\n#   necessary for 5.0+ (overriden via \"--path.settings\", ignored by < 5.0)\nENV LS_SETTINGS_DIR=\"/etc/logstash\"\n#   fixes mktemp issue in alpine\nENV ES_TMPDIR=\"/usr/share/elasticsearch/tmp\"\n#   Add custom nginx config\nCOPY config/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx/kibana.conf /etc/nginx/conf.d/\nCOPY config/nginx/ssl.kibana.conf /etc/nginx/conf.d/\n#   Add custom supervisor config\nCOPY config/supervisord/supervisord.conf /etc/supervisor/\n#   Add entrypoints\nCOPY entrypoints/elastic-entrypoint.sh /\nCOPY entrypoints/logstash-entrypoint.sh /\nCOPY entrypoints/kibana-entrypoint.sh /\nCOPY entrypoints/nginx-entrypoint.sh /\nVOLUME [\"/usr/share/elasticsearch/data\"]\nVOLUME [\"/etc/logstash/conf.d\"]\nVOLUME [\"/etc/nginx\"]\nEXPOSE 80/tcp 443/tcp 5601/tcp 9200/tcp 9300/tcp\nCMD [\"/sbin/tini\", \"--\", \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"FROM node:10.15.2-alpine\nLABEL maintainer=\"\\\"https://github.com/blacktop\\\"\"\nRUN apk add --no-cache openjdk8-jre tini su-exec\nENV STACK=\"7.1.1\"\nRUN apk add --no-cache libzmq bash nodejs nginx apache2-utils openssl nss\nRUN mkdir -p /usr/local/lib \\\n && ln -s /usr/lib/*/libzmq.so.3 /usr/local/lib/libzmq.so\nRUN apk add --no-cache -t .build-deps wget ca-certificates \\\n && set -x \\\n && cd /tmp \\\n && echo \"Download Elastic Stack ======================================================\" \\\n && echo \"Download Elasticsearch...\" \\\n && wget --progress=bar:force -O elasticsearch-$STACK.tar.gz https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf elasticsearch-$STACK.tar.gz \\\n && mv elasticsearch-$STACK /usr/share/elasticsearch \\\n && echo \"Download Logstash...\" \\\n && wget --progress=bar:force -O logstash-$STACK.tar.gz https://artifacts.elastic.co/downloads/logstash/logstash-oss-$STACK.tar.gz \\\n && tar -xzf logstash-$STACK.tar.gz \\\n && mv logstash-$STACK /usr/share/logstash \\\n && echo \"Download Kibana...\" \\\n && wget --progress=bar:force -O kibana-$STACK.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf kibana-$STACK.tar.gz \\\n && mv kibana-$STACK-linux-x86_64 /usr/share/kibana \\\n && echo \"Configure [Elasticsearch] ===================================================\" \\\n && for path in /usr/share/elasticsearch/data /usr/share/elasticsearch/logs /usr/share/elasticsearch/config /usr/share/elasticsearch/config/scripts /usr/share/elasticsearch/plugins /usr/share/elasticsearch/tmp; do mkdir -p \"$path\" ; done \\\n && echo \"Configure [Logstash] ========================================================\" \\\n && if [ -f \"$LS_SETTINGS_DIR/logstash.yml\" ] ; then sed -ri 's!^(path.log|path.config):!#&!g' \"$LS_SETTINGS_DIR/logstash.yml\" ; fi \\\n && echo \"Configure [Kibana] ==========================================================\" \\\n && sed -ri \"s!^(\\#\\s*)?(server\\.host:).*!\\2 '0.0.0.0'!\" /usr/share/kibana/config/kibana.yml \\\n && grep -q \"^server\\.host: '0.0.0.0'$\" /usr/share/kibana/config/kibana.yml \\\n && bundled='NODE=\"${DIR}/node/bin/node\"' \\\n && alpine_node='NODE=\"/usr/local/bin/node\"' \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana-plugin \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana \\\n && rm -rf /usr/share/kibana/node \\\n && echo \"Make Nginx SSL directory...\" \\\n && mkdir -p /etc/nginx/ssl \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo \"Create elstack user...\" \\\n && adduser -DH -s /sbin/nologin elstack \\\n && chown -R elstack:elstack /usr/share/elasticsearch \\\n && chown -R elstack:elstack /usr/share/logstash \\\n && chown -R elstack:elstack /usr/share/kibana \\\n && echo \"Clean Up...\" \\\n && rm -rf /tmp/* \\\n && apk del --purge .build-deps\nRUN apk add --no-cache supervisor libc6-compat\nENV PATH=\"/usr/share/elasticsearch/bin:$PATH\"\nENV PATH=\"/usr/share/logstash/bin:$PATH\"\nENV PATH=\"/usr/share/kibana/bin:$PATH\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"\n#  Add custom elasticsearch config\nCOPY config/elastic /usr/share/elasticsearch/config\nCOPY config/elastic/logrotate /etc/logrotate.d/elasticsearch\n#  Add custom logstash config\nCOPY config/logstash/conf.d/ /etc/logstash/conf.d/\nCOPY config/logstash/patterns/ /opt/logstash/patterns/\nCOPY config/logstash/logstash.yml /etc/logstash/\n#  necessary for 5.0+ (overriden via \"--path.settings\", ignored by < 5.0)\nENV LS_SETTINGS_DIR=\"/etc/logstash\"\n#  fixes mktemp issue in alpine\nENV ES_TMPDIR=\"/usr/share/elasticsearch/tmp\"\n#  Add custom nginx config\nCOPY config/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx/kibana.conf /etc/nginx/conf.d/\nCOPY config/nginx/ssl.kibana.conf /etc/nginx/conf.d/\n#  Add custom supervisor config\nCOPY config/supervisord/supervisord.conf /etc/supervisor/\n#  Add entrypoints\nCOPY entrypoints/elastic-entrypoint.sh /\nCOPY entrypoints/logstash-entrypoint.sh /\nCOPY entrypoints/kibana-entrypoint.sh /\nCOPY entrypoints/nginx-entrypoint.sh /\nVOLUME [\"/usr/share/elasticsearch/data\"]\nVOLUME [\"/etc/logstash/conf.d\"]\nVOLUME [\"/etc/nginx\"]\nEXPOSE 80/tcp 443/tcp 5601/tcp 9200/tcp 9300/tcp\nCMD [\"/sbin/tini\", \"--\", \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n","injectedSmells":[],"originalDockerfileHash":"1072f39a0acac388a45229f347433d4c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM node:10.15.2-alpine\nLABEL maintainer=\"\\\"https://github.com/blacktop\\\"\"\nRUN apk add --no-cache openjdk8-jre tini su-exec\nENV STACK=\"7.1.1\"\nRUN apk add --no-cache libzmq bash nodejs nginx apache2-utils openssl nss\nRUN mkdir -p /usr/local/lib \\\n && ln -s /usr/lib/*/libzmq.so.3 /usr/local/lib/libzmq.so\nRUN apk add --no-cache -t .build-deps wget ca-certificates \\\n && set -x \\\n && cd /tmp \\\n && echo \"Download Elastic Stack ======================================================\" \\\n && echo \"Download Elasticsearch...\" \\\n && wget --progress=bar:force -O elasticsearch-$STACK.tar.gz https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf elasticsearch-$STACK.tar.gz \\\n && mv elasticsearch-$STACK /usr/share/elasticsearch \\\n && echo \"Download Logstash...\" \\\n && wget --progress=bar:force -O logstash-$STACK.tar.gz https://artifacts.elastic.co/downloads/logstash/logstash-oss-$STACK.tar.gz \\\n && tar -xzf logstash-$STACK.tar.gz \\\n && mv logstash-$STACK /usr/share/logstash \\\n && echo \"Download Kibana...\" \\\n && wget --progress=bar:force -O kibana-$STACK.tar.gz https://artifacts.elastic.co/downloads/kibana/kibana-oss-$STACK-linux-x86_64.tar.gz \\\n && tar -xzf kibana-$STACK.tar.gz \\\n && mv kibana-$STACK-linux-x86_64 /usr/share/kibana \\\n && echo \"Configure [Elasticsearch] ===================================================\" \\\n && for path in /usr/share/elasticsearch/data /usr/share/elasticsearch/logs /usr/share/elasticsearch/config /usr/share/elasticsearch/config/scripts /usr/share/elasticsearch/plugins /usr/share/elasticsearch/tmp; do mkdir -p \"$path\" ; done \\\n && echo \"Configure [Logstash] ========================================================\" \\\n && if [ -f \"$LS_SETTINGS_DIR/logstash.yml\" ] ; then sed -ri 's!^(path.log|path.config):!#&!g' \"$LS_SETTINGS_DIR/logstash.yml\" ; fi \\\n && echo \"Configure [Kibana] ==========================================================\" \\\n && sed -ri \"s!^(\\#\\s*)?(server\\.host:).*!\\2 '0.0.0.0'!\" /usr/share/kibana/config/kibana.yml \\\n && grep -q \"^server\\.host: '0.0.0.0'$\" /usr/share/kibana/config/kibana.yml \\\n && bundled='NODE=\"${DIR}/node/bin/node\"' \\\n && alpine_node='NODE=\"/usr/local/bin/node\"' \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana-plugin \\\n && sed -i \"s|$bundled|$alpine_node|g\" /usr/share/kibana/bin/kibana \\\n && rm -rf /usr/share/kibana/node \\\n && echo \"Make Nginx SSL directory...\" \\\n && mkdir -p /etc/nginx/ssl \\\n && rm /etc/nginx/conf.d/default.conf \\\n && echo \"Create elstack user...\" \\\n && adduser -DH -s /sbin/nologin elstack \\\n && chown -R elstack:elstack /usr/share/elasticsearch \\\n && chown -R elstack:elstack /usr/share/logstash \\\n && chown -R elstack:elstack /usr/share/kibana \\\n && echo \"Clean Up...\" \\\n && rm -rf /tmp/* \\\n && apk del --purge .build-deps\nRUN apk add --no-cache supervisor libc6-compat\nENV PATH=\"/usr/share/elasticsearch/bin:$PATH\"\nENV PATH=\"/usr/share/logstash/bin:$PATH\"\nENV PATH=\"/usr/share/kibana/bin:$PATH\"\nENV JAVA_HOME=\"/usr/lib/jvm/java-1.8-openjdk\"\n#   Add custom elasticsearch config\nCOPY config/elastic /usr/share/elasticsearch/config\nCOPY config/elastic/logrotate /etc/logrotate.d/elasticsearch\n#   Add custom logstash config\nCOPY config/logstash/conf.d/ /etc/logstash/conf.d/\nCOPY config/logstash/patterns/ /opt/logstash/patterns/\nCOPY config/logstash/logstash.yml /etc/logstash/\n#   necessary for 5.0+ (overriden via \"--path.settings\", ignored by < 5.0)\nENV LS_SETTINGS_DIR=\"/etc/logstash\"\n#   fixes mktemp issue in alpine\nENV ES_TMPDIR=\"/usr/share/elasticsearch/tmp\"\n#   Add custom nginx config\nCOPY config/nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY config/nginx/kibana.conf /etc/nginx/conf.d/\nCOPY config/nginx/ssl.kibana.conf /etc/nginx/conf.d/\n#   Add custom supervisor config\nCOPY config/supervisord/supervisord.conf /etc/supervisor/\n#   Add entrypoints\nCOPY entrypoints/elastic-entrypoint.sh /\nCOPY entrypoints/logstash-entrypoint.sh /\nCOPY entrypoints/kibana-entrypoint.sh /\nCOPY entrypoints/nginx-entrypoint.sh /\nVOLUME [\"/usr/share/elasticsearch/data\"]\nVOLUME [\"/etc/logstash/conf.d\"]\nVOLUME [\"/etc/nginx\"]\nEXPOSE 80/tcp 443/tcp 5601/tcp 9200/tcp 9300/tcp\nCMD [\"/sbin/tini\", \"--\", \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n","originalDockerfileUglifiedHash":"1d21fadf67b7ac25e8e62ba816bbcef7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/dd2b93f554182af5729d89d340e6e9579a3a9881.dockerfile"}