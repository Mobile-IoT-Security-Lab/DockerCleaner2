{"seed":2560428171,"processedDockerfileHash":"d92c687d621921d505e5e69f19268b66","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM alpine:edge\nMAINTAINER Andre Rocha <andre@konkerlabs.com>\n#   General structure: start installing components that\n#   do not have dependencies and en up installing the web\n#   app. This will optimize building time, since the\n#   first layers, with independent components are very\n#   rarrely update and the layers will already be cached\n#  ####################### INSTALL BASIC COMPONENTS #######################################\n#  # install java\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories \\\n && apk add openjdk8-jre=8.362.09-r1 --no-cache\n#   install python\nRUN apk add python py2-pip --update \\\n && pip install pymongo==4.3.3\n#  Jetty\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S jetty \\\n && adduser -D -S -H -G jetty jetty \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow-\nENV JETTY_HOME=\"/usr/local/jetty\"\nENV PATH=\"$JETTY_HOME/bin:$PATH\"\nRUN mkdir -p \"$JETTY_HOME\"\nWORKDIR $JETTY_HOME\nENV JETTY_BASE=\"/var/lib/jetty\"\nRUN mkdir -p \"$JETTY_BASE\"\nENV JETTY_VERSION=\"9.3.12.v20160915\"\nENV JETTY_TGZ_URL=\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/$JETTY_VERSION/jetty-distribution-$JETTY_VERSION.tar.gz\"\n#   GPG Keys are personal keys of Jetty committers (see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg05220.html)\nENV JETTY_GPG_KEYS=\"B59B67FD7904984367F931800818D9D68FB67BAC  5DE533CB43DAF8BC3E372283E7AE839CD7C58886\"\nRUN set -xe \\\n && apk add gnupg=2.4.0-r1 coreutils=9.2-r2 curl=8.0.1-r1 --no-cache --virtual .build-deps \\\n && curl -SL \"$JETTY_TGZ_URL\" -o jetty.tar.gz \\\n && curl -SL \"$JETTY_TGZ_URL.asc\" -o jetty.tar.gz.asc \\\n && tar -xvzf jetty.tar.gz \\\n && mv jetty-distribution-$JETTY_VERSION/* ./ \\\n && sed -i '/jetty-logging/d' etc/jetty.conf \\\n && rm -fr demo-base javadoc \\\n && rm jetty.tar.gz* \\\n && rm -fr jetty-distribution-$JETTY_VERSION/ \\\n && cd $JETTY_BASE \\\n && modules=\"$( grep -- ^--module= \"$JETTY_HOME/start.ini\" | cut -d= -f2 | paste -d, -s ;)\" \\\n && java -jar \"$JETTY_HOME/start.jar\" --add-to-startd=\"$modules,setuid\" \\\n && apk del .build-deps \\\n && rm -fr .build-deps \\\n && rm -rf /tmp/hsperfdata_root\nWORKDIR $JETTY_BASE\nENV TMPDIR=\"/tmp/jetty\"\nRUN set -xe \\\n && mkdir -p \"$TMPDIR\" \\\n && chown -R jetty:jetty \"$TMPDIR\" \"$JETTY_BASE\"\n#   Install MongoDB.\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && apk add mongodb --no-cache \\\n && rm /usr/bin/mongosniff /usr/bin/mongoperf\n#   Install mosquitto\nRUN apk add mosquitto=2.0.15-r1 libcrypto1.0 libssl1.0 --update \\\n && mkdir /work \\\n && chown nobody /work\n#   Install nginx\nENV NGINX_VERSION=\"nginx-1.7.11\"\nRUN addgroup -S nginx \\\n && adduser -D -S -H -G nginx nginx \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow- \\\n && apk add openssl-dev=3.1.0-r2 pcre-dev=8.45-r2 zlib-dev=1.2.13-r0 wget=1.21.3-r3 build-base=0.5-r3 --update \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget http://nginx.org/download/${NGINX_VERSION}.tar.gz \\\n && tar -zxvf ${NGINX_VERSION}.tar.gz \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-http_ssl_module --with-http_gzip_static_module --prefix=/etc/nginx --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --sbin-path=/usr/local/sbin/nginx \\\n && make \\\n && make install \\\n && apk del build-base \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/*\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\nRUN chmod 755 /usr/local/sbin/nginx\n#   Install redis\n#   grab su-exec for easy step-down from root\nRUN apk add 'su-exec>=0.2' --no-cache\nENV REDIS_VERSION=\"3.2.6\"\nENV REDIS_DOWNLOAD_URL=\"http://download.redis.io/releases/redis-3.2.6.tar.gz\"\nENV REDIS_DOWNLOAD_SHA1=\"0c7bc5c751bdbc6fabed178db9cdbdd948915d1b\"\n#   for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex \\\n && apk add gcc=12.2.1_git20220924-r9 linux-headers=6.2-r0 make=4.4.1-r0 musl-dev=1.2.3_git20230322-r0 tar=1.34-r2 --no-cache --virtual .build-deps \\\n && wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\" \\\n && echo \"$REDIS_DOWNLOAD_SHA1 *redis.tar.gz\" | sha1sum -c - \\\n && mkdir -p /usr/src/redis \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h \\\n && sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apk del .build-deps\n#  ################## CONFIGURE COMPONENTS ###########################\n#  # Configure nginx\nCOPY build/nginx.conf /etc/nginx/nginx.conf\nCOPY build/nginx.conf /etc/nginx/conf/nginx.conf\nCOPY build/mime.types /etc/nginx/mime.types\nCOPY build/conf.d /etc/nginx/conf.d\nCOPY build/error_page/* /usr/share/nginx/html/\n#  # Configure mosquitto\nRUN mkdir /var/log/mosquitto \\\n && chmod -R 777 /var/log/mosquitto \\\n && mkdir /var/lib/mosquitto \\\n && chmod -R 777 /var/lib/mosquitto \\\n && apk add mongo-c-driver=1.23.2-r0 --update\nCOPY build/plugin/konker-mosquitto-auth-plugin-ld.conf /etc/ld.so.conf.d/konker-mosquitto-auth-plugin-ld.conf\nCOPY build/plugin/lib/*.so /usr/local/lib/konker-mosquitto-auth-plugin/\nCOPY build/mosquitto.conf /etc/mosquitto/mosquitto.conf\nCOPY build/konker-mosquitto-auth-plugin.conf /etc/mosquitto/konker-mosquitto-auth-plugin.conf\nCOPY build/konker-mqtt.conf /etc/mosquitto/conf.d/konker-mqtt.conf\nRUN ln -s /usr/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.10 \\\n && ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.10\n#  DSL for Instance Administration\nCOPY build/__init__.py /usr/bin\nCOPY build/populate_users.py /usr/bin\nCOPY build/dsl.py /usr/bin\nCOPY build/users/ /usr/bin/users\nCOPY build/dao/ /usr/bin/dao\nCOPY build/setup.py /usr/bin\nCOPY build/generate_mosquitto_credentials.sh /usr/bin\nRUN chmod 777 /usr/bin/setup.py\nRUN chmod 777 /usr/bin/generate_mosquitto_credentials.sh\nRUN python /usr/bin/setup.py install\nRUN rm /usr/bin/setup.py\nRUN ln -s /usr/bin/dsl.py /usr/bin/konker\nRUN ln -s /usr/bin/populate_users.py /usr/bin/populate_users\n#  # Configure and deploy web app\nCOPY build/registry.war /var/lib/jetty/webapps/\nCOPY build/application.conf /var/lib/jetty/resources/\nCOPY build/logback.xml /var/lib/jetty/webapps/resources/\nCOPY build/logback.xml /var/lib/jetty/resources/\nCOPY build/mail /var/lib/jetty/webapps/resources/mail/\nCOPY build/mail /var/lib/jetty/resources/mail/\n#  # Set entrypoint\nCOPY docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh\n#  RUN mkdir /data && chown redis:redis /data\n#  start\nEXPOSE 8080/tcp 80/tcp 443/tcp 6379/tcp 27017/tcp 28017/tcp 1883/tcp\nVOLUME /data/db\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"java\", \"-jar\", \"/usr/local/jetty/start.jar\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:edge\nMAINTAINER Andre Rocha <andre@konkerlabs.com>\n#  General structure: start installing components that\n#  do not have dependencies and en up installing the web\n#  app. This will optimize building time, since the\n#  first layers, with independent components are very\n#  rarrely update and the layers will already be cached\n# ####################### INSTALL BASIC COMPONENTS #######################################\n# # install java\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories \\\n && apk add --no-cache openjdk8-jre\n#  install python\nRUN apk add --update python py2-pip \\\n && pip install pymongo\n# Jetty\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S jetty \\\n && adduser -D -S -H -G jetty jetty \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow-\nENV JETTY_HOME=\"/usr/local/jetty\"\nENV PATH=\"$JETTY_HOME/bin:$PATH\"\nRUN mkdir -p \"$JETTY_HOME\"\nWORKDIR $JETTY_HOME\nENV JETTY_BASE=\"/var/lib/jetty\"\nRUN mkdir -p \"$JETTY_BASE\"\nENV JETTY_VERSION=\"9.3.12.v20160915\"\nENV JETTY_TGZ_URL=\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/$JETTY_VERSION/jetty-distribution-$JETTY_VERSION.tar.gz\"\n#  GPG Keys are personal keys of Jetty committers (see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg05220.html)\nENV JETTY_GPG_KEYS=\"B59B67FD7904984367F931800818D9D68FB67BAC  5DE533CB43DAF8BC3E372283E7AE839CD7C58886\"\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps gnupg coreutils curl \\\n && curl -SL \"$JETTY_TGZ_URL\" -o jetty.tar.gz \\\n && curl -SL \"$JETTY_TGZ_URL.asc\" -o jetty.tar.gz.asc \\\n && tar -xvzf jetty.tar.gz \\\n && mv jetty-distribution-$JETTY_VERSION/* ./ \\\n && sed -i '/jetty-logging/d' etc/jetty.conf \\\n && rm -fr demo-base javadoc \\\n && rm jetty.tar.gz* \\\n && rm -fr jetty-distribution-$JETTY_VERSION/ \\\n && cd $JETTY_BASE \\\n && modules=\"$( grep -- ^--module= \"$JETTY_HOME/start.ini\" | cut -d= -f2 | paste -d, -s ;)\" \\\n && java -jar \"$JETTY_HOME/start.jar\" --add-to-startd=\"$modules,setuid\" \\\n && apk del .build-deps \\\n && rm -fr .build-deps \\\n && rm -rf /tmp/hsperfdata_root\nWORKDIR $JETTY_BASE\nENV TMPDIR=\"/tmp/jetty\"\nRUN set -xe \\\n && mkdir -p \"$TMPDIR\" \\\n && chown -R jetty:jetty \"$TMPDIR\" \"$JETTY_BASE\"\n#  Install MongoDB.\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && apk add --no-cache mongodb \\\n && rm /usr/bin/mongosniff /usr/bin/mongoperf\n#  Install mosquitto\nRUN apk add --update mosquitto libcrypto1.0 libssl1.0 \\\n && mkdir /work \\\n && chown nobody /work\n#  Install nginx\nENV NGINX_VERSION=\"nginx-1.7.11\"\nRUN addgroup -S nginx \\\n && adduser -D -S -H -G nginx nginx \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow- \\\n && apk --update add openssl-dev pcre-dev zlib-dev wget build-base \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget http://nginx.org/download/${NGINX_VERSION}.tar.gz \\\n && tar -zxvf ${NGINX_VERSION}.tar.gz \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-http_ssl_module --with-http_gzip_static_module --prefix=/etc/nginx --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --sbin-path=/usr/local/sbin/nginx \\\n && make \\\n && make install \\\n && apk del build-base \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/*\n#  forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\nRUN chmod 755 /usr/local/sbin/nginx\n#  Install redis\n#  grab su-exec for easy step-down from root\nRUN apk add --no-cache 'su-exec>=0.2'\nENV REDIS_VERSION=\"3.2.6\"\nENV REDIS_DOWNLOAD_URL=\"http://download.redis.io/releases/redis-3.2.6.tar.gz\"\nENV REDIS_DOWNLOAD_SHA1=\"0c7bc5c751bdbc6fabed178db9cdbdd948915d1b\"\n#  for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps gcc linux-headers make musl-dev tar \\\n && wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\" \\\n && echo \"$REDIS_DOWNLOAD_SHA1 *redis.tar.gz\" | sha1sum -c - \\\n && mkdir -p /usr/src/redis \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h \\\n && sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apk del .build-deps\n# ################## CONFIGURE COMPONENTS ###########################\n# # Configure nginx\nCOPY build/nginx.conf /etc/nginx/nginx.conf\nCOPY build/nginx.conf /etc/nginx/conf/nginx.conf\nCOPY build/mime.types /etc/nginx/mime.types\nCOPY build/conf.d /etc/nginx/conf.d\nCOPY build/error_page/* /usr/share/nginx/html/\n# # Configure mosquitto\nRUN mkdir /var/log/mosquitto \\\n && chmod -R 777 /var/log/mosquitto \\\n && mkdir /var/lib/mosquitto \\\n && chmod -R 777 /var/lib/mosquitto \\\n && apk add --update mongo-c-driver\nCOPY build/plugin/konker-mosquitto-auth-plugin-ld.conf /etc/ld.so.conf.d/konker-mosquitto-auth-plugin-ld.conf\nCOPY build/plugin/lib/*.so /usr/local/lib/konker-mosquitto-auth-plugin/\nCOPY build/mosquitto.conf /etc/mosquitto/mosquitto.conf\nCOPY build/konker-mosquitto-auth-plugin.conf /etc/mosquitto/konker-mosquitto-auth-plugin.conf\nCOPY build/konker-mqtt.conf /etc/mosquitto/conf.d/konker-mqtt.conf\nRUN ln -s /usr/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.10 \\\n && ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.10\n# DSL for Instance Administration\nCOPY build/__init__.py /usr/bin\nCOPY build/populate_users.py /usr/bin\nCOPY build/dsl.py /usr/bin\nCOPY build/users/ /usr/bin/users\nCOPY build/dao/ /usr/bin/dao\nCOPY build/setup.py /usr/bin\nCOPY build/generate_mosquitto_credentials.sh /usr/bin\nRUN chmod 777 /usr/bin/setup.py\nRUN chmod 777 /usr/bin/generate_mosquitto_credentials.sh\nRUN python /usr/bin/setup.py install\nRUN rm /usr/bin/setup.py\nRUN ln -s /usr/bin/dsl.py /usr/bin/konker\nRUN ln -s /usr/bin/populate_users.py /usr/bin/populate_users\n# # Configure and deploy web app\nCOPY build/registry.war /var/lib/jetty/webapps/\nCOPY build/application.conf /var/lib/jetty/resources/\nCOPY build/logback.xml /var/lib/jetty/webapps/resources/\nCOPY build/logback.xml /var/lib/jetty/resources/\nCOPY build/mail /var/lib/jetty/webapps/resources/mail/\nCOPY build/mail /var/lib/jetty/resources/mail/\n# # Set entrypoint\nCOPY docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh\n# RUN mkdir /data && chown redis:redis /data\n# start\nEXPOSE 8080/tcp 80/tcp 443/tcp 6379/tcp 27017/tcp 28017/tcp 1883/tcp\nVOLUME /data/db\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"java\", \"-jar\", \"/usr/local/jetty/start.jar\"]\n","injectedSmells":[],"originalDockerfileHash":"7b0ae3f3b529dd019b1fefbf989d088b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:edge\nMAINTAINER Andre Rocha <andre@konkerlabs.com>\n#   General structure: start installing components that\n#   do not have dependencies and en up installing the web\n#   app. This will optimize building time, since the\n#   first layers, with independent components are very\n#   rarrely update and the layers will already be cached\n#  ####################### INSTALL BASIC COMPONENTS #######################################\n#  # install java\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories \\\n && apk add --no-cache openjdk8-jre\n#   install python\nRUN apk add --update python py2-pip \\\n && pip install pymongo\n#  Jetty\n#   add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN addgroup -S jetty \\\n && adduser -D -S -H -G jetty jetty \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow-\nENV JETTY_HOME=\"/usr/local/jetty\"\nENV PATH=\"$JETTY_HOME/bin:$PATH\"\nRUN mkdir -p \"$JETTY_HOME\"\nWORKDIR $JETTY_HOME\nENV JETTY_BASE=\"/var/lib/jetty\"\nRUN mkdir -p \"$JETTY_BASE\"\nENV JETTY_VERSION=\"9.3.12.v20160915\"\nENV JETTY_TGZ_URL=\"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/$JETTY_VERSION/jetty-distribution-$JETTY_VERSION.tar.gz\"\n#   GPG Keys are personal keys of Jetty committers (see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg05220.html)\nENV JETTY_GPG_KEYS=\"B59B67FD7904984367F931800818D9D68FB67BAC  5DE533CB43DAF8BC3E372283E7AE839CD7C58886\"\nRUN set -xe \\\n && apk add --no-cache --virtual .build-deps gnupg coreutils curl \\\n && curl -SL \"$JETTY_TGZ_URL\" -o jetty.tar.gz \\\n && curl -SL \"$JETTY_TGZ_URL.asc\" -o jetty.tar.gz.asc \\\n && tar -xvzf jetty.tar.gz \\\n && mv jetty-distribution-$JETTY_VERSION/* ./ \\\n && sed -i '/jetty-logging/d' etc/jetty.conf \\\n && rm -fr demo-base javadoc \\\n && rm jetty.tar.gz* \\\n && rm -fr jetty-distribution-$JETTY_VERSION/ \\\n && cd $JETTY_BASE \\\n && modules=\"$( grep -- ^--module= \"$JETTY_HOME/start.ini\" | cut -d= -f2 | paste -d, -s ;)\" \\\n && java -jar \"$JETTY_HOME/start.jar\" --add-to-startd=\"$modules,setuid\" \\\n && apk del .build-deps \\\n && rm -fr .build-deps \\\n && rm -rf /tmp/hsperfdata_root\nWORKDIR $JETTY_BASE\nENV TMPDIR=\"/tmp/jetty\"\nRUN set -xe \\\n && mkdir -p \"$TMPDIR\" \\\n && chown -R jetty:jetty \"$TMPDIR\" \"$JETTY_BASE\"\n#   Install MongoDB.\nRUN echo http://dl-4.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories \\\n && apk add --no-cache mongodb \\\n && rm /usr/bin/mongosniff /usr/bin/mongoperf\n#   Install mosquitto\nRUN apk add --update mosquitto libcrypto1.0 libssl1.0 \\\n && mkdir /work \\\n && chown nobody /work\n#   Install nginx\nENV NGINX_VERSION=\"nginx-1.7.11\"\nRUN addgroup -S nginx \\\n && adduser -D -S -H -G nginx nginx \\\n && rm -rf /etc/group- /etc/passwd- /etc/shadow- \\\n && apk --update add openssl-dev pcre-dev zlib-dev wget build-base \\\n && mkdir -p /tmp/src \\\n && cd /tmp/src \\\n && wget http://nginx.org/download/${NGINX_VERSION}.tar.gz \\\n && tar -zxvf ${NGINX_VERSION}.tar.gz \\\n && cd /tmp/src/${NGINX_VERSION} \\\n && ./configure --with-http_ssl_module --with-http_gzip_static_module --prefix=/etc/nginx --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --sbin-path=/usr/local/sbin/nginx \\\n && make \\\n && make install \\\n && apk del build-base \\\n && rm -rf /tmp/src \\\n && rm -rf /var/cache/apk/*\n#   forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\nRUN chmod 755 /usr/local/sbin/nginx\n#   Install redis\n#   grab su-exec for easy step-down from root\nRUN apk add --no-cache 'su-exec>=0.2'\nENV REDIS_VERSION=\"3.2.6\"\nENV REDIS_DOWNLOAD_URL=\"http://download.redis.io/releases/redis-3.2.6.tar.gz\"\nENV REDIS_DOWNLOAD_SHA1=\"0c7bc5c751bdbc6fabed178db9cdbdd948915d1b\"\n#   for redis-sentinel see: http://redis.io/topics/sentinel\nRUN set -ex \\\n && apk add --no-cache --virtual .build-deps gcc linux-headers make musl-dev tar \\\n && wget -O redis.tar.gz \"$REDIS_DOWNLOAD_URL\" \\\n && echo \"$REDIS_DOWNLOAD_SHA1 *redis.tar.gz\" | sha1sum -c - \\\n && mkdir -p /usr/src/redis \\\n && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n && rm redis.tar.gz \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 1$' /usr/src/redis/src/server.h \\\n && sed -ri 's!^(#define CONFIG_DEFAULT_PROTECTED_MODE) 1$!\\1 0!' /usr/src/redis/src/server.h \\\n && grep -q '^#define CONFIG_DEFAULT_PROTECTED_MODE 0$' /usr/src/redis/src/server.h \\\n && make -C /usr/src/redis \\\n && make -C /usr/src/redis install \\\n && rm -r /usr/src/redis \\\n && apk del .build-deps\n#  ################## CONFIGURE COMPONENTS ###########################\n#  # Configure nginx\nCOPY build/nginx.conf /etc/nginx/nginx.conf\nCOPY build/nginx.conf /etc/nginx/conf/nginx.conf\nCOPY build/mime.types /etc/nginx/mime.types\nCOPY build/conf.d /etc/nginx/conf.d\nCOPY build/error_page/* /usr/share/nginx/html/\n#  # Configure mosquitto\nRUN mkdir /var/log/mosquitto \\\n && chmod -R 777 /var/log/mosquitto \\\n && mkdir /var/lib/mosquitto \\\n && chmod -R 777 /var/lib/mosquitto \\\n && apk add --update mongo-c-driver\nCOPY build/plugin/konker-mosquitto-auth-plugin-ld.conf /etc/ld.so.conf.d/konker-mosquitto-auth-plugin-ld.conf\nCOPY build/plugin/lib/*.so /usr/local/lib/konker-mosquitto-auth-plugin/\nCOPY build/mosquitto.conf /etc/mosquitto/mosquitto.conf\nCOPY build/konker-mosquitto-auth-plugin.conf /etc/mosquitto/konker-mosquitto-auth-plugin.conf\nCOPY build/konker-mqtt.conf /etc/mosquitto/conf.d/konker-mqtt.conf\nRUN ln -s /usr/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.10 \\\n && ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.10\n#  DSL for Instance Administration\nCOPY build/__init__.py /usr/bin\nCOPY build/populate_users.py /usr/bin\nCOPY build/dsl.py /usr/bin\nCOPY build/users/ /usr/bin/users\nCOPY build/dao/ /usr/bin/dao\nCOPY build/setup.py /usr/bin\nCOPY build/generate_mosquitto_credentials.sh /usr/bin\nRUN chmod 777 /usr/bin/setup.py\nRUN chmod 777 /usr/bin/generate_mosquitto_credentials.sh\nRUN python /usr/bin/setup.py install\nRUN rm /usr/bin/setup.py\nRUN ln -s /usr/bin/dsl.py /usr/bin/konker\nRUN ln -s /usr/bin/populate_users.py /usr/bin/populate_users\n#  # Configure and deploy web app\nCOPY build/registry.war /var/lib/jetty/webapps/\nCOPY build/application.conf /var/lib/jetty/resources/\nCOPY build/logback.xml /var/lib/jetty/webapps/resources/\nCOPY build/logback.xml /var/lib/jetty/resources/\nCOPY build/mail /var/lib/jetty/webapps/resources/mail/\nCOPY build/mail /var/lib/jetty/resources/mail/\n#  # Set entrypoint\nCOPY docker-entrypoint.sh /\nRUN chmod 777 /docker-entrypoint.sh\n#  RUN mkdir /data && chown redis:redis /data\n#  start\nEXPOSE 8080/tcp 80/tcp 443/tcp 6379/tcp 27017/tcp 28017/tcp 1883/tcp\nVOLUME /data/db\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"java\", \"-jar\", \"/usr/local/jetty/start.jar\"]\n","originalDockerfileUglifiedHash":"a6c11ec7adff846f7bab998bd38bd6d9","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f40be0a6ee04cf44ff29763f930942b7e7b2795d.dockerfile"}