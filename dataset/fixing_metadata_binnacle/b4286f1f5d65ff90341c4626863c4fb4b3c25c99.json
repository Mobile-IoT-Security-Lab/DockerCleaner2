{"seed":2264330570,"processedDockerfileHash":"529357049d36504ffb1399c0c13d9a36","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#  ###############################################################################################\n#  ####\n#  #### BUILDER\n#  ####\n#  ###############################################################################################\nFROM golang:1.10-alpine AS builder\n#  ########################################################\n#  # Install build dependencies\n#  ########################################################\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_BUILD=${APK_BUILD:-\"make git ca-certificates openssl mercurial\"}\n#  ### !!! Not used with this builder\n#   ARG USER=${RUNTIME_USER:-\"app\"}\n#   ARG USER_HOME=${USER_HOME:-\"/app\"}\n#   ARG DATA_HOME=${DATA_HOME:-\"/data\"}\n#   ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#   ARG SHARED_HOME=${SHARED_HOME:-\"/shared\"}\n#  ###\nRUN apk add ${APK_BUILD} --no-cache --no-progress\n#  ########################################################\n#  # Copy source code in the container & build program\n#  ########################################################\nARG SRC_VCS_URI=${SRC_VCS_URI:-\"github.com/sniperkit/dataflowkit\"}\nARG SRC_PATH_PREFIX=${SRC_PATH_PREFIX:-\"cmd/fetch.d\"}\nARG SRC_PATH_FULL=\"${GOPATH}/${SRC_VCS_URI}/${SRC_PATH_PREFIX}\"\nARG APP_BINARY_NAME=\"${APP_BINARY_NAME:-\"fetch.d\"}\"\nARG APP_BINARY_PATH_FULL=\"${APP_BINARY_PATH_FULL:-\"${SRC_PATH_FULL}/${APP_BINARY_NAME}\"}\"\nARG APP_BINARY_PATH_BUILD=\"${APP_BINARY_PATH_BUILD:-\"${APP_BINARY_PATH_FULL}/bin/${APP_BINARY_NAME}\"}\"\nCOPY . ${SRC_PATH_FULL}\nWORKDIR ${SRC_PATH_FULL}\nRUN cd ${SRC_PATH_FULL} \\\n && pwd \\\n && ls -l \\\n && mkdir -p bin \\\n && go get -v -u ${SRC_VCS_URI} \\\n && go build -v -o ${APP_BINARY_PATH_FULL}\n#  ###############################################################################################\n#  ####\n#  #### RUNTIME\n#  ####\n#  ###############################################################################################\nFROM alpine:3.7 AS runtime\n#  ########################################################\n#   Install tini in /usr/local/sbin\n#  ########################################################\nARG WITH_TINI=${WITH_TINI:-\"true\"}\nARG TINI_VERSION=${TINI_VERSION:-\"0.17.0\"}\nARG TINI_COMPILE=${TINI_COMPILE:-\"muslc\"}\nARG TINI_ARCH=${TINI_VERSION:-\"amd64\"}\nARG TINI_FILEPATH=${TINI_FILEPATH:-\"/usr/local/sbin/tini\"}\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document ${TINI_FILEPATH} https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-${TINI_COMPILE}-${TINI_ARCH}\n#  ########################################################\n#   or Install gosu in /usr/local/sbin\n#  ########################################################\nARG WITH_GOSU=${WITH_GOSU:-\"false\"}\nARG GOSU_VERSION=${GOSU_VERSION:-\"1.10\"}\nARG GOSU_ARCH=${GOSU_ARCH:-\"amd64\"}\nARG GOSU_FILEPATH=${GOSU_FILEPATH:-\"/usr/local/sbin/gosu\"}\n#   Install gosu in /usr/local/bin/gosu\nRUN which wget &> /dev/null || apt-get install --no-install-recommends wget=1.20.3 ; wget --no-verbose --output-document ${GOSU_FILEPATH} https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${GOSU_ARCH}\n#  ########################################################\n#   Install runtime dependencies & create runtime user\n#  ########################################################\n#   container - apk\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_RUNTIME=${APK_RUNTIME:-\"ca-certificates git libssh2 openssl\"}\n#   container - global\nARG OPT_DIR=${OPT_DIR:-\"/opt\"}\n#  ### !!! Not used with this runtime \n#   ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#   container - user\nARG APP_USER=${APP_USER:-\"snk\"}\n#   container - app\nARG APP_NAME=${APP_NAME:-\"dev-assitant\"}\nARG APP_PORT=${APP_PORT:-\"2312\"}\nARG APP_DIR=${APP_DIR:-\"sniperkit\"}\nARG APP_SUBDIRS=${APP_SUBDIRS:-\"bin config data\"}\nARG APP_HOME=${APP_HOME:-\"${OPT_DIR}/${APP_DIR}\"}\nARG APP_CONF_PREFIX=${APP_CONF_PREFIX:-\"${APP_HOME}/conf\"}\nARG APP_CONF=${APP_CONF:-\"${APP_CONF_PREFIX}/config.yml\"}\nARG APP_DATA=${APP_DATA:-\"${APP_HOME}/data\"}\nARG APP_BIN_PREFIX=${APP_BIN_PREFIX:-\"${APP_HOME}/bin\"}\nARG APP_BIN=${APP_BIN:-\"${APP_BIN_PREFIX}/${APP_NAME}\"}\nRUN if [ -f \"${GOSU_FILEPATH}\" ] ; then chmod +x ${GOSU_FILEPATH} ; fi \\\n && if [ -f \"${TINI_FILEPATH}\" ] ; then chmod +x ${TINI_FILEPATH} ; fi \\\n && if [ $ALPINE_EDGE == \"true\" ] ; then echo \"@testing http://dl-4.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories ; fi \\\n && mkdir -p ${APP_HOME} \\\n && apk add ${APK_RUNTIME} --no-cache --no-progress \\\n && adduser -D app -h /data -s /bin/sh \\\n && su ${APP_USER} -c 'cd ${APP_HOME}; mkdir -p ${APP_SUBDIRS}'\n#   Switch to user context\nUSER ${APP_USERNAME}\nWORKDIR ${APP_HOME}\n#   Copy binary to /opt/app/bin\nCOPY --from=builder ${APP_BINARY_PATH_FULL} ${APP_BIN}\n#  ### !!! Not used with this runtime \n#   COPY config.json /opt/app/config/config.yaml\n#  ### !!! Not used with this runtime \n#   COPY config.json /opt/app/config/config.json\nENV PATH=\"$PATH:${APP_BIN}\"\n#   Container configuration\nEXPOSE ${APP_PORT}\nVOLUME [\"${APP_DATA}\"]\n#   ENTRYPOINT [\"tini\", \"-g\", \"--\"]\n#   ENTRYPOINT [\"gosu\", \"${APP_USER}\", \"${APP_BIN}\"]\n#   CMD [\"${APP_BIN}\", \"-conf_dir=${APP_CONF}\"]\nCMD [\"${APP_BIN}\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ###############################################################################################\n# ####\n# #### BUILDER\n# ####\n# ###############################################################################################\nFROM golang:1.10-alpine AS builder\n# ########################################################\n# # Install build dependencies\n# ########################################################\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_BUILD=${APK_BUILD:-\"make git ca-certificates openssl mercurial\"}\n# ### !!! Not used with this builder\n#  ARG USER=${RUNTIME_USER:-\"app\"}\n#  ARG USER_HOME=${USER_HOME:-\"/app\"}\n#  ARG DATA_HOME=${DATA_HOME:-\"/data\"}\n#  ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#  ARG SHARED_HOME=${SHARED_HOME:-\"/shared\"}\n# ###\nRUN apk add --no-cache --no-progress ${APK_BUILD}\n# ########################################################\n# # Copy source code in the container & build program\n# ########################################################\nARG SRC_VCS_URI=${SRC_VCS_URI:-\"github.com/sniperkit/dataflowkit\"}\nARG SRC_PATH_PREFIX=${SRC_PATH_PREFIX:-\"cmd/fetch.d\"}\nARG SRC_PATH_FULL=\"${GOPATH}/${SRC_VCS_URI}/${SRC_PATH_PREFIX}\"\nARG APP_BINARY_NAME=\"${APP_BINARY_NAME:-\"fetch.d\"}\"\nARG APP_BINARY_PATH_FULL=\"${APP_BINARY_PATH_FULL:-\"${SRC_PATH_FULL}/${APP_BINARY_NAME}\"}\"\nARG APP_BINARY_PATH_BUILD=\"${APP_BINARY_PATH_BUILD:-\"${APP_BINARY_PATH_FULL}/bin/${APP_BINARY_NAME}\"}\"\nCOPY . ${SRC_PATH_FULL}\nWORKDIR ${SRC_PATH_FULL}\nRUN cd ${SRC_PATH_FULL} \\\n && pwd \\\n && ls -l \\\n && mkdir -p bin \\\n && go get -v -u ${SRC_VCS_URI} \\\n && go build -v -o ${APP_BINARY_PATH_FULL}\n# ###############################################################################################\n# ####\n# #### RUNTIME\n# ####\n# ###############################################################################################\nFROM alpine:3.7 AS runtime\n# ########################################################\n#  Install tini in /usr/local/sbin\n# ########################################################\nARG WITH_TINI=${WITH_TINI:-\"true\"}\nARG TINI_VERSION=${TINI_VERSION:-\"0.17.0\"}\nARG TINI_COMPILE=${TINI_COMPILE:-\"muslc\"}\nARG TINI_ARCH=${TINI_VERSION:-\"amd64\"}\nARG TINI_FILEPATH=${TINI_FILEPATH:-\"/usr/local/sbin/tini\"}\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-${TINI_COMPILE}-${TINI_ARCH} ${TINI_FILEPATH}\n# ########################################################\n#  or Install gosu in /usr/local/sbin\n# ########################################################\nARG WITH_GOSU=${WITH_GOSU:-\"false\"}\nARG GOSU_VERSION=${GOSU_VERSION:-\"1.10\"}\nARG GOSU_ARCH=${GOSU_ARCH:-\"amd64\"}\nARG GOSU_FILEPATH=${GOSU_FILEPATH:-\"/usr/local/sbin/gosu\"}\n#  Install gosu in /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${GOSU_ARCH} ${GOSU_FILEPATH}\n# ########################################################\n#  Install runtime dependencies & create runtime user\n# ########################################################\n#  container - apk\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_RUNTIME=${APK_RUNTIME:-\"ca-certificates git libssh2 openssl\"}\n#  container - global\nARG OPT_DIR=${OPT_DIR:-\"/opt\"}\n# ### !!! Not used with this runtime \n#  ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#  container - user\nARG APP_USER=${APP_USER:-\"snk\"}\n#  container - app\nARG APP_NAME=${APP_NAME:-\"dev-assitant\"}\nARG APP_PORT=${APP_PORT:-\"2312\"}\nARG APP_DIR=${APP_DIR:-\"sniperkit\"}\nARG APP_SUBDIRS=${APP_SUBDIRS:-\"bin config data\"}\nARG APP_HOME=${APP_HOME:-\"${OPT_DIR}/${APP_DIR}\"}\nARG APP_CONF_PREFIX=${APP_CONF_PREFIX:-\"${APP_HOME}/conf\"}\nARG APP_CONF=${APP_CONF:-\"${APP_CONF_PREFIX}/config.yml\"}\nARG APP_DATA=${APP_DATA:-\"${APP_HOME}/data\"}\nARG APP_BIN_PREFIX=${APP_BIN_PREFIX:-\"${APP_HOME}/bin\"}\nARG APP_BIN=${APP_BIN:-\"${APP_BIN_PREFIX}/${APP_NAME}\"}\nRUN if [ -f \"${GOSU_FILEPATH}\" ] ; then chmod +x ${GOSU_FILEPATH} ; fi \\\n && if [ -f \"${TINI_FILEPATH}\" ] ; then chmod +x ${TINI_FILEPATH} ; fi \\\n && if [ $ALPINE_EDGE == \"true\" ] ; then echo \"@testing http://dl-4.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories ; fi \\\n && mkdir -p ${APP_HOME} \\\n && apk --no-cache --no-progress add ${APK_RUNTIME} \\\n && adduser -D app -h /data -s /bin/sh \\\n && su ${APP_USER} -c 'cd ${APP_HOME}; mkdir -p ${APP_SUBDIRS}'\n#  Switch to user context\nUSER ${APP_USERNAME}\nWORKDIR ${APP_HOME}\n#  Copy binary to /opt/app/bin\nCOPY --from=builder ${APP_BINARY_PATH_FULL} ${APP_BIN}\n# ### !!! Not used with this runtime \n#  COPY config.json /opt/app/config/config.yaml\n# ### !!! Not used with this runtime \n#  COPY config.json /opt/app/config/config.json\nENV PATH=\"$PATH:${APP_BIN}\"\n#  Container configuration\nEXPOSE ${APP_PORT}\nVOLUME [\"${APP_DATA}\"]\n#  ENTRYPOINT [\"tini\", \"-g\", \"--\"]\n#  ENTRYPOINT [\"gosu\", \"${APP_USER}\", \"${APP_BIN}\"]\n#  CMD [\"${APP_BIN}\", \"-conf_dir=${APP_CONF}\"]\nCMD [\"${APP_BIN}\"]\n","injectedSmells":[],"originalDockerfileHash":"4166dd9c6016c6b93519a9cf86f6f14a","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ###############################################################################################\n#  ####\n#  #### BUILDER\n#  ####\n#  ###############################################################################################\nFROM golang:1.10-alpine AS builder\n#  ########################################################\n#  # Install build dependencies\n#  ########################################################\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_BUILD=${APK_BUILD:-\"make git ca-certificates openssl mercurial\"}\n#  ### !!! Not used with this builder\n#   ARG USER=${RUNTIME_USER:-\"app\"}\n#   ARG USER_HOME=${USER_HOME:-\"/app\"}\n#   ARG DATA_HOME=${DATA_HOME:-\"/data\"}\n#   ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#   ARG SHARED_HOME=${SHARED_HOME:-\"/shared\"}\n#  ###\nRUN apk add --no-cache --no-progress ${APK_BUILD}\n#  ########################################################\n#  # Copy source code in the container & build program\n#  ########################################################\nARG SRC_VCS_URI=${SRC_VCS_URI:-\"github.com/sniperkit/dataflowkit\"}\nARG SRC_PATH_PREFIX=${SRC_PATH_PREFIX:-\"cmd/fetch.d\"}\nARG SRC_PATH_FULL=\"${GOPATH}/${SRC_VCS_URI}/${SRC_PATH_PREFIX}\"\nARG APP_BINARY_NAME=\"${APP_BINARY_NAME:-\"fetch.d\"}\"\nARG APP_BINARY_PATH_FULL=\"${APP_BINARY_PATH_FULL:-\"${SRC_PATH_FULL}/${APP_BINARY_NAME}\"}\"\nARG APP_BINARY_PATH_BUILD=\"${APP_BINARY_PATH_BUILD:-\"${APP_BINARY_PATH_FULL}/bin/${APP_BINARY_NAME}\"}\"\nCOPY . ${SRC_PATH_FULL}\nWORKDIR ${SRC_PATH_FULL}\nRUN cd ${SRC_PATH_FULL} \\\n && pwd \\\n && ls -l \\\n && mkdir -p bin \\\n && go get -v -u ${SRC_VCS_URI} \\\n && go build -v -o ${APP_BINARY_PATH_FULL}\n#  ###############################################################################################\n#  ####\n#  #### RUNTIME\n#  ####\n#  ###############################################################################################\nFROM alpine:3.7 AS runtime\n#  ########################################################\n#   Install tini in /usr/local/sbin\n#  ########################################################\nARG WITH_TINI=${WITH_TINI:-\"true\"}\nARG TINI_VERSION=${TINI_VERSION:-\"0.17.0\"}\nARG TINI_COMPILE=${TINI_COMPILE:-\"muslc\"}\nARG TINI_ARCH=${TINI_VERSION:-\"amd64\"}\nARG TINI_FILEPATH=${TINI_FILEPATH:-\"/usr/local/sbin/tini\"}\nADD https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-${TINI_COMPILE}-${TINI_ARCH} ${TINI_FILEPATH}\n#  ########################################################\n#   or Install gosu in /usr/local/sbin\n#  ########################################################\nARG WITH_GOSU=${WITH_GOSU:-\"false\"}\nARG GOSU_VERSION=${GOSU_VERSION:-\"1.10\"}\nARG GOSU_ARCH=${GOSU_ARCH:-\"amd64\"}\nARG GOSU_FILEPATH=${GOSU_FILEPATH:-\"/usr/local/sbin/gosu\"}\n#   Install gosu in /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-${GOSU_ARCH} ${GOSU_FILEPATH}\n#  ########################################################\n#   Install runtime dependencies & create runtime user\n#  ########################################################\n#   container - apk\nARG APK_EDGE=${APK_EDGE:-\"false\"}\nARG APK_RUNTIME=${APK_RUNTIME:-\"ca-certificates git libssh2 openssl\"}\n#   container - global\nARG OPT_DIR=${OPT_DIR:-\"/opt\"}\n#  ### !!! Not used with this runtime \n#   ARG INSTALL_HOME=${INSTALL_HOME:-\"/install\"}\n#   container - user\nARG APP_USER=${APP_USER:-\"snk\"}\n#   container - app\nARG APP_NAME=${APP_NAME:-\"dev-assitant\"}\nARG APP_PORT=${APP_PORT:-\"2312\"}\nARG APP_DIR=${APP_DIR:-\"sniperkit\"}\nARG APP_SUBDIRS=${APP_SUBDIRS:-\"bin config data\"}\nARG APP_HOME=${APP_HOME:-\"${OPT_DIR}/${APP_DIR}\"}\nARG APP_CONF_PREFIX=${APP_CONF_PREFIX:-\"${APP_HOME}/conf\"}\nARG APP_CONF=${APP_CONF:-\"${APP_CONF_PREFIX}/config.yml\"}\nARG APP_DATA=${APP_DATA:-\"${APP_HOME}/data\"}\nARG APP_BIN_PREFIX=${APP_BIN_PREFIX:-\"${APP_HOME}/bin\"}\nARG APP_BIN=${APP_BIN:-\"${APP_BIN_PREFIX}/${APP_NAME}\"}\nRUN if [ -f \"${GOSU_FILEPATH}\" ] ; then chmod +x ${GOSU_FILEPATH} ; fi \\\n && if [ -f \"${TINI_FILEPATH}\" ] ; then chmod +x ${TINI_FILEPATH} ; fi \\\n && if [ $ALPINE_EDGE == \"true\" ] ; then echo \"@testing http://dl-4.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories ; fi \\\n && mkdir -p ${APP_HOME} \\\n && apk --no-cache --no-progress add ${APK_RUNTIME} \\\n && adduser -D app -h /data -s /bin/sh \\\n && su ${APP_USER} -c 'cd ${APP_HOME}; mkdir -p ${APP_SUBDIRS}'\n#   Switch to user context\nUSER ${APP_USERNAME}\nWORKDIR ${APP_HOME}\n#   Copy binary to /opt/app/bin\nCOPY --from=builder ${APP_BINARY_PATH_FULL} ${APP_BIN}\n#  ### !!! Not used with this runtime \n#   COPY config.json /opt/app/config/config.yaml\n#  ### !!! Not used with this runtime \n#   COPY config.json /opt/app/config/config.json\nENV PATH=\"$PATH:${APP_BIN}\"\n#   Container configuration\nEXPOSE ${APP_PORT}\nVOLUME [\"${APP_DATA}\"]\n#   ENTRYPOINT [\"tini\", \"-g\", \"--\"]\n#   ENTRYPOINT [\"gosu\", \"${APP_USER}\", \"${APP_BIN}\"]\n#   CMD [\"${APP_BIN}\", \"-conf_dir=${APP_CONF}\"]\nCMD [\"${APP_BIN}\"]\n","originalDockerfileUglifiedHash":"dc31129a02b508f3cea18b087f3b5d01","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b4286f1f5d65ff90341c4626863c4fb4b3c25c99.dockerfile"}