{"seed":4020855087,"processedDockerfileHash":"9526b4926a55180297c61f8514b64595","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Parts Copyright (c) 2016 - 2018 Kaj Magnus Lindberg\n#   License: 2-clause BSD (Kaj Magnus's changes in this file only).\n#\n#   Parts Copyright (C) 2011-2016 Nginx, Inc.\n#   License: (2-clause BSD)\n#   All rights reserved.\n#\n#   Redistribution and use in source and binary forms, with or without\n#   modification, are permitted provided that the following conditions\n#   are met:\n#   1. Redistributions of source code must retain the above copyright\n#      notice, this list of conditions and the following disclaimer.\n#   2. Redistributions in binary form must reproduce the above copyright\n#      notice, this list of conditions and the following disclaimer in the\n#      documentation and/or other materials provided with the distribution.\n#\n#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n#   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n#   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n#   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n#   SUCH DAMAGE.\n#   Based on:\n#   https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/Dockerfile\n#   In the distant future: Maybe switch to https://github.com/envoyproxy/envoy ?  & Zipkin tracing\nFROM alpine:3.9\nENV NGINX_VERSION=\"1.15.12\"\n#   Do this first, because we need 'make' early, and also it's boring to wait for Nginx\n#   to download.\nRUN addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add gcc=8.3.0-r0 libc-dev=0.7.1-r0 make=4.2.1-r2 openssl-dev=1.1.1k-r0 pcre-dev=8.42-r2 zlib-dev=1.2.11-r1 linux-headers=4.18.13-r1 curl=7.64.0-r5 gnupg1=1.4.23-r0 --no-cache --virtual .build-deps \\\n && apk add libgcc=8.3.0-r0 --no-cache \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc\nENV GPG_KEYS=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\nENV CONFIG=\"\\\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_mp4_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-threads  --with-stream  --with-stream_ssl_module  --with-file-aio  --without-http_autoindex_module  --without-http_ssi_module  --with-ld-opt=\\\"-Wl,-rpath,/opt/luajit/lib\\\"  --add-module=/tmp/nginx-modules/ngx_devel_kit  --add-module=/tmp/nginx-modules/lua-nginx-module  --add-module=/tmp/nginx-modules/nchan  \\\"\"\n#   Copy nchan source code\nCOPY modules /tmp/nginx-modules/\n#   Build LuaJIT\nRUN cd /tmp/nginx-modules/luajit \\\n && make PREFIX=/opt/luajit \\\n && make install PREFIX=/opt/luajit\n#   Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/opt/luajit/lib\"\nENV LUAJIT_INC=\"/opt/luajit/include/luajit-2.1\"\nRUN export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug --with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG --with-cc-opt='-ggdb' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && rm -f /etc/nginx/fastcgi* /etc/nginx/koi-* /etc/nginx/scgi_params* /etc/nginx/uwsgi_params* /etc/nginx/win-utf \\\n && mkdir /etc/nginx/sites-available /etc/nginx/sites-enabled \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add gettext=0.19.8.1-r4 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add $runDeps --no-cache --virtual .nginx-rundeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2020c-r1 --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN rm -fr /tmp/nginx-modules/\nCOPY lua-packages /opt/lua-packages/\n#   Add 'bash' so we can 'docker exec' into the container, + some tools. (wget & less already works)\n#   And gdb, for backtracing core dumps. [NGXCORED]\nRUN apk add bash=4.4.19-r1 tree=1.8.0-r0 curl=7.64.0-r5 net-tools=1.60_git20140218-r2 gdb=8.2-r1 busybox-extras=1.29.3-r10 --no-cache\n#   Remove default files, they're very confusing, if logging in to Nginx and looking at /etc/nginx/:\nRUN rm -fr mime.types.default nginx.conf nginx.conf.default\nCOPY 502.html /opt/nginx/html/502.html\nCOPY 503.html /opt/nginx/html/503.html\n#   For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n#   old, remove once I've edited edm & edc\nCOPY server-listen.conf /etc/nginx/listen.conf\n#   old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf /etc/nginx/\n#   old, remove once I've edited edm & edc\nCOPY server-ssl.conf /etc/nginx/ssl-hardening.conf\nCOPY server-ssl.conf /etc/nginx/\nCOPY http-limits.conf /etc/nginx/http-limits.conf.template\n#   old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead.\nCOPY http-redirect-to-https.conf /etc/nginx/\nCOPY server-limits.conf /etc/nginx/server-limits.conf.template\n#   old, remove once I've edited edm & edc\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n#   old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf /etc/nginx/nginx.conf.template\nCOPY run-envsubst.sh /etc/nginx/run-envsubst.sh\nRUN chmod ugo+x /etc/nginx/run-envsubst.sh\n#   Sync this with the variable list in run-envsubst.sh: [0KW2UY3]  CLEANUP change prefix to TY_\n#   Currently, each tab has its own websocket/long-polling connection — and if 40 connections per ip,\n#   I sometimes happen to open really many tabs, and requests start failing. Set to >= 60, for now.\n#   Later, just one single live-update connection per browser [onesocket].\nENV ED_NGX_LIMIT_CONN_PER_IP=\"60\" \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=\"10000\" \\\n    ED_NGX_LIMIT_REQ_PER_IP=\"30\" \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=\"2000\" \\\n    ED_NGX_LIMIT_RATE=\"50k\" \\\n    ED_NGX_LIMIT_RATE_AFTER=\"5m\" \\\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\"\n#   Frequently edited, so do last.\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua /opt/talkyard/lua/\nCOPY assets /opt/talkyard/assets\n#   Don't expose port 81 (the publish-websocket-messages port) — it should be accessible from\n#   inside the Docker network only, so that only Play Framework (located inside the network)\n#   can publish events.\nEXPOSE 80/tcp 443/tcp\n#   Core dumps\n#   Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n#   Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n#   to crash and generate a core dump at some specific location.\n#   (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n#   Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n#   then type `bt` or `bt f` (backtrace full).\n#\n#   Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n#  CMD chmod 1777 /tmp/cores \\\n#    && sysctl -w fs.suid_dumpable=2 \\\n#    && sysctl -p \\\n#    && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#    && /etc/nginx/run-envsubst.sh \\\n#    && nginx-debug\nCMD /etc/nginx/run-envsubst.sh \\\n && nginx\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Parts Copyright (c) 2016 - 2018 Kaj Magnus Lindberg\n#  License: 2-clause BSD (Kaj Magnus's changes in this file only).\n#\n#  Parts Copyright (C) 2011-2016 Nginx, Inc.\n#  License: (2-clause BSD)\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions\n#  are met:\n#  1. Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n#  SUCH DAMAGE.\n#  Based on:\n#  https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/Dockerfile\n#  In the distant future: Maybe switch to https://github.com/envoyproxy/envoy ?  & Zipkin tracing\nFROM alpine:3.9\nENV NGINX_VERSION=\"1.15.12\"\n#  Do this first, because we need 'make' early, and also it's boring to wait for Nginx\n#  to download.\nRUN addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 \\\n && apk add --no-cache libgcc \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc\nENV GPG_KEYS=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\nENV CONFIG=\"\\\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_mp4_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-threads  --with-stream  --with-stream_ssl_module  --with-file-aio  --without-http_autoindex_module  --without-http_ssi_module  --with-ld-opt=\\\"-Wl,-rpath,/opt/luajit/lib\\\"  --add-module=/tmp/nginx-modules/ngx_devel_kit  --add-module=/tmp/nginx-modules/lua-nginx-module  --add-module=/tmp/nginx-modules/nchan  \\\"\"\n#  Copy nchan source code\nCOPY modules /tmp/nginx-modules/\n#  Build LuaJIT\nRUN cd /tmp/nginx-modules/luajit \\\n && make PREFIX=/opt/luajit \\\n && make install PREFIX=/opt/luajit\n#  Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/opt/luajit/lib\"\nENV LUAJIT_INC=\"/opt/luajit/include/luajit-2.1\"\nRUN export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug --with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG --with-cc-opt='-ggdb' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && rm -f /etc/nginx/fastcgi* /etc/nginx/koi-* /etc/nginx/scgi_params* /etc/nginx/uwsgi_params* /etc/nginx/win-utf \\\n && mkdir /etc/nginx/sites-available /etc/nginx/sites-enabled \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN rm -fr /tmp/nginx-modules/\nCOPY lua-packages /opt/lua-packages/\n#  Add 'bash' so we can 'docker exec' into the container, + some tools. (wget & less already works)\n#  And gdb, for backtracing core dumps. [NGXCORED]\nRUN apk add --no-cache bash tree curl net-tools gdb busybox-extras\n#  Remove default files, they're very confusing, if logging in to Nginx and looking at /etc/nginx/:\nRUN rm -fr mime.types.default nginx.conf nginx.conf.default\nCOPY 502.html /opt/nginx/html/502.html\nCOPY 503.html /opt/nginx/html/503.html\n#  For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n#  old, remove once I've edited edm & edc\nCOPY server-listen.conf /etc/nginx/listen.conf\n#  old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf /etc/nginx/\n#  old, remove once I've edited edm & edc\nCOPY server-ssl.conf /etc/nginx/ssl-hardening.conf\nCOPY server-ssl.conf /etc/nginx/\nCOPY http-limits.conf /etc/nginx/http-limits.conf.template\n#  old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead.\nCOPY http-redirect-to-https.conf /etc/nginx/\nCOPY server-limits.conf /etc/nginx/server-limits.conf.template\n#  old, remove once I've edited edm & edc\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n#  old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf /etc/nginx/nginx.conf.template\nCOPY run-envsubst.sh /etc/nginx/run-envsubst.sh\nRUN chmod ugo+x /etc/nginx/run-envsubst.sh\n#  Sync this with the variable list in run-envsubst.sh: [0KW2UY3]  CLEANUP change prefix to TY_\n#  Currently, each tab has its own websocket/long-polling connection — and if 40 connections per ip,\n#  I sometimes happen to open really many tabs, and requests start failing. Set to >= 60, for now.\n#  Later, just one single live-update connection per browser [onesocket].\nENV ED_NGX_LIMIT_CONN_PER_IP=\"60\" \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=\"10000\" \\\n    ED_NGX_LIMIT_REQ_PER_IP=\"30\" \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=\"2000\" \\\n    ED_NGX_LIMIT_RATE=\"50k\" \\\n    ED_NGX_LIMIT_RATE_AFTER=\"5m\" \\\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\"\n#  Frequently edited, so do last.\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua /opt/talkyard/lua/\nCOPY assets /opt/talkyard/assets\n#  Don't expose port 81 (the publish-websocket-messages port) — it should be accessible from\n#  inside the Docker network only, so that only Play Framework (located inside the network)\n#  can publish events.\nEXPOSE 80/tcp 443/tcp\n#  Core dumps\n#  Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n#  Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n#  to crash and generate a core dump at some specific location.\n#  (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n#  Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n#  then type `bt` or `bt f` (backtrace full).\n#\n#  Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n# CMD chmod 1777 /tmp/cores \\\n#   && sysctl -w fs.suid_dumpable=2 \\\n#   && sysctl -p \\\n#   && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#   && /etc/nginx/run-envsubst.sh \\\n#   && nginx-debug\nCMD /etc/nginx/run-envsubst.sh \\\n && nginx\n","injectedSmells":[],"originalDockerfileHash":"4e43e349b0470d48a69fb4d9efa9612f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Parts Copyright (c) 2016 - 2018 Kaj Magnus Lindberg\n#   License: 2-clause BSD (Kaj Magnus's changes in this file only).\n#\n#   Parts Copyright (C) 2011-2016 Nginx, Inc.\n#   License: (2-clause BSD)\n#   All rights reserved.\n#\n#   Redistribution and use in source and binary forms, with or without\n#   modification, are permitted provided that the following conditions\n#   are met:\n#   1. Redistributions of source code must retain the above copyright\n#      notice, this list of conditions and the following disclaimer.\n#   2. Redistributions in binary form must reproduce the above copyright\n#      notice, this list of conditions and the following disclaimer in the\n#      documentation and/or other materials provided with the distribution.\n#\n#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n#   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n#   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n#   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n#   SUCH DAMAGE.\n#   Based on:\n#   https://raw.githubusercontent.com/nginxinc/docker-nginx/master/mainline/alpine/Dockerfile\n#   In the distant future: Maybe switch to https://github.com/envoyproxy/envoy ?  & Zipkin tracing\nFROM alpine:3.9\nENV NGINX_VERSION=\"1.15.12\"\n#   Do this first, because we need 'make' early, and also it's boring to wait for Nginx\n#   to download.\nRUN addgroup -S nginx \\\n && adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 \\\n && apk add --no-cache libgcc \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \\\n && curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc\nENV GPG_KEYS=\"B0F4253373F8F6F510D42178520A9993A1C052F8\"\nENV CONFIG=\"\\\" --prefix=/etc/nginx  --sbin-path=/usr/sbin/nginx  --modules-path=/usr/lib/nginx/modules  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx.pid  --lock-path=/var/run/nginx.lock  --http-client-body-temp-path=/var/cache/nginx/client_temp  --http-proxy-temp-path=/var/cache/nginx/proxy_temp  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp  --http-scgi-temp-path=/var/cache/nginx/scgi_temp  --user=nginx  --group=nginx  --with-http_ssl_module  --with-http_realip_module  --with-http_mp4_module  --with-http_gzip_static_module  --with-http_stub_status_module  --with-threads  --with-stream  --with-stream_ssl_module  --with-file-aio  --without-http_autoindex_module  --without-http_ssi_module  --with-ld-opt=\\\"-Wl,-rpath,/opt/luajit/lib\\\"  --add-module=/tmp/nginx-modules/ngx_devel_kit  --add-module=/tmp/nginx-modules/lua-nginx-module  --add-module=/tmp/nginx-modules/nchan  \\\"\"\n#   Copy nchan source code\nCOPY modules /tmp/nginx-modules/\n#   Build LuaJIT\nRUN cd /tmp/nginx-modules/luajit \\\n && make PREFIX=/opt/luajit \\\n && make install PREFIX=/opt/luajit\n#   Tell nginx's build system where to find LuaJIT 2.1:\nENV LUAJIT_LIB=\"/opt/luajit/lib\"\nENV LUAJIT_INC=\"/opt/luajit/include/luajit-2.1\"\nRUN export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && found='' ; for server in ha.pool.sks-keyservers.net hkp://keyserver.ubuntu.com:80 hkp://p80.pool.sks-keyservers.net:80 pgp.mit.edu; do echo \"Fetching GPG key $GPG_KEYS from $server\" ;gpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" \\\n && found=yes \\\n && break ; done ; test -z \"$found\" \\\n && echo \"error: failed to fetch GPG key $GPG_KEYS\" >&2 \\\n && exit 1 ; gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \\\n && rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \\\n && mkdir -p /usr/src \\\n && tar -zxC /usr/src -f nginx.tar.gz \\\n && rm nginx.tar.gz \\\n && cd /usr/src/nginx-$NGINX_VERSION \\\n && ./configure $CONFIG --with-debug --with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && mv objs/nginx objs/nginx-debug \\\n && ./configure $CONFIG --with-cc-opt='-ggdb' \\\n && make -j$( getconf _NPROCESSORS_ONLN ;) \\\n && make install \\\n && rm -rf /etc/nginx/html/ \\\n && rm -f /etc/nginx/fastcgi* /etc/nginx/koi-* /etc/nginx/scgi_params* /etc/nginx/uwsgi_params* /etc/nginx/win-utf \\\n && mkdir /etc/nginx/sites-available /etc/nginx/sites-enabled \\\n && install -m755 objs/nginx-debug /usr/sbin/nginx-debug \\\n && rm -rf /usr/src/nginx-$NGINX_VERSION \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" \\\n && apk add --no-cache --virtual .nginx-rundeps $runDeps \\\n && apk del .build-deps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log\nRUN rm -fr /tmp/nginx-modules/\nCOPY lua-packages /opt/lua-packages/\n#   Add 'bash' so we can 'docker exec' into the container, + some tools. (wget & less already works)\n#   And gdb, for backtracing core dumps. [NGXCORED]\nRUN apk add --no-cache bash tree curl net-tools gdb busybox-extras\n#   Remove default files, they're very confusing, if logging in to Nginx and looking at /etc/nginx/:\nRUN rm -fr mime.types.default nginx.conf nginx.conf.default\nCOPY 502.html /opt/nginx/html/502.html\nCOPY 503.html /opt/nginx/html/503.html\n#   For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.\nCOPY sites-enabled-manual /etc/nginx/sites-enabled-manual/\n#   old, remove once I've edited edm & edc\nCOPY server-listen.conf /etc/nginx/listen.conf\n#   old, remove, doesn't specify backlog sice — and may do only once, so rather useless.\nCOPY server-listen.conf /etc/nginx/\n#   old, remove once I've edited edm & edc\nCOPY server-ssl.conf /etc/nginx/ssl-hardening.conf\nCOPY server-ssl.conf /etc/nginx/\nCOPY http-limits.conf /etc/nginx/http-limits.conf.template\n#   old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead.\nCOPY http-redirect-to-https.conf /etc/nginx/\nCOPY server-limits.conf /etc/nginx/server-limits.conf.template\n#   old, remove once I've edited edm & edc\nCOPY server-locations.conf /etc/nginx/vhost.conf.template\n#   old, too, remove, when?\nCOPY server-locations.conf /etc/nginx/server.conf.template\nCOPY server-locations.conf /etc/nginx/server-locations.conf.template\nCOPY nginx.conf /etc/nginx/nginx.conf.template\nCOPY run-envsubst.sh /etc/nginx/run-envsubst.sh\nRUN chmod ugo+x /etc/nginx/run-envsubst.sh\n#   Sync this with the variable list in run-envsubst.sh: [0KW2UY3]  CLEANUP change prefix to TY_\n#   Currently, each tab has its own websocket/long-polling connection — and if 40 connections per ip,\n#   I sometimes happen to open really many tabs, and requests start failing. Set to >= 60, for now.\n#   Later, just one single live-update connection per browser [onesocket].\nENV ED_NGX_LIMIT_CONN_PER_IP=\"60\" \\\n    ED_NGX_LIMIT_CONN_PER_SERVER=\"10000\" \\\n    ED_NGX_LIMIT_REQ_PER_IP=\"30\" \\\n    ED_NGX_LIMIT_REQ_PER_IP_BURST=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER=\"200\" \\\n    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=\"2000\" \\\n    ED_NGX_LIMIT_RATE=\"50k\" \\\n    ED_NGX_LIMIT_RATE_AFTER=\"5m\" \\\n    TY_MAX_AGE_YEAR=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_MONTH=\"max-age=2592000, s-maxage=2592000, public\" \\\n    TY_MAX_AGE_WEEK=\"max-age=604800, s-maxage=604800, public\" \\\n    TY_MAX_AGE_DAY=\"max-age=86400, s-maxage=86400, public\"\n#   Frequently edited, so do last.\nCOPY ty-media /opt/talkyard/ty-media\nCOPY ed-lua /opt/talkyard/lua/\nCOPY assets /opt/talkyard/assets\n#   Don't expose port 81 (the publish-websocket-messages port) — it should be accessible from\n#   inside the Docker network only, so that only Play Framework (located inside the network)\n#   can publish events.\nEXPOSE 80/tcp 443/tcp\n#   Core dumps\n#   Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited\n#   Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )\n#   to crash and generate a core dump at some specific location.\n#   (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)\n#   Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17\n#   then type `bt` or `bt f` (backtrace full).\n#\n#   Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]\n#  CMD chmod 1777 /tmp/cores \\\n#    && sysctl -w fs.suid_dumpable=2 \\\n#    && sysctl -p \\\n#    && echo \"/tmp/cores/core.%e.%p\" > /proc/sys/kernel/core_pattern \\\n#    && /etc/nginx/run-envsubst.sh \\\n#    && nginx-debug\nCMD /etc/nginx/run-envsubst.sh \\\n && nginx\n","originalDockerfileUglifiedHash":"57619ba2ca0be1d6f70f97239386a444","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/b89a5643146dca04108d790a13f7b0fd3f4be507.dockerfile"}