{"seed":2634549887,"processedDockerfileHash":"c29b1cc4797f628ca496cb058bd0261e","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile enables an iterative development workflow where you can make\n#   a change and test it out quickly. The majority of commands in this file will\n#   be cached, making the feedback loop typically quite short. The workflow is\n#   as follows:\n#     1. Set up pre-conditions for the system in puppet code using `deploy.pp`.\n#     2. Make a change to the module.\n#     3. Run `docker build -f docker/Dockerfile .` or\n#        `./docker/bin/upgrade.sh centos` from the project directory. If you would\n#        like to test specific version upgrades, you can add run this like so:\n#          `docker build -f docker/centos/Dockerfile . \\\n#             -t pa-dev:centos --build-arg before=1.10.14`\n#     4. Upgrade the container by running the image:\n#          `docker run -it pa-dev:centos`\n#        Specify your upgrade TO version as an argument to the `docker run`\n#        command.\n#     5. Review the output. Repeat steps 2-5 as needed.\n#\n#   At the end of execution, you will see a line like:\n#\n#   Notice: /Stage[main]/Puppet_agent::Install/Package[puppet-agent]/ensure: ensure changed '1.10.14-1.el7' to '6.2.0'\n#\n#   This specifies the versions that were used for upgrade.\n#\n#   Arguments:\n#   - before: The version to do upgrade FROM. Default: \"1.10.14\"\nFROM centos:7\n#   Use this to force a cache reset (e.g. for output purposes)\n#  COPY $0 /tmp/Dockerfile\n#   Install some other dependencies for ease of life.\nRUN yum update -y \\\n && yum install -y wget git \\\n && yum clean all\nARG before=1.10.14\nLABEL before=\"${before}\"\n#   Install proper FROM repo: PC1 (puppet 4), puppet 5, or puppet 6.\nRUN if [[ ${before} == 1.* ]] ; then echo Installing PC1 repo ;wget -O puppet-pc1.rpm http://yum.puppet.com/puppetlabs-release-pc1-el-7.noarch.rpm \\\n && rpm -i puppet-pc1.rpm ; elif [[ ${before} == 5.* ]] ; then echo Installing PC1 repo ;wget -O puppet5.rpm http://yum.puppet.com/puppet5-release-el-7.noarch.rpm \\\n && rpm -i puppet5.rpm ; elif [[ ${before} == 6.* ]] ; then echo Installing PC1 repo ;wget -O puppet6.rpm http://yum.puppet.com/puppet6-release-el-7.noarch.rpm \\\n && rpm -i puppet6.rpm ; else echo no ; fi\n#   Print out which versions of the puppet-agent package are available (for reference).\n#  RUN yum list puppet-agent --showduplicates\n#   Install FROM version of puppet-agent.\nRUN yum -y update \\\n && yum install -y puppet-agent-${before}-1.el7\n#   This is also duplicated in the docker/bin/helpers/run-upgrade.sh.\nENV module_path=\"/tmp/modules\"\nWORKDIR \"${module_path}/puppet_agent\"\nCOPY metadata.json ./\n#   Dependency installation: Forge or source? The former is what the user will\n#   have downloaded, but the latter allows testing of version bumps.\n#   Install module dependencies from the Forge using Puppet Module Tool (PMT).\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-stdlib\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-inifile\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-apt\n#   Installing dependencies from source. These versions should be within the range\n#   of `dependencies` in metadata.json. `translate` is a dependency for inifile.\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-stdlib ../stdlib --branch 5.2.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-inifile ../inifile --branch 2.5.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-translate ../translate --branch 1.2.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-apt ../apt --branch 6.3.0\n#   Check that all dependencies are installed.\nRUN /opt/puppetlabs/puppet/bin/puppet module --modulepath $module_path list --tree\nCOPY docker/deploy.pp /tmp/deploy.pp\nRUN [\"sh\", \"-c\", \"/opt/puppetlabs/puppet/bin/puppet\", \"apply\", \"--modulepath\", \"$module_path\", \"/tmp/deploy.pp\"]\n#   Now move the project directory's files into the image. That way, if these\n#   files change, caching will skip everything before this.\nCOPY docker/bin/helpers/run-upgrade.sh /tmp/bin/run-upgrade.sh\nCOPY files/ ./files/\nCOPY locales/ ./locales/\nCOPY spec/ ./spec/\nCOPY task_spec/ ./task_spec/\nCOPY tasks/ ./tasks/\nCOPY templates/ ./templates\nCOPY types/ ./types/\nCOPY Gemfile Gemfile.lock Rakefile ./\nCOPY lib/ ./lib/\nCOPY manifests/ ./manifests/\nCOPY docker/upgrade.pp /tmp/upgrade.pp\n#   Print out which versions of the puppet-agent package are available (for reference).\n#  RUN yum list puppet-agent --showduplicates\n#   Perform the upgrade.\nENTRYPOINT [\"/tmp/bin/run-upgrade.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile enables an iterative development workflow where you can make\n#  a change and test it out quickly. The majority of commands in this file will\n#  be cached, making the feedback loop typically quite short. The workflow is\n#  as follows:\n#    1. Set up pre-conditions for the system in puppet code using `deploy.pp`.\n#    2. Make a change to the module.\n#    3. Run `docker build -f docker/Dockerfile .` or\n#       `./docker/bin/upgrade.sh centos` from the project directory. If you would\n#       like to test specific version upgrades, you can add run this like so:\n#         `docker build -f docker/centos/Dockerfile . \\\n#            -t pa-dev:centos --build-arg before=1.10.14`\n#    4. Upgrade the container by running the image:\n#         `docker run -it pa-dev:centos`\n#       Specify your upgrade TO version as an argument to the `docker run`\n#       command.\n#    5. Review the output. Repeat steps 2-5 as needed.\n#\n#  At the end of execution, you will see a line like:\n#\n#  Notice: /Stage[main]/Puppet_agent::Install/Package[puppet-agent]/ensure: ensure changed '1.10.14-1.el7' to '6.2.0'\n#\n#  This specifies the versions that were used for upgrade.\n#\n#  Arguments:\n#  - before: The version to do upgrade FROM. Default: \"1.10.14\"\nFROM centos:7\n#  Use this to force a cache reset (e.g. for output purposes)\n# COPY $0 /tmp/Dockerfile\n#  Install some other dependencies for ease of life.\nRUN yum update -y \\\n && yum install -y wget git \\\n && yum clean all\nARG before=1.10.14\nLABEL before=\"${before}\"\n#  Install proper FROM repo: PC1 (puppet 4), puppet 5, or puppet 6.\nRUN if [[ ${before} == 1.* ]] ; then echo Installing PC1 repo ;wget -O puppet-pc1.rpm http://yum.puppet.com/puppetlabs-release-pc1-el-7.noarch.rpm \\\n && rpm -i puppet-pc1.rpm ; elif [[ ${before} == 5.* ]] ; then echo Installing PC1 repo ;wget -O puppet5.rpm http://yum.puppet.com/puppet5-release-el-7.noarch.rpm \\\n && rpm -i puppet5.rpm ; elif [[ ${before} == 6.* ]] ; then echo Installing PC1 repo ;wget -O puppet6.rpm http://yum.puppet.com/puppet6-release-el-7.noarch.rpm \\\n && rpm -i puppet6.rpm ; else echo no ; fi\n#  Print out which versions of the puppet-agent package are available (for reference).\n# RUN yum list puppet-agent --showduplicates\n#  Install FROM version of puppet-agent.\nRUN yum -y update \\\n && yum install -y puppet-agent-${before}-1.el7\n#  This is also duplicated in the docker/bin/helpers/run-upgrade.sh.\nENV module_path=\"/tmp/modules\"\nWORKDIR \"${module_path}/puppet_agent\"\nCOPY metadata.json ./\n#  Dependency installation: Forge or source? The former is what the user will\n#  have downloaded, but the latter allows testing of version bumps.\n#  Install module dependencies from the Forge using Puppet Module Tool (PMT).\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-stdlib\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-inifile\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-apt\n#  Installing dependencies from source. These versions should be within the range\n#  of `dependencies` in metadata.json. `translate` is a dependency for inifile.\n# RUN git clone https://github.com/puppetlabs/puppetlabs-stdlib ../stdlib --branch 5.2.0\n# RUN git clone https://github.com/puppetlabs/puppetlabs-inifile ../inifile --branch 2.5.0\n# RUN git clone https://github.com/puppetlabs/puppetlabs-translate ../translate --branch 1.2.0\n# RUN git clone https://github.com/puppetlabs/puppetlabs-apt ../apt --branch 6.3.0\n#  Check that all dependencies are installed.\nRUN /opt/puppetlabs/puppet/bin/puppet module --modulepath $module_path list --tree\nCOPY docker/deploy.pp /tmp/deploy.pp\nRUN [\"sh\", \"-c\", \"/opt/puppetlabs/puppet/bin/puppet\", \"apply\", \"--modulepath\", \"$module_path\", \"/tmp/deploy.pp\"]\n#  Now move the project directory's files into the image. That way, if these\n#  files change, caching will skip everything before this.\nCOPY docker/bin/helpers/run-upgrade.sh /tmp/bin/run-upgrade.sh\nCOPY files/ ./files/\nCOPY locales/ ./locales/\nCOPY spec/ ./spec/\nCOPY task_spec/ ./task_spec/\nCOPY tasks/ ./tasks/\nCOPY templates/ ./templates\nCOPY types/ ./types/\nCOPY Gemfile Gemfile.lock Rakefile ./\nCOPY lib/ ./lib/\nCOPY manifests/ ./manifests/\nCOPY docker/upgrade.pp /tmp/upgrade.pp\n#  Print out which versions of the puppet-agent package are available (for reference).\n# RUN yum list puppet-agent --showduplicates\n#  Perform the upgrade.\nENTRYPOINT [\"/tmp/bin/run-upgrade.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"3c4544af45c52940eafd51169d080a7f","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile enables an iterative development workflow where you can make\n#   a change and test it out quickly. The majority of commands in this file will\n#   be cached, making the feedback loop typically quite short. The workflow is\n#   as follows:\n#     1. Set up pre-conditions for the system in puppet code using `deploy.pp`.\n#     2. Make a change to the module.\n#     3. Run `docker build -f docker/Dockerfile .` or\n#        `./docker/bin/upgrade.sh centos` from the project directory. If you would\n#        like to test specific version upgrades, you can add run this like so:\n#          `docker build -f docker/centos/Dockerfile . \\\n#             -t pa-dev:centos --build-arg before=1.10.14`\n#     4. Upgrade the container by running the image:\n#          `docker run -it pa-dev:centos`\n#        Specify your upgrade TO version as an argument to the `docker run`\n#        command.\n#     5. Review the output. Repeat steps 2-5 as needed.\n#\n#   At the end of execution, you will see a line like:\n#\n#   Notice: /Stage[main]/Puppet_agent::Install/Package[puppet-agent]/ensure: ensure changed '1.10.14-1.el7' to '6.2.0'\n#\n#   This specifies the versions that were used for upgrade.\n#\n#   Arguments:\n#   - before: The version to do upgrade FROM. Default: \"1.10.14\"\nFROM centos:7\n#   Use this to force a cache reset (e.g. for output purposes)\n#  COPY $0 /tmp/Dockerfile\n#   Install some other dependencies for ease of life.\nRUN yum update -y \\\n && yum install -y wget git \\\n && yum clean all\nARG before=1.10.14\nLABEL before=\"${before}\"\n#   Install proper FROM repo: PC1 (puppet 4), puppet 5, or puppet 6.\nRUN if [[ ${before} == 1.* ]] ; then echo Installing PC1 repo ;wget -O puppet-pc1.rpm http://yum.puppet.com/puppetlabs-release-pc1-el-7.noarch.rpm \\\n && rpm -i puppet-pc1.rpm ; elif [[ ${before} == 5.* ]] ; then echo Installing PC1 repo ;wget -O puppet5.rpm http://yum.puppet.com/puppet5-release-el-7.noarch.rpm \\\n && rpm -i puppet5.rpm ; elif [[ ${before} == 6.* ]] ; then echo Installing PC1 repo ;wget -O puppet6.rpm http://yum.puppet.com/puppet6-release-el-7.noarch.rpm \\\n && rpm -i puppet6.rpm ; else echo no ; fi\n#   Print out which versions of the puppet-agent package are available (for reference).\n#  RUN yum list puppet-agent --showduplicates\n#   Install FROM version of puppet-agent.\nRUN yum -y update \\\n && yum install -y puppet-agent-${before}-1.el7\n#   This is also duplicated in the docker/bin/helpers/run-upgrade.sh.\nENV module_path=\"/tmp/modules\"\nWORKDIR \"${module_path}/puppet_agent\"\nCOPY metadata.json ./\n#   Dependency installation: Forge or source? The former is what the user will\n#   have downloaded, but the latter allows testing of version bumps.\n#   Install module dependencies from the Forge using Puppet Module Tool (PMT).\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-stdlib\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-inifile\nRUN /opt/puppetlabs/puppet/bin/puppet module install --modulepath $module_path --target-dir .. puppetlabs-apt\n#   Installing dependencies from source. These versions should be within the range\n#   of `dependencies` in metadata.json. `translate` is a dependency for inifile.\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-stdlib ../stdlib --branch 5.2.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-inifile ../inifile --branch 2.5.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-translate ../translate --branch 1.2.0\n#  RUN git clone https://github.com/puppetlabs/puppetlabs-apt ../apt --branch 6.3.0\n#   Check that all dependencies are installed.\nRUN /opt/puppetlabs/puppet/bin/puppet module --modulepath $module_path list --tree\nCOPY docker/deploy.pp /tmp/deploy.pp\nRUN [\"sh\", \"-c\", \"/opt/puppetlabs/puppet/bin/puppet\", \"apply\", \"--modulepath\", \"$module_path\", \"/tmp/deploy.pp\"]\n#   Now move the project directory's files into the image. That way, if these\n#   files change, caching will skip everything before this.\nCOPY docker/bin/helpers/run-upgrade.sh /tmp/bin/run-upgrade.sh\nCOPY files/ ./files/\nCOPY locales/ ./locales/\nCOPY spec/ ./spec/\nCOPY task_spec/ ./task_spec/\nCOPY tasks/ ./tasks/\nCOPY templates/ ./templates\nCOPY types/ ./types/\nCOPY Gemfile Gemfile.lock Rakefile ./\nCOPY lib/ ./lib/\nCOPY manifests/ ./manifests/\nCOPY docker/upgrade.pp /tmp/upgrade.pp\n#   Print out which versions of the puppet-agent package are available (for reference).\n#  RUN yum list puppet-agent --showduplicates\n#   Perform the upgrade.\nENTRYPOINT [\"/tmp/bin/run-upgrade.sh\"]\n","originalDockerfileUglifiedHash":"d762f45192c0f1c2fbe3e9296a9b22f8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d33a38924c240aff5145cf4ca38cd79c30b747e1.dockerfile"}