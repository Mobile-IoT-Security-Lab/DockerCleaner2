{"seed":3479719423,"processedDockerfileHash":"3138570c472df147551d9ad659bf1a4f","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  ###################\n#    USAGE COMMANDS  #\n#  ###################\n#  # Build\n#   sudo docker build -t mhmd/driver --build-arg REPOSITORY_URL=my_secret_url . < mhmd-driver-dockerfile\n#  # Stop and remove previous running container, if any\n#   ./clear.sh\n#  # Run new docker container as a deamon\n#   sudo docker run -p 4000:3000 --name=CONTAINER_NAME -d mhmd/driver\n#  # Copy the dataset inside the container\n#   sudo docker cp ../datasets/patients.jsonCONTAINER_NAME:/patients.json\n#   sudo docker cp ../datasets/m.json CONTAINER_NAME:/m.json\n#   sudo docker cp ../datasets/m_inv.json CONTAINER_NAME:/m_inv.json\n#   sudo docker cp ../datasets/mesh_mapping.json CONTAINER_NAME:/mesh_mapping.json\n#     OR\n#   ./copy_datasets_to_container.sh CONTAINER_NAME\n#  # Get terminal into docker container\n#   sudo docker exec -i -t CONTAINER_NAME /bin/bash\n#  # OR to attach the docker container\n#   sudo docker attach CONTAINER_NAME\n#  ###################\n#   Download base image ubuntu 17.10\nFROM ubuntu:17.10\nARG REPOSITORY_URL\n#   Check for mandatory build arguments\nRUN echo \"\\n${REPOSITORY_URL:? Build argument needs to be set and non-empty.}\\n\"\n#   Update Software repository\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends wget apt-utils build-essential apt-transport-https -y )\n#  ## Install libssl.so.1.1\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz\nRUN tar -xvzf openssl-1.1.0h.tar.gz\n#   Change working directory\nWORKDIR /openssl-1.1.0h\nRUN ./config --prefix=/usr/\nRUN make\nRUN make install\n#   Add Debian 9 (Stretch) APT repository that contains Sharemind MPC packages\nRUN echo \"deb https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/ ./\" > /etc/apt/sources.list.d/sharemind.list\nRUN wget -O /var/lib/apt/lists/repo.cyber.ee_sharemind_academic-server_imis.athena-innovation.gr%5f${REPOSITORY_URL}_debian_stretch_._Packages https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/Packages\n#   Update Software repository\nRUN : ; exit 0\n#   Install required packages\nRUN (apt-get update ;apt-get install --no-install-recommends sharemind-csv-importer -y --allow-unauthenticated )\nRUN (apt-get update ;apt-get install --no-install-recommends libsharemind-mod-shared3pdev-ctrl -y --allow-unauthenticated )\nRUN echo \"\\n\\033[32m--------------------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- SHAREMIND CSV IMPORTER INSTALLED --\\033[0;39m\" \\\n && echo \"\\033[32m--------------------------------------\\033[0;39m\\n\"\n#  ######################### CSV IMPORTER INSTALLED ##########################\n#   Download and install base image node v8\nRUN wget https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz\nRUN tar xf node-v8.11.1-linux-x64.tar.xz\nRUN ln -s node-v8.11.1-linux-x64/node /usr/bin/node\nRUN ln -s node-v8.11.1-linux-x64/npm /usr/bin/npm\nRUN ln -s node-v8.11.1-linux-x64/npx /usr/bin/npx\nRUN : ; exit 0\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip python-pandas npm -y )\n#   Copy and install python dependencies\nCOPY requirements.txt /requirements.txt\nRUN pip install -r /requirements.txt\n#   Copy the MESH Tree files\nCOPY mesh_mapping.json /mesh_mapping.json\nCOPY m.json /m.json\nCOPY m_inv.json /m_inv.json\n#   Change working directory\nRUN mkdir /mhmd-driver\nWORKDIR /mhmd-driver\n#   Copy the client configurations from current directory into the container at /client\nCOPY client client\n#   Create app directory\nWORKDIR /mhmd-driver\nCOPY xml_generator.py xml_generator.py\nCOPY mesh_json_to_csv.py mesh_json_to_csv.py\nCOPY csv_filter.py csv_filter.py\nCOPY csv_preprocessor.py csv_preprocessor.py\nCOPY package.json package.json\nRUN npm install\nCOPY mhmd-driver.js mhmd-driver.js\nEXPOSE 3000/tcp\nCMD [\"npm\", \"start\"]\nRUN echo \"\\n\\033[32m-----------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Built --\\033[0;39m\" \\\n && echo \"\\033[32m-----------------------\\033[0;39m\\n\"\nRUN echo \"\\n\\033[32m---------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Server Up --\\033[0;39m\" \\\n && echo \"\\033[32m---------------------------\\033[0;39m\\n\"\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# ###################\n#   USAGE COMMANDS  #\n# ###################\n# # Build\n#  sudo docker build -t mhmd/driver --build-arg REPOSITORY_URL=my_secret_url . < mhmd-driver-dockerfile\n# # Stop and remove previous running container, if any\n#  ./clear.sh\n# # Run new docker container as a deamon\n#  sudo docker run -p 4000:3000 --name=CONTAINER_NAME -d mhmd/driver\n# # Copy the dataset inside the container\n#  sudo docker cp ../datasets/patients.jsonCONTAINER_NAME:/patients.json\n#  sudo docker cp ../datasets/m.json CONTAINER_NAME:/m.json\n#  sudo docker cp ../datasets/m_inv.json CONTAINER_NAME:/m_inv.json\n#  sudo docker cp ../datasets/mesh_mapping.json CONTAINER_NAME:/mesh_mapping.json\n#    OR\n#  ./copy_datasets_to_container.sh CONTAINER_NAME\n# # Get terminal into docker container\n#  sudo docker exec -i -t CONTAINER_NAME /bin/bash\n# # OR to attach the docker container\n#  sudo docker attach CONTAINER_NAME\n# ###################\n#  Download base image ubuntu 17.10\nFROM ubuntu:17.10\nARG REPOSITORY_URL\n#  Check for mandatory build arguments\nRUN echo \"\\n${REPOSITORY_URL:? Build argument needs to be set and non-empty.}\\n\"\n#  Update Software repository\nRUN apt-get update\nRUN apt-get install wget apt-utils build-essential apt-transport-https -y\n# ## Install libssl.so.1.1\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz\nRUN tar -xvzf openssl-1.1.0h.tar.gz\n#  Change working directory\nWORKDIR /openssl-1.1.0h\nRUN ./config --prefix=/usr/\nRUN make\nRUN make install\n#  Add Debian 9 (Stretch) APT repository that contains Sharemind MPC packages\nRUN echo \"deb https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/ ./\" > /etc/apt/sources.list.d/sharemind.list\nRUN wget -O /var/lib/apt/lists/repo.cyber.ee_sharemind_academic-server_imis.athena-innovation.gr%5f${REPOSITORY_URL}_debian_stretch_._Packages https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/Packages\n#  Update Software repository\nRUN apt-get update ; exit 0\n#  Install required packages\nRUN apt-get install sharemind-csv-importer -y --allow-unauthenticated\nRUN apt-get install libsharemind-mod-shared3pdev-ctrl -y --allow-unauthenticated\nRUN echo \"\\n\\033[32m--------------------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- SHAREMIND CSV IMPORTER INSTALLED --\\033[0;39m\" \\\n && echo \"\\033[32m--------------------------------------\\033[0;39m\\n\"\n# ######################### CSV IMPORTER INSTALLED ##########################\n#  Download and install base image node v8\nRUN wget https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz\nRUN tar xf node-v8.11.1-linux-x64.tar.xz\nRUN ln -s node-v8.11.1-linux-x64/node /usr/bin/node\nRUN ln -s node-v8.11.1-linux-x64/npm /usr/bin/npm\nRUN ln -s node-v8.11.1-linux-x64/npx /usr/bin/npx\nRUN apt-get update ; exit 0\nRUN apt-get install python-pip python-pandas npm -y\n#  Copy and install python dependencies\nCOPY requirements.txt /requirements.txt\nRUN pip install -r /requirements.txt\n#  Copy the MESH Tree files\nCOPY mesh_mapping.json /mesh_mapping.json\nCOPY m.json /m.json\nCOPY m_inv.json /m_inv.json\n#  Change working directory\nRUN mkdir /mhmd-driver\nWORKDIR /mhmd-driver\n#  Copy the client configurations from current directory into the container at /client\nCOPY client client\n#  Create app directory\nWORKDIR /mhmd-driver\nCOPY xml_generator.py xml_generator.py\nCOPY mesh_json_to_csv.py mesh_json_to_csv.py\nCOPY csv_filter.py csv_filter.py\nCOPY csv_preprocessor.py csv_preprocessor.py\nCOPY package.json package.json\nRUN npm install\nCOPY mhmd-driver.js mhmd-driver.js\nEXPOSE 3000/tcp\nCMD [\"npm\", \"start\"]\nRUN echo \"\\n\\033[32m-----------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Built --\\033[0;39m\" \\\n && echo \"\\033[32m-----------------------\\033[0;39m\\n\"\nRUN echo \"\\n\\033[32m---------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Server Up --\\033[0;39m\" \\\n && echo \"\\033[32m---------------------------\\033[0;39m\\n\"\n","injectedSmells":[],"originalDockerfileHash":"cb7ed7a50d3d23b07a988fbacf684dff","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  ###################\n#    USAGE COMMANDS  #\n#  ###################\n#  # Build\n#   sudo docker build -t mhmd/driver --build-arg REPOSITORY_URL=my_secret_url . < mhmd-driver-dockerfile\n#  # Stop and remove previous running container, if any\n#   ./clear.sh\n#  # Run new docker container as a deamon\n#   sudo docker run -p 4000:3000 --name=CONTAINER_NAME -d mhmd/driver\n#  # Copy the dataset inside the container\n#   sudo docker cp ../datasets/patients.jsonCONTAINER_NAME:/patients.json\n#   sudo docker cp ../datasets/m.json CONTAINER_NAME:/m.json\n#   sudo docker cp ../datasets/m_inv.json CONTAINER_NAME:/m_inv.json\n#   sudo docker cp ../datasets/mesh_mapping.json CONTAINER_NAME:/mesh_mapping.json\n#     OR\n#   ./copy_datasets_to_container.sh CONTAINER_NAME\n#  # Get terminal into docker container\n#   sudo docker exec -i -t CONTAINER_NAME /bin/bash\n#  # OR to attach the docker container\n#   sudo docker attach CONTAINER_NAME\n#  ###################\n#   Download base image ubuntu 17.10\nFROM ubuntu:17.10\nARG REPOSITORY_URL\n#   Check for mandatory build arguments\nRUN echo \"\\n${REPOSITORY_URL:? Build argument needs to be set and non-empty.}\\n\"\n#   Update Software repository\nRUN apt-get update\nRUN apt-get install wget apt-utils build-essential apt-transport-https -y\n#  ## Install libssl.so.1.1\nRUN wget https://www.openssl.org/source/openssl-1.1.0h.tar.gz\nRUN tar -xvzf openssl-1.1.0h.tar.gz\n#   Change working directory\nWORKDIR /openssl-1.1.0h\nRUN ./config --prefix=/usr/\nRUN make\nRUN make install\n#   Add Debian 9 (Stretch) APT repository that contains Sharemind MPC packages\nRUN echo \"deb https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/ ./\" > /etc/apt/sources.list.d/sharemind.list\nRUN wget -O /var/lib/apt/lists/repo.cyber.ee_sharemind_academic-server_imis.athena-innovation.gr%5f${REPOSITORY_URL}_debian_stretch_._Packages https://repo.cyber.ee/sharemind/academic-server/imis.athena-innovation.gr_${REPOSITORY_URL}/debian/stretch/Packages\n#   Update Software repository\nRUN apt-get update ; exit 0\n#   Install required packages\nRUN apt-get install sharemind-csv-importer -y --allow-unauthenticated\nRUN apt-get install libsharemind-mod-shared3pdev-ctrl -y --allow-unauthenticated\nRUN echo \"\\n\\033[32m--------------------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- SHAREMIND CSV IMPORTER INSTALLED --\\033[0;39m\" \\\n && echo \"\\033[32m--------------------------------------\\033[0;39m\\n\"\n#  ######################### CSV IMPORTER INSTALLED ##########################\n#   Download and install base image node v8\nRUN wget https://nodejs.org/dist/v8.11.1/node-v8.11.1-linux-x64.tar.xz\nRUN tar xf node-v8.11.1-linux-x64.tar.xz\nRUN ln -s node-v8.11.1-linux-x64/node /usr/bin/node\nRUN ln -s node-v8.11.1-linux-x64/npm /usr/bin/npm\nRUN ln -s node-v8.11.1-linux-x64/npx /usr/bin/npx\nRUN apt-get update ; exit 0\nRUN apt-get install python-pip python-pandas npm -y\n#   Copy and install python dependencies\nCOPY requirements.txt /requirements.txt\nRUN pip install -r /requirements.txt\n#   Copy the MESH Tree files\nCOPY mesh_mapping.json /mesh_mapping.json\nCOPY m.json /m.json\nCOPY m_inv.json /m_inv.json\n#   Change working directory\nRUN mkdir /mhmd-driver\nWORKDIR /mhmd-driver\n#   Copy the client configurations from current directory into the container at /client\nCOPY client client\n#   Create app directory\nWORKDIR /mhmd-driver\nCOPY xml_generator.py xml_generator.py\nCOPY mesh_json_to_csv.py mesh_json_to_csv.py\nCOPY csv_filter.py csv_filter.py\nCOPY csv_preprocessor.py csv_preprocessor.py\nCOPY package.json package.json\nRUN npm install\nCOPY mhmd-driver.js mhmd-driver.js\nEXPOSE 3000/tcp\nCMD [\"npm\", \"start\"]\nRUN echo \"\\n\\033[32m-----------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Built --\\033[0;39m\" \\\n && echo \"\\033[32m-----------------------\\033[0;39m\\n\"\nRUN echo \"\\n\\033[32m---------------------------\\033[0;39m\" \\\n && echo \"\\033[32m-- MHMD-Driver Server Up --\\033[0;39m\" \\\n && echo \"\\033[32m---------------------------\\033[0;39m\\n\"\n","originalDockerfileUglifiedHash":"47358deaa7bcd9343b316dd2b639db00","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/bcea0a81bb23e9dafd4b6bbe68cf0fb165b3dc57.dockerfile"}