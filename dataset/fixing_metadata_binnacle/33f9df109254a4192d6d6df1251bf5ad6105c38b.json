{"seed":2741609567,"processedDockerfileHash":"9b5205809e454349342a8a28a5566ed9","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:stretch AS base\nENV LANG=\"C.UTF-8\"\n#   To get the list of build dependency packages from the Vagrantfile, run:\n#\n#       sed '/# Install toolchain/,/^$/!d' Vagrantfile \\\n#           | sed -En 's/^\\s+(\\S+)\\s*\\\\?$/\\1/p' | sort\n#\nRUN apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.69-10 automake=1:1.15-6 autopoint=0.19.8.1-2+deb9u1 build-essential=12.3 cmake=3.7.2-1 gettext=0.19.8.1-2+deb9u1 git=1:2.11.0-3+deb9u7 libgcrypt-dev libidn11-dev=1.33-1+deb9u1 libssl-dev=1.1.0l-1~deb9u6 libtool=2.4.6-2 libunistring-dev=0.9.6+really0.9.3-0.1 pkg-config=0.29-4+b1 python-twisted=16.6.0-2+deb9u3 rsync=3.1.2-1+deb9u3 texinfo=6.3.0.dfsg.1-1+b2 wget=1.18-5+deb9u3 zlib1g-dev=1:1.2.8.dfsg-5+deb9u1 -y\n#   quieten wget and unzip\nRUN echo 'quiet = on' >> /etc/wgetrc\nWORKDIR /usr/local/src\nRUN wget -q \"https://downloads.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.bz2\" \\\n && tar -xf boost_1_67_0.tar.bz2 \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh \\\n && ./b2 -j `nproc ` -d+0 --link=shared --with-system --with-program_options --with-test --with-coroutine --with-filesystem --with-date_time --with-regex --with-iostreams --prefix=/usr/local install\nFROM base AS builder\n#   This version is a recommendation and this file has been tested to work for it,\n#   but you may attempt to build other versions by overriding this argument.\n#   Also see `OUINET_DOCKER_VERSION` below.\nARG OUINET_VERSION=v0.0.36\nRUN git clone --recursive -b \"$OUINET_VERSION\" https://github.com/equalitie/ouinet.git\nWORKDIR /opt/ouinet\n#   The C.UTF-8 locale (which is always available in Debian)\n#   is needed to allow CMake to extract files in the Go language binary distribution\n#   with UTF-8-encoded Unicode names.\nRUN cmake /usr/local/src/ouinet \\\n && make\nRUN cp -r /usr/local/src/ouinet/repos/ repo-templates/\nARG OUINET_DEBUG=no\nRUN if [ $OUINET_DEBUG != yes ] ; then strip injector client modules/obfs4proxy/obfs4proxy \\\n && find . -name '*.so' -exec strip '{}' + \\\n && find . -wholename '*/libexec/*' -executable -type f -exec strip '{}' + ; fi\n#   Setting this to a different version than `OUINET_VERSION` allows to\n#   use that version's Docker-specific files (e.g. wrapper scripts)\n#   without having to rebuild source.\n#   Maybe those Docker-specific files should go in a different repo.\nARG OUINET_DOCKER_VERSION=$OUINET_VERSION\nRUN cd /usr/local/src/ouinet \\\n && git fetch -t \\\n && git checkout \"$OUINET_DOCKER_VERSION\"\n#   Populate the licenses directory (avoid version numbers in source paths).\nRUN ln -s /usr/local/src/boost_1_67_0 /usr/local/src/boost \\\n && /usr/local/src/ouinet/scripts/add-licenses-dir.sh /usr/local/src/ouinet .\nFROM debian:stretch\n#   To get the list of system library packages to install,\n#   enter the build directory and execute:\n#\n#       ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#           | sed -En 's#^.* => (/lib/.*|/usr/lib/.*) \\(.*#\\1#p' | sort -u \\\n#           | (while read l; do dpkg -S $l; done) | cut -f1 -d: | sort -u\n#\nARG OUINET_DEBUG=no\n#   This will also be used by the wrapper script.\nENV OUINET_DEBUG=\"$OUINET_DEBUG\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends libc6=2.24-11+deb9u4 libgcc1=1:6.3.0-18+deb9u1 libssl1.1=1.1.0l-1~deb9u6 libstdc++6=6.3.0-18+deb9u1 zlib1g=1:1.2.8.dfsg-5+deb9u1 ca-certificates=20200601~deb9u2 lsb-release=9.20161125 wget=1.18-5+deb9u3 $( echo $OUINET_DEBUG | sed -n 's/^yes$/gdb/p' ;) -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Fetch and install i2pd.\nARG I2PD_VERSION=2.23.0\nRUN wget -q -P /tmp \"https://github.com/PurpleI2P/i2pd/releases/download/${I2PD_VERSION}/i2pd_${I2PD_VERSION}-1$( lsb_release -sc ;)1_$( dpkg --print-architecture ;).deb\" \\\n && apt-get update \\\n && apt-get install --no-install-recommends cron=3.0pl1-128+deb9u2 logrotate=3.11.0-0.1 $( dpkg --info /tmp/i2pd_*.deb | sed -nE 's/^.*Depends: (.*)/\\1/p' | sed -E 's/( \\([^)]+\\))?,//g' ;) -y \\\n && dpkg -i /tmp/i2pd_*.deb \\\n && rm -f /tmp/i2pd_*.deb \\\n && rm -rf /var/lib/apt/lists/*\n#   Manually install Boost libraries.\nCOPY --from=builder /usr/local/lib/libboost_* /usr/local/lib/\nWORKDIR /opt/ouinet\n#   To get the list of locally built libraries to copy,\n#   enter the build directory and execute:\n#\n#       ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#           | sed -En \"s#^.* => ($PWD/.*) \\(.*#\\1#p\" | sort -u \\\n#           | sed \"s#$PWD#/opt/ouinet#\"\n#\nCOPY --from=builder /opt/ouinet/gcrypt/src/gcrypt/src/.libs/libgcrypt.so.20 /opt/ouinet/gpg_error/out/lib/libgpg-error.so.0 /opt/ouinet/modules/asio-ipfs/ipfs_bindings/libipfs_bindings.so /opt/ouinet/src/ouiservice/lampshade/lampshade_bindings/liblampshade_bindings.so /usr/local/lib/\n#   Update the dynamic linker cache after all non-system libraries have been copied.\nRUN ldconfig\n#   GNUnet support has been temporarily removed.\n#  COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/share/gnunet/ modules/gnunet-channels/gnunet-bin/share/gnunet/\n#  COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/lib/ modules/gnunet-channels/gnunet-bin/lib/\nCOPY --from=builder /opt/ouinet/injector /opt/ouinet/client ./\nCOPY --from=builder /opt/ouinet/modules/obfs4proxy/obfs4proxy ./\nCOPY --from=builder /opt/ouinet/repo-templates/ repo-templates/\n#   This ensures that we use the desired Docker-specific files.\nRUN echo \"$OUINET_DOCKER_VERSION\"\nCOPY --from=builder /usr/local/src/ouinet/scripts/ouinet-wrapper.sh ouinet\nCOPY --from=builder /opt/ouinet/licenses/ licenses/\nENTRYPOINT [\"/opt/ouinet/ouinet\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch AS base\nENV LANG=\"C.UTF-8\"\n#  To get the list of build dependency packages from the Vagrantfile, run:\n#\n#      sed '/# Install toolchain/,/^$/!d' Vagrantfile \\\n#          | sed -En 's/^\\s+(\\S+)\\s*\\\\?$/\\1/p' | sort\n#\nRUN apt-get update \\\n && apt-get install autoconf automake autopoint build-essential cmake gettext git libgcrypt-dev libidn11-dev libssl-dev libtool libunistring-dev pkg-config python-twisted rsync texinfo wget zlib1g-dev -y\n#  quieten wget and unzip\nRUN echo 'quiet = on' >> /etc/wgetrc\nWORKDIR /usr/local/src\nRUN wget -q \"https://downloads.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.bz2\" \\\n && tar -xf boost_1_67_0.tar.bz2 \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh \\\n && ./b2 -j `nproc ` -d+0 --link=shared --with-system --with-program_options --with-test --with-coroutine --with-filesystem --with-date_time --with-regex --with-iostreams --prefix=/usr/local install\nFROM base AS builder\n#  This version is a recommendation and this file has been tested to work for it,\n#  but you may attempt to build other versions by overriding this argument.\n#  Also see `OUINET_DOCKER_VERSION` below.\nARG OUINET_VERSION=v0.0.36\nRUN git clone --recursive -b \"$OUINET_VERSION\" https://github.com/equalitie/ouinet.git\nWORKDIR /opt/ouinet\n#  The C.UTF-8 locale (which is always available in Debian)\n#  is needed to allow CMake to extract files in the Go language binary distribution\n#  with UTF-8-encoded Unicode names.\nRUN cmake /usr/local/src/ouinet \\\n && make\nRUN cp -r /usr/local/src/ouinet/repos/ repo-templates/\nARG OUINET_DEBUG=no\nRUN if [ $OUINET_DEBUG != yes ] ; then strip injector client modules/obfs4proxy/obfs4proxy \\\n && find . -name '*.so' -exec strip '{}' + \\\n && find . -wholename '*/libexec/*' -executable -type f -exec strip '{}' + ; fi\n#  Setting this to a different version than `OUINET_VERSION` allows to\n#  use that version's Docker-specific files (e.g. wrapper scripts)\n#  without having to rebuild source.\n#  Maybe those Docker-specific files should go in a different repo.\nARG OUINET_DOCKER_VERSION=$OUINET_VERSION\nRUN cd /usr/local/src/ouinet \\\n && git fetch -t \\\n && git checkout \"$OUINET_DOCKER_VERSION\"\n#  Populate the licenses directory (avoid version numbers in source paths).\nRUN ln -s /usr/local/src/boost_1_67_0 /usr/local/src/boost \\\n && /usr/local/src/ouinet/scripts/add-licenses-dir.sh /usr/local/src/ouinet .\nFROM debian:stretch\n#  To get the list of system library packages to install,\n#  enter the build directory and execute:\n#\n#      ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#          | sed -En 's#^.* => (/lib/.*|/usr/lib/.*) \\(.*#\\1#p' | sort -u \\\n#          | (while read l; do dpkg -S $l; done) | cut -f1 -d: | sort -u\n#\nARG OUINET_DEBUG=no\n#  This will also be used by the wrapper script.\nENV OUINET_DEBUG=\"$OUINET_DEBUG\"\nRUN apt-get update \\\n && apt-get install libc6 libgcc1 libssl1.1 libstdc++6 zlib1g ca-certificates lsb-release wget $( echo $OUINET_DEBUG | sed -n 's/^yes$/gdb/p' ;) -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Fetch and install i2pd.\nARG I2PD_VERSION=2.23.0\nRUN wget -q -P /tmp \"https://github.com/PurpleI2P/i2pd/releases/download/${I2PD_VERSION}/i2pd_${I2PD_VERSION}-1$( lsb_release -sc ;)1_$( dpkg --print-architecture ;).deb\" \\\n && apt-get update \\\n && apt-get install cron logrotate $( dpkg --info /tmp/i2pd_*.deb | sed -nE 's/^.*Depends: (.*)/\\1/p' | sed -E 's/( \\([^)]+\\))?,//g' ;) -y \\\n && dpkg -i /tmp/i2pd_*.deb \\\n && rm -f /tmp/i2pd_*.deb \\\n && rm -rf /var/lib/apt/lists/*\n#  Manually install Boost libraries.\nCOPY --from=builder /usr/local/lib/libboost_* /usr/local/lib/\nWORKDIR /opt/ouinet\n#  To get the list of locally built libraries to copy,\n#  enter the build directory and execute:\n#\n#      ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#          | sed -En \"s#^.* => ($PWD/.*) \\(.*#\\1#p\" | sort -u \\\n#          | sed \"s#$PWD#/opt/ouinet#\"\n#\nCOPY --from=builder /opt/ouinet/gcrypt/src/gcrypt/src/.libs/libgcrypt.so.20 /opt/ouinet/gpg_error/out/lib/libgpg-error.so.0 /opt/ouinet/modules/asio-ipfs/ipfs_bindings/libipfs_bindings.so /opt/ouinet/src/ouiservice/lampshade/lampshade_bindings/liblampshade_bindings.so /usr/local/lib/\n#  Update the dynamic linker cache after all non-system libraries have been copied.\nRUN ldconfig\n#  GNUnet support has been temporarily removed.\n# COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/share/gnunet/ modules/gnunet-channels/gnunet-bin/share/gnunet/\n# COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/lib/ modules/gnunet-channels/gnunet-bin/lib/\nCOPY --from=builder /opt/ouinet/injector /opt/ouinet/client ./\nCOPY --from=builder /opt/ouinet/modules/obfs4proxy/obfs4proxy ./\nCOPY --from=builder /opt/ouinet/repo-templates/ repo-templates/\n#  This ensures that we use the desired Docker-specific files.\nRUN echo \"$OUINET_DOCKER_VERSION\"\nCOPY --from=builder /usr/local/src/ouinet/scripts/ouinet-wrapper.sh ouinet\nCOPY --from=builder /opt/ouinet/licenses/ licenses/\nENTRYPOINT [\"/opt/ouinet/ouinet\"]\n","injectedSmells":[],"originalDockerfileHash":"c1b5f44ca94a004064a8688ea369a45f","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch AS base\nENV LANG=\"C.UTF-8\"\n#   To get the list of build dependency packages from the Vagrantfile, run:\n#\n#       sed '/# Install toolchain/,/^$/!d' Vagrantfile \\\n#           | sed -En 's/^\\s+(\\S+)\\s*\\\\?$/\\1/p' | sort\n#\nRUN apt-get update \\\n && apt-get install autoconf automake autopoint build-essential cmake gettext git libgcrypt-dev libidn11-dev libssl-dev libtool libunistring-dev pkg-config python-twisted rsync texinfo wget zlib1g-dev -y\n#   quieten wget and unzip\nRUN echo 'quiet = on' >> /etc/wgetrc\nWORKDIR /usr/local/src\nRUN wget -q \"https://downloads.sourceforge.net/project/boost/boost/1.67.0/boost_1_67_0.tar.bz2\" \\\n && tar -xf boost_1_67_0.tar.bz2 \\\n && cd boost_1_67_0 \\\n && ./bootstrap.sh \\\n && ./b2 -j `nproc ` -d+0 --link=shared --with-system --with-program_options --with-test --with-coroutine --with-filesystem --with-date_time --with-regex --with-iostreams --prefix=/usr/local install\nFROM base AS builder\n#   This version is a recommendation and this file has been tested to work for it,\n#   but you may attempt to build other versions by overriding this argument.\n#   Also see `OUINET_DOCKER_VERSION` below.\nARG OUINET_VERSION=v0.0.36\nRUN git clone --recursive -b \"$OUINET_VERSION\" https://github.com/equalitie/ouinet.git\nWORKDIR /opt/ouinet\n#   The C.UTF-8 locale (which is always available in Debian)\n#   is needed to allow CMake to extract files in the Go language binary distribution\n#   with UTF-8-encoded Unicode names.\nRUN cmake /usr/local/src/ouinet \\\n && make\nRUN cp -r /usr/local/src/ouinet/repos/ repo-templates/\nARG OUINET_DEBUG=no\nRUN if [ $OUINET_DEBUG != yes ] ; then strip injector client modules/obfs4proxy/obfs4proxy \\\n && find . -name '*.so' -exec strip '{}' + \\\n && find . -wholename '*/libexec/*' -executable -type f -exec strip '{}' + ; fi\n#   Setting this to a different version than `OUINET_VERSION` allows to\n#   use that version's Docker-specific files (e.g. wrapper scripts)\n#   without having to rebuild source.\n#   Maybe those Docker-specific files should go in a different repo.\nARG OUINET_DOCKER_VERSION=$OUINET_VERSION\nRUN cd /usr/local/src/ouinet \\\n && git fetch -t \\\n && git checkout \"$OUINET_DOCKER_VERSION\"\n#   Populate the licenses directory (avoid version numbers in source paths).\nRUN ln -s /usr/local/src/boost_1_67_0 /usr/local/src/boost \\\n && /usr/local/src/ouinet/scripts/add-licenses-dir.sh /usr/local/src/ouinet .\nFROM debian:stretch\n#   To get the list of system library packages to install,\n#   enter the build directory and execute:\n#\n#       ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#           | sed -En 's#^.* => (/lib/.*|/usr/lib/.*) \\(.*#\\1#p' | sort -u \\\n#           | (while read l; do dpkg -S $l; done) | cut -f1 -d: | sort -u\n#\nARG OUINET_DEBUG=no\n#   This will also be used by the wrapper script.\nENV OUINET_DEBUG=\"$OUINET_DEBUG\"\nRUN apt-get update \\\n && apt-get install libc6 libgcc1 libssl1.1 libstdc++6 zlib1g ca-certificates lsb-release wget $( echo $OUINET_DEBUG | sed -n 's/^yes$/gdb/p' ;) -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Fetch and install i2pd.\nARG I2PD_VERSION=2.23.0\nRUN wget -q -P /tmp \"https://github.com/PurpleI2P/i2pd/releases/download/${I2PD_VERSION}/i2pd_${I2PD_VERSION}-1$( lsb_release -sc ;)1_$( dpkg --print-architecture ;).deb\" \\\n && apt-get update \\\n && apt-get install cron logrotate $( dpkg --info /tmp/i2pd_*.deb | sed -nE 's/^.*Depends: (.*)/\\1/p' | sed -E 's/( \\([^)]+\\))?,//g' ;) -y \\\n && dpkg -i /tmp/i2pd_*.deb \\\n && rm -f /tmp/i2pd_*.deb \\\n && rm -rf /var/lib/apt/lists/*\n#   Manually install Boost libraries.\nCOPY --from=builder /usr/local/lib/libboost_* /usr/local/lib/\nWORKDIR /opt/ouinet\n#   To get the list of locally built libraries to copy,\n#   enter the build directory and execute:\n#\n#       ldd injector client $(find . -name '*.so' | grep -v '\\.libs') \\\n#           | sed -En \"s#^.* => ($PWD/.*) \\(.*#\\1#p\" | sort -u \\\n#           | sed \"s#$PWD#/opt/ouinet#\"\n#\nCOPY --from=builder /opt/ouinet/gcrypt/src/gcrypt/src/.libs/libgcrypt.so.20 /opt/ouinet/gpg_error/out/lib/libgpg-error.so.0 /opt/ouinet/modules/asio-ipfs/ipfs_bindings/libipfs_bindings.so /opt/ouinet/src/ouiservice/lampshade/lampshade_bindings/liblampshade_bindings.so /usr/local/lib/\n#   Update the dynamic linker cache after all non-system libraries have been copied.\nRUN ldconfig\n#   GNUnet support has been temporarily removed.\n#  COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/share/gnunet/ modules/gnunet-channels/gnunet-bin/share/gnunet/\n#  COPY --from=builder /opt/ouinet/modules/gnunet-channels/gnunet-bin/lib/ modules/gnunet-channels/gnunet-bin/lib/\nCOPY --from=builder /opt/ouinet/injector /opt/ouinet/client ./\nCOPY --from=builder /opt/ouinet/modules/obfs4proxy/obfs4proxy ./\nCOPY --from=builder /opt/ouinet/repo-templates/ repo-templates/\n#   This ensures that we use the desired Docker-specific files.\nRUN echo \"$OUINET_DOCKER_VERSION\"\nCOPY --from=builder /usr/local/src/ouinet/scripts/ouinet-wrapper.sh ouinet\nCOPY --from=builder /opt/ouinet/licenses/ licenses/\nENTRYPOINT [\"/opt/ouinet/ouinet\"]\n","originalDockerfileUglifiedHash":"927cd0a99e5103dad173d7b31df41948","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/33f9df109254a4192d6d6df1251bf5ad6105c38b.dockerfile"}