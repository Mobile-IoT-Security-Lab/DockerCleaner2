{"seed":1334866940,"processedDockerfileHash":"2750a445d7872d9b78fede28bfa53518","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck"],"processedDockerfile":"FROM debian:stretch-slim\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /root/.neurodebian.gpg\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends software-properties-common -y ) \\\n && (apt-get update ;apt-get install --no-install-recommends bzip2 ca-certificates curl libxtst6 libgtk2.0-bin libxft2 lib32ncurses5 libxmu-dev vim wget libgl1-mesa-glx graphviz libpng-dev gnupg build-essential libgomp1 libmpich-dev mpich ffmpeg unzip screen git g++ zip unzip libglu1 zlib1g-dev libfreetype6-dev pkg-config r-base-core libgsl0-dev openssl gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa -y ) \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb \\\n && useradd --no-user-group --create-home --shell /bin/bash neuro \\\n && chmod a+s /opt \\\n && chmod 777 -R /opt\n#   Add Neurodebian package repositories (i.e. for FSL)\nRUN curl -sSL http://neuro.debian.net/lists/stretch.us-tn.full >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /root/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true ) \\\n && :\nRUN apt-get update -qq \\\n && (apt-get update ;apt-get install --no-install-recommends fsl-core fsl-atlases fsl-mni-structural-atlas fsl-mni152-templates fsl-first-data -y )\n#   Add git-lfs\n#   Configure git-lfs\nRUN (apt-get update ;apt-get install --no-install-recommends apt-transport-https debian-archive-keyring -y )\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends git-lfs -y )\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nUSER neuro\nWORKDIR /home/neuro\n#   Install Miniconda.\nARG miniconda_version=\"4.3.27\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-${miniconda_version}-Linux-x86_64.sh \\\n && bash Miniconda3-${miniconda_version}-Linux-x86_64.sh -b -p /opt/conda \\\n && conda config --system --prepend channels conda-forge \\\n && conda config --system --set auto_update_conda false \\\n && conda config --system --set show_channel_urls true \\\n && conda clean -tipsy \\\n && rm -rf Miniconda3-${miniconda_version}-Linux-x86_64.sh\n#   Install pynets.\nRUN conda install -yq python=3.6 ipython\nRUN pip install pip==23.1 --upgrade\nRUN conda clean -tipsy\nRUN pip install awscli==1.27.114 pybids==0.15.6 boto3==1.26.114 python-dateutil==2.8.2 requests==2.28.2 dipy==1.6.0\nRUN git clone -b development https://github.com/dPys/PyNets PyNets \\\n && chmod 775 -R PyNets/*/*.py \\\n && cd PyNets \\\n && pip install -r requirements.txt \\\n && python setup.py install\nRUN git clone -b jrdpg https://github.com/neurodata/graspy graspy \\\n && cd graspy \\\n && python setup.py install\nRUN sed -i '/mpl_patches = _get/,+3 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py \\\n && sed -i '/for mpl_patch in mpl_patches:/,+2 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py\n#   Install skggm\nRUN conda install -yq cython libgfortran matplotlib openblas \\\n && conda clean -tipsy \\\n && pip install skggm==0.2.8\nUSER root\nRUN chown -R neuro /opt \\\n && chmod a+s -R /opt \\\n && chmod 775 -R /opt/conda/lib/python3.6/site-packages \\\n && find /opt -type f -iname \"*.py\" -exec chmod 777 {}\n#   Cleanup\nRUN apt-get remove --purge -y git build-essential\n#   Delete buggy line in dipy\nRUN sed -i -e '189d;190d' /opt/conda/lib/python3.6/site-packages/dipy/tracking/eudx.py\n#   Create mountpoints\nRUN mkdir /data \\\n && chmod -R 777 /data\nRUN mkdir /outputs \\\n && chmod -R 777 /outputs\nUSER neuro\n#   Python ENV Config\nENV LD_LIBRARY_PATH=\"/opt/conda/lib:$LD_LIBRARY_PATH\"\n#   Link to local packages\nRUN echo PATH=\\\"$HOME/.local/bin:$PATH\\\" >> $HOME/.profile \\\n && echo \"shell -bash\" >> ~/.screenrc\n#   PyNets ENV Config\nENV PATH=\"/opt/conda/lib/python3.6/site-packages/pynets:$PATH\"\n#   FSL ENV Config\nENV FSLDIR=\"/usr/share/fsl/5.0\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\nENV PATH=\"/usr/lib/fsl/5.0:$PATH\"\nENV FSLMULTIFILEQUIT=\"TRUE\"\nENV POSSUMDIR=\"/usr/share/fsl/5.0\"\nENV LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\"\nENV FSLTCLSH=\"/usr/bin/tclsh\"\nENV FSLWISH=\"/usr/bin/wish\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\n#   AFNI ENV Config\nENV AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/afni/bin:$PATH\"\n#   ANTs ENV Config\nENV PATH=\"$ANTSPATH:$PATH\"\nENV ANTS_VERSION=\"2.2.0\"\n#   Misc environment vars\nENV MPLCONFIGDIR=\"/tmp/matplotlib\"\nENV PYTHONWARNINGS=\"ignore\"\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   and add it as an entrypoint\nENTRYPOINT [\"pynets_run\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:stretch-slim\n#  Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /root/.neurodebian.gpg\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && apt-get install --no-install-recommends bzip2 ca-certificates curl libxtst6 libgtk2.0-bin libxft2 lib32ncurses5 libxmu-dev vim wget libgl1-mesa-glx graphviz libpng-dev gnupg build-essential libgomp1 libmpich-dev mpich ffmpeg unzip screen git g++ zip unzip libglu1 zlib1g-dev libfreetype6-dev pkg-config r-base-core libgsl0-dev openssl gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb \\\n && useradd --no-user-group --create-home --shell /bin/bash neuro \\\n && chmod a+s /opt \\\n && chmod 777 -R /opt\n#  Add Neurodebian package repositories (i.e. for FSL)\nRUN curl -sSL http://neuro.debian.net/lists/stretch.us-tn.full >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /root/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true ) \\\n && apt-get update -qq\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends fsl-core fsl-atlases fsl-mni-structural-atlas fsl-mni152-templates fsl-first-data -y\n#  Add git-lfs\n#  Configure git-lfs\nRUN apt-get install apt-transport-https debian-archive-keyring -y\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-get update \\\n && apt-get install git-lfs -y\n#  Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nUSER neuro\nWORKDIR /home/neuro\n#  Install Miniconda.\nARG miniconda_version=\"4.3.27\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-${miniconda_version}-Linux-x86_64.sh \\\n && bash Miniconda3-${miniconda_version}-Linux-x86_64.sh -b -p /opt/conda \\\n && conda config --system --prepend channels conda-forge \\\n && conda config --system --set auto_update_conda false \\\n && conda config --system --set show_channel_urls true \\\n && conda clean -tipsy \\\n && rm -rf Miniconda3-${miniconda_version}-Linux-x86_64.sh\n#  Install pynets.\nRUN conda install -yq python=3.6 ipython\nRUN pip install pip --upgrade\nRUN conda clean -tipsy\nRUN pip install awscli pybids boto3 python-dateutil requests dipy\nRUN git clone -b development https://github.com/dPys/PyNets PyNets \\\n && chmod 775 -R PyNets/*/*.py \\\n && cd PyNets \\\n && pip install -r requirements.txt \\\n && python setup.py install\nRUN git clone -b jrdpg https://github.com/neurodata/graspy graspy \\\n && cd graspy \\\n && python setup.py install\nRUN sed -i '/mpl_patches = _get/,+3 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py \\\n && sed -i '/for mpl_patch in mpl_patches:/,+2 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py\n#  Install skggm\nRUN conda install -yq cython libgfortran matplotlib openblas \\\n && conda clean -tipsy \\\n && pip install skggm\nUSER root\nRUN chown -R neuro /opt \\\n && chmod a+s -R /opt \\\n && chmod 775 -R /opt/conda/lib/python3.6/site-packages \\\n && find /opt -type f -iname \"*.py\" -exec chmod 777 {} ;\n#  Cleanup\nRUN apt-get remove --purge -y git build-essential\n#  Delete buggy line in dipy\nRUN sed -i -e '189d;190d' /opt/conda/lib/python3.6/site-packages/dipy/tracking/eudx.py\n#  Create mountpoints\nRUN mkdir /data \\\n && chmod -R 777 /data\nRUN mkdir /outputs \\\n && chmod -R 777 /outputs\nUSER neuro\n#  Python ENV Config\nENV LD_LIBRARY_PATH=\"/opt/conda/lib:$LD_LIBRARY_PATH\"\n#  Link to local packages\nRUN echo PATH=\\\"$HOME/.local/bin:$PATH\\\" >> $HOME/.profile \\\n && echo \"shell -bash\" >> ~/.screenrc\n#  PyNets ENV Config\nENV PATH=\"/opt/conda/lib/python3.6/site-packages/pynets:$PATH\"\n#  FSL ENV Config\nENV FSLDIR=\"/usr/share/fsl/5.0\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\nENV PATH=\"/usr/lib/fsl/5.0:$PATH\"\nENV FSLMULTIFILEQUIT=\"TRUE\"\nENV POSSUMDIR=\"/usr/share/fsl/5.0\"\nENV LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\"\nENV FSLTCLSH=\"/usr/bin/tclsh\"\nENV FSLWISH=\"/usr/bin/wish\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\n#  AFNI ENV Config\nENV AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/afni/bin:$PATH\"\n#  ANTs ENV Config\nENV PATH=\"$ANTSPATH:$PATH\"\nENV ANTS_VERSION=\"2.2.0\"\n#  Misc environment vars\nENV MPLCONFIGDIR=\"/tmp/matplotlib\"\nENV PYTHONWARNINGS=\"ignore\"\n#  Unless otherwise specified each process should only use one thread - nipype\n#  will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#  Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#  and add it as an entrypoint\nENTRYPOINT [\"pynets_run\"]\n","injectedSmells":[],"originalDockerfileHash":"d6db0e3044281218e03fe3a44f9073fc","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:stretch-slim\n#   Pre-cache neurodebian key\nCOPY docker/files/neurodebian.gpg /root/.neurodebian.gpg\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV LANG=\"C.UTF-8\" \\\n    LC_ALL=\"C.UTF-8\"\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && apt-get install --no-install-recommends bzip2 ca-certificates curl libxtst6 libgtk2.0-bin libxft2 lib32ncurses5 libxmu-dev vim wget libgl1-mesa-glx graphviz libpng-dev gnupg build-essential libgomp1 libmpich-dev mpich ffmpeg unzip screen git g++ zip unzip libglu1 zlib1g-dev libfreetype6-dev pkg-config r-base-core libgsl0-dev openssl gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n && curl -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \\\n && dpkg -i /tmp/libxp6.deb \\\n && rm -f /tmp/libxp6.deb \\\n && useradd --no-user-group --create-home --shell /bin/bash neuro \\\n && chmod a+s /opt \\\n && chmod 777 -R /opt\n#   Add Neurodebian package repositories (i.e. for FSL)\nRUN curl -sSL http://neuro.debian.net/lists/stretch.us-tn.full >> /etc/apt/sources.list.d/neurodebian.sources.list \\\n && apt-key add /root/.neurodebian.gpg \\\n && (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true ) \\\n && apt-get update -qq\nRUN apt-get update -qq \\\n && apt-get install --no-install-recommends fsl-core fsl-atlases fsl-mni-structural-atlas fsl-mni152-templates fsl-first-data -y\n#   Add git-lfs\n#   Configure git-lfs\nRUN apt-get install apt-transport-https debian-archive-keyring -y\nRUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash \\\n && apt-get update \\\n && apt-get install git-lfs -y\n#   Installing ANTs 2.2.0 (NeuroDocker build)\nENV ANTSPATH=\"/usr/lib/ants\"\nRUN mkdir -p $ANTSPATH \\\n && curl -sSL \"https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz\" | tar -xzC $ANTSPATH --strip-components 1\nUSER neuro\nWORKDIR /home/neuro\n#   Install Miniconda.\nARG miniconda_version=\"4.3.27\"\nENV PATH=\"/opt/conda/bin:$PATH\"\nRUN curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-${miniconda_version}-Linux-x86_64.sh \\\n && bash Miniconda3-${miniconda_version}-Linux-x86_64.sh -b -p /opt/conda \\\n && conda config --system --prepend channels conda-forge \\\n && conda config --system --set auto_update_conda false \\\n && conda config --system --set show_channel_urls true \\\n && conda clean -tipsy \\\n && rm -rf Miniconda3-${miniconda_version}-Linux-x86_64.sh\n#   Install pynets.\nRUN conda install -yq python=3.6 ipython\nRUN pip install pip --upgrade\nRUN conda clean -tipsy\nRUN pip install awscli pybids boto3 python-dateutil requests dipy\nRUN git clone -b development https://github.com/dPys/PyNets PyNets \\\n && chmod 775 -R PyNets/*/*.py \\\n && cd PyNets \\\n && pip install -r requirements.txt \\\n && python setup.py install\nRUN git clone -b jrdpg https://github.com/neurodata/graspy graspy \\\n && cd graspy \\\n && python setup.py install\nRUN sed -i '/mpl_patches = _get/,+3 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py \\\n && sed -i '/for mpl_patch in mpl_patches:/,+2 d' /opt/conda/lib/python3.6/site-packages/nilearn/plotting/glass_brain.py\n#   Install skggm\nRUN conda install -yq cython libgfortran matplotlib openblas \\\n && conda clean -tipsy \\\n && pip install skggm\nUSER root\nRUN chown -R neuro /opt \\\n && chmod a+s -R /opt \\\n && chmod 775 -R /opt/conda/lib/python3.6/site-packages \\\n && find /opt -type f -iname \"*.py\" -exec chmod 777 {}\n#   Cleanup\nRUN apt-get remove --purge -y git build-essential\n#   Delete buggy line in dipy\nRUN sed -i -e '189d;190d' /opt/conda/lib/python3.6/site-packages/dipy/tracking/eudx.py\n#   Create mountpoints\nRUN mkdir /data \\\n && chmod -R 777 /data\nRUN mkdir /outputs \\\n && chmod -R 777 /outputs\nUSER neuro\n#   Python ENV Config\nENV LD_LIBRARY_PATH=\"/opt/conda/lib:$LD_LIBRARY_PATH\"\n#   Link to local packages\nRUN echo PATH=\\\"$HOME/.local/bin:$PATH\\\" >> $HOME/.profile \\\n && echo \"shell -bash\" >> ~/.screenrc\n#   PyNets ENV Config\nENV PATH=\"/opt/conda/lib/python3.6/site-packages/pynets:$PATH\"\n#   FSL ENV Config\nENV FSLDIR=\"/usr/share/fsl/5.0\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\nENV PATH=\"/usr/lib/fsl/5.0:$PATH\"\nENV FSLMULTIFILEQUIT=\"TRUE\"\nENV POSSUMDIR=\"/usr/share/fsl/5.0\"\nENV LD_LIBRARY_PATH=\"/usr/lib/fsl/5.0:$LD_LIBRARY_PATH\"\nENV FSLTCLSH=\"/usr/bin/tclsh\"\nENV FSLWISH=\"/usr/bin/wish\"\nENV FSLOUTPUTTYPE=\"NIFTI_GZ\"\n#   AFNI ENV Config\nENV AFNI_MODELPATH=\"/usr/lib/afni/models\" \\\n    AFNI_IMSAVE_WARNINGS=\"NO\" \\\n    AFNI_TTATLAS_DATASET=\"/usr/share/afni/atlases\" \\\n    AFNI_PLUGINPATH=\"/usr/lib/afni/plugins\"\nENV PATH=\"/usr/lib/afni/bin:$PATH\"\n#   ANTs ENV Config\nENV PATH=\"$ANTSPATH:$PATH\"\nENV ANTS_VERSION=\"2.2.0\"\n#   Misc environment vars\nENV MPLCONFIGDIR=\"/tmp/matplotlib\"\nENV PYTHONWARNINGS=\"ignore\"\n#   Unless otherwise specified each process should only use one thread - nipype\n#   will handle parallelization\nENV MKL_NUM_THREADS=\"1\" \\\n    OMP_NUM_THREADS=\"1\"\n#   Precaching fonts, set 'Agg' as default backend for matplotlib\nRUN python -c \"from matplotlib import font_manager\" \\\n && sed -i 's/\\(backend *: \\).*$/\\1Agg/g' $( python -c \"import matplotlib; print(matplotlib.matplotlib_fname())\" ;)\n#   and add it as an entrypoint\nENTRYPOINT [\"pynets_run\"]\n","originalDockerfileUglifiedHash":"1a6533c8cba59e43ab2b68f9734e97e1","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f5c0c57f133b062fa0919a2fffebdcd67a798e8c.dockerfile"}