{"seed":3579325272,"processedDockerfileHash":"79fd2196ebd8c5847884a5908fe8cdb6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"FROM ubuntu:16.04\n#   create terrama2 user\nENV USER=\"terrama2\"\nRUN useradd -s /bin/bash -m ${USER}\nRUN echo ${USER}:${USER} | chpasswd\nRUN usermod -aG sudo ${USER}\n#   install minimal dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https=1.2.35 ca-certificates=20210119~16.04.1 curl=7.47.0-1ubuntu2.19 gnupg=1.4.20-1ubuntu3.3 git=1:2.7.4-0ubuntu1.10 make=4.1-6 sudo=1.8.16-0ubuntu1.10 wget=1.17.1-1ubuntu1.5 software-properties-common=0.96.20.10 python-software-properties=0.96.20.10 -y\n#   GCC 8\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install --no-install-recommends gcc-8 g++-8 -y \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 100 \\\n && update-alternatives --install /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 100 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100\n#   Clang 6\nRUN sh -c 'echo \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\" > /etc/apt/sources.list.d/llvm.list' \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update \\\n && apt-get install --no-install-recommends clang-6.0=1:6.0-1ubuntu2~16.04.1 clang-format-6.0=1:6.0-1ubuntu2~16.04.1 clang-tidy-6.0=1:6.0-1ubuntu2~16.04.1 clang-tools-6.0=1:6.0-1ubuntu2~16.04.1 lldb-6.0=1:6.0-1ubuntu2~16.04.1 python-clang-6.0=1:6.0-1ubuntu2~16.04.1 python-lldb-6.0=1:6.0-1ubuntu2~16.04.1 -y\nRUN apt-get install --no-install-recommends gdb=7.11.1-0ubuntu1~16.5 valgrind=1:3.11.0-1ubuntu4.2 cppcheck=1.72-1 -y\n#   Install VSCode\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg \\\n && mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \\\n && sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends code libasound2=1.1.0-0ubuntu1 libatk1.0-0=2.18.0-1 libcairo2=1.14.6-1 libcups2=2.1.3-4ubuntu0.11 libexpat1=2.1.0-7ubuntu0.16.04.5 libfontconfig1=2.11.94-0ubuntu1.1 libfreetype6=2.6.1-0.1ubuntu2.5 libgtk2.0-0=2.24.30-1ubuntu1.16.04.2 libpango-1.0-0=1.38.1-1 libx11-xcb1=2:1.6.3-1ubuntu2.2 libxcomposite1=1:0.4.4-1 libxcursor1=1:1.1.14-1ubuntu0.16.04.2 libxdamage1=1:1.1.4-2 libxext6=2:1.3.3-1 libxfixes3=1:5.0.1-2 libxi6=2:1.7.6-1 libxrandr2=2:1.5.0-1 libxrender1=1:0.9.9-0ubuntu1 libxss1=1:1.2.2-1 libxtst6=2:1.2.2-1 -y\n#   RUN mkdir -p /opt/qtcreator && \\\n#       cd /opt/qtcreator && \\\n#       apt-get update && apt-get install -y libxcb-keysyms1-dev libxcb-image0-dev \\\n#       libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev \\\n#       libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev \\\n#       libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev \\\n#       libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev x11vnc \\\n#       xauth build-essential mesa-common-dev libglu1-mesa-dev libxkbcommon-dev \\\n#       libxcb-xkb-dev libxslt1-dev libgstreamer-plugins-base0.10-dev p7zip-full && \\\n#       wget https://download.qt.io/official_releases/qtcreator/4.6/4.6.1/installer_source/linux_gcc_64_rhel72/qtcreator.7z && \\\n#       7z x qtcreator.7z && \\\n#       cd /usr/local/bin && \\\n#       ln -s /opt/qtcreator/bin/qtcreator\nRUN echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/update-alternatives\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/usermod\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/groupadd\" >> /etc/sudoers\n#   clean apt\nRUN rm -rf /var/lib/apt/lists/*\n#   \nRUN wget https://cmake.org/files/v3.11/cmake-3.11.1-Linux-x86_64.sh \\\n && sh cmake-3.11.1-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n#   change user\nUSER ${USER}\n#   install vscode extensions !!! AS USER !!!\nRUN code --install-extension ms-vscode.cpptools \\\n && code --install-extension twxs.cmake \\\n && code --install-extension vector-of-bool.cmake-tools \\\n && code --install-extension vadimcn.vscode-lldb \\\n && code --install-extension bbenoist.doxygen \\\n && code --install-extension cschlosser.doxdocgen \\\n && code --install-extension ajshort.include-autocomplete \\\n && code --install-extension reloadedextensions.reloaded-cpp \\\n && code --install-extension reloadedextensions.reloaded-themes\nENV DEVEL_DIR=\"/home/${USER}/devel\"\nENV SCRIPTS_DIR=\"/home/${USER}/scripts\"\nENV DEPENDENCIES_DIR=\"${DEVEL_DIR}/dependencies\"\nENV TERRALIB_DIR=\"${DEVEL_DIR}/terralib\"\nENV TERRAMA2_DIR=\"${DEVEL_DIR}/terrama2\"\nRUN mkdir -p ${SCRIPTS_DIR}\n#   Create sistem link clang-6.0 -> clang\nCOPY ./clang_update-alternative.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && ./clang_update-alternative.sh\nCOPY clang-tidy-diff.py ${SCRIPTS_DIR}\nCOPY pre-commit ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" pre-commit\nCOPY install-3rdparty-linux-ubuntu-16.04.sh ${SCRIPTS_DIR}\nCOPY prepare_terralib.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terralib.sh\nCOPY prepare_terrama2.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${TERRAMA2_DIR}@${TERRAMA2_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terrama2.sh\nWORKDIR /home/${USER}\nCOPY config_permission.sh .\nCMD /home/terrama2/config_permission.sh ; sleep infinity\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  create terrama2 user\nENV USER=\"terrama2\"\nRUN useradd -s /bin/bash -m ${USER}\nRUN echo ${USER}:${USER} | chpasswd\nRUN usermod -aG sudo ${USER}\n#  install minimal dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl gnupg git make sudo wget software-properties-common python-software-properties -y\n#  GCC 8\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install -y gcc-8 g++-8 \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 100 \\\n && update-alternatives --install /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 100 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100\n#  Clang 6\nRUN sh -c 'echo \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\" > /etc/apt/sources.list.d/llvm.list' \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update \\\n && apt-get install -y clang-6.0 clang-format-6.0 clang-tidy-6.0 clang-tools-6.0 lldb-6.0 python-clang-6.0 python-lldb-6.0\nRUN apt-get install -y gdb valgrind cppcheck\n#  Install VSCode\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg \\\n && mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \\\n && sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends code libasound2 libatk1.0-0 libcairo2 libcups2 libexpat1 libfontconfig1 libfreetype6 libgtk2.0-0 libpango-1.0-0 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 -y\n#  RUN mkdir -p /opt/qtcreator && \\\n#      cd /opt/qtcreator && \\\n#      apt-get update && apt-get install -y libxcb-keysyms1-dev libxcb-image0-dev \\\n#      libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev \\\n#      libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev \\\n#      libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev \\\n#      libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev x11vnc \\\n#      xauth build-essential mesa-common-dev libglu1-mesa-dev libxkbcommon-dev \\\n#      libxcb-xkb-dev libxslt1-dev libgstreamer-plugins-base0.10-dev p7zip-full && \\\n#      wget https://download.qt.io/official_releases/qtcreator/4.6/4.6.1/installer_source/linux_gcc_64_rhel72/qtcreator.7z && \\\n#      7z x qtcreator.7z && \\\n#      cd /usr/local/bin && \\\n#      ln -s /opt/qtcreator/bin/qtcreator\nRUN echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/update-alternatives\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/usermod\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/groupadd\" >> /etc/sudoers\n#  clean apt\nRUN rm -rf /var/lib/apt/lists/*\n#  \nRUN wget https://cmake.org/files/v3.11/cmake-3.11.1-Linux-x86_64.sh \\\n && sh cmake-3.11.1-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n#  change user\nUSER ${USER}\n#  install vscode extensions !!! AS USER !!!\nRUN code --install-extension ms-vscode.cpptools \\\n && code --install-extension twxs.cmake \\\n && code --install-extension vector-of-bool.cmake-tools \\\n && code --install-extension vadimcn.vscode-lldb \\\n && code --install-extension bbenoist.doxygen \\\n && code --install-extension cschlosser.doxdocgen \\\n && code --install-extension ajshort.include-autocomplete \\\n && code --install-extension reloadedextensions.reloaded-cpp \\\n && code --install-extension reloadedextensions.reloaded-themes\nENV DEVEL_DIR=\"/home/${USER}/devel\"\nENV SCRIPTS_DIR=\"/home/${USER}/scripts\"\nENV DEPENDENCIES_DIR=\"${DEVEL_DIR}/dependencies\"\nENV TERRALIB_DIR=\"${DEVEL_DIR}/terralib\"\nENV TERRAMA2_DIR=\"${DEVEL_DIR}/terrama2\"\nRUN mkdir -p ${SCRIPTS_DIR}\n#  Create sistem link clang-6.0 -> clang\nADD ./clang_update-alternative.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && ./clang_update-alternative.sh\nADD clang-tidy-diff.py ${SCRIPTS_DIR}\nADD pre-commit ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" pre-commit\nADD install-3rdparty-linux-ubuntu-16.04.sh ${SCRIPTS_DIR}\nADD prepare_terralib.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terralib.sh\nADD prepare_terrama2.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${TERRAMA2_DIR}@${TERRAMA2_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terrama2.sh\nWORKDIR /home/${USER}\nADD config_permission.sh .\nCMD /home/terrama2/config_permission.sh ; sleep infinity\n","injectedSmells":[],"originalDockerfileHash":"90ae34a68e97b4c4a0945a52d5582b58","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   create terrama2 user\nENV USER=\"terrama2\"\nRUN useradd -s /bin/bash -m ${USER}\nRUN echo ${USER}:${USER} | chpasswd\nRUN usermod -aG sudo ${USER}\n#   install minimal dependencies\nRUN apt-get update \\\n && apt-get install --no-install-recommends apt-transport-https ca-certificates curl gnupg git make sudo wget software-properties-common python-software-properties -y\n#   GCC 8\nRUN add-apt-repository -y ppa:ubuntu-toolchain-r/test \\\n && apt-get update \\\n && apt-get install gcc-8 g++-8 -y \\\n && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 100 \\\n && update-alternatives --install /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-8 100 \\\n && update-alternatives --install /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 100 \\\n && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100\n#   Clang 6\nRUN sh -c 'echo \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main\" > /etc/apt/sources.list.d/llvm.list' \\\n && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \\\n && apt-get update \\\n && apt-get install clang-6.0 clang-format-6.0 clang-tidy-6.0 clang-tools-6.0 lldb-6.0 python-clang-6.0 python-lldb-6.0 -y\nRUN apt-get install gdb valgrind cppcheck -y\n#   Install VSCode\nRUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg \\\n && mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \\\n && sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list' \\\n && apt-get update \\\n && apt-get install --no-install-recommends code libasound2 libatk1.0-0 libcairo2 libcups2 libexpat1 libfontconfig1 libfreetype6 libgtk2.0-0 libpango-1.0-0 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 -y\n#   RUN mkdir -p /opt/qtcreator && \\\n#       cd /opt/qtcreator && \\\n#       apt-get update && apt-get install -y libxcb-keysyms1-dev libxcb-image0-dev \\\n#       libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev \\\n#       libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev \\\n#       libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxfixes-dev \\\n#       libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev libxcb-glx0-dev x11vnc \\\n#       xauth build-essential mesa-common-dev libglu1-mesa-dev libxkbcommon-dev \\\n#       libxcb-xkb-dev libxslt1-dev libgstreamer-plugins-base0.10-dev p7zip-full && \\\n#       wget https://download.qt.io/official_releases/qtcreator/4.6/4.6.1/installer_source/linux_gcc_64_rhel72/qtcreator.7z && \\\n#       7z x qtcreator.7z && \\\n#       cd /usr/local/bin && \\\n#       ln -s /opt/qtcreator/bin/qtcreator\nRUN echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/apt-get\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/bin/update-alternatives\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/usermod\" >> /etc/sudoers \\\n && echo \"${USER} ALL=(ALL) NOPASSWD: /usr/sbin/groupadd\" >> /etc/sudoers\n#   clean apt\nRUN rm -rf /var/lib/apt/lists/*\n#   \nRUN wget https://cmake.org/files/v3.11/cmake-3.11.1-Linux-x86_64.sh \\\n && sh cmake-3.11.1-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir\n#   change user\nUSER ${USER}\n#   install vscode extensions !!! AS USER !!!\nRUN code --install-extension ms-vscode.cpptools \\\n && code --install-extension twxs.cmake \\\n && code --install-extension vector-of-bool.cmake-tools \\\n && code --install-extension vadimcn.vscode-lldb \\\n && code --install-extension bbenoist.doxygen \\\n && code --install-extension cschlosser.doxdocgen \\\n && code --install-extension ajshort.include-autocomplete \\\n && code --install-extension reloadedextensions.reloaded-cpp \\\n && code --install-extension reloadedextensions.reloaded-themes\nENV DEVEL_DIR=\"/home/${USER}/devel\"\nENV SCRIPTS_DIR=\"/home/${USER}/scripts\"\nENV DEPENDENCIES_DIR=\"${DEVEL_DIR}/dependencies\"\nENV TERRALIB_DIR=\"${DEVEL_DIR}/terralib\"\nENV TERRAMA2_DIR=\"${DEVEL_DIR}/terrama2\"\nRUN mkdir -p ${SCRIPTS_DIR}\n#   Create sistem link clang-6.0 -> clang\nADD ./clang_update-alternative.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && ./clang_update-alternative.sh\nADD clang-tidy-diff.py ${SCRIPTS_DIR}\nADD pre-commit ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" pre-commit\nADD install-3rdparty-linux-ubuntu-16.04.sh ${SCRIPTS_DIR}\nADD prepare_terralib.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terralib.sh\nADD prepare_terrama2.sh ${SCRIPTS_DIR}\nRUN cd ${SCRIPTS_DIR} \\\n && sed -i -e \"s@${DEPENDENCIES_DIR}@${DEPENDENCIES_DIR}@g\" -e \"s@${TERRALIB_DIR}@${TERRALIB_DIR}@g\" -e \"s@${TERRAMA2_DIR}@${TERRAMA2_DIR}@g\" -e \"s@${SCRIPTS_DIR}@${SCRIPTS_DIR}@g\" prepare_terrama2.sh\nWORKDIR /home/${USER}\nADD config_permission.sh .\nCMD /home/terrama2/config_permission.sh ; sleep infinity\n","originalDockerfileUglifiedHash":"6f31cc8c70bcf35233ed3b0e528a8f96","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/988c61619f4a492bd7f9e24d1323a0a69cd0370c.dockerfile"}