{"seed":3224427524,"processedDockerfileHash":"ae2fb415814191b17ec3049a272a97de","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Use make to build a development environment image and run it in a container.\n#   # This is slow the first time.\n#   make BIND_DIR=. shell\n#\n#   The following commands are executed inside the running container.\n#   # Make a dockerd binary.\n#   # hack/make.sh binary\n#\n#   # Install dockerd to /usr/local/bin\n#   # make install\n#\n#   # Run unit tests\n#   # hack/test/unit\n#\n#   # Run tests e.g. integration, py\n#   # hack/make.sh binary test-integration test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM golang:1.10.2 AS base\n#   FIXME(vdemeester) this is kept for other script depending on it to not fail right away\n#   Remove this once the other scripts uses something else to detect the version\nENV GO_VERSION=\"1.10.2\"\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\nFROM base AS criu\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"3.6\"\n#   Install dependancy packages specific to criu\nRUN apt-get update \\\n && apt-get install --no-install-recommends libnet-dev libprotobuf-c0-dev libprotobuf-dev libnl-3-dev libcap-dev protobuf-compiler protobuf-c-compiler python-protobuf -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make PREFIX=/build/ install-criu\nFROM base AS registry\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \\\n && case $( dpkg --print-architecture ;) in (amd64|ppc64*|s390x) (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) ; GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" ; go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry ;; esac \\\n && rm -rf \"$GOPATH\"\nFROM base AS docker-py\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"8b246db271a85d6541dc458838627e89c683e42f\"\nRUN git clone https://github.com/docker/docker-py.git /build \\\n && cd /build \\\n && git checkout -q $DOCKER_PY_COMMIT\nFROM base AS swagger\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/go-swagger/go-swagger.git \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && (cd \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && git checkout -q \"$GO_SWAGGER_COMMIT\" ) \\\n && go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \\\n && rm -rf \"$GOPATH\"\nFROM base AS frozen-images\nRUN apt-get update \\\n && apt-get install --no-install-recommends jq ca-certificates -y\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /\nRUN /download-frozen-image-v2.sh /build buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd\nFROM base AS runtime-dev\nRUN apt-get update \\\n && apt-get install --no-install-recommends libapparmor-dev libseccomp-dev -y\nFROM base AS tomlv\nENV INSTALL_BINARY_NAME=\"tomlv\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS vndr\nENV INSTALL_BINARY_NAME=\"vndr\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS containerd\nRUN apt-get update \\\n && apt-get install --no-install-recommends btrfs-tools -y\nENV INSTALL_BINARY_NAME=\"containerd\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS proxy\nENV INSTALL_BINARY_NAME=\"proxy\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS gometalinter\nENV INSTALL_BINARY_NAME=\"gometalinter\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS dockercli\nENV INSTALL_BINARY_NAME=\"dockercli\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM runtime-dev AS runc\nENV INSTALL_BINARY_NAME=\"runc\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS tini\nRUN apt-get update \\\n && apt-get install --no-install-recommends cmake vim-common -y\nCOPY hack/dockerfile/install/install.sh ./install.sh\nENV INSTALL_BINARY_NAME=\"tini\"\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n#   TODO: Some of this is only really needed for testing, it would be nice to split this up\nFROM runtime-dev AS dev\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n#   Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\nRUN ldconfig\n#   This should only install packages that are specifically needed for the dev environment and nothing else\n#   Do you really need to add another package here? Can it be done in a different build stage?\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools bash-completion btrfs-tools iptables jq libdevmapper-dev libudev-dev libsystemd-dev binutils-mingw-w64 g++-mingw-w64-x86-64 net-tools pigz python-backports.ssl-match-hostname python-dev python-mock python-pip python-requests python-setuptools python-websocket python-wheel thin-provisioning-tools vim vim-common xfsprogs zip bzip2 xz-utils -y\nCOPY --from=swagger /build/swagger* /usr/local/bin/\nCOPY --from=frozen-images /build/ /docker-frozen-images\nCOPY --from=gometalinter /build/ /usr/local/bin/\nCOPY --from=tomlv /build/ /usr/local/bin/\nCOPY --from=vndr /build/ /usr/local/bin/\nCOPY --from=tini /build/ /usr/local/bin/\nCOPY --from=runc /build/ /usr/local/bin/\nCOPY --from=containerd /build/ /usr/local/bin/\nCOPY --from=proxy /build/ /usr/local/bin/\nCOPY --from=dockercli /build/ /usr/local/cli\nCOPY --from=registry /build/registry* /usr/local/bin/\nCOPY --from=criu /build/ /usr/local/\nCOPY --from=docker-py /build/ /docker-py\n#   TODO: This is for the docker-py tests, which shouldn't really be needed for\n#   this image, but currently CI is expecting to run this image. This should be\n#   split out into a separate image, including all the `python-*` deps installed\n#   above.\nRUN cd /docker-py \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install yamllint==1.5.0 \\\n && pip install -r test-requirements.txt\nENV PATH=\"/usr/local/cli:$PATH\"\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#   Options for hack/validate/gometalinter\nENV GOMETALINTER_OPTS=\"--deadline=2m\"\nWORKDIR /go/src/github.com/docker/docker\nVOLUME /var/lib/docker\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This file describes the standard way to build Docker, using docker\n#\n#  Usage:\n#\n#  # Use make to build a development environment image and run it in a container.\n#  # This is slow the first time.\n#  make BIND_DIR=. shell\n#\n#  The following commands are executed inside the running container.\n#  # Make a dockerd binary.\n#  # hack/make.sh binary\n#\n#  # Install dockerd to /usr/local/bin\n#  # make install\n#\n#  # Run unit tests\n#  # hack/test/unit\n#\n#  # Run tests e.g. integration, py\n#  # hack/make.sh binary test-integration test-docker-py\n#\n#  # Publish a release:\n#  docker run --privileged \\\n#   -e AWS_S3_BUCKET=baz \\\n#   -e AWS_ACCESS_KEY=foo \\\n#   -e AWS_SECRET_KEY=bar \\\n#   -e GPG_PASSPHRASE=gloubiboulga \\\n#   docker hack/release.sh\n#\n#  Note: AppArmor used to mess with privileged mode, but this is no longer\n#  the case. Therefore, you don't have to disable it anymore.\n#\nFROM golang:1.10.2 AS base\n#  FIXME(vdemeester) this is kept for other script depending on it to not fail right away\n#  Remove this once the other scripts uses something else to detect the version\nENV GO_VERSION=\"1.10.2\"\n#  allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\nFROM base AS criu\n#  Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"3.6\"\n#  Install dependancy packages specific to criu\nRUN apt-get update \\\n && apt-get install libnet-dev libprotobuf-c0-dev libprotobuf-dev libnl-3-dev libcap-dev protobuf-compiler protobuf-c-compiler python-protobuf -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make PREFIX=/build/ install-criu\nFROM base AS registry\n#  Install two versions of the registry. The first is an older version that\n#  only supports schema1 manifests. The second is a newer version that supports\n#  both. This allows integration-cli tests to cover push/pull with both schema1\n#  and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \\\n && case $( dpkg --print-architecture ;) in (amd64|ppc64*|s390x) (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) ; GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" ; go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry ;; esac \\\n && rm -rf \"$GOPATH\"\nFROM base AS docker-py\n#  Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"8b246db271a85d6541dc458838627e89c683e42f\"\nRUN git clone https://github.com/docker/docker-py.git /build \\\n && cd /build \\\n && git checkout -q $DOCKER_PY_COMMIT\nFROM base AS swagger\n#  Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/go-swagger/go-swagger.git \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && (cd \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && git checkout -q \"$GO_SWAGGER_COMMIT\" ) \\\n && go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \\\n && rm -rf \"$GOPATH\"\nFROM base AS frozen-images\nRUN apt-get update \\\n && apt-get install --no-install-recommends jq ca-certificates -y\n#  Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /\nRUN /download-frozen-image-v2.sh /build buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c\n#  See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#  Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd\nFROM base AS runtime-dev\nRUN apt-get update \\\n && apt-get install libapparmor-dev libseccomp-dev -y\nFROM base AS tomlv\nENV INSTALL_BINARY_NAME=\"tomlv\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS vndr\nENV INSTALL_BINARY_NAME=\"vndr\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS containerd\nRUN apt-get update \\\n && apt-get install btrfs-tools -y\nENV INSTALL_BINARY_NAME=\"containerd\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS proxy\nENV INSTALL_BINARY_NAME=\"proxy\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS gometalinter\nENV INSTALL_BINARY_NAME=\"gometalinter\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS dockercli\nENV INSTALL_BINARY_NAME=\"dockercli\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM runtime-dev AS runc\nENV INSTALL_BINARY_NAME=\"runc\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS tini\nRUN apt-get update \\\n && apt-get install cmake vim-common -y\nCOPY hack/dockerfile/install/install.sh ./install.sh\nENV INSTALL_BINARY_NAME=\"tini\"\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n#  TODO: Some of this is only really needed for testing, it would be nice to split this up\nFROM runtime-dev AS dev\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n#  Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\nRUN ldconfig\n#  This should only install packages that are specifically needed for the dev environment and nothing else\n#  Do you really need to add another package here? Can it be done in a different build stage?\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools bash-completion btrfs-tools iptables jq libdevmapper-dev libudev-dev libsystemd-dev binutils-mingw-w64 g++-mingw-w64-x86-64 net-tools pigz python-backports.ssl-match-hostname python-dev python-mock python-pip python-requests python-setuptools python-websocket python-wheel thin-provisioning-tools vim vim-common xfsprogs zip bzip2 xz-utils -y\nCOPY --from=swagger /build/swagger* /usr/local/bin/\nCOPY --from=frozen-images /build/ /docker-frozen-images\nCOPY --from=gometalinter /build/ /usr/local/bin/\nCOPY --from=tomlv /build/ /usr/local/bin/\nCOPY --from=vndr /build/ /usr/local/bin/\nCOPY --from=tini /build/ /usr/local/bin/\nCOPY --from=runc /build/ /usr/local/bin/\nCOPY --from=containerd /build/ /usr/local/bin/\nCOPY --from=proxy /build/ /usr/local/bin/\nCOPY --from=dockercli /build/ /usr/local/cli\nCOPY --from=registry /build/registry* /usr/local/bin/\nCOPY --from=criu /build/ /usr/local/\nCOPY --from=docker-py /build/ /docker-py\n#  TODO: This is for the docker-py tests, which shouldn't really be needed for\n#  this image, but currently CI is expecting to run this image. This should be\n#  split out into a separate image, including all the `python-*` deps installed\n#  above.\nRUN cd /docker-py \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install yamllint==1.5.0 \\\n && pip install -r test-requirements.txt\nENV PATH=\"/usr/local/cli:$PATH\"\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#  Options for hack/validate/gometalinter\nENV GOMETALINTER_OPTS=\"--deadline=2m\"\nWORKDIR /go/src/github.com/docker/docker\nVOLUME /var/lib/docker\n#  Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#  Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","injectedSmells":[],"originalDockerfileHash":"36bbdb161cc59be7158a7e0cc030dc04","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This file describes the standard way to build Docker, using docker\n#\n#   Usage:\n#\n#   # Use make to build a development environment image and run it in a container.\n#   # This is slow the first time.\n#   make BIND_DIR=. shell\n#\n#   The following commands are executed inside the running container.\n#   # Make a dockerd binary.\n#   # hack/make.sh binary\n#\n#   # Install dockerd to /usr/local/bin\n#   # make install\n#\n#   # Run unit tests\n#   # hack/test/unit\n#\n#   # Run tests e.g. integration, py\n#   # hack/make.sh binary test-integration test-docker-py\n#\n#   # Publish a release:\n#   docker run --privileged \\\n#    -e AWS_S3_BUCKET=baz \\\n#    -e AWS_ACCESS_KEY=foo \\\n#    -e AWS_SECRET_KEY=bar \\\n#    -e GPG_PASSPHRASE=gloubiboulga \\\n#    docker hack/release.sh\n#\n#   Note: AppArmor used to mess with privileged mode, but this is no longer\n#   the case. Therefore, you don't have to disable it anymore.\n#\nFROM golang:1.10.2 AS base\n#   FIXME(vdemeester) this is kept for other script depending on it to not fail right away\n#   Remove this once the other scripts uses something else to detect the version\nENV GO_VERSION=\"1.10.2\"\n#   allow replacing httpredir or deb mirror\nARG APT_MIRROR=deb.debian.org\nRUN sed -ri \"s/(httpredir|deb).debian.org/$APT_MIRROR/g\" /etc/apt/sources.list\nFROM base AS criu\n#   Install CRIU for checkpoint/restore support\nENV CRIU_VERSION=\"3.6\"\n#   Install dependancy packages specific to criu\nRUN apt-get update \\\n && apt-get install libnet-dev libprotobuf-c0-dev libprotobuf-dev libnl-3-dev libcap-dev protobuf-compiler protobuf-c-compiler python-protobuf -y \\\n && mkdir -p /usr/src/criu \\\n && curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 \\\n && cd /usr/src/criu \\\n && make \\\n && make PREFIX=/build/ install-criu\nFROM base AS registry\n#   Install two versions of the registry. The first is an older version that\n#   only supports schema1 manifests. The second is a newer version that supports\n#   both. This allows integration-cli tests to cover push/pull with both schema1\n#   and schema2 manifests.\nENV REGISTRY_COMMIT_SCHEMA1=\"ec87e9b6971d831f0eff752ddb54fb64693e51cd\"\nENV REGISTRY_COMMIT=\"47a064d4195a9b56133891bbb13620c3ac83a827\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/docker/distribution.git \"$GOPATH/src/github.com/docker/distribution\" \\\n && (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT\" ) \\\n && GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry \\\n && case $( dpkg --print-architecture ;) in (amd64|ppc64*|s390x) (cd \"$GOPATH/src/github.com/docker/distribution\" \\\n && git checkout -q \"$REGISTRY_COMMIT_SCHEMA1\" ) ; GOPATH=\"$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH\" ; go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry ;; esac \\\n && rm -rf \"$GOPATH\"\nFROM base AS docker-py\n#   Get the \"docker-py\" source so we can run their integration tests\nENV DOCKER_PY_COMMIT=\"8b246db271a85d6541dc458838627e89c683e42f\"\nRUN git clone https://github.com/docker/docker-py.git /build \\\n && cd /build \\\n && git checkout -q $DOCKER_PY_COMMIT\nFROM base AS swagger\n#   Install go-swagger for validating swagger.yaml\nENV GO_SWAGGER_COMMIT=\"c28258affb0b6251755d92489ef685af8d4ff3eb\"\nRUN set -x \\\n && export GOPATH=\"$( mktemp -d ;)\" \\\n && git clone https://github.com/go-swagger/go-swagger.git \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && (cd \"$GOPATH/src/github.com/go-swagger/go-swagger\" \\\n && git checkout -q \"$GO_SWAGGER_COMMIT\" ) \\\n && go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger \\\n && rm -rf \"$GOPATH\"\nFROM base AS frozen-images\nRUN apt-get update \\\n && apt-get install --no-install-recommends jq ca-certificates -y\n#   Get useful and necessary Hub images so we can \"docker load\" locally instead of pulling\nCOPY contrib/download-frozen-image-v2.sh /\nRUN /download-frozen-image-v2.sh /build buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c\n#   See also ensureFrozenImagesLinux() in \"integration-cli/fixtures_linux_daemon_test.go\" (which needs to be updated when adding images to this list)\n#   Just a little hack so we don't have to install these deps twice, once for runc and once for dockerd\nFROM base AS runtime-dev\nRUN apt-get update \\\n && apt-get install libapparmor-dev libseccomp-dev -y\nFROM base AS tomlv\nENV INSTALL_BINARY_NAME=\"tomlv\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS vndr\nENV INSTALL_BINARY_NAME=\"vndr\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS containerd\nRUN apt-get update \\\n && apt-get install btrfs-tools -y\nENV INSTALL_BINARY_NAME=\"containerd\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS proxy\nENV INSTALL_BINARY_NAME=\"proxy\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS gometalinter\nENV INSTALL_BINARY_NAME=\"gometalinter\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS dockercli\nENV INSTALL_BINARY_NAME=\"dockercli\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM runtime-dev AS runc\nENV INSTALL_BINARY_NAME=\"runc\"\nCOPY hack/dockerfile/install/install.sh ./install.sh\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\nFROM base AS tini\nRUN apt-get update \\\n && apt-get install cmake vim-common -y\nCOPY hack/dockerfile/install/install.sh ./install.sh\nENV INSTALL_BINARY_NAME=\"tini\"\nCOPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./\nRUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME\n#   TODO: Some of this is only really needed for testing, it would be nice to split this up\nFROM runtime-dev AS dev\nRUN groupadd -r docker\nRUN useradd --create-home --gid docker unprivilegeduser\n#   Activate bash completion and include Docker's completion if mounted with DOCKER_BASH_COMPLETION_PATH\nRUN echo \"source /usr/share/bash-completion/bash_completion\" >> /etc/bash.bashrc\nRUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker\nRUN ldconfig\n#   This should only install packages that are specifically needed for the dev environment and nothing else\n#   Do you really need to add another package here? Can it be done in a different build stage?\nRUN apt-get update \\\n && apt-get install --no-install-recommends apparmor aufs-tools bash-completion btrfs-tools iptables jq libdevmapper-dev libudev-dev libsystemd-dev binutils-mingw-w64 g++-mingw-w64-x86-64 net-tools pigz python-backports.ssl-match-hostname python-dev python-mock python-pip python-requests python-setuptools python-websocket python-wheel thin-provisioning-tools vim vim-common xfsprogs zip bzip2 xz-utils -y\nCOPY --from=swagger /build/swagger* /usr/local/bin/\nCOPY --from=frozen-images /build/ /docker-frozen-images\nCOPY --from=gometalinter /build/ /usr/local/bin/\nCOPY --from=tomlv /build/ /usr/local/bin/\nCOPY --from=vndr /build/ /usr/local/bin/\nCOPY --from=tini /build/ /usr/local/bin/\nCOPY --from=runc /build/ /usr/local/bin/\nCOPY --from=containerd /build/ /usr/local/bin/\nCOPY --from=proxy /build/ /usr/local/bin/\nCOPY --from=dockercli /build/ /usr/local/cli\nCOPY --from=registry /build/registry* /usr/local/bin/\nCOPY --from=criu /build/ /usr/local/\nCOPY --from=docker-py /build/ /docker-py\n#   TODO: This is for the docker-py tests, which shouldn't really be needed for\n#   this image, but currently CI is expecting to run this image. This should be\n#   split out into a separate image, including all the `python-*` deps installed\n#   above.\nRUN cd /docker-py \\\n && pip install docker-pycreds==0.2.1 \\\n && pip install yamllint==1.5.0 \\\n && pip install -r test-requirements.txt\nENV PATH=\"/usr/local/cli:$PATH\"\nENV DOCKER_BUILDTAGS=\"apparmor seccomp selinux\"\n#   Options for hack/validate/gometalinter\nENV GOMETALINTER_OPTS=\"--deadline=2m\"\nWORKDIR /go/src/github.com/docker/docker\nVOLUME /var/lib/docker\n#   Wrap all commands in the \"docker-in-docker\" script to allow nested containers\nENTRYPOINT [\"hack/dind\"]\n#   Upload docker source\nCOPY . /go/src/github.com/docker/docker\n","originalDockerfileUglifiedHash":"0d87bbc28405aff9525867419068d300","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/c4651b7b5047c437fcb4ab917ad46d6e66efea3e.dockerfile"}