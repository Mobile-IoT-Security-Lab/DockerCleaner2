{"seed":3202527131,"processedDockerfileHash":"408aba0fab745729ba3b08f0c9132cb7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"FROM python:3.6-slim\n#   Set the environment variables\nENV NODE_VERSION=\"10.14.2\" \\\n    PYTHONDONTWRITEBYTECODE=\"1\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_DISABLE_PIP_VERSION_CHECK=\"1\" \\\n    PYTHONWARNINGS=\"ignore\" \\\n    PIPELINE_CSS_COMPRESSOR=\"kuma.core.pipeline.cleancss.CleanCSSCompressor\" \\\n    PIPELINE_CLEANCSS_BINARY=\"/usr/local/bin/cleancss\" \\\n    PIPELINE_CLEANCSS_ARGUMENTS=\"-O1 --skip-rebase\" \\\n    PIPELINE_JS_COMPRESSOR=\"pipeline.compressors.uglifyjs.UglifyJSCompressor\" \\\n    PIPELINE_SASS_BINARY=\"/usr/local/bin/node-sass\" \\\n    PIPELINE_UGLIFYJS_BINARY=\"/usr/local/bin/uglifyjs\" \\\n    WEB_CONCURRENCY=\"4\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl=7.74.0-1.3+deb11u7 gpg=2.2.27-2+deb11u2 dirmngr=2.2.27-2+deb11u2 libsasl2-modules=2.1.27+dfsg-2.1+deb11u1 gettext=0.21-4 mime-support=3.66 build-essential=12.9 libtidy-dev=2:5.6.0-11 libxml2-dev=2.9.10+dfsg-6.7+deb11u3 libxslt1-dev=1.1.34-4+deb11u1 libffi-dev=3.3-6 libjpeg-dev=1:2.0.6-4 libmagic-dev=1:5.39-3 default-libmysqlclient-dev=1.0.7 mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\n#   ----------------------------------------------------------------------------\n#   add node.js 10.x, copied from:\n#       https://github.com/nodejs/docker-node/blob/master/10/stretch/Dockerfile\n#   but with:\n#    The NODE_VERSION environment variable is set above\n#    The node user gets uid/gid 1001 rather than 1000\n#    Omit the installation of yarn\n#   ----------------------------------------------------------------------------\nRUN groupadd --gid 1001 node \\\n && useradd --uid 1001 --gid node --shell /bin/bash --create-home node\n#   gpg keys listed at https://github.com/nodejs/node#release-keys\nRUN set -ex \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" || gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\" ; done\nRUN ARCH= \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && case \"${dpkgArch##*-}\" in (amd64) ARCH='x64' ;;(ppc64el) ARCH='ppc64le' ;;(s390x) ARCH='s390x' ;;(arm64) ARCH='arm64' ;;(armhf) ARCH='armv7l' ;;(i386) ARCH='x86' ;;(*) echo \"unsupported architecture\" ; exit 1 ;; esac \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n#   ----------------------------------------------------------------------------\n#   add non-privileged user\nRUN useradd --uid 1000 --shell /bin/bash --create-home kuma \\\n && mkdir -p app \\\n && chown kuma:kuma /app \\\n && chmod 775 /app\n#   install Python libraries\nWORKDIR /app\nCOPY --chown=kuma:kuma ./requirements /app/requirements\nRUN pip install --no-cache-dir -r requirements/dev.txt\n#   install Node.js tools\n#   config files are symlinks to make updating easier\nCOPY --chown=kuma:kuma ./package.json ./package-lock.json /app/\nRUN mkdir /tools \\\n && chown kuma:kuma /tools \\\n && chmod 775 /tools\nWORKDIR /tools\nUSER kuma\nRUN ln -s /app/package.json /tools \\\n && ln -s /app/package-lock.json /tools \\\n && npm install\nUSER root\nRUN find /tools/node_modules/.bin/ -executable -type f -o -type l -exec ln -s {} /usr/local/bin/\n#   setup default run parameters\nUSER kuma\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--timeout=120\", \"--worker-class=meinheld.gmeinheld.MeinheldWorker\", \"kuma.wsgi:application\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM python:3.6-slim\n#  Set the environment variables\nENV NODE_VERSION=\"10.14.2\" \\\n    PYTHONDONTWRITEBYTECODE=\"1\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_DISABLE_PIP_VERSION_CHECK=\"1\" \\\n    PYTHONWARNINGS=\"ignore\" \\\n    PIPELINE_CSS_COMPRESSOR=\"kuma.core.pipeline.cleancss.CleanCSSCompressor\" \\\n    PIPELINE_CLEANCSS_BINARY=\"/usr/local/bin/cleancss\" \\\n    PIPELINE_CLEANCSS_ARGUMENTS=\"-O1 --skip-rebase\" \\\n    PIPELINE_JS_COMPRESSOR=\"pipeline.compressors.uglifyjs.UglifyJSCompressor\" \\\n    PIPELINE_SASS_BINARY=\"/usr/local/bin/node-sass\" \\\n    PIPELINE_UGLIFYJS_BINARY=\"/usr/local/bin/uglifyjs\" \\\n    WEB_CONCURRENCY=\"4\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl gpg dirmngr libsasl2-modules gettext mime-support build-essential libtidy-dev libxml2-dev libxslt1-dev libffi-dev libjpeg-dev libmagic-dev default-libmysqlclient-dev mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\n#  ----------------------------------------------------------------------------\n#  add node.js 10.x, copied from:\n#      https://github.com/nodejs/docker-node/blob/master/10/stretch/Dockerfile\n#  but with:\n#   The NODE_VERSION environment variable is set above\n#   The node user gets uid/gid 1001 rather than 1000\n#   Omit the installation of yarn\n#  ----------------------------------------------------------------------------\nRUN groupadd --gid 1001 node \\\n && useradd --uid 1001 --gid node --shell /bin/bash --create-home node\n#  gpg keys listed at https://github.com/nodejs/node#release-keys\nRUN set -ex \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" || gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\" ; done\nRUN ARCH= \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && case \"${dpkgArch##*-}\" in (amd64) ARCH='x64' ;;(ppc64el) ARCH='ppc64le' ;;(s390x) ARCH='s390x' ;;(arm64) ARCH='arm64' ;;(armhf) ARCH='armv7l' ;;(i386) ARCH='x86' ;;(*) echo \"unsupported architecture\" ; exit 1 ;; esac \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n#  ----------------------------------------------------------------------------\n#  add non-privileged user\nRUN useradd --uid 1000 --shell /bin/bash --create-home kuma \\\n && mkdir -p app \\\n && chown kuma:kuma /app \\\n && chmod 775 /app\n#  install Python libraries\nWORKDIR /app\nCOPY --chown=kuma:kuma ./requirements /app/requirements\nRUN pip install --no-cache-dir -r requirements/dev.txt\n#  install Node.js tools\n#  config files are symlinks to make updating easier\nCOPY --chown=kuma:kuma ./package.json ./package-lock.json /app/\nRUN mkdir /tools \\\n && chown kuma:kuma /tools \\\n && chmod 775 /tools\nWORKDIR /tools\nUSER kuma\nRUN ln -s /app/package.json /tools \\\n && ln -s /app/package-lock.json /tools \\\n && npm install\nUSER root\nRUN find /tools/node_modules/.bin/ -executable -type f -o -type l -exec ln -s {} /usr/local/bin/ ;\n#  setup default run parameters\nUSER kuma\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--timeout=120\", \"--worker-class=meinheld.gmeinheld.MeinheldWorker\", \"kuma.wsgi:application\"]\n","injectedSmells":[],"originalDockerfileHash":"a096db2a778d5a92f135cb58bee2af9b","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM python:3.6-slim\n#   Set the environment variables\nENV NODE_VERSION=\"10.14.2\" \\\n    PYTHONDONTWRITEBYTECODE=\"1\" \\\n    PYTHONUNBUFFERED=\"1\" \\\n    PIP_DISABLE_PIP_VERSION_CHECK=\"1\" \\\n    PYTHONWARNINGS=\"ignore\" \\\n    PIPELINE_CSS_COMPRESSOR=\"kuma.core.pipeline.cleancss.CleanCSSCompressor\" \\\n    PIPELINE_CLEANCSS_BINARY=\"/usr/local/bin/cleancss\" \\\n    PIPELINE_CLEANCSS_ARGUMENTS=\"-O1 --skip-rebase\" \\\n    PIPELINE_JS_COMPRESSOR=\"pipeline.compressors.uglifyjs.UglifyJSCompressor\" \\\n    PIPELINE_SASS_BINARY=\"/usr/local/bin/node-sass\" \\\n    PIPELINE_UGLIFYJS_BINARY=\"/usr/local/bin/uglifyjs\" \\\n    WEB_CONCURRENCY=\"4\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends curl gpg dirmngr libsasl2-modules gettext mime-support build-essential libtidy-dev libxml2-dev libxslt1-dev libffi-dev libjpeg-dev libmagic-dev default-libmysqlclient-dev mysql-client -y \\\n && rm -rf /var/lib/apt/lists/*\n#   ----------------------------------------------------------------------------\n#   add node.js 10.x, copied from:\n#       https://github.com/nodejs/docker-node/blob/master/10/stretch/Dockerfile\n#   but with:\n#    The NODE_VERSION environment variable is set above\n#    The node user gets uid/gid 1001 rather than 1000\n#    Omit the installation of yarn\n#   ----------------------------------------------------------------------------\nRUN groupadd --gid 1001 node \\\n && useradd --uid 1001 --gid node --shell /bin/bash --create-home node\n#   gpg keys listed at https://github.com/nodejs/node#release-keys\nRUN set -ex \\\n && for key in 94AE36675C464D64BAFA68DD7434390BDBE9B9C5 FD3A5288F042B6850C66B31F09FE44734EB7990E 71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 DD8F2338BAE7501E3DD5AC78C273792F7D83545D C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 B9AE9905FFD7803F25714661B63B535A4C206CA9 56730D5401028683275BD23C23EFEFE93C4CFFFE 77984A986EBC2AA786BC0F66B01FBB92821C587A 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600; do gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \"$key\" || gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys \"$key\" || gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys \"$key\" ; done\nRUN ARCH= \\\n && dpkgArch=\"$( dpkg --print-architecture ;)\" \\\n && case \"${dpkgArch##*-}\" in (amd64) ARCH='x64' ;;(ppc64el) ARCH='ppc64le' ;;(s390x) ARCH='s390x' ;;(arm64) ARCH='arm64' ;;(armhf) ARCH='armv7l' ;;(i386) ARCH='x86' ;;(*) echo \"unsupported architecture\" ; exit 1 ;; esac \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz\" \\\n && curl -fsSLO --compressed \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n && grep \" node-v$NODE_VERSION-linux-$ARCH.tar.xz$\" SHASUMS256.txt | sha256sum -c - \\\n && tar -xJf \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" -C /usr/local --strip-components=1 --no-same-owner \\\n && rm \"node-v$NODE_VERSION-linux-$ARCH.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n#   ----------------------------------------------------------------------------\n#   add non-privileged user\nRUN useradd --uid 1000 --shell /bin/bash --create-home kuma \\\n && mkdir -p app \\\n && chown kuma:kuma /app \\\n && chmod 775 /app\n#   install Python libraries\nWORKDIR /app\nCOPY --chown=kuma:kuma ./requirements /app/requirements\nRUN pip install --no-cache-dir -r requirements/dev.txt\n#   install Node.js tools\n#   config files are symlinks to make updating easier\nCOPY --chown=kuma:kuma ./package.json ./package-lock.json /app/\nRUN mkdir /tools \\\n && chown kuma:kuma /tools \\\n && chmod 775 /tools\nWORKDIR /tools\nUSER kuma\nRUN ln -s /app/package.json /tools \\\n && ln -s /app/package-lock.json /tools \\\n && npm install\nUSER root\nRUN find /tools/node_modules/.bin/ -executable -type f -o -type l -exec ln -s {} /usr/local/bin/\n#   setup default run parameters\nUSER kuma\nWORKDIR /app\nEXPOSE 8000/tcp\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--timeout=120\", \"--worker-class=meinheld.gmeinheld.MeinheldWorker\", \"kuma.wsgi:application\"]\n","originalDockerfileUglifiedHash":"b11180ba5ffa3856dd95bc82e93c0b14","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/0fdb795ca056d4bf448ea42ebd233359343f880a.dockerfile"}