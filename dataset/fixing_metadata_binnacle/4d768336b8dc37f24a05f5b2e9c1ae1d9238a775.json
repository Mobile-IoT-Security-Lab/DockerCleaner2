{"seed":2385090314,"processedDockerfileHash":"82d3ce3d0f787b41bb08032de42adca3","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#   apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#   Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nRUN which wget &> /dev/null || (apt-get update ;apt-get install --no-install-recommends wget=1.20.3 ) ; wget --no-verbose --output-document /tmp/ https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#   ENV S6_KILL_GRACETIME=\"3000\"\n#   Supportive pkgs\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#   Output folder\nRUN mkdir -p /out\n#   ===\n#   dnsmasq - install build time dependancies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates make gcc \\\n && $_apt_clean\n#   dnsmasq - Build from source\nRUN mkdir -p /build/dnsmasq\nWORKDIR /build/dnsmasq\n#   dnsmasq - git checkout\nRUN git clone git://thekelleys.org.uk/dnsmasq.git \\\n && cd dnsmasq \\\n && dnsmasq_version=\"$( git tag | grep -E 'v[0-9][0-9]*\\.[0-9][0-9][rc]*[0-9]*$' | sort | tail -1 ;)\" \\\n && release_version=$( git tag | grep -E \"^${dnsmasq_version%rc*}$\" || true ;) \\\n && if [ \"$release_version\" ] ; then dnsmasq_version=$release_version ; fi \\\n && echo \"$dnsmasq_version\" > /out/dnsmasq_version \\\n && git checkout \"${dnsmasq_version}\"\n#   dnsmasq - compile & install\nRUN cd dnsmasq \\\n && sed -i -e 's|/usr/local|/usr|' Makefile \\\n && make install DESTDIR=$PWD/out \\\n && mkdir -p out/etc \\\n && cp dnsmasq.conf.example out/etc/\n#   dnsmasq - Create tarball in /out/\nRUN cd dnsmasq/out \\\n && tar -czvf /out/dnsmasq-$( cat /out/dnsmasq_version ;)_linux-x86_64.tar.gz *\n#   ===\n#   ipxe - install build time dependancies\nRUN : \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gcc binutils make perl syslinux liblzma-dev genisoimage \\\n && $_apt_clean\n#   ipxe - Build from source\nRUN mkdir -p /build/ipxe \\\n && date -I > /out/ipxe_version\nWORKDIR /build/ipxe\n#   ipxe - git checkout\nRUN git clone git://git.ipxe.org/ipxe.git\n#   RUN cd ipxe \\\n#    && ipxe_version=\"$(git tag | grep -E 'v[0-9][0-9]*\\.[0-9]\\.[0-9][-rc]*[0-9]*$' | sort | tail -1)\" \\\n#    && release_version=$(git tag | grep -E \"^${ipxe_version%-rc*}$\" || true) \\\n#    && if [ \"$release_version\" ]; then ipxe_version=$release_version; fi \\\n#    && echo \"$ipxe_version\" > /out/ipxe_version \\\n#    && git checkout \"${ipxe_version}\"\n#   Disable entropy gathering - avoids +20 seconds boot delay\nCOPY ipxe/nocrypto /build/ipxe/ipxe/src/config/local/nocrypto\n#   ipxe - compile & install\nRUN cd ipxe/src \\\n && CONFIG=nocrypto make bin/undionly.kpxe \\\n && CONFIG=nocrypto make bin-x86_64-efi/ipxe.efi\nRUN mkdir -p out \\\n && cp ipxe/src/bin/undionly.kpxe out/ \\\n && cp ipxe/src/bin-x86_64-efi/ipxe.efi out/\n#   ipxe - Create tarball in /out/\nRUN cd /build/ipxe/out \\\n && tar -czvf /out/ipxe-$( cat /out/ipxe_version ;)_linux-x86_64.tar.gz *\n#   # ===\n#   # istgt - install build time dependancies\n#   RUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#       curl wget gcc binutils make libssl-dev && $_apt_clean\n#   # istgt - Build from source\n#   RUN mkdir -p /build/istgt \\\n#    && curl --silent http://svnweb.freebsd.org/ports/head/net/istgt/Makefile?view=co | grep \"PORTVERSION=\" | cut -f2 > /out/istgt_version\n#   WORKDIR /build/istgt - dead\n#   # istgt - download source tarball\n#   RUN wget http://www.peach.ne.jp/archives/istgt/istgt-$(cat /out/istgt_version).tar.gz \\\n#    && tar -zxf istgt-$(cat /out/istgt_version).tar.gz && ln -sf istgt-$(cat /out/istgt_version) istgt\n#   # istgt - compile & install\n#   RUN cd istgt \\\n#    && ./configure --sysconfdir=/etc --localstatedir=/var \\\n#       --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-symlink-device \\\n#    && make && make install DESTDIR=$PWD/out\n#   # istgt - Create tarball in /out/\n#   RUN cd /build/istgt/istgt/out && tar -czvf /out/istgt-$(cat /out/istgt_version)_linux-x86_64.tar.gz *\n#   Upload linux binaries --> bintray.com\nWORKDIR /out\nCOPY upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#   Execute our upload script\nCOPY bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#   Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#  apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#  Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#  ENV S6_KILL_GRACETIME=\"3000\"\n#  Supportive pkgs\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#  Output folder\nRUN mkdir -p /out\n#  ===\n#  dnsmasq - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates make gcc \\\n && $_apt_clean\n#  dnsmasq - Build from source\nRUN mkdir -p /build/dnsmasq\nWORKDIR /build/dnsmasq\n#  dnsmasq - git checkout\nRUN git clone git://thekelleys.org.uk/dnsmasq.git \\\n && cd dnsmasq \\\n && dnsmasq_version=\"$( git tag | grep -E 'v[0-9][0-9]*\\.[0-9][0-9][rc]*[0-9]*$' | sort | tail -1 ;)\" \\\n && release_version=$( git tag | grep -E \"^${dnsmasq_version%rc*}$\" || true ;) \\\n && if [ \"$release_version\" ] ; then dnsmasq_version=$release_version ; fi \\\n && echo \"$dnsmasq_version\" > /out/dnsmasq_version \\\n && git checkout \"${dnsmasq_version}\"\n#  dnsmasq - compile & install\nRUN cd dnsmasq \\\n && sed -i -e 's|/usr/local|/usr|' Makefile \\\n && make install DESTDIR=$PWD/out \\\n && mkdir -p out/etc \\\n && cp dnsmasq.conf.example out/etc/\n#  dnsmasq - Create tarball in /out/\nRUN cd dnsmasq/out \\\n && tar -czvf /out/dnsmasq-$( cat /out/dnsmasq_version ;)_linux-x86_64.tar.gz *\n#  ===\n#  ipxe - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gcc binutils make perl syslinux liblzma-dev genisoimage \\\n && $_apt_clean\n#  ipxe - Build from source\nRUN mkdir -p /build/ipxe \\\n && date -I > /out/ipxe_version\nWORKDIR /build/ipxe\n#  ipxe - git checkout\nRUN git clone git://git.ipxe.org/ipxe.git\n#  RUN cd ipxe \\\n#   && ipxe_version=\"$(git tag | grep -E 'v[0-9][0-9]*\\.[0-9]\\.[0-9][-rc]*[0-9]*$' | sort | tail -1)\" \\\n#   && release_version=$(git tag | grep -E \"^${ipxe_version%-rc*}$\" || true) \\\n#   && if [ \"$release_version\" ]; then ipxe_version=$release_version; fi \\\n#   && echo \"$ipxe_version\" > /out/ipxe_version \\\n#   && git checkout \"${ipxe_version}\"\n#  Disable entropy gathering - avoids +20 seconds boot delay\nADD ipxe/nocrypto /build/ipxe/ipxe/src/config/local/nocrypto\n#  ipxe - compile & install\nRUN cd ipxe/src \\\n && CONFIG=nocrypto make bin/undionly.kpxe \\\n && CONFIG=nocrypto make bin-x86_64-efi/ipxe.efi\nRUN mkdir -p out \\\n && cp ipxe/src/bin/undionly.kpxe out/ \\\n && cp ipxe/src/bin-x86_64-efi/ipxe.efi out/\n#  ipxe - Create tarball in /out/\nRUN cd /build/ipxe/out \\\n && tar -czvf /out/ipxe-$( cat /out/ipxe_version ;)_linux-x86_64.tar.gz *\n#  # ===\n#  # istgt - install build time dependancies\n#  RUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#      curl wget gcc binutils make libssl-dev && $_apt_clean\n#  # istgt - Build from source\n#  RUN mkdir -p /build/istgt \\\n#   && curl --silent http://svnweb.freebsd.org/ports/head/net/istgt/Makefile?view=co | grep \"PORTVERSION=\" | cut -f2 > /out/istgt_version\n#  WORKDIR /build/istgt - dead\n#  # istgt - download source tarball\n#  RUN wget http://www.peach.ne.jp/archives/istgt/istgt-$(cat /out/istgt_version).tar.gz \\\n#   && tar -zxf istgt-$(cat /out/istgt_version).tar.gz && ln -sf istgt-$(cat /out/istgt_version) istgt\n#  # istgt - compile & install\n#  RUN cd istgt \\\n#   && ./configure --sysconfdir=/etc --localstatedir=/var \\\n#      --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-symlink-device \\\n#   && make && make install DESTDIR=$PWD/out\n#  # istgt - Create tarball in /out/\n#  RUN cd /build/istgt/istgt/out && tar -czvf /out/istgt-$(cat /out/istgt_version)_linux-x86_64.tar.gz *\n#  Upload linux binaries --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#  Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#  Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\n","injectedSmells":[],"originalDockerfileHash":"fad68719f76be9307b1fe9308e29970a","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER dreamcat4 <dreamcat4@gmail.com>\nENV _clean=\"rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\"\nENV _apt_clean=\"eval apt-get clean && $_clean\"\n#   apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y\n#   Install s6-overlay\nENV s6_overlay_version=\"1.17.1.1\"\nADD https://github.com/just-containers/s6-overlay/releases/download/v${s6_overlay_version}/s6-overlay-amd64.tar.gz /tmp/\nRUN tar zxf /tmp/s6-overlay-amd64.tar.gz -C / \\\n && $_clean\nENV S6_LOGGING=\"1\"\n#   ENV S6_KILL_GRACETIME=\"3000\"\n#   Supportive pkgs\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y wget curl git sudo nano less man \\\n && $_apt_clean\n#   Output folder\nRUN mkdir -p /out\n#   ===\n#   dnsmasq - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates make gcc \\\n && $_apt_clean\n#   dnsmasq - Build from source\nRUN mkdir -p /build/dnsmasq\nWORKDIR /build/dnsmasq\n#   dnsmasq - git checkout\nRUN git clone git://thekelleys.org.uk/dnsmasq.git \\\n && cd dnsmasq \\\n && dnsmasq_version=\"$( git tag | grep -E 'v[0-9][0-9]*\\.[0-9][0-9][rc]*[0-9]*$' | sort | tail -1 ;)\" \\\n && release_version=$( git tag | grep -E \"^${dnsmasq_version%rc*}$\" || true ;) \\\n && if [ \"$release_version\" ] ; then dnsmasq_version=$release_version ; fi \\\n && echo \"$dnsmasq_version\" > /out/dnsmasq_version \\\n && git checkout \"${dnsmasq_version}\"\n#   dnsmasq - compile & install\nRUN cd dnsmasq \\\n && sed -i -e 's|/usr/local|/usr|' Makefile \\\n && make install DESTDIR=$PWD/out \\\n && mkdir -p out/etc \\\n && cp dnsmasq.conf.example out/etc/\n#   dnsmasq - Create tarball in /out/\nRUN cd dnsmasq/out \\\n && tar -czvf /out/dnsmasq-$( cat /out/dnsmasq_version ;)_linux-x86_64.tar.gz *\n#   ===\n#   ipxe - install build time dependancies\nRUN apt-get update -qqy \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y gcc binutils make perl syslinux liblzma-dev genisoimage \\\n && $_apt_clean\n#   ipxe - Build from source\nRUN mkdir -p /build/ipxe \\\n && date -I > /out/ipxe_version\nWORKDIR /build/ipxe\n#   ipxe - git checkout\nRUN git clone git://git.ipxe.org/ipxe.git\n#   RUN cd ipxe \\\n#    && ipxe_version=\"$(git tag | grep -E 'v[0-9][0-9]*\\.[0-9]\\.[0-9][-rc]*[0-9]*$' | sort | tail -1)\" \\\n#    && release_version=$(git tag | grep -E \"^${ipxe_version%-rc*}$\" || true) \\\n#    && if [ \"$release_version\" ]; then ipxe_version=$release_version; fi \\\n#    && echo \"$ipxe_version\" > /out/ipxe_version \\\n#    && git checkout \"${ipxe_version}\"\n#   Disable entropy gathering - avoids +20 seconds boot delay\nADD ipxe/nocrypto /build/ipxe/ipxe/src/config/local/nocrypto\n#   ipxe - compile & install\nRUN cd ipxe/src \\\n && CONFIG=nocrypto make bin/undionly.kpxe \\\n && CONFIG=nocrypto make bin-x86_64-efi/ipxe.efi\nRUN mkdir -p out \\\n && cp ipxe/src/bin/undionly.kpxe out/ \\\n && cp ipxe/src/bin-x86_64-efi/ipxe.efi out/\n#   ipxe - Create tarball in /out/\nRUN cd /build/ipxe/out \\\n && tar -czvf /out/ipxe-$( cat /out/ipxe_version ;)_linux-x86_64.tar.gz *\n#   # ===\n#   # istgt - install build time dependancies\n#   RUN apt-get update -qqy && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n#       curl wget gcc binutils make libssl-dev && $_apt_clean\n#   # istgt - Build from source\n#   RUN mkdir -p /build/istgt \\\n#    && curl --silent http://svnweb.freebsd.org/ports/head/net/istgt/Makefile?view=co | grep \"PORTVERSION=\" | cut -f2 > /out/istgt_version\n#   WORKDIR /build/istgt - dead\n#   # istgt - download source tarball\n#   RUN wget http://www.peach.ne.jp/archives/istgt/istgt-$(cat /out/istgt_version).tar.gz \\\n#    && tar -zxf istgt-$(cat /out/istgt_version).tar.gz && ln -sf istgt-$(cat /out/istgt_version) istgt\n#   # istgt - compile & install\n#   RUN cd istgt \\\n#    && ./configure --sysconfdir=/etc --localstatedir=/var \\\n#       --localedir=/usr/share/locale --datarootdir=/usr/share --prefix=/usr --enable-symlink-device \\\n#    && make && make install DESTDIR=$PWD/out\n#   # istgt - Create tarball in /out/\n#   RUN cd /build/istgt/istgt/out && tar -czvf /out/istgt-$(cat /out/istgt_version)_linux-x86_64.tar.gz *\n#   Upload linux binaries --> bintray.com\nWORKDIR /out\nADD upload-to-bintray /bin/\nRUN chmod +x /bin/upload-to-bintray\n#   Execute our upload script\nADD bintray-env /out/\nRUN upload-to-bintray \\\n && rm /out/bintray-env \\\n && ls -lsa /out/\n#   Default container settings\nVOLUME /out\nENTRYPOINT [\"/init\", \"/bin/sleep\", \"99999999\"]\n","originalDockerfileUglifiedHash":"79f1411e7485ae77f98477f0e760deaf","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4d768336b8dc37f24a05f5b2e9c1ae1d9238a775.dockerfile"}