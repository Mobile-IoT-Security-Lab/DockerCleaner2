{"seed":3049189437,"processedDockerfileHash":"f81501a4f0f4190333203beabadc3775","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-gem","have-a-healthcheck"],"processedDockerfile":"#   3scale Backend CentOS image\n#\n#   This image is meant for flexibility building different configurations.\n#\n#   Knobs you should know about:\n#\n#   - RUBY_SCL: Software Collections Library for the Ruby version used.\n#   - BUILD_DEP_PKGS: Packages needed to build/install the project.\n#   - CACHE_FRIENDLY: Improve caching when rebuilding at the cost of bigger size.\n#   - GEM_UPDATE: Update Rubygems to the latest version.\n#   - BUNDLE_VERSION_MATCH: Install the Bundler version used by the lockfile\n#                           instead of using the SCL version.\n#   - BUNDLE_GEMFILE: Gemfile name to pin Bundler to.\n#   - BUNDLE_WITHOUT: List of Bundler groups to skip.\n#   - DELETE_UNUSED_GEMFILES: Deletes unused Gemfiles in the root directory.\n#   - CONFIG_SAAS: true for a SaaS image. false for an on-premises image.\n#   - PUMA_WORKERS: Default number of Puma workers to serve the app.\n#\n#   Profiles you should use:\n#\n#   You can use variations on the values of arguments, but you usually want one\n#   of the following two use cases:\n#\n#   - Development/Test: just use default values.\n#   - Release:\n#     - CACHE_FRIENDLY: false\n#     - GEM_UPDATE: false\n#     - BUNDLE_VERSION_MATCH: false\n#     - BUNDLE_GEMFILE: Gemfile for SaaS, Gemfile.on_prem for on-premises.\n#     - BUNDLE_WITHOUT: development:test\n#     - DELETE_UNUSED_GEMFILES: true\n#     - CONFIG_SAAS: true for SaaS, false for on-premises.\n#     - PUMA_WORKERS: number of Puma worker processes - depends on intended usage,\n#                     with number of cpus being a good heuristic.\n#\nFROM centos:7\nARG RUBY_SCL=rh-ruby23\nARG BUILD_DEP_PKGS=\"make gcc git\"\n#   Turn off for release mode to produce smaller layers.\nARG CACHE_FRIENDLY=true\n#   Configure yum, install SCL, update, install Ruby and clean.\nRUN sed -i /etc/yum.conf -e '/^\\(clean_requirements_on_remove\\|history_record\\|tsflags\\|logfile\\)=/d' -e 's/^\\(\\[main\\]\\b.*\\)$/\\1\\nclean_requirements_on_remove=1\\nhistory_record=0\\ntsflags=nodocs\\nlogfile=\\/dev\\/null\\n/' /etc/yum.conf \\\n && yum install -y centos-release-scl \\\n && yum -y update \\\n && yum -y install ${RUBY_SCL} ${RUBY_SCL}-ruby-devel \\\n && if test \"${CACHE_FRIENDLY}x\" = \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && yum -y autoremove \\\n && yum -y clean all\nWORKDIR /tmp/app\n#   Gem updating should be turned off for productisation\nARG GEM_UPDATE=true\n#   Bundler should be kept as-is for productisation\nARG BUNDLE_VERSION_MATCH=true\nARG BUNDLE_GEMFILE=Gemfile.on_prem\nARG BUNDLE_WITHOUT=development:test\n#   Install and/or update Rubygems and Bundler, and configure the latter.\nCOPY ${BUNDLE_GEMFILE}.lock ./\nRUN source scl_source enable ${RUBY_SCL} \\\n && if test \"${GEM_UPDATE}x\" = \"truex\" ; then gem update --system -N ; fi \\\n && gem env \\\n && BUNDLED_WITH=$( cat ${BUNDLE_GEMFILE}.lock | grep -A 1 \"^BUNDLED WITH$\" | tail -n 1 | sed -e 's/\\s//g' ;) \\\n && if test \"${BUNDLE_VERSION_MATCH}x\" = \"truex\" ; then gem install bundler --version 2.4.12 -N ; else yum install -y ${RUBY_SCL}-rubygem-bundler \\\n && yum -y autoremove \\\n && yum -y clean all ; fi \\\n && echo Using $( bundle --version ;), originally bundled with ${BUNDLED_WITH} \\\n && bundle config --local silence_root_warning 1 \\\n && bundle config --local disable_shared_gems 1 \\\n && bundle config --local without ${BUNDLE_WITHOUT} \\\n && bundle config --local gemfile ${BUNDLE_GEMFILE}\nCOPY . ./\nARG DELETE_UNUSED_GEMFILES=true\n#   Turn off for productisation\nARG CONFIG_SAAS=false\n#   Builds a clean source tree and deploys it with Bundler.\n#   Sets the right configuration and permissions.\nRUN source scl_source enable ${RUBY_SCL} \\\n && cp -n openshift/3scale_backend.conf /etc/ \\\n && chmod 644 /etc/3scale_backend.conf \\\n && BACKEND_VERSION=$( gem build 3scale_backend.gemspec | sed -n -e 's/^\\s*Version\\:\\s*\\([^[:space:]]*\\)$/\\1/p' ;) \\\n && gem unpack \"3scale_backend-${BACKEND_VERSION}.gem\" --target=/opt/ruby \\\n && cd \"/opt/ruby/3scale_backend-${BACKEND_VERSION}\" \\\n && cp -a /tmp/app/.bundle \"/opt/ruby/3scale_backend-${BACKEND_VERSION}/\" \\\n && if test \"${DELETE_UNUSED_GEMFILES}x\" = \"truex\" ; then echo \"Deleting the following unused Gemfile files:\" ;find . -maxdepth 1 -regex ./Gemfile\"\\(\\..*\\)?\" ! -regex ./$( sed -e 's/[^^]/[&]/g; s/\\^/\\\\^/g' <<< ${BUNDLE_GEMFILE};)\"\\(\\.lock\\)?\" ! -name Gemfile.base -print -delete ; fi \\\n && if test \"${CACHE_FRIENDLY}x\" != \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && bundle install --deployment --jobs $( grep -c processor /proc/cpuinfo ;) \\\n && if ruby -e \"begin; require 'rubygems'; Gem::Specification.find_by_name('bundler').version < Gem::Version.new('1.12.0') \\\n && exit(0); rescue; end; exit(1)\" ; then echo \"[WARNING] Old Bundler requires fixing git gems with extensions (Puma)\" ;PUMA_DIR=$( bundle show puma ;) \\\n && ln -s $( find \"${PUMA_DIR}\" -name puma_http11.so ;) \"${PUMA_DIR}\"/lib/puma ; fi \\\n && yum -y remove ${BUILD_DEP_PKGS} \\\n && yum -y autoremove \\\n && yum -y clean all \\\n && ln -s ${PWD} /opt/app \\\n && if test \"${CONFIG_SAAS}x\" != \"truex\" ; then cp /tmp/app/openshift/config/puma.rb ./config/ ; fi \\\n && cp -n /tmp/app/openshift/backend-cron /usr/local/sbin/backend-cron \\\n && cp -n /tmp/app/openshift/entrypoint.sh ./ \\\n && rm -rf /tmp/app \\\n && mkdir -p -m 0770 /var/run/3scale/ \\\n && mkdir -p -m 0770 /var/log/backend/ \\\n && touch /var/log/backend/3scale_backend{,_worker}.log \\\n && chmod g+rw /var/log/backend/3scale_backend{,_worker}.log\nEXPOSE 3000/tcp\nUSER 1001\nWORKDIR /opt/app\nARG PUMA_WORKERS=1\nARG RACK_ENV=production\n#   Set TZ to avoid glibc wasting time with unneeded syscalls\nENV TZ=\":/etc/localtime\" \\\n    HOME=\"/tmp/\" \\\n    ENV_SETUP=\". scl_source enable ${RUBY_SCL}\" \\\n    RACK_ENV=\"${RACK_ENV}\" \\\n    CONFIG_SAAS=\"${CONFIG_SAAS}\" \\\n    CONFIG_LOG_PATH=\"/tmp/\" \\\n    CONFIG_NOTIFICATION_BATCH=\"1\" \\\n    CONFIG_WORKERS_LOG_FILE=\"/dev/stdout\" \\\n    PUMA_WORKERS=\"${PUMA_WORKERS}\"\nENTRYPOINT [\"/bin/bash\", \"--\", \"/opt/app/entrypoint.sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  3scale Backend CentOS image\n#\n#  This image is meant for flexibility building different configurations.\n#\n#  Knobs you should know about:\n#\n#  - RUBY_SCL: Software Collections Library for the Ruby version used.\n#  - BUILD_DEP_PKGS: Packages needed to build/install the project.\n#  - CACHE_FRIENDLY: Improve caching when rebuilding at the cost of bigger size.\n#  - GEM_UPDATE: Update Rubygems to the latest version.\n#  - BUNDLE_VERSION_MATCH: Install the Bundler version used by the lockfile\n#                          instead of using the SCL version.\n#  - BUNDLE_GEMFILE: Gemfile name to pin Bundler to.\n#  - BUNDLE_WITHOUT: List of Bundler groups to skip.\n#  - DELETE_UNUSED_GEMFILES: Deletes unused Gemfiles in the root directory.\n#  - CONFIG_SAAS: true for a SaaS image. false for an on-premises image.\n#  - PUMA_WORKERS: Default number of Puma workers to serve the app.\n#\n#  Profiles you should use:\n#\n#  You can use variations on the values of arguments, but you usually want one\n#  of the following two use cases:\n#\n#  - Development/Test: just use default values.\n#  - Release:\n#    - CACHE_FRIENDLY: false\n#    - GEM_UPDATE: false\n#    - BUNDLE_VERSION_MATCH: false\n#    - BUNDLE_GEMFILE: Gemfile for SaaS, Gemfile.on_prem for on-premises.\n#    - BUNDLE_WITHOUT: development:test\n#    - DELETE_UNUSED_GEMFILES: true\n#    - CONFIG_SAAS: true for SaaS, false for on-premises.\n#    - PUMA_WORKERS: number of Puma worker processes - depends on intended usage,\n#                    with number of cpus being a good heuristic.\n#\nFROM centos:7\nARG RUBY_SCL=rh-ruby23\nARG BUILD_DEP_PKGS=\"make gcc git\"\n#  Turn off for release mode to produce smaller layers.\nARG CACHE_FRIENDLY=true\n#  Configure yum, install SCL, update, install Ruby and clean.\nRUN sed -i /etc/yum.conf -e '/^\\(clean_requirements_on_remove\\|history_record\\|tsflags\\|logfile\\)=/d' -e 's/^\\(\\[main\\]\\b.*\\)$/\\1\\nclean_requirements_on_remove=1\\nhistory_record=0\\ntsflags=nodocs\\nlogfile=\\/dev\\/null\\n/' /etc/yum.conf \\\n && yum install -y centos-release-scl \\\n && yum -y update \\\n && yum -y install ${RUBY_SCL} ${RUBY_SCL}-ruby-devel \\\n && if test \"${CACHE_FRIENDLY}x\" = \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && yum -y autoremove \\\n && yum -y clean all\nWORKDIR /tmp/app\n#  Gem updating should be turned off for productisation\nARG GEM_UPDATE=true\n#  Bundler should be kept as-is for productisation\nARG BUNDLE_VERSION_MATCH=true\nARG BUNDLE_GEMFILE=Gemfile.on_prem\nARG BUNDLE_WITHOUT=development:test\n#  Install and/or update Rubygems and Bundler, and configure the latter.\nCOPY ${BUNDLE_GEMFILE}.lock ./\nRUN source scl_source enable ${RUBY_SCL} \\\n && if test \"${GEM_UPDATE}x\" = \"truex\" ; then gem update --system -N ; fi \\\n && gem env \\\n && BUNDLED_WITH=$( cat ${BUNDLE_GEMFILE}.lock | grep -A 1 \"^BUNDLED WITH$\" | tail -n 1 | sed -e 's/\\s//g' ;) \\\n && if test \"${BUNDLE_VERSION_MATCH}x\" = \"truex\" ; then gem install bundler -N ; else yum install -y ${RUBY_SCL}-rubygem-bundler \\\n && yum -y autoremove \\\n && yum -y clean all ; fi \\\n && echo Using $( bundle --version ;), originally bundled with ${BUNDLED_WITH} \\\n && bundle config --local silence_root_warning 1 \\\n && bundle config --local disable_shared_gems 1 \\\n && bundle config --local without ${BUNDLE_WITHOUT} \\\n && bundle config --local gemfile ${BUNDLE_GEMFILE}\nCOPY . ./\nARG DELETE_UNUSED_GEMFILES=true\n#  Turn off for productisation\nARG CONFIG_SAAS=false\n#  Builds a clean source tree and deploys it with Bundler.\n#  Sets the right configuration and permissions.\nRUN source scl_source enable ${RUBY_SCL} \\\n && cp -n openshift/3scale_backend.conf /etc/ \\\n && chmod 644 /etc/3scale_backend.conf \\\n && BACKEND_VERSION=$( gem build 3scale_backend.gemspec | sed -n -e 's/^\\s*Version\\:\\s*\\([^[:space:]]*\\)$/\\1/p' ;) \\\n && gem unpack \"3scale_backend-${BACKEND_VERSION}.gem\" --target=/opt/ruby \\\n && cd \"/opt/ruby/3scale_backend-${BACKEND_VERSION}\" \\\n && cp -a /tmp/app/.bundle \"/opt/ruby/3scale_backend-${BACKEND_VERSION}/\" \\\n && if test \"${DELETE_UNUSED_GEMFILES}x\" = \"truex\" ; then echo \"Deleting the following unused Gemfile files:\" ;find . -maxdepth 1 -regex ./Gemfile\"\\(\\..*\\)?\" ! -regex ./$( sed -e 's/[^^]/[&]/g; s/\\^/\\\\^/g' <<< ${BUNDLE_GEMFILE};)\"\\(\\.lock\\)?\" ! -name Gemfile.base -print -delete ; fi \\\n && if test \"${CACHE_FRIENDLY}x\" != \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && bundle install --deployment --jobs $( grep -c processor /proc/cpuinfo ;) \\\n && if ruby -e \"begin; require 'rubygems'; Gem::Specification.find_by_name('bundler').version < Gem::Version.new('1.12.0') \\\n && exit(0); rescue; end; exit(1)\" ; then echo \"[WARNING] Old Bundler requires fixing git gems with extensions (Puma)\" ;PUMA_DIR=$( bundle show puma ;) \\\n && ln -s $( find \"${PUMA_DIR}\" -name puma_http11.so ;) \"${PUMA_DIR}\"/lib/puma ; fi \\\n && yum -y remove ${BUILD_DEP_PKGS} \\\n && yum -y autoremove \\\n && yum -y clean all \\\n && ln -s ${PWD} /opt/app \\\n && if test \"${CONFIG_SAAS}x\" != \"truex\" ; then cp /tmp/app/openshift/config/puma.rb ./config/ ; fi \\\n && cp -n /tmp/app/openshift/backend-cron /usr/local/sbin/backend-cron \\\n && cp -n /tmp/app/openshift/entrypoint.sh ./ \\\n && rm -rf /tmp/app \\\n && mkdir -p -m 0770 /var/run/3scale/ \\\n && mkdir -p -m 0770 /var/log/backend/ \\\n && touch /var/log/backend/3scale_backend{,_worker}.log \\\n && chmod g+rw /var/log/backend/3scale_backend{,_worker}.log\nEXPOSE 3000/tcp\nUSER 1001\nWORKDIR /opt/app\nARG PUMA_WORKERS=1\nARG RACK_ENV=production\n#  Set TZ to avoid glibc wasting time with unneeded syscalls\nENV TZ=\":/etc/localtime\" \\\n    HOME=\"/tmp/\" \\\n    ENV_SETUP=\". scl_source enable ${RUBY_SCL}\" \\\n    RACK_ENV=\"${RACK_ENV}\" \\\n    CONFIG_SAAS=\"${CONFIG_SAAS}\" \\\n    CONFIG_LOG_PATH=\"/tmp/\" \\\n    CONFIG_NOTIFICATION_BATCH=\"1\" \\\n    CONFIG_WORKERS_LOG_FILE=\"/dev/stdout\" \\\n    PUMA_WORKERS=\"${PUMA_WORKERS}\"\nENTRYPOINT [\"/bin/bash\", \"--\", \"/opt/app/entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"58a2ec0621135db97376290ab5bef03d","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   3scale Backend CentOS image\n#\n#   This image is meant for flexibility building different configurations.\n#\n#   Knobs you should know about:\n#\n#   - RUBY_SCL: Software Collections Library for the Ruby version used.\n#   - BUILD_DEP_PKGS: Packages needed to build/install the project.\n#   - CACHE_FRIENDLY: Improve caching when rebuilding at the cost of bigger size.\n#   - GEM_UPDATE: Update Rubygems to the latest version.\n#   - BUNDLE_VERSION_MATCH: Install the Bundler version used by the lockfile\n#                           instead of using the SCL version.\n#   - BUNDLE_GEMFILE: Gemfile name to pin Bundler to.\n#   - BUNDLE_WITHOUT: List of Bundler groups to skip.\n#   - DELETE_UNUSED_GEMFILES: Deletes unused Gemfiles in the root directory.\n#   - CONFIG_SAAS: true for a SaaS image. false for an on-premises image.\n#   - PUMA_WORKERS: Default number of Puma workers to serve the app.\n#\n#   Profiles you should use:\n#\n#   You can use variations on the values of arguments, but you usually want one\n#   of the following two use cases:\n#\n#   - Development/Test: just use default values.\n#   - Release:\n#     - CACHE_FRIENDLY: false\n#     - GEM_UPDATE: false\n#     - BUNDLE_VERSION_MATCH: false\n#     - BUNDLE_GEMFILE: Gemfile for SaaS, Gemfile.on_prem for on-premises.\n#     - BUNDLE_WITHOUT: development:test\n#     - DELETE_UNUSED_GEMFILES: true\n#     - CONFIG_SAAS: true for SaaS, false for on-premises.\n#     - PUMA_WORKERS: number of Puma worker processes - depends on intended usage,\n#                     with number of cpus being a good heuristic.\n#\nFROM centos:7\nARG RUBY_SCL=rh-ruby23\nARG BUILD_DEP_PKGS=\"make gcc git\"\n#   Turn off for release mode to produce smaller layers.\nARG CACHE_FRIENDLY=true\n#   Configure yum, install SCL, update, install Ruby and clean.\nRUN sed -i /etc/yum.conf -e '/^\\(clean_requirements_on_remove\\|history_record\\|tsflags\\|logfile\\)=/d' -e 's/^\\(\\[main\\]\\b.*\\)$/\\1\\nclean_requirements_on_remove=1\\nhistory_record=0\\ntsflags=nodocs\\nlogfile=\\/dev\\/null\\n/' /etc/yum.conf \\\n && yum install -y centos-release-scl \\\n && yum -y update \\\n && yum -y install ${RUBY_SCL} ${RUBY_SCL}-ruby-devel \\\n && if test \"${CACHE_FRIENDLY}x\" = \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && yum -y autoremove \\\n && yum -y clean all\nWORKDIR /tmp/app\n#   Gem updating should be turned off for productisation\nARG GEM_UPDATE=true\n#   Bundler should be kept as-is for productisation\nARG BUNDLE_VERSION_MATCH=true\nARG BUNDLE_GEMFILE=Gemfile.on_prem\nARG BUNDLE_WITHOUT=development:test\n#   Install and/or update Rubygems and Bundler, and configure the latter.\nCOPY ${BUNDLE_GEMFILE}.lock ./\nRUN source scl_source enable ${RUBY_SCL} \\\n && if test \"${GEM_UPDATE}x\" = \"truex\" ; then gem update --system -N ; fi \\\n && gem env \\\n && BUNDLED_WITH=$( cat ${BUNDLE_GEMFILE}.lock | grep -A 1 \"^BUNDLED WITH$\" | tail -n 1 | sed -e 's/\\s//g' ;) \\\n && if test \"${BUNDLE_VERSION_MATCH}x\" = \"truex\" ; then gem install bundler -N ; else yum install -y ${RUBY_SCL}-rubygem-bundler \\\n && yum -y autoremove \\\n && yum -y clean all ; fi \\\n && echo Using $( bundle --version ;), originally bundled with ${BUNDLED_WITH} \\\n && bundle config --local silence_root_warning 1 \\\n && bundle config --local disable_shared_gems 1 \\\n && bundle config --local without ${BUNDLE_WITHOUT} \\\n && bundle config --local gemfile ${BUNDLE_GEMFILE}\nCOPY . ./\nARG DELETE_UNUSED_GEMFILES=true\n#   Turn off for productisation\nARG CONFIG_SAAS=false\n#   Builds a clean source tree and deploys it with Bundler.\n#   Sets the right configuration and permissions.\nRUN source scl_source enable ${RUBY_SCL} \\\n && cp -n openshift/3scale_backend.conf /etc/ \\\n && chmod 644 /etc/3scale_backend.conf \\\n && BACKEND_VERSION=$( gem build 3scale_backend.gemspec | sed -n -e 's/^\\s*Version\\:\\s*\\([^[:space:]]*\\)$/\\1/p' ;) \\\n && gem unpack \"3scale_backend-${BACKEND_VERSION}.gem\" --target=/opt/ruby \\\n && cd \"/opt/ruby/3scale_backend-${BACKEND_VERSION}\" \\\n && cp -a /tmp/app/.bundle \"/opt/ruby/3scale_backend-${BACKEND_VERSION}/\" \\\n && if test \"${DELETE_UNUSED_GEMFILES}x\" = \"truex\" ; then echo \"Deleting the following unused Gemfile files:\" ;find . -maxdepth 1 -regex ./Gemfile\"\\(\\..*\\)?\" ! -regex ./$( sed -e 's/[^^]/[&]/g; s/\\^/\\\\^/g' <<< ${BUNDLE_GEMFILE};)\"\\(\\.lock\\)?\" ! -name Gemfile.base -print -delete ; fi \\\n && if test \"${CACHE_FRIENDLY}x\" != \"truex\" ; then yum -y install ${BUILD_DEP_PKGS} ; fi \\\n && bundle install --deployment --jobs $( grep -c processor /proc/cpuinfo ;) \\\n && if ruby -e \"begin; require 'rubygems'; Gem::Specification.find_by_name('bundler').version < Gem::Version.new('1.12.0') \\\n && exit(0); rescue; end; exit(1)\" ; then echo \"[WARNING] Old Bundler requires fixing git gems with extensions (Puma)\" ;PUMA_DIR=$( bundle show puma ;) \\\n && ln -s $( find \"${PUMA_DIR}\" -name puma_http11.so ;) \"${PUMA_DIR}\"/lib/puma ; fi \\\n && yum -y remove ${BUILD_DEP_PKGS} \\\n && yum -y autoremove \\\n && yum -y clean all \\\n && ln -s ${PWD} /opt/app \\\n && if test \"${CONFIG_SAAS}x\" != \"truex\" ; then cp /tmp/app/openshift/config/puma.rb ./config/ ; fi \\\n && cp -n /tmp/app/openshift/backend-cron /usr/local/sbin/backend-cron \\\n && cp -n /tmp/app/openshift/entrypoint.sh ./ \\\n && rm -rf /tmp/app \\\n && mkdir -p -m 0770 /var/run/3scale/ \\\n && mkdir -p -m 0770 /var/log/backend/ \\\n && touch /var/log/backend/3scale_backend{,_worker}.log \\\n && chmod g+rw /var/log/backend/3scale_backend{,_worker}.log\nEXPOSE 3000/tcp\nUSER 1001\nWORKDIR /opt/app\nARG PUMA_WORKERS=1\nARG RACK_ENV=production\n#   Set TZ to avoid glibc wasting time with unneeded syscalls\nENV TZ=\":/etc/localtime\" \\\n    HOME=\"/tmp/\" \\\n    ENV_SETUP=\". scl_source enable ${RUBY_SCL}\" \\\n    RACK_ENV=\"${RACK_ENV}\" \\\n    CONFIG_SAAS=\"${CONFIG_SAAS}\" \\\n    CONFIG_LOG_PATH=\"/tmp/\" \\\n    CONFIG_NOTIFICATION_BATCH=\"1\" \\\n    CONFIG_WORKERS_LOG_FILE=\"/dev/stdout\" \\\n    PUMA_WORKERS=\"${PUMA_WORKERS}\"\nENTRYPOINT [\"/bin/bash\", \"--\", \"/opt/app/entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"16a4082814dc685cbbf467270479d5b7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/3737c97f2c3124cd74ce3575719579878a6835ac.dockerfile"}