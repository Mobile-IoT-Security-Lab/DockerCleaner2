{"seed":339002434,"processedDockerfileHash":"7d0f9ec099a741b9b8961aaf32536211","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-tensorflow:ff.19.06-py36-cuda9 AS tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends ca-certificates gcc g++ make gfortran vim cmake yasm pkg-config xz-utils wget curl git-core vim-tiny bzip2 zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support libpq-dev libjasper-dev libtiff-dev libjpeg-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libv4l-dev -y\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get update -y \\\n && apt-get install --no-install-recommends nodejs -y\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h \\\n && apt-get install --no-install-recommends libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libtbb-dev libatlas-base-dev libdc1394-22-dev libxvidcore-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev libavresample-dev x264 libx264-dev v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#   Install CUDA-9.0 + cuDNN 7.6.0\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir requests \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir versioneer \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir future \\\n && python3 -m pip install --no-cache-dir tensorwatch\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && unzip opencv-contrib.zip \\\n && mkdir opencv-${OPENCV_VERSION}/cmake_binary \\\n && cd opencv-${OPENCV_VERSION}/cmake_binary \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -D BUILD_TIFF=ON -D BUILD_opencv_java=OFF -D WITH_CUDA=ON -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_OPENGL=ON -D WITH_OPENCL=ON -D WITH_IPP=ON -D WITH_TBB=ON -D WITH_EIGEN=ON -D WITH_V4L=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=$( python3 -c \"import sys; print(sys.prefix)\" ;) -D PYTHON_EXECUTABLE=$( which python3 ;) -D PYTHON_INCLUDE_DIR=$( python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -D PYTHON_PACKAGES_PATH=$( python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. 2>&1 | tee cmake_messages.txt \\\n && make -j${nproc} \\\n && make install \\\n && cd /tmp \\\n && rm -fr opencv*\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl -O https://download.pytorch.org/whl/cu90/torch-1.1.0-cp36-cp36m-linux_x86_64.whl\n#   Jupyter notebook extension \nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\nRUN python3 -m pip install --no-cache-dir opencv-python\nRUN python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir pystan \\\n && python3 -m pip install --no-cache-dir fbprophet \\\n && python3 -m pip install --no-cache-dir torchvision \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir ipywidgets \\\n && python3 -m pip install --no-cache-dir ipyparallel \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && python3 -m pip install --no-cache-dir jupyterthemes \\\n && python3 -m pip install --no-cache-dir jupyter-js-widgets-nbextension \\\n && python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions \\\n && python3 -m pip install --no-cache-dir jupyter_nbextensions_configurator \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir tf2onnx \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#   python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\nRUN jupyter nbextensions_configurator enable \\\n && jupyter contrib nbextension install \\\n && jupyter nbextension enable --py --sys-prefix widgetsnbextension \\\n && jupyter contrib nbextension install \\\n && jupyter serverextension enable --py jupyterlab --sys-prefix \\\n && jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n && git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding \\\n && jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n#   Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"Lablup Full Feature 19.06 on Python 3.6 (CUDA 9.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#   for apt-get installation using /tmp\nRUN mkdir -p /tmp \\\n && chown root:root /tmp \\\n && chmod 1777 /tmp\n#   Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#   Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/local/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\nWORKDIR /home/work\n#   vim: ft=dockerfile\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-tensorflow:ff.19.06-py36-cuda9 AS tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update -y \\\n && apt-get install ca-certificates gcc g++ make gfortran vim cmake yasm pkg-config xz-utils wget curl git-core vim-tiny bzip2 zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support libpq-dev libjasper-dev libtiff-dev libjpeg-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libv4l-dev -y\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get update -y \\\n && apt-get install nodejs -y\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h \\\n && apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libtbb-dev libatlas-base-dev libdc1394-22-dev libxvidcore-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev libavresample-dev x264 libx264-dev v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#  Install CUDA-9.0 + cuDNN 7.6.0\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir requests \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir versioneer \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir future \\\n && python3 -m pip install --no-cache-dir tensorwatch\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && unzip opencv-contrib.zip \\\n && mkdir opencv-${OPENCV_VERSION}/cmake_binary \\\n && cd opencv-${OPENCV_VERSION}/cmake_binary \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -D BUILD_TIFF=ON -D BUILD_opencv_java=OFF -D WITH_CUDA=ON -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_OPENGL=ON -D WITH_OPENCL=ON -D WITH_IPP=ON -D WITH_TBB=ON -D WITH_EIGEN=ON -D WITH_V4L=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=$( python3 -c \"import sys; print(sys.prefix)\" ;) -D PYTHON_EXECUTABLE=$( which python3 ;) -D PYTHON_INCLUDE_DIR=$( python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -D PYTHON_PACKAGES_PATH=$( python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. 2>&1 | tee cmake_messages.txt \\\n && make -j${nproc} \\\n && make install \\\n && cd /tmp \\\n && rm -fr opencv*\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl -O https://download.pytorch.org/whl/cu90/torch-1.1.0-cp36-cp36m-linux_x86_64.whl\n#  Jupyter notebook extension \nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\nRUN python3 -m pip install --no-cache-dir opencv-python\nRUN python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir pystan \\\n && python3 -m pip install --no-cache-dir fbprophet \\\n && python3 -m pip install --no-cache-dir torchvision \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir ipywidgets \\\n && python3 -m pip install --no-cache-dir ipyparallel \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && python3 -m pip install --no-cache-dir jupyterthemes \\\n && python3 -m pip install --no-cache-dir jupyter-js-widgets-nbextension \\\n && python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions \\\n && python3 -m pip install --no-cache-dir jupyter_nbextensions_configurator \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir tf2onnx \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#  python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\nRUN jupyter nbextensions_configurator enable \\\n && jupyter contrib nbextension install \\\n && jupyter nbextension enable --py --sys-prefix widgetsnbextension \\\n && jupyter contrib nbextension install \\\n && jupyter serverextension enable --py jupyterlab --sys-prefix \\\n && jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n && git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding \\\n && jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n#  Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"Lablup Full Feature 19.06 on Python 3.6 (CUDA 9.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#  for apt-get installation using /tmp\nRUN mkdir -p /tmp \\\n && chown root:root /tmp \\\n && chmod 1777 /tmp\n#  Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#  Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/local/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\nWORKDIR /home/work\n#  vim: ft=dockerfile\n","injectedSmells":[],"originalDockerfileHash":"3bb77b60cf22aa7620d3ee3b1434c442","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM lablup/kernel-base:python3.6 AS python-binary\nFROM lablup/common-tensorflow:ff.19.06-py36-cuda9 AS tf-binary\nFROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04\nMAINTAINER Mario Cho \"m.cho@lablup.com\"\nRUN apt-get update -y \\\n && apt-get install software-properties-common -y \\\n && add-apt-repository -y \"deb http://security.ubuntu.com/ubuntu xenial-security main\" \\\n && apt-get update -y \\\n && apt-get install ca-certificates gcc g++ make gfortran vim cmake yasm pkg-config xz-utils wget curl git-core vim-tiny bzip2 zip unzip libssl-dev libmpdec2 proj-bin libproj-dev libgeos-dev libgeos++-dev mime-support libpq-dev libjasper-dev libtiff-dev libjpeg-dev libpng-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libv4l-dev -y\nRUN curl -sL https://deb.nodesource.com/setup_10.x | bash - \\\n && apt-get update -y \\\n && apt-get install nodejs -y\nRUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h \\\n && apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libtbb-dev libatlas-base-dev libdc1394-22-dev libxvidcore-dev libfaac-dev libmp3lame-dev libtheora-dev libvorbis-dev libxvidcore-dev libopencore-amrnb-dev libopencore-amrwb-dev libavresample-dev x264 libx264-dev v4l-utils libprotobuf-dev protobuf-compiler libgoogle-glog-dev libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/\nENV PYTHONUNBUFFERED=\"1\" \\\n    LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/nvidia/lib64\" \\\n    PATH=\"/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" \\\n    LANG=\"C.UTF-8\"\n#   Install CUDA-9.0 + cuDNN 7.6.0\nRUN ln -s /usr/local/cuda-9.0 /usr/local/cuda \\\n && ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so \\\n && ldconfig\nCOPY --from=python-binary /python.tar.gz /\nRUN cd / ; tar xzpf python.tar.gz ; rm python.tar.gz ; ldconfig\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3 \\\n && python3 -m pip install --no-cache-dir -U setuptools \\\n && python3 -m pip install --no-cache-dir wheel \\\n && python3 -m pip install --no-cache-dir h5py \\\n && python3 -m pip install --no-cache-dir Cython \\\n && python3 -m pip install --no-cache-dir requests \\\n && python3 -m pip install --no-cache-dir numpy scipy \\\n && python3 -m pip install --no-cache-dir pyzmq simplejson msgpack-python uvloop \\\n && python3 -m pip install --no-cache-dir aiozmq dataclasses tabulate \\\n && python3 -m pip install --no-cache-dir namedlist six \"python-dateutil>=2\" \\\n && python3 -m pip install --no-cache-dir versioneer \\\n && python3 -m pip install --no-cache-dir pyproj Cartopy \\\n && python3 -m pip install --no-cache-dir pandas \\\n && python3 -m pip install --no-cache-dir seaborn \\\n && python3 -m pip install --no-cache-dir networkx cvxpy \\\n && python3 -m pip install --no-cache-dir scikit-learn scikit-image \\\n && python3 -m pip install --no-cache-dir pygments \\\n && python3 -m pip install --no-cache-dir future \\\n && python3 -m pip install --no-cache-dir tensorwatch\nWORKDIR /tmp\nENV OPENCV_VERSION=\"4.1.0\"\nRUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \\\n && wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \\\n && unzip ${OPENCV_VERSION}.zip \\\n && unzip opencv-contrib.zip \\\n && mkdir opencv-${OPENCV_VERSION}/cmake_binary \\\n && cd opencv-${OPENCV_VERSION}/cmake_binary \\\n && cmake -DCMAKE_BUILD_TYPE=RELEASE -D BUILD_TIFF=ON -D BUILD_opencv_java=OFF -D WITH_CUDA=ON -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-9.0 -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_OPENGL=ON -D WITH_OPENCL=ON -D WITH_IPP=ON -D WITH_TBB=ON -D WITH_EIGEN=ON -D WITH_V4L=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D OPENCV_EXTRA_MODULES_PATH=\"../../opencv_contrib-4.1.0/modules\" -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=$( python3 -c \"import sys; print(sys.prefix)\" ;) -D PYTHON_EXECUTABLE=$( which python3 ;) -D PYTHON_INCLUDE_DIR=$( python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\" ;) -D PYTHON_PACKAGES_PATH=$( python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\" ;) .. 2>&1 | tee cmake_messages.txt \\\n && make -j${nproc} \\\n && make install \\\n && cd /tmp \\\n && rm -fr opencv*\nCOPY --from=tf-binary /tmp/tensorflow_pkg/tensorflow-*.whl /tmp\nRUN curl -O https://download.pytorch.org/whl/cu90/torch-1.1.0-cp36-cp36m-linux_x86_64.whl\n#   Jupyter notebook extension \nRUN mkdir -p /home/work/.jupyter/nbextension\nWORKDIR /home/work/.jupyter/nbextension\nRUN python3 -m pip install --no-cache-dir opencv-python\nRUN python3 -m pip install --no-cache-dir wheel /tmp/*.whl \\\n && python3 -m pip install --no-cache-dir pystan \\\n && python3 -m pip install --no-cache-dir fbprophet \\\n && python3 -m pip install --no-cache-dir torchvision \\\n && python3 -m pip install --no-cache-dir jupyter \\\n && python3 -m pip install --no-cache-dir keras \\\n && python3 -m pip install --no-cache-dir keras_applications \\\n && python3 -m pip install --no-cache-dir keras_preprocessing \\\n && python3 -m pip install --no-cache-dir ipython \\\n && python3 -m pip install --no-cache-dir ipywidgets \\\n && python3 -m pip install --no-cache-dir ipyparallel \\\n && python3 -m pip install --no-cache-dir jupyterlab \\\n && python3 -m pip install --no-cache-dir jupyterthemes \\\n && python3 -m pip install --no-cache-dir jupyter-js-widgets-nbextension \\\n && python3 -m pip install --no-cache-dir jupyter_contrib_nbextensions \\\n && python3 -m pip install --no-cache-dir jupyter_nbextensions_configurator \\\n && python3 -m pip install --no-cache-dir matplotlib bokeh \\\n && python3 -m pip install --no-cache-dir tf2onnx \\\n && rm -rf /root/.cache \\\n && rm -f /tmp/*.whl\n#   python alternative support\nRUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2\nRUN jupyter nbextensions_configurator enable \\\n && jupyter contrib nbextension install \\\n && jupyter nbextension enable --py --sys-prefix widgetsnbextension \\\n && jupyter contrib nbextension install \\\n && jupyter serverextension enable --py jupyterlab --sys-prefix \\\n && jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n && git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding \\\n && jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding\n#   Install ipython kernelspec\nRUN python3 -m ipykernel install --display-name \"Lablup Full Feature 19.06 on Python 3.6 (CUDA 9.0)\" \\\n && cat /usr/local/share/jupyter/kernels/python3/kernel.json\n#   for apt-get installation using /tmp\nRUN mkdir -p /tmp \\\n && chown root:root /tmp \\\n && chmod 1777 /tmp\n#   Install Jupyter notebook logo\nRUN mkdir -p /home/work/.jupyter/custom\nCOPY custom.css /home/work/.jupyter/custom/custom.css\nCOPY logo.svg /home/work/.jupyter/custom/logo.svg\n#   Backend.AI specifics\nLABEL ai.backend.kernelspec=\"1\" \\\n      ai.backend.envs.corecount=\"OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC\" \\\n      ai.backend.features=\"batch query uid-match user-input\" \\\n      ai.backend.base-distro=\"ubuntu16.04\" \\\n      ai.backend.resource.min.cpu=\"1\" \\\n      ai.backend.resource.min.mem=\"1g\" \\\n      ai.backend.resource.min.cuda.device=\"1\" \\\n      ai.backend.resource.min.cuda.shares=\"0.1\" \\\n      ai.backend.runtime-type=\"python\" \\\n      ai.backend.runtime-path=\"/usr/local/bin/python\" \\\n      ai.backend.service-ports=\"ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090\"\nCOPY policy.yml /etc/backend.ai/jail/policy.yml\nWORKDIR /home/work\n#   vim: ft=dockerfile\n","originalDockerfileUglifiedHash":"ec14715541961ef1387efcecb75ffb7f","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/67326f0a80322d09de2d04da965160122dd652c4.dockerfile"}