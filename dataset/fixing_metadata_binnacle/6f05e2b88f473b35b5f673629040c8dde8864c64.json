{"seed":1657290254,"processedDockerfileHash":"460a872a6d0951a481a69240a8c6a3c7","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM datascienceschool/ubuntu:latest\nMAINTAINER \"Joel Kim\" admin@datascienceschool.net\nARG USER_ID=dockeruser\nENV USER_ID=\"$USER_ID\"\n#  ###########################################################################\n#   R\n#  ###############################################################################\nUSER root\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' \\\n && : \\\n && echo\n#   R and RStudio-server\nENV RSTUDIOSERVER_VERSION=\"1.2.1335\"\nRUN (apt-get update ;apt-get install --no-install-recommends r-base=4.2.2.20221110-2build1 r-base-dev=4.2.2.20221110-2build1 -y -q ) \\\n && mkdir -p /download \\\n && cd /download \\\n && wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && gdebi --n rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && rm -rf /download\n#   Settings for RStudio-Server\nEXPOSE 8787/tcp\n#   enable R package install\nRUN chmod a+w /usr/local/lib/R/site-library\n#  ###############################################################################\n#   Node.js\n#  ###############################################################################\nUSER root\nRUN curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh \\\n && /bin/bash nodesource_setup.sh \\\n && DEBIAN_FRONTEND=noninteractive apt install -y -q nodejs \\\n && rm -rf nodesource_setup.sh \\\n && npm install npm@latest -g \\\n && npm install ijavascript@5.2.1 -g --unsafe-perm=true --allow-root \\\n && echo \"\"\n#  ###############################################################################\n#   Python\n#  ###############################################################################\n#   Anaconda config\nENV ANACONDA_PATH=\"/home/$USER_ID/anaconda3\"\nENV ANACONDA_INSTALLER=\"Anaconda3-2019.03-Linux-x86_64.sh\"\n#   add path to root account\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\n#   Change user to $USER_ID\nUSER $USER_ID\nWORKDIR /home/$USER_ID\nENV HOME=\"/home/$USER_ID\"\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\nRUN echo \"export PATH=$PATH:$ANACONDA_PATH/bin\" | tee -a /home/$USER_ID/.bashrc\n#   Anaconda install\nRUN mkdir -p /home/$USER_ID/download \\\n && cd /home/$USER_ID/download \\\n && wget https://repo.anaconda.com/archive/$ANACONDA_INSTALLER -nv -q \\\n && /bin/bash ~/download/$ANACONDA_INSTALLER -b \\\n && conda update --yes conda \\\n && conda update --yes anaconda \\\n && conda update --yes --all \\\n && conda clean --yes --all \\\n && rm -rf /home/$USER_ID/download\n#  ###############################################################################\n#   OpenCV\n#  ###############################################################################\nUSER root\nENV CV_VERSION=\"4.1.0\"\nRUN cd /home/$USER_ID \\\n && wget https://github.com/opencv/opencv/archive/${CV_VERSION}.zip -O opencv.zip \\\n && wget https://github.com/opencv/opencv_contrib/archive/${CV_VERSION}.zip -O opencv_contrib.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && mv opencv-${CV_VERSION} opencv \\\n && mv opencv_contrib-${CV_VERSION} opencv_contrib \\\n && cd /home/$USER_ID/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/$USER_ID/opencv_contrib/modules -D PYTHON_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON3_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON_INCLUDE_DIR=$ANACONDA_PATH/include/python3.7m -D PYTHON_LIBRARY=$ANACONDA_PATH/lib/libpython3.7m.so -D OPENCV_PYTHON3_INSTALL_PATH=$ANACONDA_PATH/lib/python3.7/site-packages -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF .. \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd /home/$USER_ID \\\n && rm -rf opencv.zip opencv_contrib.zip opencv opencv_contrib \\\n && echo\n#  ###############################################################################\n#   Python Packages\n#  ###############################################################################\nARG CACHEBUST=1\nCOPY pkgs_conda.txt /home/$USER_ID/download/pkgs_conda.txt\nCOPY pkgs_conda-forge.txt /home/$USER_ID/download/pkgs_conda-forge.txt\nCOPY pkgs_pip.txt /home/$USER_ID/download/pkgs_pip.txt\nCOPY install_pkg.sh /home/$USER_ID/download/install_pkg.sh\n#   fix ownership\nUSER root\nRUN mkdir -p /home/$USER_ID/.config \\\n && mkdir -p /home/$USER_ID/.config/git \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.config\nUSER $USER_ID\nRUN cd /home/$USER_ID/download \\\n && source ./install_pkg.sh\n#   tensorboard port\nEXPOSE 6006/tcp\n#  ###############################################################################\n#   Jupyter Notebook Settings\n#  ###############################################################################\nEXPOSE 8888/tcp\nRUN ipython profile create\nCOPY ipython_config.py /home/$USER_ID/.ipython/profile_default/ipython_config.py\nCOPY ipython_kernel_config.py /home/$USER_ID/.ipython/profile_default/ipython_kernel_config.py\nCOPY 00.py /home/$USER_ID/.ipython/profile_default/startup/00.py\nRUN jupyter notebook --generate-config\nUSER root\nRUN chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chmod -R 755 /home/$USER_ID/.jupyter\nUSER $USER_ID\nRUN echo \"c.NotebookApp.notebook_dir = u\\\"/home/$USER_ID\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.token = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.password = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.iopub_data_rate_limit = 10000000\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py\n#   install ipython magics\nRUN pip install git+git://github.com/joelkim/ipython-tikzmagic.git\n#   Node.js kernel\nRUN ijsinstall\n#   R kernel\nUSER root\nRUN echo 'install.packages(c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"pbdZMQ\\\",\\\"devtools\\\"),repos=c(\\\"http://cran.rstudio.com\\\"))' | xargs R --vanilla --slave -e \\\n && echo 'devtools::install_github(paste0(\\\"IRkernel/\\\",c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"IRkernel\\\")))' | xargs R --vanilla --slave -e \\\n && echo 'IRkernel::installspec(displayname=\\\"R\\\",user=FALSE)' | xargs R --vanilla --slave -e \\\n && echo\n#  ###############################################################################\n#   Set TLS certifates\n#  ###############################################################################\nUSER root\nRUN mkdir -p /etc/pki/tls/certs/ \\\n && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n#  ###############################################################################\n#   Postgresql Settings\n#  ###############################################################################\nUSER root\nCOPY \"./.postgres_db_setup.sql\" \"/home/$USER_ID/\"\nEXPOSE 5432/tcp\n#  ###############################################################################\n#   Supervisor Settings\n#  ###############################################################################\nUSER root\nCOPY supervisord.conf /etc/supervisor/supervisord.conf\nRUN sed -i \"s/USER_ID/$USER_ID/g\" /etc/supervisor/supervisord.conf \\\n && mkdir -p /var/log/supervisor \\\n && chown $USER_ID:$USER_ID /var/log/supervisor\n#  ###############################################################################\n#   Data\n#  ###############################################################################\nUSER $USER_ID\nRUN mkdir -p /home/$USER_ID/data \\\n && cd /home/$USER_ID/data \\\n && echo\n#  ###############################################################################\n#   Postprocessing\n#  ###############################################################################\nCOPY \"./.docker-entrypoint.sh\" \"/home/$USER_ID/\"\n#   fix ownership\nUSER root\nRUN chown syslog:syslog /etc/rsyslog.conf \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/.* \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/* \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.ipython \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.local \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.npm \\\n && echo \"\"\n#   Jupyter notebook extension setting\nUSER $USER_ID\nRUN jupyter contrib nbextension install --user \\\n && jupyter nbextensions_configurator enable --user \\\n && jupyter nbextension enable --py widgetsnbextension \\\n && jupyter nbextension install --user --py ipyparallel \\\n && jupyter nbextension enable --user --py ipyparallel \\\n && jupyter serverextension enable --user --py ipyparallel \\\n && ipcluster nbextension enable --user \\\n && jupyter serverextension enable ipyparallel.nbextension\n#  ###############################################################################\n#   Fixing\n#  ###############################################################################\n#   ImageMagick security fix\nUSER root\nCOPY policy.xml /etc/ImageMagick-6/policy.xml\n#   statsmodels incompatibility with scipy 1.3.0\nUSER $USER_ID\nRUN pip install git+https://github.com/statsmodels/statsmodels -U\n#  ###############################################################################\n#   Tini\n#  ###############################################################################\n#   Tini operates as a process subreaper for jupyter. This prevents kernel crashes.\nUSER root\nRUN which wget &> /dev/null || (apt-get update ;apt-get install --no-install-recommends wget=1.20.3 ) ; wget --no-verbose --output-document /usr/bin/tini https://github.com/krallin/tini/releases/download/v0.18.0/tini\nRUN chmod a+x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/bin/bash\", \".docker-entrypoint.sh\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM datascienceschool/ubuntu:latest\nMAINTAINER \"Joel Kim\" admin@datascienceschool.net\nARG USER_ID=dockeruser\nENV USER_ID=\"$USER_ID\"\n# ###########################################################################\n#  R\n# ###############################################################################\nUSER root\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' \\\n && apt-get update -y -q \\\n && echo\n#  R and RStudio-server\nENV RSTUDIOSERVER_VERSION=\"1.2.1335\"\nRUN apt-get install -y -q r-base r-base-dev \\\n && mkdir -p /download \\\n && cd /download \\\n && wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && gdebi --n rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && rm -rf /download\n#  Settings for RStudio-Server\nEXPOSE 8787/tcp\n#  enable R package install\nRUN chmod a+w /usr/local/lib/R/site-library\n# ###############################################################################\n#  Node.js\n# ###############################################################################\nUSER root\nRUN curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh \\\n && /bin/bash nodesource_setup.sh \\\n && DEBIAN_FRONTEND=noninteractive apt install -y -q nodejs \\\n && rm -rf nodesource_setup.sh \\\n && npm install npm@latest -g \\\n && npm install ijavascript -g --unsafe-perm=true --allow-root \\\n && echo \"\"\n# ###############################################################################\n#  Python\n# ###############################################################################\n#  Anaconda config\nENV ANACONDA_PATH=\"/home/$USER_ID/anaconda3\"\nENV ANACONDA_INSTALLER=\"Anaconda3-2019.03-Linux-x86_64.sh\"\n#  add path to root account\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\n#  Change user to $USER_ID\nUSER $USER_ID\nWORKDIR /home/$USER_ID\nENV HOME=\"/home/$USER_ID\"\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\nRUN echo \"export PATH=$PATH:$ANACONDA_PATH/bin\" | tee -a /home/$USER_ID/.bashrc\n#  Anaconda install\nRUN mkdir -p /home/$USER_ID/download \\\n && cd /home/$USER_ID/download \\\n && wget https://repo.anaconda.com/archive/$ANACONDA_INSTALLER -nv -q \\\n && /bin/bash ~/download/$ANACONDA_INSTALLER -b \\\n && conda update --yes conda \\\n && conda update --yes anaconda \\\n && conda update --yes --all \\\n && conda clean --yes --all \\\n && rm -rf /home/$USER_ID/download\n# ###############################################################################\n#  OpenCV\n# ###############################################################################\nUSER root\nENV CV_VERSION=\"4.1.0\"\nRUN cd /home/$USER_ID \\\n && wget https://github.com/opencv/opencv/archive/${CV_VERSION}.zip -O opencv.zip \\\n && wget https://github.com/opencv/opencv_contrib/archive/${CV_VERSION}.zip -O opencv_contrib.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && mv opencv-${CV_VERSION} opencv \\\n && mv opencv_contrib-${CV_VERSION} opencv_contrib \\\n && cd /home/$USER_ID/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/$USER_ID/opencv_contrib/modules -D PYTHON_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON3_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON_INCLUDE_DIR=$ANACONDA_PATH/include/python3.7m -D PYTHON_LIBRARY=$ANACONDA_PATH/lib/libpython3.7m.so -D OPENCV_PYTHON3_INSTALL_PATH=$ANACONDA_PATH/lib/python3.7/site-packages -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF .. \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd /home/$USER_ID \\\n && rm -rf opencv.zip opencv_contrib.zip opencv opencv_contrib \\\n && echo\n# ###############################################################################\n#  Python Packages\n# ###############################################################################\nARG CACHEBUST=1\nCOPY pkgs_conda.txt /home/$USER_ID/download/pkgs_conda.txt\nCOPY pkgs_conda-forge.txt /home/$USER_ID/download/pkgs_conda-forge.txt\nCOPY pkgs_pip.txt /home/$USER_ID/download/pkgs_pip.txt\nCOPY install_pkg.sh /home/$USER_ID/download/install_pkg.sh\n#  fix ownership\nUSER root\nRUN mkdir -p /home/$USER_ID/.config \\\n && mkdir -p /home/$USER_ID/.config/git \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.config\nUSER $USER_ID\nRUN cd /home/$USER_ID/download \\\n && source ./install_pkg.sh\n#  tensorboard port\nEXPOSE 6006/tcp\n# ###############################################################################\n#  Jupyter Notebook Settings\n# ###############################################################################\nEXPOSE 8888/tcp\nRUN ipython profile create\nCOPY ipython_config.py /home/$USER_ID/.ipython/profile_default/ipython_config.py\nCOPY ipython_kernel_config.py /home/$USER_ID/.ipython/profile_default/ipython_kernel_config.py\nCOPY 00.py /home/$USER_ID/.ipython/profile_default/startup/00.py\nRUN jupyter notebook --generate-config\nUSER root\nRUN chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chmod -R 755 /home/$USER_ID/.jupyter\nUSER $USER_ID\nRUN echo \"c.NotebookApp.notebook_dir = u\\\"/home/$USER_ID\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.token = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.password = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.iopub_data_rate_limit = 10000000\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py\n#  install ipython magics\nRUN pip install git+git://github.com/joelkim/ipython-tikzmagic.git\n#  Node.js kernel\nRUN ijsinstall\n#  R kernel\nUSER root\nRUN echo 'install.packages(c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"pbdZMQ\\\",\\\"devtools\\\"),repos=c(\\\"http://cran.rstudio.com\\\"))' | xargs R --vanilla --slave -e \\\n && echo 'devtools::install_github(paste0(\\\"IRkernel/\\\",c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"IRkernel\\\")))' | xargs R --vanilla --slave -e \\\n && echo 'IRkernel::installspec(displayname=\\\"R\\\",user=FALSE)' | xargs R --vanilla --slave -e \\\n && echo\n# ###############################################################################\n#  Set TLS certifates\n# ###############################################################################\nUSER root\nRUN mkdir -p /etc/pki/tls/certs/ \\\n && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n# ###############################################################################\n#  Postgresql Settings\n# ###############################################################################\nUSER root\nADD \"./.postgres_db_setup.sql\" \"/home/$USER_ID/\"\nEXPOSE 5432/tcp\n# ###############################################################################\n#  Supervisor Settings\n# ###############################################################################\nUSER root\nCOPY supervisord.conf /etc/supervisor/supervisord.conf\nRUN sed -i \"s/USER_ID/$USER_ID/g\" /etc/supervisor/supervisord.conf \\\n && mkdir -p /var/log/supervisor \\\n && chown $USER_ID:$USER_ID /var/log/supervisor\n# ###############################################################################\n#  Data\n# ###############################################################################\nUSER $USER_ID\nRUN mkdir -p /home/$USER_ID/data \\\n && cd /home/$USER_ID/data \\\n && echo\n# ###############################################################################\n#  Postprocessing\n# ###############################################################################\nADD \"./.docker-entrypoint.sh\" \"/home/$USER_ID/\"\n#  fix ownership\nUSER root\nRUN chown syslog:syslog /etc/rsyslog.conf \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/.* \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/* \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.ipython \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.local \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.npm \\\n && echo \"\"\n#  Jupyter notebook extension setting\nUSER $USER_ID\nRUN jupyter contrib nbextension install --user \\\n && jupyter nbextensions_configurator enable --user \\\n && jupyter nbextension enable --py widgetsnbextension \\\n && jupyter nbextension install --user --py ipyparallel \\\n && jupyter nbextension enable --user --py ipyparallel \\\n && jupyter serverextension enable --user --py ipyparallel \\\n && ipcluster nbextension enable --user \\\n && jupyter serverextension enable ipyparallel.nbextension\n# ###############################################################################\n#  Fixing\n# ###############################################################################\n#  ImageMagick security fix\nUSER root\nCOPY policy.xml /etc/ImageMagick-6/policy.xml\n#  statsmodels incompatibility with scipy 1.3.0\nUSER $USER_ID\nRUN pip install git+https://github.com/statsmodels/statsmodels -U\n# ###############################################################################\n#  Tini\n# ###############################################################################\n#  Tini operates as a process subreaper for jupyter. This prevents kernel crashes.\nUSER root\nADD https://github.com/krallin/tini/releases/download/v0.18.0/tini /usr/bin/tini\nRUN chmod a+x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/bin/bash\", \".docker-entrypoint.sh\"]\n","injectedSmells":[],"originalDockerfileHash":"a73a6ffb0bb6bc4a38a0dfb762c83e0e","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM datascienceschool/ubuntu:latest\nMAINTAINER \"Joel Kim\" admin@datascienceschool.net\nARG USER_ID=dockeruser\nENV USER_ID=\"$USER_ID\"\n#  ###########################################################################\n#   R\n#  ###############################################################################\nUSER root\nRUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \\\n && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' \\\n && apt-get update -y -q \\\n && echo\n#   R and RStudio-server\nENV RSTUDIOSERVER_VERSION=\"1.2.1335\"\nRUN apt-get install r-base r-base-dev -y -q \\\n && mkdir -p /download \\\n && cd /download \\\n && wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && gdebi --n rstudio-server-${RSTUDIOSERVER_VERSION}-amd64.deb \\\n && rm -rf /download\n#   Settings for RStudio-Server\nEXPOSE 8787/tcp\n#   enable R package install\nRUN chmod a+w /usr/local/lib/R/site-library\n#  ###############################################################################\n#   Node.js\n#  ###############################################################################\nUSER root\nRUN curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh \\\n && /bin/bash nodesource_setup.sh \\\n && DEBIAN_FRONTEND=noninteractive apt install -y -q nodejs \\\n && rm -rf nodesource_setup.sh \\\n && npm install npm@latest -g \\\n && npm install ijavascript -g --unsafe-perm=true --allow-root \\\n && echo \"\"\n#  ###############################################################################\n#   Python\n#  ###############################################################################\n#   Anaconda config\nENV ANACONDA_PATH=\"/home/$USER_ID/anaconda3\"\nENV ANACONDA_INSTALLER=\"Anaconda3-2019.03-Linux-x86_64.sh\"\n#   add path to root account\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\n#   Change user to $USER_ID\nUSER $USER_ID\nWORKDIR /home/$USER_ID\nENV HOME=\"/home/$USER_ID\"\nENV PATH=\"$ANACONDA_PATH/bin:$PATH\"\nRUN echo \"export PATH=$PATH:$ANACONDA_PATH/bin\" | tee -a /home/$USER_ID/.bashrc\n#   Anaconda install\nRUN mkdir -p /home/$USER_ID/download \\\n && cd /home/$USER_ID/download \\\n && wget https://repo.anaconda.com/archive/$ANACONDA_INSTALLER -nv -q \\\n && /bin/bash ~/download/$ANACONDA_INSTALLER -b \\\n && conda update --yes conda \\\n && conda update --yes anaconda \\\n && conda update --yes --all \\\n && conda clean --yes --all \\\n && rm -rf /home/$USER_ID/download\n#  ###############################################################################\n#   OpenCV\n#  ###############################################################################\nUSER root\nENV CV_VERSION=\"4.1.0\"\nRUN cd /home/$USER_ID \\\n && wget https://github.com/opencv/opencv/archive/${CV_VERSION}.zip -O opencv.zip \\\n && wget https://github.com/opencv/opencv_contrib/archive/${CV_VERSION}.zip -O opencv_contrib.zip \\\n && unzip opencv.zip \\\n && unzip opencv_contrib.zip \\\n && mv opencv-${CV_VERSION} opencv \\\n && mv opencv_contrib-${CV_VERSION} opencv_contrib \\\n && cd /home/$USER_ID/opencv \\\n && mkdir build \\\n && cd build \\\n && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/$USER_ID/opencv_contrib/modules -D PYTHON_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON3_EXECUTABLE=$ANACONDA_PATH/bin/python -D PYTHON_INCLUDE_DIR=$ANACONDA_PATH/include/python3.7m -D PYTHON_LIBRARY=$ANACONDA_PATH/lib/libpython3.7m.so -D OPENCV_PYTHON3_INSTALL_PATH=$ANACONDA_PATH/lib/python3.7/site-packages -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF .. \\\n && make \\\n && make install \\\n && ldconfig \\\n && cd /home/$USER_ID \\\n && rm -rf opencv.zip opencv_contrib.zip opencv opencv_contrib \\\n && echo\n#  ###############################################################################\n#   Python Packages\n#  ###############################################################################\nARG CACHEBUST=1\nCOPY pkgs_conda.txt /home/$USER_ID/download/pkgs_conda.txt\nCOPY pkgs_conda-forge.txt /home/$USER_ID/download/pkgs_conda-forge.txt\nCOPY pkgs_pip.txt /home/$USER_ID/download/pkgs_pip.txt\nCOPY install_pkg.sh /home/$USER_ID/download/install_pkg.sh\n#   fix ownership\nUSER root\nRUN mkdir -p /home/$USER_ID/.config \\\n && mkdir -p /home/$USER_ID/.config/git \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.config\nUSER $USER_ID\nRUN cd /home/$USER_ID/download \\\n && source ./install_pkg.sh\n#   tensorboard port\nEXPOSE 6006/tcp\n#  ###############################################################################\n#   Jupyter Notebook Settings\n#  ###############################################################################\nEXPOSE 8888/tcp\nRUN ipython profile create\nCOPY ipython_config.py /home/$USER_ID/.ipython/profile_default/ipython_config.py\nCOPY ipython_kernel_config.py /home/$USER_ID/.ipython/profile_default/ipython_kernel_config.py\nCOPY 00.py /home/$USER_ID/.ipython/profile_default/startup/00.py\nRUN jupyter notebook --generate-config\nUSER root\nRUN chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chmod -R 755 /home/$USER_ID/.jupyter\nUSER $USER_ID\nRUN echo \"c.NotebookApp.notebook_dir = u\\\"/home/$USER_ID\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.token = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.password = u\\\"\\\"\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py \\\n && echo \"c.NotebookApp.iopub_data_rate_limit = 10000000\" | tee -a /home/$USER_ID/.jupyter/jupyter_notebook_config.py\n#   install ipython magics\nRUN pip install git+git://github.com/joelkim/ipython-tikzmagic.git\n#   Node.js kernel\nRUN ijsinstall\n#   R kernel\nUSER root\nRUN echo 'install.packages(c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"pbdZMQ\\\",\\\"devtools\\\"),repos=c(\\\"http://cran.rstudio.com\\\"))' | xargs R --vanilla --slave -e \\\n && echo 'devtools::install_github(paste0(\\\"IRkernel/\\\",c(\\\"repr\\\",\\\"IRdisplay\\\",\\\"IRkernel\\\")))' | xargs R --vanilla --slave -e \\\n && echo 'IRkernel::installspec(displayname=\\\"R\\\",user=FALSE)' | xargs R --vanilla --slave -e \\\n && echo\n#  ###############################################################################\n#   Set TLS certifates\n#  ###############################################################################\nUSER root\nRUN mkdir -p /etc/pki/tls/certs/ \\\n && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n#  ###############################################################################\n#   Postgresql Settings\n#  ###############################################################################\nUSER root\nADD \"./.postgres_db_setup.sql\" \"/home/$USER_ID/\"\nEXPOSE 5432/tcp\n#  ###############################################################################\n#   Supervisor Settings\n#  ###############################################################################\nUSER root\nCOPY supervisord.conf /etc/supervisor/supervisord.conf\nRUN sed -i \"s/USER_ID/$USER_ID/g\" /etc/supervisor/supervisord.conf \\\n && mkdir -p /var/log/supervisor \\\n && chown $USER_ID:$USER_ID /var/log/supervisor\n#  ###############################################################################\n#   Data\n#  ###############################################################################\nUSER $USER_ID\nRUN mkdir -p /home/$USER_ID/data \\\n && cd /home/$USER_ID/data \\\n && echo\n#  ###############################################################################\n#   Postprocessing\n#  ###############################################################################\nADD \"./.docker-entrypoint.sh\" \"/home/$USER_ID/\"\n#   fix ownership\nUSER root\nRUN chown syslog:syslog /etc/rsyslog.conf \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/.* \\\n && chown $USER_ID:$USER_ID /home/$USER_ID/* \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.ipython \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.jupyter \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.local \\\n && chown -R $USER_ID:$USER_ID /home/$USER_ID/.npm \\\n && echo \"\"\n#   Jupyter notebook extension setting\nUSER $USER_ID\nRUN jupyter contrib nbextension install --user \\\n && jupyter nbextensions_configurator enable --user \\\n && jupyter nbextension enable --py widgetsnbextension \\\n && jupyter nbextension install --user --py ipyparallel \\\n && jupyter nbextension enable --user --py ipyparallel \\\n && jupyter serverextension enable --user --py ipyparallel \\\n && ipcluster nbextension enable --user \\\n && jupyter serverextension enable ipyparallel.nbextension\n#  ###############################################################################\n#   Fixing\n#  ###############################################################################\n#   ImageMagick security fix\nUSER root\nCOPY policy.xml /etc/ImageMagick-6/policy.xml\n#   statsmodels incompatibility with scipy 1.3.0\nUSER $USER_ID\nRUN pip install git+https://github.com/statsmodels/statsmodels -U\n#  ###############################################################################\n#   Tini\n#  ###############################################################################\n#   Tini operates as a process subreaper for jupyter. This prevents kernel crashes.\nUSER root\nADD https://github.com/krallin/tini/releases/download/v0.18.0/tini /usr/bin/tini\nRUN chmod a+x /usr/bin/tini\nENTRYPOINT [\"/usr/bin/tini\", \"--\", \"/bin/bash\", \".docker-entrypoint.sh\"]\n","originalDockerfileUglifiedHash":"785551ba24cd444273a37d9c473e58ad","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/6f05e2b88f473b35b5f673629040c8dde8864c64.dockerfile"}