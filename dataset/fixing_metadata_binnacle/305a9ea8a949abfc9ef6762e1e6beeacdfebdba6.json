{"seed":3428146871,"processedDockerfileHash":"fe1632f16784b1270533c9f6f7af1750","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\nMAINTAINER Overhang.io <contact@overhang.io>\n#  ########### common to lms & cms\n#   Install system requirements\nRUN apt-get update \\\n && apt-get install --no-install-recommends language-pack-en=1:16.04+20161009 git=1:2.7.4-0ubuntu1.10 python-virtualenv=15.0.1+ds-3ubuntu1.1 build-essential=12.1ubuntu2 software-properties-common=0.96.20.10 curl=7.47.0-1ubuntu2.19 git-core=1:2.7.4-0ubuntu1.10 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxslt1-dev=1.1.28-2.1ubuntu0.3 python-virtualenv=15.0.1+ds-3ubuntu1.1 libmysqlclient-dev=5.7.33-0ubuntu0.16.04.1 python-apt=1.1.0~beta1ubuntu0.16.04.12 python-dev=2.7.12-1~16.04 libxmlsec1-dev=1.2.20-2ubuntu4 libfreetype6-dev=2.6.1-0.1ubuntu2.5 swig=3.0.8-0ubuntu3 gcc=4:5.3.1-1ubuntu1 g++=4:5.3.1-1ubuntu1 gettext=0.19.7-2ubuntu3.1 gfortran=4:5.3.1-1ubuntu1 graphviz=2.38.0-12ubuntu2.1 graphviz-dev=2.38.0-12ubuntu2.1 libffi-dev=3.2.1-4 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libgeos-dev=3.5.0-1ubuntu2 libjpeg8-dev=8c-2ubuntu8 liblapack-dev=3.6.0-2ubuntu2 libpng12-dev=1.2.54-1ubuntu1.1 libsqlite3-dev=3.11.0-1ubuntu1.5 libxml2-dev=2.9.3+dfsg1-1ubuntu0.7 libxmlsec1-dev=1.2.20-2ubuntu4 libxslt1-dev=1.1.28-2.1ubuntu0.3 lynx=2.8.9dev8-4ubuntu1 nodejs=4.2.6~dfsg-1ubuntu4.2 npm=3.5.2-0ubuntu4 ntp=1:4.2.8p4+dfsg-3ubuntu5.10 pkg-config=0.29.1-0ubuntu1 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Dockerize will be useful to wait for mysql DB availability\nARG DOCKERIZE_VERSION=v0.6.1\nRUN curl -L -o /tmp/dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize.tar.gz \\\n && rm /tmp/dockerize.tar.gz\n#   Checkout edx-platform code\nARG EDX_PLATFORM_REPOSITORY=https://github.com/edx/edx-platform.git\nARG EDX_PLATFORM_VERSION=open-release/ironwood.2\nRUN mkdir -p /openedx/edx-platform \\\n && git clone $EDX_PLATFORM_REPOSITORY --branch $EDX_PLATFORM_VERSION --depth 1 /openedx/edx-platform\nWORKDIR /openedx/edx-platform\n#   Download extra locales to /openedx/locale\n#   TODO upgrade this to ironwood\nRUN cd /tmp \\\n && curl -L -o openedx-i18n.tar.gz https://github.com/openedx/openedx-i18n/archive/hawthorn.tar.gz \\\n && tar xzf /tmp/openedx-i18n.tar.gz \\\n && mv openedx-i18n-hawthorn/edx-platform/locale/ /openedx/locale/ \\\n && rm -rf openedx-i18n*\n#   Install python requirements (clone source repos in a separate dir, otherwise\n#   they will be overwritten when we mount edx-platform)\nENV NO_PYTHON_UNINSTALL=\"1\"\nRUN virtualenv /openedx/venv\nENV PATH=\"/openedx/venv/bin:${PATH}\"\nENV VIRTUAL_ENV=\"/openedx/venv/\"\nRUN pip install setuptools==39.0.1 pip==9.0.3\nRUN pip install -r requirements/edx/development.txt\n#   Install patched version of ora2\nRUN pip uninstall -y ora2 \\\n && pip install git+https://github.com/overhangio/edx-ora2.git@2.2.0-patched#egg==ra2==2.2.0\n#   Install a recent version of nodejs\nRUN nodeenv /openedx/nodeenv --node=8.9.3 --prebuilt\nENV PATH=\"/openedx/nodeenv/bin:${PATH}\"\n#   Install nodejs requirements\nRUN npm set progress=false \\\n && npm install\nENV PATH=\"./node_modules/.bin:${PATH}\"\n#   Install private requirements: this is useful for installing custom xblocks.\nCOPY ./requirements/ /openedx/requirements\nRUN cd /openedx/requirements/ \\\n && pip install -r ./private.txt\n#   Create folder that will store *.env.json and *.auth.json files, as well as\n#   the tutor-specific settings files.\nRUN mkdir -p /openedx/config ./lms/envs/tutor ./cms/envs/tutor\nENV CONFIG_ROOT=\"/openedx/config\"\nCOPY settings/lms/*.py ./lms/envs/tutor/\nCOPY settings/cms/*.py ./cms/envs/tutor/\n#   Copy scripts\nCOPY ./bin /openedx/bin\nENV PATH=\"/openedx/bin:${PATH}\"\n#   Collect production assets. By default, only assets from the default theme\n#   will be processed. This makes the docker image lighter and faster to build.\n#   Only the custom themes added to /openedx/themes will be compiled.\n#   Here, we don't run \"paver update_assets\" which is slow, compiles all themes\n#   and requires a complex settings file. Instead, we decompose the commands\n#   and run each one individually to collect the production static assets to\n#   /openedx/staticfiles.\nRUN openedx-assets xmodule \\\n && openedx-assets npm \\\n && openedx-assets webpack --env=prod \\\n && openedx-assets common\nCOPY ./themes/ /openedx/themes/\nRUN openedx-assets themes \\\n && openedx-assets collect --settings=tutor.assets\n#   Create a data directory, which might be used (or not)\nRUN mkdir /openedx/data\n#   service variant is \"lms\" or \"cms\"\nENV SERVICE_VARIANT=\"lms\"\nENV SETTINGS=\"tutor.production\"\n#   Entrypoint will fix permissions of all files and run commands as openedx\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   Run server\nCOPY gunicorn_conf.py /openedx/gunicorn_conf.py\nEXPOSE 8000/tcp\nCMD gunicorn -c /openedx/gunicorn_conf.py --name ${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\nMAINTAINER Overhang.io <contact@overhang.io>\n# ########### common to lms & cms\n#  Install system requirements\nRUN apt-get update \\\n && apt-get install -y language-pack-en git python-virtualenv build-essential software-properties-common curl git-core libxml2-dev libxslt1-dev python-virtualenv libmysqlclient-dev python-apt python-dev libxmlsec1-dev libfreetype6-dev swig gcc g++ gettext gfortran graphviz graphviz-dev libffi-dev libfreetype6-dev libgeos-dev libjpeg8-dev liblapack-dev libpng12-dev libsqlite3-dev libxml2-dev libxmlsec1-dev libxslt1-dev lynx nodejs npm ntp pkg-config \\\n && rm -rf /var/lib/apt/lists/*\n#  Dockerize will be useful to wait for mysql DB availability\nARG DOCKERIZE_VERSION=v0.6.1\nRUN curl -L -o /tmp/dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize.tar.gz \\\n && rm /tmp/dockerize.tar.gz\n#  Checkout edx-platform code\nARG EDX_PLATFORM_REPOSITORY=https://github.com/edx/edx-platform.git\nARG EDX_PLATFORM_VERSION=open-release/ironwood.2\nRUN mkdir -p /openedx/edx-platform \\\n && git clone $EDX_PLATFORM_REPOSITORY --branch $EDX_PLATFORM_VERSION --depth 1 /openedx/edx-platform\nWORKDIR /openedx/edx-platform\n#  Download extra locales to /openedx/locale\n#  TODO upgrade this to ironwood\nRUN cd /tmp \\\n && curl -L -o openedx-i18n.tar.gz https://github.com/openedx/openedx-i18n/archive/hawthorn.tar.gz \\\n && tar xzf /tmp/openedx-i18n.tar.gz \\\n && mv openedx-i18n-hawthorn/edx-platform/locale/ /openedx/locale/ \\\n && rm -rf openedx-i18n*\n#  Install python requirements (clone source repos in a separate dir, otherwise\n#  they will be overwritten when we mount edx-platform)\nENV NO_PYTHON_UNINSTALL=\"1\"\nRUN virtualenv /openedx/venv\nENV PATH=\"/openedx/venv/bin:${PATH}\"\nENV VIRTUAL_ENV=\"/openedx/venv/\"\nRUN pip install setuptools==39.0.1 pip==9.0.3\nRUN pip install -r requirements/edx/development.txt\n#  Install patched version of ora2\nRUN pip uninstall -y ora2 \\\n && pip install git+https://github.com/overhangio/edx-ora2.git@2.2.0-patched#egg==ra2==2.2.0\n#  Install a recent version of nodejs\nRUN nodeenv /openedx/nodeenv --node=8.9.3 --prebuilt\nENV PATH=\"/openedx/nodeenv/bin:${PATH}\"\n#  Install nodejs requirements\nRUN npm set progress=false \\\n && npm install\nENV PATH=\"./node_modules/.bin:${PATH}\"\n#  Install private requirements: this is useful for installing custom xblocks.\nCOPY ./requirements/ /openedx/requirements\nRUN cd /openedx/requirements/ \\\n && pip install -r ./private.txt\n#  Create folder that will store *.env.json and *.auth.json files, as well as\n#  the tutor-specific settings files.\nRUN mkdir -p /openedx/config ./lms/envs/tutor ./cms/envs/tutor\nENV CONFIG_ROOT=\"/openedx/config\"\nCOPY settings/lms/*.py ./lms/envs/tutor/\nCOPY settings/cms/*.py ./cms/envs/tutor/\n#  Copy scripts\nCOPY ./bin /openedx/bin\nENV PATH=\"/openedx/bin:${PATH}\"\n#  Collect production assets. By default, only assets from the default theme\n#  will be processed. This makes the docker image lighter and faster to build.\n#  Only the custom themes added to /openedx/themes will be compiled.\n#  Here, we don't run \"paver update_assets\" which is slow, compiles all themes\n#  and requires a complex settings file. Instead, we decompose the commands\n#  and run each one individually to collect the production static assets to\n#  /openedx/staticfiles.\nRUN openedx-assets xmodule \\\n && openedx-assets npm \\\n && openedx-assets webpack --env=prod \\\n && openedx-assets common\nCOPY ./themes/ /openedx/themes/\nRUN openedx-assets themes \\\n && openedx-assets collect --settings=tutor.assets\n#  Create a data directory, which might be used (or not)\nRUN mkdir /openedx/data\n#  service variant is \"lms\" or \"cms\"\nENV SERVICE_VARIANT=\"lms\"\nENV SETTINGS=\"tutor.production\"\n#  Entrypoint will fix permissions of all files and run commands as openedx\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  Run server\nCOPY gunicorn_conf.py /openedx/gunicorn_conf.py\nEXPOSE 8000/tcp\nCMD gunicorn -c /openedx/gunicorn_conf.py --name ${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n","injectedSmells":[],"originalDockerfileHash":"7c800f0a0179c20d6cfce742cc555eb7","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\nMAINTAINER Overhang.io <contact@overhang.io>\n#  ########### common to lms & cms\n#   Install system requirements\nRUN apt-get update \\\n && apt-get install language-pack-en git python-virtualenv build-essential software-properties-common curl git-core libxml2-dev libxslt1-dev python-virtualenv libmysqlclient-dev python-apt python-dev libxmlsec1-dev libfreetype6-dev swig gcc g++ gettext gfortran graphviz graphviz-dev libffi-dev libfreetype6-dev libgeos-dev libjpeg8-dev liblapack-dev libpng12-dev libsqlite3-dev libxml2-dev libxmlsec1-dev libxslt1-dev lynx nodejs npm ntp pkg-config -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Dockerize will be useful to wait for mysql DB availability\nARG DOCKERIZE_VERSION=v0.6.1\nRUN curl -L -o /tmp/dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize.tar.gz \\\n && rm /tmp/dockerize.tar.gz\n#   Checkout edx-platform code\nARG EDX_PLATFORM_REPOSITORY=https://github.com/edx/edx-platform.git\nARG EDX_PLATFORM_VERSION=open-release/ironwood.2\nRUN mkdir -p /openedx/edx-platform \\\n && git clone $EDX_PLATFORM_REPOSITORY --branch $EDX_PLATFORM_VERSION --depth 1 /openedx/edx-platform\nWORKDIR /openedx/edx-platform\n#   Download extra locales to /openedx/locale\n#   TODO upgrade this to ironwood\nRUN cd /tmp \\\n && curl -L -o openedx-i18n.tar.gz https://github.com/openedx/openedx-i18n/archive/hawthorn.tar.gz \\\n && tar xzf /tmp/openedx-i18n.tar.gz \\\n && mv openedx-i18n-hawthorn/edx-platform/locale/ /openedx/locale/ \\\n && rm -rf openedx-i18n*\n#   Install python requirements (clone source repos in a separate dir, otherwise\n#   they will be overwritten when we mount edx-platform)\nENV NO_PYTHON_UNINSTALL=\"1\"\nRUN virtualenv /openedx/venv\nENV PATH=\"/openedx/venv/bin:${PATH}\"\nENV VIRTUAL_ENV=\"/openedx/venv/\"\nRUN pip install setuptools==39.0.1 pip==9.0.3\nRUN pip install -r requirements/edx/development.txt\n#   Install patched version of ora2\nRUN pip uninstall -y ora2 \\\n && pip install git+https://github.com/overhangio/edx-ora2.git@2.2.0-patched#egg==ra2==2.2.0\n#   Install a recent version of nodejs\nRUN nodeenv /openedx/nodeenv --node=8.9.3 --prebuilt\nENV PATH=\"/openedx/nodeenv/bin:${PATH}\"\n#   Install nodejs requirements\nRUN npm set progress=false \\\n && npm install\nENV PATH=\"./node_modules/.bin:${PATH}\"\n#   Install private requirements: this is useful for installing custom xblocks.\nCOPY ./requirements/ /openedx/requirements\nRUN cd /openedx/requirements/ \\\n && pip install -r ./private.txt\n#   Create folder that will store *.env.json and *.auth.json files, as well as\n#   the tutor-specific settings files.\nRUN mkdir -p /openedx/config ./lms/envs/tutor ./cms/envs/tutor\nENV CONFIG_ROOT=\"/openedx/config\"\nCOPY settings/lms/*.py ./lms/envs/tutor/\nCOPY settings/cms/*.py ./cms/envs/tutor/\n#   Copy scripts\nCOPY ./bin /openedx/bin\nENV PATH=\"/openedx/bin:${PATH}\"\n#   Collect production assets. By default, only assets from the default theme\n#   will be processed. This makes the docker image lighter and faster to build.\n#   Only the custom themes added to /openedx/themes will be compiled.\n#   Here, we don't run \"paver update_assets\" which is slow, compiles all themes\n#   and requires a complex settings file. Instead, we decompose the commands\n#   and run each one individually to collect the production static assets to\n#   /openedx/staticfiles.\nRUN openedx-assets xmodule \\\n && openedx-assets npm \\\n && openedx-assets webpack --env=prod \\\n && openedx-assets common\nCOPY ./themes/ /openedx/themes/\nRUN openedx-assets themes \\\n && openedx-assets collect --settings=tutor.assets\n#   Create a data directory, which might be used (or not)\nRUN mkdir /openedx/data\n#   service variant is \"lms\" or \"cms\"\nENV SERVICE_VARIANT=\"lms\"\nENV SETTINGS=\"tutor.production\"\n#   Entrypoint will fix permissions of all files and run commands as openedx\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   Run server\nCOPY gunicorn_conf.py /openedx/gunicorn_conf.py\nEXPOSE 8000/tcp\nCMD gunicorn -c /openedx/gunicorn_conf.py --name ${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 ${SERVICE_VARIANT}.wsgi:application\n","originalDockerfileUglifiedHash":"151463d1921ed40614a357567c238f50","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/305a9ea8a949abfc9ef6762e1e6beeacdfebdba6.dockerfile"}