{"seed":2140910769,"processedDockerfileHash":"08bdf6ec01c74e0dc47977fcf6198fec","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#  #############################################\n#                                              #\n#        Dockerfile base image parameter       #\n#               and default value              #\n#                                              #\n#  #############################################\nARG PYTHON_VERSION=3.7.0\nFROM circleci/python:$PYTHON_VERSION-stretch\n#  #############################################\n#                                              #\n#             Dockerfile parameters            #\n#               and default values             #\n#     We have to define them after the from.   #\n#                                              #\n#  #############################################\nARG NUMPY_VERSION=1.14.5\nARG GDAL_VERSION=2.4.0\nARG PROJ4_VERSION=4.9.3\nARG GRID_VERSION=1.6\nARG GEOS_VERSION=3.6.2\nARG LIBSPATIALINDEX_VERSION=1.8.5\n#  #######################################\n#                                        #\n#               Image labels             #\n#                                        #\n#  #######################################\nLABEL maintainer=\"Delair <nicolas.goguey@delair.aero>\"\n#  #############################################\n#                                              #\n#              Container preparation           #\n#                                              #\n#  #############################################\nUSER root\n#   Make sure we're up-to-date and install runtime requirements\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential bzip2 ca-certificates curl file git gzip openssl sqlite unzip xmlsec1 zip -y\n#  #############################################\n#                                              #\n#            PROJ.4, GEOS, GDAL, GRID          #\n#                                              #\n#  #############################################\n#   Install build requirement\nRUN apt-get install --no-install-recommends libcurl4-openssl-dev libgdal-dev libjpeg-dev libncurses5-dev libpng-dev zlib1g-dev -y\n#   Fetch PROJ.4\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/proj/proj-${PROJ4_VERSION}.tar.gz | tar zxf -\n#   Get the nadgrids\nWORKDIR /tmp/proj-${PROJ4_VERSION}/nad\nRUN curl -L http://download.osgeo.org/proj/proj-datumgrid-${GRID_VERSION}.zip -o proj-datumgrid-${GRID_VERSION}.zip \\\n && unzip -o -q proj-datumgrid-${GRID_VERSION}.zip\n#   Build and install PROJ.4\nWORKDIR \"/tmp/proj-${PROJ4_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Fetch GEOS\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 | tar jxf -\n#   Build and install GEOS\nWORKDIR \"/tmp/geos-${GEOS_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Fecth GDAL\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz | tar zxf -\n#   Build and install GDAL\nWORKDIR \"/tmp/gdal-${GDAL_VERSION}\"\nRUN ./configure --prefix=/usr/local/gdal --with-curl=yes --with-geos=/usr/local/bin/geos-config --with-proj=/usr/local/proj4 --with-python\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Configuring environment\nENV PATH=\"/usr/local/gdal/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/proj4/lib:/usr/local/gdal/lib:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV GDAL_DATA=\"/usr/local/gdal/share/gdal\"\n#  #######################################\n#                                        #\n#             libspatialindex            #\n#                                        #\n#  #######################################\n#   optionnal / required for the python make_geom_valid like in PostGIS\n#   Fetch libspatialindex\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/libspatialindex/spatialindex-src-${LIBSPATIALINDEX_VERSION}.tar.gz | tar zxf -\nWORKDIR /tmp/spatialindex-src-${LIBSPATIALINDEX_VERSION}\n#   Build and install\nRUN ./configure\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#  #############################################\n#                                              #\n#               OpenCV prerequisites           #\n#                                              #\n#  #############################################\nWORKDIR /tmp\nRUN apt-get install --no-install-recommends libsm6 libxrender1 libxext6 -y\n#  #######################################\n#                                        #\n#       Python packages installation     #\n#                                        #\n#  #######################################\n#   Upgrade pip\nRUN pip install pip==23.1 --upgrade\n#   Install numpy before GDAL\nRUN pip install numpy==${NUMPY_VERSION} \\\n && pip install GDAL==${GDAL_VERSION}\n#  #############################################\n#                                              #\n#                    Cleaning                  #\n#                                              #\n#  #############################################\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  #############################################\n#                                              #\n#              Preping for Execution           #\n#                                              #\n#  #############################################\nENV PATH=\"/home/circleci/.local/bin:$PATH\"\n#   USER circleci\nCMD [\"python\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"# #############################################\n#                                             #\n#       Dockerfile base image parameter       #\n#              and default value              #\n#                                             #\n# #############################################\nARG PYTHON_VERSION=3.7.0\nFROM circleci/python:$PYTHON_VERSION-stretch\n# #############################################\n#                                             #\n#            Dockerfile parameters            #\n#              and default values             #\n#    We have to define them after the from.   #\n#                                             #\n# #############################################\nARG NUMPY_VERSION=1.14.5\nARG GDAL_VERSION=2.4.0\nARG PROJ4_VERSION=4.9.3\nARG GRID_VERSION=1.6\nARG GEOS_VERSION=3.6.2\nARG LIBSPATIALINDEX_VERSION=1.8.5\n# #######################################\n#                                       #\n#              Image labels             #\n#                                       #\n# #######################################\nLABEL maintainer=\"Delair <nicolas.goguey@delair.aero>\"\n# #############################################\n#                                             #\n#             Container preparation           #\n#                                             #\n# #############################################\nUSER root\n#  Make sure we're up-to-date and install runtime requirements\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential bzip2 ca-certificates curl file git gzip openssl sqlite unzip xmlsec1 zip -y\n# #############################################\n#                                             #\n#           PROJ.4, GEOS, GDAL, GRID          #\n#                                             #\n# #############################################\n#  Install build requirement\nRUN apt-get install --no-install-recommends libcurl4-openssl-dev libgdal-dev libjpeg-dev libncurses5-dev libpng-dev zlib1g-dev -y\n#  Fetch PROJ.4\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/proj/proj-${PROJ4_VERSION}.tar.gz | tar zxf -\n#  Get the nadgrids\nWORKDIR /tmp/proj-${PROJ4_VERSION}/nad\nRUN curl -L http://download.osgeo.org/proj/proj-datumgrid-${GRID_VERSION}.zip -o proj-datumgrid-${GRID_VERSION}.zip \\\n && unzip -o -q proj-datumgrid-${GRID_VERSION}.zip\n#  Build and install PROJ.4\nWORKDIR \"/tmp/proj-${PROJ4_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#  Fetch GEOS\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 | tar jxf -\n#  Build and install GEOS\nWORKDIR \"/tmp/geos-${GEOS_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#  Fecth GDAL\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz | tar zxf -\n#  Build and install GDAL\nWORKDIR \"/tmp/gdal-${GDAL_VERSION}\"\nRUN ./configure --prefix=/usr/local/gdal --with-curl=yes --with-geos=/usr/local/bin/geos-config --with-proj=/usr/local/proj4 --with-python\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#  Configuring environment\nENV PATH=\"/usr/local/gdal/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/proj4/lib:/usr/local/gdal/lib:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV GDAL_DATA=\"/usr/local/gdal/share/gdal\"\n# #######################################\n#                                       #\n#            libspatialindex            #\n#                                       #\n# #######################################\n#  optionnal / required for the python make_geom_valid like in PostGIS\n#  Fetch libspatialindex\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/libspatialindex/spatialindex-src-${LIBSPATIALINDEX_VERSION}.tar.gz | tar zxf -\nWORKDIR /tmp/spatialindex-src-${LIBSPATIALINDEX_VERSION}\n#  Build and install\nRUN ./configure\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n# #############################################\n#                                             #\n#              OpenCV prerequisites           #\n#                                             #\n# #############################################\nWORKDIR /tmp\nRUN apt-get install --no-install-recommends libsm6 libxrender1 libxext6 -y\n# #######################################\n#                                       #\n#      Python packages installation     #\n#                                       #\n# #######################################\n#  Upgrade pip\nRUN pip install pip --upgrade\n#  Install numpy before GDAL\nRUN pip install numpy==${NUMPY_VERSION} \\\n && pip install GDAL==${GDAL_VERSION}\n# #############################################\n#                                             #\n#                   Cleaning                  #\n#                                             #\n# #############################################\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n# #############################################\n#                                             #\n#             Preping for Execution           #\n#                                             #\n# #############################################\nENV PATH=\"/home/circleci/.local/bin:$PATH\"\n#  USER circleci\nCMD [\"python\"]\n","injectedSmells":[],"originalDockerfileHash":"6df1c2fac74b1b09048fcc3e7f9bb4b1","successfullyInjectedSmells":[],"originalDockerfileUglified":"#  #############################################\n#                                              #\n#        Dockerfile base image parameter       #\n#               and default value              #\n#                                              #\n#  #############################################\nARG PYTHON_VERSION=3.7.0\nFROM circleci/python:$PYTHON_VERSION-stretch\n#  #############################################\n#                                              #\n#             Dockerfile parameters            #\n#               and default values             #\n#     We have to define them after the from.   #\n#                                              #\n#  #############################################\nARG NUMPY_VERSION=1.14.5\nARG GDAL_VERSION=2.4.0\nARG PROJ4_VERSION=4.9.3\nARG GRID_VERSION=1.6\nARG GEOS_VERSION=3.6.2\nARG LIBSPATIALINDEX_VERSION=1.8.5\n#  #######################################\n#                                        #\n#               Image labels             #\n#                                        #\n#  #######################################\nLABEL maintainer=\"Delair <nicolas.goguey@delair.aero>\"\n#  #############################################\n#                                              #\n#              Container preparation           #\n#                                              #\n#  #############################################\nUSER root\n#   Make sure we're up-to-date and install runtime requirements\nRUN apt-get update -y \\\n && apt-get install --no-install-recommends build-essential bzip2 ca-certificates curl file git gzip openssl sqlite unzip xmlsec1 zip -y\n#  #############################################\n#                                              #\n#            PROJ.4, GEOS, GDAL, GRID          #\n#                                              #\n#  #############################################\n#   Install build requirement\nRUN apt-get install --no-install-recommends libcurl4-openssl-dev libgdal-dev libjpeg-dev libncurses5-dev libpng-dev zlib1g-dev -y\n#   Fetch PROJ.4\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/proj/proj-${PROJ4_VERSION}.tar.gz | tar zxf -\n#   Get the nadgrids\nWORKDIR /tmp/proj-${PROJ4_VERSION}/nad\nRUN curl -L http://download.osgeo.org/proj/proj-datumgrid-${GRID_VERSION}.zip -o proj-datumgrid-${GRID_VERSION}.zip \\\n && unzip -o -q proj-datumgrid-${GRID_VERSION}.zip\n#   Build and install PROJ.4\nWORKDIR \"/tmp/proj-${PROJ4_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Fetch GEOS\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 | tar jxf -\n#   Build and install GEOS\nWORKDIR \"/tmp/geos-${GEOS_VERSION}\"\nRUN ./configure --prefix=/usr/local\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Fecth GDAL\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz | tar zxf -\n#   Build and install GDAL\nWORKDIR \"/tmp/gdal-${GDAL_VERSION}\"\nRUN ./configure --prefix=/usr/local/gdal --with-curl=yes --with-geos=/usr/local/bin/geos-config --with-proj=/usr/local/proj4 --with-python\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#   Configuring environment\nENV PATH=\"/usr/local/gdal/bin:$PATH\"\nENV LD_LIBRARY_PATH=\"/usr/local/proj4/lib:/usr/local/gdal/lib:/usr/local/lib:$LD_LIBRARY_PATH\"\nENV GDAL_DATA=\"/usr/local/gdal/share/gdal\"\n#  #######################################\n#                                        #\n#             libspatialindex            #\n#                                        #\n#  #######################################\n#   optionnal / required for the python make_geom_valid like in PostGIS\n#   Fetch libspatialindex\nWORKDIR /tmp\nRUN curl -L http://download.osgeo.org/libspatialindex/spatialindex-src-${LIBSPATIALINDEX_VERSION}.tar.gz | tar zxf -\nWORKDIR /tmp/spatialindex-src-${LIBSPATIALINDEX_VERSION}\n#   Build and install\nRUN ./configure\nRUN make -j $((2 * $( cat /proc/cpuinfo | egrep ^processor | wc -l ;))) \\\n && make install\n#  #############################################\n#                                              #\n#               OpenCV prerequisites           #\n#                                              #\n#  #############################################\nWORKDIR /tmp\nRUN apt-get install --no-install-recommends libsm6 libxrender1 libxext6 -y\n#  #######################################\n#                                        #\n#       Python packages installation     #\n#                                        #\n#  #######################################\n#   Upgrade pip\nRUN pip install pip --upgrade\n#   Install numpy before GDAL\nRUN pip install numpy==${NUMPY_VERSION} \\\n && pip install GDAL==${GDAL_VERSION}\n#  #############################################\n#                                              #\n#                    Cleaning                  #\n#                                              #\n#  #############################################\nRUN apt-get autoremove -y \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n#  #############################################\n#                                              #\n#              Preping for Execution           #\n#                                              #\n#  #############################################\nENV PATH=\"/home/circleci/.local/bin:$PATH\"\n#   USER circleci\nCMD [\"python\"]\n","originalDockerfileUglifiedHash":"5f97d00287f139f3cea33be1da8937a7","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/f3337208f7c4b4b1138a5e88d35503055022867d.dockerfile"}