{"seed":854913499,"processedDockerfileHash":"41089aec6e7e4a13f3010bad8c525f59","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM debian:jessie-backports\n#   Add DSE group and user\nRUN groupadd -r dse --gid=999 \\\n && useradd -m -d /home/dse -r -g dse --uid=999 dse\n#   gosu for easy step down from root\nENV GOSU_VERSION=\"1.7\"\nRUN set -x \\\n && apt-get update \\\n && (apt-get update ;apt-get install --no-install-recommends ca-certificates wget -y ) \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   Install JRE and Python prereqs\nRUN set -x \\\n && : \\\n && apt-get -t jessie-backports install -y openjdk-8-jre-headless ca-certificates-java python python-support curl \\\n && rm -rf /var/lib/apt/lists/*\n#   Get the version of DSE we're installing from the build argument\nARG DSE_VERSION\nENV DSE_VERSION=\"${DSE_VERSION}\"\n#   The URL where the DSE download credentials .netrc file is located\nARG DSE_CREDENTIALS_URL\n#   Download DSE by grabbing the .netrc credentials from the DSE_CREDENTIALS_URL, then unpack to\n#   /opt, and create a link (regardless of DSE version) under /opt/dse, making sure to clean up\n#   the credentials and other downloaded files\nRUN set -x \\\n && export DSE_TEMP=\"$( mktemp -d ;)\" \\\n && cd \"$DSE_TEMP\" \\\n && curl -SLO \"$DSE_CREDENTIALS_URL/.netrc\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz.md5\" \\\n && md5sum -c *.md5 \\\n && tar -xzf \"dse-$DSE_VERSION-bin.tar.gz\" -C /opt \\\n && cd / \\\n && rm -rf \"$DSE_TEMP\" \\\n && ln -s /opt/dse* /opt/dse \\\n && chown -R dse:dse /opt/dse*\n#   Append DSE binaries directory to the PATH so we can execute them from any working directory\nENV PATH=\"/opt/dse/bin:$PATH\"\n#   Create directories for Cassandra and Spark data\nRUN mkdir -p /var/lib/cassandra /var/lib/spark /var/lib/spark/worker /var/lib/spark/rdd /var/lib/dsefs \\\n && chown -R dse:dse /var/lib/cassandra /var/lib/spark /var/lib/dsefs \\\n && chmod 777 /var/lib/cassandra /var/lib/spark /var/lib/dsefs\n#   Create log directories\nRUN mkdir -p /var/log/cassandra /var/log/spark \\\n && chown -R dse:dse /var/log/cassandra /var/log/spark \\\n && chmod 777 /var/log/cassandra /var/log/spark\n#   Volumes for Cassandra and Spark data\nVOLUME /var/lib/cassandra /var/lib/spark /var/lib/dsefs /var/log/cassandra /var/log/spark\n#   Volume for configuration files in resources\nVOLUME /opt/dse/resources\n#   Entrypoint script for launching\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Cassandra ports (intra-node, TLS intra-node, JMX, CQL, Thrift, DSEFS intra-node, intra-node messaging service)\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 8609/tcp 9042/tcp 9160/tcp\n#   DSE Search (Solr)\nEXPOSE 8983/tcp 8984/tcp\n#   DSE Analytics (Spark)\nEXPOSE 4040/tcp 7077/tcp 7080/tcp 7081/tcp 8090/tcp 9999/tcp 18080/tcp\n#   BYOH (this is deprecated and will be removed at some point)\nEXPOSE 8012/tcp 9290/tcp 10000/tcp 50030/tcp 50060/tcp\n#   DSE Graph\nEXPOSE 8182/tcp\n#   DSEFS\nEXPOSE 5598/tcp 5599/tcp\n#   Ports purposefully not exposed by default:\n#     9091 for DS Studio because it's not part of this image\n#     8888 for OpsCenter because it's not part of this image\n#   Run DSE in foreground by default\nCMD [\"dse\", \"cassandra\", \"-f\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM debian:jessie-backports\n#  Add DSE group and user\nRUN groupadd -r dse --gid=999 \\\n && useradd -m -d /home/dse -r -g dse --uid=999 dse\n#  gosu for easy step down from root\nENV GOSU_VERSION=\"1.7\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#  Install JRE and Python prereqs\nRUN set -x \\\n && apt-get update \\\n && apt-get -t jessie-backports install -y openjdk-8-jre-headless ca-certificates-java python python-support curl \\\n && rm -rf /var/lib/apt/lists/*\n#  Get the version of DSE we're installing from the build argument\nARG DSE_VERSION\nENV DSE_VERSION=\"${DSE_VERSION}\"\n#  The URL where the DSE download credentials .netrc file is located\nARG DSE_CREDENTIALS_URL\n#  Download DSE by grabbing the .netrc credentials from the DSE_CREDENTIALS_URL, then unpack to\n#  /opt, and create a link (regardless of DSE version) under /opt/dse, making sure to clean up\n#  the credentials and other downloaded files\nRUN set -x \\\n && export DSE_TEMP=\"$( mktemp -d ;)\" \\\n && cd \"$DSE_TEMP\" \\\n && curl -SLO \"$DSE_CREDENTIALS_URL/.netrc\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz.md5\" \\\n && md5sum -c *.md5 \\\n && tar -xzf \"dse-$DSE_VERSION-bin.tar.gz\" -C /opt \\\n && cd / \\\n && rm -rf \"$DSE_TEMP\" \\\n && ln -s /opt/dse* /opt/dse \\\n && chown -R dse:dse /opt/dse*\n#  Append DSE binaries directory to the PATH so we can execute them from any working directory\nENV PATH=\"/opt/dse/bin:$PATH\"\n#  Create directories for Cassandra and Spark data\nRUN mkdir -p /var/lib/cassandra /var/lib/spark /var/lib/spark/worker /var/lib/spark/rdd /var/lib/dsefs \\\n && chown -R dse:dse /var/lib/cassandra /var/lib/spark /var/lib/dsefs \\\n && chmod 777 /var/lib/cassandra /var/lib/spark /var/lib/dsefs\n#  Create log directories\nRUN mkdir -p /var/log/cassandra /var/log/spark \\\n && chown -R dse:dse /var/log/cassandra /var/log/spark \\\n && chmod 777 /var/log/cassandra /var/log/spark\n#  Volumes for Cassandra and Spark data\nVOLUME /var/lib/cassandra /var/lib/spark /var/lib/dsefs /var/log/cassandra /var/log/spark\n#  Volume for configuration files in resources\nVOLUME /opt/dse/resources\n#  Entrypoint script for launching\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#  Cassandra ports (intra-node, TLS intra-node, JMX, CQL, Thrift, DSEFS intra-node, intra-node messaging service)\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 8609/tcp 9042/tcp 9160/tcp\n#  DSE Search (Solr)\nEXPOSE 8983/tcp 8984/tcp\n#  DSE Analytics (Spark)\nEXPOSE 4040/tcp 7077/tcp 7080/tcp 7081/tcp 8090/tcp 9999/tcp 18080/tcp\n#  BYOH (this is deprecated and will be removed at some point)\nEXPOSE 8012/tcp 9290/tcp 10000/tcp 50030/tcp 50060/tcp\n#  DSE Graph\nEXPOSE 8182/tcp\n#  DSEFS\nEXPOSE 5598/tcp 5599/tcp\n#  Ports purposefully not exposed by default:\n#    9091 for DS Studio because it's not part of this image\n#    8888 for OpsCenter because it's not part of this image\n#  Run DSE in foreground by default\nCMD [\"dse\", \"cassandra\", \"-f\"]\n","injectedSmells":[],"originalDockerfileHash":"fa242c9c2f5057c08834154432f4f1db","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM debian:jessie-backports\n#   Add DSE group and user\nRUN groupadd -r dse --gid=999 \\\n && useradd -m -d /home/dse -r -g dse --uid=999 dse\n#   gosu for easy step down from root\nENV GOSU_VERSION=\"1.7\"\nRUN set -x \\\n && apt-get update \\\n && apt-get install --no-install-recommends ca-certificates wget -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;)\" \\\n && wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$( dpkg --print-architecture ;).asc\" \\\n && export GNUPGHOME=\"$( mktemp -d ;)\" \\\n && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \\\n && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \\\n && rm -r \"$GNUPGHOME\" /usr/local/bin/gosu.asc \\\n && chmod +x /usr/local/bin/gosu \\\n && gosu nobody true \\\n && apt-get purge -y --auto-remove ca-certificates wget\n#   Install JRE and Python prereqs\nRUN set -x \\\n && apt-get update \\\n && apt-get -t jessie-backports install -y openjdk-8-jre-headless ca-certificates-java python python-support curl \\\n && rm -rf /var/lib/apt/lists/*\n#   Get the version of DSE we're installing from the build argument\nARG DSE_VERSION\nENV DSE_VERSION=\"${DSE_VERSION}\"\n#   The URL where the DSE download credentials .netrc file is located\nARG DSE_CREDENTIALS_URL\n#   Download DSE by grabbing the .netrc credentials from the DSE_CREDENTIALS_URL, then unpack to\n#   /opt, and create a link (regardless of DSE version) under /opt/dse, making sure to clean up\n#   the credentials and other downloaded files\nRUN set -x \\\n && export DSE_TEMP=\"$( mktemp -d ;)\" \\\n && cd \"$DSE_TEMP\" \\\n && curl -SLO \"$DSE_CREDENTIALS_URL/.netrc\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz\" \\\n && curl --netrc-file .netrc -SLO \"http://downloads.datastax.com/enterprise/dse-$DSE_VERSION-bin.tar.gz.md5\" \\\n && md5sum -c *.md5 \\\n && tar -xzf \"dse-$DSE_VERSION-bin.tar.gz\" -C /opt \\\n && cd / \\\n && rm -rf \"$DSE_TEMP\" \\\n && ln -s /opt/dse* /opt/dse \\\n && chown -R dse:dse /opt/dse*\n#   Append DSE binaries directory to the PATH so we can execute them from any working directory\nENV PATH=\"/opt/dse/bin:$PATH\"\n#   Create directories for Cassandra and Spark data\nRUN mkdir -p /var/lib/cassandra /var/lib/spark /var/lib/spark/worker /var/lib/spark/rdd /var/lib/dsefs \\\n && chown -R dse:dse /var/lib/cassandra /var/lib/spark /var/lib/dsefs \\\n && chmod 777 /var/lib/cassandra /var/lib/spark /var/lib/dsefs\n#   Create log directories\nRUN mkdir -p /var/log/cassandra /var/log/spark \\\n && chown -R dse:dse /var/log/cassandra /var/log/spark \\\n && chmod 777 /var/log/cassandra /var/log/spark\n#   Volumes for Cassandra and Spark data\nVOLUME /var/lib/cassandra /var/lib/spark /var/lib/dsefs /var/log/cassandra /var/log/spark\n#   Volume for configuration files in resources\nVOLUME /opt/dse/resources\n#   Entrypoint script for launching\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n#   Cassandra ports (intra-node, TLS intra-node, JMX, CQL, Thrift, DSEFS intra-node, intra-node messaging service)\nEXPOSE 7000/tcp 7001/tcp 7199/tcp 8609/tcp 9042/tcp 9160/tcp\n#   DSE Search (Solr)\nEXPOSE 8983/tcp 8984/tcp\n#   DSE Analytics (Spark)\nEXPOSE 4040/tcp 7077/tcp 7080/tcp 7081/tcp 8090/tcp 9999/tcp 18080/tcp\n#   BYOH (this is deprecated and will be removed at some point)\nEXPOSE 8012/tcp 9290/tcp 10000/tcp 50030/tcp 50060/tcp\n#   DSE Graph\nEXPOSE 8182/tcp\n#   DSEFS\nEXPOSE 5598/tcp 5599/tcp\n#   Ports purposefully not exposed by default:\n#     9091 for DS Studio because it's not part of this image\n#     8888 for OpsCenter because it's not part of this image\n#   Run DSE in foreground by default\nCMD [\"dse\", \"cassandra\", \"-f\"]\n","originalDockerfileUglifiedHash":"f4f4c497afcdfc529a244bf8be36ce20","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/d21edb86377311a672531e59564ac4670c984fdb.dockerfile"}