{"seed":113738278,"processedDockerfileHash":"9e7d79526dc02eac3ba3de2c1870806c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","have-a-healthcheck"],"processedDockerfile":"#   Dockerfile for a generic Ubuntu image with just the basics we need\n#   to make it suitable for CI.  In particular:\n#    * a non-root user to run as (a pain to try to do in setup,\n#      because by then we've already cloned the repo);\n#    * Git and other basic utilities.\n#\n#   Based on CircleCI's provided images, but those are on Debian Jessie\n#   and we want Ubuntu, to match our supported environments in production.\n#   See these templates and code:\n#     https://github.com/circleci/circleci-images/blob/1949c44df/shared/images/\n#   which we've borrowed from, chiefly Dockerfile-basic.template.\n#\n#   The CircleCI `python` images are based on upstream's `python` (i.e.,\n#   https://hub.docker.com/_/python/), which also come only for Debian\n#   (and various obscure distros, and Windows) and not Ubuntu.  Those\n#   are in turn based on upstream's `buildpack-deps`, which do come in\n#   Ubuntu flavors.\n#\n#   So this image starts from `buildpack-deps`, does the job of `python`\n#   (but much simpler, with a couple of packages from the distro), and\n#   then borrows from the CircleCI Dockerfile.\n#   To rebuild from this file for a given release, say trusty:\n#     0. $ tools/circleci/generate-dockerfiles\n#     1. pick a new image name, like `gregprice/circleci:trusty-python-3.test`\n#     2. $ sudo docker build tools/circleci/images/$RELEASE/ --tag $NAME\n#     3. $ sudo docker push $NAME\n#     4. update .circleci/config.yml to refer to the new name\nFROM {base_image}\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends sudo=1.9.13p1-1ubuntu2 locales=2.37-0ubuntu2 xvfb=2:21.1.7-1ubuntu2 parallel=20221122+ds-2 netcat unzip=6.0-27ubuntu1 zip=3.0-13 jq=1.6-2.1ubuntu3 python3-pip=23.0.1+dfsg-1 -y \\\n && ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \\\n && { { locale-gen en_US.UTF-8 || true ; } ; } \\\n && echo \"LC_ALL=en_US.UTF-8\" | sudo tee -a /etc/default/locale\n#   Set the locale, together with the locale-related steps above.\n#   It's not entirely clear why, but alternatives that don't work include\n#    * using `C.UTF-8` instead of `en_US.UTF-8`, here and above\n#      (causes mysterious failures in zerver.tests.test_narrow)\n#    * skipping the /etc/default/locale step above (ditto)\n#    * skipping this ENV instruction (causes provision to fail,\n#      because Python tries to use the `ascii` codec)\n#   Details in https://github.com/zulip/zulip/pull/7762#issuecomment-353197289\n#   and particularly https://circleci.com/gh/hackerkid/zulip/80 .\nENV LC_ALL=\"en_US.UTF-8\"\n#   Install Docker.  This logic comes from Circle's Dockerfile; it's probably\n#   faster than the upstream-recommended approach of using their apt repo,\n#   and fine for an image that will be rebuilt rather than upgraded.\n#   Docker core...\nRUN set -e \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${{DOCKER_VERSION}}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${{DOCKER_URL}}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version 2> /dev/null || true )\n#   ...docker-compose...\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   ... and dockerize.\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\n#   Extra packages used by Zulip.\nRUN apt-get update \\\n && apt-get install --no-install-recommends closure-compiler=20130227+dfsg1-13 memcached=1.6.18-1 rabbitmq-server=3.10.8-1.1 redis-server=5:7.0.8-4 hunspell-en-us=1:2020.12.07-2 supervisor=4.2.1-1ubuntu1 libssl-dev=3.0.8-1ubuntu1 yui-compressor=2.4.8-3 puppet=7.23.0-1 gettext=0.21-11 libffi-dev=3.4.4-1 libfreetype6-dev=2.12.1+dfsg-4 zlib1g-dev=1:1.2.13.dfsg-1ubuntu4 libjpeg-dev=8c-2ubuntu11 libldap2-dev=2.6.3+dfsg-1~exp1ubuntu2 libmemcached-dev=1.1.4-1 python-dev python-pip python-six libxml2-dev=2.9.14+dfsg-1.1build2 libxslt1-dev=1.1.35-1 libpq-dev=15.2-1 {extra_packages}\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\nUSER circleci\nCMD [\"/bin/sh\"]\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Dockerfile for a generic Ubuntu image with just the basics we need\n#  to make it suitable for CI.  In particular:\n#   * a non-root user to run as (a pain to try to do in setup,\n#     because by then we've already cloned the repo);\n#   * Git and other basic utilities.\n#\n#  Based on CircleCI's provided images, but those are on Debian Jessie\n#  and we want Ubuntu, to match our supported environments in production.\n#  See these templates and code:\n#    https://github.com/circleci/circleci-images/blob/1949c44df/shared/images/\n#  which we've borrowed from, chiefly Dockerfile-basic.template.\n#\n#  The CircleCI `python` images are based on upstream's `python` (i.e.,\n#  https://hub.docker.com/_/python/), which also come only for Debian\n#  (and various obscure distros, and Windows) and not Ubuntu.  Those\n#  are in turn based on upstream's `buildpack-deps`, which do come in\n#  Ubuntu flavors.\n#\n#  So this image starts from `buildpack-deps`, does the job of `python`\n#  (but much simpler, with a couple of packages from the distro), and\n#  then borrows from the CircleCI Dockerfile.\n#  To rebuild from this file for a given release, say trusty:\n#    0. $ tools/circleci/generate-dockerfiles\n#    1. pick a new image name, like `gregprice/circleci:trusty-python-3.test`\n#    2. $ sudo docker build tools/circleci/images/$RELEASE/ --tag $NAME\n#    3. $ sudo docker push $NAME\n#    4. update .circleci/config.yml to refer to the new name\nFROM {base_image}\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install sudo locales xvfb parallel netcat unzip zip jq python3-pip -y \\\n && ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \\\n && { { locale-gen en_US.UTF-8 || true ; } ; } \\\n && echo \"LC_ALL=en_US.UTF-8\" | sudo tee -a /etc/default/locale\n#  Set the locale, together with the locale-related steps above.\n#  It's not entirely clear why, but alternatives that don't work include\n#   * using `C.UTF-8` instead of `en_US.UTF-8`, here and above\n#     (causes mysterious failures in zerver.tests.test_narrow)\n#   * skipping the /etc/default/locale step above (ditto)\n#   * skipping this ENV instruction (causes provision to fail,\n#     because Python tries to use the `ascii` codec)\n#  Details in https://github.com/zulip/zulip/pull/7762#issuecomment-353197289\n#  and particularly https://circleci.com/gh/hackerkid/zulip/80 .\nENV LC_ALL=\"en_US.UTF-8\"\n#  Install Docker.  This logic comes from Circle's Dockerfile; it's probably\n#  faster than the upstream-recommended approach of using their apt repo,\n#  and fine for an image that will be rebuilt rather than upgraded.\n#  Docker core...\nRUN set -e \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${{DOCKER_VERSION}}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${{DOCKER_URL}}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version 2> /dev/null || true )\n#  ...docker-compose...\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#  ... and dockerize.\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\n#  Extra packages used by Zulip.\nRUN apt-get update \\\n && apt-get install --no-install-recommends closure-compiler memcached rabbitmq-server redis-server hunspell-en-us supervisor libssl-dev yui-compressor puppet gettext libffi-dev libfreetype6-dev zlib1g-dev libjpeg-dev libldap2-dev libmemcached-dev python-dev python-pip python-six libxml2-dev libxslt1-dev libpq-dev {extra_packages}\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\nUSER circleci\nCMD [\"/bin/sh\"]\n","injectedSmells":[],"originalDockerfileHash":"0ae615f3749131b7ebc0991606c78226","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Dockerfile for a generic Ubuntu image with just the basics we need\n#   to make it suitable for CI.  In particular:\n#    * a non-root user to run as (a pain to try to do in setup,\n#      because by then we've already cloned the repo);\n#    * Git and other basic utilities.\n#\n#   Based on CircleCI's provided images, but those are on Debian Jessie\n#   and we want Ubuntu, to match our supported environments in production.\n#   See these templates and code:\n#     https://github.com/circleci/circleci-images/blob/1949c44df/shared/images/\n#   which we've borrowed from, chiefly Dockerfile-basic.template.\n#\n#   The CircleCI `python` images are based on upstream's `python` (i.e.,\n#   https://hub.docker.com/_/python/), which also come only for Debian\n#   (and various obscure distros, and Windows) and not Ubuntu.  Those\n#   are in turn based on upstream's `buildpack-deps`, which do come in\n#   Ubuntu flavors.\n#\n#   So this image starts from `buildpack-deps`, does the job of `python`\n#   (but much simpler, with a couple of packages from the distro), and\n#   then borrows from the CircleCI Dockerfile.\n#   To rebuild from this file for a given release, say trusty:\n#     0. $ tools/circleci/generate-dockerfiles\n#     1. pick a new image name, like `gregprice/circleci:trusty-python-3.test`\n#     2. $ sudo docker build tools/circleci/images/$RELEASE/ --tag $NAME\n#     3. $ sudo docker push $NAME\n#     4. update .circleci/config.yml to refer to the new name\nFROM {base_image}\nRUN echo 'APT::Get::Assume-Yes \"true\";' > /etc/apt/apt.conf.d/90circleci \\\n && echo 'DPkg::Options \"--force-confnew\";' >> /etc/apt/apt.conf.d/90circleci\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN apt-get update \\\n && apt-get install sudo locales xvfb parallel netcat unzip zip jq python3-pip -y \\\n && ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \\\n && { { locale-gen en_US.UTF-8 || true ; } ; } \\\n && echo \"LC_ALL=en_US.UTF-8\" | sudo tee -a /etc/default/locale\n#   Set the locale, together with the locale-related steps above.\n#   It's not entirely clear why, but alternatives that don't work include\n#    * using `C.UTF-8` instead of `en_US.UTF-8`, here and above\n#      (causes mysterious failures in zerver.tests.test_narrow)\n#    * skipping the /etc/default/locale step above (ditto)\n#    * skipping this ENV instruction (causes provision to fail,\n#      because Python tries to use the `ascii` codec)\n#   Details in https://github.com/zulip/zulip/pull/7762#issuecomment-353197289\n#   and particularly https://circleci.com/gh/hackerkid/zulip/80 .\nENV LC_ALL=\"en_US.UTF-8\"\n#   Install Docker.  This logic comes from Circle's Dockerfile; it's probably\n#   faster than the upstream-recommended approach of using their apt repo,\n#   and fine for an image that will be rebuilt rather than upgraded.\n#   Docker core...\nRUN set -e \\\n && export DOCKER_VERSION=$( curl --silent --fail --retry 3 https://download.docker.com/linux/static/stable/x86_64/ | grep -o -e 'docker-[.0-9]*-ce\\.tgz' | sort -r | head -n 1 ;) \\\n && DOCKER_URL=\"https://download.docker.com/linux/static/stable/x86_64/${{DOCKER_VERSION}}\" \\\n && echo Docker URL: $DOCKER_URL \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/docker.tgz \"${{DOCKER_URL}}\" \\\n && ls -lha /tmp/docker.tgz \\\n && tar -xz -C /tmp -f /tmp/docker.tgz \\\n && mv /tmp/docker/* /usr/bin \\\n && rm -rf /tmp/docker /tmp/docker.tgz \\\n && which docker \\\n && (docker version 2> /dev/null || true )\n#   ...docker-compose...\nRUN COMPOSE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL \\\n && chmod +x /usr/bin/docker-compose \\\n && docker-compose version\n#   ... and dockerize.\nRUN DOCKERIZE_URL=\"https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/dockerize-latest.tar.gz\" \\\n && curl --silent --show-error --location --fail --retry 3 --output /tmp/dockerize-linux-amd64.tar.gz $DOCKERIZE_URL \\\n && tar -C /usr/local/bin -xzvf /tmp/dockerize-linux-amd64.tar.gz \\\n && rm -rf /tmp/dockerize-linux-amd64.tar.gz \\\n && dockerize --version\n#   Extra packages used by Zulip.\nRUN apt-get update \\\n && apt-get install --no-install-recommends closure-compiler memcached rabbitmq-server redis-server hunspell-en-us supervisor libssl-dev yui-compressor puppet gettext libffi-dev libfreetype6-dev zlib1g-dev libjpeg-dev libldap2-dev libmemcached-dev python-dev python-pip python-six libxml2-dev libxslt1-dev libpq-dev {extra_packages}\nRUN groupadd --gid 3434 circleci \\\n && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \\\n && echo 'circleci ALL = (ALL) NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci \\\n && echo 'Defaults env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep\nUSER circleci\nCMD [\"/bin/sh\"]\n","originalDockerfileUglifiedHash":"2ac8373c82ddf19247a2f2500393f7c8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/1f6bd55f07dcc4685cd99774cd24533f019cd082.dockerfile"}