{"seed":2861691478,"processedDockerfileHash":"684a2cf06504c4cdb7923bfc56ae6cbe","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   This Dockerfile specifies the recipe for creating an image for the tests\n#   to run in.\n#\n#   We install as many test dependencies here as we can, because these setup\n#   steps can be cached.  They do *not* run every time we run the build.\n#   The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#   changes.\n#   Base Dockerfile for gRPC dev images\nFROM debian:latest\n#   Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#   Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#   Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#   Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n#   Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n#   (Ubuntu instructions need apt to support https)\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.88.1-7ubuntu1 libunwind8=1.6.2-3 gettext=0.21-11 -y --force-yes \\\n && curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 \\\n && mkdir -p /opt/dotnet \\\n && tar zxf dotnet.tar.gz -C /opt/dotnet \\\n && ln -s /opt/dotnet/dotnet /usr/local/bin\n#   Install dependencies.  We start with the basic ones require to build protoc\n#   and the C++ build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install --no-install-recommends autoconf=2.71-3 autotools-dev=20220109.1 build-essential=12.9ubuntu3 bzip2=1.0.8-5build1 ccache=4.7.4-1 curl=7.88.1-7ubuntu1 gcc=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 libc6=2.37-0ubuntu2 libc6-dbg=2.37-0ubuntu2 libc6-dev=2.37-0ubuntu2 libgtest-dev=1.12.1-0.2 libtool=2.4.7-5 make=4.3-4.1build1 parallel=20221122+ds-2 time=1.9-0.2 wget=1.21.3-1ubuntu1 mono-devel=6.8.0.105+dfsg-3.3 referenceassemblies-pcl nunit=2.6.4+dfsg-1.1 maven=3.8.7-1 openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby=1:3.1 cmake=3.25.1-1 php5.6 php5.6-dev php5.6-xml php7.0 php7.0-dev php7.0-xml phpunit=9.6.3-1 valgrind=1:3.19.0-1ubuntu1 libxml2-dev=2.9.14+dfsg-1.1build2 -y --force-yes \\\n && apt-get clean\n#  #################\n#   C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n#  #################\n#   Python dependencies\n#   These packages exist in apt-get, but their versions are too old, so we have\n#   to get updates from pip.\nRUN pip install pip==23.1 --upgrade\nRUN pip install virtualenv==20.21.0 tox==4.4.12 yattag==1.15.1\n#  #################\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  #################\n#   Java dependencies\n#   This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard c2b3b3e04e7a023efe06f2107705b45428847800 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n#  #################\n#   PHP dependencies.\nRUN wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2\nRUN cd php-5.5.38 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.5.38 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.5 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror\nRUN mv mirror php-5.6.30.tar.bz2\nRUN tar -xvf php-5.6.30.tar.bz2\nRUN cd php-5.6.30 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.6.30 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.6 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror\nRUN mv mirror php-7.0.18.tar.bz2\nRUN tar -xvf php-7.0.18.tar.bz2\nRUN cd php-7.0.18 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-7.0.18 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-7.0 \\\n && make \\\n && make install \\\n && cd ..\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN composer config -g -- disable-tls true\nRUN composer config -g -- secure-http false\nRUN cd /tmp \\\n && rm -rf protobuf \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard 6b27c1f981a9a93918e4039f236ead27165a8e91 \\\n && cd php \\\n && ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.5 \\\n && ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.6 \\\n && ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-7.0\n#  #################\n#   Go dependencies.\nRUN apt-get install --no-install-recommends golang=2:1.20~0ubuntu1 -y\n#  #################\n#   Javascript dependencies.\nRUN apt-get install --no-install-recommends npm=9.2.0~ds1-1 -y\n#   On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n#   is taken by another legacy binary. We don't have that legacy binary and\n#   npm expects the binary to be named 'node', so we just create a symbol\n#   link here.\nRUN ln -s `which nodejs ` /usr/bin/node\n#  #################\n#   Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#   Define the default command.\nCMD [\"bash\"]\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  This Dockerfile specifies the recipe for creating an image for the tests\n#  to run in.\n#\n#  We install as many test dependencies here as we can, because these setup\n#  steps can be cached.  They do *not* run every time we run the build.\n#  The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#  changes.\n#  Base Dockerfile for gRPC dev images\nFROM debian:latest\n#  Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#  Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#  Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#  Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n#  Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n#  (Ubuntu instructions need apt to support https)\nRUN apt-get update \\\n && apt-get install curl libunwind8 gettext -y --force-yes \\\n && curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 \\\n && mkdir -p /opt/dotnet \\\n && tar zxf dotnet.tar.gz -C /opt/dotnet \\\n && ln -s /opt/dotnet/dotnet /usr/local/bin\n#  Install dependencies.  We start with the basic ones require to build protoc\n#  and the C++ build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget mono-devel referenceassemblies-pcl nunit maven openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby cmake php5.6 php5.6-dev php5.6-xml php7.0 php7.0-dev php7.0-xml phpunit valgrind libxml2-dev -y --force-yes \\\n && apt-get clean\n# #################\n#  C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n# #################\n#  Python dependencies\n#  These packages exist in apt-get, but their versions are too old, so we have\n#  to get updates from pip.\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n# #################\n#  Ruby dependencies\n#  Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#  Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n# #################\n#  Java dependencies\n#  This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard c2b3b3e04e7a023efe06f2107705b45428847800 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n# #################\n#  PHP dependencies.\nRUN wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2\nRUN cd php-5.5.38 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.5.38 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.5 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror\nRUN mv mirror php-5.6.30.tar.bz2\nRUN tar -xvf php-5.6.30.tar.bz2\nRUN cd php-5.6.30 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.6.30 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.6 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror\nRUN mv mirror php-7.0.18.tar.bz2\nRUN tar -xvf php-7.0.18.tar.bz2\nRUN cd php-7.0.18 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-7.0.18 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-7.0 \\\n && make \\\n && make install \\\n && cd ..\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN composer config -g -- disable-tls true\nRUN composer config -g -- secure-http false\nRUN cd /tmp \\\n && rm -rf protobuf \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard 6b27c1f981a9a93918e4039f236ead27165a8e91 \\\n && cd php \\\n && ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.5 \\\n && ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.6 \\\n && ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-7.0\n# #################\n#  Go dependencies.\nRUN apt-get install golang -y\n# #################\n#  Javascript dependencies.\nRUN apt-get install npm -y\n#  On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n#  is taken by another legacy binary. We don't have that legacy binary and\n#  npm expects the binary to be named 'node', so we just create a symbol\n#  link here.\nRUN ln -s `which nodejs ` /usr/bin/node\n# #################\n#  Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#  Define the default command.\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"5bdfd5a5d3a904ddbf79b3bdaa91f256","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   This Dockerfile specifies the recipe for creating an image for the tests\n#   to run in.\n#\n#   We install as many test dependencies here as we can, because these setup\n#   steps can be cached.  They do *not* run every time we run the build.\n#   The Docker image is only rebuilt when the Dockerfile (ie. this file)\n#   changes.\n#   Base Dockerfile for gRPC dev images\nFROM debian:latest\n#   Apt source for old Python versions.\nRUN echo 'deb http://ppa.launchpad.net/fkrull/deadsnakes/ubuntu trusty main' > /etc/apt/sources.list.d/deadsnakes.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DB82666C\n#   Apt source for Oracle Java.\nRUN echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main' > /etc/apt/sources.list.d/webupd8team-java-trusty.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 \\\n && echo \"oracle-java7-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n#   Apt source for Mono\nRUN echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | tee /etc/apt/sources.list.d/mono-xamarin.list \\\n && echo \"deb http://download.mono-project.com/repo/debian wheezy-libjpeg62-compat main\" | tee -a /etc/apt/sources.list.d/mono-xamarin.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n#   Apt source for php\nRUN echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu trusty main\" | tee /etc/apt/sources.list.d/various-php.list \\\n && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F4FCBB07\n#   Install dotnet SDK based on https://www.microsoft.com/net/core#debian\n#   (Ubuntu instructions need apt to support https)\nRUN apt-get update \\\n && apt-get install curl libunwind8 gettext -y --force-yes \\\n && curl -sSL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?LinkID=809130 \\\n && mkdir -p /opt/dotnet \\\n && tar zxf dotnet.tar.gz -C /opt/dotnet \\\n && ln -s /opt/dotnet/dotnet /usr/local/bin\n#   Install dependencies.  We start with the basic ones require to build protoc\n#   and the C++ build\nRUN apt-get clean \\\n && apt-get update \\\n && apt-get install autoconf autotools-dev build-essential bzip2 ccache curl gcc git libc6 libc6-dbg libc6-dev libgtest-dev libtool make parallel time wget mono-devel referenceassemblies-pcl nunit maven openjdk-7-jdk oracle-java7-installer python-setuptools python-pip python-dev python2.6-dev python3.3-dev python3.4-dev ruby cmake php5.6 php5.6-dev php5.6-xml php7.0 php7.0-dev php7.0-xml phpunit valgrind libxml2-dev -y --force-yes \\\n && apt-get clean\n#  #################\n#   C# dependencies\nRUN wget www.nuget.org/NuGet.exe -O /usr/local/bin/nuget.exe\n#  #################\n#   Python dependencies\n#   These packages exist in apt-get, but their versions are too old, so we have\n#   to get updates from pip.\nRUN pip install pip --upgrade\nRUN pip install virtualenv tox yattag\n#  #################\n#   Ruby dependencies\n#   Install rvm\nRUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\nRUN curl -sSL https://get.rvm.io | bash -s stable\n#   Install Ruby 2.1, Ruby 2.2 and JRuby 1.7\nRUN /bin/bash -l -c \"rvm install ruby-2.1\"\nRUN /bin/bash -l -c \"rvm install ruby-2.2\"\nRUN /bin/bash -l -c \"rvm install jruby-1.7\"\nRUN /bin/bash -l -c \"echo 'gem: --no-ri --no-rdoc' > ~/.gemrc\"\nRUN /bin/bash -l -c \"echo 'export PATH=/usr/local/rvm/bin:$PATH' >> ~/.bashrc\"\nRUN /bin/bash -l -c \"gem install bundler --no-ri --no-rdoc\"\n#  #################\n#   Java dependencies\n#   This step requires compiling protoc. :(\nENV MAVEN_REPO=\"/var/maven_local_repository\"\nENV MVN=\"mvn --batch-mode\"\nRUN cd /tmp \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard c2b3b3e04e7a023efe06f2107705b45428847800 \\\n && ./autogen.sh \\\n && ./configure \\\n && make -j4 \\\n && cd java \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO \\\n && cd ../javanano \\\n && $MVN install dependency:go-offline -Dmaven.repo.local=$MAVEN_REPO\n#  #################\n#   PHP dependencies.\nRUN wget http://am1.php.net/get/php-5.5.38.tar.bz2/from/this/mirror\nRUN mv mirror php-5.5.38.tar.bz2\nRUN tar -xvf php-5.5.38.tar.bz2\nRUN cd php-5.5.38 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.5-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.5.38 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.5 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-5.6.30.tar.bz2/from/this/mirror\nRUN mv mirror php-5.6.30.tar.bz2\nRUN tar -xvf php-5.6.30.tar.bz2\nRUN cd php-5.6.30 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-5.6-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-5.6.30 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-5.6 \\\n && make \\\n && make install \\\n && cd ..\nRUN wget http://am1.php.net/get/php-7.0.18.tar.bz2/from/this/mirror\nRUN mv mirror php-7.0.18.tar.bz2\nRUN tar -xvf php-7.0.18.tar.bz2\nRUN cd php-7.0.18 \\\n && ./configure --enable-maintainer-zts --prefix=/usr/local/php-7.0-zts \\\n && make \\\n && make install \\\n && cd ..\nRUN cd php-7.0.18 \\\n && make clean \\\n && ./configure --prefix=/usr/local/php-7.0 \\\n && make \\\n && make install \\\n && cd ..\nRUN php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nRUN php composer-setup.php\nRUN mv composer.phar /usr/bin/composer\nRUN php -r \"unlink('composer-setup.php');\"\nRUN composer config -g -- disable-tls true\nRUN composer config -g -- secure-http false\nRUN cd /tmp \\\n && rm -rf protobuf \\\n && git clone https://github.com/google/protobuf.git \\\n && cd protobuf \\\n && git reset --hard 6b27c1f981a9a93918e4039f236ead27165a8e91 \\\n && cd php \\\n && ln -sfn /usr/local/php-5.5/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.5/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.5/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.5 \\\n && ln -sfn /usr/local/php-5.6/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-5.6/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-5.6/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-5.6 \\\n && ln -sfn /usr/local/php-7.0/bin/php /usr/bin/php \\\n && ln -sfn /usr/local/php-7.0/bin/php-config /usr/bin/php-config \\\n && ln -sfn /usr/local/php-7.0/bin/phpize /usr/bin/phpize \\\n && composer install \\\n && mv vendor /usr/local/vendor-7.0\n#  #################\n#   Go dependencies.\nRUN apt-get install golang -y\n#  #################\n#   Javascript dependencies.\nRUN apt-get install npm -y\n#   On Debian/Ubuntu, nodejs binary is named 'nodejs' because the name 'node'\n#   is taken by another legacy binary. We don't have that legacy binary and\n#   npm expects the binary to be named 'node', so we just create a symbol\n#   link here.\nRUN ln -s `which nodejs ` /usr/bin/node\n#  #################\n#   Prepare ccache\nRUN ln -s /usr/bin/ccache /usr/local/bin/gcc\nRUN ln -s /usr/bin/ccache /usr/local/bin/g++\nRUN ln -s /usr/bin/ccache /usr/local/bin/cc\nRUN ln -s /usr/bin/ccache /usr/local/bin/c++\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang\nRUN ln -s /usr/bin/ccache /usr/local/bin/clang++\n#   Define the default command.\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"cc31fd673ab20639bd8b14175d1aff2d","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/9c9ee56b8c5c1b5fca73a1cf6e2869044ab640d1.dockerfile"}