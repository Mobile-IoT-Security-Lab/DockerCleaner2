{"seed":3130512025,"processedDockerfileHash":"a5e1f09bac272674e90dea86be8c2e3c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Takipi\nFROM openjdk:8-jre-alpine\nMAINTAINER Chen Harel \"https://github.com/chook\"\n#   Java Version and other ENV\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"131\" \\\n    JAVA_VERSION_BUILD=\"11\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    PATH=\"${PATH}:/opt/jdk/bin\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    LANG=\"C.UTF-8\"\nRUN set -ex \\\n && apk upgrade --update \\\n && apk add libstdc++ curl ca-certificates bash --update \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add /tmp/*.apk --allow-untrusted \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /tmp/dcevm \\\n && curl -L -o /tmp/dcevm/DCEVM-light-8u112-installer.jar \"https://github.com/dcevm/dcevm/releases/download/light-jdk8u112%2B8/DCEVM-light-8u112-installer.jar\" \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/d54c1d3a095b4ff2b6607d096fa80163/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && cd /tmp/dcevm \\\n && unzip DCEVM-light-8u112-installer.jar \\\n && mkdir -p /opt/jdk/jre/lib/amd64/dcevm \\\n && cp linux_amd64_compiler2/product/libjvm.so /opt/jdk/jre/lib/amd64/dcevm/libjvm.so \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security/ ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Set environment\nENV JAVA_HOME=\"/opt/jdk\"\nENV PATH=\"/opt/jdk/bin:${PATH}\"\n#  ## Takipi Installation \nENV TAKIPI_SECRET_KEY=\"S3875#YAFwDEGg5oSIU+TM#G0G7VATLOqJIKtAMy1MObfFINaQmVT5hGYLQ+cpPuq4=#87a1\"\n#   Takipi installer dependencies (we need xz for a future untar process)\nRUN apk add xz curl ca-certificates --update\nRUN update-ca-certificates\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/gcc-libs/download > /tmp/gcc-libs.tar.gz \\\n && mkdir /usr/libgcc-compat \\\n && tar -xvf /tmp/gcc-libs.tar.gz -C /usr/libgcc-compat \\\n && rm -rf /tmp/gcc-libs.tar.gz\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/zlib/download/ > /tmp/zlib.tar.gz \\\n && mkdir /usr/zlib-compat \\\n && tar -xvf /tmp/zlib.tar.gz -C /usr/zlib-compat \\\n && rm -rf /tmp/zlib.tar.gz\n#   Install Takipi\nRUN apk update \\\n && apk add ca-certificates \\\n && update-ca-certificates \\\n && apk add openssl\nRUN curl -Ls /dev/null http://get.takipi.com/takipi-t4c-installer | bash /dev/stdin -i --sk=${TAKIPI_SECRET_KEY} --no-check-certificates\nRUN rm /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/zlib-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/libgcc-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /opt/takipi/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN /usr/glibc-compat/sbin/ldconfig\n#  ## Takipi installation complete\n#   Getting Java tester\nRUN wget https://s3.amazonaws.com/app-takipi-com/chen/scala-boom.jar -O scala-boom.jar\n#   More cleanups\nRUN apk del xz icu wget curl tar \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf glibc-2.23-r3.apk glibc-bin-2.23-r3.apk\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/takipi/lib\"\nENV PATH=\"${PATH}:/opt/takipi/lib\"\n#   Running a java process with Takipi\nCMD java -agentlib:TakipiAgent -jar scala-boom.jar\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Takipi\nFROM openjdk:8-jre-alpine\nMAINTAINER Chen Harel \"https://github.com/chook\"\n#  Java Version and other ENV\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"131\" \\\n    JAVA_VERSION_BUILD=\"11\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    PATH=\"${PATH}:/opt/jdk/bin\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    LANG=\"C.UTF-8\"\nRUN set -ex \\\n && apk upgrade --update \\\n && apk add --update libstdc++ curl ca-certificates bash \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add --allow-untrusted /tmp/*.apk \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /tmp/dcevm \\\n && curl -L -o /tmp/dcevm/DCEVM-light-8u112-installer.jar \"https://github.com/dcevm/dcevm/releases/download/light-jdk8u112%2B8/DCEVM-light-8u112-installer.jar\" \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/d54c1d3a095b4ff2b6607d096fa80163/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && cd /tmp/dcevm \\\n && unzip DCEVM-light-8u112-installer.jar \\\n && mkdir -p /opt/jdk/jre/lib/amd64/dcevm \\\n && cp linux_amd64_compiler2/product/libjvm.so /opt/jdk/jre/lib/amd64/dcevm/libjvm.so \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security/ ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#  Set environment\nENV JAVA_HOME=\"/opt/jdk\"\nENV PATH=\"/opt/jdk/bin:${PATH}\"\n# ## Takipi Installation \nENV TAKIPI_SECRET_KEY=\"S3875#YAFwDEGg5oSIU+TM#G0G7VATLOqJIKtAMy1MObfFINaQmVT5hGYLQ+cpPuq4=#87a1\"\n#  Takipi installer dependencies (we need xz for a future untar process)\nRUN apk --update add xz curl ca-certificates\nRUN update-ca-certificates\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/gcc-libs/download > /tmp/gcc-libs.tar.gz \\\n && mkdir /usr/libgcc-compat \\\n && tar -xvf /tmp/gcc-libs.tar.gz -C /usr/libgcc-compat \\\n && rm -rf /tmp/gcc-libs.tar.gz\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/zlib/download/ > /tmp/zlib.tar.gz \\\n && mkdir /usr/zlib-compat \\\n && tar -xvf /tmp/zlib.tar.gz -C /usr/zlib-compat \\\n && rm -rf /tmp/zlib.tar.gz\n#  Install Takipi\nRUN apk update \\\n && apk add ca-certificates \\\n && update-ca-certificates \\\n && apk add openssl\nRUN curl -Ls /dev/null http://get.takipi.com/takipi-t4c-installer | bash /dev/stdin -i --sk=${TAKIPI_SECRET_KEY} --no-check-certificates\nRUN rm /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/zlib-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/libgcc-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /opt/takipi/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN /usr/glibc-compat/sbin/ldconfig\n# ## Takipi installation complete\n#  Getting Java tester\nRUN wget https://s3.amazonaws.com/app-takipi-com/chen/scala-boom.jar -O scala-boom.jar\n#  More cleanups\nRUN apk del xz icu wget curl tar \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf glibc-2.23-r3.apk glibc-bin-2.23-r3.apk\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/takipi/lib\"\nENV PATH=\"${PATH}:/opt/takipi/lib\"\n#  Running a java process with Takipi\nCMD java -agentlib:TakipiAgent -jar scala-boom.jar\n","injectedSmells":[],"originalDockerfileHash":"c661da54d5af929aada51c1dba97d299","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Takipi\nFROM openjdk:8-jre-alpine\nMAINTAINER Chen Harel \"https://github.com/chook\"\n#   Java Version and other ENV\nENV JAVA_VERSION_MAJOR=\"8\" \\\n    JAVA_VERSION_MINOR=\"131\" \\\n    JAVA_VERSION_BUILD=\"11\" \\\n    JAVA_PACKAGE=\"jdk\" \\\n    JAVA_JCE=\"standard\" \\\n    JAVA_HOME=\"/opt/jdk\" \\\n    PATH=\"${PATH}:/opt/jdk/bin\" \\\n    GLIBC_VERSION=\"2.23-r3\" \\\n    LANG=\"C.UTF-8\"\nRUN set -ex \\\n && apk upgrade --update \\\n && apk add --update libstdc++ curl ca-certificates bash \\\n && for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL https://github.com/andyshinn/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/${pkg}.apk -o /tmp/${pkg}.apk ; done \\\n && apk add --allow-untrusted /tmp/*.apk \\\n && rm -v /tmp/*.apk \\\n && (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) \\\n && echo \"export LANG=C.UTF-8\" > /etc/profile.d/locale.sh \\\n && /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib \\\n && mkdir /tmp/dcevm \\\n && curl -L -o /tmp/dcevm/DCEVM-light-8u112-installer.jar \"https://github.com/dcevm/dcevm/releases/download/light-jdk8u112%2B8/DCEVM-light-8u112-installer.jar\" \\\n && mkdir /opt \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/java.tar.gz http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-b${JAVA_VERSION_BUILD}/d54c1d3a095b4ff2b6607d096fa80163/${JAVA_PACKAGE}-${JAVA_VERSION_MAJOR}u${JAVA_VERSION_MINOR}-linux-x64.tar.gz \\\n && gunzip /tmp/java.tar.gz \\\n && tar -C /opt -xf /tmp/java.tar \\\n && ln -s /opt/jdk1.${JAVA_VERSION_MAJOR}.0_${JAVA_VERSION_MINOR} /opt/jdk \\\n && cd /tmp/dcevm \\\n && unzip DCEVM-light-8u112-installer.jar \\\n && mkdir -p /opt/jdk/jre/lib/amd64/dcevm \\\n && cp linux_amd64_compiler2/product/libjvm.so /opt/jdk/jre/lib/amd64/dcevm/libjvm.so \\\n && if [ \"${JAVA_JCE}\" == \"unlimited\" ] ; then echo \"Installing Unlimited JCE policy\" \\\n && curl -jksSLH \"Cookie: oraclelicense=accept-securebackup-cookie\" -o /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip http://download.oracle.com/otn-pub/java/jce/${JAVA_VERSION_MAJOR}/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cd /tmp \\\n && unzip /tmp/jce_policy-${JAVA_VERSION_MAJOR}.zip \\\n && cp -v /tmp/UnlimitedJCEPolicyJDK8/*.jar /opt/jdk/jre/lib/security/ ; fi \\\n && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=10/ $JAVA_HOME/jre/lib/security/java.security \\\n && apk del curl glibc-i18n \\\n && rm -rf /opt/jdk/*src.zip /opt/jdk/lib/missioncontrol /opt/jdk/lib/visualvm /opt/jdk/lib/*javafx* /opt/jdk/jre/plugin /opt/jdk/jre/bin/javaws /opt/jdk/jre/bin/jjs /opt/jdk/jre/bin/orbd /opt/jdk/jre/bin/pack200 /opt/jdk/jre/bin/policytool /opt/jdk/jre/bin/rmid /opt/jdk/jre/bin/rmiregistry /opt/jdk/jre/bin/servertool /opt/jdk/jre/bin/tnameserv /opt/jdk/jre/bin/unpack200 /opt/jdk/jre/lib/javaws.jar /opt/jdk/jre/lib/deploy* /opt/jdk/jre/lib/desktop /opt/jdk/jre/lib/*javafx* /opt/jdk/jre/lib/*jfx* /opt/jdk/jre/lib/amd64/libdecora_sse.so /opt/jdk/jre/lib/amd64/libprism_*.so /opt/jdk/jre/lib/amd64/libfxplugins.so /opt/jdk/jre/lib/amd64/libglass.so /opt/jdk/jre/lib/amd64/libgstreamer-lite.so /opt/jdk/jre/lib/amd64/libjavafx*.so /opt/jdk/jre/lib/amd64/libjfx*.so /opt/jdk/jre/lib/ext/jfxrt.jar /opt/jdk/jre/lib/ext/nashorn.jar /opt/jdk/jre/lib/oblique-fonts /opt/jdk/jre/lib/plugin.jar /tmp/* /var/cache/apk/* \\\n && echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf\n#   Set environment\nENV JAVA_HOME=\"/opt/jdk\"\nENV PATH=\"/opt/jdk/bin:${PATH}\"\n#  ## Takipi Installation \nENV TAKIPI_SECRET_KEY=\"S3875#YAFwDEGg5oSIU+TM#G0G7VATLOqJIKtAMy1MObfFINaQmVT5hGYLQ+cpPuq4=#87a1\"\n#   Takipi installer dependencies (we need xz for a future untar process)\nRUN apk --update add xz curl ca-certificates\nRUN update-ca-certificates\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/gcc-libs/download > /tmp/gcc-libs.tar.gz \\\n && mkdir /usr/libgcc-compat \\\n && tar -xvf /tmp/gcc-libs.tar.gz -C /usr/libgcc-compat \\\n && rm -rf /tmp/gcc-libs.tar.gz\nRUN curl -Ls https://www.archlinux.org/packages/core/x86_64/zlib/download/ > /tmp/zlib.tar.gz \\\n && mkdir /usr/zlib-compat \\\n && tar -xvf /tmp/zlib.tar.gz -C /usr/zlib-compat \\\n && rm -rf /tmp/zlib.tar.gz\n#   Install Takipi\nRUN apk update \\\n && apk add ca-certificates \\\n && update-ca-certificates \\\n && apk add openssl\nRUN curl -Ls /dev/null http://get.takipi.com/takipi-t4c-installer | bash /dev/stdin -i --sk=${TAKIPI_SECRET_KEY} --no-check-certificates\nRUN rm /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/zlib-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/libgcc-compat/usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /opt/takipi/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /usr/lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN echo /lib >> /usr/glibc-compat/etc/ld.so.conf\nRUN /usr/glibc-compat/sbin/ldconfig\n#  ## Takipi installation complete\n#   Getting Java tester\nRUN wget https://s3.amazonaws.com/app-takipi-com/chen/scala-boom.jar -O scala-boom.jar\n#   More cleanups\nRUN apk del xz icu wget curl tar \\\n && rm -rf /tmp/* \\\n && rm -rf /var/cache/apk/* \\\n && rm -rf glibc-2.23-r3.apk glibc-bin-2.23-r3.apk\nENV LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:/opt/takipi/lib\"\nENV PATH=\"${PATH}:/opt/takipi/lib\"\n#   Running a java process with Takipi\nCMD java -agentlib:TakipiAgent -jar scala-boom.jar\n","originalDockerfileUglifiedHash":"6891fe1f252eb1558a42ddf4935b4618","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/4bea78f285a3fadfaee70e65749d21d5554191bb.dockerfile"}