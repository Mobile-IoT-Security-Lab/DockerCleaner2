{"seed":2730524148,"processedDockerfileHash":"c56b411cc9356d77f0786e78d689ba6c","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-pip","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM phusion/baseimage:0.9.16\n#   TODO Update Grafana to 2.0.2; consider using .deb installer?\nENV GRAFANA_VERSION=\"1.9.1\"\nENV INFLUXDB_VERSION=\"0.8.8\"\n#   Prevent some error messages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  RUN\t\techo 'deb http://us.archive.ubuntu.com/ubuntu/ trusty universe' >> /etc/apt/sources.list\nRUN : \\\n && apt-get -y upgrade\n#   ---------------- #\n#     Installation   #\n#   ---------------- #\n#   Install all prerequisites\nRUN (apt-get update ;apt-get install --no-install-recommends wget nginx-light curl -y )\n#   Install Grafana to /src/grafana\nRUN mkdir -p src/grafana \\\n && cd src/grafana \\\n && wget http://grafanarel.s3.amazonaws.com/grafana-${GRAFANA_VERSION}.tar.gz -O grafana.tar.gz \\\n && tar xzf grafana.tar.gz --strip-components=1 \\\n && rm grafana.tar.gz\n#   Install InfluxDB\nRUN wget http://s3.amazonaws.com/influxdb/influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && dpkg -i influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && rm influxdb_${INFLUXDB_VERSION}_amd64.deb\n#   ----------------- #\n#     Configuration   #\n#   ----------------- #\n#   Configure InfluxDB\nCOPY influxdb/config.toml /etc/influxdb/config.toml\nCOPY influxdb/run.sh /etc/service/influxdb/run\n#   These two databases have to be created. These variables are used by set_influxdb.sh and set_grafana.sh\nENV PRE_CREATE_DB=\"data grafana\"\nENV INFLUXDB_DATA_USER=\"data\"\nENV INFLUXDB_DATA_PW=\"data\"\nENV INFLUXDB_GRAFANA_USER=\"grafana\"\nENV INFLUXDB_GRAFANA_PW=\"grafana\"\nENV ROOT_PW=\"root\"\n#   Configure Grafana\nCOPY ./grafana/config.js /src/grafana/config.js\n#  ADD\t./grafana/scripted.json /src/grafana/app/dashboards/default.json\nCOPY ./configure.sh /configure.sh\nCOPY ./set_grafana.sh /set_grafana.sh\nCOPY ./set_influxdb.sh /set_influxdb.sh\nRUN /configure.sh\n#   Configure nginx (that serves Grafana)\nCOPY ./nginx/run.sh /etc/service/nginx/run\nCOPY ./nginx/nginx.conf /etc/nginx/nginx.conf\n#   -------------- #\n#     CloudWatch   #\n#   -------------- #\n#   Add a script run automatically at startup that creates /docker.env\n#   so that the Cron job can access the AWS credentials env variables\nCOPY cloudwatch/env2file /etc/my_init.d/env2file\nRUN (apt-get update ;apt-get install --no-install-recommends python-pip -y )\nRUN pip install PyYAML==6.0 --global-option=\"--without-libyaml\"\n#   ^- libyaml seems to be unavailable here; cloudwatch dependency\nRUN pip install cloudwatch-to-graphite==0.5.0\nCOPY cloudwatch/leadbutt-cloudwatch.conf /etc/leadbutt-cloudwatch.conf\nCOPY cloudwatch/leadbutt-cloudwatch-cron.conf /etc/cron.d/leadbutt-cloudwatch\n#   TODO(improvement) use crontab fragments in /etc/cron.d/ instead of using root's crontab\n#                       See for other tips: http://stackoverflow.com/questions/26822067/running-cron-python-jobs-within-docker\nRUN crontab /etc/cron.d/leadbutt-cloudwatch\n#   Note: AWS cedentials should be provided via ENV vars; ex.:\n#       docker run -e AWS_ACCESS_KEY_ID=xxxx -e AWS_SECRET_ACCESS_KEY=yyyy ...\n#   ----------- #\n#     Cleanup   #\n#   ----------- #\nRUN apt-get autoremove -y wget curl \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /*.sh\n#   ----------- #\n#     Volumes   #\n#   ----------- #\nCOPY configure_influxdb_at_run.sh /etc/my_init.d/configure_influxdb_at_run.sh\nRUN cp -r /var/easydeploy/share /var/infuxdb_initial_data_backup\n#   influxdb data dir:\nVOLUME [\"/var/easydeploy/share\"]\n#   ---------------- #\n#     Expose Ports   #\n#   ---------------- #\n#   Grafana\nEXPOSE 80/tcp\n#   InfluxDB Admin server\nEXPOSE 8083/tcp\n#   InfluxDB HTTP API\nEXPOSE 8086/tcp\n#   InfluxDB HTTPS API\nEXPOSE 8084/tcp\n#   -------- #\n#     Run!   #\n#   -------- #\nCMD /sbin/my_init\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM phusion/baseimage:0.9.16\n#  TODO Update Grafana to 2.0.2; consider using .deb installer?\nENV GRAFANA_VERSION=\"1.9.1\"\nENV INFLUXDB_VERSION=\"0.8.8\"\n#  Prevent some error messages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n# RUN\t\techo 'deb http://us.archive.ubuntu.com/ubuntu/ trusty universe' >> /etc/apt/sources.list\nRUN apt-get update -y \\\n && apt-get -y upgrade\n#  ---------------- #\n#    Installation   #\n#  ---------------- #\n#  Install all prerequisites\nRUN apt-get install wget nginx-light curl -y\n#  Install Grafana to /src/grafana\nRUN mkdir -p src/grafana \\\n && cd src/grafana \\\n && wget http://grafanarel.s3.amazonaws.com/grafana-${GRAFANA_VERSION}.tar.gz -O grafana.tar.gz \\\n && tar xzf grafana.tar.gz --strip-components=1 \\\n && rm grafana.tar.gz\n#  Install InfluxDB\nRUN wget http://s3.amazonaws.com/influxdb/influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && dpkg -i influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && rm influxdb_${INFLUXDB_VERSION}_amd64.deb\n#  ----------------- #\n#    Configuration   #\n#  ----------------- #\n#  Configure InfluxDB\nADD influxdb/config.toml /etc/influxdb/config.toml\nADD influxdb/run.sh /etc/service/influxdb/run\n#  These two databases have to be created. These variables are used by set_influxdb.sh and set_grafana.sh\nENV PRE_CREATE_DB=\"data grafana\"\nENV INFLUXDB_DATA_USER=\"data\"\nENV INFLUXDB_DATA_PW=\"data\"\nENV INFLUXDB_GRAFANA_USER=\"grafana\"\nENV INFLUXDB_GRAFANA_PW=\"grafana\"\nENV ROOT_PW=\"root\"\n#  Configure Grafana\nADD ./grafana/config.js /src/grafana/config.js\n# ADD\t./grafana/scripted.json /src/grafana/app/dashboards/default.json\nADD ./configure.sh /configure.sh\nADD ./set_grafana.sh /set_grafana.sh\nADD ./set_influxdb.sh /set_influxdb.sh\nRUN /configure.sh\n#  Configure nginx (that serves Grafana)\nADD ./nginx/run.sh /etc/service/nginx/run\nADD ./nginx/nginx.conf /etc/nginx/nginx.conf\n#  -------------- #\n#    CloudWatch   #\n#  -------------- #\n#  Add a script run automatically at startup that creates /docker.env\n#  so that the Cron job can access the AWS credentials env variables\nADD cloudwatch/env2file /etc/my_init.d/env2file\nRUN apt-get install python-pip -y\nRUN pip install PyYAML --global-option=\"--without-libyaml\"\n#  ^- libyaml seems to be unavailable here; cloudwatch dependency\nRUN pip install cloudwatch-to-graphite==0.5.0\nADD cloudwatch/leadbutt-cloudwatch.conf /etc/leadbutt-cloudwatch.conf\nADD cloudwatch/leadbutt-cloudwatch-cron.conf /etc/cron.d/leadbutt-cloudwatch\n#  TODO(improvement) use crontab fragments in /etc/cron.d/ instead of using root's crontab\n#                      See for other tips: http://stackoverflow.com/questions/26822067/running-cron-python-jobs-within-docker\nRUN crontab /etc/cron.d/leadbutt-cloudwatch\n#  Note: AWS cedentials should be provided via ENV vars; ex.:\n#      docker run -e AWS_ACCESS_KEY_ID=xxxx -e AWS_SECRET_ACCESS_KEY=yyyy ...\n#  ----------- #\n#    Cleanup   #\n#  ----------- #\nRUN apt-get autoremove -y wget curl \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /*.sh\n#  ----------- #\n#    Volumes   #\n#  ----------- #\nADD configure_influxdb_at_run.sh /etc/my_init.d/configure_influxdb_at_run.sh\nRUN cp -r /var/easydeploy/share /var/infuxdb_initial_data_backup\n#  influxdb data dir:\nVOLUME [\"/var/easydeploy/share\"]\n#  ---------------- #\n#    Expose Ports   #\n#  ---------------- #\n#  Grafana\nEXPOSE 80/tcp\n#  InfluxDB Admin server\nEXPOSE 8083/tcp\n#  InfluxDB HTTP API\nEXPOSE 8086/tcp\n#  InfluxDB HTTPS API\nEXPOSE 8084/tcp\n#  -------- #\n#    Run!   #\n#  -------- #\nCMD /sbin/my_init\n","injectedSmells":[],"originalDockerfileHash":"62ab6bc25c8c3f0a595c52eca2c07df4","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM phusion/baseimage:0.9.16\n#   TODO Update Grafana to 2.0.2; consider using .deb installer?\nENV GRAFANA_VERSION=\"1.9.1\"\nENV INFLUXDB_VERSION=\"0.8.8\"\n#   Prevent some error messages\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  RUN\t\techo 'deb http://us.archive.ubuntu.com/ubuntu/ trusty universe' >> /etc/apt/sources.list\nRUN apt-get update -y \\\n && apt-get -y upgrade\n#   ---------------- #\n#     Installation   #\n#   ---------------- #\n#   Install all prerequisites\nRUN apt-get install wget nginx-light curl -y\n#   Install Grafana to /src/grafana\nRUN mkdir -p src/grafana \\\n && cd src/grafana \\\n && wget http://grafanarel.s3.amazonaws.com/grafana-${GRAFANA_VERSION}.tar.gz -O grafana.tar.gz \\\n && tar xzf grafana.tar.gz --strip-components=1 \\\n && rm grafana.tar.gz\n#   Install InfluxDB\nRUN wget http://s3.amazonaws.com/influxdb/influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && dpkg -i influxdb_${INFLUXDB_VERSION}_amd64.deb \\\n && rm influxdb_${INFLUXDB_VERSION}_amd64.deb\n#   ----------------- #\n#     Configuration   #\n#   ----------------- #\n#   Configure InfluxDB\nADD influxdb/config.toml /etc/influxdb/config.toml\nADD influxdb/run.sh /etc/service/influxdb/run\n#   These two databases have to be created. These variables are used by set_influxdb.sh and set_grafana.sh\nENV PRE_CREATE_DB=\"data grafana\"\nENV INFLUXDB_DATA_USER=\"data\"\nENV INFLUXDB_DATA_PW=\"data\"\nENV INFLUXDB_GRAFANA_USER=\"grafana\"\nENV INFLUXDB_GRAFANA_PW=\"grafana\"\nENV ROOT_PW=\"root\"\n#   Configure Grafana\nADD ./grafana/config.js /src/grafana/config.js\n#  ADD\t./grafana/scripted.json /src/grafana/app/dashboards/default.json\nADD ./configure.sh /configure.sh\nADD ./set_grafana.sh /set_grafana.sh\nADD ./set_influxdb.sh /set_influxdb.sh\nRUN /configure.sh\n#   Configure nginx (that serves Grafana)\nADD ./nginx/run.sh /etc/service/nginx/run\nADD ./nginx/nginx.conf /etc/nginx/nginx.conf\n#   -------------- #\n#     CloudWatch   #\n#   -------------- #\n#   Add a script run automatically at startup that creates /docker.env\n#   so that the Cron job can access the AWS credentials env variables\nADD cloudwatch/env2file /etc/my_init.d/env2file\nRUN apt-get install python-pip -y\nRUN pip install PyYAML --global-option=\"--without-libyaml\"\n#   ^- libyaml seems to be unavailable here; cloudwatch dependency\nRUN pip install cloudwatch-to-graphite==0.5.0\nADD cloudwatch/leadbutt-cloudwatch.conf /etc/leadbutt-cloudwatch.conf\nADD cloudwatch/leadbutt-cloudwatch-cron.conf /etc/cron.d/leadbutt-cloudwatch\n#   TODO(improvement) use crontab fragments in /etc/cron.d/ instead of using root's crontab\n#                       See for other tips: http://stackoverflow.com/questions/26822067/running-cron-python-jobs-within-docker\nRUN crontab /etc/cron.d/leadbutt-cloudwatch\n#   Note: AWS cedentials should be provided via ENV vars; ex.:\n#       docker run -e AWS_ACCESS_KEY_ID=xxxx -e AWS_SECRET_ACCESS_KEY=yyyy ...\n#   ----------- #\n#     Cleanup   #\n#   ----------- #\nRUN apt-get autoremove -y wget curl \\\n && apt-get -y clean \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm /*.sh\n#   ----------- #\n#     Volumes   #\n#   ----------- #\nADD configure_influxdb_at_run.sh /etc/my_init.d/configure_influxdb_at_run.sh\nRUN cp -r /var/easydeploy/share /var/infuxdb_initial_data_backup\n#   influxdb data dir:\nVOLUME [\"/var/easydeploy/share\"]\n#   ---------------- #\n#     Expose Ports   #\n#   ---------------- #\n#   Grafana\nEXPOSE 80/tcp\n#   InfluxDB Admin server\nEXPOSE 8083/tcp\n#   InfluxDB HTTP API\nEXPOSE 8086/tcp\n#   InfluxDB HTTPS API\nEXPOSE 8084/tcp\n#   -------- #\n#     Run!   #\n#   -------- #\nCMD /sbin/my_init\n","originalDockerfileUglifiedHash":"26b13fd9df7de496125f49728dc07db8","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/72008382b7a465b34c99bd7ec8024217ca147d1c.dockerfile"}