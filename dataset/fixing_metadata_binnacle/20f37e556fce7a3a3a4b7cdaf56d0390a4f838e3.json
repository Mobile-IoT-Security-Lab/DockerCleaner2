{"seed":3433003962,"processedDockerfileHash":"0dcc6eab78018d3302cc13226160eaa1","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:16.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 python-software-properties=0.96.20.10 -qq -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant=1.9.6-1ubuntu1.1 ant-contrib=1.0~b3+svn177-7 autoconf=2.69-9 build-essential=12.1ubuntu2 ca-certificates=20210119~16.04.1 cpio=2.11+dfsg-5ubuntu1.1 curl=7.47.0-1ubuntu2.19 libexpat1-dev=2.1.0-7ubuntu0.16.04.5 file=1:5.25-2ubuntu1.4 gdb=7.11.1-0ubuntu1~16.5 git=1:2.7.4-0ubuntu1.10 git-core=1:2.7.4-0ubuntu1.10 libasound2-dev=1.1.0-0ubuntu1 libcups2-dev=2.1.3-4ubuntu0.11 libdwarf-dev=20120410-2+deb7u2build0.16.04.1 libelf-dev=0.165-3ubuntu1.2 libfontconfig libfontconfig1-dev=2.11.94-0ubuntu1.1 libfreetype6-dev=2.6.1-0.1ubuntu2.5 libmpc3=1.0.3-1 libx11-dev=2:1.6.3-1ubuntu2.2 libxext-dev=2:1.3.3-1 libxrandr-dev=2:1.5.0-1 libxrender-dev=1:0.9.9-0ubuntu1 libxt-dev=1:1.1.5-0ubuntu1 libxtst-dev=2:1.2.2-1 make=4.1-6 openjdk-8-jdk=8u292-b10-0ubuntu1~16.04.1 openssh-client=1:7.2p2-4ubuntu2.10 openssh-server=1:7.2p2-4ubuntu2.10 perl=5.22.1-9ubuntu0.9 pkg-config=0.29.1-0ubuntu1 realpath=8.25-2ubuntu3~16.04 ssh=1:7.2p2-4ubuntu2.10 unzip=6.0-20ubuntu1.1 wget=1.17.1-1ubuntu1.5 xvfb=2:1.18.4-0ubuntu0.12 zip=3.0-11 `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#   Install GCC-7.4\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc740+ccache.s390x.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz\n#   Create links for c++,g++,cc,gcc and for GCC to access the C library\n#   There is a true at the end of the library link because it throws an error and it allows the container to be built\nRUN ln -s /usr/lib/s390x-linux-gnu /usr/lib64 \\\n && ln -s /usr/include/s390x-linux-gnu/* /usr/local/include | true \\\n && ln -s /usr/local/bin/g++-7.4 /usr/bin/g++-7 \\\n && ln -s /usr/local/bin/gcc-7.4 /usr/bin/gcc-7\n#   Edit ldconfig to connect the new libstdc++.so* library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#   Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#   Download and setup freemarker.jar to /home/USER/freemarker.jar\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#   Download and install boot JDK from AdoptOpenJDK for java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#   Download and install boot JDK from AdoptOpenJDK for java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#   Download and install boot JDK from AdoptOpenJDK for java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Expose SSH port\nEXPOSE 22/tcp\n#   Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#   Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#  This program and the accompanying materials are made available under\n#  the terms of the Eclipse Public License 2.0 which accompanies this\n#  distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#  or the Apache License, Version 2.0 which accompanies this distribution and\n#  is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#  This Source Code may also be made available under the following\n#  Secondary Licenses when the conditions for such availability set\n#  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#  General Public License, version 2 with the GNU Classpath\n#  Exception [1] and GNU General Public License, version 2 with the\n#  OpenJDK Assembly Exception [2].\n#\n#  [1] https://www.gnu.org/software/classpath/license.html\n#  [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#  To use this docker file:\n#  First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#  Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#  This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#  Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#  Then run:\n#    docker build -t openj9 -f Dockerfile .\n#    docker run -it openj9\nFROM ubuntu:16.04\n#  Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common python-software-properties -qq -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential ca-certificates cpio curl libexpat1-dev file gdb git git-core libasound2-dev libcups2-dev libdwarf-dev libelf-dev libfontconfig libfontconfig1-dev libfreetype6-dev libmpc3 libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev make openjdk-8-jdk openssh-client openssh-server perl pkg-config realpath ssh unzip wget xvfb zip `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#  Install GCC-7.4\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc740+ccache.s390x.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz\n#  Create links for c++,g++,cc,gcc and for GCC to access the C library\n#  There is a true at the end of the library link because it throws an error and it allows the container to be built\nRUN ln -s /usr/lib/s390x-linux-gnu /usr/lib64 \\\n && ln -s /usr/include/s390x-linux-gnu/* /usr/local/include | true \\\n && ln -s /usr/local/bin/g++-7.4 /usr/bin/g++-7 \\\n && ln -s /usr/local/bin/gcc-7.4 /usr/bin/gcc-7\n#  Edit ldconfig to connect the new libstdc++.so* library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#  Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n#  Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#  Download and setup freemarker.jar to /home/USER/freemarker.jar\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#  Download and install boot JDK from AdoptOpenJDK for java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#  Download and install boot JDK from AdoptOpenJDK for java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#  Download and install boot JDK from AdoptOpenJDK for java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#  Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#  SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#  Expose SSH port\nEXPOSE 22/tcp\n#  Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#  Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\n","injectedSmells":[],"originalDockerfileHash":"91305da3e11df3157c6fe987cc9f7bba","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright (c) 2018, 2019 IBM Corp. and others\n#\n#   This program and the accompanying materials are made available under\n#   the terms of the Eclipse Public License 2.0 which accompanies this\n#   distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n#   or the Apache License, Version 2.0 which accompanies this distribution and\n#   is available at https://www.apache.org/licenses/LICENSE-2.0.\n#\n#   This Source Code may also be made available under the following\n#   Secondary Licenses when the conditions for such availability set\n#   forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n#   General Public License, version 2 with the GNU Classpath\n#   Exception [1] and GNU General Public License, version 2 with the\n#   OpenJDK Assembly Exception [2].\n#\n#   [1] https://www.gnu.org/software/classpath/license.html\n#   [2] http://openjdk.java.net/legal/assembly-exception.html\n#\n#   SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n#   To use this docker file:\n#   First copy your public ssh key into a file named authorized_keys next to the Dockerfile\n#   Then include a known_hosts file next to the Dockerfile, with github as a saved host\n#   This can be done with \"ssh-keyscan github.com >> path_to_dockerfile/known_hosts\"\n#   Make sure you are in the directory containing the Dockerfile, authorized_keys file, and known_hosts file\n#   Then run:\n#     docker build -t openj9 -f Dockerfile .\n#     docker run -it openj9\nFROM ubuntu:16.04\n#   Install required OS tools\nENV USER=\"jenkins\"\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common python-software-properties -qq -y \\\n && apt-get update \\\n && apt-get install --no-install-recommends ant ant-contrib autoconf build-essential ca-certificates cpio curl libexpat1-dev file gdb git git-core libasound2-dev libcups2-dev libdwarf-dev libelf-dev libfontconfig libfontconfig1-dev libfreetype6-dev libmpc3 libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev make openjdk-8-jdk openssh-client openssh-server perl pkg-config realpath ssh unzip wget xvfb zip `` -qq -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Dependency required by test framework\nRUN wget -O - http://cpanmin.us | perl - --self-upgrade \\\n && cpanm Text::CSV \\\n && cpanm JSON \\\n && cpanm XML::Parser\n#   Install GCC-7.4\nRUN cd /usr/local \\\n && wget -O gcc-7.tar.xz \"https://ci.adoptopenjdk.net/userContent/gcc/gcc740+ccache.s390x.tar.xz\" \\\n && tar -xJf gcc-7.tar.xz --strip-components=1 \\\n && rm -rf gcc-7.tar.xz\n#   Create links for c++,g++,cc,gcc and for GCC to access the C library\n#   There is a true at the end of the library link because it throws an error and it allows the container to be built\nRUN ln -s /usr/lib/s390x-linux-gnu /usr/lib64 \\\n && ln -s /usr/include/s390x-linux-gnu/* /usr/local/include | true \\\n && ln -s /usr/local/bin/g++-7.4 /usr/bin/g++-7 \\\n && ln -s /usr/local/bin/gcc-7.4 /usr/bin/gcc-7\n#   Edit ldconfig to connect the new libstdc++.so* library\nRUN echo \"/usr/local/lib64\" >> /etc/ld.so.conf.d/local.conf \\\n && ldconfig\n#   Install cmake version 3.11.4\nRUN cd /tmp \\\n && wget https://cmake.org/files/v3.11/cmake-3.11.4.tar.gz \\\n && tar xzf cmake-3.11.4.tar.gz \\\n && rm cmake-3.11.4.tar.gz \\\n && cd /tmp/cmake-3.11.4 \\\n && ./configure \\\n && make \\\n && make install\n#   Add user home/USER and copy authorized_keys and known_hosts\nRUN useradd -ms /bin/bash ${USER} \\\n && mkdir /home/${USER}/.ssh/\nCOPY authorized_keys /home/${USER}/.ssh/authorized_keys\nCOPY known_hosts /home/${USER}/.ssh/known_hosts\nRUN chown -R ${USER}:${USER} /home/${USER} \\\n && chmod 644 /home/${USER}/.ssh/authorized_keys \\\n && chmod 644 /home/${USER}/.ssh/known_hosts \\\n && chmod 700 /home/${USER}/.ssh\n#   Download and setup freemarker.jar to /home/USER/freemarker.jar\nRUN cd /home/${USER} \\\n && wget https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download -O freemarker.tgz \\\n && tar -xzf freemarker.tgz freemarker-2.3.8/lib/freemarker.jar --strip=2 \\\n && rm -f freemarker.tgz\n#   Download and install boot JDK from AdoptOpenJDK for java 8\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-80 \\\n && cd /usr/lib/jvm/adoptojdk-java-80 \\\n && wget -O bootjdk8.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk8?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk8.tar.gz \\\n && rm -f bootjdk8.tar.gz \\\n && mv $( ls | grep -i jdk8 ;) bootjdk8 \\\n && mv bootjdk8/* /usr/lib/jvm/adoptojdk-java-80 \\\n && rm -rf bootjdk8\n#   Download and install boot JDK from AdoptOpenJDK for java 11 and 12\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-11 \\\n && cd /usr/lib/jvm/adoptojdk-java-11 \\\n && wget -O bootjdk11.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk11.tar.gz \\\n && rm -f bootjdk11.tar.gz \\\n && mv $( ls | grep -i jdk-11 ;) bootjdk11 \\\n && mv bootjdk11/* /usr/lib/jvm/adoptojdk-java-11 \\\n && rm -rf bootjdk11\n#   Download and install boot JDK from AdoptOpenJDK for java 13 and higher\nRUN mkdir -p /usr/lib/jvm/adoptojdk-java-12 \\\n && cd /usr/lib/jvm/adoptojdk-java-12 \\\n && wget -O bootjdk12.tar.gz \"https://api.adoptopenjdk.net/v2/binary/releases/openjdk12?openjdk_impl=openj9&os=linux&arch=s390x&release=latest&type=jdk\" \\\n && tar -xzf bootjdk12.tar.gz \\\n && rm -f bootjdk12.tar.gz \\\n && mv $( ls | grep -i jdk-12 ;) bootjdk12 \\\n && mv bootjdk12/* /usr/lib/jvm/adoptojdk-java-12 \\\n && rm -rf bootjdk12\n#   Set up sshd config\nRUN mkdir /var/run/sshd \\\n && sed -i 's/#PermitRootLogin/PermitRootLogin/' /etc/ssh/sshd_config \\\n && sed -i 's/#RSAAuthentication.*/RSAAuthentication yes/' /etc/ssh/sshd_config \\\n && sed -i 's/#PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config\n#   SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n#   Expose SSH port\nEXPOSE 22/tcp\n#   Setup a reference repository cache for faster clones in the container\nRUN mkdir /home/${USER}/openjdk_cache \\\n && cd /home/${USER}/openjdk_cache \\\n && git init --bare \\\n && git remote add jdk8 https://github.com/ibmruntimes/openj9-openjdk-jdk8.git \\\n && git remote add jdk11 https://github.com/ibmruntimes/openj9-openjdk-jdk11.git \\\n && git remote add jdk12 https://github.com/ibmruntimes/openj9-openjdk-jdk12.git \\\n && git remote add jdk13 https://github.com/ibmruntimes/openj9-openjdk-jdk13.git \\\n && git remote add jdk https://github.com/ibmruntimes/openj9-openjdk-jdk.git \\\n && git remote add openj9 https://github.com/eclipse/openj9.git \\\n && git remote add omr https://github.com/eclipse/openj9-omr.git \\\n && git fetch --all \\\n && git gc --aggressive --prune=all\n#   Adding bash profile so ${USER} max user processes will be unlimited\nRUN echo >> /home/${USER}/.bashrc \\\n && echo \"# Change max user processes in ${USER}\" >> /home/${USER}/.bashrc \\\n && echo \"ulimit -u unlimited\" >> /home/${USER}/.bashrc\n","originalDockerfileUglifiedHash":"800a56e934d88287eb9f44fb50c85130","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/20f37e556fce7a3a3a4b7cdaf56d0390a4f838e3.dockerfile"}