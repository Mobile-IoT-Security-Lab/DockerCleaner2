{"seed":767465706,"processedDockerfileHash":"e73f1ea0a6d47b65f1811a615b3c1d2b","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"#   Copyright 2014 The Go Authors. All rights reserved.\n#   Use of this source code is governed by a BSD-style\n#   license that can be found in the LICENSE file.\n#   Base builder image: gobuilders/linux-arm-qemu\n#   Using sid for the cross toolchain.\nFROM gobuilders/linux-x86-sid\nMAINTAINER golang-dev <golang-dev@googlegroups.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN dpkg --add-architecture armhf\nRUN :\nRUN (apt-get update ;apt-get install --no-install-recommends qemu -y )\n#   To build the ARM root.\nRUN (apt-get update ;apt-get install --no-install-recommends debootstrap=1.0.128+nmu2ubuntu1 -y )\n#   To build 5g & buildlet.\nRUN (apt-get update ;apt-get install --no-install-recommends gcc=4:12.2.0-3ubuntu1 git=1:2.39.2-1ubuntu1 libc6-dev=2.37-0ubuntu2 -y )\n#   To build e2fsimage.\nRUN (apt-get update ;apt-get install --no-install-recommends e2fslibs-dev -y )\nRUN (apt-get update ;apt-get install --no-install-recommends linux-source-3.16 xz-utils=5.4.1-0.2 -y )\nRUN (apt-get update ;apt-get install --no-install-recommends gcc-arm-linux-gnueabihf=4:12.2.0-3ubuntu1 -y )\nRUN mkdir /arm\n#   The list of packages in include are copied from linux-x86-std\nRUN debootstrap --arch=armhf --foreign --include=curl,ca-certificates,strace,gcc,libc6-dev,gdb,lsof,psmisc sid /arm/root\n#   Script to finish off the debootstrap installation.\nCOPY stage2 /arm/root/stage2\nRUN chmod +x /arm/root/stage2\n#   Setup networking.\nRUN (echo \"auto lo\" ;echo \"iface lo inet loopback\" ;echo \"auto eth0\" ;echo \"iface eth0 inet dhcp\" ) > /arm/root/etc/network/interfaces\n#   Run buildlet at boot.\nCOPY buildlet.service /arm/root/etc/systemd/system/buildlet.service\nRUN (echo \"[Journal]\" ;echo \"ForwardToConsole=yes\" ) > /arm/root/etc/systemd/journald.conf\n#   Fetch go1.4 and cross compile buildlet's stage0.\nRUN mkdir /gopath\nENV GOPATH=\"/gopath\"\nENV GOROOT=\"/go1.4\"\nENV PATH=\"$GOROOT/bin:$PATH\"\nRUN cd $GOROOT/src \\\n && GOARCH=arm GOOS=linux ./make.bash\nRUN GOARCH=arm GOOS=linux go get golang.org/x/build/cmd/buildlet/stage0\nRUN mkdir -p /arm/root/usr/local/bin \\\n && cp $GOPATH/bin/linux_arm/stage0 /arm/root/usr/local/bin\nRUN rm -rf /go1.4 /gopath\n#   Fetch go1.4.2 for arm\nRUN curl -O http://dave.cheney.net/paste/go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN echo '607573c55dc89d135c3c9c84bba6ba6095a37a1e go1.4.2.linux-arm~multiarch-armv7-1.tar.gz' | sha1sum -c\nRUN tar xfv go1.4.2.linux-arm~multiarch-armv7-1.tar.gz -C /arm/root/\nRUN rm go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN mv /arm/root/go /arm/root/go1.4\nRUN rm -rf /arm/root/go1.4/api /arm/root/go1.4/blog /arm/root/go1.4/doc /arm/root/go1.4/misc /arm/root/go1.4/test\nRUN find /arm/root/go1.4 -type d -name testdata | xargs rm -rf\n#   Install e2fsimage to prepare a root disk without running any\n#   \"privilaged\" docker operations (i.e. mount).\n#   Building from source because there aren't any Debian packages.\nENV IMG_SIZE=\"1000000 # in KB\"\nRUN curl -L -O http://sourceforge.net/projects/e2fsimage/files/e2fsimage/0.2.2/e2fsimage-0.2.2.tar.gz\nRUN echo '8ab6089c6a91043b251afc5c4331d1d740be1469 e2fsimage-0.2.2.tar.gz' | sha1sum -c\nRUN tar xfv e2fsimage-0.2.2.tar.gz\n#   The configure script is broken. This is all we need anyway.\nRUN cd e2fsimage-0.2.2/src \\\n && gcc -o e2fsimage -DVER=\\\"0.2.2\\\" main.c copy.c symlink.c util.c mkdir.c dirent.c mke2fs.c inodb.c sfile.c uiddb.c uids.c malloc.c passwd.c group.c -lext2fs -lcom_err\nRUN /e2fsimage-0.2.2/src/e2fsimage -f /arm/root.img -d /arm/root -s $IMG_SIZE -p\nRUN rm -rf e2fsimage-0.2.2 e2fsimage-0.2.2.tar.gz\nRUN rm -rf /arm/root\n#   Build a kernel. We're buildng here because we need a recent version for\n#   systemd to boot, and the binary ones in debian's repositories have a lot\n#   of needed components as modules (filesystem/sata drivers). It's just\n#   simpler to build a kernel than it is cross generate an initrd with\n#   the right bits in.\nRUN tar xfv /usr/src/linux-source-3.16.tar.xz -C /usr/src/\nCOPY kernel_config /usr/src/linux-source-3.16/.config\nRUN (cd /usr/src/linux-source-3.16 \\\n && ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make )\nRUN cp /usr/src/linux-source-3.16/arch/arm/boot/zImage /arm/vmlinuz\nRUN rm -rf /usr/src/linux-source-3.16\nRUN qemu-system-arm -M vexpress-a9 -cpu cortex-a9 -nographic -no-reboot -sd /arm/root.img -kernel /arm/vmlinuz -append \"root=/dev/mmcblk0 console=ttyAMA0 rw rootwait init=/stage2\"\nCOPY buildlet-qemu /usr/local/bin/buildlet-qemu\nRUN chmod +x /usr/local/bin/buildlet-qemu\nCOPY qemu.service /etc/systemd/system/qemu.service\nRUN systemctl enable /etc/systemd/system/qemu.service\nRUN systemctl disable /etc/systemd/system/buildlet.service\nRUN rm /usr/local/bin/stage0\nRUN apt-get purge -y gcc git libc6-dev xz-utils gcc-arm-linux-gnueabihf linux-source-3.16 e2fslibs-dev debootstrap strace gdb libc6-dev perl\nRUN apt-get autoremove -y --purge\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists /usr/share/doc\nRUN (cd /usr/share/locale/ \\\n && ls -1 | grep -v en | xargs rm -rf )\nRUN rm -rf /var/cache/debconf/*\nRUN rm -rf /usr/share/man\nRUN (cd /usr/bin \\\n && ls -1 | grep qemu | grep -v qemu-system-arm | xargs rm )\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#  Copyright 2014 The Go Authors. All rights reserved.\n#  Use of this source code is governed by a BSD-style\n#  license that can be found in the LICENSE file.\n#  Base builder image: gobuilders/linux-arm-qemu\n#  Using sid for the cross toolchain.\nFROM gobuilders/linux-x86-sid\nMAINTAINER golang-dev <golang-dev@googlegroups.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN dpkg --add-architecture armhf\nRUN apt-get update\nRUN apt-get install --no-install-recommends qemu -y\n#  To build the ARM root.\nRUN apt-get install --no-install-recommends debootstrap -y\n#  To build 5g & buildlet.\nRUN apt-get install --no-install-recommends gcc git libc6-dev -y\n#  To build e2fsimage.\nRUN apt-get install --no-install-recommends e2fslibs-dev -y\nRUN apt-get install linux-source-3.16 xz-utils -y\nRUN apt-get install gcc-arm-linux-gnueabihf -y\nRUN mkdir /arm\n#  The list of packages in include are copied from linux-x86-std\nRUN debootstrap --arch=armhf --foreign --include=curl,ca-certificates,strace,gcc,libc6-dev,gdb,lsof,psmisc sid /arm/root\n#  Script to finish off the debootstrap installation.\nADD stage2 /arm/root/stage2\nRUN chmod +x /arm/root/stage2\n#  Setup networking.\nRUN (echo \"auto lo\" ;echo \"iface lo inet loopback\" ;echo \"auto eth0\" ;echo \"iface eth0 inet dhcp\" ) > /arm/root/etc/network/interfaces\n#  Run buildlet at boot.\nADD buildlet.service /arm/root/etc/systemd/system/buildlet.service\nRUN (echo \"[Journal]\" ;echo \"ForwardToConsole=yes\" ) > /arm/root/etc/systemd/journald.conf\n#  Fetch go1.4 and cross compile buildlet's stage0.\nRUN mkdir /gopath\nENV GOPATH=\"/gopath\"\nENV GOROOT=\"/go1.4\"\nENV PATH=\"$GOROOT/bin:$PATH\"\nRUN cd $GOROOT/src \\\n && GOARCH=arm GOOS=linux ./make.bash\nRUN GOARCH=arm GOOS=linux go get golang.org/x/build/cmd/buildlet/stage0\nRUN mkdir -p /arm/root/usr/local/bin \\\n && cp $GOPATH/bin/linux_arm/stage0 /arm/root/usr/local/bin\nRUN rm -rf /go1.4 /gopath\n#  Fetch go1.4.2 for arm\nRUN curl -O http://dave.cheney.net/paste/go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN echo '607573c55dc89d135c3c9c84bba6ba6095a37a1e go1.4.2.linux-arm~multiarch-armv7-1.tar.gz' | sha1sum -c\nRUN tar xfv go1.4.2.linux-arm~multiarch-armv7-1.tar.gz -C /arm/root/\nRUN rm go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN mv /arm/root/go /arm/root/go1.4\nRUN rm -rf /arm/root/go1.4/api /arm/root/go1.4/blog /arm/root/go1.4/doc /arm/root/go1.4/misc /arm/root/go1.4/test\nRUN find /arm/root/go1.4 -type d -name testdata | xargs rm -rf\n#  Install e2fsimage to prepare a root disk without running any\n#  \"privilaged\" docker operations (i.e. mount).\n#  Building from source because there aren't any Debian packages.\nENV IMG_SIZE=\"1000000 # in KB\"\nRUN curl -L -O http://sourceforge.net/projects/e2fsimage/files/e2fsimage/0.2.2/e2fsimage-0.2.2.tar.gz\nRUN echo '8ab6089c6a91043b251afc5c4331d1d740be1469 e2fsimage-0.2.2.tar.gz' | sha1sum -c\nRUN tar xfv e2fsimage-0.2.2.tar.gz\n#  The configure script is broken. This is all we need anyway.\nRUN cd e2fsimage-0.2.2/src \\\n && gcc -o e2fsimage -DVER=\\\"0.2.2\\\" main.c copy.c symlink.c util.c mkdir.c dirent.c mke2fs.c inodb.c sfile.c uiddb.c uids.c malloc.c passwd.c group.c -lext2fs -lcom_err\nRUN /e2fsimage-0.2.2/src/e2fsimage -f /arm/root.img -d /arm/root -s $IMG_SIZE -p\nRUN rm -rf e2fsimage-0.2.2 e2fsimage-0.2.2.tar.gz\nRUN rm -rf /arm/root\n#  Build a kernel. We're buildng here because we need a recent version for\n#  systemd to boot, and the binary ones in debian's repositories have a lot\n#  of needed components as modules (filesystem/sata drivers). It's just\n#  simpler to build a kernel than it is cross generate an initrd with\n#  the right bits in.\nRUN tar xfv /usr/src/linux-source-3.16.tar.xz -C /usr/src/\nCOPY kernel_config /usr/src/linux-source-3.16/.config\nRUN (cd /usr/src/linux-source-3.16 \\\n && ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make )\nRUN cp /usr/src/linux-source-3.16/arch/arm/boot/zImage /arm/vmlinuz\nRUN rm -rf /usr/src/linux-source-3.16\nRUN qemu-system-arm -M vexpress-a9 -cpu cortex-a9 -nographic -no-reboot -sd /arm/root.img -kernel /arm/vmlinuz -append \"root=/dev/mmcblk0 console=ttyAMA0 rw rootwait init=/stage2\"\nADD buildlet-qemu /usr/local/bin/buildlet-qemu\nRUN chmod +x /usr/local/bin/buildlet-qemu\nADD qemu.service /etc/systemd/system/qemu.service\nRUN systemctl enable /etc/systemd/system/qemu.service\nRUN systemctl disable /etc/systemd/system/buildlet.service\nRUN rm /usr/local/bin/stage0\nRUN apt-get purge -y gcc git libc6-dev xz-utils gcc-arm-linux-gnueabihf linux-source-3.16 e2fslibs-dev debootstrap strace gdb libc6-dev perl\nRUN apt-get autoremove -y --purge\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists /usr/share/doc\nRUN (cd /usr/share/locale/ \\\n && ls -1 | grep -v en | xargs rm -rf )\nRUN rm -rf /var/cache/debconf/*\nRUN rm -rf /usr/share/man\nRUN (cd /usr/bin \\\n && ls -1 | grep qemu | grep -v qemu-system-arm | xargs rm )\n","injectedSmells":[],"originalDockerfileHash":"747437e102be18182feb462c2dbe98ea","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   Copyright 2014 The Go Authors. All rights reserved.\n#   Use of this source code is governed by a BSD-style\n#   license that can be found in the LICENSE file.\n#   Base builder image: gobuilders/linux-arm-qemu\n#   Using sid for the cross toolchain.\nFROM gobuilders/linux-x86-sid\nMAINTAINER golang-dev <golang-dev@googlegroups.com>\nENV DEBIAN_FRONTEND=\"noninteractive\"\nRUN dpkg --add-architecture armhf\nRUN apt-get update\nRUN apt-get install --no-install-recommends qemu -y\n#   To build the ARM root.\nRUN apt-get install --no-install-recommends debootstrap -y\n#   To build 5g & buildlet.\nRUN apt-get install --no-install-recommends gcc git libc6-dev -y\n#   To build e2fsimage.\nRUN apt-get install --no-install-recommends e2fslibs-dev -y\nRUN apt-get install linux-source-3.16 xz-utils -y\nRUN apt-get install gcc-arm-linux-gnueabihf -y\nRUN mkdir /arm\n#   The list of packages in include are copied from linux-x86-std\nRUN debootstrap --arch=armhf --foreign --include=curl,ca-certificates,strace,gcc,libc6-dev,gdb,lsof,psmisc sid /arm/root\n#   Script to finish off the debootstrap installation.\nADD stage2 /arm/root/stage2\nRUN chmod +x /arm/root/stage2\n#   Setup networking.\nRUN (echo \"auto lo\" ;echo \"iface lo inet loopback\" ;echo \"auto eth0\" ;echo \"iface eth0 inet dhcp\" ) > /arm/root/etc/network/interfaces\n#   Run buildlet at boot.\nADD buildlet.service /arm/root/etc/systemd/system/buildlet.service\nRUN (echo \"[Journal]\" ;echo \"ForwardToConsole=yes\" ) > /arm/root/etc/systemd/journald.conf\n#   Fetch go1.4 and cross compile buildlet's stage0.\nRUN mkdir /gopath\nENV GOPATH=\"/gopath\"\nENV GOROOT=\"/go1.4\"\nENV PATH=\"$GOROOT/bin:$PATH\"\nRUN cd $GOROOT/src \\\n && GOARCH=arm GOOS=linux ./make.bash\nRUN GOARCH=arm GOOS=linux go get golang.org/x/build/cmd/buildlet/stage0\nRUN mkdir -p /arm/root/usr/local/bin \\\n && cp $GOPATH/bin/linux_arm/stage0 /arm/root/usr/local/bin\nRUN rm -rf /go1.4 /gopath\n#   Fetch go1.4.2 for arm\nRUN curl -O http://dave.cheney.net/paste/go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN echo '607573c55dc89d135c3c9c84bba6ba6095a37a1e go1.4.2.linux-arm~multiarch-armv7-1.tar.gz' | sha1sum -c\nRUN tar xfv go1.4.2.linux-arm~multiarch-armv7-1.tar.gz -C /arm/root/\nRUN rm go1.4.2.linux-arm~multiarch-armv7-1.tar.gz\nRUN mv /arm/root/go /arm/root/go1.4\nRUN rm -rf /arm/root/go1.4/api /arm/root/go1.4/blog /arm/root/go1.4/doc /arm/root/go1.4/misc /arm/root/go1.4/test\nRUN find /arm/root/go1.4 -type d -name testdata | xargs rm -rf\n#   Install e2fsimage to prepare a root disk without running any\n#   \"privilaged\" docker operations (i.e. mount).\n#   Building from source because there aren't any Debian packages.\nENV IMG_SIZE=\"1000000 # in KB\"\nRUN curl -L -O http://sourceforge.net/projects/e2fsimage/files/e2fsimage/0.2.2/e2fsimage-0.2.2.tar.gz\nRUN echo '8ab6089c6a91043b251afc5c4331d1d740be1469 e2fsimage-0.2.2.tar.gz' | sha1sum -c\nRUN tar xfv e2fsimage-0.2.2.tar.gz\n#   The configure script is broken. This is all we need anyway.\nRUN cd e2fsimage-0.2.2/src \\\n && gcc -o e2fsimage -DVER=\\\"0.2.2\\\" main.c copy.c symlink.c util.c mkdir.c dirent.c mke2fs.c inodb.c sfile.c uiddb.c uids.c malloc.c passwd.c group.c -lext2fs -lcom_err\nRUN /e2fsimage-0.2.2/src/e2fsimage -f /arm/root.img -d /arm/root -s $IMG_SIZE -p\nRUN rm -rf e2fsimage-0.2.2 e2fsimage-0.2.2.tar.gz\nRUN rm -rf /arm/root\n#   Build a kernel. We're buildng here because we need a recent version for\n#   systemd to boot, and the binary ones in debian's repositories have a lot\n#   of needed components as modules (filesystem/sata drivers). It's just\n#   simpler to build a kernel than it is cross generate an initrd with\n#   the right bits in.\nRUN tar xfv /usr/src/linux-source-3.16.tar.xz -C /usr/src/\nCOPY kernel_config /usr/src/linux-source-3.16/.config\nRUN (cd /usr/src/linux-source-3.16 \\\n && ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make )\nRUN cp /usr/src/linux-source-3.16/arch/arm/boot/zImage /arm/vmlinuz\nRUN rm -rf /usr/src/linux-source-3.16\nRUN qemu-system-arm -M vexpress-a9 -cpu cortex-a9 -nographic -no-reboot -sd /arm/root.img -kernel /arm/vmlinuz -append \"root=/dev/mmcblk0 console=ttyAMA0 rw rootwait init=/stage2\"\nADD buildlet-qemu /usr/local/bin/buildlet-qemu\nRUN chmod +x /usr/local/bin/buildlet-qemu\nADD qemu.service /etc/systemd/system/qemu.service\nRUN systemctl enable /etc/systemd/system/qemu.service\nRUN systemctl disable /etc/systemd/system/buildlet.service\nRUN rm /usr/local/bin/stage0\nRUN apt-get purge -y gcc git libc6-dev xz-utils gcc-arm-linux-gnueabihf linux-source-3.16 e2fslibs-dev debootstrap strace gdb libc6-dev perl\nRUN apt-get autoremove -y --purge\nRUN apt-get clean\nRUN rm -rf /var/lib/apt/lists /usr/share/doc\nRUN (cd /usr/share/locale/ \\\n && ls -1 | grep -v en | xargs rm -rf )\nRUN rm -rf /var/cache/debconf/*\nRUN rm -rf /usr/share/man\nRUN (cd /usr/bin \\\n && ls -1 | grep qemu | grep -v qemu-system-arm | xargs rm )\n","originalDockerfileUglifiedHash":"7bef7e72b15e953d18fc084485e38b96","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/a7c876965cf3efa03d626da952672c85b0ae0642.dockerfile"}