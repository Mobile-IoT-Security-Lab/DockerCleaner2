{"seed":291130586,"processedDockerfileHash":"3ea4b21ebe1af4f09546067587e4b0f6","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","use-copy-instead-of-add","have-a-healthcheck","have-a-user"],"processedDockerfile":"FROM ubuntu:16.04\n#   Release parameters\nENV GOOGLEAPIS_HASH=\"ab437f2bb2100360f8d119530b0a020228baa4cc\"\nENV GAPIC_GENERATOR_HASH=\"4c2bc4396eed69826456ab3bc2fe47c71c235bb5\"\n#   Define version number below. The ARTMAN_VERSION line is parsed by\n#   .circleci/config.yml and setup.py, please keep the format.\nENV ARTMAN_VERSION=\"0.29.0\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Set the locale\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"C\"\n#   OpenJDK repository\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common=0.96.20.10 -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl=7.47.0-1ubuntu2.19 git=1:2.7.4-0ubuntu1.10 vim=2:7.4.1689-3ubuntu1.5 openssh-client=1:7.2p2-4ubuntu2.10 unzip=6.0-20ubuntu1.1 php=1:7.0+35ubuntu6.1 python3-pip=8.1.1-2ubuntu0.6 openjdk-8-jdk-headless=8u292-b10-0ubuntu1~16.04.1 nodejs=4.2.6~dfsg-1ubuntu4.2 npm=3.5.2-0ubuntu4 ruby=1:2.3.0+1 ruby-dev=1:2.3.0+1 autoconf=2.69-9 autogen=1:5.18.7-3 libtool=2.4.6-0.1 autotools-dev=20150820.1 automake=1:1.15-4ubuntu1 make=4.1-6 g++=4:5.3.1-1ubuntu1 pandoc=1.16.0.2~dfsg-1 libc6=2.23-0ubuntu11.3 libcurl3=7.47.0-1ubuntu2.19 libgcc1=1:6.0.1-0ubuntu1 libgssapi-krb5-2=1.13.2+dfsg-5ubuntu2.2 liblttng-ust0=2.7.1-1 libssl1.0.0=1.0.2g-1ubuntu4.20 libstdc++6=5.4.0-6ubuntu1~16.04.12 libunwind8=1.1-4.1 libuuid1=2.27.1-6ubuntu3.10 zlib1g=1:1.2.8.dfsg-2ubuntu4.3 -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install all required protoc versions, and install protobuf Python package.\nCOPY install_protoc.sh /\nRUN bash install_protoc.sh\n#   Install grpc_csharp_plugin\nRUN curl -L https://www.nuget.org/api/v2/package/Grpc.Tools/1.17.1 -o temp.zip \\\n && unzip -p temp.zip tools/linux_x64/grpc_csharp_plugin > /usr/local/bin/grpc_csharp_plugin \\\n && chmod +x /usr/local/bin/grpc_csharp_plugin \\\n && rm temp.zip\n#   Setup JAVA_HOME, this is useful for docker commandline\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#   Ubuntu apt uses \"nodejs\" as the executable, but everything else expects\n#   the executable to be spelled \"node\".\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\n#   Install Go.\nRUN mkdir -p /golang \\\n && cd /golang \\\n && curl https://dl.google.com/go/go1.11.linux-amd64.tar.gz > go.tar.gz \\\n && (echo 'b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499 go.tar.gz' | sha256sum -c ) \\\n && tar xzf go.tar.gz \\\n && rm go.tar.gz \\\n && cd /\nENV PATH=\"$PATH:/golang/go/bin\"\n#   Download the go protobuf support.\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go clean -cache -testcache -modcache\n#   Setup tools for codegen of Ruby\nRUN gem install rake --version 13.0.6 --no-ri --no-rdoc \\\n && gem install rubocop --version 1.50.1 --no-ri --no-rdoc \\\n && gem install bundler --version 2.4.12 --no-ri --no-rdoc \\\n && gem install rake --version 13.0.6 --no-ri --no-rdoc \\\n && gem install grpc-tools --version 1.53.0 --no-ri --no-rdoc\n#   Install grpc_php_plugin\nRUN git clone -b v1.17.1 --recurse-submodules --depth=1 https://github.com/grpc/grpc.git /temp/grpc \\\n && cd /temp/grpc \\\n && make -j $( nproc ;) grpc_php_plugin \\\n && mv ./bins/opt/grpc_php_plugin /usr/local/bin/ \\\n && cd / \\\n && rm -r /temp/grpc\n#   Install PHP formatting tools\nRUN curl -L https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.9.1/php-cs-fixer.phar -o /usr/local/bin/php-cs-fixer \\\n && chmod a+x /usr/local/bin/php-cs-fixer \\\n && cd /\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf \\\n && chmod a+x /usr/local/bin/phpcbf \\\n && cd /\n#   Used to add docstrings to the Python protoc output.\nRUN pip3 install protoc-docs-plugin==0.3.0\n#   Install .NET Core SDK\nENV DOTNET_SDK_VERSION=\"1.0.4\"\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-ubuntu.16.04-x64.$DOTNET_SDK_VERSION.tar.gz\"\nRUN curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#   Install googleapis.\nRUN git clone --single-branch https://github.com/googleapis/googleapis \\\n && cd googleapis \\\n && git checkout $GOOGLEAPIS_HASH \\\n && cd .. \\\n && rm -rf /googleapis/.git/\n#   Install toolkit.\nRUN git clone --single-branch https://github.com/googleapis/gapic-generator toolkit \\\n && cd toolkit/ \\\n && git checkout $GAPIC_GENERATOR_HASH \\\n && ./gradlew fatJar createToolPaths \\\n && cd .. \\\n && rm -rf /toolkit/.git/\nENV TOOLKIT_HOME=\"/toolkit\"\n#   Setup git config used by github commit pushing.\nRUN git config --global user.email googleapis-publisher@google.com \\\n && git config --global user.name \"Google API Publisher\"\n#   Setup artman user config\n#   Note: This is somewhat brittle as it relies on a specific path\n#   outside of or inside Docker.\n#\n#   This should probably be fixed to have the smoke test itself provide\n#   the configuration.\n#   TODO (lukesneeringer): Fix this.\nRUN mkdir -p /root/\nCOPY artman-user-config-in-docker.yaml /root/.artman/config.yaml\n#   Install artman.\nCOPY . /artman\nARG install_artman_from_source=false\nRUN if [ \"$install_artman_from_source\" = true ] ; then pip3 install -e /artman ; else pip3 install googleapis-artman==$ARTMAN_VERSION ;rm -r /artman ; fi\nRUN groupadd --system docker-user ; useradd --system --gid docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM ubuntu:16.04\n#  Release parameters\nENV GOOGLEAPIS_HASH=\"ab437f2bb2100360f8d119530b0a020228baa4cc\"\nENV GAPIC_GENERATOR_HASH=\"4c2bc4396eed69826456ab3bc2fe47c71c235bb5\"\n#  Define version number below. The ARTMAN_VERSION line is parsed by\n#  .circleci/config.yml and setup.py, please keep the format.\nENV ARTMAN_VERSION=\"0.29.0\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#  Set the locale\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"C\"\n#  OpenJDK repository\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl git vim openssh-client unzip php python3-pip openjdk-8-jdk-headless nodejs npm ruby ruby-dev autoconf autogen libtool autotools-dev automake make g++ pandoc libc6 libcurl3 libgcc1 libgssapi-krb5-2 liblttng-ust0 libssl1.0.0 libstdc++6 libunwind8 libuuid1 zlib1g -y \\\n && rm -rf /var/lib/apt/lists/*\n#  Install all required protoc versions, and install protobuf Python package.\nADD install_protoc.sh /\nRUN bash install_protoc.sh\n#  Install grpc_csharp_plugin\nRUN curl -L https://www.nuget.org/api/v2/package/Grpc.Tools/1.17.1 -o temp.zip \\\n && unzip -p temp.zip tools/linux_x64/grpc_csharp_plugin > /usr/local/bin/grpc_csharp_plugin \\\n && chmod +x /usr/local/bin/grpc_csharp_plugin \\\n && rm temp.zip\n#  Setup JAVA_HOME, this is useful for docker commandline\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#  Ubuntu apt uses \"nodejs\" as the executable, but everything else expects\n#  the executable to be spelled \"node\".\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\n#  Install Go.\nRUN mkdir -p /golang \\\n && cd /golang \\\n && curl https://dl.google.com/go/go1.11.linux-amd64.tar.gz > go.tar.gz \\\n && (echo 'b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499 go.tar.gz' | sha256sum -c ) \\\n && tar xzf go.tar.gz \\\n && rm go.tar.gz \\\n && cd /\nENV PATH=\"$PATH:/golang/go/bin\"\n#  Download the go protobuf support.\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go clean -cache -testcache -modcache\n#  Setup tools for codegen of Ruby\nRUN gem install rake --no-ri --no-rdoc \\\n && gem install rubocop --no-ri --no-rdoc \\\n && gem install bundler --no-ri --no-rdoc \\\n && gem install rake --no-ri --no-rdoc \\\n && gem install grpc-tools --no-ri --no-rdoc\n#  Install grpc_php_plugin\nRUN git clone -b v1.17.1 --recurse-submodules --depth=1 https://github.com/grpc/grpc.git /temp/grpc \\\n && cd /temp/grpc \\\n && make -j $( nproc ;) grpc_php_plugin \\\n && mv ./bins/opt/grpc_php_plugin /usr/local/bin/ \\\n && cd / \\\n && rm -r /temp/grpc\n#  Install PHP formatting tools\nRUN curl -L https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.9.1/php-cs-fixer.phar -o /usr/local/bin/php-cs-fixer \\\n && chmod a+x /usr/local/bin/php-cs-fixer \\\n && cd /\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf \\\n && chmod a+x /usr/local/bin/phpcbf \\\n && cd /\n#  Used to add docstrings to the Python protoc output.\nRUN pip3 install protoc-docs-plugin==0.3.0\n#  Install .NET Core SDK\nENV DOTNET_SDK_VERSION=\"1.0.4\"\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-ubuntu.16.04-x64.$DOTNET_SDK_VERSION.tar.gz\"\nRUN curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#  Install googleapis.\nRUN git clone --single-branch https://github.com/googleapis/googleapis \\\n && cd googleapis \\\n && git checkout $GOOGLEAPIS_HASH \\\n && cd .. \\\n && rm -rf /googleapis/.git/\n#  Install toolkit.\nRUN git clone --single-branch https://github.com/googleapis/gapic-generator toolkit \\\n && cd toolkit/ \\\n && git checkout $GAPIC_GENERATOR_HASH \\\n && ./gradlew fatJar createToolPaths \\\n && cd .. \\\n && rm -rf /toolkit/.git/\nENV TOOLKIT_HOME=\"/toolkit\"\n#  Setup git config used by github commit pushing.\nRUN git config --global user.email googleapis-publisher@google.com \\\n && git config --global user.name \"Google API Publisher\"\n#  Setup artman user config\n#  Note: This is somewhat brittle as it relies on a specific path\n#  outside of or inside Docker.\n#\n#  This should probably be fixed to have the smoke test itself provide\n#  the configuration.\n#  TODO (lukesneeringer): Fix this.\nRUN mkdir -p /root/\nADD artman-user-config-in-docker.yaml /root/.artman/config.yaml\n#  Install artman.\nADD . /artman\nARG install_artman_from_source=false\nRUN if [ \"$install_artman_from_source\" = true ] ; then pip3 install -e /artman ; else pip3 install googleapis-artman==$ARTMAN_VERSION ;rm -r /artman ; fi\n","injectedSmells":[],"originalDockerfileHash":"77332bd9c83898e6a8af3c8f115a4cda","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM ubuntu:16.04\n#   Release parameters\nENV GOOGLEAPIS_HASH=\"ab437f2bb2100360f8d119530b0a020228baa4cc\"\nENV GAPIC_GENERATOR_HASH=\"4c2bc4396eed69826456ab3bc2fe47c71c235bb5\"\n#   Define version number below. The ARTMAN_VERSION line is parsed by\n#   .circleci/config.yml and setup.py, please keep the format.\nENV ARTMAN_VERSION=\"0.29.0\"\nENV DEBIAN_FRONTEND=\"noninteractive\"\n#   Set the locale\nENV LANG=\"en_US.UTF-8\"\nENV LANGUAGE=\"en_US:en\"\nENV LC_ALL=\"C\"\n#   OpenJDK repository\nRUN apt-get update \\\n && apt-get install --no-install-recommends software-properties-common -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && add-apt-repository ppa:openjdk-r/ppa\nRUN apt-get update \\\n && apt-get install --no-install-recommends curl git vim openssh-client unzip php python3-pip openjdk-8-jdk-headless nodejs npm ruby ruby-dev autoconf autogen libtool autotools-dev automake make g++ pandoc libc6 libcurl3 libgcc1 libgssapi-krb5-2 liblttng-ust0 libssl1.0.0 libstdc++6 libunwind8 libuuid1 zlib1g -y \\\n && rm -rf /var/lib/apt/lists/*\n#   Install all required protoc versions, and install protobuf Python package.\nADD install_protoc.sh /\nRUN bash install_protoc.sh\n#   Install grpc_csharp_plugin\nRUN curl -L https://www.nuget.org/api/v2/package/Grpc.Tools/1.17.1 -o temp.zip \\\n && unzip -p temp.zip tools/linux_x64/grpc_csharp_plugin > /usr/local/bin/grpc_csharp_plugin \\\n && chmod +x /usr/local/bin/grpc_csharp_plugin \\\n && rm temp.zip\n#   Setup JAVA_HOME, this is useful for docker commandline\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\nRUN export JAVA_HOME\n#   Ubuntu apt uses \"nodejs\" as the executable, but everything else expects\n#   the executable to be spelled \"node\".\nRUN ln -s /usr/bin/nodejs /usr/local/bin/node\n#   Install Go.\nRUN mkdir -p /golang \\\n && cd /golang \\\n && curl https://dl.google.com/go/go1.11.linux-amd64.tar.gz > go.tar.gz \\\n && (echo 'b3fcf280ff86558e0559e185b601c9eade0fd24c900b4c63cd14d1d38613e499 go.tar.gz' | sha256sum -c ) \\\n && tar xzf go.tar.gz \\\n && rm go.tar.gz \\\n && cd /\nENV PATH=\"$PATH:/golang/go/bin\"\n#   Download the go protobuf support.\nENV GOPATH=\"/go\"\nENV PATH=\"$GOPATH/bin:$PATH\"\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" \"$GOPATH/pkg\" \\\n && chmod -R 777 \"$GOPATH\" \\\n && go get -u github.com/golang/protobuf/protoc-gen-go \\\n && go clean -cache -testcache -modcache\n#   Setup tools for codegen of Ruby\nRUN gem install rake --no-ri --no-rdoc \\\n && gem install rubocop --no-ri --no-rdoc \\\n && gem install bundler --no-ri --no-rdoc \\\n && gem install rake --no-ri --no-rdoc \\\n && gem install grpc-tools --no-ri --no-rdoc\n#   Install grpc_php_plugin\nRUN git clone -b v1.17.1 --recurse-submodules --depth=1 https://github.com/grpc/grpc.git /temp/grpc \\\n && cd /temp/grpc \\\n && make -j $( nproc ;) grpc_php_plugin \\\n && mv ./bins/opt/grpc_php_plugin /usr/local/bin/ \\\n && cd / \\\n && rm -r /temp/grpc\n#   Install PHP formatting tools\nRUN curl -L https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.9.1/php-cs-fixer.phar -o /usr/local/bin/php-cs-fixer \\\n && chmod a+x /usr/local/bin/php-cs-fixer \\\n && cd /\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf \\\n && chmod a+x /usr/local/bin/phpcbf \\\n && cd /\n#   Used to add docstrings to the Python protoc output.\nRUN pip3 install protoc-docs-plugin==0.3.0\n#   Install .NET Core SDK\nENV DOTNET_SDK_VERSION=\"1.0.4\"\nENV DOTNET_SDK_DOWNLOAD_URL=\"https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-dev-ubuntu.16.04-x64.$DOTNET_SDK_VERSION.tar.gz\"\nRUN curl -SL $DOTNET_SDK_DOWNLOAD_URL --output dotnet.tar.gz \\\n && mkdir -p /usr/share/dotnet \\\n && tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n && rm dotnet.tar.gz \\\n && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n#   Install googleapis.\nRUN git clone --single-branch https://github.com/googleapis/googleapis \\\n && cd googleapis \\\n && git checkout $GOOGLEAPIS_HASH \\\n && cd .. \\\n && rm -rf /googleapis/.git/\n#   Install toolkit.\nRUN git clone --single-branch https://github.com/googleapis/gapic-generator toolkit \\\n && cd toolkit/ \\\n && git checkout $GAPIC_GENERATOR_HASH \\\n && ./gradlew fatJar createToolPaths \\\n && cd .. \\\n && rm -rf /toolkit/.git/\nENV TOOLKIT_HOME=\"/toolkit\"\n#   Setup git config used by github commit pushing.\nRUN git config --global user.email googleapis-publisher@google.com \\\n && git config --global user.name \"Google API Publisher\"\n#   Setup artman user config\n#   Note: This is somewhat brittle as it relies on a specific path\n#   outside of or inside Docker.\n#\n#   This should probably be fixed to have the smoke test itself provide\n#   the configuration.\n#   TODO (lukesneeringer): Fix this.\nRUN mkdir -p /root/\nADD artman-user-config-in-docker.yaml /root/.artman/config.yaml\n#   Install artman.\nADD . /artman\nARG install_artman_from_source=false\nRUN if [ \"$install_artman_from_source\" = true ] ; then pip3 install -e /artman ; else pip3 install googleapis-artman==$ARTMAN_VERSION ;rm -r /artman ; fi\n","originalDockerfileUglifiedHash":"8df7e114c11b77f4e175fc43cff1db54","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles_bianncle/e33864bde65bf4cec5f936984ab4a0a47e05163c.dockerfile"}