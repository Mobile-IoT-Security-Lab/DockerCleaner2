{"seed":2168618073,"processedDockerfileHash":"d4fff6a785ac264be1b1b62e9c554e27","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\n#  https://ftp.gnu.org/gnu/bash/?C=M;O=D\nENV _BASH_VERSION=\"4.4.23\"\nENV _BASH_BASELINE=\"4.4.18\"\nENV _BASH_BASELINE_PATCH=\"18\"\n#  https://ftp.gnu.org/gnu/bash/bash-4.4-patches/?C=M;O=D\nENV _BASH_LATEST_PATCH=\"23\"\n#  prefixed with \"_\" since \"$BASH...\" have meaning in Bash parlance\nRUN set -eux ; apk add bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 gcc=10.3.1_git20211027-r0 libc-dev=0.7.2-r3 make=4.3-r0 ncurses-dev=6.3_p20211120-r1 tar=1.34-r1 --no-cache --virtual .build-deps ; wget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz\" ; wget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz.sig\" ; : \"${_BASH_BASELINE_PATCH:=0}\" \"${_BASH_LATEST_PATCH:=0}\" ; if [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_BASELINE_PATCH\" ] ; then mkdir -p bash-patches ;first=\"$( printf '%03d' \"$((_BASH_BASELINE_PATCH + 1))\" ;)\" ;last=\"$( printf '%03d' \"$_BASH_LATEST_PATCH\" ;)\" ;majorMinor=\"${_BASH_VERSION%.*}\" ;for patch in $( seq -w \"$first\" \"$last\" ;); do url=\"https://ftp.gnu.org/gnu/bash/bash-$majorMinor-patches/bash${majorMinor//./}-$patch\" ;wget -O \"bash-patches/$patch\" \"$url\" ;wget -O \"bash-patches/$patch.sig\" \"$url.sig\" ; done ; fi ; apk add gnupg=2.2.31-r2 --no-cache --virtual .gpg-deps ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 7C0135FB088AAF6C66C650B9BB5869F064EA74AB ; gpg --batch --verify bash.tar.gz.sig bash.tar.gz ; rm bash.tar.gz.sig ; if [ -d bash-patches ] ; then for sig in bash-patches/*.sig; do p=\"${sig%.sig}\" ;gpg --batch --verify \"$sig\" \"$p\" ;rm \"$sig\" ; done ; fi ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; apk del --no-network .gpg-deps ; mkdir -p /usr/src/bash ; tar --extract --file=bash.tar.gz --strip-components=1 --directory=/usr/src/bash ; rm bash.tar.gz ; if [ -d bash-patches ] ; then apk add patch=2.7.6-r7 --no-cache --virtual .patch-deps ;for p in bash-patches/*; do patch --directory=/usr/src/bash --input=\"$( readlink -f \"$p\" ;)\" --strip=0 ;rm \"$p\" ; done ;rmdir bash-patches ;apk del --no-network .patch-deps ; fi ; cd /usr/src/bash ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; for f in config.guess config.sub; do wget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\" ; done ; ./configure --build=\"$gnuArch\" --enable-readline --with-curses --without-bash-malloc || { cat config.log >&2;false ; } ; make -j \"$( nproc ;)\" ; make install ; cd / ; rm -r /usr/src/bash ; rm -rf /usr/local/share/doc/bash/*.html /usr/local/share/info /usr/local/share/locale /usr/local/share/man ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add $runDeps --no-network --virtual .bash-rundeps ; apk del --no-network .build-deps ; [ \"$( which bash ;)\" = '/usr/local/bin/bash' ] ; bash --version ; [ \"$( bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"' ;)\" = \"$_BASH_VERSION\" ] ; bash -c 'help' > /dev/null\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"bash\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.15\n\n# https://ftp.gnu.org/gnu/bash/?C=M;O=D\nENV _BASH_VERSION 4.4.23\nENV _BASH_BASELINE 4.4.18\nENV _BASH_BASELINE_PATCH 18\n# https://ftp.gnu.org/gnu/bash/bash-4.4-patches/?C=M;O=D\nENV _BASH_LATEST_PATCH 23\n# prefixed with \"_\" since \"$BASH...\" have meaning in Bash parlance\n\nRUN set -eux; \\\n\t\\\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbison \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tgcc \\\n\t\tlibc-dev \\\n\t\tmake \\\n\t\tncurses-dev \\\n\t\ttar \\\n\t; \\\n\t\\\n\twget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz\"; \\\n\twget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz.sig\"; \\\n\t\\\n\t: \"${_BASH_BASELINE_PATCH:=0}\" \"${_BASH_LATEST_PATCH:=0}\"; \\\n\tif [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_BASELINE_PATCH\" ]; then \\\n\t\tmkdir -p bash-patches; \\\n\t\tfirst=\"$(printf '%03d' \"$(( _BASH_BASELINE_PATCH + 1 ))\")\"; \\\n\t\tlast=\"$(printf '%03d' \"$_BASH_LATEST_PATCH\")\"; \\\n\t\tmajorMinor=\"${_BASH_VERSION%.*}\"; \\\n\t\tfor patch in $(seq -w \"$first\" \"$last\"); do \\\n\t\t\turl=\"https://ftp.gnu.org/gnu/bash/bash-$majorMinor-patches/bash${majorMinor//./}-$patch\"; \\\n\t\t\twget -O \"bash-patches/$patch\" \"$url\"; \\\n\t\t\twget -O \"bash-patches/$patch.sig\" \"$url.sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\t\\\n\tapk add --no-cache --virtual .gpg-deps gnupg; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n# gpg: key 64EA74AB: public key \"Chet Ramey <chet@cwru.edu>\" imported\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys 7C0135FB088AAF6C66C650B9BB5869F064EA74AB; \\\n\tgpg --batch --verify bash.tar.gz.sig bash.tar.gz; \\\n\trm bash.tar.gz.sig; \\\n\tif [ -d bash-patches ]; then \\\n\t\tfor sig in bash-patches/*.sig; do \\\n\t\t\tp=\"${sig%.sig}\"; \\\n\t\t\tgpg --batch --verify \"$sig\" \"$p\"; \\\n\t\t\trm \"$sig\"; \\\n\t\tdone; \\\n\tfi; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\tapk del --no-network .gpg-deps; \\\n\t\\\n\tmkdir -p /usr/src/bash; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file=bash.tar.gz \\\n\t\t--strip-components=1 \\\n\t\t--directory=/usr/src/bash \\\n\t; \\\n\trm bash.tar.gz; \\\n\t\\\n\tif [ -d bash-patches ]; then \\\n\t\tapk add --no-cache --virtual .patch-deps patch; \\\n\t\tfor p in bash-patches/*; do \\\n\t\t\tpatch \\\n\t\t\t\t--directory=/usr/src/bash \\\n\t\t\t\t--input=\"$(readlink -f \"$p\")\" \\\n\t\t\t\t--strip=0 \\\n\t\t\t; \\\n\t\t\trm \"$p\"; \\\n\t\tdone; \\\n\t\trmdir bash-patches; \\\n\t\tapk del --no-network .patch-deps; \\\n\tfi; \\\n\t\\\n\tcd /usr/src/bash; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# update \"config.guess\" and \"config.sub\" to get more aggressively inclusive architecture support\n\tfor f in config.guess config.sub; do \\\n\t\twget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\"; \\\n\tdone; \\\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-readline \\\n\t\t--with-curses \\\n# musl does not implement brk/sbrk (they simply return -ENOMEM)\n#   bash: xmalloc: locale.c:81: cannot allocate 18 bytes (0 bytes allocated)\n\t\t--without-bash-malloc \\\n\t|| { \\\n\t\tcat >&2 config.log; \\\n\t\tfalse; \\\n\t}; \\\n\tmake -j \"$(nproc)\"; \\\n\tmake install; \\\n\tcd /; \\\n\trm -r /usr/src/bash; \\\n\t\\\n# delete a few installed bits for smaller image size\n\trm -rf \\\n\t\t/usr/local/share/doc/bash/*.html \\\n\t\t/usr/local/share/info \\\n\t\t/usr/local/share/locale \\\n\t\t/usr/local/share/man \\\n\t; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-network --virtual .bash-rundeps $runDeps; \\\n\tapk del --no-network .build-deps; \\\n\t\\\n\t[ \"$(which bash)\" = '/usr/local/bin/bash' ]; \\\n\tbash --version; \\\n\t[ \"$(bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"')\" = \"$_BASH_VERSION\" ]; \\\n\tbash -c 'help' > /dev/null\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"bash\"]\n","injectedSmells":[],"originalDockerfileHash":"38779d25cddd02c9dc25e04b81427c59","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\n#  https://ftp.gnu.org/gnu/bash/?C=M;O=D\nENV _BASH_VERSION=\"4.4.23\"\nENV _BASH_BASELINE=\"4.4.18\"\nENV _BASH_BASELINE_PATCH=\"18\"\n#  https://ftp.gnu.org/gnu/bash/bash-4.4-patches/?C=M;O=D\nENV _BASH_LATEST_PATCH=\"23\"\n#  prefixed with \"_\" since \"$BASH...\" have meaning in Bash parlance\nRUN set -eux ; apk add --no-cache --virtual .build-deps bison coreutils dpkg-dev dpkg gcc libc-dev make ncurses-dev tar ; wget -O bash.tar.gz \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz\" ; wget -O bash.tar.gz.sig \"https://ftp.gnu.org/gnu/bash/bash-$_BASH_BASELINE.tar.gz.sig\" ; : \"${_BASH_BASELINE_PATCH:=0}\" \"${_BASH_LATEST_PATCH:=0}\" ; if [ \"$_BASH_LATEST_PATCH\" -gt \"$_BASH_BASELINE_PATCH\" ] ; then mkdir -p bash-patches ;first=\"$( printf '%03d' \"$((_BASH_BASELINE_PATCH + 1))\" ;)\" ;last=\"$( printf '%03d' \"$_BASH_LATEST_PATCH\" ;)\" ;majorMinor=\"${_BASH_VERSION%.*}\" ;for patch in $( seq -w \"$first\" \"$last\" ;); do url=\"https://ftp.gnu.org/gnu/bash/bash-$majorMinor-patches/bash${majorMinor//./}-$patch\" ;wget -O \"bash-patches/$patch\" \"$url\" ;wget -O \"bash-patches/$patch.sig\" \"$url.sig\" ; done ; fi ; apk add --no-cache --virtual .gpg-deps gnupg ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 7C0135FB088AAF6C66C650B9BB5869F064EA74AB ; gpg --batch --verify bash.tar.gz.sig bash.tar.gz ; rm bash.tar.gz.sig ; if [ -d bash-patches ] ; then for sig in bash-patches/*.sig; do p=\"${sig%.sig}\" ;gpg --batch --verify \"$sig\" \"$p\" ;rm \"$sig\" ; done ; fi ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" ; apk del --no-network .gpg-deps ; mkdir -p /usr/src/bash ; tar --extract --file=bash.tar.gz --strip-components=1 --directory=/usr/src/bash ; rm bash.tar.gz ; if [ -d bash-patches ] ; then apk add --no-cache --virtual .patch-deps patch ;for p in bash-patches/*; do patch --directory=/usr/src/bash --input=\"$( readlink -f \"$p\" ;)\" --strip=0 ;rm \"$p\" ; done ;rmdir bash-patches ;apk del --no-network .patch-deps ; fi ; cd /usr/src/bash ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; for f in config.guess config.sub; do wget -O \"support/$f\" \"https://git.savannah.gnu.org/cgit/config.git/plain/$f?id=7d3d27baf8107b630586c962c057e22149653deb\" ; done ; ./configure --build=\"$gnuArch\" --enable-readline --with-curses --without-bash-malloc || { cat config.log >&2;false ; } ; make -j \"$( nproc ;)\" ; make install ; cd / ; rm -r /usr/src/bash ; rm -rf /usr/local/share/doc/bash/*.html /usr/local/share/info /usr/local/share/locale /usr/local/share/man ; runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' ;)\" ; apk add --no-network --virtual .bash-rundeps $runDeps ; apk del --no-network .build-deps ; [ \"$( which bash ;)\" = '/usr/local/bin/bash' ] ; bash --version ; [ \"$( bash -c 'echo \"${BASH_VERSION%%[^0-9.]*}\"' ;)\" = \"$_BASH_VERSION\" ] ; bash -c 'help' > /dev/null\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\nCMD [\"bash\"]\n","originalDockerfileUglifiedHash":"3751582d5fe7d9bc25d1acc290dc0e9f","fileName":"/ICSME-replicationpackage/dataset/original_dockerfiles/bash__4.4.23.dockerfile"}