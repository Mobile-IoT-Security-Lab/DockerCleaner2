{"seed":2210396391,"processedDockerfileHash":"6267f877e2b67e9fcc3bd3ca9709f596","fixedSmells":["use-no-install-recommends","do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","use-wget-instead-of-add","do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["pin-package-manager-versions-apk","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.14\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nENV NGINX_VERSION=\"1.20.2\"\nENV NJS_VERSION=\"0.7.0\"\nENV PKG_RELEASE=\"1\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && apk add openssl=1.1.1t-r2 --no-cache --virtual .checksum-deps \\\n && case \"$apkArch\" in (x86_64|aarch64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && apk add $nginxPackages -X \"https://nginx.org/packages/alpine/v$( egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release ;)/main\" --no-cache ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add gcc=10.3.1_git20210424-r2 libc-dev=0.7.2-r3 make=4.3-r0 openssl-dev=1.1.1t-r2 pcre-dev=8.44-r0 zlib-dev=1.2.12-r3 linux-headers=5.10.41-r0 libxslt-dev=1.1.35-r0 gd-dev=2.3.2-r1 geoip-dev=1.6.12-r2 perl-dev=5.32.1-r0 libedit-dev=20210216.3.1-r0 bash=5.1.16-r0 alpine-sdk=1.0-r1 findutils=4.8.0-r1 --no-cache --virtual .build-deps \\\n && su nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n && PKGOSSCHECKSUM=\\\"af6e7eb25594dffe2903358f7a2c5c956f5b67b8df3f4e8237c30b63e50ce28e6eada3ed453687409beef8f3afa8f551cb20df2f06bd5e235eb66df212ece2ed *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\\\" \\\n && if [ \\\"$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\\\" = \\\"$PKGOSSCHECKSUM\\\" ]; then echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; else echo \\\"pkg-oss tarball checksum verification failed!\\\"; exit 1; fi \\\n && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps \\\n && apk add $nginxPackages -X ${tempDir}/packages/alpine/ --no-cache ;; esac \\\n && apk del .checksum-deps \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && apk add gettext=0.21-r0 --no-cache --virtual .gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add $runDeps --no-cache \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add tzdata=2023c-r0 --no-cache \\\n && apk add curl=8.0.1-r0 ca-certificates=20220614-r0 --no-cache \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log \\\n && mkdir /docker-entrypoint.d\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nCOPY 30-tune-worker-processes.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nEXPOSE 80/tcp\nSTOPSIGNAL SIGQUIT\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.14\n\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION 1.20.2\nENV NJS_VERSION   0.7.0\nENV PKG_RELEASE   1\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup -g 101 -S nginx \\\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\" \\\n        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} \\\n        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \\\n    \" \\\n# install prerequisites for public key and pkg-oss checks\n    && apk add --no-cache --virtual .checksum-deps \\\n        openssl \\\n    && case \"$apkArch\" in \\\n        x86_64|aarch64) \\\n# arches officially built by upstream\n            set -x \\\n            && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n            && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n            && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then \\\n                echo \"key verification succeeded!\"; \\\n                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\\n            else \\\n                echo \"key verification failed!\"; \\\n                exit 1; \\\n            fi \\\n            && apk add -X \"https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre-dev \\\n                zlib-dev \\\n                linux-headers \\\n                libxslt-dev \\\n                gd-dev \\\n                geoip-dev \\\n                perl-dev \\\n                libedit-dev \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n                && PKGOSSCHECKSUM=\\\"af6e7eb25594dffe2903358f7a2c5c956f5b67b8df3f4e8237c30b63e50ce28e6eada3ed453687409beef8f3afa8f551cb20df2f06bd5e235eb66df212ece2ed *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\\\" \\\n                && if [ \\\"\\$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\\\" = \\\"\\$PKGOSSCHECKSUM\\\" ]; then \\\n                    echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; \\\n                else \\\n                    echo \\\"pkg-oss tarball checksum verification failed!\\\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n                && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \\\n                && cd alpine \\\n                && make all \\\n                && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del .build-deps \\\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\\n            ;; \\\n    esac \\\n# remove checksum deps\n    && apk del .checksum-deps \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \\\n    && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi \\\n# Bring in gettext so we can get `envsubst`, then throw\n# the rest away. To do this, we need to install `gettext`\n# then move `envsubst` out of the way so `gettext` can\n# be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n    \\\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner /tmp/envsubst \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache $runDeps \\\n    && apk del .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n# Bring in tzdata so users could set the timezones through the environment\n# variables\n    && apk add --no-cache tzdata \\\n# Bring in curl and ca-certificates to make registering on DNS SD easier\n    && apk add --no-cache curl ca-certificates \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n# create a docker-entrypoint.d directory\n    && mkdir /docker-entrypoint.d\n\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nCOPY 30-tune-worker-processes.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 80\n\nSTOPSIGNAL SIGQUIT\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n","injectedSmells":[],"originalDockerfileHash":"6cfb5e3d6bbcdd539f82be8d83bff8e7","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.14\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\nENV NGINX_VERSION=\"1.20.2\"\nENV NJS_VERSION=\"0.7.0\"\nENV PKG_RELEASE=\"1\"\nRUN set -x \\\n && addgroup -g 101 -S nginx \\\n && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n && apkArch=\"$( cat /etc/apk/arch ;)\" \\\n && nginxPackages=\" nginx=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-perl=${NGINX_VERSION}-r${PKG_RELEASE} nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \" \\\n && apk add --no-cache --virtual .checksum-deps openssl \\\n && case \"$apkArch\" in (x86_64|aarch64) set -x \\\n && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\" \\\n && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n && if [ \"$( openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r ;)\" = \"$KEY_SHA512\" ] ; then echo \"key verification succeeded!\" ;mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/ ; else echo \"key verification failed!\" ;exit 1 ; fi \\\n && apk add -X \"https://nginx.org/packages/alpine/v$( egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release ;)/main\" --no-cache $nginxPackages ;;(*) set -x \\\n && tempDir=\"$( mktemp -d ;)\" \\\n && chown nobody:nobody $tempDir \\\n && apk add --no-cache --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers libxslt-dev gd-dev geoip-dev perl-dev libedit-dev bash alpine-sdk findutils \\\n && su nobody -s /bin/sh -c \" export HOME=${tempDir} \\\n && cd ${tempDir} \\\n && curl -f -O https://hg.nginx.org/pkg-oss/archive/${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n && PKGOSSCHECKSUM=\\\"af6e7eb25594dffe2903358f7a2c5c956f5b67b8df3f4e8237c30b63e50ce28e6eada3ed453687409beef8f3afa8f551cb20df2f06bd5e235eb66df212ece2ed *${NGINX_VERSION}-${PKG_RELEASE}.tar.gz\\\" \\\n && if [ \\\"$(openssl sha512 -r ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz)\\\" = \\\"$PKGOSSCHECKSUM\\\" ]; then echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; else echo \\\"pkg-oss tarball checksum verification failed!\\\"; exit 1; fi \\\n && tar xzvf ${NGINX_VERSION}-${PKG_RELEASE}.tar.gz \\\n && cd pkg-oss-${NGINX_VERSION}-${PKG_RELEASE} \\\n && cd alpine \\\n && make all \\\n && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \" \\\n && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n && apk del .build-deps \\\n && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages ;; esac \\\n && apk del .checksum-deps \\\n && if [ -n \"$tempDir\" ] ; then rm -rf \"$tempDir\" ; fi \\\n && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ] ; then rm -f /etc/apk/keys/abuild-key.rsa.pub ; fi \\\n && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ] ; then rm -f /etc/apk/keys/nginx_signing.rsa.pub ; fi \\\n && apk add --no-cache --virtual .gettext gettext \\\n && mv /usr/bin/envsubst /tmp/ \\\n && runDeps=\"$( scanelf --needed --nobanner /tmp/envsubst | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' | sort -u | xargs -r apk info --installed | sort -u ;)\" \\\n && apk add --no-cache $runDeps \\\n && apk del .gettext \\\n && mv /tmp/envsubst /usr/local/bin/ \\\n && apk add --no-cache tzdata \\\n && apk add --no-cache curl ca-certificates \\\n && ln -sf /dev/stdout /var/log/nginx/access.log \\\n && ln -sf /dev/stderr /var/log/nginx/error.log \\\n && mkdir /docker-entrypoint.d\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nCOPY 30-tune-worker-processes.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nEXPOSE 80/tcp\nSTOPSIGNAL SIGQUIT\nCMD [\"nginx\", \"-g\", \"daemon\", \"off\"]\n","originalDockerfileUglifiedHash":"2840977ab1fbd791ae1c8886e7b54722","fileName":"/ICSME-replicationpackage/dataset/original_dockerfiles/nginx__1.20.2-alpine-perl.dockerfile"}