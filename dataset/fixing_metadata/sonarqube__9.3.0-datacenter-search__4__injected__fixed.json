{"seed":3774890097,"processedDockerfileHash":"44cb2559e65b94c313a5ff3ad7451de8","fixedSmells":["pin-package-manager-versions-apk","do-not-have-secrets","have-a-healthcheck"],"successfullyFixedSmells":["pin-package-manager-versions-apk","do-not-have-secrets","have-a-healthcheck"],"processedDockerfile":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#   SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add gnupg=2.2.31-r1 unzip=6.0-r9 curl=8.0.1-r0 --no-cache --virtual .build-dependencies \\\n && apk add bash=5.1.16-r0 su-exec=0.2-r1 ttf-dejavu=2.37-r1 openjdk11-jre=11.0.14_p9-r0 --no-cache \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#  SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add gnupg unzip curl --no-cache --virtual .build-dependencies \\\n && apk add bash su-exec ttf-dejavu openjdk11-jre --no-cache \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\nENV AWS_ACCESS_KEY=\"A3TLGRTGZVW37WN4I349\" \\\n    SLACK_TOKEN=\"xapp-156370ðž´½ê¯¶8670-v1GFxm-6b/x/qhrocf4walfx\" \\\n    AWS_ACCESS_KEY=\"A3TA5KN1OU151D83N8HR\"\n","injectedSmells":[],"originalDockerfileHash":"618597a0364b65deb35e813fe1004071","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#   SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add gnupg unzip curl --no-cache --virtual .build-dependencies \\\n && apk add bash su-exec ttf-dejavu openjdk11-jre --no-cache \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\nENV AWS_ACCESS_KEY=\"A3TLGRTGZVW37WN4I349\" \\\n    SLACK_TOKEN=\"xapp-156370ðž´½ê¯¶8670-v1GFxm-6b/x/qhrocf4walfx\" \\\n    AWS_ACCESS_KEY=\"A3TA5KN1OU151D83N8HR\"\n","originalDockerfileUglifiedHash":"251f370dc752af632fefbbdb803eaf62","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles/sonarqube__9.3.0-datacenter-search__4__injected.dockerfile"}