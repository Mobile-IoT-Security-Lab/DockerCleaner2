{"seed":3783255340,"processedDockerfileHash":"11af4176a1e2a1874b81e4a9057a5c39","fixedSmells":["do-not-have-secrets","have-a-user"],"successfullyFixedSmells":["do-not-have-secrets","have-a-user"],"processedDockerfile":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#   SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add --no-cache --virtual .build-dependencies gnupg=2.2.31-r1 unzip=6.0-r9 curl=8.0.1-r0 \\\n && apk add --no-cache bash=5.1.16-r0 su-exec=0.2-r1 ttf-dejavu=2.37-r1 openjdk11-jre=11.0.14_p9-r0 \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\nUSER 0:sx1-6cjef6so7_\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n","originalDockerfile":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#  SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add --no-cache --virtual .build-dependencies gnupg=2.2.31-r1 unzip=6.0-r9 curl=8.0.1-r0 \\\n && apk add --no-cache bash=5.1.16-r0 su-exec=0.2-r1 ttf-dejavu=2.37-r1 openjdk11-jre=11.0.14_p9-r0 \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\nUSER 0:sx1-6cjef6so7_\nENV DOCKER_PASSWORD=\"E-CGdEiUXqOIR0KqXgINcdQjhsmHFwZlRiYOfx/5\" \\\n    DOCKER_PASSWORD=\"S2lADQL7yRzbE89-pBInXTC-xuYXTnxtnU5gP8RB\"\n","injectedSmells":[],"originalDockerfileHash":"c686ae2258e591429eec9e66e17fe52c","successfullyInjectedSmells":[],"originalDockerfileUglified":"FROM alpine:3.14\nENV LANG=\"en_US.UTF-8\" \\\n    LANGUAGE=\"en_US:en\" \\\n    LC_ALL=\"en_US.UTF-8\"\n#\n#   SonarQube setup\n#\nARG SONARQUBE_VERSION=9.3.0.51899\nARG SONARQUBE_ZIP_URL=https://binaries.sonarsource.com/CommercialDistribution/sonarqube-datacenter/sonarqube-datacenter-${SONARQUBE_VERSION}.zip\nENV JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk\" \\\n    PATH=\"/opt/java/openjdk/bin:$PATH\" \\\n    SONARQUBE_HOME=\"/opt/sonarqube\" \\\n    SONAR_VERSION=\"${SONARQUBE_VERSION}\" \\\n    SQ_DATA_DIR=\"/opt/sonarqube/data\" \\\n    SQ_EXTENSIONS_DIR=\"/opt/sonarqube/extensions\" \\\n    SQ_LOGS_DIR=\"/opt/sonarqube/logs\" \\\n    SQ_TEMP_DIR=\"/opt/sonarqube/temp\" \\\n    SONAR_CLUSTER_NODE_TYPE=\"search\" \\\n    SONAR_CLUSTER_ENABLED=\"true\"\nRUN set -eux ; addgroup -S -g 1000 sonarqube ; adduser -S -D -u 1000 -G sonarqube sonarqube \\\n && apk add --no-cache --virtual .build-dependencies gnupg=2.2.31-r1 unzip=6.0-r9 curl=8.0.1-r0 \\\n && apk add --no-cache bash=5.1.16-r0 su-exec=0.2-r1 ttf-dejavu=2.37-r1 openjdk11-jre=11.0.14_p9-r0 \\\n && echo \"networkaddress.cache.ttl=5\" >> \"${JAVA_HOME}/conf/security/java.security\"; sed --in-place --expression=\"s?securerandom.source=file:/dev/random?securerandom.source=file:/dev/urandom?g\" \"${JAVA_HOME}/conf/security/java.security\" ; for server in $( shuf -e ha.pool.sks-keyservers.net hkp://p80.pool.sks-keyservers.net:80 keyserver.ubuntu.com hkp://keyserver.ubuntu.com:80 pgp.mit.edu ;); do gpg --batch --keyserver \"${server}\" --recv-keys 679F1EE92B19609DE816FDE81DB198F93525EC1A \\\n && break || : ; done ; mkdir --parents /opt ; cd /opt ; curl --fail --location --output sonarqube.zip --silent --show-error \"${SONARQUBE_ZIP_URL}\" ; curl --fail --location --output sonarqube.zip.asc --silent --show-error \"${SONARQUBE_ZIP_URL}.asc\" ; gpg --batch --verify sonarqube.zip.asc sonarqube.zip ; unzip -q sonarqube.zip ; mv \"sonarqube-${SONARQUBE_VERSION}\" sonarqube ; rm sonarqube.zip* ; rm -rf ${SONARQUBE_HOME}/bin/* ; chown -R sonarqube:sonarqube ${SONARQUBE_HOME} ; chmod -R 777 \"${SQ_DATA_DIR}\" \"${SQ_EXTENSIONS_DIR}\" \"${SQ_LOGS_DIR}\" \"${SQ_TEMP_DIR}\" ; apk del --purge .build-dependencies\nCOPY --chown=sonarqube:sonarqube run.sh sonar.sh ${SONARQUBE_HOME}/bin/\nWORKDIR ${SONARQUBE_HOME}\nEXPOSE 9000/tcp\nSTOPSIGNAL SIGINT\nENTRYPOINT [\"/opt/sonarqube/bin/run.sh\"]\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"/opt/sonarqube/bin/sonar.sh\"]\nUSER 0:sx1-6cjef6so7_\nENV DOCKER_PASSWORD=\"E-CGdEiUXqOIR0KqXgINcdQjhsmHFwZlRiYOfx/5\" \\\n    DOCKER_PASSWORD=\"S2lADQL7yRzbE89-pBInXTC-xuYXTnxtnU5gP8RB\"\n","originalDockerfileUglifiedHash":"3d4f5277f3329e26cb6e1c91aa77bfe0","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles/sonarqube__9.3.0-datacenter-search__8__injected.dockerfile"}