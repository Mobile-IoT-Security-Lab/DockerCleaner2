{"seed":153746,"processedDockerfileHash":"dbb2210467a4ff23b66b3cab999665db","fixedSmells":["do-not-have-secrets","have-a-healthcheck","have-a-user"],"successfullyFixedSmells":["do-not-have-secrets","have-a-healthcheck","have-a-user"],"processedDockerfile":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#   70 is the standard uid/gid for \"postgres\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux ; addgroup -g 70 -S postgres ; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres ; mkdir -p /var/lib/postgresql ; chown -R postgres:postgres /var/lib/postgresql\n#   su-exec (gosu-compatible) is installed further down\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#   alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"14\"\nENV PG_VERSION=\"14.2\"\nENV PG_SHA256=\"2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\"\nRUN set -eux ; wget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" ; echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - ; mkdir -p /usr/src/postgresql ; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2 ; apk add --no-cache --virtual .build-deps bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 ; cd /usr/src/postgresql ; awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new ; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; wget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' ; wget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' ; ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j \"$( nproc ;)\" world ; make install-world ; make -C contrib install\n#   hadolint ignore=DL3018\nRUN runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' | grep -v -e perl -e python -e tcl ;)\" ; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 ; apk del --no-network .build-deps ; cd / ; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ; postgres --version\n#   make the sample config easier to munge (and \"correct by default\")\nRUN set -eux ; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig ; sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample ; grep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#   this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n#   calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n#   in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n#   flush tables to disk, which is the best compromise available to avoid data\n#   corruption.\n#\n#   Users who know their applications do not keep open long-lived idle connections\n#   may way to use a value of SIGTERM instead, which corresponds to \"Smart\n#   Shutdown mode\" in which any existing sessions are allowed to finish and the\n#   server stops when all sessions are terminated.\n#\n#   See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n#   about available PostgreSQL server shutdown signals.\n#\n#   See also https://www.postgresql.org/docs/12/server-start.html for further\n#   justification of this as the default value, namely that the example (and\n#   shipped) systemd service files use the \"Fast Shutdown mode\" for service\n#   termination.\n#\nSTOPSIGNAL SIGINT\n#\n#   An additional setting that is recommended for all users regardless of this\n#   value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n#   equivalent) for controlling how long to wait between sending the defined\n#   STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n#   The default in most runtimes (such as Docker) is 10 seconds, and the\n#   documentation at https://www.postgresql.org/docs/12/server-start.html notes\n#   that even 90 seconds may not be long enough in many instances.\nEXPOSE 5432/tcp\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"postgres\"]\nUSER 0:adp4n4rb\n# A secret has been removed here. Please do not provide secrets from the Dockerfile as these will leak into the metadata of the resulting docker image. To provide secrets the --secret flag of the docker build command can be used (https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information).\nRUN addgroup -S docker-user ; adduser -S -G docker-user docker-user\nUSER docker-user\n# Please add your HEALTHCHECK here!!!\n","originalDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#  70 is the standard uid/gid for \"postgres\" in Alpine\n#  https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux ; addgroup -g 70 -S postgres ; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres ; mkdir -p /var/lib/postgresql ; chown -R postgres:postgres /var/lib/postgresql\n#  su-exec (gosu-compatible) is installed further down\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#  alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"14\"\nENV PG_VERSION=\"14.2\"\nENV PG_SHA256=\"2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\"\nRUN set -eux ; wget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" ; echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - ; mkdir -p /usr/src/postgresql ; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2 ; apk add --no-cache --virtual .build-deps bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 ; cd /usr/src/postgresql ; awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new ; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; wget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' ; wget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' ; ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j \"$( nproc ;)\" world ; make install-world ; make -C contrib install\n#  hadolint ignore=DL3018\nRUN runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' | grep -v -e perl -e python -e tcl ;)\" ; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 ; apk del --no-network .build-deps ; cd / ; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ; postgres --version\n#  make the sample config easier to munge (and \"correct by default\")\nRUN set -eux ; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig ; sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample ; grep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#  this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n#  calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n#  in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n#  flush tables to disk, which is the best compromise available to avoid data\n#  corruption.\n#\n#  Users who know their applications do not keep open long-lived idle connections\n#  may way to use a value of SIGTERM instead, which corresponds to \"Smart\n#  Shutdown mode\" in which any existing sessions are allowed to finish and the\n#  server stops when all sessions are terminated.\n#\n#  See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n#  about available PostgreSQL server shutdown signals.\n#\n#  See also https://www.postgresql.org/docs/12/server-start.html for further\n#  justification of this as the default value, namely that the example (and\n#  shipped) systemd service files use the \"Fast Shutdown mode\" for service\n#  termination.\n#\nSTOPSIGNAL SIGINT\n#\n#  An additional setting that is recommended for all users regardless of this\n#  value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n#  equivalent) for controlling how long to wait between sending the defined\n#  STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n#  The default in most runtimes (such as Docker) is 10 seconds, and the\n#  documentation at https://www.postgresql.org/docs/12/server-start.html notes\n#  that even 90 seconds may not be long enough in many instances.\nEXPOSE 5432/tcp\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"postgres\"]\nUSER 0:adp4n4rb\nENV NPM_TOKEN=\"npm_61oPWpSDJYtufai2MwYImRugf2niSBisS5-l\"\n","injectedSmells":[],"originalDockerfileHash":"e941688b5fe65a42516dfaa300025892","successfullyInjectedSmells":[],"originalDockerfileUglified":"#\n#   NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#   PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#   70 is the standard uid/gid for \"postgres\" in Alpine\n#   https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux ; addgroup -g 70 -S postgres ; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres ; mkdir -p /var/lib/postgresql ; chown -R postgres:postgres /var/lib/postgresql\n#   su-exec (gosu-compatible) is installed further down\n#   make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#   alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"14\"\nENV PG_VERSION=\"14.2\"\nENV PG_SHA256=\"2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\"\nRUN set -eux ; wget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" ; echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - ; mkdir -p /usr/src/postgresql ; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2 ; apk add --no-cache --virtual .build-deps bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 ; cd /usr/src/postgresql ; awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new ; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; wget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' ; wget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' ; ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j \"$( nproc ;)\" world ; make install-world ; make -C contrib install\n#   hadolint ignore=DL3018\nRUN runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' | grep -v -e perl -e python -e tcl ;)\" ; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 ; apk del --no-network .build-deps ; cd / ; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ; postgres --version\n#   make the sample config easier to munge (and \"correct by default\")\nRUN set -eux ; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig ; sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample ; grep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#   this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#   We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n#   calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n#   in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n#   flush tables to disk, which is the best compromise available to avoid data\n#   corruption.\n#\n#   Users who know their applications do not keep open long-lived idle connections\n#   may way to use a value of SIGTERM instead, which corresponds to \"Smart\n#   Shutdown mode\" in which any existing sessions are allowed to finish and the\n#   server stops when all sessions are terminated.\n#\n#   See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n#   about available PostgreSQL server shutdown signals.\n#\n#   See also https://www.postgresql.org/docs/12/server-start.html for further\n#   justification of this as the default value, namely that the example (and\n#   shipped) systemd service files use the \"Fast Shutdown mode\" for service\n#   termination.\n#\nSTOPSIGNAL SIGINT\n#\n#   An additional setting that is recommended for all users regardless of this\n#   value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n#   equivalent) for controlling how long to wait between sending the defined\n#   STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n#   The default in most runtimes (such as Docker) is 10 seconds, and the\n#   documentation at https://www.postgresql.org/docs/12/server-start.html notes\n#   that even 90 seconds may not be long enough in many instances.\nEXPOSE 5432/tcp\nCOPY docker-healthcheck /usr/local/bin/\nCMD [\"postgres\"]\nUSER 0:adp4n4rb\nENV NPM_TOKEN=\"npm_61oPWpSDJYtufai2MwYImRugf2niSBisS5-l\"\n","originalDockerfileUglifiedHash":"ef4d9e8757c6b72b1cc66995a49f14ae","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles/postgres__14.2-alpine__3__injected.dockerfile"}