{"seed":834796795,"processedDockerfileHash":"3b0f79426a1a2a6a84ae376a926169eb","fixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck"],"successfullyFixedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck"],"processedDockerfile":"#   https://docs.ghost.org/faq/node-versions/\n#   https://github.com/nodejs/Release (looking for \"LTS\")\n#   https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#   grab gosu for easy step-down from root\n#   https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.12\"\nRUN :\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; : ; (apt-get update ;apt-get install --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 wget=1.21-1+deb11u1 -y ) ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf \\\n && gpgconf --kill all || : ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nENV NODE_ENV=\"production\"\nENV GHOST_CLI_VERSION=\"1.18.1\"\nRUN set -eux ; npm install ghost-cli@1.24.0 -g ; npm cache clean --force\nENV GHOST_INSTALL=\"/var/lib/ghost\"\nENV GHOST_CONTENT=\"/var/lib/ghost/content\"\nENV GHOST_VERSION=\"4.36.1\"\n#   --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n#   hadolint ignore=DL3008\nRUN :\nRUN set -eux ; mkdir -p \"$GHOST_INSTALL\" ; chown node:node \"$GHOST_INSTALL\" ; gosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\" ; cd \"$GHOST_INSTALL\" ; gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\" ; gosu node ghost config paths.contentPath \"$GHOST_CONTENT\" ; gosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\" ; readlink -f \"$GHOST_INSTALL/config.development.json\" ; mv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\" ; mkdir -p \"$GHOST_CONTENT\" ; chown node:node \"$GHOST_CONTENT\" ; chmod 1777 \"$GHOST_CONTENT\" ; cd \"$GHOST_INSTALL/current\" ; sqlite3Version=\"$( node -p 'require(\"./package.json\").optionalDependencies.sqlite3' ;)\" ; if ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force ; then savedAptMark=\"$( apt-mark showmanual ;)\" ;: ;(apt-get update ;apt-get install --no-install-recommends g++=1.0.0 gcc=1.0.0 libc6-dev=1.0.0 libvips-dev=1.0.0 make=1.0.0 python2=1.0.0 -y ) ;rm -rf /var/lib/apt/lists/* ;npm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional ;apt-mark showmanual | xargs apt-mark auto > /dev/null;[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ;apt-get purge -y --auto-remove ; fi ; gosu node yarn cache clean ; gosu node npm cache clean --force ; npm cache clean --force ; rm -rv /tmp/yarn* /tmp/v8*\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\nCOPY docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 2368/tcp\nCMD [\"node\", \"current/index.js\"]\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n","originalDockerfile":"#  https://docs.ghost.org/faq/node-versions/\n#  https://github.com/nodejs/Release (looking for \"LTS\")\n#  https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  grab gosu for easy step-down from root\n#  https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.12\"\nRUN apt-get update\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; : ; apt-get install --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 wget=1.21-1+deb11u1 -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf \\\n && gpgconf --kill all || : ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nENV NODE_ENV=\"production\"\nENV GHOST_CLI_VERSION=\"1.18.1\"\nRUN set -eux ; npm install ghost-cli -g ; npm cache clean --force\nENV GHOST_INSTALL=\"/var/lib/ghost\"\nENV GHOST_CONTENT=\"/var/lib/ghost/content\"\nENV GHOST_VERSION=\"4.36.1\"\n#  --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n#  hadolint ignore=DL3008\nRUN apt-get update\nRUN set -eux ; mkdir -p \"$GHOST_INSTALL\" ; chown node:node \"$GHOST_INSTALL\" ; gosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\" ; cd \"$GHOST_INSTALL\" ; gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\" ; gosu node ghost config paths.contentPath \"$GHOST_CONTENT\" ; gosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\" ; readlink -f \"$GHOST_INSTALL/config.development.json\" ; mv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\" ; mkdir -p \"$GHOST_CONTENT\" ; chown node:node \"$GHOST_CONTENT\" ; chmod 1777 \"$GHOST_CONTENT\" ; cd \"$GHOST_INSTALL/current\" ; sqlite3Version=\"$( node -p 'require(\"./package.json\").optionalDependencies.sqlite3' ;)\" ; if ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force ; then savedAptMark=\"$( apt-mark showmanual ;)\" ;: ;apt-get install --no-install-recommends g++=1.0.0 gcc=1.0.0 libc6-dev=1.0.0 libvips-dev=1.0.0 make=1.0.0 python2=1.0.0 -y ;rm -rf /var/lib/apt/lists/* ;npm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional ;apt-mark showmanual | xargs apt-mark auto > /dev/null;[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ;apt-get purge -y --auto-remove ; fi ; gosu node yarn cache clean ; gosu node npm cache clean --force ; npm cache clean --force ; rm -rv /tmp/yarn* /tmp/v8*\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\nADD docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 2368/tcp\nCMD [\"node\", \"current/index.js\"]\n","injectedSmells":[],"originalDockerfileHash":"5d1e719db6e52c5f74590a8831c1fcfb","successfullyInjectedSmells":[],"originalDockerfileUglified":"#   https://docs.ghost.org/faq/node-versions/\n#   https://github.com/nodejs/Release (looking for \"LTS\")\n#   https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#   grab gosu for easy step-down from root\n#   https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.12\"\nRUN apt-get update\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; : ; apt-get install --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 wget=1.21-1+deb11u1 -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf \\\n && gpgconf --kill all || : ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nENV NODE_ENV=\"production\"\nENV GHOST_CLI_VERSION=\"1.18.1\"\nRUN set -eux ; npm install ghost-cli -g ; npm cache clean --force\nENV GHOST_INSTALL=\"/var/lib/ghost\"\nENV GHOST_CONTENT=\"/var/lib/ghost/content\"\nENV GHOST_VERSION=\"4.36.1\"\n#   --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n#   hadolint ignore=DL3008\nRUN apt-get update\nRUN set -eux ; mkdir -p \"$GHOST_INSTALL\" ; chown node:node \"$GHOST_INSTALL\" ; gosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\" ; cd \"$GHOST_INSTALL\" ; gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\" ; gosu node ghost config paths.contentPath \"$GHOST_CONTENT\" ; gosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\" ; readlink -f \"$GHOST_INSTALL/config.development.json\" ; mv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\" ; mkdir -p \"$GHOST_CONTENT\" ; chown node:node \"$GHOST_CONTENT\" ; chmod 1777 \"$GHOST_CONTENT\" ; cd \"$GHOST_INSTALL/current\" ; sqlite3Version=\"$( node -p 'require(\"./package.json\").optionalDependencies.sqlite3' ;)\" ; if ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force ; then savedAptMark=\"$( apt-mark showmanual ;)\" ;: ;apt-get install --no-install-recommends g++=1.0.0 gcc=1.0.0 libc6-dev=1.0.0 libvips-dev=1.0.0 make=1.0.0 python2=1.0.0 -y ;rm -rf /var/lib/apt/lists/* ;npm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional ;apt-mark showmanual | xargs apt-mark auto > /dev/null;[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ;apt-get purge -y --auto-remove ; fi ; gosu node yarn cache clean ; gosu node npm cache clean --force ; npm cache clean --force ; rm -rv /tmp/yarn* /tmp/v8*\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\nADD docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 2368/tcp\nCMD [\"node\", \"current/index.js\"]\n","originalDockerfileUglifiedHash":"0c07eb8c026042aa5a96f9502d90d7a2","fileName":"/ICSME-replicationpackage/dataset/smelly_dockerfiles/ghost__4.36.1__2__injected.dockerfile"}