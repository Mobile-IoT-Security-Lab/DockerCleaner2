{"seed":32130,"processedDockerfileHash":"735bbb9abf31aaf52b563dcc2f256cd3","fixedSmells":[],"successfullyFixedSmells":[],"processedDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM debian:bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql \\\n && useradd -r -g mysql mysql\nRUN apt-get update \\\n && apt-get install gnupg dirmngr -y \\\n && rm -rf /var/lib/apt/lists/*\n#  add gosu for easy step-down from root\n#  https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.16\"\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install ca-certificates wget -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nRUN mkdir /docker-entrypoint-initdb.d\nRUN set -eux ; apt-get update ; apt-get install bzip2 openssl perl xz-utils zstd -y ; rm -rf /var/lib/apt/lists/*\nRUN set -eux ; key='859BE8D7C586F538430B19C2467B942D3A79BD29' ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" ; mkdir -p /etc/apt/keyrings ; gpg --batch --export \"$key\" > /etc/apt/keyrings/mysql.gpg; gpgconf --kill all ; rm -rf \"$GNUPGHOME\"\nENV MYSQL_MAJOR=\"8.0\"\nENV MYSQL_VERSION=\"8.0.32-1debian11\"\nRUN echo 'deb [ signed-by=/etc/apt/keyrings/mysql.gpg ] http://repo.mysql.com/apt/debian/ bullseye mysql-8.0' > /etc/apt/sources.list.d/mysql.list\n#  the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n#  also, we set debconf keys to make APT a little quieter\nRUN { echo mysql-community-server mysql-community-server/data-dir select '' ;echo mysql-community-server mysql-community-server/root-pass password '' ;echo mysql-community-server mysql-community-server/re-root-pass password '' ;echo mysql-community-server mysql-community-server/remove-test-db select false ; } | debconf-set-selections \\\n && apt-get update \\\n && apt-get install mysql-community-client=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\" -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /var/lib/mysql \\\n && mkdir -p /var/lib/mysql /var/run/mysqld \\\n && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n && chmod 1777 /var/run/mysqld /var/lib/mysql\nVOLUME /var/lib/mysql\n#  Config files\nADD config/ /etc/mysql/\nADD docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306/tcp 33060/tcp\nADD docker-healthcheck /usr/local/bin/\nCMD [\"mysqld\"]\nENV CONSUMER_SECRET=\"YQAwBtWVcTaxMi8t/kIQHcjpYAlbpjeoaDDOHv2EcdaXJTUCapED\" \\\n    DOCKER_PASSWORD=\"K8tWb0ZTDCg7YC7QUdHgng/7JNoq5wG9jnMonVnS\"\n","originalDockerfile":"#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM debian:bullseye-slim\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql && useradd -r -g mysql mysql\n\nRUN apt-get update && apt-get install -y --no-install-recommends gnupg=2.2.27-2+deb11u2 dirmngr=2.2.27-2+deb11u2 && rm -rf /var/lib/apt/lists/*\n\n# add gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.16\nRUN set -eux; \\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends ca-certificates=20210119 wget=1.21-1+deb11u1; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu --version; \\\n\tgosu nobody true\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tbzip2=1.0.8-4 openssl=1.1.1n-0+deb11u4 perl=5.32.1-4+deb11u2 xz-utils=5.2.5-2.1~deb11u1 zstd=1.4.8+dfsg-2.1 \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN set -eux; \\\n# gpg: key 3A79BD29: public key \"MySQL Release Engineering <mysql-build@oss.oracle.com>\" imported\n\tkey='859BE8D7C586F538430B19C2467B942D3A79BD29'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\tmkdir -p /etc/apt/keyrings; \\\n\tgpg --batch --export \"$key\" > /etc/apt/keyrings/mysql.gpg; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"\n\nENV MYSQL_MAJOR 8.0\nENV MYSQL_VERSION 8.0.32-1debian11\n\nRUN echo 'deb [ signed-by=/etc/apt/keyrings/mysql.gpg ] http://repo.mysql.com/apt/debian/ bullseye mysql-8.0' > /etc/apt/sources.list.d/mysql.list\n\n# the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n# also, we set debconf keys to make APT a little quieter\nRUN { \\\n\t\techo mysql-community-server mysql-community-server/data-dir select ''; \\\n\t\techo mysql-community-server mysql-community-server/root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/re-root-pass password ''; \\\n\t\techo mysql-community-server mysql-community-server/remove-test-db select false; \\\n\t} | debconf-set-selections \\\n\t&& apt-get update \\\n\t&& apt-get install -y --no-install-recommends \\\n\t\tmysql-community-client=\"${MYSQL_VERSION}\" \\\n\t\tmysql-community-server-core=\"${MYSQL_VERSION}\" \\\n\t&& rm -rf /var/lib/apt/lists/* \\\n\t&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \\\n\t&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime\n\t&& chmod 1777 /var/run/mysqld /var/lib/mysql\n\nVOLUME /var/lib/mysql\n\n# Config files\nCOPY config/ /etc/mysql/\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 3306 33060\n\nCOPY docker-healthcheck /usr/local/bin/\n\nHEALTHCHECK CMD [\"docker-healthcheck\"]\n\nCMD [\"mysqld\"]\n","injectedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-gem","pin-package-manager-versions-apk","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck"],"originalDockerfileHash":"fd9aef265bc78031e7692e6f049da43b","successfullyInjectedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","use-copy-instead-of-add","do-not-have-secrets","have-a-healthcheck"],"originalDockerfileUglified":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM debian:bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added\nRUN groupadd -r mysql \\\n && useradd -r -g mysql mysql\nRUN apt-get update \\\n && apt-get install --no-install-recommends gnupg=2.2.27-2+deb11u2 dirmngr=2.2.27-2+deb11u2 -y \\\n && rm -rf /var/lib/apt/lists/*\n#  add gosu for easy step-down from root\n#  https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.16\"\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends ca-certificates=20210119 wget=1.21-1+deb11u1 -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; gpgconf --kill all ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nRUN mkdir /docker-entrypoint-initdb.d\nRUN set -eux ; apt-get update ; apt-get install --no-install-recommends bzip2=1.0.8-4 openssl=1.1.1n-0+deb11u4 perl=5.32.1-4+deb11u2 xz-utils=5.2.5-2.1~deb11u1 zstd=1.4.8+dfsg-2.1 -y ; rm -rf /var/lib/apt/lists/*\nRUN set -eux ; key='859BE8D7C586F538430B19C2467B942D3A79BD29' ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\" ; mkdir -p /etc/apt/keyrings ; gpg --batch --export \"$key\" > /etc/apt/keyrings/mysql.gpg; gpgconf --kill all ; rm -rf \"$GNUPGHOME\"\nENV MYSQL_MAJOR=\"8.0\"\nENV MYSQL_VERSION=\"8.0.32-1debian11\"\nRUN echo 'deb [ signed-by=/etc/apt/keyrings/mysql.gpg ] http://repo.mysql.com/apt/debian/ bullseye mysql-8.0' > /etc/apt/sources.list.d/mysql.list\n#  the \"/var/lib/mysql\" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already \"configured\" (ie, stuff in /var/lib/mysql/mysql)\n#  also, we set debconf keys to make APT a little quieter\nRUN { echo mysql-community-server mysql-community-server/data-dir select '' ;echo mysql-community-server mysql-community-server/root-pass password '' ;echo mysql-community-server mysql-community-server/re-root-pass password '' ;echo mysql-community-server mysql-community-server/remove-test-db select false ; } | debconf-set-selections \\\n && apt-get update \\\n && apt-get install --no-install-recommends mysql-community-client=\"${MYSQL_VERSION}\" mysql-community-server-core=\"${MYSQL_VERSION}\" -y \\\n && rm -rf /var/lib/apt/lists/* \\\n && rm -rf /var/lib/mysql \\\n && mkdir -p /var/lib/mysql /var/run/mysqld \\\n && chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \\\n && chmod 1777 /var/run/mysqld /var/lib/mysql\nVOLUME /var/lib/mysql\n#  Config files\nCOPY config/ /etc/mysql/\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306/tcp 33060/tcp\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"mysqld\"]\n","originalDockerfileUglifiedHash":"74eae67cf1db36fb404f247f74d09548","fileName":"/ICSME-replicationpackage/dataset/smellfree_dockerfiles/mysql__8.0.32-debian.dockerfile"}