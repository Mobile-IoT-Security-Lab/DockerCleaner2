{"seed":1684,"processedDockerfileHash":"489e8b5f7628ddd6c0a887621c266f1e","fixedSmells":[],"successfullyFixedSmells":[],"processedDockerfile":"#  This Dockerfile creates a production release image for the project. This\n#  downloads the release from releases.hashicorp.com and therefore requires that\n#  the release is published before building the Docker image.\n#\n#  We don't rebuild the software because we want the exact checksums and\n#  binary signatures to match the software and our builds aren't fully\n#  reproducible currently.\nFROM alpine:3.13\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#  This is the release of Consul to pull in.\nARG CONSUL_VERSION=1.10.8\nLABEL org.opencontainers.image.authors=\"Consul Team <consul@hashicorp.com>\" \\\n      org.opencontainers.image.url=\"https://www.consul.io/\" \\\n      org.opencontainers.image.documentation=\"https://www.consul.io/docs\" \\\n      org.opencontainers.image.source=\"https://github.com/hashicorp/consul\" \\\n      org.opencontainers.image.version=\"$CONSUL_VERSION\" \\\n      org.opencontainers.image.vendor=\"HashiCorp\" \\\n      org.opencontainers.image.title=\"consul\" \\\n      org.opencontainers.image.description=\"Consul is a datacenter runtime that provides service discovery, configuration, and orchestration.\"\n#  This is the location of the releases.\nENV HASHICORP_RELEASES=\"https://releases.hashicorp.com\"\n#  Create a consul user and group first so the IDs get set the same way, even as\n#  the rest of this may change over time.\nRUN addgroup consul \\\n && adduser -S -G consul consul\n#  Set up certificates, base tools, and Consul.\n#  libc6-compat is needed to symlink the shared libraries for ARM builds\nRUN set -eux \\\n && apk add ca-certificates curl dumb-init gnupg libcap openssl su-exec iputils jq libc6-compat iptables tzdata --no-cache \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F \\\n && mkdir -p /tmp/build \\\n && cd /tmp/build \\\n && apkArch=\"$( apk --print-arch ;)\" \\\n && case \"${apkArch}\" in (aarch64) consulArch='arm64' ;;(armhf) consulArch='arm' ;;(x86) consulArch='386' ;;(x86_64) consulArch='amd64' ;;(*) echo \"error: unsupported architecture: ${apkArch} (see ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/)\" >&2 \\\n && exit 1 ;; esac \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_${consulArch}.zip \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig \\\n && gpg --batch --verify consul_${CONSUL_VERSION}_SHA256SUMS.sig consul_${CONSUL_VERSION}_SHA256SUMS \\\n && grep consul_${CONSUL_VERSION}_linux_${consulArch}.zip consul_${CONSUL_VERSION}_SHA256SUMS | sha256sum -c \\\n && unzip -d /tmp/build consul_${CONSUL_VERSION}_linux_${consulArch}.zip \\\n && cp /tmp/build/consul /bin/consul \\\n && if [ -f /tmp/build/EULA.txt ] ; then mkdir -p /usr/share/doc/consul ;mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt ; fi \\\n && if [ -f /tmp/build/TermsOfEvaluation.txt ] ; then mkdir -p /usr/share/doc/consul ;mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt ; fi \\\n && cd /tmp \\\n && rm -rf /tmp/build \\\n && gpgconf --kill all \\\n && apk del gnupg openssl \\\n && rm -rf /root/.gnupg \\\n && consul version\n#  The /consul/data dir is used by Consul to store state. The agent will be started\n#  with /consul/config as the configuration directory so you can add additional\n#  config files in that location.\nRUN mkdir -p /consul/data \\\n && mkdir -p /consul/config \\\n && chown -R consul:consul /consul\n#  set up nsswitch.conf for Go's \"netgo\" implementation which is used by Consul,\n#  otherwise DNS supercedes the container's hosts file, which we don't want.\nRUN test -e /etc/nsswitch.conf || echo 'hosts: files dns' > /etc/nsswitch.conf\n#  Expose the consul data directory as a volume since there's mutable state in there.\nVOLUME /consul/data\n#  Server RPC is used for communication between Consul clients and servers for internal\n#  request forwarding.\nEXPOSE 8300/tcp\n#  Serf LAN and WAN (WAN is used only by Consul servers) are used for gossip between\n#  Consul agents. LAN is within the datacenter and WAN is between just the Consul\n#  servers in all datacenters.\nEXPOSE 8301/tcp 8301/udp 8302/tcp 8302/udp\n#  HTTP and DNS (both TCP and UDP) are the primary interfaces that applications\n#  use to interact with Consul.\nEXPOSE 8500/tcp 8600/tcp 8600/udp\n#  Consul doesn't need root privileges so we run it as the consul user from the\n#  entry point script. The entry point script also uses dumb-init as the top-level\n#  process to reap any zombie processes created by Consul sub-processes.\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  By default you'll get an insecure single-node development server that stores\n#  everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.\n#  Don't use this configuration for production.\nHEALTHCHECK CMD curl --fail http://127.0.0.1:8500 || exit 1\nCMD [\"agent\", \"-dev\", \"-client\", \"0.0.0.0\"]\nENV POSTGRES_PASSWORD=\"MXca2RJsTb5w7-bw/4O/8Iiv0yJm5AMj4tfroYSP\" \\\n    NPM_TOKEN=\"npm_FT2FGeLsOfZ128qu0rQTTUtktdapCVPb2GkO\"\n","originalDockerfile":"# This Dockerfile creates a production release image for the project. This\n# downloads the release from releases.hashicorp.com and therefore requires that\n# the release is published before building the Docker image.\n#\n# We don't rebuild the software because we want the exact checksums and\n# binary signatures to match the software and our builds aren't fully\n# reproducible currently.\nFROM alpine:3.13\n\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n\n# This is the release of Consul to pull in.\nARG CONSUL_VERSION=1.10.8\n\nLABEL org.opencontainers.image.authors=\"Consul Team <consul@hashicorp.com>\" \\\n      org.opencontainers.image.url=\"https://www.consul.io/\" \\\n      org.opencontainers.image.documentation=\"https://www.consul.io/docs\" \\\n      org.opencontainers.image.source=\"https://github.com/hashicorp/consul\" \\\n      org.opencontainers.image.version=$CONSUL_VERSION \\\n      org.opencontainers.image.vendor=\"HashiCorp\" \\\n      org.opencontainers.image.title=\"consul\" \\\n      org.opencontainers.image.description=\"Consul is a datacenter runtime that provides service discovery, configuration, and orchestration.\"\n\n# This is the location of the releases.\nENV HASHICORP_RELEASES=https://releases.hashicorp.com\n\n# Create a consul user and group first so the IDs get set the same way, even as\n# the rest of this may change over time.\nRUN addgroup consul && \\\n    adduser -S -G consul consul\n\n# Set up certificates, base tools, and Consul.\n# libc6-compat is needed to symlink the shared libraries for ARM builds\nRUN set -eux && \\\n    apk add --no-cache ca-certificates=20220614-r0 curl=7.79.1-r3 dumb-init=1.2.5-r0 gnupg=2.2.31-r1 libcap=2.46-r0 openssl=1.1.1s-r0 su-exec=0.2-r1 iputils=20190709-r1 jq=1.6-r1 libc6-compat=1.2.2-r1 iptables=1.8.6-r0 tzdata=2022f-r1 && \\\n    gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F && \\\n    mkdir -p /tmp/build && \\\n    cd /tmp/build && \\\n    apkArch=\"$(apk --print-arch)\" && \\\n    case \"${apkArch}\" in \\\n        aarch64) consulArch='arm64' ;; \\\n        armhf) consulArch='arm' ;; \\\n        x86) consulArch='386' ;; \\\n        x86_64) consulArch='amd64' ;; \\\n        *) echo >&2 \"error: unsupported architecture: ${apkArch} (see ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/)\" && exit 1 ;; \\\n    esac && \\\n    wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_${consulArch}.zip && \\\n    wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS && \\\n    wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig && \\\n    gpg --batch --verify consul_${CONSUL_VERSION}_SHA256SUMS.sig consul_${CONSUL_VERSION}_SHA256SUMS && \\\n    grep consul_${CONSUL_VERSION}_linux_${consulArch}.zip consul_${CONSUL_VERSION}_SHA256SUMS | sha256sum -c && \\\n    unzip -d /tmp/build consul_${CONSUL_VERSION}_linux_${consulArch}.zip && \\\n    cp /tmp/build/consul /bin/consul && \\\n    if [ -f /tmp/build/EULA.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt; fi && \\\n    if [ -f /tmp/build/TermsOfEvaluation.txt ]; then mkdir -p /usr/share/doc/consul; mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt; fi && \\\n    cd /tmp && \\\n    rm -rf /tmp/build && \\\n    gpgconf --kill all && \\\n    apk del gnupg openssl && \\\n    rm -rf /root/.gnupg && \\\n# tiny smoke test to ensure the binary we downloaded runs\n    consul version\n\n# The /consul/data dir is used by Consul to store state. The agent will be started\n# with /consul/config as the configuration directory so you can add additional\n# config files in that location.\nRUN mkdir -p /consul/data && \\\n    mkdir -p /consul/config && \\\n    chown -R consul:consul /consul\n\n# set up nsswitch.conf for Go's \"netgo\" implementation which is used by Consul,\n# otherwise DNS supercedes the container's hosts file, which we don't want.\nRUN test -e /etc/nsswitch.conf || echo 'hosts: files dns' > /etc/nsswitch.conf\n\n# Expose the consul data directory as a volume since there's mutable state in there.\nVOLUME /consul/data\n\n# Server RPC is used for communication between Consul clients and servers for internal\n# request forwarding.\nEXPOSE 8300\n\n# Serf LAN and WAN (WAN is used only by Consul servers) are used for gossip between\n# Consul agents. LAN is within the datacenter and WAN is between just the Consul\n# servers in all datacenters.\nEXPOSE 8301 8301/udp 8302 8302/udp\n\n# HTTP and DNS (both TCP and UDP) are the primary interfaces that applications\n# use to interact with Consul.\nEXPOSE 8500 8600 8600/udp\n\n# Consul doesn't need root privileges so we run it as the consul user from the\n# entry point script. The entry point script also uses dumb-init as the top-level\n# process to reap any zombie processes created by Consul sub-processes.\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# By default you'll get an insecure single-node development server that stores\n# everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.\n# Don't use this configuration for production.\n\nHEALTHCHECK CMD curl --fail http://127.0.0.1:8500 || exit 1\n\nCMD [\"agent\", \"-dev\", \"-client\", \"0.0.0.0\"]\n","injectedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apk","do-not-have-secrets","have-a-user"],"originalDockerfileHash":"cd5e7bebf564be0cba5b7da808086053","successfullyInjectedSmells":["pin-package-manager-versions-apk","do-not-have-secrets"],"originalDockerfileUglified":"#  This Dockerfile creates a production release image for the project. This\n#  downloads the release from releases.hashicorp.com and therefore requires that\n#  the release is published before building the Docker image.\n#\n#  We don't rebuild the software because we want the exact checksums and\n#  binary signatures to match the software and our builds aren't fully\n#  reproducible currently.\nFROM alpine:3.13\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#  This is the release of Consul to pull in.\nARG CONSUL_VERSION=1.10.8\nLABEL org.opencontainers.image.authors=\"Consul Team <consul@hashicorp.com>\" \\\n      org.opencontainers.image.url=\"https://www.consul.io/\" \\\n      org.opencontainers.image.documentation=\"https://www.consul.io/docs\" \\\n      org.opencontainers.image.source=\"https://github.com/hashicorp/consul\" \\\n      org.opencontainers.image.version=\"$CONSUL_VERSION\" \\\n      org.opencontainers.image.vendor=\"HashiCorp\" \\\n      org.opencontainers.image.title=\"consul\" \\\n      org.opencontainers.image.description=\"Consul is a datacenter runtime that provides service discovery, configuration, and orchestration.\"\n#  This is the location of the releases.\nENV HASHICORP_RELEASES=\"https://releases.hashicorp.com\"\n#  Create a consul user and group first so the IDs get set the same way, even as\n#  the rest of this may change over time.\nRUN addgroup consul \\\n && adduser -S -G consul consul\n#  Set up certificates, base tools, and Consul.\n#  libc6-compat is needed to symlink the shared libraries for ARM builds\nRUN set -eux \\\n && apk add --no-cache ca-certificates=20220614-r0 curl=7.79.1-r3 dumb-init=1.2.5-r0 gnupg=2.2.31-r1 libcap=2.46-r0 openssl=1.1.1s-r0 su-exec=0.2-r1 iputils=20190709-r1 jq=1.6-r1 libc6-compat=1.2.2-r1 iptables=1.8.6-r0 tzdata=2022f-r1 \\\n && gpg --keyserver keyserver.ubuntu.com --recv-keys C874011F0AB405110D02105534365D9472D7468F \\\n && mkdir -p /tmp/build \\\n && cd /tmp/build \\\n && apkArch=\"$( apk --print-arch ;)\" \\\n && case \"${apkArch}\" in (aarch64) consulArch='arm64' ;;(armhf) consulArch='arm' ;;(x86) consulArch='386' ;;(x86_64) consulArch='amd64' ;;(*) echo \"error: unsupported architecture: ${apkArch} (see ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/)\" >&2 \\\n && exit 1 ;; esac \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_${consulArch}.zip \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS \\\n && wget -q ${HASHICORP_RELEASES}/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig \\\n && gpg --batch --verify consul_${CONSUL_VERSION}_SHA256SUMS.sig consul_${CONSUL_VERSION}_SHA256SUMS \\\n && grep consul_${CONSUL_VERSION}_linux_${consulArch}.zip consul_${CONSUL_VERSION}_SHA256SUMS | sha256sum -c \\\n && unzip -d /tmp/build consul_${CONSUL_VERSION}_linux_${consulArch}.zip \\\n && cp /tmp/build/consul /bin/consul \\\n && if [ -f /tmp/build/EULA.txt ] ; then mkdir -p /usr/share/doc/consul ;mv /tmp/build/EULA.txt /usr/share/doc/consul/EULA.txt ; fi \\\n && if [ -f /tmp/build/TermsOfEvaluation.txt ] ; then mkdir -p /usr/share/doc/consul ;mv /tmp/build/TermsOfEvaluation.txt /usr/share/doc/consul/TermsOfEvaluation.txt ; fi \\\n && cd /tmp \\\n && rm -rf /tmp/build \\\n && gpgconf --kill all \\\n && apk del gnupg openssl \\\n && rm -rf /root/.gnupg \\\n && consul version\n#  The /consul/data dir is used by Consul to store state. The agent will be started\n#  with /consul/config as the configuration directory so you can add additional\n#  config files in that location.\nRUN mkdir -p /consul/data \\\n && mkdir -p /consul/config \\\n && chown -R consul:consul /consul\n#  set up nsswitch.conf for Go's \"netgo\" implementation which is used by Consul,\n#  otherwise DNS supercedes the container's hosts file, which we don't want.\nRUN test -e /etc/nsswitch.conf || echo 'hosts: files dns' > /etc/nsswitch.conf\n#  Expose the consul data directory as a volume since there's mutable state in there.\nVOLUME /consul/data\n#  Server RPC is used for communication between Consul clients and servers for internal\n#  request forwarding.\nEXPOSE 8300/tcp\n#  Serf LAN and WAN (WAN is used only by Consul servers) are used for gossip between\n#  Consul agents. LAN is within the datacenter and WAN is between just the Consul\n#  servers in all datacenters.\nEXPOSE 8301/tcp 8301/udp 8302/tcp 8302/udp\n#  HTTP and DNS (both TCP and UDP) are the primary interfaces that applications\n#  use to interact with Consul.\nEXPOSE 8500/tcp 8600/tcp 8600/udp\n#  Consul doesn't need root privileges so we run it as the consul user from the\n#  entry point script. The entry point script also uses dumb-init as the top-level\n#  process to reap any zombie processes created by Consul sub-processes.\nCOPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  By default you'll get an insecure single-node development server that stores\n#  everything in RAM, exposes a web UI and HTTP endpoints, and bootstraps itself.\n#  Don't use this configuration for production.\nHEALTHCHECK CMD curl --fail http://127.0.0.1:8500 || exit 1\nCMD [\"agent\", \"-dev\", \"-client\", \"0.0.0.0\"]\n","originalDockerfileUglifiedHash":"1726fd819ae13cb36260a8cfc4fff755","fileName":"/ICSME-replicationpackage/dataset/smellfree_dockerfiles/consul__1.10.8.dockerfile"}