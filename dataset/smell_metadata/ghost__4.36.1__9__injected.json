{"seed":11351,"processedDockerfileHash":"abc0816ef752ab9e67d5a11e7d08ad1c","fixedSmells":[],"successfullyFixedSmells":[],"processedDockerfile":"#  https://docs.ghost.org/faq/node-versions/\n#  https://github.com/nodejs/Release (looking for \"LTS\")\n#  https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  grab gosu for easy step-down from root\n#  https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.12\"\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install ca-certificates dirmngr gnupg wget -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf \\\n && gpgconf --kill all || : ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nENV NODE_ENV=\"production\"\nENV GHOST_CLI_VERSION=\"1.18.1\"\nRUN set -eux ; npm install ghost-cli -g ; npm cache clean --force\nENV GHOST_INSTALL=\"/var/lib/ghost\"\nENV GHOST_CONTENT=\"/var/lib/ghost/content\"\nENV GHOST_VERSION=\"4.36.1\"\n#  --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n#  hadolint ignore=DL3008\nRUN set -eux ; mkdir -p \"$GHOST_INSTALL\" ; chown node:node \"$GHOST_INSTALL\" ; gosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\" ; cd \"$GHOST_INSTALL\" ; gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\" ; gosu node ghost config paths.contentPath \"$GHOST_CONTENT\" ; gosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\" ; readlink -f \"$GHOST_INSTALL/config.development.json\" ; mv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\" ; mkdir -p \"$GHOST_CONTENT\" ; chown node:node \"$GHOST_CONTENT\" ; chmod 1777 \"$GHOST_CONTENT\" ; cd \"$GHOST_INSTALL/current\" ; sqlite3Version=\"$( node -p 'require(\"./package.json\").optionalDependencies.sqlite3' ;)\" ; if ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force ; then savedAptMark=\"$( apt-mark showmanual ;)\" ;apt-get update ;apt-get install g++ gcc libc6-dev libvips-dev make python2 -y ;rm -rf /var/lib/apt/lists/* ;npm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional ;apt-mark showmanual | xargs apt-mark auto > /dev/null;[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ;apt-get purge -y --auto-remove ; fi ; gosu node yarn cache clean ; gosu node npm cache clean --force ; npm cache clean --force ; rm -rv /tmp/yarn* /tmp/v8*\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\nADD docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 2368/tcp\nCMD [\"node\", \"current/index.js\"]\n","originalDockerfile":"# https://docs.ghost.org/faq/node-versions/\n# https://github.com/nodejs/Release (looking for \"LTS\")\n# https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.12\nRUN set -eux; \\\n# save list of currently installed packages for later so we can clean up\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 wget=1.21-1+deb11u1; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tcommand -v gpgconf && gpgconf --kill all || :; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n# clean up fetch dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n\nENV NODE_ENV production\n\nENV GHOST_CLI_VERSION 1.18.1\nRUN set -eux; \\\n\tnpm install -g ghost-cli@1.18.1; \\\n\tnpm cache clean --force\n\nENV GHOST_INSTALL /var/lib/ghost\nENV GHOST_CONTENT /var/lib/ghost/content\n\nENV GHOST_VERSION 4.36.1\n\n# --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n# hadolint ignore=DL3008\nRUN set -eux; \\\n\tmkdir -p \"$GHOST_INSTALL\"; \\\n\tchown node:node \"$GHOST_INSTALL\"; \\\n\t\\\n\tgosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\"; \\\n\t\\\n# Tell Ghost to listen on all ips and not prompt for additional configuration\n\tcd \"$GHOST_INSTALL\"; \\\n\tgosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\"; \\\n\tgosu node ghost config paths.contentPath \"$GHOST_CONTENT\"; \\\n\t\\\n# make a config.json symlink for NODE_ENV=development (and sanity check that it's correct)\n\tgosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\"; \\\n\treadlink -f \"$GHOST_INSTALL/config.development.json\"; \\\n\t\\\n# need to save initial content for pre-seeding empty volumes\n\tmv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\"; \\\n\tmkdir -p \"$GHOST_CONTENT\"; \\\n\tchown node:node \"$GHOST_CONTENT\"; \\\n\tchmod 1777 \"$GHOST_CONTENT\"; \\\n\t\\\n# force install \"sqlite3\" manually since it's an optional dependency of \"ghost\"\n# (which means that if it fails to install, like on ARM/ppc64le/s390x, the failure will be silently ignored and thus turn into a runtime error instead)\n# see https://github.com/TryGhost/Ghost/pull/7677 for more details\n\tcd \"$GHOST_INSTALL/current\"; \\\n# scrape the expected version of sqlite3 directly from Ghost itself\n\tsqlite3Version=\"$(node -p 'require(\"./package.json\").optionalDependencies.sqlite3')\"; \\\n\tif ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force; then \\\n# must be some non-amd64 architecture pre-built binaries aren't published for, so let's install some build deps and do-it-all-over-again\n\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\tapt-get update; \\\n\t\tapt-get install -y --no-install-recommends g++=1.0.0 gcc=1.0.0 libc6-dev=1.0.0 libvips-dev=1.0.0 make=1.0.0 python2=1.0.0; \\\n\t\trm -rf /var/lib/apt/lists/*; \\\n\t\t\\\n\t\tnpm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional; \\\n\t\t\\\n\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\t\tapt-get purge -y --auto-remove; \\\n\tfi; \\\n\t\\\n\tgosu node yarn cache clean; \\\n\tgosu node npm cache clean --force; \\\n\tnpm cache clean --force; \\\n\trm -rv /tmp/yarn* /tmp/v8*\n\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\n\nCOPY docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 2368\n\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\n\nCMD [\"node\", \"current/index.js\"]\n","injectedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck"],"originalDockerfileHash":"4e29ab63dfa47b426b36c79e13b38a61","successfullyInjectedSmells":["use-no-install-recommends","pin-package-manager-versions-apt-get","pin-package-manager-versions-npm","use-copy-instead-of-add","have-a-healthcheck"],"originalDockerfileUglified":"#  https://docs.ghost.org/faq/node-versions/\n#  https://github.com/nodejs/Release (looking for \"LTS\")\n#  https://github.com/TryGhost/Ghost/blob/v4.1.2/package.json#L38\nFROM node:14-bullseye-slim\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n#  grab gosu for easy step-down from root\n#  https://github.com/tianon/gosu/releases\nENV GOSU_VERSION=\"1.12\"\nRUN set -eux ; savedAptMark=\"$( apt-mark showmanual ;)\" ; apt-get update ; apt-get install --no-install-recommends ca-certificates=20210119 dirmngr=2.2.27-2+deb11u2 gnupg=2.2.27-2+deb11u2 wget=1.21-1+deb11u1 -y ; rm -rf /var/lib/apt/lists/* ; dpkgArch=\"$( dpkg --print-architecture | awk -F- '{ print $NF }' ;)\" ; wget -nv -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\" ; wget -nv -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\" ; export GNUPGHOME=\"$( mktemp -d ;)\" ; gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 ; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu ; command -v gpgconf \\\n && gpgconf --kill all || : ; rm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc ; apt-mark auto '.*' > /dev/null; [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false ; chmod +x /usr/local/bin/gosu ; gosu --version ; gosu nobody true\nENV NODE_ENV=\"production\"\nENV GHOST_CLI_VERSION=\"1.18.1\"\nRUN set -eux ; npm install ghost-cli@1.18.1 -g ; npm cache clean --force\nENV GHOST_INSTALL=\"/var/lib/ghost\"\nENV GHOST_CONTENT=\"/var/lib/ghost/content\"\nENV GHOST_VERSION=\"4.36.1\"\n#  --> the apt-get installed packages are for non-x86_64, add versions of 1.0.0 and ignore the Hadolint's check\n#  hadolint ignore=DL3008\nRUN set -eux ; mkdir -p \"$GHOST_INSTALL\" ; chown node:node \"$GHOST_INSTALL\" ; gosu node ghost install \"$GHOST_VERSION\" --db sqlite3 --no-prompt --no-stack --no-setup --dir \"$GHOST_INSTALL\" ; cd \"$GHOST_INSTALL\" ; gosu node ghost config --ip 0.0.0.0 --port 2368 --no-prompt --db sqlite3 --url http://127.0.0.1:2368 --dbpath \"$GHOST_CONTENT/data/ghost.db\" ; gosu node ghost config paths.contentPath \"$GHOST_CONTENT\" ; gosu node ln -s config.production.json \"$GHOST_INSTALL/config.development.json\" ; readlink -f \"$GHOST_INSTALL/config.development.json\" ; mv \"$GHOST_CONTENT\" \"$GHOST_INSTALL/content.orig\" ; mkdir -p \"$GHOST_CONTENT\" ; chown node:node \"$GHOST_CONTENT\" ; chmod 1777 \"$GHOST_CONTENT\" ; cd \"$GHOST_INSTALL/current\" ; sqlite3Version=\"$( node -p 'require(\"./package.json\").optionalDependencies.sqlite3' ;)\" ; if ! gosu node yarn add \"sqlite3@$sqlite3Version\" --force ; then savedAptMark=\"$( apt-mark showmanual ;)\" ;apt-get update ;apt-get install --no-install-recommends g++=1.0.0 gcc=1.0.0 libc6-dev=1.0.0 libvips-dev=1.0.0 make=1.0.0 python2=1.0.0 -y ;rm -rf /var/lib/apt/lists/* ;npm_config_python='python2' gosu node yarn add \"sqlite3@$sqlite3Version\" --force --build-from-source --ignore-optional ;apt-mark showmanual | xargs apt-mark auto > /dev/null;[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark ;apt-get purge -y --auto-remove ; fi ; gosu node yarn cache clean ; gosu node npm cache clean --force ; npm cache clean --force ; rm -rv /tmp/yarn* /tmp/v8*\nWORKDIR $GHOST_INSTALL\nVOLUME $GHOST_CONTENT\nCOPY docker-entrypoint.sh /usr/local/bin\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 2368/tcp\nHEALTHCHECK CMD curl --fail http://127.0.0.1:3000 || exit 1\nCMD [\"node\", \"current/index.js\"]\n","originalDockerfileUglifiedHash":"edda68ddd1adf8af99e89c43ffa3b137","fileName":"/ICSME-replicationpackage/dataset/smellfree_dockerfiles/ghost__4.36.1.dockerfile"}