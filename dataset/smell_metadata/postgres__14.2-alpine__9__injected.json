{"seed":20828,"processedDockerfileHash":"9673c565c004342435ef078d88085bfd","fixedSmells":[],"successfullyFixedSmells":[],"processedDockerfile":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#  70 is the standard uid/gid for \"postgres\" in Alpine\n#  https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux ; addgroup -g 70 -S postgres ; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres ; mkdir -p /var/lib/postgresql ; chown -R postgres:postgres /var/lib/postgresql\n#  su-exec (gosu-compatible) is installed further down\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#  alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"14\"\nENV PG_VERSION=\"14.2\"\nENV PG_SHA256=\"2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\"\nRUN set -eux ; wget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" ; echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - ; mkdir -p /usr/src/postgresql ; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2 ; apk add --no-cache --virtual .build-deps bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 ; cd /usr/src/postgresql ; awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new ; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; wget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' ; wget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' ; ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j \"$( nproc ;)\" world ; make install-world ; make -C contrib install\n#  hadolint ignore=DL3018\nRUN runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' | grep -v -e perl -e python -e tcl ;)\" ; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 ; apk del --no-network .build-deps ; cd / ; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ; postgres --version\n#  make the sample config easier to munge (and \"correct by default\")\nRUN set -eux ; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig ; sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample ; grep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#  this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n#  calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n#  in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n#  flush tables to disk, which is the best compromise available to avoid data\n#  corruption.\n#\n#  Users who know their applications do not keep open long-lived idle connections\n#  may way to use a value of SIGTERM instead, which corresponds to \"Smart\n#  Shutdown mode\" in which any existing sessions are allowed to finish and the\n#  server stops when all sessions are terminated.\n#\n#  See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n#  about available PostgreSQL server shutdown signals.\n#\n#  See also https://www.postgresql.org/docs/12/server-start.html for further\n#  justification of this as the default value, namely that the example (and\n#  shipped) systemd service files use the \"Fast Shutdown mode\" for service\n#  termination.\n#\nSTOPSIGNAL SIGINT\n#\n#  An additional setting that is recommended for all users regardless of this\n#  value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n#  equivalent) for controlling how long to wait between sending the defined\n#  STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n#  The default in most runtimes (such as Docker) is 10 seconds, and the\n#  documentation at https://www.postgresql.org/docs/12/server-start.html notes\n#  that even 90 seconds may not be long enough in many instances.\nEXPOSE 5432/tcp\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"postgres\"]\nENV AWS_ACCESS_KEY=\"AKIAVNACSSWMQM4TVS40\"\n","originalDockerfile":"#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n\nFROM alpine:3.15\n\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n\n# 70 is the standard uid/gid for \"postgres\" in Alpine\n# https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux; \\\n\taddgroup -g 70 -S postgres; \\\n\tadduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres; \\\n\tmkdir -p /var/lib/postgresql; \\\n\tchown -R postgres:postgres /var/lib/postgresql\n\n# su-exec (gosu-compatible) is installed further down\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n# alpine doesn't require explicit locale-file generation\nENV LANG en_US.utf8\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nENV PG_MAJOR 14\nENV PG_VERSION 14.2\nENV PG_SHA256 2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\n\nRUN set -eux; \\\n\t\\\n\twget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\"; \\\n\techo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c -; \\\n\tmkdir -p /usr/src/postgresql; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file postgresql.tar.bz2 \\\n\t\t--directory /usr/src/postgresql \\\n\t\t--strip-components 1 \\\n\t; \\\n\trm postgresql.tar.bz2; \\\n\t\\\n\tapk add --no-cache --virtual .build-deps \\\n\t\tbison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 \\\n\t; \\\n\t\\\n\tcd /usr/src/postgresql; \\\n# update \"DEFAULT_PGSOCKET_DIR\" to \"/var/run/postgresql\" (matching Debian)\n# see https://anonscm.debian.org/git/pkg-postgresql/postgresql.git/tree/debian/patches/51-default-sockets-in-var.patch?id=8b539fcb3e093a521c095e70bdfa76887217b89f\n\tawk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; \\\n\tgrep '/var/run/postgresql' src/include/pg_config_manual.h.new; \\\n\tmv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# explicitly update autoconf config.guess and config.sub so they support more arches/libcs\n\twget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n\twget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n# configure options taken from:\n# https://anonscm.debian.org/cgit/pkg-postgresql/postgresql.git/tree/debian/rules?h=9.5\n\t./configure \\\n\t\t--build=\"$gnuArch\" \\\n# \"/usr/src/postgresql/src/backend/access/common/tupconvert.c:105: undefined reference to `libintl_gettext'\"\n#\t\t--enable-nls \\\n\t\t--enable-integer-datetimes \\\n\t\t--enable-thread-safety \\\n\t\t--enable-tap-tests \\\n# skip debugging info -- we want tiny size instead\n#\t\t--enable-debug \\\n\t\t--disable-rpath \\\n\t\t--with-uuid=e2fs \\\n\t\t--with-gnu-ld \\\n\t\t--with-pgport=5432 \\\n\t\t--with-system-tzdata=/usr/share/zoneinfo \\\n\t\t--prefix=/usr/local \\\n\t\t--with-includes=/usr/local/include \\\n\t\t--with-libraries=/usr/local/lib \\\n\t\t--with-krb5 \\\n\t\t--with-gssapi \\\n\t\t--with-ldap \\\n\t\t--with-tcl \\\n\t\t--with-perl \\\n\t\t--with-python \\\n#\t\t--with-pam \\\n\t\t--with-openssl \\\n\t\t--with-libxml \\\n\t\t--with-libxslt \\\n\t\t--with-icu \\\n\t\t--with-llvm \\\n\t\t--with-lz4 \\\n\t; \\\n\tmake -j \"$(nproc)\" world; \\\n\tmake install-world; \\\n\tmake -C contrib install;\n# hadolint ignore=DL3018\nRUN\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n# Remove plperl, plpython and pltcl dependencies by default to save image size\n# To use the pl extensions, those have to be installed in a derived image\n\t\t\t| grep -v -e perl -e python -e tcl \\\n\t)\"; \\\n\tapk add --no-cache --virtual .postgresql-rundeps \\\n\t\t$runDeps \\\n\t\tbash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 \\\n\t; \\\n\tapk del --no-network .build-deps; \\\n\tcd /; \\\n\trm -rf \\\n\t\t/usr/src/postgresql \\\n\t\t/usr/local/share/doc \\\n\t\t/usr/local/share/man \\\n\t; \\\n\t\\\n\tpostgres --version\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tcp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\n\nRUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data\n# this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" && chown -R postgres:postgres \"$PGDATA\" && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk, which is the best compromise available to avoid data\n# corruption.\n#\n# Users who know their applications do not keep open long-lived idle connections\n# may way to use a value of SIGTERM instead, which corresponds to \"Smart\n# Shutdown mode\" in which any existing sessions are allowed to finish and the\n# server stops when all sessions are terminated.\n#\n# See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/12/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/12/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\n\nCOPY docker-healthcheck /usr/local/bin/\n\nHEALTHCHECK CMD [\"docker-healthcheck\"]\n\nCMD [\"postgres\"]\n","injectedSmells":["do-not-use-apt-get-update-alone","pin-package-manager-versions-apt-get","pin-package-manager-versions-pip","pin-package-manager-versions-npm","use-wget-instead-of-add","do-not-have-secrets"],"originalDockerfileHash":"d6a43fb100e73b9efeb2602c9a56c01a","successfullyInjectedSmells":["do-not-have-secrets"],"originalDockerfileUglified":"#\n#  NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n#\n#  PLEASE DO NOT EDIT IT DIRECTLY.\n#\nFROM alpine:3.15\nSHELL [\"/bin/ash\", \"-o\", \"pipefail\", \"-c\"]\n#  70 is the standard uid/gid for \"postgres\" in Alpine\n#  https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux ; addgroup -g 70 -S postgres ; adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres ; mkdir -p /var/lib/postgresql ; chown -R postgres:postgres /var/lib/postgresql\n#  su-exec (gosu-compatible) is installed further down\n#  make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n#  alpine doesn't require explicit locale-file generation\nENV LANG=\"en_US.utf8\"\nRUN mkdir /docker-entrypoint-initdb.d\nENV PG_MAJOR=\"14\"\nENV PG_VERSION=\"14.2\"\nENV PG_SHA256=\"2cf78b2e468912f8101d695db5340cf313c2e9f68a612fb71427524e8c9a977a\"\nRUN set -eux ; wget -nv -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\" ; echo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c - ; mkdir -p /usr/src/postgresql ; tar --extract --file postgresql.tar.bz2 --directory /usr/src/postgresql --strip-components 1 ; rm postgresql.tar.bz2 ; apk add --no-cache --virtual .build-deps bison=3.7.6-r0 coreutils=9.0-r2 dpkg-dev=1.20.10-r0 dpkg=1.20.10-r0 flex=2.6.4-r2 gcc=10.3.1_git20211027-r0 krb5-dev=1.19.4-r0 libc-dev=0.7.2-r3 libedit-dev=20210910.3.1-r0 libxml2-dev=2.9.14-r2 libxslt-dev=1.1.35-r0 linux-headers=5.10.41-r0 llvm12-dev=12.0.1-r0 clang=12.0.1-r1 g++=10.3.1_git20211027-r0 make=4.3-r0 openldap-dev=2.6.2-r0 openssl-dev=1.1.1t-r3 perl-utils=5.34.0-r1 perl-ipc-run=20200505.0-r1 perl-dev=5.34.0-r1 python3-dev=3.9.16-r0 tcl-dev=8.6.11-r1 util-linux-dev=2.37.4-r0 zlib-dev=1.2.12-r3 icu-dev=69.1-r1 lz4-dev=1.9.3-r1 ; cd /usr/src/postgresql ; awk '$1 == \"#define\" \\\n && $2 == \"DEFAULT_PGSOCKET_DIR\" \\\n && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; grep '/var/run/postgresql' src/include/pg_config_manual.h.new ; mv src/include/pg_config_manual.h.new src/include/pg_config_manual.h ; gnuArch=\"$( dpkg-architecture --query DEB_BUILD_GNU_TYPE ;)\" ; wget -nv -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb' ; wget -nv -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb' ; ./configure --build=\"$gnuArch\" --enable-integer-datetimes --enable-thread-safety --enable-tap-tests --disable-rpath --with-uuid=e2fs --with-gnu-ld --with-pgport=5432 --with-system-tzdata=/usr/share/zoneinfo --prefix=/usr/local --with-includes=/usr/local/include --with-libraries=/usr/local/lib --with-krb5 --with-gssapi --with-ldap --with-tcl --with-perl --with-python --with-openssl --with-libxml --with-libxslt --with-icu --with-llvm --with-lz4 ; make -j \"$( nproc ;)\" world ; make install-world ; make -C contrib install\n#  hadolint ignore=DL3018\nRUN runDeps=\"$( scanelf --needed --nobanner --format '%n#p' --recursive /usr/local | tr ',' '\\n' | sort -u | awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' | grep -v -e perl -e python -e tcl ;)\" ; apk add --no-cache --virtual .postgresql-rundeps $runDeps bash=5.1.16-r0 su-exec=0.2-r1 tzdata=2023c-r0 ; apk del --no-network .build-deps ; cd / ; rm -rf /usr/src/postgresql /usr/local/share/doc /usr/local/share/man ; postgres --version\n#  make the sample config easier to munge (and \"correct by default\")\nRUN set -eux ; cp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig ; sed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample ; grep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\nRUN mkdir -p /var/run/postgresql \\\n && chown -R postgres:postgres /var/run/postgresql \\\n && chmod 2777 /var/run/postgresql\nENV PGDATA=\"/var/lib/postgresql/data\"\n#  this 777 will be replaced by 700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN mkdir -p \"$PGDATA\" \\\n && chown -R postgres:postgres \"$PGDATA\" \\\n && chmod 777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\nCOPY docker-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n#  We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n#  calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n#  in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n#  flush tables to disk, which is the best compromise available to avoid data\n#  corruption.\n#\n#  Users who know their applications do not keep open long-lived idle connections\n#  may way to use a value of SIGTERM instead, which corresponds to \"Smart\n#  Shutdown mode\" in which any existing sessions are allowed to finish and the\n#  server stops when all sessions are terminated.\n#\n#  See https://www.postgresql.org/docs/12/server-shutdown.html for more details\n#  about available PostgreSQL server shutdown signals.\n#\n#  See also https://www.postgresql.org/docs/12/server-start.html for further\n#  justification of this as the default value, namely that the example (and\n#  shipped) systemd service files use the \"Fast Shutdown mode\" for service\n#  termination.\n#\nSTOPSIGNAL SIGINT\n#\n#  An additional setting that is recommended for all users regardless of this\n#  value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n#  equivalent) for controlling how long to wait between sending the defined\n#  STOPSIGNAL and sending SIGKILL (which is likely to cause data corruption).\n#\n#  The default in most runtimes (such as Docker) is 10 seconds, and the\n#  documentation at https://www.postgresql.org/docs/12/server-start.html notes\n#  that even 90 seconds may not be long enough in many instances.\nEXPOSE 5432/tcp\nCOPY docker-healthcheck /usr/local/bin/\nHEALTHCHECK CMD [\"docker-healthcheck\"]\nCMD [\"postgres\"]\n","originalDockerfileUglifiedHash":"e08c41d3e5e8656994d7489bafd121e1","fileName":"/ICSME-replicationpackage/dataset/smellfree_dockerfiles/postgres__14.2-alpine.dockerfile"}