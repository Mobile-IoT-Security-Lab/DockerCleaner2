module RandomHelper where

import Data.Word (Word64)
import System.Random (RandomGen)
import System.Random.SplitMix (mkSMGen)
import System.Random.Stateful (StatefulGen, Uniform (uniformM), runStateGen)
import Test.QuickCheck (Arbitrary (arbitrary), Gen, chooseInt, vectorOf)
import Test.QuickCheck.Arbitrary (Arbitrary)
import Test.QuickCheck.Gen (Gen (MkGen))
import Test.QuickCheck.Random (QCGen (QCGen))
import Control.Monad (liftM2)

-- Generate a random value from a generator by creating a new QuickCheck generator using the provided seed.
generate :: Word64 -> Gen a -> a
generate seed (MkGen g) = g (QCGen (mkSMGen seed)) 30

-- Use the stateful generator to get a random value from the QuickCheck generator.
-- For this a new QuickCheck generator is created from a random seed generated by the stateful generator.
fromGenM :: (StatefulGen g m) => Gen a -> g -> m a
fromGenM generator g = (`generate` generator) <$> uniformM g

-- Use the random generator to get a random value from the QuickCheck generator.
fromGen :: RandomGen g => Gen a -> g -> (a, g)
fromGen generator g = runStateGen g $ fromGenM generator

-- Use the random generator to get a random value from an arbitrary.
fromArbitrary :: (RandomGen g, Arbitrary a) => g -> (a, g)
fromArbitrary = fromGen arbitrary

-- Get a generator for a vector of a random length that is in the provided range.
vectorOfRange :: (Int, Int) -> Gen a -> Gen [a]
vectorOfRange range generator = chooseInt range >>= (`vectorOf` generator)

(|++|) :: Monad m => m String -> m String -> m String
(|++|) = liftM2 (++)

(|++) :: Monad m => m String -> String -> m String
(|++) a b = fmap (++ b) a

(++|) :: Monad m => String -> m String -> m String
(++|) a = fmap (a ++)
